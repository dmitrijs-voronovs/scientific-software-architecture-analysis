quality_attribute,keyword,matched_word,sentence,source,filename,author,repo,version,wiki,url
Availability,mask,mask,""". ;  ; void ClearArea (Window_t id, Int_t x, Int_t y, UInt_t w, UInt_t h) override;  Clear a window area to the bakcground color. ;  ; void ClearWindow () override;  Clear current window. ;  ; void ClearWindow (Window_t id) override;  Clear window. ;  ; void CloseDisplay () override;  close display (terminate server/gMainThread thread) ;  ; void ClosePixmap () override;  Delete current pixmap. ;  ; void CloseWindow () override;  Delete current window. ;  ; void ConvertPrimarySelection (Window_t id, Atom_t clipboard, Time_t when) override;  XConvertSelection() causes a SelectionRequest event to be sent to the current primary selection owner. ;  ; void ConvertSelection (Window_t, Atom_t &, Atom_t &, Atom_t &, Time_t &) override;  Get Clipboard data. ;  ; void CopyArea (Drawable_t src, Drawable_t dest, GContext_t gc, Int_t src_x, Int_t src_y, UInt_t width, UInt_t height, Int_t dest_x, Int_t dest_y) override;  Copy a drawable (i.e. ;  ; void CopyGC (GContext_t org, GContext_t dest, Mask_t mask) override;  Copies graphics context from org to dest. ;  ; void CopyPixmap (Int_t wid, Int_t xpos, Int_t ypos) override;  Copy the pixmap wid at the position xpos, ypos in the current window. ;  ; Pixmap_t CreateBitmap (Drawable_t id, const char *bitmap, UInt_t width, UInt_t height) override;  Create a bitmap (i.e. pixmap with depth 1) from the bitmap data. ;  ; Cursor_t CreateCursor (ECursor cursor) override;  Create cursor handle (just return cursor from cursor pool fCursors). ;  ; GContext_t CreateGC (Drawable_t id, GCValues_t *gval) override;  Create a graphics context using the values set in gval (but only for those entries that are in the mask). ;  ; Drawable_t CreateImage (UInt_t width, UInt_t height) override;  Allocates the memory needed for an drawable. ;  ; Bool_t CreatePictureFromData (Drawable_t id, char **data, Pixmap_t &pict, Pixmap_t &pict_mask, PictureAttributes_t &attr) override;  Create a pixture pixmap from data. ;  ; Bool_t CreatePictureFromFile (Drawable_t id",MatchSource.WIKI,doc/master/classTGWin32.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGWin32.html
Deployability,update,updated," principle what ROOT understands as ascent is text related. ;  ; virtual Int_t GetFontDescent () const;  Returns the descent of the current font (in pixels. ;  ; virtual Int_t GetFontDescent (const char *mess) const;  Default version is noop, but in principle what ROOT understands as descent requires a certain text. ;  ; virtual FontStruct_t GetGCFont (GContext_t gc);  Return the font associated with the graphics context gc. ;  ; virtual Handle_t GetNativeEvent () const;  Returns the current native event handle. ;  ; virtual Double_t GetOpenGLScalingFactor ();  On a HiDPI resolution it can be > 1., this means glViewport should use scaled width and height. ;  ; TClass * IsA () const override;  ; virtual Bool_t MakeOpenGLContextCurrent (Handle_t ctx, Window_t windowID);  Makes context ctx current OpenGL context. ;  ; virtual void MapGCFont (GContext_t, FontStruct_t);  Map the XftFont with the Graphics Context using it. ;  ; virtual Bool_t NeedRedraw (ULongptr_t tgwindow, Bool_t force);  Notify the low level GUI layer ROOT requires ""tgwindow"" to be updated. ;  ; virtual void SelectPixmap (Int_t qpixid);  Selects the pixmap ""qpixid"". ;  ; void SetFillColor (Color_t cindex) override;  Sets color index ""cindex"" for fill areas. ;  ; void SetFillStyle (Style_t style) override;  Sets fill area style. ;  ; void SetLineColor (Color_t cindex) override;  Sets color index ""cindex"" for drawing lines. ;  ; void SetLineStyle (Style_t linestyle) override;  Sets the line style. ;  ; void SetLineWidth (Width_t width) override;  Sets the line width. ;  ; void SetMarkerColor (Color_t cindex) override;  Sets color index ""cindex"" for markers. ;  ; void SetMarkerSize (Float_t markersize) override;  Sets marker size index. ;  ; void SetMarkerStyle (Style_t markerstyle) override;  Sets marker style. ;  ; void SetTextAlign (Short_t talign=11) override;  Sets the text alignment. ;  ; void SetTextColor (Color_t cindex) override;  Sets the color index ""cindex"" for text. ;  ; void SetTextFont (Fon",MatchSource.WIKI,doc/master/classTGWin32.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGWin32.html
Energy Efficiency,allocate,allocate,"ctions |; Protected Member Functions |; Protected Attributes |; Private Types |; Private Member Functions |; Private Attributes |; List of all members ; TGWin32 Class ReferenceGraphics » Graphics' Backends » Win32 backend. ; This class is the basic interface to the Win32 graphics system. ; It is an implementation of the abstract TVirtualX class.; This code was initially developed in the context of HIGZ and PAW by Olivier Couet (package X11INT). ; Definition at line 64 of file TGWin32.h. Public Member Functions;  TGWin32 ();  Default constructor. ;  ;  TGWin32 (const char *name, const char *title);  Normal Constructor. ;  ; virtual ~TGWin32 ();  destructor. ;  ; Int_t AddPixmap (ULongptr_t pix, UInt_t w, UInt_t h) override;  register pixmap created by TGWin32GLManager ;  ; Int_t AddWindow (ULongptr_t qwid, UInt_t w, UInt_t h) override;  Register a window created by Qt as a ROOT window (like InitWindow()). ;  ; Bool_t AllocColor (Colormap_t cmap, ColorStruct_t &color) override;  Find and allocate a color cell according to the color values specified in the ColorStruct_t. ;  ; void Bell (Int_t percent) override;  Sets the sound bell. Percent is loudness from -100% to 100%. ;  ; void ChangeActivePointerGrab (Window_t, UInt_t, Cursor_t) override;  Changes the active cursor of the specified window. ;  ; void ChangeGC (GContext_t gc, GCValues_t *gval) override;  Change entries in an existing graphics context, gc, by values from gval. ;  ; void ChangeProperties (Window_t id, Atom_t property, Atom_t type, Int_t format, UChar_t *data, Int_t len) override;  Put data into Clipboard. ;  ; void ChangeProperty (Window_t id, Atom_t property, Atom_t type, UChar_t *data, Int_t len) override;  This function alters the property for the specified window and causes the X server to generate a PropertyNotify event on that window. ;  ; void ChangeWindowAttributes (Window_t id, SetWindowAttributes_t *attr) override;  Change window attributes. ;  ; Bool_t CheckEvent (Window_t id, EGEventType ty",MatchSource.WIKI,doc/master/classTGWin32.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGWin32.html
Integrability,interface,interface,". ROOT: TGWin32 Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; Private Types |; Private Member Functions |; Private Attributes |; List of all members ; TGWin32 Class ReferenceGraphics » Graphics' Backends » Win32 backend. ; This class is the basic interface to the Win32 graphics system. ; It is an implementation of the abstract TVirtualX class.; This code was initially developed in the context of HIGZ and PAW by Olivier Couet (package X11INT). ; Definition at line 64 of file TGWin32.h. Public Member Functions;  TGWin32 ();  Default constructor. ;  ;  TGWin32 (const char *name, const char *title);  Normal Constructor. ;  ; virtual ~TGWin32 ();  destructor. ;  ; Int_t AddPixmap (ULongptr_t pix, UInt_t w, UInt_t h) override;  register pixmap created by TGWin32GLManager ;  ; Int_t AddWindow (ULongptr_t qwid, UInt_t w, UInt_t h) override;  Register a window created by Qt as a ROOT window (like InitWindow()). ;  ; Bool_t AllocColor (Colormap_t cmap, ColorStruct_t &color) override;  Find and allocate a color cell according to the color values specified in the ColorStruct_t. ;  ; void Bell (Int_t percent) override;  Sets the sound bell. Percent is loudness from -100% to 100%. ;  ; void ChangeActivePointerGrab (Window_t, UInt_t, Cursor_t) override;  Changes the active cursor of the specified window. ;  ; void ChangeGC (GContext_t gc, GCValues_t *gval) override;  Change entries in an existing graphics context, gc, by values from gval. ;  ; void ChangeProperties (Window_t id, Atom_t property, Atom_t type, Int_t format, UChar_t *data, Int_t len) override;  Put data into Clipboard. ;  ; void ChangeProperty (Window_t id, Atom_t property, Atom_t type, UChar_t *data, Int_t len) override;  This function alters the property for the specified window and causes the X server to generate a PropertyNotif",MatchSource.WIKI,doc/master/classTGWin32.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGWin32.html
Modifiability,inherit,inherited,"onRegion (Region_t rega, Region_t regb, Region_t result) override;  Compute the union of rega and regb and return result region. ;  ; void UnmapWindow (Window_t id) override;  Unmap window from screen. ;  ; void Update (Int_t mode=0) override;  Flush (mode = 0, default) or synchronize (mode = 1) X output buffer. ;  ; void UpdateWindow (Int_t mode) override;  Update display. ;  ; void Warp (Int_t ix, Int_t iy, Window_t id=0) override;  Set pointer position. ;  ; void WMDeleteNotify (Window_t id) override;  Tell WM to send message when window is closed via WM. ;  ; Int_t WriteGIF (char *name) override;  Writes the current window into GIF file. ;  ; void WritePixmap (Int_t wid, UInt_t w, UInt_t h, char *pxname) override;  Write the pixmap wid in the bitmap file pxname. ;  ; void XorRegion (Region_t rega, Region_t regb, Region_t result) override;  Calculate the difference between the union and intersection of two regions. ;  ;  Public Member Functions inherited from TVirtualX;  TVirtualX ();  ;  TVirtualX (const char *name, const char *title);  Ctor of ABC. ;  ; virtual ~TVirtualX ();  ; virtual void BeginModalSessionFor (Window_t window);  Start a modal session for a dialog window. ;  ; virtual void CreateOpenGLContext (Int_t wid=0);  Creates OpenGL context for window ""wid"". ;  ; virtual Handle_t CreateOpenGLContext (Window_t windowID, Handle_t sharedContext);  Creates OpenGL context for window ""windowID"". ;  ; virtual Window_t CreateOpenGLWindow (Window_t parentID, UInt_t width, UInt_t height, const std::vector< std::pair< UInt_t, Int_t > > &format);  Create window with special pixel format. Noop everywhere except Cocoa. ;  ; virtual void DeleteOpenGLContext (Int_t wid=0);  Deletes OpenGL context for window ""wid"". ;  ; virtual void DispatchClientMessage (UInt_t messageID);  Force processing of event, sent by SendEvent before. ;  ; virtual UInt_t ExecCommand (TGWin32Command *code);  Executes the command ""code"" coming from the other threads (Win32) ;  ; virtual void Flu",MatchSource.WIKI,doc/master/classTGWin32.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGWin32.html
Performance,queue,queue,"query font. ;  ; void LookupString (Event_t *event, char *buf, Int_t buflen, UInt_t &keysym) override;  Convert the keycode from the event structure to a key symbol (according to the modifiers specified in the event structure and the current keyboard mapping). ;  ; void LowerWindow (Window_t id) override;  Lower window so it lays below all its siblings. ;  ; void MapRaised (Window_t id) override;  Map window on screen and put on top of all windows. ;  ; void MapSubwindows (Window_t id) override;  Maps all subwindows for the specified window ""id"" in top-to-bottom stacking order. ;  ; void MapWindow (Window_t id) override;  Map window on screen. ;  ; void MoveResizeWindow (Window_t id, Int_t x, Int_t y, UInt_t w, UInt_t h) override;  Move and resize a window. ;  ; void MoveWindow (Int_t wid, Int_t x, Int_t y) override;  Move the window wid. ;  ; void MoveWindow (Window_t id, Int_t x, Int_t y) override;  Move a window. ;  ; void NextEvent (Event_t &event) override;  Copies first pending event from event queue to Event_t structure and removes event from queue. ;  ; Int_t OpenDisplay (const char *dpyName=0) override;  Open the display. Return -1 if the opening fails, 0 when ok. ;  ; Int_t OpenPixmap (UInt_t w, UInt_t h) override;  Open a new pixmap. ;  ; Bool_t ParseColor (Colormap_t cmap, const char *cname, ColorStruct_t &color) override;  Parse string cname containing color name, like ""green"" or ""#00FF00"". ;  ; Bool_t PointInRegion (Int_t x, Int_t y, Region_t reg) override;  Returns true if the point x,y is in the region. ;  ; Region_t PolygonRegion (Point_t *points, Int_t np, Bool_t winding) override;  Create region for the polygon defined by the points array. ;  ; void PutImage (Drawable_t id, GContext_t gc, Drawable_t img, Int_t dx, Int_t dy, Int_t x, Int_t y, UInt_t w, UInt_t h) override;  Combines an image with a rectangle of the specified drawable. ;  ; void PutPixel (Drawable_t id, Int_t x, Int_t y, ULong_t pixel) override;  Overwrites the pixel in the image with",MatchSource.WIKI,doc/master/classTGWin32.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGWin32.html
Security,hash,hash,"nt, returns 0 in case extension is not supported and returns -1 in case of error (like server not initialized). ;  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; Bool_t IsSortable () const override;  ; void ls (Option_t *option="""") const override;  List TNamed name and title. ;  ; TNamed & operator= (const TNamed &rhs);  TNamed assignment operator. ;  ; void Print (Option_t *option="""") const override;  Print TNamed name and title. ;  ; virtual void SetName (const char *name);  Set the name of the TNamed. ;  ; virtual void SetNameTitle (const char *name, const char *title);  Set all the TNamed parameters (name and title). ;  ; virtual void SetTitle (const char *title="""");  Set the title of the TNamed. ;  ; virtual Int_t Sizeof () const;  Return size of the TNamed part of the TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this met",MatchSource.WIKI,doc/master/classTGWin32.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGWin32.html
Testability,log,logically,"ining color name, like ""green"" or ""#00FF00"". ;  ; Bool_t PointInRegion (Int_t x, Int_t y, Region_t reg) override;  Returns true if the point x,y is in the region. ;  ; Region_t PolygonRegion (Point_t *points, Int_t np, Bool_t winding) override;  Create region for the polygon defined by the points array. ;  ; void PutImage (Drawable_t id, GContext_t gc, Drawable_t img, Int_t dx, Int_t dy, Int_t x, Int_t y, UInt_t w, UInt_t h) override;  Combines an image with a rectangle of the specified drawable. ;  ; void PutPixel (Drawable_t id, Int_t x, Int_t y, ULong_t pixel) override;  Overwrites the pixel in the image with the specified pixel value. ;  ; void QueryColor (Colormap_t cmap, ColorStruct_t &color) override;  Fill in the primary color components for a specific pixel value. ;  ; void QueryPointer (Int_t &ix, Int_t &iy) override;  Query pointer position. ;  ; void QueryPointer (Window_t id, Window_t &rootw, Window_t &childw, Int_t &root_x, Int_t &root_y, Int_t &win_x, Int_t &win_y, UInt_t &mask) override;  Returns the root window the pointer is logically on and the pointer coordinates relative to the root window's origin. ;  ; void RaiseWindow (Window_t id) override;  Put window on top of window stack. ;  ; Pixmap_t ReadGIF (Int_t x0, Int_t y0, const char *file, Window_t id=0) override;  If id is NULL - loads the specified gif file at position [x0,y0] in the current window. ;  ; Bool_t ReadPictureDataFromFile (const char *filename, char ***ret_data) override;  Read picture data from file and store in ret_data. ;  ; void RemoveWindow (ULongptr_t qwid) override;  Remove a window created by Qt (like CloseWindow1()). ;  ; void ReparentWindow (Window_t id, Window_t pid, Int_t x, Int_t y) override;  Reparent window, make pid the new parent and position the window at position (x,y) in new parent. ;  ; Int_t RequestLocator (Int_t mode, Int_t ctyp, Int_t &x, Int_t &y) override;  Request Locator position. ;  ; Int_t RequestString (Int_t x, Int_t y, char *text) override;  Request",MatchSource.WIKI,doc/master/classTGWin32.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGWin32.html
Availability,error,error,"object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Return",MatchSource.WIKI,doc/master/classTGWin32CallBackObject.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGWin32CallBackObject.html
Integrability,message,message,"object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Return",MatchSource.WIKI,doc/master/classTGWin32CallBackObject.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGWin32CallBackObject.html
Modifiability,inherit,inherited,". ROOT: TGWin32CallBackObject Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Public Attributes |; List of all members ; TGWin32CallBackObject Class Reference. . Definition at line 90 of file TGWin32ProxyBase.cxx. Public Member Functions;  TGWin32CallBackObject (TGWin32CallBack cb, void *p);  ;  ~TGWin32CallBackObject ();  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object i",MatchSource.WIKI,doc/master/classTGWin32CallBackObject.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGWin32CallBackObject.html
Security,hash,hash," Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Returns name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual const char * GetTitle () const;  Returns title of object. ;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; virtual ULong_t Hash () const;  Return hash value for this object. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns kTRUE if object inherits from class ""classname"". ;  ; virtual Bool_t InheritsFrom (const TClass *cl) const;  Returns kTRUE if object inherits from TClass cl. ;  ; virtual void Inspect () const;  Dump contents of this object in a graphics canvas. ;  ; void InvertBit (UInt_t f);  ; virtual TClass * IsA () const;  ; Bool_t IsDestructed () const;  IsDestructed. ;  ; virtual Bool_t IsEqual (const TObject *obj) const;  Default equal comparison (objects are equal if they have the same address in memory). ;  ; virtual Bool_t IsFolder () const;  Returns kTRUE in case object contains browsable objects (like containers or lists of other obje",MatchSource.WIKI,doc/master/classTGWin32CallBackObject.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGWin32CallBackObject.html
Availability,error,error,"ject. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t ",MatchSource.WIKI,doc/master/classTGWin32GLManager.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGWin32GLManager.html
Integrability,message,message,"ject. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t ",MatchSource.WIKI,doc/master/classTGWin32GLManager.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGWin32GLManager.html
Modifiability,inherit,inherited,"nd) override;  ; void MarkForDirectCopy (Int_t devInd, Bool_t) override;  ; void PaintSingleObject (TVirtualGLPainter *) override;  ; void PanObject (TVirtualGLPainter *o, Int_t x, Int_t y) override;  ; Bool_t PlotSelected (TVirtualGLPainter *plot, Int_t px, Int_t py) override;  ; void PrintViewer (TVirtualViewer3D *vv) override;  ; void ReadGLBuffer (Int_t devInd) override;  ; Bool_t ResizeOffScreenDevice (Int_t devInd, Int_t x, Int_t y, UInt_t w, UInt_t h) override;  Create new DIB if needed. ;  ; Bool_t SelectManip (TVirtualGLManip *manip, const TGLCamera *camera, const TGLRect *rect, const TGLBoundingBox *sceneBox) override;  ; void SelectOffScreenDevice (Int_t devInd) override;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TGLManager;  TGLManager ();  ;  TGLManager (const TGLManager &)=delete;  ; TGLManager & operator= (const TGLManager &)=delete;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; TC",MatchSource.WIKI,doc/master/classTGWin32GLManager.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGWin32GLManager.html
Security,hash,hash,"Manager & operator= (const TGLManager &)=delete;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; TClass * IsA () const override;  ; Bool_t IsSortable () const override;  ; void ls (Option_t *option="""") const override;  List TNamed name and title. ;  ; TNamed & operator= (const TNamed &rhs);  TNamed assignment operator. ;  ; void Print (Option_t *option="""") const override;  Print TNamed name and title. ;  ; virtual void SetName (const char *name);  Set the name of the TNamed. ;  ; virtual void SetNameTitle (const char *name, const char *title);  Set all the TNamed parameters (name and title). ;  ; virtual void SetTitle (const char *title="""");  Set the title of the TNamed. ;  ; virtual Int_t Sizeof () const;  Return size of the TNamed part of the TObject. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;",MatchSource.WIKI,doc/master/classTGWin32GLManager.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGWin32GLManager.html
Availability,mask,mask,"s ; TGWin32VirtualXProxy Class Reference. . Definition at line 30 of file TGWin32VirtualXProxy.h. Public Member Functions;  TGWin32VirtualXProxy ();  ;  TGWin32VirtualXProxy (const char *name, const char *title);  ;  ~TGWin32VirtualXProxy () override;  ; Int_t AddWindow (ULongptr_t qwid, UInt_t w, UInt_t h) override;  Registers a window created by Qt as a ROOT window. ;  ; Bool_t AllocColor (Colormap_t cmap, ColorStruct_t &color) override;  Allocates a read-only colormap entry corresponding to the closest RGB value supported by the hardware. ;  ; void Bell (Int_t percent) override;  Sets the sound bell. Percent is loudness from -100% to 100%. ;  ; void ChangeActivePointerGrab (Window_t, UInt_t, Cursor_t) override;  Changes the specified dynamic parameters if the pointer is actively grabbed by the client and if the specified time is no earlier than the last-pointer-grab time and no later than the current X server time. ;  ; void ChangeGC (GContext_t gc, GCValues_t *gval) override;  Changes the components specified by the mask in gval for the specified GC. ;  ; void ChangeProperties (Window_t id, Atom_t property, Atom_t type, Int_t format, UChar_t *data, Int_t len) override;  Alters the property for the specified window and causes the X server to generate a PropertyNotify event on that window. ;  ; void ChangeProperty (Window_t id, Atom_t property, Atom_t type, UChar_t *data, Int_t len) override;  Alters the property for the specified window and causes the X server to generate a PropertyNotify event on that window. ;  ; void ChangeWindowAttributes (Window_t id, SetWindowAttributes_t *attr) override;  Changes the attributes of the specified window ""id"" according the values provided in ""attr"". ;  ; Bool_t CheckEvent (Window_t id, EGEventType type, Event_t &ev) override;  Check if there is for window ""id"" an event of type ""type"". ;  ; void ClearArea (Window_t id, Int_t x, Int_t y, UInt_t w, UInt_t h) override;  Paints a rectangular area in the specified window ""id"" accord",MatchSource.WIKI,doc/master/classTGWin32VirtualXProxy.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGWin32VirtualXProxy.html
Deployability,update,updated," ; virtual Int_t GetFontAscent (const char *mess) const;  Default version is noop, but in principle what ROOT understands as ascent is text related. ;  ; virtual Int_t GetFontDescent () const;  Returns the descent of the current font (in pixels. ;  ; virtual Int_t GetFontDescent (const char *mess) const;  Default version is noop, but in principle what ROOT understands as descent requires a certain text. ;  ; virtual FontStruct_t GetGCFont (GContext_t gc);  Return the font associated with the graphics context gc. ;  ; virtual Double_t GetOpenGLScalingFactor ();  On a HiDPI resolution it can be > 1., this means glViewport should use scaled width and height. ;  ; TClass * IsA () const override;  ; virtual Bool_t MakeOpenGLContextCurrent (Handle_t ctx, Window_t windowID);  Makes context ctx current OpenGL context. ;  ; virtual void MapGCFont (GContext_t, FontStruct_t);  Map the XftFont with the Graphics Context using it. ;  ; virtual Bool_t NeedRedraw (ULongptr_t tgwindow, Bool_t force);  Notify the low level GUI layer ROOT requires ""tgwindow"" to be updated. ;  ; virtual Pixmap_t ReadGIF (Int_t x0, Int_t y0, const char *file, Window_t id=0);  If id is NULL - loads the specified gif file at position [x0,y0] in the current window. ;  ; virtual UInt_t ScreenWidthMM () const;  Returns the width of the screen in millimeters. ;  ; virtual void SelectPixmap (Int_t qpixid);  Selects the pixmap ""qpixid"". ;  ; void SetFillColor (Color_t cindex) override;  Sets color index ""cindex"" for fill areas. ;  ; void SetFillStyle (Style_t style) override;  Sets fill area style. ;  ; void SetLineColor (Color_t cindex) override;  Sets color index ""cindex"" for drawing lines. ;  ; void SetLineStyle (Style_t linestyle) override;  Sets the line style. ;  ; void SetLineWidth (Width_t width) override;  Sets the line width. ;  ; void SetMarkerColor (Color_t cindex) override;  Sets color index ""cindex"" for markers. ;  ; void SetMarkerSize (Float_t markersize) override;  Sets marker size index. ;  ; v",MatchSource.WIKI,doc/master/classTGWin32VirtualXProxy.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGWin32VirtualXProxy.html
Energy Efficiency,allocate,allocated,"finition at line 38 of file TGWin32VirtualXProxy.h. ◆ TGWin32VirtualXProxy() [2/2]. TGWin32VirtualXProxy::TGWin32VirtualXProxy ; (; const char * ; name, . const char * ; title . ). inline . Definition at line 39 of file TGWin32VirtualXProxy.h. ◆ ~TGWin32VirtualXProxy(). TGWin32VirtualXProxy::~TGWin32VirtualXProxy ; (; ). inlineoverride . Definition at line 40 of file TGWin32VirtualXProxy.h. Member Function Documentation. ◆ AddWindow(). Int_t TGWin32VirtualXProxy::AddWindow ; (; ULongptr_t ; qwid, . UInt_t ; w, . UInt_t ; h . ). overridevirtual . Registers a window created by Qt as a ROOT window. ; Parameters. [in]qwidwindow identifier ; [in]w,hthe width and height, which define the window size . Reimplemented from TVirtualX. ◆ AllocColor(). Bool_t TGWin32VirtualXProxy::AllocColor ; (; Colormap_t ; cmap, . ColorStruct_t & ; color . ). overridevirtual . Allocates a read-only colormap entry corresponding to the closest RGB value supported by the hardware. ; If no cell could be allocated it returns kFALSE, otherwise kTRUE.; The pixel value is set to default. Let system think we could allocate color.; Parameters. [in]cmapthe colormap ; [in]colorspecifies and returns the values actually used in the cmap . Reimplemented from TVirtualX. ◆ Bell(). void TGWin32VirtualXProxy::Bell ; (; Int_t ; percent). overridevirtual . Sets the sound bell. Percent is loudness from -100% to 100%. ; Reimplemented from TVirtualX. ◆ ChangeActivePointerGrab(). void TGWin32VirtualXProxy::ChangeActivePointerGrab ; (; Window_t ; , . UInt_t ; , . Cursor_t ;  . ). overridevirtual . Changes the specified dynamic parameters if the pointer is actively grabbed by the client and if the specified time is no earlier than the last-pointer-grab time and no later than the current X server time. ; Reimplemented from TVirtualX. ◆ ChangeGC(). void TGWin32VirtualXProxy::ChangeGC ; (; GContext_t ; gc, . GCValues_t * ; gval . ). overridevirtual . Changes the components specified by the mask in gval for the specified ",MatchSource.WIKI,doc/master/classTGWin32VirtualXProxy.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGWin32VirtualXProxy.html
Integrability,depend,depends," manager the desired size of window ""id"". ;  ; void SetWMSizeHints (Window_t id, UInt_t wmin, UInt_t hmin, UInt_t wmax, UInt_t hmax, UInt_t winc, UInt_t hinc) override;  Gives the window manager minimum and maximum size hints of the window ""id"". ;  ; void SetWMState (Window_t id, EInitialState state) override;  Sets the initial state of the window ""id"": either kNormalState or kIconicState. ;  ; void SetWMTransientHint (Window_t id, Window_t main_id) override;  Tells window manager that the window ""id"" is a transient window of the window ""main_id"". ;  ; void ShapeCombineMask (Window_t id, Int_t x, Int_t y, Pixmap_t mask) override;  The Non-rectangular Window Shape Extension adds non-rectangular windows to the System. ;  ; void SubtractRegion (Region_t rega, Region_t regb, Region_t result) override;  Subtracts regb from rega and stores the results in result. ;  ; Int_t TextWidth (FontStruct_t font, const char *s, Int_t len) override;  Return length of the string ""s"" in pixels. Size depends on font. ;  ; void TranslateCoordinates (Window_t src, Window_t dest, Int_t src_x, Int_t src_y, Int_t &dest_x, Int_t &dest_y, Window_t &child) override;  Translates coordinates in one window to the coordinate space of another window. ;  ; void UnionRectWithRegion (Rectangle_t *rect, Region_t src, Region_t dest) override;  Updates the destination region from a union of the specified rectangle and the specified source region. ;  ; void UnionRegion (Region_t rega, Region_t regb, Region_t result) override;  Computes the union of two regions. ;  ; void UnmapWindow (Window_t id) override;  Unmaps the specified window ""id"". ;  ; void Update (Int_t mode=0) override;  Flushes (mode = 0, default) or synchronizes (mode = 1) X output buffer. ;  ; void UpdateWindow (Int_t mode) override;  Updates or synchronises client and server once (not permanent). ;  ; void Warp (Int_t ix, Int_t iy, Window_t id=0) override;  Sets the pointer position. ;  ; void WMDeleteNotify (Window_t id) override;  Tells W",MatchSource.WIKI,doc/master/classTGWin32VirtualXProxy.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGWin32VirtualXProxy.html
Modifiability,inherit,inherited,"n_t result) override;  Computes the union of two regions. ;  ; void UnmapWindow (Window_t id) override;  Unmaps the specified window ""id"". ;  ; void Update (Int_t mode=0) override;  Flushes (mode = 0, default) or synchronizes (mode = 1) X output buffer. ;  ; void UpdateWindow (Int_t mode) override;  Updates or synchronises client and server once (not permanent). ;  ; void Warp (Int_t ix, Int_t iy, Window_t id=0) override;  Sets the pointer position. ;  ; void WMDeleteNotify (Window_t id) override;  Tells WM to send message when window is closed via WM. ;  ; Int_t WriteGIF (char *name) override;  Writes the current window into GIF file. ;  ; void WritePixmap (Int_t wid, UInt_t w, UInt_t h, char *pxname) override;  Writes the pixmap ""wid"" in the bitmap file ""pxname"". ;  ; void XorRegion (Region_t rega, Region_t regb, Region_t result) override;  Calculates the difference between the union and intersection of two regions. ;  ;  Public Member Functions inherited from TVirtualX;  TVirtualX ();  ;  TVirtualX (const char *name, const char *title);  Ctor of ABC. ;  ; virtual ~TVirtualX ();  ; virtual Int_t AddPixmap (ULongptr_t pixid, UInt_t w, UInt_t h);  Registers a pixmap created by TGLManager as a ROOT pixmap. ;  ; virtual void BeginModalSessionFor (Window_t window);  Start a modal session for a dialog window. ;  ; virtual void CreateOpenGLContext (Int_t wid=0);  Creates OpenGL context for window ""wid"". ;  ; virtual Handle_t CreateOpenGLContext (Window_t windowID, Handle_t sharedContext);  Creates OpenGL context for window ""windowID"". ;  ; virtual Window_t CreateOpenGLWindow (Window_t parentID, UInt_t width, UInt_t height, const std::vector< std::pair< UInt_t, Int_t > > &format);  Create window with special pixel format. Noop everywhere except Cocoa. ;  ; virtual void DeleteOpenGLContext (Int_t wid=0);  Deletes OpenGL context for window ""wid"". ;  ; virtual void DispatchClientMessage (UInt_t messageID);  Force processing of event, sent by SendEvent before. ;  ; virtual UI",MatchSource.WIKI,doc/master/classTGWin32VirtualXProxy.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGWin32VirtualXProxy.html
Performance,load,loads," override;  Creates a new window and return window number. ;  ; Atom_t InternAtom (const char *atom_name, Bool_t only_if_exist) override;  Returns the atom identifier associated with the specified ""atom_name"" string. ;  ; void IntersectRegion (Region_t rega, Region_t regb, Region_t result) override;  Computes the intersection of two regions. ;  ; Bool_t IsCmdThread () const override;  Return kTRUE if we are inside cmd/server thread. ;  ; Bool_t IsDNDAware (Window_t win, Atom_t *typelist) override;  Checks if the Window is DND aware, and knows any of the DND formats passed in argument. ;  ; Bool_t IsTransparent () const override;  ; Int_t KeysymToKeycode (UInt_t keysym) override;  Converts the ""keysym"" to the appropriate keycode. ;  ; char ** ListFonts (const char *fontname, Int_t max, Int_t &count) override;  Returns list of font names matching fontname regexp, like ""-*-times-*"". ;  ; FontStruct_t LoadQueryFont (const char *font_name) override;  Provides the most common way for accessing a font: opens (loads) the specified font and returns a pointer to the appropriate FontStruct_t structure. ;  ; void LookupString (Event_t *event, char *buf, Int_t buflen, UInt_t &keysym) override;  Convert the keycode from the event structure to a key symbol (according to the modifiers specified in the event structure and the current keyboard mapping). ;  ; void LowerWindow (Window_t id) override;  Lowers the specified window ""id"" to the bottom of the stack so that it does not obscure any sibling windows. ;  ; void MapRaised (Window_t id) override;  Maps the window ""id"" and all of its subwindows that have had map requests on the screen and put this window on the top of of the stack of all windows. ;  ; void MapSubwindows (Window_t id) override;  Maps all subwindows for the specified window ""id"" in top-to-bottom stacking order. ;  ; void MapWindow (Window_t id) override;  Maps the window ""id"" and all of its subwindows that have had map requests. ;  ; void MoveResizeWindow (Window_t i",MatchSource.WIKI,doc/master/classTGWin32VirtualXProxy.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGWin32VirtualXProxy.html
Safety,unsafe,unsafe,"re) ;  ; void GetGeometry (Int_t wid, Int_t &x, Int_t &y, UInt_t &w, UInt_t &h) override;  Returns position and size of window ""wid"". ;  ; void GetImageSize (Drawable_t id, UInt_t &width, UInt_t &height) override;  Returns the width and height of the image id. ;  ; Window_t GetInputFocus () override;  Returns the window id of the window having the input focus. ;  ; Color_t GetLineColor () const override;  Return the line color. ;  ; Style_t GetLineStyle () const override;  Return the line style. ;  ; Width_t GetLineWidth () const override;  Return the line width. ;  ; Color_t GetMarkerColor () const override;  Return the marker color. ;  ; Size_t GetMarkerSize () const override;  Return the marker size. ;  ; Style_t GetMarkerStyle () const override;  Return the marker style. ;  ; Handle_t GetNativeEvent () const override;  Returns the current native event handle. ;  ; Window_t GetParent (Window_t id) const override;  might be thread unsafe (?) ;  ; void GetPasteBuffer (Window_t id, Atom_t atom, TString &text, Int_t &nchar, Bool_t del) override;  Gets contents of the paste buffer ""atom"" into the string ""text"". ;  ; ULong_t GetPixel (Color_t cindex) override;  Returns pixel value associated to specified ROOT color number ""cindex"". ;  ; void GetPlanes (Int_t &nplanes) override;  Returns the maximum number of planes. ;  ; Window_t GetPrimarySelectionOwner () override;  Returns the window id of the current owner of the primary selection. ;  ; Int_t GetProperty (Window_t, Atom_t, Long_t, Long_t, Bool_t, Atom_t, Atom_t *, Int_t *, ULong_t *, ULong_t *, unsigned char **) override;  Returns the actual type of the property; the actual format of the property; the number of 8-bit, 16-bit, or 32-bit items transferred; the number of bytes remaining to be read in the property; and a pointer to the data actually returned. ;  ; void GetRegionBox (Region_t reg, Rectangle_t *rect) override;  Returns smallest enclosing rectangle. ;  ; void GetRGB (Int_t index, Float_t &r, Float_t &g, Fl",MatchSource.WIKI,doc/master/classTGWin32VirtualXProxy.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGWin32VirtualXProxy.html
Security,access,accessing," override;  Creates a new window and return window number. ;  ; Atom_t InternAtom (const char *atom_name, Bool_t only_if_exist) override;  Returns the atom identifier associated with the specified ""atom_name"" string. ;  ; void IntersectRegion (Region_t rega, Region_t regb, Region_t result) override;  Computes the intersection of two regions. ;  ; Bool_t IsCmdThread () const override;  Return kTRUE if we are inside cmd/server thread. ;  ; Bool_t IsDNDAware (Window_t win, Atom_t *typelist) override;  Checks if the Window is DND aware, and knows any of the DND formats passed in argument. ;  ; Bool_t IsTransparent () const override;  ; Int_t KeysymToKeycode (UInt_t keysym) override;  Converts the ""keysym"" to the appropriate keycode. ;  ; char ** ListFonts (const char *fontname, Int_t max, Int_t &count) override;  Returns list of font names matching fontname regexp, like ""-*-times-*"". ;  ; FontStruct_t LoadQueryFont (const char *font_name) override;  Provides the most common way for accessing a font: opens (loads) the specified font and returns a pointer to the appropriate FontStruct_t structure. ;  ; void LookupString (Event_t *event, char *buf, Int_t buflen, UInt_t &keysym) override;  Convert the keycode from the event structure to a key symbol (according to the modifiers specified in the event structure and the current keyboard mapping). ;  ; void LowerWindow (Window_t id) override;  Lowers the specified window ""id"" to the bottom of the stack so that it does not obscure any sibling windows. ;  ; void MapRaised (Window_t id) override;  Maps the window ""id"" and all of its subwindows that have had map requests on the screen and put this window on the top of of the stack of all windows. ;  ; void MapSubwindows (Window_t id) override;  Maps all subwindows for the specified window ""id"" in top-to-bottom stacking order. ;  ; void MapWindow (Window_t id) override;  Maps the window ""id"" and all of its subwindows that have had map requests. ;  ; void MoveResizeWindow (Window_t i",MatchSource.WIKI,doc/master/classTGWin32VirtualXProxy.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGWin32VirtualXProxy.html
Testability,log,logically,"ed colormap. ;  ; Bool_t PointInRegion (Int_t x, Int_t y, Region_t reg) override;  Returns kTRUE if the point [x, y] is contained in the region reg. ;  ; Region_t PolygonRegion (Point_t *points, Int_t np, Bool_t winding) override;  Returns a region for the polygon defined by the points array. ;  ; void PutImage (Drawable_t id, GContext_t gc, Drawable_t img, Int_t dx, Int_t dy, Int_t x, Int_t y, UInt_t w, UInt_t h) override;  Combines an image with a rectangle of the specified drawable. ;  ; void PutPixel (Drawable_t id, Int_t x, Int_t y, ULong_t pixel) override;  Overwrites the pixel in the image with the specified pixel value. ;  ; void QueryColor (Colormap_t cmap, ColorStruct_t &color) override;  Returns the current RGB value for the pixel in the ""color"" structure. ;  ; void QueryPointer (Int_t &ix, Int_t &iy) override;  Returns the pointer position. ;  ; void QueryPointer (Window_t id, Window_t &rootw, Window_t &childw, Int_t &root_x, Int_t &root_y, Int_t &win_x, Int_t &win_y, UInt_t &mask) override;  Returns the root window the pointer is logically on and the pointer coordinates relative to the root window's origin. ;  ; void RaiseWindow (Window_t id) override;  Raises the specified window to the top of the stack so that no sibling window obscures it. ;  ; void ReadGIF (Int_t x0, Int_t y0, const char *file);  ; Bool_t ReadPictureDataFromFile (const char *filename, char ***ret_data) override;  Reads picture data from file ""filename"" and store it in ""ret_data"". ;  ; void RemoveWindow (ULongptr_t qwid) override;  Removes the created by Qt window ""qwid"". ;  ; void ReparentWindow (Window_t id, Window_t pid, Int_t x, Int_t y) override;  If the specified window is mapped, ReparentWindow automatically performs an UnmapWindow request on it, removes it from its current position in the hierarchy, and inserts it as the child of the specified parent. ;  ; Int_t RequestLocator (Int_t mode, Int_t ctyp, Int_t &x, Int_t &y) override;  Requests Locator position. ;  ; Int_t Request",MatchSource.WIKI,doc/master/classTGWin32VirtualXProxy.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGWin32VirtualXProxy.html
Usability,simpl,simply,"arameters. [in]gcspecifies the GC to be changed ; [in]gvalspecifies the mask and the values to be set. (see also the GCValues_t structure) ; Reimplemented from TVirtualX. ◆ ChangeProperties(). void TGWin32VirtualXProxy::ChangeProperties ; (; Window_t ; id, . Atom_t ; property, . Atom_t ; type, . Int_t ; format, . UChar_t * ; data, . Int_t ; len . ). overridevirtual . Alters the property for the specified window and causes the X server to generate a PropertyNotify event on that window. ; Reimplemented from TVirtualX. ◆ ChangeProperty(). void TGWin32VirtualXProxy::ChangeProperty ; (; Window_t ; id, . Atom_t ; property, . Atom_t ; type, . UChar_t * ; data, . Int_t ; len . ). overridevirtual . Alters the property for the specified window and causes the X server to generate a PropertyNotify event on that window. ; Parameters. [in]idthe window whose property you want to change ; [in]propertyspecifies the property name ; [in]typethe type of the property; the X server does not interpret the type but simply passes it back to an application that might ask about the window properties ; [in]datathe property data ; [in]lenthe length of the specified data format . Reimplemented from TVirtualX. ◆ ChangeWindowAttributes(). void TGWin32VirtualXProxy::ChangeWindowAttributes ; (; Window_t ; id, . SetWindowAttributes_t * ; attr . ). overridevirtual . Changes the attributes of the specified window ""id"" according the values provided in ""attr"". ; The mask data member of ""attr"" specifies which window attributes are defined in the attributes argument. This mask is the bitwise inclusive OR of the valid attribute mask bits; if it is zero, the attributes are ignored. ; Reimplemented from TVirtualX. ◆ CheckEvent(). Bool_t TGWin32VirtualXProxy::CheckEvent ; (; Window_t ; id, . EGEventType ; type, . Event_t & ; ev . ). overridevirtual . Check if there is for window ""id"" an event of type ""type"". ; Reimplemented from TVirtualX.; Definition at line 312 of file TGWin32VirtualXProxy.cxx. ◆ ClearArea()",MatchSource.WIKI,doc/master/classTGWin32VirtualXProxy.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGWin32VirtualXProxy.html
Availability,error,error,"object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t ",MatchSource.WIKI,doc/master/classTGWindow.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGWindow.html
Integrability,message,message,"object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t ",MatchSource.WIKI,doc/master/classTGWindow.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGWindow.html
Modifiability,inherit,inherited," ROOT: TGWindow Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; Static Protected Attributes |; Friends |; List of all members ; TGWindow Class ReferenceGUI » Low level GUI widgets. ; ROOT GUI Window base class. ; Definition at line 23 of file TGWindow.h. Public Types; enum  EEditMode { ;   kEditEnable = 0; , kEditDisable = (1ULL << ( 0 )); , kEditDisableEvents = (1ULL << ( 1 )); , kEditDisableGrab = (1ULL << ( 2 )); , ;   kEditDisableLayout = (1ULL << ( 3 )); , kEditDisableResize = (1ULL << ( 4 )); , kEditDisableHeight = (1ULL << ( 5 )); , kEditDisableWidth = (1ULL << ( 6 )); , ;   kEditDisableBtnEnable = (1ULL << ( 7 )); , kEditDisableKeyEnable = (1ULL << ( 8 )). };  ; enum  EStatusBits { kIsHtmlView = (1ULL << ( 14 )); };  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  . Public Member Functions;  TGWindow (const TGWindow *p=nullptr, Int_t x=0, Int_t y=0, UInt_t w=0, UInt_t h=0, UInt_t border=0, Int_t depth=0, UInt_t clss=0, void *visual=nullptr, SetWindowAttributes_t *attr=nullptr, UInt_t wtype=0);  Create a new window. ;  ;  TGWindow (TGClient *c, Window_t id, const TGWindow *parent=nullptr);  Create a copy of a window. ;  ;  ~TGWindow () override;  Window destructor. Unregisters the ",MatchSource.WIKI,doc/master/classTGWindow.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGWindow.html
Security,hash,hash,"on the window at position (x,y) in new parent. ;  ; virtual void RequestFocus ();  request focus ;  ; virtual void Resize (UInt_t w, UInt_t h);  Resize the window. ;  ; virtual void SetBackgroundColor (Pixel_t color);  set background color ;  ; virtual void SetBackgroundPixmap (Pixmap_t pixmap);  set background pixmap ;  ; virtual void SetEditable (Bool_t on=kTRUE);  ; virtual void SetEditDisabled (UInt_t on=kEditDisable);  ; virtual void SetMapSubwindows (Bool_t);  ; virtual void SetName (const char *name);  ; virtual void SetWindowName (const char *name=nullptr);  Set window name. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void UnmapWindow ();  unmap window ;  ;  Public Member Functions inherited from TGObject;  TGObject ();  ;  TGObject (const TGObject &tgo);  ;  ~TGObject () override;  TGObject destructor. ;  ; TGClient * GetClient () const;  ; Handle_t GetId () const;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; Bool_t IsEqual (const TObject *obj) const override;  Equal comparison (TGObjects are equal if they have the same window identifier). ;  ; void SaveAs (const char *filename="""", Option_t *option="""") const override;  Write this TGObject to a file using TImage, if filename's extension signals a valid TImage::EImageFileType, as defined by TImage::GetImageFileTypeFromFilename(). ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse ob",MatchSource.WIKI,doc/master/classTGWindow.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGWindow.html
Availability,mask,mask," Int_t y, UInt_t w, UInt_t h) override;  Clear a window area to the background color. ;  ; void ClearWindow () override;  Clear current window. ;  ; void ClearWindow (Window_t id) override;  Clear window. ;  ; void CloseDisplay () override;  Close connection to display server. ;  ; void ClosePixmap () override;  Delete current pixmap. ;  ; void CloseWindow () override;  Delete current window. ;  ; void ConvertPrimarySelection (Window_t id, Atom_t clipboard, Time_t when) override;  XConvertSelection() causes a SelectionRequest event to be sent to the current primary selection owner. ;  ; void ConvertSelection (Window_t, Atom_t &, Atom_t &, Atom_t &, Time_t &) override;  Requests that the specified selection be converted to the specified target type. ;  ; void CopyArea (Drawable_t src, Drawable_t dest, GContext_t gc, Int_t src_x, Int_t src_y, UInt_t width, UInt_t height, Int_t dest_x, Int_t dest_y) override;  Copy a drawable (i.e. ;  ; void CopyGC (GContext_t org, GContext_t dest, Mask_t mask) override;  Copies graphics context from org to dest. ;  ; void CopyPixmap (Int_t wid, Int_t xpos, Int_t ypos) override;  Copy the pixmap wid at the position xpos, ypos in the current window. ;  ; Pixmap_t CreateBitmap (Drawable_t id, const char *bitmap, UInt_t width, UInt_t height) override;  Create a bitmap (i.e. pixmap with depth 1) from the bitmap data. ;  ; Cursor_t CreateCursor (ECursor cursor) override;  Create cursor handle (just return cursor from cursor pool fCursors). ;  ; GContext_t CreateGC (Drawable_t id, GCValues_t *gval) override;  Create a graphics context using the values set in gval (but only for those entries that are in the mask). ;  ; Drawable_t CreateImage (UInt_t width, UInt_t height) override;  Create a client-side XImage. Returns handle to XImage. ;  ; Bool_t CreatePictureFromData (Drawable_t id, char **data, Pixmap_t &pict, Pixmap_t &pict_mask, PictureAttributes_t &attr) override;  Create a picture pixmap from data. ;  ; Bool_t CreatePictureFromFile (Dra",MatchSource.WIKI,doc/master/classTGX11.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGX11.html
Deployability,update,updated,"ar *mess) const;  Default version is noop, but in principle what ROOT understands as ascent is text related. ;  ; virtual Int_t GetFontDescent () const;  Returns the descent of the current font (in pixels. ;  ; virtual Int_t GetFontDescent (const char *mess) const;  Default version is noop, but in principle what ROOT understands as descent requires a certain text. ;  ; virtual FontStruct_t GetGCFont (GContext_t gc);  Return the font associated with the graphics context gc. ;  ; virtual Double_t GetOpenGLScalingFactor ();  On a HiDPI resolution it can be > 1., this means glViewport should use scaled width and height. ;  ; TClass * IsA () const override;  ; virtual Bool_t IsCmdThread () const;  ; virtual Bool_t MakeOpenGLContextCurrent (Handle_t ctx, Window_t windowID);  Makes context ctx current OpenGL context. ;  ; virtual void MapGCFont (GContext_t, FontStruct_t);  Map the XftFont with the Graphics Context using it. ;  ; virtual Bool_t NeedRedraw (ULongptr_t tgwindow, Bool_t force);  Notify the low level GUI layer ROOT requires ""tgwindow"" to be updated. ;  ; virtual void SelectPixmap (Int_t qpixid);  Selects the pixmap ""qpixid"". ;  ; void SetFillColor (Color_t cindex) override;  Sets color index ""cindex"" for fill areas. ;  ; void SetFillStyle (Style_t style) override;  Sets fill area style. ;  ; void SetLineColor (Color_t cindex) override;  Sets color index ""cindex"" for drawing lines. ;  ; void SetLineStyle (Style_t linestyle) override;  Sets the line style. ;  ; void SetLineWidth (Width_t width) override;  Sets the line width. ;  ; void SetMarkerColor (Color_t cindex) override;  Sets color index ""cindex"" for markers. ;  ; void SetMarkerSize (Float_t markersize) override;  Sets marker size index. ;  ; void SetMarkerStyle (Style_t markerstyle) override;  Sets marker style. ;  ; void SetTextAlign (Short_t talign=11) override;  Sets the text alignment. ;  ; void SetTextColor (Color_t cindex) override;  Sets the color index ""cindex"" for text. ;  ; void SetTextFont (Fon",MatchSource.WIKI,doc/master/classTGX11.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGX11.html
Energy Efficiency,allocate,allocate,"ss to basic X11 graphics, pixmap, text and font handling routines.; The companion class for Win32 is TGWin32.; The file G11Gui.cxx contains the implementation of the GUI methods of the TGX11 class. Most of the methods are used by the machine independent GUI classes (libGUI.so).; This code was initially developed in the context of HIGZ and PAW by Olivier Couet (package X11INT). ; Definition at line 80 of file TGX11.h. Public Member Functions;  TGX11 ();  Default constructor. ;  ;  TGX11 (const char *name, const char *title);  Normal Constructor. ;  ;  TGX11 (const TGX11 &org);  Copy constructor. Currently only used by TGX11TTF. ;  ;  ~TGX11 () override;  Destructor. ;  ; Int_t AddPixmap (ULong_t pixid, UInt_t w, UInt_t h) override;  Register pixmap created by gVirtualGL. ;  ; Int_t AddWindow (ULong_t qwid, UInt_t w, UInt_t h) override;  Register a window created by Qt as a ROOT window (like InitWindow()). ;  ; Bool_t AllocColor (Colormap_t cmap, ColorStruct_t &color) override;  Find and allocate a color cell according to the color values specified in the ColorStruct_t. ;  ; void Bell (Int_t percent) override;  Sound bell. Percent is loudness from -100% .. 100%. ;  ; void ChangeActivePointerGrab (Window_t, UInt_t, Cursor_t) override;  Changes the specified dynamic parameters if the pointer is actively grabbed by the client. ;  ; void ChangeGC (GContext_t gc, GCValues_t *gval) override;  Change entries in an existing graphics context, gc, by values from gval. ;  ; void ChangeProperties (Window_t id, Atom_t property, Atom_t type, Int_t format, UChar_t *data, Int_t len) override;  This function alters the property for the specified window and causes the X server to generate a PropertyNotify event on that window. ;  ; void ChangeProperty (Window_t id, Atom_t property, Atom_t type, UChar_t *data, Int_t len) override;  This function alters the property for the specified window and causes the X server to generate a PropertyNotify event on that window. ;  ; void ChangeWindowAt",MatchSource.WIKI,doc/master/classTGX11.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGX11.html
Integrability,interface,interface,". ROOT: TGX11 Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; Private Member Functions |; Private Attributes |; List of all members ; TGX11 Class ReferenceGraphics » Graphics' Backends » X11 backend. ; This class is the basic interface to the X11 (Xlib) graphics system. ; It is an implementation of the abstract TVirtualX class.; This class gives access to basic X11 graphics, pixmap, text and font handling routines.; The companion class for Win32 is TGWin32.; The file G11Gui.cxx contains the implementation of the GUI methods of the TGX11 class. Most of the methods are used by the machine independent GUI classes (libGUI.so).; This code was initially developed in the context of HIGZ and PAW by Olivier Couet (package X11INT). ; Definition at line 80 of file TGX11.h. Public Member Functions;  TGX11 ();  Default constructor. ;  ;  TGX11 (const char *name, const char *title);  Normal Constructor. ;  ;  TGX11 (const TGX11 &org);  Copy constructor. Currently only used by TGX11TTF. ;  ;  ~TGX11 () override;  Destructor. ;  ; Int_t AddPixmap (ULong_t pixid, UInt_t w, UInt_t h) override;  Register pixmap created by gVirtualGL. ;  ; Int_t AddWindow (ULong_t qwid, UInt_t w, UInt_t h) override;  Register a window created by Qt as a ROOT window (like InitWindow()). ;  ; Bool_t AllocColor (Colormap_t cmap, ColorStruct_t &color) override;  Find and allocate a color cell according to the color values specified in the ColorStruct_t. ;  ; void Bell (Int_t percent) override;  Sound bell. Percent is loudness from -100% .. 100%. ;  ; void ChangeActivePointerGrab (Window_t, UInt_t, Cursor_t) override;  Changes the specified dynamic parameters if the pointer is actively grabbed by the client. ;  ; void ChangeGC (GContext_t gc, GCValues_t *gval) override;  Change entries in an existing graphics context, gc, b",MatchSource.WIKI,doc/master/classTGX11.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGX11.html
Modifiability,inherit,inherited,"onRegion (Region_t rega, Region_t regb, Region_t result) override;  Compute the union of rega and regb and return result region. ;  ; void UnmapWindow (Window_t id) override;  Unmap window from screen. ;  ; void Update (Int_t mode=0) override;  Flush (mode = 0, default) or synchronize (mode = 1) X output buffer. ;  ; void UpdateWindow (Int_t mode) override;  Update display. ;  ; void Warp (Int_t ix, Int_t iy, Window_t id=0) override;  Set pointer position. ;  ; void WMDeleteNotify (Window_t id) override;  Tell WM to send message when window is closed via WM. ;  ; Int_t WriteGIF (char *name) override;  Writes the current window into GIF file. ;  ; void WritePixmap (Int_t wid, UInt_t w, UInt_t h, char *pxname) override;  Write the pixmap wid in the bitmap file pxname. ;  ; void XorRegion (Region_t rega, Region_t regb, Region_t result) override;  Calculate the difference between the union and intersection of two regions. ;  ;  Public Member Functions inherited from TVirtualX;  TVirtualX ();  ;  TVirtualX (const char *name, const char *title);  Ctor of ABC. ;  ; virtual ~TVirtualX ();  ; virtual void BeginModalSessionFor (Window_t window);  Start a modal session for a dialog window. ;  ; virtual void CreateOpenGLContext (Int_t wid=0);  Creates OpenGL context for window ""wid"". ;  ; virtual Handle_t CreateOpenGLContext (Window_t windowID, Handle_t sharedContext);  Creates OpenGL context for window ""windowID"". ;  ; virtual Window_t CreateOpenGLWindow (Window_t parentID, UInt_t width, UInt_t height, const std::vector< std::pair< UInt_t, Int_t > > &format);  Create window with special pixel format. Noop everywhere except Cocoa. ;  ; virtual void DeleteOpenGLContext (Int_t wid=0);  Deletes OpenGL context for window ""wid"". ;  ; virtual void DispatchClientMessage (UInt_t messageID);  Force processing of event, sent by SendEvent before. ;  ; virtual UInt_t ExecCommand (TGWin32Command *code);  Executes the command ""code"" coming from the other threads (Win32) ;  ; virtual void Flu",MatchSource.WIKI,doc/master/classTGX11.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGX11.html
Performance,queue,queue,"_t LoadQueryFont (const char *font_name) override;  Load font and query font. ;  ; void LookupString (Event_t *event, char *buf, Int_t buflen, UInt_t &keysym) override;  Convert the keycode from the event structure to a key symbol (according to the modifiers specified in the event structure and the current keyboard mapping). ;  ; void LowerWindow (Window_t id) override;  Lower window so it lays below all its siblings. ;  ; void MapRaised (Window_t id) override;  Map window on screen and put on top of all windows. ;  ; void MapSubwindows (Window_t id) override;  Map sub windows. ;  ; void MapWindow (Window_t id) override;  Map window on screen. ;  ; void MoveResizeWindow (Window_t id, Int_t x, Int_t y, UInt_t w, UInt_t h) override;  Move and resize a window. ;  ; void MoveWindow (Int_t wid, Int_t x, Int_t y) override;  Move the window wid. ;  ; void MoveWindow (Window_t id, Int_t x, Int_t y) override;  Move a window. ;  ; void NextEvent (Event_t &event) override;  Copies first pending event from event queue to Event_t structure and removes event from queue. ;  ; Int_t OpenDisplay (const char *dpyName) override;  Open connection to display server (if such a thing exist on the current platform). ;  ; Int_t OpenDisplay (void *display);  Open the display. Return -1 if the opening fails, 0 when ok. ;  ; Int_t OpenPixmap (UInt_t w, UInt_t h) override;  Open a new pixmap. ;  ; Bool_t ParseColor (Colormap_t cmap, const char *cname, ColorStruct_t &color) override;  Parse string cname containing color name, like ""green"" or ""#00FF00"". ;  ; Bool_t PointInRegion (Int_t x, Int_t y, Region_t reg) override;  Returns true if the point x,y is in the region. ;  ; Region_t PolygonRegion (Point_t *points, Int_t np, Bool_t winding) override;  Create region for the polygon defined by the points array. ;  ; void PutImage (Drawable_t id, GContext_t gc, Drawable_t img, Int_t dx, Int_t dy, Int_t x, Int_t y, UInt_t w, UInt_t h) override;  Put (x,y,w,h) part of image img in window win at position",MatchSource.WIKI,doc/master/classTGX11.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGX11.html
Security,access,access,". ROOT: TGX11 Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; Private Member Functions |; Private Attributes |; List of all members ; TGX11 Class ReferenceGraphics » Graphics' Backends » X11 backend. ; This class is the basic interface to the X11 (Xlib) graphics system. ; It is an implementation of the abstract TVirtualX class.; This class gives access to basic X11 graphics, pixmap, text and font handling routines.; The companion class for Win32 is TGWin32.; The file G11Gui.cxx contains the implementation of the GUI methods of the TGX11 class. Most of the methods are used by the machine independent GUI classes (libGUI.so).; This code was initially developed in the context of HIGZ and PAW by Olivier Couet (package X11INT). ; Definition at line 80 of file TGX11.h. Public Member Functions;  TGX11 ();  Default constructor. ;  ;  TGX11 (const char *name, const char *title);  Normal Constructor. ;  ;  TGX11 (const TGX11 &org);  Copy constructor. Currently only used by TGX11TTF. ;  ;  ~TGX11 () override;  Destructor. ;  ; Int_t AddPixmap (ULong_t pixid, UInt_t w, UInt_t h) override;  Register pixmap created by gVirtualGL. ;  ; Int_t AddWindow (ULong_t qwid, UInt_t w, UInt_t h) override;  Register a window created by Qt as a ROOT window (like InitWindow()). ;  ; Bool_t AllocColor (Colormap_t cmap, ColorStruct_t &color) override;  Find and allocate a color cell according to the color values specified in the ColorStruct_t. ;  ; void Bell (Int_t percent) override;  Sound bell. Percent is loudness from -100% .. 100%. ;  ; void ChangeActivePointerGrab (Window_t, UInt_t, Cursor_t) override;  Changes the specified dynamic parameters if the pointer is actively grabbed by the client. ;  ; void ChangeGC (GContext_t gc, GCValues_t *gval) override;  Change entries in an existing graphics context, gc, b",MatchSource.WIKI,doc/master/classTGX11.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGX11.html
Testability,log,logically,"ring cname containing color name, like ""green"" or ""#00FF00"". ;  ; Bool_t PointInRegion (Int_t x, Int_t y, Region_t reg) override;  Returns true if the point x,y is in the region. ;  ; Region_t PolygonRegion (Point_t *points, Int_t np, Bool_t winding) override;  Create region for the polygon defined by the points array. ;  ; void PutImage (Drawable_t id, GContext_t gc, Drawable_t img, Int_t dx, Int_t dy, Int_t x, Int_t y, UInt_t w, UInt_t h) override;  Put (x,y,w,h) part of image img in window win at position dx,dy. ;  ; void PutPixel (Drawable_t id, Int_t x, Int_t y, ULong_t pixel) override;  Set pixel at specified location in XImage img. ;  ; void QueryColor (Colormap_t cmap, ColorStruct_t &color) override;  Fill in the primary color components for a specific pixel value. ;  ; void QueryPointer (Int_t &ix, Int_t &iy) override;  Query pointer position. ;  ; void QueryPointer (Window_t id, Window_t &rootw, Window_t &childw, Int_t &root_x, Int_t &root_y, Int_t &win_x, Int_t &win_y, UInt_t &mask) override;  Returns the root window the pointer is logically on and the pointer coordinates relative to the root window's origin. ;  ; void RaiseWindow (Window_t id) override;  Put window on top of window stack. ;  ; Pixmap_t ReadGIF (Int_t x0, Int_t y0, const char *file, Window_t id=0) override;  If id is NULL - loads the specified gif file at position [x0,y0] in the current window. ;  ; Bool_t ReadPictureDataFromFile (const char *filename, char ***ret_data) override;  Read picture data from file and store in ret_data. ;  ; void RemoveWindow (ULong_t qwid) override;  Remove a window created by Qt (like CloseWindow1()). ;  ; void ReparentWindow (Window_t id, Window_t pid, Int_t x, Int_t y) override;  Reparent window to new parent window at position (x,y). ;  ; Int_t RequestLocator (Int_t mode, Int_t ctyp, Int_t &x, Int_t &y) override;  Request Locator position. ;  ; Int_t RequestString (Int_t x, Int_t y, char *text) override;  Request a string. ;  ; void RescaleWindow (Int_t wid",MatchSource.WIKI,doc/master/classTGX11.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGX11.html
Usability,usab,usable,"nt. ;  ; Float_t fTextAngle;  Text angle. ;  ; Color_t fTextColor;  Text color. ;  ; Font_t fTextFont;  Text font. ;  ; Float_t fTextSize;  Text size. ;  ;  Protected Attributes inherited from TAttMarker; Color_t fMarkerColor;  Marker color. ;  ; Size_t fMarkerSize;  Marker size. ;  ; Style_t fMarkerStyle;  Marker style. ;  . Private Member Functions; void ClearPixmap (Drawable *pix);  Clear the pixmap pix. ;  ; void CloseWindow1 ();  Delete current window. ;  ; void CollectImageColors (ULong_t pixel, ULong_t *&orgcolors, Int_t &ncolors, Int_t &maxcolors);  Collect in orgcolors all different original image colors. ;  ; void CopyWindowtoPixmap (Drawable *pix, Int_t xpos, Int_t ypos);  Copy area of current window in the pixmap pix. ;  ; void FindBestVisual ();  Find best visual, i.e. ;  ; Int_t FindColor (ULong_t pixel, ULong_t *orgcolors, Int_t ncolors);  Returns index in orgcolors (and fNewColors) for pixel. ;  ; void FindUsableVisual (RXVisualInfo *vlist, Int_t nitems);  Check if visual is usable, if so set fVisual, fDepth, fColormap, fBlackPixel and fWhitePixel. ;  ; void ImgPickPalette (RXImage *image, Int_t &ncol, Int_t *&R, Int_t *&G, Int_t *&B);  Returns in R G B the ncol colors of the palette used by the image. ;  ; void MakeOpaqueColors (Int_t percent, ULong_t *orgcolors, Int_t ncolors);  Get RGB values for orgcolors, add percent neutral to the RGB and allocate fNewColors. ;  ; void MapColorStruct (ColorStruct_t *color, RXColor &xcolor);  Map a ColorStruct_t to a XColor structure. ;  ; void MapCursor (ECursor cursor, Int_t &xcursor);  ; void MapEvent (Event_t &ev, void *xev, Bool_t tox=kTRUE);  Map Event_t structure to XEvent structure. ;  ; void MapEventMask (UInt_t &emask, UInt_t &xemask, Bool_t tox=kTRUE);  Map event mask to or from X. ;  ; void MapGCValues (GCValues_t &gval, ULong_t &xmask, RXGCValues &xgval, Bool_t tox=kTRUE);  Map a GCValues_t to a XCGValues structure if tox is true. ;  ; void MapKeySym (UInt_t &keysym, UInt_t &xkeysym, Bool_t tox=kTRUE",MatchSource.WIKI,doc/master/classTGX11.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGX11.html
Availability,failure,failure," |; Private Member Functions |; Private Attributes |; List of all members ; TGX11TTF Class ReferenceGraphics » Graphics' Backends » X11 backend. ; Interface to low level X11 (Xlib). ; This class gives access to basic X11 graphics via the parent class TGX11. However, all text and font handling is done via the Freetype TrueType library. When the shared library containing this class is loaded the global gVirtualX is redirected to point to this class. ; Definition at line 27 of file TGX11TTF.h. Public Member Functions;  TGX11TTF (const TGX11 &org);  Create copy of TGX11 but now use TrueType fonts. ;  ;  ~TGX11TTF () override;  ; void DrawText (Int_t x, Int_t y, Float_t angle, Float_t mgn, const char *text, ETextMode mode) override;  Draw text using TrueType fonts. ;  ; void DrawText (Int_t x, Int_t y, Float_t angle, Float_t mgn, const wchar_t *text, ETextMode mode) override;  Draw text using TrueType fonts. ;  ; Bool_t Init (void *display) override;  Initialize X11 system. Returns kFALSE in case of failure. ;  ; TClass * IsA () const override;  ; Int_t SetTextFont (char *fontname, ETextSetMode mode) override;  Set text font to specified name. ;  ; void SetTextFont (Font_t fontnumber) override;  Set specified font. ;  ; void SetTextSize (Float_t textsize) override;  Set current text size. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TGX11;  TGX11 ();  Default constructor. ;  ;  TGX11 (const char *name, const char *title);  Normal Constructor. ;  ;  TGX11 (const TGX11 &org);  Copy constructor. Currently only used by TGX11TTF. ;  ;  ~TGX11 () override;  Destructor. ;  ; Int_t AddPixmap (ULong_t pixid, UInt_t w, UInt_t h) override;  Register pixmap created by gVirtualGL. ;  ; Int_t AddWindow (ULong_t qwid, UInt_t w, UInt_t h) override;  Register a window created by Qt as a ROOT window (like InitWindow()). ;  ; Bool_t AllocColor (Colorm",MatchSource.WIKI,doc/master/classTGX11TTF.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGX11TTF.html
Deployability,update,updated,"ar *mess) const;  Default version is noop, but in principle what ROOT understands as ascent is text related. ;  ; virtual Int_t GetFontDescent () const;  Returns the descent of the current font (in pixels. ;  ; virtual Int_t GetFontDescent (const char *mess) const;  Default version is noop, but in principle what ROOT understands as descent requires a certain text. ;  ; virtual FontStruct_t GetGCFont (GContext_t gc);  Return the font associated with the graphics context gc. ;  ; virtual Double_t GetOpenGLScalingFactor ();  On a HiDPI resolution it can be > 1., this means glViewport should use scaled width and height. ;  ; TClass * IsA () const override;  ; virtual Bool_t IsCmdThread () const;  ; virtual Bool_t MakeOpenGLContextCurrent (Handle_t ctx, Window_t windowID);  Makes context ctx current OpenGL context. ;  ; virtual void MapGCFont (GContext_t, FontStruct_t);  Map the XftFont with the Graphics Context using it. ;  ; virtual Bool_t NeedRedraw (ULongptr_t tgwindow, Bool_t force);  Notify the low level GUI layer ROOT requires ""tgwindow"" to be updated. ;  ; virtual void SelectPixmap (Int_t qpixid);  Selects the pixmap ""qpixid"". ;  ; void SetFillColor (Color_t cindex) override;  Sets color index ""cindex"" for fill areas. ;  ; void SetFillStyle (Style_t style) override;  Sets fill area style. ;  ; void SetLineColor (Color_t cindex) override;  Sets color index ""cindex"" for drawing lines. ;  ; void SetLineStyle (Style_t linestyle) override;  Sets the line style. ;  ; void SetLineWidth (Width_t width) override;  Sets the line width. ;  ; void SetMarkerColor (Color_t cindex) override;  Sets color index ""cindex"" for markers. ;  ; void SetMarkerSize (Float_t markersize) override;  Sets marker size index. ;  ; void SetMarkerStyle (Style_t markerstyle) override;  Sets marker style. ;  ; void SetTextAlign (Short_t talign=11) override;  Sets the text alignment. ;  ; void SetTextColor (Color_t cindex) override;  Sets the color index ""cindex"" for text. ;  ; void SetTextFont (Fon",MatchSource.WIKI,doc/master/classTGX11TTF.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGX11TTF.html
Energy Efficiency,allocate,allocate,"e;  ; Int_t SetTextFont (char *fontname, ETextSetMode mode) override;  Set text font to specified name. ;  ; void SetTextFont (Font_t fontnumber) override;  Set specified font. ;  ; void SetTextSize (Float_t textsize) override;  Set current text size. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TGX11;  TGX11 ();  Default constructor. ;  ;  TGX11 (const char *name, const char *title);  Normal Constructor. ;  ;  TGX11 (const TGX11 &org);  Copy constructor. Currently only used by TGX11TTF. ;  ;  ~TGX11 () override;  Destructor. ;  ; Int_t AddPixmap (ULong_t pixid, UInt_t w, UInt_t h) override;  Register pixmap created by gVirtualGL. ;  ; Int_t AddWindow (ULong_t qwid, UInt_t w, UInt_t h) override;  Register a window created by Qt as a ROOT window (like InitWindow()). ;  ; Bool_t AllocColor (Colormap_t cmap, ColorStruct_t &color) override;  Find and allocate a color cell according to the color values specified in the ColorStruct_t. ;  ; void Bell (Int_t percent) override;  Sound bell. Percent is loudness from -100% .. 100%. ;  ; void ChangeActivePointerGrab (Window_t, UInt_t, Cursor_t) override;  Changes the specified dynamic parameters if the pointer is actively grabbed by the client. ;  ; void ChangeGC (GContext_t gc, GCValues_t *gval) override;  Change entries in an existing graphics context, gc, by values from gval. ;  ; void ChangeProperties (Window_t id, Atom_t property, Atom_t type, Int_t format, UChar_t *data, Int_t len) override;  This function alters the property for the specified window and causes the X server to generate a PropertyNotify event on that window. ;  ; void ChangeProperty (Window_t id, Atom_t property, Atom_t type, UChar_t *data, Int_t len) override;  This function alters the property for the specified window and causes the X server to generate a PropertyNotify event on that window. ;  ; void ChangeWindowAt",MatchSource.WIKI,doc/master/classTGX11TTF.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGX11TTF.html
Integrability,depend,depends,"ide;  Set the initial state of the window. Either kNormalState or kIconicState. ;  ; void SetWMTransientHint (Window_t id, Window_t main_id) override;  Tell window manager that window is a transient window of main. ;  ; void ShapeCombineMask (Window_t id, Int_t x, Int_t y, Pixmap_t mask) override;  The Nonrectangular Window Shape Extension adds nonrectangular windows to the System. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; void SubtractRegion (Region_t rega, Region_t regb, Region_t result) override;  Subtract rega from regb. ;  ; Int_t SupportsExtension (const char *ext) const override;  Returns 1 if window system server supports extension given by the argument, returns 0 in case extension is not supported and returns -1 in case of error (like server not initialized). ;  ; void Sync (Int_t mode) override;  Set synchronisation on or off. ;  ; Int_t TextWidth (FontStruct_t font, const char *s, Int_t len) override;  Return length of string in pixels. Size depends on font. ;  ; void TranslateCoordinates (Window_t src, Window_t dest, Int_t src_x, Int_t src_y, Int_t &dest_x, Int_t &dest_y, Window_t &child) override;  TranslateCoordinates translates coordinates from the frame of reference of one window to another. ;  ; void UnionRectWithRegion (Rectangle_t *rect, Region_t src, Region_t dest) override;  Union of rectangle with a region. ;  ; void UnionRegion (Region_t rega, Region_t regb, Region_t result) override;  Compute the union of rega and regb and return result region. ;  ; void UnmapWindow (Window_t id) override;  Unmap window from screen. ;  ; void Update (Int_t mode=0) override;  Flush (mode = 0, default) or synchronize (mode = 1) X output buffer. ;  ; void UpdateWindow (Int_t mode) override;  Update display. ;  ; void Warp (Int_t ix, Int_t iy, Window_t id=0) override;  Set pointer position. ;  ; void WMDeleteNotify (Window_t id) override;  Tell WM to send message when window is closed via WM. ;  ; Int_t WriteGIF (char *name) override; ",MatchSource.WIKI,doc/master/classTGX11TTF.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGX11TTF.html
Modifiability,inherit,inherited,"finition at line 27 of file TGX11TTF.h. Public Member Functions;  TGX11TTF (const TGX11 &org);  Create copy of TGX11 but now use TrueType fonts. ;  ;  ~TGX11TTF () override;  ; void DrawText (Int_t x, Int_t y, Float_t angle, Float_t mgn, const char *text, ETextMode mode) override;  Draw text using TrueType fonts. ;  ; void DrawText (Int_t x, Int_t y, Float_t angle, Float_t mgn, const wchar_t *text, ETextMode mode) override;  Draw text using TrueType fonts. ;  ; Bool_t Init (void *display) override;  Initialize X11 system. Returns kFALSE in case of failure. ;  ; TClass * IsA () const override;  ; Int_t SetTextFont (char *fontname, ETextSetMode mode) override;  Set text font to specified name. ;  ; void SetTextFont (Font_t fontnumber) override;  Set specified font. ;  ; void SetTextSize (Float_t textsize) override;  Set current text size. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TGX11;  TGX11 ();  Default constructor. ;  ;  TGX11 (const char *name, const char *title);  Normal Constructor. ;  ;  TGX11 (const TGX11 &org);  Copy constructor. Currently only used by TGX11TTF. ;  ;  ~TGX11 () override;  Destructor. ;  ; Int_t AddPixmap (ULong_t pixid, UInt_t w, UInt_t h) override;  Register pixmap created by gVirtualGL. ;  ; Int_t AddWindow (ULong_t qwid, UInt_t w, UInt_t h) override;  Register a window created by Qt as a ROOT window (like InitWindow()). ;  ; Bool_t AllocColor (Colormap_t cmap, ColorStruct_t &color) override;  Find and allocate a color cell according to the color values specified in the ColorStruct_t. ;  ; void Bell (Int_t percent) override;  Sound bell. Percent is loudness from -100% .. 100%. ;  ; void ChangeActivePointerGrab (Window_t, UInt_t, Cursor_t) override;  Changes the specified dynamic parameters if the pointer is actively grabbed by the client. ;  ; void ChangeGC (GContext_t gc, GCValues_t *gval) overri",MatchSource.WIKI,doc/master/classTGX11TTF.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGX11TTF.html
Performance,load,loaded,". ROOT: TGX11TTF Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Private Types |; Private Member Functions |; Private Attributes |; List of all members ; TGX11TTF Class ReferenceGraphics » Graphics' Backends » X11 backend. ; Interface to low level X11 (Xlib). ; This class gives access to basic X11 graphics via the parent class TGX11. However, all text and font handling is done via the Freetype TrueType library. When the shared library containing this class is loaded the global gVirtualX is redirected to point to this class. ; Definition at line 27 of file TGX11TTF.h. Public Member Functions;  TGX11TTF (const TGX11 &org);  Create copy of TGX11 but now use TrueType fonts. ;  ;  ~TGX11TTF () override;  ; void DrawText (Int_t x, Int_t y, Float_t angle, Float_t mgn, const char *text, ETextMode mode) override;  Draw text using TrueType fonts. ;  ; void DrawText (Int_t x, Int_t y, Float_t angle, Float_t mgn, const wchar_t *text, ETextMode mode) override;  Draw text using TrueType fonts. ;  ; Bool_t Init (void *display) override;  Initialize X11 system. Returns kFALSE in case of failure. ;  ; TClass * IsA () const override;  ; Int_t SetTextFont (char *fontname, ETextSetMode mode) override;  Set text font to specified name. ;  ; void SetTextFont (Font_t fontnumber) override;  Set specified font. ;  ; void SetTextSize (Float_t textsize) override;  Set current text size. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TGX11;  TGX11 ();  Default constructor. ;  ;  TGX11 (const char *name, const char *title);  Normal Constructor. ;  ;  TGX11 (const TGX11 &org);  Copy constructor. Currently only used by TGX11TTF. ;  ;  ~TGX11 () override;  Destructor. ;  ; Int_t AddPixmap (ULong_t pixid, UInt_t w, UInt_t h) overr",MatchSource.WIKI,doc/master/classTGX11TTF.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGX11TTF.html
Security,access,access,". ROOT: TGX11TTF Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Private Types |; Private Member Functions |; Private Attributes |; List of all members ; TGX11TTF Class ReferenceGraphics » Graphics' Backends » X11 backend. ; Interface to low level X11 (Xlib). ; This class gives access to basic X11 graphics via the parent class TGX11. However, all text and font handling is done via the Freetype TrueType library. When the shared library containing this class is loaded the global gVirtualX is redirected to point to this class. ; Definition at line 27 of file TGX11TTF.h. Public Member Functions;  TGX11TTF (const TGX11 &org);  Create copy of TGX11 but now use TrueType fonts. ;  ;  ~TGX11TTF () override;  ; void DrawText (Int_t x, Int_t y, Float_t angle, Float_t mgn, const char *text, ETextMode mode) override;  Draw text using TrueType fonts. ;  ; void DrawText (Int_t x, Int_t y, Float_t angle, Float_t mgn, const wchar_t *text, ETextMode mode) override;  Draw text using TrueType fonts. ;  ; Bool_t Init (void *display) override;  Initialize X11 system. Returns kFALSE in case of failure. ;  ; TClass * IsA () const override;  ; Int_t SetTextFont (char *fontname, ETextSetMode mode) override;  Set text font to specified name. ;  ; void SetTextFont (Font_t fontnumber) override;  Set specified font. ;  ; void SetTextSize (Float_t textsize) override;  Set current text size. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TGX11;  TGX11 ();  Default constructor. ;  ;  TGX11 (const char *name, const char *title);  Normal Constructor. ;  ;  TGX11 (const TGX11 &org);  Copy constructor. Currently only used by TGX11TTF. ;  ;  ~TGX11 () override;  Destructor. ;  ; Int_t AddPixmap (ULong_t pixid, UInt_t w, UInt_t h) overr",MatchSource.WIKI,doc/master/classTGX11TTF.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGX11TTF.html
Testability,log,logically,"ring cname containing color name, like ""green"" or ""#00FF00"". ;  ; Bool_t PointInRegion (Int_t x, Int_t y, Region_t reg) override;  Returns true if the point x,y is in the region. ;  ; Region_t PolygonRegion (Point_t *points, Int_t np, Bool_t winding) override;  Create region for the polygon defined by the points array. ;  ; void PutImage (Drawable_t id, GContext_t gc, Drawable_t img, Int_t dx, Int_t dy, Int_t x, Int_t y, UInt_t w, UInt_t h) override;  Put (x,y,w,h) part of image img in window win at position dx,dy. ;  ; void PutPixel (Drawable_t id, Int_t x, Int_t y, ULong_t pixel) override;  Set pixel at specified location in XImage img. ;  ; void QueryColor (Colormap_t cmap, ColorStruct_t &color) override;  Fill in the primary color components for a specific pixel value. ;  ; void QueryPointer (Int_t &ix, Int_t &iy) override;  Query pointer position. ;  ; void QueryPointer (Window_t id, Window_t &rootw, Window_t &childw, Int_t &root_x, Int_t &root_y, Int_t &win_x, Int_t &win_y, UInt_t &mask) override;  Returns the root window the pointer is logically on and the pointer coordinates relative to the root window's origin. ;  ; void RaiseWindow (Window_t id) override;  Put window on top of window stack. ;  ; Pixmap_t ReadGIF (Int_t x0, Int_t y0, const char *file, Window_t id=0) override;  If id is NULL - loads the specified gif file at position [x0,y0] in the current window. ;  ; Bool_t ReadPictureDataFromFile (const char *filename, char ***ret_data) override;  Read picture data from file and store in ret_data. ;  ; void RemoveWindow (ULong_t qwid) override;  Remove a window created by Qt (like CloseWindow1()). ;  ; void ReparentWindow (Window_t id, Window_t pid, Int_t x, Int_t y) override;  Reparent window to new parent window at position (x,y). ;  ; Int_t RequestLocator (Int_t mode, Int_t ctyp, Int_t &x, Int_t &y) override;  Request Locator position. ;  ; Int_t RequestString (Int_t x, Int_t y, char *text) override;  Request a string. ;  ; void RescaleWindow (Int_t wid",MatchSource.WIKI,doc/master/classTGX11TTF.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGX11TTF.html
Availability,error,error,"object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Return",MatchSource.WIKI,doc/master/classTGXYLayout.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGXYLayout.html
Integrability,message,message,"object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Return",MatchSource.WIKI,doc/master/classTGXYLayout.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGXYLayout.html
Modifiability,inherit,inherited,"ever becomes smaller than defined by the TGXYLayoutHints and the X and Y coordinates becomes never smaller than defined by the layout hints. ; Definition at line 58 of file TGXYLayout.h. Public Member Functions;  TGXYLayout (TGCompositeFrame *main);  Constructor. The main is the frame for which this layout manager works. ;  ; TGDimension GetDefaultSize () const override;  Returns the original size of the frame. ;  ; TClass * IsA () const override;  ; void Layout () override;  Recalculates the postion and the size of all widgets. ;  ; void NewSize ();  ; void SavePrimitive (std::ostream &out, Option_t *="""") override;  Save XY layout manager as a C++ statement(s) on output stream. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TGLayoutManager;  TGLayoutManager ();  ; virtual Bool_t IsModified () const;  ; virtual void SetDefaultHeight (UInt_t);  ; virtual void SetDefaultWidth (UInt_t);  ; virtual void SetModified (Bool_t flag=kTRUE);  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Clear (Option_t *="""");  ; vi",MatchSource.WIKI,doc/master/classTGXYLayout.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGXYLayout.html
Security,hash,hash," Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Returns name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual const char * GetTitle () const;  Returns title of object. ;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; virtual ULong_t Hash () const;  Return hash value for this object. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns kTRUE if object inherits from class ""classname"". ;  ; virtual Bool_t InheritsFrom (const TClass *cl) const;  Returns kTRUE if object inherits from TClass cl. ;  ; virtual void Inspect () const;  Dump contents of this object in a graphics canvas. ;  ; void InvertBit (UInt_t f);  ; Bool_t IsDestructed () const;  IsDestructed. ;  ; virtual Bool_t IsEqual (const TObject *obj) const;  Default equal comparison (objects are equal if they have the same address in memory). ;  ; virtual Bool_t IsFolder () const;  Returns kTRUE in case object contains browsable objects (like containers or lists of other objects). ;  ; R__ALWAYS_INLINE Bool_t",MatchSource.WIKI,doc/master/classTGXYLayout.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGXYLayout.html
Availability,error,error,"object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Return",MatchSource.WIKI,doc/master/classTGXYLayoutHints.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGXYLayoutHints.html
Integrability,message,message,"object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Return",MatchSource.WIKI,doc/master/classTGXYLayoutHints.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGXYLayoutHints.html
Modifiability,inherit,inherited,"ere the position and the size of each widget in the frame are defined by X / Y ...Definition TGXYLayout.h:58; Normally there is one layout hint per widget. Therefore these can be deleted like in the following example in the destructor of the frame:; TGMyFrame::~TGMyFrame(); {; // Destructor, deletes all frames and their layout hints.; ; TGFrameElement *ptr;; ; // delete all frames and layout hints; if (fList) {; TIter next(fList);; while ((ptr = (TGFrameElement *) next())) {; if (ptr->fLayout); delete ptr->fLayout;; if (ptr->fFrame); delete ptr->fFrame;; }; }; }; TGFrameElementDefinition TGLayout.h:105; TGFrameElement::fLayoutTGLayoutHints * fLayoutDefinition TGLayout.h:114; TGFrameElement::fFrameTGFrame * fFrameDefinition TGLayout.h:112; TIterDefinition TCollection.h:235. Definition at line 19 of file TGXYLayout.h. Public Types; enum  ERubberFlag { kLRubberX = (1ULL << ( 0 )); , kLRubberY = (1ULL << ( 1 )); , kLRubberW = (1ULL << ( 2 )); , kLRubberH = (1ULL << ( 3 )); };  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Public Types inherited from TRefCnt; enum  EReferenceFlag { kStaticInit; };  . Public Member Functions;  TGXYLayoutHints (Double_t x, Double_t y, Double_t w, Double_t h, UInt_t rubberFlag=kLRubberX|kLRubberY);  Constructor. ;  ; UInt_t GetFlag () const;  ; Double_t GetH () const;  ; Double_t GetW () const;  ; Double_t GetX () const;  ; Double_t GetY () const;  ; TClass ",MatchSource.WIKI,doc/master/classTGXYLayoutHints.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGXYLayoutHints.html
Security,hash,hash," Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Returns name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual const char * GetTitle () const;  Returns title of object. ;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; virtual ULong_t Hash () const;  Return hash value for this object. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns kTRUE if object inherits from class ""classname"". ;  ; virtual Bool_t InheritsFrom (const TClass *cl) const;  Returns kTRUE if object inherits from TClass cl. ;  ; virtual void Inspect () const;  Dump contents of this object in a graphics canvas. ;  ; void InvertBit (UInt_t f);  ; Bool_t IsDestructed () const;  IsDestructed. ;  ; virtual Bool_t IsEqual (const TObject *obj) const;  Default equal comparison (objects are equal if they have the same address in memory). ;  ; virtual Bool_t IsFolder () const;  Returns kTRUE in case object contains browsable objects (like containers or lists of other objects). ;  ; R__ALWAYS_INLINE Bool_t",MatchSource.WIKI,doc/master/classTGXYLayoutHints.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGXYLayoutHints.html
Availability,error,error,"st char *location, const char *fmt, va_list va) constTObjectprotectedvirtual; DoFillN(Int_t ntimes, const Double_t *x, const Double_t *w, Int_t stride=1)TH1protectedvirtual; DoIntegral(Int_t ix1, Int_t ix2, Int_t iy1, Int_t iy2, Int_t iz1, Int_t iz2, Double_t &err, Option_t *opt, Bool_t doerr=kFALSE) constTH1protectedvirtual; Draw(Option_t *option="""") overrideTH1virtual; DrawClass() constTObjectvirtual; DrawClone(Option_t *option="""") constTObjectvirtual; DrawCopy(Option_t *option="""", const char *name_postfix=""_copy"") constTH1virtual; DrawNormalized(Option_t *option="""", Double_t norm=1) constTH1virtual; DrawPanel()TH1virtual; Dump() constTObjectvirtual; EBinErrorOpt enum nameTH1; EDeprecatedStatusBits enum nameTObject; Error(const char *method, const char *msgfmt,...) constTObjectvirtual; EStatOverflows enum nameTH1; EStatusBits enum nameTH1; Eval(TF1 *f1, Option_t *option="""")TH1virtual; Execute(const char *method, const char *params, Int_t *error=nullptr)TObjectvirtual; Execute(TMethod *method, TObjArray *params, Int_t *error=nullptr)TObjectvirtual; ExecuteEvent(Int_t event, Int_t px, Int_t py) overrideTH1virtual; ExtendAxis(Double_t x, TAxis *axis)TH1virtual; Fatal(const char *method, const char *msgfmt,...) constTObjectvirtual; fBarOffsetTH1protected; fBarWidthTH1protected; fBinStatErrOptTH1protected; fBitsTObjectprivate; fBufferTH1protected; fBufferSizeTH1protected; fContourTH1protected; fDimensionTH1protected; fDirectoryTH1protected; fEntriesTH1protected; fFillColorTAttFillprotected; fFillStyleTAttFillprotected; FFT(TH1 *h_output, Option_t *option)TH1virtual; fFunctionsTH1protected; fgAddDirectoryTH1protectedstatic; fgBufferSizeTH1protectedstatic; fgDefaultSumw2TH1protectedstatic; fgDtorOnlyTObjectprivatestatic; fgObjectStatTObjectprivatestatic; fgStatOverflowsTH1protectedstatic; Fill(Double_t x)TH1virtual; Fill(Double_t x, Double_t w)TH1virtual; Fill(const char *name, Double_t w)TH1virtual; FillBuffer(char *&buffer)TNamedvirtual; FillN(Int_t ntimes, const Double",MatchSource.WIKI,doc/master/classTH1-members.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH1-members.html
Modifiability,inherit,inherited,". ROOT: Member List. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. TH1 Member List. This is the complete list of members for TH1, including all inherited members. AbstractMethod(const char *method) constTObject; Add(TF1 *h1, Double_t c1=1, Option_t *option="""")TH1virtual; Add(const TH1 *h1, Double_t c1=1)TH1virtual; Add(const TH1 *h, const TH1 *h2, Double_t c1=1, Double_t c2=1)TH1virtual; AddBinContent(Int_t bin)TH1virtual; AddBinContent(Int_t bin, Double_t w)TH1virtual; AddDirectory(Bool_t add=kTRUE)TH1static; AddDirectoryStatus()TH1static; AddToTObjectTable(TObject *)TObjectprivatestatic; AndersonDarlingTest(const TH1 *h2, Option_t *option="""") constTH1virtual; AndersonDarlingTest(const TH1 *h2, Double_t &advalue) constTH1virtual; AppendPad(Option_t *option="""")TObjectvirtual; AutoP2FindLimits(Double_t min, Double_t max)TH1protectedvirtual; AutoP2GetBins(Int_t n)TH1inlineprotectedstatic; AutoP2GetPower2(Double_t x, Bool_t next=kTRUE)TH1inlineprotectedstatic; AxisChoice(Option_t *axis) constTH1protected; Browse(TBrowser *b) overrideTH1virtual; BufferEmpty(Int_t action=0)TH1virtual; BufferFill(Double_t x, Double_t w)TH1protectedvirtual; Build()TH1private; CanExtendAllAxes() constTH1virtual; CheckAxisLimits(const TAxis *a1, const TAxis *a2)TH1protectedstatic; CheckBinLabels(const TAxis *a1, const TAxis *a2)TH1protectedstatic; CheckBinLimits(const TAxis *a1, const TAxis *a2)TH1protectedstatic; CheckConsistency(const TH1 *h1, const TH1 *h2)TH1protectedstatic; CheckConsistentSubAxes(const TAxis *a1, Int_t firstBin1, Int_t lastBin1, const TAxis *a2, Int_t firstBin2=0, Int_t lastBin2=0)TH1protectedstatic; CheckedHash()TObjectinline; CheckEqualAxes(const TAxis *a1, const TAxis *a2)TH1protectedstatic; Chi2Test(const TH1 *h2, Option_t *option=""UU"", Double_t *res=nullptr) constTH1virtual; Chi2TestX(const TH1 *h2, Double_t &chi2, Int_t &ndf, Int_t &igood, Option_t *option=""UU"", Double_t *res=nullptr) constTH1virtual; Chisquare(TF1 *f1, Option_t *",MatchSource.WIKI,doc/master/classTH1-members.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH1-members.html
Availability,error,errors,". ROOT: TH1 Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Static Protected Member Functions |; Protected Attributes |; Static Protected Attributes |; Private Member Functions |; Friends |; List of all members ; TH1 Class ReferenceHistogram Library » Histogram classes. ; TH1 is the base class of all histogram classes in ROOT. ; It provides the common interface for operations such as binning, filling, drawing, which will be detailed below. Creating histograms; Labelling axes. Binning; Fix or variable bin size; Convention for numbering bins; Alphanumeric Bin Labels; Histograms with automatic bins; Rebinning. Filling histograms; Associated errors; Associated functions; Projections of histograms; Random Numbers and histograms; Making a copy of a histogram; Normalizing histograms. Drawing histograms; Setting Drawing histogram contour levels (2-D hists only); Setting histogram graphics attributes; Customising how axes are drawn. Fitting histograms; Saving/reading histograms to/from a ROOT file; Operations on histograms; Miscellaneous operations. ROOT supports the following histogram types:. 1-D histograms:; TH1C : histograms with one byte per channel. Maximum bin content = 127; TH1S : histograms with one short per channel. Maximum bin content = 32767; TH1I : histograms with one int per channel. Maximum bin content = INT_MAX (*); TH1L : histograms with one long64 per channel. Maximum bin content = LLONG_MAX (**); TH1F : histograms with one float per channel. Maximum precision 7 digits, maximum integer bin content = +/-16777216 (***); TH1D : histograms with one double per channel. Maximum precision 14 digits, maximum integer bin content = +/-9007199254740992 (****). 2-D histograms:; TH2C : histograms with one byte per channel. Maximum bin content = 127; TH2S : histograms with one short per channel",MatchSource.WIKI,doc/master/classTH1.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH1.html
Deployability,update,updated," of the original histogram including all associated errors and functions, e.g.: TH1F *hnew = (TH1F*)h->Clone(""hnew"");; TH1::CloneTObject * Clone(const char *newname="""") const overrideMake a complete copy of the underlying object.Definition TH1.cxx:2752. Normalizing histograms; One can scale a histogram such that the bins integral is equal to the normalization parameter via TH1::Scale(Double_t norm), where norm is the desired normalization divided by the integral of the histogram. Drawing histograms; Histograms are drawn via the THistPainter class. Each histogram has a pointer to its own painter (to be usable in a multithreaded program). Many drawing options are supported. See THistPainter::Paint() for more details.; The same histogram can be drawn with different options in different pads. When a histogram drawn in a pad is deleted, the histogram is automatically removed from the pad or pads where it was drawn. If a histogram is drawn in a pad, then filled again, the new status of the histogram will be automatically shown in the pad next time the pad is updated. One does not need to redraw the histogram. To draw the current version of a histogram in a pad, one can use h->DrawCopy();; This makes a clone (see Clone below) of the histogram. Once the clone is drawn, the original histogram may be modified or deleted without affecting the aspect of the clone.; One can use TH1::SetMaximum() and TH1::SetMinimum() to force a particular value for the maximum or the minimum scale on the plot. (For 1-D histograms this means the y-axis, while for 2-D histograms these functions affect the z-axis).; TH1::UseCurrentStyle() can be used to change all histogram graphics attributes to correspond to the current selected style. This function must be called for each histogram. In case one reads and draws many histograms from a file, one can force the histograms to inherit automatically the current graphics style by calling before gROOT->ForceStyle(). Setting Drawing histogram contour level",MatchSource.WIKI,doc/master/classTH1.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH1.html
Energy Efficiency,power,power,"rsion_t Class_Version ();  ; static const char * DeclFileName ();  ; static Width_t GetMarkerLineWidth (Style_t style);  Internal helper function that returns the line width of the given marker style (0 = filled marker) ;  ; static Style_t GetMarkerStyleBase (Style_t style);  Internal helper function that returns the corresponding marker style with line width 1 for the given style. ;  . Protected Member Functions;  TH1 ();  Histogram default constructor. ;  ;  TH1 (const char *name, const char *title, Int_t nbinsx, const Double_t *xbins);  Constructor for variable bin size histograms using an input array of type double. ;  ;  TH1 (const char *name, const char *title, Int_t nbinsx, const Float_t *xbins);  Constructor for variable bin size histograms using an input array of type float. ;  ;  TH1 (const char *name, const char *title, Int_t nbinsx, Double_t xlow, Double_t xup);  Constructor for fix bin size histograms. ;  ; virtual Int_t AutoP2FindLimits (Double_t min, Double_t max);  Buffer-based estimate of the histogram range using the power of 2 algorithm. ;  ; Int_t AxisChoice (Option_t *axis) const;  Choose an axis according to ""axis"". ;  ; virtual Int_t BufferFill (Double_t x, Double_t w);  accumulate arguments in buffer. ;  ; virtual void DoFillN (Int_t ntimes, const Double_t *x, const Double_t *w, Int_t stride=1);  Internal method to fill histogram content from a vector called directly by TH1::BufferEmpty. ;  ; virtual Double_t DoIntegral (Int_t ix1, Int_t ix2, Int_t iy1, Int_t iy2, Int_t iz1, Int_t iz2, Double_t &err, Option_t *opt, Bool_t doerr=kFALSE) const;  Internal function compute integral and optionally the error between the limits specified by the bin number values working for all histograms (1D, 2D and 3D) ;  ; virtual Bool_t FindNewAxisLimits (const TAxis *axis, const Double_t point, Double_t &newMin, Double_t &newMax);  finds new limits for the axis so that point is within the range and the limits are compatible with the previous ones (see TH1::Merg",MatchSource.WIKI,doc/master/classTH1.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH1.html
Integrability,interface,interface,". ROOT: TH1 Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Static Protected Member Functions |; Protected Attributes |; Static Protected Attributes |; Private Member Functions |; Friends |; List of all members ; TH1 Class ReferenceHistogram Library » Histogram classes. ; TH1 is the base class of all histogram classes in ROOT. ; It provides the common interface for operations such as binning, filling, drawing, which will be detailed below. Creating histograms; Labelling axes. Binning; Fix or variable bin size; Convention for numbering bins; Alphanumeric Bin Labels; Histograms with automatic bins; Rebinning. Filling histograms; Associated errors; Associated functions; Projections of histograms; Random Numbers and histograms; Making a copy of a histogram; Normalizing histograms. Drawing histograms; Setting Drawing histogram contour levels (2-D hists only); Setting histogram graphics attributes; Customising how axes are drawn. Fitting histograms; Saving/reading histograms to/from a ROOT file; Operations on histograms; Miscellaneous operations. ROOT supports the following histogram types:. 1-D histograms:; TH1C : histograms with one byte per channel. Maximum bin content = 127; TH1S : histograms with one short per channel. Maximum bin content = 32767; TH1I : histograms with one int per channel. Maximum bin content = INT_MAX (*); TH1L : histograms with one long64 per channel. Maximum bin content = LLONG_MAX (**); TH1F : histograms with one float per channel. Maximum precision 7 digits, maximum integer bin content = +/-16777216 (***); TH1D : histograms with one double per channel. Maximum precision 14 digits, maximum integer bin content = +/-9007199254740992 (****). 2-D histograms:; TH2C : histograms with one byte per channel. Maximum bin content = 127; TH2S : histograms with one short per channel",MatchSource.WIKI,doc/master/classTH1.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH1.html
Modifiability,variab,variable,". ROOT: TH1 Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Static Protected Member Functions |; Protected Attributes |; Static Protected Attributes |; Private Member Functions |; Friends |; List of all members ; TH1 Class ReferenceHistogram Library » Histogram classes. ; TH1 is the base class of all histogram classes in ROOT. ; It provides the common interface for operations such as binning, filling, drawing, which will be detailed below. Creating histograms; Labelling axes. Binning; Fix or variable bin size; Convention for numbering bins; Alphanumeric Bin Labels; Histograms with automatic bins; Rebinning. Filling histograms; Associated errors; Associated functions; Projections of histograms; Random Numbers and histograms; Making a copy of a histogram; Normalizing histograms. Drawing histograms; Setting Drawing histogram contour levels (2-D hists only); Setting histogram graphics attributes; Customising how axes are drawn. Fitting histograms; Saving/reading histograms to/from a ROOT file; Operations on histograms; Miscellaneous operations. ROOT supports the following histogram types:. 1-D histograms:; TH1C : histograms with one byte per channel. Maximum bin content = 127; TH1S : histograms with one short per channel. Maximum bin content = 32767; TH1I : histograms with one int per channel. Maximum bin content = INT_MAX (*); TH1L : histograms with one long64 per channel. Maximum bin content = LLONG_MAX (**); TH1F : histograms with one float per channel. Maximum precision 7 digits, maximum integer bin content = +/-16777216 (***); TH1D : histograms with one double per channel. Maximum precision 14 digits, maximum integer bin content = +/-9007199254740992 (****). 2-D histograms:; TH2C : histograms with one byte per channel. Maximum bin content = 127; TH2S : histograms with one short per channel",MatchSource.WIKI,doc/master/classTH1.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH1.html
Performance,perform,performance,"he imaginary part of the output; ""MAG""- returns a histogram of the magnitude of the output; ""PH"" - returns a histogram of the phase of the output. option of transform type; ""R2C"" - real to complex transforms - default; ""R2HC"" - real to halfcomplex (special format of storing output data, results the same as for R2C); ""DHT"" - discrete Hartley transform real to real transforms (sine and cosine):; ""R2R_0"", ""R2R_1"", ""R2R_2"", ""R2R_3"" - discrete cosine transforms of types I-IV; ""R2R_4"", ""R2R_5"", ""R2R_6"", ""R2R_7"" - discrete sine transforms of types I-IV To specify the type of each dimension of a 2-dimensional real to real transform, use options of form ""R2R_XX"", for example, ""R2R_02"" for a transform, which is of type ""R2R_0"" in 1st dimension and ""R2R_2"" in the 2nd. option of transform flag; ""ES"" (from ""estimate"") - no time in preparing the transform, but probably sub-optimal performance; ""M"" (from ""measure"") - some time spend in finding the optimal way to do the transform; ""P"" (from ""patient"") - more time spend in finding the optimal way to do the transform; ""EX"" (from ""exhaustive"") - the most optimal way is found This option should be chosen depending on how many transforms of the same size and type are going to be done. Planning is only done once, for the first transform of this size and type. Default is ""ES"". Examples of valid options: ""Mag R2C M"" ""Re R2R_11"" ""Im R2C ES"" ""PH R2HC EX"" ; Reimplemented in TH2Poly.; Definition at line 3284 of file TH1.cxx. ◆ Fill() [1/3]. Int_t TH1::Fill ; (; const char * ; namex, . Double_t ; w . ). virtual . Increment bin with namex with a weight w. ; if x is less than the low-edge of the first bin, the Underflow bin is incremented if x is equal to or greater than the upper edge of last bin, the Overflow bin is incremented; If the weight is not equal to 1, the storage of the sum of squares of weights is automatically triggered and the sum of the squares of weights is incremented by \( w^2 \) in the bin corresponding to x.; The function ret",MatchSource.WIKI,doc/master/classTH1.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH1.html
Safety,avoid,avoid,"orkNoStats Don't draw stats box. . kUserContour User specified contour levels. . kLogX X-axis in log scale. . kIsZoomed Bit set when zooming on Y axis. . kNoTitle Don't draw the histogram title. . kIsAverage Bin contents are average (used by Add) . kIsNotW Histogram is forced to be not weighted even when the histogram is filled with weighted. . kAutoBinPTwo different than 1. ; Use Power(2)-based algorithm for autobinning . kIsHighlight bit set if histo is highlight . Definition at line 164 of file TH1.h. Constructor & Destructor Documentation. ◆ TH1() [1/5]. TH1::TH1 ; (; const TH1 & ; ). privatedelete . ◆ TH1() [2/5]. TH1::TH1 ; (; ). protected . Histogram default constructor. ; Definition at line 615 of file TH1.cxx. ◆ TH1() [3/5]. TH1::TH1 ; (; const char * ; name, . const char * ; title, . Int_t ; nbins, . Double_t ; xlow, . Double_t ; xup . ). protected . Constructor for fix bin size histograms. ; Creates the main histogram structure.; Parameters. [in]namename of histogram (avoid blanks) ; [in]titlehistogram title. If title is of the form stringt;stringx;stringy;stringz, the histogram title is set to stringt, the x axis title to stringx, the y axis title to stringy, etc. ; [in]nbinsnumber of bins ; [in]xlowlow edge of first bin ; [in]xupupper edge of last bin (not included in last bin) . Definition at line 697 of file TH1.cxx. ◆ TH1() [4/5]. TH1::TH1 ; (; const char * ; name, . const char * ; title, . Int_t ; nbins, . const Float_t * ; xbins . ). protected . Constructor for variable bin size histograms using an input array of type float. ; Creates the main histogram structure.; Parameters. [in]namename of histogram (avoid blanks) ; [in]titlehistogram title. If title is of the form stringt;stringx;stringy;stringz the histogram title is set to stringt, the x axis title to stringx, the y axis title to stringy, etc. ; [in]nbinsnumber of bins ; [in]xbinsarray of low-edges for each bin. This is an array of type float and size nbins+1 . Definition at line 719 of file T",MatchSource.WIKI,doc/master/classTH1.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH1.html
Security,access,access,"ry associated with this file are automatically deleted. Labelling axes; Axis titles can be specified in the title argument of the constructor. They must be separated by "";"": TH1F* h=new TH1F(""h"", ""Histogram title;X Axis;Y Axis"", 100, 0, 1);; The histogram title and the axis titles can be any TLatex string, and are persisted if a histogram is written to a file.; Any title can be omitted: TH1F* h=new TH1F(""h"", ""Histogram title;;Y Axis"", 100, 0, 1);; TH1F* h=new TH1F(""h"", "";;Y Axis"", 100, 0, 1);; The method SetTitle() has the same syntax: h->SetTitle(""Histogram title;Another X title Axis"");; Alternatively, the title of each axis can be set directly: h->GetXaxis()->SetTitle(""X axis title"");; h->GetYaxis()->SetTitle(""Y axis title"");; For bin labels see binning. Binning. Fix or variable bin size; All histogram types support either fix or variable bin sizes. 2-D histograms may have fix size bins along X and variable size bins along Y or vice-versa. The functions to fill, manipulate, draw or access histograms are identical in both cases.; Each histogram always contains 3 axis objects of type TAxis: fXaxis, fYaxis and fZaxis. To access the axis parameters, use: TAxis *xaxis = h->GetXaxis(); etc.; Double_t binCenter = xaxis->GetBinCenter(bin), etc.; TAxisClass to manage histogram axis.Definition TAxis.h:31; TAxis::GetBinCentervirtual Double_t GetBinCenter(Int_t bin) constReturn center of bin.Definition TAxis.cxx:478; See class TAxis for a description of all the access functions. The axis range is always stored internally in double precision. Convention for numbering bins; For all histogram types: nbins, xlow, xup bin = 0; underflow bin; bin = 1; first bin with low-edge xlow INCLUDED; bin = nbins; last bin with upper-edge xup EXCLUDED; bin = nbins+1; overflow bin; In case of 2-D or 3-D histograms, a ""global bin"" number is defined. For example, assuming a 3-D histogram with (binx, biny, binz), the function Int_t gbin = h->GetBin(binx, biny, binz);; int; returns a global/lineari",MatchSource.WIKI,doc/master/classTH1.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH1.html
Testability,test,test,"e. Because TH1 derives from TNamed, the key identifier on the file is the histogram name: TFile f(""histos.root"", ""new"");; TH1F h1(""hgaus"", ""histo from a gaussian"", 100, -3, 3);; h1.FillRandom(""gaus"", 10000);; h1->Write();; f#define f(i)Definition RSha256.hxx:104; TFileA ROOT file is an on-disk file, usually with extension .root, that stores objects in a file-system-li...Definition TFile.h:53; TObject::Writevirtual Int_t Write(const char *name=nullptr, Int_t option=0, Int_t bufsize=0)Write this object to the current directory.Definition TObject.cxx:886; To read this histogram in another Root session, do: TFile f(""histos.root"");; TH1F *h = (TH1F*)f.Get(""hgaus"");; One can save all histograms in memory to the file by: file->Write();. Miscellaneous operations; TH1::KolmogorovTest(): statistical test of compatibility in shape; between two histograms; TH1::Smooth() smooths the bin contents of a 1-d histogram; TH1::Integral() returns the integral of bin contents in a given bin range; TH1::GetMean(int axis) returns the mean value along axis; TH1::GetStdDev(int axis) returns the sigma distribution along axis; TH1::GetEntries() returns the number of entries; TH1::Reset() resets the bin contents and errors of a histogram; d#define d(i)Definition RSha256.hxx:102; a#define a(i)Definition RSha256.hxx:99; valueOption_t Option_t TPoint TPoint const char GetTextMagnitude GetFillStyle GetLineColor GetLineWidth GetMarkerStyle GetTextAlign GetTextColor GetTextSize void valueDefinition TGWin32VirtualXProxy.cxx:142; TH1TH1 is the base class of all histogram classes in ROOT.Definition TH1.h:59; TH1::Smoothvirtual void Smooth(Int_t ntimes=1, Option_t *option="""")Smooth bin contents of this histogram.Definition TH1.cxx:6879; TH1::GetStdDevvirtual Double_t GetStdDev(Int_t axis=1) constReturns the Standard Deviation (Sigma).Definition TH1.cxx:7607; TH1::GetMeanvirtual Double_t GetMean(Int_t axis=1) constFor axis = 1,2 or 3 returns the mean value of the histogram along X,Y or Z axis.Definition TH",MatchSource.WIKI,doc/master/classTH1.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH1.html
Usability,usab,usable,"illRandom(const char *fname, Int_t ntimes=5000, TRandom *rng=nullptr)Fill histogram following distribution in function fname.Definition TH1.cxx:3519; TH1::GetRandom can be used to return a random number distributed according to the contents of a histogram. Making a copy of a histogram; Like for any other ROOT object derived from TObject, one can use the Clone() function. This makes an identical copy of the original histogram including all associated errors and functions, e.g.: TH1F *hnew = (TH1F*)h->Clone(""hnew"");; TH1::CloneTObject * Clone(const char *newname="""") const overrideMake a complete copy of the underlying object.Definition TH1.cxx:2752. Normalizing histograms; One can scale a histogram such that the bins integral is equal to the normalization parameter via TH1::Scale(Double_t norm), where norm is the desired normalization divided by the integral of the histogram. Drawing histograms; Histograms are drawn via the THistPainter class. Each histogram has a pointer to its own painter (to be usable in a multithreaded program). Many drawing options are supported. See THistPainter::Paint() for more details.; The same histogram can be drawn with different options in different pads. When a histogram drawn in a pad is deleted, the histogram is automatically removed from the pad or pads where it was drawn. If a histogram is drawn in a pad, then filled again, the new status of the histogram will be automatically shown in the pad next time the pad is updated. One does not need to redraw the histogram. To draw the current version of a histogram in a pad, one can use h->DrawCopy();; This makes a clone (see Clone below) of the histogram. Once the clone is drawn, the original histogram may be modified or deleted without affecting the aspect of the clone.; One can use TH1::SetMaximum() and TH1::SetMinimum() to force a particular value for the maximum or the minimum scale on the plot. (For 1-D histograms this means the y-axis, while for 2-D histograms these functions affect th",MatchSource.WIKI,doc/master/classTH1.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH1.html
Availability,error,errors,"TH1C () override;  Destructor. ;  ; void AddBinContent (Int_t bin) override;  Increment bin content by 1. ;  ; void AddBinContent (Int_t bin, Double_t w) override;  Increment bin content by w. ;  ; void Copy (TObject &hnew) const override;  Copy this to newth1. ;  ; TClass * IsA () const override;  ; TH1C & operator= (const TH1C &h1);  Operator =. ;  ; void Reset (Option_t *option="""") override;  Reset. ;  ; void SetBinsLength (Int_t n=-1) override;  Set total number of bins including under/overflow Reallocate bin contents array. ;  ; void Streamer (TBuffer &) override;  Stream a class object. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TH1;  ~TH1 () override;  Histogram default destructor. ;  ; virtual Bool_t Add (const TH1 *h, const TH1 *h2, Double_t c1=1, Double_t c2=1);  Replace contents of this histogram by the addition of h1 and h2. ;  ; virtual Bool_t Add (const TH1 *h1, Double_t c1=1);  Performs the operation: this = this + c1*h1 If errors are defined (see TH1::Sumw2), errors are also recalculated. ;  ; virtual Bool_t Add (TF1 *h1, Double_t c1=1, Option_t *option="""");  Performs the operation: this = this + c1*f1 if errors are defined (see TH1::Sumw2), errors are also recalculated. ;  ; virtual Double_t AndersonDarlingTest (const TH1 *h2, Double_t &advalue) const;  Same function as above but returning also the test statistic value. ;  ; virtual Double_t AndersonDarlingTest (const TH1 *h2, Option_t *option="""") const;  Statistical test of compatibility in shape between this histogram and h2, using the Anderson-Darling 2 sample test. ;  ; void Browse (TBrowser *b) override;  Browse the Histogram object. ;  ; virtual Int_t BufferEmpty (Int_t action=0);  Fill histogram with all entries in the buffer. ;  ; virtual Bool_t CanExtendAllAxes () const;  Returns true if all axes are extendable. ;  ; virtual Double_t Chi2Test (const TH1 *h2, Option_t *option=""UU"", Double_t *res=nullptr) const;  \( \chi^{2} \)",MatchSource.WIKI,doc/master/classTH1C.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH1C.html
Deployability,update,update," Internal helper function that returns the corresponding marker style with line width 1 for the given style. ;  ;  Static Public Member Functions inherited from TArrayC; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TArray; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static TArray * ReadArray (TBuffer &b, const TClass *clReq);  Read TArray object from buffer. ;  ; static void WriteArray (TBuffer &b, const TArray *a);  Write TArray object to buffer. ;  . Protected Member Functions; Double_t RetrieveBinContent (Int_t bin) const override;  Raw retrieval of bin content on internal data structure see convention for numbering bins in TH1::GetBin. ;  ; void UpdateBinContent (Int_t bin, Double_t content) override;  Raw update of bin content on internal data structure see convention for numbering bins in TH1::GetBin. ;  ;  Protected Member Functions inherited from TH1;  TH1 ();  Histogram default constructor. ;  ;  TH1 (const char *name, const char *title, Int_t nbinsx, const Double_t *xbins);  Constructor for variable bin size histograms using an input array of type double. ;  ;  TH1 (const char *name, const char *title, Int_t nbinsx, const Float_t *xbins);  Constructor for variable bin size histograms using an input array of type float. ;  ;  TH1 (const char *name, const char *title, Int_t nbinsx, Double_t xlow, Double_t xup);  Constructor for fix bin size histograms. ;  ; virtual Int_t AutoP2FindLimits (Double_t min, Double_t max);  Buffer-based estimate of the histogram range using the power of 2 algorithm. ;  ; Int_t AxisChoice (Option_t *axis) const;  Choose an axis according to ""axis"". ;  ; virtual Int_t BufferFill (Double_t x, Double_t w);  accumulate arguments in buffer. ;  ; virtual void DoFillN (Int_t n",MatchSource.WIKI,doc/master/classTH1C.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH1C.html
Energy Efficiency,power,power," . Protected Member Functions; Double_t RetrieveBinContent (Int_t bin) const override;  Raw retrieval of bin content on internal data structure see convention for numbering bins in TH1::GetBin. ;  ; void UpdateBinContent (Int_t bin, Double_t content) override;  Raw update of bin content on internal data structure see convention for numbering bins in TH1::GetBin. ;  ;  Protected Member Functions inherited from TH1;  TH1 ();  Histogram default constructor. ;  ;  TH1 (const char *name, const char *title, Int_t nbinsx, const Double_t *xbins);  Constructor for variable bin size histograms using an input array of type double. ;  ;  TH1 (const char *name, const char *title, Int_t nbinsx, const Float_t *xbins);  Constructor for variable bin size histograms using an input array of type float. ;  ;  TH1 (const char *name, const char *title, Int_t nbinsx, Double_t xlow, Double_t xup);  Constructor for fix bin size histograms. ;  ; virtual Int_t AutoP2FindLimits (Double_t min, Double_t max);  Buffer-based estimate of the histogram range using the power of 2 algorithm. ;  ; Int_t AxisChoice (Option_t *axis) const;  Choose an axis according to ""axis"". ;  ; virtual Int_t BufferFill (Double_t x, Double_t w);  accumulate arguments in buffer. ;  ; virtual void DoFillN (Int_t ntimes, const Double_t *x, const Double_t *w, Int_t stride=1);  Internal method to fill histogram content from a vector called directly by TH1::BufferEmpty. ;  ; virtual Double_t DoIntegral (Int_t ix1, Int_t ix2, Int_t iy1, Int_t iy2, Int_t iz1, Int_t iz2, Double_t &err, Option_t *opt, Bool_t doerr=kFALSE) const;  Internal function compute integral and optionally the error between the limits specified by the bin number values working for all histograms (1D, 2D and 3D) ;  ; virtual Bool_t FindNewAxisLimits (const TAxis *axis, const Double_t point, Double_t &newMin, Double_t &newMax);  finds new limits for the axis so that point is within the range and the limits are compatible with the previous ones (see TH1::Merg",MatchSource.WIKI,doc/master/classTH1C.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH1C.html
Integrability,rout,routine,"n="""");  Performs the operation: this = this + c1*f1 if errors are defined (see TH1::Sumw2), errors are also recalculated. ;  ; virtual Double_t AndersonDarlingTest (const TH1 *h2, Double_t &advalue) const;  Same function as above but returning also the test statistic value. ;  ; virtual Double_t AndersonDarlingTest (const TH1 *h2, Option_t *option="""") const;  Statistical test of compatibility in shape between this histogram and h2, using the Anderson-Darling 2 sample test. ;  ; void Browse (TBrowser *b) override;  Browse the Histogram object. ;  ; virtual Int_t BufferEmpty (Int_t action=0);  Fill histogram with all entries in the buffer. ;  ; virtual Bool_t CanExtendAllAxes () const;  Returns true if all axes are extendable. ;  ; virtual Double_t Chi2Test (const TH1 *h2, Option_t *option=""UU"", Double_t *res=nullptr) const;  \( \chi^{2} \) test for comparing weighted and unweighted histograms. ;  ; virtual Double_t Chi2TestX (const TH1 *h2, Double_t &chi2, Int_t &ndf, Int_t &igood, Option_t *option=""UU"", Double_t *res=nullptr) const;  The computation routine of the Chisquare test. ;  ; virtual Double_t Chisquare (TF1 *f1, Option_t *option="""") const;  Compute and return the chisquare of this histogram with respect to a function The chisquare is computed by weighting each histogram point by the bin error By default the full range of the histogram is used. ;  ; virtual void ClearUnderflowAndOverflow ();  Remove all the content from the underflow and overflow bins, without changing the number of entries After calling this method, every undeflow and overflow bins will have content 0.0 The Sumw2 is also cleared, since there is no more content in the bins. ;  ; TObject * Clone (const char *newname="""") const override;  Make a complete copy of the underlying object. ;  ; virtual Double_t ComputeIntegral (Bool_t onlyPositive=false);  Compute integral (normalized cumulative sum of bins) w/o under/overflows The result is stored in fIntegral and used by the GetRandom functions. ; ",MatchSource.WIKI,doc/master/classTH1C.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH1C.html
Modifiability,variab,variable,". ROOT: TH1C Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Friends |; List of all members ; TH1C Class ReferenceHistogram Library » Histogram classes. ; 1-D histogram with a byte per channel (see TH1 documentation) ; Definition at line 458 of file TH1.h. Public Member Functions;  TH1C ();  Constructor. ;  ;  TH1C (const char *name, const char *title, Int_t nbinsx, const Double_t *xbins);  Create a 1-Dim histogram with variable bins of type char (one byte per channel) (see TH1::TH1 for explanation of parameters) ;  ;  TH1C (const char *name, const char *title, Int_t nbinsx, const Float_t *xbins);  Create a 1-Dim histogram with variable bins of type char (one byte per channel) (see TH1::TH1 for explanation of parameters) ;  ;  TH1C (const char *name, const char *title, Int_t nbinsx, Double_t xlow, Double_t xup);  Create a 1-Dim histogram with fix bins of type char (one byte per channel) (see TH1::TH1 for explanation of parameters) ;  ;  TH1C (const TH1C &h1c);  Copy constructor. ;  ;  ~TH1C () override;  Destructor. ;  ; void AddBinContent (Int_t bin) override;  Increment bin content by 1. ;  ; void AddBinContent (Int_t bin, Double_t w) override;  Increment bin content by w. ;  ; void Copy (TObject &hnew) const override;  Copy this to newth1. ;  ; TClass * IsA () const override;  ; TH1C & operator= (const TH1C &h1);  Operator =. ;  ; void Reset (Option_t *option="""") override;  Reset. ;  ; void SetBinsLength (Int_t n=-1) override;  Set total number of bins including under/overflow Reallocate bin contents array. ;  ; void Streamer (TBuffer &) override;  Stream a class object. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TH1;  ~TH1 () override;  Histogram default destructor. ;  ; virtual Bool_t Add (const TH1 *h, const TH1 *h2, Double_t c1=1, Do",MatchSource.WIKI,doc/master/classTH1C.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH1C.html
Security,hash,hash,"m of squares of weights. ;  ; void UseCurrentStyle () override;  Copy current attributes from/to current style. ;  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; TClass * IsA () const override;  ; Bool_t IsSortable () const override;  ; void ls (Option_t *option="""") const override;  List TNamed name and title. ;  ; TNamed & operator= (const TNamed &rhs);  TNamed assignment operator. ;  ; void Print (Option_t *option="""") const override;  Print TNamed name and title. ;  ; virtual Int_t Sizeof () const;  Return size of the TNamed part of the TObject. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to c",MatchSource.WIKI,doc/master/classTH1C.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH1C.html
Testability,test,test,". ;  ; void Reset (Option_t *option="""") override;  Reset. ;  ; void SetBinsLength (Int_t n=-1) override;  Set total number of bins including under/overflow Reallocate bin contents array. ;  ; void Streamer (TBuffer &) override;  Stream a class object. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TH1;  ~TH1 () override;  Histogram default destructor. ;  ; virtual Bool_t Add (const TH1 *h, const TH1 *h2, Double_t c1=1, Double_t c2=1);  Replace contents of this histogram by the addition of h1 and h2. ;  ; virtual Bool_t Add (const TH1 *h1, Double_t c1=1);  Performs the operation: this = this + c1*h1 If errors are defined (see TH1::Sumw2), errors are also recalculated. ;  ; virtual Bool_t Add (TF1 *h1, Double_t c1=1, Option_t *option="""");  Performs the operation: this = this + c1*f1 if errors are defined (see TH1::Sumw2), errors are also recalculated. ;  ; virtual Double_t AndersonDarlingTest (const TH1 *h2, Double_t &advalue) const;  Same function as above but returning also the test statistic value. ;  ; virtual Double_t AndersonDarlingTest (const TH1 *h2, Option_t *option="""") const;  Statistical test of compatibility in shape between this histogram and h2, using the Anderson-Darling 2 sample test. ;  ; void Browse (TBrowser *b) override;  Browse the Histogram object. ;  ; virtual Int_t BufferEmpty (Int_t action=0);  Fill histogram with all entries in the buffer. ;  ; virtual Bool_t CanExtendAllAxes () const;  Returns true if all axes are extendable. ;  ; virtual Double_t Chi2Test (const TH1 *h2, Option_t *option=""UU"", Double_t *res=nullptr) const;  \( \chi^{2} \) test for comparing weighted and unweighted histograms. ;  ; virtual Double_t Chi2TestX (const TH1 *h2, Double_t &chi2, Int_t &ndf, Int_t &igood, Option_t *option=""UU"", Double_t *res=nullptr) const;  The computation routine of the Chisquare test. ;  ; virtual Double_t Chisquare (TF1 *f1, Option_t *option="""") const;  Compute and return the chisqua",MatchSource.WIKI,doc/master/classTH1C.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH1C.html
Usability,clear,cleared,"ffer. ;  ; virtual Bool_t CanExtendAllAxes () const;  Returns true if all axes are extendable. ;  ; virtual Double_t Chi2Test (const TH1 *h2, Option_t *option=""UU"", Double_t *res=nullptr) const;  \( \chi^{2} \) test for comparing weighted and unweighted histograms. ;  ; virtual Double_t Chi2TestX (const TH1 *h2, Double_t &chi2, Int_t &ndf, Int_t &igood, Option_t *option=""UU"", Double_t *res=nullptr) const;  The computation routine of the Chisquare test. ;  ; virtual Double_t Chisquare (TF1 *f1, Option_t *option="""") const;  Compute and return the chisquare of this histogram with respect to a function The chisquare is computed by weighting each histogram point by the bin error By default the full range of the histogram is used. ;  ; virtual void ClearUnderflowAndOverflow ();  Remove all the content from the underflow and overflow bins, without changing the number of entries After calling this method, every undeflow and overflow bins will have content 0.0 The Sumw2 is also cleared, since there is no more content in the bins. ;  ; TObject * Clone (const char *newname="""") const override;  Make a complete copy of the underlying object. ;  ; virtual Double_t ComputeIntegral (Bool_t onlyPositive=false);  Compute integral (normalized cumulative sum of bins) w/o under/overflows The result is stored in fIntegral and used by the GetRandom functions. ;  ; virtual void DirectoryAutoAdd (TDirectory *);  Perform the automatic addition of the histogram to the given directory. ;  ; Int_t DistancetoPrimitive (Int_t px, Int_t py) override;  Compute distance from point px,py to a line. ;  ; virtual Bool_t Divide (const TH1 *h1);  Divide this histogram by h1. ;  ; virtual Bool_t Divide (const TH1 *h1, const TH1 *h2, Double_t c1=1, Double_t c2=1, Option_t *option="""");  Replace contents of this histogram by the division of h1 by h2. ;  ; virtual Bool_t Divide (TF1 *f1, Double_t c1=1);  Performs the operation: this = this/(c1*f1) if errors are defined (see TH1::Sumw2), errors are also recalc",MatchSource.WIKI,doc/master/classTH1C.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH1C.html
Availability,error,errors,") override;  Increment bin content by 1. ;  ; void AddBinContent (Int_t bin, Double_t w) override;  Increment bin content by a weight w Passing an out-of-range bin leads to undefined behavior. ;  ; void Copy (TObject &hnew) const override;  Copy this to newth1. ;  ; TClass * IsA () const override;  ; TH1D & operator= (const TH1D &h1);  Operator =. ;  ; void Reset (Option_t *option="""") override;  Reset. ;  ; void SetBinsLength (Int_t n=-1) override;  Set total number of bins including under/overflow Reallocate bin contents array. ;  ; void Streamer (TBuffer &) override;  Stream a class object. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TH1;  ~TH1 () override;  Histogram default destructor. ;  ; virtual Bool_t Add (const TH1 *h, const TH1 *h2, Double_t c1=1, Double_t c2=1);  Replace contents of this histogram by the addition of h1 and h2. ;  ; virtual Bool_t Add (const TH1 *h1, Double_t c1=1);  Performs the operation: this = this + c1*h1 If errors are defined (see TH1::Sumw2), errors are also recalculated. ;  ; virtual Bool_t Add (TF1 *h1, Double_t c1=1, Option_t *option="""");  Performs the operation: this = this + c1*f1 if errors are defined (see TH1::Sumw2), errors are also recalculated. ;  ; virtual Double_t AndersonDarlingTest (const TH1 *h2, Double_t &advalue) const;  Same function as above but returning also the test statistic value. ;  ; virtual Double_t AndersonDarlingTest (const TH1 *h2, Option_t *option="""") const;  Statistical test of compatibility in shape between this histogram and h2, using the Anderson-Darling 2 sample test. ;  ; void Browse (TBrowser *b) override;  Browse the Histogram object. ;  ; virtual Int_t BufferEmpty (Int_t action=0);  Fill histogram with all entries in the buffer. ;  ; virtual Bool_t CanExtendAllAxes () const;  Returns true if all axes are extendable. ;  ; virtual Double_t Chi2Test (const TH1 *h2, Option_t *option=""UU"", Double_t *res=nullptr) const;  \( \chi^{2} \)",MatchSource.WIKI,doc/master/classTH1D.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH1D.html
Deployability,update,update," Internal helper function that returns the corresponding marker style with line width 1 for the given style. ;  ;  Static Public Member Functions inherited from TArrayD; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TArray; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static TArray * ReadArray (TBuffer &b, const TClass *clReq);  Read TArray object from buffer. ;  ; static void WriteArray (TBuffer &b, const TArray *a);  Write TArray object to buffer. ;  . Protected Member Functions; Double_t RetrieveBinContent (Int_t bin) const override;  Raw retrieval of bin content on internal data structure see convention for numbering bins in TH1::GetBin. ;  ; void UpdateBinContent (Int_t bin, Double_t content) override;  Raw update of bin content on internal data structure see convention for numbering bins in TH1::GetBin. ;  ;  Protected Member Functions inherited from TH1;  TH1 ();  Histogram default constructor. ;  ;  TH1 (const char *name, const char *title, Int_t nbinsx, const Double_t *xbins);  Constructor for variable bin size histograms using an input array of type double. ;  ;  TH1 (const char *name, const char *title, Int_t nbinsx, const Float_t *xbins);  Constructor for variable bin size histograms using an input array of type float. ;  ;  TH1 (const char *name, const char *title, Int_t nbinsx, Double_t xlow, Double_t xup);  Constructor for fix bin size histograms. ;  ; virtual Int_t AutoP2FindLimits (Double_t min, Double_t max);  Buffer-based estimate of the histogram range using the power of 2 algorithm. ;  ; Int_t AxisChoice (Option_t *axis) const;  Choose an axis according to ""axis"". ;  ; virtual Int_t BufferFill (Double_t x, Double_t w);  accumulate arguments in buffer. ;  ; virtual void DoFillN (Int_t n",MatchSource.WIKI,doc/master/classTH1D.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH1D.html
Energy Efficiency,power,power," . Protected Member Functions; Double_t RetrieveBinContent (Int_t bin) const override;  Raw retrieval of bin content on internal data structure see convention for numbering bins in TH1::GetBin. ;  ; void UpdateBinContent (Int_t bin, Double_t content) override;  Raw update of bin content on internal data structure see convention for numbering bins in TH1::GetBin. ;  ;  Protected Member Functions inherited from TH1;  TH1 ();  Histogram default constructor. ;  ;  TH1 (const char *name, const char *title, Int_t nbinsx, const Double_t *xbins);  Constructor for variable bin size histograms using an input array of type double. ;  ;  TH1 (const char *name, const char *title, Int_t nbinsx, const Float_t *xbins);  Constructor for variable bin size histograms using an input array of type float. ;  ;  TH1 (const char *name, const char *title, Int_t nbinsx, Double_t xlow, Double_t xup);  Constructor for fix bin size histograms. ;  ; virtual Int_t AutoP2FindLimits (Double_t min, Double_t max);  Buffer-based estimate of the histogram range using the power of 2 algorithm. ;  ; Int_t AxisChoice (Option_t *axis) const;  Choose an axis according to ""axis"". ;  ; virtual Int_t BufferFill (Double_t x, Double_t w);  accumulate arguments in buffer. ;  ; virtual void DoFillN (Int_t ntimes, const Double_t *x, const Double_t *w, Int_t stride=1);  Internal method to fill histogram content from a vector called directly by TH1::BufferEmpty. ;  ; virtual Double_t DoIntegral (Int_t ix1, Int_t ix2, Int_t iy1, Int_t iy2, Int_t iz1, Int_t iz2, Double_t &err, Option_t *opt, Bool_t doerr=kFALSE) const;  Internal function compute integral and optionally the error between the limits specified by the bin number values working for all histograms (1D, 2D and 3D) ;  ; virtual Bool_t FindNewAxisLimits (const TAxis *axis, const Double_t point, Double_t &newMin, Double_t &newMax);  finds new limits for the axis so that point is within the range and the limits are compatible with the previous ones (see TH1::Merg",MatchSource.WIKI,doc/master/classTH1D.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH1D.html
Integrability,rout,routine,"n="""");  Performs the operation: this = this + c1*f1 if errors are defined (see TH1::Sumw2), errors are also recalculated. ;  ; virtual Double_t AndersonDarlingTest (const TH1 *h2, Double_t &advalue) const;  Same function as above but returning also the test statistic value. ;  ; virtual Double_t AndersonDarlingTest (const TH1 *h2, Option_t *option="""") const;  Statistical test of compatibility in shape between this histogram and h2, using the Anderson-Darling 2 sample test. ;  ; void Browse (TBrowser *b) override;  Browse the Histogram object. ;  ; virtual Int_t BufferEmpty (Int_t action=0);  Fill histogram with all entries in the buffer. ;  ; virtual Bool_t CanExtendAllAxes () const;  Returns true if all axes are extendable. ;  ; virtual Double_t Chi2Test (const TH1 *h2, Option_t *option=""UU"", Double_t *res=nullptr) const;  \( \chi^{2} \) test for comparing weighted and unweighted histograms. ;  ; virtual Double_t Chi2TestX (const TH1 *h2, Double_t &chi2, Int_t &ndf, Int_t &igood, Option_t *option=""UU"", Double_t *res=nullptr) const;  The computation routine of the Chisquare test. ;  ; virtual Double_t Chisquare (TF1 *f1, Option_t *option="""") const;  Compute and return the chisquare of this histogram with respect to a function The chisquare is computed by weighting each histogram point by the bin error By default the full range of the histogram is used. ;  ; virtual void ClearUnderflowAndOverflow ();  Remove all the content from the underflow and overflow bins, without changing the number of entries After calling this method, every undeflow and overflow bins will have content 0.0 The Sumw2 is also cleared, since there is no more content in the bins. ;  ; TObject * Clone (const char *newname="""") const override;  Make a complete copy of the underlying object. ;  ; virtual Double_t ComputeIntegral (Bool_t onlyPositive=false);  Compute integral (normalized cumulative sum of bins) w/o under/overflows The result is stored in fIntegral and used by the GetRandom functions. ; ",MatchSource.WIKI,doc/master/classTH1D.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH1D.html
Modifiability,variab,variable,". ROOT: TH1D Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Friends |; List of all members ; TH1D Class ReferenceHistogram Library » Histogram classes. ; 1-D histogram with a double per channel (see TH1 documentation) ; Definition at line 670 of file TH1.h. Public Member Functions;  TH1D ();  Constructor. ;  ;  TH1D (const char *name, const char *title, Int_t nbinsx, const Double_t *xbins);  Create a 1-Dim histogram with variable bins of type double (see TH1::TH1 for explanation of parameters) ;  ;  TH1D (const char *name, const char *title, Int_t nbinsx, const Float_t *xbins);  Create a 1-Dim histogram with variable bins of type double (see TH1::TH1 for explanation of parameters) ;  ;  TH1D (const char *name, const char *title, Int_t nbinsx, Double_t xlow, Double_t xup);  Create a 1-Dim histogram with fix bins of type double (see TH1::TH1 for explanation of parameters) ;  ;  TH1D (const TH1D &h1d);  Constructor. ;  ;  TH1D (const TVectorD &v);  Create a histogram from a TVectorD by default the histogram name is ""TVectorD"" and title = """". ;  ;  ~TH1D () override;  Destructor. ;  ; void AddBinContent (Int_t bin) override;  Increment bin content by 1. ;  ; void AddBinContent (Int_t bin, Double_t w) override;  Increment bin content by a weight w Passing an out-of-range bin leads to undefined behavior. ;  ; void Copy (TObject &hnew) const override;  Copy this to newth1. ;  ; TClass * IsA () const override;  ; TH1D & operator= (const TH1D &h1);  Operator =. ;  ; void Reset (Option_t *option="""") override;  Reset. ;  ; void SetBinsLength (Int_t n=-1) override;  Set total number of bins including under/overflow Reallocate bin contents array. ;  ; void Streamer (TBuffer &) override;  Stream a class object. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from",MatchSource.WIKI,doc/master/classTH1D.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH1D.html
Security,hash,hash,"m of squares of weights. ;  ; void UseCurrentStyle () override;  Copy current attributes from/to current style. ;  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; TClass * IsA () const override;  ; Bool_t IsSortable () const override;  ; void ls (Option_t *option="""") const override;  List TNamed name and title. ;  ; TNamed & operator= (const TNamed &rhs);  TNamed assignment operator. ;  ; void Print (Option_t *option="""") const override;  Print TNamed name and title. ;  ; virtual Int_t Sizeof () const;  Return size of the TNamed part of the TObject. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to c",MatchSource.WIKI,doc/master/classTH1D.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH1D.html
Testability,test,test,". ;  ; void Reset (Option_t *option="""") override;  Reset. ;  ; void SetBinsLength (Int_t n=-1) override;  Set total number of bins including under/overflow Reallocate bin contents array. ;  ; void Streamer (TBuffer &) override;  Stream a class object. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TH1;  ~TH1 () override;  Histogram default destructor. ;  ; virtual Bool_t Add (const TH1 *h, const TH1 *h2, Double_t c1=1, Double_t c2=1);  Replace contents of this histogram by the addition of h1 and h2. ;  ; virtual Bool_t Add (const TH1 *h1, Double_t c1=1);  Performs the operation: this = this + c1*h1 If errors are defined (see TH1::Sumw2), errors are also recalculated. ;  ; virtual Bool_t Add (TF1 *h1, Double_t c1=1, Option_t *option="""");  Performs the operation: this = this + c1*f1 if errors are defined (see TH1::Sumw2), errors are also recalculated. ;  ; virtual Double_t AndersonDarlingTest (const TH1 *h2, Double_t &advalue) const;  Same function as above but returning also the test statistic value. ;  ; virtual Double_t AndersonDarlingTest (const TH1 *h2, Option_t *option="""") const;  Statistical test of compatibility in shape between this histogram and h2, using the Anderson-Darling 2 sample test. ;  ; void Browse (TBrowser *b) override;  Browse the Histogram object. ;  ; virtual Int_t BufferEmpty (Int_t action=0);  Fill histogram with all entries in the buffer. ;  ; virtual Bool_t CanExtendAllAxes () const;  Returns true if all axes are extendable. ;  ; virtual Double_t Chi2Test (const TH1 *h2, Option_t *option=""UU"", Double_t *res=nullptr) const;  \( \chi^{2} \) test for comparing weighted and unweighted histograms. ;  ; virtual Double_t Chi2TestX (const TH1 *h2, Double_t &chi2, Int_t &ndf, Int_t &igood, Option_t *option=""UU"", Double_t *res=nullptr) const;  The computation routine of the Chisquare test. ;  ; virtual Double_t Chisquare (TF1 *f1, Option_t *option="""") const;  Compute and return the chisqua",MatchSource.WIKI,doc/master/classTH1D.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH1D.html
Usability,clear,cleared,"ffer. ;  ; virtual Bool_t CanExtendAllAxes () const;  Returns true if all axes are extendable. ;  ; virtual Double_t Chi2Test (const TH1 *h2, Option_t *option=""UU"", Double_t *res=nullptr) const;  \( \chi^{2} \) test for comparing weighted and unweighted histograms. ;  ; virtual Double_t Chi2TestX (const TH1 *h2, Double_t &chi2, Int_t &ndf, Int_t &igood, Option_t *option=""UU"", Double_t *res=nullptr) const;  The computation routine of the Chisquare test. ;  ; virtual Double_t Chisquare (TF1 *f1, Option_t *option="""") const;  Compute and return the chisquare of this histogram with respect to a function The chisquare is computed by weighting each histogram point by the bin error By default the full range of the histogram is used. ;  ; virtual void ClearUnderflowAndOverflow ();  Remove all the content from the underflow and overflow bins, without changing the number of entries After calling this method, every undeflow and overflow bins will have content 0.0 The Sumw2 is also cleared, since there is no more content in the bins. ;  ; TObject * Clone (const char *newname="""") const override;  Make a complete copy of the underlying object. ;  ; virtual Double_t ComputeIntegral (Bool_t onlyPositive=false);  Compute integral (normalized cumulative sum of bins) w/o under/overflows The result is stored in fIntegral and used by the GetRandom functions. ;  ; virtual void DirectoryAutoAdd (TDirectory *);  Perform the automatic addition of the histogram to the given directory. ;  ; Int_t DistancetoPrimitive (Int_t px, Int_t py) override;  Compute distance from point px,py to a line. ;  ; virtual Bool_t Divide (const TH1 *h1);  Divide this histogram by h1. ;  ; virtual Bool_t Divide (const TH1 *h1, const TH1 *h2, Double_t c1=1, Double_t c2=1, Option_t *option="""");  Replace contents of this histogram by the division of h1 by h2. ;  ; virtual Bool_t Divide (TF1 *f1, Double_t c1=1);  Performs the operation: this = this/(c1*f1) if errors are defined (see TH1::Sumw2), errors are also recalc",MatchSource.WIKI,doc/master/classTH1D.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH1D.html
Availability,error,error,". ROOT: TH1Editor Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Protected Member Functions |; Static Protected Member Functions |; Protected Attributes |; Private Member Functions |; Private Attributes |; List of all members ; TH1Editor Class ReferenceGUI » ROOT Graphics Editor. ; Editor for changing TH1 histogram attributes, rebinning & fitting. ; For all possible draw options (there are a few which are not implementable in graphical user interface) see THistPainter::Paint; These changes can be made via the TH1Editor: Style Tab: 'Line' : change Line attributes (color, thickness) see TAttLineEditor 'Fill' : change Fill attributes (color, pattern) see TAttFillEditor 'Title' : TextEntry: set the title of the histogram 'Histogram': change the draw options of the histogram 'Plot' : Radiobutton: draw a 2D or 3D plot of the histogram according to the Plot dimension there will be different drawing possibilities (ComboBoxes/ CheckBoxes) 2d Plot: 'Error' : ComboBox: add different error bars to the histogram (no errors, simple, ..., see THistPainter::Paint 'Add' : ComboBox: further things which can be added to the histogram (None, simple/smooth line, fill area 'Simple Drawing': CheckBox: draw a simple histogram without errors (= ""HIST"" drawoption). In combination with some other draw options an outer line is drawn on top of the histogram 'Show markers': CheckBox: draw a marker on to of each bin (=""P"" drawoption) 'Draw bar chart': CheckBox: draw a bar chart (=""B"" drawoption) change the Fill Color with Fill in the Style Tab => will show Bar menue in the Style Tab 'Bar option': CheckBox: draw a bar chart (=""BAR"" drawoption) => will show Bar menue in the Style Tab 3d Plot: 'Type' : ComboBox: set histogram type Lego-Plot or Surface draw(Lego, Lego1.2, Surf, Surf1..5) see THistPainter::Paint 'Coords' : ComboBox: set the coordinate system (Cartesian, .. Spheric) see THistPainter::Pai",MatchSource.WIKI,doc/master/classTH1Editor.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH1Editor.html
Deployability,update,updated,"gram: 'Rebin': with the Slider the number of bins (shown in the field below the Slider) can be changed to any number which divides the number of bins of the original histogram. Pushing 'Apply' will delete the origin histogram and replace it by the rebinned one on the screen Pushing 'Ignore' the origin histogram will be restored Histogram drawn from an ntuple: 'Rebin' with the slider the number of bins can be enlarged by a factor of 2,3,4,5 (moving to the right) or reduced by a factor of 1/2, 1/3, 1/4, 1/5 'BinOffset': with the BinOffset slider the origin of the histogram can be changed within one binwidth Using this slider the effect of binning the data into bins can be made visible => statistical fluctuations 'Axis Range': with the DoubleSlider it is possible to zoom into the specified axis range. It is also possible to set the upper and lower limit in fields below the slider 'Delayed drawing': all the Binning sliders can set to delay draw mode. Then the changes on the histogram are only updated, when the Slider is released. This should be activated if the redrawing of the histogram is too time consuming. // ; Definition at line 33 of file TH1Editor.h. Public Member Functions;  TH1Editor (const TGWindow *p=nullptr, Int_t width=140, Int_t height=30, UInt_t options=kChildFrame, Pixel_t back=GetDefaultFrameBackground());  Constructor of histogram attribute GUI. ;  ;  ~TH1Editor () override;  Destructor of TH1 editor. ;  ; Bool_t AcceptModel (TObject *model) override;  Check if object is able to configure with this editor. ;  ; Int_t * Dividers (Int_t n);  Return an array of dividers of n (without the trivial divider n). ;  ; virtual void DoAddB (Bool_t);  Slot connected to the bar Add check box. ;  ; virtual void DoAddBar (Bool_t);  Slot connected to the bar Add check box. ;  ; virtual void DoAddMarker (Bool_t on);  Slot connected to the show markers check box. ;  ; virtual void DoAddSimple (Bool_t on);  Slot connected to fAddSimple check box for drawing a simple histo",MatchSource.WIKI,doc/master/classTH1Editor.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH1Editor.html
Energy Efficiency,reduce,reduced," : change the Marker attributes (color, appearance, thickness) see TAttMarkerEditor; This Tab has two different layouts. One is for a histogram which is not drawn from an ntuple. The other one is available for a histogram which is drawn from an ntuple. In this case the rebin algorithm can create a rebinned histogram from the original data i.e. the ntuple. To see te differences do: TFile f(""hsimple.root""); hpx->Draw(""BAR1""); // non ntuple histogram ntuple->Draw(""px""); // ntuple histogram Non ntuple histogram: 'Rebin': with the Slider the number of bins (shown in the field below the Slider) can be changed to any number which divides the number of bins of the original histogram. Pushing 'Apply' will delete the origin histogram and replace it by the rebinned one on the screen Pushing 'Ignore' the origin histogram will be restored Histogram drawn from an ntuple: 'Rebin' with the slider the number of bins can be enlarged by a factor of 2,3,4,5 (moving to the right) or reduced by a factor of 1/2, 1/3, 1/4, 1/5 'BinOffset': with the BinOffset slider the origin of the histogram can be changed within one binwidth Using this slider the effect of binning the data into bins can be made visible => statistical fluctuations 'Axis Range': with the DoubleSlider it is possible to zoom into the specified axis range. It is also possible to set the upper and lower limit in fields below the slider 'Delayed drawing': all the Binning sliders can set to delay draw mode. Then the changes on the histogram are only updated, when the Slider is released. This should be activated if the redrawing of the histogram is too time consuming. // ; Definition at line 33 of file TH1Editor.h. Public Member Functions;  TH1Editor (const TGWindow *p=nullptr, Int_t width=140, Int_t height=30, UInt_t options=kChildFrame, Pixel_t back=GetDefaultFrameBackground());  Constructor of histogram attribute GUI. ;  ;  ~TH1Editor () override;  Destructor of TH1 editor. ;  ; Bool_t AcceptModel (TObject *model) override;  Ch",MatchSource.WIKI,doc/master/classTH1Editor.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH1Editor.html
Integrability,interface,interface,". ROOT: TH1Editor Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Protected Member Functions |; Static Protected Member Functions |; Protected Attributes |; Private Member Functions |; Private Attributes |; List of all members ; TH1Editor Class ReferenceGUI » ROOT Graphics Editor. ; Editor for changing TH1 histogram attributes, rebinning & fitting. ; For all possible draw options (there are a few which are not implementable in graphical user interface) see THistPainter::Paint; These changes can be made via the TH1Editor: Style Tab: 'Line' : change Line attributes (color, thickness) see TAttLineEditor 'Fill' : change Fill attributes (color, pattern) see TAttFillEditor 'Title' : TextEntry: set the title of the histogram 'Histogram': change the draw options of the histogram 'Plot' : Radiobutton: draw a 2D or 3D plot of the histogram according to the Plot dimension there will be different drawing possibilities (ComboBoxes/ CheckBoxes) 2d Plot: 'Error' : ComboBox: add different error bars to the histogram (no errors, simple, ..., see THistPainter::Paint 'Add' : ComboBox: further things which can be added to the histogram (None, simple/smooth line, fill area 'Simple Drawing': CheckBox: draw a simple histogram without errors (= ""HIST"" drawoption). In combination with some other draw options an outer line is drawn on top of the histogram 'Show markers': CheckBox: draw a marker on to of each bin (=""P"" drawoption) 'Draw bar chart': CheckBox: draw a bar chart (=""B"" drawoption) change the Fill Color with Fill in the Style Tab => will show Bar menue in the Style Tab 'Bar option': CheckBox: draw a bar chart (=""BAR"" drawoption) => will show Bar menue in the Style Tab 3d Plot: 'Type' : ComboBox: set histogram type Lego-Plot or Surface draw(Lego, Lego1.2, Surf, Surf1..5) see THistPainter::Paint 'Coords' : ComboBox: set the coordinate system (Cartesian, .. Spheric) see THistPainter::Pai",MatchSource.WIKI,doc/master/classTH1Editor.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH1Editor.html
Modifiability,config,configure," 1/2, 1/3, 1/4, 1/5 'BinOffset': with the BinOffset slider the origin of the histogram can be changed within one binwidth Using this slider the effect of binning the data into bins can be made visible => statistical fluctuations 'Axis Range': with the DoubleSlider it is possible to zoom into the specified axis range. It is also possible to set the upper and lower limit in fields below the slider 'Delayed drawing': all the Binning sliders can set to delay draw mode. Then the changes on the histogram are only updated, when the Slider is released. This should be activated if the redrawing of the histogram is too time consuming. // ; Definition at line 33 of file TH1Editor.h. Public Member Functions;  TH1Editor (const TGWindow *p=nullptr, Int_t width=140, Int_t height=30, UInt_t options=kChildFrame, Pixel_t back=GetDefaultFrameBackground());  Constructor of histogram attribute GUI. ;  ;  ~TH1Editor () override;  Destructor of TH1 editor. ;  ; Bool_t AcceptModel (TObject *model) override;  Check if object is able to configure with this editor. ;  ; Int_t * Dividers (Int_t n);  Return an array of dividers of n (without the trivial divider n). ;  ; virtual void DoAddB (Bool_t);  Slot connected to the bar Add check box. ;  ; virtual void DoAddBar (Bool_t);  Slot connected to the bar Add check box. ;  ; virtual void DoAddMarker (Bool_t on);  Slot connected to the show markers check box. ;  ; virtual void DoAddSimple (Bool_t on);  Slot connected to fAddSimple check box for drawing a simple histogram without errors (== HIST draw option) in combination with some other draw options. ;  ; virtual void DoApply ();  Slot connected to the Apply button of the Binning tab. ;  ; virtual void DoAxisRange ();  Slot connected to the number entry fields containing the Max/Min value of the x-axis. ;  ; virtual void DoBarOffset ();  Slot connected to the Bar Offset of the Bar Charts. ;  ; virtual void DoBarWidth ();  Slot connected to the Bar Width of the Bar Charts. ;  ; virtual void DoBinLa",MatchSource.WIKI,doc/master/classTH1Editor.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH1Editor.html
Security,hash,hash,"n response of a timer timing out. ;  ; virtual void IconifyWindow ();  iconify window ;  ; TClass * IsA () const override;  ; virtual Bool_t IsMapped ();  Returns kTRUE if window is mapped on screen, kFALSE otherwise. ;  ; virtual void LowerWindow ();  lower window ;  ; void Print (Option_t *option="""") const override;  Print window id. ;  ; virtual void RaiseWindow ();  raise window ;  ; virtual void RequestFocus ();  request focus ;  ; virtual void SetBackgroundPixmap (Pixmap_t pixmap);  set background pixmap ;  ; virtual void SetName (const char *name);  ; virtual void SetWindowName (const char *name=nullptr);  Set window name. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TGObject;  TGObject ();  ;  TGObject (const TGObject &tgo);  ;  ~TGObject () override;  TGObject destructor. ;  ; TGClient * GetClient () const;  ; Handle_t GetId () const;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; Bool_t IsEqual (const TObject *obj) const override;  Equal comparison (TGObjects are equal if they have the same window identifier). ;  ; void SaveAs (const char *filename="""", Option_t *option="""") const override;  Write this TGObject to a file using TImage, if filename's extension signals a valid TImage::EImageFileType, as defined by TImage::GetImageFileTypeFromFilename(). ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse ob",MatchSource.WIKI,doc/master/classTH1Editor.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH1Editor.html
Usability,simpl,simple,". ROOT: TH1Editor Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Protected Member Functions |; Static Protected Member Functions |; Protected Attributes |; Private Member Functions |; Private Attributes |; List of all members ; TH1Editor Class ReferenceGUI » ROOT Graphics Editor. ; Editor for changing TH1 histogram attributes, rebinning & fitting. ; For all possible draw options (there are a few which are not implementable in graphical user interface) see THistPainter::Paint; These changes can be made via the TH1Editor: Style Tab: 'Line' : change Line attributes (color, thickness) see TAttLineEditor 'Fill' : change Fill attributes (color, pattern) see TAttFillEditor 'Title' : TextEntry: set the title of the histogram 'Histogram': change the draw options of the histogram 'Plot' : Radiobutton: draw a 2D or 3D plot of the histogram according to the Plot dimension there will be different drawing possibilities (ComboBoxes/ CheckBoxes) 2d Plot: 'Error' : ComboBox: add different error bars to the histogram (no errors, simple, ..., see THistPainter::Paint 'Add' : ComboBox: further things which can be added to the histogram (None, simple/smooth line, fill area 'Simple Drawing': CheckBox: draw a simple histogram without errors (= ""HIST"" drawoption). In combination with some other draw options an outer line is drawn on top of the histogram 'Show markers': CheckBox: draw a marker on to of each bin (=""P"" drawoption) 'Draw bar chart': CheckBox: draw a bar chart (=""B"" drawoption) change the Fill Color with Fill in the Style Tab => will show Bar menue in the Style Tab 'Bar option': CheckBox: draw a bar chart (=""BAR"" drawoption) => will show Bar menue in the Style Tab 3d Plot: 'Type' : ComboBox: set histogram type Lego-Plot or Surface draw(Lego, Lego1.2, Surf, Surf1..5) see THistPainter::Paint 'Coords' : ComboBox: set the coordinate system (Cartesian, .. Spheric) see THistPainter::Pai",MatchSource.WIKI,doc/master/classTH1Editor.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH1Editor.html
Availability,error,error,"*location, const char *fmt, va_list va) constTObjectprotectedvirtual; DoFillN(Int_t ntimes, const Double_t *x, const Double_t *w, Int_t stride=1)TH1protectedvirtual; DoIntegral(Int_t ix1, Int_t ix2, Int_t iy1, Int_t iy2, Int_t iz1, Int_t iz2, Double_t &err, Option_t *opt, Bool_t doerr=kFALSE) constTH1protectedvirtual; Draw(Option_t *option="""") overrideTH1virtual; DrawClass() constTObjectvirtual; DrawClone(Option_t *option="""") constTObjectvirtual; DrawCopy(Option_t *option="""", const char *name_postfix=""_copy"") constTH1virtual; DrawNormalized(Option_t *option="""", Double_t norm=1) constTH1virtual; DrawPanel()TH1virtual; Dump() constTObjectvirtual; EBinErrorOpt enum nameTH1; EDeprecatedStatusBits enum nameTObject; Error(const char *method, const char *msgfmt,...) constTObjectvirtual; EStatOverflows enum nameTH1; EStatusBits enum nameTH1; Eval(TF1 *f1, Option_t *option="""")TH1virtual; Execute(const char *method, const char *params, Int_t *error=nullptr)TObjectvirtual; Execute(TMethod *method, TObjArray *params, Int_t *error=nullptr)TObjectvirtual; ExecuteEvent(Int_t event, Int_t px, Int_t py) overrideTH1virtual; ExtendAxis(Double_t x, TAxis *axis)TH1virtual; fArrayTArrayF; Fatal(const char *method, const char *msgfmt,...) constTObjectvirtual; fBarOffsetTH1protected; fBarWidthTH1protected; fBinStatErrOptTH1protected; fBitsTObjectprivate; fBufferTH1protected; fBufferSizeTH1protected; fContourTH1protected; fDimensionTH1protected; fDirectoryTH1protected; fEntriesTH1protected; fFillColorTAttFillprotected; fFillStyleTAttFillprotected; FFT(TH1 *h_output, Option_t *option)TH1virtual; fFunctionsTH1protected; fgAddDirectoryTH1protectedstatic; fgBufferSizeTH1protectedstatic; fgDefaultSumw2TH1protectedstatic; fgDtorOnlyTObjectprivatestatic; fgObjectStatTObjectprivatestatic; fgStatOverflowsTH1protectedstatic; Fill(Double_t x)TH1virtual; Fill(Double_t x, Double_t w)TH1virtual; Fill(const char *name, Double_t w)TH1virtual; FillBuffer(char *&buffer)TNamedvirtual; FillN(Int_t ntimes, cons",MatchSource.WIKI,doc/master/classTH1F-members.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH1F-members.html
Modifiability,inherit,inherited,". ROOT: Member List. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. TH1F Member List. This is the complete list of members for TH1F, including all inherited members. AbstractMethod(const char *method) constTObject; Add(TF1 *h1, Double_t c1=1, Option_t *option="""")TH1virtual; Add(const TH1 *h1, Double_t c1=1)TH1virtual; Add(const TH1 *h, const TH1 *h2, Double_t c1=1, Double_t c2=1)TH1virtual; AddAt(Float_t c, Int_t i)TArrayF; AddBinContent(Int_t bin) overrideTH1Finlinevirtual; AddBinContent(Int_t bin, Double_t w) overrideTH1Finlinevirtual; AddDirectory(Bool_t add=kTRUE)TH1static; AddDirectoryStatus()TH1static; AddToTObjectTable(TObject *)TObjectprivatestatic; Adopt(Int_t n, Float_t *array)TArrayF; AndersonDarlingTest(const TH1 *h2, Option_t *option="""") constTH1virtual; AndersonDarlingTest(const TH1 *h2, Double_t &advalue) constTH1virtual; AppendPad(Option_t *option="""")TObjectvirtual; At(Int_t i) constTArrayFinline; AutoP2FindLimits(Double_t min, Double_t max)TH1protectedvirtual; AutoP2GetBins(Int_t n)TH1inlineprotectedstatic; AutoP2GetPower2(Double_t x, Bool_t next=kTRUE)TH1inlineprotectedstatic; AxisChoice(Option_t *axis) constTH1protected; BoundsOk(const char *where, Int_t at) constTArrayinlineprotected; Browse(TBrowser *b) overrideTH1virtual; BufferEmpty(Int_t action=0)TH1virtual; BufferFill(Double_t x, Double_t w)TH1protectedvirtual; Build()TH1private; CanExtendAllAxes() constTH1virtual; CheckAxisLimits(const TAxis *a1, const TAxis *a2)TH1protectedstatic; CheckBinLabels(const TAxis *a1, const TAxis *a2)TH1protectedstatic; CheckBinLimits(const TAxis *a1, const TAxis *a2)TH1protectedstatic; CheckConsistency(const TH1 *h1, const TH1 *h2)TH1protectedstatic; CheckConsistentSubAxes(const TAxis *a1, Int_t firstBin1, Int_t lastBin1, const TAxis *a2, Int_t firstBin2=0, Int_t lastBin2=0)TH1protectedstatic; CheckedHash()TObjectinline; CheckEqualAxes(const TAxis *a1, const TAxis *a2)TH1protectedstatic; Chi2Test(const TH1 *h2, Option_t *option=",MatchSource.WIKI,doc/master/classTH1F-members.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH1F-members.html
Availability,error,errors,"verride;  Destructor. ;  ; void AddBinContent (Int_t bin) override;  Increment bin content by 1. ;  ; void AddBinContent (Int_t bin, Double_t w) override;  Increment bin content by a weight w. ;  ; void Copy (TObject &hnew) const override;  Copy this to newth1. ;  ; TClass * IsA () const override;  ; TH1F & operator= (const TH1F &h1);  Operator =. ;  ; void Reset (Option_t *option="""") override;  Reset. ;  ; void SetBinsLength (Int_t n=-1) override;  Set total number of bins including under/overflow Reallocate bin contents array. ;  ; void Streamer (TBuffer &) override;  Stream a class object. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TH1;  ~TH1 () override;  Histogram default destructor. ;  ; virtual Bool_t Add (const TH1 *h, const TH1 *h2, Double_t c1=1, Double_t c2=1);  Replace contents of this histogram by the addition of h1 and h2. ;  ; virtual Bool_t Add (const TH1 *h1, Double_t c1=1);  Performs the operation: this = this + c1*h1 If errors are defined (see TH1::Sumw2), errors are also recalculated. ;  ; virtual Bool_t Add (TF1 *h1, Double_t c1=1, Option_t *option="""");  Performs the operation: this = this + c1*f1 if errors are defined (see TH1::Sumw2), errors are also recalculated. ;  ; virtual Double_t AndersonDarlingTest (const TH1 *h2, Double_t &advalue) const;  Same function as above but returning also the test statistic value. ;  ; virtual Double_t AndersonDarlingTest (const TH1 *h2, Option_t *option="""") const;  Statistical test of compatibility in shape between this histogram and h2, using the Anderson-Darling 2 sample test. ;  ; void Browse (TBrowser *b) override;  Browse the Histogram object. ;  ; virtual Int_t BufferEmpty (Int_t action=0);  Fill histogram with all entries in the buffer. ;  ; virtual Bool_t CanExtendAllAxes () const;  Returns true if all axes are extendable. ;  ; virtual Double_t Chi2Test (const TH1 *h2, Option_t *option=""UU"", Double_t *res=nullptr) const;  \( \chi^{2} \)",MatchSource.WIKI,doc/master/classTH1F.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH1F.html
Deployability,update,update," Internal helper function that returns the corresponding marker style with line width 1 for the given style. ;  ;  Static Public Member Functions inherited from TArrayF; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TArray; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static TArray * ReadArray (TBuffer &b, const TClass *clReq);  Read TArray object from buffer. ;  ; static void WriteArray (TBuffer &b, const TArray *a);  Write TArray object to buffer. ;  . Protected Member Functions; Double_t RetrieveBinContent (Int_t bin) const override;  Raw retrieval of bin content on internal data structure see convention for numbering bins in TH1::GetBin. ;  ; void UpdateBinContent (Int_t bin, Double_t content) override;  Raw update of bin content on internal data structure see convention for numbering bins in TH1::GetBin. ;  ;  Protected Member Functions inherited from TH1;  TH1 ();  Histogram default constructor. ;  ;  TH1 (const char *name, const char *title, Int_t nbinsx, const Double_t *xbins);  Constructor for variable bin size histograms using an input array of type double. ;  ;  TH1 (const char *name, const char *title, Int_t nbinsx, const Float_t *xbins);  Constructor for variable bin size histograms using an input array of type float. ;  ;  TH1 (const char *name, const char *title, Int_t nbinsx, Double_t xlow, Double_t xup);  Constructor for fix bin size histograms. ;  ; virtual Int_t AutoP2FindLimits (Double_t min, Double_t max);  Buffer-based estimate of the histogram range using the power of 2 algorithm. ;  ; Int_t AxisChoice (Option_t *axis) const;  Choose an axis according to ""axis"". ;  ; virtual Int_t BufferFill (Double_t x, Double_t w);  accumulate arguments in buffer. ;  ; virtual void DoFillN (Int_t n",MatchSource.WIKI,doc/master/classTH1F.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH1F.html
Energy Efficiency,power,power," . Protected Member Functions; Double_t RetrieveBinContent (Int_t bin) const override;  Raw retrieval of bin content on internal data structure see convention for numbering bins in TH1::GetBin. ;  ; void UpdateBinContent (Int_t bin, Double_t content) override;  Raw update of bin content on internal data structure see convention for numbering bins in TH1::GetBin. ;  ;  Protected Member Functions inherited from TH1;  TH1 ();  Histogram default constructor. ;  ;  TH1 (const char *name, const char *title, Int_t nbinsx, const Double_t *xbins);  Constructor for variable bin size histograms using an input array of type double. ;  ;  TH1 (const char *name, const char *title, Int_t nbinsx, const Float_t *xbins);  Constructor for variable bin size histograms using an input array of type float. ;  ;  TH1 (const char *name, const char *title, Int_t nbinsx, Double_t xlow, Double_t xup);  Constructor for fix bin size histograms. ;  ; virtual Int_t AutoP2FindLimits (Double_t min, Double_t max);  Buffer-based estimate of the histogram range using the power of 2 algorithm. ;  ; Int_t AxisChoice (Option_t *axis) const;  Choose an axis according to ""axis"". ;  ; virtual Int_t BufferFill (Double_t x, Double_t w);  accumulate arguments in buffer. ;  ; virtual void DoFillN (Int_t ntimes, const Double_t *x, const Double_t *w, Int_t stride=1);  Internal method to fill histogram content from a vector called directly by TH1::BufferEmpty. ;  ; virtual Double_t DoIntegral (Int_t ix1, Int_t ix2, Int_t iy1, Int_t iy2, Int_t iz1, Int_t iz2, Double_t &err, Option_t *opt, Bool_t doerr=kFALSE) const;  Internal function compute integral and optionally the error between the limits specified by the bin number values working for all histograms (1D, 2D and 3D) ;  ; virtual Bool_t FindNewAxisLimits (const TAxis *axis, const Double_t point, Double_t &newMin, Double_t &newMax);  finds new limits for the axis so that point is within the range and the limits are compatible with the previous ones (see TH1::Merg",MatchSource.WIKI,doc/master/classTH1F.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH1F.html
Integrability,rout,routine,"n="""");  Performs the operation: this = this + c1*f1 if errors are defined (see TH1::Sumw2), errors are also recalculated. ;  ; virtual Double_t AndersonDarlingTest (const TH1 *h2, Double_t &advalue) const;  Same function as above but returning also the test statistic value. ;  ; virtual Double_t AndersonDarlingTest (const TH1 *h2, Option_t *option="""") const;  Statistical test of compatibility in shape between this histogram and h2, using the Anderson-Darling 2 sample test. ;  ; void Browse (TBrowser *b) override;  Browse the Histogram object. ;  ; virtual Int_t BufferEmpty (Int_t action=0);  Fill histogram with all entries in the buffer. ;  ; virtual Bool_t CanExtendAllAxes () const;  Returns true if all axes are extendable. ;  ; virtual Double_t Chi2Test (const TH1 *h2, Option_t *option=""UU"", Double_t *res=nullptr) const;  \( \chi^{2} \) test for comparing weighted and unweighted histograms. ;  ; virtual Double_t Chi2TestX (const TH1 *h2, Double_t &chi2, Int_t &ndf, Int_t &igood, Option_t *option=""UU"", Double_t *res=nullptr) const;  The computation routine of the Chisquare test. ;  ; virtual Double_t Chisquare (TF1 *f1, Option_t *option="""") const;  Compute and return the chisquare of this histogram with respect to a function The chisquare is computed by weighting each histogram point by the bin error By default the full range of the histogram is used. ;  ; virtual void ClearUnderflowAndOverflow ();  Remove all the content from the underflow and overflow bins, without changing the number of entries After calling this method, every undeflow and overflow bins will have content 0.0 The Sumw2 is also cleared, since there is no more content in the bins. ;  ; TObject * Clone (const char *newname="""") const override;  Make a complete copy of the underlying object. ;  ; virtual Double_t ComputeIntegral (Bool_t onlyPositive=false);  Compute integral (normalized cumulative sum of bins) w/o under/overflows The result is stored in fIntegral and used by the GetRandom functions. ; ",MatchSource.WIKI,doc/master/classTH1F.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH1F.html
Modifiability,variab,variable,". ROOT: TH1F Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Friends |; List of all members ; TH1F Class ReferenceHistogram Library » Histogram classes. ; 1-D histogram with a float per channel (see TH1 documentation) ; Definition at line 622 of file TH1.h. Public Member Functions;  TH1F ();  Constructor. ;  ;  TH1F (const char *name, const char *title, Int_t nbinsx, const Double_t *xbins);  Create a 1-Dim histogram with variable bins of type float (see TH1::TH1 for explanation of parameters) ;  ;  TH1F (const char *name, const char *title, Int_t nbinsx, const Float_t *xbins);  Create a 1-Dim histogram with variable bins of type float (see TH1::TH1 for explanation of parameters) ;  ;  TH1F (const char *name, const char *title, Int_t nbinsx, Double_t xlow, Double_t xup);  Create a 1-Dim histogram with fix bins of type float (see TH1::TH1 for explanation of parameters) ;  ;  TH1F (const TH1F &h1f);  Copy Constructor. ;  ;  TH1F (const TVectorF &v);  Create a histogram from a TVectorF by default the histogram name is ""TVectorF"" and title = """". ;  ;  ~TH1F () override;  Destructor. ;  ; void AddBinContent (Int_t bin) override;  Increment bin content by 1. ;  ; void AddBinContent (Int_t bin, Double_t w) override;  Increment bin content by a weight w. ;  ; void Copy (TObject &hnew) const override;  Copy this to newth1. ;  ; TClass * IsA () const override;  ; TH1F & operator= (const TH1F &h1);  Operator =. ;  ; void Reset (Option_t *option="""") override;  Reset. ;  ; void SetBinsLength (Int_t n=-1) override;  Set total number of bins including under/overflow Reallocate bin contents array. ;  ; void Streamer (TBuffer &) override;  Stream a class object. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TH1;  ~TH1 () override;  Histogram default destructor.",MatchSource.WIKI,doc/master/classTH1F.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH1F.html
Security,hash,hash,"m of squares of weights. ;  ; void UseCurrentStyle () override;  Copy current attributes from/to current style. ;  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; TClass * IsA () const override;  ; Bool_t IsSortable () const override;  ; void ls (Option_t *option="""") const override;  List TNamed name and title. ;  ; TNamed & operator= (const TNamed &rhs);  TNamed assignment operator. ;  ; void Print (Option_t *option="""") const override;  Print TNamed name and title. ;  ; virtual Int_t Sizeof () const;  Return size of the TNamed part of the TObject. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to c",MatchSource.WIKI,doc/master/classTH1F.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH1F.html
Testability,test,test,". ;  ; void Reset (Option_t *option="""") override;  Reset. ;  ; void SetBinsLength (Int_t n=-1) override;  Set total number of bins including under/overflow Reallocate bin contents array. ;  ; void Streamer (TBuffer &) override;  Stream a class object. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TH1;  ~TH1 () override;  Histogram default destructor. ;  ; virtual Bool_t Add (const TH1 *h, const TH1 *h2, Double_t c1=1, Double_t c2=1);  Replace contents of this histogram by the addition of h1 and h2. ;  ; virtual Bool_t Add (const TH1 *h1, Double_t c1=1);  Performs the operation: this = this + c1*h1 If errors are defined (see TH1::Sumw2), errors are also recalculated. ;  ; virtual Bool_t Add (TF1 *h1, Double_t c1=1, Option_t *option="""");  Performs the operation: this = this + c1*f1 if errors are defined (see TH1::Sumw2), errors are also recalculated. ;  ; virtual Double_t AndersonDarlingTest (const TH1 *h2, Double_t &advalue) const;  Same function as above but returning also the test statistic value. ;  ; virtual Double_t AndersonDarlingTest (const TH1 *h2, Option_t *option="""") const;  Statistical test of compatibility in shape between this histogram and h2, using the Anderson-Darling 2 sample test. ;  ; void Browse (TBrowser *b) override;  Browse the Histogram object. ;  ; virtual Int_t BufferEmpty (Int_t action=0);  Fill histogram with all entries in the buffer. ;  ; virtual Bool_t CanExtendAllAxes () const;  Returns true if all axes are extendable. ;  ; virtual Double_t Chi2Test (const TH1 *h2, Option_t *option=""UU"", Double_t *res=nullptr) const;  \( \chi^{2} \) test for comparing weighted and unweighted histograms. ;  ; virtual Double_t Chi2TestX (const TH1 *h2, Double_t &chi2, Int_t &ndf, Int_t &igood, Option_t *option=""UU"", Double_t *res=nullptr) const;  The computation routine of the Chisquare test. ;  ; virtual Double_t Chisquare (TF1 *f1, Option_t *option="""") const;  Compute and return the chisqua",MatchSource.WIKI,doc/master/classTH1F.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH1F.html
Usability,clear,cleared,"ffer. ;  ; virtual Bool_t CanExtendAllAxes () const;  Returns true if all axes are extendable. ;  ; virtual Double_t Chi2Test (const TH1 *h2, Option_t *option=""UU"", Double_t *res=nullptr) const;  \( \chi^{2} \) test for comparing weighted and unweighted histograms. ;  ; virtual Double_t Chi2TestX (const TH1 *h2, Double_t &chi2, Int_t &ndf, Int_t &igood, Option_t *option=""UU"", Double_t *res=nullptr) const;  The computation routine of the Chisquare test. ;  ; virtual Double_t Chisquare (TF1 *f1, Option_t *option="""") const;  Compute and return the chisquare of this histogram with respect to a function The chisquare is computed by weighting each histogram point by the bin error By default the full range of the histogram is used. ;  ; virtual void ClearUnderflowAndOverflow ();  Remove all the content from the underflow and overflow bins, without changing the number of entries After calling this method, every undeflow and overflow bins will have content 0.0 The Sumw2 is also cleared, since there is no more content in the bins. ;  ; TObject * Clone (const char *newname="""") const override;  Make a complete copy of the underlying object. ;  ; virtual Double_t ComputeIntegral (Bool_t onlyPositive=false);  Compute integral (normalized cumulative sum of bins) w/o under/overflows The result is stored in fIntegral and used by the GetRandom functions. ;  ; virtual void DirectoryAutoAdd (TDirectory *);  Perform the automatic addition of the histogram to the given directory. ;  ; Int_t DistancetoPrimitive (Int_t px, Int_t py) override;  Compute distance from point px,py to a line. ;  ; virtual Bool_t Divide (const TH1 *h1);  Divide this histogram by h1. ;  ; virtual Bool_t Divide (const TH1 *h1, const TH1 *h2, Double_t c1=1, Double_t c2=1, Option_t *option="""");  Replace contents of this histogram by the division of h1 by h2. ;  ; virtual Bool_t Divide (TF1 *f1, Double_t c1=1);  Performs the operation: this = this/(c1*f1) if errors are defined (see TH1::Sumw2), errors are also recalc",MatchSource.WIKI,doc/master/classTH1F.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH1F.html
Availability,error,error,"*location, const char *fmt, va_list va) constTObjectprotectedvirtual; DoFillN(Int_t ntimes, const Double_t *x, const Double_t *w, Int_t stride=1)TH1protectedvirtual; DoIntegral(Int_t ix1, Int_t ix2, Int_t iy1, Int_t iy2, Int_t iz1, Int_t iz2, Double_t &err, Option_t *opt, Bool_t doerr=kFALSE) constTH1protectedvirtual; Draw(Option_t *option="""") overrideTH1virtual; DrawClass() constTObjectvirtual; DrawClone(Option_t *option="""") constTObjectvirtual; DrawCopy(Option_t *option="""", const char *name_postfix=""_copy"") constTH1virtual; DrawNormalized(Option_t *option="""", Double_t norm=1) constTH1virtual; DrawPanel()TH1virtual; Dump() constTObjectvirtual; EBinErrorOpt enum nameTH1; EDeprecatedStatusBits enum nameTObject; Error(const char *method, const char *msgfmt,...) constTObjectvirtual; EStatOverflows enum nameTH1; EStatusBits enum nameTH1; Eval(TF1 *f1, Option_t *option="""")TH1virtual; Execute(const char *method, const char *params, Int_t *error=nullptr)TObjectvirtual; Execute(TMethod *method, TObjArray *params, Int_t *error=nullptr)TObjectvirtual; ExecuteEvent(Int_t event, Int_t px, Int_t py) overrideTH1virtual; ExtendAxis(Double_t x, TAxis *axis)TH1virtual; fArrayTArrayI; Fatal(const char *method, const char *msgfmt,...) constTObjectvirtual; fBarOffsetTH1protected; fBarWidthTH1protected; fBinStatErrOptTH1protected; fBitsTObjectprivate; fBufferTH1protected; fBufferSizeTH1protected; fContourTH1protected; fDimensionTH1protected; fDirectoryTH1protected; fEntriesTH1protected; fFillColorTAttFillprotected; fFillStyleTAttFillprotected; FFT(TH1 *h_output, Option_t *option)TH1virtual; fFunctionsTH1protected; fgAddDirectoryTH1protectedstatic; fgBufferSizeTH1protectedstatic; fgDefaultSumw2TH1protectedstatic; fgDtorOnlyTObjectprivatestatic; fgObjectStatTObjectprivatestatic; fgStatOverflowsTH1protectedstatic; Fill(Double_t x)TH1virtual; Fill(Double_t x, Double_t w)TH1virtual; Fill(const char *name, Double_t w)TH1virtual; FillBuffer(char *&buffer)TNamedvirtual; FillN(Int_t ntimes, cons",MatchSource.WIKI,doc/master/classTH1I-members.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH1I-members.html
Modifiability,inherit,inherited,". ROOT: Member List. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. TH1I Member List. This is the complete list of members for TH1I, including all inherited members. AbstractMethod(const char *method) constTObject; Add(TF1 *h1, Double_t c1=1, Option_t *option="""")TH1virtual; Add(const TH1 *h1, Double_t c1=1)TH1virtual; Add(const TH1 *h, const TH1 *h2, Double_t c1=1, Double_t c2=1)TH1virtual; AddAt(Int_t c, Int_t i)TArrayI; AddBinContent(Int_t bin) overrideTH1Ivirtual; AddBinContent(Int_t bin, Double_t w) overrideTH1Ivirtual; AddDirectory(Bool_t add=kTRUE)TH1static; AddDirectoryStatus()TH1static; AddToTObjectTable(TObject *)TObjectprivatestatic; Adopt(Int_t n, Int_t *array)TArrayI; AndersonDarlingTest(const TH1 *h2, Option_t *option="""") constTH1virtual; AndersonDarlingTest(const TH1 *h2, Double_t &advalue) constTH1virtual; AppendPad(Option_t *option="""")TObjectvirtual; At(Int_t i) constTArrayIinline; AutoP2FindLimits(Double_t min, Double_t max)TH1protectedvirtual; AutoP2GetBins(Int_t n)TH1inlineprotectedstatic; AutoP2GetPower2(Double_t x, Bool_t next=kTRUE)TH1inlineprotectedstatic; AxisChoice(Option_t *axis) constTH1protected; BoundsOk(const char *where, Int_t at) constTArrayinlineprotected; Browse(TBrowser *b) overrideTH1virtual; BufferEmpty(Int_t action=0)TH1virtual; BufferFill(Double_t x, Double_t w)TH1protectedvirtual; Build()TH1private; CanExtendAllAxes() constTH1virtual; CheckAxisLimits(const TAxis *a1, const TAxis *a2)TH1protectedstatic; CheckBinLabels(const TAxis *a1, const TAxis *a2)TH1protectedstatic; CheckBinLimits(const TAxis *a1, const TAxis *a2)TH1protectedstatic; CheckConsistency(const TH1 *h1, const TH1 *h2)TH1protectedstatic; CheckConsistentSubAxes(const TAxis *a1, Int_t firstBin1, Int_t lastBin1, const TAxis *a2, Int_t firstBin2=0, Int_t lastBin2=0)TH1protectedstatic; CheckedHash()TObjectinline; CheckEqualAxes(const TAxis *a1, const TAxis *a2)TH1protectedstatic; Chi2Test(const TH1 *h2, Option_t *option=""UU"", Double_t *",MatchSource.WIKI,doc/master/classTH1I-members.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH1I-members.html
Availability,error,errors,"TH1I () override;  Destructor. ;  ; void AddBinContent (Int_t bin) override;  Increment bin content by 1. ;  ; void AddBinContent (Int_t bin, Double_t w) override;  Increment bin content by w. ;  ; void Copy (TObject &hnew) const override;  Copy this to newth1. ;  ; TClass * IsA () const override;  ; TH1I & operator= (const TH1I &h1);  Operator =. ;  ; void Reset (Option_t *option="""") override;  Reset. ;  ; void SetBinsLength (Int_t n=-1) override;  Set total number of bins including under/overflow Reallocate bin contents array. ;  ; void Streamer (TBuffer &) override;  Stream a class object. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TH1;  ~TH1 () override;  Histogram default destructor. ;  ; virtual Bool_t Add (const TH1 *h, const TH1 *h2, Double_t c1=1, Double_t c2=1);  Replace contents of this histogram by the addition of h1 and h2. ;  ; virtual Bool_t Add (const TH1 *h1, Double_t c1=1);  Performs the operation: this = this + c1*h1 If errors are defined (see TH1::Sumw2), errors are also recalculated. ;  ; virtual Bool_t Add (TF1 *h1, Double_t c1=1, Option_t *option="""");  Performs the operation: this = this + c1*f1 if errors are defined (see TH1::Sumw2), errors are also recalculated. ;  ; virtual Double_t AndersonDarlingTest (const TH1 *h2, Double_t &advalue) const;  Same function as above but returning also the test statistic value. ;  ; virtual Double_t AndersonDarlingTest (const TH1 *h2, Option_t *option="""") const;  Statistical test of compatibility in shape between this histogram and h2, using the Anderson-Darling 2 sample test. ;  ; void Browse (TBrowser *b) override;  Browse the Histogram object. ;  ; virtual Int_t BufferEmpty (Int_t action=0);  Fill histogram with all entries in the buffer. ;  ; virtual Bool_t CanExtendAllAxes () const;  Returns true if all axes are extendable. ;  ; virtual Double_t Chi2Test (const TH1 *h2, Option_t *option=""UU"", Double_t *res=nullptr) const;  \( \chi^{2} \)",MatchSource.WIKI,doc/master/classTH1I.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH1I.html
Deployability,update,update," Internal helper function that returns the corresponding marker style with line width 1 for the given style. ;  ;  Static Public Member Functions inherited from TArrayI; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TArray; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static TArray * ReadArray (TBuffer &b, const TClass *clReq);  Read TArray object from buffer. ;  ; static void WriteArray (TBuffer &b, const TArray *a);  Write TArray object to buffer. ;  . Protected Member Functions; Double_t RetrieveBinContent (Int_t bin) const override;  Raw retrieval of bin content on internal data structure see convention for numbering bins in TH1::GetBin. ;  ; void UpdateBinContent (Int_t bin, Double_t content) override;  Raw update of bin content on internal data structure see convention for numbering bins in TH1::GetBin. ;  ;  Protected Member Functions inherited from TH1;  TH1 ();  Histogram default constructor. ;  ;  TH1 (const char *name, const char *title, Int_t nbinsx, const Double_t *xbins);  Constructor for variable bin size histograms using an input array of type double. ;  ;  TH1 (const char *name, const char *title, Int_t nbinsx, const Float_t *xbins);  Constructor for variable bin size histograms using an input array of type float. ;  ;  TH1 (const char *name, const char *title, Int_t nbinsx, Double_t xlow, Double_t xup);  Constructor for fix bin size histograms. ;  ; virtual Int_t AutoP2FindLimits (Double_t min, Double_t max);  Buffer-based estimate of the histogram range using the power of 2 algorithm. ;  ; Int_t AxisChoice (Option_t *axis) const;  Choose an axis according to ""axis"". ;  ; virtual Int_t BufferFill (Double_t x, Double_t w);  accumulate arguments in buffer. ;  ; virtual void DoFillN (Int_t n",MatchSource.WIKI,doc/master/classTH1I.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH1I.html
Energy Efficiency,power,power," . Protected Member Functions; Double_t RetrieveBinContent (Int_t bin) const override;  Raw retrieval of bin content on internal data structure see convention for numbering bins in TH1::GetBin. ;  ; void UpdateBinContent (Int_t bin, Double_t content) override;  Raw update of bin content on internal data structure see convention for numbering bins in TH1::GetBin. ;  ;  Protected Member Functions inherited from TH1;  TH1 ();  Histogram default constructor. ;  ;  TH1 (const char *name, const char *title, Int_t nbinsx, const Double_t *xbins);  Constructor for variable bin size histograms using an input array of type double. ;  ;  TH1 (const char *name, const char *title, Int_t nbinsx, const Float_t *xbins);  Constructor for variable bin size histograms using an input array of type float. ;  ;  TH1 (const char *name, const char *title, Int_t nbinsx, Double_t xlow, Double_t xup);  Constructor for fix bin size histograms. ;  ; virtual Int_t AutoP2FindLimits (Double_t min, Double_t max);  Buffer-based estimate of the histogram range using the power of 2 algorithm. ;  ; Int_t AxisChoice (Option_t *axis) const;  Choose an axis according to ""axis"". ;  ; virtual Int_t BufferFill (Double_t x, Double_t w);  accumulate arguments in buffer. ;  ; virtual void DoFillN (Int_t ntimes, const Double_t *x, const Double_t *w, Int_t stride=1);  Internal method to fill histogram content from a vector called directly by TH1::BufferEmpty. ;  ; virtual Double_t DoIntegral (Int_t ix1, Int_t ix2, Int_t iy1, Int_t iy2, Int_t iz1, Int_t iz2, Double_t &err, Option_t *opt, Bool_t doerr=kFALSE) const;  Internal function compute integral and optionally the error between the limits specified by the bin number values working for all histograms (1D, 2D and 3D) ;  ; virtual Bool_t FindNewAxisLimits (const TAxis *axis, const Double_t point, Double_t &newMin, Double_t &newMax);  finds new limits for the axis so that point is within the range and the limits are compatible with the previous ones (see TH1::Merg",MatchSource.WIKI,doc/master/classTH1I.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH1I.html
Integrability,rout,routine,"n="""");  Performs the operation: this = this + c1*f1 if errors are defined (see TH1::Sumw2), errors are also recalculated. ;  ; virtual Double_t AndersonDarlingTest (const TH1 *h2, Double_t &advalue) const;  Same function as above but returning also the test statistic value. ;  ; virtual Double_t AndersonDarlingTest (const TH1 *h2, Option_t *option="""") const;  Statistical test of compatibility in shape between this histogram and h2, using the Anderson-Darling 2 sample test. ;  ; void Browse (TBrowser *b) override;  Browse the Histogram object. ;  ; virtual Int_t BufferEmpty (Int_t action=0);  Fill histogram with all entries in the buffer. ;  ; virtual Bool_t CanExtendAllAxes () const;  Returns true if all axes are extendable. ;  ; virtual Double_t Chi2Test (const TH1 *h2, Option_t *option=""UU"", Double_t *res=nullptr) const;  \( \chi^{2} \) test for comparing weighted and unweighted histograms. ;  ; virtual Double_t Chi2TestX (const TH1 *h2, Double_t &chi2, Int_t &ndf, Int_t &igood, Option_t *option=""UU"", Double_t *res=nullptr) const;  The computation routine of the Chisquare test. ;  ; virtual Double_t Chisquare (TF1 *f1, Option_t *option="""") const;  Compute and return the chisquare of this histogram with respect to a function The chisquare is computed by weighting each histogram point by the bin error By default the full range of the histogram is used. ;  ; virtual void ClearUnderflowAndOverflow ();  Remove all the content from the underflow and overflow bins, without changing the number of entries After calling this method, every undeflow and overflow bins will have content 0.0 The Sumw2 is also cleared, since there is no more content in the bins. ;  ; TObject * Clone (const char *newname="""") const override;  Make a complete copy of the underlying object. ;  ; virtual Double_t ComputeIntegral (Bool_t onlyPositive=false);  Compute integral (normalized cumulative sum of bins) w/o under/overflows The result is stored in fIntegral and used by the GetRandom functions. ; ",MatchSource.WIKI,doc/master/classTH1I.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH1I.html
Modifiability,variab,variable,". ROOT: TH1I Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Friends |; List of all members ; TH1I Class ReferenceHistogram Library » Histogram classes. ; 1-D histogram with an int per channel (see TH1 documentation) ; Definition at line 540 of file TH1.h. Public Member Functions;  TH1I ();  Constructor. ;  ;  TH1I (const char *name, const char *title, Int_t nbinsx, const Double_t *xbins);  Create a 1-Dim histogram with variable bins of type integer (see TH1::TH1 for explanation of parameters) ;  ;  TH1I (const char *name, const char *title, Int_t nbinsx, const Float_t *xbins);  Create a 1-Dim histogram with variable bins of type integer (see TH1::TH1 for explanation of parameters) ;  ;  TH1I (const char *name, const char *title, Int_t nbinsx, Double_t xlow, Double_t xup);  Create a 1-Dim histogram with fix bins of type integer (see TH1::TH1 for explanation of parameters) ;  ;  TH1I (const TH1I &h1i);  Copy constructor. ;  ;  ~TH1I () override;  Destructor. ;  ; void AddBinContent (Int_t bin) override;  Increment bin content by 1. ;  ; void AddBinContent (Int_t bin, Double_t w) override;  Increment bin content by w. ;  ; void Copy (TObject &hnew) const override;  Copy this to newth1. ;  ; TClass * IsA () const override;  ; TH1I & operator= (const TH1I &h1);  Operator =. ;  ; void Reset (Option_t *option="""") override;  Reset. ;  ; void SetBinsLength (Int_t n=-1) override;  Set total number of bins including under/overflow Reallocate bin contents array. ;  ; void Streamer (TBuffer &) override;  Stream a class object. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TH1;  ~TH1 () override;  Histogram default destructor. ;  ; virtual Bool_t Add (const TH1 *h, const TH1 *h2, Double_t c1=1, Double_t c2=1);  Replace contents of this histogram by the add",MatchSource.WIKI,doc/master/classTH1I.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH1I.html
Security,hash,hash,"m of squares of weights. ;  ; void UseCurrentStyle () override;  Copy current attributes from/to current style. ;  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; TClass * IsA () const override;  ; Bool_t IsSortable () const override;  ; void ls (Option_t *option="""") const override;  List TNamed name and title. ;  ; TNamed & operator= (const TNamed &rhs);  TNamed assignment operator. ;  ; void Print (Option_t *option="""") const override;  Print TNamed name and title. ;  ; virtual Int_t Sizeof () const;  Return size of the TNamed part of the TObject. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to c",MatchSource.WIKI,doc/master/classTH1I.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH1I.html
Testability,test,test,". ;  ; void Reset (Option_t *option="""") override;  Reset. ;  ; void SetBinsLength (Int_t n=-1) override;  Set total number of bins including under/overflow Reallocate bin contents array. ;  ; void Streamer (TBuffer &) override;  Stream a class object. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TH1;  ~TH1 () override;  Histogram default destructor. ;  ; virtual Bool_t Add (const TH1 *h, const TH1 *h2, Double_t c1=1, Double_t c2=1);  Replace contents of this histogram by the addition of h1 and h2. ;  ; virtual Bool_t Add (const TH1 *h1, Double_t c1=1);  Performs the operation: this = this + c1*h1 If errors are defined (see TH1::Sumw2), errors are also recalculated. ;  ; virtual Bool_t Add (TF1 *h1, Double_t c1=1, Option_t *option="""");  Performs the operation: this = this + c1*f1 if errors are defined (see TH1::Sumw2), errors are also recalculated. ;  ; virtual Double_t AndersonDarlingTest (const TH1 *h2, Double_t &advalue) const;  Same function as above but returning also the test statistic value. ;  ; virtual Double_t AndersonDarlingTest (const TH1 *h2, Option_t *option="""") const;  Statistical test of compatibility in shape between this histogram and h2, using the Anderson-Darling 2 sample test. ;  ; void Browse (TBrowser *b) override;  Browse the Histogram object. ;  ; virtual Int_t BufferEmpty (Int_t action=0);  Fill histogram with all entries in the buffer. ;  ; virtual Bool_t CanExtendAllAxes () const;  Returns true if all axes are extendable. ;  ; virtual Double_t Chi2Test (const TH1 *h2, Option_t *option=""UU"", Double_t *res=nullptr) const;  \( \chi^{2} \) test for comparing weighted and unweighted histograms. ;  ; virtual Double_t Chi2TestX (const TH1 *h2, Double_t &chi2, Int_t &ndf, Int_t &igood, Option_t *option=""UU"", Double_t *res=nullptr) const;  The computation routine of the Chisquare test. ;  ; virtual Double_t Chisquare (TF1 *f1, Option_t *option="""") const;  Compute and return the chisqua",MatchSource.WIKI,doc/master/classTH1I.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH1I.html
Usability,clear,cleared,"ffer. ;  ; virtual Bool_t CanExtendAllAxes () const;  Returns true if all axes are extendable. ;  ; virtual Double_t Chi2Test (const TH1 *h2, Option_t *option=""UU"", Double_t *res=nullptr) const;  \( \chi^{2} \) test for comparing weighted and unweighted histograms. ;  ; virtual Double_t Chi2TestX (const TH1 *h2, Double_t &chi2, Int_t &ndf, Int_t &igood, Option_t *option=""UU"", Double_t *res=nullptr) const;  The computation routine of the Chisquare test. ;  ; virtual Double_t Chisquare (TF1 *f1, Option_t *option="""") const;  Compute and return the chisquare of this histogram with respect to a function The chisquare is computed by weighting each histogram point by the bin error By default the full range of the histogram is used. ;  ; virtual void ClearUnderflowAndOverflow ();  Remove all the content from the underflow and overflow bins, without changing the number of entries After calling this method, every undeflow and overflow bins will have content 0.0 The Sumw2 is also cleared, since there is no more content in the bins. ;  ; TObject * Clone (const char *newname="""") const override;  Make a complete copy of the underlying object. ;  ; virtual Double_t ComputeIntegral (Bool_t onlyPositive=false);  Compute integral (normalized cumulative sum of bins) w/o under/overflows The result is stored in fIntegral and used by the GetRandom functions. ;  ; virtual void DirectoryAutoAdd (TDirectory *);  Perform the automatic addition of the histogram to the given directory. ;  ; Int_t DistancetoPrimitive (Int_t px, Int_t py) override;  Compute distance from point px,py to a line. ;  ; virtual Bool_t Divide (const TH1 *h1);  Divide this histogram by h1. ;  ; virtual Bool_t Divide (const TH1 *h1, const TH1 *h2, Double_t c1=1, Double_t c2=1, Option_t *option="""");  Replace contents of this histogram by the division of h1 by h2. ;  ; virtual Bool_t Divide (TF1 *f1, Double_t c1=1);  Performs the operation: this = this/(c1*f1) if errors are defined (see TH1::Sumw2), errors are also recalc",MatchSource.WIKI,doc/master/classTH1I.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH1I.html
Availability,error,error," and K >=3; This class has been implemented by Victor Perevoztchikov perev.nosp@m.@bnl.nosp@m..gov ; Definition at line 26 of file TH1K.h. Public Member Functions;  TH1K ();  Constructor. ;  ;  TH1K (const char *name, const char *title, Int_t nbinsx, Double_t xlow, Double_t xup, Int_t k=0);  Create a 1-Dim histogram with fix bins of type float (see TH1K::TH1 for explanation of parameters) ;  ;  ~TH1K () override;  Destructor. ;  ; void Copy (TObject &obj) const override;  Copy this histogram structure to newth1. ;  ; Int_t Fill (const char *name, Double_t w) override;  Increment bin with namex with a weight w. ;  ; Int_t Fill (Double_t x) override;  Increment bin with abscissa X by 1. ;  ; Int_t Fill (Double_t x, Double_t w) override;  Increment bin with abscissa X with a weight w. ;  ; Double_t GetBinContent (Int_t bin) const override;  Return content of global bin number bin. ;  ; Double_t GetBinContent (Int_t bin, Int_t) const override;  ; Double_t GetBinContent (Int_t bin, Int_t, Int_t) const override;  ; Double_t GetBinError (Int_t bin) const override;  Return content of global bin error. ;  ; Double_t GetBinError (Int_t bin, Int_t) const override;  ; Double_t GetBinError (Int_t bin, Int_t, Int_t) const override;  ; TClass * IsA () const override;  ; void Reset (Option_t *option="""") override;  Reset. ;  ; void SavePrimitive (std::ostream &out, Option_t *option="""") override;  Save primitive as a C++ statement(s) on output stream out Note the following restrictions in the code generated: ;  ; void SetKOrd (Int_t k);  ; void Streamer (TBuffer &) override;  Stream a class object. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TH1;  ~TH1 () override;  Histogram default destructor. ;  ; virtual Bool_t Add (const TH1 *h, const TH1 *h2, Double_t c1=1, Double_t c2=1);  Replace contents of this histogram by the addition of h1 and h2. ;  ; virtual Bool_t Add (const TH1 *h1, Double_t c1=1);  Performs the operat",MatchSource.WIKI,doc/master/classTH1K.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH1K.html
Deployability,update,update,"D) ;  ; virtual Bool_t FindNewAxisLimits (const TAxis *axis, const Double_t point, Double_t &newMin, Double_t &newMax);  finds new limits for the axis so that point is within the range and the limits are compatible with the previous ones (see TH1::Merge). ;  ; UInt_t GetAxisLabelStatus () const;  Internal function used in TH1::Fill to see which axis is full alphanumeric, i.e. ;  ; virtual Double_t GetBinErrorSqUnchecked (Int_t bin) const;  ; Bool_t GetStatOverflowsBehaviour () const;  ; Bool_t IsEmpty () const;  Check if a histogram is empty (this is a protected method used mainly by TH1Merger ) ;  ; int LoggedInconsistency (const char *name, const TH1 *h1, const TH1 *h2, bool useMerge=false) const;  ; virtual void SavePrimitiveHelp (std::ostream &out, const char *hname, Option_t *option="""");  Helper function for the SavePrimitive functions from TH1 or classes derived from TH1, eg TProfile, TProfile2D. ;  ; virtual void UpdateBinContent (Int_t bin, Double_t content);  Raw update of bin content on internal data structure see convention for numbering bins in TH1::GetBin. ;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  ;  Protected Member Functions inherited from TArray; Bool_t BoundsOk (const char *where, Int_t at) const;  ; Bool_t OutOfBoundsError (const char *where, Int_t i) const;  Generate an out-of-bounds error. Always returns false. ;  . Protected Attributes; Int_t fKCur;  ; Int_t fKOrd;  ; Int_t fNIn;  ; Int_t fReady;  ;  Protected Attributes inherited from TH1; Short_t fBarOffset;  (1000*offset) for bar charts or legos ;  ; Short_t fBarWidth;  (1000*width) for bar charts or legos ;  ; EBinErrorOpt fBinStatErrOpt;  Option for bin statistical errors. ;  ; Double_t * fBuffer;  [fBufferSize] entry buffer ;  ; Int_t fBufferSize;  fBuffer size ;  ; TArrayD fContour;  Array to display contour levels. ;  ",MatchSource.WIKI,doc/master/classTH1K.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH1K.html
Energy Efficiency,power,power,"ReadArray (TBuffer &b, const TClass *clReq);  Read TArray object from buffer. ;  ; static void WriteArray (TBuffer &b, const TArray *a);  Write TArray object to buffer. ;  . Protected Member Functions; Double_t RetrieveBinContent (Int_t bin) const override;  Raw retrieval of bin content on internal data structure see convention for numbering bins in TH1::GetBin. ;  ;  Protected Member Functions inherited from TH1;  TH1 ();  Histogram default constructor. ;  ;  TH1 (const char *name, const char *title, Int_t nbinsx, const Double_t *xbins);  Constructor for variable bin size histograms using an input array of type double. ;  ;  TH1 (const char *name, const char *title, Int_t nbinsx, const Float_t *xbins);  Constructor for variable bin size histograms using an input array of type float. ;  ;  TH1 (const char *name, const char *title, Int_t nbinsx, Double_t xlow, Double_t xup);  Constructor for fix bin size histograms. ;  ; virtual Int_t AutoP2FindLimits (Double_t min, Double_t max);  Buffer-based estimate of the histogram range using the power of 2 algorithm. ;  ; Int_t AxisChoice (Option_t *axis) const;  Choose an axis according to ""axis"". ;  ; virtual Int_t BufferFill (Double_t x, Double_t w);  accumulate arguments in buffer. ;  ; virtual void DoFillN (Int_t ntimes, const Double_t *x, const Double_t *w, Int_t stride=1);  Internal method to fill histogram content from a vector called directly by TH1::BufferEmpty. ;  ; virtual Double_t DoIntegral (Int_t ix1, Int_t ix2, Int_t iy1, Int_t iy2, Int_t iz1, Int_t iz2, Double_t &err, Option_t *opt, Bool_t doerr=kFALSE) const;  Internal function compute integral and optionally the error between the limits specified by the bin number values working for all histograms (1D, 2D and 3D) ;  ; virtual Bool_t FindNewAxisLimits (const TAxis *axis, const Double_t point, Double_t &newMin, Double_t &newMax);  finds new limits for the axis so that point is within the range and the limits are compatible with the previous ones (see TH1::Merg",MatchSource.WIKI,doc/master/classTH1K.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH1K.html
Integrability,rout,routine,"ncrement bin content by 1. ;  ; virtual void AddBinContent (Int_t bin, Double_t w);  Increment bin content by a weight w. ;  ; virtual Double_t AndersonDarlingTest (const TH1 *h2, Double_t &advalue) const;  Same function as above but returning also the test statistic value. ;  ; virtual Double_t AndersonDarlingTest (const TH1 *h2, Option_t *option="""") const;  Statistical test of compatibility in shape between this histogram and h2, using the Anderson-Darling 2 sample test. ;  ; void Browse (TBrowser *b) override;  Browse the Histogram object. ;  ; virtual Int_t BufferEmpty (Int_t action=0);  Fill histogram with all entries in the buffer. ;  ; virtual Bool_t CanExtendAllAxes () const;  Returns true if all axes are extendable. ;  ; virtual Double_t Chi2Test (const TH1 *h2, Option_t *option=""UU"", Double_t *res=nullptr) const;  \( \chi^{2} \) test for comparing weighted and unweighted histograms. ;  ; virtual Double_t Chi2TestX (const TH1 *h2, Double_t &chi2, Int_t &ndf, Int_t &igood, Option_t *option=""UU"", Double_t *res=nullptr) const;  The computation routine of the Chisquare test. ;  ; virtual Double_t Chisquare (TF1 *f1, Option_t *option="""") const;  Compute and return the chisquare of this histogram with respect to a function The chisquare is computed by weighting each histogram point by the bin error By default the full range of the histogram is used. ;  ; virtual void ClearUnderflowAndOverflow ();  Remove all the content from the underflow and overflow bins, without changing the number of entries After calling this method, every undeflow and overflow bins will have content 0.0 The Sumw2 is also cleared, since there is no more content in the bins. ;  ; TObject * Clone (const char *newname="""") const override;  Make a complete copy of the underlying object. ;  ; virtual Double_t ComputeIntegral (Bool_t onlyPositive=false);  Compute integral (normalized cumulative sum of bins) w/o under/overflows The result is stored in fIntegral and used by the GetRandom functions. ; ",MatchSource.WIKI,doc/master/classTH1K.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH1K.html
Modifiability,inherit,inherited,"y 1. ;  ; Int_t Fill (Double_t x, Double_t w) override;  Increment bin with abscissa X with a weight w. ;  ; Double_t GetBinContent (Int_t bin) const override;  Return content of global bin number bin. ;  ; Double_t GetBinContent (Int_t bin, Int_t) const override;  ; Double_t GetBinContent (Int_t bin, Int_t, Int_t) const override;  ; Double_t GetBinError (Int_t bin) const override;  Return content of global bin error. ;  ; Double_t GetBinError (Int_t bin, Int_t) const override;  ; Double_t GetBinError (Int_t bin, Int_t, Int_t) const override;  ; TClass * IsA () const override;  ; void Reset (Option_t *option="""") override;  Reset. ;  ; void SavePrimitive (std::ostream &out, Option_t *option="""") override;  Save primitive as a C++ statement(s) on output stream out Note the following restrictions in the code generated: ;  ; void SetKOrd (Int_t k);  ; void Streamer (TBuffer &) override;  Stream a class object. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TH1;  ~TH1 () override;  Histogram default destructor. ;  ; virtual Bool_t Add (const TH1 *h, const TH1 *h2, Double_t c1=1, Double_t c2=1);  Replace contents of this histogram by the addition of h1 and h2. ;  ; virtual Bool_t Add (const TH1 *h1, Double_t c1=1);  Performs the operation: this = this + c1*h1 If errors are defined (see TH1::Sumw2), errors are also recalculated. ;  ; virtual Bool_t Add (TF1 *h1, Double_t c1=1, Option_t *option="""");  Performs the operation: this = this + c1*f1 if errors are defined (see TH1::Sumw2), errors are also recalculated. ;  ; virtual void AddBinContent (Int_t bin);  Increment bin content by 1. ;  ; virtual void AddBinContent (Int_t bin, Double_t w);  Increment bin content by a weight w. ;  ; virtual Double_t AndersonDarlingTest (const TH1 *h2, Double_t &advalue) const;  Same function as above but returning also the test statistic value. ;  ; virtual Double_t AndersonDarlingTest (const TH1 *h2, Option_t *option="""") const;  ",MatchSource.WIKI,doc/master/classTH1K.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH1K.html
Security,hash,hash,"m of squares of weights. ;  ; void UseCurrentStyle () override;  Copy current attributes from/to current style. ;  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; TClass * IsA () const override;  ; Bool_t IsSortable () const override;  ; void ls (Option_t *option="""") const override;  List TNamed name and title. ;  ; TNamed & operator= (const TNamed &rhs);  TNamed assignment operator. ;  ; void Print (Option_t *option="""") const override;  Print TNamed name and title. ;  ; virtual Int_t Sizeof () const;  Return size of the TNamed part of the TObject. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to c",MatchSource.WIKI,doc/master/classTH1K.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH1K.html
Testability,test,test," SetKOrd (Int_t k);  ; void Streamer (TBuffer &) override;  Stream a class object. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TH1;  ~TH1 () override;  Histogram default destructor. ;  ; virtual Bool_t Add (const TH1 *h, const TH1 *h2, Double_t c1=1, Double_t c2=1);  Replace contents of this histogram by the addition of h1 and h2. ;  ; virtual Bool_t Add (const TH1 *h1, Double_t c1=1);  Performs the operation: this = this + c1*h1 If errors are defined (see TH1::Sumw2), errors are also recalculated. ;  ; virtual Bool_t Add (TF1 *h1, Double_t c1=1, Option_t *option="""");  Performs the operation: this = this + c1*f1 if errors are defined (see TH1::Sumw2), errors are also recalculated. ;  ; virtual void AddBinContent (Int_t bin);  Increment bin content by 1. ;  ; virtual void AddBinContent (Int_t bin, Double_t w);  Increment bin content by a weight w. ;  ; virtual Double_t AndersonDarlingTest (const TH1 *h2, Double_t &advalue) const;  Same function as above but returning also the test statistic value. ;  ; virtual Double_t AndersonDarlingTest (const TH1 *h2, Option_t *option="""") const;  Statistical test of compatibility in shape between this histogram and h2, using the Anderson-Darling 2 sample test. ;  ; void Browse (TBrowser *b) override;  Browse the Histogram object. ;  ; virtual Int_t BufferEmpty (Int_t action=0);  Fill histogram with all entries in the buffer. ;  ; virtual Bool_t CanExtendAllAxes () const;  Returns true if all axes are extendable. ;  ; virtual Double_t Chi2Test (const TH1 *h2, Option_t *option=""UU"", Double_t *res=nullptr) const;  \( \chi^{2} \) test for comparing weighted and unweighted histograms. ;  ; virtual Double_t Chi2TestX (const TH1 *h2, Double_t &chi2, Int_t &ndf, Int_t &igood, Option_t *option=""UU"", Double_t *res=nullptr) const;  The computation routine of the Chisquare test. ;  ; virtual Double_t Chisquare (TF1 *f1, Option_t *option="""") const;  Compute and return the chisqua",MatchSource.WIKI,doc/master/classTH1K.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH1K.html
Usability,clear,cleared,"ffer. ;  ; virtual Bool_t CanExtendAllAxes () const;  Returns true if all axes are extendable. ;  ; virtual Double_t Chi2Test (const TH1 *h2, Option_t *option=""UU"", Double_t *res=nullptr) const;  \( \chi^{2} \) test for comparing weighted and unweighted histograms. ;  ; virtual Double_t Chi2TestX (const TH1 *h2, Double_t &chi2, Int_t &ndf, Int_t &igood, Option_t *option=""UU"", Double_t *res=nullptr) const;  The computation routine of the Chisquare test. ;  ; virtual Double_t Chisquare (TF1 *f1, Option_t *option="""") const;  Compute and return the chisquare of this histogram with respect to a function The chisquare is computed by weighting each histogram point by the bin error By default the full range of the histogram is used. ;  ; virtual void ClearUnderflowAndOverflow ();  Remove all the content from the underflow and overflow bins, without changing the number of entries After calling this method, every undeflow and overflow bins will have content 0.0 The Sumw2 is also cleared, since there is no more content in the bins. ;  ; TObject * Clone (const char *newname="""") const override;  Make a complete copy of the underlying object. ;  ; virtual Double_t ComputeIntegral (Bool_t onlyPositive=false);  Compute integral (normalized cumulative sum of bins) w/o under/overflows The result is stored in fIntegral and used by the GetRandom functions. ;  ; virtual void DirectoryAutoAdd (TDirectory *);  Perform the automatic addition of the histogram to the given directory. ;  ; Int_t DistancetoPrimitive (Int_t px, Int_t py) override;  Compute distance from point px,py to a line. ;  ; virtual Bool_t Divide (const TH1 *h1);  Divide this histogram by h1. ;  ; virtual Bool_t Divide (const TH1 *h1, const TH1 *h2, Double_t c1=1, Double_t c2=1, Option_t *option="""");  Replace contents of this histogram by the division of h1 by h2. ;  ; virtual Bool_t Divide (TF1 *f1, Double_t c1=1);  Performs the operation: this = this/(c1*f1) if errors are defined (see TH1::Sumw2), errors are also recalc",MatchSource.WIKI,doc/master/classTH1K.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH1K.html
Availability,error,errors,"TH1L () override;  Destructor. ;  ; void AddBinContent (Int_t bin) override;  Increment bin content by 1. ;  ; void AddBinContent (Int_t bin, Double_t w) override;  Increment bin content by w. ;  ; void Copy (TObject &hnew) const override;  Copy this to newth1. ;  ; TClass * IsA () const override;  ; TH1L & operator= (const TH1L &h1);  Operator =. ;  ; void Reset (Option_t *option="""") override;  Reset. ;  ; void SetBinsLength (Int_t n=-1) override;  Set total number of bins including under/overflow Reallocate bin contents array. ;  ; void Streamer (TBuffer &) override;  Stream a class object. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TH1;  ~TH1 () override;  Histogram default destructor. ;  ; virtual Bool_t Add (const TH1 *h, const TH1 *h2, Double_t c1=1, Double_t c2=1);  Replace contents of this histogram by the addition of h1 and h2. ;  ; virtual Bool_t Add (const TH1 *h1, Double_t c1=1);  Performs the operation: this = this + c1*h1 If errors are defined (see TH1::Sumw2), errors are also recalculated. ;  ; virtual Bool_t Add (TF1 *h1, Double_t c1=1, Option_t *option="""");  Performs the operation: this = this + c1*f1 if errors are defined (see TH1::Sumw2), errors are also recalculated. ;  ; virtual Double_t AndersonDarlingTest (const TH1 *h2, Double_t &advalue) const;  Same function as above but returning also the test statistic value. ;  ; virtual Double_t AndersonDarlingTest (const TH1 *h2, Option_t *option="""") const;  Statistical test of compatibility in shape between this histogram and h2, using the Anderson-Darling 2 sample test. ;  ; void Browse (TBrowser *b) override;  Browse the Histogram object. ;  ; virtual Int_t BufferEmpty (Int_t action=0);  Fill histogram with all entries in the buffer. ;  ; virtual Bool_t CanExtendAllAxes () const;  Returns true if all axes are extendable. ;  ; virtual Double_t Chi2Test (const TH1 *h2, Option_t *option=""UU"", Double_t *res=nullptr) const;  \( \chi^{2} \)",MatchSource.WIKI,doc/master/classTH1L.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH1L.html
Deployability,update,update,"nternal helper function that returns the corresponding marker style with line width 1 for the given style. ;  ;  Static Public Member Functions inherited from TArrayL64; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TArray; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static TArray * ReadArray (TBuffer &b, const TClass *clReq);  Read TArray object from buffer. ;  ; static void WriteArray (TBuffer &b, const TArray *a);  Write TArray object to buffer. ;  . Protected Member Functions; Double_t RetrieveBinContent (Int_t bin) const override;  Raw retrieval of bin content on internal data structure see convention for numbering bins in TH1::GetBin. ;  ; void UpdateBinContent (Int_t bin, Double_t content) override;  Raw update of bin content on internal data structure see convention for numbering bins in TH1::GetBin. ;  ;  Protected Member Functions inherited from TH1;  TH1 ();  Histogram default constructor. ;  ;  TH1 (const char *name, const char *title, Int_t nbinsx, const Double_t *xbins);  Constructor for variable bin size histograms using an input array of type double. ;  ;  TH1 (const char *name, const char *title, Int_t nbinsx, const Float_t *xbins);  Constructor for variable bin size histograms using an input array of type float. ;  ;  TH1 (const char *name, const char *title, Int_t nbinsx, Double_t xlow, Double_t xup);  Constructor for fix bin size histograms. ;  ; virtual Int_t AutoP2FindLimits (Double_t min, Double_t max);  Buffer-based estimate of the histogram range using the power of 2 algorithm. ;  ; Int_t AxisChoice (Option_t *axis) const;  Choose an axis according to ""axis"". ;  ; virtual Int_t BufferFill (Double_t x, Double_t w);  accumulate arguments in buffer. ;  ; virtual void DoFillN (Int_t n",MatchSource.WIKI,doc/master/classTH1L.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH1L.html
Energy Efficiency,power,power," . Protected Member Functions; Double_t RetrieveBinContent (Int_t bin) const override;  Raw retrieval of bin content on internal data structure see convention for numbering bins in TH1::GetBin. ;  ; void UpdateBinContent (Int_t bin, Double_t content) override;  Raw update of bin content on internal data structure see convention for numbering bins in TH1::GetBin. ;  ;  Protected Member Functions inherited from TH1;  TH1 ();  Histogram default constructor. ;  ;  TH1 (const char *name, const char *title, Int_t nbinsx, const Double_t *xbins);  Constructor for variable bin size histograms using an input array of type double. ;  ;  TH1 (const char *name, const char *title, Int_t nbinsx, const Float_t *xbins);  Constructor for variable bin size histograms using an input array of type float. ;  ;  TH1 (const char *name, const char *title, Int_t nbinsx, Double_t xlow, Double_t xup);  Constructor for fix bin size histograms. ;  ; virtual Int_t AutoP2FindLimits (Double_t min, Double_t max);  Buffer-based estimate of the histogram range using the power of 2 algorithm. ;  ; Int_t AxisChoice (Option_t *axis) const;  Choose an axis according to ""axis"". ;  ; virtual Int_t BufferFill (Double_t x, Double_t w);  accumulate arguments in buffer. ;  ; virtual void DoFillN (Int_t ntimes, const Double_t *x, const Double_t *w, Int_t stride=1);  Internal method to fill histogram content from a vector called directly by TH1::BufferEmpty. ;  ; virtual Double_t DoIntegral (Int_t ix1, Int_t ix2, Int_t iy1, Int_t iy2, Int_t iz1, Int_t iz2, Double_t &err, Option_t *opt, Bool_t doerr=kFALSE) const;  Internal function compute integral and optionally the error between the limits specified by the bin number values working for all histograms (1D, 2D and 3D) ;  ; virtual Bool_t FindNewAxisLimits (const TAxis *axis, const Double_t point, Double_t &newMin, Double_t &newMax);  finds new limits for the axis so that point is within the range and the limits are compatible with the previous ones (see TH1::Merg",MatchSource.WIKI,doc/master/classTH1L.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH1L.html
Integrability,rout,routine,"n="""");  Performs the operation: this = this + c1*f1 if errors are defined (see TH1::Sumw2), errors are also recalculated. ;  ; virtual Double_t AndersonDarlingTest (const TH1 *h2, Double_t &advalue) const;  Same function as above but returning also the test statistic value. ;  ; virtual Double_t AndersonDarlingTest (const TH1 *h2, Option_t *option="""") const;  Statistical test of compatibility in shape between this histogram and h2, using the Anderson-Darling 2 sample test. ;  ; void Browse (TBrowser *b) override;  Browse the Histogram object. ;  ; virtual Int_t BufferEmpty (Int_t action=0);  Fill histogram with all entries in the buffer. ;  ; virtual Bool_t CanExtendAllAxes () const;  Returns true if all axes are extendable. ;  ; virtual Double_t Chi2Test (const TH1 *h2, Option_t *option=""UU"", Double_t *res=nullptr) const;  \( \chi^{2} \) test for comparing weighted and unweighted histograms. ;  ; virtual Double_t Chi2TestX (const TH1 *h2, Double_t &chi2, Int_t &ndf, Int_t &igood, Option_t *option=""UU"", Double_t *res=nullptr) const;  The computation routine of the Chisquare test. ;  ; virtual Double_t Chisquare (TF1 *f1, Option_t *option="""") const;  Compute and return the chisquare of this histogram with respect to a function The chisquare is computed by weighting each histogram point by the bin error By default the full range of the histogram is used. ;  ; virtual void ClearUnderflowAndOverflow ();  Remove all the content from the underflow and overflow bins, without changing the number of entries After calling this method, every undeflow and overflow bins will have content 0.0 The Sumw2 is also cleared, since there is no more content in the bins. ;  ; TObject * Clone (const char *newname="""") const override;  Make a complete copy of the underlying object. ;  ; virtual Double_t ComputeIntegral (Bool_t onlyPositive=false);  Compute integral (normalized cumulative sum of bins) w/o under/overflows The result is stored in fIntegral and used by the GetRandom functions. ; ",MatchSource.WIKI,doc/master/classTH1L.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH1L.html
Modifiability,variab,variable,". ROOT: TH1L Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Friends |; List of all members ; TH1L Class ReferenceHistogram Library » Histogram classes. ; 1-D histogram with a long64 per channel (see TH1 documentation) ; Definition at line 581 of file TH1.h. Public Member Functions;  TH1L ();  Constructor. ;  ;  TH1L (const char *name, const char *title, Int_t nbinsx, const Double_t *xbins);  Create a 1-Dim histogram with variable bins of type long64 (see TH1::TH1 for explanation of parameters) ;  ;  TH1L (const char *name, const char *title, Int_t nbinsx, const Float_t *xbins);  Create a 1-Dim histogram with variable bins of type long64 (see TH1::TH1 for explanation of parameters) ;  ;  TH1L (const char *name, const char *title, Int_t nbinsx, Double_t xlow, Double_t xup);  Create a 1-Dim histogram with fix bins of type long64 (see TH1::TH1 for explanation of parameters) ;  ;  TH1L (const TH1L &h1l);  Copy constructor. ;  ;  ~TH1L () override;  Destructor. ;  ; void AddBinContent (Int_t bin) override;  Increment bin content by 1. ;  ; void AddBinContent (Int_t bin, Double_t w) override;  Increment bin content by w. ;  ; void Copy (TObject &hnew) const override;  Copy this to newth1. ;  ; TClass * IsA () const override;  ; TH1L & operator= (const TH1L &h1);  Operator =. ;  ; void Reset (Option_t *option="""") override;  Reset. ;  ; void SetBinsLength (Int_t n=-1) override;  Set total number of bins including under/overflow Reallocate bin contents array. ;  ; void Streamer (TBuffer &) override;  Stream a class object. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TH1;  ~TH1 () override;  Histogram default destructor. ;  ; virtual Bool_t Add (const TH1 *h, const TH1 *h2, Double_t c1=1, Double_t c2=1);  Replace contents of this histogram by the addi",MatchSource.WIKI,doc/master/classTH1L.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH1L.html
Security,hash,hash,"m of squares of weights. ;  ; void UseCurrentStyle () override;  Copy current attributes from/to current style. ;  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; TClass * IsA () const override;  ; Bool_t IsSortable () const override;  ; void ls (Option_t *option="""") const override;  List TNamed name and title. ;  ; TNamed & operator= (const TNamed &rhs);  TNamed assignment operator. ;  ; void Print (Option_t *option="""") const override;  Print TNamed name and title. ;  ; virtual Int_t Sizeof () const;  Return size of the TNamed part of the TObject. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to c",MatchSource.WIKI,doc/master/classTH1L.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH1L.html
Testability,test,test,". ;  ; void Reset (Option_t *option="""") override;  Reset. ;  ; void SetBinsLength (Int_t n=-1) override;  Set total number of bins including under/overflow Reallocate bin contents array. ;  ; void Streamer (TBuffer &) override;  Stream a class object. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TH1;  ~TH1 () override;  Histogram default destructor. ;  ; virtual Bool_t Add (const TH1 *h, const TH1 *h2, Double_t c1=1, Double_t c2=1);  Replace contents of this histogram by the addition of h1 and h2. ;  ; virtual Bool_t Add (const TH1 *h1, Double_t c1=1);  Performs the operation: this = this + c1*h1 If errors are defined (see TH1::Sumw2), errors are also recalculated. ;  ; virtual Bool_t Add (TF1 *h1, Double_t c1=1, Option_t *option="""");  Performs the operation: this = this + c1*f1 if errors are defined (see TH1::Sumw2), errors are also recalculated. ;  ; virtual Double_t AndersonDarlingTest (const TH1 *h2, Double_t &advalue) const;  Same function as above but returning also the test statistic value. ;  ; virtual Double_t AndersonDarlingTest (const TH1 *h2, Option_t *option="""") const;  Statistical test of compatibility in shape between this histogram and h2, using the Anderson-Darling 2 sample test. ;  ; void Browse (TBrowser *b) override;  Browse the Histogram object. ;  ; virtual Int_t BufferEmpty (Int_t action=0);  Fill histogram with all entries in the buffer. ;  ; virtual Bool_t CanExtendAllAxes () const;  Returns true if all axes are extendable. ;  ; virtual Double_t Chi2Test (const TH1 *h2, Option_t *option=""UU"", Double_t *res=nullptr) const;  \( \chi^{2} \) test for comparing weighted and unweighted histograms. ;  ; virtual Double_t Chi2TestX (const TH1 *h2, Double_t &chi2, Int_t &ndf, Int_t &igood, Option_t *option=""UU"", Double_t *res=nullptr) const;  The computation routine of the Chisquare test. ;  ; virtual Double_t Chisquare (TF1 *f1, Option_t *option="""") const;  Compute and return the chisqua",MatchSource.WIKI,doc/master/classTH1L.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH1L.html
Usability,clear,cleared,"ffer. ;  ; virtual Bool_t CanExtendAllAxes () const;  Returns true if all axes are extendable. ;  ; virtual Double_t Chi2Test (const TH1 *h2, Option_t *option=""UU"", Double_t *res=nullptr) const;  \( \chi^{2} \) test for comparing weighted and unweighted histograms. ;  ; virtual Double_t Chi2TestX (const TH1 *h2, Double_t &chi2, Int_t &ndf, Int_t &igood, Option_t *option=""UU"", Double_t *res=nullptr) const;  The computation routine of the Chisquare test. ;  ; virtual Double_t Chisquare (TF1 *f1, Option_t *option="""") const;  Compute and return the chisquare of this histogram with respect to a function The chisquare is computed by weighting each histogram point by the bin error By default the full range of the histogram is used. ;  ; virtual void ClearUnderflowAndOverflow ();  Remove all the content from the underflow and overflow bins, without changing the number of entries After calling this method, every undeflow and overflow bins will have content 0.0 The Sumw2 is also cleared, since there is no more content in the bins. ;  ; TObject * Clone (const char *newname="""") const override;  Make a complete copy of the underlying object. ;  ; virtual Double_t ComputeIntegral (Bool_t onlyPositive=false);  Compute integral (normalized cumulative sum of bins) w/o under/overflows The result is stored in fIntegral and used by the GetRandom functions. ;  ; virtual void DirectoryAutoAdd (TDirectory *);  Perform the automatic addition of the histogram to the given directory. ;  ; Int_t DistancetoPrimitive (Int_t px, Int_t py) override;  Compute distance from point px,py to a line. ;  ; virtual Bool_t Divide (const TH1 *h1);  Divide this histogram by h1. ;  ; virtual Bool_t Divide (const TH1 *h1, const TH1 *h2, Double_t c1=1, Double_t c2=1, Option_t *option="""");  Replace contents of this histogram by the division of h1 by h2. ;  ; virtual Bool_t Divide (TF1 *f1, Double_t c1=1);  Performs the operation: this = this/(c1*f1) if errors are defined (see TH1::Sumw2), errors are also recalc",MatchSource.WIKI,doc/master/classTH1L.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH1L.html
Energy Efficiency,power,power-of-,"kAllLabel = 3; , kLabelAndNewLimits = 4; , kAutoP2HaveLimits = 5; , kAutoP2NeedLimits = 6. };  . Public Member Functions;  TH1Merger (TH1 &h, TCollection &l, Option_t *opt="""");  ;  ~TH1Merger ();  ; Bool_t operator() ();  Function performing the actual merge. ;  . Static Public Member Functions; static Bool_t AxesHaveLimits (const TH1 *h);  ; static Int_t CheckForDuplicateLabels (const TH1 *hist);  Check if histogram has duplicate labels Return an integer with bit set correponding on the axis that has duplicate labels e.g. ;  ; static Int_t FindBinNumber (Int_t ibin, const TAxis &inAxis, TAxis &outAxis);  ; static Int_t FindFixBinNumber (Int_t ibin, const TAxis &inAxis, const TAxis &outAxis);  ; static Bool_t HasDuplicateLabels (const THashList *labels);  Find a duplicate labels in an axis label list. ;  ; static Bool_t IsBinEmpty (const TH1 *hist, Int_t bin);  helper function for merging ;  . Private Member Functions; Bool_t AutoP2BufferMerge ();  ; Bool_t AutoP2BuildAxes (TH1 *);  Determine final boundaries and number of bins for histograms created in power-of-2 autobin mode. ;  ; Bool_t AutoP2Merge ();  ; Bool_t BufferMerge ();  ; void CopyBuffer (TH1 *hsrc, TH1 *hdes);  ; void DefineNewAxes ();  Function to define new histogram axis when merging It is call only in case of merging with different axis or with the buffer (kHasNewLimits) ;  ; Bool_t DifferentAxesMerge ();  Merged histogram when axis can be different. ;  ; EMergerType ExamineHistograms ();  Examine the list of histograms to find out which type of Merge we need to do Pass the input list containing the histogram to merge and h0 which is the initial histogram on which all the histogram of the list will be merged This are the possible cases: ;  ; Bool_t LabelMerge (bool newLimits=false);  Merge histograms with labels and if newLimits is set support the case that one of the axis can set new limits, if the axes are compatible. ;  ; void MergeBin (const TH1 *hist, Int_t inbin, Int_t outbin);  ; void MergeBi",MatchSource.WIKI,doc/master/classTH1Merger.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH1Merger.html
Modifiability,variab,variable-size," TH1Merger::EMergerType. EnumeratorkNotCompatible ; kAllSameAxes ; kAllNoLimits ; kHasNewLimits ; kAllLabel ; kLabelAndNewLimits ; kAutoP2HaveLimits ; kAutoP2NeedLimits . Definition at line 23 of file TH1Merger.h. Constructor & Destructor Documentation. ◆ TH1Merger(). TH1Merger::TH1Merger ; (; TH1 & ; h, . TCollection & ; l, . Option_t * ; opt = """" . ). inline . Definition at line 64 of file TH1Merger.h. ◆ ~TH1Merger(). TH1Merger::~TH1Merger ; (; ). inline . Definition at line 91 of file TH1Merger.h. Member Function Documentation. ◆ AutoP2BufferMerge(). Bool_t TH1Merger::AutoP2BufferMerge ; (; ). private . Definition at line 588 of file TH1Merger.cxx. ◆ AutoP2BuildAxes(). Bool_t TH1Merger::AutoP2BuildAxes ; (; TH1 * ; h). private . Determine final boundaries and number of bins for histograms created in power-of-2 autobin mode. ; Return kTRUE if compatible, updating fNewXaxis accordingly; return kFALSE if something wrong.; The histograms are not merge-compatible if 1. have different variable-size bins; 2. larger bin size is not an integer multiple of the smaller one; 3. the final estimated range is smalle then the bin size. Definition at line 80 of file TH1Merger.cxx. ◆ AutoP2Merge(). Bool_t TH1Merger::AutoP2Merge ; (; ). private . Definition at line 631 of file TH1Merger.cxx. ◆ AxesHaveLimits(). Bool_t TH1Merger::AxesHaveLimits ; (; const TH1 * ; h). static . Definition at line 19 of file TH1Merger.cxx. ◆ BufferMerge(). Bool_t TH1Merger::BufferMerge ; (; ). private . Definition at line 729 of file TH1Merger.cxx. ◆ CheckForDuplicateLabels(). Int_t TH1Merger::CheckForDuplicateLabels ; (; const TH1 * ; hist). static . Check if histogram has duplicate labels Return an integer with bit set correponding on the axis that has duplicate labels e.g. ; duplicate labels on x axis : return 1 duplicate labels on x and z axis : return 5 ; Definition at line 914 of file TH1Merger.cxx. ◆ CopyBuffer(). void TH1Merger::CopyBuffer ; (; TH1 * ; hsrc, . TH1 * ; hdes . ). private . Defini",MatchSource.WIKI,doc/master/classTH1Merger.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH1Merger.html
Performance,perform,performing,". ROOT: TH1Merger Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Static Public Member Functions |; Private Member Functions |; Private Attributes |; List of all members ; TH1Merger Class Reference. . Definition at line 20 of file TH1Merger.h. Public Types; enum  EMergerType { ;   kNotCompatible = -1; , kAllSameAxes = 0; , kAllNoLimits = 1; , kHasNewLimits = 2; , ;   kAllLabel = 3; , kLabelAndNewLimits = 4; , kAutoP2HaveLimits = 5; , kAutoP2NeedLimits = 6. };  . Public Member Functions;  TH1Merger (TH1 &h, TCollection &l, Option_t *opt="""");  ;  ~TH1Merger ();  ; Bool_t operator() ();  Function performing the actual merge. ;  . Static Public Member Functions; static Bool_t AxesHaveLimits (const TH1 *h);  ; static Int_t CheckForDuplicateLabels (const TH1 *hist);  Check if histogram has duplicate labels Return an integer with bit set correponding on the axis that has duplicate labels e.g. ;  ; static Int_t FindBinNumber (Int_t ibin, const TAxis &inAxis, TAxis &outAxis);  ; static Int_t FindFixBinNumber (Int_t ibin, const TAxis &inAxis, const TAxis &outAxis);  ; static Bool_t HasDuplicateLabels (const THashList *labels);  Find a duplicate labels in an axis label list. ;  ; static Bool_t IsBinEmpty (const TH1 *hist, Int_t bin);  helper function for merging ;  . Private Member Functions; Bool_t AutoP2BufferMerge ();  ; Bool_t AutoP2BuildAxes (TH1 *);  Determine final boundaries and number of bins for histograms created in power-of-2 autobin mode. ;  ; Bool_t AutoP2Merge ();  ; Bool_t BufferMerge ();  ; void CopyBuffer (TH1 *hsrc, TH1 *hdes);  ; void DefineNewAxes ();  Function to define new histogram axis when merging It is call only in case of merging with different axis or with the buffer (kHasNewLimits) ;  ; Bool_t DifferentAxesMerge ();  Merged histogram when axis can be different. ;  ; EMergerType ExamineHistograms ();  Examine the list of histograms to ",MatchSource.WIKI,doc/master/classTH1Merger.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH1Merger.html
Availability,error,errors,"TH1S () override;  Destructor. ;  ; void AddBinContent (Int_t bin) override;  Increment bin content by 1. ;  ; void AddBinContent (Int_t bin, Double_t w) override;  Increment bin content by w. ;  ; void Copy (TObject &hnew) const override;  Copy this to newth1. ;  ; TClass * IsA () const override;  ; TH1S & operator= (const TH1S &h1);  Operator =. ;  ; void Reset (Option_t *option="""") override;  Reset. ;  ; void SetBinsLength (Int_t n=-1) override;  Set total number of bins including under/overflow Reallocate bin contents array. ;  ; void Streamer (TBuffer &) override;  Stream a class object. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TH1;  ~TH1 () override;  Histogram default destructor. ;  ; virtual Bool_t Add (const TH1 *h, const TH1 *h2, Double_t c1=1, Double_t c2=1);  Replace contents of this histogram by the addition of h1 and h2. ;  ; virtual Bool_t Add (const TH1 *h1, Double_t c1=1);  Performs the operation: this = this + c1*h1 If errors are defined (see TH1::Sumw2), errors are also recalculated. ;  ; virtual Bool_t Add (TF1 *h1, Double_t c1=1, Option_t *option="""");  Performs the operation: this = this + c1*f1 if errors are defined (see TH1::Sumw2), errors are also recalculated. ;  ; virtual Double_t AndersonDarlingTest (const TH1 *h2, Double_t &advalue) const;  Same function as above but returning also the test statistic value. ;  ; virtual Double_t AndersonDarlingTest (const TH1 *h2, Option_t *option="""") const;  Statistical test of compatibility in shape between this histogram and h2, using the Anderson-Darling 2 sample test. ;  ; void Browse (TBrowser *b) override;  Browse the Histogram object. ;  ; virtual Int_t BufferEmpty (Int_t action=0);  Fill histogram with all entries in the buffer. ;  ; virtual Bool_t CanExtendAllAxes () const;  Returns true if all axes are extendable. ;  ; virtual Double_t Chi2Test (const TH1 *h2, Option_t *option=""UU"", Double_t *res=nullptr) const;  \( \chi^{2} \)",MatchSource.WIKI,doc/master/classTH1S.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH1S.html
Deployability,update,update," Internal helper function that returns the corresponding marker style with line width 1 for the given style. ;  ;  Static Public Member Functions inherited from TArrayS; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TArray; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static TArray * ReadArray (TBuffer &b, const TClass *clReq);  Read TArray object from buffer. ;  ; static void WriteArray (TBuffer &b, const TArray *a);  Write TArray object to buffer. ;  . Protected Member Functions; Double_t RetrieveBinContent (Int_t bin) const override;  Raw retrieval of bin content on internal data structure see convention for numbering bins in TH1::GetBin. ;  ; void UpdateBinContent (Int_t bin, Double_t content) override;  Raw update of bin content on internal data structure see convention for numbering bins in TH1::GetBin. ;  ;  Protected Member Functions inherited from TH1;  TH1 ();  Histogram default constructor. ;  ;  TH1 (const char *name, const char *title, Int_t nbinsx, const Double_t *xbins);  Constructor for variable bin size histograms using an input array of type double. ;  ;  TH1 (const char *name, const char *title, Int_t nbinsx, const Float_t *xbins);  Constructor for variable bin size histograms using an input array of type float. ;  ;  TH1 (const char *name, const char *title, Int_t nbinsx, Double_t xlow, Double_t xup);  Constructor for fix bin size histograms. ;  ; virtual Int_t AutoP2FindLimits (Double_t min, Double_t max);  Buffer-based estimate of the histogram range using the power of 2 algorithm. ;  ; Int_t AxisChoice (Option_t *axis) const;  Choose an axis according to ""axis"". ;  ; virtual Int_t BufferFill (Double_t x, Double_t w);  accumulate arguments in buffer. ;  ; virtual void DoFillN (Int_t n",MatchSource.WIKI,doc/master/classTH1S.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH1S.html
Energy Efficiency,power,power," . Protected Member Functions; Double_t RetrieveBinContent (Int_t bin) const override;  Raw retrieval of bin content on internal data structure see convention for numbering bins in TH1::GetBin. ;  ; void UpdateBinContent (Int_t bin, Double_t content) override;  Raw update of bin content on internal data structure see convention for numbering bins in TH1::GetBin. ;  ;  Protected Member Functions inherited from TH1;  TH1 ();  Histogram default constructor. ;  ;  TH1 (const char *name, const char *title, Int_t nbinsx, const Double_t *xbins);  Constructor for variable bin size histograms using an input array of type double. ;  ;  TH1 (const char *name, const char *title, Int_t nbinsx, const Float_t *xbins);  Constructor for variable bin size histograms using an input array of type float. ;  ;  TH1 (const char *name, const char *title, Int_t nbinsx, Double_t xlow, Double_t xup);  Constructor for fix bin size histograms. ;  ; virtual Int_t AutoP2FindLimits (Double_t min, Double_t max);  Buffer-based estimate of the histogram range using the power of 2 algorithm. ;  ; Int_t AxisChoice (Option_t *axis) const;  Choose an axis according to ""axis"". ;  ; virtual Int_t BufferFill (Double_t x, Double_t w);  accumulate arguments in buffer. ;  ; virtual void DoFillN (Int_t ntimes, const Double_t *x, const Double_t *w, Int_t stride=1);  Internal method to fill histogram content from a vector called directly by TH1::BufferEmpty. ;  ; virtual Double_t DoIntegral (Int_t ix1, Int_t ix2, Int_t iy1, Int_t iy2, Int_t iz1, Int_t iz2, Double_t &err, Option_t *opt, Bool_t doerr=kFALSE) const;  Internal function compute integral and optionally the error between the limits specified by the bin number values working for all histograms (1D, 2D and 3D) ;  ; virtual Bool_t FindNewAxisLimits (const TAxis *axis, const Double_t point, Double_t &newMin, Double_t &newMax);  finds new limits for the axis so that point is within the range and the limits are compatible with the previous ones (see TH1::Merg",MatchSource.WIKI,doc/master/classTH1S.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH1S.html
Integrability,rout,routine,"n="""");  Performs the operation: this = this + c1*f1 if errors are defined (see TH1::Sumw2), errors are also recalculated. ;  ; virtual Double_t AndersonDarlingTest (const TH1 *h2, Double_t &advalue) const;  Same function as above but returning also the test statistic value. ;  ; virtual Double_t AndersonDarlingTest (const TH1 *h2, Option_t *option="""") const;  Statistical test of compatibility in shape between this histogram and h2, using the Anderson-Darling 2 sample test. ;  ; void Browse (TBrowser *b) override;  Browse the Histogram object. ;  ; virtual Int_t BufferEmpty (Int_t action=0);  Fill histogram with all entries in the buffer. ;  ; virtual Bool_t CanExtendAllAxes () const;  Returns true if all axes are extendable. ;  ; virtual Double_t Chi2Test (const TH1 *h2, Option_t *option=""UU"", Double_t *res=nullptr) const;  \( \chi^{2} \) test for comparing weighted and unweighted histograms. ;  ; virtual Double_t Chi2TestX (const TH1 *h2, Double_t &chi2, Int_t &ndf, Int_t &igood, Option_t *option=""UU"", Double_t *res=nullptr) const;  The computation routine of the Chisquare test. ;  ; virtual Double_t Chisquare (TF1 *f1, Option_t *option="""") const;  Compute and return the chisquare of this histogram with respect to a function The chisquare is computed by weighting each histogram point by the bin error By default the full range of the histogram is used. ;  ; virtual void ClearUnderflowAndOverflow ();  Remove all the content from the underflow and overflow bins, without changing the number of entries After calling this method, every undeflow and overflow bins will have content 0.0 The Sumw2 is also cleared, since there is no more content in the bins. ;  ; TObject * Clone (const char *newname="""") const override;  Make a complete copy of the underlying object. ;  ; virtual Double_t ComputeIntegral (Bool_t onlyPositive=false);  Compute integral (normalized cumulative sum of bins) w/o under/overflows The result is stored in fIntegral and used by the GetRandom functions. ; ",MatchSource.WIKI,doc/master/classTH1S.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH1S.html
Modifiability,variab,variable,". ROOT: TH1S Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Friends |; List of all members ; TH1S Class ReferenceHistogram Library » Histogram classes. ; 1-D histogram with a short per channel (see TH1 documentation) ; Definition at line 499 of file TH1.h. Public Member Functions;  TH1S ();  Constructor. ;  ;  TH1S (const char *name, const char *title, Int_t nbinsx, const Double_t *xbins);  Create a 1-Dim histogram with variable bins of type short (see TH1::TH1 for explanation of parameters) ;  ;  TH1S (const char *name, const char *title, Int_t nbinsx, const Float_t *xbins);  Create a 1-Dim histogram with variable bins of type short (see TH1::TH1 for explanation of parameters) ;  ;  TH1S (const char *name, const char *title, Int_t nbinsx, Double_t xlow, Double_t xup);  Create a 1-Dim histogram with fix bins of type short (see TH1::TH1 for explanation of parameters) ;  ;  TH1S (const TH1S &h1s);  Copy constructor. ;  ;  ~TH1S () override;  Destructor. ;  ; void AddBinContent (Int_t bin) override;  Increment bin content by 1. ;  ; void AddBinContent (Int_t bin, Double_t w) override;  Increment bin content by w. ;  ; void Copy (TObject &hnew) const override;  Copy this to newth1. ;  ; TClass * IsA () const override;  ; TH1S & operator= (const TH1S &h1);  Operator =. ;  ; void Reset (Option_t *option="""") override;  Reset. ;  ; void SetBinsLength (Int_t n=-1) override;  Set total number of bins including under/overflow Reallocate bin contents array. ;  ; void Streamer (TBuffer &) override;  Stream a class object. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TH1;  ~TH1 () override;  Histogram default destructor. ;  ; virtual Bool_t Add (const TH1 *h, const TH1 *h2, Double_t c1=1, Double_t c2=1);  Replace contents of this histogram by the addition",MatchSource.WIKI,doc/master/classTH1S.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH1S.html
Security,hash,hash,"m of squares of weights. ;  ; void UseCurrentStyle () override;  Copy current attributes from/to current style. ;  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; TClass * IsA () const override;  ; Bool_t IsSortable () const override;  ; void ls (Option_t *option="""") const override;  List TNamed name and title. ;  ; TNamed & operator= (const TNamed &rhs);  TNamed assignment operator. ;  ; void Print (Option_t *option="""") const override;  Print TNamed name and title. ;  ; virtual Int_t Sizeof () const;  Return size of the TNamed part of the TObject. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to c",MatchSource.WIKI,doc/master/classTH1S.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH1S.html
Testability,test,test,". ;  ; void Reset (Option_t *option="""") override;  Reset. ;  ; void SetBinsLength (Int_t n=-1) override;  Set total number of bins including under/overflow Reallocate bin contents array. ;  ; void Streamer (TBuffer &) override;  Stream a class object. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TH1;  ~TH1 () override;  Histogram default destructor. ;  ; virtual Bool_t Add (const TH1 *h, const TH1 *h2, Double_t c1=1, Double_t c2=1);  Replace contents of this histogram by the addition of h1 and h2. ;  ; virtual Bool_t Add (const TH1 *h1, Double_t c1=1);  Performs the operation: this = this + c1*h1 If errors are defined (see TH1::Sumw2), errors are also recalculated. ;  ; virtual Bool_t Add (TF1 *h1, Double_t c1=1, Option_t *option="""");  Performs the operation: this = this + c1*f1 if errors are defined (see TH1::Sumw2), errors are also recalculated. ;  ; virtual Double_t AndersonDarlingTest (const TH1 *h2, Double_t &advalue) const;  Same function as above but returning also the test statistic value. ;  ; virtual Double_t AndersonDarlingTest (const TH1 *h2, Option_t *option="""") const;  Statistical test of compatibility in shape between this histogram and h2, using the Anderson-Darling 2 sample test. ;  ; void Browse (TBrowser *b) override;  Browse the Histogram object. ;  ; virtual Int_t BufferEmpty (Int_t action=0);  Fill histogram with all entries in the buffer. ;  ; virtual Bool_t CanExtendAllAxes () const;  Returns true if all axes are extendable. ;  ; virtual Double_t Chi2Test (const TH1 *h2, Option_t *option=""UU"", Double_t *res=nullptr) const;  \( \chi^{2} \) test for comparing weighted and unweighted histograms. ;  ; virtual Double_t Chi2TestX (const TH1 *h2, Double_t &chi2, Int_t &ndf, Int_t &igood, Option_t *option=""UU"", Double_t *res=nullptr) const;  The computation routine of the Chisquare test. ;  ; virtual Double_t Chisquare (TF1 *f1, Option_t *option="""") const;  Compute and return the chisqua",MatchSource.WIKI,doc/master/classTH1S.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH1S.html
Usability,clear,cleared,"ffer. ;  ; virtual Bool_t CanExtendAllAxes () const;  Returns true if all axes are extendable. ;  ; virtual Double_t Chi2Test (const TH1 *h2, Option_t *option=""UU"", Double_t *res=nullptr) const;  \( \chi^{2} \) test for comparing weighted and unweighted histograms. ;  ; virtual Double_t Chi2TestX (const TH1 *h2, Double_t &chi2, Int_t &ndf, Int_t &igood, Option_t *option=""UU"", Double_t *res=nullptr) const;  The computation routine of the Chisquare test. ;  ; virtual Double_t Chisquare (TF1 *f1, Option_t *option="""") const;  Compute and return the chisquare of this histogram with respect to a function The chisquare is computed by weighting each histogram point by the bin error By default the full range of the histogram is used. ;  ; virtual void ClearUnderflowAndOverflow ();  Remove all the content from the underflow and overflow bins, without changing the number of entries After calling this method, every undeflow and overflow bins will have content 0.0 The Sumw2 is also cleared, since there is no more content in the bins. ;  ; TObject * Clone (const char *newname="""") const override;  Make a complete copy of the underlying object. ;  ; virtual Double_t ComputeIntegral (Bool_t onlyPositive=false);  Compute integral (normalized cumulative sum of bins) w/o under/overflows The result is stored in fIntegral and used by the GetRandom functions. ;  ; virtual void DirectoryAutoAdd (TDirectory *);  Perform the automatic addition of the histogram to the given directory. ;  ; Int_t DistancetoPrimitive (Int_t px, Int_t py) override;  Compute distance from point px,py to a line. ;  ; virtual Bool_t Divide (const TH1 *h1);  Divide this histogram by h1. ;  ; virtual Bool_t Divide (const TH1 *h1, const TH1 *h2, Double_t c1=1, Double_t c2=1, Option_t *option="""");  Replace contents of this histogram by the division of h1 by h2. ;  ; virtual Bool_t Divide (TF1 *f1, Double_t c1=1);  Performs the operation: this = this/(c1*f1) if errors are defined (see TH1::Sumw2), errors are also recalc",MatchSource.WIKI,doc/master/classTH1S.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH1S.html
Availability,error,error,"protectedvirtual; DoProfile(bool onX, const char *name, Int_t firstbin, Int_t lastbin, Option_t *option) constTH2protectedvirtual; DoProjection(bool onX, const char *name, Int_t firstbin, Int_t lastbin, Option_t *option) constTH2protectedvirtual; DoQuantiles(bool onX, const char *name, Double_t prob) constTH2protectedvirtual; Draw(Option_t *option="""") overrideTH1virtual; DrawClass() constTObjectvirtual; DrawClone(Option_t *option="""") constTObjectvirtual; DrawCopy(Option_t *option="""", const char *name_postfix=""_copy"") constTH1virtual; DrawNormalized(Option_t *option="""", Double_t norm=1) constTH1virtual; DrawPanel()TH1virtual; Dump() constTObjectvirtual; EBinErrorOpt enum nameTH1; EDeprecatedStatusBits enum nameTObject; Error(const char *method, const char *msgfmt,...) constTObjectvirtual; EStatOverflows enum nameTH1; EStatusBits enum nameTH1; Eval(TF1 *f1, Option_t *option="""")TH1virtual; Execute(const char *method, const char *params, Int_t *error=nullptr)TObjectvirtual; Execute(TMethod *method, TObjArray *params, Int_t *error=nullptr)TObjectvirtual; ExecuteEvent(Int_t event, Int_t px, Int_t py) overrideTH1virtual; ExtendAxis(Double_t x, TAxis *axis)TH1virtual; Fatal(const char *method, const char *msgfmt,...) constTObjectvirtual; fBarOffsetTH1protected; fBarWidthTH1protected; fBinStatErrOptTH1protected; fBitsTObjectprivate; fBufferTH1protected; fBufferSizeTH1protected; fContourTH1protected; fDimensionTH1protected; fDirectoryTH1protected; fEntriesTH1protected; fFillColorTAttFillprotected; fFillStyleTAttFillprotected; FFT(TH1 *h_output, Option_t *option)TH1virtual; fFunctionsTH1protected; fgAddDirectoryTH1protectedstatic; fgBufferSizeTH1protectedstatic; fgDefaultSumw2TH1protectedstatic; fgDtorOnlyTObjectprivatestatic; fgObjectStatTObjectprivatestatic; fgStatOverflowsTH1protectedstatic; Fill(Double_t) overrideTH2protectedvirtual; Fill(const char *, Double_t) overrideTH2inlineprotectedvirtual; Fill(Double_t x, Double_t y) overrideTH2virtual; Fill(Double_t x, Double_t y, ",MatchSource.WIKI,doc/master/classTH2-members.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH2-members.html
Modifiability,inherit,inherited,". ROOT: Member List. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. TH2 Member List. This is the complete list of members for TH2, including all inherited members. AbstractMethod(const char *method) constTObject; Add(TF1 *h1, Double_t c1=1, Option_t *option="""")TH1virtual; Add(const TH1 *h1, Double_t c1=1)TH1virtual; Add(const TH1 *h, const TH1 *h2, Double_t c1=1, Double_t c2=1)TH1virtual; AddBinContent(Int_t bin) overrideTH2virtual; AddBinContent(Int_t bin, Double_t w) overrideTH2virtual; AddBinContent(Int_t binx, Int_t biny)TH2virtual; AddBinContent(Int_t binx, Int_t biny, Double_t w)TH2virtual; AddDirectory(Bool_t add=kTRUE)TH1static; AddDirectoryStatus()TH1static; AddToTObjectTable(TObject *)TObjectprivatestatic; AndersonDarlingTest(const TH1 *h2, Option_t *option="""") constTH1virtual; AndersonDarlingTest(const TH1 *h2, Double_t &advalue) constTH1virtual; AppendPad(Option_t *option="""")TObjectvirtual; AutoP2FindLimits(Double_t min, Double_t max)TH1protectedvirtual; AutoP2GetBins(Int_t n)TH1inlineprotectedstatic; AutoP2GetPower2(Double_t x, Bool_t next=kTRUE)TH1inlineprotectedstatic; AxisChoice(Option_t *axis) constTH1protected; Browse(TBrowser *b) overrideTH1virtual; BufferEmpty(Int_t action=0) overrideTH2virtual; BufferFill(Double_t x, Double_t y, Double_t w)TH2protectedvirtual; BufferFill(Double_t, Double_t) overrideTH2inlineprotectedvirtual; Build()TH1private; CanExtendAllAxes() constTH1virtual; CheckAxisLimits(const TAxis *a1, const TAxis *a2)TH1protectedstatic; CheckBinLabels(const TAxis *a1, const TAxis *a2)TH1protectedstatic; CheckBinLimits(const TAxis *a1, const TAxis *a2)TH1protectedstatic; CheckConsistency(const TH1 *h1, const TH1 *h2)TH1protectedstatic; CheckConsistentSubAxes(const TAxis *a1, Int_t firstBin1, Int_t lastBin1, const TAxis *a2, Int_t firstBin2=0, Int_t lastBin2=0)TH1protectedstatic; CheckedHash()TObjectinline; CheckEqualAxes(const TAxis *a1, const TAxis *a2)TH1protectedstatic; Chi2Test(const TH1 *h2, Option_",MatchSource.WIKI,doc/master/classTH2-members.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH2-members.html
Availability,error,error,"ut=0, Option_t *option=""QNR"", TObjArray *arr=nullptr);  Project slices along X in case of a 2-D histogram, then fit each slice with function f1 and make a histogram for each fit parameter Only bins along Y between firstybin and lastybin are considered. ;  ; virtual void FitSlicesY (TF1 *f1=nullptr, Int_t firstxbin=0, Int_t lastxbin=-1, Int_t cut=0, Option_t *option=""QNR"", TObjArray *arr=nullptr);  Project slices along Y in case of a 2-D histogram, then fit each slice with function f1 and make a histogram for each fit parameter Only bins along X between firstxbin and lastxbin are considered. ;  ; Int_t GetBin (Int_t binx, Int_t biny, Int_t binz=0) const override;  Return Global bin number corresponding to binx,y,z. ;  ; virtual Double_t GetBinContent (Int_t bin) const;  Return content of bin number bin. ;  ; virtual Double_t GetBinContent (Int_t bin, Int_t) const;  ; virtual Double_t GetBinContent (Int_t bin, Int_t, Int_t) const;  ; Double_t GetBinContent (Int_t binx, Int_t biny) const override;  ; Double_t GetBinContent (Int_t binx, Int_t biny, Int_t) const override;  ; virtual Double_t GetBinErrorLow (Int_t bin) const;  Return lower error associated to bin number bin. ;  ; virtual Double_t GetBinErrorLow (Int_t binx, Int_t biny);  ; virtual Double_t GetBinErrorUp (Int_t bin) const;  Return upper error associated to bin number bin. ;  ; virtual Double_t GetBinErrorUp (Int_t binx, Int_t biny);  ; virtual Double_t GetBinWithContent2 (Double_t c, Int_t &binx, Int_t &biny, Int_t firstxbin=1, Int_t lastxbin=-1, Int_t firstybin=1, Int_t lastybin=-1, Double_t maxdiff=0) const;  compute first cell (binx,biny) in the range [firstxbin,lastxbin][firstybin,lastybin] for which diff = abs(cell_content-c) <= maxdiff In case several cells in the specified range with diff=0 are found the first cell found is returned in binx,biny. ;  ; virtual Double_t GetCorrelationFactor (Int_t axis1=1, Int_t axis2=2) const;  Return correlation factor between axis1 and axis2. ;  ; virtual Double_t ",MatchSource.WIKI,doc/master/classTH2.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH2.html
Deployability,update,update," within the range and the limits are compatible with the previous ones (see TH1::Merge). ;  ; UInt_t GetAxisLabelStatus () const;  Internal function used in TH1::Fill to see which axis is full alphanumeric, i.e. ;  ; virtual Double_t GetBinErrorSqUnchecked (Int_t bin) const;  ; Bool_t GetStatOverflowsBehaviour () const;  ; Bool_t IsEmpty () const;  Check if a histogram is empty (this is a protected method used mainly by TH1Merger ) ;  ; int LoggedInconsistency (const char *name, const TH1 *h1, const TH1 *h2, bool useMerge=false) const;  ; virtual Double_t RetrieveBinContent (Int_t bin) const;  Raw retrieval of bin content on internal data structure see convention for numbering bins in TH1::GetBin. ;  ; virtual void SavePrimitiveHelp (std::ostream &out, const char *hname, Option_t *option="""");  Helper function for the SavePrimitive functions from TH1 or classes derived from TH1, eg TProfile, TProfile2D. ;  ; virtual void UpdateBinContent (Int_t bin, Double_t content);  Raw update of bin content on internal data structure see convention for numbering bins in TH1::GetBin. ;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  . Protected Attributes; Double_t fScalefactor;  Scale factor. ;  ; Double_t fTsumwxy;  Total Sum of weight*X*Y. ;  ; Double_t fTsumwy;  Total Sum of weight*Y. ;  ; Double_t fTsumwy2;  Total Sum of weight*Y*Y. ;  ;  Protected Attributes inherited from TH1; Short_t fBarOffset;  (1000*offset) for bar charts or legos ;  ; Short_t fBarWidth;  (1000*width) for bar charts or legos ;  ; EBinErrorOpt fBinStatErrOpt;  Option for bin statistical errors. ;  ; Double_t * fBuffer;  [fBufferSize] entry buffer ;  ; Int_t fBufferSize;  fBuffer size ;  ; TArrayD fContour;  Array to display contour levels. ;  ; Int_t fDimension;  ! Histogram dimension (1, 2 or 3 dim) ;  ; TDirectory * fDirectory;  ! Pointer to",MatchSource.WIKI,doc/master/classTH2.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH2.html
Energy Efficiency,power,power," ProjectionY. ;  ; virtual TH1D * DoQuantiles (bool onX, const char *name, Double_t prob) const;  Implementation of quantiles for x or y. ;  ; Int_t Fill (const char *, Double_t) override;  Increment bin with namex with a weight w. ;  ; Int_t Fill (Double_t) override;  Invalid Fill method. ;  ; Double_t Interpolate (Double_t x) const override;  illegal for a TH2 ;  ;  Protected Member Functions inherited from TH1;  TH1 ();  Histogram default constructor. ;  ;  TH1 (const char *name, const char *title, Int_t nbinsx, const Double_t *xbins);  Constructor for variable bin size histograms using an input array of type double. ;  ;  TH1 (const char *name, const char *title, Int_t nbinsx, const Float_t *xbins);  Constructor for variable bin size histograms using an input array of type float. ;  ;  TH1 (const char *name, const char *title, Int_t nbinsx, Double_t xlow, Double_t xup);  Constructor for fix bin size histograms. ;  ; virtual Int_t AutoP2FindLimits (Double_t min, Double_t max);  Buffer-based estimate of the histogram range using the power of 2 algorithm. ;  ; Int_t AxisChoice (Option_t *axis) const;  Choose an axis according to ""axis"". ;  ; virtual void DoFillN (Int_t ntimes, const Double_t *x, const Double_t *w, Int_t stride=1);  Internal method to fill histogram content from a vector called directly by TH1::BufferEmpty. ;  ; virtual Double_t DoIntegral (Int_t ix1, Int_t ix2, Int_t iy1, Int_t iy2, Int_t iz1, Int_t iz2, Double_t &err, Option_t *opt, Bool_t doerr=kFALSE) const;  Internal function compute integral and optionally the error between the limits specified by the bin number values working for all histograms (1D, 2D and 3D) ;  ; virtual Bool_t FindNewAxisLimits (const TAxis *axis, const Double_t point, Double_t &newMin, Double_t &newMax);  finds new limits for the axis so that point is within the range and the limits are compatible with the previous ones (see TH1::Merge). ;  ; UInt_t GetAxisLabelStatus () const;  Internal function used in TH1::Fill to see ",MatchSource.WIKI,doc/master/classTH2.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH2.html
Integrability,rout,routine,"), errors are also recalculated. ;  ; virtual Bool_t Add (TF1 *h1, Double_t c1=1, Option_t *option="""");  Performs the operation: this = this + c1*f1 if errors are defined (see TH1::Sumw2), errors are also recalculated. ;  ; virtual Double_t AndersonDarlingTest (const TH1 *h2, Double_t &advalue) const;  Same function as above but returning also the test statistic value. ;  ; virtual Double_t AndersonDarlingTest (const TH1 *h2, Option_t *option="""") const;  Statistical test of compatibility in shape between this histogram and h2, using the Anderson-Darling 2 sample test. ;  ; void Browse (TBrowser *b) override;  Browse the Histogram object. ;  ; virtual Bool_t CanExtendAllAxes () const;  Returns true if all axes are extendable. ;  ; virtual Double_t Chi2Test (const TH1 *h2, Option_t *option=""UU"", Double_t *res=nullptr) const;  \( \chi^{2} \) test for comparing weighted and unweighted histograms. ;  ; virtual Double_t Chi2TestX (const TH1 *h2, Double_t &chi2, Int_t &ndf, Int_t &igood, Option_t *option=""UU"", Double_t *res=nullptr) const;  The computation routine of the Chisquare test. ;  ; virtual Double_t Chisquare (TF1 *f1, Option_t *option="""") const;  Compute and return the chisquare of this histogram with respect to a function The chisquare is computed by weighting each histogram point by the bin error By default the full range of the histogram is used. ;  ; virtual void ClearUnderflowAndOverflow ();  Remove all the content from the underflow and overflow bins, without changing the number of entries After calling this method, every undeflow and overflow bins will have content 0.0 The Sumw2 is also cleared, since there is no more content in the bins. ;  ; TObject * Clone (const char *newname="""") const override;  Make a complete copy of the underlying object. ;  ; virtual Double_t ComputeIntegral (Bool_t onlyPositive=false);  Compute integral (normalized cumulative sum of bins) w/o under/overflows The result is stored in fIntegral and used by the GetRandom functions. ; ",MatchSource.WIKI,doc/master/classTH2.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH2.html
Modifiability,variab,variable," Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; Private Member Functions |; List of all members ; TH2 Class Reference. ; Service class for 2-D histogram classes. . TH2C a 2-D histogram with one byte per cell (char). Maximum bin content = 127; TH2S a 2-D histogram with two bytes per cell (short integer). Maximum bin content = 32767; TH2I a 2-D histogram with four bytes per cell (32 bit integer). Maximum bin content = INT_MAX (*); TH2L a 2-D histogram with eight bytes per cell (64 bit integer). Maximum bin content = LLONG_MAX (**); TH2F a 2-D histogram with four bytes per cell (float). Maximum precision 7 digits, maximum integer bin content = +/-16777216 (***); TH2D a 2-D histogram with eight bytes per cell (double). Maximum precision 14 digits, maximum integer bin content = +/-9007199254740992 (****). (*) INT_MAX = 2147483647 is the maximum value for a variable of type int.; (**) LLONG_MAX = 9223372036854775807 is the maximum value for a variable of type long64.; (***) 2^24 = 16777216 is the maximum integer that can be properly represented by a float32 with 23-bit mantissa.; (****) 2^53 = 9007199254740992 is the maximum integer that can be properly represented by a double64 with 52-bit mantissa. ; Definition at line 30 of file TH2.h. Public Member Functions;  ~TH2 () override;  Destructor. ;  ; void AddBinContent (Int_t bin) override;  Increment bin content by 1. ;  ; void AddBinContent (Int_t bin, Double_t w) override;  Increment bin content by a weight w. ;  ; virtual void AddBinContent (Int_t binx, Int_t biny);  Increment 2D bin content by 1. ;  ; virtual void AddBinContent (Int_t binx, Int_t biny, Double_t w);  Increment 2D bin content by a weight w. ;  ; Int_t BufferEmpty (Int_t action=0) override;  Fill histogram with all entries in the buffer. ;  ; void Copy (TObject &hnew) const override;  Copy. ;  ; virtual I",MatchSource.WIKI,doc/master/classTH2.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH2.html
Performance,perform,performing,"t char *title, Int_t nbinsx, const Float_t *xbins, Int_t nbinsy, const Float_t *ybins);  Constructor for variable bin size (along X and Y axis) 2-D histograms using input arrays of type float. ;  ;  TH2 (const char *name, const char *title, Int_t nbinsx, Double_t xlow, Double_t xup, Int_t nbinsy, const Double_t *ybins);  Constructor for Double_t variable bin size (along Y axis) 2-D histograms. ;  ;  TH2 (const char *name, const char *title, Int_t nbinsx, Double_t xlow, Double_t xup, Int_t nbinsy, Double_t ylow, Double_t yup);  Constructor for fix bin size 2-D histograms. ;  ; virtual Int_t BufferFill (Double_t x, Double_t y, Double_t w);  accumulate arguments in buffer. ;  ; Int_t BufferFill (Double_t, Double_t) override;  accumulate arguments in buffer. ;  ; virtual void DoFitSlices (bool onX, TF1 *f1, Int_t firstbin, Int_t lastbin, Int_t cut, Option_t *option, TObjArray *arr);  ; virtual TProfile * DoProfile (bool onX, const char *name, Int_t firstbin, Int_t lastbin, Option_t *option) const;  ; virtual TH1D * DoProjection (bool onX, const char *name, Int_t firstbin, Int_t lastbin, Option_t *option) const;  Internal (protected) method for performing projection on the X or Y axis called by ProjectionX or ProjectionY. ;  ; virtual TH1D * DoQuantiles (bool onX, const char *name, Double_t prob) const;  Implementation of quantiles for x or y. ;  ; Int_t Fill (const char *, Double_t) override;  Increment bin with namex with a weight w. ;  ; Int_t Fill (Double_t) override;  Invalid Fill method. ;  ; Double_t Interpolate (Double_t x) const override;  illegal for a TH2 ;  ;  Protected Member Functions inherited from TH1;  TH1 ();  Histogram default constructor. ;  ;  TH1 (const char *name, const char *title, Int_t nbinsx, const Double_t *xbins);  Constructor for variable bin size histograms using an input array of type double. ;  ;  TH1 (const char *name, const char *title, Int_t nbinsx, const Float_t *xbins);  Constructor for variable bin size histograms using an input arr",MatchSource.WIKI,doc/master/classTH2.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH2.html
Safety,avoid,avoid,"l_t fgAddDirectory = kTRUE;  ! Flag to add histograms to the directory ;  ; static Int_t fgBufferSize = 1000;  ! Default buffer size for automatic histograms ;  ; static Bool_t fgDefaultSumw2 = kFALSE;  ! Flag to call TH1::Sumw2 automatically at histogram creation time ;  ; static Bool_t fgStatOverflows = kFALSE;  ! Flag to use under/overflows in statistics ;  . #include <TH2.h>. Inheritance diagram for TH2:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ TH2() [1/7]. TH2::TH2 ; (; ). protected . 2-D histogram default constructor. ; Definition at line 73 of file TH2.cxx. ◆ TH2() [2/7]. TH2::TH2 ; (; const char * ; name, . const char * ; title, . Int_t ; nbinsx, . Double_t ; xlow, . Double_t ; xup, . Int_t ; nbinsy, . Double_t ; ylow, . Double_t ; yup . ). protected . Constructor for fix bin size 2-D histograms. ; Creates the main histogram structure.; Parameters. [in]namename of histogram (avoid blanks) ; [in]titlehistogram title. If title is of the form stringt;stringx;stringy;stringz, the histogram title is set to stringt, the x axis title to stringx, the y axis title to stringy, etc. ; [in]nbinsxnumber of bins along the X axis ; [in]xlowlow edge of the X axis first bin ; [in]xupupper edge of the X axis last bin (not included in last bin) ; [in]nbinsynumber of bins along the Y axis ; [in]ylowlow edge of the Y axis first bin ; [in]yupupper edge of the Y axis last bin (not included in last bin) . Definition at line 97 of file TH2.cxx. ◆ TH2() [3/7]. TH2::TH2 ; (; const char * ; name, . const char * ; title, . Int_t ; nbinsx, . const Double_t * ; xbins, . Int_t ; nbinsy, . Double_t ; ylow, . Double_t ; yup . ). protected . Constructor for variable bin size (along X axis) 2-D histograms using an input array of type double. ; Parameters. [in]namename of histogram (avoid blanks) ; [in]titlehistogram title. If title is of the form stringt;stringx;stringy;stringz the histogram title ",MatchSource.WIKI,doc/master/classTH2.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH2.html
Security,hash,hash,"m of squares of weights. ;  ; void UseCurrentStyle () override;  Copy current attributes from/to current style. ;  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; TClass * IsA () const override;  ; Bool_t IsSortable () const override;  ; void ls (Option_t *option="""") const override;  List TNamed name and title. ;  ; TNamed & operator= (const TNamed &rhs);  TNamed assignment operator. ;  ; void Print (Option_t *option="""") const override;  Print TNamed name and title. ;  ; virtual Int_t Sizeof () const;  Return size of the TNamed part of the TObject. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to c",MatchSource.WIKI,doc/master/classTH2.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH2.html
Testability,test,test,"lastxbin],[firstybin,lastybin] for a 2-D histogram By default the integral is computed as the sum of bin contents in the range. ;  ; virtual Double_t Integral (Int_t, Int_t, Int_t, Int_t, Int_t, Int_t, Option_t *="""") const;  ; Double_t Integral (Option_t *option="""") const override;  Return integral of bin contents. ;  ; virtual Double_t IntegralAndError (Int_t binx1, Int_t binx2, Int_t biny1, Int_t biny2, Double_t &err, Option_t *option="""") const;  Return integral of bin contents in range [firstxbin,lastxbin],[firstybin,lastybin] for a 2-D histogram. ;  ; Double_t Interpolate (Double_t x, Double_t y) const override;  Given a point P(x,y), Interpolate approximates the value via bilinear interpolation based on the four nearest bin centers see Wikipedia, Bilinear Interpolation Andy Mastbaum 10/8/2008 vaguely based on R.Raja 6-Sep-2008. ;  ; Double_t Interpolate (Double_t x, Double_t y, Double_t z) const override;  illegal for a TH2 ;  ; TClass * IsA () const override;  ; Double_t KolmogorovTest (const TH1 *h2, Option_t *option="""") const override;  Statistical test of compatibility in shape between THIS histogram and h2, using Kolmogorov test. ;  ; TProfile * ProfileX (const char *name=""_pfx"", Int_t firstybin=1, Int_t lastybin=-1, Option_t *option="""") const;  Project a 2-D histogram into a profile histogram along X. ;  ; TProfile * ProfileY (const char *name=""_pfy"", Int_t firstxbin=1, Int_t lastxbin=-1, Option_t *option="""") const;  Project a 2-D histogram into a profile histogram along Y. ;  ; TH1D * ProjectionX (const char *name=""_px"", Int_t firstybin=0, Int_t lastybin=-1, Option_t *option="""") const;  Project a 2-D histogram into a 1-D histogram along X. ;  ; TH1D * ProjectionY (const char *name=""_py"", Int_t firstxbin=0, Int_t lastxbin=-1, Option_t *option="""") const;  Project a 2-D histogram into a 1-D histogram along Y. ;  ; void PutStats (Double_t *stats) override;  Replace current statistics with the values in array stats. ;  ; TH1D * QuantilesX (Double_t prob=0.5, c",MatchSource.WIKI,doc/master/classTH2.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH2.html
Usability,clear,cleared,"ject. ;  ; virtual Bool_t CanExtendAllAxes () const;  Returns true if all axes are extendable. ;  ; virtual Double_t Chi2Test (const TH1 *h2, Option_t *option=""UU"", Double_t *res=nullptr) const;  \( \chi^{2} \) test for comparing weighted and unweighted histograms. ;  ; virtual Double_t Chi2TestX (const TH1 *h2, Double_t &chi2, Int_t &ndf, Int_t &igood, Option_t *option=""UU"", Double_t *res=nullptr) const;  The computation routine of the Chisquare test. ;  ; virtual Double_t Chisquare (TF1 *f1, Option_t *option="""") const;  Compute and return the chisquare of this histogram with respect to a function The chisquare is computed by weighting each histogram point by the bin error By default the full range of the histogram is used. ;  ; virtual void ClearUnderflowAndOverflow ();  Remove all the content from the underflow and overflow bins, without changing the number of entries After calling this method, every undeflow and overflow bins will have content 0.0 The Sumw2 is also cleared, since there is no more content in the bins. ;  ; TObject * Clone (const char *newname="""") const override;  Make a complete copy of the underlying object. ;  ; virtual Double_t ComputeIntegral (Bool_t onlyPositive=false);  Compute integral (normalized cumulative sum of bins) w/o under/overflows The result is stored in fIntegral and used by the GetRandom functions. ;  ; virtual void DirectoryAutoAdd (TDirectory *);  Perform the automatic addition of the histogram to the given directory. ;  ; Int_t DistancetoPrimitive (Int_t px, Int_t py) override;  Compute distance from point px,py to a line. ;  ; virtual Bool_t Divide (const TH1 *h1);  Divide this histogram by h1. ;  ; virtual Bool_t Divide (const TH1 *h1, const TH1 *h2, Double_t c1=1, Double_t c2=1, Option_t *option="""");  Replace contents of this histogram by the division of h1 by h2. ;  ; virtual Bool_t Divide (TF1 *f1, Double_t c1=1);  Performs the operation: this = this/(c1*f1) if errors are defined (see TH1::Sumw2), errors are also recalc",MatchSource.WIKI,doc/master/classTH2.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH2.html
Availability,error,errors," *name, const char *title, Int_t nbinsx, Double_t xlow, Double_t xup, Int_t nbinsy, const Double_t *ybins);  Constructor (see TH2::TH2 for explanation of parameters) ;  ;  TH2C (const char *name, const char *title, Int_t nbinsx, Double_t xlow, Double_t xup, Int_t nbinsy, Double_t ylow, Double_t yup);  Constructor (see TH2::TH2 for explanation of parameters) ;  ;  TH2C (const TH2C &h2c);  Copy constructor. ;  ;  ~TH2C () override;  Destructor. ;  ; void AddBinContent (Int_t bin) override;  Increment bin content by 1. ;  ; void AddBinContent (Int_t bin, Double_t w) override;  Increment bin content by w. ;  ; void AddBinContent (Int_t binx, Int_t biny) override;  Increment 2D bin content by 1. ;  ; void AddBinContent (Int_t binx, Int_t biny, Double_t w) override;  Increment 2D bin content by a weight w. ;  ; void Copy (TObject &hnew) const override;  Copy. ;  ; TClass * IsA () const override;  ; TH2C & operator= (const TH2C &h1);  Operator =. ;  ; void Reset (Option_t *option="""") override;  Reset this histogram: contents, errors, etc. ;  ; void SetBinsLength (Int_t n=-1) override;  Set total number of bins including under/overflow Reallocate bin contents array. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TH2C. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TH2;  ~TH2 () override;  Destructor. ;  ; Int_t BufferEmpty (Int_t action=0) override;  Fill histogram with all entries in the buffer. ;  ; virtual Int_t Fill (const char *namex, const char *namey, Double_t w);  Increment cell defined by namex,namey by a weight w. ;  ; virtual Int_t Fill (const char *namex, Double_t y, Double_t w);  Increment cell defined by namex,y by a weight w. ;  ; virtual Int_t Fill (Double_t x, const char *namey, Double_t w);  Increment cell defined by x,namey by a weight w. ;  ; Int_t Fill (Double_t x, Double_t y) override;  Increment cell defined by x,y by 1. ;  ; virtual Int_t Fill (Double_t x, Double_t y,",MatchSource.WIKI,doc/master/classTH2C.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH2C.html
Deployability,update,update," Internal helper function that returns the corresponding marker style with line width 1 for the given style. ;  ;  Static Public Member Functions inherited from TArrayC; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TArray; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static TArray * ReadArray (TBuffer &b, const TClass *clReq);  Read TArray object from buffer. ;  ; static void WriteArray (TBuffer &b, const TArray *a);  Write TArray object to buffer. ;  . Protected Member Functions; Double_t RetrieveBinContent (Int_t bin) const override;  Raw retrieval of bin content on internal data structure see convention for numbering bins in TH1::GetBin. ;  ; void UpdateBinContent (Int_t bin, Double_t content) override;  Raw update of bin content on internal data structure see convention for numbering bins in TH1::GetBin. ;  ;  Protected Member Functions inherited from TH2;  TH2 ();  2-D histogram default constructor. ;  ;  TH2 (const char *name, const char *title, Int_t nbinsx, const Double_t *xbins, Int_t nbinsy, const Double_t *ybins);  Constructor for Double_t variable bin size 2-D histograms. ;  ;  TH2 (const char *name, const char *title, Int_t nbinsx, const Double_t *xbins, Int_t nbinsy, Double_t ylow, Double_t yup);  Constructor for variable bin size (along X axis) 2-D histograms using an input array of type double. ;  ;  TH2 (const char *name, const char *title, Int_t nbinsx, const Float_t *xbins, Int_t nbinsy, const Float_t *ybins);  Constructor for variable bin size (along X and Y axis) 2-D histograms using input arrays of type float. ;  ;  TH2 (const char *name, const char *title, Int_t nbinsx, Double_t xlow, Double_t xup, Int_t nbinsy, const Double_t *ybins);  Constructor for Double_t variable bin size (al",MatchSource.WIKI,doc/master/classTH2C.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH2C.html
Energy Efficiency,power,power," ProjectionY. ;  ; virtual TH1D * DoQuantiles (bool onX, const char *name, Double_t prob) const;  Implementation of quantiles for x or y. ;  ; Int_t Fill (const char *, Double_t) override;  Increment bin with namex with a weight w. ;  ; Int_t Fill (Double_t) override;  Invalid Fill method. ;  ; Double_t Interpolate (Double_t x) const override;  illegal for a TH2 ;  ;  Protected Member Functions inherited from TH1;  TH1 ();  Histogram default constructor. ;  ;  TH1 (const char *name, const char *title, Int_t nbinsx, const Double_t *xbins);  Constructor for variable bin size histograms using an input array of type double. ;  ;  TH1 (const char *name, const char *title, Int_t nbinsx, const Float_t *xbins);  Constructor for variable bin size histograms using an input array of type float. ;  ;  TH1 (const char *name, const char *title, Int_t nbinsx, Double_t xlow, Double_t xup);  Constructor for fix bin size histograms. ;  ; virtual Int_t AutoP2FindLimits (Double_t min, Double_t max);  Buffer-based estimate of the histogram range using the power of 2 algorithm. ;  ; Int_t AxisChoice (Option_t *axis) const;  Choose an axis according to ""axis"". ;  ; virtual void DoFillN (Int_t ntimes, const Double_t *x, const Double_t *w, Int_t stride=1);  Internal method to fill histogram content from a vector called directly by TH1::BufferEmpty. ;  ; virtual Double_t DoIntegral (Int_t ix1, Int_t ix2, Int_t iy1, Int_t iy2, Int_t iz1, Int_t iz2, Double_t &err, Option_t *opt, Bool_t doerr=kFALSE) const;  Internal function compute integral and optionally the error between the limits specified by the bin number values working for all histograms (1D, 2D and 3D) ;  ; virtual Bool_t FindNewAxisLimits (const TAxis *axis, const Double_t point, Double_t &newMin, Double_t &newMax);  finds new limits for the axis so that point is within the range and the limits are compatible with the previous ones (see TH1::Merge). ;  ; UInt_t GetAxisLabelStatus () const;  Internal function used in TH1::Fill to see ",MatchSource.WIKI,doc/master/classTH2C.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH2C.html
Integrability,rout,routine,"), errors are also recalculated. ;  ; virtual Bool_t Add (TF1 *h1, Double_t c1=1, Option_t *option="""");  Performs the operation: this = this + c1*f1 if errors are defined (see TH1::Sumw2), errors are also recalculated. ;  ; virtual Double_t AndersonDarlingTest (const TH1 *h2, Double_t &advalue) const;  Same function as above but returning also the test statistic value. ;  ; virtual Double_t AndersonDarlingTest (const TH1 *h2, Option_t *option="""") const;  Statistical test of compatibility in shape between this histogram and h2, using the Anderson-Darling 2 sample test. ;  ; void Browse (TBrowser *b) override;  Browse the Histogram object. ;  ; virtual Bool_t CanExtendAllAxes () const;  Returns true if all axes are extendable. ;  ; virtual Double_t Chi2Test (const TH1 *h2, Option_t *option=""UU"", Double_t *res=nullptr) const;  \( \chi^{2} \) test for comparing weighted and unweighted histograms. ;  ; virtual Double_t Chi2TestX (const TH1 *h2, Double_t &chi2, Int_t &ndf, Int_t &igood, Option_t *option=""UU"", Double_t *res=nullptr) const;  The computation routine of the Chisquare test. ;  ; virtual Double_t Chisquare (TF1 *f1, Option_t *option="""") const;  Compute and return the chisquare of this histogram with respect to a function The chisquare is computed by weighting each histogram point by the bin error By default the full range of the histogram is used. ;  ; virtual void ClearUnderflowAndOverflow ();  Remove all the content from the underflow and overflow bins, without changing the number of entries After calling this method, every undeflow and overflow bins will have content 0.0 The Sumw2 is also cleared, since there is no more content in the bins. ;  ; TObject * Clone (const char *newname="""") const override;  Make a complete copy of the underlying object. ;  ; virtual Double_t ComputeIntegral (Bool_t onlyPositive=false);  Compute integral (normalized cumulative sum of bins) w/o under/overflows The result is stored in fIntegral and used by the GetRandom functions. ; ",MatchSource.WIKI,doc/master/classTH2C.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH2C.html
Modifiability,inherit,inherited,"::TH2 for explanation of parameters) ;  ;  TH2C (const TH2C &h2c);  Copy constructor. ;  ;  ~TH2C () override;  Destructor. ;  ; void AddBinContent (Int_t bin) override;  Increment bin content by 1. ;  ; void AddBinContent (Int_t bin, Double_t w) override;  Increment bin content by w. ;  ; void AddBinContent (Int_t binx, Int_t biny) override;  Increment 2D bin content by 1. ;  ; void AddBinContent (Int_t binx, Int_t biny, Double_t w) override;  Increment 2D bin content by a weight w. ;  ; void Copy (TObject &hnew) const override;  Copy. ;  ; TClass * IsA () const override;  ; TH2C & operator= (const TH2C &h1);  Operator =. ;  ; void Reset (Option_t *option="""") override;  Reset this histogram: contents, errors, etc. ;  ; void SetBinsLength (Int_t n=-1) override;  Set total number of bins including under/overflow Reallocate bin contents array. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TH2C. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TH2;  ~TH2 () override;  Destructor. ;  ; Int_t BufferEmpty (Int_t action=0) override;  Fill histogram with all entries in the buffer. ;  ; virtual Int_t Fill (const char *namex, const char *namey, Double_t w);  Increment cell defined by namex,namey by a weight w. ;  ; virtual Int_t Fill (const char *namex, Double_t y, Double_t w);  Increment cell defined by namex,y by a weight w. ;  ; virtual Int_t Fill (Double_t x, const char *namey, Double_t w);  Increment cell defined by x,namey by a weight w. ;  ; Int_t Fill (Double_t x, Double_t y) override;  Increment cell defined by x,y by 1. ;  ; virtual Int_t Fill (Double_t x, Double_t y, Double_t w);  Increment cell defined by x,y by a weight w. ;  ; void FillN (Int_t ntimes, const Double_t *x, const Double_t *y, const Double_t *w, Int_t stride=1) override;  Fill a 2-D histogram with an array of values and weights. ;  ; void FillN (Int_t, const Double_t *, const Double_t *, Int_t) override;  Fill this his",MatchSource.WIKI,doc/master/classTH2C.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH2C.html
Performance,perform,performing,"t char *title, Int_t nbinsx, const Float_t *xbins, Int_t nbinsy, const Float_t *ybins);  Constructor for variable bin size (along X and Y axis) 2-D histograms using input arrays of type float. ;  ;  TH2 (const char *name, const char *title, Int_t nbinsx, Double_t xlow, Double_t xup, Int_t nbinsy, const Double_t *ybins);  Constructor for Double_t variable bin size (along Y axis) 2-D histograms. ;  ;  TH2 (const char *name, const char *title, Int_t nbinsx, Double_t xlow, Double_t xup, Int_t nbinsy, Double_t ylow, Double_t yup);  Constructor for fix bin size 2-D histograms. ;  ; virtual Int_t BufferFill (Double_t x, Double_t y, Double_t w);  accumulate arguments in buffer. ;  ; Int_t BufferFill (Double_t, Double_t) override;  accumulate arguments in buffer. ;  ; virtual void DoFitSlices (bool onX, TF1 *f1, Int_t firstbin, Int_t lastbin, Int_t cut, Option_t *option, TObjArray *arr);  ; virtual TProfile * DoProfile (bool onX, const char *name, Int_t firstbin, Int_t lastbin, Option_t *option) const;  ; virtual TH1D * DoProjection (bool onX, const char *name, Int_t firstbin, Int_t lastbin, Option_t *option) const;  Internal (protected) method for performing projection on the X or Y axis called by ProjectionX or ProjectionY. ;  ; virtual TH1D * DoQuantiles (bool onX, const char *name, Double_t prob) const;  Implementation of quantiles for x or y. ;  ; Int_t Fill (const char *, Double_t) override;  Increment bin with namex with a weight w. ;  ; Int_t Fill (Double_t) override;  Invalid Fill method. ;  ; Double_t Interpolate (Double_t x) const override;  illegal for a TH2 ;  ;  Protected Member Functions inherited from TH1;  TH1 ();  Histogram default constructor. ;  ;  TH1 (const char *name, const char *title, Int_t nbinsx, const Double_t *xbins);  Constructor for variable bin size histograms using an input array of type double. ;  ;  TH1 (const char *name, const char *title, Int_t nbinsx, const Float_t *xbins);  Constructor for variable bin size histograms using an input arr",MatchSource.WIKI,doc/master/classTH2C.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH2C.html
Security,hash,hash,"m of squares of weights. ;  ; void UseCurrentStyle () override;  Copy current attributes from/to current style. ;  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; TClass * IsA () const override;  ; Bool_t IsSortable () const override;  ; void ls (Option_t *option="""") const override;  List TNamed name and title. ;  ; TNamed & operator= (const TNamed &rhs);  TNamed assignment operator. ;  ; void Print (Option_t *option="""") const override;  Print TNamed name and title. ;  ; virtual Int_t Sizeof () const;  Return size of the TNamed part of the TObject. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to c",MatchSource.WIKI,doc/master/classTH2C.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH2C.html
Testability,test,test,"range [firstxbin,lastxbin],[firstybin,lastybin] for a 2-D histogram By default the integral is computed as the sum of bin contents in the range. ;  ; virtual Double_t Integral (Int_t, Int_t, Int_t, Int_t, Int_t, Int_t, Option_t *="""") const;  ; Double_t Integral (Option_t *option="""") const override;  Return integral of bin contents. ;  ; virtual Double_t IntegralAndError (Int_t binx1, Int_t binx2, Int_t biny1, Int_t biny2, Double_t &err, Option_t *option="""") const;  Return integral of bin contents in range [firstxbin,lastxbin],[firstybin,lastybin] for a 2-D histogram. ;  ; Double_t Interpolate (Double_t x, Double_t y) const override;  Given a point P(x,y), Interpolate approximates the value via bilinear interpolation based on the four nearest bin centers see Wikipedia, Bilinear Interpolation Andy Mastbaum 10/8/2008 vaguely based on R.Raja 6-Sep-2008. ;  ; Double_t Interpolate (Double_t x, Double_t y, Double_t z) const override;  illegal for a TH2 ;  ; Double_t KolmogorovTest (const TH1 *h2, Option_t *option="""") const override;  Statistical test of compatibility in shape between THIS histogram and h2, using Kolmogorov test. ;  ; TProfile * ProfileX (const char *name=""_pfx"", Int_t firstybin=1, Int_t lastybin=-1, Option_t *option="""") const;  Project a 2-D histogram into a profile histogram along X. ;  ; TProfile * ProfileY (const char *name=""_pfy"", Int_t firstxbin=1, Int_t lastxbin=-1, Option_t *option="""") const;  Project a 2-D histogram into a profile histogram along Y. ;  ; TH1D * ProjectionX (const char *name=""_px"", Int_t firstybin=0, Int_t lastybin=-1, Option_t *option="""") const;  Project a 2-D histogram into a 1-D histogram along X. ;  ; TH1D * ProjectionY (const char *name=""_py"", Int_t firstxbin=0, Int_t lastxbin=-1, Option_t *option="""") const;  Project a 2-D histogram into a 1-D histogram along Y. ;  ; void PutStats (Double_t *stats) override;  Replace current statistics with the values in array stats. ;  ; TH1D * QuantilesX (Double_t prob=0.5, const char *name=""",MatchSource.WIKI,doc/master/classTH2C.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH2C.html
Usability,clear,cleared,"ject. ;  ; virtual Bool_t CanExtendAllAxes () const;  Returns true if all axes are extendable. ;  ; virtual Double_t Chi2Test (const TH1 *h2, Option_t *option=""UU"", Double_t *res=nullptr) const;  \( \chi^{2} \) test for comparing weighted and unweighted histograms. ;  ; virtual Double_t Chi2TestX (const TH1 *h2, Double_t &chi2, Int_t &ndf, Int_t &igood, Option_t *option=""UU"", Double_t *res=nullptr) const;  The computation routine of the Chisquare test. ;  ; virtual Double_t Chisquare (TF1 *f1, Option_t *option="""") const;  Compute and return the chisquare of this histogram with respect to a function The chisquare is computed by weighting each histogram point by the bin error By default the full range of the histogram is used. ;  ; virtual void ClearUnderflowAndOverflow ();  Remove all the content from the underflow and overflow bins, without changing the number of entries After calling this method, every undeflow and overflow bins will have content 0.0 The Sumw2 is also cleared, since there is no more content in the bins. ;  ; TObject * Clone (const char *newname="""") const override;  Make a complete copy of the underlying object. ;  ; virtual Double_t ComputeIntegral (Bool_t onlyPositive=false);  Compute integral (normalized cumulative sum of bins) w/o under/overflows The result is stored in fIntegral and used by the GetRandom functions. ;  ; virtual void DirectoryAutoAdd (TDirectory *);  Perform the automatic addition of the histogram to the given directory. ;  ; Int_t DistancetoPrimitive (Int_t px, Int_t py) override;  Compute distance from point px,py to a line. ;  ; virtual Bool_t Divide (const TH1 *h1);  Divide this histogram by h1. ;  ; virtual Bool_t Divide (const TH1 *h1, const TH1 *h2, Double_t c1=1, Double_t c2=1, Option_t *option="""");  Replace contents of this histogram by the division of h1 by h2. ;  ; virtual Bool_t Divide (TF1 *f1, Double_t c1=1);  Performs the operation: this = this/(c1*f1) if errors are defined (see TH1::Sumw2), errors are also recalc",MatchSource.WIKI,doc/master/classTH2C.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH2C.html
Availability,error,errors,"ers) ;  ;  TH2D (const char *name, const char *title, Int_t nbinsx, Double_t xlow, Double_t xup, Int_t nbinsy, Double_t ylow, Double_t yup);  Constructor (see TH2::TH2 for explanation of parameters) ;  ;  TH2D (const TH2D &h2d);  Copy constructor. ;  ;  TH2D (const TMatrixDBase &m);  Constructor Construct a 2-D histogram from a TMatrixDBase. ;  ;  ~TH2D () override;  Destructor. ;  ; void AddBinContent (Int_t bin) override;  Increment bin content by 1. ;  ; void AddBinContent (Int_t bin, Double_t w) override;  Increment bin content by a weight w Passing an out-of-range bin leads to undefined behavior. ;  ; void AddBinContent (Int_t binx, Int_t biny) override;  Increment 2D bin content by 1. ;  ; void AddBinContent (Int_t binx, Int_t biny, Double_t w) override;  Increment 2D bin content by a weight w. ;  ; void Copy (TObject &hnew) const override;  Copy. ;  ; TClass * IsA () const override;  ; TH2D & operator= (const TH2D &h1);  Operator =. ;  ; void Reset (Option_t *option="""") override;  Reset this histogram: contents, errors, etc. ;  ; void SetBinsLength (Int_t n=-1) override;  Set total number of bins including under/overflow Reallocate bin contents array. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TH2D. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TH2;  ~TH2 () override;  Destructor. ;  ; Int_t BufferEmpty (Int_t action=0) override;  Fill histogram with all entries in the buffer. ;  ; virtual Int_t Fill (const char *namex, const char *namey, Double_t w);  Increment cell defined by namex,namey by a weight w. ;  ; virtual Int_t Fill (const char *namex, Double_t y, Double_t w);  Increment cell defined by namex,y by a weight w. ;  ; virtual Int_t Fill (Double_t x, const char *namey, Double_t w);  Increment cell defined by x,namey by a weight w. ;  ; Int_t Fill (Double_t x, Double_t y) override;  Increment cell defined by x,y by 1. ;  ; virtual Int_t Fill (Double_t x, Double_t y,",MatchSource.WIKI,doc/master/classTH2D.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH2D.html
Deployability,update,update," Internal helper function that returns the corresponding marker style with line width 1 for the given style. ;  ;  Static Public Member Functions inherited from TArrayD; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TArray; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static TArray * ReadArray (TBuffer &b, const TClass *clReq);  Read TArray object from buffer. ;  ; static void WriteArray (TBuffer &b, const TArray *a);  Write TArray object to buffer. ;  . Protected Member Functions; Double_t RetrieveBinContent (Int_t bin) const override;  Raw retrieval of bin content on internal data structure see convention for numbering bins in TH1::GetBin. ;  ; void UpdateBinContent (Int_t bin, Double_t content) override;  Raw update of bin content on internal data structure see convention for numbering bins in TH1::GetBin. ;  ;  Protected Member Functions inherited from TH2;  TH2 ();  2-D histogram default constructor. ;  ;  TH2 (const char *name, const char *title, Int_t nbinsx, const Double_t *xbins, Int_t nbinsy, const Double_t *ybins);  Constructor for Double_t variable bin size 2-D histograms. ;  ;  TH2 (const char *name, const char *title, Int_t nbinsx, const Double_t *xbins, Int_t nbinsy, Double_t ylow, Double_t yup);  Constructor for variable bin size (along X axis) 2-D histograms using an input array of type double. ;  ;  TH2 (const char *name, const char *title, Int_t nbinsx, const Float_t *xbins, Int_t nbinsy, const Float_t *ybins);  Constructor for variable bin size (along X and Y axis) 2-D histograms using input arrays of type float. ;  ;  TH2 (const char *name, const char *title, Int_t nbinsx, Double_t xlow, Double_t xup, Int_t nbinsy, const Double_t *ybins);  Constructor for Double_t variable bin size (al",MatchSource.WIKI,doc/master/classTH2D.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH2D.html
Energy Efficiency,power,power," ProjectionY. ;  ; virtual TH1D * DoQuantiles (bool onX, const char *name, Double_t prob) const;  Implementation of quantiles for x or y. ;  ; Int_t Fill (const char *, Double_t) override;  Increment bin with namex with a weight w. ;  ; Int_t Fill (Double_t) override;  Invalid Fill method. ;  ; Double_t Interpolate (Double_t x) const override;  illegal for a TH2 ;  ;  Protected Member Functions inherited from TH1;  TH1 ();  Histogram default constructor. ;  ;  TH1 (const char *name, const char *title, Int_t nbinsx, const Double_t *xbins);  Constructor for variable bin size histograms using an input array of type double. ;  ;  TH1 (const char *name, const char *title, Int_t nbinsx, const Float_t *xbins);  Constructor for variable bin size histograms using an input array of type float. ;  ;  TH1 (const char *name, const char *title, Int_t nbinsx, Double_t xlow, Double_t xup);  Constructor for fix bin size histograms. ;  ; virtual Int_t AutoP2FindLimits (Double_t min, Double_t max);  Buffer-based estimate of the histogram range using the power of 2 algorithm. ;  ; Int_t AxisChoice (Option_t *axis) const;  Choose an axis according to ""axis"". ;  ; virtual void DoFillN (Int_t ntimes, const Double_t *x, const Double_t *w, Int_t stride=1);  Internal method to fill histogram content from a vector called directly by TH1::BufferEmpty. ;  ; virtual Double_t DoIntegral (Int_t ix1, Int_t ix2, Int_t iy1, Int_t iy2, Int_t iz1, Int_t iz2, Double_t &err, Option_t *opt, Bool_t doerr=kFALSE) const;  Internal function compute integral and optionally the error between the limits specified by the bin number values working for all histograms (1D, 2D and 3D) ;  ; virtual Bool_t FindNewAxisLimits (const TAxis *axis, const Double_t point, Double_t &newMin, Double_t &newMax);  finds new limits for the axis so that point is within the range and the limits are compatible with the previous ones (see TH1::Merge). ;  ; UInt_t GetAxisLabelStatus () const;  Internal function used in TH1::Fill to see ",MatchSource.WIKI,doc/master/classTH2D.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH2D.html
Integrability,rout,routine,"), errors are also recalculated. ;  ; virtual Bool_t Add (TF1 *h1, Double_t c1=1, Option_t *option="""");  Performs the operation: this = this + c1*f1 if errors are defined (see TH1::Sumw2), errors are also recalculated. ;  ; virtual Double_t AndersonDarlingTest (const TH1 *h2, Double_t &advalue) const;  Same function as above but returning also the test statistic value. ;  ; virtual Double_t AndersonDarlingTest (const TH1 *h2, Option_t *option="""") const;  Statistical test of compatibility in shape between this histogram and h2, using the Anderson-Darling 2 sample test. ;  ; void Browse (TBrowser *b) override;  Browse the Histogram object. ;  ; virtual Bool_t CanExtendAllAxes () const;  Returns true if all axes are extendable. ;  ; virtual Double_t Chi2Test (const TH1 *h2, Option_t *option=""UU"", Double_t *res=nullptr) const;  \( \chi^{2} \) test for comparing weighted and unweighted histograms. ;  ; virtual Double_t Chi2TestX (const TH1 *h2, Double_t &chi2, Int_t &ndf, Int_t &igood, Option_t *option=""UU"", Double_t *res=nullptr) const;  The computation routine of the Chisquare test. ;  ; virtual Double_t Chisquare (TF1 *f1, Option_t *option="""") const;  Compute and return the chisquare of this histogram with respect to a function The chisquare is computed by weighting each histogram point by the bin error By default the full range of the histogram is used. ;  ; virtual void ClearUnderflowAndOverflow ();  Remove all the content from the underflow and overflow bins, without changing the number of entries After calling this method, every undeflow and overflow bins will have content 0.0 The Sumw2 is also cleared, since there is no more content in the bins. ;  ; TObject * Clone (const char *newname="""") const override;  Make a complete copy of the underlying object. ;  ; virtual Double_t ComputeIntegral (Bool_t onlyPositive=false);  Compute integral (normalized cumulative sum of bins) w/o under/overflows The result is stored in fIntegral and used by the GetRandom functions. ; ",MatchSource.WIKI,doc/master/classTH2D.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH2D.html
Modifiability,inherit,inherited,"from a TMatrixDBase. ;  ;  ~TH2D () override;  Destructor. ;  ; void AddBinContent (Int_t bin) override;  Increment bin content by 1. ;  ; void AddBinContent (Int_t bin, Double_t w) override;  Increment bin content by a weight w Passing an out-of-range bin leads to undefined behavior. ;  ; void AddBinContent (Int_t binx, Int_t biny) override;  Increment 2D bin content by 1. ;  ; void AddBinContent (Int_t binx, Int_t biny, Double_t w) override;  Increment 2D bin content by a weight w. ;  ; void Copy (TObject &hnew) const override;  Copy. ;  ; TClass * IsA () const override;  ; TH2D & operator= (const TH2D &h1);  Operator =. ;  ; void Reset (Option_t *option="""") override;  Reset this histogram: contents, errors, etc. ;  ; void SetBinsLength (Int_t n=-1) override;  Set total number of bins including under/overflow Reallocate bin contents array. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TH2D. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TH2;  ~TH2 () override;  Destructor. ;  ; Int_t BufferEmpty (Int_t action=0) override;  Fill histogram with all entries in the buffer. ;  ; virtual Int_t Fill (const char *namex, const char *namey, Double_t w);  Increment cell defined by namex,namey by a weight w. ;  ; virtual Int_t Fill (const char *namex, Double_t y, Double_t w);  Increment cell defined by namex,y by a weight w. ;  ; virtual Int_t Fill (Double_t x, const char *namey, Double_t w);  Increment cell defined by x,namey by a weight w. ;  ; Int_t Fill (Double_t x, Double_t y) override;  Increment cell defined by x,y by 1. ;  ; virtual Int_t Fill (Double_t x, Double_t y, Double_t w);  Increment cell defined by x,y by a weight w. ;  ; void FillN (Int_t ntimes, const Double_t *x, const Double_t *y, const Double_t *w, Int_t stride=1) override;  Fill a 2-D histogram with an array of values and weights. ;  ; void FillN (Int_t, const Double_t *, const Double_t *, Int_t) override;  Fill this his",MatchSource.WIKI,doc/master/classTH2D.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH2D.html
Performance,perform,performing,"t char *title, Int_t nbinsx, const Float_t *xbins, Int_t nbinsy, const Float_t *ybins);  Constructor for variable bin size (along X and Y axis) 2-D histograms using input arrays of type float. ;  ;  TH2 (const char *name, const char *title, Int_t nbinsx, Double_t xlow, Double_t xup, Int_t nbinsy, const Double_t *ybins);  Constructor for Double_t variable bin size (along Y axis) 2-D histograms. ;  ;  TH2 (const char *name, const char *title, Int_t nbinsx, Double_t xlow, Double_t xup, Int_t nbinsy, Double_t ylow, Double_t yup);  Constructor for fix bin size 2-D histograms. ;  ; virtual Int_t BufferFill (Double_t x, Double_t y, Double_t w);  accumulate arguments in buffer. ;  ; Int_t BufferFill (Double_t, Double_t) override;  accumulate arguments in buffer. ;  ; virtual void DoFitSlices (bool onX, TF1 *f1, Int_t firstbin, Int_t lastbin, Int_t cut, Option_t *option, TObjArray *arr);  ; virtual TProfile * DoProfile (bool onX, const char *name, Int_t firstbin, Int_t lastbin, Option_t *option) const;  ; virtual TH1D * DoProjection (bool onX, const char *name, Int_t firstbin, Int_t lastbin, Option_t *option) const;  Internal (protected) method for performing projection on the X or Y axis called by ProjectionX or ProjectionY. ;  ; virtual TH1D * DoQuantiles (bool onX, const char *name, Double_t prob) const;  Implementation of quantiles for x or y. ;  ; Int_t Fill (const char *, Double_t) override;  Increment bin with namex with a weight w. ;  ; Int_t Fill (Double_t) override;  Invalid Fill method. ;  ; Double_t Interpolate (Double_t x) const override;  illegal for a TH2 ;  ;  Protected Member Functions inherited from TH1;  TH1 ();  Histogram default constructor. ;  ;  TH1 (const char *name, const char *title, Int_t nbinsx, const Double_t *xbins);  Constructor for variable bin size histograms using an input array of type double. ;  ;  TH1 (const char *name, const char *title, Int_t nbinsx, const Float_t *xbins);  Constructor for variable bin size histograms using an input arr",MatchSource.WIKI,doc/master/classTH2D.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH2D.html
Security,hash,hash,"m of squares of weights. ;  ; void UseCurrentStyle () override;  Copy current attributes from/to current style. ;  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; TClass * IsA () const override;  ; Bool_t IsSortable () const override;  ; void ls (Option_t *option="""") const override;  List TNamed name and title. ;  ; TNamed & operator= (const TNamed &rhs);  TNamed assignment operator. ;  ; void Print (Option_t *option="""") const override;  Print TNamed name and title. ;  ; virtual Int_t Sizeof () const;  Return size of the TNamed part of the TObject. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to c",MatchSource.WIKI,doc/master/classTH2D.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH2D.html
Testability,test,test,"range [firstxbin,lastxbin],[firstybin,lastybin] for a 2-D histogram By default the integral is computed as the sum of bin contents in the range. ;  ; virtual Double_t Integral (Int_t, Int_t, Int_t, Int_t, Int_t, Int_t, Option_t *="""") const;  ; Double_t Integral (Option_t *option="""") const override;  Return integral of bin contents. ;  ; virtual Double_t IntegralAndError (Int_t binx1, Int_t binx2, Int_t biny1, Int_t biny2, Double_t &err, Option_t *option="""") const;  Return integral of bin contents in range [firstxbin,lastxbin],[firstybin,lastybin] for a 2-D histogram. ;  ; Double_t Interpolate (Double_t x, Double_t y) const override;  Given a point P(x,y), Interpolate approximates the value via bilinear interpolation based on the four nearest bin centers see Wikipedia, Bilinear Interpolation Andy Mastbaum 10/8/2008 vaguely based on R.Raja 6-Sep-2008. ;  ; Double_t Interpolate (Double_t x, Double_t y, Double_t z) const override;  illegal for a TH2 ;  ; Double_t KolmogorovTest (const TH1 *h2, Option_t *option="""") const override;  Statistical test of compatibility in shape between THIS histogram and h2, using Kolmogorov test. ;  ; TProfile * ProfileX (const char *name=""_pfx"", Int_t firstybin=1, Int_t lastybin=-1, Option_t *option="""") const;  Project a 2-D histogram into a profile histogram along X. ;  ; TProfile * ProfileY (const char *name=""_pfy"", Int_t firstxbin=1, Int_t lastxbin=-1, Option_t *option="""") const;  Project a 2-D histogram into a profile histogram along Y. ;  ; TH1D * ProjectionX (const char *name=""_px"", Int_t firstybin=0, Int_t lastybin=-1, Option_t *option="""") const;  Project a 2-D histogram into a 1-D histogram along X. ;  ; TH1D * ProjectionY (const char *name=""_py"", Int_t firstxbin=0, Int_t lastxbin=-1, Option_t *option="""") const;  Project a 2-D histogram into a 1-D histogram along Y. ;  ; void PutStats (Double_t *stats) override;  Replace current statistics with the values in array stats. ;  ; TH1D * QuantilesX (Double_t prob=0.5, const char *name=""",MatchSource.WIKI,doc/master/classTH2D.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH2D.html
Usability,clear,cleared,"ject. ;  ; virtual Bool_t CanExtendAllAxes () const;  Returns true if all axes are extendable. ;  ; virtual Double_t Chi2Test (const TH1 *h2, Option_t *option=""UU"", Double_t *res=nullptr) const;  \( \chi^{2} \) test for comparing weighted and unweighted histograms. ;  ; virtual Double_t Chi2TestX (const TH1 *h2, Double_t &chi2, Int_t &ndf, Int_t &igood, Option_t *option=""UU"", Double_t *res=nullptr) const;  The computation routine of the Chisquare test. ;  ; virtual Double_t Chisquare (TF1 *f1, Option_t *option="""") const;  Compute and return the chisquare of this histogram with respect to a function The chisquare is computed by weighting each histogram point by the bin error By default the full range of the histogram is used. ;  ; virtual void ClearUnderflowAndOverflow ();  Remove all the content from the underflow and overflow bins, without changing the number of entries After calling this method, every undeflow and overflow bins will have content 0.0 The Sumw2 is also cleared, since there is no more content in the bins. ;  ; TObject * Clone (const char *newname="""") const override;  Make a complete copy of the underlying object. ;  ; virtual Double_t ComputeIntegral (Bool_t onlyPositive=false);  Compute integral (normalized cumulative sum of bins) w/o under/overflows The result is stored in fIntegral and used by the GetRandom functions. ;  ; virtual void DirectoryAutoAdd (TDirectory *);  Perform the automatic addition of the histogram to the given directory. ;  ; Int_t DistancetoPrimitive (Int_t px, Int_t py) override;  Compute distance from point px,py to a line. ;  ; virtual Bool_t Divide (const TH1 *h1);  Divide this histogram by h1. ;  ; virtual Bool_t Divide (const TH1 *h1, const TH1 *h2, Double_t c1=1, Double_t c2=1, Option_t *option="""");  Replace contents of this histogram by the division of h1 by h2. ;  ; virtual Bool_t Divide (TF1 *f1, Double_t c1=1);  Performs the operation: this = this/(c1*f1) if errors are defined (see TH1::Sumw2), errors are also recalc",MatchSource.WIKI,doc/master/classTH2D.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH2D.html
Availability,error,errors,"lot: 'Contour' : ComboBox: draw a contour plot (None, Cont0..4) 'Cont #' : TGNumberEntry: set the number of Contours 2d Plot checkboxes: 'Arrow' : arrow mode. Shows gradient between adjacent cells 'Col' : a box is drawn for each cell with a color scale varying with contents 'Text' : Draw bin contents as text 'Box' : a box is drawn for each cell with surface proportional to contents 'Scat' : Draw a scatter-plot (default) 'Palette' : the color palette is drawn; 3d Plot: 'Type' : ComboBox: set histogram type Lego or Surface-Plot draw(Lego, Lego1..4, Surf, Surf1..5) see THistPainter::Paint 'Coords' : ComboBox: set the coordinate system (Cartesian, .. Spheric) see THistPainter::Paint 'Cont #' : TGNumberEntry: set the number of Contours (for e.g. Lego2 drawoption 3d Plot checkboxes: 'Errors' : draw errors in a cartesian lego plot 'Palette' : the color palette is drawn 'Front' : draw the front box of a cartesian lego plot 'Back' : draw the back box of a cartesian lego plot Available for a 3D lego plot: 'Bar' : change the bar attributes 'W' : change Bar Width 'O' : change Bar Offset Further Editor: 'Marker' : change the Marker attributes (color, appearance, thickness) see TAttMarkerEditor; Rebinning Tab: This Tab has two different layouts. One is for a histogram which is not drawn from an ntuple. The other one is available for a histogram which is drawn from an ntuple. In this case the rebin algorithm can create a rebinned histogram from the original data i.e. the ntuple. To see te differences do for example: TFile f(""hsimple.root""); hpxpy->Draw(""Lego2""); // non ntuple histogram ntuple->Draw(""px:py"","""",""Lego2""); // ntuple histogram Non ntuple histogram: 'Rebin': with the Sliders (one for the x, one for the y axis) the number of bins (shown in the field below the Slider) can be changed to any number which divides the number of bins of the original histogram. Pushing 'Apply' will delete the origin histogram and replace it by the rebinned one on the screen. Pushing 'Ignore' the",MatchSource.WIKI,doc/master/classTH2Editor.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH2Editor.html
Deployability,update,updated,"he x, one for the y axis) the number of bins (shown in the field below the Slider) can be changed to any number which divides the number of bins of the original histogram. Pushing 'Apply' will delete the origin histogram and replace it by the rebinned one on the screen. Pushing 'Ignore' the origin histogram will be restored Histogram drawn from an ntuple: 'Rebin' with the sliders the number of bins can be enlarged by a factor of 2,3,4,5 (moving to the right) or reduced by a factor of 1/2, 1/3, 1/4, 1/5 'BinOffset': with the BinOffset slider the origin of the histogram can be changed within one binwidth Using this slider the effect of binning the data into bins can be made visible => statistical fluctuations 'Axis Range': with the DoubleSlider it is possible to zoom into the specified axis range. It is also possible to set the upper and lower limit in fields below the slider 'Delayed drawing': all the Binning sliders can be set to delay draw mode. Then the changes on the histogram are only updated, when the Slider is released. This should be activated if the redrawing of the histogram is too time consuming. // ; Definition at line 34 of file TH2Editor.h. Public Member Functions;  TH2Editor (const TGWindow *p=nullptr, Int_t width=140, Int_t height=30, UInt_t options=kChildFrame, Pixel_t back=GetDefaultFrameBackground());  Constructor of histogram attribute GUI. ;  ;  ~TH2Editor () override;  Destructor. ;  ; Bool_t AcceptModel (TObject *model) override;  Check if object is able to configure with this editor. ;  ; void ActivateBaseClassEditors (TClass *cl) override;  Skip TH1Editor in building list of editors. ;  ; Int_t * Dividers (Int_t n);  Give an array of dividers of n (without the trivial divider n)) in the first entry the number of dividers is saved. ;  ; virtual void DoAddArr (Bool_t on);  Slot connected to the ""Arrow draw option"" check button. ;  ; virtual void DoAddBB ();  Slot connected to the ""BB back-box draw option"" check button. ;  ; virtual void DoAddBox",MatchSource.WIKI,doc/master/classTH2Editor.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH2Editor.html
Energy Efficiency,reduce,reduced,"ts. One is for a histogram which is not drawn from an ntuple. The other one is available for a histogram which is drawn from an ntuple. In this case the rebin algorithm can create a rebinned histogram from the original data i.e. the ntuple. To see te differences do for example: TFile f(""hsimple.root""); hpxpy->Draw(""Lego2""); // non ntuple histogram ntuple->Draw(""px:py"","""",""Lego2""); // ntuple histogram Non ntuple histogram: 'Rebin': with the Sliders (one for the x, one for the y axis) the number of bins (shown in the field below the Slider) can be changed to any number which divides the number of bins of the original histogram. Pushing 'Apply' will delete the origin histogram and replace it by the rebinned one on the screen. Pushing 'Ignore' the origin histogram will be restored Histogram drawn from an ntuple: 'Rebin' with the sliders the number of bins can be enlarged by a factor of 2,3,4,5 (moving to the right) or reduced by a factor of 1/2, 1/3, 1/4, 1/5 'BinOffset': with the BinOffset slider the origin of the histogram can be changed within one binwidth Using this slider the effect of binning the data into bins can be made visible => statistical fluctuations 'Axis Range': with the DoubleSlider it is possible to zoom into the specified axis range. It is also possible to set the upper and lower limit in fields below the slider 'Delayed drawing': all the Binning sliders can be set to delay draw mode. Then the changes on the histogram are only updated, when the Slider is released. This should be activated if the redrawing of the histogram is too time consuming. // ; Definition at line 34 of file TH2Editor.h. Public Member Functions;  TH2Editor (const TGWindow *p=nullptr, Int_t width=140, Int_t height=30, UInt_t options=kChildFrame, Pixel_t back=GetDefaultFrameBackground());  Constructor of histogram attribute GUI. ;  ;  ~TH2Editor () override;  Destructor. ;  ; Bool_t AcceptModel (TObject *model) override;  Check if object is able to configure with this editor. ;  ; v",MatchSource.WIKI,doc/master/classTH2Editor.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH2Editor.html
Integrability,interface,interface,". ROOT: TH2Editor Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Protected Member Functions |; Static Protected Member Functions |; Protected Attributes |; Private Member Functions |; Private Attributes |; List of all members ; TH2Editor Class ReferenceGUI » ROOT Graphics Editor. ; Editor for changing TH2 histogram attributes, rebinning & fitting. ; For all possible draw options (there are a few which are not implementable in a graphical user interface) see THistPainter::Paint.; These changes can be made via the TH2Editor: Style Tab: 'Line' : change Line attributes (color, thickness) see TAttLineEditor 'Fill' : change Fill attributes (color, pattern) see TAttFillEditor 'Title' : TextEntry: set the title of the histogram 'Histogram': change the draw options of the histogram 'Plot' : Radiobutton: draw a 2D or 3D plot of the histogram according to the Plot dimension there will be different drawing possibilities (ComboBoxes/ CheckBoxes) 2d Plot: 'Contour' : ComboBox: draw a contour plot (None, Cont0..4) 'Cont #' : TGNumberEntry: set the number of Contours 2d Plot checkboxes: 'Arrow' : arrow mode. Shows gradient between adjacent cells 'Col' : a box is drawn for each cell with a color scale varying with contents 'Text' : Draw bin contents as text 'Box' : a box is drawn for each cell with surface proportional to contents 'Scat' : Draw a scatter-plot (default) 'Palette' : the color palette is drawn; 3d Plot: 'Type' : ComboBox: set histogram type Lego or Surface-Plot draw(Lego, Lego1..4, Surf, Surf1..5) see THistPainter::Paint 'Coords' : ComboBox: set the coordinate system (Cartesian, .. Spheric) see THistPainter::Paint 'Cont #' : TGNumberEntry: set the number of Contours (for e.g. Lego2 drawoption 3d Plot checkboxes: 'Errors' : draw errors in a cartesian lego plot 'Palette' : the color palette is drawn 'Front' : draw the front box of a cartesian lego plot 'Back' : draw the ba",MatchSource.WIKI,doc/master/classTH2Editor.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH2Editor.html
Modifiability,config,configure,"a factor of 1/2, 1/3, 1/4, 1/5 'BinOffset': with the BinOffset slider the origin of the histogram can be changed within one binwidth Using this slider the effect of binning the data into bins can be made visible => statistical fluctuations 'Axis Range': with the DoubleSlider it is possible to zoom into the specified axis range. It is also possible to set the upper and lower limit in fields below the slider 'Delayed drawing': all the Binning sliders can be set to delay draw mode. Then the changes on the histogram are only updated, when the Slider is released. This should be activated if the redrawing of the histogram is too time consuming. // ; Definition at line 34 of file TH2Editor.h. Public Member Functions;  TH2Editor (const TGWindow *p=nullptr, Int_t width=140, Int_t height=30, UInt_t options=kChildFrame, Pixel_t back=GetDefaultFrameBackground());  Constructor of histogram attribute GUI. ;  ;  ~TH2Editor () override;  Destructor. ;  ; Bool_t AcceptModel (TObject *model) override;  Check if object is able to configure with this editor. ;  ; void ActivateBaseClassEditors (TClass *cl) override;  Skip TH1Editor in building list of editors. ;  ; Int_t * Dividers (Int_t n);  Give an array of dividers of n (without the trivial divider n)) in the first entry the number of dividers is saved. ;  ; virtual void DoAddArr (Bool_t on);  Slot connected to the ""Arrow draw option"" check button. ;  ; virtual void DoAddBB ();  Slot connected to the ""BB back-box draw option"" check button. ;  ; virtual void DoAddBox (Bool_t on);  Slot connected to the ""Box draw option"" check button. ;  ; virtual void DoAddCol (Bool_t on);  Slot connected to the ""Col draw option"" check button. ;  ; virtual void DoAddError (Bool_t on);  Slot connected to the ""Error"" check button. ;  ; virtual void DoAddFB ();  Slot connected to the ""FB front-box draw option"" check button. ;  ; virtual void DoAddPalette (Bool_t on);  Slot connected to the color palette check button. ;  ; virtual void DoAddScat (Bool_t o",MatchSource.WIKI,doc/master/classTH2Editor.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH2Editor.html
Security,hash,hash,"n response of a timer timing out. ;  ; virtual void IconifyWindow ();  iconify window ;  ; TClass * IsA () const override;  ; virtual Bool_t IsMapped ();  Returns kTRUE if window is mapped on screen, kFALSE otherwise. ;  ; virtual void LowerWindow ();  lower window ;  ; void Print (Option_t *option="""") const override;  Print window id. ;  ; virtual void RaiseWindow ();  raise window ;  ; virtual void RequestFocus ();  request focus ;  ; virtual void SetBackgroundPixmap (Pixmap_t pixmap);  set background pixmap ;  ; virtual void SetName (const char *name);  ; virtual void SetWindowName (const char *name=nullptr);  Set window name. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TGObject;  TGObject ();  ;  TGObject (const TGObject &tgo);  ;  ~TGObject () override;  TGObject destructor. ;  ; TGClient * GetClient () const;  ; Handle_t GetId () const;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; Bool_t IsEqual (const TObject *obj) const override;  Equal comparison (TGObjects are equal if they have the same window identifier). ;  ; void SaveAs (const char *filename="""", Option_t *option="""") const override;  Write this TGObject to a file using TImage, if filename's extension signals a valid TImage::EImageFileType, as defined by TImage::GetImageFileTypeFromFilename(). ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse ob",MatchSource.WIKI,doc/master/classTH2Editor.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH2Editor.html
Availability,error,error,"dvirtual; DoProfile(bool onX, const char *name, Int_t firstbin, Int_t lastbin, Option_t *option) constTH2protectedvirtual; DoProjection(bool onX, const char *name, Int_t firstbin, Int_t lastbin, Option_t *option) constTH2protectedvirtual; DoQuantiles(bool onX, const char *name, Double_t prob) constTH2protectedvirtual; Draw(Option_t *option="""") overrideTH1virtual; DrawClass() constTObjectvirtual; DrawClone(Option_t *option="""") constTObjectvirtual; DrawCopy(Option_t *option="""", const char *name_postfix=""_copy"") constTH1virtual; DrawNormalized(Option_t *option="""", Double_t norm=1) constTH1virtual; DrawPanel()TH1virtual; Dump() constTObjectvirtual; EBinErrorOpt enum nameTH1; EDeprecatedStatusBits enum nameTObject; Error(const char *method, const char *msgfmt,...) constTObjectvirtual; EStatOverflows enum nameTH1; EStatusBits enum nameTH1; Eval(TF1 *f1, Option_t *option="""")TH1virtual; Execute(const char *method, const char *params, Int_t *error=nullptr)TObjectvirtual; Execute(TMethod *method, TObjArray *params, Int_t *error=nullptr)TObjectvirtual; ExecuteEvent(Int_t event, Int_t px, Int_t py) overrideTH1virtual; ExtendAxis(Double_t x, TAxis *axis)TH1virtual; fArrayTArrayF; Fatal(const char *method, const char *msgfmt,...) constTObjectvirtual; fBarOffsetTH1protected; fBarWidthTH1protected; fBinStatErrOptTH1protected; fBitsTObjectprivate; fBufferTH1protected; fBufferSizeTH1protected; fContourTH1protected; fDimensionTH1protected; fDirectoryTH1protected; fEntriesTH1protected; fFillColorTAttFillprotected; fFillStyleTAttFillprotected; FFT(TH1 *h_output, Option_t *option)TH1virtual; fFunctionsTH1protected; fgAddDirectoryTH1protectedstatic; fgBufferSizeTH1protectedstatic; fgDefaultSumw2TH1protectedstatic; fgDtorOnlyTObjectprivatestatic; fgObjectStatTObjectprivatestatic; fgStatOverflowsTH1protectedstatic; Fill(Double_t) overrideTH2protectedvirtual; Fill(const char *, Double_t) overrideTH2inlineprotectedvirtual; Fill(Double_t x, Double_t y) overrideTH2virtual; Fill(Double_t x, Doub",MatchSource.WIKI,doc/master/classTH2F-members.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH2F-members.html
Modifiability,inherit,inherited,". ROOT: Member List. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. TH2F Member List. This is the complete list of members for TH2F, including all inherited members. AbstractMethod(const char *method) constTObject; Add(TF1 *h1, Double_t c1=1, Option_t *option="""")TH1virtual; Add(const TH1 *h1, Double_t c1=1)TH1virtual; Add(const TH1 *h, const TH1 *h2, Double_t c1=1, Double_t c2=1)TH1virtual; AddAt(Float_t c, Int_t i)TArrayF; AddBinContent(Int_t bin) overrideTH2Finlinevirtual; AddBinContent(Int_t bin, Double_t w) overrideTH2Finlinevirtual; AddBinContent(Int_t binx, Int_t biny) overrideTH2Finlinevirtual; AddBinContent(Int_t binx, Int_t biny, Double_t w) overrideTH2Finlinevirtual; AddDirectory(Bool_t add=kTRUE)TH1static; AddDirectoryStatus()TH1static; AddToTObjectTable(TObject *)TObjectprivatestatic; Adopt(Int_t n, Float_t *array)TArrayF; AndersonDarlingTest(const TH1 *h2, Option_t *option="""") constTH1virtual; AndersonDarlingTest(const TH1 *h2, Double_t &advalue) constTH1virtual; AppendPad(Option_t *option="""")TObjectvirtual; At(Int_t i) constTArrayFinline; AutoP2FindLimits(Double_t min, Double_t max)TH1protectedvirtual; AutoP2GetBins(Int_t n)TH1inlineprotectedstatic; AutoP2GetPower2(Double_t x, Bool_t next=kTRUE)TH1inlineprotectedstatic; AxisChoice(Option_t *axis) constTH1protected; BoundsOk(const char *where, Int_t at) constTArrayinlineprotected; Browse(TBrowser *b) overrideTH1virtual; BufferEmpty(Int_t action=0) overrideTH2virtual; BufferFill(Double_t x, Double_t y, Double_t w)TH2protectedvirtual; BufferFill(Double_t, Double_t) overrideTH2inlineprotectedvirtual; Build()TH1private; CanExtendAllAxes() constTH1virtual; CheckAxisLimits(const TAxis *a1, const TAxis *a2)TH1protectedstatic; CheckBinLabels(const TAxis *a1, const TAxis *a2)TH1protectedstatic; CheckBinLimits(const TAxis *a1, const TAxis *a2)TH1protectedstatic; CheckConsistency(const TH1 *h1, const TH1 *h2)TH1protectedstatic; CheckConsistentSubAxes(const TAxis *a1, Int_t firstBin",MatchSource.WIKI,doc/master/classTH2F-members.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH2F-members.html
Availability,error,errors,"ble_t xup, Int_t nbinsy, const Double_t *ybins);  Constructor (see TH2::TH2 for explanation of parameters) ;  ;  TH2F (const char *name, const char *title, Int_t nbinsx, Double_t xlow, Double_t xup, Int_t nbinsy, Double_t ylow, Double_t yup);  Constructor (see TH2::TH2 for explanation of parameters) ;  ;  TH2F (const TH2F &h2f);  Copy constructor. ;  ;  TH2F (const TMatrixFBase &m);  Constructor. ;  ;  ~TH2F () override;  Destructor. ;  ; void AddBinContent (Int_t bin) override;  Increment bin content by 1. ;  ; void AddBinContent (Int_t bin, Double_t w) override;  Increment bin content by a weight w. ;  ; void AddBinContent (Int_t binx, Int_t biny) override;  Increment 2D bin content by 1. ;  ; void AddBinContent (Int_t binx, Int_t biny, Double_t w) override;  Increment 2D bin content by a weight w. ;  ; void Copy (TObject &hnew) const override;  Copy. ;  ; TClass * IsA () const override;  ; TH2F & operator= (const TH2F &h1);  Operator =. ;  ; void Reset (Option_t *option="""") override;  Reset this histogram: contents, errors, etc. ;  ; void SetBinsLength (Int_t n=-1) override;  Set total number of bins including under/overflow Reallocate bin contents array. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TH2F. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TH2;  ~TH2 () override;  Destructor. ;  ; Int_t BufferEmpty (Int_t action=0) override;  Fill histogram with all entries in the buffer. ;  ; virtual Int_t Fill (const char *namex, const char *namey, Double_t w);  Increment cell defined by namex,namey by a weight w. ;  ; virtual Int_t Fill (const char *namex, Double_t y, Double_t w);  Increment cell defined by namex,y by a weight w. ;  ; virtual Int_t Fill (Double_t x, const char *namey, Double_t w);  Increment cell defined by x,namey by a weight w. ;  ; Int_t Fill (Double_t x, Double_t y) override;  Increment cell defined by x,y by 1. ;  ; virtual Int_t Fill (Double_t x, Double_t y,",MatchSource.WIKI,doc/master/classTH2F.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH2F.html
Deployability,update,update," Internal helper function that returns the corresponding marker style with line width 1 for the given style. ;  ;  Static Public Member Functions inherited from TArrayF; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TArray; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static TArray * ReadArray (TBuffer &b, const TClass *clReq);  Read TArray object from buffer. ;  ; static void WriteArray (TBuffer &b, const TArray *a);  Write TArray object to buffer. ;  . Protected Member Functions; Double_t RetrieveBinContent (Int_t bin) const override;  Raw retrieval of bin content on internal data structure see convention for numbering bins in TH1::GetBin. ;  ; void UpdateBinContent (Int_t bin, Double_t content) override;  Raw update of bin content on internal data structure see convention for numbering bins in TH1::GetBin. ;  ;  Protected Member Functions inherited from TH2;  TH2 ();  2-D histogram default constructor. ;  ;  TH2 (const char *name, const char *title, Int_t nbinsx, const Double_t *xbins, Int_t nbinsy, const Double_t *ybins);  Constructor for Double_t variable bin size 2-D histograms. ;  ;  TH2 (const char *name, const char *title, Int_t nbinsx, const Double_t *xbins, Int_t nbinsy, Double_t ylow, Double_t yup);  Constructor for variable bin size (along X axis) 2-D histograms using an input array of type double. ;  ;  TH2 (const char *name, const char *title, Int_t nbinsx, const Float_t *xbins, Int_t nbinsy, const Float_t *ybins);  Constructor for variable bin size (along X and Y axis) 2-D histograms using input arrays of type float. ;  ;  TH2 (const char *name, const char *title, Int_t nbinsx, Double_t xlow, Double_t xup, Int_t nbinsy, const Double_t *ybins);  Constructor for Double_t variable bin size (al",MatchSource.WIKI,doc/master/classTH2F.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH2F.html
Energy Efficiency,power,power," ProjectionY. ;  ; virtual TH1D * DoQuantiles (bool onX, const char *name, Double_t prob) const;  Implementation of quantiles for x or y. ;  ; Int_t Fill (const char *, Double_t) override;  Increment bin with namex with a weight w. ;  ; Int_t Fill (Double_t) override;  Invalid Fill method. ;  ; Double_t Interpolate (Double_t x) const override;  illegal for a TH2 ;  ;  Protected Member Functions inherited from TH1;  TH1 ();  Histogram default constructor. ;  ;  TH1 (const char *name, const char *title, Int_t nbinsx, const Double_t *xbins);  Constructor for variable bin size histograms using an input array of type double. ;  ;  TH1 (const char *name, const char *title, Int_t nbinsx, const Float_t *xbins);  Constructor for variable bin size histograms using an input array of type float. ;  ;  TH1 (const char *name, const char *title, Int_t nbinsx, Double_t xlow, Double_t xup);  Constructor for fix bin size histograms. ;  ; virtual Int_t AutoP2FindLimits (Double_t min, Double_t max);  Buffer-based estimate of the histogram range using the power of 2 algorithm. ;  ; Int_t AxisChoice (Option_t *axis) const;  Choose an axis according to ""axis"". ;  ; virtual void DoFillN (Int_t ntimes, const Double_t *x, const Double_t *w, Int_t stride=1);  Internal method to fill histogram content from a vector called directly by TH1::BufferEmpty. ;  ; virtual Double_t DoIntegral (Int_t ix1, Int_t ix2, Int_t iy1, Int_t iy2, Int_t iz1, Int_t iz2, Double_t &err, Option_t *opt, Bool_t doerr=kFALSE) const;  Internal function compute integral and optionally the error between the limits specified by the bin number values working for all histograms (1D, 2D and 3D) ;  ; virtual Bool_t FindNewAxisLimits (const TAxis *axis, const Double_t point, Double_t &newMin, Double_t &newMax);  finds new limits for the axis so that point is within the range and the limits are compatible with the previous ones (see TH1::Merge). ;  ; UInt_t GetAxisLabelStatus () const;  Internal function used in TH1::Fill to see ",MatchSource.WIKI,doc/master/classTH2F.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH2F.html
Integrability,rout,routine,"), errors are also recalculated. ;  ; virtual Bool_t Add (TF1 *h1, Double_t c1=1, Option_t *option="""");  Performs the operation: this = this + c1*f1 if errors are defined (see TH1::Sumw2), errors are also recalculated. ;  ; virtual Double_t AndersonDarlingTest (const TH1 *h2, Double_t &advalue) const;  Same function as above but returning also the test statistic value. ;  ; virtual Double_t AndersonDarlingTest (const TH1 *h2, Option_t *option="""") const;  Statistical test of compatibility in shape between this histogram and h2, using the Anderson-Darling 2 sample test. ;  ; void Browse (TBrowser *b) override;  Browse the Histogram object. ;  ; virtual Bool_t CanExtendAllAxes () const;  Returns true if all axes are extendable. ;  ; virtual Double_t Chi2Test (const TH1 *h2, Option_t *option=""UU"", Double_t *res=nullptr) const;  \( \chi^{2} \) test for comparing weighted and unweighted histograms. ;  ; virtual Double_t Chi2TestX (const TH1 *h2, Double_t &chi2, Int_t &ndf, Int_t &igood, Option_t *option=""UU"", Double_t *res=nullptr) const;  The computation routine of the Chisquare test. ;  ; virtual Double_t Chisquare (TF1 *f1, Option_t *option="""") const;  Compute and return the chisquare of this histogram with respect to a function The chisquare is computed by weighting each histogram point by the bin error By default the full range of the histogram is used. ;  ; virtual void ClearUnderflowAndOverflow ();  Remove all the content from the underflow and overflow bins, without changing the number of entries After calling this method, every undeflow and overflow bins will have content 0.0 The Sumw2 is also cleared, since there is no more content in the bins. ;  ; TObject * Clone (const char *newname="""") const override;  Make a complete copy of the underlying object. ;  ; virtual Double_t ComputeIntegral (Bool_t onlyPositive=false);  Compute integral (normalized cumulative sum of bins) w/o under/overflows The result is stored in fIntegral and used by the GetRandom functions. ; ",MatchSource.WIKI,doc/master/classTH2F.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH2F.html
Modifiability,inherit,inherited," &h2f);  Copy constructor. ;  ;  TH2F (const TMatrixFBase &m);  Constructor. ;  ;  ~TH2F () override;  Destructor. ;  ; void AddBinContent (Int_t bin) override;  Increment bin content by 1. ;  ; void AddBinContent (Int_t bin, Double_t w) override;  Increment bin content by a weight w. ;  ; void AddBinContent (Int_t binx, Int_t biny) override;  Increment 2D bin content by 1. ;  ; void AddBinContent (Int_t binx, Int_t biny, Double_t w) override;  Increment 2D bin content by a weight w. ;  ; void Copy (TObject &hnew) const override;  Copy. ;  ; TClass * IsA () const override;  ; TH2F & operator= (const TH2F &h1);  Operator =. ;  ; void Reset (Option_t *option="""") override;  Reset this histogram: contents, errors, etc. ;  ; void SetBinsLength (Int_t n=-1) override;  Set total number of bins including under/overflow Reallocate bin contents array. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TH2F. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TH2;  ~TH2 () override;  Destructor. ;  ; Int_t BufferEmpty (Int_t action=0) override;  Fill histogram with all entries in the buffer. ;  ; virtual Int_t Fill (const char *namex, const char *namey, Double_t w);  Increment cell defined by namex,namey by a weight w. ;  ; virtual Int_t Fill (const char *namex, Double_t y, Double_t w);  Increment cell defined by namex,y by a weight w. ;  ; virtual Int_t Fill (Double_t x, const char *namey, Double_t w);  Increment cell defined by x,namey by a weight w. ;  ; Int_t Fill (Double_t x, Double_t y) override;  Increment cell defined by x,y by 1. ;  ; virtual Int_t Fill (Double_t x, Double_t y, Double_t w);  Increment cell defined by x,y by a weight w. ;  ; void FillN (Int_t ntimes, const Double_t *x, const Double_t *y, const Double_t *w, Int_t stride=1) override;  Fill a 2-D histogram with an array of values and weights. ;  ; void FillN (Int_t, const Double_t *, const Double_t *, Int_t) override;  Fill this his",MatchSource.WIKI,doc/master/classTH2F.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH2F.html
Performance,perform,performing,"t char *title, Int_t nbinsx, const Float_t *xbins, Int_t nbinsy, const Float_t *ybins);  Constructor for variable bin size (along X and Y axis) 2-D histograms using input arrays of type float. ;  ;  TH2 (const char *name, const char *title, Int_t nbinsx, Double_t xlow, Double_t xup, Int_t nbinsy, const Double_t *ybins);  Constructor for Double_t variable bin size (along Y axis) 2-D histograms. ;  ;  TH2 (const char *name, const char *title, Int_t nbinsx, Double_t xlow, Double_t xup, Int_t nbinsy, Double_t ylow, Double_t yup);  Constructor for fix bin size 2-D histograms. ;  ; virtual Int_t BufferFill (Double_t x, Double_t y, Double_t w);  accumulate arguments in buffer. ;  ; Int_t BufferFill (Double_t, Double_t) override;  accumulate arguments in buffer. ;  ; virtual void DoFitSlices (bool onX, TF1 *f1, Int_t firstbin, Int_t lastbin, Int_t cut, Option_t *option, TObjArray *arr);  ; virtual TProfile * DoProfile (bool onX, const char *name, Int_t firstbin, Int_t lastbin, Option_t *option) const;  ; virtual TH1D * DoProjection (bool onX, const char *name, Int_t firstbin, Int_t lastbin, Option_t *option) const;  Internal (protected) method for performing projection on the X or Y axis called by ProjectionX or ProjectionY. ;  ; virtual TH1D * DoQuantiles (bool onX, const char *name, Double_t prob) const;  Implementation of quantiles for x or y. ;  ; Int_t Fill (const char *, Double_t) override;  Increment bin with namex with a weight w. ;  ; Int_t Fill (Double_t) override;  Invalid Fill method. ;  ; Double_t Interpolate (Double_t x) const override;  illegal for a TH2 ;  ;  Protected Member Functions inherited from TH1;  TH1 ();  Histogram default constructor. ;  ;  TH1 (const char *name, const char *title, Int_t nbinsx, const Double_t *xbins);  Constructor for variable bin size histograms using an input array of type double. ;  ;  TH1 (const char *name, const char *title, Int_t nbinsx, const Float_t *xbins);  Constructor for variable bin size histograms using an input arr",MatchSource.WIKI,doc/master/classTH2F.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH2F.html
Security,hash,hash,"m of squares of weights. ;  ; void UseCurrentStyle () override;  Copy current attributes from/to current style. ;  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; TClass * IsA () const override;  ; Bool_t IsSortable () const override;  ; void ls (Option_t *option="""") const override;  List TNamed name and title. ;  ; TNamed & operator= (const TNamed &rhs);  TNamed assignment operator. ;  ; void Print (Option_t *option="""") const override;  Print TNamed name and title. ;  ; virtual Int_t Sizeof () const;  Return size of the TNamed part of the TObject. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to c",MatchSource.WIKI,doc/master/classTH2F.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH2F.html
Testability,test,test,"range [firstxbin,lastxbin],[firstybin,lastybin] for a 2-D histogram By default the integral is computed as the sum of bin contents in the range. ;  ; virtual Double_t Integral (Int_t, Int_t, Int_t, Int_t, Int_t, Int_t, Option_t *="""") const;  ; Double_t Integral (Option_t *option="""") const override;  Return integral of bin contents. ;  ; virtual Double_t IntegralAndError (Int_t binx1, Int_t binx2, Int_t biny1, Int_t biny2, Double_t &err, Option_t *option="""") const;  Return integral of bin contents in range [firstxbin,lastxbin],[firstybin,lastybin] for a 2-D histogram. ;  ; Double_t Interpolate (Double_t x, Double_t y) const override;  Given a point P(x,y), Interpolate approximates the value via bilinear interpolation based on the four nearest bin centers see Wikipedia, Bilinear Interpolation Andy Mastbaum 10/8/2008 vaguely based on R.Raja 6-Sep-2008. ;  ; Double_t Interpolate (Double_t x, Double_t y, Double_t z) const override;  illegal for a TH2 ;  ; Double_t KolmogorovTest (const TH1 *h2, Option_t *option="""") const override;  Statistical test of compatibility in shape between THIS histogram and h2, using Kolmogorov test. ;  ; TProfile * ProfileX (const char *name=""_pfx"", Int_t firstybin=1, Int_t lastybin=-1, Option_t *option="""") const;  Project a 2-D histogram into a profile histogram along X. ;  ; TProfile * ProfileY (const char *name=""_pfy"", Int_t firstxbin=1, Int_t lastxbin=-1, Option_t *option="""") const;  Project a 2-D histogram into a profile histogram along Y. ;  ; TH1D * ProjectionX (const char *name=""_px"", Int_t firstybin=0, Int_t lastybin=-1, Option_t *option="""") const;  Project a 2-D histogram into a 1-D histogram along X. ;  ; TH1D * ProjectionY (const char *name=""_py"", Int_t firstxbin=0, Int_t lastxbin=-1, Option_t *option="""") const;  Project a 2-D histogram into a 1-D histogram along Y. ;  ; void PutStats (Double_t *stats) override;  Replace current statistics with the values in array stats. ;  ; TH1D * QuantilesX (Double_t prob=0.5, const char *name=""",MatchSource.WIKI,doc/master/classTH2F.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH2F.html
Usability,clear,cleared,"ject. ;  ; virtual Bool_t CanExtendAllAxes () const;  Returns true if all axes are extendable. ;  ; virtual Double_t Chi2Test (const TH1 *h2, Option_t *option=""UU"", Double_t *res=nullptr) const;  \( \chi^{2} \) test for comparing weighted and unweighted histograms. ;  ; virtual Double_t Chi2TestX (const TH1 *h2, Double_t &chi2, Int_t &ndf, Int_t &igood, Option_t *option=""UU"", Double_t *res=nullptr) const;  The computation routine of the Chisquare test. ;  ; virtual Double_t Chisquare (TF1 *f1, Option_t *option="""") const;  Compute and return the chisquare of this histogram with respect to a function The chisquare is computed by weighting each histogram point by the bin error By default the full range of the histogram is used. ;  ; virtual void ClearUnderflowAndOverflow ();  Remove all the content from the underflow and overflow bins, without changing the number of entries After calling this method, every undeflow and overflow bins will have content 0.0 The Sumw2 is also cleared, since there is no more content in the bins. ;  ; TObject * Clone (const char *newname="""") const override;  Make a complete copy of the underlying object. ;  ; virtual Double_t ComputeIntegral (Bool_t onlyPositive=false);  Compute integral (normalized cumulative sum of bins) w/o under/overflows The result is stored in fIntegral and used by the GetRandom functions. ;  ; virtual void DirectoryAutoAdd (TDirectory *);  Perform the automatic addition of the histogram to the given directory. ;  ; Int_t DistancetoPrimitive (Int_t px, Int_t py) override;  Compute distance from point px,py to a line. ;  ; virtual Bool_t Divide (const TH1 *h1);  Divide this histogram by h1. ;  ; virtual Bool_t Divide (const TH1 *h1, const TH1 *h2, Double_t c1=1, Double_t c2=1, Option_t *option="""");  Replace contents of this histogram by the division of h1 by h2. ;  ; virtual Bool_t Divide (TF1 *f1, Double_t c1=1);  Performs the operation: this = this/(c1*f1) if errors are defined (see TH1::Sumw2), errors are also recalc",MatchSource.WIKI,doc/master/classTH2F.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH2F.html
Availability,error,errors," *name, const char *title, Int_t nbinsx, Double_t xlow, Double_t xup, Int_t nbinsy, const Double_t *ybins);  Constructor (see TH2::TH2 for explanation of parameters) ;  ;  TH2I (const char *name, const char *title, Int_t nbinsx, Double_t xlow, Double_t xup, Int_t nbinsy, Double_t ylow, Double_t yup);  Constructor (see TH2::TH2 for explanation of parameters) ;  ;  TH2I (const TH2I &h2i);  Copy constructor. ;  ;  ~TH2I () override;  Destructor. ;  ; void AddBinContent (Int_t bin) override;  Increment bin content by 1. ;  ; void AddBinContent (Int_t bin, Double_t w) override;  Increment bin content by w. ;  ; void AddBinContent (Int_t binx, Int_t biny) override;  Increment 2D bin content by 1. ;  ; void AddBinContent (Int_t binx, Int_t biny, Double_t w) override;  Increment 2D bin content by a weight w. ;  ; void Copy (TObject &hnew) const override;  Copy. ;  ; TClass * IsA () const override;  ; TH2I & operator= (const TH2I &h1);  Operator =. ;  ; void Reset (Option_t *option="""") override;  Reset this histogram: contents, errors, etc. ;  ; void SetBinsLength (Int_t n=-1) override;  Set total number of bins including under/overflow Reallocate bin contents array. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TH2. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TH2;  ~TH2 () override;  Destructor. ;  ; Int_t BufferEmpty (Int_t action=0) override;  Fill histogram with all entries in the buffer. ;  ; virtual Int_t Fill (const char *namex, const char *namey, Double_t w);  Increment cell defined by namex,namey by a weight w. ;  ; virtual Int_t Fill (const char *namex, Double_t y, Double_t w);  Increment cell defined by namex,y by a weight w. ;  ; virtual Int_t Fill (Double_t x, const char *namey, Double_t w);  Increment cell defined by x,namey by a weight w. ;  ; Int_t Fill (Double_t x, Double_t y) override;  Increment cell defined by x,y by 1. ;  ; virtual Int_t Fill (Double_t x, Double_t y, ",MatchSource.WIKI,doc/master/classTH2I.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH2I.html
Deployability,update,update," Internal helper function that returns the corresponding marker style with line width 1 for the given style. ;  ;  Static Public Member Functions inherited from TArrayI; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TArray; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static TArray * ReadArray (TBuffer &b, const TClass *clReq);  Read TArray object from buffer. ;  ; static void WriteArray (TBuffer &b, const TArray *a);  Write TArray object to buffer. ;  . Protected Member Functions; Double_t RetrieveBinContent (Int_t bin) const override;  Raw retrieval of bin content on internal data structure see convention for numbering bins in TH1::GetBin. ;  ; void UpdateBinContent (Int_t bin, Double_t content) override;  Raw update of bin content on internal data structure see convention for numbering bins in TH1::GetBin. ;  ;  Protected Member Functions inherited from TH2;  TH2 ();  2-D histogram default constructor. ;  ;  TH2 (const char *name, const char *title, Int_t nbinsx, const Double_t *xbins, Int_t nbinsy, const Double_t *ybins);  Constructor for Double_t variable bin size 2-D histograms. ;  ;  TH2 (const char *name, const char *title, Int_t nbinsx, const Double_t *xbins, Int_t nbinsy, Double_t ylow, Double_t yup);  Constructor for variable bin size (along X axis) 2-D histograms using an input array of type double. ;  ;  TH2 (const char *name, const char *title, Int_t nbinsx, const Float_t *xbins, Int_t nbinsy, const Float_t *ybins);  Constructor for variable bin size (along X and Y axis) 2-D histograms using input arrays of type float. ;  ;  TH2 (const char *name, const char *title, Int_t nbinsx, Double_t xlow, Double_t xup, Int_t nbinsy, const Double_t *ybins);  Constructor for Double_t variable bin size (al",MatchSource.WIKI,doc/master/classTH2I.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH2I.html
Energy Efficiency,power,power," ProjectionY. ;  ; virtual TH1D * DoQuantiles (bool onX, const char *name, Double_t prob) const;  Implementation of quantiles for x or y. ;  ; Int_t Fill (const char *, Double_t) override;  Increment bin with namex with a weight w. ;  ; Int_t Fill (Double_t) override;  Invalid Fill method. ;  ; Double_t Interpolate (Double_t x) const override;  illegal for a TH2 ;  ;  Protected Member Functions inherited from TH1;  TH1 ();  Histogram default constructor. ;  ;  TH1 (const char *name, const char *title, Int_t nbinsx, const Double_t *xbins);  Constructor for variable bin size histograms using an input array of type double. ;  ;  TH1 (const char *name, const char *title, Int_t nbinsx, const Float_t *xbins);  Constructor for variable bin size histograms using an input array of type float. ;  ;  TH1 (const char *name, const char *title, Int_t nbinsx, Double_t xlow, Double_t xup);  Constructor for fix bin size histograms. ;  ; virtual Int_t AutoP2FindLimits (Double_t min, Double_t max);  Buffer-based estimate of the histogram range using the power of 2 algorithm. ;  ; Int_t AxisChoice (Option_t *axis) const;  Choose an axis according to ""axis"". ;  ; virtual void DoFillN (Int_t ntimes, const Double_t *x, const Double_t *w, Int_t stride=1);  Internal method to fill histogram content from a vector called directly by TH1::BufferEmpty. ;  ; virtual Double_t DoIntegral (Int_t ix1, Int_t ix2, Int_t iy1, Int_t iy2, Int_t iz1, Int_t iz2, Double_t &err, Option_t *opt, Bool_t doerr=kFALSE) const;  Internal function compute integral and optionally the error between the limits specified by the bin number values working for all histograms (1D, 2D and 3D) ;  ; virtual Bool_t FindNewAxisLimits (const TAxis *axis, const Double_t point, Double_t &newMin, Double_t &newMax);  finds new limits for the axis so that point is within the range and the limits are compatible with the previous ones (see TH1::Merge). ;  ; UInt_t GetAxisLabelStatus () const;  Internal function used in TH1::Fill to see ",MatchSource.WIKI,doc/master/classTH2I.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH2I.html
Integrability,rout,routine,"), errors are also recalculated. ;  ; virtual Bool_t Add (TF1 *h1, Double_t c1=1, Option_t *option="""");  Performs the operation: this = this + c1*f1 if errors are defined (see TH1::Sumw2), errors are also recalculated. ;  ; virtual Double_t AndersonDarlingTest (const TH1 *h2, Double_t &advalue) const;  Same function as above but returning also the test statistic value. ;  ; virtual Double_t AndersonDarlingTest (const TH1 *h2, Option_t *option="""") const;  Statistical test of compatibility in shape between this histogram and h2, using the Anderson-Darling 2 sample test. ;  ; void Browse (TBrowser *b) override;  Browse the Histogram object. ;  ; virtual Bool_t CanExtendAllAxes () const;  Returns true if all axes are extendable. ;  ; virtual Double_t Chi2Test (const TH1 *h2, Option_t *option=""UU"", Double_t *res=nullptr) const;  \( \chi^{2} \) test for comparing weighted and unweighted histograms. ;  ; virtual Double_t Chi2TestX (const TH1 *h2, Double_t &chi2, Int_t &ndf, Int_t &igood, Option_t *option=""UU"", Double_t *res=nullptr) const;  The computation routine of the Chisquare test. ;  ; virtual Double_t Chisquare (TF1 *f1, Option_t *option="""") const;  Compute and return the chisquare of this histogram with respect to a function The chisquare is computed by weighting each histogram point by the bin error By default the full range of the histogram is used. ;  ; virtual void ClearUnderflowAndOverflow ();  Remove all the content from the underflow and overflow bins, without changing the number of entries After calling this method, every undeflow and overflow bins will have content 0.0 The Sumw2 is also cleared, since there is no more content in the bins. ;  ; TObject * Clone (const char *newname="""") const override;  Make a complete copy of the underlying object. ;  ; virtual Double_t ComputeIntegral (Bool_t onlyPositive=false);  Compute integral (normalized cumulative sum of bins) w/o under/overflows The result is stored in fIntegral and used by the GetRandom functions. ; ",MatchSource.WIKI,doc/master/classTH2I.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH2I.html
Modifiability,inherit,inherited,"2::TH2 for explanation of parameters) ;  ;  TH2I (const TH2I &h2i);  Copy constructor. ;  ;  ~TH2I () override;  Destructor. ;  ; void AddBinContent (Int_t bin) override;  Increment bin content by 1. ;  ; void AddBinContent (Int_t bin, Double_t w) override;  Increment bin content by w. ;  ; void AddBinContent (Int_t binx, Int_t biny) override;  Increment 2D bin content by 1. ;  ; void AddBinContent (Int_t binx, Int_t biny, Double_t w) override;  Increment 2D bin content by a weight w. ;  ; void Copy (TObject &hnew) const override;  Copy. ;  ; TClass * IsA () const override;  ; TH2I & operator= (const TH2I &h1);  Operator =. ;  ; void Reset (Option_t *option="""") override;  Reset this histogram: contents, errors, etc. ;  ; void SetBinsLength (Int_t n=-1) override;  Set total number of bins including under/overflow Reallocate bin contents array. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TH2. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TH2;  ~TH2 () override;  Destructor. ;  ; Int_t BufferEmpty (Int_t action=0) override;  Fill histogram with all entries in the buffer. ;  ; virtual Int_t Fill (const char *namex, const char *namey, Double_t w);  Increment cell defined by namex,namey by a weight w. ;  ; virtual Int_t Fill (const char *namex, Double_t y, Double_t w);  Increment cell defined by namex,y by a weight w. ;  ; virtual Int_t Fill (Double_t x, const char *namey, Double_t w);  Increment cell defined by x,namey by a weight w. ;  ; Int_t Fill (Double_t x, Double_t y) override;  Increment cell defined by x,y by 1. ;  ; virtual Int_t Fill (Double_t x, Double_t y, Double_t w);  Increment cell defined by x,y by a weight w. ;  ; void FillN (Int_t ntimes, const Double_t *x, const Double_t *y, const Double_t *w, Int_t stride=1) override;  Fill a 2-D histogram with an array of values and weights. ;  ; void FillN (Int_t, const Double_t *, const Double_t *, Int_t) override;  Fill this his",MatchSource.WIKI,doc/master/classTH2I.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH2I.html
Performance,perform,performing,"t char *title, Int_t nbinsx, const Float_t *xbins, Int_t nbinsy, const Float_t *ybins);  Constructor for variable bin size (along X and Y axis) 2-D histograms using input arrays of type float. ;  ;  TH2 (const char *name, const char *title, Int_t nbinsx, Double_t xlow, Double_t xup, Int_t nbinsy, const Double_t *ybins);  Constructor for Double_t variable bin size (along Y axis) 2-D histograms. ;  ;  TH2 (const char *name, const char *title, Int_t nbinsx, Double_t xlow, Double_t xup, Int_t nbinsy, Double_t ylow, Double_t yup);  Constructor for fix bin size 2-D histograms. ;  ; virtual Int_t BufferFill (Double_t x, Double_t y, Double_t w);  accumulate arguments in buffer. ;  ; Int_t BufferFill (Double_t, Double_t) override;  accumulate arguments in buffer. ;  ; virtual void DoFitSlices (bool onX, TF1 *f1, Int_t firstbin, Int_t lastbin, Int_t cut, Option_t *option, TObjArray *arr);  ; virtual TProfile * DoProfile (bool onX, const char *name, Int_t firstbin, Int_t lastbin, Option_t *option) const;  ; virtual TH1D * DoProjection (bool onX, const char *name, Int_t firstbin, Int_t lastbin, Option_t *option) const;  Internal (protected) method for performing projection on the X or Y axis called by ProjectionX or ProjectionY. ;  ; virtual TH1D * DoQuantiles (bool onX, const char *name, Double_t prob) const;  Implementation of quantiles for x or y. ;  ; Int_t Fill (const char *, Double_t) override;  Increment bin with namex with a weight w. ;  ; Int_t Fill (Double_t) override;  Invalid Fill method. ;  ; Double_t Interpolate (Double_t x) const override;  illegal for a TH2 ;  ;  Protected Member Functions inherited from TH1;  TH1 ();  Histogram default constructor. ;  ;  TH1 (const char *name, const char *title, Int_t nbinsx, const Double_t *xbins);  Constructor for variable bin size histograms using an input array of type double. ;  ;  TH1 (const char *name, const char *title, Int_t nbinsx, const Float_t *xbins);  Constructor for variable bin size histograms using an input arr",MatchSource.WIKI,doc/master/classTH2I.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH2I.html
Security,hash,hash,"m of squares of weights. ;  ; void UseCurrentStyle () override;  Copy current attributes from/to current style. ;  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; TClass * IsA () const override;  ; Bool_t IsSortable () const override;  ; void ls (Option_t *option="""") const override;  List TNamed name and title. ;  ; TNamed & operator= (const TNamed &rhs);  TNamed assignment operator. ;  ; void Print (Option_t *option="""") const override;  Print TNamed name and title. ;  ; virtual Int_t Sizeof () const;  Return size of the TNamed part of the TObject. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to c",MatchSource.WIKI,doc/master/classTH2I.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH2I.html
Testability,test,test,"range [firstxbin,lastxbin],[firstybin,lastybin] for a 2-D histogram By default the integral is computed as the sum of bin contents in the range. ;  ; virtual Double_t Integral (Int_t, Int_t, Int_t, Int_t, Int_t, Int_t, Option_t *="""") const;  ; Double_t Integral (Option_t *option="""") const override;  Return integral of bin contents. ;  ; virtual Double_t IntegralAndError (Int_t binx1, Int_t binx2, Int_t biny1, Int_t biny2, Double_t &err, Option_t *option="""") const;  Return integral of bin contents in range [firstxbin,lastxbin],[firstybin,lastybin] for a 2-D histogram. ;  ; Double_t Interpolate (Double_t x, Double_t y) const override;  Given a point P(x,y), Interpolate approximates the value via bilinear interpolation based on the four nearest bin centers see Wikipedia, Bilinear Interpolation Andy Mastbaum 10/8/2008 vaguely based on R.Raja 6-Sep-2008. ;  ; Double_t Interpolate (Double_t x, Double_t y, Double_t z) const override;  illegal for a TH2 ;  ; Double_t KolmogorovTest (const TH1 *h2, Option_t *option="""") const override;  Statistical test of compatibility in shape between THIS histogram and h2, using Kolmogorov test. ;  ; TProfile * ProfileX (const char *name=""_pfx"", Int_t firstybin=1, Int_t lastybin=-1, Option_t *option="""") const;  Project a 2-D histogram into a profile histogram along X. ;  ; TProfile * ProfileY (const char *name=""_pfy"", Int_t firstxbin=1, Int_t lastxbin=-1, Option_t *option="""") const;  Project a 2-D histogram into a profile histogram along Y. ;  ; TH1D * ProjectionX (const char *name=""_px"", Int_t firstybin=0, Int_t lastybin=-1, Option_t *option="""") const;  Project a 2-D histogram into a 1-D histogram along X. ;  ; TH1D * ProjectionY (const char *name=""_py"", Int_t firstxbin=0, Int_t lastxbin=-1, Option_t *option="""") const;  Project a 2-D histogram into a 1-D histogram along Y. ;  ; void PutStats (Double_t *stats) override;  Replace current statistics with the values in array stats. ;  ; TH1D * QuantilesX (Double_t prob=0.5, const char *name=""",MatchSource.WIKI,doc/master/classTH2I.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH2I.html
Usability,clear,cleared,"ject. ;  ; virtual Bool_t CanExtendAllAxes () const;  Returns true if all axes are extendable. ;  ; virtual Double_t Chi2Test (const TH1 *h2, Option_t *option=""UU"", Double_t *res=nullptr) const;  \( \chi^{2} \) test for comparing weighted and unweighted histograms. ;  ; virtual Double_t Chi2TestX (const TH1 *h2, Double_t &chi2, Int_t &ndf, Int_t &igood, Option_t *option=""UU"", Double_t *res=nullptr) const;  The computation routine of the Chisquare test. ;  ; virtual Double_t Chisquare (TF1 *f1, Option_t *option="""") const;  Compute and return the chisquare of this histogram with respect to a function The chisquare is computed by weighting each histogram point by the bin error By default the full range of the histogram is used. ;  ; virtual void ClearUnderflowAndOverflow ();  Remove all the content from the underflow and overflow bins, without changing the number of entries After calling this method, every undeflow and overflow bins will have content 0.0 The Sumw2 is also cleared, since there is no more content in the bins. ;  ; TObject * Clone (const char *newname="""") const override;  Make a complete copy of the underlying object. ;  ; virtual Double_t ComputeIntegral (Bool_t onlyPositive=false);  Compute integral (normalized cumulative sum of bins) w/o under/overflows The result is stored in fIntegral and used by the GetRandom functions. ;  ; virtual void DirectoryAutoAdd (TDirectory *);  Perform the automatic addition of the histogram to the given directory. ;  ; Int_t DistancetoPrimitive (Int_t px, Int_t py) override;  Compute distance from point px,py to a line. ;  ; virtual Bool_t Divide (const TH1 *h1);  Divide this histogram by h1. ;  ; virtual Bool_t Divide (const TH1 *h1, const TH1 *h2, Double_t c1=1, Double_t c2=1, Option_t *option="""");  Replace contents of this histogram by the division of h1 by h2. ;  ; virtual Bool_t Divide (TF1 *f1, Double_t c1=1);  Performs the operation: this = this/(c1*f1) if errors are defined (see TH1::Sumw2), errors are also recalc",MatchSource.WIKI,doc/master/classTH2I.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH2I.html
Availability,error,errors," *name, const char *title, Int_t nbinsx, Double_t xlow, Double_t xup, Int_t nbinsy, const Double_t *ybins);  Constructor (see TH2::TH2 for explanation of parameters) ;  ;  TH2L (const char *name, const char *title, Int_t nbinsx, Double_t xlow, Double_t xup, Int_t nbinsy, Double_t ylow, Double_t yup);  Constructor (see TH2::TH2 for explanation of parameters) ;  ;  TH2L (const TH2L &h2l);  Copy constructor. ;  ;  ~TH2L () override;  Destructor. ;  ; void AddBinContent (Int_t bin) override;  Increment bin content by 1. ;  ; void AddBinContent (Int_t bin, Double_t w) override;  Increment bin content by w. ;  ; void AddBinContent (Int_t binx, Int_t biny) override;  Increment 2D bin content by 1. ;  ; void AddBinContent (Int_t binx, Int_t biny, Double_t w) override;  Increment 2D bin content by a weight w. ;  ; void Copy (TObject &hnew) const override;  Copy. ;  ; TClass * IsA () const override;  ; TH2L & operator= (const TH2L &h1);  Operator =. ;  ; void Reset (Option_t *option="""") override;  Reset this histogram: contents, errors, etc. ;  ; void SetBinsLength (Int_t n=-1) override;  Set total number of bins including under/overflow Reallocate bin contents array. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TH2. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TH2;  ~TH2 () override;  Destructor. ;  ; Int_t BufferEmpty (Int_t action=0) override;  Fill histogram with all entries in the buffer. ;  ; virtual Int_t Fill (const char *namex, const char *namey, Double_t w);  Increment cell defined by namex,namey by a weight w. ;  ; virtual Int_t Fill (const char *namex, Double_t y, Double_t w);  Increment cell defined by namex,y by a weight w. ;  ; virtual Int_t Fill (Double_t x, const char *namey, Double_t w);  Increment cell defined by x,namey by a weight w. ;  ; Int_t Fill (Double_t x, Double_t y) override;  Increment cell defined by x,y by 1. ;  ; virtual Int_t Fill (Double_t x, Double_t y, ",MatchSource.WIKI,doc/master/classTH2L.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH2L.html
Deployability,update,update,"nternal helper function that returns the corresponding marker style with line width 1 for the given style. ;  ;  Static Public Member Functions inherited from TArrayL64; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TArray; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static TArray * ReadArray (TBuffer &b, const TClass *clReq);  Read TArray object from buffer. ;  ; static void WriteArray (TBuffer &b, const TArray *a);  Write TArray object to buffer. ;  . Protected Member Functions; Double_t RetrieveBinContent (Int_t bin) const override;  Raw retrieval of bin content on internal data structure see convention for numbering bins in TH1::GetBin. ;  ; void UpdateBinContent (Int_t bin, Double_t content) override;  Raw update of bin content on internal data structure see convention for numbering bins in TH1::GetBin. ;  ;  Protected Member Functions inherited from TH2;  TH2 ();  2-D histogram default constructor. ;  ;  TH2 (const char *name, const char *title, Int_t nbinsx, const Double_t *xbins, Int_t nbinsy, const Double_t *ybins);  Constructor for Double_t variable bin size 2-D histograms. ;  ;  TH2 (const char *name, const char *title, Int_t nbinsx, const Double_t *xbins, Int_t nbinsy, Double_t ylow, Double_t yup);  Constructor for variable bin size (along X axis) 2-D histograms using an input array of type double. ;  ;  TH2 (const char *name, const char *title, Int_t nbinsx, const Float_t *xbins, Int_t nbinsy, const Float_t *ybins);  Constructor for variable bin size (along X and Y axis) 2-D histograms using input arrays of type float. ;  ;  TH2 (const char *name, const char *title, Int_t nbinsx, Double_t xlow, Double_t xup, Int_t nbinsy, const Double_t *ybins);  Constructor for Double_t variable bin size (al",MatchSource.WIKI,doc/master/classTH2L.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH2L.html
Energy Efficiency,power,power," ProjectionY. ;  ; virtual TH1D * DoQuantiles (bool onX, const char *name, Double_t prob) const;  Implementation of quantiles for x or y. ;  ; Int_t Fill (const char *, Double_t) override;  Increment bin with namex with a weight w. ;  ; Int_t Fill (Double_t) override;  Invalid Fill method. ;  ; Double_t Interpolate (Double_t x) const override;  illegal for a TH2 ;  ;  Protected Member Functions inherited from TH1;  TH1 ();  Histogram default constructor. ;  ;  TH1 (const char *name, const char *title, Int_t nbinsx, const Double_t *xbins);  Constructor for variable bin size histograms using an input array of type double. ;  ;  TH1 (const char *name, const char *title, Int_t nbinsx, const Float_t *xbins);  Constructor for variable bin size histograms using an input array of type float. ;  ;  TH1 (const char *name, const char *title, Int_t nbinsx, Double_t xlow, Double_t xup);  Constructor for fix bin size histograms. ;  ; virtual Int_t AutoP2FindLimits (Double_t min, Double_t max);  Buffer-based estimate of the histogram range using the power of 2 algorithm. ;  ; Int_t AxisChoice (Option_t *axis) const;  Choose an axis according to ""axis"". ;  ; virtual void DoFillN (Int_t ntimes, const Double_t *x, const Double_t *w, Int_t stride=1);  Internal method to fill histogram content from a vector called directly by TH1::BufferEmpty. ;  ; virtual Double_t DoIntegral (Int_t ix1, Int_t ix2, Int_t iy1, Int_t iy2, Int_t iz1, Int_t iz2, Double_t &err, Option_t *opt, Bool_t doerr=kFALSE) const;  Internal function compute integral and optionally the error between the limits specified by the bin number values working for all histograms (1D, 2D and 3D) ;  ; virtual Bool_t FindNewAxisLimits (const TAxis *axis, const Double_t point, Double_t &newMin, Double_t &newMax);  finds new limits for the axis so that point is within the range and the limits are compatible with the previous ones (see TH1::Merge). ;  ; UInt_t GetAxisLabelStatus () const;  Internal function used in TH1::Fill to see ",MatchSource.WIKI,doc/master/classTH2L.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH2L.html
Integrability,rout,routine,"), errors are also recalculated. ;  ; virtual Bool_t Add (TF1 *h1, Double_t c1=1, Option_t *option="""");  Performs the operation: this = this + c1*f1 if errors are defined (see TH1::Sumw2), errors are also recalculated. ;  ; virtual Double_t AndersonDarlingTest (const TH1 *h2, Double_t &advalue) const;  Same function as above but returning also the test statistic value. ;  ; virtual Double_t AndersonDarlingTest (const TH1 *h2, Option_t *option="""") const;  Statistical test of compatibility in shape between this histogram and h2, using the Anderson-Darling 2 sample test. ;  ; void Browse (TBrowser *b) override;  Browse the Histogram object. ;  ; virtual Bool_t CanExtendAllAxes () const;  Returns true if all axes are extendable. ;  ; virtual Double_t Chi2Test (const TH1 *h2, Option_t *option=""UU"", Double_t *res=nullptr) const;  \( \chi^{2} \) test for comparing weighted and unweighted histograms. ;  ; virtual Double_t Chi2TestX (const TH1 *h2, Double_t &chi2, Int_t &ndf, Int_t &igood, Option_t *option=""UU"", Double_t *res=nullptr) const;  The computation routine of the Chisquare test. ;  ; virtual Double_t Chisquare (TF1 *f1, Option_t *option="""") const;  Compute and return the chisquare of this histogram with respect to a function The chisquare is computed by weighting each histogram point by the bin error By default the full range of the histogram is used. ;  ; virtual void ClearUnderflowAndOverflow ();  Remove all the content from the underflow and overflow bins, without changing the number of entries After calling this method, every undeflow and overflow bins will have content 0.0 The Sumw2 is also cleared, since there is no more content in the bins. ;  ; TObject * Clone (const char *newname="""") const override;  Make a complete copy of the underlying object. ;  ; virtual Double_t ComputeIntegral (Bool_t onlyPositive=false);  Compute integral (normalized cumulative sum of bins) w/o under/overflows The result is stored in fIntegral and used by the GetRandom functions. ; ",MatchSource.WIKI,doc/master/classTH2L.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH2L.html
Modifiability,inherit,inherited,"2::TH2 for explanation of parameters) ;  ;  TH2L (const TH2L &h2l);  Copy constructor. ;  ;  ~TH2L () override;  Destructor. ;  ; void AddBinContent (Int_t bin) override;  Increment bin content by 1. ;  ; void AddBinContent (Int_t bin, Double_t w) override;  Increment bin content by w. ;  ; void AddBinContent (Int_t binx, Int_t biny) override;  Increment 2D bin content by 1. ;  ; void AddBinContent (Int_t binx, Int_t biny, Double_t w) override;  Increment 2D bin content by a weight w. ;  ; void Copy (TObject &hnew) const override;  Copy. ;  ; TClass * IsA () const override;  ; TH2L & operator= (const TH2L &h1);  Operator =. ;  ; void Reset (Option_t *option="""") override;  Reset this histogram: contents, errors, etc. ;  ; void SetBinsLength (Int_t n=-1) override;  Set total number of bins including under/overflow Reallocate bin contents array. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TH2. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TH2;  ~TH2 () override;  Destructor. ;  ; Int_t BufferEmpty (Int_t action=0) override;  Fill histogram with all entries in the buffer. ;  ; virtual Int_t Fill (const char *namex, const char *namey, Double_t w);  Increment cell defined by namex,namey by a weight w. ;  ; virtual Int_t Fill (const char *namex, Double_t y, Double_t w);  Increment cell defined by namex,y by a weight w. ;  ; virtual Int_t Fill (Double_t x, const char *namey, Double_t w);  Increment cell defined by x,namey by a weight w. ;  ; Int_t Fill (Double_t x, Double_t y) override;  Increment cell defined by x,y by 1. ;  ; virtual Int_t Fill (Double_t x, Double_t y, Double_t w);  Increment cell defined by x,y by a weight w. ;  ; void FillN (Int_t ntimes, const Double_t *x, const Double_t *y, const Double_t *w, Int_t stride=1) override;  Fill a 2-D histogram with an array of values and weights. ;  ; void FillN (Int_t, const Double_t *, const Double_t *, Int_t) override;  Fill this his",MatchSource.WIKI,doc/master/classTH2L.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH2L.html
Performance,perform,performing,"t char *title, Int_t nbinsx, const Float_t *xbins, Int_t nbinsy, const Float_t *ybins);  Constructor for variable bin size (along X and Y axis) 2-D histograms using input arrays of type float. ;  ;  TH2 (const char *name, const char *title, Int_t nbinsx, Double_t xlow, Double_t xup, Int_t nbinsy, const Double_t *ybins);  Constructor for Double_t variable bin size (along Y axis) 2-D histograms. ;  ;  TH2 (const char *name, const char *title, Int_t nbinsx, Double_t xlow, Double_t xup, Int_t nbinsy, Double_t ylow, Double_t yup);  Constructor for fix bin size 2-D histograms. ;  ; virtual Int_t BufferFill (Double_t x, Double_t y, Double_t w);  accumulate arguments in buffer. ;  ; Int_t BufferFill (Double_t, Double_t) override;  accumulate arguments in buffer. ;  ; virtual void DoFitSlices (bool onX, TF1 *f1, Int_t firstbin, Int_t lastbin, Int_t cut, Option_t *option, TObjArray *arr);  ; virtual TProfile * DoProfile (bool onX, const char *name, Int_t firstbin, Int_t lastbin, Option_t *option) const;  ; virtual TH1D * DoProjection (bool onX, const char *name, Int_t firstbin, Int_t lastbin, Option_t *option) const;  Internal (protected) method for performing projection on the X or Y axis called by ProjectionX or ProjectionY. ;  ; virtual TH1D * DoQuantiles (bool onX, const char *name, Double_t prob) const;  Implementation of quantiles for x or y. ;  ; Int_t Fill (const char *, Double_t) override;  Increment bin with namex with a weight w. ;  ; Int_t Fill (Double_t) override;  Invalid Fill method. ;  ; Double_t Interpolate (Double_t x) const override;  illegal for a TH2 ;  ;  Protected Member Functions inherited from TH1;  TH1 ();  Histogram default constructor. ;  ;  TH1 (const char *name, const char *title, Int_t nbinsx, const Double_t *xbins);  Constructor for variable bin size histograms using an input array of type double. ;  ;  TH1 (const char *name, const char *title, Int_t nbinsx, const Float_t *xbins);  Constructor for variable bin size histograms using an input arr",MatchSource.WIKI,doc/master/classTH2L.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH2L.html
Security,hash,hash,"m of squares of weights. ;  ; void UseCurrentStyle () override;  Copy current attributes from/to current style. ;  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; TClass * IsA () const override;  ; Bool_t IsSortable () const override;  ; void ls (Option_t *option="""") const override;  List TNamed name and title. ;  ; TNamed & operator= (const TNamed &rhs);  TNamed assignment operator. ;  ; void Print (Option_t *option="""") const override;  Print TNamed name and title. ;  ; virtual Int_t Sizeof () const;  Return size of the TNamed part of the TObject. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to c",MatchSource.WIKI,doc/master/classTH2L.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH2L.html
Testability,test,test,"range [firstxbin,lastxbin],[firstybin,lastybin] for a 2-D histogram By default the integral is computed as the sum of bin contents in the range. ;  ; virtual Double_t Integral (Int_t, Int_t, Int_t, Int_t, Int_t, Int_t, Option_t *="""") const;  ; Double_t Integral (Option_t *option="""") const override;  Return integral of bin contents. ;  ; virtual Double_t IntegralAndError (Int_t binx1, Int_t binx2, Int_t biny1, Int_t biny2, Double_t &err, Option_t *option="""") const;  Return integral of bin contents in range [firstxbin,lastxbin],[firstybin,lastybin] for a 2-D histogram. ;  ; Double_t Interpolate (Double_t x, Double_t y) const override;  Given a point P(x,y), Interpolate approximates the value via bilinear interpolation based on the four nearest bin centers see Wikipedia, Bilinear Interpolation Andy Mastbaum 10/8/2008 vaguely based on R.Raja 6-Sep-2008. ;  ; Double_t Interpolate (Double_t x, Double_t y, Double_t z) const override;  illegal for a TH2 ;  ; Double_t KolmogorovTest (const TH1 *h2, Option_t *option="""") const override;  Statistical test of compatibility in shape between THIS histogram and h2, using Kolmogorov test. ;  ; TProfile * ProfileX (const char *name=""_pfx"", Int_t firstybin=1, Int_t lastybin=-1, Option_t *option="""") const;  Project a 2-D histogram into a profile histogram along X. ;  ; TProfile * ProfileY (const char *name=""_pfy"", Int_t firstxbin=1, Int_t lastxbin=-1, Option_t *option="""") const;  Project a 2-D histogram into a profile histogram along Y. ;  ; TH1D * ProjectionX (const char *name=""_px"", Int_t firstybin=0, Int_t lastybin=-1, Option_t *option="""") const;  Project a 2-D histogram into a 1-D histogram along X. ;  ; TH1D * ProjectionY (const char *name=""_py"", Int_t firstxbin=0, Int_t lastxbin=-1, Option_t *option="""") const;  Project a 2-D histogram into a 1-D histogram along Y. ;  ; void PutStats (Double_t *stats) override;  Replace current statistics with the values in array stats. ;  ; TH1D * QuantilesX (Double_t prob=0.5, const char *name=""",MatchSource.WIKI,doc/master/classTH2L.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH2L.html
Usability,clear,cleared,"ject. ;  ; virtual Bool_t CanExtendAllAxes () const;  Returns true if all axes are extendable. ;  ; virtual Double_t Chi2Test (const TH1 *h2, Option_t *option=""UU"", Double_t *res=nullptr) const;  \( \chi^{2} \) test for comparing weighted and unweighted histograms. ;  ; virtual Double_t Chi2TestX (const TH1 *h2, Double_t &chi2, Int_t &ndf, Int_t &igood, Option_t *option=""UU"", Double_t *res=nullptr) const;  The computation routine of the Chisquare test. ;  ; virtual Double_t Chisquare (TF1 *f1, Option_t *option="""") const;  Compute and return the chisquare of this histogram with respect to a function The chisquare is computed by weighting each histogram point by the bin error By default the full range of the histogram is used. ;  ; virtual void ClearUnderflowAndOverflow ();  Remove all the content from the underflow and overflow bins, without changing the number of entries After calling this method, every undeflow and overflow bins will have content 0.0 The Sumw2 is also cleared, since there is no more content in the bins. ;  ; TObject * Clone (const char *newname="""") const override;  Make a complete copy of the underlying object. ;  ; virtual Double_t ComputeIntegral (Bool_t onlyPositive=false);  Compute integral (normalized cumulative sum of bins) w/o under/overflows The result is stored in fIntegral and used by the GetRandom functions. ;  ; virtual void DirectoryAutoAdd (TDirectory *);  Perform the automatic addition of the histogram to the given directory. ;  ; Int_t DistancetoPrimitive (Int_t px, Int_t py) override;  Compute distance from point px,py to a line. ;  ; virtual Bool_t Divide (const TH1 *h1);  Divide this histogram by h1. ;  ; virtual Bool_t Divide (const TH1 *h1, const TH1 *h2, Double_t c1=1, Double_t c2=1, Option_t *option="""");  Replace contents of this histogram by the division of h1 by h2. ;  ; virtual Bool_t Divide (TF1 *f1, Double_t c1=1);  Performs the operation: this = this/(c1*f1) if errors are defined (see TH1::Sumw2), errors are also recalc",MatchSource.WIKI,doc/master/classTH2L.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH2L.html
Availability,down,down,"l rectangular regions called ""cells"". Each cell stores the pointers of the bins intersecting it. When a coordinate is to be filled, the method finds which cell the coordinate falls into. Since the cells are rectangular, this can be done very quickly. It then only loops over the bins associated with that cell and calls IsInside() only on that bins. This reduces considerably the number of bins on which IsInside() is called and therefore speed up by a huge factor the filling compare to the brute force approach where IsInside() is called for all bins.; The addition of bins to the appropriate cells is done when the bin is added to the histogram. To do this, AddBin() calls the AddBinToPartition() method. This method adds the input bin to the partitioning matrix.; The number of partition cells per axis can be specified in the constructor. If it is not specified, the default value of 25 along each axis will be assigned. This value was chosen because it is small enough to avoid slowing down AddBin(), while being large enough to enhance Fill() by a considerable amount. Regardless of how it is initialized at construction time, it can be changed later with the ChangePartition() method. ChangePartition() deletes the old partition matrix and generates a new one with the specified number of cells on each axis.; The optimum number of partition cells per axis changes with the number of times Fill() will be called. Although partitioning greatly speeds up filling, it also adds a constant time delay into the code. When Fill() is to be called many times, it is more efficient to divide the histogram into a large number cells. However, if the histogram is to be filled only a few times, it is better to divide into a small number of cells. ; Definition at line 66 of file TH2Poly.h. Public Member Functions;  TH2Poly ();  Default Constructor. No boundaries specified. ;  ;  TH2Poly (const char *name, const char *title, Double_t xlow, Double_t xup, Double_t ylow, Double_t yup);  Constructor wit",MatchSource.WIKI,doc/master/classTH2Poly.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH2Poly.html
Deployability,update,updated,"t the specified location, is not reconsidered when that location is binned later.; If there are two overlapping bins, the first one in the list will be incremented by Fill().; The histogram may automatically extends its limits if a bin outside the histogram limits is added. This is done when the default constructor (with no arguments) is used. It generates a histogram with no limits along the X and Y axis. Adding bins to it will extend it up to a proper size.; TH2Poly implements a partitioning algorithm to speed up bins' filling (see the ""Partitioning Algorithm"" section for details). The partitioning algorithm divides the histogram into regions called cells. The bins that each cell intersects are recorded in an array of TLists. When a coordinate in the histogram is to be filled; the method (quickly) finds which cell the coordinate belongs. It then only loops over the bins intersecting that cell to find the bin the input coordinate corresponds to. The partitioning of the histogram is updated continuously as each bin is added. The default number of cells on each axis is 25. This number could be set to another value in the constructor or adjusted later by calling the ChangePartition(Int_t, Int_t) method. The partitioning algorithm is considerably faster than the brute force algorithm (i.e. checking if each bin contains the input coordinates), especially if the histogram is to be filled many times.; The following very simple macro shows how to build and fill a TH2Poly: {; auto h2p = new TH2Poly();; ; Double_t x1[] = {0, 5, 6};; Double_t y1[] = {0, 0, 5};; Double_t x2[] = {0, -1, -1, 0};; Double_t y2[] = {0, 0, -1, 3};; Double_t x3[] = {4, 3, 0, 1, 2.4};; Double_t y3[] = {4, 3.7, 1, 3.7, 2.5};; ; h2p->AddBin(3, x1, y1);; h2p->AddBin(4, x2, y2);; h2p->AddBin(5, x3, y3);; ; h2p->Fill(0.1, 0.01, 3);; h2p->Fill(-0.5, -0.5, 7);; h2p->Fill(-0.7, -0.5, 1);; h2p->Fill(1, 3, 1.5);; }; Double_tdouble Double_tDefinition RtypesCore.h:59; x2Option_t Option_t TPoint TPoint const char ",MatchSource.WIKI,doc/master/classTH2Poly.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH2Poly.html
Energy Efficiency,reduce,reduces,".C and th2polyUSA.C. Partitioning Algorithm; The partitioning algorithm forms an essential part of the TH2Poly class. It is implemented to speed up the filling of bins.; With the brute force approach, the filling is done in the following way: An iterator loops over all bins in the TH2Poly and invokes the method IsInside() for each of them. This method checks if the input location is in that bin. If the filling coordinate is inside, the bin is filled. Looping over all the bin is very slow.; The alternative is to divide the histogram into virtual rectangular regions called ""cells"". Each cell stores the pointers of the bins intersecting it. When a coordinate is to be filled, the method finds which cell the coordinate falls into. Since the cells are rectangular, this can be done very quickly. It then only loops over the bins associated with that cell and calls IsInside() only on that bins. This reduces considerably the number of bins on which IsInside() is called and therefore speed up by a huge factor the filling compare to the brute force approach where IsInside() is called for all bins.; The addition of bins to the appropriate cells is done when the bin is added to the histogram. To do this, AddBin() calls the AddBinToPartition() method. This method adds the input bin to the partitioning matrix.; The number of partition cells per axis can be specified in the constructor. If it is not specified, the default value of 25 along each axis will be assigned. This value was chosen because it is small enough to avoid slowing down AddBin(), while being large enough to enhance Fill() by a considerable amount. Regardless of how it is initialized at construction time, it can be changed later with the ChangePartition() method. ChangePartition() deletes the old partition matrix and generates a new one with the specified number of cells on each axis.; The optimum number of partition cells per axis changes with the number of times Fill() will be called. Although partitioning greatly ",MatchSource.WIKI,doc/master/classTH2Poly.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH2Poly.html
Integrability,rout,routine,"ar to the ones used in the raster graphics community. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TH1;  ~TH1 () override;  Histogram default destructor. ;  ; virtual Double_t AndersonDarlingTest (const TH1 *h2, Double_t &advalue) const;  Same function as above but returning also the test statistic value. ;  ; virtual Double_t AndersonDarlingTest (const TH1 *h2, Option_t *option="""") const;  Statistical test of compatibility in shape between this histogram and h2, using the Anderson-Darling 2 sample test. ;  ; void Browse (TBrowser *b) override;  Browse the Histogram object. ;  ; virtual Bool_t CanExtendAllAxes () const;  Returns true if all axes are extendable. ;  ; virtual Double_t Chi2Test (const TH1 *h2, Option_t *option=""UU"", Double_t *res=nullptr) const;  \( \chi^{2} \) test for comparing weighted and unweighted histograms. ;  ; virtual Double_t Chi2TestX (const TH1 *h2, Double_t &chi2, Int_t &ndf, Int_t &igood, Option_t *option=""UU"", Double_t *res=nullptr) const;  The computation routine of the Chisquare test. ;  ; virtual Double_t Chisquare (TF1 *f1, Option_t *option="""") const;  Compute and return the chisquare of this histogram with respect to a function The chisquare is computed by weighting each histogram point by the bin error By default the full range of the histogram is used. ;  ; virtual void ClearUnderflowAndOverflow ();  Remove all the content from the underflow and overflow bins, without changing the number of entries After calling this method, every undeflow and overflow bins will have content 0.0 The Sumw2 is also cleared, since there is no more content in the bins. ;  ; virtual void DirectoryAutoAdd (TDirectory *);  Perform the automatic addition of the histogram to the given directory. ;  ; Int_t DistancetoPrimitive (Int_t px, Int_t py) override;  Compute distance from point px,py to a line. ;  ; virtual Bool_t Divide (const TH1 *h1);  Divide this histogram by h1. ;  ; virtual Bool_",MatchSource.WIKI,doc/master/classTH2Poly.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH2Poly.html
Modifiability,extend,extends,"am is a TH2PolyBin object. TH2PolyBin is a very simple class containing the vertices (stored as TGraphs or TMultiGraphs ) and contents of the polygonal bin as well as several related functions.; Essentially, a TH2Poly is a TList of TH2PolyBin objects with methods to manipulate them.; Bins are defined using one of the AddBin() methods. The bin definition should be done before filling.; The histogram can be filled with Fill(Double_t x, Double_t y, Double_t w) . w is the weight. If no weight is specified, it is assumed to be 1.; Not all histogram's area need to be binned. Filling an area without bins, will falls into the overflows. Adding a bin is not retroactive; it doesn't affect previous fillings. A Fill() call, that was previously ignored due to the lack of a bin at the specified location, is not reconsidered when that location is binned later.; If there are two overlapping bins, the first one in the list will be incremented by Fill().; The histogram may automatically extends its limits if a bin outside the histogram limits is added. This is done when the default constructor (with no arguments) is used. It generates a histogram with no limits along the X and Y axis. Adding bins to it will extend it up to a proper size.; TH2Poly implements a partitioning algorithm to speed up bins' filling (see the ""Partitioning Algorithm"" section for details). The partitioning algorithm divides the histogram into regions called cells. The bins that each cell intersects are recorded in an array of TLists. When a coordinate in the histogram is to be filled; the method (quickly) finds which cell the coordinate belongs. It then only loops over the bins intersecting that cell to find the bin the input coordinate corresponds to. The partitioning of the histogram is updated continuously as each bin is added. The default number of cells on each axis is 25. This number could be set to another value in the constructor or adjusted later by calling the ChangePartition(Int_t, Int_t) method. The",MatchSource.WIKI,doc/master/classTH2Poly.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH2Poly.html
Performance,perform,performing,"t char *title, Int_t nbinsx, const Float_t *xbins, Int_t nbinsy, const Float_t *ybins);  Constructor for variable bin size (along X and Y axis) 2-D histograms using input arrays of type float. ;  ;  TH2 (const char *name, const char *title, Int_t nbinsx, Double_t xlow, Double_t xup, Int_t nbinsy, const Double_t *ybins);  Constructor for Double_t variable bin size (along Y axis) 2-D histograms. ;  ;  TH2 (const char *name, const char *title, Int_t nbinsx, Double_t xlow, Double_t xup, Int_t nbinsy, Double_t ylow, Double_t yup);  Constructor for fix bin size 2-D histograms. ;  ; virtual Int_t BufferFill (Double_t x, Double_t y, Double_t w);  accumulate arguments in buffer. ;  ; Int_t BufferFill (Double_t, Double_t) override;  accumulate arguments in buffer. ;  ; virtual void DoFitSlices (bool onX, TF1 *f1, Int_t firstbin, Int_t lastbin, Int_t cut, Option_t *option, TObjArray *arr);  ; virtual TProfile * DoProfile (bool onX, const char *name, Int_t firstbin, Int_t lastbin, Option_t *option) const;  ; virtual TH1D * DoProjection (bool onX, const char *name, Int_t firstbin, Int_t lastbin, Option_t *option) const;  Internal (protected) method for performing projection on the X or Y axis called by ProjectionX or ProjectionY. ;  ; virtual TH1D * DoQuantiles (bool onX, const char *name, Double_t prob) const;  Implementation of quantiles for x or y. ;  ;  Protected Member Functions inherited from TH1;  TH1 ();  Histogram default constructor. ;  ;  TH1 (const char *name, const char *title, Int_t nbinsx, const Double_t *xbins);  Constructor for variable bin size histograms using an input array of type double. ;  ;  TH1 (const char *name, const char *title, Int_t nbinsx, const Float_t *xbins);  Constructor for variable bin size histograms using an input array of type float. ;  ;  TH1 (const char *name, const char *title, Int_t nbinsx, Double_t xlow, Double_t xup);  Constructor for fix bin size histograms. ;  ; virtual Int_t AutoP2FindLimits (Double_t min, Double_t max);  Buffer-b",MatchSource.WIKI,doc/master/classTH2Poly.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH2Poly.html
Safety,avoid,avoid,"l rectangular regions called ""cells"". Each cell stores the pointers of the bins intersecting it. When a coordinate is to be filled, the method finds which cell the coordinate falls into. Since the cells are rectangular, this can be done very quickly. It then only loops over the bins associated with that cell and calls IsInside() only on that bins. This reduces considerably the number of bins on which IsInside() is called and therefore speed up by a huge factor the filling compare to the brute force approach where IsInside() is called for all bins.; The addition of bins to the appropriate cells is done when the bin is added to the histogram. To do this, AddBin() calls the AddBinToPartition() method. This method adds the input bin to the partitioning matrix.; The number of partition cells per axis can be specified in the constructor. If it is not specified, the default value of 25 along each axis will be assigned. This value was chosen because it is small enough to avoid slowing down AddBin(), while being large enough to enhance Fill() by a considerable amount. Regardless of how it is initialized at construction time, it can be changed later with the ChangePartition() method. ChangePartition() deletes the old partition matrix and generates a new one with the specified number of cells on each axis.; The optimum number of partition cells per axis changes with the number of times Fill() will be called. Although partitioning greatly speeds up filling, it also adds a constant time delay into the code. When Fill() is to be called many times, it is more efficient to divide the histogram into a large number cells. However, if the histogram is to be filled only a few times, it is better to divide into a small number of cells. ; Definition at line 66 of file TH2Poly.h. Public Member Functions;  TH2Poly ();  Default Constructor. No boundaries specified. ;  ;  TH2Poly (const char *name, const char *title, Double_t xlow, Double_t xup, Double_t ylow, Double_t yup);  Constructor wit",MatchSource.WIKI,doc/master/classTH2Poly.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH2Poly.html
Security,hash,hash,"m of squares of weights. ;  ; void UseCurrentStyle () override;  Copy current attributes from/to current style. ;  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; TClass * IsA () const override;  ; Bool_t IsSortable () const override;  ; void ls (Option_t *option="""") const override;  List TNamed name and title. ;  ; TNamed & operator= (const TNamed &rhs);  TNamed assignment operator. ;  ; void Print (Option_t *option="""") const override;  Print TNamed name and title. ;  ; virtual Int_t Sizeof () const;  Return size of the TNamed part of the TObject. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to c",MatchSource.WIKI,doc/master/classTH2Poly.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH2Poly.html
Testability,test,test,"etCovariance (Int_t axis1=1, Int_t axis2=2) const;  Return covariance between axis1 and axis2. ;  ; virtual void GetRandom2 (Double_t &x, Double_t &y, TRandom *rng=nullptr);  Return 2 random numbers along axis x and y distributed according to the cell-contents of this 2-D histogram. ;  ; virtual Double_t Integral (Int_t binx1, Int_t binx2, Int_t biny1, Int_t biny2, Option_t *option="""") const;  Return integral of bin contents in range [firstxbin,lastxbin],[firstybin,lastybin] for a 2-D histogram By default the integral is computed as the sum of bin contents in the range. ;  ; virtual Double_t Integral (Int_t, Int_t, Int_t, Int_t, Int_t, Int_t, Option_t *="""") const;  ; virtual Double_t IntegralAndError (Int_t binx1, Int_t binx2, Int_t biny1, Int_t biny2, Double_t &err, Option_t *option="""") const;  Return integral of bin contents in range [firstxbin,lastxbin],[firstybin,lastybin] for a 2-D histogram. ;  ; Double_t KolmogorovTest (const TH1 *h2, Option_t *option="""") const override;  Statistical test of compatibility in shape between THIS histogram and h2, using Kolmogorov test. ;  ; TProfile * ProfileX (const char *name=""_pfx"", Int_t firstybin=1, Int_t lastybin=-1, Option_t *option="""") const;  Project a 2-D histogram into a profile histogram along X. ;  ; TProfile * ProfileY (const char *name=""_pfy"", Int_t firstxbin=1, Int_t lastxbin=-1, Option_t *option="""") const;  Project a 2-D histogram into a profile histogram along Y. ;  ; TH1D * ProjectionX (const char *name=""_px"", Int_t firstybin=0, Int_t lastybin=-1, Option_t *option="""") const;  Project a 2-D histogram into a 1-D histogram along X. ;  ; TH1D * ProjectionY (const char *name=""_py"", Int_t firstxbin=0, Int_t lastxbin=-1, Option_t *option="""") const;  Project a 2-D histogram into a 1-D histogram along Y. ;  ; void PutStats (Double_t *stats) override;  Replace current statistics with the values in array stats. ;  ; TH1D * QuantilesX (Double_t prob=0.5, const char *name=""_qx"") const;  Compute the X distribution of quant",MatchSource.WIKI,doc/master/classTH2Poly.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH2Poly.html
Usability,simpl,simple,". ROOT: TH2Poly Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Types |; Protected Member Functions |; Protected Attributes |; List of all members ; TH2Poly Class ReferenceHistogram Library » Histogram classes. ; 2D Histogram with Polygonal Bins . Overview; TH2Poly is a 2D Histogram class (TH2) allowing to define polygonal bins of arbitrary shape.; Each bin in the TH2Poly histogram is a TH2PolyBin object. TH2PolyBin is a very simple class containing the vertices (stored as TGraphs or TMultiGraphs ) and contents of the polygonal bin as well as several related functions.; Essentially, a TH2Poly is a TList of TH2PolyBin objects with methods to manipulate them.; Bins are defined using one of the AddBin() methods. The bin definition should be done before filling.; The histogram can be filled with Fill(Double_t x, Double_t y, Double_t w) . w is the weight. If no weight is specified, it is assumed to be 1.; Not all histogram's area need to be binned. Filling an area without bins, will falls into the overflows. Adding a bin is not retroactive; it doesn't affect previous fillings. A Fill() call, that was previously ignored due to the lack of a bin at the specified location, is not reconsidered when that location is binned later.; If there are two overlapping bins, the first one in the list will be incremented by Fill().; The histogram may automatically extends its limits if a bin outside the histogram limits is added. This is done when the default constructor (with no arguments) is used. It generates a histogram with no limits along the X and Y axis. Adding bins to it will extend it up to a proper size.; TH2Poly implements a partitioning algorithm to speed up bins' filling (see the ""Partitioning Algorithm"" section for details). The partitioning algorithm divides the histogram into regions called cells. The bins that each cell intersec",MatchSource.WIKI,doc/master/classTH2Poly.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH2Poly.html
Availability,error,error,"object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Return",MatchSource.WIKI,doc/master/classTH2PolyBin.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH2PolyBin.html
Integrability,message,message,"object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Return",MatchSource.WIKI,doc/master/classTH2PolyBin.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH2PolyBin.html
Modifiability,inherit,inherited,"r. ;  ;  ~TH2PolyBin () override;  Destructor. ;  ; void ClearContent ();  ; void Fill (Double_t w);  ; Double_t GetArea ();  Returns the area of the bin. ;  ; Int_t GetBinNumber () const;  ; Bool_t GetChanged () const;  ; Double_t GetContent () const;  ; TObject * GetPolygon () const;  ; Double_t GetXMax ();  Returns the maximum value for the x coordinates of the bin. ;  ; Double_t GetXMin ();  Returns the minimum value for the x coordinates of the bin. ;  ; Double_t GetYMax ();  Returns the maximum value for the y coordinates of the bin. ;  ; Double_t GetYMin ();  Returns the minimum value for the y coordinates of the bin. ;  ; TClass * IsA () const override;  ; Bool_t IsInside (Double_t x, Double_t y) const;  Return ""true"" if the point (x,y) is inside the bin. ;  ; void SetChanged (Bool_t flag);  ; void SetContent (Double_t content);  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) c",MatchSource.WIKI,doc/master/classTH2PolyBin.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH2PolyBin.html
Security,hash,hash," Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Returns name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual const char * GetTitle () const;  Returns title of object. ;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; virtual ULong_t Hash () const;  Return hash value for this object. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns kTRUE if object inherits from class ""classname"". ;  ; virtual Bool_t InheritsFrom (const TClass *cl) const;  Returns kTRUE if object inherits from TClass cl. ;  ; virtual void Inspect () const;  Dump contents of this object in a graphics canvas. ;  ; void InvertBit (UInt_t f);  ; Bool_t IsDestructed () const;  IsDestructed. ;  ; virtual Bool_t IsEqual (const TObject *obj) const;  Default equal comparison (objects are equal if they have the same address in memory). ;  ; virtual Bool_t IsFolder () const;  Returns kTRUE in case object contains browsable objects (like containers or lists of other objects). ;  ; R__ALWAYS_INLINE Bool_t",MatchSource.WIKI,doc/master/classTH2PolyBin.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH2PolyBin.html
Availability,error,errors,"nsx, Double_t xlow, Double_t xup, Int_t nbinsy, const Double_t *ybins);  Constructor (see TH2::TH2 for explanation of parameters) ;  ;  TH2S (const char *name, const char *title, Int_t nbinsx, Double_t xlow, Double_t xup, Int_t nbinsy, Double_t ylow, Double_t yup);  Constructor (see TH2::TH2 for explanation of parameters) ;  ;  TH2S (const TH2S &h2s);  Copy constructor The list of functions is not copied. ;  ;  ~TH2S () override;  Destructor. ;  ; void AddBinContent (Int_t bin) override;  Increment bin content by 1. ;  ; void AddBinContent (Int_t bin, Double_t w) override;  Increment bin content by w. ;  ; void AddBinContent (Int_t binx, Int_t biny) override;  Increment 2D bin content by 1. ;  ; void AddBinContent (Int_t binx, Int_t biny, Double_t w) override;  Increment 2D bin content by a weight w. ;  ; void Copy (TObject &hnew) const override;  Copy. ;  ; TClass * IsA () const override;  ; TH2S & operator= (const TH2S &h1);  Operator =. ;  ; void Reset (Option_t *option="""") override;  Reset this histogram: contents, errors, etc. ;  ; void SetBinsLength (Int_t n=-1) override;  Set total number of bins including under/overflow Reallocate bin contents array. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TH2S. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TH2;  ~TH2 () override;  Destructor. ;  ; Int_t BufferEmpty (Int_t action=0) override;  Fill histogram with all entries in the buffer. ;  ; virtual Int_t Fill (const char *namex, const char *namey, Double_t w);  Increment cell defined by namex,namey by a weight w. ;  ; virtual Int_t Fill (const char *namex, Double_t y, Double_t w);  Increment cell defined by namex,y by a weight w. ;  ; virtual Int_t Fill (Double_t x, const char *namey, Double_t w);  Increment cell defined by x,namey by a weight w. ;  ; Int_t Fill (Double_t x, Double_t y) override;  Increment cell defined by x,y by 1. ;  ; virtual Int_t Fill (Double_t x, Double_t y,",MatchSource.WIKI,doc/master/classTH2S.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH2S.html
Deployability,update,update," Internal helper function that returns the corresponding marker style with line width 1 for the given style. ;  ;  Static Public Member Functions inherited from TArrayS; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TArray; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static TArray * ReadArray (TBuffer &b, const TClass *clReq);  Read TArray object from buffer. ;  ; static void WriteArray (TBuffer &b, const TArray *a);  Write TArray object to buffer. ;  . Protected Member Functions; Double_t RetrieveBinContent (Int_t bin) const override;  Raw retrieval of bin content on internal data structure see convention for numbering bins in TH1::GetBin. ;  ; void UpdateBinContent (Int_t bin, Double_t content) override;  Raw update of bin content on internal data structure see convention for numbering bins in TH1::GetBin. ;  ;  Protected Member Functions inherited from TH2;  TH2 ();  2-D histogram default constructor. ;  ;  TH2 (const char *name, const char *title, Int_t nbinsx, const Double_t *xbins, Int_t nbinsy, const Double_t *ybins);  Constructor for Double_t variable bin size 2-D histograms. ;  ;  TH2 (const char *name, const char *title, Int_t nbinsx, const Double_t *xbins, Int_t nbinsy, Double_t ylow, Double_t yup);  Constructor for variable bin size (along X axis) 2-D histograms using an input array of type double. ;  ;  TH2 (const char *name, const char *title, Int_t nbinsx, const Float_t *xbins, Int_t nbinsy, const Float_t *ybins);  Constructor for variable bin size (along X and Y axis) 2-D histograms using input arrays of type float. ;  ;  TH2 (const char *name, const char *title, Int_t nbinsx, Double_t xlow, Double_t xup, Int_t nbinsy, const Double_t *ybins);  Constructor for Double_t variable bin size (al",MatchSource.WIKI,doc/master/classTH2S.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH2S.html
Energy Efficiency,power,power," ProjectionY. ;  ; virtual TH1D * DoQuantiles (bool onX, const char *name, Double_t prob) const;  Implementation of quantiles for x or y. ;  ; Int_t Fill (const char *, Double_t) override;  Increment bin with namex with a weight w. ;  ; Int_t Fill (Double_t) override;  Invalid Fill method. ;  ; Double_t Interpolate (Double_t x) const override;  illegal for a TH2 ;  ;  Protected Member Functions inherited from TH1;  TH1 ();  Histogram default constructor. ;  ;  TH1 (const char *name, const char *title, Int_t nbinsx, const Double_t *xbins);  Constructor for variable bin size histograms using an input array of type double. ;  ;  TH1 (const char *name, const char *title, Int_t nbinsx, const Float_t *xbins);  Constructor for variable bin size histograms using an input array of type float. ;  ;  TH1 (const char *name, const char *title, Int_t nbinsx, Double_t xlow, Double_t xup);  Constructor for fix bin size histograms. ;  ; virtual Int_t AutoP2FindLimits (Double_t min, Double_t max);  Buffer-based estimate of the histogram range using the power of 2 algorithm. ;  ; Int_t AxisChoice (Option_t *axis) const;  Choose an axis according to ""axis"". ;  ; virtual void DoFillN (Int_t ntimes, const Double_t *x, const Double_t *w, Int_t stride=1);  Internal method to fill histogram content from a vector called directly by TH1::BufferEmpty. ;  ; virtual Double_t DoIntegral (Int_t ix1, Int_t ix2, Int_t iy1, Int_t iy2, Int_t iz1, Int_t iz2, Double_t &err, Option_t *opt, Bool_t doerr=kFALSE) const;  Internal function compute integral and optionally the error between the limits specified by the bin number values working for all histograms (1D, 2D and 3D) ;  ; virtual Bool_t FindNewAxisLimits (const TAxis *axis, const Double_t point, Double_t &newMin, Double_t &newMax);  finds new limits for the axis so that point is within the range and the limits are compatible with the previous ones (see TH1::Merge). ;  ; UInt_t GetAxisLabelStatus () const;  Internal function used in TH1::Fill to see ",MatchSource.WIKI,doc/master/classTH2S.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH2S.html
Integrability,rout,routine,"), errors are also recalculated. ;  ; virtual Bool_t Add (TF1 *h1, Double_t c1=1, Option_t *option="""");  Performs the operation: this = this + c1*f1 if errors are defined (see TH1::Sumw2), errors are also recalculated. ;  ; virtual Double_t AndersonDarlingTest (const TH1 *h2, Double_t &advalue) const;  Same function as above but returning also the test statistic value. ;  ; virtual Double_t AndersonDarlingTest (const TH1 *h2, Option_t *option="""") const;  Statistical test of compatibility in shape between this histogram and h2, using the Anderson-Darling 2 sample test. ;  ; void Browse (TBrowser *b) override;  Browse the Histogram object. ;  ; virtual Bool_t CanExtendAllAxes () const;  Returns true if all axes are extendable. ;  ; virtual Double_t Chi2Test (const TH1 *h2, Option_t *option=""UU"", Double_t *res=nullptr) const;  \( \chi^{2} \) test for comparing weighted and unweighted histograms. ;  ; virtual Double_t Chi2TestX (const TH1 *h2, Double_t &chi2, Int_t &ndf, Int_t &igood, Option_t *option=""UU"", Double_t *res=nullptr) const;  The computation routine of the Chisquare test. ;  ; virtual Double_t Chisquare (TF1 *f1, Option_t *option="""") const;  Compute and return the chisquare of this histogram with respect to a function The chisquare is computed by weighting each histogram point by the bin error By default the full range of the histogram is used. ;  ; virtual void ClearUnderflowAndOverflow ();  Remove all the content from the underflow and overflow bins, without changing the number of entries After calling this method, every undeflow and overflow bins will have content 0.0 The Sumw2 is also cleared, since there is no more content in the bins. ;  ; TObject * Clone (const char *newname="""") const override;  Make a complete copy of the underlying object. ;  ; virtual Double_t ComputeIntegral (Bool_t onlyPositive=false);  Compute integral (normalized cumulative sum of bins) w/o under/overflows The result is stored in fIntegral and used by the GetRandom functions. ; ",MatchSource.WIKI,doc/master/classTH2S.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH2S.html
Modifiability,inherit,inherited," ;  ;  TH2S (const TH2S &h2s);  Copy constructor The list of functions is not copied. ;  ;  ~TH2S () override;  Destructor. ;  ; void AddBinContent (Int_t bin) override;  Increment bin content by 1. ;  ; void AddBinContent (Int_t bin, Double_t w) override;  Increment bin content by w. ;  ; void AddBinContent (Int_t binx, Int_t biny) override;  Increment 2D bin content by 1. ;  ; void AddBinContent (Int_t binx, Int_t biny, Double_t w) override;  Increment 2D bin content by a weight w. ;  ; void Copy (TObject &hnew) const override;  Copy. ;  ; TClass * IsA () const override;  ; TH2S & operator= (const TH2S &h1);  Operator =. ;  ; void Reset (Option_t *option="""") override;  Reset this histogram: contents, errors, etc. ;  ; void SetBinsLength (Int_t n=-1) override;  Set total number of bins including under/overflow Reallocate bin contents array. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TH2S. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TH2;  ~TH2 () override;  Destructor. ;  ; Int_t BufferEmpty (Int_t action=0) override;  Fill histogram with all entries in the buffer. ;  ; virtual Int_t Fill (const char *namex, const char *namey, Double_t w);  Increment cell defined by namex,namey by a weight w. ;  ; virtual Int_t Fill (const char *namex, Double_t y, Double_t w);  Increment cell defined by namex,y by a weight w. ;  ; virtual Int_t Fill (Double_t x, const char *namey, Double_t w);  Increment cell defined by x,namey by a weight w. ;  ; Int_t Fill (Double_t x, Double_t y) override;  Increment cell defined by x,y by 1. ;  ; virtual Int_t Fill (Double_t x, Double_t y, Double_t w);  Increment cell defined by x,y by a weight w. ;  ; void FillN (Int_t ntimes, const Double_t *x, const Double_t *y, const Double_t *w, Int_t stride=1) override;  Fill a 2-D histogram with an array of values and weights. ;  ; void FillN (Int_t, const Double_t *, const Double_t *, Int_t) override;  Fill this his",MatchSource.WIKI,doc/master/classTH2S.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH2S.html
Performance,perform,performing,"t char *title, Int_t nbinsx, const Float_t *xbins, Int_t nbinsy, const Float_t *ybins);  Constructor for variable bin size (along X and Y axis) 2-D histograms using input arrays of type float. ;  ;  TH2 (const char *name, const char *title, Int_t nbinsx, Double_t xlow, Double_t xup, Int_t nbinsy, const Double_t *ybins);  Constructor for Double_t variable bin size (along Y axis) 2-D histograms. ;  ;  TH2 (const char *name, const char *title, Int_t nbinsx, Double_t xlow, Double_t xup, Int_t nbinsy, Double_t ylow, Double_t yup);  Constructor for fix bin size 2-D histograms. ;  ; virtual Int_t BufferFill (Double_t x, Double_t y, Double_t w);  accumulate arguments in buffer. ;  ; Int_t BufferFill (Double_t, Double_t) override;  accumulate arguments in buffer. ;  ; virtual void DoFitSlices (bool onX, TF1 *f1, Int_t firstbin, Int_t lastbin, Int_t cut, Option_t *option, TObjArray *arr);  ; virtual TProfile * DoProfile (bool onX, const char *name, Int_t firstbin, Int_t lastbin, Option_t *option) const;  ; virtual TH1D * DoProjection (bool onX, const char *name, Int_t firstbin, Int_t lastbin, Option_t *option) const;  Internal (protected) method for performing projection on the X or Y axis called by ProjectionX or ProjectionY. ;  ; virtual TH1D * DoQuantiles (bool onX, const char *name, Double_t prob) const;  Implementation of quantiles for x or y. ;  ; Int_t Fill (const char *, Double_t) override;  Increment bin with namex with a weight w. ;  ; Int_t Fill (Double_t) override;  Invalid Fill method. ;  ; Double_t Interpolate (Double_t x) const override;  illegal for a TH2 ;  ;  Protected Member Functions inherited from TH1;  TH1 ();  Histogram default constructor. ;  ;  TH1 (const char *name, const char *title, Int_t nbinsx, const Double_t *xbins);  Constructor for variable bin size histograms using an input array of type double. ;  ;  TH1 (const char *name, const char *title, Int_t nbinsx, const Float_t *xbins);  Constructor for variable bin size histograms using an input arr",MatchSource.WIKI,doc/master/classTH2S.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH2S.html
Security,hash,hash,"m of squares of weights. ;  ; void UseCurrentStyle () override;  Copy current attributes from/to current style. ;  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; TClass * IsA () const override;  ; Bool_t IsSortable () const override;  ; void ls (Option_t *option="""") const override;  List TNamed name and title. ;  ; TNamed & operator= (const TNamed &rhs);  TNamed assignment operator. ;  ; void Print (Option_t *option="""") const override;  Print TNamed name and title. ;  ; virtual Int_t Sizeof () const;  Return size of the TNamed part of the TObject. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to c",MatchSource.WIKI,doc/master/classTH2S.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH2S.html
Testability,test,test,"range [firstxbin,lastxbin],[firstybin,lastybin] for a 2-D histogram By default the integral is computed as the sum of bin contents in the range. ;  ; virtual Double_t Integral (Int_t, Int_t, Int_t, Int_t, Int_t, Int_t, Option_t *="""") const;  ; Double_t Integral (Option_t *option="""") const override;  Return integral of bin contents. ;  ; virtual Double_t IntegralAndError (Int_t binx1, Int_t binx2, Int_t biny1, Int_t biny2, Double_t &err, Option_t *option="""") const;  Return integral of bin contents in range [firstxbin,lastxbin],[firstybin,lastybin] for a 2-D histogram. ;  ; Double_t Interpolate (Double_t x, Double_t y) const override;  Given a point P(x,y), Interpolate approximates the value via bilinear interpolation based on the four nearest bin centers see Wikipedia, Bilinear Interpolation Andy Mastbaum 10/8/2008 vaguely based on R.Raja 6-Sep-2008. ;  ; Double_t Interpolate (Double_t x, Double_t y, Double_t z) const override;  illegal for a TH2 ;  ; Double_t KolmogorovTest (const TH1 *h2, Option_t *option="""") const override;  Statistical test of compatibility in shape between THIS histogram and h2, using Kolmogorov test. ;  ; TProfile * ProfileX (const char *name=""_pfx"", Int_t firstybin=1, Int_t lastybin=-1, Option_t *option="""") const;  Project a 2-D histogram into a profile histogram along X. ;  ; TProfile * ProfileY (const char *name=""_pfy"", Int_t firstxbin=1, Int_t lastxbin=-1, Option_t *option="""") const;  Project a 2-D histogram into a profile histogram along Y. ;  ; TH1D * ProjectionX (const char *name=""_px"", Int_t firstybin=0, Int_t lastybin=-1, Option_t *option="""") const;  Project a 2-D histogram into a 1-D histogram along X. ;  ; TH1D * ProjectionY (const char *name=""_py"", Int_t firstxbin=0, Int_t lastxbin=-1, Option_t *option="""") const;  Project a 2-D histogram into a 1-D histogram along Y. ;  ; void PutStats (Double_t *stats) override;  Replace current statistics with the values in array stats. ;  ; TH1D * QuantilesX (Double_t prob=0.5, const char *name=""",MatchSource.WIKI,doc/master/classTH2S.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH2S.html
Usability,clear,cleared,"ject. ;  ; virtual Bool_t CanExtendAllAxes () const;  Returns true if all axes are extendable. ;  ; virtual Double_t Chi2Test (const TH1 *h2, Option_t *option=""UU"", Double_t *res=nullptr) const;  \( \chi^{2} \) test for comparing weighted and unweighted histograms. ;  ; virtual Double_t Chi2TestX (const TH1 *h2, Double_t &chi2, Int_t &ndf, Int_t &igood, Option_t *option=""UU"", Double_t *res=nullptr) const;  The computation routine of the Chisquare test. ;  ; virtual Double_t Chisquare (TF1 *f1, Option_t *option="""") const;  Compute and return the chisquare of this histogram with respect to a function The chisquare is computed by weighting each histogram point by the bin error By default the full range of the histogram is used. ;  ; virtual void ClearUnderflowAndOverflow ();  Remove all the content from the underflow and overflow bins, without changing the number of entries After calling this method, every undeflow and overflow bins will have content 0.0 The Sumw2 is also cleared, since there is no more content in the bins. ;  ; TObject * Clone (const char *newname="""") const override;  Make a complete copy of the underlying object. ;  ; virtual Double_t ComputeIntegral (Bool_t onlyPositive=false);  Compute integral (normalized cumulative sum of bins) w/o under/overflows The result is stored in fIntegral and used by the GetRandom functions. ;  ; virtual void DirectoryAutoAdd (TDirectory *);  Perform the automatic addition of the histogram to the given directory. ;  ; Int_t DistancetoPrimitive (Int_t px, Int_t py) override;  Compute distance from point px,py to a line. ;  ; virtual Bool_t Divide (const TH1 *h1);  Divide this histogram by h1. ;  ; virtual Bool_t Divide (const TH1 *h1, const TH1 *h2, Double_t c1=1, Double_t c2=1, Option_t *option="""");  Replace contents of this histogram by the division of h1 by h2. ;  ; virtual Bool_t Divide (TF1 *f1, Double_t c1=1);  Performs the operation: this = this/(c1*f1) if errors are defined (see TH1::Sumw2), errors are also recalc",MatchSource.WIKI,doc/master/classTH2S.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH2S.html
Availability,error,error,", const char *name, const char *title, const TAxis *projX, const TAxis *projY, bool computeErrors, bool originalRange, bool useUF, bool useOF)TH3protectedstatic; DoProjectProfile2D(const char *name, const char *title, const TAxis *projX, const TAxis *projY, bool originalRange, bool useUF, bool useOF) constTH3protectedvirtual; Draw(Option_t *option="""") overrideTH1virtual; DrawClass() constTObjectvirtual; DrawClone(Option_t *option="""") constTObjectvirtual; DrawCopy(Option_t *option="""", const char *name_postfix=""_copy"") constTH1virtual; DrawNormalized(Option_t *option="""", Double_t norm=1) constTH1virtual; DrawPanel()TH1virtual; Dump() constTObjectvirtual; EBinErrorOpt enum nameTH1; EDeprecatedStatusBits enum nameTObject; Error(const char *method, const char *msgfmt,...) constTObjectvirtual; EStatOverflows enum nameTH1; EStatusBits enum nameTH1; Eval(TF1 *f1, Option_t *option="""")TH1virtual; Execute(const char *method, const char *params, Int_t *error=nullptr)TObjectvirtual; Execute(TMethod *method, TObjArray *params, Int_t *error=nullptr)TObjectvirtual; ExecuteEvent(Int_t event, Int_t px, Int_t py) overrideTH1virtual; ExtendAxis(Double_t x, TAxis *axis)TH1virtual; Fatal(const char *method, const char *msgfmt,...) constTObjectvirtual; fBarOffsetTH1protected; fBarWidthTH1protected; fBinStatErrOptTH1protected; fBitsTObjectprivate; fBufferTH1protected; fBufferSizeTH1protected; fContourTH1protected; fDimensionTH1protected; fDirectoryTH1protected; fEntriesTH1protected; fFillColorTAttFillprotected; fFillStyleTAttFillprotected; FFT(TH1 *h_output, Option_t *option)TH1virtual; fFunctionsTH1protected; fgAddDirectoryTH1protectedstatic; fgBufferSizeTH1protectedstatic; fgDefaultSumw2TH1protectedstatic; fgDtorOnlyTObjectprivatestatic; fgObjectStatTObjectprivatestatic; fgStatOverflowsTH1protectedstatic; Fill(Double_t) overrideTH3protectedvirtual; Fill(Double_t, Double_t) overrideTH3inlineprotectedvirtual; Fill(const char *, Double_t) overrideTH3inlineprotectedvirtual; Fill(Double_t, con",MatchSource.WIKI,doc/master/classTH3-members.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH3-members.html
Modifiability,inherit,inherited,". ROOT: Member List. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. TH3 Member List. This is the complete list of members for TH3, including all inherited members. AbstractMethod(const char *method) constTObject; Add(TF1 *h1, Double_t c1=1, Option_t *option="""")TH1virtual; Add(const TH1 *h1, Double_t c1=1)TH1virtual; Add(const TH1 *h, const TH1 *h2, Double_t c1=1, Double_t c2=1)TH1virtual; AddBinContent(Int_t bin) overrideTH3virtual; AddBinContent(Int_t bin, Double_t w) overrideTH3virtual; AddBinContent(Int_t binx, Int_t biny, Int_t binz)TH3virtual; AddBinContent(Int_t binx, Int_t biny, Int_t binz, Double_t w)TH3virtual; AddDirectory(Bool_t add=kTRUE)TH1static; AddDirectoryStatus()TH1static; AddToTObjectTable(TObject *)TObjectprivatestatic; AndersonDarlingTest(const TH1 *h2, Option_t *option="""") constTH1virtual; AndersonDarlingTest(const TH1 *h2, Double_t &advalue) constTH1virtual; AppendPad(Option_t *option="""")TObjectvirtual; AutoP2FindLimits(Double_t min, Double_t max)TH1protectedvirtual; AutoP2GetBins(Int_t n)TH1inlineprotectedstatic; AutoP2GetPower2(Double_t x, Bool_t next=kTRUE)TH1inlineprotectedstatic; AxisChoice(Option_t *axis) constTH1protected; Browse(TBrowser *b) overrideTH1virtual; BufferEmpty(Int_t action=0) overrideTH3virtual; BufferFill(Double_t x, Double_t y, Double_t z, Double_t w)TH3protectedvirtual; BufferFill(Double_t, Double_t) overrideTH3inlineprotectedvirtual; BufferFill(Double_t, Double_t, Double_t)TH3inlineprotectedvirtual; Build()TH1private; CanExtendAllAxes() constTH1virtual; CheckAxisLimits(const TAxis *a1, const TAxis *a2)TH1protectedstatic; CheckBinLabels(const TAxis *a1, const TAxis *a2)TH1protectedstatic; CheckBinLimits(const TAxis *a1, const TAxis *a2)TH1protectedstatic; CheckConsistency(const TH1 *h1, const TH1 *h2)TH1protectedstatic; CheckConsistentSubAxes(const TAxis *a1, Int_t firstBin1, Int_t lastBin1, const TAxis *a2, Int_t firstBin2=0, Int_t lastBin2=0)TH1protectedstatic; CheckedHash()TObjectinli",MatchSource.WIKI,doc/master/classTH3-members.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH3-members.html
Availability,error,error,"oid FillRandom (const char *fname, Int_t ntimes=5000, TRandom *rng=nullptr) override;  Fill histogram following distribution in function fname. ;  ; void FillRandom (TH1 *h, Int_t ntimes=5000, TRandom *rng=nullptr) override;  Fill histogram following distribution in histogram h. ;  ; virtual void FitSlicesZ (TF1 *f1=nullptr, Int_t binminx=1, Int_t binmaxx=0, Int_t binminy=1, Int_t binmaxy=0, Int_t cut=0, Option_t *option=""QNR"");  Project slices along Z in case of a 3-D histogram, then fit each slice with function f1 and make a 2-d histogram for each fit parameter Only cells in the bin range [binminx,binmaxx] and [binminy,binmaxy] are considered. ;  ; Int_t GetBin (Int_t binx, Int_t biny, Int_t binz) const override;  See comments in TH1::GetBin. ;  ; virtual Double_t GetBinContent (Int_t bin) const;  Return content of bin number bin. ;  ; virtual Double_t GetBinContent (Int_t bin, Int_t) const;  ; virtual Double_t GetBinContent (Int_t bin, Int_t, Int_t) const;  ; Double_t GetBinContent (Int_t binx, Int_t biny, Int_t binz) const override;  ; virtual Double_t GetBinErrorLow (Int_t bin) const;  Return lower error associated to bin number bin. ;  ; virtual Double_t GetBinErrorLow (Int_t binx, Int_t biny, Int_t binz);  ; virtual Double_t GetBinErrorUp (Int_t bin) const;  Return upper error associated to bin number bin. ;  ; virtual Double_t GetBinErrorUp (Int_t binx, Int_t biny, Int_t binz);  ; virtual Double_t GetBinWithContent3 (Double_t c, Int_t &binx, Int_t &biny, Int_t &binz, Int_t firstx=0, Int_t lastx=0, Int_t firsty=0, Int_t lasty=0, Int_t firstz=0, Int_t lastz=0, Double_t maxdiff=0) const;  Compute first cell (binx,biny,binz) in the range [firstx,lastx](firsty,lasty][firstz,lastz] for which diff = abs(cell_content-c) <= maxdiff In case several cells in the specified range with diff=0 are found the first cell found is returned in binx,biny,binz. ;  ; virtual Double_t GetCorrelationFactor (Int_t axis1=1, Int_t axis2=2) const;  Return correlation factor between axis",MatchSource.WIKI,doc/master/classTH3.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH3.html
Deployability,update,update," within the range and the limits are compatible with the previous ones (see TH1::Merge). ;  ; UInt_t GetAxisLabelStatus () const;  Internal function used in TH1::Fill to see which axis is full alphanumeric, i.e. ;  ; virtual Double_t GetBinErrorSqUnchecked (Int_t bin) const;  ; Bool_t GetStatOverflowsBehaviour () const;  ; Bool_t IsEmpty () const;  Check if a histogram is empty (this is a protected method used mainly by TH1Merger ) ;  ; int LoggedInconsistency (const char *name, const TH1 *h1, const TH1 *h2, bool useMerge=false) const;  ; virtual Double_t RetrieveBinContent (Int_t bin) const;  Raw retrieval of bin content on internal data structure see convention for numbering bins in TH1::GetBin. ;  ; virtual void SavePrimitiveHelp (std::ostream &out, const char *hname, Option_t *option="""");  Helper function for the SavePrimitive functions from TH1 or classes derived from TH1, eg TProfile, TProfile2D. ;  ; virtual void UpdateBinContent (Int_t bin, Double_t content);  Raw update of bin content on internal data structure see convention for numbering bins in TH1::GetBin. ;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  . Static Protected Member Functions; static TH1D * DoProject1D (const TH3 &h, const char *name, const char *title, const TAxis *projX, bool computeErrors, bool originalRange, bool useUF, bool useOF);  static methdod performing the projection to 1D histogram ;  ; static TH2D * DoProject2D (const TH3 &h, const char *name, const char *title, const TAxis *projX, const TAxis *projY, bool computeErrors, bool originalRange, bool useUF, bool useOF);  static methdod performing the projection to 2D histogram ;  ;  Static Protected Member Functions inherited from TH1; static Int_t AutoP2GetBins (Int_t n);  Auxiliary function to get the next power of 2 integer value larger then n. ;  ; static Double_t A",MatchSource.WIKI,doc/master/classTH3.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH3.html
Energy Efficiency,power,power,"Int_t Fill (Double_t) override;  Invalid Fill method. ;  ; Int_t Fill (Double_t, const char *, Double_t);  ; Int_t Fill (Double_t, Double_t) override;  Increment bin with abscissa X with a weight w. ;  ; Double_t Interpolate (Double_t x) const override;  Not yet implemented. ;  ; Double_t Interpolate (Double_t x, Double_t y) const override;  Not yet implemented. ;  ;  Protected Member Functions inherited from TH1;  TH1 ();  Histogram default constructor. ;  ;  TH1 (const char *name, const char *title, Int_t nbinsx, const Double_t *xbins);  Constructor for variable bin size histograms using an input array of type double. ;  ;  TH1 (const char *name, const char *title, Int_t nbinsx, const Float_t *xbins);  Constructor for variable bin size histograms using an input array of type float. ;  ;  TH1 (const char *name, const char *title, Int_t nbinsx, Double_t xlow, Double_t xup);  Constructor for fix bin size histograms. ;  ; virtual Int_t AutoP2FindLimits (Double_t min, Double_t max);  Buffer-based estimate of the histogram range using the power of 2 algorithm. ;  ; Int_t AxisChoice (Option_t *axis) const;  Choose an axis according to ""axis"". ;  ; virtual void DoFillN (Int_t ntimes, const Double_t *x, const Double_t *w, Int_t stride=1);  Internal method to fill histogram content from a vector called directly by TH1::BufferEmpty. ;  ; virtual Double_t DoIntegral (Int_t ix1, Int_t ix2, Int_t iy1, Int_t iy2, Int_t iz1, Int_t iz2, Double_t &err, Option_t *opt, Bool_t doerr=kFALSE) const;  Internal function compute integral and optionally the error between the limits specified by the bin number values working for all histograms (1D, 2D and 3D) ;  ; virtual Bool_t FindNewAxisLimits (const TAxis *axis, const Double_t point, Double_t &newMin, Double_t &newMax);  finds new limits for the axis so that point is within the range and the limits are compatible with the previous ones (see TH1::Merge). ;  ; UInt_t GetAxisLabelStatus () const;  Internal function used in TH1::Fill to see ",MatchSource.WIKI,doc/master/classTH3.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH3.html
Integrability,depend,depending,"uble_t IntegralAndError (Int_t binx1, Int_t binx2, Int_t biny1, Int_t biny2, Int_t binz1, Int_t binz2, Double_t &err, Option_t *option="""") const;  Return integral of bin contents in range [binx1,binx2],[biny1,biny2],[binz1,binz2] for a 3-D histogram. ;  ; Double_t Interpolate (Double_t x, Double_t y, Double_t z) const override;  Given a point P(x,y,z), Interpolate approximates the value via trilinear interpolation based on the 8 nearest bin center points (corner of the cube surrounding the points) The Algorithm is described in http://en.wikipedia.org/wiki/Trilinear_interpolation The given values (x,y,z) must be between first bin center and last bin center for each coordinate: ;  ; TClass * IsA () const override;  ; Double_t KolmogorovTest (const TH1 *h2, Option_t *option="""") const override;  Statistical test of compatibility in shape between THIS histogram and h2, using Kolmogorov test. ;  ; virtual TH1 * Project3D (Option_t *option=""x"") const;  Project a 3-d histogram into 1 or 2-d histograms depending on the option parameter, which may contain a combination of the characters x,y,z,e. ;  ; virtual TProfile2D * Project3DProfile (Option_t *option=""xy"") const;  Project a 3-d histogram into a 2-d profile histograms depending on the option parameter option may contain a combination of the characters x,y,z option = ""xy"" return the x versus y projection into a TProfile2D histogram option = ""yx"" return the y versus x projection into a TProfile2D histogram option = ""xz"" return the x versus z projection into a TProfile2D histogram option = ""zx"" return the z versus x projection into a TProfile2D histogram option = ""yz"" return the y versus z projection into a TProfile2D histogram option = ""zy"" return the z versus y projection into a TProfile2D histogram NB: the notation ""a vs b"" means ""a"" vertical and ""b"" horizontal. ;  ; virtual TH1D * ProjectionX (const char *name=""_px"", Int_t iymin=0, Int_t iymax=-1, Int_t izmin=0, Int_t izmax=-1, Option_t *option="""") const;  Project a 3-D h",MatchSource.WIKI,doc/master/classTH3.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH3.html
Modifiability,variab,variable,"members ; TH3 Class ReferenceHistogram Library » Histogram classes. ; The 3-D histogram classes derived from the 1-D histogram classes. ; All operations are supported (fill, fit). Drawing is currently restricted to one single option. A cloud of points is drawn. The number of points is proportional to cell content. TH3C a 3-D histogram with one byte per cell (char). Maximum bin content = 127; TH3S a 3-D histogram with two bytes per cell (short integer). Maximum bin content = 32767; TH3I a 3-D histogram with four bytes per cell (32 bit integer). Maximum bin content = INT_MAX (*); TH3L a 3-D histogram with eight bytes per cell (64 bit integer). Maximum bin content = LLONG_MAX (**); TH3F a 3-D histogram with four bytes per cell (float). Maximum precision 7 digits, maximum integer bin content = +/-16777216 (***); TH3D a 3-D histogram with eight bytes per cell (double). Maximum precision 14 digits, maximum integer bin content = +/-9007199254740992 (****). (*) INT_MAX = 2147483647 is the maximum value for a variable of type int.; (**) LLONG_MAX = 9223372036854775807 is the maximum value for a variable of type long64.; (***) 2^24 = 16777216 is the maximum integer that can be properly represented by a float32 with 23-bit mantissa.; (****) 2^53 = 9007199254740992 is the maximum integer that can be properly represented by a double64 with 52-bit mantissa. ; Definition at line 31 of file TH3.h. Public Member Functions;  ~TH3 () override;  Destructor. ;  ; void AddBinContent (Int_t bin) override;  Increment bin content by 1. ;  ; void AddBinContent (Int_t bin, Double_t w) override;  Increment bin content by a weight w. ;  ; virtual void AddBinContent (Int_t binx, Int_t biny, Int_t binz);  Increment 3D bin content by 1. ;  ; virtual void AddBinContent (Int_t binx, Int_t biny, Int_t binz, Double_t w);  Increment 3D bin content by a weight w. ;  ; Int_t BufferEmpty (Int_t action=0) override;  Fill histogram with all entries in the buffer. ;  ; void Copy (TObject &hnew) const overrid",MatchSource.WIKI,doc/master/classTH3.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH3.html
Performance,perform,performing,"s. ;  ; virtual Int_t BufferFill (Double_t x, Double_t y, Double_t z, Double_t w);  Accumulate arguments in buffer. ;  ; Int_t BufferFill (Double_t, Double_t) override;  accumulate arguments in buffer. ;  ; virtual Int_t BufferFill (Double_t, Double_t, Double_t);  ; void DoFillProfileProjection (TProfile2D *p2, const TAxis &a1, const TAxis &a2, const TAxis &a3, Int_t bin1, Int_t bin2, Int_t bin3, Int_t inBin, Bool_t useWeights) const;  internal function to fill the bins of the projected profile 2D histogram called from DoProjectProfile2D ;  ; virtual TH1D * DoProject1D (const char *name, const char *title, const TAxis *projAxis, const TAxis *axis1, const TAxis *axis2, bool computeErrors, bool originalRange, bool useUF, bool useOF) const;  internal methdod performing the projection to 1D histogram called from other TH3::DoProject1D ;  ; virtual TH1D * DoProject1D (const char *name, const char *title, int imin1, int imax1, int imin2, int imax2, const TAxis *projAxis, const TAxis *axis1, const TAxis *axis2, Option_t *option) const;  internal method performing the projection to 1D histogram called from TH3::Project3D ;  ; virtual TH2D * DoProject2D (const char *name, const char *title, const TAxis *projX, const TAxis *projY, bool computeErrors, bool originalRange, bool useUF, bool useOF) const;  internal method performing the projection to a 2D histogram called from TH3::Project3D ;  ; virtual TProfile2D * DoProjectProfile2D (const char *name, const char *title, const TAxis *projX, const TAxis *projY, bool originalRange, bool useUF, bool useOF) const;  internal method to project to a 2D Profile called from TH3::Project3DProfile ;  ; Int_t Fill (const char *, const char *, Double_t);  ; Int_t Fill (const char *, Double_t) override;  Increment bin with namex with a weight w. ;  ; Int_t Fill (const char *, Double_t, Double_t);  ; Int_t Fill (Double_t) override;  Invalid Fill method. ;  ; Int_t Fill (Double_t, const char *, Double_t);  ; Int_t Fill (Double_t, Double_t) over",MatchSource.WIKI,doc/master/classTH3.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH3.html
Safety,avoid,avoid,"d histograms to the directory ;  ; static Int_t fgBufferSize = 1000;  ! Default buffer size for automatic histograms ;  ; static Bool_t fgDefaultSumw2 = kFALSE;  ! Flag to call TH1::Sumw2 automatically at histogram creation time ;  ; static Bool_t fgStatOverflows = kFALSE;  ! Flag to use under/overflows in statistics ;  . #include <TH3.h>. Inheritance diagram for TH3:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ TH3() [1/5]. TH3::TH3 ; (; ). protected . Default constructor. ; Definition at line 74 of file TH3.cxx. ◆ TH3() [2/5]. TH3::TH3 ; (; const char * ; name, . const char * ; title, . Int_t ; nbinsx, . Double_t ; xlow, . Double_t ; xup, . Int_t ; nbinsy, . Double_t ; ylow, . Double_t ; yup, . Int_t ; nbinsz, . Double_t ; zlow, . Double_t ; zup . ). protected . Constructor for fix bin size 3-D histograms. ; Creates the main histogram structure.; Parameters. [in]namename of histogram (avoid blanks) ; [in]titlehistogram title. If title is of the form stringt;stringx;stringy;stringz, the histogram title is set to stringt, the x axis title to stringx, the y axis title to stringy, etc. ; [in]nbinsxnumber of bins along the X axis ; [in]xlowlow edge of the X axis first bin ; [in]xupupper edge of the X axis last bin (not included in last bin) ; [in]nbinsynumber of bins along the Y axis ; [in]ylowlow edge of the Y axis first bin ; [in]yupupper edge of the Y axis last bin (not included in last bin) ; [in]nbinsznumber of bins along the Z axis ; [in]zlowlow edge of the Z axis first bin ; [in]zupupper edge of the Z axis last bin (not included in last bin) . Definition at line 101 of file TH3.cxx. ◆ TH3() [3/5]. TH3::TH3 ; (; const char * ; name, . const char * ; title, . Int_t ; nbinsx, . const Float_t * ; xbins, . Int_t ; nbinsy, . const Float_t * ; ybins, . Int_t ; nbinsz, . const Float_t * ; zbins . ). protected . Constructor for variable bin size (along X, Y and Z axis) 3-D histog",MatchSource.WIKI,doc/master/classTH3.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH3.html
Security,hash,hash,"m of squares of weights. ;  ; void UseCurrentStyle () override;  Copy current attributes from/to current style. ;  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; TClass * IsA () const override;  ; Bool_t IsSortable () const override;  ; void ls (Option_t *option="""") const override;  List TNamed name and title. ;  ; TNamed & operator= (const TNamed &rhs);  TNamed assignment operator. ;  ; void Print (Option_t *option="""") const override;  Print TNamed name and title. ;  ; virtual Int_t Sizeof () const;  Return size of the TNamed part of the TObject. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to c",MatchSource.WIKI,doc/master/classTH3.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH3.html
Testability,test,test,"of bin contents in range [binx1,binx2],[biny1,biny2],[binz1,binz2] for a 3-D histogram By default the integral is computed as the sum of bin contents in the range. ;  ; Double_t Integral (Option_t *option="""") const override;  Return integral of bin contents. ;  ; virtual Double_t IntegralAndError (Int_t binx1, Int_t binx2, Int_t biny1, Int_t biny2, Int_t binz1, Int_t binz2, Double_t &err, Option_t *option="""") const;  Return integral of bin contents in range [binx1,binx2],[biny1,biny2],[binz1,binz2] for a 3-D histogram. ;  ; Double_t Interpolate (Double_t x, Double_t y, Double_t z) const override;  Given a point P(x,y,z), Interpolate approximates the value via trilinear interpolation based on the 8 nearest bin center points (corner of the cube surrounding the points) The Algorithm is described in http://en.wikipedia.org/wiki/Trilinear_interpolation The given values (x,y,z) must be between first bin center and last bin center for each coordinate: ;  ; TClass * IsA () const override;  ; Double_t KolmogorovTest (const TH1 *h2, Option_t *option="""") const override;  Statistical test of compatibility in shape between THIS histogram and h2, using Kolmogorov test. ;  ; virtual TH1 * Project3D (Option_t *option=""x"") const;  Project a 3-d histogram into 1 or 2-d histograms depending on the option parameter, which may contain a combination of the characters x,y,z,e. ;  ; virtual TProfile2D * Project3DProfile (Option_t *option=""xy"") const;  Project a 3-d histogram into a 2-d profile histograms depending on the option parameter option may contain a combination of the characters x,y,z option = ""xy"" return the x versus y projection into a TProfile2D histogram option = ""yx"" return the y versus x projection into a TProfile2D histogram option = ""xz"" return the x versus z projection into a TProfile2D histogram option = ""zx"" return the z versus x projection into a TProfile2D histogram option = ""yz"" return the y versus z projection into a TProfile2D histogram option = ""zy"" return the z v",MatchSource.WIKI,doc/master/classTH3.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH3.html
Usability,clear,cleared,"ject. ;  ; virtual Bool_t CanExtendAllAxes () const;  Returns true if all axes are extendable. ;  ; virtual Double_t Chi2Test (const TH1 *h2, Option_t *option=""UU"", Double_t *res=nullptr) const;  \( \chi^{2} \) test for comparing weighted and unweighted histograms. ;  ; virtual Double_t Chi2TestX (const TH1 *h2, Double_t &chi2, Int_t &ndf, Int_t &igood, Option_t *option=""UU"", Double_t *res=nullptr) const;  The computation routine of the Chisquare test. ;  ; virtual Double_t Chisquare (TF1 *f1, Option_t *option="""") const;  Compute and return the chisquare of this histogram with respect to a function The chisquare is computed by weighting each histogram point by the bin error By default the full range of the histogram is used. ;  ; virtual void ClearUnderflowAndOverflow ();  Remove all the content from the underflow and overflow bins, without changing the number of entries After calling this method, every undeflow and overflow bins will have content 0.0 The Sumw2 is also cleared, since there is no more content in the bins. ;  ; TObject * Clone (const char *newname="""") const override;  Make a complete copy of the underlying object. ;  ; virtual Double_t ComputeIntegral (Bool_t onlyPositive=false);  Compute integral (normalized cumulative sum of bins) w/o under/overflows The result is stored in fIntegral and used by the GetRandom functions. ;  ; virtual void DirectoryAutoAdd (TDirectory *);  Perform the automatic addition of the histogram to the given directory. ;  ; Int_t DistancetoPrimitive (Int_t px, Int_t py) override;  Compute distance from point px,py to a line. ;  ; virtual Bool_t Divide (const TH1 *h1);  Divide this histogram by h1. ;  ; virtual Bool_t Divide (const TH1 *h1, const TH1 *h2, Double_t c1=1, Double_t c2=1, Option_t *option="""");  Replace contents of this histogram by the division of h1 by h2. ;  ; virtual Bool_t Divide (TF1 *f1, Double_t c1=1);  Performs the operation: this = this/(c1*f1) if errors are defined (see TH1::Sumw2), errors are also recalc",MatchSource.WIKI,doc/master/classTH3.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH3.html
Availability,error,errors,"le bin size 3-D histograms. ;  ;  TH3C (const char *name, const char *title, Int_t nbinsx, Double_t xlow, Double_t xup, Int_t nbinsy, Double_t ylow, Double_t yup, Int_t nbinsz, Double_t zlow, Double_t zup);  Constructor for fix bin size 3-D histograms (see TH3::TH3 for explanation of parameters) ;  ;  TH3C (const TH3C &h3c);  Copy constructor. ;  ;  ~TH3C () override;  Destructor. ;  ; void AddBinContent (Int_t bin) override;  Increment bin content by 1. ;  ; void AddBinContent (Int_t bin, Double_t w) override;  Increment bin content by w. ;  ; void AddBinContent (Int_t binx, Int_t biny, Int_t binz) override;  Increment 3D bin content by 1. ;  ; void AddBinContent (Int_t binx, Int_t biny, Int_t binz, Double_t w) override;  Increment 3D bin content by a weight w. ;  ; void Copy (TObject &hnew) const override;  Copy this 3-D histogram structure to newth3. ;  ; TClass * IsA () const override;  ; TH3C & operator= (const TH3C &h1);  Operator =. ;  ; void Reset (Option_t *option="""") override;  Reset this histogram: contents, errors, etc. ;  ; void SetBinsLength (Int_t n=-1) override;  Set total number of bins including under/overflow Reallocate bin contents array. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TH3C. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TH3;  ~TH3 () override;  Destructor. ;  ; Int_t BufferEmpty (Int_t action=0) override;  Fill histogram with all entries in the buffer. ;  ; virtual Int_t Fill (const char *namex, const char *namey, const char *namez, Double_t w);  Increment cell defined by namex,namey,namez by a weight w. ;  ; virtual Int_t Fill (const char *namex, const char *namey, Double_t z, Double_t w);  Increment cell defined by namex,namey,z by a weight w. ;  ; virtual Int_t Fill (const char *namex, Double_t y, const char *namez, Double_t w);  Increment cell defined by namex,y,namez by a weight w. ;  ; virtual Int_t Fill (const char *namex, Double_t y, Doubl",MatchSource.WIKI,doc/master/classTH3C.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH3C.html
Deployability,update,update," char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TArrayC; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TArray; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static TArray * ReadArray (TBuffer &b, const TClass *clReq);  Read TArray object from buffer. ;  ; static void WriteArray (TBuffer &b, const TArray *a);  Write TArray object to buffer. ;  . Protected Member Functions; Double_t RetrieveBinContent (Int_t bin) const override;  Raw retrieval of bin content on internal data structure see convention for numbering bins in TH1::GetBin. ;  ; void UpdateBinContent (Int_t bin, Double_t content) override;  Raw update of bin content on internal data structure see convention for numbering bins in TH1::GetBin. ;  ;  Protected Member Functions inherited from TH3;  TH3 ();  Default constructor. ;  ;  TH3 (const char *name, const char *title, Int_t nbinsx, const Double_t *xbins, Int_t nbinsy, const Double_t *ybins, Int_t nbinsz, const Double_t *zbins);  Constructor for variable bin size (along X, Y and Z axis) 3-D histograms using input arrays of type double. ;  ;  TH3 (const char *name, const char *title, Int_t nbinsx, const Float_t *xbins, Int_t nbinsy, const Float_t *ybins, Int_t nbinsz, const Float_t *zbins);  Constructor for variable bin size (along X, Y and Z axis) 3-D histograms using input arrays of type float. ;  ;  TH3 (const char *name, const char *title, Int_t nbinsx, Double_t xlow, Double_t xup, Int_t nbinsy, Double_t ylow, Double_t yup, Int_t nbinsz, Double_t zlow, Double_t zup);  Constructor for fix bin size 3-D histograms. ;  ; virtual Int_t BufferFill (Double_t x, Double_t y, Double_t z, Doubl",MatchSource.WIKI,doc/master/classTH3C.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH3C.html
Energy Efficiency,power,power,"Int_t Fill (Double_t) override;  Invalid Fill method. ;  ; Int_t Fill (Double_t, const char *, Double_t);  ; Int_t Fill (Double_t, Double_t) override;  Increment bin with abscissa X with a weight w. ;  ; Double_t Interpolate (Double_t x) const override;  Not yet implemented. ;  ; Double_t Interpolate (Double_t x, Double_t y) const override;  Not yet implemented. ;  ;  Protected Member Functions inherited from TH1;  TH1 ();  Histogram default constructor. ;  ;  TH1 (const char *name, const char *title, Int_t nbinsx, const Double_t *xbins);  Constructor for variable bin size histograms using an input array of type double. ;  ;  TH1 (const char *name, const char *title, Int_t nbinsx, const Float_t *xbins);  Constructor for variable bin size histograms using an input array of type float. ;  ;  TH1 (const char *name, const char *title, Int_t nbinsx, Double_t xlow, Double_t xup);  Constructor for fix bin size histograms. ;  ; virtual Int_t AutoP2FindLimits (Double_t min, Double_t max);  Buffer-based estimate of the histogram range using the power of 2 algorithm. ;  ; Int_t AxisChoice (Option_t *axis) const;  Choose an axis according to ""axis"". ;  ; virtual void DoFillN (Int_t ntimes, const Double_t *x, const Double_t *w, Int_t stride=1);  Internal method to fill histogram content from a vector called directly by TH1::BufferEmpty. ;  ; virtual Double_t DoIntegral (Int_t ix1, Int_t ix2, Int_t iy1, Int_t iy2, Int_t iz1, Int_t iz2, Double_t &err, Option_t *opt, Bool_t doerr=kFALSE) const;  Internal function compute integral and optionally the error between the limits specified by the bin number values working for all histograms (1D, 2D and 3D) ;  ; virtual Bool_t FindNewAxisLimits (const TAxis *axis, const Double_t point, Double_t &newMin, Double_t &newMax);  finds new limits for the axis so that point is within the range and the limits are compatible with the previous ones (see TH1::Merge). ;  ; UInt_t GetAxisLabelStatus () const;  Internal function used in TH1::Fill to see ",MatchSource.WIKI,doc/master/classTH3C.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH3C.html
Integrability,depend,depending,"al of bin contents. ;  ; virtual Double_t IntegralAndError (Int_t binx1, Int_t binx2, Int_t biny1, Int_t biny2, Int_t binz1, Int_t binz2, Double_t &err, Option_t *option="""") const;  Return integral of bin contents in range [binx1,binx2],[biny1,biny2],[binz1,binz2] for a 3-D histogram. ;  ; Double_t Interpolate (Double_t x, Double_t y, Double_t z) const override;  Given a point P(x,y,z), Interpolate approximates the value via trilinear interpolation based on the 8 nearest bin center points (corner of the cube surrounding the points) The Algorithm is described in http://en.wikipedia.org/wiki/Trilinear_interpolation The given values (x,y,z) must be between first bin center and last bin center for each coordinate: ;  ; Double_t KolmogorovTest (const TH1 *h2, Option_t *option="""") const override;  Statistical test of compatibility in shape between THIS histogram and h2, using Kolmogorov test. ;  ; virtual TH1 * Project3D (Option_t *option=""x"") const;  Project a 3-d histogram into 1 or 2-d histograms depending on the option parameter, which may contain a combination of the characters x,y,z,e. ;  ; virtual TProfile2D * Project3DProfile (Option_t *option=""xy"") const;  Project a 3-d histogram into a 2-d profile histograms depending on the option parameter option may contain a combination of the characters x,y,z option = ""xy"" return the x versus y projection into a TProfile2D histogram option = ""yx"" return the y versus x projection into a TProfile2D histogram option = ""xz"" return the x versus z projection into a TProfile2D histogram option = ""zx"" return the z versus x projection into a TProfile2D histogram option = ""yz"" return the y versus z projection into a TProfile2D histogram option = ""zy"" return the z versus y projection into a TProfile2D histogram NB: the notation ""a vs b"" means ""a"" vertical and ""b"" horizontal. ;  ; virtual TH1D * ProjectionX (const char *name=""_px"", Int_t iymin=0, Int_t iymax=-1, Int_t izmin=0, Int_t izmax=-1, Option_t *option="""") const;  Project a 3-D h",MatchSource.WIKI,doc/master/classTH3C.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH3C.html
Modifiability,variab,variable,". ROOT: TH3C Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Friends |; List of all members ; TH3C Class ReferenceHistogram Library » Histogram classes. ; 3-D histogram with a byte per channel (see TH1 documentation) ; Definition at line 157 of file TH3.h. Public Member Functions;  TH3C ();  Constructor. ;  ;  TH3C (const char *name, const char *title, Int_t nbinsx, const Double_t *xbins, Int_t nbinsy, const Double_t *ybins, Int_t nbinsz, const Double_t *zbins);  Constructor for variable bin size 3-D histograms. ;  ;  TH3C (const char *name, const char *title, Int_t nbinsx, const Float_t *xbins, Int_t nbinsy, const Float_t *ybins, Int_t nbinsz, const Float_t *zbins);  Constructor for variable bin size 3-D histograms. ;  ;  TH3C (const char *name, const char *title, Int_t nbinsx, Double_t xlow, Double_t xup, Int_t nbinsy, Double_t ylow, Double_t yup, Int_t nbinsz, Double_t zlow, Double_t zup);  Constructor for fix bin size 3-D histograms (see TH3::TH3 for explanation of parameters) ;  ;  TH3C (const TH3C &h3c);  Copy constructor. ;  ;  ~TH3C () override;  Destructor. ;  ; void AddBinContent (Int_t bin) override;  Increment bin content by 1. ;  ; void AddBinContent (Int_t bin, Double_t w) override;  Increment bin content by w. ;  ; void AddBinContent (Int_t binx, Int_t biny, Int_t binz) override;  Increment 3D bin content by 1. ;  ; void AddBinContent (Int_t binx, Int_t biny, Int_t binz, Double_t w) override;  Increment 3D bin content by a weight w. ;  ; void Copy (TObject &hnew) const override;  Copy this 3-D histogram structure to newth3. ;  ; TClass * IsA () const override;  ; TH3C & operator= (const TH3C &h1);  Operator =. ;  ; void Reset (Option_t *option="""") override;  Reset this histogram: contents, errors, etc. ;  ; void SetBinsLength (Int_t n=-1) override;  Set total number of bins including under/o",MatchSource.WIKI,doc/master/classTH3C.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH3C.html
Performance,perform,performing,"s. ;  ; virtual Int_t BufferFill (Double_t x, Double_t y, Double_t z, Double_t w);  Accumulate arguments in buffer. ;  ; Int_t BufferFill (Double_t, Double_t) override;  accumulate arguments in buffer. ;  ; virtual Int_t BufferFill (Double_t, Double_t, Double_t);  ; void DoFillProfileProjection (TProfile2D *p2, const TAxis &a1, const TAxis &a2, const TAxis &a3, Int_t bin1, Int_t bin2, Int_t bin3, Int_t inBin, Bool_t useWeights) const;  internal function to fill the bins of the projected profile 2D histogram called from DoProjectProfile2D ;  ; virtual TH1D * DoProject1D (const char *name, const char *title, const TAxis *projAxis, const TAxis *axis1, const TAxis *axis2, bool computeErrors, bool originalRange, bool useUF, bool useOF) const;  internal methdod performing the projection to 1D histogram called from other TH3::DoProject1D ;  ; virtual TH1D * DoProject1D (const char *name, const char *title, int imin1, int imax1, int imin2, int imax2, const TAxis *projAxis, const TAxis *axis1, const TAxis *axis2, Option_t *option) const;  internal method performing the projection to 1D histogram called from TH3::Project3D ;  ; virtual TH2D * DoProject2D (const char *name, const char *title, const TAxis *projX, const TAxis *projY, bool computeErrors, bool originalRange, bool useUF, bool useOF) const;  internal method performing the projection to a 2D histogram called from TH3::Project3D ;  ; virtual TProfile2D * DoProjectProfile2D (const char *name, const char *title, const TAxis *projX, const TAxis *projY, bool originalRange, bool useUF, bool useOF) const;  internal method to project to a 2D Profile called from TH3::Project3DProfile ;  ; Int_t Fill (const char *, const char *, Double_t);  ; Int_t Fill (const char *, Double_t) override;  Increment bin with namex with a weight w. ;  ; Int_t Fill (const char *, Double_t, Double_t);  ; Int_t Fill (Double_t) override;  Invalid Fill method. ;  ; Int_t Fill (Double_t, const char *, Double_t);  ; Int_t Fill (Double_t, Double_t) over",MatchSource.WIKI,doc/master/classTH3C.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH3C.html
Security,hash,hash,"m of squares of weights. ;  ; void UseCurrentStyle () override;  Copy current attributes from/to current style. ;  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; TClass * IsA () const override;  ; Bool_t IsSortable () const override;  ; void ls (Option_t *option="""") const override;  List TNamed name and title. ;  ; TNamed & operator= (const TNamed &rhs);  TNamed assignment operator. ;  ; void Print (Option_t *option="""") const override;  Print TNamed name and title. ;  ; virtual Int_t Sizeof () const;  Return size of the TNamed part of the TObject. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to c",MatchSource.WIKI,doc/master/classTH3C.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH3C.html
Testability,test,test,"  Return integral of bin contents in range [binx1,binx2],[biny1,biny2],[binz1,binz2] for a 3-D histogram By default the integral is computed as the sum of bin contents in the range. ;  ; Double_t Integral (Option_t *option="""") const override;  Return integral of bin contents. ;  ; virtual Double_t IntegralAndError (Int_t binx1, Int_t binx2, Int_t biny1, Int_t biny2, Int_t binz1, Int_t binz2, Double_t &err, Option_t *option="""") const;  Return integral of bin contents in range [binx1,binx2],[biny1,biny2],[binz1,binz2] for a 3-D histogram. ;  ; Double_t Interpolate (Double_t x, Double_t y, Double_t z) const override;  Given a point P(x,y,z), Interpolate approximates the value via trilinear interpolation based on the 8 nearest bin center points (corner of the cube surrounding the points) The Algorithm is described in http://en.wikipedia.org/wiki/Trilinear_interpolation The given values (x,y,z) must be between first bin center and last bin center for each coordinate: ;  ; Double_t KolmogorovTest (const TH1 *h2, Option_t *option="""") const override;  Statistical test of compatibility in shape between THIS histogram and h2, using Kolmogorov test. ;  ; virtual TH1 * Project3D (Option_t *option=""x"") const;  Project a 3-d histogram into 1 or 2-d histograms depending on the option parameter, which may contain a combination of the characters x,y,z,e. ;  ; virtual TProfile2D * Project3DProfile (Option_t *option=""xy"") const;  Project a 3-d histogram into a 2-d profile histograms depending on the option parameter option may contain a combination of the characters x,y,z option = ""xy"" return the x versus y projection into a TProfile2D histogram option = ""yx"" return the y versus x projection into a TProfile2D histogram option = ""xz"" return the x versus z projection into a TProfile2D histogram option = ""zx"" return the z versus x projection into a TProfile2D histogram option = ""yz"" return the y versus z projection into a TProfile2D histogram option = ""zy"" return the z versus y projection",MatchSource.WIKI,doc/master/classTH3C.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH3C.html
Usability,clear,cleared,"ject. ;  ; virtual Bool_t CanExtendAllAxes () const;  Returns true if all axes are extendable. ;  ; virtual Double_t Chi2Test (const TH1 *h2, Option_t *option=""UU"", Double_t *res=nullptr) const;  \( \chi^{2} \) test for comparing weighted and unweighted histograms. ;  ; virtual Double_t Chi2TestX (const TH1 *h2, Double_t &chi2, Int_t &ndf, Int_t &igood, Option_t *option=""UU"", Double_t *res=nullptr) const;  The computation routine of the Chisquare test. ;  ; virtual Double_t Chisquare (TF1 *f1, Option_t *option="""") const;  Compute and return the chisquare of this histogram with respect to a function The chisquare is computed by weighting each histogram point by the bin error By default the full range of the histogram is used. ;  ; virtual void ClearUnderflowAndOverflow ();  Remove all the content from the underflow and overflow bins, without changing the number of entries After calling this method, every undeflow and overflow bins will have content 0.0 The Sumw2 is also cleared, since there is no more content in the bins. ;  ; TObject * Clone (const char *newname="""") const override;  Make a complete copy of the underlying object. ;  ; virtual Double_t ComputeIntegral (Bool_t onlyPositive=false);  Compute integral (normalized cumulative sum of bins) w/o under/overflows The result is stored in fIntegral and used by the GetRandom functions. ;  ; virtual void DirectoryAutoAdd (TDirectory *);  Perform the automatic addition of the histogram to the given directory. ;  ; Int_t DistancetoPrimitive (Int_t px, Int_t py) override;  Compute distance from point px,py to a line. ;  ; virtual Bool_t Divide (const TH1 *h1);  Divide this histogram by h1. ;  ; virtual Bool_t Divide (const TH1 *h1, const TH1 *h2, Double_t c1=1, Double_t c2=1, Option_t *option="""");  Replace contents of this histogram by the division of h1 by h2. ;  ; virtual Bool_t Divide (TF1 *f1, Double_t c1=1);  Performs the operation: this = this/(c1*f1) if errors are defined (see TH1::Sumw2), errors are also recalc",MatchSource.WIKI,doc/master/classTH3C.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH3C.html
Availability,error,error,"char *name, const char *title, const TAxis *projX, const TAxis *projY, bool computeErrors, bool originalRange, bool useUF, bool useOF)TH3protectedstatic; DoProjectProfile2D(const char *name, const char *title, const TAxis *projX, const TAxis *projY, bool originalRange, bool useUF, bool useOF) constTH3protectedvirtual; Draw(Option_t *option="""") overrideTH1virtual; DrawClass() constTObjectvirtual; DrawClone(Option_t *option="""") constTObjectvirtual; DrawCopy(Option_t *option="""", const char *name_postfix=""_copy"") constTH1virtual; DrawNormalized(Option_t *option="""", Double_t norm=1) constTH1virtual; DrawPanel()TH1virtual; Dump() constTObjectvirtual; EBinErrorOpt enum nameTH1; EDeprecatedStatusBits enum nameTObject; Error(const char *method, const char *msgfmt,...) constTObjectvirtual; EStatOverflows enum nameTH1; EStatusBits enum nameTH1; Eval(TF1 *f1, Option_t *option="""")TH1virtual; Execute(const char *method, const char *params, Int_t *error=nullptr)TObjectvirtual; Execute(TMethod *method, TObjArray *params, Int_t *error=nullptr)TObjectvirtual; ExecuteEvent(Int_t event, Int_t px, Int_t py) overrideTH1virtual; ExtendAxis(Double_t x, TAxis *axis)TH1virtual; fArrayTArrayD; Fatal(const char *method, const char *msgfmt,...) constTObjectvirtual; fBarOffsetTH1protected; fBarWidthTH1protected; fBinStatErrOptTH1protected; fBitsTObjectprivate; fBufferTH1protected; fBufferSizeTH1protected; fContourTH1protected; fDimensionTH1protected; fDirectoryTH1protected; fEntriesTH1protected; fFillColorTAttFillprotected; fFillStyleTAttFillprotected; FFT(TH1 *h_output, Option_t *option)TH1virtual; fFunctionsTH1protected; fgAddDirectoryTH1protectedstatic; fgBufferSizeTH1protectedstatic; fgDefaultSumw2TH1protectedstatic; fgDtorOnlyTObjectprivatestatic; fgObjectStatTObjectprivatestatic; fgStatOverflowsTH1protectedstatic; Fill(Double_t) overrideTH3protectedvirtual; Fill(Double_t, Double_t) overrideTH3inlineprotectedvirtual; Fill(const char *, Double_t) overrideTH3inlineprotectedvirtual; Fill(Doubl",MatchSource.WIKI,doc/master/classTH3D-members.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH3D-members.html
Modifiability,inherit,inherited,". ROOT: Member List. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. TH3D Member List. This is the complete list of members for TH3D, including all inherited members. AbstractMethod(const char *method) constTObject; Add(TF1 *h1, Double_t c1=1, Option_t *option="""")TH1virtual; Add(const TH1 *h1, Double_t c1=1)TH1virtual; Add(const TH1 *h, const TH1 *h2, Double_t c1=1, Double_t c2=1)TH1virtual; AddAt(Double_t c, Int_t i)TArrayD; AddBinContent(Int_t bin) overrideTH3Dinlinevirtual; AddBinContent(Int_t bin, Double_t w) overrideTH3Dinlinevirtual; AddBinContent(Int_t binx, Int_t biny, Int_t binz) overrideTH3Dinlinevirtual; AddBinContent(Int_t binx, Int_t biny, Int_t binz, Double_t w) overrideTH3Dinlinevirtual; AddDirectory(Bool_t add=kTRUE)TH1static; AddDirectoryStatus()TH1static; AddToTObjectTable(TObject *)TObjectprivatestatic; Adopt(Int_t n, Double_t *array)TArrayD; AndersonDarlingTest(const TH1 *h2, Option_t *option="""") constTH1virtual; AndersonDarlingTest(const TH1 *h2, Double_t &advalue) constTH1virtual; AppendPad(Option_t *option="""")TObjectvirtual; At(Int_t i) constTArrayDinline; AutoP2FindLimits(Double_t min, Double_t max)TH1protectedvirtual; AutoP2GetBins(Int_t n)TH1inlineprotectedstatic; AutoP2GetPower2(Double_t x, Bool_t next=kTRUE)TH1inlineprotectedstatic; AxisChoice(Option_t *axis) constTH1protected; BoundsOk(const char *where, Int_t at) constTArrayinlineprotected; Browse(TBrowser *b) overrideTH1virtual; BufferEmpty(Int_t action=0) overrideTH3virtual; BufferFill(Double_t x, Double_t y, Double_t z, Double_t w)TH3protectedvirtual; BufferFill(Double_t, Double_t) overrideTH3inlineprotectedvirtual; BufferFill(Double_t, Double_t, Double_t)TH3inlineprotectedvirtual; Build()TH1private; CanExtendAllAxes() constTH1virtual; CheckAxisLimits(const TAxis *a1, const TAxis *a2)TH1protectedstatic; CheckBinLabels(const TAxis *a1, const TAxis *a2)TH1protectedstatic; CheckBinLimits(const TAxis *a1, const TAxis *a2)TH1protectedstatic; CheckConsistenc",MatchSource.WIKI,doc/master/classTH3D-members.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH3D-members.html
Availability,error,errors,"har *title, Int_t nbinsx, Double_t xlow, Double_t xup, Int_t nbinsy, Double_t ylow, Double_t yup, Int_t nbinsz, Double_t zlow, Double_t zup);  Constructor for fix bin size 3-D histograms (see TH3::TH3 for explanation of parameters) ;  ;  TH3D (const TH3D &h3d);  Copy constructor. ;  ;  ~TH3D () override;  Destructor. ;  ; void AddBinContent (Int_t bin) override;  Increment bin content by 1. ;  ; void AddBinContent (Int_t bin, Double_t w) override;  Increment bin content by a weight w Passing an out-of-range bin leads to undefined behavior. ;  ; void AddBinContent (Int_t binx, Int_t biny, Int_t binz) override;  Increment 3D bin content by 1. ;  ; void AddBinContent (Int_t binx, Int_t biny, Int_t binz, Double_t w) override;  Increment 3D bin content by a weight w. ;  ; void Copy (TObject &hnew) const override;  Copy this 3-D histogram structure to newth3. ;  ; TClass * IsA () const override;  ; TH3D & operator= (const TH3D &h1);  Operator =. ;  ; void Reset (Option_t *option="""") override;  Reset this histogram: contents, errors, etc. ;  ; void SetBinsLength (Int_t n=-1) override;  Set total number of bins including under/overflow Reallocate bin contents array. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TH3D. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TH3;  ~TH3 () override;  Destructor. ;  ; Int_t BufferEmpty (Int_t action=0) override;  Fill histogram with all entries in the buffer. ;  ; virtual Int_t Fill (const char *namex, const char *namey, const char *namez, Double_t w);  Increment cell defined by namex,namey,namez by a weight w. ;  ; virtual Int_t Fill (const char *namex, const char *namey, Double_t z, Double_t w);  Increment cell defined by namex,namey,z by a weight w. ;  ; virtual Int_t Fill (const char *namex, Double_t y, const char *namez, Double_t w);  Increment cell defined by namex,y,namez by a weight w. ;  ; virtual Int_t Fill (const char *namex, Double_t y, Doubl",MatchSource.WIKI,doc/master/classTH3D.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH3D.html
Deployability,update,update," char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TArrayD; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TArray; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static TArray * ReadArray (TBuffer &b, const TClass *clReq);  Read TArray object from buffer. ;  ; static void WriteArray (TBuffer &b, const TArray *a);  Write TArray object to buffer. ;  . Protected Member Functions; Double_t RetrieveBinContent (Int_t bin) const override;  Raw retrieval of bin content on internal data structure see convention for numbering bins in TH1::GetBin. ;  ; void UpdateBinContent (Int_t bin, Double_t content) override;  Raw update of bin content on internal data structure see convention for numbering bins in TH1::GetBin. ;  ;  Protected Member Functions inherited from TH3;  TH3 ();  Default constructor. ;  ;  TH3 (const char *name, const char *title, Int_t nbinsx, const Double_t *xbins, Int_t nbinsy, const Double_t *ybins, Int_t nbinsz, const Double_t *zbins);  Constructor for variable bin size (along X, Y and Z axis) 3-D histograms using input arrays of type double. ;  ;  TH3 (const char *name, const char *title, Int_t nbinsx, const Float_t *xbins, Int_t nbinsy, const Float_t *ybins, Int_t nbinsz, const Float_t *zbins);  Constructor for variable bin size (along X, Y and Z axis) 3-D histograms using input arrays of type float. ;  ;  TH3 (const char *name, const char *title, Int_t nbinsx, Double_t xlow, Double_t xup, Int_t nbinsy, Double_t ylow, Double_t yup, Int_t nbinsz, Double_t zlow, Double_t zup);  Constructor for fix bin size 3-D histograms. ;  ; virtual Int_t BufferFill (Double_t x, Double_t y, Double_t z, Doubl",MatchSource.WIKI,doc/master/classTH3D.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH3D.html
Energy Efficiency,power,power,"Int_t Fill (Double_t) override;  Invalid Fill method. ;  ; Int_t Fill (Double_t, const char *, Double_t);  ; Int_t Fill (Double_t, Double_t) override;  Increment bin with abscissa X with a weight w. ;  ; Double_t Interpolate (Double_t x) const override;  Not yet implemented. ;  ; Double_t Interpolate (Double_t x, Double_t y) const override;  Not yet implemented. ;  ;  Protected Member Functions inherited from TH1;  TH1 ();  Histogram default constructor. ;  ;  TH1 (const char *name, const char *title, Int_t nbinsx, const Double_t *xbins);  Constructor for variable bin size histograms using an input array of type double. ;  ;  TH1 (const char *name, const char *title, Int_t nbinsx, const Float_t *xbins);  Constructor for variable bin size histograms using an input array of type float. ;  ;  TH1 (const char *name, const char *title, Int_t nbinsx, Double_t xlow, Double_t xup);  Constructor for fix bin size histograms. ;  ; virtual Int_t AutoP2FindLimits (Double_t min, Double_t max);  Buffer-based estimate of the histogram range using the power of 2 algorithm. ;  ; Int_t AxisChoice (Option_t *axis) const;  Choose an axis according to ""axis"". ;  ; virtual void DoFillN (Int_t ntimes, const Double_t *x, const Double_t *w, Int_t stride=1);  Internal method to fill histogram content from a vector called directly by TH1::BufferEmpty. ;  ; virtual Double_t DoIntegral (Int_t ix1, Int_t ix2, Int_t iy1, Int_t iy2, Int_t iz1, Int_t iz2, Double_t &err, Option_t *opt, Bool_t doerr=kFALSE) const;  Internal function compute integral and optionally the error between the limits specified by the bin number values working for all histograms (1D, 2D and 3D) ;  ; virtual Bool_t FindNewAxisLimits (const TAxis *axis, const Double_t point, Double_t &newMin, Double_t &newMax);  finds new limits for the axis so that point is within the range and the limits are compatible with the previous ones (see TH1::Merge). ;  ; UInt_t GetAxisLabelStatus () const;  Internal function used in TH1::Fill to see ",MatchSource.WIKI,doc/master/classTH3D.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH3D.html
Integrability,depend,depending,"al of bin contents. ;  ; virtual Double_t IntegralAndError (Int_t binx1, Int_t binx2, Int_t biny1, Int_t biny2, Int_t binz1, Int_t binz2, Double_t &err, Option_t *option="""") const;  Return integral of bin contents in range [binx1,binx2],[biny1,biny2],[binz1,binz2] for a 3-D histogram. ;  ; Double_t Interpolate (Double_t x, Double_t y, Double_t z) const override;  Given a point P(x,y,z), Interpolate approximates the value via trilinear interpolation based on the 8 nearest bin center points (corner of the cube surrounding the points) The Algorithm is described in http://en.wikipedia.org/wiki/Trilinear_interpolation The given values (x,y,z) must be between first bin center and last bin center for each coordinate: ;  ; Double_t KolmogorovTest (const TH1 *h2, Option_t *option="""") const override;  Statistical test of compatibility in shape between THIS histogram and h2, using Kolmogorov test. ;  ; virtual TH1 * Project3D (Option_t *option=""x"") const;  Project a 3-d histogram into 1 or 2-d histograms depending on the option parameter, which may contain a combination of the characters x,y,z,e. ;  ; virtual TProfile2D * Project3DProfile (Option_t *option=""xy"") const;  Project a 3-d histogram into a 2-d profile histograms depending on the option parameter option may contain a combination of the characters x,y,z option = ""xy"" return the x versus y projection into a TProfile2D histogram option = ""yx"" return the y versus x projection into a TProfile2D histogram option = ""xz"" return the x versus z projection into a TProfile2D histogram option = ""zx"" return the z versus x projection into a TProfile2D histogram option = ""yz"" return the y versus z projection into a TProfile2D histogram option = ""zy"" return the z versus y projection into a TProfile2D histogram NB: the notation ""a vs b"" means ""a"" vertical and ""b"" horizontal. ;  ; virtual TH1D * ProjectionX (const char *name=""_px"", Int_t iymin=0, Int_t iymax=-1, Int_t izmin=0, Int_t izmax=-1, Option_t *option="""") const;  Project a 3-D h",MatchSource.WIKI,doc/master/classTH3D.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH3D.html
Modifiability,variab,variable,". ROOT: TH3D Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Friends |; List of all members ; TH3D Class ReferenceHistogram Library » Histogram classes. ; 3-D histogram with a double per channel (see TH1 documentation) ; Definition at line 363 of file TH3.h. Public Member Functions;  TH3D ();  Constructor. ;  ;  TH3D (const char *name, const char *title, Int_t nbinsx, const Double_t *xbins, Int_t nbinsy, const Double_t *ybins, Int_t nbinsz, const Double_t *zbins);  Constructor for variable bin size 3-D histograms (see TH3::TH3 for explanation of parameters) ;  ;  TH3D (const char *name, const char *title, Int_t nbinsx, const Float_t *xbins, Int_t nbinsy, const Float_t *ybins, Int_t nbinsz, const Float_t *zbins);  Constructor for variable bin size 3-D histograms (see TH3::TH3 for explanation of parameters) ;  ;  TH3D (const char *name, const char *title, Int_t nbinsx, Double_t xlow, Double_t xup, Int_t nbinsy, Double_t ylow, Double_t yup, Int_t nbinsz, Double_t zlow, Double_t zup);  Constructor for fix bin size 3-D histograms (see TH3::TH3 for explanation of parameters) ;  ;  TH3D (const TH3D &h3d);  Copy constructor. ;  ;  ~TH3D () override;  Destructor. ;  ; void AddBinContent (Int_t bin) override;  Increment bin content by 1. ;  ; void AddBinContent (Int_t bin, Double_t w) override;  Increment bin content by a weight w Passing an out-of-range bin leads to undefined behavior. ;  ; void AddBinContent (Int_t binx, Int_t biny, Int_t binz) override;  Increment 3D bin content by 1. ;  ; void AddBinContent (Int_t binx, Int_t biny, Int_t binz, Double_t w) override;  Increment 3D bin content by a weight w. ;  ; void Copy (TObject &hnew) const override;  Copy this 3-D histogram structure to newth3. ;  ; TClass * IsA () const override;  ; TH3D & operator= (const TH3D &h1);  Operator =. ;  ; void Reset (Option_t *op",MatchSource.WIKI,doc/master/classTH3D.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH3D.html
Performance,perform,performing,"s. ;  ; virtual Int_t BufferFill (Double_t x, Double_t y, Double_t z, Double_t w);  Accumulate arguments in buffer. ;  ; Int_t BufferFill (Double_t, Double_t) override;  accumulate arguments in buffer. ;  ; virtual Int_t BufferFill (Double_t, Double_t, Double_t);  ; void DoFillProfileProjection (TProfile2D *p2, const TAxis &a1, const TAxis &a2, const TAxis &a3, Int_t bin1, Int_t bin2, Int_t bin3, Int_t inBin, Bool_t useWeights) const;  internal function to fill the bins of the projected profile 2D histogram called from DoProjectProfile2D ;  ; virtual TH1D * DoProject1D (const char *name, const char *title, const TAxis *projAxis, const TAxis *axis1, const TAxis *axis2, bool computeErrors, bool originalRange, bool useUF, bool useOF) const;  internal methdod performing the projection to 1D histogram called from other TH3::DoProject1D ;  ; virtual TH1D * DoProject1D (const char *name, const char *title, int imin1, int imax1, int imin2, int imax2, const TAxis *projAxis, const TAxis *axis1, const TAxis *axis2, Option_t *option) const;  internal method performing the projection to 1D histogram called from TH3::Project3D ;  ; virtual TH2D * DoProject2D (const char *name, const char *title, const TAxis *projX, const TAxis *projY, bool computeErrors, bool originalRange, bool useUF, bool useOF) const;  internal method performing the projection to a 2D histogram called from TH3::Project3D ;  ; virtual TProfile2D * DoProjectProfile2D (const char *name, const char *title, const TAxis *projX, const TAxis *projY, bool originalRange, bool useUF, bool useOF) const;  internal method to project to a 2D Profile called from TH3::Project3DProfile ;  ; Int_t Fill (const char *, const char *, Double_t);  ; Int_t Fill (const char *, Double_t) override;  Increment bin with namex with a weight w. ;  ; Int_t Fill (const char *, Double_t, Double_t);  ; Int_t Fill (Double_t) override;  Invalid Fill method. ;  ; Int_t Fill (Double_t, const char *, Double_t);  ; Int_t Fill (Double_t, Double_t) over",MatchSource.WIKI,doc/master/classTH3D.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH3D.html
Security,hash,hash,"m of squares of weights. ;  ; void UseCurrentStyle () override;  Copy current attributes from/to current style. ;  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; TClass * IsA () const override;  ; Bool_t IsSortable () const override;  ; void ls (Option_t *option="""") const override;  List TNamed name and title. ;  ; TNamed & operator= (const TNamed &rhs);  TNamed assignment operator. ;  ; void Print (Option_t *option="""") const override;  Print TNamed name and title. ;  ; virtual Int_t Sizeof () const;  Return size of the TNamed part of the TObject. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to c",MatchSource.WIKI,doc/master/classTH3D.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH3D.html
Testability,test,test,"  Return integral of bin contents in range [binx1,binx2],[biny1,biny2],[binz1,binz2] for a 3-D histogram By default the integral is computed as the sum of bin contents in the range. ;  ; Double_t Integral (Option_t *option="""") const override;  Return integral of bin contents. ;  ; virtual Double_t IntegralAndError (Int_t binx1, Int_t binx2, Int_t biny1, Int_t biny2, Int_t binz1, Int_t binz2, Double_t &err, Option_t *option="""") const;  Return integral of bin contents in range [binx1,binx2],[biny1,biny2],[binz1,binz2] for a 3-D histogram. ;  ; Double_t Interpolate (Double_t x, Double_t y, Double_t z) const override;  Given a point P(x,y,z), Interpolate approximates the value via trilinear interpolation based on the 8 nearest bin center points (corner of the cube surrounding the points) The Algorithm is described in http://en.wikipedia.org/wiki/Trilinear_interpolation The given values (x,y,z) must be between first bin center and last bin center for each coordinate: ;  ; Double_t KolmogorovTest (const TH1 *h2, Option_t *option="""") const override;  Statistical test of compatibility in shape between THIS histogram and h2, using Kolmogorov test. ;  ; virtual TH1 * Project3D (Option_t *option=""x"") const;  Project a 3-d histogram into 1 or 2-d histograms depending on the option parameter, which may contain a combination of the characters x,y,z,e. ;  ; virtual TProfile2D * Project3DProfile (Option_t *option=""xy"") const;  Project a 3-d histogram into a 2-d profile histograms depending on the option parameter option may contain a combination of the characters x,y,z option = ""xy"" return the x versus y projection into a TProfile2D histogram option = ""yx"" return the y versus x projection into a TProfile2D histogram option = ""xz"" return the x versus z projection into a TProfile2D histogram option = ""zx"" return the z versus x projection into a TProfile2D histogram option = ""yz"" return the y versus z projection into a TProfile2D histogram option = ""zy"" return the z versus y projection",MatchSource.WIKI,doc/master/classTH3D.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH3D.html
Usability,clear,cleared,"ject. ;  ; virtual Bool_t CanExtendAllAxes () const;  Returns true if all axes are extendable. ;  ; virtual Double_t Chi2Test (const TH1 *h2, Option_t *option=""UU"", Double_t *res=nullptr) const;  \( \chi^{2} \) test for comparing weighted and unweighted histograms. ;  ; virtual Double_t Chi2TestX (const TH1 *h2, Double_t &chi2, Int_t &ndf, Int_t &igood, Option_t *option=""UU"", Double_t *res=nullptr) const;  The computation routine of the Chisquare test. ;  ; virtual Double_t Chisquare (TF1 *f1, Option_t *option="""") const;  Compute and return the chisquare of this histogram with respect to a function The chisquare is computed by weighting each histogram point by the bin error By default the full range of the histogram is used. ;  ; virtual void ClearUnderflowAndOverflow ();  Remove all the content from the underflow and overflow bins, without changing the number of entries After calling this method, every undeflow and overflow bins will have content 0.0 The Sumw2 is also cleared, since there is no more content in the bins. ;  ; TObject * Clone (const char *newname="""") const override;  Make a complete copy of the underlying object. ;  ; virtual Double_t ComputeIntegral (Bool_t onlyPositive=false);  Compute integral (normalized cumulative sum of bins) w/o under/overflows The result is stored in fIntegral and used by the GetRandom functions. ;  ; virtual void DirectoryAutoAdd (TDirectory *);  Perform the automatic addition of the histogram to the given directory. ;  ; Int_t DistancetoPrimitive (Int_t px, Int_t py) override;  Compute distance from point px,py to a line. ;  ; virtual Bool_t Divide (const TH1 *h1);  Divide this histogram by h1. ;  ; virtual Bool_t Divide (const TH1 *h1, const TH1 *h2, Double_t c1=1, Double_t c2=1, Option_t *option="""");  Replace contents of this histogram by the division of h1 by h2. ;  ; virtual Bool_t Divide (TF1 *f1, Double_t c1=1);  Performs the operation: this = this/(c1*f1) if errors are defined (see TH1::Sumw2), errors are also recalc",MatchSource.WIKI,doc/master/classTH3D.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH3D.html
Availability,error,errors,"ion of parameters) ;  ;  TH3F (const char *name, const char *title, Int_t nbinsx, Double_t xlow, Double_t xup, Int_t nbinsy, Double_t ylow, Double_t yup, Int_t nbinsz, Double_t zlow, Double_t zup);  Constructor for fix bin size 3-D histograms (see TH3::TH3 for explanation of parameters) ;  ;  TH3F (const TH3F &h3f);  Copy constructor. ;  ;  ~TH3F () override;  Destructor. ;  ; void AddBinContent (Int_t bin) override;  Increment bin content by 1. ;  ; void AddBinContent (Int_t bin, Double_t w) override;  Increment bin content by a weight w. ;  ; void AddBinContent (Int_t binx, Int_t biny, Int_t binz) override;  Increment 3D bin content by 1. ;  ; void AddBinContent (Int_t binx, Int_t biny, Int_t binz, Double_t w) override;  Increment 3D bin content by a weight w. ;  ; void Copy (TObject &hnew) const override;  Copy this 3-D histogram structure to newth3. ;  ; TClass * IsA () const override;  ; TH3F & operator= (const TH3F &h1);  Operator =. ;  ; void Reset (Option_t *option="""") override;  Reset this histogram: contents, errors, etc. ;  ; void SetBinsLength (Int_t n=-1) override;  Set total number of bins including under/overflow Reallocate bin contents array. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TH3F. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TH3;  ~TH3 () override;  Destructor. ;  ; Int_t BufferEmpty (Int_t action=0) override;  Fill histogram with all entries in the buffer. ;  ; virtual Int_t Fill (const char *namex, const char *namey, const char *namez, Double_t w);  Increment cell defined by namex,namey,namez by a weight w. ;  ; virtual Int_t Fill (const char *namex, const char *namey, Double_t z, Double_t w);  Increment cell defined by namex,namey,z by a weight w. ;  ; virtual Int_t Fill (const char *namex, Double_t y, const char *namez, Double_t w);  Increment cell defined by namex,y,namez by a weight w. ;  ; virtual Int_t Fill (const char *namex, Double_t y, Doubl",MatchSource.WIKI,doc/master/classTH3F.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH3F.html
Deployability,update,update," char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TArrayF; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TArray; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static TArray * ReadArray (TBuffer &b, const TClass *clReq);  Read TArray object from buffer. ;  ; static void WriteArray (TBuffer &b, const TArray *a);  Write TArray object to buffer. ;  . Protected Member Functions; Double_t RetrieveBinContent (Int_t bin) const override;  Raw retrieval of bin content on internal data structure see convention for numbering bins in TH1::GetBin. ;  ; void UpdateBinContent (Int_t bin, Double_t content) override;  Raw update of bin content on internal data structure see convention for numbering bins in TH1::GetBin. ;  ;  Protected Member Functions inherited from TH3;  TH3 ();  Default constructor. ;  ;  TH3 (const char *name, const char *title, Int_t nbinsx, const Double_t *xbins, Int_t nbinsy, const Double_t *ybins, Int_t nbinsz, const Double_t *zbins);  Constructor for variable bin size (along X, Y and Z axis) 3-D histograms using input arrays of type double. ;  ;  TH3 (const char *name, const char *title, Int_t nbinsx, const Float_t *xbins, Int_t nbinsy, const Float_t *ybins, Int_t nbinsz, const Float_t *zbins);  Constructor for variable bin size (along X, Y and Z axis) 3-D histograms using input arrays of type float. ;  ;  TH3 (const char *name, const char *title, Int_t nbinsx, Double_t xlow, Double_t xup, Int_t nbinsy, Double_t ylow, Double_t yup, Int_t nbinsz, Double_t zlow, Double_t zup);  Constructor for fix bin size 3-D histograms. ;  ; virtual Int_t BufferFill (Double_t x, Double_t y, Double_t z, Doubl",MatchSource.WIKI,doc/master/classTH3F.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH3F.html
Energy Efficiency,power,power,"Int_t Fill (Double_t) override;  Invalid Fill method. ;  ; Int_t Fill (Double_t, const char *, Double_t);  ; Int_t Fill (Double_t, Double_t) override;  Increment bin with abscissa X with a weight w. ;  ; Double_t Interpolate (Double_t x) const override;  Not yet implemented. ;  ; Double_t Interpolate (Double_t x, Double_t y) const override;  Not yet implemented. ;  ;  Protected Member Functions inherited from TH1;  TH1 ();  Histogram default constructor. ;  ;  TH1 (const char *name, const char *title, Int_t nbinsx, const Double_t *xbins);  Constructor for variable bin size histograms using an input array of type double. ;  ;  TH1 (const char *name, const char *title, Int_t nbinsx, const Float_t *xbins);  Constructor for variable bin size histograms using an input array of type float. ;  ;  TH1 (const char *name, const char *title, Int_t nbinsx, Double_t xlow, Double_t xup);  Constructor for fix bin size histograms. ;  ; virtual Int_t AutoP2FindLimits (Double_t min, Double_t max);  Buffer-based estimate of the histogram range using the power of 2 algorithm. ;  ; Int_t AxisChoice (Option_t *axis) const;  Choose an axis according to ""axis"". ;  ; virtual void DoFillN (Int_t ntimes, const Double_t *x, const Double_t *w, Int_t stride=1);  Internal method to fill histogram content from a vector called directly by TH1::BufferEmpty. ;  ; virtual Double_t DoIntegral (Int_t ix1, Int_t ix2, Int_t iy1, Int_t iy2, Int_t iz1, Int_t iz2, Double_t &err, Option_t *opt, Bool_t doerr=kFALSE) const;  Internal function compute integral and optionally the error between the limits specified by the bin number values working for all histograms (1D, 2D and 3D) ;  ; virtual Bool_t FindNewAxisLimits (const TAxis *axis, const Double_t point, Double_t &newMin, Double_t &newMax);  finds new limits for the axis so that point is within the range and the limits are compatible with the previous ones (see TH1::Merge). ;  ; UInt_t GetAxisLabelStatus () const;  Internal function used in TH1::Fill to see ",MatchSource.WIKI,doc/master/classTH3F.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH3F.html
Integrability,depend,depending,"al of bin contents. ;  ; virtual Double_t IntegralAndError (Int_t binx1, Int_t binx2, Int_t biny1, Int_t biny2, Int_t binz1, Int_t binz2, Double_t &err, Option_t *option="""") const;  Return integral of bin contents in range [binx1,binx2],[biny1,biny2],[binz1,binz2] for a 3-D histogram. ;  ; Double_t Interpolate (Double_t x, Double_t y, Double_t z) const override;  Given a point P(x,y,z), Interpolate approximates the value via trilinear interpolation based on the 8 nearest bin center points (corner of the cube surrounding the points) The Algorithm is described in http://en.wikipedia.org/wiki/Trilinear_interpolation The given values (x,y,z) must be between first bin center and last bin center for each coordinate: ;  ; Double_t KolmogorovTest (const TH1 *h2, Option_t *option="""") const override;  Statistical test of compatibility in shape between THIS histogram and h2, using Kolmogorov test. ;  ; virtual TH1 * Project3D (Option_t *option=""x"") const;  Project a 3-d histogram into 1 or 2-d histograms depending on the option parameter, which may contain a combination of the characters x,y,z,e. ;  ; virtual TProfile2D * Project3DProfile (Option_t *option=""xy"") const;  Project a 3-d histogram into a 2-d profile histograms depending on the option parameter option may contain a combination of the characters x,y,z option = ""xy"" return the x versus y projection into a TProfile2D histogram option = ""yx"" return the y versus x projection into a TProfile2D histogram option = ""xz"" return the x versus z projection into a TProfile2D histogram option = ""zx"" return the z versus x projection into a TProfile2D histogram option = ""yz"" return the y versus z projection into a TProfile2D histogram option = ""zy"" return the z versus y projection into a TProfile2D histogram NB: the notation ""a vs b"" means ""a"" vertical and ""b"" horizontal. ;  ; virtual TH1D * ProjectionX (const char *name=""_px"", Int_t iymin=0, Int_t iymax=-1, Int_t izmin=0, Int_t izmax=-1, Option_t *option="""") const;  Project a 3-D h",MatchSource.WIKI,doc/master/classTH3F.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH3F.html
Modifiability,variab,variable,". ROOT: TH3F Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Friends |; List of all members ; TH3F Class ReferenceHistogram Library » Histogram classes. ; 3-D histogram with a float per channel (see TH1 documentation) ; Definition at line 317 of file TH3.h. Public Member Functions;  TH3F ();  Constructor. ;  ;  TH3F (const char *name, const char *title, Int_t nbinsx, const Double_t *xbins, Int_t nbinsy, const Double_t *ybins, Int_t nbinsz, const Double_t *zbins);  Constructor for variable bin size 3-D histograms (see TH3::TH3 for explanation of parameters) ;  ;  TH3F (const char *name, const char *title, Int_t nbinsx, const Float_t *xbins, Int_t nbinsy, const Float_t *ybins, Int_t nbinsz, const Float_t *zbins);  Constructor for variable bin size 3-D histograms (see TH3::TH3 for explanation of parameters) ;  ;  TH3F (const char *name, const char *title, Int_t nbinsx, Double_t xlow, Double_t xup, Int_t nbinsy, Double_t ylow, Double_t yup, Int_t nbinsz, Double_t zlow, Double_t zup);  Constructor for fix bin size 3-D histograms (see TH3::TH3 for explanation of parameters) ;  ;  TH3F (const TH3F &h3f);  Copy constructor. ;  ;  ~TH3F () override;  Destructor. ;  ; void AddBinContent (Int_t bin) override;  Increment bin content by 1. ;  ; void AddBinContent (Int_t bin, Double_t w) override;  Increment bin content by a weight w. ;  ; void AddBinContent (Int_t binx, Int_t biny, Int_t binz) override;  Increment 3D bin content by 1. ;  ; void AddBinContent (Int_t binx, Int_t biny, Int_t binz, Double_t w) override;  Increment 3D bin content by a weight w. ;  ; void Copy (TObject &hnew) const override;  Copy this 3-D histogram structure to newth3. ;  ; TClass * IsA () const override;  ; TH3F & operator= (const TH3F &h1);  Operator =. ;  ; void Reset (Option_t *option="""") override;  Reset this histogram: contents, error",MatchSource.WIKI,doc/master/classTH3F.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH3F.html
Performance,perform,performing,"s. ;  ; virtual Int_t BufferFill (Double_t x, Double_t y, Double_t z, Double_t w);  Accumulate arguments in buffer. ;  ; Int_t BufferFill (Double_t, Double_t) override;  accumulate arguments in buffer. ;  ; virtual Int_t BufferFill (Double_t, Double_t, Double_t);  ; void DoFillProfileProjection (TProfile2D *p2, const TAxis &a1, const TAxis &a2, const TAxis &a3, Int_t bin1, Int_t bin2, Int_t bin3, Int_t inBin, Bool_t useWeights) const;  internal function to fill the bins of the projected profile 2D histogram called from DoProjectProfile2D ;  ; virtual TH1D * DoProject1D (const char *name, const char *title, const TAxis *projAxis, const TAxis *axis1, const TAxis *axis2, bool computeErrors, bool originalRange, bool useUF, bool useOF) const;  internal methdod performing the projection to 1D histogram called from other TH3::DoProject1D ;  ; virtual TH1D * DoProject1D (const char *name, const char *title, int imin1, int imax1, int imin2, int imax2, const TAxis *projAxis, const TAxis *axis1, const TAxis *axis2, Option_t *option) const;  internal method performing the projection to 1D histogram called from TH3::Project3D ;  ; virtual TH2D * DoProject2D (const char *name, const char *title, const TAxis *projX, const TAxis *projY, bool computeErrors, bool originalRange, bool useUF, bool useOF) const;  internal method performing the projection to a 2D histogram called from TH3::Project3D ;  ; virtual TProfile2D * DoProjectProfile2D (const char *name, const char *title, const TAxis *projX, const TAxis *projY, bool originalRange, bool useUF, bool useOF) const;  internal method to project to a 2D Profile called from TH3::Project3DProfile ;  ; Int_t Fill (const char *, const char *, Double_t);  ; Int_t Fill (const char *, Double_t) override;  Increment bin with namex with a weight w. ;  ; Int_t Fill (const char *, Double_t, Double_t);  ; Int_t Fill (Double_t) override;  Invalid Fill method. ;  ; Int_t Fill (Double_t, const char *, Double_t);  ; Int_t Fill (Double_t, Double_t) over",MatchSource.WIKI,doc/master/classTH3F.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH3F.html
Security,hash,hash,"m of squares of weights. ;  ; void UseCurrentStyle () override;  Copy current attributes from/to current style. ;  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; TClass * IsA () const override;  ; Bool_t IsSortable () const override;  ; void ls (Option_t *option="""") const override;  List TNamed name and title. ;  ; TNamed & operator= (const TNamed &rhs);  TNamed assignment operator. ;  ; void Print (Option_t *option="""") const override;  Print TNamed name and title. ;  ; virtual Int_t Sizeof () const;  Return size of the TNamed part of the TObject. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to c",MatchSource.WIKI,doc/master/classTH3F.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH3F.html
Testability,test,test,"  Return integral of bin contents in range [binx1,binx2],[biny1,biny2],[binz1,binz2] for a 3-D histogram By default the integral is computed as the sum of bin contents in the range. ;  ; Double_t Integral (Option_t *option="""") const override;  Return integral of bin contents. ;  ; virtual Double_t IntegralAndError (Int_t binx1, Int_t binx2, Int_t biny1, Int_t biny2, Int_t binz1, Int_t binz2, Double_t &err, Option_t *option="""") const;  Return integral of bin contents in range [binx1,binx2],[biny1,biny2],[binz1,binz2] for a 3-D histogram. ;  ; Double_t Interpolate (Double_t x, Double_t y, Double_t z) const override;  Given a point P(x,y,z), Interpolate approximates the value via trilinear interpolation based on the 8 nearest bin center points (corner of the cube surrounding the points) The Algorithm is described in http://en.wikipedia.org/wiki/Trilinear_interpolation The given values (x,y,z) must be between first bin center and last bin center for each coordinate: ;  ; Double_t KolmogorovTest (const TH1 *h2, Option_t *option="""") const override;  Statistical test of compatibility in shape between THIS histogram and h2, using Kolmogorov test. ;  ; virtual TH1 * Project3D (Option_t *option=""x"") const;  Project a 3-d histogram into 1 or 2-d histograms depending on the option parameter, which may contain a combination of the characters x,y,z,e. ;  ; virtual TProfile2D * Project3DProfile (Option_t *option=""xy"") const;  Project a 3-d histogram into a 2-d profile histograms depending on the option parameter option may contain a combination of the characters x,y,z option = ""xy"" return the x versus y projection into a TProfile2D histogram option = ""yx"" return the y versus x projection into a TProfile2D histogram option = ""xz"" return the x versus z projection into a TProfile2D histogram option = ""zx"" return the z versus x projection into a TProfile2D histogram option = ""yz"" return the y versus z projection into a TProfile2D histogram option = ""zy"" return the z versus y projection",MatchSource.WIKI,doc/master/classTH3F.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH3F.html
Usability,clear,cleared,"ject. ;  ; virtual Bool_t CanExtendAllAxes () const;  Returns true if all axes are extendable. ;  ; virtual Double_t Chi2Test (const TH1 *h2, Option_t *option=""UU"", Double_t *res=nullptr) const;  \( \chi^{2} \) test for comparing weighted and unweighted histograms. ;  ; virtual Double_t Chi2TestX (const TH1 *h2, Double_t &chi2, Int_t &ndf, Int_t &igood, Option_t *option=""UU"", Double_t *res=nullptr) const;  The computation routine of the Chisquare test. ;  ; virtual Double_t Chisquare (TF1 *f1, Option_t *option="""") const;  Compute and return the chisquare of this histogram with respect to a function The chisquare is computed by weighting each histogram point by the bin error By default the full range of the histogram is used. ;  ; virtual void ClearUnderflowAndOverflow ();  Remove all the content from the underflow and overflow bins, without changing the number of entries After calling this method, every undeflow and overflow bins will have content 0.0 The Sumw2 is also cleared, since there is no more content in the bins. ;  ; TObject * Clone (const char *newname="""") const override;  Make a complete copy of the underlying object. ;  ; virtual Double_t ComputeIntegral (Bool_t onlyPositive=false);  Compute integral (normalized cumulative sum of bins) w/o under/overflows The result is stored in fIntegral and used by the GetRandom functions. ;  ; virtual void DirectoryAutoAdd (TDirectory *);  Perform the automatic addition of the histogram to the given directory. ;  ; Int_t DistancetoPrimitive (Int_t px, Int_t py) override;  Compute distance from point px,py to a line. ;  ; virtual Bool_t Divide (const TH1 *h1);  Divide this histogram by h1. ;  ; virtual Bool_t Divide (const TH1 *h1, const TH1 *h2, Double_t c1=1, Double_t c2=1, Option_t *option="""");  Replace contents of this histogram by the division of h1 by h2. ;  ; virtual Bool_t Divide (TF1 *f1, Double_t c1=1);  Performs the operation: this = this/(c1*f1) if errors are defined (see TH1::Sumw2), errors are also recalc",MatchSource.WIKI,doc/master/classTH3F.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH3F.html
Availability,error,errors," explanation of parameters) ;  ;  TH3I (const char *name, const char *title, Int_t nbinsx, Double_t xlow, Double_t xup, Int_t nbinsy, Double_t ylow, Double_t yup, Int_t nbinsz, Double_t zlow, Double_t zup);  Constructor for fix bin size 3-D histograms (see TH3::TH3 for explanation of parameters) ;  ;  TH3I (const TH3I &h3i);  Copy constructor. ;  ;  ~TH3I () override;  Destructor. ;  ; void AddBinContent (Int_t bin) override;  Increment bin content by 1. ;  ; void AddBinContent (Int_t bin, Double_t w) override;  Increment bin content by w. ;  ; void AddBinContent (Int_t binx, Int_t biny, Int_t binz) override;  Increment 3D bin content by 1. ;  ; void AddBinContent (Int_t binx, Int_t biny, Int_t binz, Double_t w) override;  Increment 3D bin content by a weight w. ;  ; void Copy (TObject &hnew) const override;  Copy this 3-D histogram structure to newth3. ;  ; TClass * IsA () const override;  ; TH3I & operator= (const TH3I &h1);  Operator =. ;  ; void Reset (Option_t *option="""") override;  Reset this histogram: contents, errors, etc. ;  ; void SetBinsLength (Int_t n=-1) override;  Set total number of bins including under/overflow Reallocate bin contents array. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TH3. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TH3;  ~TH3 () override;  Destructor. ;  ; Int_t BufferEmpty (Int_t action=0) override;  Fill histogram with all entries in the buffer. ;  ; virtual Int_t Fill (const char *namex, const char *namey, const char *namez, Double_t w);  Increment cell defined by namex,namey,namez by a weight w. ;  ; virtual Int_t Fill (const char *namex, const char *namey, Double_t z, Double_t w);  Increment cell defined by namex,namey,z by a weight w. ;  ; virtual Int_t Fill (const char *namex, Double_t y, const char *namez, Double_t w);  Increment cell defined by namex,y,namez by a weight w. ;  ; virtual Int_t Fill (const char *namex, Double_t y, Double",MatchSource.WIKI,doc/master/classTH3I.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH3I.html
Deployability,update,update," char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TArrayI; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TArray; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static TArray * ReadArray (TBuffer &b, const TClass *clReq);  Read TArray object from buffer. ;  ; static void WriteArray (TBuffer &b, const TArray *a);  Write TArray object to buffer. ;  . Protected Member Functions; Double_t RetrieveBinContent (Int_t bin) const override;  Raw retrieval of bin content on internal data structure see convention for numbering bins in TH1::GetBin. ;  ; void UpdateBinContent (Int_t bin, Double_t content) override;  Raw update of bin content on internal data structure see convention for numbering bins in TH1::GetBin. ;  ;  Protected Member Functions inherited from TH3;  TH3 ();  Default constructor. ;  ;  TH3 (const char *name, const char *title, Int_t nbinsx, const Double_t *xbins, Int_t nbinsy, const Double_t *ybins, Int_t nbinsz, const Double_t *zbins);  Constructor for variable bin size (along X, Y and Z axis) 3-D histograms using input arrays of type double. ;  ;  TH3 (const char *name, const char *title, Int_t nbinsx, const Float_t *xbins, Int_t nbinsy, const Float_t *ybins, Int_t nbinsz, const Float_t *zbins);  Constructor for variable bin size (along X, Y and Z axis) 3-D histograms using input arrays of type float. ;  ;  TH3 (const char *name, const char *title, Int_t nbinsx, Double_t xlow, Double_t xup, Int_t nbinsy, Double_t ylow, Double_t yup, Int_t nbinsz, Double_t zlow, Double_t zup);  Constructor for fix bin size 3-D histograms. ;  ; virtual Int_t BufferFill (Double_t x, Double_t y, Double_t z, Doubl",MatchSource.WIKI,doc/master/classTH3I.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH3I.html
Energy Efficiency,power,power,"Int_t Fill (Double_t) override;  Invalid Fill method. ;  ; Int_t Fill (Double_t, const char *, Double_t);  ; Int_t Fill (Double_t, Double_t) override;  Increment bin with abscissa X with a weight w. ;  ; Double_t Interpolate (Double_t x) const override;  Not yet implemented. ;  ; Double_t Interpolate (Double_t x, Double_t y) const override;  Not yet implemented. ;  ;  Protected Member Functions inherited from TH1;  TH1 ();  Histogram default constructor. ;  ;  TH1 (const char *name, const char *title, Int_t nbinsx, const Double_t *xbins);  Constructor for variable bin size histograms using an input array of type double. ;  ;  TH1 (const char *name, const char *title, Int_t nbinsx, const Float_t *xbins);  Constructor for variable bin size histograms using an input array of type float. ;  ;  TH1 (const char *name, const char *title, Int_t nbinsx, Double_t xlow, Double_t xup);  Constructor for fix bin size histograms. ;  ; virtual Int_t AutoP2FindLimits (Double_t min, Double_t max);  Buffer-based estimate of the histogram range using the power of 2 algorithm. ;  ; Int_t AxisChoice (Option_t *axis) const;  Choose an axis according to ""axis"". ;  ; virtual void DoFillN (Int_t ntimes, const Double_t *x, const Double_t *w, Int_t stride=1);  Internal method to fill histogram content from a vector called directly by TH1::BufferEmpty. ;  ; virtual Double_t DoIntegral (Int_t ix1, Int_t ix2, Int_t iy1, Int_t iy2, Int_t iz1, Int_t iz2, Double_t &err, Option_t *opt, Bool_t doerr=kFALSE) const;  Internal function compute integral and optionally the error between the limits specified by the bin number values working for all histograms (1D, 2D and 3D) ;  ; virtual Bool_t FindNewAxisLimits (const TAxis *axis, const Double_t point, Double_t &newMin, Double_t &newMax);  finds new limits for the axis so that point is within the range and the limits are compatible with the previous ones (see TH1::Merge). ;  ; UInt_t GetAxisLabelStatus () const;  Internal function used in TH1::Fill to see ",MatchSource.WIKI,doc/master/classTH3I.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH3I.html
Integrability,depend,depending,"al of bin contents. ;  ; virtual Double_t IntegralAndError (Int_t binx1, Int_t binx2, Int_t biny1, Int_t biny2, Int_t binz1, Int_t binz2, Double_t &err, Option_t *option="""") const;  Return integral of bin contents in range [binx1,binx2],[biny1,biny2],[binz1,binz2] for a 3-D histogram. ;  ; Double_t Interpolate (Double_t x, Double_t y, Double_t z) const override;  Given a point P(x,y,z), Interpolate approximates the value via trilinear interpolation based on the 8 nearest bin center points (corner of the cube surrounding the points) The Algorithm is described in http://en.wikipedia.org/wiki/Trilinear_interpolation The given values (x,y,z) must be between first bin center and last bin center for each coordinate: ;  ; Double_t KolmogorovTest (const TH1 *h2, Option_t *option="""") const override;  Statistical test of compatibility in shape between THIS histogram and h2, using Kolmogorov test. ;  ; virtual TH1 * Project3D (Option_t *option=""x"") const;  Project a 3-d histogram into 1 or 2-d histograms depending on the option parameter, which may contain a combination of the characters x,y,z,e. ;  ; virtual TProfile2D * Project3DProfile (Option_t *option=""xy"") const;  Project a 3-d histogram into a 2-d profile histograms depending on the option parameter option may contain a combination of the characters x,y,z option = ""xy"" return the x versus y projection into a TProfile2D histogram option = ""yx"" return the y versus x projection into a TProfile2D histogram option = ""xz"" return the x versus z projection into a TProfile2D histogram option = ""zx"" return the z versus x projection into a TProfile2D histogram option = ""yz"" return the y versus z projection into a TProfile2D histogram option = ""zy"" return the z versus y projection into a TProfile2D histogram NB: the notation ""a vs b"" means ""a"" vertical and ""b"" horizontal. ;  ; virtual TH1D * ProjectionX (const char *name=""_px"", Int_t iymin=0, Int_t iymax=-1, Int_t izmin=0, Int_t izmax=-1, Option_t *option="""") const;  Project a 3-D h",MatchSource.WIKI,doc/master/classTH3I.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH3I.html
Modifiability,variab,variable,". ROOT: TH3I Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Friends |; List of all members ; TH3I Class ReferenceHistogram Library » Histogram classes. ; 3-D histogram with an int per channel (see TH1 documentation) ; Definition at line 237 of file TH3.h. Public Member Functions;  TH3I ();  Constructor. ;  ;  TH3I (const char *name, const char *title, Int_t nbinsx, const Double_t *xbins, Int_t nbinsy, const Double_t *ybins, Int_t nbinsz, const Double_t *zbins);  Constructor for variable bin size 3-D histograms (see TH3::TH3 for explanation of parameters) ;  ;  TH3I (const char *name, const char *title, Int_t nbinsx, const Float_t *xbins, Int_t nbinsy, const Float_t *ybins, Int_t nbinsz, const Float_t *zbins);  Constructor for variable bin size 3-D histograms (see TH3::TH3 for explanation of parameters) ;  ;  TH3I (const char *name, const char *title, Int_t nbinsx, Double_t xlow, Double_t xup, Int_t nbinsy, Double_t ylow, Double_t yup, Int_t nbinsz, Double_t zlow, Double_t zup);  Constructor for fix bin size 3-D histograms (see TH3::TH3 for explanation of parameters) ;  ;  TH3I (const TH3I &h3i);  Copy constructor. ;  ;  ~TH3I () override;  Destructor. ;  ; void AddBinContent (Int_t bin) override;  Increment bin content by 1. ;  ; void AddBinContent (Int_t bin, Double_t w) override;  Increment bin content by w. ;  ; void AddBinContent (Int_t binx, Int_t biny, Int_t binz) override;  Increment 3D bin content by 1. ;  ; void AddBinContent (Int_t binx, Int_t biny, Int_t binz, Double_t w) override;  Increment 3D bin content by a weight w. ;  ; void Copy (TObject &hnew) const override;  Copy this 3-D histogram structure to newth3. ;  ; TClass * IsA () const override;  ; TH3I & operator= (const TH3I &h1);  Operator =. ;  ; void Reset (Option_t *option="""") override;  Reset this histogram: contents, errors, etc. ; ",MatchSource.WIKI,doc/master/classTH3I.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH3I.html
Performance,perform,performing,"s. ;  ; virtual Int_t BufferFill (Double_t x, Double_t y, Double_t z, Double_t w);  Accumulate arguments in buffer. ;  ; Int_t BufferFill (Double_t, Double_t) override;  accumulate arguments in buffer. ;  ; virtual Int_t BufferFill (Double_t, Double_t, Double_t);  ; void DoFillProfileProjection (TProfile2D *p2, const TAxis &a1, const TAxis &a2, const TAxis &a3, Int_t bin1, Int_t bin2, Int_t bin3, Int_t inBin, Bool_t useWeights) const;  internal function to fill the bins of the projected profile 2D histogram called from DoProjectProfile2D ;  ; virtual TH1D * DoProject1D (const char *name, const char *title, const TAxis *projAxis, const TAxis *axis1, const TAxis *axis2, bool computeErrors, bool originalRange, bool useUF, bool useOF) const;  internal methdod performing the projection to 1D histogram called from other TH3::DoProject1D ;  ; virtual TH1D * DoProject1D (const char *name, const char *title, int imin1, int imax1, int imin2, int imax2, const TAxis *projAxis, const TAxis *axis1, const TAxis *axis2, Option_t *option) const;  internal method performing the projection to 1D histogram called from TH3::Project3D ;  ; virtual TH2D * DoProject2D (const char *name, const char *title, const TAxis *projX, const TAxis *projY, bool computeErrors, bool originalRange, bool useUF, bool useOF) const;  internal method performing the projection to a 2D histogram called from TH3::Project3D ;  ; virtual TProfile2D * DoProjectProfile2D (const char *name, const char *title, const TAxis *projX, const TAxis *projY, bool originalRange, bool useUF, bool useOF) const;  internal method to project to a 2D Profile called from TH3::Project3DProfile ;  ; Int_t Fill (const char *, const char *, Double_t);  ; Int_t Fill (const char *, Double_t) override;  Increment bin with namex with a weight w. ;  ; Int_t Fill (const char *, Double_t, Double_t);  ; Int_t Fill (Double_t) override;  Invalid Fill method. ;  ; Int_t Fill (Double_t, const char *, Double_t);  ; Int_t Fill (Double_t, Double_t) over",MatchSource.WIKI,doc/master/classTH3I.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH3I.html
Security,hash,hash,"m of squares of weights. ;  ; void UseCurrentStyle () override;  Copy current attributes from/to current style. ;  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; TClass * IsA () const override;  ; Bool_t IsSortable () const override;  ; void ls (Option_t *option="""") const override;  List TNamed name and title. ;  ; TNamed & operator= (const TNamed &rhs);  TNamed assignment operator. ;  ; void Print (Option_t *option="""") const override;  Print TNamed name and title. ;  ; virtual Int_t Sizeof () const;  Return size of the TNamed part of the TObject. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to c",MatchSource.WIKI,doc/master/classTH3I.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH3I.html
Testability,test,test,"  Return integral of bin contents in range [binx1,binx2],[biny1,biny2],[binz1,binz2] for a 3-D histogram By default the integral is computed as the sum of bin contents in the range. ;  ; Double_t Integral (Option_t *option="""") const override;  Return integral of bin contents. ;  ; virtual Double_t IntegralAndError (Int_t binx1, Int_t binx2, Int_t biny1, Int_t biny2, Int_t binz1, Int_t binz2, Double_t &err, Option_t *option="""") const;  Return integral of bin contents in range [binx1,binx2],[biny1,biny2],[binz1,binz2] for a 3-D histogram. ;  ; Double_t Interpolate (Double_t x, Double_t y, Double_t z) const override;  Given a point P(x,y,z), Interpolate approximates the value via trilinear interpolation based on the 8 nearest bin center points (corner of the cube surrounding the points) The Algorithm is described in http://en.wikipedia.org/wiki/Trilinear_interpolation The given values (x,y,z) must be between first bin center and last bin center for each coordinate: ;  ; Double_t KolmogorovTest (const TH1 *h2, Option_t *option="""") const override;  Statistical test of compatibility in shape between THIS histogram and h2, using Kolmogorov test. ;  ; virtual TH1 * Project3D (Option_t *option=""x"") const;  Project a 3-d histogram into 1 or 2-d histograms depending on the option parameter, which may contain a combination of the characters x,y,z,e. ;  ; virtual TProfile2D * Project3DProfile (Option_t *option=""xy"") const;  Project a 3-d histogram into a 2-d profile histograms depending on the option parameter option may contain a combination of the characters x,y,z option = ""xy"" return the x versus y projection into a TProfile2D histogram option = ""yx"" return the y versus x projection into a TProfile2D histogram option = ""xz"" return the x versus z projection into a TProfile2D histogram option = ""zx"" return the z versus x projection into a TProfile2D histogram option = ""yz"" return the y versus z projection into a TProfile2D histogram option = ""zy"" return the z versus y projection",MatchSource.WIKI,doc/master/classTH3I.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH3I.html
Usability,clear,cleared,"ject. ;  ; virtual Bool_t CanExtendAllAxes () const;  Returns true if all axes are extendable. ;  ; virtual Double_t Chi2Test (const TH1 *h2, Option_t *option=""UU"", Double_t *res=nullptr) const;  \( \chi^{2} \) test for comparing weighted and unweighted histograms. ;  ; virtual Double_t Chi2TestX (const TH1 *h2, Double_t &chi2, Int_t &ndf, Int_t &igood, Option_t *option=""UU"", Double_t *res=nullptr) const;  The computation routine of the Chisquare test. ;  ; virtual Double_t Chisquare (TF1 *f1, Option_t *option="""") const;  Compute and return the chisquare of this histogram with respect to a function The chisquare is computed by weighting each histogram point by the bin error By default the full range of the histogram is used. ;  ; virtual void ClearUnderflowAndOverflow ();  Remove all the content from the underflow and overflow bins, without changing the number of entries After calling this method, every undeflow and overflow bins will have content 0.0 The Sumw2 is also cleared, since there is no more content in the bins. ;  ; TObject * Clone (const char *newname="""") const override;  Make a complete copy of the underlying object. ;  ; virtual Double_t ComputeIntegral (Bool_t onlyPositive=false);  Compute integral (normalized cumulative sum of bins) w/o under/overflows The result is stored in fIntegral and used by the GetRandom functions. ;  ; virtual void DirectoryAutoAdd (TDirectory *);  Perform the automatic addition of the histogram to the given directory. ;  ; Int_t DistancetoPrimitive (Int_t px, Int_t py) override;  Compute distance from point px,py to a line. ;  ; virtual Bool_t Divide (const TH1 *h1);  Divide this histogram by h1. ;  ; virtual Bool_t Divide (const TH1 *h1, const TH1 *h2, Double_t c1=1, Double_t c2=1, Option_t *option="""");  Replace contents of this histogram by the division of h1 by h2. ;  ; virtual Bool_t Divide (TF1 *f1, Double_t c1=1);  Performs the operation: this = this/(c1*f1) if errors are defined (see TH1::Sumw2), errors are also recalc",MatchSource.WIKI,doc/master/classTH3I.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH3I.html
Availability,error,errors," explanation of parameters) ;  ;  TH3L (const char *name, const char *title, Int_t nbinsx, Double_t xlow, Double_t xup, Int_t nbinsy, Double_t ylow, Double_t yup, Int_t nbinsz, Double_t zlow, Double_t zup);  Constructor for fix bin size 3-D histograms (see TH3::TH3 for explanation of parameters) ;  ;  TH3L (const TH3L &h3l);  Copy constructor. ;  ;  ~TH3L () override;  Destructor. ;  ; void AddBinContent (Int_t bin) override;  Increment bin content by 1. ;  ; void AddBinContent (Int_t bin, Double_t w) override;  Increment bin content by w. ;  ; void AddBinContent (Int_t binx, Int_t biny, Int_t binz) override;  Increment 3D bin content by 1. ;  ; void AddBinContent (Int_t binx, Int_t biny, Int_t binz, Double_t w) override;  Increment 3D bin content by a weight w. ;  ; void Copy (TObject &hnew) const override;  Copy this 3-D histogram structure to newth3. ;  ; TClass * IsA () const override;  ; TH3L & operator= (const TH3L &h1);  Operator =. ;  ; void Reset (Option_t *option="""") override;  Reset this histogram: contents, errors, etc. ;  ; void SetBinsLength (Int_t n=-1) override;  Set total number of bins including under/overflow Reallocate bin contents array. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TH3. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TH3;  ~TH3 () override;  Destructor. ;  ; Int_t BufferEmpty (Int_t action=0) override;  Fill histogram with all entries in the buffer. ;  ; virtual Int_t Fill (const char *namex, const char *namey, const char *namez, Double_t w);  Increment cell defined by namex,namey,namez by a weight w. ;  ; virtual Int_t Fill (const char *namex, const char *namey, Double_t z, Double_t w);  Increment cell defined by namex,namey,z by a weight w. ;  ; virtual Int_t Fill (const char *namex, Double_t y, const char *namez, Double_t w);  Increment cell defined by namex,y,namez by a weight w. ;  ; virtual Int_t Fill (const char *namex, Double_t y, Double",MatchSource.WIKI,doc/master/classTH3L.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH3L.html
Deployability,update,update,"har * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TArrayL64; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TArray; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static TArray * ReadArray (TBuffer &b, const TClass *clReq);  Read TArray object from buffer. ;  ; static void WriteArray (TBuffer &b, const TArray *a);  Write TArray object to buffer. ;  . Protected Member Functions; Double_t RetrieveBinContent (Int_t bin) const override;  Raw retrieval of bin content on internal data structure see convention for numbering bins in TH1::GetBin. ;  ; void UpdateBinContent (Int_t bin, Double_t content) override;  Raw update of bin content on internal data structure see convention for numbering bins in TH1::GetBin. ;  ;  Protected Member Functions inherited from TH3;  TH3 ();  Default constructor. ;  ;  TH3 (const char *name, const char *title, Int_t nbinsx, const Double_t *xbins, Int_t nbinsy, const Double_t *ybins, Int_t nbinsz, const Double_t *zbins);  Constructor for variable bin size (along X, Y and Z axis) 3-D histograms using input arrays of type double. ;  ;  TH3 (const char *name, const char *title, Int_t nbinsx, const Float_t *xbins, Int_t nbinsy, const Float_t *ybins, Int_t nbinsz, const Float_t *zbins);  Constructor for variable bin size (along X, Y and Z axis) 3-D histograms using input arrays of type float. ;  ;  TH3 (const char *name, const char *title, Int_t nbinsx, Double_t xlow, Double_t xup, Int_t nbinsy, Double_t ylow, Double_t yup, Int_t nbinsz, Double_t zlow, Double_t zup);  Constructor for fix bin size 3-D histograms. ;  ; virtual Int_t BufferFill (Double_t x, Double_t y, Double_t z, Doubl",MatchSource.WIKI,doc/master/classTH3L.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH3L.html
Energy Efficiency,power,power,"Int_t Fill (Double_t) override;  Invalid Fill method. ;  ; Int_t Fill (Double_t, const char *, Double_t);  ; Int_t Fill (Double_t, Double_t) override;  Increment bin with abscissa X with a weight w. ;  ; Double_t Interpolate (Double_t x) const override;  Not yet implemented. ;  ; Double_t Interpolate (Double_t x, Double_t y) const override;  Not yet implemented. ;  ;  Protected Member Functions inherited from TH1;  TH1 ();  Histogram default constructor. ;  ;  TH1 (const char *name, const char *title, Int_t nbinsx, const Double_t *xbins);  Constructor for variable bin size histograms using an input array of type double. ;  ;  TH1 (const char *name, const char *title, Int_t nbinsx, const Float_t *xbins);  Constructor for variable bin size histograms using an input array of type float. ;  ;  TH1 (const char *name, const char *title, Int_t nbinsx, Double_t xlow, Double_t xup);  Constructor for fix bin size histograms. ;  ; virtual Int_t AutoP2FindLimits (Double_t min, Double_t max);  Buffer-based estimate of the histogram range using the power of 2 algorithm. ;  ; Int_t AxisChoice (Option_t *axis) const;  Choose an axis according to ""axis"". ;  ; virtual void DoFillN (Int_t ntimes, const Double_t *x, const Double_t *w, Int_t stride=1);  Internal method to fill histogram content from a vector called directly by TH1::BufferEmpty. ;  ; virtual Double_t DoIntegral (Int_t ix1, Int_t ix2, Int_t iy1, Int_t iy2, Int_t iz1, Int_t iz2, Double_t &err, Option_t *opt, Bool_t doerr=kFALSE) const;  Internal function compute integral and optionally the error between the limits specified by the bin number values working for all histograms (1D, 2D and 3D) ;  ; virtual Bool_t FindNewAxisLimits (const TAxis *axis, const Double_t point, Double_t &newMin, Double_t &newMax);  finds new limits for the axis so that point is within the range and the limits are compatible with the previous ones (see TH1::Merge). ;  ; UInt_t GetAxisLabelStatus () const;  Internal function used in TH1::Fill to see ",MatchSource.WIKI,doc/master/classTH3L.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH3L.html
Integrability,depend,depending,"al of bin contents. ;  ; virtual Double_t IntegralAndError (Int_t binx1, Int_t binx2, Int_t biny1, Int_t biny2, Int_t binz1, Int_t binz2, Double_t &err, Option_t *option="""") const;  Return integral of bin contents in range [binx1,binx2],[biny1,biny2],[binz1,binz2] for a 3-D histogram. ;  ; Double_t Interpolate (Double_t x, Double_t y, Double_t z) const override;  Given a point P(x,y,z), Interpolate approximates the value via trilinear interpolation based on the 8 nearest bin center points (corner of the cube surrounding the points) The Algorithm is described in http://en.wikipedia.org/wiki/Trilinear_interpolation The given values (x,y,z) must be between first bin center and last bin center for each coordinate: ;  ; Double_t KolmogorovTest (const TH1 *h2, Option_t *option="""") const override;  Statistical test of compatibility in shape between THIS histogram and h2, using Kolmogorov test. ;  ; virtual TH1 * Project3D (Option_t *option=""x"") const;  Project a 3-d histogram into 1 or 2-d histograms depending on the option parameter, which may contain a combination of the characters x,y,z,e. ;  ; virtual TProfile2D * Project3DProfile (Option_t *option=""xy"") const;  Project a 3-d histogram into a 2-d profile histograms depending on the option parameter option may contain a combination of the characters x,y,z option = ""xy"" return the x versus y projection into a TProfile2D histogram option = ""yx"" return the y versus x projection into a TProfile2D histogram option = ""xz"" return the x versus z projection into a TProfile2D histogram option = ""zx"" return the z versus x projection into a TProfile2D histogram option = ""yz"" return the y versus z projection into a TProfile2D histogram option = ""zy"" return the z versus y projection into a TProfile2D histogram NB: the notation ""a vs b"" means ""a"" vertical and ""b"" horizontal. ;  ; virtual TH1D * ProjectionX (const char *name=""_px"", Int_t iymin=0, Int_t iymax=-1, Int_t izmin=0, Int_t izmax=-1, Option_t *option="""") const;  Project a 3-D h",MatchSource.WIKI,doc/master/classTH3L.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH3L.html
Modifiability,variab,variable,". ROOT: TH3L Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Friends |; List of all members ; TH3L Class ReferenceHistogram Library » Histogram classes. ; 3-D histogram with a long64 per channel (see TH1 documentation) ; Definition at line 278 of file TH3.h. Public Member Functions;  TH3L ();  Constructor. ;  ;  TH3L (const char *name, const char *title, Int_t nbinsx, const Double_t *xbins, Int_t nbinsy, const Double_t *ybins, Int_t nbinsz, const Double_t *zbins);  Constructor for variable bin size 3-D histograms (see TH3::TH3 for explanation of parameters) ;  ;  TH3L (const char *name, const char *title, Int_t nbinsx, const Float_t *xbins, Int_t nbinsy, const Float_t *ybins, Int_t nbinsz, const Float_t *zbins);  Constructor for variable bin size 3-D histograms (see TH3::TH3 for explanation of parameters) ;  ;  TH3L (const char *name, const char *title, Int_t nbinsx, Double_t xlow, Double_t xup, Int_t nbinsy, Double_t ylow, Double_t yup, Int_t nbinsz, Double_t zlow, Double_t zup);  Constructor for fix bin size 3-D histograms (see TH3::TH3 for explanation of parameters) ;  ;  TH3L (const TH3L &h3l);  Copy constructor. ;  ;  ~TH3L () override;  Destructor. ;  ; void AddBinContent (Int_t bin) override;  Increment bin content by 1. ;  ; void AddBinContent (Int_t bin, Double_t w) override;  Increment bin content by w. ;  ; void AddBinContent (Int_t binx, Int_t biny, Int_t binz) override;  Increment 3D bin content by 1. ;  ; void AddBinContent (Int_t binx, Int_t biny, Int_t binz, Double_t w) override;  Increment 3D bin content by a weight w. ;  ; void Copy (TObject &hnew) const override;  Copy this 3-D histogram structure to newth3. ;  ; TClass * IsA () const override;  ; TH3L & operator= (const TH3L &h1);  Operator =. ;  ; void Reset (Option_t *option="""") override;  Reset this histogram: contents, errors, etc. ",MatchSource.WIKI,doc/master/classTH3L.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH3L.html
Performance,perform,performing,"s. ;  ; virtual Int_t BufferFill (Double_t x, Double_t y, Double_t z, Double_t w);  Accumulate arguments in buffer. ;  ; Int_t BufferFill (Double_t, Double_t) override;  accumulate arguments in buffer. ;  ; virtual Int_t BufferFill (Double_t, Double_t, Double_t);  ; void DoFillProfileProjection (TProfile2D *p2, const TAxis &a1, const TAxis &a2, const TAxis &a3, Int_t bin1, Int_t bin2, Int_t bin3, Int_t inBin, Bool_t useWeights) const;  internal function to fill the bins of the projected profile 2D histogram called from DoProjectProfile2D ;  ; virtual TH1D * DoProject1D (const char *name, const char *title, const TAxis *projAxis, const TAxis *axis1, const TAxis *axis2, bool computeErrors, bool originalRange, bool useUF, bool useOF) const;  internal methdod performing the projection to 1D histogram called from other TH3::DoProject1D ;  ; virtual TH1D * DoProject1D (const char *name, const char *title, int imin1, int imax1, int imin2, int imax2, const TAxis *projAxis, const TAxis *axis1, const TAxis *axis2, Option_t *option) const;  internal method performing the projection to 1D histogram called from TH3::Project3D ;  ; virtual TH2D * DoProject2D (const char *name, const char *title, const TAxis *projX, const TAxis *projY, bool computeErrors, bool originalRange, bool useUF, bool useOF) const;  internal method performing the projection to a 2D histogram called from TH3::Project3D ;  ; virtual TProfile2D * DoProjectProfile2D (const char *name, const char *title, const TAxis *projX, const TAxis *projY, bool originalRange, bool useUF, bool useOF) const;  internal method to project to a 2D Profile called from TH3::Project3DProfile ;  ; Int_t Fill (const char *, const char *, Double_t);  ; Int_t Fill (const char *, Double_t) override;  Increment bin with namex with a weight w. ;  ; Int_t Fill (const char *, Double_t, Double_t);  ; Int_t Fill (Double_t) override;  Invalid Fill method. ;  ; Int_t Fill (Double_t, const char *, Double_t);  ; Int_t Fill (Double_t, Double_t) over",MatchSource.WIKI,doc/master/classTH3L.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH3L.html
Security,hash,hash,"m of squares of weights. ;  ; void UseCurrentStyle () override;  Copy current attributes from/to current style. ;  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; TClass * IsA () const override;  ; Bool_t IsSortable () const override;  ; void ls (Option_t *option="""") const override;  List TNamed name and title. ;  ; TNamed & operator= (const TNamed &rhs);  TNamed assignment operator. ;  ; void Print (Option_t *option="""") const override;  Print TNamed name and title. ;  ; virtual Int_t Sizeof () const;  Return size of the TNamed part of the TObject. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to c",MatchSource.WIKI,doc/master/classTH3L.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH3L.html
Testability,test,test,"  Return integral of bin contents in range [binx1,binx2],[biny1,biny2],[binz1,binz2] for a 3-D histogram By default the integral is computed as the sum of bin contents in the range. ;  ; Double_t Integral (Option_t *option="""") const override;  Return integral of bin contents. ;  ; virtual Double_t IntegralAndError (Int_t binx1, Int_t binx2, Int_t biny1, Int_t biny2, Int_t binz1, Int_t binz2, Double_t &err, Option_t *option="""") const;  Return integral of bin contents in range [binx1,binx2],[biny1,biny2],[binz1,binz2] for a 3-D histogram. ;  ; Double_t Interpolate (Double_t x, Double_t y, Double_t z) const override;  Given a point P(x,y,z), Interpolate approximates the value via trilinear interpolation based on the 8 nearest bin center points (corner of the cube surrounding the points) The Algorithm is described in http://en.wikipedia.org/wiki/Trilinear_interpolation The given values (x,y,z) must be between first bin center and last bin center for each coordinate: ;  ; Double_t KolmogorovTest (const TH1 *h2, Option_t *option="""") const override;  Statistical test of compatibility in shape between THIS histogram and h2, using Kolmogorov test. ;  ; virtual TH1 * Project3D (Option_t *option=""x"") const;  Project a 3-d histogram into 1 or 2-d histograms depending on the option parameter, which may contain a combination of the characters x,y,z,e. ;  ; virtual TProfile2D * Project3DProfile (Option_t *option=""xy"") const;  Project a 3-d histogram into a 2-d profile histograms depending on the option parameter option may contain a combination of the characters x,y,z option = ""xy"" return the x versus y projection into a TProfile2D histogram option = ""yx"" return the y versus x projection into a TProfile2D histogram option = ""xz"" return the x versus z projection into a TProfile2D histogram option = ""zx"" return the z versus x projection into a TProfile2D histogram option = ""yz"" return the y versus z projection into a TProfile2D histogram option = ""zy"" return the z versus y projection",MatchSource.WIKI,doc/master/classTH3L.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH3L.html
Usability,clear,cleared,"ject. ;  ; virtual Bool_t CanExtendAllAxes () const;  Returns true if all axes are extendable. ;  ; virtual Double_t Chi2Test (const TH1 *h2, Option_t *option=""UU"", Double_t *res=nullptr) const;  \( \chi^{2} \) test for comparing weighted and unweighted histograms. ;  ; virtual Double_t Chi2TestX (const TH1 *h2, Double_t &chi2, Int_t &ndf, Int_t &igood, Option_t *option=""UU"", Double_t *res=nullptr) const;  The computation routine of the Chisquare test. ;  ; virtual Double_t Chisquare (TF1 *f1, Option_t *option="""") const;  Compute and return the chisquare of this histogram with respect to a function The chisquare is computed by weighting each histogram point by the bin error By default the full range of the histogram is used. ;  ; virtual void ClearUnderflowAndOverflow ();  Remove all the content from the underflow and overflow bins, without changing the number of entries After calling this method, every undeflow and overflow bins will have content 0.0 The Sumw2 is also cleared, since there is no more content in the bins. ;  ; TObject * Clone (const char *newname="""") const override;  Make a complete copy of the underlying object. ;  ; virtual Double_t ComputeIntegral (Bool_t onlyPositive=false);  Compute integral (normalized cumulative sum of bins) w/o under/overflows The result is stored in fIntegral and used by the GetRandom functions. ;  ; virtual void DirectoryAutoAdd (TDirectory *);  Perform the automatic addition of the histogram to the given directory. ;  ; Int_t DistancetoPrimitive (Int_t px, Int_t py) override;  Compute distance from point px,py to a line. ;  ; virtual Bool_t Divide (const TH1 *h1);  Divide this histogram by h1. ;  ; virtual Bool_t Divide (const TH1 *h1, const TH1 *h2, Double_t c1=1, Double_t c2=1, Option_t *option="""");  Replace contents of this histogram by the division of h1 by h2. ;  ; virtual Bool_t Divide (TF1 *f1, Double_t c1=1);  Performs the operation: this = this/(c1*f1) if errors are defined (see TH1::Sumw2), errors are also recalc",MatchSource.WIKI,doc/master/classTH3L.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH3L.html
Availability,error,errors,"nst Float_t *zbins);  Constructor for variable bin size 3-D histograms. ;  ;  TH3S (const char *name, const char *title, Int_t nbinsx, Double_t xlow, Double_t xup, Int_t nbinsy, Double_t ylow, Double_t yup, Int_t nbinsz, Double_t zlow, Double_t zup);  Constructor for fix bin size 3-D histograms. ;  ;  TH3S (const TH3S &h3s);  Copy Constructor. ;  ;  ~TH3S () override;  Destructor. ;  ; void AddBinContent (Int_t bin) override;  Increment bin content by 1. ;  ; void AddBinContent (Int_t bin, Double_t w) override;  Increment bin content by w. ;  ; void AddBinContent (Int_t binx, Int_t biny, Int_t binz) override;  Increment 3D bin content by 1. ;  ; void AddBinContent (Int_t binx, Int_t biny, Int_t binz, Double_t w) override;  Increment 3D bin content by a weight w. ;  ; void Copy (TObject &hnew) const override;  Copy this 3-D histogram structure to newth3. ;  ; TClass * IsA () const override;  ; TH3S & operator= (const TH3S &h1);  Operator =. ;  ; void Reset (Option_t *option="""") override;  Reset this histogram: contents, errors, etc. ;  ; void SetBinsLength (Int_t n=-1) override;  Set total number of bins including under/overflow Reallocate bin contents array. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TH3S. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TH3;  ~TH3 () override;  Destructor. ;  ; Int_t BufferEmpty (Int_t action=0) override;  Fill histogram with all entries in the buffer. ;  ; virtual Int_t Fill (const char *namex, const char *namey, const char *namez, Double_t w);  Increment cell defined by namex,namey,namez by a weight w. ;  ; virtual Int_t Fill (const char *namex, const char *namey, Double_t z, Double_t w);  Increment cell defined by namex,namey,z by a weight w. ;  ; virtual Int_t Fill (const char *namex, Double_t y, const char *namez, Double_t w);  Increment cell defined by namex,y,namez by a weight w. ;  ; virtual Int_t Fill (const char *namex, Double_t y, Doubl",MatchSource.WIKI,doc/master/classTH3S.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH3S.html
Deployability,update,update," char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TArrayS; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TArray; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static TArray * ReadArray (TBuffer &b, const TClass *clReq);  Read TArray object from buffer. ;  ; static void WriteArray (TBuffer &b, const TArray *a);  Write TArray object to buffer. ;  . Protected Member Functions; Double_t RetrieveBinContent (Int_t bin) const override;  Raw retrieval of bin content on internal data structure see convention for numbering bins in TH1::GetBin. ;  ; void UpdateBinContent (Int_t bin, Double_t content) override;  Raw update of bin content on internal data structure see convention for numbering bins in TH1::GetBin. ;  ;  Protected Member Functions inherited from TH3;  TH3 ();  Default constructor. ;  ;  TH3 (const char *name, const char *title, Int_t nbinsx, const Double_t *xbins, Int_t nbinsy, const Double_t *ybins, Int_t nbinsz, const Double_t *zbins);  Constructor for variable bin size (along X, Y and Z axis) 3-D histograms using input arrays of type double. ;  ;  TH3 (const char *name, const char *title, Int_t nbinsx, const Float_t *xbins, Int_t nbinsy, const Float_t *ybins, Int_t nbinsz, const Float_t *zbins);  Constructor for variable bin size (along X, Y and Z axis) 3-D histograms using input arrays of type float. ;  ;  TH3 (const char *name, const char *title, Int_t nbinsx, Double_t xlow, Double_t xup, Int_t nbinsy, Double_t ylow, Double_t yup, Int_t nbinsz, Double_t zlow, Double_t zup);  Constructor for fix bin size 3-D histograms. ;  ; virtual Int_t BufferFill (Double_t x, Double_t y, Double_t z, Doubl",MatchSource.WIKI,doc/master/classTH3S.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH3S.html
Energy Efficiency,power,power,"Int_t Fill (Double_t) override;  Invalid Fill method. ;  ; Int_t Fill (Double_t, const char *, Double_t);  ; Int_t Fill (Double_t, Double_t) override;  Increment bin with abscissa X with a weight w. ;  ; Double_t Interpolate (Double_t x) const override;  Not yet implemented. ;  ; Double_t Interpolate (Double_t x, Double_t y) const override;  Not yet implemented. ;  ;  Protected Member Functions inherited from TH1;  TH1 ();  Histogram default constructor. ;  ;  TH1 (const char *name, const char *title, Int_t nbinsx, const Double_t *xbins);  Constructor for variable bin size histograms using an input array of type double. ;  ;  TH1 (const char *name, const char *title, Int_t nbinsx, const Float_t *xbins);  Constructor for variable bin size histograms using an input array of type float. ;  ;  TH1 (const char *name, const char *title, Int_t nbinsx, Double_t xlow, Double_t xup);  Constructor for fix bin size histograms. ;  ; virtual Int_t AutoP2FindLimits (Double_t min, Double_t max);  Buffer-based estimate of the histogram range using the power of 2 algorithm. ;  ; Int_t AxisChoice (Option_t *axis) const;  Choose an axis according to ""axis"". ;  ; virtual void DoFillN (Int_t ntimes, const Double_t *x, const Double_t *w, Int_t stride=1);  Internal method to fill histogram content from a vector called directly by TH1::BufferEmpty. ;  ; virtual Double_t DoIntegral (Int_t ix1, Int_t ix2, Int_t iy1, Int_t iy2, Int_t iz1, Int_t iz2, Double_t &err, Option_t *opt, Bool_t doerr=kFALSE) const;  Internal function compute integral and optionally the error between the limits specified by the bin number values working for all histograms (1D, 2D and 3D) ;  ; virtual Bool_t FindNewAxisLimits (const TAxis *axis, const Double_t point, Double_t &newMin, Double_t &newMax);  finds new limits for the axis so that point is within the range and the limits are compatible with the previous ones (see TH1::Merge). ;  ; UInt_t GetAxisLabelStatus () const;  Internal function used in TH1::Fill to see ",MatchSource.WIKI,doc/master/classTH3S.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH3S.html
Integrability,depend,depending,"al of bin contents. ;  ; virtual Double_t IntegralAndError (Int_t binx1, Int_t binx2, Int_t biny1, Int_t biny2, Int_t binz1, Int_t binz2, Double_t &err, Option_t *option="""") const;  Return integral of bin contents in range [binx1,binx2],[biny1,biny2],[binz1,binz2] for a 3-D histogram. ;  ; Double_t Interpolate (Double_t x, Double_t y, Double_t z) const override;  Given a point P(x,y,z), Interpolate approximates the value via trilinear interpolation based on the 8 nearest bin center points (corner of the cube surrounding the points) The Algorithm is described in http://en.wikipedia.org/wiki/Trilinear_interpolation The given values (x,y,z) must be between first bin center and last bin center for each coordinate: ;  ; Double_t KolmogorovTest (const TH1 *h2, Option_t *option="""") const override;  Statistical test of compatibility in shape between THIS histogram and h2, using Kolmogorov test. ;  ; virtual TH1 * Project3D (Option_t *option=""x"") const;  Project a 3-d histogram into 1 or 2-d histograms depending on the option parameter, which may contain a combination of the characters x,y,z,e. ;  ; virtual TProfile2D * Project3DProfile (Option_t *option=""xy"") const;  Project a 3-d histogram into a 2-d profile histograms depending on the option parameter option may contain a combination of the characters x,y,z option = ""xy"" return the x versus y projection into a TProfile2D histogram option = ""yx"" return the y versus x projection into a TProfile2D histogram option = ""xz"" return the x versus z projection into a TProfile2D histogram option = ""zx"" return the z versus x projection into a TProfile2D histogram option = ""yz"" return the y versus z projection into a TProfile2D histogram option = ""zy"" return the z versus y projection into a TProfile2D histogram NB: the notation ""a vs b"" means ""a"" vertical and ""b"" horizontal. ;  ; virtual TH1D * ProjectionX (const char *name=""_px"", Int_t iymin=0, Int_t iymax=-1, Int_t izmin=0, Int_t izmax=-1, Option_t *option="""") const;  Project a 3-D h",MatchSource.WIKI,doc/master/classTH3S.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH3S.html
Modifiability,variab,variable,". ROOT: TH3S Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Friends |; List of all members ; TH3S Class ReferenceHistogram Library » Histogram classes. ; 3-D histogram with a short per channel (see TH1 documentation) ; Definition at line 197 of file TH3.h. Public Member Functions;  TH3S ();  Constructor. ;  ;  TH3S (const char *name, const char *title, Int_t nbinsx, const Double_t *xbins, Int_t nbinsy, const Double_t *ybins, Int_t nbinsz, const Double_t *zbins);  Constructor for variable bin size 3-D histograms. ;  ;  TH3S (const char *name, const char *title, Int_t nbinsx, const Float_t *xbins, Int_t nbinsy, const Float_t *ybins, Int_t nbinsz, const Float_t *zbins);  Constructor for variable bin size 3-D histograms. ;  ;  TH3S (const char *name, const char *title, Int_t nbinsx, Double_t xlow, Double_t xup, Int_t nbinsy, Double_t ylow, Double_t yup, Int_t nbinsz, Double_t zlow, Double_t zup);  Constructor for fix bin size 3-D histograms. ;  ;  TH3S (const TH3S &h3s);  Copy Constructor. ;  ;  ~TH3S () override;  Destructor. ;  ; void AddBinContent (Int_t bin) override;  Increment bin content by 1. ;  ; void AddBinContent (Int_t bin, Double_t w) override;  Increment bin content by w. ;  ; void AddBinContent (Int_t binx, Int_t biny, Int_t binz) override;  Increment 3D bin content by 1. ;  ; void AddBinContent (Int_t binx, Int_t biny, Int_t binz, Double_t w) override;  Increment 3D bin content by a weight w. ;  ; void Copy (TObject &hnew) const override;  Copy this 3-D histogram structure to newth3. ;  ; TClass * IsA () const override;  ; TH3S & operator= (const TH3S &h1);  Operator =. ;  ; void Reset (Option_t *option="""") override;  Reset this histogram: contents, errors, etc. ;  ; void SetBinsLength (Int_t n=-1) override;  Set total number of bins including under/overflow Reallocate bin contents array. ;  ;",MatchSource.WIKI,doc/master/classTH3S.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH3S.html
Performance,perform,performing,"s. ;  ; virtual Int_t BufferFill (Double_t x, Double_t y, Double_t z, Double_t w);  Accumulate arguments in buffer. ;  ; Int_t BufferFill (Double_t, Double_t) override;  accumulate arguments in buffer. ;  ; virtual Int_t BufferFill (Double_t, Double_t, Double_t);  ; void DoFillProfileProjection (TProfile2D *p2, const TAxis &a1, const TAxis &a2, const TAxis &a3, Int_t bin1, Int_t bin2, Int_t bin3, Int_t inBin, Bool_t useWeights) const;  internal function to fill the bins of the projected profile 2D histogram called from DoProjectProfile2D ;  ; virtual TH1D * DoProject1D (const char *name, const char *title, const TAxis *projAxis, const TAxis *axis1, const TAxis *axis2, bool computeErrors, bool originalRange, bool useUF, bool useOF) const;  internal methdod performing the projection to 1D histogram called from other TH3::DoProject1D ;  ; virtual TH1D * DoProject1D (const char *name, const char *title, int imin1, int imax1, int imin2, int imax2, const TAxis *projAxis, const TAxis *axis1, const TAxis *axis2, Option_t *option) const;  internal method performing the projection to 1D histogram called from TH3::Project3D ;  ; virtual TH2D * DoProject2D (const char *name, const char *title, const TAxis *projX, const TAxis *projY, bool computeErrors, bool originalRange, bool useUF, bool useOF) const;  internal method performing the projection to a 2D histogram called from TH3::Project3D ;  ; virtual TProfile2D * DoProjectProfile2D (const char *name, const char *title, const TAxis *projX, const TAxis *projY, bool originalRange, bool useUF, bool useOF) const;  internal method to project to a 2D Profile called from TH3::Project3DProfile ;  ; Int_t Fill (const char *, const char *, Double_t);  ; Int_t Fill (const char *, Double_t) override;  Increment bin with namex with a weight w. ;  ; Int_t Fill (const char *, Double_t, Double_t);  ; Int_t Fill (Double_t) override;  Invalid Fill method. ;  ; Int_t Fill (Double_t, const char *, Double_t);  ; Int_t Fill (Double_t, Double_t) over",MatchSource.WIKI,doc/master/classTH3S.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH3S.html
Security,hash,hash,"m of squares of weights. ;  ; void UseCurrentStyle () override;  Copy current attributes from/to current style. ;  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; TClass * IsA () const override;  ; Bool_t IsSortable () const override;  ; void ls (Option_t *option="""") const override;  List TNamed name and title. ;  ; TNamed & operator= (const TNamed &rhs);  TNamed assignment operator. ;  ; void Print (Option_t *option="""") const override;  Print TNamed name and title. ;  ; virtual Int_t Sizeof () const;  Return size of the TNamed part of the TObject. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to c",MatchSource.WIKI,doc/master/classTH3S.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH3S.html
Testability,test,test,"  Return integral of bin contents in range [binx1,binx2],[biny1,biny2],[binz1,binz2] for a 3-D histogram By default the integral is computed as the sum of bin contents in the range. ;  ; Double_t Integral (Option_t *option="""") const override;  Return integral of bin contents. ;  ; virtual Double_t IntegralAndError (Int_t binx1, Int_t binx2, Int_t biny1, Int_t biny2, Int_t binz1, Int_t binz2, Double_t &err, Option_t *option="""") const;  Return integral of bin contents in range [binx1,binx2],[biny1,biny2],[binz1,binz2] for a 3-D histogram. ;  ; Double_t Interpolate (Double_t x, Double_t y, Double_t z) const override;  Given a point P(x,y,z), Interpolate approximates the value via trilinear interpolation based on the 8 nearest bin center points (corner of the cube surrounding the points) The Algorithm is described in http://en.wikipedia.org/wiki/Trilinear_interpolation The given values (x,y,z) must be between first bin center and last bin center for each coordinate: ;  ; Double_t KolmogorovTest (const TH1 *h2, Option_t *option="""") const override;  Statistical test of compatibility in shape between THIS histogram and h2, using Kolmogorov test. ;  ; virtual TH1 * Project3D (Option_t *option=""x"") const;  Project a 3-d histogram into 1 or 2-d histograms depending on the option parameter, which may contain a combination of the characters x,y,z,e. ;  ; virtual TProfile2D * Project3DProfile (Option_t *option=""xy"") const;  Project a 3-d histogram into a 2-d profile histograms depending on the option parameter option may contain a combination of the characters x,y,z option = ""xy"" return the x versus y projection into a TProfile2D histogram option = ""yx"" return the y versus x projection into a TProfile2D histogram option = ""xz"" return the x versus z projection into a TProfile2D histogram option = ""zx"" return the z versus x projection into a TProfile2D histogram option = ""yz"" return the y versus z projection into a TProfile2D histogram option = ""zy"" return the z versus y projection",MatchSource.WIKI,doc/master/classTH3S.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH3S.html
Usability,clear,cleared,"ject. ;  ; virtual Bool_t CanExtendAllAxes () const;  Returns true if all axes are extendable. ;  ; virtual Double_t Chi2Test (const TH1 *h2, Option_t *option=""UU"", Double_t *res=nullptr) const;  \( \chi^{2} \) test for comparing weighted and unweighted histograms. ;  ; virtual Double_t Chi2TestX (const TH1 *h2, Double_t &chi2, Int_t &ndf, Int_t &igood, Option_t *option=""UU"", Double_t *res=nullptr) const;  The computation routine of the Chisquare test. ;  ; virtual Double_t Chisquare (TF1 *f1, Option_t *option="""") const;  Compute and return the chisquare of this histogram with respect to a function The chisquare is computed by weighting each histogram point by the bin error By default the full range of the histogram is used. ;  ; virtual void ClearUnderflowAndOverflow ();  Remove all the content from the underflow and overflow bins, without changing the number of entries After calling this method, every undeflow and overflow bins will have content 0.0 The Sumw2 is also cleared, since there is no more content in the bins. ;  ; TObject * Clone (const char *newname="""") const override;  Make a complete copy of the underlying object. ;  ; virtual Double_t ComputeIntegral (Bool_t onlyPositive=false);  Compute integral (normalized cumulative sum of bins) w/o under/overflows The result is stored in fIntegral and used by the GetRandom functions. ;  ; virtual void DirectoryAutoAdd (TDirectory *);  Perform the automatic addition of the histogram to the given directory. ;  ; Int_t DistancetoPrimitive (Int_t px, Int_t py) override;  Compute distance from point px,py to a line. ;  ; virtual Bool_t Divide (const TH1 *h1);  Divide this histogram by h1. ;  ; virtual Bool_t Divide (const TH1 *h1, const TH1 *h2, Double_t c1=1, Double_t c2=1, Option_t *option="""");  Replace contents of this histogram by the division of h1 by h2. ;  ; virtual Bool_t Divide (TF1 *f1, Double_t c1=1);  Performs the operation: this = this/(c1*f1) if errors are defined (see TH1::Sumw2), errors are also recalc",MatchSource.WIKI,doc/master/classTH3S.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH3S.html
Availability,error,error,"object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Return",MatchSource.WIKI,doc/master/classTHaarMatrixT.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTHaarMatrixT.html
Integrability,message,message,"object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Return",MatchSource.WIKI,doc/master/classTHaarMatrixT.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTHaarMatrixT.html
Modifiability,inherit,inherited,". ROOT: THaarMatrixT< Element > Class Template Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Private Member Functions |; List of all members ; THaarMatrixT< Element > Class Template Reference. ; template<class Element>; class THaarMatrixT< Element >; Definition at line 122 of file TMatrixTLazy.h. Public Member Functions;  THaarMatrixT ();  ;  THaarMatrixT (Int_t n, Int_t no_cols=0);  ; virtual ~THaarMatrixT ();  ; TClass * IsA () const override;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TMatrixTLazy< Element >;  TMatrixTLazy ();  ;  TMatrixTLazy (Int_t nrows, Int_t ncols);  ;  TMatrixTLazy (Int_t row_lwb, Int_t row_upb, Int_t col_lwb, Int_t col_upb);  ;  ~TMatrixTLazy () override;  ; Int_t GetColLwb () const;  ; Int_t GetColUpb () const;  ; Int_t GetRowLwb () const;  ; Int_t GetRowUpb () const;  ; TClass * IsA () const override;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () ",MatchSource.WIKI,doc/master/classTHaarMatrixT.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTHaarMatrixT.html
Security,hash,hash," Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Returns name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual const char * GetTitle () const;  Returns title of object. ;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; virtual ULong_t Hash () const;  Return hash value for this object. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns kTRUE if object inherits from class ""classname"". ;  ; virtual Bool_t InheritsFrom (const TClass *cl) const;  Returns kTRUE if object inherits from TClass cl. ;  ; virtual void Inspect () const;  Dump contents of this object in a graphics canvas. ;  ; void InvertBit (UInt_t f);  ; Bool_t IsDestructed () const;  IsDestructed. ;  ; virtual Bool_t IsEqual (const TObject *obj) const;  Default equal comparison (objects are equal if they have the same address in memory). ;  ; virtual Bool_t IsFolder () const;  Returns kTRUE in case object contains browsable objects (like containers or lists of other objects). ;  ; R__ALWAYS_INLINE Bool_t",MatchSource.WIKI,doc/master/classTHaarMatrixT.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTHaarMatrixT.html
Availability,error,error,"ar *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual const char * GetTitle () const;  Returns title of object. ;  ; v",MatchSource.WIKI,doc/master/classTHashList.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTHashList.html
Energy Efficiency,reduce,reduce,"tual void PrintCollectionHeader (Option_t *option) const;  Print the collection header. ;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  . #include <THashList.h>. Inheritance diagram for THashList:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ THashList() [1/3]. THashList::THashList ; (; const THashList & ; ). privatedelete . ◆ THashList() [2/3]. THashList::THashList ; (; Int_t ; capacity = TCollection::kInitHashTableCapacity, . Int_t ; rehash = 0 . ). Create a THashList object. ; Capacity is the initial hashtable capacity (i.e. number of slots), by default kInitHashTableCapacity = 17, and rehash is the value at which a rehash will be triggered. I.e. when the average size of the linked lists at a slot becomes longer than rehash then the hashtable will be resized and refilled to reduce the collision rate to about 1. The higher the collision rate, i.e. the longer the linked lists, the longer lookup will take. If rehash=0 the table will NOT automatically be rehashed. Use Rehash() for manual rehashing.; WARNING !!! If the name of an object in the HashList is modified, The hashlist must be Rehashed ; Definition at line 43 of file THashList.cxx. ◆ THashList() [3/3]. THashList::THashList ; (; TObject * ; parent, . Int_t ; capacity = TCollection::kInitHashTableCapacity, . Int_t ; rehash = 0 . ). For backward compatibility only. Use other ctor. ; Definition at line 51 of file THashList.cxx. ◆ ~THashList(). THashList::~THashList ; (; ). virtual . Delete a hashlist. ; Objects are not deleted unless the THashList is the owner (set via SetOwner()). ; Definition at line 60 of file THashList.cxx. Member Function Documentation. ◆ AddAfter() [1/2]. void THashList::AddAfter ; (; const TObject * ; after, . TObject * ; obj . ). over",MatchSource.WIKI,doc/master/classTHashList.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTHashList.html
Integrability,message,message,"ar *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual const char * GetTitle () const;  Returns title of object. ;  ; v",MatchSource.WIKI,doc/master/classTHashList.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTHashList.html
Modifiability,inherit,inheriting,". ROOT: THashList Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Attributes |; Private Member Functions |; List of all members ; THashList Class ReferenceCore ROOT classes » Containers. ; THashList implements a hybrid collection class consisting of a hash table and a list to store TObject's. ; The hash table is used for quick access and lookup of objects while the list allows the objects to be ordered. The hash value is calculated using the value returned by the TObject's Hash() function. Each class inheriting from TObject can override Hash() as it sees fit. ; Definition at line 34 of file THashList.h. Public Member Functions;  THashList (Int_t capacity=TCollection::kInitHashTableCapacity, Int_t rehash=0);  Create a THashList object. ;  ;  THashList (TObject *parent, Int_t capacity=TCollection::kInitHashTableCapacity, Int_t rehash=0);  For backward compatibility only. Use other ctor. ;  ; virtual ~THashList ();  Delete a hashlist. ;  ; void AddAfter (const TObject *after, TObject *obj) override;  Insert object after object after in the list. ;  ; void AddAfter (TObjLink *after, TObject *obj) override;  Insert object after object after in the list. ;  ; void AddAt (TObject *obj, Int_t idx) override;  Insert object at location idx in the list. ;  ; void AddBefore (const TObject *before, TObject *obj) override;  Insert object before object before in the list. ;  ; void AddBefore (TObjLink *before, TObject *obj) override;  Insert object before object before in the list. ;  ; void AddFirst (TObject *obj) override;  Add object at the beginning of the list. ;  ; void AddFirst (TObject *obj, Option_t *opt) override;  Add object at the beginning of the list and also store option. ;  ; void AddLast (TObject *obj) override;  Add object at the end of the list. ;  ; void AddLast (TObject *obj, Option_t *opt) override;  Add object at the ",MatchSource.WIKI,doc/master/classTHashList.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTHashList.html
Performance,cache,cache,"ject *obj);  Add to the list of things to be cleaned up. ;  ; static TCollection * GetCurrentCollection ();  Return the globally accessible collection. ;  ; static void StartGarbageCollection ();  Set up for garbage collection. ;  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  . Protected Attributes; THashTable * fTable;  ;  Protected Attributes inherited from TList; Bool_t fAscending;  cache to speedup sequential calling of Before() and After() functions ;  ; TObjLinkWeakPtr_t fCache;  pointer to last entry in linked list ;  ; TObjLinkPtr_t fFirst;  ; TObjLinkPtr_t fLast;  pointer to first entry in linked list ;  ;  Protected Attributes inherited from TSeqCollection; Bool_t fSorted;  ;  Protected Attributes inherited from TCollection; TString fName;  ; Int_t fSize;  . Private Member Functions;  THashList (const THashList &)=delete;  ; THashList & operator= (const THashList &)=delete;  . Additional Inherited Members;  Public Types inherited from TList; typedef TListIter Iterator_t;  ;  Public Types inherited from TCollection; enum  { kInitCapacity = 16; , kInitHashTableCapacity = 17; };  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 ));",MatchSource.WIKI,doc/master/classTHashList.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTHashList.html
Safety,safe,safe,"er). ;  ; const TList * GetListForObject (const char *name) const;  Return the THashTable's list (bucket) in which obj can be found based on its hash; see THashTable::GetListForObject(). ;  ; const TList * GetListForObject (const TObject *obj) const;  Return the THashTable's list (bucket) in which obj can be found based on its hash; see THashTable::GetListForObject(). ;  ; TClass * IsA () const override;  ; void RecursiveRemove (TObject *obj) override;  Remove object from this collection and recursively remove the object from all other objects (and collections). ;  ; void Rehash (Int_t newCapacity);  Rehash the hashlist. ;  ; TObject * Remove (TObject *obj) override;  Remove object from the list. ;  ; TObject * Remove (TObjLink *lnk) override;  Remove object via its objlink from the list. ;  ; void Streamer (TBuffer &) override;  Stream all objects in the collection to or from the I/O buffer. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; bool UseRWLock (Bool_t enable=true) override;  Set this collection to use a RW lock upon access, making it thread safe. ;  ;  Public Member Functions inherited from TList;  TList ();  ; The argument is ignored Use the default constructor TList ()."") ;  ;  TList (TObject *) R__DEPRECATED(6;  ; virtual ~TList ();  Delete the list. ;  ; void Add (TObject *obj) override;  ; virtual void Add (TObject *obj, Option_t *opt);  ; void AddAfter (const TObject *after, TObject *obj) override;  Insert object after object after in the list. ;  ; void AddAt (TObject *obj, Int_t idx) override;  Insert object at position idx in the list. ;  ; void AddBefore (const TObject *before, TObject *obj) override;  Insert object before object before in the list. ;  ; void AddFirst (TObject *obj) override;  Add object at the beginning of the list. ;  ; void AddLast (TObject *obj) override;  Add object at the end of the list. ;  ; TObject * After (const TObject *obj) const override;  Returns the object after object obj. ;  ; TObject * At ",MatchSource.WIKI,doc/master/classTHashList.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTHashList.html
Security,hash,hash,". ROOT: THashList Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Attributes |; Private Member Functions |; List of all members ; THashList Class ReferenceCore ROOT classes » Containers. ; THashList implements a hybrid collection class consisting of a hash table and a list to store TObject's. ; The hash table is used for quick access and lookup of objects while the list allows the objects to be ordered. The hash value is calculated using the value returned by the TObject's Hash() function. Each class inheriting from TObject can override Hash() as it sees fit. ; Definition at line 34 of file THashList.h. Public Member Functions;  THashList (Int_t capacity=TCollection::kInitHashTableCapacity, Int_t rehash=0);  Create a THashList object. ;  ;  THashList (TObject *parent, Int_t capacity=TCollection::kInitHashTableCapacity, Int_t rehash=0);  For backward compatibility only. Use other ctor. ;  ; virtual ~THashList ();  Delete a hashlist. ;  ; void AddAfter (const TObject *after, TObject *obj) override;  Insert object after object after in the list. ;  ; void AddAfter (TObjLink *after, TObject *obj) override;  Insert object after object after in the list. ;  ; void AddAt (TObject *obj, Int_t idx) override;  Insert object at location idx in the list. ;  ; void AddBefore (const TObject *before, TObject *obj) override;  Insert object before object before in the list. ;  ; void AddBefore (TObjLink *before, TObject *obj) override;  Insert object before object before in the list. ;  ; void AddFirst (TObject *obj) override;  Add object at the beginning of the list. ;  ; void AddFirst (TObject *obj, Option_t *opt) override;  Add object at the beginning of the list and also store option. ;  ; void AddLast (TObject *obj) override;  Add object at the end of the list. ;  ; void AddLast (TObject *obj, Option_t *opt) override;  Add object at the ",MatchSource.WIKI,doc/master/classTHashList.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTHashList.html
Testability,test,test,"ity slots and refills the table. Use AverageCollisions() to check if you need to rehash. ; Definition at line 368 of file THashList.cxx. ◆ Remove() [1/2]. TObject * THashList::Remove ; (; TObject * ; obj). overridevirtual . Remove object from the list. ; Implements TCollection.; Reimplemented in TListOfDataMembers, TListOfEnums, TListOfEnumsWithLock, TListOfFunctions, and TListOfFunctionTemplates.; Definition at line 378 of file THashList.cxx. ◆ Remove() [2/2]. TObject * THashList::Remove ; (; TObjLink * ; lnk). overridevirtual . Remove object via its objlink from the list. ; Reimplemented from TList.; Reimplemented in TListOfDataMembers, TListOfEnums, TListOfEnumsWithLock, TListOfFunctions, and TListOfFunctionTemplates.; Definition at line 391 of file THashList.cxx. ◆ Streamer(). void THashList::Streamer ; (; TBuffer & ; b). overridevirtual . Stream all objects in the collection to or from the I/O buffer. ; Reimplemented from TCollection.; Reimplemented in TListOfDataMembers, TListOfEnums, TListOfEnumsWithLock, TListOfFunctions, and TListOfFunctionTemplates. ◆ StreamerNVirtual(). void THashList::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 72 of file THashList.h. ◆ UseRWLock(). bool THashList::UseRWLock ; (; Bool_t ; enable = true). overridevirtual . Set this collection to use a RW lock upon access, making it thread safe. ; Return the previous state.; Note: To test whether the usage is enabled do: collection->TestBit(TCollection::kUseRWLock); ; Reimplemented from TCollection.; Definition at line 409 of file THashList.cxx. Member Data Documentation. ◆ fTable. THashTable* THashList::fTable. protected . Definition at line 37 of file THashList.h. Libraries for THashList:. [legend]; The documentation for this class was generated from the following files:; core/cont/inc/THashList.h; core/cont/src/THashList.cxx. THashList. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:43:48 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,doc/master/classTHashList.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTHashList.html
Availability,error,error,"ar *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual const char * GetTitle () const;  Returns title of object. ;  ; v",MatchSource.WIKI,doc/master/classTHashTable.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTHashTable.html
Energy Efficiency,reduce,reduce,"mber Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  ;  Protected Attributes inherited from TCollection; TString fName;  ; Int_t fSize;  . #include <THashTable.h>. Inheritance diagram for THashTable:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ THashTable() [1/2]. THashTable::THashTable ; (; const THashTable & ; ). privatedelete . ◆ THashTable() [2/2]. THashTable::THashTable ; (; Int_t ; capacity = TCollection::kInitHashTableCapacity, . Int_t ; rehashlevel = 0 . ). Create a THashTable object. ; Capacity is the initial hashtable capacity (i.e. number of slots), by default kInitHashTableCapacity = 17, and rehashlevel is the value at which a rehash will be triggered. I.e. when the average size of the linked lists at a slot becomes longer than rehashlevel then the hashtable will be resized and refilled to reduce the collision rate to about 1. The higher the collision rate, i.e. the longer the linked lists, the longer lookup will take. If rehashlevel=0 the table will NOT automatically be rehashed. Use Rehash() for manual rehashing. ; Definition at line 43 of file THashTable.cxx. ◆ ~THashTable(). THashTable::~THashTable ; (; ). virtual . Delete a hashtable. ; Objects are not deleted unless the THashTable is the owner (set via SetOwner()). ; Definition at line 65 of file THashTable.cxx. Member Function Documentation. ◆ Add(). void THashTable::Add ; (; TObject * ; obj). overridevirtual . Add object to the hash table. ; Its position in the table will be determined by the value returned by its Hash() function. ; Implements TCollection.; Definition at line 92 of file THashTable.cxx. ◆ AddAll(). void THashTable::AddAll ; (; const TCollection * ; col). overridevirtual . Add all objects from collection col to this collection. ; Implemented for more",MatchSource.WIKI,doc/master/classTHashTable.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTHashTable.html
Integrability,message,message,"ar *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual const char * GetTitle () const;  Returns title of object. ;  ; v",MatchSource.WIKI,doc/master/classTHashTable.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTHashTable.html
Modifiability,inherit,inheriting,". ROOT: THashTable Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Private Member Functions |; Private Attributes |; Friends |; List of all members ; THashTable Class ReferenceCore ROOT classes » Containers. ; THashTable implements a hash table to store TObject's. ; The hash value is calculated using the value returned by the TObject's Hash() function. Each class inheriting from TObject can override Hash() as it sees fit.; THashTable does not preserve the insertion order of the objects. If the insertion order is important AND fast retrieval is needed use THashList instead. ; Definition at line 35 of file THashTable.h. Public Member Functions;  THashTable (Int_t capacity=TCollection::kInitHashTableCapacity, Int_t rehash=0);  Create a THashTable object. ;  ; virtual ~THashTable ();  Delete a hashtable. ;  ; void Add (TObject *obj) override;  Add object to the hash table. ;  ; void AddAll (const TCollection *col) override;  Add all objects from collection col to this collection. ;  ; void AddBefore (const TObject *before, TObject *obj);  Add object to the hash table. ;  ; Float_t AverageCollisions () const;  ; void Clear (Option_t *option="""") override;  Remove all objects from the table. ;  ; Int_t Collisions (const char *name) const;  Returns the number of collisions for an object with a certain name (i.e. ;  ; Int_t Collisions (TObject *obj) const;  Returns the number of collisions for an object (i.e. ;  ; void Delete (Option_t *option="""") override;  Remove all objects from the table AND delete all heap based objects. ;  ; Bool_t Empty () const;  ; TObject * FindObject (const char *name) const override;  Find object using its name. ;  ; TObject * FindObject (const TObject *obj) const override;  Find object using its hash value (returned by its Hash() member). ;  ; const TList * GetListForObject (const char *name) const;  Return the TLis",MatchSource.WIKI,doc/master/classTHashTable.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTHashTable.html
Performance,perform,perform,"embers;  Public Types inherited from TCollection; enum  { kInitCapacity = 16; , kInitHashTableCapacity = 17; };  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Protected Types inherited from TCollection; enum  EStatusBits { kIsOwner = (1ULL << ( 14 )); , kUseRWLock = (1ULL << ( 16 )); };  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Protected Member Functions inherited from TCollection;  TCollection ();  ; virtual const char * GetCollectionEntryName (TObject *entry) const;  For given collection entry return the string that is used to identify the object and, potentially, perform wildcard/regexp filtering on. ;  ; virtual void PrintCollectionEntry (TObject *entry, Option_t *option, Int_t recurse) const;  Print the collection entry. ;  ; virtual void PrintCollectionHeader (Option_t *option) const;  Print the collection header. ;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  ;  Protected Attributes inherited from TCollection; TString fName;  ; Int_t fSize;  . #include <THashTable.h>. Inheritance diagram for THashTable:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ THashTable() [1/2]. THas",MatchSource.WIKI,doc/master/classTHashTable.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTHashTable.html
Safety,safe,safe,"de;  List (ls) all objects in this collection. ;  ; virtual TIterator * MakeReverseIterator () const;  ; Bool_t Notify () override;  'Notify' all objects in this collection. ;  ; TObject * operator() (const char *name) const;  Find an object in this collection by name. ;  ; void Paint (Option_t *option="""") override;  Paint all objects in this collection. ;  ; void RecursiveRemove (TObject *obj) override;  Remove object from this collection and recursively remove the object from all other objects (and collections). ;  ; void RemoveAll ();  ; virtual void RemoveAll (TCollection *col);  Remove all objects in collection col from this collection. ;  ; void SetCurrentCollection ();  Set this collection to be the globally accessible collection. ;  ; void SetName (const char *name);  ; virtual void SetOwner (Bool_t enable=kTRUE);  Set whether this collection is the owner (enable==true) of its content. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual bool UseRWLock (Bool_t enable=true);  Set this collection to use a RW lock upon access, making it thread safe. ;  ; Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const override;  Write all objects in this collection. ;  ; Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) override;  Write all objects in this collection. ;  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () co",MatchSource.WIKI,doc/master/classTHashTable.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTHashTable.html
Security,hash,hash,". ROOT: THashTable Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Private Member Functions |; Private Attributes |; Friends |; List of all members ; THashTable Class ReferenceCore ROOT classes » Containers. ; THashTable implements a hash table to store TObject's. ; The hash value is calculated using the value returned by the TObject's Hash() function. Each class inheriting from TObject can override Hash() as it sees fit.; THashTable does not preserve the insertion order of the objects. If the insertion order is important AND fast retrieval is needed use THashList instead. ; Definition at line 35 of file THashTable.h. Public Member Functions;  THashTable (Int_t capacity=TCollection::kInitHashTableCapacity, Int_t rehash=0);  Create a THashTable object. ;  ; virtual ~THashTable ();  Delete a hashtable. ;  ; void Add (TObject *obj) override;  Add object to the hash table. ;  ; void AddAll (const TCollection *col) override;  Add all objects from collection col to this collection. ;  ; void AddBefore (const TObject *before, TObject *obj);  Add object to the hash table. ;  ; Float_t AverageCollisions () const;  ; void Clear (Option_t *option="""") override;  Remove all objects from the table. ;  ; Int_t Collisions (const char *name) const;  Returns the number of collisions for an object with a certain name (i.e. ;  ; Int_t Collisions (TObject *obj) const;  Returns the number of collisions for an object (i.e. ;  ; void Delete (Option_t *option="""") override;  Remove all objects from the table AND delete all heap based objects. ;  ; Bool_t Empty () const;  ; TObject * FindObject (const char *name) const override;  Find object using its name. ;  ; TObject * FindObject (const TObject *obj) const override;  Find object using its hash value (returned by its Hash() member). ;  ; const TList * GetListForObject (const char *name) const;  Return the TLis",MatchSource.WIKI,doc/master/classTHashTable.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTHashTable.html
Availability,failure,failure,"in the file. ;  ; virtual Int_t GetBasketSize () const;  ; virtual TList * GetBrowsables ();  Returns (and, if 0, creates) browsable objects for this branch See TVirtualBranchBrowsable::FillListOfBrowsables. ;  ; ROOT::Experimental::Internal::TBulkBranchRead & GetBulkRead ();  ; virtual const char * GetClassName () const;  Return the name of the user class whose content is stored in this branch, if any. ;  ; Int_t GetCompressionAlgorithm () const;  ; Int_t GetCompressionLevel () const;  ; Int_t GetCompressionSettings () const;  ; TDirectory * GetDirectory () const;  ; Long64_t GetEntries () const;  ; virtual Int_t GetEntryExport (Long64_t entry, Int_t getall, TClonesArray *list, Int_t n);  Read all leaves of an entry and export buffers to real objects in a TClonesArray list. ;  ; Long64_t GetEntryNumber () const;  ; Int_t GetEntryOffsetLen () const;  ; Int_t GetEvent (Long64_t entry=0);  ; virtual Int_t GetExpectedType (TClass *&clptr, EDataType &type);  Fill expectedClass and expectedType with information on the data type of the object/values contained in this branch (and thus the type of pointers expected to be passed to Set[Branch]Address return 0 in case of success and > 0 in case of failure. ;  ; virtual TFile * GetFile (Int_t mode=0);  Return pointer to the file where branch buffers reside, returns 0 in case branch buffers reside in the same file as tree header. ;  ; const char * GetFileName () const;  ; Long64_t GetFirstEntry () const;  ; virtual TString GetFullName () const;  Return the 'full' name of the branch. ;  ; const char * GetIconName () const override;  Return icon name depending on type of branch. ;  ; TIOFeatures GetIOFeatures () const;  Returns the IO settings currently in use for this branch. ;  ; virtual TLeaf * GetLeaf (const char *name) const;  Return pointer to the 1st Leaf named name in thisBranch. ;  ; TObjArray * GetListOfBaskets ();  ; TObjArray * GetListOfBranches ();  ; TObjArray * GetListOfLeaves ();  ; virtual bool GetMakeClass () co",MatchSource.WIKI,doc/master/classTHbookBranch.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTHbookBranch.html
Deployability,update,updateSubBranches,"of the branch. ;  ; virtual void ResetAfterMerge (TFileMergeInfo *);  Reset a Branch. ;  ; virtual void ResetReadEntry ();  ; virtual void SetAutoDelete (bool autodel=true);  Set the automatic delete bit. ;  ; virtual void SetBasketSize (Int_t buffsize);  Set the basket size The function makes sure that the basket size is greater than fEntryOffsetlen. ;  ; virtual void SetBufferAddress (TBuffer *entryBuffer);  Set address of this branch directly from a TBuffer to avoid streaming. ;  ; void SetCompressionAlgorithm (Int_t algorithm=ROOT::RCompressionSetting::EAlgorithm::kUseGlobal);  Set compression algorithm. ;  ; void SetCompressionLevel (Int_t level=ROOT::RCompressionSetting::ELevel::kUseMin);  Set compression level. ;  ; void SetCompressionSettings (Int_t settings=ROOT::RCompressionSetting::EDefaults::kUseCompiledDefault);  Set compression settings. ;  ; virtual void SetEntryOffsetLen (Int_t len, bool updateSubBranches=false);  Update the default value for the branch's fEntryOffsetLen if and only if it was already non zero (and the new value is not zero) If updateExisting is true, also update all the existing branches. ;  ; virtual void SetFile (const char *filename);  Set file where this branch writes/reads its buffers. ;  ; virtual void SetFile (TFile *file=nullptr);  Set file where this branch writes/reads its buffers. ;  ; virtual void SetFirstEntry (Long64_t entry);  set the first entry number (case of TBranchSTL) ;  ; void SetIOFeatures (TIOFeatures &features);  ; virtual bool SetMakeClass (bool decomposeObj=true);  Set the branch in a mode where the object are decomposed (Also known as MakeClass mode). ;  ; virtual void SetObject (void *objadd);  Set object this branch is pointing to. ;  ; virtual void SetOffset (Int_t offset=0);  ; virtual void SetStatus (bool status=true);  Set branch status to Process or DoNotProcess. ;  ; virtual void SetTree (TTree *tree);  ; virtual void SetupAddresses ();  If the branch address is not set, we set all addresses startin",MatchSource.WIKI,doc/master/classTHbookBranch.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTHbookBranch.html
Integrability,interface,interface,". ROOT: THbookBranch Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Attributes |; List of all members ; THbookBranch Class ReferenceHistogram Library. ; HBOOK Branch. ; Definition at line 26 of file THbookBranch.h. Public Member Functions;  THbookBranch ();  ;  THbookBranch (TBranch *branch, const char *name, void *address, const char *leaflist, Int_t basketsize=32000, Int_t compress=ROOT::RCompressionSetting::EAlgorithm::kInherit);  ;  THbookBranch (TTree *tree, const char *name, void *address, const char *leaflist, Int_t basketsize=32000, Int_t compress=ROOT::RCompressionSetting::EAlgorithm::kInherit);  ;  ~THbookBranch () override;  ; void Browse (TBrowser *b) override;  Browser interface. ;  ; const char * GetBlockName () const;  ; Int_t GetEntry (Long64_t entry=0, Int_t getall=0) override;  get one entry from hbook ntuple ;  ; TClass * IsA () const override;  ; void SetAddress (void *addobj) override;  Set address of this branch See important remark in the header of THbookTree. ;  ; void SetBlockName (const char *name);  ; void SetEntries (Long64_t n) override;  Set the number of entries in this branch. ;  ; void Streamer (TBuffer &) override;  Stream a class object. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TBranch;  TBranch ();  Default constructor. Used for I/O by default. ;  ;  TBranch (TBranch *parent, const char *name, void *address, const char *leaflist, Int_t basketsize=32000, Int_t compress=ROOT::RCompressionSetting::EAlgorithm::kInherit);  Create a Branch as a child of another Branch. ;  ;  TBranch (TTree *tree, const char *name, void *address, const char *leaflist, Int_t basketsize=32000, Int_t compress=ROOT::RCompressionSetting::EAlgorithm::kInherit);  Create a Branch as a child of a Tree. ;  ;  ~TBranch () override;  Destructor. ;  ; virtua",MatchSource.WIKI,doc/master/classTHbookBranch.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTHbookBranch.html
Modifiability,inherit,inherited,"kBranch (TBranch *branch, const char *name, void *address, const char *leaflist, Int_t basketsize=32000, Int_t compress=ROOT::RCompressionSetting::EAlgorithm::kInherit);  ;  THbookBranch (TTree *tree, const char *name, void *address, const char *leaflist, Int_t basketsize=32000, Int_t compress=ROOT::RCompressionSetting::EAlgorithm::kInherit);  ;  ~THbookBranch () override;  ; void Browse (TBrowser *b) override;  Browser interface. ;  ; const char * GetBlockName () const;  ; Int_t GetEntry (Long64_t entry=0, Int_t getall=0) override;  get one entry from hbook ntuple ;  ; TClass * IsA () const override;  ; void SetAddress (void *addobj) override;  Set address of this branch See important remark in the header of THbookTree. ;  ; void SetBlockName (const char *name);  ; void SetEntries (Long64_t n) override;  Set the number of entries in this branch. ;  ; void Streamer (TBuffer &) override;  Stream a class object. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TBranch;  TBranch ();  Default constructor. Used for I/O by default. ;  ;  TBranch (TBranch *parent, const char *name, void *address, const char *leaflist, Int_t basketsize=32000, Int_t compress=ROOT::RCompressionSetting::EAlgorithm::kInherit);  Create a Branch as a child of another Branch. ;  ;  TBranch (TTree *tree, const char *name, void *address, const char *leaflist, Int_t basketsize=32000, Int_t compress=ROOT::RCompressionSetting::EAlgorithm::kInherit);  Create a Branch as a child of a Tree. ;  ;  ~TBranch () override;  Destructor. ;  ; virtual void AddBasket (TBasket &b, bool ondisk, Long64_t startEntry);  Add the basket to this branch. ;  ; virtual void AddLastBasket (Long64_t startEntry);  Add the start entry of the write basket (not yet created) ;  ; Int_t BackFill ();  Loop on all leaves of this branch to back fill Basket buffer. ;  ; virtual void DeleteBaskets (Option_t *option="""");  Loop on all branch baskets. ;  ; virtual void DropBaskets",MatchSource.WIKI,doc/master/classTHbookBranch.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTHbookBranch.html
Performance,cache,cached,"nt buffer) if option =""*"" includes all sub-branches of this branch too. ;  ; TBuffer * GetTransientBuffer (Int_t size);  Returns the transient buffer currently used by this TBranch for reading/writing baskets. ;  ; TTree * GetTree () const;  ; Int_t GetWriteBasket () const;  ; Long64_t GetZipBytes (Option_t *option="""") const;  Return total number of zip bytes in the branch if option =""*"" includes all sub-branches of this branch too. ;  ; bool IsAutoDelete () const;  Return true if an existing object in a TBranchObject must be deleted. ;  ; bool IsFolder () const override;  Return true if more than one leaf or browsables, false otherwise. ;  ; virtual void KeepCircular (Long64_t maxEntries);  keep a maximum of fMaxEntries in memory ;  ; virtual Int_t LoadBaskets ();  Baskets associated to this branch are forced to be in memory. ;  ; void Print (Option_t *option="""") const override;  Print TBranch parameters. ;  ; void PrintCacheInfo () const;  Print the information we have about which basket is currently cached and whether they have been 'used'/'read' from the cache. ;  ; virtual void ReadBasket (TBuffer &b);  Loop on all leaves of this branch to read Basket buffer. ;  ; virtual void Refresh (TBranch *b);  Refresh this branch using new information in b This function is called by TTree::Refresh. ;  ; virtual void Reset (Option_t *option="""");  Reset a Branch. ;  ; virtual void ResetAddress ();  Reset the address of the branch. ;  ; virtual void ResetAfterMerge (TFileMergeInfo *);  Reset a Branch. ;  ; virtual void ResetReadEntry ();  ; virtual void SetAutoDelete (bool autodel=true);  Set the automatic delete bit. ;  ; virtual void SetBasketSize (Int_t buffsize);  Set the basket size The function makes sure that the basket size is greater than fEntryOffsetlen. ;  ; virtual void SetBufferAddress (TBuffer *entryBuffer);  Set address of this branch directly from a TBuffer to avoid streaming. ;  ; void SetCompressionAlgorithm (Int_t algorithm=ROOT::RCompressionSetting::EAlgo",MatchSource.WIKI,doc/master/classTHbookBranch.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTHbookBranch.html
Safety,avoid,avoid,"rint (Option_t *option="""") const override;  Print TBranch parameters. ;  ; void PrintCacheInfo () const;  Print the information we have about which basket is currently cached and whether they have been 'used'/'read' from the cache. ;  ; virtual void ReadBasket (TBuffer &b);  Loop on all leaves of this branch to read Basket buffer. ;  ; virtual void Refresh (TBranch *b);  Refresh this branch using new information in b This function is called by TTree::Refresh. ;  ; virtual void Reset (Option_t *option="""");  Reset a Branch. ;  ; virtual void ResetAddress ();  Reset the address of the branch. ;  ; virtual void ResetAfterMerge (TFileMergeInfo *);  Reset a Branch. ;  ; virtual void ResetReadEntry ();  ; virtual void SetAutoDelete (bool autodel=true);  Set the automatic delete bit. ;  ; virtual void SetBasketSize (Int_t buffsize);  Set the basket size The function makes sure that the basket size is greater than fEntryOffsetlen. ;  ; virtual void SetBufferAddress (TBuffer *entryBuffer);  Set address of this branch directly from a TBuffer to avoid streaming. ;  ; void SetCompressionAlgorithm (Int_t algorithm=ROOT::RCompressionSetting::EAlgorithm::kUseGlobal);  Set compression algorithm. ;  ; void SetCompressionLevel (Int_t level=ROOT::RCompressionSetting::ELevel::kUseMin);  Set compression level. ;  ; void SetCompressionSettings (Int_t settings=ROOT::RCompressionSetting::EDefaults::kUseCompiledDefault);  Set compression settings. ;  ; virtual void SetEntryOffsetLen (Int_t len, bool updateSubBranches=false);  Update the default value for the branch's fEntryOffsetLen if and only if it was already non zero (and the new value is not zero) If updateExisting is true, also update all the existing branches. ;  ; virtual void SetFile (const char *filename);  Set file where this branch writes/reads its buffers. ;  ; virtual void SetFile (TFile *file=nullptr);  Set file where this branch writes/reads its buffers. ;  ; virtual void SetFirstEntry (Long64_t entry);  set the first entry nu",MatchSource.WIKI,doc/master/classTHbookBranch.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTHbookBranch.html
Security,hash,hash,"wise. ;  ; virtual void UpdateAddress ();  ; virtual void UpdateFile ();  Refresh the value of fDirectory (i.e. ;  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; TClass * IsA () const override;  ; Bool_t IsSortable () const override;  ; void ls (Option_t *option="""") const override;  List TNamed name and title. ;  ; TNamed & operator= (const TNamed &rhs);  TNamed assignment operator. ;  ; void Print (Option_t *option="""") const override;  Print TNamed name and title. ;  ; virtual void SetName (const char *name);  Set the name of the TNamed. ;  ; virtual void SetNameTitle (const char *name, const char *title);  Set all the TNamed parameters (name and title). ;  ; virtual void SetTitle (const char *title="""");  Set the title of the TNamed. ;  ; virtual Int_t Sizeof () const;  Return size of the TNamed part of the TObject. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;",MatchSource.WIKI,doc/master/classTHbookBranch.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTHbookBranch.html
Availability,error,error,"option="""");  Append graphics object to current pad. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; ",MatchSource.WIKI,doc/master/classTHbookFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTHbookFile.html
Integrability,interface,interface,". ROOT: THbookFile Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Attributes |; Static Protected Attributes |; List of all members ; THbookFile Class ReferenceHistogram Library. ; This class is an interface to the Hbook objects in Hbook files. ; Any Hbook object (1-D, 2-D, Profile, RWN or CWN can be read; NB: a THbookFile can only be used in READ mode Use the utility in $ROOTSYS/bin/h2root to convert Hbook to Root; Example of use: gSystem->Load(""libHbook"");; THbookFile f(""myfile.hbook"");; f.ls();; TH1F *h1 = (TH1F*)f.Get(1); //import histogram ID=1 in h1; h1->Fit(""gaus"");; THbookTree *T = (THbookTree*)f.Get(111); //import ntuple header; T->Print(); //show the Hbook ntuple variables; T->Draw(""x"",""y<0""); // as in normal TTree::Draw; THbookFile can be browsed via TBrowser. ; Definition at line 29 of file THbookFile.h. Public Member Functions;  THbookFile ();  the constructor ;  ;  THbookFile (const char *fname, Int_t lrecl=1024);  Constructor for an HBook file object. ;  ;  ~THbookFile () override;  destructor ;  ; void Browse (TBrowser *b) override;  to be implemented ;  ; virtual Bool_t cd (const char *dirname="""");  change directory to dirname ;  ; virtual void Close (Option_t *option="""");  Close the Hbook file. ;  ; virtual TObject * Convert1D (Int_t id);  Convert an Hbook 1-d histogram into a Root TH1F. ;  ; virtual TObject * Convert2D (Int_t id);  Convert an Hbook 2-d histogram into a Root TH2F. ;  ; virtual TFile * Convert2root (const char *rootname="""", Int_t lrecl=0, Option_t *option="""");  Convert this Hbook file to a Root file with name rootname. ;  ; virtual TObject * ConvertCWN (Int_t id);  Convert the Column-Wise-Ntuple id to a Root Tree. ;  ; virtual TObject * ConvertProfile (Int_t id);  Convert an Hbook profile histogram into a Root TProfile. ;  ; virtual TObject * ConvertRWN (Int_t id);  Convert the Row-Wise-Ntupl",MatchSource.WIKI,doc/master/classTHbookFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTHbookFile.html
Modifiability,variab,variables,". ROOT: THbookFile Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Attributes |; Static Protected Attributes |; List of all members ; THbookFile Class ReferenceHistogram Library. ; This class is an interface to the Hbook objects in Hbook files. ; Any Hbook object (1-D, 2-D, Profile, RWN or CWN can be read; NB: a THbookFile can only be used in READ mode Use the utility in $ROOTSYS/bin/h2root to convert Hbook to Root; Example of use: gSystem->Load(""libHbook"");; THbookFile f(""myfile.hbook"");; f.ls();; TH1F *h1 = (TH1F*)f.Get(1); //import histogram ID=1 in h1; h1->Fit(""gaus"");; THbookTree *T = (THbookTree*)f.Get(111); //import ntuple header; T->Print(); //show the Hbook ntuple variables; T->Draw(""x"",""y<0""); // as in normal TTree::Draw; THbookFile can be browsed via TBrowser. ; Definition at line 29 of file THbookFile.h. Public Member Functions;  THbookFile ();  the constructor ;  ;  THbookFile (const char *fname, Int_t lrecl=1024);  Constructor for an HBook file object. ;  ;  ~THbookFile () override;  destructor ;  ; void Browse (TBrowser *b) override;  to be implemented ;  ; virtual Bool_t cd (const char *dirname="""");  change directory to dirname ;  ; virtual void Close (Option_t *option="""");  Close the Hbook file. ;  ; virtual TObject * Convert1D (Int_t id);  Convert an Hbook 1-d histogram into a Root TH1F. ;  ; virtual TObject * Convert2D (Int_t id);  Convert an Hbook 2-d histogram into a Root TH2F. ;  ; virtual TFile * Convert2root (const char *rootname="""", Int_t lrecl=0, Option_t *option="""");  Convert this Hbook file to a Root file with name rootname. ;  ; virtual TObject * ConvertCWN (Int_t id);  Convert the Column-Wise-Ntuple id to a Root Tree. ;  ; virtual TObject * ConvertProfile (Int_t id);  Convert an Hbook profile histogram into a Root TProfile. ;  ; virtual TObject * ConvertRWN (Int_t id);  Convert the Row-Wise-Ntupl",MatchSource.WIKI,doc/master/classTHbookFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTHbookFile.html
Security,hash,hash," override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; TClass * IsA () const override;  ; Bool_t IsSortable () const override;  ; void ls (Option_t *option="""") const override;  List TNamed name and title. ;  ; TNamed & operator= (const TNamed &rhs);  TNamed assignment operator. ;  ; void Print (Option_t *option="""") const override;  Print TNamed name and title. ;  ; virtual void SetName (const char *name);  Set the name of the TNamed. ;  ; virtual void SetNameTitle (const char *name, const char *title);  Set all the TNamed parameters (name and title). ;  ; virtual void SetTitle (const char *title="""");  Set the title of the TNamed. ;  ; virtual Int_t Sizeof () const;  Return size of the TNamed part of the TObject. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;",MatchSource.WIKI,doc/master/classTHbookFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTHbookFile.html
Availability,error,error,"option="""");  Append graphics object to current pad. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t ",MatchSource.WIKI,doc/master/classTHbookKey.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTHbookKey.html
Integrability,message,message,"option="""");  Append graphics object to current pad. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t ",MatchSource.WIKI,doc/master/classTHbookKey.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTHbookKey.html
Modifiability,inherit,inherited,". ROOT: THbookKey Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Attributes |; List of all members ; THbookKey Class ReferenceHistogram Library. ; HBOOK Key. ; Definition at line 26 of file THbookKey.h. Public Member Functions;  THbookKey ();  ;  THbookKey (Int_t id, THbookFile *file);  constructor ;  ;  ~THbookKey () override;  ; void Browse (TBrowser *b) override;  Read object from disk and call its Browse() method. ;  ; TClass * IsA () const override;  ; Bool_t IsFolder () const override;  an hbook key is not a folder ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; TClass * IsA () const override;  ; Bool_t IsSortable () const override;  ; void ls (Option_t *option="""") const override;  List TNamed name and title. ;  ; TNamed & operator= (const TNamed &rhs);  TNamed assignment operator. ;  ; void Print (Option_t *optio",MatchSource.WIKI,doc/master/classTHbookKey.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTHbookKey.html
Security,hash,hash," override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; TClass * IsA () const override;  ; Bool_t IsSortable () const override;  ; void ls (Option_t *option="""") const override;  List TNamed name and title. ;  ; TNamed & operator= (const TNamed &rhs);  TNamed assignment operator. ;  ; void Print (Option_t *option="""") const override;  Print TNamed name and title. ;  ; virtual void SetName (const char *name);  Set the name of the TNamed. ;  ; virtual void SetNameTitle (const char *name, const char *title);  Set all the TNamed parameters (name and title). ;  ; virtual void SetTitle (const char *title="""");  Set the title of the TNamed. ;  ; virtual Int_t Sizeof () const;  Return size of the TNamed part of the TObject. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;",MatchSource.WIKI,doc/master/classTHbookKey.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTHbookKey.html
Availability,recover,recover,"askets, buffers and entries count in all branches and leaves. ;  ; virtual void ResetAfterMerge (TFileMergeInfo *);  Resets the state of this TTree after a merge (keep the customization but forget the data). ;  ; virtual void ResetBranchAddress (TBranch *);  Tell all of our branches to set their addresses to zero. ;  ; virtual void ResetBranchAddresses ();  Tell all of our branches to drop their current objects and allocate new ones. ;  ; virtual Long64_t Scan (const char *varexp="""", const char *selection="""", Option_t *option="""", Long64_t nentries=kMaxEntries, Long64_t firstentry=0);  Loop over tree entries and print entries passing selection. ;  ; virtual bool SetAlias (const char *aliasName, const char *aliasFormula);  Set a tree variable alias. ;  ; virtual void SetAutoFlush (Long64_t autof=-30000000);  This function may be called at the start of a program to change the default value for fAutoFlush. ;  ; virtual void SetAutoSave (Long64_t autos=-300000000);  In case of a program crash, it will be possible to recover the data in the tree up to the last AutoSave point. ;  ; virtual void SetBasketSize (const char *bname, Int_t buffsize=16000);  Set a branch's basket size. ;  ; template<class T > ; Int_t SetBranchAddress (const char *bname, T **add, TBranch **ptr=nullptr);  ; template<class T > ; Int_t SetBranchAddress (const char *bname, T *add, TBranch **ptr=nullptr);  ; virtual Int_t SetBranchAddress (const char *bname, void *add, TBranch **ptr, TClass *realClass, EDataType datatype, bool isptr);  Verify the validity of the type of addr before calling SetBranchAddress. ;  ; virtual Int_t SetBranchAddress (const char *bname, void *add, TBranch **ptr=nullptr);  Change branch address, dealing with clone trees properly. ;  ; virtual Int_t SetBranchAddress (const char *bname, void *add, TClass *realClass, EDataType datatype, bool isptr);  Verify the validity of the type of addr before calling SetBranchAddress. ;  ; virtual void SetBranchStatus (const char *bname, bool s",MatchSource.WIKI,doc/master/classTHbookTree.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTHbookTree.html
Deployability,update,update,"ual Int_t GetScanField () const;  ; TTreeFormula * GetSelect ();  ; virtual Long64_t GetSelectedRows ();  ; Float_t GetTargetMemoryRatio () const;  ; virtual Int_t GetTimerInterval () const;  ; virtual Long64_t GetTotBytes () const;  ; TBuffer * GetTransientBuffer (Int_t size);  Returns the transient buffer currently used by this TTree for reading/writing baskets. ;  ; virtual TTree * GetTree () const;  ; virtual TVirtualIndex * GetTreeIndex () const;  ; virtual Int_t GetTreeNumber () const;  ; virtual Int_t GetUpdate () const;  ; virtual TList * GetUserInfo ();  Return a pointer to the list containing user objects associated to this tree. ;  ; virtual Double_t * GetV1 ();  ; virtual Double_t * GetV2 ();  ; virtual Double_t * GetV3 ();  ; virtual Double_t * GetV4 ();  ; virtual Double_t * GetVal (Int_t i);  ; TTreeFormula * GetVar (Int_t i);  ; TTreeFormula * GetVar1 ();  ; TTreeFormula * GetVar2 ();  ; TTreeFormula * GetVar3 ();  ; TTreeFormula * GetVar4 ();  ; virtual Double_t * GetW ();  ; virtual Double_t GetWeight () const;  ; virtual Long64_t GetZipBytes () const;  ; virtual void IncrementTotalBuffers (Int_t nbytes);  ; virtual bool InPlaceClone (TDirectory *newdirectory, const char *options="""");  Copy the content to a new new file, update this TTree with the new location information and attach this TTree to the new directory. ;  ; TClass * IsA () const override;  ; bool IsFolder () const override;  Returns kTRUE in case object contains browsable objects (like containers or lists of other objects). ;  ; virtual Int_t LoadBaskets (Long64_t maxmemory=2000000000);  Read in memory all baskets from all branches up to the limit of maxmemory bytes. ;  ; virtual Long64_t LoadTree (Long64_t entry);  Set current entry. ;  ; virtual Long64_t LoadTreeFriend (Long64_t entry, TTree *T);  Load entry on behalf of our master tree, we may use an index. ;  ; virtual Int_t MakeClass (const char *classname=nullptr, Option_t *option="""");  Generate a skeleton analysis class for this ",MatchSource.WIKI,doc/master/classTHbookTree.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTHbookTree.html
Energy Efficiency,allocate,allocate," is being deleted or will soon be) is no longer referenced by this TTree. ;  ; virtual void Refresh ();  Refresh contents of this tree and its branches from the current status on disk. ;  ; virtual void RegisterExternalFriend (TFriendElement *);  Record a TFriendElement that we need to warn when the chain switches to a new file (typically this is because this chain is a friend of another TChain) ;  ; virtual void RemoveExternalFriend (TFriendElement *);  Removes external friend. ;  ; virtual void RemoveFriend (TTree *);  Remove a friend from the list of friends. ;  ; virtual void Reset (Option_t *option="""");  Reset baskets, buffers and entries count in all branches and leaves. ;  ; virtual void ResetAfterMerge (TFileMergeInfo *);  Resets the state of this TTree after a merge (keep the customization but forget the data). ;  ; virtual void ResetBranchAddress (TBranch *);  Tell all of our branches to set their addresses to zero. ;  ; virtual void ResetBranchAddresses ();  Tell all of our branches to drop their current objects and allocate new ones. ;  ; virtual Long64_t Scan (const char *varexp="""", const char *selection="""", Option_t *option="""", Long64_t nentries=kMaxEntries, Long64_t firstentry=0);  Loop over tree entries and print entries passing selection. ;  ; virtual bool SetAlias (const char *aliasName, const char *aliasFormula);  Set a tree variable alias. ;  ; virtual void SetAutoFlush (Long64_t autof=-30000000);  This function may be called at the start of a program to change the default value for fAutoFlush. ;  ; virtual void SetAutoSave (Long64_t autos=-300000000);  In case of a program crash, it will be possible to recover the data in the tree up to the last AutoSave point. ;  ; virtual void SetBasketSize (const char *bname, Int_t buffsize=16000);  Set a branch's basket size. ;  ; template<class T > ; Int_t SetBranchAddress (const char *bname, T **add, TBranch **ptr=nullptr);  ; template<class T > ; Int_t SetBranchAddress (const char *bname, T *add, TBranch ",MatchSource.WIKI,doc/master/classTHbookTree.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTHbookTree.html
Integrability,wrap,wrapper,". ROOT: THbookTree Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Attributes |; List of all members ; THbookTree Class ReferenceHistogram Library. ; A wrapper class supporting Hbook ntuples (CWN and RWN). ; The normal TTree calls can be used, including TTree::Draw(). Data read directly from the Hbook file via THbookFile.; IMPORTANT NOTE When setting the branch address (via THbookTree::SetBranchAddress) for a branch in an Hbook block containing several names, eg Hbook block SELEVN with the following variables:; 1 * R*4 * * * SELEVN * WGGS; 2 * R*4 * * * SELEVN * AM12; 3 * R*4 * * * SELEVN * AM34; 4 * R*4 * * * SELEVN * AM14; 5 * R*4 * * * SELEVN * AM32; 6 * R*4 * * * SELEVN * PtPI(4); 7 * R*4 * * * SELEVN * PHIPI(4); 8 * R*4 * * * SELEVN * THTPI(4); ; one must define a C struct like:; struct {; Float_t Wggs;; Float_t Am12;; Float_t Am34;; Float_t Am14;; Float_t Am32;; Float_t Ptpi[4];; Float_t Phipi[4];; Float_t Thtpi[4];; } event;; ; and set ONLY the first variable address with:; h96->SetBranchAddress(""Wggs"",&event.Wggs);; a#define a(i)Definition RSha256.hxx:99; Float_tfloat Float_tDefinition RtypesCore.h:57; R. Definition at line 30 of file THbookTree.h. Public Member Functions;  THbookTree ();  default constructor ;  ;  THbookTree (const char *name, Int_t id);  constructor ;  ;  ~THbookTree () override;  destructor ;  ; Int_t GetEntry (Long64_t entry=0, Int_t getall=0) override;  get one entry from the hbook ntuple ;  ; THbookFile * GetHbookFile ();  ; virtual Int_t GetID ();  ; virtual Int_t GetType ();  ; Float_t * GetX ();  ; virtual void InitBranches (Long64_t entry);  Initialize the branch addresses. ;  ; TClass * IsA () const override;  ; char * MakeX (Int_t nvars);  ; void Print (Option_t *option="""") const override;  Print an overview of the hbook ntuple. ;  ; Long64_t SetEntries (Long64_t n=-1) override;  Set the n",MatchSource.WIKI,doc/master/classTHbookTree.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTHbookTree.html
Modifiability,variab,variables,". ROOT: THbookTree Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Attributes |; List of all members ; THbookTree Class ReferenceHistogram Library. ; A wrapper class supporting Hbook ntuples (CWN and RWN). ; The normal TTree calls can be used, including TTree::Draw(). Data read directly from the Hbook file via THbookFile.; IMPORTANT NOTE When setting the branch address (via THbookTree::SetBranchAddress) for a branch in an Hbook block containing several names, eg Hbook block SELEVN with the following variables:; 1 * R*4 * * * SELEVN * WGGS; 2 * R*4 * * * SELEVN * AM12; 3 * R*4 * * * SELEVN * AM34; 4 * R*4 * * * SELEVN * AM14; 5 * R*4 * * * SELEVN * AM32; 6 * R*4 * * * SELEVN * PtPI(4); 7 * R*4 * * * SELEVN * PHIPI(4); 8 * R*4 * * * SELEVN * THTPI(4); ; one must define a C struct like:; struct {; Float_t Wggs;; Float_t Am12;; Float_t Am34;; Float_t Am14;; Float_t Am32;; Float_t Ptpi[4];; Float_t Phipi[4];; Float_t Thtpi[4];; } event;; ; and set ONLY the first variable address with:; h96->SetBranchAddress(""Wggs"",&event.Wggs);; a#define a(i)Definition RSha256.hxx:99; Float_tfloat Float_tDefinition RtypesCore.h:57; R. Definition at line 30 of file THbookTree.h. Public Member Functions;  THbookTree ();  default constructor ;  ;  THbookTree (const char *name, Int_t id);  constructor ;  ;  ~THbookTree () override;  destructor ;  ; Int_t GetEntry (Long64_t entry=0, Int_t getall=0) override;  get one entry from the hbook ntuple ;  ; THbookFile * GetHbookFile ();  ; virtual Int_t GetID ();  ; virtual Int_t GetType ();  ; Float_t * GetX ();  ; virtual void InitBranches (Long64_t entry);  Initialize the branch addresses. ;  ; TClass * IsA () const override;  ; char * MakeX (Int_t nvars);  ; void Print (Option_t *option="""") const override;  Print an overview of the hbook ntuple. ;  ; Long64_t SetEntries (Long64_t n=-1) override;  Set the n",MatchSource.WIKI,doc/master/classTHbookTree.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTHbookTree.html
Performance,cache,cache,"void InitBranches (Long64_t entry);  Initialize the branch addresses. ;  ; TClass * IsA () const override;  ; char * MakeX (Int_t nvars);  ; void Print (Option_t *option="""") const override;  Print an overview of the hbook ntuple. ;  ; Long64_t SetEntries (Long64_t n=-1) override;  Set the number of entries in the tree header and its branches. ;  ; virtual void SetHbookFile (THbookFile *file);  ; virtual void SetType (Int_t atype);  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TTree;  TTree ();  Default constructor and I/O constructor. ;  ;  TTree (const char *name, const char *title, Int_t splitlevel=99, TDirectory *dir=(::ROOT::Internal::TDirectoryAtomicAdapter{}));  Normal tree constructor. ;  ;  TTree (const TTree &tt)=delete;  ;  ~TTree () override;  Destructor. ;  ; void AddAllocationCount (UInt_t count);  ; virtual Int_t AddBranchToCache (const char *bname, bool subbranches=false);  Add branch with name bname to the Tree cache. ;  ; virtual Int_t AddBranchToCache (TBranch *branch, bool subbranches=false);  Add branch b to the Tree cache. ;  ; void AddClone (TTree *);  Add a cloned tree to our list of trees to be notified whenever we change our branch addresses or when we are deleted. ;  ; virtual TFriendElement * AddFriend (const char *treename, const char *filename="""");  Add a TFriendElement to the list of friends. ;  ; virtual TFriendElement * AddFriend (const char *treename, TFile *file);  Add a TFriendElement to the list of friends. ;  ; virtual TFriendElement * AddFriend (TTree *tree, const char *alias="""", bool warn=false);  Add a TFriendElement to the list of friends. ;  ; virtual void AddTotBytes (Int_t tot);  ; virtual void AddZipBytes (Int_t zip);  ; virtual Long64_t AutoSave (Option_t *option="""");  AutoSave tree header every fAutoSave bytes. ;  ; virtual Int_t Branch (const char *folder, Int_t bufsize=32000, Int_t ",MatchSource.WIKI,doc/master/classTHbookTree.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTHbookTree.html
Safety,recover,recover,"askets, buffers and entries count in all branches and leaves. ;  ; virtual void ResetAfterMerge (TFileMergeInfo *);  Resets the state of this TTree after a merge (keep the customization but forget the data). ;  ; virtual void ResetBranchAddress (TBranch *);  Tell all of our branches to set their addresses to zero. ;  ; virtual void ResetBranchAddresses ();  Tell all of our branches to drop their current objects and allocate new ones. ;  ; virtual Long64_t Scan (const char *varexp="""", const char *selection="""", Option_t *option="""", Long64_t nentries=kMaxEntries, Long64_t firstentry=0);  Loop over tree entries and print entries passing selection. ;  ; virtual bool SetAlias (const char *aliasName, const char *aliasFormula);  Set a tree variable alias. ;  ; virtual void SetAutoFlush (Long64_t autof=-30000000);  This function may be called at the start of a program to change the default value for fAutoFlush. ;  ; virtual void SetAutoSave (Long64_t autos=-300000000);  In case of a program crash, it will be possible to recover the data in the tree up to the last AutoSave point. ;  ; virtual void SetBasketSize (const char *bname, Int_t buffsize=16000);  Set a branch's basket size. ;  ; template<class T > ; Int_t SetBranchAddress (const char *bname, T **add, TBranch **ptr=nullptr);  ; template<class T > ; Int_t SetBranchAddress (const char *bname, T *add, TBranch **ptr=nullptr);  ; virtual Int_t SetBranchAddress (const char *bname, void *add, TBranch **ptr, TClass *realClass, EDataType datatype, bool isptr);  Verify the validity of the type of addr before calling SetBranchAddress. ;  ; virtual Int_t SetBranchAddress (const char *bname, void *add, TBranch **ptr=nullptr);  Change branch address, dealing with clone trees properly. ;  ; virtual Int_t SetBranchAddress (const char *bname, void *add, TClass *realClass, EDataType datatype, bool isptr);  Verify the validity of the type of addr before calling SetBranchAddress. ;  ; virtual void SetBranchStatus (const char *bname, bool s",MatchSource.WIKI,doc/master/classTHbookTree.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTHbookTree.html
Security,hash,hash,"nst char *name=nullptr, Int_t option=0, Int_t bufsize=0) override;  Write this object to the current directory. ;  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; Bool_t IsSortable () const override;  ; void ls (Option_t *option="""") const override;  List TNamed name and title. ;  ; TNamed & operator= (const TNamed &rhs);  TNamed assignment operator. ;  ; virtual void SetNameTitle (const char *name, const char *title);  Set all the TNamed parameters (name and title). ;  ; virtual void SetTitle (const char *title="""");  Set the title of the TNamed. ;  ; virtual Int_t Sizeof () const;  Return size of the TNamed part of the TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object ",MatchSource.WIKI,doc/master/classTHbookTree.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTHbookTree.html
Usability,undo,undo,"e, const char *classname, void *addobj, Int_t bufsize=32000, Int_t splitlevel=1);  Create a new TTree BranchObject. ;  ; virtual TBranch * BranchRef ();  Build the optional branch supporting the TRefTable. ;  ; virtual TBranch * Bronch (const char *name, const char *classname, void *addobj, Int_t bufsize=32000, Int_t splitlevel=99);  Create a new TTree BranchElement. ;  ; void Browse (TBrowser *) override;  Browse content of the TTree. ;  ; virtual Int_t BuildIndex (const char *majorname, const char *minorname=""0"");  Build a Tree Index (default is TTreeIndex). ;  ; TStreamerInfo * BuildStreamerInfo (TClass *cl, void *pointer=nullptr, bool canOptimize=true);  Build StreamerInfo for class cl. ;  ; virtual TFile * ChangeFile (TFile *file);  Called by TTree::Fill() when file has reached its maximum fgMaxTreeSize. ;  ; virtual TTree * CloneTree (Long64_t nentries=-1, Option_t *option="""");  Create a clone of this tree and copy nentries. ;  ; virtual void CopyAddresses (TTree *, bool undo=false);  Set branch addresses of passed tree equal to ours. ;  ; virtual Long64_t CopyEntries (TTree *tree, Long64_t nentries=-1, Option_t *option="""", bool needCopyAddresses=false);  Copy nentries from given tree to this tree. ;  ; virtual TTree * CopyTree (const char *selection, Option_t *option="""", Long64_t nentries=kMaxEntries, Long64_t firstentry=0);  Copy a tree with selection. ;  ; virtual TBasket * CreateBasket (TBranch *);  Create a basket for this tree and given branch. ;  ; Int_t Debug () const;  ; void Delete (Option_t *option="""") override;  Delete this tree from memory or/and disk. ;  ; virtual void DirectoryAutoAdd (TDirectory *);  Called by TKey and TObject::Clone to automatically add us to a directory when we are read from a file. ;  ; virtual Long64_t Draw (const char *varexp, const char *selection, Option_t *option="""", Long64_t nentries=kMaxEntries, Long64_t firstentry=0);  Draw expression varexp for entries and objects that pass a (optional) selection. ;  ; virtual Long6",MatchSource.WIKI,doc/master/classTHbookTree.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTHbookTree.html
Availability,error,error,"ault action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Returns name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about th",MatchSource.WIKI,doc/master/classTHelix.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTHelix.html
Energy Efficiency,charge,charge,". ROOT: THelix Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; Static Protected Attributes |; List of all members ; THelix Class ReferenceGraphics » 3D Graphics » Basic 3D graphics. ; THelix has two different constructors. ; If a particle with charge q passes through a point (x,y,z) with momentum (px,py,pz) with magnetic field B along an axis (nx,ny,nz), this helix can be constructed like:; THelix p(x,y,z, px,py,pz, q*B, nx,ny,nz);; (nx,ny,nz) defaults to (0,0,1).; pwinID h TVirtualViewer3D TVirtualGLPainter pDefinition TGWin32VirtualGLProxy.cxx:51; qfloat * qDefinition THbookFile.cxx:89; THelixTHelix has two different constructors.Definition THelix.h:23; yDouble_t y[n]Definition legend1.C:17; xDouble_t x[n]Definition legend1.C:17; A helix in its own frame can be defined with a pivotal point (x0,y0,z0), the velocity at that point (vx0,vy0,vz0), and an angular frequency w. Combining vx0 and vy0 to a transverse velocity vt0 one can parametrize the helix as:; x(t) = x0 - vt0 / w * sin(-w * t + phi0); y(t) = y0 + vt0 / w * cos(-w * t + phi0); z(t) = z0 + vz0 * t; wwinID wDefinition TGWin32VirtualGLProxy.cxx:39; The second constructor has 6 parameters,; Example:; THelix pl1(xyz, v, w, range, rtype, axis);; v@ vDefinition rootcling_impl.cxx:3699; where:. xyz : array of initial position; v : array of initial velocity; w : angular frequency; range: helix range; rtype: kHelixZ specifies allowed drawing range in helix Z direction, i.e., along B field. kLabZ specifies drawing range in lab frame. kHelixX, kHelixY, kLabX, kLabY, kUnchanged ... etc can also be specified; axis : helix axis. Example constructing a helix with several default values and drawing it:; {; TCanvas* helix_example_c1 = new TCanvas(""helix_example_c1"");; TView *view = TView::CreateView(1);; view->SetRange(-1,-1,-1,1,1,1);; T",MatchSource.WIKI,doc/master/classTHelix.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTHelix.html
Integrability,message,message,"ault action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Returns name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about th",MatchSource.WIKI,doc/master/classTHelix.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTHelix.html
Modifiability,plug-in,plug-in,"where:. xyz : array of initial position; v : array of initial velocity; w : angular frequency; range: helix range; rtype: kHelixZ specifies allowed drawing range in helix Z direction, i.e., along B field. kLabZ specifies drawing range in lab frame. kHelixX, kHelixY, kLabX, kLabY, kUnchanged ... etc can also be specified; axis : helix axis. Example constructing a helix with several default values and drawing it:; {; TCanvas* helix_example_c1 = new TCanvas(""helix_example_c1"");; TView *view = TView::CreateView(1);; view->SetRange(-1,-1,-1,1,1,1);; THelix *helix = new THelix(0., 0., 0., 1., 0., 0.3, 10.);; helix->Draw();; }; TCanvasThe Canvas class.Definition TCanvas.h:23; THelix::THelixTHelix()Helix default constructor.Definition THelix.cxx:121; THelix::Drawvoid Draw(Option_t *option="""") overrideDraw this helix with its current attributes.Definition THelix.cxx:281; TViewSee TView3D.Definition TView.h:25; TView::CreateViewstatic TView * CreateView(Int_t system=1, const Double_t *rmin=nullptr, const Double_t *rmax=nullptr)Create a concrete default 3-d view via the plug-in manager.Definition TView.cxx:27; TView::SetRangevirtual void SetRange(const Double_t *min, const Double_t *max)=0. This initializes a helix with its axis in Z direction (rtype=kHelixZ). ; Definition at line 23 of file THelix.h. Public Member Functions;  THelix ();  Helix default constructor. ;  ;  THelix (const THelix &helix);  Helix copy constructor. ;  ;  THelix (Double_t const *xyz, Double_t const *v, Double_t w, Double_t const *range=nullptr, EHelixRangeType rtype=kHelixZ, Double_t const *axis=nullptr);  Helix normal constructor. ;  ;  THelix (Double_t x, Double_t y, Double_t z, Double_t vx, Double_t vy, Double_t vz, Double_t w);  Helix normal constructor. ;  ;  ~THelix () override;  Helix destructor. ;  ; void Copy (TObject &helix) const override;  Copy this helix to obj. ;  ; void Draw (Option_t *option="""") override;  Draw this helix with its current attributes. ;  ; Option_t * GetOption () const o",MatchSource.WIKI,doc/master/classTHelix.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTHelix.html
Security,hash,hash,"stored in the TObjArray. ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Returns name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual const char * GetTitle () const;  Returns title of object. ;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; virtual ULong_t Hash () const;  Return hash value for this object. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns kTRUE if object inherits from class ""classname"". ;  ; virtual Bool_t InheritsFrom (const TClass *cl) const;  Returns kTRUE if object inherits from TClass cl. ;  ; virtual void Inspect () const;  Dump contents of this object in a graphics canvas. ;  ; void InvertBit (UInt_t f);  ; Bool_t IsDestructed () const;  IsDestructed. ;  ; virtual Bool_t IsEqual (const TObject *obj) const;  Default equal comparison (objects are equal if they have the same address in memory). ;  ; virtual Bool_t IsFolder () const;  Returns kTRUE in case object contains browsable objects (like containers or lists of other objects). ;  ; R__ALWAYS_INLINE Bool_t",MatchSource.WIKI,doc/master/classTHelix.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTHelix.html
Availability,error,error,"object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Return",MatchSource.WIKI,doc/master/classTHilbertMatrixT.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTHilbertMatrixT.html
Integrability,message,message,"object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Return",MatchSource.WIKI,doc/master/classTHilbertMatrixT.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTHilbertMatrixT.html
Modifiability,inherit,inherited,"Element > Class Template Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Private Member Functions |; List of all members ; THilbertMatrixT< Element > Class Template Reference. ; template<class Element>; class THilbertMatrixT< Element >; Definition at line 141 of file TMatrixTLazy.h. Public Member Functions;  THilbertMatrixT ();  ;  THilbertMatrixT (Int_t no_rows, Int_t no_cols);  ;  THilbertMatrixT (Int_t row_lwb, Int_t row_upb, Int_t col_lwb, Int_t col_upb);  ; virtual ~THilbertMatrixT ();  ; TClass * IsA () const override;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TMatrixTLazy< Element >;  TMatrixTLazy ();  ;  TMatrixTLazy (Int_t nrows, Int_t ncols);  ;  TMatrixTLazy (Int_t row_lwb, Int_t row_upb, Int_t col_lwb, Int_t col_upb);  ;  ~TMatrixTLazy () override;  ; Int_t GetColLwb () const;  ; Int_t GetColUpb () const;  ; Int_t GetRowLwb () const;  ; Int_t GetRowUpb () const;  ; TClass * IsA () const override;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return",MatchSource.WIKI,doc/master/classTHilbertMatrixT.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTHilbertMatrixT.html
Security,hash,hash," Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Returns name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual const char * GetTitle () const;  Returns title of object. ;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; virtual ULong_t Hash () const;  Return hash value for this object. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns kTRUE if object inherits from class ""classname"". ;  ; virtual Bool_t InheritsFrom (const TClass *cl) const;  Returns kTRUE if object inherits from TClass cl. ;  ; virtual void Inspect () const;  Dump contents of this object in a graphics canvas. ;  ; void InvertBit (UInt_t f);  ; Bool_t IsDestructed () const;  IsDestructed. ;  ; virtual Bool_t IsEqual (const TObject *obj) const;  Default equal comparison (objects are equal if they have the same address in memory). ;  ; virtual Bool_t IsFolder () const;  Returns kTRUE in case object contains browsable objects (like containers or lists of other objects). ;  ; R__ALWAYS_INLINE Bool_t",MatchSource.WIKI,doc/master/classTHilbertMatrixT.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTHilbertMatrixT.html
Availability,error,error,"object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Return",MatchSource.WIKI,doc/master/classTHilbertMatrixTSym.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTHilbertMatrixTSym.html
Integrability,message,message,"object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Return",MatchSource.WIKI,doc/master/classTHilbertMatrixTSym.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTHilbertMatrixTSym.html
Modifiability,inherit,inherited,". ROOT: THilbertMatrixTSym< Element > Class Template Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Private Member Functions |; List of all members ; THilbertMatrixTSym< Element > Class Template Reference. ; template<class Element>; class THilbertMatrixTSym< Element >; Definition at line 161 of file TMatrixTLazy.h. Public Member Functions;  THilbertMatrixTSym ();  ;  THilbertMatrixTSym (Int_t no_rows);  ;  THilbertMatrixTSym (Int_t row_lwb, Int_t row_upb);  ; virtual ~THilbertMatrixTSym ();  ; TClass * IsA () const override;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TMatrixTSymLazy< Element >;  TMatrixTSymLazy ();  ;  TMatrixTSymLazy (Int_t nrows);  ;  TMatrixTSymLazy (Int_t row_lwb, Int_t row_upb);  ;  ~TMatrixTSymLazy () override;  ; Int_t GetRowLwb () const;  ; Int_t GetRowUpb () const;  ; TClass * IsA () const override;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;",MatchSource.WIKI,doc/master/classTHilbertMatrixTSym.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTHilbertMatrixTSym.html
Security,hash,hash," Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Returns name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual const char * GetTitle () const;  Returns title of object. ;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; virtual ULong_t Hash () const;  Return hash value for this object. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns kTRUE if object inherits from class ""classname"". ;  ; virtual Bool_t InheritsFrom (const TClass *cl) const;  Returns kTRUE if object inherits from TClass cl. ;  ; virtual void Inspect () const;  Dump contents of this object in a graphics canvas. ;  ; void InvertBit (UInt_t f);  ; Bool_t IsDestructed () const;  IsDestructed. ;  ; virtual Bool_t IsEqual (const TObject *obj) const;  Default equal comparison (objects are equal if they have the same address in memory). ;  ; virtual Bool_t IsFolder () const;  Returns kTRUE in case object contains browsable objects (like containers or lists of other objects). ;  ; R__ALWAYS_INLINE Bool_t",MatchSource.WIKI,doc/master/classTHilbertMatrixTSym.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTHilbertMatrixTSym.html
Availability,error,error,"tinlinevirtual; Clone(const char *newname="""") constTObjectvirtual; Compare(const TObject *obj) constTObjectvirtual; ComputeRenderingRegions(TAxis *pAxis, Int_t nPixels, bool isLog)THistPaintervirtual; Copy(TObject &object) constTObjectvirtual; DeclFileName()THistPainterinlinestatic; DefineColorLevels(Int_t ndivz)THistPaintervirtual; Delete(Option_t *option="""")TObjectvirtual; DistancetoPrimitive(Int_t px, Int_t py) overrideTHistPaintervirtual; DoError(int level, const char *location, const char *fmt, va_list va) constTObjectprotectedvirtual; Draw(Option_t *option="""")TObjectvirtual; DrawClass() constTObjectvirtual; DrawClone(Option_t *option="""") constTObjectvirtual; DrawPanel() overrideTHistPaintervirtual; Dump() constTObjectvirtual; EDeprecatedStatusBits enum nameTObject; Error(const char *method, const char *msgfmt,...) constTObjectvirtual; EStatusBits enum nameTObject; Execute(const char *method, const char *params, Int_t *error=nullptr)TObjectvirtual; Execute(TMethod *method, TObjArray *params, Int_t *error=nullptr)TObjectvirtual; ExecuteEvent(Int_t event, Int_t px, Int_t py) overrideTHistPaintervirtual; Fatal(const char *method, const char *msgfmt,...) constTObjectvirtual; fBitsTObjectprivate; fCurrentF3THistPainterprotected; fCutsTHistPainterprotected; fCutsOptTHistPainterprotected; fFunctionsTHistPainterprotected; fgDtorOnlyTObjectprivatestatic; fgObjectStatTObjectprivatestatic; fgPainterTVirtualHistPainterprivatestatic; fGraph2DPainterTHistPainterprotected; fHTHistPainterprotected; FindObject(const char *name) constTObjectvirtual; FindObject(const TObject *obj) constTObjectvirtual; fLegoTHistPainterprotected; fNcutsTHistPainterprotected; fObjectInfoTHistPaintermutableprivate; fPieTHistPainterprotected; fShowOptionTHistPainterprotected; fShowProjectionTHistPainterprotected; fShowProjection2THistPainterprotected; fStackTHistPainterprotected; fUniqueIDTObjectprivate; fXaxisTHistPainterprotected; fXbufTHistPainterprotected; fXHighlightBinTHistPainterprotected; fYa",MatchSource.WIKI,doc/master/classTHistPainter-members.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTHistPainter-members.html
Modifiability,inherit,inherited,". ROOT: Member List. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. THistPainter Member List. This is the complete list of members for THistPainter, including all inherited members. AbstractMethod(const char *method) constTObject; AddToTObjectTable(TObject *)TObjectprivatestatic; AppendPad(Option_t *option="""")TObjectvirtual; Browse(TBrowser *b)TObjectvirtual; CheckedHash()TObjectinline; Class()THistPainterstatic; Class_Name()THistPainterstatic; Class_Version()THistPainterinlinestatic; ClassName() constTObjectvirtual; Clear(Option_t *="""")TObjectinlinevirtual; Clone(const char *newname="""") constTObjectvirtual; Compare(const TObject *obj) constTObjectvirtual; ComputeRenderingRegions(TAxis *pAxis, Int_t nPixels, bool isLog)THistPaintervirtual; Copy(TObject &object) constTObjectvirtual; DeclFileName()THistPainterinlinestatic; DefineColorLevels(Int_t ndivz)THistPaintervirtual; Delete(Option_t *option="""")TObjectvirtual; DistancetoPrimitive(Int_t px, Int_t py) overrideTHistPaintervirtual; DoError(int level, const char *location, const char *fmt, va_list va) constTObjectprotectedvirtual; Draw(Option_t *option="""")TObjectvirtual; DrawClass() constTObjectvirtual; DrawClone(Option_t *option="""") constTObjectvirtual; DrawPanel() overrideTHistPaintervirtual; Dump() constTObjectvirtual; EDeprecatedStatusBits enum nameTObject; Error(const char *method, const char *msgfmt,...) constTObjectvirtual; EStatusBits enum nameTObject; Execute(const char *method, const char *params, Int_t *error=nullptr)TObjectvirtual; Execute(TMethod *method, TObjArray *params, Int_t *error=nullptr)TObjectvirtual; ExecuteEvent(Int_t event, Int_t px, Int_t py) overrideTHistPaintervirtual; Fatal(const char *method, const char *msgfmt,...) constTObjectvirtual; fBitsTObjectprivate; fCurrentF3THistPainterprotected; fCutsTHistPainterprotected; fCutsOptTHistPainterprotected; fFunctionsTHistPainterprotected; fgDtorOnlyTObjectprivatestatic; fgObjectStatTObjectprivatestatic; fgPainterTV",MatchSource.WIKI,doc/master/classTHistPainter-members.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTHistPainter-members.html
Availability,error,error,"hing...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Attributes |; Private Attributes |; List of all members ; THistPainter Class ReferenceHistogram Library » Painting classes » Histograms and graphs painting classes. ; The histogram painter class. ; Implements all histograms' drawing's options. Introduction; Histograms' plotting options; Options supported for 1D and 2D histograms; Options supported for 1D histograms; Options supported for 2D histograms; Options supported for 3D histograms; Options supported for histograms' stacks (THStack). Setting the Style; Setting line, fill, marker, and text attributes; Setting Tick marks on the histogram axis; Giving titles to the X, Y and Z axis; The option ""SAME""; Limitations. Colors automatically picked in palette; Superimposing two histograms with different scales in the same pad; Statistics Display; Fit Statistics; The error bars options; The bar chart option; The ""BAR"" and ""HBAR"" options; The SCATter plot option (legacy draw option); The ARRow option; The BOX option; The COLor option (default for 2D and 3D histograms); The CANDLE and VIOLIN options; The CANDLE option; The VIOLIN option. The TEXT and TEXTnn Option; The CONTour options; The LIST option; The AITOFF, MERCATOR, SINUSOIDAL and PARABOLIC options. The LEGO options; The ""SURFace"" options; Cylindrical, Polar, Spherical and PseudoRapidity/Phi options; Base line for bar-charts and lego plots; TH2Poly Drawing; The SPEC option; Option ""Z"" : Adding the color palette on the right side of the pad; Setting the color palette; Drawing a sub-range of a 2-D histogram; the [cutg] option; Drawing options for 3D histograms; Drawing option for histograms' stacks; Drawing of 3D implicit functions; Associated functions drawing; Drawing using OpenGL; General information: plot types and supported options; TH3 as color boxes; TH3 as boxes (spheres); TH3 as iso-surface(s); TF3 (implicit function); Parametric surfaces; Intera",MatchSource.WIKI,doc/master/classTHistPainter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTHistPainter.html
Deployability,update,updated,".; To draw a histogram h it is enough to do: h->Draw();; h can be of any kind: 1D, 2D or 3D. To choose how the histogram will be drawn, the Draw() method can be invoked with an option. For instance to draw a 2D histogram as a lego plot it is enough to do: h->Draw(""lego"");; THistPainter offers many options to paint 1D, 2D and 3D histograms.; When the Draw() method of a histogram is called for the first time (TH1::Draw), it creates a THistPainter object and saves a pointer to this ""painter"" as a data member of the histogram. The THistPainter class specializes in the drawing of histograms. It is separated from the histogram so that one can have histograms without the graphics overhead, for example in a batch program. Each histogram having its own painter (rather than a central singleton painter painting all histograms), allows two histograms to be drawn in two threads without overwriting the painter's values.; When a displayed histogram is filled again, there is no need to call the Draw() method again; the image will be refreshed the next time the pad will be updated.; A pad is updated after one of these three actions:. a carriage control on the ROOT command line,; a click inside the pad,; a call to TPad::Update. By default a call to TH1::Draw() clears the pad of all objects before drawing the new image of the histogram. One can use the SAME option to leave the previous display intact and superimpose the new histogram. The same histogram can be drawn with different graphics options in different pads.; When a displayed histogram is deleted, its image is automatically removed from the pad.; To create a copy of the histogram when drawing it, one can use TH1::DrawClone(). This will clone the histogram and allow to change and delete the original one without affecting the clone. Histograms' plotting options; Most options can be concatenated with or without spaces or commas, for example: h->Draw(""E1 SAME"");; The options are not case sensitive: h->Draw(""e1 same"");; The default",MatchSource.WIKI,doc/master/classTHistPainter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTHistPainter.html
Energy Efficiency,reduce,reduces,"irtual void SetTextAngle(Float_t tangle=0)Set the text angle.Definition TAttText.h:43; TAttText::SetTextFontvirtual void SetTextFont(Font_t tfont=62)Set the text font.Definition TAttText.h:46; TF11-Dim function classDefinition TF1.h:233; TH1I1-D histogram with an int per channel (see TH1 documentation)Definition TH1.h:540; TH1::GetXaxisTAxis * GetXaxis()Definition TH1.h:324; TH2I2-D histogram with an int per channel (see TH1 documentation)Definition TH2.h:225; TLineUse the TLine constructor to create a simple line.Definition TLine.h:22; TNamed::SetTitlevirtual void SetTitle(const char *title="""")Set the title of the TNamed.Definition TNamed.cxx:164; TRandomThis is the base class for the ROOT Random number generators.Definition TRandom.h:27; TTextBase class for several text objects.Definition TText.h:22; TText::DrawTextvirtual TText * DrawText(Double_t x, Double_t y, const char *text)Draw this text with new coordinates.Definition TText.cxx:176; . The candle reduces the information coming from a whole distribution into few values. Independently from the number of entries or the significance of the underlying distribution a candle will always look like a candle. So candle plots should be used carefully in particular with unknown distributions. The definition of a candle is based on unbinned data. Here, candles are created from binned data. Because of this, the deviation is connected to the bin width used. The calculation of the quantiles normally done on unbinned data also. Because data are binned, this will only work the best possible way within the resolution of one bin; Because of all these facts one should take care that:. there are enough points per candle; the bin width is small enough (more bins will increase the maximum available resolution of the quantiles although there will be some bins with no entries); never make a candle-plot if the underlying distribution is double-distributed; only create candles of distributions that are more-or-less gaussian (the MPV sh",MatchSource.WIKI,doc/master/classTHistPainter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTHistPainter.html
Integrability,message,message,""", const char *name_postfix=""_copy"") constCopy this histogram and Draw in the current pad.Definition TH1.cxx:3113; TH1::CloneTObject * Clone(const char *newname="""") const overrideMake a complete copy of the underlying object.Definition TH1.cxx:2752; TH1::SetBarWidthvirtual void SetBarWidth(Float_t width=0.5)Set the width of bars as fraction of the bin width for drawing mode ""B"".Definition TH1.h:365; TH1::SetStatsvirtual void SetStats(Bool_t stats=kTRUE)Set statistics option on/off.Definition TH1.cxx:8990; TLegendThis class displays a legend box (TPaveText) containing several legend entries.Definition TLegend.h:23; TLegend::AddEntryTLegendEntry * AddEntry(const TObject *obj, const char *label="""", Option_t *option=""lpf"")Add a new entry to this legend.Definition TLegend.cxx:320; TLegend::Drawvoid Draw(Option_t *option="""") overrideDraw this legend with its current attributes.Definition TLegend.cxx:425; TObject::Errorvirtual void Error(const char *method, const char *msgfmt,...) constIssue error message.Definition TObject.cxx:993; TStringBasic string class.Definition TString.h:139; TSystem::AccessPathNamevirtual Bool_t AccessPathName(const char *path, EAccessMode mode=kFileExists)Returns FALSE if one can access a file using the specified access mode.Definition TSystem.cxx:1296; TTreeA TTree represents a columnar dataset.Definition TTree.h:79; ROOT::Math::Chebyshev::Tdouble T(double x)Definition ChebyshevPol.h:34; TMVA_SOFIE_GNN_Parser.h2h2Definition TMVA_SOFIE_GNN_Parser.py:188; . To control the bar width (default is the bin width) TH1::SetBarWidth() should be used.; To control the bar offset (default is 0) TH1::SetBarOffset() should be used.; These two parameters are useful when several histograms are plotted using the option SAME. They allow to plot the histograms next to each other. The SCATter plot option (legacy draw option); AttentionUse of option SCAT has been deprecated. It was the default drawing option for 2D and 3D histograms. The new default option is COL (hea",MatchSource.WIKI,doc/master/classTHistPainter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTHistPainter.html
Modifiability,inherit,inherit,"t in the same pad as if the option SAME had been specified. . ""NOSTACKB"" Histograms are drawn next to each other as bar charts. . ""PADS"" The current pad/canvas is subdivided into a number of pads equal to the number of histograms in the stack and each histogram is paint into a separate pad. . ""PFC"" Palette Fill Color: stack's fill color is taken in the current palette. . ""PLC"" Palette Line Color: stack's line color is taken in the current palette. . ""PMC"" Palette Marker Color: stack's marker color is taken in the current palette. . Setting the Style; Histograms use the current style (gStyle). When one changes the current style and would like to propagate the changes to the histogram, TH1::UseCurrentStyle should be called. Call UseCurrentStyle on each histogram is needed.; To force all the histogram to use the current style use: gROOT->ForceStyle();; All the histograms read after this call will use the current style. Setting line, fill, marker, and text attributes; The histogram classes inherit from the attribute classes: TAttLine, TAttFill and TAttMarker. See the description of these classes for the list of options. Setting Tick marks on the histogram axis; The TPad::SetTicks method specifies the type of tick marks on the axis. If tx = gPad->GetTickx() and ty = gPad->GetTicky() then: tx = 1; tick marks on top side are drawn (inside); tx = 2; tick marks and labels on top side are drawn; ty = 1; tick marks on right side are drawn (inside); ty = 2; tick marks and labels on right side are drawn; By default only the left Y axis and X bottom axis are drawn (tx = ty = 0); TPad::SetTicks(tx,ty) allows to set these options. See also The TAxis functions to set specific axis attributes.; In case multiple color filled histograms are drawn on the same pad, the fill area may hide the axis tick marks. One can force a redraw of the axis over all the histograms by calling: gPad->RedrawAxis();. Giving titles to the X, Y and Z axis; h->GetXaxis()->SetTitle(""X axis title"");; h->GetYaxi",MatchSource.WIKI,doc/master/classTHistPainter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTHistPainter.html
Performance,perform,performance," with surface proportional to the content's absolute value. A negative content is marked with a X. . ""BOX1"" A button is drawn for each cell with surface proportional to content's absolute value. A sunken button is drawn for negative values a raised one for positive. . ""COL"" A box is drawn for each cell with a color scale varying with contents. All the none empty bins are painted. Empty bins are not painted unless some bins have a negative content because in that case the null bins might be not empty. TProfile2D histograms are handled differently because, for this type of 2D histograms, it is possible to know if an empty bin has been filled or not. So even if all the bins' contents are positive some empty bins might be painted. And vice versa, if some bins have a negative content some empty bins might be not painted (default). . ""COLZ"" Same as ""COL"". In addition the color palette is also drawn. . ""COL2"" Alternative rendering algorithm to ""COL"". Can significantly improve rendering performance for large, non-sparse 2-D histograms. . ""COLZ2"" Same as ""COL2"". In addition the color palette is also drawn. . ""Z CJUST"" In combination with colored options ""COL"",""CONT0"" etc: Justify labels in the color palette at color boundaries. For more details see TPaletteAxis . ""CANDLE"" Draw a candle plot along X axis. . ""CANDLEX"" Same as ""CANDLE"". . ""CANDLEY"" Draw a candle plot along Y axis. . ""CANDLEXn"" Draw a candle plot along X axis. Different candle-styles with n from 1 to 6. . ""CANDLEYn"" Draw a candle plot along Y axis. Different candle-styles with n from 1 to 6. . ""VIOLIN"" Draw a violin plot along X axis. . ""VIOLINX"" Same as ""VIOLIN"". . ""VIOLINY"" Draw a violin plot along Y axis. . ""VIOLINXn"" Draw a violin plot along X axis. Different violin-styles with n being 1 or 2. . ""VIOLINYn"" Draw a violin plot along Y axis. Different violin-styles with n being 1 or 2. . ""CONT"" Draw a contour plot (same as CONT0). . ""CONT0"" Draw a contour plot using surface colors to distinguish contours. . ""CO",MatchSource.WIKI,doc/master/classTHistPainter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTHistPainter.html
Safety,avoid,avoids,"ffect on each lego-bar. . ""TEXT"" Draw bin contents as text (format set via gStyle->SetPaintTextFormat). . ""TEXTnn"" Draw bin contents as text at angle nn (0 < nn <= 90). . ""X+"" The X-axis is drawn on the top side of the plot. . ""Y+"" The Y-axis is drawn on the right side of the plot. . ""MIN0"" Set minimum value for the Y axis to 0, equivalent to gStyle->SetHistMinimumZero(). . Options supported for 1D histograms. Option Description . "" "" Default. . ""AH"" Draw histogram without axis. ""A"" can be combined with any drawing option. For instance, ""AC"" draws the histogram as a smooth Curve without axis. . ""]["" When this option is selected the first and last vertical lines of the histogram are not drawn. . ""B"" Bar chart option. . ""BAR"" Like option ""B"", but bars can be drawn with a 3D effect. . ""HBAR"" Like option ""BAR"", but bars are drawn horizontally. . ""C"" Draw a smooth Curve through the histogram bins. . ""E0"" Draw error bars. Markers are drawn for bins with 0 contents. Combined with E1 or E2 it avoids error bars clipping . ""E1"" Draw error bars with perpendicular lines at the edges. . ""E2"" Draw error bars with rectangles. . ""E3"" Draw a fill area through the end points of the vertical error bars. . ""E4"" Draw a smoothed filled area through the end points of the error bars. . ""E5"" Like E3 but ignore the bins with 0 contents. . ""E6"" Like E4 but ignore the bins with 0 contents. . ""X0"" When used with one of the ""E"" option, it suppress the error bar along X as gStyle->SetErrorX(0) would do. . ""L"" Draw a line through the bin contents. . ""P"" Draw current marker at each bin except empty bins. . ""P*"" Draw a star marker at each bin except empty bins. . ""P0"" Draw current marker at each bin including empty bins. . ""PIE"" Draw histogram as a Pie Chart. . ""*H"" Draw histogram with a * at each bin. . ""LF2"" Draw histogram like with option ""L"" but with a fill area. Note that ""L"" draws also a fill area if the hist fill color is set but the fill area corresponds to the histogram contour. . Options su",MatchSource.WIKI,doc/master/classTHistPainter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTHistPainter.html
Security,access,accessed,": kurtosis and kurtosis error printed; s : skewness printed; S : skewness and skewness error printed; i : integral of bins printed; I : integral of bins with option ""width"" printed; o : number of overflows printed; u : number of underflows printed; r : standard deviation printed; R : standard deviation and standard deviation error printed; m : mean value printed; M : mean value mean error values printed; e : number of entries printed; n : name of histogram is printed; For example, to print only name of histogram and number of entries do: gStyle->SetOptStat(""ne"");; To print only the name of the histogram do: gStyle->SetOptStat(""n"");; The default value is: gStyle->SetOptStat(""nemr"");; When a histogram is painted, a TPaveStats object is created and added to the list of functions of the histogram. If a TPaveStats object already exists in the histogram list of functions, the existing object is just updated with the current histogram parameters.; Once a histogram is painted, the statistics box can be accessed using h->FindObject(""stats""). In the command line it is enough to do: Root > h->Draw(); Root > TPaveStats *st = (TPaveStats*)h->FindObject(""stats""); because after h->Draw() the histogram is automatically painted. But in a script file the painting should be forced using gPad->Update() in order to make sure the statistics box is created: h->Draw();; gPad->Update();; TPaveStats *st = (TPaveStats*)h->FindObject(""stats"");; Without gPad->Update() the line h->FindObject(""stats"") returns a null pointer.; When a histogram is drawn with the option SAME, the statistics box is not drawn. To force the statistics box drawing with the option SAME, the option SAMES must be used. If the new statistics box hides the previous statistics box, one can change its position with these lines (h being the pointer to the histogram): Root > TPaveStats *st = (TPaveStats*)h->FindObject(""stats""); Root > st->SetX1NDC(newx1); //new x start position; Root > st->SetX2NDC(newx2); //new x end position; T",MatchSource.WIKI,doc/master/classTHistPainter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTHistPainter.html
Testability,test,test,"rement bin with abscissa X by 1.Definition TH1.cxx:3344; TH1::Drawvoid Draw(Option_t *option="""") overrideDraw this histogram with options.Definition TH1.cxx:3066; TRandom3Random number generator class based on M.Definition TRandom3.h:27; TRandom::Rannorvirtual void Rannor(Float_t &a, Float_t &b)Return 2 numbers distributed following a gaussian with mean=0 and sigma=1.Definition TRandom.cxx:507; TStyle::SetOptTitlevoid SetOptTitle(Int_t tit=1)Definition TStyle.h:334; TStyle::SetOptStatvoid SetOptStat(Int_t stat=1)The type of information printed in the histogram statistics box can be selected via the parameter mod...Definition TStyle.cxx:1640; double; int; h1TH1F * h1Definition legend1.C:5; . ; void thstackpalettecolor(); {; auto hs = new THStack(""hs"",""Stacked 1D histograms colored using kOcean palette"");; ; gStyle->SetPalette(kOcean);; ; // Create three 1-d histograms and add them in the stack; auto h1st = new TH1F(""h1st"",""test hstack"",100,-4,4);; h1st->FillRandom(""gaus"",20000);; hs->Add(h1st);; ; auto h2st = new TH1F(""h2st"",""test hstack"",100,-4,4);; h2st->FillRandom(""gaus"",15000);; hs->Add(h2st);; ; auto h3st = new TH1F(""h3st"",""test hstack"",100,-4,4);; h3st->FillRandom(""gaus"",10000);; hs->Add(h3st);; ; // draw the stack; hs->Draw(""pfc nostack"");; }; kOcean@ kOceanDefinition TColor.h:119; THStackThe Histogram stack class.Definition THStack.h:40; TStyle::SetPalettevoid SetPalette(Int_t ncolors=kBird, Int_t *colors=nullptr, Float_t alpha=1.)See TColor::SetPalette.Definition TStyle.cxx:1888; . ; void thstack2palettecolor() ; {; gStyle->SetPalette(1);; auto h1 = new TH2F(""h1"",""h1"",20,0,6,20,-4,4);; auto h2 = new TH2F(""h2"",""h2"",20,0,6,20,-4,4);; auto h3 = new TH2F(""h3"",""h3"",20,0,6,20,-4,4);; auto h4 = new TH2F(""h4"",""h4"",20,0,6,20,-4,4);; auto h5 = new TH2F(""h5"",""h5"",20,0,6,20,-4,4);; h2->Fill(2.,0.,5);; h3->Fill(3.,0.,10);; h4->Fill(4.,0.,15);; h5->Fill(5.,0.,20);; auto hs = new THStack(""hs"",""Test of palette colored lego stack"");; hs->Add(h1);; hs->Add(h2);; hs->Add(h3);; ",MatchSource.WIKI,doc/master/classTHistPainter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTHistPainter.html
Usability,usab,usable,""" options; Cylindrical, Polar, Spherical and PseudoRapidity/Phi options; Base line for bar-charts and lego plots; TH2Poly Drawing; The SPEC option; Option ""Z"" : Adding the color palette on the right side of the pad; Setting the color palette; Drawing a sub-range of a 2-D histogram; the [cutg] option; Drawing options for 3D histograms; Drawing option for histograms' stacks; Drawing of 3D implicit functions; Associated functions drawing; Drawing using OpenGL; General information: plot types and supported options; TH3 as color boxes; TH3 as boxes (spheres); TH3 as iso-surface(s); TF3 (implicit function); Parametric surfaces; Interaction with the plots; Selectable parts; Rotation and zooming; Panning; Box cut; Plot specific interactions (dynamic slicing etc.); Surface with option ""GLSURF""; TF3; Box; Iso; Parametric plot. Highlight mode for histogram; Highlight mode and user function. Introduction; Histograms are drawn via the THistPainter class. Each histogram has a pointer to its own painter (to be usable in a multithreaded program). When the canvas has to be redrawn, the Paint function of each objects in the pad is called. In case of histograms, TH1::Paint invokes directly THistPainter::Paint.; To draw a histogram h it is enough to do: h->Draw();; h can be of any kind: 1D, 2D or 3D. To choose how the histogram will be drawn, the Draw() method can be invoked with an option. For instance to draw a 2D histogram as a lego plot it is enough to do: h->Draw(""lego"");; THistPainter offers many options to paint 1D, 2D and 3D histograms.; When the Draw() method of a histogram is called for the first time (TH1::Draw), it creates a THistPainter object and saves a pointer to this ""painter"" as a data member of the histogram. The THistPainter class specializes in the drawing of histograms. It is separated from the histogram so that one can have histograms without the graphics overhead, for example in a batch program. Each histogram having its own painter (rather than a central singlet",MatchSource.WIKI,doc/master/classTHistPainter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTHistPainter.html
Availability,error,error,"object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Return",MatchSource.WIKI,doc/master/classTHLimitsFinder.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTHLimitsFinder.html
Integrability,message,message,"object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Return",MatchSource.WIKI,doc/master/classTHLimitsFinder.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTHLimitsFinder.html
Modifiability,inherit,inherited,"his class is called by default by the histogramming system and also by TTree::Draw, TTreePlayer::DrawSelect. TGaxis use it also to optimize axis labels.; A different finder may be specified via THLimitsFinder::SetFinder. ; Definition at line 28 of file THLimitsFinder.h. Public Member Functions;  THLimitsFinder ();  ;  ~THLimitsFinder () override;  ; virtual Int_t FindGoodLimits (TH1 *h, Double_t xmin, Double_t xmax);  Compute the best axis limits for the X axis. ;  ; virtual Int_t FindGoodLimits (TH1 *h, Double_t xmin, Double_t xmax, Double_t ymin, Double_t ymax);  Compute the best axis limits for the X and Y axis. ;  ; virtual Int_t FindGoodLimits (TH1 *h, Double_t xmin, Double_t xmax, Double_t ymin, Double_t ymax, Double_t zmin, Double_t zmax);  Compute the best axis limits for the X, Y and Z axis. ;  ; TClass * IsA () const override;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) c",MatchSource.WIKI,doc/master/classTHLimitsFinder.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTHLimitsFinder.html
Performance,optimiz,optimize,". ROOT: THLimitsFinder Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Static Protected Attributes |; List of all members ; THLimitsFinder Class ReferenceHistogram Library » Histogram classes. ; Class to compute nice axis limits. ; This class is called by default by the histogramming system and also by TTree::Draw, TTreePlayer::DrawSelect. TGaxis use it also to optimize axis labels.; A different finder may be specified via THLimitsFinder::SetFinder. ; Definition at line 28 of file THLimitsFinder.h. Public Member Functions;  THLimitsFinder ();  ;  ~THLimitsFinder () override;  ; virtual Int_t FindGoodLimits (TH1 *h, Double_t xmin, Double_t xmax);  Compute the best axis limits for the X axis. ;  ; virtual Int_t FindGoodLimits (TH1 *h, Double_t xmin, Double_t xmax, Double_t ymin, Double_t ymax);  Compute the best axis limits for the X and Y axis. ;  ; virtual Int_t FindGoodLimits (TH1 *h, Double_t xmin, Double_t xmax, Double_t ymin, Double_t ymax, Double_t zmin, Double_t zmax);  Compute the best axis limits for the X, Y and Z axis. ;  ; TClass * IsA () const override;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove set",MatchSource.WIKI,doc/master/classTHLimitsFinder.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTHLimitsFinder.html
Security,hash,hash," Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Returns name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual const char * GetTitle () const;  Returns title of object. ;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; virtual ULong_t Hash () const;  Return hash value for this object. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns kTRUE if object inherits from class ""classname"". ;  ; virtual Bool_t InheritsFrom (const TClass *cl) const;  Returns kTRUE if object inherits from TClass cl. ;  ; virtual void Inspect () const;  Dump contents of this object in a graphics canvas. ;  ; void InvertBit (UInt_t f);  ; Bool_t IsDestructed () const;  IsDestructed. ;  ; virtual Bool_t IsEqual (const TObject *obj) const;  Default equal comparison (objects are equal if they have the same address in memory). ;  ; virtual Bool_t IsFolder () const;  Returns kTRUE in case object contains browsable objects (like containers or lists of other objects). ;  ; R__ALWAYS_INLINE Bool_t",MatchSource.WIKI,doc/master/classTHLimitsFinder.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTHLimitsFinder.html
Availability,error,error,"1024 *16)THnBaseprotectedstatic; CreateHnAny(const char *name, const char *title, const THnBase *hn, Bool_t sparse, Int_t chunkSize=1024 *16)THnBaseprotectedstatic; CreateIter(Bool_t respectAxisRange) const overrideTHnvirtual; DeclFileName()THninlinestatic; Delete(Option_t *option="""")TObjectvirtual; DistancetoPrimitive(Int_t px, Int_t py)TObjectvirtual; Divide(const THnBase *h)THnBase; Divide(const THnBase *h1, const THnBase *h2, Double_t c1=1., Double_t c2=1., Option_t *option="""")THnBase; DoError(int level, const char *location, const char *fmt, va_list va) constTObjectprotectedvirtual; Draw(Option_t *option="""")TObjectvirtual; DrawClass() constTObjectvirtual; DrawClone(Option_t *option="""") constTObjectvirtual; Dump() constTObjectvirtual; EDeprecatedStatusBits enum nameTObject; Error(const char *method, const char *msgfmt,...) constTObjectvirtual; EStatusBits enum nameTObject; Execute(const char *method, const char *params, Int_t *error=nullptr)TObjectvirtual; Execute(TMethod *method, TObjArray *params, Int_t *error=nullptr)TObjectvirtual; ExecuteEvent(Int_t event, Int_t px, Int_t py)TObjectvirtual; Fatal(const char *method, const char *msgfmt,...) constTObjectvirtual; fAxesTHnBaseprotected; fBitsTObjectprivate; fBrowsablesTHnBaseprotected; fCoordBufTHnmutableprotected; fEntriesTHnBaseprotected; fgDtorOnlyTObjectprivatestatic; fgObjectStatTObjectprivatestatic; Fill(const Double_t *x, Double_t w=1.)THnBaseinline; Fill(const char *name[], Double_t w=1.)THnBaseinline; Fill(Double_t firstval, MoreTypes... morevals)THnBaseinline; FillBin(Long64_t bin, Double_t w) overrideTHninlinevirtual; FillBinBase(Double_t w)THnBaseinlineprotected; FillBuffer(char *&buffer)TNamedvirtual; FindObject(const char *name) constTObjectvirtual; FindObject(const TObject *obj) constTObjectvirtual; fIntegralTHnBaseprotected; fIntegralStatusTHnBaseprotected; Fit(TF1 *f1, Option_t *option="""", Option_t *goption="""")THnBase; fNameTNamedprotected; fNdimensionsTHnBaseprotected; fSumw2THnprotected; fTit",MatchSource.WIKI,doc/master/classTHn-members.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTHn-members.html
Modifiability,inherit,inherited,". ROOT: Member List. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. THn Member List. This is the complete list of members for THn, including all inherited members. AbstractMethod(const char *method) constTObject; Add(const THnBase *h, Double_t c=1.)THnBase; Add(const TH1 *hist, Double_t c=1.)THnBase; AddBinContent(const Int_t *idx, Double_t v=1.)THninline; AddBinContent(Long64_t bin, Double_t v=1.) overrideTHninlinevirtual; AddBinError2(Long64_t bin, Double_t e2) overrideTHninlinevirtual; AddInternal(const THnBase *h, Double_t c, Bool_t rebinned)THnBaseprotected; AddToTObjectTable(TObject *)TObjectprivatestatic; AllocCoordBuf() constTHnprotected; AppendPad(Option_t *option="""")TObjectvirtual; Browse(TBrowser *b) overrideTHnBasevirtual; CalculateErrors(Bool_t calc=kTRUE)THnBaseinline; CheckConsistency(const THnBase *h, const char *tag) constTHnBaseprotected; CheckedHash()TObjectinline; Class()THnstatic; Class_Name()THnstatic; Class_Version()THninlinestatic; ClassName() constTObjectvirtual; Clear(Option_t *option="""") overrideTNamedvirtual; Clone(const char *newname="""") const overrideTNamedvirtual; CloneEmpty(const char *name, const char *title, const TObjArray *axes, Bool_t keepTargetAxis) constTHnBaseprotected; Compare(const TObject *obj) const overrideTNamedvirtual; ComputeIntegral()THnBase; Copy(TObject &named) const overrideTNamedvirtual; CreateHist(const char *name, const char *title, const TObjArray *axes, Bool_t keepTargetAxis) constTHnBaseprotected; CreateHn(const char *name, const char *title, const TH1 *h1)THninlinestatic; CreateHn(const char *name, const char *title, const THnBase *hn)THninlinestatic; CreateHnAny(const char *name, const char *title, const TH1 *h1, Bool_t sparse, Int_t chunkSize=1024 *16)THnBaseprotectedstatic; CreateHnAny(const char *name, const char *title, const THnBase *hn, Bool_t sparse, Int_t chunkSize=1024 *16)THnBaseprotectedstatic; CreateIter(Bool_t respectAxisRange) const overrideTHnvirtual; DeclFile",MatchSource.WIKI,doc/master/classTHn-members.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTHn-members.html
Availability,error,errors,"f RAM!; To construct a THn object you must use one of its templated, derived classes: THnD (typedef for THnT<Double_t>): bin content held by a Double_t,; THnF (typedef for THnT<Float_t>): bin content held by a Float_t,; THnL (typedef for THnT<Long64_t>): bin content held by a Long64_t,; THnI (typedef for THnT<Int_t>): bin content held by an Int_t,; THnS (typedef for THnT<Short_t>): bin content held by a Short_t,; THnC (typedef for THnT<Char_t>): bin content held by a Char_t,; They take name and title, the number of dimensions, and for each dimension the number of bins, the minimal, and the maximal value on the dimension's axis. A TH2F h(""h"",""h"",10, 0., 10., 20, -5., 5.) would correspond to Int_t bins[2] = {10, 20};; Double_t xmin[2] = {0., -5.};; Double_t xmax[2] = {10., 5.};; THnF hn(""hn"", ""hn"", 2, bins, xmin, xmax);; ; Filling; A THn is filled just like a regular histogram, using THn::Fill(x, weight), where x is a n-dimensional Double_t value. To take errors into account, Sumw2() must be called before filling the histogram. Storage is allocated when the first bin content is stored. Projections; The dimensionality of a THn can be reduced by projecting it to 1, 2, 3, or n dimensions, which can be represented by a TH1, TH2, TH3, or a THn. See the Projection() members. To only project parts of the histogram, call hn->GetAxis(12)->SetRange(from_bin, to_bin);; ; Conversion from other histogram classes; The static factory function THn::CreateHn() can be used to create a THn from a TH1, TH2, TH3, THnSparse and (for copying) even from a THn. The created THn will have compatble storage type, i.e. calling CreateHn() on a TH2F will create a THnF. ; Definition at line 30 of file THn.h. Public Member Functions;  ~THn () override;  Destruct a THn. ;  ; void AddBinContent (const Int_t *idx, Double_t v=1.);  Forwards to THnBase::SetBinContent(). ;  ; void AddBinContent (Long64_t bin, Double_t v=1.) override;  ; void AddBinError2 (Long64_t bin, Double_t e2) override;  ; ROOT::Inter",MatchSource.WIKI,doc/master/classTHn.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTHn.html
Energy Efficiency,allocate,allocated,"erived classes: THnD (typedef for THnT<Double_t>): bin content held by a Double_t,; THnF (typedef for THnT<Float_t>): bin content held by a Float_t,; THnL (typedef for THnT<Long64_t>): bin content held by a Long64_t,; THnI (typedef for THnT<Int_t>): bin content held by an Int_t,; THnS (typedef for THnT<Short_t>): bin content held by a Short_t,; THnC (typedef for THnT<Char_t>): bin content held by a Char_t,; They take name and title, the number of dimensions, and for each dimension the number of bins, the minimal, and the maximal value on the dimension's axis. A TH2F h(""h"",""h"",10, 0., 10., 20, -5., 5.) would correspond to Int_t bins[2] = {10, 20};; Double_t xmin[2] = {0., -5.};; Double_t xmax[2] = {10., 5.};; THnF hn(""hn"", ""hn"", 2, bins, xmin, xmax);; ; Filling; A THn is filled just like a regular histogram, using THn::Fill(x, weight), where x is a n-dimensional Double_t value. To take errors into account, Sumw2() must be called before filling the histogram. Storage is allocated when the first bin content is stored. Projections; The dimensionality of a THn can be reduced by projecting it to 1, 2, 3, or n dimensions, which can be represented by a TH1, TH2, TH3, or a THn. See the Projection() members. To only project parts of the histogram, call hn->GetAxis(12)->SetRange(from_bin, to_bin);; ; Conversion from other histogram classes; The static factory function THn::CreateHn() can be used to create a THn from a TH1, TH2, TH3, THnSparse and (for copying) even from a THn. The created THn will have compatble storage type, i.e. calling CreateHn() on a TH2F will create a THnF. ; Definition at line 30 of file THn.h. Public Member Functions;  ~THn () override;  Destruct a THn. ;  ; void AddBinContent (const Int_t *idx, Double_t v=1.);  Forwards to THnBase::SetBinContent(). ;  ; void AddBinContent (Long64_t bin, Double_t v=1.) override;  ; void AddBinError2 (Long64_t bin, Double_t e2) override;  ; ROOT::Internal::THnBaseBinIter * CreateIter (Bool_t respectAxisRange) const overri",MatchSource.WIKI,doc/master/classTHn.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTHn.html
Integrability,interface,interface,"sionality of a THn can be reduced by projecting it to 1, 2, 3, or n dimensions, which can be represented by a TH1, TH2, TH3, or a THn. See the Projection() members. To only project parts of the histogram, call hn->GetAxis(12)->SetRange(from_bin, to_bin);; ; Conversion from other histogram classes; The static factory function THn::CreateHn() can be used to create a THn from a TH1, TH2, TH3, THnSparse and (for copying) even from a THn. The created THn will have compatble storage type, i.e. calling CreateHn() on a TH2F will create a THnF. ; Definition at line 30 of file THn.h. Public Member Functions;  ~THn () override;  Destruct a THn. ;  ; void AddBinContent (const Int_t *idx, Double_t v=1.);  Forwards to THnBase::SetBinContent(). ;  ; void AddBinContent (Long64_t bin, Double_t v=1.) override;  ; void AddBinError2 (Long64_t bin, Double_t e2) override;  ; ROOT::Internal::THnBaseBinIter * CreateIter (Bool_t respectAxisRange) const override;  Create an iterator over all bins. Public interface is THnIter. ;  ; void FillBin (Long64_t bin, Double_t w) override;  Increment the bin content of ""bin"" by ""w"", return the bin index. ;  ; virtual const TNDArray & GetArray () const =0;  ; virtual TNDArray & GetArray ()=0;  ; Long64_t GetBin (const char *name[]) const override;  ; Long64_t GetBin (const char *name[], Bool_t=kTRUE) override;  ; Long64_t GetBin (const Double_t *x) const override;  ; Long64_t GetBin (const Double_t *x, Bool_t=kTRUE) override;  ; Long64_t GetBin (const Int_t *idx) const override;  ; Long64_t GetBin (const Int_t *idx, Bool_t=kTRUE) override;  ; Double_t GetBinContent (const Int_t *idx) const;  Forwards to THnBase::GetBinContent() overload. ;  ; Double_t GetBinContent (Long64_t bin, Int_t *idx=nullptr) const override;  Get the content of bin, and set its index if idx is != 0. ;  ; Double_t GetBinError2 (Long64_t linidx) const override;  ; Long64_t GetNbins () const override;  ; TClass * IsA () const override;  ; THn * Projection (Int_t ndim, const Int_t *d",MatchSource.WIKI,doc/master/classTHn.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTHn.html
Modifiability,inherit,inherited,"const Int_t *dim, Option_t *option="""") const;  ; TH3D * Projection (Int_t xDim, Int_t yDim, Int_t zDim, Option_t *option="""") const;  Forwards to THnBase::Projection(). ;  ; TH1D * Projection (Int_t xDim, Option_t *option="""") const;  Forwards to THnBase::Projection(). ;  ; TH2D * Projection (Int_t yDim, Int_t xDim, Option_t *option="""") const;  Forwards to THnBase::Projection(). ;  ; THn * Rebin (const Int_t *group) const;  ; THn * Rebin (Int_t group) const;  ; void Reset (Option_t *option="""") override;  Reset the contents of a THn. ;  ; void SetBinContent (const Int_t *idx, Double_t v);  Forwards to THnBase::SetBinContent(). ;  ; void SetBinContent (Long64_t bin, Double_t v) override;  ; void SetBinError2 (Long64_t bin, Double_t e2) override;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; void Sumw2 () override;  Enable calculation of errors. ;  ;  Public Member Functions inherited from THnBase;  ~THnBase () override;  Destruct a THnBase. ;  ; void Add (const TH1 *hist, Double_t c=1.);  Fill the THnBase with the bins of hist that have content or error != 0. ;  ; void Add (const THnBase *h, Double_t c=1.);  Add contents of h scaled by c to this histogram: this = this + c * h Note that if h has Sumw2 set, Sumw2 is automatically called for this if not already set. ;  ; void AddBinContent (const Int_t *x, Double_t v=1.);  ; void Browse (TBrowser *b) override;  Browse a THnSparse: create an entry (ROOT::THnSparseBrowsable) for each dimension. ;  ; void CalculateErrors (Bool_t calc=kTRUE);  Calculate errors (or not if ""calc"" == kFALSE) ;  ; Double_t ComputeIntegral ();  Compute integral (normalized cumulative sum of bins) w/o under/overflows The result is stored in fIntegral and used by the GetRandom functions. ;  ; void Divide (const THnBase *h);  Divide this histogram by h this = this/(h) Note that if h has Sumw2 set, Sumw2 is automatically called for this if not already set",MatchSource.WIKI,doc/master/classTHn.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTHn.html
Security,hash,hash," override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; TClass * IsA () const override;  ; Bool_t IsSortable () const override;  ; void ls (Option_t *option="""") const override;  List TNamed name and title. ;  ; TNamed & operator= (const TNamed &rhs);  TNamed assignment operator. ;  ; void Print (Option_t *option="""") const override;  Print TNamed name and title. ;  ; virtual void SetName (const char *name);  Set the name of the TNamed. ;  ; virtual void SetNameTitle (const char *name, const char *title);  Set all the TNamed parameters (name and title). ;  ; virtual Int_t Sizeof () const;  Return size of the TNamed part of the TObject. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const cha",MatchSource.WIKI,doc/master/classTHn.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTHn.html
Availability,error,error,". ROOT: THnBase Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Types |; Protected Member Functions |; Static Protected Member Functions |; Protected Attributes |; Friends |; List of all members ; THnBase Class ReferenceabstractHistogram Library. ; Multidimensional histogram base. ; Defines common functionality and interfaces for THn, THnSparse. ; Definition at line 43 of file THnBase.h. Public Member Functions;  ~THnBase () override;  Destruct a THnBase. ;  ; void Add (const TH1 *hist, Double_t c=1.);  Fill the THnBase with the bins of hist that have content or error != 0. ;  ; void Add (const THnBase *h, Double_t c=1.);  Add contents of h scaled by c to this histogram: this = this + c * h Note that if h has Sumw2 set, Sumw2 is automatically called for this if not already set. ;  ; void AddBinContent (const Int_t *x, Double_t v=1.);  ; virtual void AddBinContent (Long64_t bin, Double_t v=1.)=0;  ; virtual void AddBinError2 (Long64_t bin, Double_t e2)=0;  ; void Browse (TBrowser *b) override;  Browse a THnSparse: create an entry (ROOT::THnSparseBrowsable) for each dimension. ;  ; void CalculateErrors (Bool_t calc=kTRUE);  Calculate errors (or not if ""calc"" == kFALSE) ;  ; Double_t ComputeIntegral ();  Compute integral (normalized cumulative sum of bins) w/o under/overflows The result is stored in fIntegral and used by the GetRandom functions. ;  ; virtual ROOT::Internal::THnBaseBinIter * CreateIter (Bool_t respectAxisRange) const =0;  ; void Divide (const THnBase *h);  Divide this histogram by h this = this/(h) Note that if h has Sumw2 set, Sumw2 is automatically called for this if not already set. ;  ; void Divide (const THnBase *h1, const THnBase *h2, Double_t c1=1., Double_t c2=1., Option_t *option="""");  Replace contents of this histogram by multiplication of h1 by h2 this = (c1*h1)/(c2*h2) Note that if h1 or h2 have Sumw2",MatchSource.WIKI,doc/master/classTHnBase.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTHnBase.html
Integrability,interface,interfaces,". ROOT: THnBase Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Types |; Protected Member Functions |; Static Protected Member Functions |; Protected Attributes |; Friends |; List of all members ; THnBase Class ReferenceabstractHistogram Library. ; Multidimensional histogram base. ; Defines common functionality and interfaces for THn, THnSparse. ; Definition at line 43 of file THnBase.h. Public Member Functions;  ~THnBase () override;  Destruct a THnBase. ;  ; void Add (const TH1 *hist, Double_t c=1.);  Fill the THnBase with the bins of hist that have content or error != 0. ;  ; void Add (const THnBase *h, Double_t c=1.);  Add contents of h scaled by c to this histogram: this = this + c * h Note that if h has Sumw2 set, Sumw2 is automatically called for this if not already set. ;  ; void AddBinContent (const Int_t *x, Double_t v=1.);  ; virtual void AddBinContent (Long64_t bin, Double_t v=1.)=0;  ; virtual void AddBinError2 (Long64_t bin, Double_t e2)=0;  ; void Browse (TBrowser *b) override;  Browse a THnSparse: create an entry (ROOT::THnSparseBrowsable) for each dimension. ;  ; void CalculateErrors (Bool_t calc=kTRUE);  Calculate errors (or not if ""calc"" == kFALSE) ;  ; Double_t ComputeIntegral ();  Compute integral (normalized cumulative sum of bins) w/o under/overflows The result is stored in fIntegral and used by the GetRandom functions. ;  ; virtual ROOT::Internal::THnBaseBinIter * CreateIter (Bool_t respectAxisRange) const =0;  ; void Divide (const THnBase *h);  Divide this histogram by h this = this/(h) Note that if h has Sumw2 set, Sumw2 is automatically called for this if not already set. ;  ; void Divide (const THnBase *h1, const THnBase *h2, Double_t c1=1., Double_t c2=1., Option_t *option="""");  Replace contents of this histogram by multiplication of h1 by h2 this = (c1*h1)/(c2*h2) Note that if h1 or h2 have Sumw2",MatchSource.WIKI,doc/master/classTHnBase.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTHnBase.html
Modifiability,inherit,inherited,"= this + c * h Note that if h has Sumw2 set, Sumw2 is automatically called for this if not already set. ;  ; virtual void Reset (Option_t *option="""")=0;  ; void Scale (Double_t c);  Scale contents and errors of this histogram by c: this = this * c It does not modify the histogram's number of entries. ;  ; void SetBinContent (const Int_t *idx, Double_t v);  ; virtual void SetBinContent (Long64_t bin, Double_t v)=0;  ; void SetBinEdges (Int_t idim, const Double_t *bins);  Set the axis # of bins and bin limits on dimension idim. ;  ; void SetBinError (const Int_t *idx, Double_t e);  ; void SetBinError (Long64_t bin, Double_t e);  ; virtual void SetBinError2 (Long64_t bin, Double_t e2)=0;  ; void SetEntries (Double_t entries);  ; void SetTitle (const char *title) override;  Change (i.e. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void Sumw2 ()=0;  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; TClass * IsA () const override;  ; Bool_t IsSortable () const override;  ; void ls (Option_t *option="""") c",MatchSource.WIKI,doc/master/classTHnBase.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTHnBase.html
Performance,perform,performed,"s used as weight. A separate firstval argument is needed so the compiler does not pick this overload instead of the non-templated Fill overloads ; Definition at line 167 of file THnBase.h. ◆ FillBin(). virtual void THnBase::FillBin ; (; Long64_t ; bin, . Double_t ; w . ). pure virtual . Implemented in THn, and THnSparse. ◆ FillBinBase(). void THnBase::FillBinBase ; (; Double_t ; w). inlineprotected . Increment the statistics due to filled weight ""w"",. ; Definition at line 89 of file THnBase.h. ◆ Fit(). TFitResultPtr THnBase::Fit ; (; TF1 * ; f, . Option_t * ; option = """", . Option_t * ; goption = """" . ). Fit a THnSparse with function f. ; since the data is sparse by default a likelihood fit is performed merging all the regions with empty bins for better performance efficiency; Since the THnSparse is not drawn no graphics options are passed Here is the list of possible options = ""I"" Use integral of function in bin instead of value at bin center; = ""X"" Use chi2 method (default is log-likelihood method); = ""U"" Use a User specified fitting algorithm (via SetFCN); = ""Q"" Quiet mode (minimum printing); = ""V"" Verbose mode (default is between Q and V); = ""E"" Perform better Errors estimation using Minos technique; = ""B"" Use this option when you want to fix one or more parameters; and the fitting function is like ""gaus"", ""expo"", ""poln"", ""landau"".; = ""M"" More. Improve fit results; = ""R"" Use the Range specified in the function range . Definition at line 505 of file THnBase.cxx. ◆ GetAxis(). TAxis * THnBase::GetAxis ; (; Int_t ; dim); const. inline . Definition at line 130 of file THnBase.h. ◆ GetBin() [1/6]. virtual Long64_t THnBase::GetBin ; (; const char * ; name[]); const. pure virtual . Implemented in THn, and THnSparse. ◆ GetBin() [2/6]. virtual Long64_t THnBase::GetBin ; (; const char * ; name[], . Bool_t ; = kTRUE . ). pure virtual . Implemented in THnSparse, and THn. ◆ GetBin() [3/6]. virtual Long64_t THnBase::GetBin ; (; const Double_t * ; x); const. pure virtual . Imple",MatchSource.WIKI,doc/master/classTHnBase.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTHnBase.html
Security,hash,hash," of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void Sumw2 ()=0;  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; TClass * IsA () const override;  ; Bool_t IsSortable () const override;  ; void ls (Option_t *option="""") const override;  List TNamed name and title. ;  ; TNamed & operator= (const TNamed &rhs);  TNamed assignment operator. ;  ; void Print (Option_t *option="""") const override;  Print TNamed name and title. ;  ; virtual void SetName (const char *name);  Set the name of the TNamed. ;  ; virtual void SetNameTitle (const char *name, const char *title);  Set all the TNamed parameters (name and title). ;  ; virtual Int_t Sizeof () const;  Return size of the TNamed part of the TObject. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const cha",MatchSource.WIKI,doc/master/classTHnBase.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTHnBase.html
Testability,log,log-likelihood,"s used as weight. A separate firstval argument is needed so the compiler does not pick this overload instead of the non-templated Fill overloads ; Definition at line 167 of file THnBase.h. ◆ FillBin(). virtual void THnBase::FillBin ; (; Long64_t ; bin, . Double_t ; w . ). pure virtual . Implemented in THn, and THnSparse. ◆ FillBinBase(). void THnBase::FillBinBase ; (; Double_t ; w). inlineprotected . Increment the statistics due to filled weight ""w"",. ; Definition at line 89 of file THnBase.h. ◆ Fit(). TFitResultPtr THnBase::Fit ; (; TF1 * ; f, . Option_t * ; option = """", . Option_t * ; goption = """" . ). Fit a THnSparse with function f. ; since the data is sparse by default a likelihood fit is performed merging all the regions with empty bins for better performance efficiency; Since the THnSparse is not drawn no graphics options are passed Here is the list of possible options = ""I"" Use integral of function in bin instead of value at bin center; = ""X"" Use chi2 method (default is log-likelihood method); = ""U"" Use a User specified fitting algorithm (via SetFCN); = ""Q"" Quiet mode (minimum printing); = ""V"" Verbose mode (default is between Q and V); = ""E"" Perform better Errors estimation using Minos technique; = ""B"" Use this option when you want to fix one or more parameters; and the fitting function is like ""gaus"", ""expo"", ""poln"", ""landau"".; = ""M"" More. Improve fit results; = ""R"" Use the Range specified in the function range . Definition at line 505 of file THnBase.cxx. ◆ GetAxis(). TAxis * THnBase::GetAxis ; (; Int_t ; dim); const. inline . Definition at line 130 of file THnBase.h. ◆ GetBin() [1/6]. virtual Long64_t THnBase::GetBin ; (; const char * ; name[]); const. pure virtual . Implemented in THn, and THnSparse. ◆ GetBin() [2/6]. virtual Long64_t THnBase::GetBin ; (; const char * ; name[], . Bool_t ; = kTRUE . ). pure virtual . Implemented in THnSparse, and THn. ◆ GetBin() [3/6]. virtual Long64_t THnBase::GetBin ; (; const Double_t * ; x); const. pure virtual . Imple",MatchSource.WIKI,doc/master/classTHnBase.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTHnBase.html
Availability,error,error,"object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Return",MatchSource.WIKI,doc/master/classTHnChain.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTHnChain.html
Deployability,integrat,integrate,". ROOT: THnChain Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Private Member Functions |; Static Private Member Functions |; Private Attributes |; List of all members ; THnChain Class Reference. ; A class to chain together multiple histograms. ; This class allows to chain together any THnBase-derived (THn or THnSparse) histograms from multiple files. Operations on the axes and projections are supported. The intent is to allow convenient merging merging of projections of high-dimensional histograms.; // `file1.root` and `file2.root` contain a `THnSparse` named `hsparse`.; THnChain hs(""hsparse"");; hs.AddFile(""file1.root"");; hs.AddFile(""file2.root"");; ; // Project out axis 0, integrate over other axes.; TH1* h0 = hs.Projection(0);; ; // Project out axis 0, integrate over other axes in their active ranges.; hs.GetAxis(1)->SetRangeUser(0, 0.1); // select a subrange; TH1* h0 = hs.Projection(0);; TH1TH1 is the base class of all histogram classes in ROOT.Definition TH1.h:59; THnChainA class to chain together multiple histograms.Definition THnChain.h:50. Definition at line 49 of file THnChain.h. Public Member Functions;  THnChain (const char *name);  Default constructor. ;  ; void AddFile (const char *fileName);  Add a new file to this chain. ;  ; TAxis * GetAxis (Int_t i) const;  Get an axis from the histogram. ;  ; TClass * IsA () const override;  ; TH3 * Projection (Int_t xDim, Int_t yDim, Int_t zDim, Option_t *option="""") const;  See THnBase::Projection for the intended behavior. ;  ; TH1 * Projection (Int_t xDim, Option_t *option="""") const;  See THnBase::Projection for the intended behavior. ;  ; TH2 * Projection (Int_t yDim, Int_t xDim, Option_t *option="""") const;  See THnBase::Projection for the intended behavior. ;  ; THnBase * ProjectionND (Int_t ndim, const Int_t *dim, Option_t *option="""") const;  See THnBase::Projection for the int",MatchSource.WIKI,doc/master/classTHnChain.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTHnChain.html
Integrability,integrat,integrate,". ROOT: THnChain Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Private Member Functions |; Static Private Member Functions |; Private Attributes |; List of all members ; THnChain Class Reference. ; A class to chain together multiple histograms. ; This class allows to chain together any THnBase-derived (THn or THnSparse) histograms from multiple files. Operations on the axes and projections are supported. The intent is to allow convenient merging merging of projections of high-dimensional histograms.; // `file1.root` and `file2.root` contain a `THnSparse` named `hsparse`.; THnChain hs(""hsparse"");; hs.AddFile(""file1.root"");; hs.AddFile(""file2.root"");; ; // Project out axis 0, integrate over other axes.; TH1* h0 = hs.Projection(0);; ; // Project out axis 0, integrate over other axes in their active ranges.; hs.GetAxis(1)->SetRangeUser(0, 0.1); // select a subrange; TH1* h0 = hs.Projection(0);; TH1TH1 is the base class of all histogram classes in ROOT.Definition TH1.h:59; THnChainA class to chain together multiple histograms.Definition THnChain.h:50. Definition at line 49 of file THnChain.h. Public Member Functions;  THnChain (const char *name);  Default constructor. ;  ; void AddFile (const char *fileName);  Add a new file to this chain. ;  ; TAxis * GetAxis (Int_t i) const;  Get an axis from the histogram. ;  ; TClass * IsA () const override;  ; TH3 * Projection (Int_t xDim, Int_t yDim, Int_t zDim, Option_t *option="""") const;  See THnBase::Projection for the intended behavior. ;  ; TH1 * Projection (Int_t xDim, Option_t *option="""") const;  See THnBase::Projection for the intended behavior. ;  ; TH2 * Projection (Int_t yDim, Int_t xDim, Option_t *option="""") const;  See THnBase::Projection for the intended behavior. ;  ; THnBase * ProjectionND (Int_t ndim, const Int_t *dim, Option_t *option="""") const;  See THnBase::Projection for the int",MatchSource.WIKI,doc/master/classTHnChain.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTHnChain.html
Modifiability,inherit,inherited,"ms.Definition THnChain.h:50. Definition at line 49 of file THnChain.h. Public Member Functions;  THnChain (const char *name);  Default constructor. ;  ; void AddFile (const char *fileName);  Add a new file to this chain. ;  ; TAxis * GetAxis (Int_t i) const;  Get an axis from the histogram. ;  ; TClass * IsA () const override;  ; TH3 * Projection (Int_t xDim, Int_t yDim, Int_t zDim, Option_t *option="""") const;  See THnBase::Projection for the intended behavior. ;  ; TH1 * Projection (Int_t xDim, Option_t *option="""") const;  See THnBase::Projection for the intended behavior. ;  ; TH2 * Projection (Int_t yDim, Int_t xDim, Option_t *option="""") const;  See THnBase::Projection for the intended behavior. ;  ; THnBase * ProjectionND (Int_t ndim, const Int_t *dim, Option_t *option="""") const;  See THnBase::Projection for the intended behavior. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) c",MatchSource.WIKI,doc/master/classTHnChain.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTHnChain.html
Security,hash,hash," Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Returns name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual const char * GetTitle () const;  Returns title of object. ;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; virtual ULong_t Hash () const;  Return hash value for this object. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns kTRUE if object inherits from class ""classname"". ;  ; virtual Bool_t InheritsFrom (const TClass *cl) const;  Returns kTRUE if object inherits from TClass cl. ;  ; virtual void Inspect () const;  Dump contents of this object in a graphics canvas. ;  ; void InvertBit (UInt_t f);  ; Bool_t IsDestructed () const;  IsDestructed. ;  ; virtual Bool_t IsEqual (const TObject *obj) const;  Default equal comparison (objects are equal if they have the same address in memory). ;  ; virtual Bool_t IsFolder () const;  Returns kTRUE in case object contains browsable objects (like containers or lists of other objects). ;  ; R__ALWAYS_INLINE Bool_t",MatchSource.WIKI,doc/master/classTHnChain.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTHnChain.html
Availability,error,error,"object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Return",MatchSource.WIKI,doc/master/classTHnIter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTHnIter.html
Integrability,message,message,"object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Return",MatchSource.WIKI,doc/master/classTHnIter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTHnIter.html
Modifiability,inherit,inherited,". ROOT: THnIter Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Private Attributes |; List of all members ; THnIter Class Reference. ; Iterator over THnBase bins. ; Definition at line 333 of file THnBase.h. Public Member Functions;  THnIter (const THnBase *hist, Bool_t respectAxisRange=kFALSE);  ;  ~THnIter () override;  ; Int_t GetCoord (Int_t dim) const;  ; Bool_t HaveSkippedBin () const;  ; TClass * IsA () const override;  ; Long64_t Next (Int_t *coord=nullptr);  Return the next bin's index. ;  ; Bool_t RespectsAxisRange () const;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; vir",MatchSource.WIKI,doc/master/classTHnIter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTHnIter.html
Security,hash,hash," Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Returns name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual const char * GetTitle () const;  Returns title of object. ;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; virtual ULong_t Hash () const;  Return hash value for this object. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns kTRUE if object inherits from class ""classname"". ;  ; virtual Bool_t InheritsFrom (const TClass *cl) const;  Returns kTRUE if object inherits from TClass cl. ;  ; virtual void Inspect () const;  Dump contents of this object in a graphics canvas. ;  ; void InvertBit (UInt_t f);  ; Bool_t IsDestructed () const;  IsDestructed. ;  ; virtual Bool_t IsEqual (const TObject *obj) const;  Default equal comparison (objects are equal if they have the same address in memory). ;  ; virtual Bool_t IsFolder () const;  Returns kTRUE in case object contains browsable objects (like containers or lists of other objects). ;  ; R__ALWAYS_INLINE Bool_t",MatchSource.WIKI,doc/master/classTHnIter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTHnIter.html
Availability,error,error,"rse(const char *name, const char *title, const TH1 *h1, Int_t chunkSize=1024 *16)THnSparseinlinestatic; CreateSparse(const char *name, const char *title, const THnBase *hn, Int_t chunkSize=1024 *16)THnSparseinlinestatic; DeclFileName()THnSparseinlinestatic; Delete(Option_t *option="""")TObjectvirtual; DistancetoPrimitive(Int_t px, Int_t py)TObjectvirtual; Divide(const THnBase *h)THnBase; Divide(const THnBase *h1, const THnBase *h2, Double_t c1=1., Double_t c2=1., Option_t *option="""")THnBase; DoError(int level, const char *location, const char *fmt, va_list va) constTObjectprotectedvirtual; Draw(Option_t *option="""")TObjectvirtual; DrawClass() constTObjectvirtual; DrawClone(Option_t *option="""") constTObjectvirtual; Dump() constTObjectvirtual; EDeprecatedStatusBits enum nameTObject; Error(const char *method, const char *msgfmt,...) constTObjectvirtual; EStatusBits enum nameTObject; Execute(const char *method, const char *params, Int_t *error=nullptr)TObjectvirtual; Execute(TMethod *method, TObjArray *params, Int_t *error=nullptr)TObjectvirtual; ExecuteEvent(Int_t event, Int_t px, Int_t py)TObjectvirtual; Fatal(const char *method, const char *msgfmt,...) constTObjectvirtual; fAxesTHnBaseprotected; fBinContentTHnSparseprivate; fBinsTHnSparseprivate; fBinsContinuedTHnSparseprivate; fBitsTObjectprivate; fBrowsablesTHnBaseprotected; fChunkSizeTHnSparseprivate; fCompactCoordTHnSparseprivate; fEntriesTHnBaseprotected; fFilledBinsTHnSparseprivate; fgDtorOnlyTObjectprivatestatic; fgObjectStatTObjectprivatestatic; Fill(const Double_t *x, Double_t w=1.)THnBaseinline; Fill(const char *name[], Double_t w=1.)THnBaseinline; Fill(Double_t firstval, MoreTypes... morevals)THnBaseinline; FillBin(Long64_t bin, Double_t w) overrideTHnSparseinlineprotectedvirtual; FillBinBase(Double_t w)THnBaseinlineprotected; FillBuffer(char *&buffer)TNamedvirtual; FillExMap()THnSparseprotected; FindObject(const char *name) constTObjectvirtual; FindObject(const TObject *obj) constTObjectvirtual; fIntegralTHn",MatchSource.WIKI,doc/master/classTHnSparse-members.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTHnSparse-members.html
Energy Efficiency,allocate,allocate,,MatchSource.WIKI,doc/master/classTHnSparse-members.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTHnSparse-members.html
Modifiability,inherit,inherited,". ROOT: Member List. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. THnSparse Member List. This is the complete list of members for THnSparse, including all inherited members. AbstractMethod(const char *method) constTObject; Add(const THnBase *h, Double_t c=1.)THnBase; Add(const TH1 *hist, Double_t c=1.)THnBase; AddBinContent(const Int_t *idx, Double_t v=1.)THnSparseinline; AddBinContent(Long64_t bin, Double_t v=1.) overrideTHnSparsevirtual; AddBinError2(Long64_t bin, Double_t e2) overrideTHnSparsevirtual; AddChunk()THnSparseprotected; AddInternal(const THnBase *h, Double_t c, Bool_t rebinned)THnBaseprotected; AddToTObjectTable(TObject *)TObjectprivatestatic; AppendPad(Option_t *option="""")TObjectvirtual; Browse(TBrowser *b) overrideTHnBasevirtual; CalculateErrors(Bool_t calc=kTRUE)THnBaseinline; CheckConsistency(const THnBase *h, const char *tag) constTHnBaseprotected; CheckedHash()TObjectinline; Class()THnSparsestatic; Class_Name()THnSparsestatic; Class_Version()THnSparseinlinestatic; ClassName() constTObjectvirtual; Clear(Option_t *option="""") overrideTNamedvirtual; Clone(const char *newname="""") const overrideTNamedvirtual; CloneEmpty(const char *name, const char *title, const TObjArray *axes, Bool_t keepTargetAxis) constTHnBaseprotected; Compare(const TObject *obj) const overrideTNamedvirtual; ComputeIntegral()THnBase; Copy(TObject &named) const overrideTNamedvirtual; CreateHist(const char *name, const char *title, const TObjArray *axes, Bool_t keepTargetAxis) constTHnBaseprotected; CreateHnAny(const char *name, const char *title, const TH1 *h1, Bool_t sparse, Int_t chunkSize=1024 *16)THnBaseprotectedstatic; CreateHnAny(const char *name, const char *title, const THnBase *hn, Bool_t sparse, Int_t chunkSize=1024 *16)THnBaseprotectedstatic; CreateIter(Bool_t respectAxisRange) const overrideTHnSparsevirtual; CreateSparse(const char *name, const char *title, const TH1 *h1, Int_t chunkSize=1024 *16)THnSparseinlinestatic; CreateSparse(con",MatchSource.WIKI,doc/master/classTHnSparse-members.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTHnSparse-members.html
Availability,error,errors,"THnSparseD (typedef for THnSparseT<ArrayD>): bin content held by a Double_t,; THnSparseF (typedef for THnSparseT<ArrayF>): bin content held by a Float_t,; THnSparseL (typedef for THnSparseT<ArrayL64>): bin content held by a Long64_t,; THnSparseI (typedef for THnSparseT<ArrayI>): bin content held by an Int_t,; THnSparseS (typedef for THnSparseT<ArrayS>): bin content held by a Short_t,; THnSparseC (typedef for THnSparseT<ArrayC>): bin content held by a Char_t,. They take name and title, the number of dimensions, and for each dimension the number of bins, the minimal, and the maximal value on the dimension's axis. A TH2 h(""h"",""h"",10, 0., 10., 20, -5., 5.) would correspond to Int_t bins[2] = {10, 20};; Double_t xmin[2] = {0., -5.};; Double_t xmax[2] = {10., 5.};; THnSparseD hs(""hs"", ""hs"", 2, bins, xmin, xmax);; ; Filling; A THnSparse is filled just like a regular histogram, using THnSparse::Fill(x, weight), where x is a n-dimensional Double_t value. To take errors into account, Sumw2() must be called before filling the histogram.; Bins are allocated as needed; the status of the allocation can be observed by GetSparseFractionBins(), GetSparseFractionMem(). Fast Bin Content Access; When iterating over a THnSparse one should only look at filled bins to save processing time. The number of filled bins is returned by THnSparse::GetNbins(); the bin content for each (linear) bin number can be retrieved by THnSparse::GetBinContent(linidx, (Int_t*)coord). After the call, coord will contain the bin coordinate of each axis for the bin with linear index linidx. A possible call would be; std::cout << hs.GetBinContent(0, coord); std::cout <<"" is the content of bin [x = "" << coord[0] ""; << "" | y = "" << coord[1] << ""]"" << std::endl;. @subsection autotoc_md369 Efficiency; TH1 and TH2 are generally faster than THnSparse for one and two dimensional; distributions. THnSparse becomes competitive for a sparsely filled TH3; with large numbers of bins per dimension. The tutorial sparsehist.C; s",MatchSource.WIKI,doc/master/classTHnSparse.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTHnSparse.html
Energy Efficiency,allocate,allocates,". ROOT: THnSparse Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Private Member Functions |; Private Attributes |; List of all members ; THnSparse Class ReferenceabstractHistogram Library. ; Efficient multidimensional histogram. ; Use a THnSparse instead of TH1 / TH2 / TH3 / array for histogramming when only a small fraction of bins is filled. A 10-dimensional histogram with 10 bins per dimension has 10^10 bins; in a naive implementation this will not fit in memory. THnSparse only allocates memory for the bins that have non-zero bin content instead, drastically reducing both the memory usage and the access time.; To construct a THnSparse object you must use one of its templated, derived classes:; THnSparseD (typedef for THnSparseT<ArrayD>): bin content held by a Double_t,; THnSparseF (typedef for THnSparseT<ArrayF>): bin content held by a Float_t,; THnSparseL (typedef for THnSparseT<ArrayL64>): bin content held by a Long64_t,; THnSparseI (typedef for THnSparseT<ArrayI>): bin content held by an Int_t,; THnSparseS (typedef for THnSparseT<ArrayS>): bin content held by a Short_t,; THnSparseC (typedef for THnSparseT<ArrayC>): bin content held by a Char_t,. They take name and title, the number of dimensions, and for each dimension the number of bins, the minimal, and the maximal value on the dimension's axis. A TH2 h(""h"",""h"",10, 0., 10., 20, -5., 5.) would correspond to Int_t bins[2] = {10, 20};; Double_t xmin[2] = {0., -5.};; Double_t xmax[2] = {10., 5.};; THnSparseD hs(""hs"", ""hs"", 2, bins, xmin, xmax);; ; Filling; A THnSparse is filled just like a regular histogram, using THnSparse::Fill(x, weight), where x is a n-dimensional Double_t value. To take errors into account, Sumw2() must be called before filling the histogram.; Bins are allocated as needed; the status of the allocation can be observed by GetSparse",MatchSource.WIKI,doc/master/classTHnSparse.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTHnSparse.html
Integrability,message,message,"option="""");  Append graphics object to current pad. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t ",MatchSource.WIKI,doc/master/classTHnSparse.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTHnSparse.html
Modifiability,inherit,inherited," ; TH1D * Projection (Int_t xDim, Option_t *option="""") const;  Forwards to THnBase::Projection(). ;  ; TH2D * Projection (Int_t yDim, Int_t xDim, Option_t *option="""") const;  Forwards to THnBase::Projection(). ;  ; THnSparse * Rebin (const Int_t *group) const;  ; THnSparse * Rebin (Int_t group) const;  ; void Reset (Option_t *option="""") override;  Clear the histogram. ;  ; void SetBinContent (const Int_t *idx, Double_t v);  Forwards to THnBase::SetBinContent(). ;  ; void SetBinContent (Long64_t bin, Double_t v) override;  Set content of bin with index ""bin"" to ""v"". ;  ; void SetBinError2 (Long64_t bin, Double_t e2) override;  Set error of bin with index ""bin"" to ""e"", enable errors if needed. ;  ; void SetFilledBins (Long64_t nbins) override;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; void Sumw2 () override;  Enable calculation of errors. ;  ;  Public Member Functions inherited from THnBase;  ~THnBase () override;  Destruct a THnBase. ;  ; void Add (const TH1 *hist, Double_t c=1.);  Fill the THnBase with the bins of hist that have content or error != 0. ;  ; void Add (const THnBase *h, Double_t c=1.);  Add contents of h scaled by c to this histogram: this = this + c * h Note that if h has Sumw2 set, Sumw2 is automatically called for this if not already set. ;  ; void AddBinContent (const Int_t *x, Double_t v=1.);  ; void Browse (TBrowser *b) override;  Browse a THnSparse: create an entry (ROOT::THnSparseBrowsable) for each dimension. ;  ; void CalculateErrors (Bool_t calc=kTRUE);  Calculate errors (or not if ""calc"" == kFALSE) ;  ; Double_t ComputeIntegral ();  Compute integral (normalized cumulative sum of bins) w/o under/overflows The result is stored in fIntegral and used by the GetRandom functions. ;  ; void Divide (const THnBase *h);  Divide this histogram by h this = this/(h) Note that if h has Sumw2 set, Sumw2 is automatically called for this if not already set",MatchSource.WIKI,doc/master/classTHnSparse.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTHnSparse.html
Security,access,access,". ROOT: THnSparse Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Private Member Functions |; Private Attributes |; List of all members ; THnSparse Class ReferenceabstractHistogram Library. ; Efficient multidimensional histogram. ; Use a THnSparse instead of TH1 / TH2 / TH3 / array for histogramming when only a small fraction of bins is filled. A 10-dimensional histogram with 10 bins per dimension has 10^10 bins; in a naive implementation this will not fit in memory. THnSparse only allocates memory for the bins that have non-zero bin content instead, drastically reducing both the memory usage and the access time.; To construct a THnSparse object you must use one of its templated, derived classes:; THnSparseD (typedef for THnSparseT<ArrayD>): bin content held by a Double_t,; THnSparseF (typedef for THnSparseT<ArrayF>): bin content held by a Float_t,; THnSparseL (typedef for THnSparseT<ArrayL64>): bin content held by a Long64_t,; THnSparseI (typedef for THnSparseT<ArrayI>): bin content held by an Int_t,; THnSparseS (typedef for THnSparseT<ArrayS>): bin content held by a Short_t,; THnSparseC (typedef for THnSparseT<ArrayC>): bin content held by a Char_t,. They take name and title, the number of dimensions, and for each dimension the number of bins, the minimal, and the maximal value on the dimension's axis. A TH2 h(""h"",""h"",10, 0., 10., 20, -5., 5.) would correspond to Int_t bins[2] = {10, 20};; Double_t xmin[2] = {0., -5.};; Double_t xmax[2] = {10., 5.};; THnSparseD hs(""hs"", ""hs"", 2, bins, xmin, xmax);; ; Filling; A THnSparse is filled just like a regular histogram, using THnSparse::Fill(x, weight), where x is a n-dimensional Double_t value. To take errors into account, Sumw2() must be called before filling the histogram.; Bins are allocated as needed; the status of the allocation can be observed by GetSparse",MatchSource.WIKI,doc/master/classTHnSparse.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTHnSparse.html
Availability,error,errors,". ROOT: THnSparseArrayChunk Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Public Attributes |; Private Member Functions |; List of all members ; THnSparseArrayChunk Class Reference. ; THnSparseArrayChunk is used internally by THnSparse. ; THnSparse stores its (dynamic size) array of bin coordinates and their contents (and possibly errors) in a TObjArray of THnSparseArrayChunk. Each of the chunks holds an array of THnSparseCompactBinCoord and the content (a TArray*), which is created outside (by the templated derived classes of THnSparse) and passed in at construction time. ; Definition at line 30 of file THnSparse_Internal.h. Public Member Functions;  THnSparseArrayChunk ();  ;  THnSparseArrayChunk (Int_t coordsize, bool errors, TArray *cont);  (Default) initialize a chunk. ;  ;  ~THnSparseArrayChunk () override;  Destructor. ;  ; void AddBin (Int_t idx, const Char_t *idxbuf);  Create a new bin in this chunk. ;  ; void AddBinContent (Int_t idx, Double_t v=1.);  ; Int_t GetEntries () const;  ; TClass * IsA () const override;  ; Bool_t Matches (Int_t idx, const Char_t *idxbuf) const;  Check whether bin at idx batches idxbuf. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; void Sumw2 ();  Turn on support of errors. ;  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default acti",MatchSource.WIKI,doc/master/classTHnSparseArrayChunk.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTHnSparseArrayChunk.html
Energy Efficiency,allocate,allocated,"onst char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  . Public Attributes; TArray * fContent;  Bin content. ;  ; Int_t fCoordinateAllocationSize;  ! Size of the allocated coordinate buffer; -1 means none or fCoordinatesSize ;  ; Char_t * fCoordinates;  [fCoordinatesSize] compact bin coordinate buffer ;  ; Int_t fCoordinatesSize;  Size of the bin coordinate buffer. ;  ; Int_t fSingleCoordinateSize;  Size of a single bin coordinate. ;  ; TArrayD * fSumw2;  Bin errors. ;  . Private Member Functions;  THnSparseArrayChunk (const THnSparseArrayChunk &)=delete;  ; THnSparseArrayChunk & operator= (const THnSparseArrayChunk &)=delete;  . Additional Inherited Members;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContex",MatchSource.WIKI,doc/master/classTHnSparseArrayChunk.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTHnSparseArrayChunk.html
Integrability,message,message,"object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Return",MatchSource.WIKI,doc/master/classTHnSparseArrayChunk.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTHnSparseArrayChunk.html
Modifiability,inherit,inherited,"hunk. Each of the chunks holds an array of THnSparseCompactBinCoord and the content (a TArray*), which is created outside (by the templated derived classes of THnSparse) and passed in at construction time. ; Definition at line 30 of file THnSparse_Internal.h. Public Member Functions;  THnSparseArrayChunk ();  ;  THnSparseArrayChunk (Int_t coordsize, bool errors, TArray *cont);  (Default) initialize a chunk. ;  ;  ~THnSparseArrayChunk () override;  Destructor. ;  ; void AddBin (Int_t idx, const Char_t *idxbuf);  Create a new bin in this chunk. ;  ; void AddBinContent (Int_t idx, Double_t v=1.);  ; Int_t GetEntries () const;  ; TClass * IsA () const override;  ; Bool_t Matches (Int_t idx, const Char_t *idxbuf) const;  Check whether bin at idx batches idxbuf. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; void Sumw2 ();  Turn on support of errors. ;  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;",MatchSource.WIKI,doc/master/classTHnSparseArrayChunk.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTHnSparseArrayChunk.html
Security,hash,hash," Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Returns name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual const char * GetTitle () const;  Returns title of object. ;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; virtual ULong_t Hash () const;  Return hash value for this object. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns kTRUE if object inherits from class ""classname"". ;  ; virtual Bool_t InheritsFrom (const TClass *cl) const;  Returns kTRUE if object inherits from TClass cl. ;  ; virtual void Inspect () const;  Dump contents of this object in a graphics canvas. ;  ; void InvertBit (UInt_t f);  ; Bool_t IsDestructed () const;  IsDestructed. ;  ; virtual Bool_t IsEqual (const TObject *obj) const;  Default equal comparison (objects are equal if they have the same address in memory). ;  ; virtual Bool_t IsFolder () const;  Returns kTRUE in case object contains browsable objects (like containers or lists of other objects). ;  ; R__ALWAYS_INLINE Bool_t",MatchSource.WIKI,doc/master/classTHnSparseArrayChunk.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTHnSparseArrayChunk.html
Modifiability,inherit,inherited,". ROOT: THnSparseCompactBinCoord Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Private Member Functions |; Private Attributes |; List of all members ; THnSparseCompactBinCoord Class Reference. ; THnSparseCompactBinCoord is a class used by THnSparse internally. ; It maps between an n-dimensional array of bin coordinates (indices) and its compact version, the THnSparseCoordCompression. ; Definition at line 351 of file THnSparse.cxx. Public Member Functions;  THnSparseCompactBinCoord (Int_t dim, const Int_t *nbins);  Initialize a THnSparseCompactBinCoord object with ""dim"" dimensions and ""bins"" holding the number of bins for each dimension. ;  ;  ~THnSparseCompactBinCoord ();  destruct a THnSparseCompactBinCoord ;  ; const Char_t * GetBuffer () const;  ; Int_t * GetCoord ();  ; ULong64_t GetHash () const;  ; void SetBuffer (const Char_t *buf);  ; void SetCoord (const Int_t *coord);  ; void UpdateCoord ();  ;  Public Member Functions inherited from THnSparseCoordCompression;  THnSparseCoordCompression (const THnSparseCoordCompression &other);  Construct a THnSparseCoordCompression from another one. ;  ;  THnSparseCoordCompression (Int_t dim, const Int_t *nbins);  Initialize a THnSparseCoordCompression object with ""dim"" dimensions and ""bins"" holding the number of bins for each dimension; it stores the. ;  ;  ~THnSparseCoordCompression ();  destruct a THnSparseCoordCompression ;  ; Int_t GetBufferSize () const;  ; ULong64_t GetHashFromBuffer (const Char_t *buf) const;  Calculate hash from compact bin index. ;  ; Int_t GetNdimensions () const;  ; THnSparseCoordCompression & operator= (const THnSparseCoordCompression &other);  Set this to other if different. ;  ; ULong64_t SetBufferFromCoord (const Int_t *coord_in, Char_t *buf_out) const;  Given the cbin coordinates coord_in, calculate (""compact"") the bin coordinates and return them in buf_in. ;  ; void SetCoordFromBuffer (co",MatchSource.WIKI,doc/master/classTHnSparseCompactBinCoord.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTHnSparseCompactBinCoord.html
Security,hash,hash,"HnSparse.cxx. Public Member Functions;  THnSparseCompactBinCoord (Int_t dim, const Int_t *nbins);  Initialize a THnSparseCompactBinCoord object with ""dim"" dimensions and ""bins"" holding the number of bins for each dimension. ;  ;  ~THnSparseCompactBinCoord ();  destruct a THnSparseCompactBinCoord ;  ; const Char_t * GetBuffer () const;  ; Int_t * GetCoord ();  ; ULong64_t GetHash () const;  ; void SetBuffer (const Char_t *buf);  ; void SetCoord (const Int_t *coord);  ; void UpdateCoord ();  ;  Public Member Functions inherited from THnSparseCoordCompression;  THnSparseCoordCompression (const THnSparseCoordCompression &other);  Construct a THnSparseCoordCompression from another one. ;  ;  THnSparseCoordCompression (Int_t dim, const Int_t *nbins);  Initialize a THnSparseCoordCompression object with ""dim"" dimensions and ""bins"" holding the number of bins for each dimension; it stores the. ;  ;  ~THnSparseCoordCompression ();  destruct a THnSparseCoordCompression ;  ; Int_t GetBufferSize () const;  ; ULong64_t GetHashFromBuffer (const Char_t *buf) const;  Calculate hash from compact bin index. ;  ; Int_t GetNdimensions () const;  ; THnSparseCoordCompression & operator= (const THnSparseCoordCompression &other);  Set this to other if different. ;  ; ULong64_t SetBufferFromCoord (const Int_t *coord_in, Char_t *buf_out) const;  Given the cbin coordinates coord_in, calculate (""compact"") the bin coordinates and return them in buf_in. ;  ; void SetCoordFromBuffer (const Char_t *buf_in, Int_t *coord_out) const;  Given the compressed coordinate buffer buf_in, calculate (""decompact"") the bin coordinates and return them in coord_out. ;  . Private Member Functions;  THnSparseCompactBinCoord (const THnSparseCompactBinCoord &)=delete;  ; THnSparseCompactBinCoord & operator= (const THnSparseCompactBinCoord &)=delete;  . Private Attributes; Char_t * fCoordBuffer;  ; Int_t * fCurrentBin;  ; ULong64_t fHash;  . Additional Inherited Members;  Protected Member Functions inherited from THnSpa",MatchSource.WIKI,doc/master/classTHnSparseCompactBinCoord.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTHnSparseCompactBinCoord.html
Availability,error,error," on purpose. That way the (templated thus inlined) uses of this class will only create a small amount of machine code, in contrast to e.g. STL. ; Definition at line 207 of file THnSparse.h. Public Member Functions;  THnSparseT ();  ;  THnSparseT (const char *name, const char *title, Int_t dim, const Int_t *nbins, const Double_t *xmin=nullptr, const Double_t *xmax=nullptr, Int_t chunksize=1024 *16);  ; TArray * GenerateArray () const override;  ; TClass * IsA () const override;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from THnSparse;  ~THnSparse () override;  Destruct a THnSparse. ;  ; void AddBinContent (const Int_t *idx, Double_t v=1.);  Forwards to THnBase::AddBinContent(). ;  ; void AddBinContent (Long64_t bin, Double_t v=1.) override;  Add ""v"" to the content of bin with index ""bin"". ;  ; void AddBinError2 (Long64_t bin, Double_t e2) override;  Add ""e"" to error of bin with index ""bin"", enable errors if needed. ;  ; ROOT::Internal::THnBaseBinIter * CreateIter (Bool_t respectAxisRange) const override;  Create an iterator over all filled bins of a THnSparse. ;  ; Long64_t GetBin (const char *name[]) const override;  ; Long64_t GetBin (const char *name[], Bool_t allocate=kTRUE) override;  Get the bin index for the n dimensional tuple addressed by ""name"", allocate one if it doesn't exist yet and ""allocate"" is true. ;  ; Long64_t GetBin (const Double_t *x) const override;  ; Long64_t GetBin (const Double_t *x, Bool_t allocate=kTRUE) override;  Get the bin index for the n dimensional tuple x, allocate one if it doesn't exist yet and ""allocate"" is true. ;  ; Long64_t GetBin (const Int_t *idx) const override;  ; Long64_t GetBin (const Int_t *idx, Bool_t allocate=kTRUE) override;  Get the bin index for the n dimensional coordinates coord, allocate one if it doesn't exist yet and ""allocate"" is true. ;  ; Double_t GetBinContent (const Int_",MatchSource.WIKI,doc/master/classTHnSparseT.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTHnSparseT.html
Energy Efficiency,allocate,allocate,", const Double_t *xmax=nullptr, Int_t chunksize=1024 *16);  ; TArray * GenerateArray () const override;  ; TClass * IsA () const override;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from THnSparse;  ~THnSparse () override;  Destruct a THnSparse. ;  ; void AddBinContent (const Int_t *idx, Double_t v=1.);  Forwards to THnBase::AddBinContent(). ;  ; void AddBinContent (Long64_t bin, Double_t v=1.) override;  Add ""v"" to the content of bin with index ""bin"". ;  ; void AddBinError2 (Long64_t bin, Double_t e2) override;  Add ""e"" to error of bin with index ""bin"", enable errors if needed. ;  ; ROOT::Internal::THnBaseBinIter * CreateIter (Bool_t respectAxisRange) const override;  Create an iterator over all filled bins of a THnSparse. ;  ; Long64_t GetBin (const char *name[]) const override;  ; Long64_t GetBin (const char *name[], Bool_t allocate=kTRUE) override;  Get the bin index for the n dimensional tuple addressed by ""name"", allocate one if it doesn't exist yet and ""allocate"" is true. ;  ; Long64_t GetBin (const Double_t *x) const override;  ; Long64_t GetBin (const Double_t *x, Bool_t allocate=kTRUE) override;  Get the bin index for the n dimensional tuple x, allocate one if it doesn't exist yet and ""allocate"" is true. ;  ; Long64_t GetBin (const Int_t *idx) const override;  ; Long64_t GetBin (const Int_t *idx, Bool_t allocate=kTRUE) override;  Get the bin index for the n dimensional coordinates coord, allocate one if it doesn't exist yet and ""allocate"" is true. ;  ; Double_t GetBinContent (const Int_t *idx) const;  Forwards to THnBase::GetBinContent() overload. ;  ; Double_t GetBinContent (Long64_t bin, Int_t *idx=nullptr) const override;  Return the content of the filled bin number ""idx"". ;  ; Double_t GetBinError2 (Long64_t linidx) const override;  Get square of the error of bin addressed by linidx as \(\sum weight^{2}\) If errors ar",MatchSource.WIKI,doc/master/classTHnSparseT.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTHnSparseT.html
Integrability,interface,interfaces,". ROOT: THnSparseT< CONT > Class Template Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; List of all members ; THnSparseT< CONT > Class Template Reference. ; template<class CONT>; class THnSparseT< CONT >Templated implementation of the abstract base THnSparse. ; All functionality and the interfaces to be used are in THnSparse!; THnSparse does not know how to store any bin content itself. Instead, this is delegated to the derived, templated class: the template parameter decides what the format for the bin content is. In fact it even defines the array itself; possible implementations probably derive from TArray.; Typedefs exist for template parameters with ROOT's generic types:. Templated name Typedef Bin content type . THnSparseT<TArrayC> THnSparseC Char_t . THnSparseT<TArrayS> THnSparseS Short_t . THnSparseT<TArrayI> THnSparseI Int_t . THnSparseT<TArrayL64> THnSparseL Long64_t . THnSparseT<TArrayF> THnSparseF Float_t . THnSparseT<TArrayD> THnSparseD Double_t . We recommend to use THnSparseC wherever possible, and to map its value space of 256 possible values to e.g. float values outside the class. This saves an enormous amount of memory. Only if more than 256 values need to be distinguished should e.g. THnSparseS or even THnSparseF be chosen.; Implementation detail: the derived, templated class is kept extremely small on purpose. That way the (templated thus inlined) uses of this class will only create a small amount of machine code, in contrast to e.g. STL. ; Definition at line 207 of file THnSparse.h. Public Member Functions;  THnSparseT ();  ;  THnSparseT (const char *name, const char *title, Int_t dim, const Int_t *nbins, const Double_t *xmin=nullptr, const Double_t *xmax=nullptr, Int_t chunksize=1024 *16);  ; TArray * GenerateArray () const override;  ; TClass * IsA () const override;  ; void Streamer (TBuffer &) override;  Stream an o",MatchSource.WIKI,doc/master/classTHnSparseT.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTHnSparseT.html
Modifiability,inherit,inherited,"ecommend to use THnSparseC wherever possible, and to map its value space of 256 possible values to e.g. float values outside the class. This saves an enormous amount of memory. Only if more than 256 values need to be distinguished should e.g. THnSparseS or even THnSparseF be chosen.; Implementation detail: the derived, templated class is kept extremely small on purpose. That way the (templated thus inlined) uses of this class will only create a small amount of machine code, in contrast to e.g. STL. ; Definition at line 207 of file THnSparse.h. Public Member Functions;  THnSparseT ();  ;  THnSparseT (const char *name, const char *title, Int_t dim, const Int_t *nbins, const Double_t *xmin=nullptr, const Double_t *xmax=nullptr, Int_t chunksize=1024 *16);  ; TArray * GenerateArray () const override;  ; TClass * IsA () const override;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from THnSparse;  ~THnSparse () override;  Destruct a THnSparse. ;  ; void AddBinContent (const Int_t *idx, Double_t v=1.);  Forwards to THnBase::AddBinContent(). ;  ; void AddBinContent (Long64_t bin, Double_t v=1.) override;  Add ""v"" to the content of bin with index ""bin"". ;  ; void AddBinError2 (Long64_t bin, Double_t e2) override;  Add ""e"" to error of bin with index ""bin"", enable errors if needed. ;  ; ROOT::Internal::THnBaseBinIter * CreateIter (Bool_t respectAxisRange) const override;  Create an iterator over all filled bins of a THnSparse. ;  ; Long64_t GetBin (const char *name[]) const override;  ; Long64_t GetBin (const char *name[], Bool_t allocate=kTRUE) override;  Get the bin index for the n dimensional tuple addressed by ""name"", allocate one if it doesn't exist yet and ""allocate"" is true. ;  ; Long64_t GetBin (const Double_t *x) const override;  ; Long64_t GetBin (const Double_t *x, Bool_t allocate=kTRUE) override;  Get the bin index for the n dimension",MatchSource.WIKI,doc/master/classTHnSparseT.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTHnSparseT.html
Security,hash,hash,"le (const char *title) override;  Change (i.e. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; TClass * IsA () const override;  ; Bool_t IsSortable () const override;  ; void ls (Option_t *option="""") const override;  List TNamed name and title. ;  ; TNamed & operator= (const TNamed &rhs);  TNamed assignment operator. ;  ; void Print (Option_t *option="""") const override;  Print TNamed name and title. ;  ; virtual void SetName (const char *name);  Set the name of the TNamed. ;  ; virtual void SetNameTitle (const char *name, const char *title);  Set all the TNamed parameters (name and title). ;  ; virtual Int_t Sizeof () const;  Return size of the TNamed part of the TObject. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const cha",MatchSource.WIKI,doc/master/classTHnSparseT.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTHnSparseT.html
Availability,error,errors,"ent (Long64_t bin, Int_t *idx=nullptr) const override;  Get the content of bin, and set its index if idx is != 0. ;  ; Double_t GetBinError2 (Long64_t linidx) const override;  ; Long64_t GetNbins () const override;  ; THn * Projection (Int_t ndim, const Int_t *dim, Option_t *option="""") const;  ; TH3D * Projection (Int_t xDim, Int_t yDim, Int_t zDim, Option_t *option="""") const;  Forwards to THnBase::Projection(). ;  ; TH1D * Projection (Int_t xDim, Option_t *option="""") const;  Forwards to THnBase::Projection(). ;  ; TH2D * Projection (Int_t yDim, Int_t xDim, Option_t *option="""") const;  Forwards to THnBase::Projection(). ;  ; THn * Rebin (const Int_t *group) const;  ; THn * Rebin (Int_t group) const;  ; void Reset (Option_t *option="""") override;  Reset the contents of a THn. ;  ; void SetBinContent (const Int_t *idx, Double_t v);  Forwards to THnBase::SetBinContent(). ;  ; void SetBinContent (Long64_t bin, Double_t v) override;  ; void SetBinError2 (Long64_t bin, Double_t e2) override;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; void Sumw2 () override;  Enable calculation of errors. ;  ;  Public Member Functions inherited from THnBase;  ~THnBase () override;  Destruct a THnBase. ;  ; void Add (const TH1 *hist, Double_t c=1.);  Fill the THnBase with the bins of hist that have content or error != 0. ;  ; void Add (const THnBase *h, Double_t c=1.);  Add contents of h scaled by c to this histogram: this = this + c * h Note that if h has Sumw2 set, Sumw2 is automatically called for this if not already set. ;  ; void AddBinContent (const Int_t *x, Double_t v=1.);  ; void Browse (TBrowser *b) override;  Browse a THnSparse: create an entry (ROOT::THnSparseBrowsable) for each dimension. ;  ; void CalculateErrors (Bool_t calc=kTRUE);  Calculate errors (or not if ""calc"" == kFALSE) ;  ; Double_t ComputeIntegral ();  Compute integral (normalized cumulative sum of bins) w/o under/overflows The result is stored in fIntegral and used by the GetRandom functions",MatchSource.WIKI,doc/master/classTHnT.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTHnT.html
Integrability,interface,interfaces,". ROOT: THnT< T > Class Template Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Attributes |; List of all members ; THnT< T > Class Template Reference. ; template<typename T>; class THnT< T >Templated implementation of the abstract base THn. ; All functionality and the interfaces to be used are in THn!; THn does not know how to store any bin content itself. Instead, this is delegated to the derived, templated class: the template parameter decides what the format for the bin content is. The actual storage is delegated to TNDArrayT<T>.; Typedefs exist for template parameters with ROOT's generic types:. Templated name Typedef Bin content type . THnT<Char_t> THnC Char_t . THnT<Short_t> THnS Short_t . THnT<Int_t> THnI Int_t . THnT<Long64_t> THnL Long64_t . THnT<Float_t> THnF Float_t . THnT<Double_t> THnD Double_t . We recommend to use THnC wherever possible, and to map its value space of 256 possible values to e.g. float values outside the class. This saves an enormous amount of memory. Only if more than 256 values need to be distinguished should e.g. THnS or even THnF be chosen.; Implementation detail: the derived, templated class is kept extremely small on purpose. That way the (templated thus inlined) uses of this class will only create a small amount of machine code, in contrast to e.g. STL. ; Definition at line 219 of file THn.h. Public Member Functions;  THnT ();  ;  THnT (const char *name, const char *title, Int_t dim, const Int_t *nbins, const Double_t *xmin, const Double_t *xmax);  ;  THnT (const char *name, const char *title, Int_t dim, const Int_t *nbins, const std::vector< std::vector< double > > &xbins);  ; const TNDArray & GetArray () const override;  ; TNDArray & GetArray () override;  ; TClass * IsA () const override;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (",MatchSource.WIKI,doc/master/classTHnT.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTHnT.html
Modifiability,inherit,inherited," values to e.g. float values outside the class. This saves an enormous amount of memory. Only if more than 256 values need to be distinguished should e.g. THnS or even THnF be chosen.; Implementation detail: the derived, templated class is kept extremely small on purpose. That way the (templated thus inlined) uses of this class will only create a small amount of machine code, in contrast to e.g. STL. ; Definition at line 219 of file THn.h. Public Member Functions;  THnT ();  ;  THnT (const char *name, const char *title, Int_t dim, const Int_t *nbins, const Double_t *xmin, const Double_t *xmax);  ;  THnT (const char *name, const char *title, Int_t dim, const Int_t *nbins, const std::vector< std::vector< double > > &xbins);  ; const TNDArray & GetArray () const override;  ; TNDArray & GetArray () override;  ; TClass * IsA () const override;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from THn;  ~THn () override;  Destruct a THn. ;  ; void AddBinContent (const Int_t *idx, Double_t v=1.);  Forwards to THnBase::SetBinContent(). ;  ; void AddBinContent (Long64_t bin, Double_t v=1.) override;  ; void AddBinError2 (Long64_t bin, Double_t e2) override;  ; ROOT::Internal::THnBaseBinIter * CreateIter (Bool_t respectAxisRange) const override;  Create an iterator over all bins. Public interface is THnIter. ;  ; void FillBin (Long64_t bin, Double_t w) override;  Increment the bin content of ""bin"" by ""w"", return the bin index. ;  ; Long64_t GetBin (const char *name[]) const override;  ; Long64_t GetBin (const char *name[], Bool_t=kTRUE) override;  ; Long64_t GetBin (const Double_t *x) const override;  ; Long64_t GetBin (const Double_t *x, Bool_t=kTRUE) override;  ; Long64_t GetBin (const Int_t *idx) const override;  ; Long64_t GetBin (const Int_t *idx, Bool_t=kTRUE) override;  ; Double_t GetBinContent (const Int_t *idx) const;  Forwards to THnBase:",MatchSource.WIKI,doc/master/classTHnT.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTHnT.html
Security,hash,hash,"le (const char *title) override;  Change (i.e. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; TClass * IsA () const override;  ; Bool_t IsSortable () const override;  ; void ls (Option_t *option="""") const override;  List TNamed name and title. ;  ; TNamed & operator= (const TNamed &rhs);  TNamed assignment operator. ;  ; void Print (Option_t *option="""") const override;  Print TNamed name and title. ;  ; virtual void SetName (const char *name);  Set the name of the TNamed. ;  ; virtual void SetNameTitle (const char *name, const char *title);  Set all the TNamed parameters (name and title). ;  ; virtual Int_t Sizeof () const;  Return size of the TNamed part of the TObject. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const cha",MatchSource.WIKI,doc/master/classTHnT.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTHnT.html
Availability,failure,failures,"hostauth object with one method only. ;  ;  THostAuth (const char *host, const char *user, Int_t nmeth=0, Int_t *authmeth=nullptr, char **details=nullptr);  Create hostauth object. ;  ;  THostAuth (const char *host, Int_t server, const char *user, Int_t authmeth, const char *details);  Create hostauth object with one method only. ;  ;  THostAuth (const char *host, Int_t server, const char *user, Int_t nmeth=0, Int_t *authmeth=nullptr, char **details=nullptr);  Create hostauth object. ;  ;  THostAuth (THostAuth &ha);  Copy ctor ... ;  ; virtual ~THostAuth ();  The dtor. ;  ; void Activate ();  ; void AddFirst (Int_t level, const char *details=nullptr);  Add new method in first position If already in the list, set as first method 'level' with authentication 'details'. ;  ; void AddMethod (Int_t level, const char *details=nullptr);  Add method to the list. ;  ; void AsString (TString &out) const;  Return a static string with all info in a serialized form. ;  ; void CountFailure (Int_t level);  Count failures for 'method'. ;  ; void CountSuccess (Int_t level);  Count successes for 'method'. ;  ; TRootSecContext * CreateSecContext (const char *user, const char *host, Int_t meth, Int_t offset, const char *details, const char *token, TDatime expdate=kROOTTZERO, void *ctx=nullptr, Int_t key=-1);  Create a Security context and add it to local list Return pointer to it to be stored in TAuthenticate. ;  ; void DeActivate ();  ; TList * Established () const;  ; const char * GetDetails (Int_t level);  Return authentication details for specified level or """" if the specified level does not exist for this host. ;  ; const char * GetDetailsByIdx (Int_t idx) const;  ; Int_t GetFailure (Int_t idx) const;  ; const char * GetHost () const;  ; Int_t GetMethod (Int_t idx) const;  ; Int_t GetServer () const;  ; Int_t GetSuccess (Int_t idx) const;  ; const char * GetUser () const;  ; Bool_t HasMethod (Int_t level, Int_t *pos=nullptr);  Return kTRUE if method 'level' is in the list. ;  ; TCl",MatchSource.WIKI,doc/master/classTHostAuth.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTHostAuth.html
Integrability,message,message,"object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Return",MatchSource.WIKI,doc/master/classTHostAuth.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTHostAuth.html
Modifiability,inherit,inherited,"moveMethod (Int_t level);  Remove method 'meth' from the list, if there ... ;  ; void ReOrder (Int_t nmet, Int_t *fmet);  Reorder nmet methods according fmet[nmet]. ;  ; void Reset ();  Remove all methods, leaving Active status and list of associted TSceContexts unchanged. ;  ; void SetDetails (Int_t level, const char *details);  Set authentication details for specified level. ;  ; void SetEstablished (TList *nl);  ; void SetFirst (Int_t level);  Set 'method' to be the first used (if in the list ...). ;  ; void SetHost (const char *host);  ; void SetLast (Int_t level);  Set 'method' to be the last used (if in the list ...). ;  ; void SetServer (Int_t server);  ; void SetUser (const char *user);  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; void Update (THostAuth *ha);  Update info with the one in ha Remaining methods, if any, get lower priority. ;  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;",MatchSource.WIKI,doc/master/classTHostAuth.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTHostAuth.html
Security,authenticat,authentication,"t line 34 of file THostAuth.h. Public Member Functions;  THostAuth ();  Default constructor. ;  ;  THostAuth (const char *asstring);  Create hostauth object from directives given as a compact string See THostAuth::AsString(). ;  ;  THostAuth (const char *host, const char *user, Int_t authmeth, const char *details);  Create hostauth object with one method only. ;  ;  THostAuth (const char *host, const char *user, Int_t nmeth=0, Int_t *authmeth=nullptr, char **details=nullptr);  Create hostauth object. ;  ;  THostAuth (const char *host, Int_t server, const char *user, Int_t authmeth, const char *details);  Create hostauth object with one method only. ;  ;  THostAuth (const char *host, Int_t server, const char *user, Int_t nmeth=0, Int_t *authmeth=nullptr, char **details=nullptr);  Create hostauth object. ;  ;  THostAuth (THostAuth &ha);  Copy ctor ... ;  ; virtual ~THostAuth ();  The dtor. ;  ; void Activate ();  ; void AddFirst (Int_t level, const char *details=nullptr);  Add new method in first position If already in the list, set as first method 'level' with authentication 'details'. ;  ; void AddMethod (Int_t level, const char *details=nullptr);  Add method to the list. ;  ; void AsString (TString &out) const;  Return a static string with all info in a serialized form. ;  ; void CountFailure (Int_t level);  Count failures for 'method'. ;  ; void CountSuccess (Int_t level);  Count successes for 'method'. ;  ; TRootSecContext * CreateSecContext (const char *user, const char *host, Int_t meth, Int_t offset, const char *details, const char *token, TDatime expdate=kROOTTZERO, void *ctx=nullptr, Int_t key=-1);  Create a Security context and add it to local list Return pointer to it to be stored in TAuthenticate. ;  ; void DeActivate ();  ; TList * Established () const;  ; const char * GetDetails (Int_t level);  Return authentication details for specified level or """" if the specified level does not exist for this host. ;  ; const char * GetDetailsByIdx (Int_t idx) const; ",MatchSource.WIKI,doc/master/classTHostAuth.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTHostAuth.html
Availability,error,error,"tatic; Class_Name()THStackstatic; Class_Version()THStackinlinestatic; ClassName() constTObjectvirtual; Clear(Option_t *option="""") overrideTNamedvirtual; Clone(const char *newname="""") const overrideTNamedvirtual; Compare(const TObject *obj) const overrideTNamedvirtual; Copy(TObject &named) const overrideTNamedvirtual; DeclFileName()THStackinlinestatic; Delete(Option_t *option="""")TObjectvirtual; DistancetoPrimitive(Int_t px, Int_t py) overrideTHStackvirtual; DoError(int level, const char *location, const char *fmt, va_list va) constTObjectprotectedvirtual; Draw(Option_t *chopt="""") overrideTHStackvirtual; DrawClass() constTObjectvirtual; DrawClone(Option_t *option="""") constTObjectvirtual; Dump() constTObjectvirtual; EDeprecatedStatusBits enum nameTObject; end() constTHStackinline; Error(const char *method, const char *msgfmt,...) constTObjectvirtual; EStatusBits enum nameTObject; Execute(const char *method, const char *params, Int_t *error=nullptr)TObjectvirtual; Execute(TMethod *method, TObjArray *params, Int_t *error=nullptr)TObjectvirtual; ExecuteEvent(Int_t event, Int_t px, Int_t py)TObjectvirtual; Fatal(const char *method, const char *msgfmt,...) constTObjectvirtual; fBitsTObjectprivate; fgDtorOnlyTObjectprivatestatic; fgObjectStatTObjectprivatestatic; fHistogramTHStackprotected; fHistsTHStackprotected; FillBuffer(char *&buffer)TNamedvirtual; FindObject(const char *name) constTObjectvirtual; FindObject(const TObject *obj) constTObjectvirtual; fMaximumTHStackprotected; fMinimumTHStackprotected; fNameTNamedprotected; fStackTHStackprotected; fTitleTNamedprotected; fUniqueIDTObjectprivate; GetDrawOption() constTObjectvirtual; GetDtorOnly()TObjectstatic; GetHistogram() constTHStack; GetHists() constTHStackinline; GetIconName() constTObjectvirtual; GetMaximum(Option_t *option="""", Double_t maxval=std::numeric_limits< Double_t >::max())THStackvirtual; GetMinimum(Option_t *option="""", Double_t minval=-std::numeric_limits< Double_t >::max())THStackvirtual; GetName() const ov",MatchSource.WIKI,doc/master/classTHStack-members.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTHStack-members.html
Modifiability,inherit,inherited,". ROOT: Member List. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. THStack Member List. This is the complete list of members for THStack, including all inherited members. AbstractMethod(const char *method) constTObject; Add(TH1 *h, Option_t *option="""")THStackvirtual; AddToTObjectTable(TObject *)TObjectprivatestatic; AppendPad(Option_t *option="""")TObjectvirtual; begin() constTHStack; Browse(TBrowser *b) overrideTHStackvirtual; BuildAndPaint(Option_t *chopt, Bool_t paint, Bool_t rebuild_stack=kFALSE)THStackprotected; BuildPrimitives(Option_t *chopt="""", Bool_t rebuild_stack=kFALSE)THStackinline; BuildStack()THStackprotected; CheckedHash()TObjectinline; Class()THStackstatic; Class_Name()THStackstatic; Class_Version()THStackinlinestatic; ClassName() constTObjectvirtual; Clear(Option_t *option="""") overrideTNamedvirtual; Clone(const char *newname="""") const overrideTNamedvirtual; Compare(const TObject *obj) const overrideTNamedvirtual; Copy(TObject &named) const overrideTNamedvirtual; DeclFileName()THStackinlinestatic; Delete(Option_t *option="""")TObjectvirtual; DistancetoPrimitive(Int_t px, Int_t py) overrideTHStackvirtual; DoError(int level, const char *location, const char *fmt, va_list va) constTObjectprotectedvirtual; Draw(Option_t *chopt="""") overrideTHStackvirtual; DrawClass() constTObjectvirtual; DrawClone(Option_t *option="""") constTObjectvirtual; Dump() constTObjectvirtual; EDeprecatedStatusBits enum nameTObject; end() constTHStackinline; Error(const char *method, const char *msgfmt,...) constTObjectvirtual; EStatusBits enum nameTObject; Execute(const char *method, const char *params, Int_t *error=nullptr)TObjectvirtual; Execute(TMethod *method, TObjArray *params, Int_t *error=nullptr)TObjectvirtual; ExecuteEvent(Int_t event, Int_t px, Int_t py)TObjectvirtual; Fatal(const char *method, const char *msgfmt,...) constTObjectvirtual; fBitsTObjectprivate; fgDtorOnlyTObjectprivatestatic; fgObjectStatTObjectprivatestatic; fHistogramTHStackp",MatchSource.WIKI,doc/master/classTHStack-members.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTHStack-members.html
Availability,error,errors," class.Definition TCanvas.h:23; TH1F1-D histogram with a float per channel (see TH1 documentation)Definition TH1.h:622; TH1::FillRandomvirtual void FillRandom(const char *fname, Int_t ntimes=5000, TRandom *rng=nullptr)Fill histogram following distribution in function fname.Definition TH1.cxx:3519; THStack::THStackTHStack()Definition THStack.h:57; TTextBase class for several text objects.Definition TText.h:22; h1TH1F * h1Definition legend1.C:5. A more complex example:; ; void hstack(); {; auto hs = new THStack(""hs"",""Stacked 1D histograms"");; //create three 1-d histograms; auto h1st = new TH1F(""h1st"",""test hstack"",100,-4,4);; h1st->FillRandom(""gaus"",20000);; h1st->SetFillColor(kRed);; h1st->SetMarkerStyle(21);; h1st->SetMarkerColor(kRed);; hs->Add(h1st);; auto h2st = new TH1F(""h2st"",""test hstack"",100,-4,4);; h2st->FillRandom(""gaus"",15000);; h2st->SetFillColor(kBlue);; h2st->SetMarkerStyle(21);; h2st->SetMarkerColor(kBlue);; hs->Add(h2st);; auto h3st = new TH1F(""h3st"",""test hstack"",100,-4,4);; h3st->FillRandom(""gaus"",10000);; h3st->SetFillColor(kGreen);; h3st->SetMarkerStyle(21);; h3st->SetMarkerColor(kGreen);; hs->Add(h3st);; ; auto cst = new TCanvas(""cst"",""stacked hists"",10,10,700,700);; cst->Divide(2,2);; // in top left pad, draw the stack with defaults; cst->cd(1);; hs->Draw();; // in top right pad, draw the stack in non-stack mode; // and errors option; cst->cd(2);; gPad->SetGrid();; hs->Draw(""nostack,e1p"");; //in bottom left, draw in stack mode with ""lego1"" option; cst->cd(3);; gPad->SetFrameFillColor(17);; gPad->SetTheta(3.77);; gPad->SetPhi(2.9);; hs->Draw(""lego1"");; ; cst->cd(4);; //create two 2-D histograms and draw them in stack mode; gPad->SetFrameFillColor(17);; auto a = new THStack(""a"",""Stacked 2D histograms"");; auto f1 = new TF2(""f1"",; ""xygaus + xygaus(5) + xylandau(10)"",-4,4,-4,4);; Double_t params1[] = {130,-1.4,1.8,1.5,1, 150,2,0.5,-2,0.5,; 3600,-2,0.7,-3,0.3};; f1->SetParameters(params1);; auto h2sta = new TH2F(""h2sta"",""h2sta"",20,-4,4,20,-4,4);; h2st",MatchSource.WIKI,doc/master/classTHStack.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTHStack.html
Integrability,message,message,"tructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t ",MatchSource.WIKI,doc/master/classTHStack.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTHStack.html
Modifiability,inherit,inherited,"s in the stack. ;  ; virtual Long64_t Merge (TCollection *li, TFileMergeInfo *info);  Merge the THStack in the TList into this stack. ;  ; virtual void Modified ();  Note: this method invalidates the sum of histograms. ;  ; void Paint (Option_t *chopt="""") override;  Paint the list of histograms. ;  ; void Print (Option_t *chopt="""") const override;  Print the list of histograms. ;  ; void RecursiveRemove (TObject *obj) override;  Recursively remove the object obj from the list of histograms. ;  ; void SavePrimitive (std::ostream &out, Option_t *option="""") override;  Save primitive as a C++ statement(s) on output stream out. ;  ; virtual void SetHistogram (TH1 *h);  ; virtual void SetMaximum (Double_t maximum=-1111);  Set maximum. ;  ; virtual void SetMinimum (Double_t minimum=-1111);  Set minimum. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; TClass * IsA () const override;  ; Bool_t IsSortable () const override;  ; void ls (Option_t *option="""") const override;",MatchSource.WIKI,doc/master/classTHStack.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTHStack.html
Safety,avoid,avoids,"ownership of the objects in the list. Stack painting; By default, histograms are shown stacked:; the first histogram is painted; then the sum of the first and second histograms is painted, and so on. The axis ranges are computed automatically along the X and Y axes to display the complete histogram collection.; Warning: Histogram bins with negative content may produce wrong plots. Stack's drawing options; The specific stack's drawing options are:. NOSTACK If option ""nostack"" is specified, histograms are all painted in the same pad as if the option ""same"" had been specified.; NOSTACKB If the option ""nostackb"" is specified histograms are all painted on the same pad next to each other as bar plots.; PADS if option ""pads"" is specified, the current pad/canvas is subdivided into a number of pads equal to the number of histograms and each histogram is painted into a separate pad.; NOCLEAR By default the background of the histograms is erased before drawing the histograms. The option ""noclear"" avoids this behavior. This is useful when drawing a THStack on top of another plot. If the patterns used to draw the histograms in the stack are transparent, then the plot behind will be visible. See the THistPainter class for the list of valid histograms' painting options.; Example;; {; auto hs = new THStack(""hs"","""");; auto h1 = new TH1F(""h1"",""test hstack"",10,-4,4);; h1->FillRandom(""gaus"",20000);; h1->SetFillColor(kRed);; hs->Add(h1);; auto h2 = new TH1F(""h2"",""test hstack"",10,-4,4);; h2->FillRandom(""gaus"",15000);; h2->SetFillColor(kBlue);; hs->Add(h2);; auto h3 = new TH1F(""h3"",""test hstack"",10,-4,4);; h3->FillRandom(""gaus"",10000);; h3->SetFillColor(kGreen);; hs->Add(h3);; auto cs = new TCanvas(""cs"",""cs"",10,10,700,900);; TText T; T.SetTextFont(42); T.SetTextAlign(21);; cs->Divide(2,2);; cs->cd(1); hs->Draw(); T.DrawTextNDC(.5,.95,""Default drawing option"");; cs->cd(2); hs->Draw(""nostack""); T.DrawTextNDC(.5,.95,""Option \""nostack\"""");; cs->cd(3); hs->Draw(""nostackb""); T.DrawTextNDC(.5,.95",MatchSource.WIKI,doc/master/classTHStack.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTHStack.html
Security,hash,hash," override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; TClass * IsA () const override;  ; Bool_t IsSortable () const override;  ; void ls (Option_t *option="""") const override;  List TNamed name and title. ;  ; TNamed & operator= (const TNamed &rhs);  TNamed assignment operator. ;  ; void Print (Option_t *option="""") const override;  Print TNamed name and title. ;  ; virtual void SetName (const char *name);  Set the name of the TNamed. ;  ; virtual void SetNameTitle (const char *name, const char *title);  Set all the TNamed parameters (name and title). ;  ; virtual void SetTitle (const char *title="""");  Set the title of the TNamed. ;  ; virtual Int_t Sizeof () const;  Return size of the TNamed part of the TObject. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;",MatchSource.WIKI,doc/master/classTHStack.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTHStack.html
Testability,test,test,"all painted in the same pad as if the option ""same"" had been specified.; NOSTACKB If the option ""nostackb"" is specified histograms are all painted on the same pad next to each other as bar plots.; PADS if option ""pads"" is specified, the current pad/canvas is subdivided into a number of pads equal to the number of histograms and each histogram is painted into a separate pad.; NOCLEAR By default the background of the histograms is erased before drawing the histograms. The option ""noclear"" avoids this behavior. This is useful when drawing a THStack on top of another plot. If the patterns used to draw the histograms in the stack are transparent, then the plot behind will be visible. See the THistPainter class for the list of valid histograms' painting options.; Example;; {; auto hs = new THStack(""hs"","""");; auto h1 = new TH1F(""h1"",""test hstack"",10,-4,4);; h1->FillRandom(""gaus"",20000);; h1->SetFillColor(kRed);; hs->Add(h1);; auto h2 = new TH1F(""h2"",""test hstack"",10,-4,4);; h2->FillRandom(""gaus"",15000);; h2->SetFillColor(kBlue);; hs->Add(h2);; auto h3 = new TH1F(""h3"",""test hstack"",10,-4,4);; h3->FillRandom(""gaus"",10000);; h3->SetFillColor(kGreen);; hs->Add(h3);; auto cs = new TCanvas(""cs"",""cs"",10,10,700,900);; TText T; T.SetTextFont(42); T.SetTextAlign(21);; cs->Divide(2,2);; cs->cd(1); hs->Draw(); T.DrawTextNDC(.5,.95,""Default drawing option"");; cs->cd(2); hs->Draw(""nostack""); T.DrawTextNDC(.5,.95,""Option \""nostack\"""");; cs->cd(3); hs->Draw(""nostackb""); T.DrawTextNDC(.5,.95,""Option \""nostackb\"""");; cs->cd(4); hs->Draw(""lego1""); T.DrawTextNDC(.5,.95,""Option \""lego1\"""");; }; kRed@ kRedDefinition Rtypes.h:66; kGreen@ kGreenDefinition Rtypes.h:66; kBlue@ kBlueDefinition Rtypes.h:66; TAttFill::SetFillColorvirtual void SetFillColor(Color_t fcolor)Set the fill area color.Definition TAttFill.h:37; TCanvasThe Canvas class.Definition TCanvas.h:23; TH1F1-D histogram with a float per channel (see TH1 documentation)Definition TH1.h:622; TH1::FillRandomvirtual void FillRandom(const cha",MatchSource.WIKI,doc/master/classTHStack.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTHStack.html
Availability,avail,available,"nst TString & GetModuleDocPath () const;  ; void GetModuleMacroPath (const TString &module, TString &out_path) const;  ; virtual void GetModuleNameForClass (TString &module, TClass *cl) const;  Return the module name for a given class. ;  ; const TString & GetOutputDir (Bool_t createDir=kTRUE) const;  Return the output directory as set by SetOutputDir(). ;  ; const TPathDefinition & GetPathDefinition () const;  Return the TModuleDefinition (or derived) object as set by SetModuleDefinition(); create and return a TModuleDefinition object if none was set. ;  ; const PathInfo_t & GetPathInfo () const;  ; const TString & GetProductName () const;  ; const TString & GetSearchEngine () const;  ; const TString & GetSearchStemURL () const;  ; const char * GetURL (const char *lib=0) const;  Get the documentation URL for library lib. ;  ; const TString & GetViewCVS () const;  ; const TString & GetWikiURL () const;  ; const TString & GetXwho () const;  ; Bool_t HaveDot ();  Check whether dot is available in $PATH or in the directory set by SetDotPath() ;  ; void HelperDeleted (THelperBase *who);  Inform the THtml object that one of its helper objects was deleted. ;  ; TClass * IsA () const override;  ; Bool_t IsBatch () const;  ; void MakeAll (Bool_t force=kFALSE, const char *filter=""*"", int numthreads=1);  Produce documentation for all the classes specified in the filter (by default ""*"") To process all classes having a name starting with XX, do: html.MakeAll(kFALSE,""XX*""); If force=kFALSE (default), only the classes that have been modified since the previous call to this function will be generated. ;  ; void MakeClass (const char *className, Bool_t force=kFALSE);  Make HTML files for a single class. ;  ; void MakeIndex (const char *filter=""*"");  Create the index files for the product, modules, all types, etc. ;  ; void MakeTree (const char *className, Bool_t force=kFALSE);  Make an inheritance tree. ;  ; void ReplaceSpecialChars (std::ostream &, const char *);  ; void SetAuthorT",MatchSource.WIKI,doc/master/classTHtml.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTHtml.html
Deployability,configurat,configuration,"EGIN_HTML END_HTML: include 'raw' HTML . BEGIN_MACRO END_MACRO: include a picture generated by a macro . BEGIN_LATEX END_LATEX: include a latex picture . Product and module index . Auxiliary files: style sheet, JavaScript, help page . Class Charts . Configuration variables . Behind the scenes . I. Usage; These are typical things people do with THtml: ; root[] THtml html; // create a THtml object; root[] html.LoadAllLibs(); // Load all rootmap'ed libraries; root[] html.MakeAll(); // generate documentation for all changed classes; or to run on just a few classes: ; root[] THtml html; // create a THtml object; root[] html.MakeIndex(); // create auxiliary files (style sheet etc) and indices; root[] html.MakeClass(""TMyClass""); // create documentation for TMyClass only; To ""beautify"" (i.e. create links to documentation for class names etc) some text file or macro, use: ; root[] html.Convert( ""hsimple.C"", ""Histogram example"" ); II. Configuration; Most configuration options can be set as a call to THtml, or as a TEnv variable, which you can set in your .rootrc.; II.1 Input files; In your .rootrc, define Root.Html.SourceDir to point to directories containing .cxx and .h files (see: TEnv) of the classes you want to document, or call THtml::SetInputDir(); Example:. Root.Html.SourceDir: .:src:include; Root.Html.Root: http://root.cern.ch/root/htmlII.2 Output directory; The output directory can be specified using the Root.Html.OutputDir configuration variable (default value: ""htmldoc""). If that directory doesn't exist THtml will create it.; Example:. Root.Html.OutputDir: htmldocII.3 Linking other documentation; When trying to document a class, THtml searches for a source file in the directories set via SetInputDir(). If it cannot find it, it assumes that this class must have been documented before. Based on the library this class is defined in, it checks the configuration variable Root.Html.LibName, and creates a link using its value. Alternatively, you can set these URLs via THt",MatchSource.WIKI,doc/master/classTHtml.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTHtml.html
Integrability,depend,dependencies,". Root.Html.OutputDir: htmldocII.3 Linking other documentation; When trying to document a class, THtml searches for a source file in the directories set via SetInputDir(). If it cannot find it, it assumes that this class must have been documented before. Based on the library this class is defined in, it checks the configuration variable Root.Html.LibName, and creates a link using its value. Alternatively, you can set these URLs via THtml::SetLibURL().; Example:; If a class MyClass is defined in class mylibs/libMyLib.so, and .rootrc contains. Root.Html.MyLib: ../mylib/ THtml will create a link to ""../mylib/MyClass.html"".; The library name association can be set up using the rootmap facility. For the library in the example above, which contains a dictionary generated from the linkdef MyLinkdef.h, the command to generate the rootmap file is; $ rlibmap -f -r rootmap -l mylib/libMyLib.so -d libCore.so -c MyLinkdef.h Here, -r specifies that the entries for libMyLib should be updated, -l specifies the library we're dealing with, -d its dependencies, and -c its linkdef. The rootmap file must be within one of the LD_LIBRARY_PATH (or PATH for Windows) directories when ROOT is started, otherwise ROOT will not use it.; II.4 Recognizing class documentation; The class documentation has to appear in the header file containing the class, right in front of its declaration. It is introduced by a string defined by Root.Html.Description or SetClassDocTag(). See the section on documentation syntax for further details.; Example:. Root.Html.Description: //____________________The class documentation will show which include statement is to be used and which library needs to be linked to access it. The include file name is determined via TClass::GetDeclFileName(); leading parts are removed if they match any of the ':' separated entries in THtml::GetIncludePath().; II.5 Author, copyright, etc.; During the conversion, THtml will look for some strings (""tags"") in the source file, which have to a",MatchSource.WIKI,doc/master/classTHtml.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTHtml.html
Modifiability,variab,variables,"ges conforming to the XHTML 1.0 transitional specifications; an example of these pages is ROOT's own reference guide. This page was verified to be valid XHTML 1.0 transitional, which proves that all pages generated by THtml can be valid, as long as the user provided XHTML (documentation, header, etc) is valid. You can check the current THtml by clicking this icon: ; Overview: . Usage . Configuration . Input files . Output directory . Linking other documentation . Recognizing class documentation . Author, copyright, etc. . Header and footer . Links to searches, home page, ViewVC . HTML Charset . Documentation syntax . Class description . Class index . Method documentation . Data member documentation . Documentation directives . BEGIN_HTML END_HTML: include 'raw' HTML . BEGIN_MACRO END_MACRO: include a picture generated by a macro . BEGIN_LATEX END_LATEX: include a latex picture . Product and module index . Auxiliary files: style sheet, JavaScript, help page . Class Charts . Configuration variables . Behind the scenes . I. Usage; These are typical things people do with THtml: ; root[] THtml html; // create a THtml object; root[] html.LoadAllLibs(); // Load all rootmap'ed libraries; root[] html.MakeAll(); // generate documentation for all changed classes; or to run on just a few classes: ; root[] THtml html; // create a THtml object; root[] html.MakeIndex(); // create auxiliary files (style sheet etc) and indices; root[] html.MakeClass(""TMyClass""); // create documentation for TMyClass only; To ""beautify"" (i.e. create links to documentation for class names etc) some text file or macro, use: ; root[] html.Convert( ""hsimple.C"", ""Histogram example"" ); II. Configuration; Most configuration options can be set as a call to THtml, or as a TEnv variable, which you can set in your .rootrc.; II.1 Input files; In your .rootrc, define Root.Html.SourceDir to point to directories containing .cxx and .h files (see: TEnv) of the classes you want to document, or call THtml::SetInputDir(",MatchSource.WIKI,doc/master/classTHtml.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTHtml.html
Performance,multi-thread,multi-threaded," of all data types and a page for each typedef-to-class. ;  ; virtual void CreateStyleSheet () const;  Write the default ROOT style sheet. ;  ; virtual bool GetDeclImplFileName (TClass *cl, bool filesys, bool decl, TString &out_name) const;  Combined implementation for GetDeclFileName(), GetImplFileName(): Return declaration / implementation file name (depending on decl); return the full path if filesys is true. ;  ; TClassDocInfo * GetNextClass ();  Return the next class to be generated for MakeClassThreaded. ;  ; void MakeClass (void *cdi, Bool_t force=kFALSE);  Make HTML files for a single class. ;  ; void SetLocalFiles () const;  Fill the files available in the file system below fPathInfo.fInputPath. ;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  . Static Protected Member Functions; static void * MakeClassThreaded (void *info);  Entry point of worker threads for multi-threaded MakeAll(). ;  . Protected Attributes; Bool_t fBatch;  ; TString fCounter;  ; TString fCounterFormat;  ; DocEntityInfo_t fDocEntityInfo;  ; DocSyntax_t fDocSyntax;  ; TFileDefinition * fFileDef;  ; TGClient * fGClient;  ; LinkInfo_t fLinkInfo;  ; TFileSysDB * fLocalFiles;  ; TVirtualMutex * fMakeClassMutex;  ; TModuleDefinition * fModuleDef;  ; OutputStyle_t fOutputStyle;  ; TPathDefinition * fPathDef;  ; PathInfo_t fPathInfo;  ; TString fProductName;  ; Int_t fThreadedClassCount;  ; TIter * fThreadedClassIter;  . Additional Inherited Members;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  . #include <THtml.h>. Inheritance diagram for THtml:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Member Enumeration Documentation. ◆ EConvertOutput. enum THtml::EConvertOutput. EnumeratorkNoOutput ; kInterpretedOutput ; kCompiledOutput ; kForceOutput ",MatchSource.WIKI,doc/master/classTHtml.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTHtml.html
Security,access,access,"tml"".; The library name association can be set up using the rootmap facility. For the library in the example above, which contains a dictionary generated from the linkdef MyLinkdef.h, the command to generate the rootmap file is; $ rlibmap -f -r rootmap -l mylib/libMyLib.so -d libCore.so -c MyLinkdef.h Here, -r specifies that the entries for libMyLib should be updated, -l specifies the library we're dealing with, -d its dependencies, and -c its linkdef. The rootmap file must be within one of the LD_LIBRARY_PATH (or PATH for Windows) directories when ROOT is started, otherwise ROOT will not use it.; II.4 Recognizing class documentation; The class documentation has to appear in the header file containing the class, right in front of its declaration. It is introduced by a string defined by Root.Html.Description or SetClassDocTag(). See the section on documentation syntax for further details.; Example:. Root.Html.Description: //____________________The class documentation will show which include statement is to be used and which library needs to be linked to access it. The include file name is determined via TClass::GetDeclFileName(); leading parts are removed if they match any of the ':' separated entries in THtml::GetIncludePath().; II.5 Author, copyright, etc.; During the conversion, THtml will look for some strings (""tags"") in the source file, which have to appear right in front of e.g. the author's name, copyright notice, etc. These tags can be defined with the following environment variables: Root.Html.Author, Root.Html.LastUpdate and Root.Html.Copyright, or with SetAuthorTag(), SetLastUpdateTag(), SetCopyrightTag().; If the LastUpdate tag is not found, the current date and time are used. This is useful when using THtml::MakeAll()'s default option force=kFALSE, in which case THtml generates documentation only for changed classes.; Authors can be a comma separated list of author entries. Each entry has one of the following two formats . Name (non-alpha). ; THtml will ",MatchSource.WIKI,doc/master/classTHtml.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTHtml.html
Testability,log,logs,". ROOT: THtml Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Classes |; Public Types |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Static Protected Member Functions |; Protected Attributes |; List of all members ; THtml Class Reference. ; Legacy ROOT documentation system. ; Deprecated:We keep THtml for those who still need it for legacy use cases. ROOT has since several years moved to doxygen as documentation generator. THtml is not developed nor supported anymore; please migrate to doxygen instead.; The THtml class is designed to easily document classes, code, and code related text files (like change logs). It generates HTML pages conforming to the XHTML 1.0 transitional specifications; an example of these pages is ROOT's own reference guide. This page was verified to be valid XHTML 1.0 transitional, which proves that all pages generated by THtml can be valid, as long as the user provided XHTML (documentation, header, etc) is valid. You can check the current THtml by clicking this icon: ; Overview: . Usage . Configuration . Input files . Output directory . Linking other documentation . Recognizing class documentation . Author, copyright, etc. . Header and footer . Links to searches, home page, ViewVC . HTML Charset . Documentation syntax . Class description . Class index . Method documentation . Data member documentation . Documentation directives . BEGIN_HTML END_HTML: include 'raw' HTML . BEGIN_MACRO END_MACRO: include a picture generated by a macro . BEGIN_LATEX END_LATEX: include a latex picture . Product and module index . Auxiliary files: style sheet, JavaScript, help page . Class Charts . Configuration variables . Behind the scenes . I. Usage; These are typical things people do with THtml: ; root[] THtml html; // create a THtml object; root[] html.LoadAllLibs(); // Load all rootmap'ed libraries; root[] html.MakeAll(); // generate documenta",MatchSource.WIKI,doc/master/classTHtml.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTHtml.html
Usability,guid,guide,". ROOT: THtml Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Classes |; Public Types |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Static Protected Member Functions |; Protected Attributes |; List of all members ; THtml Class Reference. ; Legacy ROOT documentation system. ; Deprecated:We keep THtml for those who still need it for legacy use cases. ROOT has since several years moved to doxygen as documentation generator. THtml is not developed nor supported anymore; please migrate to doxygen instead.; The THtml class is designed to easily document classes, code, and code related text files (like change logs). It generates HTML pages conforming to the XHTML 1.0 transitional specifications; an example of these pages is ROOT's own reference guide. This page was verified to be valid XHTML 1.0 transitional, which proves that all pages generated by THtml can be valid, as long as the user provided XHTML (documentation, header, etc) is valid. You can check the current THtml by clicking this icon: ; Overview: . Usage . Configuration . Input files . Output directory . Linking other documentation . Recognizing class documentation . Author, copyright, etc. . Header and footer . Links to searches, home page, ViewVC . HTML Charset . Documentation syntax . Class description . Class index . Method documentation . Data member documentation . Documentation directives . BEGIN_HTML END_HTML: include 'raw' HTML . BEGIN_MACRO END_MACRO: include a picture generated by a macro . BEGIN_LATEX END_LATEX: include a latex picture . Product and module index . Auxiliary files: style sheet, JavaScript, help page . Class Charts . Configuration variables . Behind the scenes . I. Usage; These are typical things people do with THtml: ; root[] THtml html; // create a THtml object; root[] html.LoadAllLibs(); // Load all rootmap'ed libraries; root[] html.MakeAll(); // generate documenta",MatchSource.WIKI,doc/master/classTHtml.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTHtml.html
Availability,error,error,"lic Member Functions |; Static Public Member Functions |; Protected Member Functions |; List of all members ; THtml::TFileDefinition Class Reference. . Definition at line 71 of file THtml.h. Public Member Functions; virtual bool GetDeclFileName (const TClass *cl, TString &out_filename, TString &out_fsys, TFileSysEntry **fse=0) const;  Determine cl's declaration file name. ;  ; virtual bool GetImplFileName (const TClass *cl, TString &out_filename, TString &out_fsys, TFileSysEntry **fse=0) const;  Determine cl's implementation file name. ;  ; TClass * IsA () const override;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from THtml::THelperBase;  THelperBase ();  ;  ~THelperBase () override;  Helper's destructor. ;  ; THtml * GetOwner () const;  ; TClass * IsA () const override;  ; void SetOwner (THtml *html);  Set the THtml object owning this object; if it's already set to a different THtml object than issue an error message and signal to the currently set object that we are not belonging to it anymore. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;",MatchSource.WIKI,doc/master/classTHtml_1_1TFileDefinition.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTHtml_1_1TFileDefinition.html
Integrability,message,message,"lic Member Functions |; Static Public Member Functions |; Protected Member Functions |; List of all members ; THtml::TFileDefinition Class Reference. . Definition at line 71 of file THtml.h. Public Member Functions; virtual bool GetDeclFileName (const TClass *cl, TString &out_filename, TString &out_fsys, TFileSysEntry **fse=0) const;  Determine cl's declaration file name. ;  ; virtual bool GetImplFileName (const TClass *cl, TString &out_filename, TString &out_fsys, TFileSysEntry **fse=0) const;  Determine cl's implementation file name. ;  ; TClass * IsA () const override;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from THtml::THelperBase;  THelperBase ();  ;  ~THelperBase () override;  Helper's destructor. ;  ; THtml * GetOwner () const;  ; TClass * IsA () const override;  ; void SetOwner (THtml *html);  Set the THtml object owning this object; if it's already set to a different THtml object than issue an error message and signal to the currently set object that we are not belonging to it anymore. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;",MatchSource.WIKI,doc/master/classTHtml_1_1TFileDefinition.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTHtml_1_1TFileDefinition.html
Modifiability,inherit,inherited,". ROOT: THtml::TFileDefinition Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; List of all members ; THtml::TFileDefinition Class Reference. . Definition at line 71 of file THtml.h. Public Member Functions; virtual bool GetDeclFileName (const TClass *cl, TString &out_filename, TString &out_fsys, TFileSysEntry **fse=0) const;  Determine cl's declaration file name. ;  ; virtual bool GetImplFileName (const TClass *cl, TString &out_filename, TString &out_fsys, TFileSysEntry **fse=0) const;  Determine cl's implementation file name. ;  ; TClass * IsA () const override;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from THtml::THelperBase;  THelperBase ();  ;  ~THelperBase () override;  Helper's destructor. ;  ; THtml * GetOwner () const;  ; TClass * IsA () const override;  ; void SetOwner (THtml *html);  Set the THtml object owning this object; if it's already set to a different THtml object than issue an error message and signal to the currently set object that we are not belonging to it anymore. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t Che",MatchSource.WIKI,doc/master/classTHtml_1_1TFileDefinition.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTHtml_1_1TFileDefinition.html
Security,hash,hash," Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Returns name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual const char * GetTitle () const;  Returns title of object. ;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; virtual ULong_t Hash () const;  Return hash value for this object. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns kTRUE if object inherits from class ""classname"". ;  ; virtual Bool_t InheritsFrom (const TClass *cl) const;  Returns kTRUE if object inherits from TClass cl. ;  ; virtual void Inspect () const;  Dump contents of this object in a graphics canvas. ;  ; void InvertBit (UInt_t f);  ; Bool_t IsDestructed () const;  IsDestructed. ;  ; virtual Bool_t IsEqual (const TObject *obj) const;  Default equal comparison (objects are equal if they have the same address in memory). ;  ; virtual Bool_t IsFolder () const;  Returns kTRUE in case object contains browsable objects (like containers or lists of other objects). ;  ; R__ALWAYS_INLINE Bool_t",MatchSource.WIKI,doc/master/classTHtml_1_1TFileDefinition.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTHtml_1_1TFileDefinition.html
Availability,error,error,"object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t ",MatchSource.WIKI,doc/master/classTHtml_1_1TFileSysDB.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTHtml_1_1TFileSysDB.html
Integrability,message,message,"object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t ",MatchSource.WIKI,doc/master/classTHtml_1_1TFileSysDB.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTHtml_1_1TFileSysDB.html
Modifiability,inherit,inherited,". ROOT: THtml::TFileSysDB Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Private Attributes |; List of all members ; THtml::TFileSysDB Class Reference. . Definition at line 174 of file THtml.h. Public Member Functions;  TFileSysDB (const char *path, const char *ignorePath, Int_t maxdirlevel);  ; THashTable & GetEntries ();  ; const TString & GetIgnore () const;  ; TExMap & GetMapIno ();  ; Int_t GetMaxLevel () const;  ; TClass * IsA () const override;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from THtml::TFileSysDir;  TFileSysDir (const char *name, TFileSysDir *parent);  ; const TList * GetFiles () const;  ; const TList * GetSubDirs () const;  ; TClass * IsA () const override;  ; void Recurse (TFileSysDB *db, const char *path);  Recursively fill entries by parsing the contents of path. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from THtml::TFileSysEntry;  TFileSysEntry (const char *name, TFileSysDir *parent);  ;  ~TFileSysEntry () override;  ; virtual void GetFullName (TString &fullname, Bool_t asIncluded) const;  ; Int_t GetLevel () const;  ; const char * GetName () const override;  Returns name of object. ;  ; TFileSysDir * GetParent () const;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; TClass * IsA () const override;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor.",MatchSource.WIKI,doc/master/classTHtml_1_1TFileSysDB.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTHtml_1_1TFileSysDB.html
Security,hash,hash," ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from THtml::TFileSysDir;  TFileSysDir (const char *name, TFileSysDir *parent);  ; const TList * GetFiles () const;  ; const TList * GetSubDirs () const;  ; TClass * IsA () const override;  ; void Recurse (TFileSysDB *db, const char *path);  Recursively fill entries by parsing the contents of path. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from THtml::TFileSysEntry;  TFileSysEntry (const char *name, TFileSysDir *parent);  ;  ~TFileSysEntry () override;  ; virtual void GetFullName (TString &fullname, Bool_t asIncluded) const;  ; Int_t GetLevel () const;  ; const char * GetName () const override;  Returns name of object. ;  ; TFileSysDir * GetParent () const;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; TClass * IsA () const override;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name",MatchSource.WIKI,doc/master/classTHtml_1_1TFileSysDB.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTHtml_1_1TFileSysDB.html
Availability,error,error,"object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t ",MatchSource.WIKI,doc/master/classTHtml_1_1TFileSysDir.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTHtml_1_1TFileSysDir.html
Integrability,message,message,"object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t ",MatchSource.WIKI,doc/master/classTHtml_1_1TFileSysDir.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTHtml_1_1TFileSysDir.html
Modifiability,inherit,inherited,". ROOT: THtml::TFileSysDir Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Attributes |; List of all members ; THtml::TFileSysDir Class Reference. . Definition at line 138 of file THtml.h. Public Member Functions;  TFileSysDir (const char *name, TFileSysDir *parent);  ; const TList * GetFiles () const;  ; const TList * GetSubDirs () const;  ; TClass * IsA () const override;  ; void Recurse (TFileSysDB *db, const char *path);  Recursively fill entries by parsing the contents of path. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from THtml::TFileSysEntry;  TFileSysEntry (const char *name, TFileSysDir *parent);  ;  ~TFileSysEntry () override;  ; virtual void GetFullName (TString &fullname, Bool_t asIncluded) const;  ; Int_t GetLevel () const;  ; const char * GetName () const override;  Returns name of object. ;  ; TFileSysDir * GetParent () const;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; TClass * IsA () const override;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consi",MatchSource.WIKI,doc/master/classTHtml_1_1TFileSysDir.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTHtml_1_1TFileSysDir.html
Security,hash,hash,"c Member Functions |; Static Public Member Functions |; Protected Attributes |; List of all members ; THtml::TFileSysDir Class Reference. . Definition at line 138 of file THtml.h. Public Member Functions;  TFileSysDir (const char *name, TFileSysDir *parent);  ; const TList * GetFiles () const;  ; const TList * GetSubDirs () const;  ; TClass * IsA () const override;  ; void Recurse (TFileSysDB *db, const char *path);  Recursively fill entries by parsing the contents of path. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from THtml::TFileSysEntry;  TFileSysEntry (const char *name, TFileSysDir *parent);  ;  ~TFileSysEntry () override;  ; virtual void GetFullName (TString &fullname, Bool_t asIncluded) const;  ; Int_t GetLevel () const;  ; const char * GetName () const override;  Returns name of object. ;  ; TFileSysDir * GetParent () const;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; TClass * IsA () const override;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name",MatchSource.WIKI,doc/master/classTHtml_1_1TFileSysDir.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTHtml_1_1TFileSysDir.html
Availability,error,error,"object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t ",MatchSource.WIKI,doc/master/classTHtml_1_1TFileSysEntry.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTHtml_1_1TFileSysEntry.html
Integrability,message,message,"object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t ",MatchSource.WIKI,doc/master/classTHtml_1_1TFileSysEntry.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTHtml_1_1TFileSysEntry.html
Modifiability,inherit,inherited,". ROOT: THtml::TFileSysEntry Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Attributes |; List of all members ; THtml::TFileSysEntry Class Reference. . Definition at line 106 of file THtml.h. Public Member Functions;  TFileSysEntry (const char *name, TFileSysDir *parent);  ;  ~TFileSysEntry () override;  ; virtual void GetFullName (TString &fullname, Bool_t asIncluded) const;  ; Int_t GetLevel () const;  ; const char * GetName () const override;  Returns name of object. ;  ; TFileSysDir * GetParent () const;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; TClass * IsA () const override;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Co",MatchSource.WIKI,doc/master/classTHtml_1_1TFileSysEntry.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTHtml_1_1TFileSysEntry.html
Security,hash,hash,". ROOT: THtml::TFileSysEntry Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Attributes |; List of all members ; THtml::TFileSysEntry Class Reference. . Definition at line 106 of file THtml.h. Public Member Functions;  TFileSysEntry (const char *name, TFileSysDir *parent);  ;  ~TFileSysEntry () override;  ; virtual void GetFullName (TString &fullname, Bool_t asIncluded) const;  ; Int_t GetLevel () const;  ; const char * GetName () const override;  Returns name of object. ;  ; TFileSysDir * GetParent () const;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; TClass * IsA () const override;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Co",MatchSource.WIKI,doc/master/classTHtml_1_1TFileSysEntry.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTHtml_1_1TFileSysEntry.html
Testability,log,logarithmic," file THtml.h. ◆ GetName(). const char * THtml::TFileSysEntry::GetName ; (; ); const. inlineoverridevirtual . Returns name of object. ; This default method returns the class name. Classes that give objects a name should override this method. ; Reimplemented from TObject.; Definition at line 115 of file THtml.h. ◆ GetParent(). TFileSysDir * THtml::TFileSysEntry::GetParent ; (; ); const. inline . Definition at line 127 of file THtml.h. ◆ Hash(). ULong_t THtml::TFileSysEntry::Hash ; (; ); const. inlineoverridevirtual . Return hash value for this object. ; Note: If this routine is overloaded in a derived class, this derived class should also add ROOT::CallRecursiveRemoveIfNeeded(*this); ROOT::CallRecursiveRemoveIfNeededvoid CallRecursiveRemoveIfNeeded(TObject &obj)call RecursiveRemove for obj if gROOT is valid and obj.TestBit(kMustCleanup) is true.Definition TROOT.h:395; Otherwise, when RecursiveRemove is called (by ~TObject or example) for this type of object, the transversal of THashList and THashTable containers will will have to be done without call Hash (and hence be linear rather than logarithmic complexity). You will also see warnings like Error in <ROOT::Internal::TCheckHashRecursiveRemoveConsistency::CheckRecursiveRemove>: The class SomeName overrides TObject::Hash but does not call TROOT::RecursiveRemove in its destructor.; THtml::TFileSysEntry::HashULong_t Hash() const overrideReturn hash value for this object.Definition THtml.h:116; TObjectMother of all ROOT objects.Definition TObject.h:41; TObject::Errorvirtual void Error(const char *method, const char *msgfmt,...) constIssue error message.Definition TObject.cxx:993; TROOT::RecursiveRemovevoid RecursiveRemove(TObject *obj) overrideRecursively remove this object from the list of Cleanups.Definition TROOT.cxx:2498. Reimplemented from TObject.; Definition at line 116 of file THtml.h. ◆ IsA(). TClass * THtml::TFileSysEntry::IsA ; (; ); const. inlineoverridevirtual . ReturnsTClass describing current object ; Reim",MatchSource.WIKI,doc/master/classTHtml_1_1TFileSysEntry.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTHtml_1_1TFileSysEntry.html
Availability,error,error,"object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t ",MatchSource.WIKI,doc/master/classTHtml_1_1TFileSysRoot.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTHtml_1_1TFileSysRoot.html
Integrability,message,message,"object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t ",MatchSource.WIKI,doc/master/classTHtml_1_1TFileSysRoot.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTHtml_1_1TFileSysRoot.html
Modifiability,inherit,inherited,". ROOT: THtml::TFileSysRoot Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; List of all members ; THtml::TFileSysRoot Class Reference. . Definition at line 157 of file THtml.h. Public Member Functions;  TFileSysRoot (const char *name, TFileSysDB *parent);  ; void GetFullName (TString &fullname, Bool_t asIncluded) const override;  ; TClass * IsA () const override;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from THtml::TFileSysDir;  TFileSysDir (const char *name, TFileSysDir *parent);  ; const TList * GetFiles () const;  ; const TList * GetSubDirs () const;  ; void Recurse (TFileSysDB *db, const char *path);  Recursively fill entries by parsing the contents of path. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from THtml::TFileSysEntry;  TFileSysEntry (const char *name, TFileSysDir *parent);  ;  ~TFileSysEntry () override;  ; Int_t GetLevel () const;  ; const char * GetName () const override;  Returns name of object. ;  ; TFileSysDir * GetParent () const;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();",MatchSource.WIKI,doc/master/classTHtml_1_1TFileSysRoot.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTHtml_1_1TFileSysRoot.html
Security,hash,hash,"lic Member Functions;  TFileSysRoot (const char *name, TFileSysDB *parent);  ; void GetFullName (TString &fullname, Bool_t asIncluded) const override;  ; TClass * IsA () const override;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from THtml::TFileSysDir;  TFileSysDir (const char *name, TFileSysDir *parent);  ; const TList * GetFiles () const;  ; const TList * GetSubDirs () const;  ; void Recurse (TFileSysDB *db, const char *path);  Recursively fill entries by parsing the contents of path. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from THtml::TFileSysEntry;  TFileSysEntry (const char *name, TFileSysDir *parent);  ;  ~TFileSysEntry () override;  ; Int_t GetLevel () const;  ; const char * GetName () const override;  Returns name of object. ;  ; TFileSysDir * GetParent () const;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (cons",MatchSource.WIKI,doc/master/classTHtml_1_1TFileSysRoot.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTHtml_1_1TFileSysRoot.html
Availability,error,error,". ROOT: THtml::THelperBase Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Private Attributes |; List of all members ; THtml::THelperBase Class Reference. . Definition at line 44 of file THtml.h. Public Member Functions;  THelperBase ();  ;  ~THelperBase () override;  Helper's destructor. ;  ; THtml * GetOwner () const;  ; TClass * IsA () const override;  ; void SetOwner (THtml *html);  Set the THtml object owning this object; if it's already set to a different THtml object than issue an error message and signal to the currently set object that we are not belonging to it anymore. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Op",MatchSource.WIKI,doc/master/classTHtml_1_1THelperBase.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTHtml_1_1THelperBase.html
Integrability,message,message,". ROOT: THtml::THelperBase Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Private Attributes |; List of all members ; THtml::THelperBase Class Reference. . Definition at line 44 of file THtml.h. Public Member Functions;  THelperBase ();  ;  ~THelperBase () override;  Helper's destructor. ;  ; THtml * GetOwner () const;  ; TClass * IsA () const override;  ; void SetOwner (THtml *html);  Set the THtml object owning this object; if it's already set to a different THtml object than issue an error message and signal to the currently set object that we are not belonging to it anymore. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Op",MatchSource.WIKI,doc/master/classTHtml_1_1THelperBase.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTHtml_1_1THelperBase.html
Modifiability,inherit,inherited,". ROOT: THtml::THelperBase Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Private Attributes |; List of all members ; THtml::THelperBase Class Reference. . Definition at line 44 of file THtml.h. Public Member Functions;  THelperBase ();  ;  ~THelperBase () override;  Helper's destructor. ;  ; THtml * GetOwner () const;  ; TClass * IsA () const override;  ; void SetOwner (THtml *html);  Set the THtml object owning this object; if it's already set to a different THtml object than issue an error message and signal to the currently set object that we are not belonging to it anymore. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Op",MatchSource.WIKI,doc/master/classTHtml_1_1THelperBase.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTHtml_1_1THelperBase.html
Security,hash,hash," Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Returns name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual const char * GetTitle () const;  Returns title of object. ;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; virtual ULong_t Hash () const;  Return hash value for this object. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns kTRUE if object inherits from class ""classname"". ;  ; virtual Bool_t InheritsFrom (const TClass *cl) const;  Returns kTRUE if object inherits from TClass cl. ;  ; virtual void Inspect () const;  Dump contents of this object in a graphics canvas. ;  ; void InvertBit (UInt_t f);  ; Bool_t IsDestructed () const;  IsDestructed. ;  ; virtual Bool_t IsEqual (const TObject *obj) const;  Default equal comparison (objects are equal if they have the same address in memory). ;  ; virtual Bool_t IsFolder () const;  Returns kTRUE in case object contains browsable objects (like containers or lists of other objects). ;  ; R__ALWAYS_INLINE Bool_t",MatchSource.WIKI,doc/master/classTHtml_1_1THelperBase.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTHtml_1_1THelperBase.html
Availability,error,error,". ROOT: THtml::TModuleDefinition Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; List of all members ; THtml::TModuleDefinition Class Reference. . Definition at line 61 of file THtml.h. Public Member Functions; virtual bool GetModule (TClass *cl, TFileSysEntry *fse, TString &out_modulename) const;  Set out_modulename to cl's module name; return true if it's valid. ;  ; TClass * IsA () const override;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from THtml::THelperBase;  THelperBase ();  ;  ~THelperBase () override;  Helper's destructor. ;  ; THtml * GetOwner () const;  ; void SetOwner (THtml *html);  Set the THtml object owning this object; if it's already set to a different THtml object than issue an error message and signal to the currently set object that we are not belonging to it anymore. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObj",MatchSource.WIKI,doc/master/classTHtml_1_1TModuleDefinition.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTHtml_1_1TModuleDefinition.html
Integrability,message,message,". ROOT: THtml::TModuleDefinition Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; List of all members ; THtml::TModuleDefinition Class Reference. . Definition at line 61 of file THtml.h. Public Member Functions; virtual bool GetModule (TClass *cl, TFileSysEntry *fse, TString &out_modulename) const;  Set out_modulename to cl's module name; return true if it's valid. ;  ; TClass * IsA () const override;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from THtml::THelperBase;  THelperBase ();  ;  ~THelperBase () override;  Helper's destructor. ;  ; THtml * GetOwner () const;  ; void SetOwner (THtml *html);  Set the THtml object owning this object; if it's already set to a different THtml object than issue an error message and signal to the currently set object that we are not belonging to it anymore. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObj",MatchSource.WIKI,doc/master/classTHtml_1_1TModuleDefinition.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTHtml_1_1TModuleDefinition.html
Modifiability,inherit,inherited,". ROOT: THtml::TModuleDefinition Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; List of all members ; THtml::TModuleDefinition Class Reference. . Definition at line 61 of file THtml.h. Public Member Functions; virtual bool GetModule (TClass *cl, TFileSysEntry *fse, TString &out_modulename) const;  Set out_modulename to cl's module name; return true if it's valid. ;  ; TClass * IsA () const override;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from THtml::THelperBase;  THelperBase ();  ;  ~THelperBase () override;  Helper's destructor. ;  ; THtml * GetOwner () const;  ; void SetOwner (THtml *html);  Set the THtml object owning this object; if it's already set to a different THtml object than issue an error message and signal to the currently set object that we are not belonging to it anymore. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObj",MatchSource.WIKI,doc/master/classTHtml_1_1TModuleDefinition.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTHtml_1_1TModuleDefinition.html
Security,hash,hash," Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Returns name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual const char * GetTitle () const;  Returns title of object. ;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; virtual ULong_t Hash () const;  Return hash value for this object. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns kTRUE if object inherits from class ""classname"". ;  ; virtual Bool_t InheritsFrom (const TClass *cl) const;  Returns kTRUE if object inherits from TClass cl. ;  ; virtual void Inspect () const;  Dump contents of this object in a graphics canvas. ;  ; void InvertBit (UInt_t f);  ; Bool_t IsDestructed () const;  IsDestructed. ;  ; virtual Bool_t IsEqual (const TObject *obj) const;  Default equal comparison (objects are equal if they have the same address in memory). ;  ; virtual Bool_t IsFolder () const;  Returns kTRUE in case object contains browsable objects (like containers or lists of other objects). ;  ; R__ALWAYS_INLINE Bool_t",MatchSource.WIKI,doc/master/classTHtml_1_1TModuleDefinition.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTHtml_1_1TModuleDefinition.html
Availability,error,error,"s documentation directory. ;  ; virtual bool GetFileNameFromInclude (const char *included, TString &out_fsname) const;  Set out_fsname to the full pathname corresponding to a file included as ""included"". ;  ; virtual bool GetIncludeAs (TClass *cl, TString &out_include_as) const;  Determine the path and filename used in an include statement for the header file of the given class. ;  ; virtual bool GetMacroPath (const TString &module, TString &out_dir) const;  Determine the path to look for macros (see TDocMacroDirective) for classes from a given module. ;  ; TClass * IsA () const override;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from THtml::THelperBase;  THelperBase ();  ;  ~THelperBase () override;  Helper's destructor. ;  ; THtml * GetOwner () const;  ; void SetOwner (THtml *html);  Set the THtml object owning this object; if it's already set to a different THtml object than issue an error message and signal to the currently set object that we are not belonging to it anymore. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belong",MatchSource.WIKI,doc/master/classTHtml_1_1TPathDefinition.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTHtml_1_1TPathDefinition.html
Integrability,message,message,"s documentation directory. ;  ; virtual bool GetFileNameFromInclude (const char *included, TString &out_fsname) const;  Set out_fsname to the full pathname corresponding to a file included as ""included"". ;  ; virtual bool GetIncludeAs (TClass *cl, TString &out_include_as) const;  Determine the path and filename used in an include statement for the header file of the given class. ;  ; virtual bool GetMacroPath (const TString &module, TString &out_dir) const;  Determine the path to look for macros (see TDocMacroDirective) for classes from a given module. ;  ; TClass * IsA () const override;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from THtml::THelperBase;  THelperBase ();  ;  ~THelperBase () override;  Helper's destructor. ;  ; THtml * GetOwner () const;  ; void SetOwner (THtml *html);  Set the THtml object owning this object; if it's already set to a different THtml object than issue an error message and signal to the currently set object that we are not belonging to it anymore. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belong",MatchSource.WIKI,doc/master/classTHtml_1_1TPathDefinition.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTHtml_1_1TPathDefinition.html
Modifiability,inherit,inherited,"tions |; List of all members ; THtml::TPathDefinition Class Reference. . Definition at line 92 of file THtml.h. Public Member Functions; virtual bool GetDocDir (const TString &module, TString &doc_dir) const;  Determine the module's documentation directory. ;  ; virtual bool GetFileNameFromInclude (const char *included, TString &out_fsname) const;  Set out_fsname to the full pathname corresponding to a file included as ""included"". ;  ; virtual bool GetIncludeAs (TClass *cl, TString &out_include_as) const;  Determine the path and filename used in an include statement for the header file of the given class. ;  ; virtual bool GetMacroPath (const TString &module, TString &out_dir) const;  Determine the path to look for macros (see TDocMacroDirective) for classes from a given module. ;  ; TClass * IsA () const override;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from THtml::THelperBase;  THelperBase ();  ;  ~THelperBase () override;  Helper's destructor. ;  ; THtml * GetOwner () const;  ; void SetOwner (THtml *html);  Set the THtml object owning this object; if it's already set to a different THtml object than issue an error message and signal to the currently set object that we are not belonging to it anymore. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check",MatchSource.WIKI,doc/master/classTHtml_1_1TPathDefinition.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTHtml_1_1TPathDefinition.html
Security,hash,hash," Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Returns name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual const char * GetTitle () const;  Returns title of object. ;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; virtual ULong_t Hash () const;  Return hash value for this object. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns kTRUE if object inherits from class ""classname"". ;  ; virtual Bool_t InheritsFrom (const TClass *cl) const;  Returns kTRUE if object inherits from TClass cl. ;  ; virtual void Inspect () const;  Dump contents of this object in a graphics canvas. ;  ; void InvertBit (UInt_t f);  ; Bool_t IsDestructed () const;  IsDestructed. ;  ; virtual Bool_t IsEqual (const TObject *obj) const;  Default equal comparison (objects are equal if they have the same address in memory). ;  ; virtual Bool_t IsFolder () const;  Returns kTRUE in case object contains browsable objects (like containers or lists of other objects). ;  ; R__ALWAYS_INLINE Bool_t",MatchSource.WIKI,doc/master/classTHtml_1_1TPathDefinition.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTHtml_1_1TPathDefinition.html
Availability,error,error,"ual void HttpReplied ();  virtual method to inform object that http request is processed ;  ; Bool_t Is404 () const;  ; TClass * IsA () const override;  ; Bool_t IsBinary () const;  ; Bool_t IsContentType (const char *typ) const;  ; Bool_t IsFile () const;  ; Bool_t IsJson () const;  ; Bool_t IsMethod (const char *name) const;  returns kTRUE if post method is used ;  ; Bool_t IsPostMethod () const;  returns kTRUE if post method is used ;  ; Bool_t IsPostponed () const;  ; Bool_t IsText () const;  ; Bool_t IsXml () const;  ; void NotifyCondition ();  Method used to notify condition which waiting when operation will complete. ;  ; Int_t NumHeader () const;  returns number of fields in header ;  ; Int_t NumRequestHeader () const;  returns number of fields in request header ;  ; void ReplaceAllinContent (const std::string &from, const std::string &to, bool once=false);  Replace all occurrences of string in content. ;  ; void Set404 ();  mark reply as 404 error - page/request not exists or refused ;  ; void SetBinary ();  Set content type as ""application/x-binary"". ;  ; void SetBinaryContent (std::string &&bin);  Set content type as ""application/x-binary"" and also assigns content. ;  ; void SetContent (const char *cont);  Set content as text. ;  ; void SetContent (std::string &&cont);  Set text or binary content directly After method call argument cont will be in undefined state. ;  ; void SetContentType (const char *typ);  set content type like ""text/xml"" or ""application/json"" ;  ; void SetEncoding (const char *typ);  Set Content-Encoding header like gzip. ;  ; void SetExtraHeader (const char *name, const char *value);  add extra http header value to the reply ;  ; void SetFile (const char *filename=nullptr);  indicate that http request should response with file content ;  ; void SetFileName (const char *f);  set request file name ;  ; void SetJson ();  Set content type as ""application/json"". ;  ; void SetJsonContent (std::string &&json);  Set content type as ""applicati",MatchSource.WIKI,doc/master/classTHttpCallArg.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTHttpCallArg.html
Deployability,release,released,"athAndFileName ; (; const char * ; fullpath). Set complete path of requested http element. ; For instance, it could be ""/folder/subfolder/get.bin"" Here ""/folder/subfolder/"" is element path and ""get.bin"" requested file. One could set path and file name separately ; Definition at line 295 of file THttpCallArg.cxx. ◆ SetPathName(). void THttpCallArg::SetPathName ; (; const char * ; p). inline . set request path name ; Definition at line 88 of file THttpCallArg.h. ◆ SetPostData() [1/2]. void THttpCallArg::SetPostData ; (; std::string && ; data). Set data, which is posted with the request. ; Although std::string is used, not only text data can be assigned - std::string can contain any sequence of symbols ; Definition at line 244 of file THttpCallArg.cxx. ◆ SetPostData() [2/2]. void THttpCallArg::SetPostData ; (; void * ; data, . Long_t ; length, . Bool_t ; make_copy = kFALSE . ). Set data, posted with the request. ; If make_copy==kFALSE, data will be released with free(data) call Deprecated:Use signature with std::string ; Definition at line 228 of file THttpCallArg.cxx. ◆ SetPostponed(). void THttpCallArg::SetPostponed ; (; ). inline . mark as postponed - reply will not be send to client immediately ; Definition at line 169 of file THttpCallArg.h. ◆ SetQuery(). void THttpCallArg::SetQuery ; (; const char * ; q). inline . set request query ; Definition at line 97 of file THttpCallArg.h. ◆ SetRequestHeader(). void THttpCallArg::SetRequestHeader ; (; const char * ; h). inline . set full set of request header ; Definition at line 116 of file THttpCallArg.h. ◆ SetText(). void THttpCallArg::SetText ; (; ). Set content type as ""text/plain"". ; Definition at line 149 of file THttpCallArg.cxx. ◆ SetTextContent(). void THttpCallArg::SetTextContent ; (; std::string && ; txt). Set content type as ""text/plain"" and also assigns content. ; Parameters. txtwill be in undefined state after method call . Definition at line 159 of file THttpCallArg.cxx. ◆ SetTopName(). void THttpCallArg::Se",MatchSource.WIKI,doc/master/classTHttpCallArg.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTHttpCallArg.html
Integrability,message,message,"object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Return",MatchSource.WIKI,doc/master/classTHttpCallArg.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTHttpCallArg.html
Modifiability,inherit,inherited,". ROOT: THttpCallArg Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; Private Member Functions |; Private Attributes |; Friends |; List of all members ; THttpCallArg Class ReferenceHTTP server. ; Contains arguments for single HTTP call. ; Must be used in THttpEngine to process incoming http requests ; Definition at line 27 of file THttpCallArg.h. Public Types; enum  { kNoZip = 0; , kZip = 1; , kZipLarge = 2; , kZipAlways = 3; };  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  . Public Member Functions;  THttpCallArg ();  ; virtual ~THttpCallArg ();  destructor ;  ; void AddHeader (const char *name, const char *value);  Set name: value pair to reply header. ;  ; void AddNoCacheHeader ();  Set CacheControl http header to disable browser caching. ;  ; virtual Bool_t CanPostpone () const;  Return true if reply can be postponed by server .  ; Bool_t CompressWithGzip ();  Compress reply data with gzip compression. ;  ; template<class T , typename... Args> ; void CreateWSEngine (Args... args);  ; std::string FillHttpHeader (const char *header=nullptr);  Fills HTTP header, which can be send at the beginning of reply on the http request. ;  ; const void * GetContent () const;  ; Long_t GetContentL",MatchSource.WIKI,doc/master/classTHttpCallArg.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTHttpCallArg.html
Security,authenticat,authenticated,"ame () const;  returns file name from request URL ;  ; TString GetHeader (const char *name);  Return specified header. ;  ; TString GetHeaderName (Int_t number) const;  returns field name in header ;  ; const char * GetMethod () const;  returns request method like GET or POST ;  ; const char * GetPathName () const;  returns path name from request URL ;  ; const void * GetPostData () const;  return pointer on posted with request data ;  ; Long_t GetPostDataLength () const;  return length of posted with request data ;  ; const char * GetQuery () const;  returns request query (string after ? in request URL) ;  ; TString GetRequestHeader (const char *name);  get named field from request header ;  ; TString GetRequestHeaderName (Int_t number) const;  returns field name in request header ;  ; const char * GetTopName () const;  returns engine-specific top-name ;  ; const char * GetUserName () const;  return authenticated user name (0 - when no authentication) ;  ; UInt_t GetWSId () const;  get web-socket id ;  ; virtual const char * GetWSKind () const;  provide WS kind - websocket, longpoll, rawlongpoll ;  ; virtual const char * GetWSPlatform () const;  provide WS platform - http, fastcgi, cef3, qt5 ;  ; Int_t GetZipping () const;  ; virtual void HttpReplied ();  virtual method to inform object that http request is processed ;  ; Bool_t Is404 () const;  ; TClass * IsA () const override;  ; Bool_t IsBinary () const;  ; Bool_t IsContentType (const char *typ) const;  ; Bool_t IsFile () const;  ; Bool_t IsJson () const;  ; Bool_t IsMethod (const char *name) const;  returns kTRUE if post method is used ;  ; Bool_t IsPostMethod () const;  returns kTRUE if post method is used ;  ; Bool_t IsPostponed () const;  ; Bool_t IsText () const;  ; Bool_t IsXml () const;  ; void NotifyCondition ();  Method used to notify condition which waiting when operation will complete. ;  ; Int_t NumHeader () const;  returns number of fields in header ;  ; Int_t NumRequestHeader () const;  returns num",MatchSource.WIKI,doc/master/classTHttpCallArg.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTHttpCallArg.html
Availability,error,error,"ject. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t ",MatchSource.WIKI,doc/master/classTHttpEngine.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTHttpEngine.html
Integrability,protocol,protocol,". ROOT: THttpEngine Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; Friends |; List of all members ; THttpEngine Class ReferenceHTTP server. ; Abstract class for implementing http protocol for THttpServer. ; Definition at line 19 of file THttpEngine.h. Public Member Functions; virtual Bool_t Create (const char *);  Method to create all components of engine. ;  ; THttpServer * GetServer () const;  Returns pointer to THttpServer associated with engine. ;  ; TClass * IsA () const override;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; TClass * IsA () const override;  ; Bool_t IsSortable () const override;  ; void ls (Option_t *option="""") const override;  List TNamed name and title. ;  ; TNamed & operator= (const TNamed &rhs);  TNamed assignment operator. ;  ; void Print (Option_t ",MatchSource.WIKI,doc/master/classTHttpEngine.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTHttpEngine.html
Modifiability,inherit,inherited,". ROOT: THttpEngine Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; Friends |; List of all members ; THttpEngine Class ReferenceHTTP server. ; Abstract class for implementing http protocol for THttpServer. ; Definition at line 19 of file THttpEngine.h. Public Member Functions; virtual Bool_t Create (const char *);  Method to create all components of engine. ;  ; THttpServer * GetServer () const;  Returns pointer to THttpServer associated with engine. ;  ; TClass * IsA () const override;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; TClass * IsA () const override;  ; Bool_t IsSortable () const override;  ; void ls (Option_t *option="""") const override;  List TNamed name and title. ;  ; TNamed & operator= (const TNamed &rhs);  TNamed assignment operator. ;  ; void Print (Option_t ",MatchSource.WIKI,doc/master/classTHttpEngine.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTHttpEngine.html
Security,hash,hash," override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; TClass * IsA () const override;  ; Bool_t IsSortable () const override;  ; void ls (Option_t *option="""") const override;  List TNamed name and title. ;  ; TNamed & operator= (const TNamed &rhs);  TNamed assignment operator. ;  ; void Print (Option_t *option="""") const override;  Print TNamed name and title. ;  ; virtual void SetName (const char *name);  Set the name of the TNamed. ;  ; virtual void SetNameTitle (const char *name, const char *title);  Set all the TNamed parameters (name and title). ;  ; virtual void SetTitle (const char *title="""");  Set the title of the TNamed. ;  ; virtual Int_t Sizeof () const;  Return size of the TNamed part of the TObject. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;",MatchSource.WIKI,doc/master/classTHttpEngine.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTHttpEngine.html
Availability,error,error,"rtual; Compare(const TObject *obj) const overrideTNamedvirtual; Copy(TObject &named) const overrideTNamedvirtual; CreateEngine(const char *engine)THttpServer; CreateItem(const char *fullname, const char *title)THttpServer; CreateServerThread()THttpServer; DeclFileName()THttpServerinlinestatic; Delete(Option_t *option="""")TObjectvirtual; DistancetoPrimitive(Int_t px, Int_t py)TObjectvirtual; DoError(int level, const char *location, const char *fmt, va_list va) constTObjectprotectedvirtual; Draw(Option_t *option="""")TObjectvirtual; DrawClass() constTObjectvirtual; DrawClone(Option_t *option="""") constTObjectvirtual; Dump() constTObjectvirtual; EDeprecatedStatusBits enum nameTObject; Error(const char *method, const char *msgfmt,...) constTObjectvirtual; EStatusBits enum nameTObject; Execute(const char *method, const char *params, Int_t *error=nullptr)TObjectvirtual; Execute(TMethod *method, TObjArray *params, Int_t *error=nullptr)TObjectvirtual; ExecuteEvent(Int_t event, Int_t px, Int_t py)TObjectvirtual; ExecuteHttp(std::shared_ptr< THttpCallArg > arg)THttpServer; ExecuteWS(std::shared_ptr< THttpCallArg > &arg, Bool_t external_thrd=kFALSE, Bool_t wait_process=kFALSE)THttpServer; fArgsTHttpServerprotected; Fatal(const char *method, const char *msgfmt,...) constTObjectvirtual; fBitsTObjectprivate; fCorsTHttpServerprotected; fCorsCredentialsTHttpServerprotected; fDefaultPageTHttpServerprotected; fDefaultPageContTHttpServerprotected; fDrawPageTHttpServerprotected; fDrawPageContTHttpServerprotected; fEnginesTHttpServerprotected; fgDtorOnlyTObjectprivatestatic; fgObjectStatTObjectprivatestatic; FillBuffer(char *&buffer)TNamedvirtual; FindObject(const char *name) constTObjectvirtual; FindObject(const TObject *obj) constTObjectvirtual; FindWS(const char *name)THttpServer; fJSROOTTHttpServerprotected; fJSROOTSYSTHttpServerprotected; fLocationsTHttpServerprotected; fMainThrdIdTHttpServerprotected; fMutexTHttpServerprotected; fNameTNamedprotected; fOwnThreadTHttpServerprotected; fPr",MatchSource.WIKI,doc/master/classTHttpServer-members.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTHttpServer-members.html
Modifiability,inherit,inherited,". ROOT: Member List. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. THttpServer Member List. This is the complete list of members for THttpServer, including all inherited members. AbstractMethod(const char *method) constTObject; AddLocation(const char *prefix, const char *path)THttpServer; AddToTObjectTable(TObject *)TObjectprivatestatic; AppendPad(Option_t *option="""")TObjectvirtual; Browse(TBrowser *b)TObjectvirtual; BuildWSEntryPage()THttpServerprotected; CheckedHash()TObjectinline; Class()THttpServerstatic; Class_Name()THttpServerstatic; Class_Version()THttpServerinlinestatic; ClassName() constTObjectvirtual; Clear(Option_t *option="""") overrideTNamedvirtual; Clone(const char *newname="""") const overrideTNamedvirtual; Compare(const TObject *obj) const overrideTNamedvirtual; Copy(TObject &named) const overrideTNamedvirtual; CreateEngine(const char *engine)THttpServer; CreateItem(const char *fullname, const char *title)THttpServer; CreateServerThread()THttpServer; DeclFileName()THttpServerinlinestatic; Delete(Option_t *option="""")TObjectvirtual; DistancetoPrimitive(Int_t px, Int_t py)TObjectvirtual; DoError(int level, const char *location, const char *fmt, va_list va) constTObjectprotectedvirtual; Draw(Option_t *option="""")TObjectvirtual; DrawClass() constTObjectvirtual; DrawClone(Option_t *option="""") constTObjectvirtual; Dump() constTObjectvirtual; EDeprecatedStatusBits enum nameTObject; Error(const char *method, const char *msgfmt,...) constTObjectvirtual; EStatusBits enum nameTObject; Execute(const char *method, const char *params, Int_t *error=nullptr)TObjectvirtual; Execute(TMethod *method, TObjArray *params, Int_t *error=nullptr)TObjectvirtual; ExecuteEvent(Int_t event, Int_t px, Int_t py)TObjectvirtual; ExecuteHttp(std::shared_ptr< THttpCallArg > arg)THttpServer; ExecuteWS(std::shared_ptr< THttpCallArg > &arg, Bool_t external_thrd=kFALSE, Bool_t wait_process=kFALSE)THttpServer; fArgsTHttpServerprotected; Fatal(const char *method,",MatchSource.WIKI,doc/master/classTHttpServer-members.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTHttpServer-members.html
Availability,error,error,"ject. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t ",MatchSource.WIKI,doc/master/classTHttpServer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTHttpServer.html
Deployability,update,updated,". ; Idea of THttpServer - provide remote http access to running ROOT application and enable HTML/JavaScript user interface. Any registered object can be requested and displayed in the browser. There are many benefits of such approach:. standard http interface to ROOT application; no any temporary ROOT files when access data; user interface running in all browsers. To start http server simply create instance of the THttpServer class like: serv = new THttpServer(""http:8080"");; This will starts civetweb-based http server with http port 8080. Than one should be able to open address ""http://localhost:8080"" in any modern web browser (Firefox, Chrome, Opera, ...) and browse objects, created in ROOT application. By default, server can access files, canvases and histograms via gROOT pointer. All such objects can be displayed with JSROOT graphics.; At any time one could register other objects with the command: TGraph* gr = new TGraph(10);; gr->SetName(""gr1"");; serv->Register(""graphs/subfolder"", gr);; If objects content is changing in the application, one could enable monitoring flag in the browser - than objects view will be regularly updated.; More information: https://root.cern/root/htmldoc/guides/HttpServer/HttpServer.html ; Definition at line 31 of file THttpServer.h. Public Member Functions;  THttpServer (const char *engine=""http:8080"");  constructor ;  ; virtual ~THttpServer ();  destructor ;  ; void AddLocation (const char *prefix, const char *path);  Add files location, which could be used in the server. ;  ; Bool_t CreateEngine (const char *engine);  Factory method to create different http engines. ;  ; Bool_t CreateItem (const char *fullname, const char *title);  Create item in sniffer. ;  ; void CreateServerThread ();  Creates special thread to process all requests, directed to http server. ;  ; Bool_t ExecuteHttp (std::shared_ptr< THttpCallArg > arg);  Execute HTTP request. ;  ; Bool_t ExecuteWS (std::shared_ptr< THttpCallArg > &arg, Bool_t external_thrd=kFALSE, B",MatchSource.WIKI,doc/master/classTHttpServer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTHttpServer.html
Energy Efficiency,monitor,monitoring,". ; Idea of THttpServer - provide remote http access to running ROOT application and enable HTML/JavaScript user interface. Any registered object can be requested and displayed in the browser. There are many benefits of such approach:. standard http interface to ROOT application; no any temporary ROOT files when access data; user interface running in all browsers. To start http server simply create instance of the THttpServer class like: serv = new THttpServer(""http:8080"");; This will starts civetweb-based http server with http port 8080. Than one should be able to open address ""http://localhost:8080"" in any modern web browser (Firefox, Chrome, Opera, ...) and browse objects, created in ROOT application. By default, server can access files, canvases and histograms via gROOT pointer. All such objects can be displayed with JSROOT graphics.; At any time one could register other objects with the command: TGraph* gr = new TGraph(10);; gr->SetName(""gr1"");; serv->Register(""graphs/subfolder"", gr);; If objects content is changing in the application, one could enable monitoring flag in the browser - than objects view will be regularly updated.; More information: https://root.cern/root/htmldoc/guides/HttpServer/HttpServer.html ; Definition at line 31 of file THttpServer.h. Public Member Functions;  THttpServer (const char *engine=""http:8080"");  constructor ;  ; virtual ~THttpServer ();  destructor ;  ; void AddLocation (const char *prefix, const char *path);  Add files location, which could be used in the server. ;  ; Bool_t CreateEngine (const char *engine);  Factory method to create different http engines. ;  ; Bool_t CreateItem (const char *fullname, const char *title);  Create item in sniffer. ;  ; void CreateServerThread ();  Creates special thread to process all requests, directed to http server. ;  ; Bool_t ExecuteHttp (std::shared_ptr< THttpCallArg > arg);  Execute HTTP request. ;  ; Bool_t ExecuteWS (std::shared_ptr< THttpCallArg > &arg, Bool_t external_thrd=kFALSE, B",MatchSource.WIKI,doc/master/classTHttpServer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTHttpServer.html
Integrability,interface,interface,". ROOT: THttpServer Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Static Protected Member Functions |; Protected Attributes |; List of all members ; THttpServer Class ReferenceHTTP server. ; Online http server for arbitrary ROOT application. ; Idea of THttpServer - provide remote http access to running ROOT application and enable HTML/JavaScript user interface. Any registered object can be requested and displayed in the browser. There are many benefits of such approach:. standard http interface to ROOT application; no any temporary ROOT files when access data; user interface running in all browsers. To start http server simply create instance of the THttpServer class like: serv = new THttpServer(""http:8080"");; This will starts civetweb-based http server with http port 8080. Than one should be able to open address ""http://localhost:8080"" in any modern web browser (Firefox, Chrome, Opera, ...) and browse objects, created in ROOT application. By default, server can access files, canvases and histograms via gROOT pointer. All such objects can be displayed with JSROOT graphics.; At any time one could register other objects with the command: TGraph* gr = new TGraph(10);; gr->SetName(""gr1"");; serv->Register(""graphs/subfolder"", gr);; If objects content is changing in the application, one could enable monitoring flag in the browser - than objects view will be regularly updated.; More information: https://root.cern/root/htmldoc/guides/HttpServer/HttpServer.html ; Definition at line 31 of file THttpServer.h. Public Member Functions;  THttpServer (const char *engine=""http:8080"");  constructor ;  ; virtual ~THttpServer ();  destructor ;  ; void AddLocation (const char *prefix, const char *path);  Add files location, which could be used in the server. ;  ; Bool_t CreateEngine (const char *engine);  Factory method to c",MatchSource.WIKI,doc/master/classTHttpServer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTHttpServer.html
Modifiability,config,configured,"es special thread to process all requests, directed to http server. ;  ; Bool_t ExecuteHttp (std::shared_ptr< THttpCallArg > arg);  Execute HTTP request. ;  ; Bool_t ExecuteWS (std::shared_ptr< THttpCallArg > &arg, Bool_t external_thrd=kFALSE, Bool_t wait_process=kFALSE);  Execute WS request. ;  ; std::shared_ptr< THttpWSHandler > FindWS (const char *name);  Find web-socket handler with given name. ;  ; const char * GetCors () const;  Returns specified CORS domain. ;  ; const char * GetCorsCredentials () const;  Returns specified CORS credentials value - if any. ;  ; const char * GetItemField (const char *fullname, const char *name);  Get item field from sniffer. ;  ; TRootSniffer * GetSniffer () const;  returns pointer on objects sniffer ;  ; const char * GetTopName () const;  returns name of top item in objects hierarchy ;  ; Bool_t Hide (const char *fullname, Bool_t hide=kTRUE);  Hides folder or element from web gui. ;  ; TClass * IsA () const override;  ; Bool_t IsAnyEngine () const;  ; Bool_t IsCors () const;  Returns kTRUE if CORS was configured. ;  ; Bool_t IsCorsCredentials () const;  Returns kTRUE if Access-Control-Allow-Credentials header should be used. ;  ; Bool_t IsFileRequested (const char *uri, TString &res) const;  Check if file is requested, thread safe. ;  ; Bool_t IsReadOnly () const;  returns read-only mode ;  ; Bool_t IsTerminated () const;  returns kTRUE, if server was terminated ;  ; Bool_t IsWSOnly () const;  returns true if only websockets are handled by the server ;  ; Int_t ProcessRequests ();  Process submitted requests, must be called from appropriate thread. ;  ; Bool_t Register (const char *subfolder, TObject *obj);  Register object in subfolder. ;  ; Bool_t RegisterCommand (const char *cmdname, const char *method, const char *icon=nullptr);  Register command which can be executed from web interface. ;  ; void RegisterWS (std::shared_ptr< THttpWSHandler > ws);  Register WS handler. ;  ; void Restrict (const char *path, const char *optio",MatchSource.WIKI,doc/master/classTHttpServer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTHttpServer.html
Performance,queue,queue,"ot contains relative path below current directory. ;  . Protected Attributes; std::queue< std::shared_ptr< THttpCallArg > > fArgs;  ! submitted arguments ;  ; std::string fCors;  ! CORS: sets Access-Control-Allow-Origin header for ProcessRequest responses ;  ; std::string fCorsCredentials;  ! CORS: add Access-Control-Allow-Credentials: true response header ;  ; std::string fDefaultPage;  ! file name for default page name ;  ; std::string fDefaultPageCont;  ! content of default html page ;  ; std::string fDrawPage;  ! file name for drawing of single element ;  ; std::string fDrawPageCont;  ! content of draw html page ;  ; TList fEngines;  ! engines which runs http server ;  ; TString fJSROOT;  ! location of external JSROOT files ;  ; TString fJSROOTSYS;  ! location of local JSROOT files ;  ; std::map< std::string, std::string > fLocations;  ! list of local directories, which could be accessed via server ;  ; Long_t fMainThrdId {0};  ! id of the thread for processing requests ;  ; std::mutex fMutex;  ! mutex to protect list with arguments ;  ; Bool_t fOwnThread {kFALSE};  ! true when specialized thread allocated for processing requests ;  ; Long_t fProcessingThrdId {0};  ! id of the thread where events are recently processing ;  ; std::unique_ptr< TRootSniffer > fSniffer;  ! sniffer provides access to ROOT objects hierarchy ;  ; Bool_t fTerminated {kFALSE};  ! termination flag, disables all requests processing ;  ; std::thread fThrd;  ! own thread ;  ; std::unique_ptr< THttpTimer > fTimer;  ! timer used to access main thread ;  ; TString fTopName {""ROOT""};  ! name of top folder, default - ""ROOT"" ;  ; std::vector< std::shared_ptr< THttpWSHandler > > fWSHandlers;  ! list of WS handlers ;  ; std::mutex fWSMutex;  ! mutex to protect WS handler lists ;  ; Bool_t fWSOnly {kFALSE};  ! when true, handle only websockets / longpoll engine ;  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  . Additional Inherited Members;  Public Types inherited ",MatchSource.WIKI,doc/master/classTHttpServer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTHttpServer.html
Safety,safe,safe,"kFALSE, Bool_t wait_process=kFALSE);  Execute WS request. ;  ; std::shared_ptr< THttpWSHandler > FindWS (const char *name);  Find web-socket handler with given name. ;  ; const char * GetCors () const;  Returns specified CORS domain. ;  ; const char * GetCorsCredentials () const;  Returns specified CORS credentials value - if any. ;  ; const char * GetItemField (const char *fullname, const char *name);  Get item field from sniffer. ;  ; TRootSniffer * GetSniffer () const;  returns pointer on objects sniffer ;  ; const char * GetTopName () const;  returns name of top item in objects hierarchy ;  ; Bool_t Hide (const char *fullname, Bool_t hide=kTRUE);  Hides folder or element from web gui. ;  ; TClass * IsA () const override;  ; Bool_t IsAnyEngine () const;  ; Bool_t IsCors () const;  Returns kTRUE if CORS was configured. ;  ; Bool_t IsCorsCredentials () const;  Returns kTRUE if Access-Control-Allow-Credentials header should be used. ;  ; Bool_t IsFileRequested (const char *uri, TString &res) const;  Check if file is requested, thread safe. ;  ; Bool_t IsReadOnly () const;  returns read-only mode ;  ; Bool_t IsTerminated () const;  returns kTRUE, if server was terminated ;  ; Bool_t IsWSOnly () const;  returns true if only websockets are handled by the server ;  ; Int_t ProcessRequests ();  Process submitted requests, must be called from appropriate thread. ;  ; Bool_t Register (const char *subfolder, TObject *obj);  Register object in subfolder. ;  ; Bool_t RegisterCommand (const char *cmdname, const char *method, const char *icon=nullptr);  Register command which can be executed from web interface. ;  ; void RegisterWS (std::shared_ptr< THttpWSHandler > ws);  Register WS handler. ;  ; void Restrict (const char *path, const char *options);  Restrict access to specified object. ;  ; void SetCors (const std::string &domain=""*"");  Enable CORS header to ProcessRequests() responses Specified location (typically ""*"") add as ""Access-Control-Allow-Origin"" header. ;  ; void S",MatchSource.WIKI,doc/master/classTHttpServer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTHttpServer.html
Security,access,access,". ROOT: THttpServer Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Static Protected Member Functions |; Protected Attributes |; List of all members ; THttpServer Class ReferenceHTTP server. ; Online http server for arbitrary ROOT application. ; Idea of THttpServer - provide remote http access to running ROOT application and enable HTML/JavaScript user interface. Any registered object can be requested and displayed in the browser. There are many benefits of such approach:. standard http interface to ROOT application; no any temporary ROOT files when access data; user interface running in all browsers. To start http server simply create instance of the THttpServer class like: serv = new THttpServer(""http:8080"");; This will starts civetweb-based http server with http port 8080. Than one should be able to open address ""http://localhost:8080"" in any modern web browser (Firefox, Chrome, Opera, ...) and browse objects, created in ROOT application. By default, server can access files, canvases and histograms via gROOT pointer. All such objects can be displayed with JSROOT graphics.; At any time one could register other objects with the command: TGraph* gr = new TGraph(10);; gr->SetName(""gr1"");; serv->Register(""graphs/subfolder"", gr);; If objects content is changing in the application, one could enable monitoring flag in the browser - than objects view will be regularly updated.; More information: https://root.cern/root/htmldoc/guides/HttpServer/HttpServer.html ; Definition at line 31 of file THttpServer.h. Public Member Functions;  THttpServer (const char *engine=""http:8080"");  constructor ;  ; virtual ~THttpServer ();  destructor ;  ; void AddLocation (const char *prefix, const char *path);  Add files location, which could be used in the server. ;  ; Bool_t CreateEngine (const char *engine);  Factory method to c",MatchSource.WIKI,doc/master/classTHttpServer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTHttpServer.html
Usability,simpl,simply,". ROOT: THttpServer Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Static Protected Member Functions |; Protected Attributes |; List of all members ; THttpServer Class ReferenceHTTP server. ; Online http server for arbitrary ROOT application. ; Idea of THttpServer - provide remote http access to running ROOT application and enable HTML/JavaScript user interface. Any registered object can be requested and displayed in the browser. There are many benefits of such approach:. standard http interface to ROOT application; no any temporary ROOT files when access data; user interface running in all browsers. To start http server simply create instance of the THttpServer class like: serv = new THttpServer(""http:8080"");; This will starts civetweb-based http server with http port 8080. Than one should be able to open address ""http://localhost:8080"" in any modern web browser (Firefox, Chrome, Opera, ...) and browse objects, created in ROOT application. By default, server can access files, canvases and histograms via gROOT pointer. All such objects can be displayed with JSROOT graphics.; At any time one could register other objects with the command: TGraph* gr = new TGraph(10);; gr->SetName(""gr1"");; serv->Register(""graphs/subfolder"", gr);; If objects content is changing in the application, one could enable monitoring flag in the browser - than objects view will be regularly updated.; More information: https://root.cern/root/htmldoc/guides/HttpServer/HttpServer.html ; Definition at line 31 of file THttpServer.h. Public Member Functions;  THttpServer (const char *engine=""http:8080"");  constructor ;  ; virtual ~THttpServer ();  destructor ;  ; void AddLocation (const char *prefix, const char *path);  Add files location, which could be used in the server. ;  ; Bool_t CreateEngine (const char *engine);  Factory method to c",MatchSource.WIKI,doc/master/classTHttpServer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTHttpServer.html
Availability,error,error,"object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Return",MatchSource.WIKI,doc/master/classTHttpTimer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTHttpTimer.html
Integrability,message,message,"object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Return",MatchSource.WIKI,doc/master/classTHttpTimer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTHttpTimer.html
Modifiability,inherit,inherited,". ROOT: THttpTimer Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Public Attributes |; Private Attributes |; List of all members ; THttpTimer Class Reference. . Definition at line 42 of file THttpServer.cxx. Public Member Functions;  THttpTimer (Long_t milliSec, Bool_t mode, THttpServer &serv);  !< server processing requests ;  ; Bool_t IsSlow () const;  ; void SetSlow (Bool_t flag);  ; void Timeout () override;  timeout handler used to process http requests in main ROOT thread ;  ;  Public Member Functions inherited from TTimer;  TTimer (const char *command, Long_t milliSec, Bool_t mode=kTRUE);  Create timer that times out in ms milliseconds. ;  ;  TTimer (Long_t milliSec=0, Bool_t mode=kTRUE);  Create timer that times out in ms milliseconds. ;  ;  TTimer (TObject *obj, Long_t milliSec, Bool_t mode=kTRUE);  Create timer that times out in ms milliseconds. ;  ; virtual ~TTimer ();  ; void Add () override;  ; Bool_t CheckTimer (const TTime &now);  Check if timer timed out. ;  ; TTime GetAbsTime () const;  ; const char * GetCommand () const;  ; TObject * GetObject ();  ; TTime GetTime () const;  ; UInt_t GetTimerID ();  ; Bool_t HasTimedOut () const;  ; TClass * IsA () const override;  ; Bool_t IsAsync () const;  ; Bool_t IsInterruptingSyscalls () const;  ; Bool_t IsRunning ();  This function checks if the timer is running within gSystem (Has been started and did not finish yet). ;  ; Bool_t IsSync () const;  ; Bool_t Notify () override;  Notify when timer times out. ;  ; void Remove () override;  ; void Reset ();  Reset the timer. ;  ; void SetCommand (const char *command);  Set the interpreter command to be executed at time out. ;  ; void SetInterruptSyscalls (Bool_t set=kTRUE);  When the argument is true the a-synchronous timer (SIGALRM) signal handler is set so that interrupted syscalls will not be restarted by the kernel. ;  ; void SetObject (TObject *object);  Set ",MatchSource.WIKI,doc/master/classTHttpTimer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTHttpTimer.html
Safety,timeout,timeout,". ROOT: THttpTimer Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Public Attributes |; Private Attributes |; List of all members ; THttpTimer Class Reference. . Definition at line 42 of file THttpServer.cxx. Public Member Functions;  THttpTimer (Long_t milliSec, Bool_t mode, THttpServer &serv);  !< server processing requests ;  ; Bool_t IsSlow () const;  ; void SetSlow (Bool_t flag);  ; void Timeout () override;  timeout handler used to process http requests in main ROOT thread ;  ;  Public Member Functions inherited from TTimer;  TTimer (const char *command, Long_t milliSec, Bool_t mode=kTRUE);  Create timer that times out in ms milliseconds. ;  ;  TTimer (Long_t milliSec=0, Bool_t mode=kTRUE);  Create timer that times out in ms milliseconds. ;  ;  TTimer (TObject *obj, Long_t milliSec, Bool_t mode=kTRUE);  Create timer that times out in ms milliseconds. ;  ; virtual ~TTimer ();  ; void Add () override;  ; Bool_t CheckTimer (const TTime &now);  Check if timer timed out. ;  ; TTime GetAbsTime () const;  ; const char * GetCommand () const;  ; TObject * GetObject ();  ; TTime GetTime () const;  ; UInt_t GetTimerID ();  ; Bool_t HasTimedOut () const;  ; TClass * IsA () const override;  ; Bool_t IsAsync () const;  ; Bool_t IsInterruptingSyscalls () const;  ; Bool_t IsRunning ();  This function checks if the timer is running within gSystem (Has been started and did not finish yet). ;  ; Bool_t IsSync () const;  ; Bool_t Notify () override;  Notify when timer times out. ;  ; void Remove () override;  ; void Reset ();  Reset the timer. ;  ; void SetCommand (const char *command);  Set the interpreter command to be executed at time out. ;  ; void SetInterruptSyscalls (Bool_t set=kTRUE);  When the argument is true the a-synchronous timer (SIGALRM) signal handler is set so that interrupted syscalls will not be restarted by the kernel. ;  ; void SetObject (TObject *object);  Set ",MatchSource.WIKI,doc/master/classTHttpTimer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTHttpTimer.html
Security,hash,hash," Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Returns name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual const char * GetTitle () const;  Returns title of object. ;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; virtual ULong_t Hash () const;  Return hash value for this object. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns kTRUE if object inherits from class ""classname"". ;  ; virtual Bool_t InheritsFrom (const TClass *cl) const;  Returns kTRUE if object inherits from TClass cl. ;  ; virtual void Inspect () const;  Dump contents of this object in a graphics canvas. ;  ; void InvertBit (UInt_t f);  ; Bool_t IsDestructed () const;  IsDestructed. ;  ; virtual Bool_t IsEqual (const TObject *obj) const;  Default equal comparison (objects are equal if they have the same address in memory). ;  ; virtual Bool_t IsFolder () const;  Returns kTRUE in case object contains browsable objects (like containers or lists of other objects). ;  ; R__ALWAYS_INLINE Bool_t",MatchSource.WIKI,doc/master/classTHttpTimer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTHttpTimer.html
Availability,error,error,"ject. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t ",MatchSource.WIKI,doc/master/classTHttpWSHandler.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTHttpWSHandler.html
Integrability,message,message,"ject. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t ",MatchSource.WIKI,doc/master/classTHttpWSHandler.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTHttpWSHandler.html
Modifiability,inherit,inherited,";  Returns processing mode of WS handler If sync mode is TRUE (default), all event processing and data sending performed in main thread All send functions are blocking and must be performed from main thread If sync mode is false, WS handler can be used from different threads and starts its own sending threads. ;  ; virtual Bool_t ProcessWS (THttpCallArg *arg)=0;  ; Int_t SendCharStarWS (UInt_t wsid, const char *str);  Send string via given websocket id. ;  ; Int_t SendHeaderWS (UInt_t wsid, const char *hdr, const void *buf, int len);  Send binary data with text header via given websocket id. ;  ; Int_t SendWS (UInt_t wsid, const void *buf, int len);  Send binary data via given websocket id. ;  ; void SetDisabled ();  Disable all processing of websockets, normally called shortly before destructor. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; TClass * IsA () const override;  ; Bool_t IsSortable () const override;  ; void ls (Option_t *option="""") const override;",MatchSource.WIKI,doc/master/classTHttpWSHandler.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTHttpWSHandler.html
Performance,perform,performed,"iven websocket id. ;  ; virtual TString GetDefaultPageContent ();  Provides content of default web page for registered web-socket handler Can be content of HTML page or file name, where content should be taken For instance, file:/home/user/test.htm or file:$jsrootsys/files/canvas.htm If not specified, default index.htm page will be shown Used by the webcanvas. ;  ; Int_t GetNumWS ();  Returns current number of websocket connections. ;  ; UInt_t GetWS (Int_t num=0);  Return websocket id with given sequential number Number of websockets returned with GetNumWS() method. ;  ; Bool_t HasWS (UInt_t wsid);  Return kTRUE if websocket with given ID exists. ;  ; TClass * IsA () const override;  ; Bool_t IsDisabled () const;  Returns true when processing of websockets is disabled, set shortly before handler need to be destroyed. ;  ; Bool_t IsSyncMode () const;  Returns processing mode of WS handler If sync mode is TRUE (default), all event processing and data sending performed in main thread All send functions are blocking and must be performed from main thread If sync mode is false, WS handler can be used from different threads and starts its own sending threads. ;  ; virtual Bool_t ProcessWS (THttpCallArg *arg)=0;  ; Int_t SendCharStarWS (UInt_t wsid, const char *str);  Send string via given websocket id. ;  ; Int_t SendHeaderWS (UInt_t wsid, const char *hdr, const void *buf, int len);  Send binary data with text header via given websocket id. ;  ; Int_t SendWS (UInt_t wsid, const void *buf, int len);  Send binary data via given websocket id. ;  ; void SetDisabled ();  Disable all processing of websockets, normally called shortly before destructor. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TS",MatchSource.WIKI,doc/master/classTHttpWSHandler.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTHttpWSHandler.html
Security,hash,hash," override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; TClass * IsA () const override;  ; Bool_t IsSortable () const override;  ; void ls (Option_t *option="""") const override;  List TNamed name and title. ;  ; TNamed & operator= (const TNamed &rhs);  TNamed assignment operator. ;  ; void Print (Option_t *option="""") const override;  Print TNamed name and title. ;  ; virtual void SetName (const char *name);  Set the name of the TNamed. ;  ; virtual void SetNameTitle (const char *name, const char *title);  Set all the TNamed parameters (name and title). ;  ; virtual void SetTitle (const char *title="""");  Set the title of the TNamed. ;  ; virtual Int_t Sizeof () const;  Return size of the TNamed part of the TObject. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;",MatchSource.WIKI,doc/master/classTHttpWSHandler.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTHttpWSHandler.html
Testability,test,test,"DATA"")) {; std::string str((const char *)arg->GetPostData(), arg->GetPostDataLength());; std::cout << ""got string "" << str << std::endl;; SendCharStarWS(fWSId, ""our reply"");; return true;; }. See in $ROOTSYS/tutorials/http/ws.C and $ROOTSYS/tutorials/http/ws.htm functional example . Definition at line 25 of file THttpWSHandler.h. Public Member Functions; virtual ~THttpWSHandler ();  destructor Make sure that all sending threads are stopped correctly ;  ; virtual Bool_t AllowMTProcess () const;  Allow processing of WS requests in arbitrary thread. ;  ; virtual Bool_t AllowMTSend () const;  Allow send operations in separate threads (when supported by websocket engine) ;  ; virtual Bool_t CanServeFiles () const;  If returns kTRUE, allows to serve files from subdirectories where page content is situated. ;  ; void CloseWS (UInt_t wsid);  Close connection with given websocket id. ;  ; virtual TString GetDefaultPageContent ();  Provides content of default web page for registered web-socket handler Can be content of HTML page or file name, where content should be taken For instance, file:/home/user/test.htm or file:$jsrootsys/files/canvas.htm If not specified, default index.htm page will be shown Used by the webcanvas. ;  ; Int_t GetNumWS ();  Returns current number of websocket connections. ;  ; UInt_t GetWS (Int_t num=0);  Return websocket id with given sequential number Number of websockets returned with GetNumWS() method. ;  ; Bool_t HasWS (UInt_t wsid);  Return kTRUE if websocket with given ID exists. ;  ; TClass * IsA () const override;  ; Bool_t IsDisabled () const;  Returns true when processing of websockets is disabled, set shortly before handler need to be destroyed. ;  ; Bool_t IsSyncMode () const;  Returns processing mode of WS handler If sync mode is TRUE (default), all event processing and data sending performed in main thread All send functions are blocking and must be performed from main thread If sync mode is false, WS handler can be used from different thr",MatchSource.WIKI,doc/master/classTHttpWSHandler.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTHttpWSHandler.html
Availability,error,error," (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t ",MatchSource.WIKI,doc/master/classTHYPE.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTHYPE.html
Energy Efficiency,allocate,allocate,"); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Protected Member Functions inherited from TTUBE;  TTUBE (const TTUBE &);  Table of cos(fPhi1) .... cos(fPhil+fDphi1) ;  ; virtual void MakeTableOfCoSin () const;  Make table of sine and cosine. ;  ; TTUBE & operator= (const TTUBE &);  assignment operator ;  ; void SetPoints (Double_t *points) const override;  Create TUBE points. ;  ; virtual void SetSegsAndPols (TBuffer3D &buffer) const;  Set segments and polygons. ;  ;  Protected Member Functions inherited from TShape; virtual void FillBuffer3D (TBuffer3D &buffer, Int_t reqSections) const;  We have to set kRawSize (unless already done) to allocate buffer space before kRaw can be filled. ;  ; Int_t GetBasicColor () const;  Get basic color. ;  ; Int_t ShapeDistancetoPrimitive (Int_t numPoints, Int_t px, Int_t py);  Distance to primitive. ;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  . #include <THYPE.h>. Inheritance diagram for THYPE:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ THYPE() [1/2]. THYPE::THYPE ; (; ). HYPE shape default constructor. ; Definition at line 34 of file THYPE.cxx. ◆ THYPE() [2/2]. THYPE::THYPE ; (; const char * ; name, . const char * ; title, . const char * ; material, . Float_t ; rmin, . Float_t ; rmax, . Float_t ; dz, . Float_t ; phi . ). HYPE shape normal constructor. ; Defi",MatchSource.WIKI,doc/master/classTHYPE.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTHYPE.html
Integrability,message,message," (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t ",MatchSource.WIKI,doc/master/classTHYPE.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTHYPE.html
Modifiability,inherit,inherited,"all members |; Public Member Functions |; Static Public Member Functions |; Protected Attributes |; List of all members ; THYPE Class ReferenceGraphics » 3D Graphics » Basic 3D graphics. ; An hyperboloid (not implemented) ; It has 4 parameters:. name: name of the shape; title: shape's title; material: (see TMaterial); rmin: inner radius of the tube; rmax: outer radius of the tube; dz: half-length of the box along the z-axis; phi: stereo angle . Definition at line 28 of file THYPE.h. Public Member Functions;  THYPE ();  HYPE shape default constructor. ;  ;  THYPE (const char *name, const char *title, const char *material, Float_t rmin, Float_t rmax, Float_t dz, Float_t phi);  HYPE shape normal constructor. ;  ;  ~THYPE () override;  HYPE shape default destructor. ;  ; virtual Float_t GetPhi () const;  ; TClass * IsA () const override;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TTUBE;  TTUBE ();  TUBE shape default constructor. ;  ;  TTUBE (const char *name, const char *title, const char *material, Float_t rmax, Float_t dz);  TUBE shape ""simplified"" constructor. ;  ;  TTUBE (const char *name, const char *title, const char *material, Float_t rmin, Float_t rmax, Float_t dz, Float_t aspect=1);  TUBE shape normal constructor. ;  ;  ~TTUBE () override;  TUBE shape default destructor. ;  ; Int_t DistancetoPrimitive (Int_t px, Int_t py) override;  Compute distance from point px,py to a TUBE. ;  ; virtual Float_t GetAspectRatio () const;  ; const TBuffer3D & GetBuffer3D (Int_t reqSections) const override;  Get buffer 3d. ;  ; virtual Float_t GetDz () const;  ; virtual Int_t GetNdiv () const;  ; virtual Int_t GetNumberOfDivisions () const;  ; virtual Float_t GetRmax () const;  ; virtual Float_t GetRmin () const;  ; TClass * IsA () const override;  ; virtual void SetAspectRatio (Float_t factor=1);  ; virtual void SetNumberOfDivisions (Int_",MatchSource.WIKI,doc/master/classTHYPE.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTHYPE.html
Security,hash,hash,"NVirtual_b);  ; void TransformPoints (Double_t *points, UInt_t NbPnts) const;  Transform points (LocalToMaster) ;  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; Bool_t IsSortable () const override;  ; void ls (Option_t *option="""") const override;  List TNamed name and title. ;  ; TNamed & operator= (const TNamed &rhs);  TNamed assignment operator. ;  ; void Print (Option_t *option="""") const override;  Print TNamed name and title. ;  ; virtual void SetNameTitle (const char *name, const char *title);  Set all the TNamed parameters (name and title). ;  ; virtual void SetTitle (const char *title="""");  Set the title of the TNamed. ;  ; virtual Int_t Sizeof () const;  Return size of the TNamed part of the TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely a",MatchSource.WIKI,doc/master/classTHYPE.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTHYPE.html
Usability,simpl,simplified,"cs » 3D Graphics » Basic 3D graphics. ; An hyperboloid (not implemented) ; It has 4 parameters:. name: name of the shape; title: shape's title; material: (see TMaterial); rmin: inner radius of the tube; rmax: outer radius of the tube; dz: half-length of the box along the z-axis; phi: stereo angle . Definition at line 28 of file THYPE.h. Public Member Functions;  THYPE ();  HYPE shape default constructor. ;  ;  THYPE (const char *name, const char *title, const char *material, Float_t rmin, Float_t rmax, Float_t dz, Float_t phi);  HYPE shape normal constructor. ;  ;  ~THYPE () override;  HYPE shape default destructor. ;  ; virtual Float_t GetPhi () const;  ; TClass * IsA () const override;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TTUBE;  TTUBE ();  TUBE shape default constructor. ;  ;  TTUBE (const char *name, const char *title, const char *material, Float_t rmax, Float_t dz);  TUBE shape ""simplified"" constructor. ;  ;  TTUBE (const char *name, const char *title, const char *material, Float_t rmin, Float_t rmax, Float_t dz, Float_t aspect=1);  TUBE shape normal constructor. ;  ;  ~TTUBE () override;  TUBE shape default destructor. ;  ; Int_t DistancetoPrimitive (Int_t px, Int_t py) override;  Compute distance from point px,py to a TUBE. ;  ; virtual Float_t GetAspectRatio () const;  ; const TBuffer3D & GetBuffer3D (Int_t reqSections) const override;  Get buffer 3d. ;  ; virtual Float_t GetDz () const;  ; virtual Int_t GetNdiv () const;  ; virtual Int_t GetNumberOfDivisions () const;  ; virtual Float_t GetRmax () const;  ; virtual Float_t GetRmin () const;  ; TClass * IsA () const override;  ; virtual void SetAspectRatio (Float_t factor=1);  ; virtual void SetNumberOfDivisions (Int_t ndiv);  Set number of divisions used to draw this tube. ;  ; void Sizeof3D () const override;  Return total X3D needed by TNode::ls (when called wi",MatchSource.WIKI,doc/master/classTHYPE.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTHYPE.html
Availability,error,error,"object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t ",MatchSource.WIKI,doc/master/classTIconBoxThumb.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTIconBoxThumb.html
Integrability,message,message,"object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t ",MatchSource.WIKI,doc/master/classTIconBoxThumb.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTIconBoxThumb.html
Modifiability,inherit,inherited,". ROOT: TIconBoxThumb Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Public Attributes |; List of all members ; TIconBoxThumb Class Reference. . Definition at line 238 of file TRootBrowserLite.cxx. Public Member Functions;  TIconBoxThumb (const char *name, const TGPicture *spic, const TGPicture *pic);  ; const char * GetName () const override;  Returns name of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class",MatchSource.WIKI,doc/master/classTIconBoxThumb.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTIconBoxThumb.html
Security,hash,hash,". ROOT: TIconBoxThumb Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Public Attributes |; List of all members ; TIconBoxThumb Class Reference. . Definition at line 238 of file TRootBrowserLite.cxx. Public Member Functions;  TIconBoxThumb (const char *name, const TGPicture *spic, const TGPicture *pic);  ; const char * GetName () const override;  Returns name of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class",MatchSource.WIKI,doc/master/classTIconBoxThumb.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTIconBoxThumb.html
Testability,log,logarithmic,"icture * ; spic, . const TGPicture * ; pic . ). inline . Definition at line 244 of file TRootBrowserLite.cxx. Member Function Documentation. ◆ GetName(). const char * TIconBoxThumb::GetName ; (; ); const. inlineoverridevirtual . Returns name of object. ; This default method returns the class name. Classes that give objects a name should override this method. ; Reimplemented from TObject.; Definition at line 250 of file TRootBrowserLite.cxx. ◆ Hash(). ULong_t TIconBoxThumb::Hash ; (; ); const. inlineoverridevirtual . Return hash value for this object. ; Note: If this routine is overloaded in a derived class, this derived class should also add ROOT::CallRecursiveRemoveIfNeeded(*this); ROOT::CallRecursiveRemoveIfNeededvoid CallRecursiveRemoveIfNeeded(TObject &obj)call RecursiveRemove for obj if gROOT is valid and obj.TestBit(kMustCleanup) is true.Definition TROOT.h:395; Otherwise, when RecursiveRemove is called (by ~TObject or example) for this type of object, the transversal of THashList and THashTable containers will will have to be done without call Hash (and hence be linear rather than logarithmic complexity). You will also see warnings like Error in <ROOT::Internal::TCheckHashRecursiveRemoveConsistency::CheckRecursiveRemove>: The class SomeName overrides TObject::Hash but does not call TROOT::RecursiveRemove in its destructor.; TIconBoxThumb::HashULong_t Hash() const overrideReturn hash value for this object.Definition TRootBrowserLite.cxx:249; TObjectMother of all ROOT objects.Definition TObject.h:41; TObject::Errorvirtual void Error(const char *method, const char *msgfmt,...) constIssue error message.Definition TObject.cxx:993; TROOT::RecursiveRemovevoid RecursiveRemove(TObject *obj) overrideRecursively remove this object from the list of Cleanups.Definition TROOT.cxx:2498. Reimplemented from TObject.; Definition at line 249 of file TRootBrowserLite.cxx. Member Data Documentation. ◆ fLarge. const TGPicture* TIconBoxThumb::fLarge. Definition at line 242 of file TR",MatchSource.WIKI,doc/master/classTIconBoxThumb.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTIconBoxThumb.html
Availability,error,error,"object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Return",MatchSource.WIKI,doc/master/classTIdleTimer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTIdleTimer.html
Integrability,message,message,"object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Return",MatchSource.WIKI,doc/master/classTIdleTimer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTIdleTimer.html
Modifiability,inherit,inherited,". ROOT: TIdleTimer Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; List of all members ; TIdleTimer Class Reference. . Definition at line 60 of file TApplication.cxx. Public Member Functions;  TIdleTimer (Long_t ms);  ; Bool_t Notify () override;  Notify handler. ;  ;  Public Member Functions inherited from TTimer;  TTimer (const char *command, Long_t milliSec, Bool_t mode=kTRUE);  Create timer that times out in ms milliseconds. ;  ;  TTimer (Long_t milliSec=0, Bool_t mode=kTRUE);  Create timer that times out in ms milliseconds. ;  ;  TTimer (TObject *obj, Long_t milliSec, Bool_t mode=kTRUE);  Create timer that times out in ms milliseconds. ;  ; virtual ~TTimer ();  ; void Add () override;  ; Bool_t CheckTimer (const TTime &now);  Check if timer timed out. ;  ; TTime GetAbsTime () const;  ; const char * GetCommand () const;  ; TObject * GetObject ();  ; TTime GetTime () const;  ; UInt_t GetTimerID ();  ; Bool_t HasTimedOut () const;  ; TClass * IsA () const override;  ; Bool_t IsAsync () const;  ; Bool_t IsInterruptingSyscalls () const;  ; Bool_t IsRunning ();  This function checks if the timer is running within gSystem (Has been started and did not finish yet). ;  ; Bool_t IsSync () const;  ; Bool_t Notify () override;  Notify when timer times out. ;  ; void Remove () override;  ; void Reset ();  Reset the timer. ;  ; void SetCommand (const char *command);  Set the interpreter command to be executed at time out. ;  ; void SetInterruptSyscalls (Bool_t set=kTRUE);  When the argument is true the a-synchronous timer (SIGALRM) signal handler is set so that interrupted syscalls will not be restarted by the kernel. ;  ; void SetObject (TObject *object);  Set the object to be notified at time out. ;  ; void SetTime (Long_t milliSec);  ; void SetTimerID (UInt_t id=0);  ; virtual void Start (Long_t milliSec=-1, Bool_t singleShot=kFALSE);  Starts the timer with a milliSec timeou",MatchSource.WIKI,doc/master/classTIdleTimer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTIdleTimer.html
Safety,timeout,timeout,"r * GetCommand () const;  ; TObject * GetObject ();  ; TTime GetTime () const;  ; UInt_t GetTimerID ();  ; Bool_t HasTimedOut () const;  ; TClass * IsA () const override;  ; Bool_t IsAsync () const;  ; Bool_t IsInterruptingSyscalls () const;  ; Bool_t IsRunning ();  This function checks if the timer is running within gSystem (Has been started and did not finish yet). ;  ; Bool_t IsSync () const;  ; Bool_t Notify () override;  Notify when timer times out. ;  ; void Remove () override;  ; void Reset ();  Reset the timer. ;  ; void SetCommand (const char *command);  Set the interpreter command to be executed at time out. ;  ; void SetInterruptSyscalls (Bool_t set=kTRUE);  When the argument is true the a-synchronous timer (SIGALRM) signal handler is set so that interrupted syscalls will not be restarted by the kernel. ;  ; void SetObject (TObject *object);  Set the object to be notified at time out. ;  ; void SetTime (Long_t milliSec);  ; void SetTimerID (UInt_t id=0);  ; virtual void Start (Long_t milliSec=-1, Bool_t singleShot=kFALSE);  Starts the timer with a milliSec timeout. ;  ; virtual void Stop ();  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void Timeout ();  ; virtual void TurnOff ();  Remove timer from system timer list. ;  ; virtual void TurnOn ();  Add the timer to the system timer list. ;  ;  Public Member Functions inherited from TSysEvtHandler;  TSysEvtHandler ();  ; virtual ~TSysEvtHandler ();  ; void Activate ();  Activate a system event handler. ;  ; virtual void Activated ();  ; virtual void Added ();  ; void DeActivate ();  De-activate a system event handler. ;  ; virtual void DeActivated ();  ; Bool_t IsActive () const;  ; virtual void Notified ();  ; virtual void Removed ();  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (co",MatchSource.WIKI,doc/master/classTIdleTimer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTIdleTimer.html
Security,hash,hash," Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Returns name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual const char * GetTitle () const;  Returns title of object. ;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; virtual ULong_t Hash () const;  Return hash value for this object. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns kTRUE if object inherits from class ""classname"". ;  ; virtual Bool_t InheritsFrom (const TClass *cl) const;  Returns kTRUE if object inherits from TClass cl. ;  ; virtual void Inspect () const;  Dump contents of this object in a graphics canvas. ;  ; void InvertBit (UInt_t f);  ; Bool_t IsDestructed () const;  IsDestructed. ;  ; virtual Bool_t IsEqual (const TObject *obj) const;  Default equal comparison (objects are equal if they have the same address in memory). ;  ; virtual Bool_t IsFolder () const;  Returns kTRUE in case object contains browsable objects (like containers or lists of other objects). ;  ; R__ALWAYS_INLINE Bool_t",MatchSource.WIKI,doc/master/classTIdleTimer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTIdleTimer.html
Availability,error,error,"object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Return",MatchSource.WIKI,doc/master/classTIdleTOTimer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTIdleTOTimer.html
Integrability,message,message,"object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Return",MatchSource.WIKI,doc/master/classTIdleTOTimer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTIdleTOTimer.html
Modifiability,inherit,inherited,". ROOT: TIdleTOTimer Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Private Attributes |; List of all members ; TIdleTOTimer Class Reference. . Definition at line 443 of file TProofServ.h. Public Member Functions;  TIdleTOTimer (TProofServ *p, Int_t delay);  ; Bool_t Notify () override;  Handle expiration of the idle timer. The session will just be terminated. ;  ;  Public Member Functions inherited from TTimer;  TTimer (const char *command, Long_t milliSec, Bool_t mode=kTRUE);  Create timer that times out in ms milliseconds. ;  ;  TTimer (Long_t milliSec=0, Bool_t mode=kTRUE);  Create timer that times out in ms milliseconds. ;  ;  TTimer (TObject *obj, Long_t milliSec, Bool_t mode=kTRUE);  Create timer that times out in ms milliseconds. ;  ; virtual ~TTimer ();  ; void Add () override;  ; Bool_t CheckTimer (const TTime &now);  Check if timer timed out. ;  ; TTime GetAbsTime () const;  ; const char * GetCommand () const;  ; TObject * GetObject ();  ; TTime GetTime () const;  ; UInt_t GetTimerID ();  ; Bool_t HasTimedOut () const;  ; TClass * IsA () const override;  ; Bool_t IsAsync () const;  ; Bool_t IsInterruptingSyscalls () const;  ; Bool_t IsRunning ();  This function checks if the timer is running within gSystem (Has been started and did not finish yet). ;  ; Bool_t IsSync () const;  ; Bool_t Notify () override;  Notify when timer times out. ;  ; void Remove () override;  ; void Reset ();  Reset the timer. ;  ; void SetCommand (const char *command);  Set the interpreter command to be executed at time out. ;  ; void SetInterruptSyscalls (Bool_t set=kTRUE);  When the argument is true the a-synchronous timer (SIGALRM) signal handler is set so that interrupted syscalls will not be restarted by the kernel. ;  ; void SetObject (TObject *object);  Set the object to be notified at time out. ;  ; void SetTime (Long_t milliSec);  ; void SetTimerID (UInt_t id=0);  ; virtual",MatchSource.WIKI,doc/master/classTIdleTOTimer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTIdleTOTimer.html
Safety,timeout,timeout,"r * GetCommand () const;  ; TObject * GetObject ();  ; TTime GetTime () const;  ; UInt_t GetTimerID ();  ; Bool_t HasTimedOut () const;  ; TClass * IsA () const override;  ; Bool_t IsAsync () const;  ; Bool_t IsInterruptingSyscalls () const;  ; Bool_t IsRunning ();  This function checks if the timer is running within gSystem (Has been started and did not finish yet). ;  ; Bool_t IsSync () const;  ; Bool_t Notify () override;  Notify when timer times out. ;  ; void Remove () override;  ; void Reset ();  Reset the timer. ;  ; void SetCommand (const char *command);  Set the interpreter command to be executed at time out. ;  ; void SetInterruptSyscalls (Bool_t set=kTRUE);  When the argument is true the a-synchronous timer (SIGALRM) signal handler is set so that interrupted syscalls will not be restarted by the kernel. ;  ; void SetObject (TObject *object);  Set the object to be notified at time out. ;  ; void SetTime (Long_t milliSec);  ; void SetTimerID (UInt_t id=0);  ; virtual void Start (Long_t milliSec=-1, Bool_t singleShot=kFALSE);  Starts the timer with a milliSec timeout. ;  ; virtual void Stop ();  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void Timeout ();  ; virtual void TurnOff ();  Remove timer from system timer list. ;  ; virtual void TurnOn ();  Add the timer to the system timer list. ;  ;  Public Member Functions inherited from TSysEvtHandler;  TSysEvtHandler ();  ; virtual ~TSysEvtHandler ();  ; void Activate ();  Activate a system event handler. ;  ; virtual void Activated ();  ; virtual void Added ();  ; void DeActivate ();  De-activate a system event handler. ;  ; virtual void DeActivated ();  ; Bool_t IsActive () const;  ; virtual void Notified ();  ; virtual void Removed ();  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (co",MatchSource.WIKI,doc/master/classTIdleTOTimer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTIdleTOTimer.html
Security,hash,hash," Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Returns name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual const char * GetTitle () const;  Returns title of object. ;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; virtual ULong_t Hash () const;  Return hash value for this object. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns kTRUE if object inherits from class ""classname"". ;  ; virtual Bool_t InheritsFrom (const TClass *cl) const;  Returns kTRUE if object inherits from TClass cl. ;  ; virtual void Inspect () const;  Dump contents of this object in a graphics canvas. ;  ; void InvertBit (UInt_t f);  ; Bool_t IsDestructed () const;  IsDestructed. ;  ; virtual Bool_t IsEqual (const TObject *obj) const;  Default equal comparison (objects are equal if they have the same address in memory). ;  ; virtual Bool_t IsFolder () const;  Returns kTRUE in case object contains browsable objects (like containers or lists of other objects). ;  ; R__ALWAYS_INLINE Bool_t",MatchSource.WIKI,doc/master/classTIdleTOTimer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTIdleTOTimer.html
Availability,error,error,"ject. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t ",MatchSource.WIKI,doc/master/classTImage.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTImage.html
Integrability,interface,interface,". ROOT: TImage Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Friends |; List of all members ; TImage Class ReferenceGraphics » 2D Graphics » Basic graphics. ; An abstract interface to image processing library. ; It allows for the reading and writing of images in different formats, several image manipulations (scaling, tiling, merging, etc.) and displaying in pads.; The concrete implementation of this class is done by the TASImage class. The methods are documented in that class. ; Definition at line 29 of file TImage.h. Public Types; enum  ECharType { kUTF8 = 0; , kChar = 1; , kUnicode = 4; };  ; enum  EColorChan { ;   kRedChan = (1ULL << ( 0 )); , kGreenChan = (1ULL << ( 1 )); , kBlueChan = (1ULL << ( 2 )); , kAlphaChan = (1ULL << ( 3 )); , ;   kAllChan = kRedChan | kGreenChan | kBlueChan | kAlphaChan. };  ; enum  ECoordMode { kCoordModeOrigin = 0; , kCoordModePrevious; };  ; enum  EImageFileTypes { ;   kXpm = 0; , kZCompressedXpm; , kGZCompressedXpm; , kPng; , ;   kJpeg; , kXcf; , kPpm; , kPnm; , ;   kBmp; , kIco; , kCur; , kGif; , ;   kTiff; , kXbm; , kFits; , kTga; , ;   kXml; , kUnknown; , kAnimGif. };  ; enum  EText3DType { ;   kPlain = 0; , kEmbossed; , kSunken; , kShadeAbove; , ;   kShadeBelow; , kEmbossedThick; , kSunkenThick; , kOutlineAbove; , ;   kOutlineBelow; , kOutlineFull; , k3DTypes. };  ; enum  ETileType { kStretch = 0; , kTile; , kStretchY; , kStretchX; };  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 ",MatchSource.WIKI,doc/master/classTImage.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTImage.html
Modifiability,inherit,inherited," are documented in that class. ; Definition at line 29 of file TImage.h. Public Types; enum  ECharType { kUTF8 = 0; , kChar = 1; , kUnicode = 4; };  ; enum  EColorChan { ;   kRedChan = (1ULL << ( 0 )); , kGreenChan = (1ULL << ( 1 )); , kBlueChan = (1ULL << ( 2 )); , kAlphaChan = (1ULL << ( 3 )); , ;   kAllChan = kRedChan | kGreenChan | kBlueChan | kAlphaChan. };  ; enum  ECoordMode { kCoordModeOrigin = 0; , kCoordModePrevious; };  ; enum  EImageFileTypes { ;   kXpm = 0; , kZCompressedXpm; , kGZCompressedXpm; , kPng; , ;   kJpeg; , kXcf; , kPpm; , kPnm; , ;   kBmp; , kIco; , kCur; , kGif; , ;   kTiff; , kXbm; , kFits; , kTga; , ;   kXml; , kUnknown; , kAnimGif. };  ; enum  EText3DType { ;   kPlain = 0; , kEmbossed; , kSunken; , kShadeAbove; , ;   kShadeBelow; , kEmbossedThick; , kSunkenThick; , kOutlineAbove; , ;   kOutlineBelow; , kOutlineFull; , k3DTypes. };  ; enum  ETileType { kStretch = 0; , kTile; , kStretchY; , kStretchX; };  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Public Types inherited from TAttImage; enum  EImageQuality { ;   kImgDefault = -1; , kImgPoor = 0; , kImgFast = 1; , kImgGood = 2; , ;   kImgBest = 3. };  . Public Member Functions;  TImage (const TImage &img);  ;  TImage (UInt_t, UInt_t);  ;  ~TImage () override;  ; virtual void Append (const TImage *, const char *=""+"", const char *=""#00000000"");  ; virtual void BeginPaint (Bool_t=kTRUE);  ; virtual void Beve",MatchSource.WIKI,doc/master/classTImage.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTImage.html
Security,hash,hash,"iteImage (const char *, EImageFileTypes=TImage::kUnknown);  ; virtual void Zoom (UInt_t, UInt_t, UInt_t, UInt_t);  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; TClass * IsA () const override;  ; Bool_t IsSortable () const override;  ; void ls (Option_t *option="""") const override;  List TNamed name and title. ;  ; TNamed & operator= (const TNamed &rhs);  TNamed assignment operator. ;  ; void Print (Option_t *option="""") const override;  Print TNamed name and title. ;  ; virtual void SetName (const char *name);  Set the name of the TNamed. ;  ; virtual void SetNameTitle (const char *name, const char *title);  Set all the TNamed parameters (name and title). ;  ; virtual void SetTitle (const char *title="""");  Set the title of the TNamed. ;  ; virtual Int_t Sizeof () const;  Return size of the TNamed part of the TObject. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;",MatchSource.WIKI,doc/master/classTImage.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTImage.html
Availability,error,error,"ject. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t ",MatchSource.WIKI,doc/master/classTImageDump.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTImageDump.html
Energy Efficiency,green,green,"Dump::GetStream ; (; ); const. inlineoverridevirtual . Reimplemented from TVirtualPS.; Definition at line 53 of file TImageDump.h. ◆ GetType(). Int_t TImageDump::GetType ; (; ); const. inlineoverridevirtual . Reimplemented from TVirtualPS.; Definition at line 55 of file TImageDump.h. ◆ IsA(). TClass * TImageDump::IsA ; (; ); const. inlineoverridevirtual . ReturnsTClass describing current object ; Reimplemented from TObject.; Definition at line 58 of file TImageDump.h. ◆ NewPage(). void TImageDump::NewPage ; (; ). overridevirtual . new page ; Implements TVirtualPS.; Definition at line 838 of file TImageDump.cxx. ◆ Open(). void TImageDump::Open ; (; const char * ; filename, . Int_t ; type = -111 . ). overridevirtual . Open a image file. ; Implements TVirtualPS.; Definition at line 82 of file TImageDump.cxx. ◆ SetColor(). void TImageDump::SetColor ; (; Float_t ; r, . Float_t ; g, . Float_t ; b . ). overridevirtual . Set color with its R G B components. . r: % of red in [0,1]; g: % of green in [0,1]; b: % of blue in [0,1] . Implements TVirtualPS.; Definition at line 981 of file TImageDump.cxx. ◆ SetType(). void TImageDump::SetType ; (; Int_t ; type = -111). inlineoverridevirtual . Reimplemented from TVirtualPS.; Definition at line 54 of file TImageDump.h. ◆ Streamer(). void TImageDump::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TObject. ; Reimplemented from TObject. ◆ StreamerNVirtual(). void TImageDump::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 58 of file TImageDump.h. ◆ Text() [1/2]. void TImageDump::Text ; (; Double_t ; x, . Double_t ; y, . const char * ; chars . ). overridevirtual . Draw text. . x: x position of the text; y: y position of the text . Implements TVirtualPS.; Definition at line 854 of file TImageDump.cxx. ◆ Text() [2/2]. void TImageDump::Text ; (; Double_t ; x, . Double_t ; y, . const wchar_t * ; chars . ). overridevirtual . Draw text. . x: x position of the text; y: y ",MatchSource.WIKI,doc/master/classTImageDump.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTImageDump.html
Integrability,interface,interface,"ributes |; List of all members ; TImageDump Class ReferenceGraphics » 2D Graphics » Graphics file output. ; Save canvas as an image (GIF, JPEG, PNG, XPM, TIFF etc.). ; Example: $ root -b; root [0] .x hsimple.C; root [1] c1->Print(""c1.gif"");; b#define b(i)Definition RSha256.hxx:100; c1return c1Definition legend1.C:41; hsimpleDefinition hsimple.py:1; TImageDump can be used in any mode (batch, interactive) as follows TCanvas *c1;; TImageDump *imgdump = new TImageDump(""test.png"");; c1->Paint();; imgdump->Close();; TCanvasThe Canvas class.Definition TCanvas.h:23; TImageDumpSave canvas as an image (GIF, JPEG, PNG, XPM, TIFF etc.).Definition TImageDump.h:22; TImageDump::TImageDumpTImageDump()Default constructor.Definition TImageDump.cxx:53; TImageDump::Closevoid Close(Option_t *opt="""") overrideClose a image file.Definition TImageDump.cxx:106. Definition at line 22 of file TImageDump.h. Public Member Functions;  TImageDump ();  Default constructor. ;  ;  TImageDump (const char *filename, Int_t type=-111);  Initialize batch image interface. ;  ;  ~TImageDump () override;  destructor ;  ; void CellArrayBegin (Int_t W, Int_t H, Double_t x1, Double_t x2, Double_t y1, Double_t y2) override;  cell array begin ;  ; void CellArrayEnd () override;  Cell array end. ;  ; void CellArrayFill (Int_t r, Int_t g, Int_t b) override;  Cell array fill. ;  ; void Close (Option_t *opt="""") override;  Close a image file. ;  ; void DrawBox (Double_t x1, Double_t y1, Double_t x2, Double_t y2) override;  Draw a Box. ;  ; void DrawFrame (Double_t xl, Double_t yl, Double_t xt, Double_t yt, Int_t mode, Int_t border, Int_t dark, Int_t light) override;  Draw a Frame around a box. ;  ; void DrawPolyMarker (Int_t n, Double_t *x, Double_t *y) override;  draw polymarker ;  ; void DrawPolyMarker (Int_t n, Float_t *x, Float_t *y) override;  not used ;  ; void DrawPS (Int_t n, Double_t *xw, Double_t *yw) override;  This function defines a path with xw and yw and draw it according the value of nn: ;  ; void DrawP",MatchSource.WIKI,doc/master/classTImageDump.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTImageDump.html
Modifiability,inherit,inherited," used ;  ; void DrawPS (Int_t n, Double_t *xw, Double_t *yw) override;  This function defines a path with xw and yw and draw it according the value of nn: ;  ; void DrawPS (Int_t n, Float_t *xw, Float_t *yw) override;  not used ;  ; TImage * GetImage () const;  ; void * GetStream () const override;  ; Int_t GetType () const override;  ; TClass * IsA () const override;  ; void NewPage () override;  new page ;  ; void Open (const char *filename, Int_t type=-111) override;  Open a image file. ;  ; void SetColor (Float_t r, Float_t g, Float_t b) override;  Set color with its R G B components. ;  ; void SetType (Int_t type=-111) override;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; void Text (Double_t x, Double_t y, const char *string) override;  Draw text. ;  ; void Text (Double_t x, Double_t y, const wchar_t *string) override;  Draw text. ;  ;  Public Member Functions inherited from TVirtualPS;  TVirtualPS ();  VirtualPS default constructor. ;  ;  TVirtualPS (const char *filename, Int_t type=-111);  VirtualPS constructor. ;  ; virtual ~TVirtualPS ();  VirtualPS destructor. ;  ; TClass * IsA () const override;  ; virtual void PrintFast (Int_t nch, const char *string="""");  Fast version of Print. ;  ; virtual void PrintRaw (Int_t len, const char *str);  Print a raw. ;  ; virtual void PrintStr (const char *string="""");  Output the string str in the output buffer. ;  ; virtual void SetStream (std::ofstream *os);  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void WriteInteger (Int_t i, Bool_t space=kTRUE);  Write one Integer to the file. ;  ; virtual void WriteReal (Float_t r, Bool_t space=kTRUE);  Write a Real number to the file. ;  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &nam",MatchSource.WIKI,doc/master/classTImageDump.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTImageDump.html
Security,hash,hash,"ger to the file. ;  ; virtual void WriteReal (Float_t r, Bool_t space=kTRUE);  Write a Real number to the file. ;  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; Bool_t IsSortable () const override;  ; void ls (Option_t *option="""") const override;  List TNamed name and title. ;  ; TNamed & operator= (const TNamed &rhs);  TNamed assignment operator. ;  ; void Print (Option_t *option="""") const override;  Print TNamed name and title. ;  ; virtual void SetName (const char *name);  Set the name of the TNamed. ;  ; virtual void SetNameTitle (const char *name, const char *title);  Set all the TNamed parameters (name and title). ;  ; virtual void SetTitle (const char *title="""");  Set the title of the TNamed. ;  ; virtual Int_t Sizeof () const;  Return size of the TNamed part of the TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this met",MatchSource.WIKI,doc/master/classTImageDump.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTImageDump.html
Testability,test,test,". ROOT: TImageDump Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; List of all members ; TImageDump Class ReferenceGraphics » 2D Graphics » Graphics file output. ; Save canvas as an image (GIF, JPEG, PNG, XPM, TIFF etc.). ; Example: $ root -b; root [0] .x hsimple.C; root [1] c1->Print(""c1.gif"");; b#define b(i)Definition RSha256.hxx:100; c1return c1Definition legend1.C:41; hsimpleDefinition hsimple.py:1; TImageDump can be used in any mode (batch, interactive) as follows TCanvas *c1;; TImageDump *imgdump = new TImageDump(""test.png"");; c1->Paint();; imgdump->Close();; TCanvasThe Canvas class.Definition TCanvas.h:23; TImageDumpSave canvas as an image (GIF, JPEG, PNG, XPM, TIFF etc.).Definition TImageDump.h:22; TImageDump::TImageDumpTImageDump()Default constructor.Definition TImageDump.cxx:53; TImageDump::Closevoid Close(Option_t *opt="""") overrideClose a image file.Definition TImageDump.cxx:106. Definition at line 22 of file TImageDump.h. Public Member Functions;  TImageDump ();  Default constructor. ;  ;  TImageDump (const char *filename, Int_t type=-111);  Initialize batch image interface. ;  ;  ~TImageDump () override;  destructor ;  ; void CellArrayBegin (Int_t W, Int_t H, Double_t x1, Double_t x2, Double_t y1, Double_t y2) override;  cell array begin ;  ; void CellArrayEnd () override;  Cell array end. ;  ; void CellArrayFill (Int_t r, Int_t g, Int_t b) override;  Cell array fill. ;  ; void Close (Option_t *opt="""") override;  Close a image file. ;  ; void DrawBox (Double_t x1, Double_t y1, Double_t x2, Double_t y2) override;  Draw a Box. ;  ; void DrawFrame (Double_t xl, Double_t yl, Double_t xt, Double_t yt, Int_t mode, Int_t border, Int_t dark, Int_t light) override;  Draw a Frame around a box. ;  ; void DrawPolyMarker (Int_t n, Double_t *x, Double_t *y) override;  draw polymarker",MatchSource.WIKI,doc/master/classTImageDump.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTImageDump.html
Availability,error,error,"object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Return",MatchSource.WIKI,doc/master/classTImagePalette.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTImagePalette.html
Energy Efficiency,allocate,allocated,". ROOT: TImagePalette Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Public Attributes |; List of all members ; TImagePalette Class ReferenceGraphics » 2D Graphics » Basic graphics. ; A class to define a conversion from pixel values to pixel color. ; A Palette is defined by some anchor points. Each anchor point has a value between 0 and 1 and a color. An image has to be normalized and the values between the anchor points are interpolated. All member variables are public and can be directly manipulated. In most cases the default operator will be used to create a TImagePalette. In this case the member arrays have to be allocated by an application and will be deleted in the destructor of this class.; We provide few predefined palettes:. gHistImagePalette - palette used in TH2::Draw(""col""); gWebImagePalette The web palette is a set of 216 colors that will not dither or shift on PCs or Macs. Browsers use this built-in palette when they need to render colors on monitors with only 256 colors (also called 8-bit color monitors). The 6x6x6 web palette provides very quick color index lookup and can be used for good quality conversion of images into 2-D histograms.; TImagePalette(Int_t ncolors, Int_t *colors) if ncolors <= 0 a default palette (see below) of 50 colors is defined. if ncolors == 1 && colors == 0, then a Rainbow Palette is created.; if ncolors > 50 and colors=0, the DeepSea palette is used. (see TStyle::CreateGradientColorTable for more details); if ncolors > 0 and colors = 0, the default palette is used with a maximum of ncolors.; The default palette defines:; index 0->9 : grey colors from light to dark grey; index 10->19 : ""brown"" colors; index 20->29 : ""blueish"" colors; index 30->39 : ""redish"" colors; index 40->49 : basic colors . Definition at line 33 of file TAttImage.h. Public Member Functions;  TImagePalette ();  Default const",MatchSource.WIKI,doc/master/classTImagePalette.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTImagePalette.html
Integrability,message,message,"object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Return",MatchSource.WIKI,doc/master/classTImagePalette.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTImagePalette.html
Modifiability,variab,variables,". ROOT: TImagePalette Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Public Attributes |; List of all members ; TImagePalette Class ReferenceGraphics » 2D Graphics » Basic graphics. ; A class to define a conversion from pixel values to pixel color. ; A Palette is defined by some anchor points. Each anchor point has a value between 0 and 1 and a color. An image has to be normalized and the values between the anchor points are interpolated. All member variables are public and can be directly manipulated. In most cases the default operator will be used to create a TImagePalette. In this case the member arrays have to be allocated by an application and will be deleted in the destructor of this class.; We provide few predefined palettes:. gHistImagePalette - palette used in TH2::Draw(""col""); gWebImagePalette The web palette is a set of 216 colors that will not dither or shift on PCs or Macs. Browsers use this built-in palette when they need to render colors on monitors with only 256 colors (also called 8-bit color monitors). The 6x6x6 web palette provides very quick color index lookup and can be used for good quality conversion of images into 2-D histograms.; TImagePalette(Int_t ncolors, Int_t *colors) if ncolors <= 0 a default palette (see below) of 50 colors is defined. if ncolors == 1 && colors == 0, then a Rainbow Palette is created.; if ncolors > 50 and colors=0, the DeepSea palette is used. (see TStyle::CreateGradientColorTable for more details); if ncolors > 0 and colors = 0, the default palette is used with a maximum of ncolors.; The default palette defines:; index 0->9 : grey colors from light to dark grey; index 10->19 : ""brown"" colors; index 20->29 : ""blueish"" colors; index 30->39 : ""redish"" colors; index 40->49 : basic colors . Definition at line 33 of file TAttImage.h. Public Member Functions;  TImagePalette ();  Default const",MatchSource.WIKI,doc/master/classTImagePalette.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTImagePalette.html
Security,hash,hash," Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Returns name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual const char * GetTitle () const;  Returns title of object. ;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; virtual ULong_t Hash () const;  Return hash value for this object. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns kTRUE if object inherits from class ""classname"". ;  ; virtual Bool_t InheritsFrom (const TClass *cl) const;  Returns kTRUE if object inherits from TClass cl. ;  ; virtual void Inspect () const;  Dump contents of this object in a graphics canvas. ;  ; void InvertBit (UInt_t f);  ; Bool_t IsDestructed () const;  IsDestructed. ;  ; virtual Bool_t IsEqual (const TObject *obj) const;  Default equal comparison (objects are equal if they have the same address in memory). ;  ; virtual Bool_t IsFolder () const;  Returns kTRUE in case object contains browsable objects (like containers or lists of other objects). ;  ; R__ALWAYS_INLINE Bool_t",MatchSource.WIKI,doc/master/classTImagePalette.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTImagePalette.html
Availability,error,error,"object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Return",MatchSource.WIKI,doc/master/classTImagePlugin.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTImagePlugin.html
Integrability,message,message,"object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Return",MatchSource.WIKI,doc/master/classTImagePlugin.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTImagePlugin.html
Modifiability,inherit,inherited,". ROOT: TImagePlugin Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Attributes |; List of all members ; TImagePlugin Class Referenceabstract. . Definition at line 22 of file TImagePlugin.h. Public Member Functions;  TImagePlugin (const char *ext);  ;  ~TImagePlugin () override;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; TClass * IsA () const override;  ; virtual unsigned char * ReadFile (const char *filename, UInt_t &w, UInt_t &h)=0;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual Bool_t WriteFile (const char *filename, unsigned char *argb, UInt_t w, UInt_t h)=0;  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *opti",MatchSource.WIKI,doc/master/classTImagePlugin.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTImagePlugin.html
Security,hash,hash,". ROOT: TImagePlugin Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Attributes |; List of all members ; TImagePlugin Class Referenceabstract. . Definition at line 22 of file TImagePlugin.h. Public Member Functions;  TImagePlugin (const char *ext);  ;  ~TImagePlugin () override;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; TClass * IsA () const override;  ; virtual unsigned char * ReadFile (const char *filename, UInt_t &w, UInt_t &h)=0;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual Bool_t WriteFile (const char *filename, unsigned char *argb, UInt_t w, UInt_t h)=0;  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *opti",MatchSource.WIKI,doc/master/classTImagePlugin.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTImagePlugin.html
Testability,log,logarithmic,"TImagePlugin::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t TImagePlugin::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 39 of file TImagePlugin.h. ◆ DeclFileName(). static const char * TImagePlugin::DeclFileName ; (; ). inlinestatic . ReturnsName of the file containing the class declaration ; Definition at line 39 of file TImagePlugin.h. ◆ Hash(). ULong_t TImagePlugin::Hash ; (; ); const. inlineoverridevirtual . Return hash value for this object. ; Note: If this routine is overloaded in a derived class, this derived class should also add ROOT::CallRecursiveRemoveIfNeeded(*this); ROOT::CallRecursiveRemoveIfNeededvoid CallRecursiveRemoveIfNeeded(TObject &obj)call RecursiveRemove for obj if gROOT is valid and obj.TestBit(kMustCleanup) is true.Definition TROOT.h:395; Otherwise, when RecursiveRemove is called (by ~TObject or example) for this type of object, the transversal of THashList and THashTable containers will will have to be done without call Hash (and hence be linear rather than logarithmic complexity). You will also see warnings like Error in <ROOT::Internal::TCheckHashRecursiveRemoveConsistency::CheckRecursiveRemove>: The class SomeName overrides TObject::Hash but does not call TROOT::RecursiveRemove in its destructor.; TImagePlugin::HashULong_t Hash() const overrideReturn hash value for this object.Definition TImagePlugin.h:37; TObjectMother of all ROOT objects.Definition TObject.h:41; TObject::Errorvirtual void Error(const char *method, const char *msgfmt,...) constIssue error message.Definition TObject.cxx:993; TROOT::RecursiveRemovevoid RecursiveRemove(TObject *obj) overrideRecursively remove this object from the list of Cleanups.Definition TROOT.cxx:2498. Reimplemented from TObject.; Definition at line 37 of file TImagePlugin.h. ◆ IsA(). TClass * TImagePlugin::IsA ; (; ); const. inlineoverridevirtual . ReturnsTClass describing current object ; Reimplem",MatchSource.WIKI,doc/master/classTImagePlugin.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTImagePlugin.html
Availability,error,error,"object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Return",MatchSource.WIKI,doc/master/classTInetAddress.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTInetAddress.html
Energy Efficiency,allocate,allocated,"n at line 158 of file TInetAddress.cxx. ◆ Class(). static TClass * TInetAddress::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * TInetAddress::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t TInetAddress::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 81 of file TInetAddress.h. ◆ DeclFileName(). static const char * TInetAddress::DeclFileName ; (; ). inlinestatic . ReturnsName of the file containing the class declaration ; Definition at line 81 of file TInetAddress.h. ◆ GetAddress(). UInt_t TInetAddress::GetAddress ; (; ); const. inline . Definition at line 68 of file TInetAddress.h. ◆ GetAddressBytes(). UChar_t * TInetAddress::GetAddressBytes ; (; ); const. Returns the raw IP address in host byte order. ; The highest order byte position is in addr[0]. To be prepared for 64-bit IP addresses an array of bytes is returned. User must delete allocated memory. ; Definition at line 84 of file TInetAddress.cxx. ◆ GetAddresses(). const AddressList_t & TInetAddress::GetAddresses ; (; ); const. inline . Definition at line 74 of file TInetAddress.h. ◆ GetAliases(). const AliasList_t & TInetAddress::GetAliases ; (; ); const. inline . Definition at line 75 of file TInetAddress.h. ◆ GetFamily(). Int_t TInetAddress::GetFamily ; (; ); const. inline . Definition at line 72 of file TInetAddress.h. ◆ GetHostAddress() [1/2]. const char * TInetAddress::GetHostAddress ; (; ); const. Returns the IP address string ""%d.%d.%d.%d"". ; Copy string immediately, it will be reused. ; Definition at line 113 of file TInetAddress.cxx. ◆ GetHostAddress() [2/2]. const char * TInetAddress::GetHostAddress ; (; UInt_t ; addr). static . Returns the IP address string ""%d.%d.%d.%d"", use it to convert alternative addresses obtained via GetAddresses(). ; Copy string immediately, it will be reused. Static function. ; Definition at line 101 of file TInetAddress.cxx",MatchSource.WIKI,doc/master/classTInetAddress.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTInetAddress.html
Integrability,message,message,"object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Return",MatchSource.WIKI,doc/master/classTInetAddress.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTInetAddress.html
Modifiability,inherit,inherited,". ROOT: TInetAddress Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Static Public Member Functions |; Private Member Functions |; Private Attributes |; Friends |; List of all members ; TInetAddress Class ReferenceCore ROOT classes » Base ROOT classes. ; This class represents an Internet Protocol (IP) address. ; Definition at line 36 of file TInetAddress.h. Public Types; typedef std::vector< UInt_t > AddressList_t;  ; typedef std::vector< TString > AliasList_t;  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  . Public Member Functions;  TInetAddress ();  Default ctor. Used in case of unknown host. Not a valid address. ;  ;  TInetAddress (const TInetAddress &adr);  TInetAddress copy ctor. ;  ; virtual ~TInetAddress ();  ; UInt_t GetAddress () const;  ; UChar_t * GetAddressBytes () const;  Returns the raw IP address in host byte order. ;  ; const AddressList_t & GetAddresses () const;  ; const AliasList_t & GetAliases () const;  ; Int_t GetFamily () const;  ; const char * GetHostAddress () const;  Returns the IP address string ""%d.%d.%d.%d"". ;  ; const char * GetHostName () const;  ; Int_t GetPort () const;  ; TClass * IsA () const override;  ; Bool_t IsValid () const;  ; TInetAddress & operator= (const TInetAddress &rhs);  TInetAddress assignment operator. ;  ; void Print (Op",MatchSource.WIKI,doc/master/classTInetAddress.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTInetAddress.html
Security,hash,hash," Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Returns name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual const char * GetTitle () const;  Returns title of object. ;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; virtual ULong_t Hash () const;  Return hash value for this object. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns kTRUE if object inherits from class ""classname"". ;  ; virtual Bool_t InheritsFrom (const TClass *cl) const;  Returns kTRUE if object inherits from TClass cl. ;  ; virtual void Inspect () const;  Dump contents of this object in a graphics canvas. ;  ; void InvertBit (UInt_t f);  ; Bool_t IsDestructed () const;  IsDestructed. ;  ; virtual Bool_t IsEqual (const TObject *obj) const;  Default equal comparison (objects are equal if they have the same address in memory). ;  ; virtual Bool_t IsFolder () const;  Returns kTRUE in case object contains browsable objects (like containers or lists of other objects). ;  ; R__ALWAYS_INLINE Bool_t",MatchSource.WIKI,doc/master/classTInetAddress.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTInetAddress.html
Availability,error,error,"object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Return",MatchSource.WIKI,doc/master/classTInsCharCom.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTInsCharCom.html
Integrability,message,message,"object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Return",MatchSource.WIKI,doc/master/classTInsCharCom.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTInsCharCom.html
Modifiability,inherit,inherited,". ROOT: TInsCharCom Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; List of all members ; TInsCharCom Class Reference. . Definition at line 95 of file TGTextEdit.cxx. Public Member Functions;  TInsCharCom (TGTextEdit *te, char ch);  ; Bool_t Notify () override;  This method must be overridden to handle object notification (the base implementation is no-op). ;  ;  Public Member Functions inherited from TGTextEditCommand;  TGTextEditCommand (TGTextEdit *te);  ; void SetPos (TGLongPosition pos);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass ",MatchSource.WIKI,doc/master/classTInsCharCom.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTInsCharCom.html
Performance,load,load,"TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  ;  Protected Attributes inherited from TGTextEditCommand; TGTextEdit * fEdit;  ; TGLongPosition fPos;  . Inheritance diagram for TInsCharCom:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ TInsCharCom(). TInsCharCom::TInsCharCom ; (; TGTextEdit * ; te, . char ; ch . ). inline . Definition at line 98 of file TGTextEdit.cxx. Member Function Documentation. ◆ Notify(). Bool_t TInsCharCom::Notify ; (; ). inlineoverridevirtual . This method must be overridden to handle object notification (the base implementation is no-op). ; Different objects in ROOT use the Notify method for different purposes, in coordination with other objects that call this method at the appropriate time.; For example, TLeaf uses it to load class information; TBranchRef to load contents of referenced branches TBranchRef; most notably, based on Notify, TChain implements a callback mechanism to inform interested parties when it switches to a new sub-tree. ; Reimplemented from TObject.; Definition at line 101 of file TGTextEdit.cxx. gui/gui/src/TGTextEdit.cxx. TInsCharCom. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:43:52 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,doc/master/classTInsCharCom.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTInsCharCom.html
Security,hash,hash," Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Returns name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual const char * GetTitle () const;  Returns title of object. ;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; virtual ULong_t Hash () const;  Return hash value for this object. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns kTRUE if object inherits from class ""classname"". ;  ; virtual Bool_t InheritsFrom (const TClass *cl) const;  Returns kTRUE if object inherits from TClass cl. ;  ; virtual void Inspect () const;  Dump contents of this object in a graphics canvas. ;  ; void InvertBit (UInt_t f);  ; virtual TClass * IsA () const;  ; Bool_t IsDestructed () const;  IsDestructed. ;  ; virtual Bool_t IsEqual (const TObject *obj) const;  Default equal comparison (objects are equal if they have the same address in memory). ;  ; virtual Bool_t IsFolder () const;  Returns kTRUE in case object contains browsable objects (like containers or lists of other obje",MatchSource.WIKI,doc/master/classTInsCharCom.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTInsCharCom.html
Availability,error,error,"r *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; Bool_t HasInconsiste",MatchSource.WIKI,doc/master/classTInspectCanvas.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTInspectCanvas.html
Deployability,update,update,"get ();  Used by friend class TCanvasImp. ;  ; void Draw (Option_t *option="""") override;  Draw a canvas. ;  ; TObject * DrawClone (Option_t *option="""") const override;  Draw a clone of this canvas A new canvas is created that is a clone of this canvas. ;  ; virtual TObject * DrawClonePad ();  Draw a clone of this canvas into the current pad In an interactive session, select the destination/current pad with the middle mouse button, then point to the canvas area to select the canvas context menu item DrawClonePad. ;  ; virtual void EditorBar ();  Get editor bar. ;  ; void EmbedInto (Int_t winid, Int_t ww, Int_t wh);  Embedded a canvas into a TRootEmbeddedCanvas. ;  ; void EnterLeave (TPad *prevSelPad, TObject *prevSelObj);  Generate kMouseEnter and kMouseLeave events depending on the previously selected object and the currently selected object. ;  ; void FeedbackMode (Bool_t set);  Turn rubberband feedback mode on or off. ;  ; void Flush ();  Flush canvas buffers. ;  ; void ForceUpdate ();  Force canvas update. ;  ; Bool_t GetAutoExec () const;  ; Int_t GetCanvasID () const override;  ; TCanvasImp * GetCanvasImp () const override;  ; TVirtualPadPainter * GetCanvasPainter ();  Access and (probably) creation of pad painter. ;  ; virtual void GetCanvasPar (Int_t &wtopx, Int_t &wtopy, UInt_t &ww, UInt_t &wh);  ; TObject * GetClickSelected () const;  ; TVirtualPad * GetClickSelectedPad () const;  ; TContextMenu * GetContextMenu () const;  ; const char * GetDISPLAY () const;  ; Int_t GetDoubleBuffer () const;  ; Int_t GetEvent () const override;  ; Int_t GetEventX () const override;  ; Int_t GetEventY () const override;  ; Color_t GetHighLightColor () const override;  ; TVirtualPad * GetPadSave () const override;  ; TObject * GetSelected () const override;  ; Option_t * GetSelectedOpt () const;  ; TVirtualPad * GetSelectedPad () const override;  ; Int_t GetSelectedX () const;  ; Int_t GetSelectedY () const;  ; Bool_t GetShowEditor () const;  ; Bool_t GetShowEventStatus () c",MatchSource.WIKI,doc/master/classTInspectCanvas.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTInspectCanvas.html
Integrability,depend,depending,"a new canvas at a random position. ;  ; void Delete (Option_t *="""") override;  Delete this object. ;  ; void DeleteCanvasPainter ();  assert on IsBatch() == false? ;  ; void Destructor ();  Actual canvas destructor. ;  ; void DisconnectWidget ();  Used by friend class TCanvasImp. ;  ; void Draw (Option_t *option="""") override;  Draw a canvas. ;  ; TObject * DrawClone (Option_t *option="""") const override;  Draw a clone of this canvas A new canvas is created that is a clone of this canvas. ;  ; virtual TObject * DrawClonePad ();  Draw a clone of this canvas into the current pad In an interactive session, select the destination/current pad with the middle mouse button, then point to the canvas area to select the canvas context menu item DrawClonePad. ;  ; virtual void EditorBar ();  Get editor bar. ;  ; void EmbedInto (Int_t winid, Int_t ww, Int_t wh);  Embedded a canvas into a TRootEmbeddedCanvas. ;  ; void EnterLeave (TPad *prevSelPad, TObject *prevSelObj);  Generate kMouseEnter and kMouseLeave events depending on the previously selected object and the currently selected object. ;  ; void FeedbackMode (Bool_t set);  Turn rubberband feedback mode on or off. ;  ; void Flush ();  Flush canvas buffers. ;  ; void ForceUpdate ();  Force canvas update. ;  ; Bool_t GetAutoExec () const;  ; Int_t GetCanvasID () const override;  ; TCanvasImp * GetCanvasImp () const override;  ; TVirtualPadPainter * GetCanvasPainter ();  Access and (probably) creation of pad painter. ;  ; virtual void GetCanvasPar (Int_t &wtopx, Int_t &wtopy, UInt_t &ww, UInt_t &wh);  ; TObject * GetClickSelected () const;  ; TVirtualPad * GetClickSelectedPad () const;  ; TContextMenu * GetContextMenu () const;  ; const char * GetDISPLAY () const;  ; Int_t GetDoubleBuffer () const;  ; Int_t GetEvent () const override;  ; Int_t GetEventX () const override;  ; Int_t GetEventY () const override;  ; Color_t GetHighLightColor () const override;  ; TVirtualPad * GetPadSave () const override;  ; TObject * GetSelected (",MatchSource.WIKI,doc/master/classTInspectCanvas.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTInspectCanvas.html
Modifiability,inherit,inherited,"; TButton * GetBackward () const;  ; TObject * GetCurObject () const;  ; TButton * GetForward () const;  ; TList * GetObjects () const;  ; virtual void InspectObject (TObject *obj);  Dump contents of obj in a graphics canvas. ;  ; TClass * IsA () const override;  ; void RecursiveRemove (TObject *obj) override;  Recursively remove object from the list of objects. ;  ; void SetGrid (Int_t valuex=1, Int_t valuey=1) override;  ; void SetGridx (Int_t value=1) override;  ; void SetGridy (Int_t value=1) override;  ; void SetLogx (Int_t value=1) override;  ; void SetLogy (Int_t value=1) override;  ; void SetLogz (Int_t value=1) override;  ; void SetTickx (Int_t value=1) override;  ; void SetTicky (Int_t value=1) override;  ; void Streamer (TBuffer &) override;  Stream a class object. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; void x3d (Option_t *option="""") override;  Deprecated: use TPad::GetViewer3D() instead. ;  ;  Public Member Functions inherited from TCanvas;  TCanvas (Bool_t build=kTRUE);  Canvas default constructor. ;  ;  TCanvas (const char *name, const char *title, Int_t wtopx, Int_t wtopy, Int_t ww, Int_t wh);  Create a new canvas. ;  ;  TCanvas (const char *name, const char *title, Int_t ww, Int_t wh);  Create a new canvas at a random position. ;  ;  TCanvas (const char *name, const char *title="""", Int_t form=1);  Create a new canvas with a predefined size form. ;  ;  TCanvas (const char *name, Int_t ww, Int_t wh, Int_t winid);  Create an embedded canvas, i.e. ;  ;  ~TCanvas () override;  Canvas destructor. ;  ; void Browse (TBrowser *b) override;  Browse. ;  ; TVirtualPad * cd (Int_t subpadnumber=0) override;  Set current canvas & pad. ;  ; void Clear (Option_t *option="""") override;  Remove all primitives from the canvas. ;  ; virtual void Cleared (TVirtualPad *pad);  Emit pad Cleared signal. ;  ; void ClearPadSave ();  ; void Close (Option_t *option="""") override;  Close canvas. ;  ; void Closed () override;  Emit Closed signal. ;  ; v",MatchSource.WIKI,doc/master/classTInspectCanvas.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTInspectCanvas.html
Security,hash,hash,";  ; Double_t GetUymin () const override;  Returns the minimum y-coordinate value visible on the pad. If log axis the returned value is in decades. ;  ; TView * GetView () const override;  ; TObject * GetView3D () const override;  ; TVirtualViewer3D * GetViewer3D (Option_t *type="""") override;  Create/obtain handle to 3D viewer. ;  ; TVirtualPad * GetVirtCanvas () const override;  Get virtual canvas. ;  ; UInt_t GetWh () const override;  Get Wh. ;  ; Double_t GetWNDC () const override;  Get width of pad along X in Normalized Coordinates (NDC) ;  ; UInt_t GetWw () const override;  Get Ww. ;  ; Double_t GetX1 () const override;  ; Double_t GetX2 () const override;  ; Double_t GetXlowNDC () const override;  ; Double_t GetY1 () const override;  ; Double_t GetY2 () const override;  ; Double_t GetYlowNDC () const override;  ; Bool_t HasCrosshair () const override;  Return kTRUE if the crosshair has been activated (via SetCrosshair). ;  ; Bool_t HasFixedAspectRatio () const override;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; Bool_t HasViewer3D () const override;  ; void HighLight (Color_t col=kRed, Bool_t set=kTRUE) override;  Highlight pad. ;  ; Int_t IncrementPaletteColor (Int_t i, TString opt) override;  Increment (i==1) or set (i>1) the number of autocolor in the pad. ;  ; TClass * IsA () const override;  ; Bool_t IsBatch () const override;  Is pad in batch mode ? ;  ; Bool_t IsEditable () const override;  ; Bool_t IsFolder () const override;  Returns kTRUE in case object contains browsable objects (like containers or lists of other objects). ;  ; Bool_t IsModified () const override;  ; Bool_t IsRetained () const override;  Is pad retained ? ;  ; Bool_t IsVertical () const override;  ; Bool_t IsWeb () const override;  Is web ? ;  ; void ls (Option_t *option="""") const override;  List all primitives in pad. ;  ; void Modified (Bool_t flag=true) override;  Mark pad modified Will be repainted when TCanvas::Update() will be called next time.",MatchSource.WIKI,doc/master/classTInspectCanvas.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTInspectCanvas.html
Testability,assert,assert,"nvas destructor. ;  ; void Browse (TBrowser *b) override;  Browse. ;  ; TVirtualPad * cd (Int_t subpadnumber=0) override;  Set current canvas & pad. ;  ; void Clear (Option_t *option="""") override;  Remove all primitives from the canvas. ;  ; virtual void Cleared (TVirtualPad *pad);  Emit pad Cleared signal. ;  ; void ClearPadSave ();  ; void Close (Option_t *option="""") override;  Close canvas. ;  ; void Closed () override;  Emit Closed signal. ;  ; void Constructor ();  Canvas default constructor. ;  ; void Constructor (const char *name, const char *title, Int_t form);  Create a new canvas with a predefined size form. ;  ; void Constructor (const char *name, const char *title, Int_t wtopx, Int_t wtopy, Int_t ww, Int_t wh);  Create a new canvas. ;  ; void Constructor (const char *name, const char *title, Int_t ww, Int_t wh);  Create a new canvas at a random position. ;  ; void Delete (Option_t *="""") override;  Delete this object. ;  ; void DeleteCanvasPainter ();  assert on IsBatch() == false? ;  ; void Destructor ();  Actual canvas destructor. ;  ; void DisconnectWidget ();  Used by friend class TCanvasImp. ;  ; void Draw (Option_t *option="""") override;  Draw a canvas. ;  ; TObject * DrawClone (Option_t *option="""") const override;  Draw a clone of this canvas A new canvas is created that is a clone of this canvas. ;  ; virtual TObject * DrawClonePad ();  Draw a clone of this canvas into the current pad In an interactive session, select the destination/current pad with the middle mouse button, then point to the canvas area to select the canvas context menu item DrawClonePad. ;  ; virtual void EditorBar ();  Get editor bar. ;  ; void EmbedInto (Int_t winid, Int_t ww, Int_t wh);  Embedded a canvas into a TRootEmbeddedCanvas. ;  ; void EnterLeave (TPad *prevSelPad, TObject *prevSelObj);  Generate kMouseEnter and kMouseLeave events depending on the previously selected object and the currently selected object. ;  ; void FeedbackMode (Bool_t set);  Turn rubberband feedback ",MatchSource.WIKI,doc/master/classTInspectCanvas.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTInspectCanvas.html
Usability,feedback,feedback,"  assert on IsBatch() == false? ;  ; void Destructor ();  Actual canvas destructor. ;  ; void DisconnectWidget ();  Used by friend class TCanvasImp. ;  ; void Draw (Option_t *option="""") override;  Draw a canvas. ;  ; TObject * DrawClone (Option_t *option="""") const override;  Draw a clone of this canvas A new canvas is created that is a clone of this canvas. ;  ; virtual TObject * DrawClonePad ();  Draw a clone of this canvas into the current pad In an interactive session, select the destination/current pad with the middle mouse button, then point to the canvas area to select the canvas context menu item DrawClonePad. ;  ; virtual void EditorBar ();  Get editor bar. ;  ; void EmbedInto (Int_t winid, Int_t ww, Int_t wh);  Embedded a canvas into a TRootEmbeddedCanvas. ;  ; void EnterLeave (TPad *prevSelPad, TObject *prevSelObj);  Generate kMouseEnter and kMouseLeave events depending on the previously selected object and the currently selected object. ;  ; void FeedbackMode (Bool_t set);  Turn rubberband feedback mode on or off. ;  ; void Flush ();  Flush canvas buffers. ;  ; void ForceUpdate ();  Force canvas update. ;  ; Bool_t GetAutoExec () const;  ; Int_t GetCanvasID () const override;  ; TCanvasImp * GetCanvasImp () const override;  ; TVirtualPadPainter * GetCanvasPainter ();  Access and (probably) creation of pad painter. ;  ; virtual void GetCanvasPar (Int_t &wtopx, Int_t &wtopy, UInt_t &ww, UInt_t &wh);  ; TObject * GetClickSelected () const;  ; TVirtualPad * GetClickSelectedPad () const;  ; TContextMenu * GetContextMenu () const;  ; const char * GetDISPLAY () const;  ; Int_t GetDoubleBuffer () const;  ; Int_t GetEvent () const override;  ; Int_t GetEventX () const override;  ; Int_t GetEventY () const override;  ; Color_t GetHighLightColor () const override;  ; TVirtualPad * GetPadSave () const override;  ; TObject * GetSelected () const override;  ; Option_t * GetSelectedOpt () const;  ; TVirtualPad * GetSelectedPad () const override;  ; Int_t GetSelectedX () ",MatchSource.WIKI,doc/master/classTInspectCanvas.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTInspectCanvas.html
Availability,error,error,"object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Return",MatchSource.WIKI,doc/master/classTInspectorObject.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTInspectorObject.html
Integrability,wrap,wrap,". ROOT: TInspectorObject Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Private Attributes |; List of all members ; TInspectorObject Class ReferenceGraphics » 2D Graphics » Graphics pad. ; This class is designed to wrap a Foreign object in order to inject it into the Browse sub-system. ; Definition at line 36 of file TInspectCanvas.cxx. Public Member Functions;  TInspectorObject (void *obj, TClass *cl);  ;  ~TInspectorObject () override;  ; void * GetObject () const;  ; void Inspect () const override;  Dump contents of this object in a graphics canvas. ;  ; TClass * IsA () const override;  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual ",MatchSource.WIKI,doc/master/classTInspectorObject.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTInspectorObject.html
Modifiability,inherit,inherited,". ROOT: TInspectorObject Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Private Attributes |; List of all members ; TInspectorObject Class ReferenceGraphics » 2D Graphics » Graphics pad. ; This class is designed to wrap a Foreign object in order to inject it into the Browse sub-system. ; Definition at line 36 of file TInspectCanvas.cxx. Public Member Functions;  TInspectorObject (void *obj, TClass *cl);  ;  ~TInspectorObject () override;  ; void * GetObject () const;  ; void Inspect () const override;  Dump contents of this object in a graphics canvas. ;  ; TClass * IsA () const override;  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual ",MatchSource.WIKI,doc/master/classTInspectorObject.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTInspectorObject.html
Security,inject,inject,". ROOT: TInspectorObject Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Private Attributes |; List of all members ; TInspectorObject Class ReferenceGraphics » 2D Graphics » Graphics pad. ; This class is designed to wrap a Foreign object in order to inject it into the Browse sub-system. ; Definition at line 36 of file TInspectCanvas.cxx. Public Member Functions;  TInspectorObject (void *obj, TClass *cl);  ;  ~TInspectorObject () override;  ; void * GetObject () const;  ; void Inspect () const override;  Dump contents of this object in a graphics canvas. ;  ; TClass * IsA () const override;  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual ",MatchSource.WIKI,doc/master/classTInspectorObject.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTInspectorObject.html
Availability,error,error,"object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Return",MatchSource.WIKI,doc/master/classTInsTextCom.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTInsTextCom.html
Integrability,message,message,"object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Return",MatchSource.WIKI,doc/master/classTInsTextCom.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTInsTextCom.html
Modifiability,inherit,inherited,". ROOT: TInsTextCom Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Public Attributes |; Private Attributes |; List of all members ; TInsTextCom Class Reference. . Definition at line 154 of file TGTextEdit.cxx. Public Member Functions;  TInsTextCom (TGTextEdit *te);  ; Bool_t Notify () override;  This method must be overridden to handle object notification (the base implementation is no-op). ;  ; void SetEndPos (TGLongPosition end);  ;  Public Member Functions inherited from TGTextEditCommand;  TGTextEditCommand (TGTextEdit *te);  ; void SetPos (TGLongPosition pos);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *opt",MatchSource.WIKI,doc/master/classTInsTextCom.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTInsTextCom.html
Performance,load,load,"et destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  ;  Protected Attributes inherited from TGTextEditCommand; TGTextEdit * fEdit;  ; TGLongPosition fPos;  . Inheritance diagram for TInsTextCom:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ TInsTextCom(). TInsTextCom::TInsTextCom ; (; TGTextEdit * ; te). inline . Definition at line 161 of file TGTextEdit.cxx. Member Function Documentation. ◆ Notify(). Bool_t TInsTextCom::Notify ; (; ). inlineoverridevirtual . This method must be overridden to handle object notification (the base implementation is no-op). ; Different objects in ROOT use the Notify method for different purposes, in coordination with other objects that call this method at the appropriate time.; For example, TLeaf uses it to load class information; TBranchRef to load contents of referenced branches TBranchRef; most notably, based on Notify, TChain implements a callback mechanism to inform interested parties when it switches to a new sub-tree. ; Reimplemented from TObject.; Definition at line 168 of file TGTextEdit.cxx. ◆ SetEndPos(). void TInsTextCom::SetEndPos ; (; TGLongPosition ; end). inline . Definition at line 164 of file TGTextEdit.cxx. Member Data Documentation. ◆ fChar. char TInsTextCom::fChar. Definition at line 159 of file TGTextEdit.cxx. ◆ fEndPos. TGLongPosition TInsTextCom::fEndPos. private . Definition at line 156 of file TGTextEdit.cxx. gui/gui/src/TGTextEdit.cxx. TInsTextCom. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:43:52 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,doc/master/classTInsTextCom.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTInsTextCom.html
Security,hash,hash," Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Returns name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual const char * GetTitle () const;  Returns title of object. ;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; virtual ULong_t Hash () const;  Return hash value for this object. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns kTRUE if object inherits from class ""classname"". ;  ; virtual Bool_t InheritsFrom (const TClass *cl) const;  Returns kTRUE if object inherits from TClass cl. ;  ; virtual void Inspect () const;  Dump contents of this object in a graphics canvas. ;  ; void InvertBit (UInt_t f);  ; virtual TClass * IsA () const;  ; Bool_t IsDestructed () const;  IsDestructed. ;  ; virtual Bool_t IsEqual (const TObject *obj) const;  Default equal comparison (objects are equal if they have the same address in memory). ;  ; virtual Bool_t IsFolder () const;  Returns kTRUE in case object contains browsable objects (like containers or lists of other obje",MatchSource.WIKI,doc/master/classTInsTextCom.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTInsTextCom.html
Availability,error,error,"erpure virtual; BaseClassInfo_ClassInfo(BaseClassInfo_t *) const =0TInterpreterpure virtual; BaseClassInfo_Delete(BaseClassInfo_t *) constTInterpreterinlinevirtual; BaseClassInfo_Factory(ClassInfo_t *) constTInterpreterinlinevirtual; BaseClassInfo_Factory(ClassInfo_t *, ClassInfo_t *) constTInterpreterinlinevirtual; BaseClassInfo_FullName(BaseClassInfo_t *) constTInterpreterinlinevirtual; BaseClassInfo_Name(BaseClassInfo_t *) constTInterpreterinlinevirtual; BaseClassInfo_Next(BaseClassInfo_t *) constTInterpreterinlinevirtual; BaseClassInfo_Next(BaseClassInfo_t *, int) constTInterpreterinlinevirtual; BaseClassInfo_Offset(BaseClassInfo_t *, void *=nullptr, bool=true) constTInterpreterinlinevirtual; BaseClassInfo_Property(BaseClassInfo_t *) constTInterpreterinlinevirtual; BaseClassInfo_Tagnum(BaseClassInfo_t *) constTInterpreterinlinevirtual; BaseClassInfo_TmpltName(BaseClassInfo_t *) constTInterpreterinlinevirtual; Browse(TBrowser *b)TObjectvirtual; Calc(const char *line, EErrorCode *error=nullptr)=0TInterpreterpure virtual; CallFunc_Delete(CallFunc_t *) constTInterpreterinlinevirtual; CallFunc_Exec(CallFunc_t *, void *) constTInterpreterinlinevirtual; CallFunc_Exec(CallFunc_t *, void *, TInterpreterValue &) constTInterpreterinlinevirtual; CallFunc_ExecDouble(CallFunc_t *, void *) constTInterpreterinlinevirtual; CallFunc_ExecInt(CallFunc_t *, void *) constTInterpreterinlinevirtual; CallFunc_ExecInt64(CallFunc_t *, void *) constTInterpreterinlinevirtual; CallFunc_ExecWithArgsAndReturn(CallFunc_t *, void *, const void *[]=nullptr, int=0, void *=nullptr) constTInterpreterinlinevirtual; CallFunc_ExecWithReturn(CallFunc_t *, void *, void *) constTInterpreterinlinevirtual; CallFunc_Factory() constTInterpreterinlinevirtual; CallFunc_FactoryCopy(CallFunc_t *) constTInterpreterinlinevirtual; CallFunc_FactoryMethod(CallFunc_t *) constTInterpreterinlinevirtual; CallFunc_GetWrapperCode(CallFunc_t *func) const =0TInterpreterpure virtual; CallFunc_IFacePtr(CallFunc_t *) constTInter",MatchSource.WIKI,doc/master/classTInterpreter-members.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTInterpreter-members.html
Modifiability,inherit,inherited,". ROOT: Member List. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. TInterpreter Member List. This is the complete list of members for TInterpreter, including all inherited members. AbstractMethod(const char *method) constTObject; AddAvailableIndentifiers(TSeqCollection &)=0TInterpreterpure virtual; AddIncludePath(const char *path)=0TInterpreterpure virtual; AddToTObjectTable(TObject *)TObjectprivatestatic; AppendPad(Option_t *option="""")TObjectvirtual; AutoLoad(const char *classname, Bool_t knowDictNotLoaded=kFALSE)=0TInterpreterpure virtual; AutoLoad(const std::type_info &typeinfo, Bool_t knowDictNotLoaded=kFALSE)=0TInterpreterpure virtual; AutoLoadCallBack_t typedefTInterpreter; AutoParse(const char *cls)=0TInterpreterpure virtual; BaseClassInfo_ClassInfo(BaseClassInfo_t *) const =0TInterpreterpure virtual; BaseClassInfo_Delete(BaseClassInfo_t *) constTInterpreterinlinevirtual; BaseClassInfo_Factory(ClassInfo_t *) constTInterpreterinlinevirtual; BaseClassInfo_Factory(ClassInfo_t *, ClassInfo_t *) constTInterpreterinlinevirtual; BaseClassInfo_FullName(BaseClassInfo_t *) constTInterpreterinlinevirtual; BaseClassInfo_Name(BaseClassInfo_t *) constTInterpreterinlinevirtual; BaseClassInfo_Next(BaseClassInfo_t *) constTInterpreterinlinevirtual; BaseClassInfo_Next(BaseClassInfo_t *, int) constTInterpreterinlinevirtual; BaseClassInfo_Offset(BaseClassInfo_t *, void *=nullptr, bool=true) constTInterpreterinlinevirtual; BaseClassInfo_Property(BaseClassInfo_t *) constTInterpreterinlinevirtual; BaseClassInfo_Tagnum(BaseClassInfo_t *) constTInterpreterinlinevirtual; BaseClassInfo_TmpltName(BaseClassInfo_t *) constTInterpreterinlinevirtual; Browse(TBrowser *b)TObjectvirtual; Calc(const char *line, EErrorCode *error=nullptr)=0TInterpreterpure virtual; CallFunc_Delete(CallFunc_t *) constTInterpreterinlinevirtual; CallFunc_Exec(CallFunc_t *, void *) constTInterpreterinlinevirtual; CallFunc_Exec(CallFunc_t *, void *, TInterpreterValue &) constTInterpr",MatchSource.WIKI,doc/master/classTInterpreter-members.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTInterpreter-members.html
Performance,load,load,"*, TString &name) const =0TInterpreterpure virtual; FuncTempInfo_Property(FuncTempInfo_t *) const =0TInterpreterpure virtual; FuncTempInfo_TemplateMinReqArgs(FuncTempInfo_t *) const =0TInterpreterpure virtual; FuncTempInfo_TemplateNargs(FuncTempInfo_t *) const =0TInterpreterpure virtual; FuncTempInfo_Title(FuncTempInfo_t *, TString &title) const =0TInterpreterpure virtual; FunctionDeclId_IsMethod(DeclId_t) constTInterpreterinlinevirtual; fUniqueIDTObjectprivate; FwdDeclArgsToKeepCollection_t typedefTInterpreter; GenerateDictionary(const char *classes, const char *includes=nullptr, const char *options=nullptr)=0TInterpreterpure virtual; GenerateTClass(const char *classname, Bool_t emulation, Bool_t silent=kFALSE)=0TInterpreterpure virtual; GenerateTClass(ClassInfo_t *classinfo, Bool_t silent=kFALSE)=0TInterpreterpure virtual; GenericError(const char *) constTInterpreterinlinevirtual; GetAutoLoadCallBack() constTInterpreterinlinevirtual; GetClass(const std::type_info &typeinfo, Bool_t load) const =0TInterpreterpure virtual; GetClassSharedLibs(const char *cls, bool skipCore=true)=0TInterpreterpure virtual; GetCurrentMacroName() constTInterpreterinlinevirtual; GetDataMember(ClassInfo_t *cl, const char *name) const =0TInterpreterpure virtual; GetDataMemberAtAddr(const void *addr) const =0TInterpreterpure virtual; GetDataMemberWithValue(const void *ptrvalue) const =0TInterpreterpure virtual; GetDeclId(CallFunc_t *info) const =0TInterpreterpure virtual; GetDeclId(ClassInfo_t *info) const =0TInterpreterpure virtual; GetDeclId(DataMemberInfo_t *info) const =0TInterpreterpure virtual; GetDeclId(FuncTempInfo_t *info) const =0TInterpreterpure virtual; GetDeclId(MethodInfo_t *info) const =0TInterpreterpure virtual; GetDeclId(TypedefInfo_t *info) const =0TInterpreterpure virtual; GetDrawOption() constTObjectvirtual; GetDtorOnly()TObjectstatic; GetEnum(TClass *cl, const char *name) const =0TInterpreterpure virtual; GetExecByteCode() constTInterpreterinlinevirtual; GetExitCode() con",MatchSource.WIKI,doc/master/classTInterpreter-members.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTInterpreter-members.html
Availability,error,error,"SE)=0;  ; virtual Int_t AutoParse (const char *cls)=0;  ; virtual ClassInfo_t * BaseClassInfo_ClassInfo (BaseClassInfo_t *) const =0;  ; virtual void BaseClassInfo_Delete (BaseClassInfo_t *) const;  ; virtual BaseClassInfo_t * BaseClassInfo_Factory (ClassInfo_t *) const;  ; virtual BaseClassInfo_t * BaseClassInfo_Factory (ClassInfo_t *, ClassInfo_t *) const;  ; virtual const char * BaseClassInfo_FullName (BaseClassInfo_t *) const;  ; virtual const char * BaseClassInfo_Name (BaseClassInfo_t *) const;  ; virtual int BaseClassInfo_Next (BaseClassInfo_t *) const;  ; virtual int BaseClassInfo_Next (BaseClassInfo_t *, int) const;  ; virtual Longptr_t BaseClassInfo_Offset (BaseClassInfo_t *, void *=nullptr, bool=true) const;  ; virtual Long_t BaseClassInfo_Property (BaseClassInfo_t *) const;  ; virtual Longptr_t BaseClassInfo_Tagnum (BaseClassInfo_t *) const;  ; virtual const char * BaseClassInfo_TmpltName (BaseClassInfo_t *) const;  ; virtual Longptr_t Calc (const char *line, EErrorCode *error=nullptr)=0;  ; virtual void CallFunc_Delete (CallFunc_t *) const;  ; virtual void CallFunc_Exec (CallFunc_t *, void *) const;  ; virtual void CallFunc_Exec (CallFunc_t *, void *, TInterpreterValue &) const;  ; virtual Double_t CallFunc_ExecDouble (CallFunc_t *, void *) const;  ; virtual Longptr_t CallFunc_ExecInt (CallFunc_t *, void *) const;  ; virtual Long64_t CallFunc_ExecInt64 (CallFunc_t *, void *) const;  ; virtual void CallFunc_ExecWithArgsAndReturn (CallFunc_t *, void *, const void *[]=nullptr, int=0, void *=nullptr) const;  ; virtual void CallFunc_ExecWithReturn (CallFunc_t *, void *, void *) const;  ; virtual CallFunc_t * CallFunc_Factory () const;  ; virtual CallFunc_t * CallFunc_FactoryCopy (CallFunc_t *) const;  ; virtual MethodInfo_t * CallFunc_FactoryMethod (CallFunc_t *) const;  ; virtual std::string CallFunc_GetWrapperCode (CallFunc_t *func) const =0;  ; virtual CallFuncIFacePtr_t CallFunc_IFacePtr (CallFunc_t *) const;  ; virtual void CallFunc_IgnoreExtraArgs (Call",MatchSource.WIKI,doc/master/classTInterpreter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTInterpreter.html
Integrability,interface,interface,". ROOT: TInterpreter Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Classes |; Public Types |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Friends |; List of all members ; TInterpreter Class Referenceabstract. ; This class defines an abstract interface to a generic command line interpreter. ; Definition at line 60 of file TInterpreter.h. Classes; struct  CallFuncIFacePtr_t;  ; class  SuspendAutoLoadingRAII;  ; class  SuspendAutoParsing;  . Public Types; typedef int(* AutoLoadCallBack_t) (const char *);  ; typedef TDictionary::DeclId_t DeclId_t;  ; enum  ECheckClassInfo { kUnknown = 0; , kKnown = 1; , kWithClassDefInline = 2; };  ; enum  EErrorCode { ;   kNoError = 0; , kRecoverable = 1; , kDangerous = 2; , kFatal = 3; , ;   kProcessing = 99. };  ; enum class  EReturnType { ;   kLong; , kDouble; , kString; , kOther; , ;   kNoReturnType. };  ; typedef std::vector< std::pair< std::string, int > > FwdDeclArgsToKeepCollection_t;  ; typedef class std::map< std::string, std::string > MembersMap_t;  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  . Public Member Functions;  TInterpreter ();  ;  TInterpreter (const char *name, const char *title=""Generic Interpreter"");  TInterpreter ctor only called by derived classes. ;  ; virtual ~TInterpreter ();  ; virtual void AddAvailableIn",MatchSource.WIKI,doc/master/classTInterpreter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTInterpreter.html
Modifiability,inherit,inherited," Classes |; Public Types |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Friends |; List of all members ; TInterpreter Class Referenceabstract. ; This class defines an abstract interface to a generic command line interpreter. ; Definition at line 60 of file TInterpreter.h. Classes; struct  CallFuncIFacePtr_t;  ; class  SuspendAutoLoadingRAII;  ; class  SuspendAutoParsing;  . Public Types; typedef int(* AutoLoadCallBack_t) (const char *);  ; typedef TDictionary::DeclId_t DeclId_t;  ; enum  ECheckClassInfo { kUnknown = 0; , kKnown = 1; , kWithClassDefInline = 2; };  ; enum  EErrorCode { ;   kNoError = 0; , kRecoverable = 1; , kDangerous = 2; , kFatal = 3; , ;   kProcessing = 99. };  ; enum class  EReturnType { ;   kLong; , kDouble; , kString; , kOther; , ;   kNoReturnType. };  ; typedef std::vector< std::pair< std::string, int > > FwdDeclArgsToKeepCollection_t;  ; typedef class std::map< std::string, std::string > MembersMap_t;  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  . Public Member Functions;  TInterpreter ();  ;  TInterpreter (const char *name, const char *title=""Generic Interpreter"");  TInterpreter ctor only called by derived classes. ;  ; virtual ~TInterpreter ();  ; virtual void AddAvailableIndentifiers (TSeqCollection &)=0;  ; virtual void AddIncludePath (const char *path)=0;  ; virtual Int_t AutoLoad (const char *classname, Bool",MatchSource.WIKI,doc/master/classTInterpreter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTInterpreter.html
Performance,load,load,"t *) const =0;  ; virtual Bool_t FuncTempInfo_IsValid (FuncTempInfo_t *) const =0;  ; virtual void FuncTempInfo_Name (FuncTempInfo_t *, TString &name) const =0;  ; virtual Long_t FuncTempInfo_Property (FuncTempInfo_t *) const =0;  ; virtual UInt_t FuncTempInfo_TemplateMinReqArgs (FuncTempInfo_t *) const =0;  ; virtual UInt_t FuncTempInfo_TemplateNargs (FuncTempInfo_t *) const =0;  ; virtual void FuncTempInfo_Title (FuncTempInfo_t *, TString &title) const =0;  ; virtual Bool_t FunctionDeclId_IsMethod (DeclId_t) const;  ; virtual Int_t GenerateDictionary (const char *classes, const char *includes=nullptr, const char *options=nullptr)=0;  ; virtual TClass * GenerateTClass (ClassInfo_t *classinfo, Bool_t silent=kFALSE)=0;  ; virtual TClass * GenerateTClass (const char *classname, Bool_t emulation, Bool_t silent=kFALSE)=0;  ; virtual void GenericError (const char *) const;  ; virtual void * GetAutoLoadCallBack () const;  ; virtual TClass * GetClass (const std::type_info &typeinfo, Bool_t load) const =0;  ; virtual const char * GetClassSharedLibs (const char *cls, bool skipCore=true)=0;  ; virtual const char * GetCurrentMacroName () const;  ; virtual DeclId_t GetDataMember (ClassInfo_t *cl, const char *name) const =0;  ; virtual DeclId_t GetDataMemberAtAddr (const void *addr) const =0;  ; virtual DeclId_t GetDataMemberWithValue (const void *ptrvalue) const =0;  ; virtual DeclId_t GetDeclId (CallFunc_t *info) const =0;  ; virtual DeclId_t GetDeclId (ClassInfo_t *info) const =0;  ; virtual DeclId_t GetDeclId (DataMemberInfo_t *info) const =0;  ; virtual DeclId_t GetDeclId (FuncTempInfo_t *info) const =0;  ; virtual DeclId_t GetDeclId (MethodInfo_t *info) const =0;  ; virtual DeclId_t GetDeclId (TypedefInfo_t *info) const =0;  ; virtual DeclId_t GetEnum (TClass *cl, const char *name) const =0;  ; virtual Long_t GetExecByteCode () const;  ; virtual Int_t GetExitCode () const =0;  ; virtual DeclId_t GetFunction (ClassInfo_t *cl, const char *funcname)=0;  ; virtual void GetFunct",MatchSource.WIKI,doc/master/classTInterpreter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTInterpreter.html
Security,hash,hash,"fGlobals ()=0;  ; virtual void UpdateListOfMethods (TClass *cl) const =0;  ; virtual void UpdateListOfTypes ()=0;  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; TClass * IsA () const override;  ; Bool_t IsSortable () const override;  ; void ls (Option_t *option="""") const override;  List TNamed name and title. ;  ; TNamed & operator= (const TNamed &rhs);  TNamed assignment operator. ;  ; void Print (Option_t *option="""") const override;  Print TNamed name and title. ;  ; virtual void SetName (const char *name);  Set the name of the TNamed. ;  ; virtual void SetNameTitle (const char *name, const char *title);  Set all the TNamed parameters (name and title). ;  ; virtual void SetTitle (const char *title="""");  Set the title of the TNamed. ;  ; virtual Int_t Sizeof () const;  Return size of the TNamed part of the TObject. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;",MatchSource.WIKI,doc/master/classTInterpreter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTInterpreter.html
Availability,error,error,"object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Return",MatchSource.WIKI,doc/master/classTInterruptHandler.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTInterruptHandler.html
Integrability,message,message,"object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Return",MatchSource.WIKI,doc/master/classTInterruptHandler.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTInterruptHandler.html
Modifiability,inherit,inherited,". ROOT: TInterruptHandler Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; List of all members ; TInterruptHandler Class Reference. . Definition at line 83 of file TRint.cxx. Public Member Functions;  TInterruptHandler ();  ; Bool_t Notify () override;  TRint interrupt handler. ;  ;  Public Member Functions inherited from TSignalHandler;  TSignalHandler (ESignals sig, Bool_t sync=kTRUE);  Create signal event handler. ;  ; virtual ~TSignalHandler ();  ; void Add () override;  Add signal handler to system signal handler list. ;  ; void Delay ();  ; ESignals GetSignal () const;  ; void HandleDelayedSignal ();  ; TClass * IsA () const override;  ; Bool_t IsAsync () const;  ; Bool_t IsSync () const;  ; Bool_t Notify () override;  Notify when signal occurs. ;  ; void Remove () override;  Remove signal handler from system signal handler list. ;  ; void SetSignal (ESignals sig);  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TSysEvtHandler;  TSysEvtHandler ();  ; virtual ~TSysEvtHandler ();  ; void Activate ();  Activate a system event handler. ;  ; virtual void Activated ();  ; virtual void Added ();  ; void DeActivate ();  De-activate a system event handler. ;  ; virtual void DeActivated ();  ; TClass * IsA () const override;  ; Bool_t IsActive () const;  ; virtual void Notified ();  ; virtual void Removed ();  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method",MatchSource.WIKI,doc/master/classTInterruptHandler.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTInterruptHandler.html
Security,hash,hash," Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Returns name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual const char * GetTitle () const;  Returns title of object. ;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; virtual ULong_t Hash () const;  Return hash value for this object. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns kTRUE if object inherits from class ""classname"". ;  ; virtual Bool_t InheritsFrom (const TClass *cl) const;  Returns kTRUE if object inherits from TClass cl. ;  ; virtual void Inspect () const;  Dump contents of this object in a graphics canvas. ;  ; void InvertBit (UInt_t f);  ; Bool_t IsDestructed () const;  IsDestructed. ;  ; virtual Bool_t IsEqual (const TObject *obj) const;  Default equal comparison (objects are equal if they have the same address in memory). ;  ; virtual Bool_t IsFolder () const;  Returns kTRUE in case object contains browsable objects (like containers or lists of other objects). ;  ; R__ALWAYS_INLINE Bool_t",MatchSource.WIKI,doc/master/classTInterruptHandler.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTInterruptHandler.html
Integrability,interface,interface,". ROOT: TIterator Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; List of all members ; TIterator Class ReferenceabstractCore ROOT classes » Containers. ; Iterator abstract base class. ; This base class provides the interface for collection iterators. ; Definition at line 30 of file TIterator.h. Public Member Functions; virtual ~TIterator ();  ; virtual const TCollection * GetCollection () const =0;  ; virtual Option_t * GetOption () const;  ; virtual TClass * IsA () const;  ; virtual TObject * Next ()=0;  ; virtual Bool_t operator!= (const TIterator &) const;  Compare two iterator objects. ;  ; TObject * operator() ();  ; virtual TObject * operator* () const;  Return current object or nullptr. ;  ; virtual TIterator & operator= (const TIterator &)=0;  ; Bool_t operator== (const TIterator &other) const;  ; virtual void Reset ()=0;  ; virtual void Streamer (TBuffer &);  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  . Protected Member Functions;  TIterator ();  ;  TIterator (const TIterator &);  . #include <TIterator.h>. Inheritance diagram for TIterator:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ TIterator() [1/2]. TIterator::TIterator ; (; ). inlineprotected . Definition at line 33 of file TIterator.h. ◆ TIterator() [2/2]. TIterator::TIterator ; (; const TIterator & ; ). inlineprotected . Definition at line 34 of file TIterator.h. ◆ ~TIterator(). virtual TIterator::~TIterator ; (; ). inlinevirtual . Definition at line 38 of file TIterator.h. Member Function Documentation. ◆ Class(). static TClass * TIterator::",MatchSource.WIKI,doc/master/classTIterator.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTIterator.html
Modifiability,inherit,inherited,"s not happen, which was possible with the linked list iterators of RooFit. When NDEBUG is defined, these checks will disappear. NoteThis is a legacy iterator that only exists to not break old code. Use begin(), end() and range-based for loops with RooArgList and RooArgSet. ; Definition at line 98 of file RooLinkedListIter.h. Public Member Functions;  TIteratorToSTLInterface (const STLContainer &container);  ; const TCollection * GetCollection () const override;  ; RooAbsArg * next () override;  Return next element or nullptr if at end. ;  ; TObject * Next () override;  ; bool operator!= (const TIterator &other) const override;  Compare two iterator objects. ;  ; TObject * operator* () const override;  Return current object or nullptr. ;  ; TIterator & operator= (const TIterator &) override;  ; void Reset () override;  ;  Public Member Functions inherited from TIterator; virtual ~TIterator ();  ; virtual Option_t * GetOption () const;  ; virtual TClass * IsA () const;  ; TObject * operator() ();  ; Bool_t operator== (const TIterator &other) const;  ; virtual void Streamer (TBuffer &);  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from GenericRooFIter; virtual ~GenericRooFIter ();  . Private Member Functions; bool atEnd () const;  ; RooAbsArg * nextChecked ();  . Private Attributes; const RooAbsArg * fCurrentElem;  ! ;  ; std::size_t fIndex;  ! ;  ; const STLContainer & fSTLContainer;  ! ;  . Additional Inherited Members;  Static Public Member Functions inherited from TIterator; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Protected Member Functions inherited from TIterator;  TIterator ();  ;  TIterator (const TIterator &);  . #include <RooLinkedListIter.h>. Inheritance diagram for TIteratorToSTLInterface< STLContainer >:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instea",MatchSource.WIKI,doc/master/classTIteratorToSTLInterface.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTIteratorToSTLInterface.html
Security,access,access,". ROOT: TIteratorToSTLInterface< STLContainer > Class Template Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Private Member Functions |; Private Attributes |; List of all members ; TIteratorToSTLInterface< STLContainer > Class Template Referencefinal. ; template<class STLContainer>; class TIteratorToSTLInterface< STLContainer >TIterator and GenericRooFIter front end with STL back end. ; By default, this iterators counts, at which position the current element should be. On request, it does an index access to the underlying collection, and returns the element. This happens because the RooLinkedList, which used to be the default collection in RooFit, will not invalidate iterators when inserting elements. Since the default is now an STL collection, reallocations might invalidate the iterator.; With an iterator that counts, only inserting before or at the iterator position will create problems. deal with reallocations while iterating. Therefore, this iterator will also check that the last element it was pointing to is the current element when it is invoked again. This ensures that inserting or removing before this iterator does not happen, which was possible with the linked list iterators of RooFit. When NDEBUG is defined, these checks will disappear. NoteThis is a legacy iterator that only exists to not break old code. Use begin(), end() and range-based for loops with RooArgList and RooArgSet. ; Definition at line 98 of file RooLinkedListIter.h. Public Member Functions;  TIteratorToSTLInterface (const STLContainer &container);  ; const TCollection * GetCollection () const override;  ; RooAbsArg * next () override;  Return next element or nullptr if at end. ;  ; TObject * Next () override;  ; bool operator!= (const TIterator &other) const override;  Compare two iterator objects. ;  ; TObject * operator* () const override;  Return current object or nullptr. ;  ; TIterator & oper",MatchSource.WIKI,doc/master/classTIteratorToSTLInterface.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTIteratorToSTLInterface.html
Modifiability,inherit,inherited,". ROOT: TIterCategory< T > Class Template Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; List of all members ; TIterCategory< T > Class Template Reference. ; template<class T>; class TIterCategory< T >; Definition at line 281 of file TCollection.h. Public Member Functions;  TIterCategory (const TCollection *col, Bool_t dir=kIterForward);  ;  TIterCategory (TIterator *it);  ; virtual ~TIterCategory ();  ; TIterCategory & Begin ();  ;  Public Member Functions inherited from TIter;  TIter (const TCollection *col, Bool_t dir=kIterForward);  ;  TIter (const TIter &iter);  Copy a TIter. ;  ;  TIter (TIterator *it);  ; virtual ~TIter ();  ; TIter & Begin ();  Pointing to the first element of the container. ;  ; const TCollection * GetCollection () const;  ; Option_t * GetOption () const;  ; virtual TClass * IsA () const;  ; TObject * Next ();  ; Bool_t operator!= (const TIter &aIter) const;  ; TObject * operator() ();  ; TObject * operator* () const;  ; TIter & operator++ ();  ; TIter & operator= (const TIter &rhs);  Assigning an TIter to another. ;  ; TIter & operator= (TIterator *iter);  ; Bool_t operator== (const TIter &aIter) const;  ; void Reset ();  ; virtual void Streamer (TBuffer &);  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  . Static Public Member Functions; static TIterCategory End ();  ;  Static Public Member Functions inherited from TIter; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static TIter End ();  Pointing to the element after the last - to a nullptr value in our case. ;  . Additional Inherited Members;  Protected Member Functions inherited from TIter;  TIter ();  . #include <TCollection.h>. Inheritance diagram for TIterCategory< T >:. This browser is not able to show SVG: try Firefox, Chrome, Saf",MatchSource.WIKI,doc/master/classTIterCategory.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTIterCategory.html
Availability,failure,failure,". ROOT: TJSONStackObj Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Classes |; Public Member Functions |; Public Attributes |; List of all members ; TJSONStackObj Class Reference. . Definition at line 306 of file TBufferJSON.cxx. Classes; struct  StlRead;  . Public Member Functions;  TJSONStackObj ()=default;  keep actual class version, workaround for ReadVersion in custom streamer ;  ;  ~TJSONStackObj () override;  ; Bool_t AssignStl (TClass *cl, Int_t map_convert, const char *typename_tag);  ; void ClearStl ();  ; nlohmann::json * GetStlNode ();  ; Int_t IsJsonArray (nlohmann::json *json=nullptr, const char *map_convert_type=nullptr);  checks if specified JSON node is array (compressed or not compressed) returns length of array (or -1 if failure) ;  ; Bool_t IsJsonString ();  ; Bool_t IsStl () const;  ; Bool_t IsStreamerElement () const;  ; Bool_t IsStreamerInfo () const;  ; std::unique_ptr< TArrayIndexProducer > MakeReadIndexes ();  ; const char * NextMemberSeparator ();  returns separator for data members ;  ; Int_t PopIntValue ();  ; void PushIntValue (Int_t v);  ; void PushValue (TString &v);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; v",MatchSource.WIKI,doc/master/classTJSONStackObj.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTJSONStackObj.html
Integrability,message,message,"object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Return",MatchSource.WIKI,doc/master/classTJSONStackObj.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTJSONStackObj.html
Modifiability,inherit,inherited,". ROOT: TJSONStackObj Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Classes |; Public Member Functions |; Public Attributes |; List of all members ; TJSONStackObj Class Reference. . Definition at line 306 of file TBufferJSON.cxx. Classes; struct  StlRead;  . Public Member Functions;  TJSONStackObj ()=default;  keep actual class version, workaround for ReadVersion in custom streamer ;  ;  ~TJSONStackObj () override;  ; Bool_t AssignStl (TClass *cl, Int_t map_convert, const char *typename_tag);  ; void ClearStl ();  ; nlohmann::json * GetStlNode ();  ; Int_t IsJsonArray (nlohmann::json *json=nullptr, const char *map_convert_type=nullptr);  checks if specified JSON node is array (compressed or not compressed) returns length of array (or -1 if failure) ;  ; Bool_t IsJsonString ();  ; Bool_t IsStl () const;  ; Bool_t IsStreamerElement () const;  ; Bool_t IsStreamerInfo () const;  ; std::unique_ptr< TArrayIndexProducer > MakeReadIndexes ();  ; const char * NextMemberSeparator ();  returns separator for data members ;  ; Int_t PopIntValue ();  ; void PushIntValue (Int_t v);  ; void PushValue (TString &v);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; v",MatchSource.WIKI,doc/master/classTJSONStackObj.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTJSONStackObj.html
Security,hash,hash," Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Returns name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual const char * GetTitle () const;  Returns title of object. ;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; virtual ULong_t Hash () const;  Return hash value for this object. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns kTRUE if object inherits from class ""classname"". ;  ; virtual Bool_t InheritsFrom (const TClass *cl) const;  Returns kTRUE if object inherits from TClass cl. ;  ; virtual void Inspect () const;  Dump contents of this object in a graphics canvas. ;  ; void InvertBit (UInt_t f);  ; virtual TClass * IsA () const;  ; Bool_t IsDestructed () const;  IsDestructed. ;  ; virtual Bool_t IsEqual (const TObject *obj) const;  Default equal comparison (objects are equal if they have the same address in memory). ;  ; virtual Bool_t IsFolder () const;  Returns kTRUE in case object contains browsable objects (like containers or lists of other obje",MatchSource.WIKI,doc/master/classTJSONStackObj.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTJSONStackObj.html
Availability,error,errors,"template<class KernelFunction > ;  TKDE (const Char_t *, const KernelFunction &kernfunc, UInt_t events, const Double_t *data, Double_t xMin=0.0, Double_t xMax=0.0, const Option_t *option=""KernelType:UserDefined;Iteration:Adaptive;Mirror:noMirror;Binning:RelaxedBinning"", Double_t rho=1.0);  Constructor for unweighted data and a user defined kernel function. ;  ;  TKDE (UInt_t events, const Double_t *data, const Double_t *dataWeight, Double_t xMin=0.0, Double_t xMax=0.0, const Option_t *option=""KernelType:Gaussian;Iteration:Adaptive;Mirror:noMirror;Binning:RelaxedBinning"", Double_t rho=1.0);  Constructor for weighted data. ;  ;  TKDE (UInt_t events, const Double_t *data, Double_t xMin=0.0, Double_t xMax=0.0, const Option_t *option=""KernelType:Gaussian;Iteration:Adaptive;Mirror:noMirror;Binning:RelaxedBinning"", Double_t rho=1.0);  Constructor for unweighted data Varius option for TKDE can be passed in the option string as below. ;  ;  ~TKDE () override;  ; void Draw (const Option_t *option="""") override;  Draws either the KDE functions or its errors. ;  ; void Fill (Double_t data);  ; void Fill (Double_t data, Double_t weight);  ; const Double_t * GetAdaptiveWeights () const;  ; TF1 * GetApproximateBias (UInt_t npx=100, Double_t xMin=1.0, Double_t xMax=0.0);  ; Double_t GetBias (Double_t x) const;  ; Double_t GetError (Double_t x) const;  ; Double_t GetFixedWeight () const;  ; TF1 * GetFunction (UInt_t npx=100, Double_t xMin=1.0, Double_t xMax=0.0);  ; TGraphErrors * GetGraphWithErrors (UInt_t npx=100, Double_t xMin=1.0, Double_t xMax=0.0);  return a TGraphErrors with the KDE values and errors The return object is managed by the user ;  ; TF1 * GetLowerFunction (Double_t confidenceLevel=0.95, UInt_t npx=100, Double_t xMin=1.0, Double_t xMax=0.0);  ; Double_t GetMean () const;  ; Double_t GetRAMISE () const;  ; Double_t GetSigma () const;  ; TF1 * GetUpperFunction (Double_t confidenceLevel=0.95, UInt_t npx=100, Double_t xMin=1.0, Double_t xMax=0.0);  ; Double_t GetValue (",MatchSource.WIKI,doc/master/classTKDE.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTKDE.html
Energy Efficiency,adapt,adaptive,"mpared to nEvents**1/5. ;  ; TKDE operator= (TKDE &kde);  ; void ReInit ();  ; void SetBinCentreData (Double_t xmin, Double_t xmax);  ; void SetBinCountData ();  ; void SetCanonicalBandwidths ();  ; void SetData (const Double_t *data, const Double_t *weights);  ; void SetDrawOptions (const Option_t *option, TString &plotOpt, TString &drawOpt);  ; void SetHistogram ();  ; void SetKernel ();  ; void SetKernelFunction (KernelFunction_Ptr kernfunc=nullptr);  ; void SetKernelSigmas2 ();  ; void SetMean ();  ; void SetMirror ();  ; void SetMirroredEvents ();  Intgernal function to mirror the data. ;  ; void SetOptions (const Option_t *option, Double_t rho);  ; void SetSigma (Double_t R);  ; void SetUseBins ();  ; void SetUserCanonicalBandwidth ();  ; void SetUserKernelSigma2 ();  ; Double_t UpperConfidenceInterval (const Double_t *x, const Double_t *p) const;  Valid if the bandwidth is small compared to nEvents**1/5. ;  . Private Attributes; Double_t fAdaptiveBandwidthFactor;  Geometric mean of the kernel density estimation from the data for adaptive iteration. ;  ; TF1 * fApproximateBias;  Output Kernel Density Estimation lower confidence interval PDF function. ;  ; Bool_t fAsymLeft;  ; Bool_t fAsymRight;  ; std::vector< Double_t > fBinCount;  Number of events per bin for binned data option. ;  ; EBinning fBinning;  ; std::vector< Double_t > fCanonicalBandwidths;  ; std::vector< Double_t > fData;  Data events. ;  ; std::vector< Double_t > fEvents;  Original data storage. ;  ; std::vector< Double_t > fEventWeights;  Original data weights. ;  ; TGraphErrors * fGraph;  Output Kernel Density Estimation approximate bias. ;  ; EIteration fIteration;  ; std::unique_ptr< TKernel > fKernel;  ! internal kernel class. Transient because it is recreated after reading from a file ;  ; KernelFunction_Ptr fKernelFunction;  ! pointer to kernel function ;  ; std::vector< Double_t > fKernelSigmas2;  ; EKernelType fKernelType;  Graph with the errors. ;  ; TF1 * fLowerPDF;  Output Kernel Den",MatchSource.WIKI,doc/master/classTKDE.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTKDE.html
Integrability,depend,dependance,"lass Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Classes |; Public Types |; Public Member Functions |; Static Public Member Functions |; Private Types |; Private Member Functions |; Private Attributes |; Friends |; List of all members ; TKDE Class ReferenceHistogram Library. ; Kernel Density Estimation class. ; The three main references are:; ""Scott DW, Multivariate Density Estimation. Theory, Practice and Visualization. New York: Wiley"",; ""Jann Ben - ETH Zurich, Switzerland -, Univariate kernel density estimation document for KDENS:; Stata module for univariate kernel density estimation.""; ""Hardle W, Muller M, Sperlich S, Werwatz A, Nonparametric and Semiparametric Models. Springer.""; ""Cranmer KS, Kernel Estimation in High-Energy; Physics. Computer Physics Communications 136:198-207,2001"" - e-Print Archive: hep ex/0011057. The algorithm is briefly described in (4). A binned version is also implemented to address the performance issue due to its data size dependance. ; Definition at line 37 of file TKDE.h. Classes; struct  KernelIntegrand;  ; class  TKernel;  . Public Types; enum  EBinning { kUnbinned; , kRelaxedBinning; , kForcedBinning; };  Data binning option. More...;  ; enum  EIteration { kAdaptive; , kFixed; };  Iteration types. They can be set using SetIteration() More...;  ; enum  EKernelType { ;   kGaussian; , kEpanechnikov; , kBiweight; , kCosineArch; , ;   kUserDefined; , kTotalKernels. };  Types of Kernel functions They can be set using the function SetKernelType() or as a string in the constructor. More...;  ; enum  EMirror { ;   kNoMirror; , kMirrorLeft; , kMirrorRight; , kMirrorBoth; , ;   kMirrorAsymLeft; , kMirrorRightAsymLeft; , kMirrorAsymRight; , kMirrorLeftAsymRight; , ;   kMirrorAsymBoth. };  Data ""mirroring"" option to address the probability ""spill out"" boundary effect They can be set using SetMirror() More...;  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap =",MatchSource.WIKI,doc/master/classTKDE.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTKDE.html
Modifiability,inherit,inherited,"s data size dependance. ; Definition at line 37 of file TKDE.h. Classes; struct  KernelIntegrand;  ; class  TKernel;  . Public Types; enum  EBinning { kUnbinned; , kRelaxedBinning; , kForcedBinning; };  Data binning option. More...;  ; enum  EIteration { kAdaptive; , kFixed; };  Iteration types. They can be set using SetIteration() More...;  ; enum  EKernelType { ;   kGaussian; , kEpanechnikov; , kBiweight; , kCosineArch; , ;   kUserDefined; , kTotalKernels. };  Types of Kernel functions They can be set using the function SetKernelType() or as a string in the constructor. More...;  ; enum  EMirror { ;   kNoMirror; , kMirrorLeft; , kMirrorRight; , kMirrorBoth; , ;   kMirrorAsymLeft; , kMirrorRightAsymLeft; , kMirrorAsymRight; , kMirrorLeftAsymRight; , ;   kMirrorAsymBoth. };  Data ""mirroring"" option to address the probability ""spill out"" boundary effect They can be set using SetMirror() More...;  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  . Public Member Functions;  TKDE ();  default constructor used only by I/O ;  ; template<class KernelFunction > ;  TKDE (const Char_t *, const KernelFunction &kernfunc, UInt_t events, const Double_t *data, const Double_t *dataWeight, Double_t xMin=0.0, Double_t xMax=0.0, const Option_t *option=""KernelType:UserDefined;Iteration:Adaptive;Mirror:noMirror;Binning:RelaxedBinning"", Double_t rho=1.0);  Constructor for weighted data and a user defined kernel",MatchSource.WIKI,doc/master/classTKDE.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTKDE.html
Performance,perform,performance,"lass Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Classes |; Public Types |; Public Member Functions |; Static Public Member Functions |; Private Types |; Private Member Functions |; Private Attributes |; Friends |; List of all members ; TKDE Class ReferenceHistogram Library. ; Kernel Density Estimation class. ; The three main references are:; ""Scott DW, Multivariate Density Estimation. Theory, Practice and Visualization. New York: Wiley"",; ""Jann Ben - ETH Zurich, Switzerland -, Univariate kernel density estimation document for KDENS:; Stata module for univariate kernel density estimation.""; ""Hardle W, Muller M, Sperlich S, Werwatz A, Nonparametric and Semiparametric Models. Springer.""; ""Cranmer KS, Kernel Estimation in High-Energy; Physics. Computer Physics Communications 136:198-207,2001"" - e-Print Archive: hep ex/0011057. The algorithm is briefly described in (4). A binned version is also implemented to address the performance issue due to its data size dependance. ; Definition at line 37 of file TKDE.h. Classes; struct  KernelIntegrand;  ; class  TKernel;  . Public Types; enum  EBinning { kUnbinned; , kRelaxedBinning; , kForcedBinning; };  Data binning option. More...;  ; enum  EIteration { kAdaptive; , kFixed; };  Iteration types. They can be set using SetIteration() More...;  ; enum  EKernelType { ;   kGaussian; , kEpanechnikov; , kBiweight; , kCosineArch; , ;   kUserDefined; , kTotalKernels. };  Types of Kernel functions They can be set using the function SetKernelType() or as a string in the constructor. More...;  ; enum  EMirror { ;   kNoMirror; , kMirrorLeft; , kMirrorRight; , kMirrorBoth; , ;   kMirrorAsymLeft; , kMirrorRightAsymLeft; , kMirrorAsymRight; , kMirrorLeftAsymRight; , ;   kMirrorAsymBoth. };  Data ""mirroring"" option to address the probability ""spill out"" boundary effect They can be set using SetMirror() More...;  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap =",MatchSource.WIKI,doc/master/classTKDE.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTKDE.html
Security,hash,hash,"ion ();  ; TF1 * GetDrawnUpperFunction ();  ; TF1 * GetDrawnLowerFunction ();  ; TGraphErrors * GetDrawnGraph ();  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; TClass * IsA () const override;  ; Bool_t IsSortable () const override;  ; void ls (Option_t *option="""") const override;  List TNamed name and title. ;  ; TNamed & operator= (const TNamed &rhs);  TNamed assignment operator. ;  ; void Print (Option_t *option="""") const override;  Print TNamed name and title. ;  ; virtual void SetName (const char *name);  Set the name of the TNamed. ;  ; virtual void SetNameTitle (const char *name, const char *title);  Set all the TNamed parameters (name and title). ;  ; virtual void SetTitle (const char *title="""");  Set the title of the TNamed. ;  ; virtual Int_t Sizeof () const;  Return size of the TNamed part of the TObject. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;",MatchSource.WIKI,doc/master/classTKDE.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTKDE.html
Availability,down,down,"everal applications, such as searches involving a multidimensional search key (e.g. range searches and nearest neighbour searches). kd-trees are a special case of BSP trees.; A kd-tree uses only splitting planes that are perpendicular to one of the coordinate system axes. This differs from BSP trees, in which arbitrary splitting planes can be used. In addition, in the typical definition every node of a kd-tree, from the root to the leaves, stores a point. This differs from BSP trees, in which leaves are typically the only nodes that contain points (or other geometric primitives). As a consequence, each splitting plane must go through one of the points in the kd-tree. kd-trees are a variant that store data only in leaf nodes. 2. Constructing a classical kd-tree ( Pseudo code); Since there are many possible ways to choose axis-aligned splitting planes, there are many different ways to construct kd-trees. The canonical method of kd-tree construction has the following constraints:; As one moves down the tree, one cycles through the axes used to select the splitting planes. (For example, the root would have an x-aligned plane, the root's children would both have y-aligned planes, the root's grandchildren would all have z-aligned planes, and so on.) At each step, the point selected to create the splitting plane is the median of the points being put into the kd-tree, with respect to their coordinates in the axis being used. (Note the assumption that we feed the entire set of points into the algorithm up-front.); This method leads to a balanced kd-tree, in which each leaf node is about the same distance from the root. However, balanced trees are not necessarily optimal for all applications. The following pseudo-code illustrates this canonical construction procedure (NOTE, that the procedure used by the TKDTree class is a bit different, the following pseudo-code is given as a simple illustration of the concept):; function kdtree (list of points pointList, int depth); {; if p",MatchSource.WIKI,doc/master/classTKDTree.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTKDTree.html
Energy Efficiency,consumption,consumption,"). Most functions of the kd-tree don't require the original data to be present after the tree; has been built. Check the functions documentation for more details.; 3b. Navigating the kd-tree; Nodes of the tree are indexed top to bottom, left to right. The root node has index 0. Functions; TKDTree::GetLeft(Index inode), TKDTree::GetRight(Index inode) and TKDTree::GetParent(Index inode); allow to find the children and the parent of a given node. For a given node, one can find the indexes of the original points, contained in this node,; by calling the GetNodePointsIndexes(Index inode) function. Additionally, for terminal nodes,; there is a function GetPointsIndexes(Index inode) that returns a pointer to the relevant; part of the index array. To find the number of point in the node; (not only terminal), call TKDTree::GetNpointsNode(Index inode).; ; 4. TKDtree implementation details - internal information, not needed to use the kd-tree.; 4a. Order of nodes in the node information arrays:; TKDtree is optimized to minimize memory consumption. Nodes of the TKDTree do not store pointers to the left and right children or to the parent node, but instead there are several 1-d arrays of size fNNodes with information about the nodes. The order of the nodes information in the arrays is described below. It's important to understand it, if one's class needs to store some kind of additional information on the per node basis, for example, the fit function parameters. Drawback: Insertion to the TKDtree is not supported.; Advantage: Random access is supported. As noted above, the construction of the kd-tree involves choosing the axis and the point on that axis to divide the remaining points approximately in half. The exact algorithm for choosing the division point is described in the next section. The sequence of divisions is recorded in the following arrays: fAxis[fNNodes] - Division axis (0,1,2,3 ...); fValue[fNNodes] - Division value; valueOption_t Option_t TPoint TPoint const char Ge",MatchSource.WIKI,doc/master/classTKDTree.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTKDTree.html
Integrability,interface,interface,"kdtree(points in pointList before median, depth+1);; node.rightChild := kdtree(points in pointList after median, depth+1);; return node;; }; }; pointsOption_t Option_t TPoint TPoint const char GetTextMagnitude GetFillStyle GetLineColor GetLineWidth GetMarkerStyle GetTextAlign GetTextColor GetTextSize void char Point_t pointsDefinition TGWin32VirtualXProxy.cxx:148; Our construction method is optimized to save memory, and differs a bit from the constraints above. In particular, the division axis is chosen as the one with the biggest spread, and the point to create the splitting plane is chosen so, that one of the two subtrees contains exactly 2^k terminal nodes and is a perfectly balanced binary tree, and, while at the same time, trying to keep the number of terminal nodes in the 2 subtrees as close as possible. The following section gives more details about our implementation. 3. Using TKDTree; 3a. Creating the tree and setting the data; The interface of the TKDTree, that allows to set input data, has been developed to simplify using it together with TTree::Draw() functions. That's why the data has to be provided column-wise. For example:; {; TTree *datatree = ...; ...; datatree->Draw(""x:y:z"", ""selection"", ""goff"");; //now make a kd-tree on the drawn variables; TKDTreeID *kdtree = new TKDTreeID(npoints, 3, 1);; kdtree->SetData(0, datatree->GetV1());; kdtree->SetData(1, datatree->GetV2());; kdtree->SetData(2, datatree->GetV3());; kdtree->Build();; }; NOTE, that this implementation of kd-tree doesn't support adding new points after the tree has been built; Of course, it's not necessary to use TTree::Draw(). What is important, is to have data columnwise.; An example with regular arrays:; {; Int_t npoints = 100000;; Int_t ndim = 3;; Int_t bsize = 1;; Double_t xmin = -0.5;; Double_t xmax = 0.5;; Double_t *data0 = new Double_t[npoints];; Double_t *data1 = new Double_t[npoints];; Double_t *data2 = new Double_t[npoints];; Double_t *y = new Double_t[npoints];; for (Int_t i=0; ",MatchSource.WIKI,doc/master/classTKDTree.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTKDTree.html
Modifiability,variab,variables,"ave memory, and differs a bit from the constraints above. In particular, the division axis is chosen as the one with the biggest spread, and the point to create the splitting plane is chosen so, that one of the two subtrees contains exactly 2^k terminal nodes and is a perfectly balanced binary tree, and, while at the same time, trying to keep the number of terminal nodes in the 2 subtrees as close as possible. The following section gives more details about our implementation. 3. Using TKDTree; 3a. Creating the tree and setting the data; The interface of the TKDTree, that allows to set input data, has been developed to simplify using it together with TTree::Draw() functions. That's why the data has to be provided column-wise. For example:; {; TTree *datatree = ...; ...; datatree->Draw(""x:y:z"", ""selection"", ""goff"");; //now make a kd-tree on the drawn variables; TKDTreeID *kdtree = new TKDTreeID(npoints, 3, 1);; kdtree->SetData(0, datatree->GetV1());; kdtree->SetData(1, datatree->GetV2());; kdtree->SetData(2, datatree->GetV3());; kdtree->Build();; }; NOTE, that this implementation of kd-tree doesn't support adding new points after the tree has been built; Of course, it's not necessary to use TTree::Draw(). What is important, is to have data columnwise.; An example with regular arrays:; {; Int_t npoints = 100000;; Int_t ndim = 3;; Int_t bsize = 1;; Double_t xmin = -0.5;; Double_t xmax = 0.5;; Double_t *data0 = new Double_t[npoints];; Double_t *data1 = new Double_t[npoints];; Double_t *data2 = new Double_t[npoints];; Double_t *y = new Double_t[npoints];; for (Int_t i=0; i<npoints; i++){; data0[i]=gRandom->Uniform(xmin, xmax);; data1[i]=gRandom->Uniform(xmin, xmax);; data2[i]=gRandom->Uniform(xmin, xmax);; }; TKDTreeID *kdtree = new TKDTreeID(npoints, ndim, bsize);; kdtree->SetData(0, data0);; kdtree->SetData(1, data1);; kdtree->SetData(2, data2);; kdtree->Build();; }; Int_tint Int_tDefinition RtypesCore.h:45; Double_tdouble Double_tDefinition RtypesCore.h:59; dataOption_",MatchSource.WIKI,doc/master/classTKDTree.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTKDTree.html
Performance,optimiz,optimized,"is canonical construction procedure (NOTE, that the procedure used by the TKDTree class is a bit different, the following pseudo-code is given as a simple illustration of the concept):; function kdtree (list of points pointList, int depth); {; if pointList is empty; return nil;; else; {; // Select axis based on depth so that axis cycles through all valid values; var int axis := depth mod k;; ; // Sort point list and choose median as pivot element; select median from pointList;; ; // Create node and construct subtrees; var tree_node node;; node.location := median;; node.leftChild := kdtree(points in pointList before median, depth+1);; node.rightChild := kdtree(points in pointList after median, depth+1);; return node;; }; }; pointsOption_t Option_t TPoint TPoint const char GetTextMagnitude GetFillStyle GetLineColor GetLineWidth GetMarkerStyle GetTextAlign GetTextColor GetTextSize void char Point_t pointsDefinition TGWin32VirtualXProxy.cxx:148; Our construction method is optimized to save memory, and differs a bit from the constraints above. In particular, the division axis is chosen as the one with the biggest spread, and the point to create the splitting plane is chosen so, that one of the two subtrees contains exactly 2^k terminal nodes and is a perfectly balanced binary tree, and, while at the same time, trying to keep the number of terminal nodes in the 2 subtrees as close as possible. The following section gives more details about our implementation. 3. Using TKDTree; 3a. Creating the tree and setting the data; The interface of the TKDTree, that allows to set input data, has been developed to simplify using it together with TTree::Draw() functions. That's why the data has to be provided column-wise. For example:; {; TTree *datatree = ...; ...; datatree->Draw(""x:y:z"", ""selection"", ""goff"");; //now make a kd-tree on the drawn variables; TKDTreeID *kdtree = new TKDTreeID(npoints, 3, 1);; kdtree->SetData(0, datatree->GetV1());; kdtree->SetData(1, datatree->GetV2());; k",MatchSource.WIKI,doc/master/classTKDTree.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTKDTree.html
Security,access,access,"lling the GetNodePointsIndexes(Index inode) function. Additionally, for terminal nodes,; there is a function GetPointsIndexes(Index inode) that returns a pointer to the relevant; part of the index array. To find the number of point in the node; (not only terminal), call TKDTree::GetNpointsNode(Index inode).; ; 4. TKDtree implementation details - internal information, not needed to use the kd-tree.; 4a. Order of nodes in the node information arrays:; TKDtree is optimized to minimize memory consumption. Nodes of the TKDTree do not store pointers to the left and right children or to the parent node, but instead there are several 1-d arrays of size fNNodes with information about the nodes. The order of the nodes information in the arrays is described below. It's important to understand it, if one's class needs to store some kind of additional information on the per node basis, for example, the fit function parameters. Drawback: Insertion to the TKDtree is not supported.; Advantage: Random access is supported. As noted above, the construction of the kd-tree involves choosing the axis and the point on that axis to divide the remaining points approximately in half. The exact algorithm for choosing the division point is described in the next section. The sequence of divisions is recorded in the following arrays: fAxis[fNNodes] - Division axis (0,1,2,3 ...); fValue[fNNodes] - Division value; valueOption_t Option_t TPoint TPoint const char GetTextMagnitude GetFillStyle GetLineColor GetLineWidth GetMarkerStyle GetTextAlign GetTextColor GetTextSize void valueDefinition TGWin32VirtualXProxy.cxx:142; TKDTree::fValueValue * fValue[fNNodes] nodes cutting valueDefinition TKDTree.h:85; TKDTree::fNNodesInt_t fNNodessize of node arrayDefinition TKDTree.h:78; TKDTree::fAxisUChar_t * fAxis[fNNodes] nodes cutting axisDefinition TKDTree.h:84; Given the index of a node in those arrays, it's easy to find the indices, corresponding to children nodes or the parent node: Suppose, the parent nod",MatchSource.WIKI,doc/master/classTKDTree.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTKDTree.html
Usability,simpl,simple,"down the tree, one cycles through the axes used to select the splitting planes. (For example, the root would have an x-aligned plane, the root's children would both have y-aligned planes, the root's grandchildren would all have z-aligned planes, and so on.) At each step, the point selected to create the splitting plane is the median of the points being put into the kd-tree, with respect to their coordinates in the axis being used. (Note the assumption that we feed the entire set of points into the algorithm up-front.); This method leads to a balanced kd-tree, in which each leaf node is about the same distance from the root. However, balanced trees are not necessarily optimal for all applications. The following pseudo-code illustrates this canonical construction procedure (NOTE, that the procedure used by the TKDTree class is a bit different, the following pseudo-code is given as a simple illustration of the concept):; function kdtree (list of points pointList, int depth); {; if pointList is empty; return nil;; else; {; // Select axis based on depth so that axis cycles through all valid values; var int axis := depth mod k;; ; // Sort point list and choose median as pivot element; select median from pointList;; ; // Create node and construct subtrees; var tree_node node;; node.location := median;; node.leftChild := kdtree(points in pointList before median, depth+1);; node.rightChild := kdtree(points in pointList after median, depth+1);; return node;; }; }; pointsOption_t Option_t TPoint TPoint const char GetTextMagnitude GetFillStyle GetLineColor GetLineWidth GetMarkerStyle GetTextAlign GetTextColor GetTextSize void char Point_t pointsDefinition TGWin32VirtualXProxy.cxx:148; Our construction method is optimized to save memory, and differs a bit from the constraints above. In particular, the division axis is chosen as the one with the biggest spread, and the point to create the splitting plane is chosen so, that one of the two subtrees contains exactly 2^k terminal node",MatchSource.WIKI,doc/master/classTKDTree.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTKDTree.html
Availability,error,error,"object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Return",MatchSource.WIKI,doc/master/classTKDTreeBinning.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTKDTreeBinning.html
Integrability,message,message,"object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Return",MatchSource.WIKI,doc/master/classTKDTreeBinning.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTKDTreeBinning.html
Modifiability,inherit,inherited,"idimensional binning by constructing a TKDTree inner structure from the data which is used as the bins. The bins are retrieved as two double*, one for the minimum bin edges, the other as the maximum bin edges. For one dimension one of these is enough to correctly define the bins. For the multidimensional case both minimum and maximum ones are necessary for the bins to be well defined. The bin edges of d-dimensional data is a d-tet of the bin's thresholds. For example if d=3 the minimum bin edges of bin b is of the form of the following array: {xbmin, ybmin, zbmin}. You also have the possibility to sort the bins by their density.; Details of usage can be found in $ROOTSYS/tutorials/math/kdTreeBinning.C and more information on the embedded TKDTree documentation. ; Definition at line 29 of file TKDTreeBinning.h. Classes; struct  CompareAsc;  ; struct  CompareDesc;  . Public Types; enum  { kAdjustBinEdges = (1ULL << ( 14 )); };  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  . Public Member Functions;  TKDTreeBinning ();  Default constructor (for I/O) ;  ;  TKDTreeBinning (UInt_t dataSize, UInt_t dataDim, const std::vector< double > &data, UInt_t nBins=100, bool adjustBinEdges=false);  Class's constructor taking the size of the data points, dimension, a data vector and the number of bins (default = 100). ;  ;  TKDTreeBinning (UInt_t dataSize, UInt_t dataDim, Double_t *data, UInt_t nBins=100,",MatchSource.WIKI,doc/master/classTKDTreeBinning.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTKDTreeBinning.html
Safety,avoid,avoid,"orted) ;  ; Bool_t fIsSorted;  Flags if the bin edges are sorted densitywise (or by bin endges in case of 1-dim ) ;  ; Bool_t fIsSortedAsc;  Flags if the bin edges are sorted densitywise (or by bin-edge for 1D) in ascending order. ;  ; UInt_t fNBins;  The number of bins. ;  . Friends; struct CompareAsc;  ! Predicate for ascending sort ;  ; struct CompareDesc;  ! Predicate for descending sort ;  . Additional Inherited Members;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  . #include <TKDTreeBinning.h>. Inheritance diagram for TKDTreeBinning:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Member Enumeration Documentation. ◆ anonymous enum. anonymous enum. EnumeratorkAdjustBinEdges adjust bin edges to avoid overlapping with data . Definition at line 66 of file TKDTreeBinning.h. Constructor & Destructor Documentation. ◆ TKDTreeBinning() [1/4]. TKDTreeBinning::TKDTreeBinning ; (; TKDTreeBinning & ; bins). private . Disallowed copy constructor. . ◆ TKDTreeBinning() [2/4]. TKDTreeBinning::TKDTreeBinning ; (; ). Default constructor (for I/O) ; Definition at line 112 of file TKDTreeBinning.cxx. ◆ TKDTreeBinning() [3/4]. TKDTreeBinning::TKDTreeBinning ; (; UInt_t ; dataSize, . UInt_t ; dataDim, . Double_t * ; data, . UInt_t ; nBins = 100, . bool ; adjustBinEdges = false . ). Class's constructor taking the size of the data points, dimension, a data array and the number of bins (default = 100). ; It is recommended to have the number of bins as an exact divider of the data size. The data array must be organized with a stride=1 for the points and = N (the dataSize) for the dimension.; Thus data[] = x1,x2,x3,......xN, y1,y2,y3......yN, z1,z2,...........zN,....; Note that the passed dat",MatchSource.WIKI,doc/master/classTKDTreeBinning.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTKDTreeBinning.html
Security,hash,hash," Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Returns name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual const char * GetTitle () const;  Returns title of object. ;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; virtual ULong_t Hash () const;  Return hash value for this object. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns kTRUE if object inherits from class ""classname"". ;  ; virtual Bool_t InheritsFrom (const TClass *cl) const;  Returns kTRUE if object inherits from TClass cl. ;  ; virtual void Inspect () const;  Dump contents of this object in a graphics canvas. ;  ; void InvertBit (UInt_t f);  ; Bool_t IsDestructed () const;  IsDestructed. ;  ; virtual Bool_t IsEqual (const TObject *obj) const;  Default equal comparison (objects are equal if they have the same address in memory). ;  ; virtual Bool_t IsFolder () const;  Returns kTRUE in case object contains browsable objects (like containers or lists of other objects). ;  ; R__ALWAYS_INLINE Bool_t",MatchSource.WIKI,doc/master/classTKDTreeBinning.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTKDTreeBinning.html
Availability,error,error,"n()TKeyinlinestatic; ClassName() constTObjectvirtual; Clear(Option_t *option="""") overrideTNamedvirtual; Clone(const char *newname="""") const overrideTNamedvirtual; Compare(const TObject *obj) const overrideTNamedvirtual; Copy(TObject &named) const overrideTNamedvirtual; Create(Int_t nbytes, TFile *f=nullptr)TKeyprotectedvirtual; DeclFileName()TKeyinlinestatic; Delete(Option_t *option="""") overrideTKeyvirtual; DeleteBuffer()TKeyvirtual; DistancetoPrimitive(Int_t px, Int_t py)TObjectvirtual; DoError(int level, const char *location, const char *fmt, va_list va) constTObjectprotectedvirtual; Draw(Option_t *option="""")TObjectvirtual; DrawClass() constTObjectvirtual; DrawClone(Option_t *option="""") constTObjectvirtual; Dump() constTObjectvirtual; EDeprecatedStatusBits enum nameTObject; Error(const char *method, const char *msgfmt,...) constTObjectvirtual; EStatusBits enum nameTKeyprivate; Execute(const char *method, const char *params, Int_t *error=nullptr)TObjectvirtual; Execute(TMethod *method, TObjArray *params, Int_t *error=nullptr)TObjectvirtual; ExecuteEvent(Int_t event, Int_t px, Int_t py)TObjectvirtual; Fatal(const char *method, const char *msgfmt,...) constTObjectvirtual; fBitsTObjectprivate; fBufferTKeyprotected; fBufferRefTKeyprotected; fClassNameTKeyprotected; fCycleTKeyprotected; fDatimeTKeyprotected; fgDtorOnlyTObjectprivatestatic; fgObjectStatTObjectprivatestatic; FillBuffer(char *&buffer) overrideTKeyvirtual; FindObject(const char *name) constTObjectvirtual; FindObject(const TObject *obj) constTObjectvirtual; fKeylenTKeyprotected; fLeftTKeyprotected; fMotherDirTKeyprotected; fNameTNamedprotected; fNbytesTKeyprotected; fObjlenTKeyprotected; fPidOffsetTKeyprotected; fSeekKeyTKeyprotected; fSeekPdirTKeyprotected; fTitleTNamedprotected; fUniqueIDTObjectprivate; fVersionTKeyprotected; GetBuffer() constTKeyinlinevirtual; GetBufferRef() constTKeyinline; GetClassName() constTKeyinlinevirtual; GetCycle() constTKey; GetDatime() constTKeyinline; GetDrawOption() constTObj",MatchSource.WIKI,doc/master/classTKey-members.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTKey-members.html
Modifiability,inherit,inherited,". ROOT: Member List. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. TKey Member List. This is the complete list of members for TKey, including all inherited members. AbstractMethod(const char *method) constTObject; AddToTObjectTable(TObject *)TObjectprivatestatic; AppendPad(Option_t *option="""")TObjectvirtual; Browse(TBrowser *b) overrideTKeyvirtual; Build(TDirectory *motherDir, const char *classname, Long64_t filepos)TKeyprotected; CheckedHash()TObjectinline; Class()TKeystatic; Class_Name()TKeystatic; Class_Version()TKeyinlinestatic; ClassName() constTObjectvirtual; Clear(Option_t *option="""") overrideTNamedvirtual; Clone(const char *newname="""") const overrideTNamedvirtual; Compare(const TObject *obj) const overrideTNamedvirtual; Copy(TObject &named) const overrideTNamedvirtual; Create(Int_t nbytes, TFile *f=nullptr)TKeyprotectedvirtual; DeclFileName()TKeyinlinestatic; Delete(Option_t *option="""") overrideTKeyvirtual; DeleteBuffer()TKeyvirtual; DistancetoPrimitive(Int_t px, Int_t py)TObjectvirtual; DoError(int level, const char *location, const char *fmt, va_list va) constTObjectprotectedvirtual; Draw(Option_t *option="""")TObjectvirtual; DrawClass() constTObjectvirtual; DrawClone(Option_t *option="""") constTObjectvirtual; Dump() constTObjectvirtual; EDeprecatedStatusBits enum nameTObject; Error(const char *method, const char *msgfmt,...) constTObjectvirtual; EStatusBits enum nameTKeyprivate; Execute(const char *method, const char *params, Int_t *error=nullptr)TObjectvirtual; Execute(TMethod *method, TObjArray *params, Int_t *error=nullptr)TObjectvirtual; ExecuteEvent(Int_t event, Int_t px, Int_t py)TObjectvirtual; Fatal(const char *method, const char *msgfmt,...) constTObjectvirtual; fBitsTObjectprivate; fBufferTKeyprotected; fBufferRefTKeyprotected; fClassNameTKeyprotected; fCycleTKeyprotected; fDatimeTKeyprotected; fgDtorOnlyTObjectprivatestatic; fgObjectStatTObjectprivatestatic; FillBuffer(char *&buffer) overrideTKeyvirtual; FindObjec",MatchSource.WIKI,doc/master/classTKey-members.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTKey-members.html
Availability,redundant,redundant," all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; Private Types |; Private Member Functions |; List of all members ; TKey Class ReferenceInput/Output Library. ; Book space in a file, create I/O buffers, to fill them, (un)compress them. ; The TKey class includes functions to book space in a file, to create I/O buffers, to fill these buffers, to compress/uncompress data buffers. Before saving (making persistent) an object in a file, a key must be created. The key structure contains all the information to uniquely identify a persistent object in a file. . Data Member Explanation . fNbytes Number of bytes for the compressed object and key. . fObjlen Length of uncompressed object. . fDatime Date/Time when the object was written. . fKeylen Number of bytes for the key structure. . fCycle Cycle number of the object. . fSeekKey Address of the object on file (points to fNbytes). This is a redundant information used to cross-check the data base integrity. . fSeekPdir Pointer to the directory supporting this object. . fClassName Object class name. . fName Name of the object. . fTitle Title of the object. . In the 16 highest bits of fSeekPdir is encoded a pid offset. This offset is to be added to the pid index stored in the TRef object and the referenced TObject.; The TKey class is used by ROOT to:; Write an object in the current directory; Write a new ntuple buffer. The structure of a file is shown in TFile::TFile. The structure of a directory is shown in TDirectoryFile::TDirectoryFile. The TKey class is used by the TBasket class. See also TTree. ; Definition at line 28 of file TKey.h. Public Member Functions;  TKey ();  TKey default constructor. ;  ;  TKey (const char *name, const char *title, const TClass *cl, Int_t nbytes, TDirectory *motherDir);  Create a TKey object with the specified name, title for the given class. ;  ;  TKey (const TObject *obj, const char *name, Int_t bufsize, TDirectory *m",MatchSource.WIKI,doc/master/classTKey.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTKey.html
Energy Efficiency,allocate,allocated,"yet saved. ; Reimplemented from TObject.; Definition at line 428 of file TKey.cxx. ◆ Build(). void TKey::Build ; (; TDirectory * ; motherDir, . const char * ; classname, . Long64_t ; filepos . ). protected . Method used in all TKey constructor to initialize basic data fields. ; The member filepos is used to calculate correct version number of key if filepos==-1, end of file position is used. ; Definition at line 390 of file TKey.cxx. ◆ Class(). static TClass * TKey::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * TKey::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t TKey::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 116 of file TKey.h. ◆ Create(). void TKey::Create ; (; Int_t ; nbytes, . TFile * ; externFile = nullptr . ). protectedvirtual . Create a TKey object of specified size. ; If externFile!=0, key will be allocated in specified file, otherwise file of mother directory will be used. ; Definition at line 460 of file TKey.cxx. ◆ DeclFileName(). static const char * TKey::DeclFileName ; (; ). inlinestatic . ReturnsName of the file containing the class declaration ; Definition at line 116 of file TKey.h. ◆ Delete(). void TKey::Delete ; (; Option_t * ; option = """"). overridevirtual . Delete an object from the file. ; Note: the key is not deleted. You still have to call ""delete key"". This is different from the behaviour of TObject::Delete()! ; Reimplemented from TObject.; Reimplemented in TKeySQL, and TKeyXML.; Definition at line 539 of file TKey.cxx. ◆ DeleteBuffer(). void TKey::DeleteBuffer ; (; ). virtual . Delete key buffer(s). ; Reimplemented in TKeySQL, and TKeyXML.; Definition at line 560 of file TKey.cxx. ◆ FillBuffer(). void TKey::FillBuffer ; (; char *& ; buffer). overridevirtual . Encode key header into output buffer. ; Reimplemented from TNamed.; Reimplemented in TKeySQL, and TKeyXML.; Definition at line",MatchSource.WIKI,doc/master/classTKey.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTKey.html
Integrability,message,message,"ant to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ; ",MatchSource.WIKI,doc/master/classTKey.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTKey.html
Modifiability,inherit,inherited,"er);  Decode input buffer. ;  ; virtual TObject * ReadObj ();  To read a TObject* from the file. ;  ; template<typename T > ; T * ReadObject ();  To read an object (non deriving from TObject) from the file. ;  ; virtual void * ReadObjectAny (const TClass *expectedClass);  To read an object (non deriving from TObject) from the file. ;  ; virtual TObject * ReadObjWithBuffer (char *bufferRead);  To read a TObject* from bufferRead. ;  ; virtual void SetBuffer ();  ; void SetMotherDir (TDirectory *dir);  ; virtual void SetParent (const TObject *parent);  Set parent in key buffer. ;  ; Int_t Sizeof () const override;  Return the size in bytes of the key header structure. ;  ; void Streamer (TBuffer &) override;  Stream a class object. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual Int_t WriteFile (Int_t cycle=1, TFile *f=nullptr);  Write the encoded object supported by this key. ;  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; TClass * IsA () const override;  ; Bool_t IsSortable () const override;  ; void ls (Option_t *option="""") const override;  List TNamed name and title. ;  ; TNamed & operator= (const TNamed &rhs);  TNamed assignment operator. ;  ; void",MatchSource.WIKI,doc/master/classTKey.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTKey.html
Performance,perform,performance,"is read from the file into memory Once the key structure is read (via Streamer) the class identifier of the object is known. Using the class identifier we find the TClass object for this class. A TClass object contains a full description (i.e. dictionary) of the associated class. In particular the TClass object can create a new object of the class type it describes. This new object now calls its Streamer function to rebuilt itself.; Use TKey::ReadObjectAny to read any object non-derived from TObject. Note; A C style cast can only be used in the case where the final class of this object derives from TObject as a first inheritance, otherwise one must use a dynamic_cast.; Example1: simplified case; class MyClass : public TObject, public AnotherClass; TObjectMother of all ROOT objects.Definition TObject.h:41; then on return, one get away with using: MyClass *obj = (MyClass*)key->ReadObj();; Example2: Usual case (recommended unless performance is critical); MyClass *obj = dynamic_cast<MyClass*>(key->ReadObj());; which support also the more complex inheritance like: class MyClass : public AnotherClass, public TObject; Of course, dynamic_cast<> can also be used in the example 1. ; Reimplemented in TKeySQL, and TKeyXML.; Definition at line 759 of file TKey.cxx. ◆ ReadObject(). template<typename T > . T * TKey::ReadObject ; (; ). inline . To read an object (non deriving from TObject) from the file. ; This is more user friendly version of TKey::ReadObjectAny. See TKey::ReadObjectAny for more details. ; Definition at line 103 of file TKey.h. ◆ ReadObjectAny(). void * TKey::ReadObjectAny ; (; const TClass * ; expectedClass). virtual . To read an object (non deriving from TObject) from the file. ; If expectedClass is not null, we checked that that actual class of the object stored is suitable to be stored in a pointer pointing to an object of class 'expectedClass'. We also adjust the value of the returned address so that it is suitable to be cast (C-Style) a pointer pointing to a",MatchSource.WIKI,doc/master/classTKey.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTKey.html
Safety,redund,redundant," all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; Private Types |; Private Member Functions |; List of all members ; TKey Class ReferenceInput/Output Library. ; Book space in a file, create I/O buffers, to fill them, (un)compress them. ; The TKey class includes functions to book space in a file, to create I/O buffers, to fill these buffers, to compress/uncompress data buffers. Before saving (making persistent) an object in a file, a key must be created. The key structure contains all the information to uniquely identify a persistent object in a file. . Data Member Explanation . fNbytes Number of bytes for the compressed object and key. . fObjlen Length of uncompressed object. . fDatime Date/Time when the object was written. . fKeylen Number of bytes for the key structure. . fCycle Cycle number of the object. . fSeekKey Address of the object on file (points to fNbytes). This is a redundant information used to cross-check the data base integrity. . fSeekPdir Pointer to the directory supporting this object. . fClassName Object class name. . fName Name of the object. . fTitle Title of the object. . In the 16 highest bits of fSeekPdir is encoded a pid offset. This offset is to be added to the pid index stored in the TRef object and the referenced TObject.; The TKey class is used by ROOT to:; Write an object in the current directory; Write a new ntuple buffer. The structure of a file is shown in TFile::TFile. The structure of a directory is shown in TDirectoryFile::TDirectoryFile. The TKey class is used by the TBasket class. See also TTree. ; Definition at line 28 of file TKey.h. Public Member Functions;  TKey ();  TKey default constructor. ;  ;  TKey (const char *name, const char *title, const TClass *cl, Int_t nbytes, TDirectory *motherDir);  Create a TKey object with the specified name, title for the given class. ;  ;  TKey (const TObject *obj, const char *name, Int_t bufsize, TDirectory *m",MatchSource.WIKI,doc/master/classTKey.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTKey.html
Security,integrity,integrity," all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; Private Types |; Private Member Functions |; List of all members ; TKey Class ReferenceInput/Output Library. ; Book space in a file, create I/O buffers, to fill them, (un)compress them. ; The TKey class includes functions to book space in a file, to create I/O buffers, to fill these buffers, to compress/uncompress data buffers. Before saving (making persistent) an object in a file, a key must be created. The key structure contains all the information to uniquely identify a persistent object in a file. . Data Member Explanation . fNbytes Number of bytes for the compressed object and key. . fObjlen Length of uncompressed object. . fDatime Date/Time when the object was written. . fKeylen Number of bytes for the key structure. . fCycle Cycle number of the object. . fSeekKey Address of the object on file (points to fNbytes). This is a redundant information used to cross-check the data base integrity. . fSeekPdir Pointer to the directory supporting this object. . fClassName Object class name. . fName Name of the object. . fTitle Title of the object. . In the 16 highest bits of fSeekPdir is encoded a pid offset. This offset is to be added to the pid index stored in the TRef object and the referenced TObject.; The TKey class is used by ROOT to:; Write an object in the current directory; Write a new ntuple buffer. The structure of a file is shown in TFile::TFile. The structure of a directory is shown in TDirectoryFile::TDirectoryFile. The TKey class is used by the TBasket class. See also TTree. ; Definition at line 28 of file TKey.h. Public Member Functions;  TKey ();  TKey default constructor. ;  ;  TKey (const char *name, const char *title, const TClass *cl, Int_t nbytes, TDirectory *motherDir);  Create a TKey object with the specified name, title for the given class. ;  ;  TKey (const TObject *obj, const char *name, Int_t bufsize, TDirectory *m",MatchSource.WIKI,doc/master/classTKey.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTKey.html
Usability,simpl,simplified,"ey.cxx. ◆ ReadKeyBuffer(). void TKey::ReadKeyBuffer ; (; char *& ; buffer). Decode input buffer. ; Definition at line 1231 of file TKey.cxx. ◆ ReadObj(). TObject * TKey::ReadObj ; (; ). virtual . To read a TObject* from the file. ; The object associated to this key is read from the file into memory Once the key structure is read (via Streamer) the class identifier of the object is known. Using the class identifier we find the TClass object for this class. A TClass object contains a full description (i.e. dictionary) of the associated class. In particular the TClass object can create a new object of the class type it describes. This new object now calls its Streamer function to rebuilt itself.; Use TKey::ReadObjectAny to read any object non-derived from TObject. Note; A C style cast can only be used in the case where the final class of this object derives from TObject as a first inheritance, otherwise one must use a dynamic_cast.; Example1: simplified case; class MyClass : public TObject, public AnotherClass; TObjectMother of all ROOT objects.Definition TObject.h:41; then on return, one get away with using: MyClass *obj = (MyClass*)key->ReadObj();; Example2: Usual case (recommended unless performance is critical); MyClass *obj = dynamic_cast<MyClass*>(key->ReadObj());; which support also the more complex inheritance like: class MyClass : public AnotherClass, public TObject; Of course, dynamic_cast<> can also be used in the example 1. ; Reimplemented in TKeySQL, and TKeyXML.; Definition at line 759 of file TKey.cxx. ◆ ReadObject(). template<typename T > . T * TKey::ReadObject ; (; ). inline . To read an object (non deriving from TObject) from the file. ; This is more user friendly version of TKey::ReadObjectAny. See TKey::ReadObjectAny for more details. ; Definition at line 103 of file TKey.h. ◆ ReadObjectAny(). void * TKey::ReadObjectAny ; (; const TClass * ; expectedClass). virtual . To read an object (non deriving from TObject) from the file. ; If expectedClass is ",MatchSource.WIKI,doc/master/classTKey.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTKey.html
Availability,error,error,"option="""");  Append graphics object to current pad. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t ",MatchSource.WIKI,doc/master/classTKeyMapFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTKeyMapFile.html
Integrability,message,message,"option="""");  Append graphics object to current pad. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t ",MatchSource.WIKI,doc/master/classTKeyMapFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTKeyMapFile.html
Modifiability,inherit,inherited," Member Functions |; Private Attributes |; List of all members ; TKeyMapFile Class ReferenceInput/Output Library. ; Utility class for browsing TMapFile objects. ; When the browser is invoked for a TMapFile, a TKeyMapFile object is created for each object in the mapped file. When a TKeyMapFile object is clicked in the browser, a new copy of this object is copied into the local directory and the action corresponding to object->Browse is executed (typically Draw). ; Definition at line 20 of file TKeyMapFile.h. Public Member Functions;  TKeyMapFile ();  Default constructor. ;  ;  TKeyMapFile (const char *name, const char *classname, TMapFile *mapfile);  Constructor. ;  ;  ~TKeyMapFile () override;  ; void Browse (TBrowser *b) override;  Browse the contained objects. ;  ; TClass * IsA () const override;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; TClass * IsA () const override;  ; Bool_t IsSortable () const override;  ; void ls (Option_t *option="""") const override;",MatchSource.WIKI,doc/master/classTKeyMapFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTKeyMapFile.html
Security,hash,hash," override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; TClass * IsA () const override;  ; Bool_t IsSortable () const override;  ; void ls (Option_t *option="""") const override;  List TNamed name and title. ;  ; TNamed & operator= (const TNamed &rhs);  TNamed assignment operator. ;  ; void Print (Option_t *option="""") const override;  Print TNamed name and title. ;  ; virtual void SetName (const char *name);  Set the name of the TNamed. ;  ; virtual void SetNameTitle (const char *name, const char *title);  Set all the TNamed parameters (name and title). ;  ; virtual void SetTitle (const char *title="""");  Set the title of the TNamed. ;  ; virtual Int_t Sizeof () const;  Return size of the TNamed part of the TObject. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;",MatchSource.WIKI,doc/master/classTKeyMapFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTKeyMapFile.html
Availability,error,error," final;  Delete key buffer(s). ;  ; void FillBuffer (char *&) final;  Encode key header into output buffer. ;  ; char * GetBuffer () const final;  ; Long64_t GetDBDirId () const;  return sql id of parent directory ;  ; Long64_t GetDBKeyId () const;  ; Long64_t GetDBObjId () const;  ; Long64_t GetSeekKey () const final;  ; Long64_t GetSeekPdir () const final;  ; TClass * IsA () const override;  ; Bool_t IsKeyModified (const char *keyname, const char *keytitle, const char *keydatime, Int_t cycle, const char *classname);  Compares keydata with provided and return kTRUE if key was modified Used in TFile::StreamKeysForDirectory() method to verify data for that keys should be updated. ;  ; void Keep () final;  Set the ""KEEP"" status. ;  ; Int_t Read (TObject *obj) final;  To read an object from the file. ;  ; void ReadBuffer (char *&) final;  Decode input buffer. ;  ; Bool_t ReadFile () final;  Read the key structure from the file. ;  ; TObject * ReadObj () final;  Read object derived from TObject class If it is not TObject or in case of error, return 0. ;  ; void * ReadObjectAny (const TClass *expectedClass) final;  Read object of any type from SQL database. ;  ; TObject * ReadObjWithBuffer (char *bufferRead) final;  Read object derived from TObject class If it is not TObject or in case of error, return 0. ;  ; void SetBuffer () final;  ; void Streamer (TBuffer &) override;  Stream a class object. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; Int_t WriteFile (Int_t=1, TFile *=nullptr) final;  Write the encoded object supported by this key. ;  ;  Public Member Functions inherited from TKey;  TKey ();  TKey default constructor. ;  ;  TKey (const char *name, const char *title, const TClass *cl, Int_t nbytes, TDirectory *motherDir);  Create a TKey object with the specified name, title for the given class. ;  ;  TKey (const TObject *obj, const char *name, Int_t bufsize, TDirectory *motherDir);  Create a TKey object for a TObject* and fill output buffer. ",MatchSource.WIKI,doc/master/classTKeySQL.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTKeySQL.html
Deployability,update,updated," ;  TKeySQL (TDirectory *mother, const void *obj, const TClass *cl, const char *name, const char *title=nullptr);  Creates TKeySQL and convert obj data to TSQLStructure via TBufferSQL2. ;  ;  TKeySQL (TDirectory *mother, Long64_t keyid, Long64_t objid, const char *name, const char *title, const char *keydatetime, Int_t cycle, const char *classname);  Create TKeySQL object, which corresponds to single entry in keys table. ;  ;  ~TKeySQL () override=default;  ; void Delete (Option_t *option="""") final;  Removes key from current directory Note: TKeySQL object is not deleted. ;  ; void DeleteBuffer () final;  Delete key buffer(s). ;  ; void FillBuffer (char *&) final;  Encode key header into output buffer. ;  ; char * GetBuffer () const final;  ; Long64_t GetDBDirId () const;  return sql id of parent directory ;  ; Long64_t GetDBKeyId () const;  ; Long64_t GetDBObjId () const;  ; Long64_t GetSeekKey () const final;  ; Long64_t GetSeekPdir () const final;  ; TClass * IsA () const override;  ; Bool_t IsKeyModified (const char *keyname, const char *keytitle, const char *keydatime, Int_t cycle, const char *classname);  Compares keydata with provided and return kTRUE if key was modified Used in TFile::StreamKeysForDirectory() method to verify data for that keys should be updated. ;  ; void Keep () final;  Set the ""KEEP"" status. ;  ; Int_t Read (TObject *obj) final;  To read an object from the file. ;  ; void ReadBuffer (char *&) final;  Decode input buffer. ;  ; Bool_t ReadFile () final;  Read the key structure from the file. ;  ; TObject * ReadObj () final;  Read object derived from TObject class If it is not TObject or in case of error, return 0. ;  ; void * ReadObjectAny (const TClass *expectedClass) final;  Read object of any type from SQL database. ;  ; TObject * ReadObjWithBuffer (char *bufferRead) final;  Read object derived from TObject class If it is not TObject or in case of error, return 0. ;  ; void SetBuffer () final;  ; void Streamer (TBuffer &) override;  Strea",MatchSource.WIKI,doc/master/classTKeySQL.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTKeySQL.html
Integrability,message,message,"ant to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ; ",MatchSource.WIKI,doc/master/classTKeySQL.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTKeySQL.html
Modifiability,inherit,inherited,"ory() method to verify data for that keys should be updated. ;  ; void Keep () final;  Set the ""KEEP"" status. ;  ; Int_t Read (TObject *obj) final;  To read an object from the file. ;  ; void ReadBuffer (char *&) final;  Decode input buffer. ;  ; Bool_t ReadFile () final;  Read the key structure from the file. ;  ; TObject * ReadObj () final;  Read object derived from TObject class If it is not TObject or in case of error, return 0. ;  ; void * ReadObjectAny (const TClass *expectedClass) final;  Read object of any type from SQL database. ;  ; TObject * ReadObjWithBuffer (char *bufferRead) final;  Read object derived from TObject class If it is not TObject or in case of error, return 0. ;  ; void SetBuffer () final;  ; void Streamer (TBuffer &) override;  Stream a class object. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; Int_t WriteFile (Int_t=1, TFile *=nullptr) final;  Write the encoded object supported by this key. ;  ;  Public Member Functions inherited from TKey;  TKey ();  TKey default constructor. ;  ;  TKey (const char *name, const char *title, const TClass *cl, Int_t nbytes, TDirectory *motherDir);  Create a TKey object with the specified name, title for the given class. ;  ;  TKey (const TObject *obj, const char *name, Int_t bufsize, TDirectory *motherDir);  Create a TKey object for a TObject* and fill output buffer. ;  ;  TKey (const TString &name, const TString &title, const TClass *cl, Int_t nbytes, TDirectory *motherDir);  Create a TKey object with the specified name, title for the given class. ;  ;  TKey (const void *obj, const TClass *cl, const char *name, Int_t bufsize, TDirectory *motherDir);  Create a TKey object for any object obj of class cl d and fill output buffer. ;  ;  TKey (Long64_t pointer, Int_t nbytes, TDirectory *motherDir=nullptr);  Create a TKey object to read keys. ;  ;  TKey (TDirectory *motherDir);  TKey default constructor. ;  ;  TKey (TDirectory *motherDir, const TKey &orig, UShort_t pidOffset);  Copy a T",MatchSource.WIKI,doc/master/classTKeySQL.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTKeySQL.html
Security,hash,hash,"parent);  Set parent in key buffer. ;  ; Int_t Sizeof () const override;  Return the size in bytes of the key header structure. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; TClass * IsA () const override;  ; Bool_t IsSortable () const override;  ; void ls (Option_t *option="""") const override;  List TNamed name and title. ;  ; TNamed & operator= (const TNamed &rhs);  TNamed assignment operator. ;  ; void Print (Option_t *option="""") const override;  Print TNamed name and title. ;  ; virtual void SetName (const char *name);  Set the name of the TNamed. ;  ; virtual void SetNameTitle (const char *name, const char *title);  Set all the TNamed parameters (name and title). ;  ; virtual void SetTitle (const char *title="""");  Set the title of the TNamed. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *",MatchSource.WIKI,doc/master/classTKeySQL.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTKeySQL.html
Availability,error,error," void Delete (Option_t *option="""") final;  Delete key from current directory Note: TKeyXML object is not deleted. ;  ; void DeleteBuffer () final;  Delete key buffer(s). ;  ; void FillBuffer (char *&) final;  Encode key header into output buffer. ;  ; char * GetBuffer () const final;  ; Long64_t GetKeyId () const;  ; Long64_t GetSeekKey () const final;  ; Long64_t GetSeekPdir () const final;  ; TClass * IsA () const override;  ; Bool_t IsSubdir () const;  ; void Keep () final;  Set the ""KEEP"" status. ;  ; XMLNodePointer_t KeyNode () const;  ; Int_t Read (TObject *tobj) final;  To read an object from the file. ;  ; void ReadBuffer (char *&) final;  Decode input buffer. ;  ; Bool_t ReadFile () final;  Read the key structure from the file. ;  ; TObject * ReadObj () final;  read object derived from TObject class, from key if it is not TObject or in case of error, return nullptr ;  ; void * ReadObjectAny (const TClass *expectedClass) final;  read object of any type ;  ; TObject * ReadObjWithBuffer (char *bufferRead) final;  read object derived from TObject class, from key if it is not TObject or in case of error, return nullptr ;  ; void SetBuffer () final;  ; void SetSubir ();  ; void Streamer (TBuffer &) override;  Stream a class object. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; void UpdateAttributes ();  update key attributes in key node ;  ; void UpdateObject (TObject *obj);  updates object, stored in the node Used for TDirectory data update ;  ; Int_t WriteFile (Int_t=1, TFile *=nullptr) final;  Write the encoded object supported by this key. ;  ;  Public Member Functions inherited from TKey;  TKey ();  TKey default constructor. ;  ;  TKey (const char *name, const char *title, const TClass *cl, Int_t nbytes, TDirectory *motherDir);  Create a TKey object with the specified name, title for the given class. ;  ;  TKey (const TObject *obj, const char *name, Int_t bufsize, TDirectory *motherDir);  Create a TKey object for a TObject* and fill o",MatchSource.WIKI,doc/master/classTKeyXML.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTKeyXML.html
Deployability,update,update,"ide;  ; Bool_t IsSubdir () const;  ; void Keep () final;  Set the ""KEEP"" status. ;  ; XMLNodePointer_t KeyNode () const;  ; Int_t Read (TObject *tobj) final;  To read an object from the file. ;  ; void ReadBuffer (char *&) final;  Decode input buffer. ;  ; Bool_t ReadFile () final;  Read the key structure from the file. ;  ; TObject * ReadObj () final;  read object derived from TObject class, from key if it is not TObject or in case of error, return nullptr ;  ; void * ReadObjectAny (const TClass *expectedClass) final;  read object of any type ;  ; TObject * ReadObjWithBuffer (char *bufferRead) final;  read object derived from TObject class, from key if it is not TObject or in case of error, return nullptr ;  ; void SetBuffer () final;  ; void SetSubir ();  ; void Streamer (TBuffer &) override;  Stream a class object. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; void UpdateAttributes ();  update key attributes in key node ;  ; void UpdateObject (TObject *obj);  updates object, stored in the node Used for TDirectory data update ;  ; Int_t WriteFile (Int_t=1, TFile *=nullptr) final;  Write the encoded object supported by this key. ;  ;  Public Member Functions inherited from TKey;  TKey ();  TKey default constructor. ;  ;  TKey (const char *name, const char *title, const TClass *cl, Int_t nbytes, TDirectory *motherDir);  Create a TKey object with the specified name, title for the given class. ;  ;  TKey (const TObject *obj, const char *name, Int_t bufsize, TDirectory *motherDir);  Create a TKey object for a TObject* and fill output buffer. ;  ;  TKey (const TString &name, const TString &title, const TClass *cl, Int_t nbytes, TDirectory *motherDir);  Create a TKey object with the specified name, title for the given class. ;  ;  TKey (const void *obj, const TClass *cl, const char *name, Int_t bufsize, TDirectory *motherDir);  Create a TKey object for any object obj of class cl d and fill output buffer. ;  ;  TKey (Long64_t pointer, Int_t nbytes,",MatchSource.WIKI,doc/master/classTKeyXML.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTKeyXML.html
Integrability,message,message,"ant to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ; ",MatchSource.WIKI,doc/master/classTKeyXML.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTKeyXML.html
Modifiability,inherit,inherited,"har *&) final;  Decode input buffer. ;  ; Bool_t ReadFile () final;  Read the key structure from the file. ;  ; TObject * ReadObj () final;  read object derived from TObject class, from key if it is not TObject or in case of error, return nullptr ;  ; void * ReadObjectAny (const TClass *expectedClass) final;  read object of any type ;  ; TObject * ReadObjWithBuffer (char *bufferRead) final;  read object derived from TObject class, from key if it is not TObject or in case of error, return nullptr ;  ; void SetBuffer () final;  ; void SetSubir ();  ; void Streamer (TBuffer &) override;  Stream a class object. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; void UpdateAttributes ();  update key attributes in key node ;  ; void UpdateObject (TObject *obj);  updates object, stored in the node Used for TDirectory data update ;  ; Int_t WriteFile (Int_t=1, TFile *=nullptr) final;  Write the encoded object supported by this key. ;  ;  Public Member Functions inherited from TKey;  TKey ();  TKey default constructor. ;  ;  TKey (const char *name, const char *title, const TClass *cl, Int_t nbytes, TDirectory *motherDir);  Create a TKey object with the specified name, title for the given class. ;  ;  TKey (const TObject *obj, const char *name, Int_t bufsize, TDirectory *motherDir);  Create a TKey object for a TObject* and fill output buffer. ;  ;  TKey (const TString &name, const TString &title, const TClass *cl, Int_t nbytes, TDirectory *motherDir);  Create a TKey object with the specified name, title for the given class. ;  ;  TKey (const void *obj, const TClass *cl, const char *name, Int_t bufsize, TDirectory *motherDir);  Create a TKey object for any object obj of class cl d and fill output buffer. ;  ;  TKey (Long64_t pointer, Int_t nbytes, TDirectory *motherDir=nullptr);  Create a TKey object to read keys. ;  ;  TKey (TDirectory *motherDir);  TKey default constructor. ;  ;  TKey (TDirectory *motherDir, const TKey &orig, UShort_t pidOffset);  Copy a T",MatchSource.WIKI,doc/master/classTKeyXML.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTKeyXML.html
Security,hash,hash,"parent);  Set parent in key buffer. ;  ; Int_t Sizeof () const override;  Return the size in bytes of the key header structure. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; TClass * IsA () const override;  ; Bool_t IsSortable () const override;  ; void ls (Option_t *option="""") const override;  List TNamed name and title. ;  ; TNamed & operator= (const TNamed &rhs);  TNamed assignment operator. ;  ; void Print (Option_t *option="""") const override;  Print TNamed name and title. ;  ; virtual void SetName (const char *name);  Set the name of the TNamed. ;  ; virtual void SetNameTitle (const char *name, const char *title);  Set all the TNamed parameters (name and title). ;  ; virtual void SetTitle (const char *title="""");  Set the title of the TNamed. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *",MatchSource.WIKI,doc/master/classTKeyXML.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTKeyXML.html
Availability,error,error,"onst char *text)TLatex; DrawLatexNDC(Double_t x, Double_t y, const char *text)TLatex; DrawLine(Double_t x1, Double_t y1, Double_t x2, Double_t y2, const TextSpec_t &spec)TLatexprotected; DrawParenthesis(Double_t x1, Double_t y1, Double_t r1, Double_t r2, Double_t phimin, Double_t phimax, const TextSpec_t &spec)TLatexprotected; DrawPolyLine(Int_t npoints, Double_t *xx, Double_t *yy, const TextSpec_t &spec, Double_t scale_width=0.)TLatexprotected; DrawText(Double_t x, Double_t y, const char *text)TTextvirtual; DrawText(Double_t x, Double_t y, const wchar_t *text)TTextvirtual; DrawTextNDC(Double_t x, Double_t y, const char *text)TTextvirtual; DrawTextNDC(Double_t x, Double_t y, const wchar_t *text)TTextvirtual; Dump() constTObjectvirtual; EDeprecatedStatusBits enum nameTObject; Error(const char *method, const char *msgfmt,...) constTObjectvirtual; EStatusBits enum nameTObject; Execute(const char *method, const char *params, Int_t *error=nullptr)TObjectvirtual; Execute(TMethod *method, TObjArray *params, Int_t *error=nullptr)TObjectvirtual; ExecuteEvent(Int_t event, Int_t px, Int_t py) overrideTTextvirtual; Fatal(const char *method, const char *msgfmt,...) constTObjectvirtual; fBitsTObjectprivate; fErrorTLatexprotected; fFactorPosTLatexprotected; fFactorSizeTLatexprotected; fgDtorOnlyTObjectprivatestatic; fgObjectStatTObjectprivatestatic; FillBuffer(char *&buffer)TNamedvirtual; FindObject(const char *name) constTObjectvirtual; FindObject(const TObject *obj) constTObjectvirtual; FirstParse(Double_t angle, Double_t size, const Char_t *text)TLatexprotected; fItalicTLatexprotected; fLimitFactorSizeTLatexprotected; fLineColorTAttLineprotected; fLineStyleTAttLineprotected; fLineWidthTAttLineprotected; fNameTNamedprotected; fOriginSizeTLatexprotected; fShowTLatexprotected; fTabSizeTLatexprotected; fTextAlignTAttTextprotected; fTextAngleTAttTextprotected; fTextColorTAttTextprotected; fTextFontTAttTextprotected; fTextSizeTAttTextprotected; fTitleTNamedprotected; fUniqueIDTObjectp",MatchSource.WIKI,doc/master/classTLatex-members.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTLatex-members.html
Modifiability,inherit,inherited,". ROOT: Member List. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. TLatex Member List. This is the complete list of members for TLatex, including all inherited members. AbstractMethod(const char *method) constTObject; AddToTObjectTable(TObject *)TObjectprivatestatic; Anal1(const TextSpec_t &spec, const Char_t *t, Int_t length)TLatexprotected; Analyse(Double_t x, Double_t y, const TextSpec_t &spec, const Char_t *t, Int_t length)TLatexprotected; AppendPad(Option_t *option="""")TObjectvirtual; Browse(TBrowser *b)TObjectvirtual; CheckedHash()TObjectinline; CheckLatexSyntax(TString &text)TLatexprotected; Class()TLatexstatic; Class_Name()TLatexstatic; Class_Version()TLatexinlinestatic; ClassName() constTObjectvirtual; Clear(Option_t *option="""") overrideTNamedvirtual; Clone(const char *newname="""") const overrideTNamedvirtual; Compare(const TObject *obj) const overrideTNamedvirtual; Copy(TObject &text) const overrideTLatexvirtual; TText::TAttText::Copy(TAttText &atttext) constTAttText; TAttLine::Copy(TAttLine &attline) constTAttLine; DeclFileName()TLatexinlinestatic; Delete(Option_t *option="""")TObjectvirtual; DistancetoLine(Int_t px, Int_t py, Double_t xp1, Double_t yp1, Double_t xp2, Double_t yp2)TAttLine; DistancetoPrimitive(Int_t px, Int_t py) overrideTTextvirtual; DoError(int level, const char *location, const char *fmt, va_list va) constTObjectprotectedvirtual; Draw(Option_t *option="""")TObjectvirtual; DrawCircle(Double_t x1, Double_t y1, Double_t r, const TextSpec_t &spec)TLatexprotected; DrawClass() constTObjectvirtual; DrawClone(Option_t *option="""") constTObjectvirtual; DrawLatex(Double_t x, Double_t y, const char *text)TLatex; DrawLatexNDC(Double_t x, Double_t y, const char *text)TLatex; DrawLine(Double_t x1, Double_t y1, Double_t x2, Double_t y2, const TextSpec_t &spec)TLatexprotected; DrawParenthesis(Double_t x1, Double_t y1, Double_t r1, Double_t r2, Double_t phimin, Double_t phimax, const TextSpec_t &spec)TLatexprotected; DrawPoly",MatchSource.WIKI,doc/master/classTLatex-members.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTLatex-members.html
Availability,avail,available,"re root of its argument; it has an optional first argument for other roots.; Examples:. Mathematical Symbols; TLatex can display dozens of special mathematical symbols. A few of them, such as + and > , are produced by typing the corresponding keyboard character. Others are obtained with the commands in the following table:. Delimiters; TLatex provides 4 kinds of proportional delimiters: #[]{....} or ""a la"" Latex #left[.....#right] : big square brackets; #{}{....} or #left{.....#right} : big curly brackets; #||{....} or #left|.....#right| : big absolute value symbols; #(){....} or #left(.....#right) : big parentheses; . Greek Letters; The command to produce a lowercase Greek letter is obtained by adding a # to the name of the letter. For an uppercase Greek letter, just capitalize the first letter of the command name. Some letters have two representations. The name of the second one (the ""variation"") starts with ""var"". The following table gives the complete list:. Accents; Several kind of accents are available:. The special sign: #slash draws a slash on top of the text between brackets:. Bar and vectors sign are done the following way:. Changing Style; One can change the font, the text color, or the text size at any time using : #font[font-number]{...}, #color[color-number]{...} and #scale[scale-factor]{...}; Examples:. Alignment Rules; The TText alignment rules apply to the TLatex objects with one exception concerning the vertical alignment:. if the vertical alignment = 1 , subscripts are not taken into account; if the vertical alignment = 0 , the text is aligned to the box surrounding the full text with sub and superscripts. This is illustrated by the following example:; {; TCanvas Tlva(""Tlva"",""Tlva"",500,500);; Tlva.SetGrid();; Tlva.DrawFrame(0,0,1,1);; const char *longstring = ""K_{S}... K^{*0}... #frac{2s}{#pi#alpha^{2}} #frac{d#sigma}{dcos#theta} (e^{+}e^{-} #rightarrow f#bar{f} ) = #left| #frac{1}{1 - #Delta#alpha} #right|^{2} (1+cos^{2}#theta)"";; ; TLatex latex;;",MatchSource.WIKI,doc/master/classTLatex.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTLatex.html
Integrability,message,message," (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () co",MatchSource.WIKI,doc/master/classTLatex.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTLatex.html
Modifiability,inherit,inherited,"l)Definition TPaveText.h:61; TPaveText::Drawvoid Draw(Option_t *option="""") overrideDraw this pavetext with its current attributes.Definition TPaveText.cxx:242; ptTPaveText * ptDefinition entrylist_figure1.C:7. Interface to TMathText; The class TMathText is a TeX math formulae interpreter. It uses plain TeX syntax and uses ""\\"" as control instead of ""#"". If a piece of text containing; ""\"" is given to TLatex then TMathText is automatically invoked. Therefore, as histograms' titles, axis titles, labels etc ... are drawn using TLatex, the TMathText syntax can be used for them also. ; Definition at line 18 of file TLatex.h. Classes; struct  TextSpec_t;  TLatex helper struct holding the attributes of a piece of text. More...;  ; class  TLatexFormSize;  TLatex helper class used to compute the size of a portion of a formula. More...;  . Public Types; enum  { kTextNDC = (1ULL << ( 14 )); };  ;  Public Types inherited from TText; enum  { kTextNDC = (1ULL << ( 14 )); };  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  . Public Member Functions;  TLatex ();  Default constructor. ;  ;  TLatex (const TLatex &text);  Copy constructor. ;  ;  TLatex (Double_t x, Double_t y, const char *text);  Normal constructor. ;  ;  ~TLatex () override;  Destructor. ;  ; void Copy (TObject &text) const override;  Copy this TLatex object to another TLatex. ;  ; TLatex * DrawLatex (Double_t x, Double_t y, const char *tex",MatchSource.WIKI,doc/master/classTLatex.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTLatex.html
Security,hash,hash,"t x);  ; virtual void SetY (Double_t y);  ; void Streamer (TBuffer &) override;  Stream an object of class TText. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; Bool_t IsSortable () const override;  ; TNamed & operator= (const TNamed &rhs);  TNamed assignment operator. ;  ; virtual void SetName (const char *name);  Set the name of the TNamed. ;  ; virtual void SetNameTitle (const char *name, const char *title);  Set all the TNamed parameters (name and title). ;  ; virtual void SetTitle (const char *title="""");  Set the title of the TNamed. ;  ; virtual Int_t Sizeof () const;  Return size of the TNamed part of the TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to cu",MatchSource.WIKI,doc/master/classTLatex.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTLatex.html
Availability,error,error,"Version()TLeafinlinestatic; ClassName() constTObjectvirtual; Clear(Option_t *option="""") overrideTNamedvirtual; Clone(const char *newname="""") const overrideTNamedvirtual; Compare(const TObject *obj) const overrideTNamedvirtual; Copy(TObject &named) const overrideTNamedvirtual; Counts_t typedefTLeafprotected; DeclFileName()TLeafinlinestatic; Delete(Option_t *option="""")TObjectvirtual; DeserializeType enum nameTLeaf; DistancetoPrimitive(Int_t px, Int_t py)TObjectvirtual; DoError(int level, const char *location, const char *fmt, va_list va) constTObjectprotectedvirtual; Draw(Option_t *option="""")TObjectvirtual; DrawClass() constTObjectvirtual; DrawClone(Option_t *option="""") constTObjectvirtual; Dump() constTObjectvirtual; EDeprecatedStatusBits enum nameTObject; Error(const char *method, const char *msgfmt,...) constTObjectvirtual; EStatusBits enum nameTLeaf; Execute(const char *method, const char *params, Int_t *error=nullptr)TObjectvirtual; Execute(TMethod *method, TObjArray *params, Int_t *error=nullptr)TObjectvirtual; ExecuteEvent(Int_t event, Int_t px, Int_t py)TObjectvirtual; Export(TClonesArray *, Int_t)TLeafinlinevirtual; Fatal(const char *method, const char *msgfmt,...) constTObjectvirtual; fBitsTObjectprivate; fBranchTLeafprotected; fgDtorOnlyTObjectprivatestatic; fgObjectStatTObjectprivatestatic; FillBasket(TBuffer &b)TLeafvirtual; FillBuffer(char *&buffer)TNamedvirtual; FindObject(const char *name) constTObjectvirtual; FindObject(const TObject *obj) constTObjectvirtual; fIsRangeTLeafprotected; fIsUnsignedTLeafprotected; fLeafCountTLeafprotected; fLeafCountValuesTLeafprotected; fLenTLeafprotected; fLenTypeTLeafprotected; fNameTNamedprotected; fNdataTLeafprotected; fOffsetTLeafprotected; fTitleTNamedprotected; fUniqueIDTObjectprivate; GenerateOffsetArray(Int_t base, Int_t events)TLeafinlinevirtual; GenerateOffsetArrayBase(Int_t base, Int_t events) constTLeafprotected; GetBranch() constTLeafinline; GetDeserializeType() constTLeafinlinevirtual; GetDrawOption() const",MatchSource.WIKI,doc/master/classTLeaf-members.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTLeaf-members.html
Modifiability,inherit,inherited,". ROOT: Member List. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. TLeaf Member List. This is the complete list of members for TLeaf, including all inherited members. AbstractMethod(const char *method) constTObject; AddToTObjectTable(TObject *)TObjectprivatestatic; AppendPad(Option_t *option="""")TObjectvirtual; Browse(TBrowser *b) overrideTLeafvirtual; CanGenerateOffsetArray()TLeafinlinevirtual; CheckedHash()TObjectinline; Class()TLeafstatic; Class_Name()TLeafstatic; Class_Version()TLeafinlinestatic; ClassName() constTObjectvirtual; Clear(Option_t *option="""") overrideTNamedvirtual; Clone(const char *newname="""") const overrideTNamedvirtual; Compare(const TObject *obj) const overrideTNamedvirtual; Copy(TObject &named) const overrideTNamedvirtual; Counts_t typedefTLeafprotected; DeclFileName()TLeafinlinestatic; Delete(Option_t *option="""")TObjectvirtual; DeserializeType enum nameTLeaf; DistancetoPrimitive(Int_t px, Int_t py)TObjectvirtual; DoError(int level, const char *location, const char *fmt, va_list va) constTObjectprotectedvirtual; Draw(Option_t *option="""")TObjectvirtual; DrawClass() constTObjectvirtual; DrawClone(Option_t *option="""") constTObjectvirtual; Dump() constTObjectvirtual; EDeprecatedStatusBits enum nameTObject; Error(const char *method, const char *msgfmt,...) constTObjectvirtual; EStatusBits enum nameTLeaf; Execute(const char *method, const char *params, Int_t *error=nullptr)TObjectvirtual; Execute(TMethod *method, TObjArray *params, Int_t *error=nullptr)TObjectvirtual; ExecuteEvent(Int_t event, Int_t px, Int_t py)TObjectvirtual; Export(TClonesArray *, Int_t)TLeafinlinevirtual; Fatal(const char *method, const char *msgfmt,...) constTObjectvirtual; fBitsTObjectprivate; fBranchTLeafprotected; fgDtorOnlyTObjectprivatestatic; fgObjectStatTObjectprivatestatic; FillBasket(TBuffer &b)TLeafvirtual; FillBuffer(char *&buffer)TNamedvirtual; FindObject(const char *name) constTObjectvirtual; FindObject(const TObject *obj) constTObje",MatchSource.WIKI,doc/master/classTLeaf-members.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTLeaf-members.html
Availability,error,error,"option="""");  Append graphics object to current pad. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t ",MatchSource.WIKI,doc/master/classTLeaf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTLeaf.html
Integrability,depend,depending," |; Protected Member Functions |; Protected Attributes |; Private Member Functions |; List of all members ; TLeaf Class ReferenceTree Library. ; A TLeaf describes individual elements of a TBranch See TBranch structure in TTree. ; A TTree object is a list of TBranch. A TBranch object is a list of TLeaf. In most cases, the TBranch will have one TLeaf. A TLeaf describes the branch data types and holds the data.; A few notes about the data held by the leaf. It can contain:; a single object or primitive (e.g., one float),; a fixed-number of objects (e.g., each entry has two floats). The number of elements per entry is saved in fLen.; a dynamic number of primitives. The number of objects in each entry is saved in the fLeafCount branch. Note options (2) and (3) can combined - if fLeafCount says an entry has 3 elements and fLen is 2, then there will be 6 objects in that entry.; Additionally, fNdata is transient and generated on read to determine the necessary size of a buffer to hold event data; depending on the call-site, it may be sized larger than the number of elements ; Definition at line 57 of file TLeaf.h. Classes; struct  GetValueHelper;  ; struct  GetValueHelper< Long64_t >;  ; struct  GetValueHelper< LongDouble_t >;  ; struct  GetValueHelper< ULong64_t >;  ; struct  LeafCountValues;  . Public Types; enum class  DeserializeType { ;   kInvalid = 0; , kExternal; , kDestructive = kExternal; , kInPlace; , ;   kZeroCopy. };  ; enum  EStatusBits { kIndirectAddress = (1ULL << ( 11 )); , kNewValue = (1ULL << ( 12 )); };  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , ",MatchSource.WIKI,doc/master/classTLeaf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTLeaf.html
Modifiability,inherit,inherited,". The number of elements per entry is saved in fLen.; a dynamic number of primitives. The number of objects in each entry is saved in the fLeafCount branch. Note options (2) and (3) can combined - if fLeafCount says an entry has 3 elements and fLen is 2, then there will be 6 objects in that entry.; Additionally, fNdata is transient and generated on read to determine the necessary size of a buffer to hold event data; depending on the call-site, it may be sized larger than the number of elements ; Definition at line 57 of file TLeaf.h. Classes; struct  GetValueHelper;  ; struct  GetValueHelper< Long64_t >;  ; struct  GetValueHelper< LongDouble_t >;  ; struct  GetValueHelper< ULong64_t >;  ; struct  LeafCountValues;  . Public Types; enum class  DeserializeType { ;   kInvalid = 0; , kExternal; , kDestructive = kExternal; , kInPlace; , ;   kZeroCopy. };  ; enum  EStatusBits { kIndirectAddress = (1ULL << ( 11 )); , kNewValue = (1ULL << ( 12 )); };  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  . Public Member Functions;  TLeaf ();  ;  TLeaf (TBranch *parent, const char *name, const char *type);  Create a Leaf. ;  ;  ~TLeaf () override;  Destructor. ;  ; void Browse (TBrowser *b) override;  Browse the content of this leaf. ;  ; virtual bool CanGenerateOffsetArray ();  ; virtual void Export (TClonesArray *, Int_t);  ; virtual void FillBasket (TBuffer &b);  Pack leaf elements in Basket output b",MatchSource.WIKI,doc/master/classTLeaf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTLeaf.html
Security,hash,hash," (TBuffer &) override;  Stream a class object. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; TClass * IsA () const override;  ; Bool_t IsSortable () const override;  ; void ls (Option_t *option="""") const override;  List TNamed name and title. ;  ; TNamed & operator= (const TNamed &rhs);  TNamed assignment operator. ;  ; void Print (Option_t *option="""") const override;  Print TNamed name and title. ;  ; virtual void SetName (const char *name);  Set the name of the TNamed. ;  ; virtual void SetNameTitle (const char *name, const char *title);  Set all the TNamed parameters (name and title). ;  ; virtual void SetTitle (const char *title="""");  Set the title of the TNamed. ;  ; virtual Int_t Sizeof () const;  Return size of the TNamed part of the TObject. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;",MatchSource.WIKI,doc/master/classTLeaf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTLeaf.html
Availability,error,error,"option="""");  Append graphics object to current pad. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t ",MatchSource.WIKI,doc/master/classTLeafB.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTLeafB.html
Integrability,rout,routine,"ariable size, return a pointer to the TLeaf that stores such size. ;  ; virtual TLeaf * GetLeafCounter (Int_t &countval) const;  Return a pointer to the counter of this leaf (if any) or store the number of elements that the leaf contains in countval. ;  ; virtual const Counts_t * GetLeafCountValues (Long64_t start, Long64_t len);  If this branch is a branch count, return the set of collection size for the entry range requested start: first entry to read and return information about len: number of entries to read. ;  ; virtual Int_t GetLen () const;  Return the number of effective elements of this leaf, for the current entry. ;  ; virtual Int_t GetLenStatic () const;  Return the fixed length of this leaf. ;  ; virtual Int_t GetLenType () const;  ; virtual Int_t GetNdata () const;  ; virtual Int_t GetOffset () const;  ; template<typename T > ; T GetTypedValue (Int_t i=0) const;  ; virtual Long64_t GetValueLong64 (Int_t i=0) const;  ; virtual LongDouble_t GetValueLongDouble (Int_t i=0) const;  ; virtual bool IsOnTerminalBranch () const;  ; virtual bool IsRange () const;  ; virtual bool IsUnsigned () const;  ; virtual bool ReadBasketSerialized (TBuffer &, Long64_t);  ; Int_t ResetAddress (void *add, bool calledFromDestructor=false);  Helper routine for TLeafX::SetAddress. ;  ; virtual void SetBranch (TBranch *branch);  ; virtual void SetLeafCount (TLeaf *leaf);  Set the leaf count of this leaf. ;  ; virtual void SetLen (Int_t len=1);  ; virtual void SetOffset (Int_t offset=0);  ; virtual void SetRange (bool range=true);  ; virtual void SetUnsigned ();  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ;",MatchSource.WIKI,doc/master/classTLeafB.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTLeafB.html
Modifiability,inherit,inherited,"ncludeRange (TLeaf *) override;  Copy/set fMinimum and fMaximum to include/be wide than those of the parameter. ;  ; TClass * IsA () const override;  ; void PrintValue (Int_t i=0) const override;  Prints leaf value. ;  ; void ReadBasket (TBuffer &) override;  Read leaf elements from Basket input buffer. ;  ; void ReadBasketExport (TBuffer &, TClonesArray *list, Int_t n) override;  Read leaf elements from Basket input buffer and export buffer to TClonesArray objects. ;  ; bool ReadBasketFast (TBuffer &, Long64_t) override;  ; void ReadValue (std::istream &s, Char_t delim=' ') override;  Read a 8 bit integer from std::istream s and store it into the branch buffer. ;  ; void SetAddress (void *addr=nullptr) override;  Set value buffer address. ;  ; virtual void SetMaximum (Char_t max);  ; virtual void SetMinimum (Char_t min);  ; void Streamer (TBuffer &) override;  Stream a class object. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TLeaf;  TLeaf ();  ;  TLeaf (TBranch *parent, const char *name, const char *type);  Create a Leaf. ;  ;  ~TLeaf () override;  Destructor. ;  ; void Browse (TBrowser *b) override;  Browse the content of this leaf. ;  ; virtual bool CanGenerateOffsetArray ();  ; virtual Int_t * GenerateOffsetArray (Int_t base, Int_t events);  ; TBranch * GetBranch () const;  ; virtual TString GetFullName () const;  Return the full name (including the parent's branch names) of the leaf. ;  ; virtual TLeaf * GetLeafCount () const;  If this leaf stores a variable-sized array or a multi-dimensional array whose last dimension has variable size, return a pointer to the TLeaf that stores such size. ;  ; virtual TLeaf * GetLeafCounter (Int_t &countval) const;  Return a pointer to the counter of this leaf (if any) or store the number of elements that the leaf contains in countval. ;  ; virtual const Counts_t * GetLeafCountValues (Long64_t start, Long64_t len);  If this branch is a branch count, return the s",MatchSource.WIKI,doc/master/classTLeafB.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTLeafB.html
Security,hash,hash,"ool range=true);  ; virtual void SetUnsigned ();  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; TClass * IsA () const override;  ; Bool_t IsSortable () const override;  ; void ls (Option_t *option="""") const override;  List TNamed name and title. ;  ; TNamed & operator= (const TNamed &rhs);  TNamed assignment operator. ;  ; void Print (Option_t *option="""") const override;  Print TNamed name and title. ;  ; virtual void SetName (const char *name);  Set the name of the TNamed. ;  ; virtual void SetNameTitle (const char *name, const char *title);  Set all the TNamed parameters (name and title). ;  ; virtual void SetTitle (const char *title="""");  Set the title of the TNamed. ;  ; virtual Int_t Sizeof () const;  Return size of the TNamed part of the TObject. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;",MatchSource.WIKI,doc/master/classTLeafB.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTLeafB.html
Availability,error,error,"option="""");  Append graphics object to current pad. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t ",MatchSource.WIKI,doc/master/classTLeafC.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTLeafC.html
Integrability,rout,routine,"ter to the TLeaf that stores such size. ;  ; virtual TLeaf * GetLeafCounter (Int_t &countval) const;  Return a pointer to the counter of this leaf (if any) or store the number of elements that the leaf contains in countval. ;  ; virtual const Counts_t * GetLeafCountValues (Long64_t start, Long64_t len);  If this branch is a branch count, return the set of collection size for the entry range requested start: first entry to read and return information about len: number of entries to read. ;  ; virtual Int_t GetLen () const;  Return the number of effective elements of this leaf, for the current entry. ;  ; virtual Int_t GetLenStatic () const;  Return the fixed length of this leaf. ;  ; virtual Int_t GetLenType () const;  ; virtual Int_t GetNdata () const;  ; virtual Int_t GetOffset () const;  ; template<typename T > ; T GetTypedValue (Int_t i=0) const;  ; virtual Long64_t GetValueLong64 (Int_t i=0) const;  ; virtual LongDouble_t GetValueLongDouble (Int_t i=0) const;  ; virtual bool IsOnTerminalBranch () const;  ; virtual bool IsRange () const;  ; virtual bool IsUnsigned () const;  ; virtual bool ReadBasketFast (TBuffer &, Long64_t);  ; virtual bool ReadBasketSerialized (TBuffer &, Long64_t);  ; Int_t ResetAddress (void *add, bool calledFromDestructor=false);  Helper routine for TLeafX::SetAddress. ;  ; virtual void SetBranch (TBranch *branch);  ; virtual void SetLeafCount (TLeaf *leaf);  Set the leaf count of this leaf. ;  ; virtual void SetLen (Int_t len=1);  ; virtual void SetOffset (Int_t offset=0);  ; virtual void SetRange (bool range=true);  ; virtual void SetUnsigned ();  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title ",MatchSource.WIKI,doc/master/classTLeafC.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTLeafC.html
Modifiability,variab,variable,". ROOT: TLeafC Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Attributes |; List of all members ; TLeafC Class ReferenceTree Library. ; A TLeaf for a variable length string. ; Definition at line 26 of file TLeafC.h. Public Member Functions;  TLeafC ();  Default constructor for LeafC. ;  ;  TLeafC (TBranch *parent, const char *name, const char *type);  Create a LeafC. ;  ;  ~TLeafC () override;  Default destructor for a LeafC. ;  ; void Export (TClonesArray *list, Int_t n) override;  Export element from local leaf buffer to ClonesArray. ;  ; void FillBasket (TBuffer &b) override;  Pack leaf elements in Basket output buffer. ;  ; Int_t GetMaximum () const override;  ; Int_t GetMinimum () const override;  ; const char * GetTypeName () const override;  Returns name of leaf type. ;  ; Double_t GetValue (Int_t i=0) const override;  ; void * GetValuePointer () const override;  ; virtual char * GetValueString () const;  ; void Import (TClonesArray *list, Int_t n) override;  Import element from ClonesArray into local leaf buffer. ;  ; bool IncludeRange (TLeaf *) override;  Copy/set fMinimum and fMaximum to include/be wide than those of the parameter. ;  ; TClass * IsA () const override;  ; void PrintValue (Int_t i=0) const override;  Prints leaf value. ;  ; void ReadBasket (TBuffer &b) override;  Read leaf elements from Basket input buffer. ;  ; void ReadBasketExport (TBuffer &b, TClonesArray *list, Int_t n) override;  Read leaf elements from Basket input buffer and export buffer to TClonesArray objects. ;  ; void ReadValue (std::istream &s, Char_t delim=' ') override;  Read a string from std::istream s up to delimiter and store it into the branch buffer. ;  ; void SetAddress (void *add=nullptr) override;  Set leaf buffer data address. ;  ; virtual void SetMaximum (Int_t max);  ; virtual void SetMinimum (Int_t min);  ; void Streamer ",MatchSource.WIKI,doc/master/classTLeafC.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTLeafC.html
Security,hash,hash,"ool range=true);  ; virtual void SetUnsigned ();  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; TClass * IsA () const override;  ; Bool_t IsSortable () const override;  ; void ls (Option_t *option="""") const override;  List TNamed name and title. ;  ; TNamed & operator= (const TNamed &rhs);  TNamed assignment operator. ;  ; void Print (Option_t *option="""") const override;  Print TNamed name and title. ;  ; virtual void SetName (const char *name);  Set the name of the TNamed. ;  ; virtual void SetNameTitle (const char *name, const char *title);  Set all the TNamed parameters (name and title). ;  ; virtual void SetTitle (const char *title="""");  Set the title of the TNamed. ;  ; virtual Int_t Sizeof () const;  Return size of the TNamed part of the TObject. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;",MatchSource.WIKI,doc/master/classTLeafC.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTLeafC.html
Availability,error,error,"option="""");  Append graphics object to current pad. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t ",MatchSource.WIKI,doc/master/classTLeafD.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTLeafD.html
Integrability,rout,routine,"ch size. ;  ; virtual TLeaf * GetLeafCounter (Int_t &countval) const;  Return a pointer to the counter of this leaf (if any) or store the number of elements that the leaf contains in countval. ;  ; virtual const Counts_t * GetLeafCountValues (Long64_t start, Long64_t len);  If this branch is a branch count, return the set of collection size for the entry range requested start: first entry to read and return information about len: number of entries to read. ;  ; virtual Int_t GetLen () const;  Return the number of effective elements of this leaf, for the current entry. ;  ; virtual Int_t GetLenStatic () const;  Return the fixed length of this leaf. ;  ; virtual Int_t GetLenType () const;  ; virtual Int_t GetMaximum () const;  ; virtual Int_t GetMinimum () const;  ; virtual Int_t GetNdata () const;  ; virtual Int_t GetOffset () const;  ; template<typename T > ; T GetTypedValue (Int_t i=0) const;  ; virtual Long64_t GetValueLong64 (Int_t i=0) const;  ; virtual LongDouble_t GetValueLongDouble (Int_t i=0) const;  ; virtual bool IncludeRange (TLeaf *);  ; virtual bool IsOnTerminalBranch () const;  ; virtual bool IsRange () const;  ; virtual bool IsUnsigned () const;  ; virtual bool ReadBasketSerialized (TBuffer &, Long64_t);  ; Int_t ResetAddress (void *add, bool calledFromDestructor=false);  Helper routine for TLeafX::SetAddress. ;  ; virtual void SetBranch (TBranch *branch);  ; virtual void SetLeafCount (TLeaf *leaf);  Set the leaf count of this leaf. ;  ; virtual void SetLen (Int_t len=1);  ; virtual void SetOffset (Int_t offset=0);  ; virtual void SetRange (bool range=true);  ; virtual void SetUnsigned ();  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""")",MatchSource.WIKI,doc/master/classTLeafD.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTLeafD.html
Modifiability,inherit,inherited,"t GetValue (Int_t i=0) const override;  ; void * GetValuePointer () const override;  ; void Import (TClonesArray *list, Int_t n) override;  Import element from ClonesArray into local leaf buffer. ;  ; TClass * IsA () const override;  ; void PrintValue (Int_t i=0) const override;  Prints leaf value. ;  ; void ReadBasket (TBuffer &b) override;  Read leaf elements from Basket input buffer. ;  ; void ReadBasketExport (TBuffer &b, TClonesArray *list, Int_t n) override;  Read leaf elements from Basket input buffer and export buffer to TClonesArray objects. ;  ; bool ReadBasketFast (TBuffer &, Long64_t) override;  ; void ReadValue (std::istream &s, Char_t delim=' ') override;  Read a double from std::istream s and store it into the branch buffer. ;  ; void SetAddress (void *add=nullptr) override;  Set leaf buffer data address. ;  ; void Streamer (TBuffer &) override;  Stream a class object. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TLeaf;  TLeaf ();  ;  TLeaf (TBranch *parent, const char *name, const char *type);  Create a Leaf. ;  ;  ~TLeaf () override;  Destructor. ;  ; void Browse (TBrowser *b) override;  Browse the content of this leaf. ;  ; virtual bool CanGenerateOffsetArray ();  ; virtual Int_t * GenerateOffsetArray (Int_t base, Int_t events);  ; TBranch * GetBranch () const;  ; virtual TString GetFullName () const;  Return the full name (including the parent's branch names) of the leaf. ;  ; virtual TLeaf * GetLeafCount () const;  If this leaf stores a variable-sized array or a multi-dimensional array whose last dimension has variable size, return a pointer to the TLeaf that stores such size. ;  ; virtual TLeaf * GetLeafCounter (Int_t &countval) const;  Return a pointer to the counter of this leaf (if any) or store the number of elements that the leaf contains in countval. ;  ; virtual const Counts_t * GetLeafCountValues (Long64_t start, Long64_t len);  If this branch is a branch count, return the s",MatchSource.WIKI,doc/master/classTLeafD.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTLeafD.html
Security,hash,hash,"ool range=true);  ; virtual void SetUnsigned ();  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; TClass * IsA () const override;  ; Bool_t IsSortable () const override;  ; void ls (Option_t *option="""") const override;  List TNamed name and title. ;  ; TNamed & operator= (const TNamed &rhs);  TNamed assignment operator. ;  ; void Print (Option_t *option="""") const override;  Print TNamed name and title. ;  ; virtual void SetName (const char *name);  Set the name of the TNamed. ;  ; virtual void SetNameTitle (const char *name, const char *title);  Set all the TNamed parameters (name and title). ;  ; virtual void SetTitle (const char *title="""");  Set the title of the TNamed. ;  ; virtual Int_t Sizeof () const;  Return size of the TNamed part of the TObject. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;",MatchSource.WIKI,doc/master/classTLeafD.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTLeafD.html
Availability,error,error,"option="""");  Append graphics object to current pad. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t ",MatchSource.WIKI,doc/master/classTLeafD32.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTLeafD32.html
Integrability,rout,routine," * GetLeafCounter (Int_t &countval) const;  Return a pointer to the counter of this leaf (if any) or store the number of elements that the leaf contains in countval. ;  ; virtual const Counts_t * GetLeafCountValues (Long64_t start, Long64_t len);  If this branch is a branch count, return the set of collection size for the entry range requested start: first entry to read and return information about len: number of entries to read. ;  ; virtual Int_t GetLen () const;  Return the number of effective elements of this leaf, for the current entry. ;  ; virtual Int_t GetLenStatic () const;  Return the fixed length of this leaf. ;  ; virtual Int_t GetLenType () const;  ; virtual Int_t GetMaximum () const;  ; virtual Int_t GetMinimum () const;  ; virtual Int_t GetNdata () const;  ; virtual Int_t GetOffset () const;  ; template<typename T > ; T GetTypedValue (Int_t i=0) const;  ; virtual Long64_t GetValueLong64 (Int_t i=0) const;  ; virtual LongDouble_t GetValueLongDouble (Int_t i=0) const;  ; virtual bool IncludeRange (TLeaf *);  ; virtual bool IsOnTerminalBranch () const;  ; virtual bool IsRange () const;  ; virtual bool IsUnsigned () const;  ; virtual bool ReadBasketFast (TBuffer &, Long64_t);  ; virtual bool ReadBasketSerialized (TBuffer &, Long64_t);  ; Int_t ResetAddress (void *add, bool calledFromDestructor=false);  Helper routine for TLeafX::SetAddress. ;  ; virtual void SetBranch (TBranch *branch);  ; virtual void SetLeafCount (TLeaf *leaf);  Set the leaf count of this leaf. ;  ; virtual void SetLen (Int_t len=1);  ; virtual void SetOffset (Int_t offset=0);  ; virtual void SetRange (bool range=true);  ; virtual void SetUnsigned ();  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void ",MatchSource.WIKI,doc/master/classTLeafD32.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTLeafD32.html
Modifiability,inherit,inherited," GetTypeName () const override;  ; Double_t GetValue (Int_t i=0) const override;  ; void * GetValuePointer () const override;  ; void Import (TClonesArray *list, Int_t n) override;  Import element from ClonesArray into local leaf buffer. ;  ; TClass * IsA () const override;  ; void PrintValue (Int_t i=0) const override;  Prints leaf value. ;  ; void ReadBasket (TBuffer &b) override;  Read leaf elements from Basket input buffer. ;  ; void ReadBasketExport (TBuffer &b, TClonesArray *list, Int_t n) override;  Read leaf elements from Basket input buffer and export buffer to TClonesArray objects. ;  ; void ReadValue (std::istream &s, Char_t delim=' ') override;  Read a double from std::istream s and store it into the branch buffer. ;  ; void SetAddress (void *add=nullptr) override;  Set leaf buffer data address. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TLeafD32. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TLeaf;  TLeaf ();  ;  TLeaf (TBranch *parent, const char *name, const char *type);  Create a Leaf. ;  ;  ~TLeaf () override;  Destructor. ;  ; void Browse (TBrowser *b) override;  Browse the content of this leaf. ;  ; virtual bool CanGenerateOffsetArray ();  ; virtual Int_t * GenerateOffsetArray (Int_t base, Int_t events);  ; TBranch * GetBranch () const;  ; virtual TString GetFullName () const;  Return the full name (including the parent's branch names) of the leaf. ;  ; virtual TLeaf * GetLeafCount () const;  If this leaf stores a variable-sized array or a multi-dimensional array whose last dimension has variable size, return a pointer to the TLeaf that stores such size. ;  ; virtual TLeaf * GetLeafCounter (Int_t &countval) const;  Return a pointer to the counter of this leaf (if any) or store the number of elements that the leaf contains in countval. ;  ; virtual const Counts_t * GetLeafCountValues (Long64_t start, Long64_t len);  If this branch is a branch count, return the s",MatchSource.WIKI,doc/master/classTLeafD32.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTLeafD32.html
Security,hash,hash,"ool range=true);  ; virtual void SetUnsigned ();  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; TClass * IsA () const override;  ; Bool_t IsSortable () const override;  ; void ls (Option_t *option="""") const override;  List TNamed name and title. ;  ; TNamed & operator= (const TNamed &rhs);  TNamed assignment operator. ;  ; void Print (Option_t *option="""") const override;  Print TNamed name and title. ;  ; virtual void SetName (const char *name);  Set the name of the TNamed. ;  ; virtual void SetNameTitle (const char *name, const char *title);  Set all the TNamed parameters (name and title). ;  ; virtual void SetTitle (const char *title="""");  Set the title of the TNamed. ;  ; virtual Int_t Sizeof () const;  Return size of the TNamed part of the TObject. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;",MatchSource.WIKI,doc/master/classTLeafD32.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTLeafD32.html
Availability,error,error,"option="""");  Append graphics object to current pad. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t ",MatchSource.WIKI,doc/master/classTLeafElement.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTLeafElement.html
Integrability,rout,routine,"f stores a variable-sized array or a multi-dimensional array whose last dimension has variable size, return a pointer to the TLeaf that stores such size. ;  ; virtual TLeaf * GetLeafCounter (Int_t &countval) const;  Return a pointer to the counter of this leaf (if any) or store the number of elements that the leaf contains in countval. ;  ; virtual const Counts_t * GetLeafCountValues (Long64_t start, Long64_t len);  If this branch is a branch count, return the set of collection size for the entry range requested start: first entry to read and return information about len: number of entries to read. ;  ; virtual Int_t GetLenStatic () const;  Return the fixed length of this leaf. ;  ; virtual Int_t GetLenType () const;  ; virtual Int_t GetMinimum () const;  ; virtual Int_t GetOffset () const;  ; template<typename T > ; T GetTypedValue (Int_t i=0) const;  ; virtual void Import (TClonesArray *, Int_t);  ; virtual bool IsRange () const;  ; virtual bool IsUnsigned () const;  ; virtual void ReadBasket (TBuffer &);  ; virtual void ReadBasketExport (TBuffer &, TClonesArray *, Int_t);  ; virtual bool ReadBasketSerialized (TBuffer &, Long64_t);  ; virtual void ReadValue (std::istream &, Char_t=' ');  ; Int_t ResetAddress (void *add, bool calledFromDestructor=false);  Helper routine for TLeafX::SetAddress. ;  ; virtual void SetAddress (void *add=nullptr);  ; virtual void SetBranch (TBranch *branch);  ; virtual void SetLen (Int_t len=1);  ; virtual void SetOffset (Int_t offset=0);  ; virtual void SetRange (bool range=true);  ; virtual void SetUnsigned ();  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObj",MatchSource.WIKI,doc/master/classTLeafElement.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTLeafElement.html
Modifiability,inherit,inherited,"mplate<typename T > ; T GetTypedValueSubArray (Int_t i=0, Int_t j=0) const;  ; const char * GetTypeName () const override;  ; Double_t GetValue (Int_t i=0) const override;  ; Long64_t GetValueLong64 (Int_t i=0) const override;  ; LongDouble_t GetValueLongDouble (Int_t i=0) const override;  ; void * GetValuePointer () const override;  ; bool IncludeRange (TLeaf *) override;  Copy/set fMinimum and fMaximum to include/be wide than those of the parameter. ;  ; TClass * IsA () const override;  ; bool IsOnTerminalBranch () const override;  Return true if this leaf is does not have any sub-branch/leaf. ;  ; void PrintValue (Int_t i=0) const override;  ; bool ReadBasketFast (TBuffer &, Long64_t) override;  Deserialize N events from an input buffer. ;  ; void SetLeafCount (TLeaf *leaf) override;  Set the leaf count of this leaf. ;  ; void Streamer (TBuffer &) override;  Stream a class object. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TLeaf;  TLeaf ();  ;  TLeaf (TBranch *parent, const char *name, const char *type);  Create a Leaf. ;  ;  ~TLeaf () override;  Destructor. ;  ; void Browse (TBrowser *b) override;  Browse the content of this leaf. ;  ; virtual void Export (TClonesArray *, Int_t);  ; virtual void FillBasket (TBuffer &b);  Pack leaf elements in Basket output buffer. ;  ; virtual Int_t * GenerateOffsetArray (Int_t base, Int_t events);  ; TBranch * GetBranch () const;  ; virtual TLeaf * GetLeafCount () const;  If this leaf stores a variable-sized array or a multi-dimensional array whose last dimension has variable size, return a pointer to the TLeaf that stores such size. ;  ; virtual TLeaf * GetLeafCounter (Int_t &countval) const;  Return a pointer to the counter of this leaf (if any) or store the number of elements that the leaf contains in countval. ;  ; virtual const Counts_t * GetLeafCountValues (Long64_t start, Long64_t len);  If this branch is a branch count, return the set of collection size f",MatchSource.WIKI,doc/master/classTLeafElement.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTLeafElement.html
Security,hash,hash,"ool range=true);  ; virtual void SetUnsigned ();  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; TClass * IsA () const override;  ; Bool_t IsSortable () const override;  ; void ls (Option_t *option="""") const override;  List TNamed name and title. ;  ; TNamed & operator= (const TNamed &rhs);  TNamed assignment operator. ;  ; void Print (Option_t *option="""") const override;  Print TNamed name and title. ;  ; virtual void SetName (const char *name);  Set the name of the TNamed. ;  ; virtual void SetNameTitle (const char *name, const char *title);  Set all the TNamed parameters (name and title). ;  ; virtual void SetTitle (const char *title="""");  Set the title of the TNamed. ;  ; virtual Int_t Sizeof () const;  Return size of the TNamed part of the TObject. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;",MatchSource.WIKI,doc/master/classTLeafElement.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTLeafElement.html
Availability,error,error,"option="""");  Append graphics object to current pad. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t ",MatchSource.WIKI,doc/master/classTLeafF.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTLeafF.html
Integrability,rout,routine,"ch size. ;  ; virtual TLeaf * GetLeafCounter (Int_t &countval) const;  Return a pointer to the counter of this leaf (if any) or store the number of elements that the leaf contains in countval. ;  ; virtual const Counts_t * GetLeafCountValues (Long64_t start, Long64_t len);  If this branch is a branch count, return the set of collection size for the entry range requested start: first entry to read and return information about len: number of entries to read. ;  ; virtual Int_t GetLen () const;  Return the number of effective elements of this leaf, for the current entry. ;  ; virtual Int_t GetLenStatic () const;  Return the fixed length of this leaf. ;  ; virtual Int_t GetLenType () const;  ; virtual Int_t GetMaximum () const;  ; virtual Int_t GetMinimum () const;  ; virtual Int_t GetNdata () const;  ; virtual Int_t GetOffset () const;  ; template<typename T > ; T GetTypedValue (Int_t i=0) const;  ; virtual Long64_t GetValueLong64 (Int_t i=0) const;  ; virtual LongDouble_t GetValueLongDouble (Int_t i=0) const;  ; virtual bool IncludeRange (TLeaf *);  ; virtual bool IsOnTerminalBranch () const;  ; virtual bool IsRange () const;  ; virtual bool IsUnsigned () const;  ; virtual bool ReadBasketSerialized (TBuffer &, Long64_t);  ; Int_t ResetAddress (void *add, bool calledFromDestructor=false);  Helper routine for TLeafX::SetAddress. ;  ; virtual void SetBranch (TBranch *branch);  ; virtual void SetLeafCount (TLeaf *leaf);  Set the leaf count of this leaf. ;  ; virtual void SetLen (Int_t len=1);  ; virtual void SetOffset (Int_t offset=0);  ; virtual void SetRange (bool range=true);  ; virtual void SetUnsigned ();  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""")",MatchSource.WIKI,doc/master/classTLeafF.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTLeafF.html
Modifiability,inherit,inherited,"_t GetValue (Int_t i=0) const override;  ; void * GetValuePointer () const override;  ; void Import (TClonesArray *list, Int_t n) override;  Import element from ClonesArray into local leaf buffer. ;  ; TClass * IsA () const override;  ; void PrintValue (Int_t i=0) const override;  Prints leaf value. ;  ; void ReadBasket (TBuffer &b) override;  Read leaf elements from Basket input buffer. ;  ; void ReadBasketExport (TBuffer &b, TClonesArray *list, Int_t n) override;  Read leaf elements from Basket input buffer and export buffer to TClonesArray objects. ;  ; bool ReadBasketFast (TBuffer &, Long64_t) override;  ; void ReadValue (std::istream &s, Char_t delim=' ') override;  Read a float from std::istream s and store it into the branch buffer. ;  ; void SetAddress (void *add=nullptr) override;  Set leaf buffer data address. ;  ; void Streamer (TBuffer &) override;  Stream a class object. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TLeaf;  TLeaf ();  ;  TLeaf (TBranch *parent, const char *name, const char *type);  Create a Leaf. ;  ;  ~TLeaf () override;  Destructor. ;  ; void Browse (TBrowser *b) override;  Browse the content of this leaf. ;  ; virtual bool CanGenerateOffsetArray ();  ; virtual Int_t * GenerateOffsetArray (Int_t base, Int_t events);  ; TBranch * GetBranch () const;  ; virtual TString GetFullName () const;  Return the full name (including the parent's branch names) of the leaf. ;  ; virtual TLeaf * GetLeafCount () const;  If this leaf stores a variable-sized array or a multi-dimensional array whose last dimension has variable size, return a pointer to the TLeaf that stores such size. ;  ; virtual TLeaf * GetLeafCounter (Int_t &countval) const;  Return a pointer to the counter of this leaf (if any) or store the number of elements that the leaf contains in countval. ;  ; virtual const Counts_t * GetLeafCountValues (Long64_t start, Long64_t len);  If this branch is a branch count, return the s",MatchSource.WIKI,doc/master/classTLeafF.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTLeafF.html
Security,hash,hash,"ool range=true);  ; virtual void SetUnsigned ();  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; TClass * IsA () const override;  ; Bool_t IsSortable () const override;  ; void ls (Option_t *option="""") const override;  List TNamed name and title. ;  ; TNamed & operator= (const TNamed &rhs);  TNamed assignment operator. ;  ; void Print (Option_t *option="""") const override;  Print TNamed name and title. ;  ; virtual void SetName (const char *name);  Set the name of the TNamed. ;  ; virtual void SetNameTitle (const char *name, const char *title);  Set all the TNamed parameters (name and title). ;  ; virtual void SetTitle (const char *title="""");  Set the title of the TNamed. ;  ; virtual Int_t Sizeof () const;  Return size of the TNamed part of the TObject. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;",MatchSource.WIKI,doc/master/classTLeafF.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTLeafF.html
Availability,error,error,"option="""");  Append graphics object to current pad. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t ",MatchSource.WIKI,doc/master/classTLeafF16.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTLeafF16.html
Integrability,rout,routine," * GetLeafCounter (Int_t &countval) const;  Return a pointer to the counter of this leaf (if any) or store the number of elements that the leaf contains in countval. ;  ; virtual const Counts_t * GetLeafCountValues (Long64_t start, Long64_t len);  If this branch is a branch count, return the set of collection size for the entry range requested start: first entry to read and return information about len: number of entries to read. ;  ; virtual Int_t GetLen () const;  Return the number of effective elements of this leaf, for the current entry. ;  ; virtual Int_t GetLenStatic () const;  Return the fixed length of this leaf. ;  ; virtual Int_t GetLenType () const;  ; virtual Int_t GetMaximum () const;  ; virtual Int_t GetMinimum () const;  ; virtual Int_t GetNdata () const;  ; virtual Int_t GetOffset () const;  ; template<typename T > ; T GetTypedValue (Int_t i=0) const;  ; virtual Long64_t GetValueLong64 (Int_t i=0) const;  ; virtual LongDouble_t GetValueLongDouble (Int_t i=0) const;  ; virtual bool IncludeRange (TLeaf *);  ; virtual bool IsOnTerminalBranch () const;  ; virtual bool IsRange () const;  ; virtual bool IsUnsigned () const;  ; virtual bool ReadBasketFast (TBuffer &, Long64_t);  ; virtual bool ReadBasketSerialized (TBuffer &, Long64_t);  ; Int_t ResetAddress (void *add, bool calledFromDestructor=false);  Helper routine for TLeafX::SetAddress. ;  ; virtual void SetBranch (TBranch *branch);  ; virtual void SetLeafCount (TLeaf *leaf);  Set the leaf count of this leaf. ;  ; virtual void SetLen (Int_t len=1);  ; virtual void SetOffset (Int_t offset=0);  ; virtual void SetRange (bool range=true);  ; virtual void SetUnsigned ();  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void ",MatchSource.WIKI,doc/master/classTLeafF16.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTLeafF16.html
Modifiability,inherit,inherited,"* GetTypeName () const override;  ; Double_t GetValue (Int_t i=0) const override;  ; void * GetValuePointer () const override;  ; void Import (TClonesArray *list, Int_t n) override;  Import element from ClonesArray into local leaf buffer. ;  ; TClass * IsA () const override;  ; void PrintValue (Int_t i=0) const override;  Prints leaf value. ;  ; void ReadBasket (TBuffer &b) override;  Read leaf elements from Basket input buffer. ;  ; void ReadBasketExport (TBuffer &b, TClonesArray *list, Int_t n) override;  Read leaf elements from Basket input buffer and export buffer to TClonesArray objects. ;  ; void ReadValue (std::istream &s, Char_t delim=' ') override;  Read a float from std::istream s and store it into the branch buffer. ;  ; void SetAddress (void *add=nullptr) override;  Set leaf buffer data address. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TLeafF16. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TLeaf;  TLeaf ();  ;  TLeaf (TBranch *parent, const char *name, const char *type);  Create a Leaf. ;  ;  ~TLeaf () override;  Destructor. ;  ; void Browse (TBrowser *b) override;  Browse the content of this leaf. ;  ; virtual bool CanGenerateOffsetArray ();  ; virtual Int_t * GenerateOffsetArray (Int_t base, Int_t events);  ; TBranch * GetBranch () const;  ; virtual TString GetFullName () const;  Return the full name (including the parent's branch names) of the leaf. ;  ; virtual TLeaf * GetLeafCount () const;  If this leaf stores a variable-sized array or a multi-dimensional array whose last dimension has variable size, return a pointer to the TLeaf that stores such size. ;  ; virtual TLeaf * GetLeafCounter (Int_t &countval) const;  Return a pointer to the counter of this leaf (if any) or store the number of elements that the leaf contains in countval. ;  ; virtual const Counts_t * GetLeafCountValues (Long64_t start, Long64_t len);  If this branch is a branch count, return the s",MatchSource.WIKI,doc/master/classTLeafF16.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTLeafF16.html
Security,hash,hash,"ool range=true);  ; virtual void SetUnsigned ();  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; TClass * IsA () const override;  ; Bool_t IsSortable () const override;  ; void ls (Option_t *option="""") const override;  List TNamed name and title. ;  ; TNamed & operator= (const TNamed &rhs);  TNamed assignment operator. ;  ; void Print (Option_t *option="""") const override;  Print TNamed name and title. ;  ; virtual void SetName (const char *name);  Set the name of the TNamed. ;  ; virtual void SetNameTitle (const char *name, const char *title);  Set all the TNamed parameters (name and title). ;  ; virtual void SetTitle (const char *title="""");  Set the title of the TNamed. ;  ; virtual Int_t Sizeof () const;  Return size of the TNamed part of the TObject. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;",MatchSource.WIKI,doc/master/classTLeafF16.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTLeafF16.html
Availability,error,error,"option="""");  Append graphics object to current pad. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t ",MatchSource.WIKI,doc/master/classTLeafG.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTLeafG.html
Integrability,rout,routine,"ay or a multi-dimensional array whose last dimension has variable size, return a pointer to the TLeaf that stores such size. ;  ; virtual TLeaf * GetLeafCounter (Int_t &countval) const;  Return a pointer to the counter of this leaf (if any) or store the number of elements that the leaf contains in countval. ;  ; virtual const Counts_t * GetLeafCountValues (Long64_t start, Long64_t len);  If this branch is a branch count, return the set of collection size for the entry range requested start: first entry to read and return information about len: number of entries to read. ;  ; virtual Int_t GetLen () const;  Return the number of effective elements of this leaf, for the current entry. ;  ; virtual Int_t GetLenStatic () const;  Return the fixed length of this leaf. ;  ; virtual Int_t GetLenType () const;  ; virtual Int_t GetNdata () const;  ; virtual Int_t GetOffset () const;  ; template<typename T > ; T GetTypedValue (Int_t i=0) const;  ; virtual bool IsOnTerminalBranch () const;  ; virtual bool IsRange () const;  ; virtual bool IsUnsigned () const;  ; virtual bool ReadBasketSerialized (TBuffer &, Long64_t);  ; Int_t ResetAddress (void *add, bool calledFromDestructor=false);  Helper routine for TLeafX::SetAddress. ;  ; virtual void SetBranch (TBranch *branch);  ; virtual void SetLeafCount (TLeaf *leaf);  Set the leaf count of this leaf. ;  ; virtual void SetLen (Int_t len=1);  ; virtual void SetOffset (Int_t offset=0);  ; virtual void SetRange (bool range=true);  ; virtual void SetUnsigned ();  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override; ",MatchSource.WIKI,doc/master/classTLeafG.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTLeafG.html
Modifiability,inherit,inherited,"imum to include/be wide than those of the parameter. ;  ; TClass * IsA () const override;  ; void PrintValue (Int_t i=0) const override;  Prints leaf value. ;  ; void ReadBasket (TBuffer &b) override;  Read leaf elements from Basket input buffer. ;  ; void ReadBasketExport (TBuffer &b, TClonesArray *list, Int_t n) override;  Read leaf elements from Basket input buffer and export buffer to TClonesArray objects. ;  ; bool ReadBasketFast (TBuffer &, Long64_t) override;  Deserialize input by performing byteswap as needed. ;  ; void ReadValue (std::istream &s, Char_t delim=' ') override;  Read a long integer from std::istream s and store it into the branch buffer. ;  ; void SetAddress (void *add=nullptr) override;  Set leaf buffer data address. ;  ; virtual void SetMaximum (Long_t max);  ; virtual void SetMinimum (Long_t min);  ; void Streamer (TBuffer &) override;  Stream a class object. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TLeaf;  TLeaf ();  ;  TLeaf (TBranch *parent, const char *name, const char *type);  Create a Leaf. ;  ;  ~TLeaf () override;  Destructor. ;  ; void Browse (TBrowser *b) override;  Browse the content of this leaf. ;  ; virtual bool CanGenerateOffsetArray ();  ; virtual Int_t * GenerateOffsetArray (Int_t base, Int_t events);  ; TBranch * GetBranch () const;  ; virtual TString GetFullName () const;  Return the full name (including the parent's branch names) of the leaf. ;  ; virtual TLeaf * GetLeafCount () const;  If this leaf stores a variable-sized array or a multi-dimensional array whose last dimension has variable size, return a pointer to the TLeaf that stores such size. ;  ; virtual TLeaf * GetLeafCounter (Int_t &countval) const;  Return a pointer to the counter of this leaf (if any) or store the number of elements that the leaf contains in countval. ;  ; virtual const Counts_t * GetLeafCountValues (Long64_t start, Long64_t len);  If this branch is a branch count, return the s",MatchSource.WIKI,doc/master/classTLeafG.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTLeafG.html
Performance,perform,performing,"t char * GetTypeName () const override;  Returns name of leaf type. ;  ; Double_t GetValue (Int_t i=0) const override;  Returns current value of leaf. ;  ; Long64_t GetValueLong64 (Int_t i=0) const override;  ; LongDouble_t GetValueLongDouble (Int_t i=0) const override;  Returns current value of leaf. ;  ; void * GetValuePointer () const override;  ; void Import (TClonesArray *list, Int_t n) override;  Import element from ClonesArray into local leaf buffer. ;  ; bool IncludeRange (TLeaf *) override;  Copy/set fMinimum and fMaximum to include/be wide than those of the parameter. ;  ; TClass * IsA () const override;  ; void PrintValue (Int_t i=0) const override;  Prints leaf value. ;  ; void ReadBasket (TBuffer &b) override;  Read leaf elements from Basket input buffer. ;  ; void ReadBasketExport (TBuffer &b, TClonesArray *list, Int_t n) override;  Read leaf elements from Basket input buffer and export buffer to TClonesArray objects. ;  ; bool ReadBasketFast (TBuffer &, Long64_t) override;  Deserialize input by performing byteswap as needed. ;  ; void ReadValue (std::istream &s, Char_t delim=' ') override;  Read a long integer from std::istream s and store it into the branch buffer. ;  ; void SetAddress (void *add=nullptr) override;  Set leaf buffer data address. ;  ; virtual void SetMaximum (Long_t max);  ; virtual void SetMinimum (Long_t min);  ; void Streamer (TBuffer &) override;  Stream a class object. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TLeaf;  TLeaf ();  ;  TLeaf (TBranch *parent, const char *name, const char *type);  Create a Leaf. ;  ;  ~TLeaf () override;  Destructor. ;  ; void Browse (TBrowser *b) override;  Browse the content of this leaf. ;  ; virtual bool CanGenerateOffsetArray ();  ; virtual Int_t * GenerateOffsetArray (Int_t base, Int_t events);  ; TBranch * GetBranch () const;  ; virtual TString GetFullName () const;  Return the full name (including the parent's branch names) of",MatchSource.WIKI,doc/master/classTLeafG.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTLeafG.html
Security,hash,hash,"ool range=true);  ; virtual void SetUnsigned ();  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; TClass * IsA () const override;  ; Bool_t IsSortable () const override;  ; void ls (Option_t *option="""") const override;  List TNamed name and title. ;  ; TNamed & operator= (const TNamed &rhs);  TNamed assignment operator. ;  ; void Print (Option_t *option="""") const override;  Print TNamed name and title. ;  ; virtual void SetName (const char *name);  Set the name of the TNamed. ;  ; virtual void SetNameTitle (const char *name, const char *title);  Set all the TNamed parameters (name and title). ;  ; virtual void SetTitle (const char *title="""");  Set the title of the TNamed. ;  ; virtual Int_t Sizeof () const;  Return size of the TNamed part of the TObject. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;",MatchSource.WIKI,doc/master/classTLeafG.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTLeafG.html
Usability,simpl,simple,"oid TLeafG::FillBasket ; (; TBuffer & ; b). overridevirtual . Pack leaf elements in Basket output buffer. ; Reimplemented from TLeaf.; Definition at line 78 of file TLeafG.cxx. ◆ GetDeserializeType(). DeserializeType TLeafG::GetDeserializeType ; (; ); const. inlineoverridevirtual . Reimplemented from TLeaf.; Definition at line 42 of file TLeafG.h. ◆ GetMaximum(). Int_t TLeafG::GetMaximum ; (; ); const. inlineoverridevirtual . Reimplemented from TLeaf.; Definition at line 44 of file TLeafG.h. ◆ GetMinimum(). Int_t TLeafG::GetMinimum ; (; ); const. inlineoverridevirtual . Reimplemented from TLeaf.; Definition at line 45 of file TLeafG.h. ◆ GetTypeName(). const char * TLeafG::GetTypeName ; (; ); const. overridevirtual . Returns name of leaf type. ; Reimplemented from TLeaf.; Definition at line 96 of file TLeafG.cxx. ◆ GetValue(). Double_t TLeafG::GetValue ; (; Int_t ; i = 0); const. overridevirtual . Returns current value of leaf. . if leaf is a simple type, i must be set to 0; if leaf is an array, i is the array element number to be returned . Reimplemented from TLeaf.; Definition at line 107 of file TLeafG.cxx. ◆ GetValueLong64(). Long64_t TLeafG::GetValueLong64 ; (; Int_t ; i = 0); const. inlineoverridevirtual . Reimplemented from TLeaf.; Definition at line 66 of file TLeafG.h. ◆ GetValueLongDouble(). LongDouble_t TLeafG::GetValueLongDouble ; (; Int_t ; i = 0); const. overridevirtual . Returns current value of leaf. . if leaf is a simple type, i must be set to 0; if leaf is an array, i is the array element number to be returned . Reimplemented from TLeaf.; Definition at line 118 of file TLeafG.cxx. ◆ GetValuePointer(). void * TLeafG::GetValuePointer ; (; ); const. inlineoverridevirtual . Reimplemented from TLeaf.; Definition at line 49 of file TLeafG.h. ◆ Import(). void TLeafG::Import ; (; TClonesArray * ; list, . Int_t ; n . ). overridevirtual . Import element from ClonesArray into local leaf buffer. ; Reimplemented from TLeaf.; Definition at line 143 of file TLeaf",MatchSource.WIKI,doc/master/classTLeafG.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTLeafG.html
Availability,error,error,"option="""");  Append graphics object to current pad. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t ",MatchSource.WIKI,doc/master/classTLeafI.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTLeafI.html
Integrability,rout,routine,"ariable size, return a pointer to the TLeaf that stores such size. ;  ; virtual TLeaf * GetLeafCounter (Int_t &countval) const;  Return a pointer to the counter of this leaf (if any) or store the number of elements that the leaf contains in countval. ;  ; virtual const Counts_t * GetLeafCountValues (Long64_t start, Long64_t len);  If this branch is a branch count, return the set of collection size for the entry range requested start: first entry to read and return information about len: number of entries to read. ;  ; virtual Int_t GetLen () const;  Return the number of effective elements of this leaf, for the current entry. ;  ; virtual Int_t GetLenStatic () const;  Return the fixed length of this leaf. ;  ; virtual Int_t GetLenType () const;  ; virtual Int_t GetNdata () const;  ; virtual Int_t GetOffset () const;  ; template<typename T > ; T GetTypedValue (Int_t i=0) const;  ; virtual Long64_t GetValueLong64 (Int_t i=0) const;  ; virtual LongDouble_t GetValueLongDouble (Int_t i=0) const;  ; virtual bool IsOnTerminalBranch () const;  ; virtual bool IsRange () const;  ; virtual bool IsUnsigned () const;  ; virtual bool ReadBasketSerialized (TBuffer &, Long64_t);  ; Int_t ResetAddress (void *add, bool calledFromDestructor=false);  Helper routine for TLeafX::SetAddress. ;  ; virtual void SetBranch (TBranch *branch);  ; virtual void SetLeafCount (TLeaf *leaf);  Set the leaf count of this leaf. ;  ; virtual void SetLen (Int_t len=1);  ; virtual void SetOffset (Int_t offset=0);  ; virtual void SetRange (bool range=true);  ; virtual void SetUnsigned ();  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ;",MatchSource.WIKI,doc/master/classTLeafI.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTLeafI.html
Modifiability,inherit,inherited,"d fMaximum to include/be wide than those of the parameter. ;  ; TClass * IsA () const override;  ; void PrintValue (Int_t i=0) const override;  Prints leaf value. ;  ; void ReadBasket (TBuffer &b) override;  Read leaf elements from Basket input buffer. ;  ; void ReadBasketExport (TBuffer &b, TClonesArray *list, Int_t n) override;  Read leaf elements from Basket input buffer and export buffer to TClonesArray objects. ;  ; bool ReadBasketFast (TBuffer &, Long64_t) override;  Deserialize input by performing byteswap as needed. ;  ; void ReadValue (std::istream &s, Char_t delim=' ') override;  Read an integer from std::istream s and store it into the branch buffer. ;  ; void SetAddress (void *add=nullptr) override;  Set leaf buffer data address. ;  ; virtual void SetMaximum (Int_t max);  ; virtual void SetMinimum (Int_t min);  ; void Streamer (TBuffer &) override;  Stream a class object. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TLeaf;  TLeaf ();  ;  TLeaf (TBranch *parent, const char *name, const char *type);  Create a Leaf. ;  ;  ~TLeaf () override;  Destructor. ;  ; void Browse (TBrowser *b) override;  Browse the content of this leaf. ;  ; virtual bool CanGenerateOffsetArray ();  ; virtual Int_t * GenerateOffsetArray (Int_t base, Int_t events);  ; TBranch * GetBranch () const;  ; virtual TString GetFullName () const;  Return the full name (including the parent's branch names) of the leaf. ;  ; virtual TLeaf * GetLeafCount () const;  If this leaf stores a variable-sized array or a multi-dimensional array whose last dimension has variable size, return a pointer to the TLeaf that stores such size. ;  ; virtual TLeaf * GetLeafCounter (Int_t &countval) const;  Return a pointer to the counter of this leaf (if any) or store the number of elements that the leaf contains in countval. ;  ; virtual const Counts_t * GetLeafCountValues (Long64_t start, Long64_t len);  If this branch is a branch count, return the s",MatchSource.WIKI,doc/master/classTLeafI.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTLeafI.html
Performance,perform,performing,"buffer. ;  ; DeserializeType GetDeserializeType () const override;  ; Int_t GetMaximum () const override;  ; Int_t GetMinimum () const override;  ; const char * GetTypeName () const override;  Returns name of leaf type. ;  ; Double_t GetValue (Int_t i=0) const override;  Returns current value of leaf. ;  ; void * GetValuePointer () const override;  ; void Import (TClonesArray *list, Int_t n) override;  Import element from ClonesArray into local leaf buffer. ;  ; bool IncludeRange (TLeaf *) override;  Copy/set fMinimum and fMaximum to include/be wide than those of the parameter. ;  ; TClass * IsA () const override;  ; void PrintValue (Int_t i=0) const override;  Prints leaf value. ;  ; void ReadBasket (TBuffer &b) override;  Read leaf elements from Basket input buffer. ;  ; void ReadBasketExport (TBuffer &b, TClonesArray *list, Int_t n) override;  Read leaf elements from Basket input buffer and export buffer to TClonesArray objects. ;  ; bool ReadBasketFast (TBuffer &, Long64_t) override;  Deserialize input by performing byteswap as needed. ;  ; void ReadValue (std::istream &s, Char_t delim=' ') override;  Read an integer from std::istream s and store it into the branch buffer. ;  ; void SetAddress (void *add=nullptr) override;  Set leaf buffer data address. ;  ; virtual void SetMaximum (Int_t max);  ; virtual void SetMinimum (Int_t min);  ; void Streamer (TBuffer &) override;  Stream a class object. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TLeaf;  TLeaf ();  ;  TLeaf (TBranch *parent, const char *name, const char *type);  Create a Leaf. ;  ;  ~TLeaf () override;  Destructor. ;  ; void Browse (TBrowser *b) override;  Browse the content of this leaf. ;  ; virtual bool CanGenerateOffsetArray ();  ; virtual Int_t * GenerateOffsetArray (Int_t base, Int_t events);  ; TBranch * GetBranch () const;  ; virtual TString GetFullName () const;  Return the full name (including the parent's branch names) of the l",MatchSource.WIKI,doc/master/classTLeafI.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTLeafI.html
Security,hash,hash,"ool range=true);  ; virtual void SetUnsigned ();  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; TClass * IsA () const override;  ; Bool_t IsSortable () const override;  ; void ls (Option_t *option="""") const override;  List TNamed name and title. ;  ; TNamed & operator= (const TNamed &rhs);  TNamed assignment operator. ;  ; void Print (Option_t *option="""") const override;  Print TNamed name and title. ;  ; virtual void SetName (const char *name);  Set the name of the TNamed. ;  ; virtual void SetNameTitle (const char *name, const char *title);  Set all the TNamed parameters (name and title). ;  ; virtual void SetTitle (const char *title="""");  Set the title of the TNamed. ;  ; virtual Int_t Sizeof () const;  Return size of the TNamed part of the TObject. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;",MatchSource.WIKI,doc/master/classTLeafI.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTLeafI.html
Usability,simpl,simple,"oid TLeafI::FillBasket ; (; TBuffer & ; b). overridevirtual . Pack leaf elements in Basket output buffer. ; Reimplemented from TLeaf.; Definition at line 78 of file TLeafI.cxx. ◆ GetDeserializeType(). DeserializeType TLeafI::GetDeserializeType ; (; ); const. inlineoverridevirtual . Reimplemented from TLeaf.; Definition at line 42 of file TLeafI.h. ◆ GetMaximum(). Int_t TLeafI::GetMaximum ; (; ); const. inlineoverridevirtual . Reimplemented from TLeaf.; Definition at line 44 of file TLeafI.h. ◆ GetMinimum(). Int_t TLeafI::GetMinimum ; (; ); const. inlineoverridevirtual . Reimplemented from TLeaf.; Definition at line 45 of file TLeafI.h. ◆ GetTypeName(). const char * TLeafI::GetTypeName ; (; ); const. overridevirtual . Returns name of leaf type. ; Reimplemented from TLeaf.; Definition at line 96 of file TLeafI.cxx. ◆ GetValue(). Double_t TLeafI::GetValue ; (; Int_t ; i = 0); const. overridevirtual . Returns current value of leaf. . if leaf is a simple type, i must be set to 0; if leaf is an array, i is the array element number to be returned . Reimplemented from TLeaf.; Definition at line 107 of file TLeafI.cxx. ◆ GetValuePointer(). void * TLeafI::GetValuePointer ; (; ); const. inlineoverridevirtual . Reimplemented from TLeaf.; Definition at line 47 of file TLeafI.h. ◆ Import(). void TLeafI::Import ; (; TClonesArray * ; list, . Int_t ; n . ). overridevirtual . Import element from ClonesArray into local leaf buffer. ; Reimplemented from TLeaf.; Definition at line 132 of file TLeafI.cxx. ◆ IncludeRange(). bool TLeafI::IncludeRange ; (; TLeaf * ; input). overridevirtual . Copy/set fMinimum and fMaximum to include/be wide than those of the parameter. ; Reimplemented from TLeaf.; Definition at line 116 of file TLeafI.cxx. ◆ IsA(). TClass * TLeafI::IsA ; (; ); const. inlineoverridevirtual . ReturnsTClass describing current object ; Reimplemented from TLeaf.; Definition at line 59 of file TLeafI.h. ◆ PrintValue(). void TLeafI::PrintValue ; (; Int_t ; i = 0); const. overridev",MatchSource.WIKI,doc/master/classTLeafI.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTLeafI.html
Availability,error,error,"option="""");  Append graphics object to current pad. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t ",MatchSource.WIKI,doc/master/classTLeafL.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTLeafL.html
Integrability,rout,routine,"ay or a multi-dimensional array whose last dimension has variable size, return a pointer to the TLeaf that stores such size. ;  ; virtual TLeaf * GetLeafCounter (Int_t &countval) const;  Return a pointer to the counter of this leaf (if any) or store the number of elements that the leaf contains in countval. ;  ; virtual const Counts_t * GetLeafCountValues (Long64_t start, Long64_t len);  If this branch is a branch count, return the set of collection size for the entry range requested start: first entry to read and return information about len: number of entries to read. ;  ; virtual Int_t GetLen () const;  Return the number of effective elements of this leaf, for the current entry. ;  ; virtual Int_t GetLenStatic () const;  Return the fixed length of this leaf. ;  ; virtual Int_t GetLenType () const;  ; virtual Int_t GetNdata () const;  ; virtual Int_t GetOffset () const;  ; template<typename T > ; T GetTypedValue (Int_t i=0) const;  ; virtual bool IsOnTerminalBranch () const;  ; virtual bool IsRange () const;  ; virtual bool IsUnsigned () const;  ; virtual bool ReadBasketSerialized (TBuffer &, Long64_t);  ; Int_t ResetAddress (void *add, bool calledFromDestructor=false);  Helper routine for TLeafX::SetAddress. ;  ; virtual void SetBranch (TBranch *branch);  ; virtual void SetLeafCount (TLeaf *leaf);  Set the leaf count of this leaf. ;  ; virtual void SetLen (Int_t len=1);  ; virtual void SetOffset (Int_t offset=0);  ; virtual void SetRange (bool range=true);  ; virtual void SetUnsigned ();  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override; ",MatchSource.WIKI,doc/master/classTLeafL.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTLeafL.html
Modifiability,inherit,inherited," to include/be wide than those of the parameter. ;  ; TClass * IsA () const override;  ; void PrintValue (Int_t i=0) const override;  Prints leaf value. ;  ; void ReadBasket (TBuffer &b) override;  Read leaf elements from Basket input buffer. ;  ; void ReadBasketExport (TBuffer &b, TClonesArray *list, Int_t n) override;  Read leaf elements from Basket input buffer and export buffer to TClonesArray objects. ;  ; bool ReadBasketFast (TBuffer &, Long64_t) override;  Deserialize input by performing byteswap as needed. ;  ; void ReadValue (std::istream &s, Char_t delim=' ') override;  Read a long integer from std::istream s and store it into the branch buffer. ;  ; void SetAddress (void *add=nullptr) override;  Set leaf buffer data address. ;  ; virtual void SetMaximum (Long64_t max);  ; virtual void SetMinimum (Long64_t min);  ; void Streamer (TBuffer &) override;  Stream a class object. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TLeaf;  TLeaf ();  ;  TLeaf (TBranch *parent, const char *name, const char *type);  Create a Leaf. ;  ;  ~TLeaf () override;  Destructor. ;  ; void Browse (TBrowser *b) override;  Browse the content of this leaf. ;  ; virtual bool CanGenerateOffsetArray ();  ; virtual Int_t * GenerateOffsetArray (Int_t base, Int_t events);  ; TBranch * GetBranch () const;  ; virtual TString GetFullName () const;  Return the full name (including the parent's branch names) of the leaf. ;  ; virtual TLeaf * GetLeafCount () const;  If this leaf stores a variable-sized array or a multi-dimensional array whose last dimension has variable size, return a pointer to the TLeaf that stores such size. ;  ; virtual TLeaf * GetLeafCounter (Int_t &countval) const;  Return a pointer to the counter of this leaf (if any) or store the number of elements that the leaf contains in countval. ;  ; virtual const Counts_t * GetLeafCountValues (Long64_t start, Long64_t len);  If this branch is a branch count, return the s",MatchSource.WIKI,doc/master/classTLeafL.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTLeafL.html
Performance,perform,performing,"t char * GetTypeName () const override;  Returns name of leaf type. ;  ; Double_t GetValue (Int_t i=0) const override;  Returns current value of leaf. ;  ; Long64_t GetValueLong64 (Int_t i=0) const override;  ; LongDouble_t GetValueLongDouble (Int_t i=0) const override;  Returns current value of leaf. ;  ; void * GetValuePointer () const override;  ; void Import (TClonesArray *list, Int_t n) override;  Import element from ClonesArray into local leaf buffer. ;  ; bool IncludeRange (TLeaf *) override;  Copy/set fMinimum and fMaximum to include/be wide than those of the parameter. ;  ; TClass * IsA () const override;  ; void PrintValue (Int_t i=0) const override;  Prints leaf value. ;  ; void ReadBasket (TBuffer &b) override;  Read leaf elements from Basket input buffer. ;  ; void ReadBasketExport (TBuffer &b, TClonesArray *list, Int_t n) override;  Read leaf elements from Basket input buffer and export buffer to TClonesArray objects. ;  ; bool ReadBasketFast (TBuffer &, Long64_t) override;  Deserialize input by performing byteswap as needed. ;  ; void ReadValue (std::istream &s, Char_t delim=' ') override;  Read a long integer from std::istream s and store it into the branch buffer. ;  ; void SetAddress (void *add=nullptr) override;  Set leaf buffer data address. ;  ; virtual void SetMaximum (Long64_t max);  ; virtual void SetMinimum (Long64_t min);  ; void Streamer (TBuffer &) override;  Stream a class object. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TLeaf;  TLeaf ();  ;  TLeaf (TBranch *parent, const char *name, const char *type);  Create a Leaf. ;  ;  ~TLeaf () override;  Destructor. ;  ; void Browse (TBrowser *b) override;  Browse the content of this leaf. ;  ; virtual bool CanGenerateOffsetArray ();  ; virtual Int_t * GenerateOffsetArray (Int_t base, Int_t events);  ; TBranch * GetBranch () const;  ; virtual TString GetFullName () const;  Return the full name (including the parent's branch names",MatchSource.WIKI,doc/master/classTLeafL.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTLeafL.html
Security,hash,hash,"ool range=true);  ; virtual void SetUnsigned ();  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; TClass * IsA () const override;  ; Bool_t IsSortable () const override;  ; void ls (Option_t *option="""") const override;  List TNamed name and title. ;  ; TNamed & operator= (const TNamed &rhs);  TNamed assignment operator. ;  ; void Print (Option_t *option="""") const override;  Print TNamed name and title. ;  ; virtual void SetName (const char *name);  Set the name of the TNamed. ;  ; virtual void SetNameTitle (const char *name, const char *title);  Set all the TNamed parameters (name and title). ;  ; virtual void SetTitle (const char *title="""");  Set the title of the TNamed. ;  ; virtual Int_t Sizeof () const;  Return size of the TNamed part of the TObject. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;",MatchSource.WIKI,doc/master/classTLeafL.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTLeafL.html
Usability,simpl,simple,"oid TLeafL::FillBasket ; (; TBuffer & ; b). overridevirtual . Pack leaf elements in Basket output buffer. ; Reimplemented from TLeaf.; Definition at line 78 of file TLeafL.cxx. ◆ GetDeserializeType(). DeserializeType TLeafL::GetDeserializeType ; (; ); const. inlineoverridevirtual . Reimplemented from TLeaf.; Definition at line 42 of file TLeafL.h. ◆ GetMaximum(). Int_t TLeafL::GetMaximum ; (; ); const. inlineoverridevirtual . Reimplemented from TLeaf.; Definition at line 44 of file TLeafL.h. ◆ GetMinimum(). Int_t TLeafL::GetMinimum ; (; ); const. inlineoverridevirtual . Reimplemented from TLeaf.; Definition at line 45 of file TLeafL.h. ◆ GetTypeName(). const char * TLeafL::GetTypeName ; (; ); const. overridevirtual . Returns name of leaf type. ; Reimplemented from TLeaf.; Definition at line 96 of file TLeafL.cxx. ◆ GetValue(). Double_t TLeafL::GetValue ; (; Int_t ; i = 0); const. overridevirtual . Returns current value of leaf. . if leaf is a simple type, i must be set to 0; if leaf is an array, i is the array element number to be returned . Reimplemented from TLeaf.; Definition at line 107 of file TLeafL.cxx. ◆ GetValueLong64(). Long64_t TLeafL::GetValueLong64 ; (; Int_t ; i = 0); const. inlineoverridevirtual . Reimplemented from TLeaf.; Definition at line 66 of file TLeafL.h. ◆ GetValueLongDouble(). LongDouble_t TLeafL::GetValueLongDouble ; (; Int_t ; i = 0); const. overridevirtual . Returns current value of leaf. . if leaf is a simple type, i must be set to 0; if leaf is an array, i is the array element number to be returned . Reimplemented from TLeaf.; Definition at line 118 of file TLeafL.cxx. ◆ GetValuePointer(). void * TLeafL::GetValuePointer ; (; ); const. inlineoverridevirtual . Reimplemented from TLeaf.; Definition at line 49 of file TLeafL.h. ◆ Import(). void TLeafL::Import ; (; TClonesArray * ; list, . Int_t ; n . ). overridevirtual . Import element from ClonesArray into local leaf buffer. ; Reimplemented from TLeaf.; Definition at line 143 of file TLeaf",MatchSource.WIKI,doc/master/classTLeafL.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTLeafL.html
Availability,error,error,"option="""");  Append graphics object to current pad. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t ",MatchSource.WIKI,doc/master/classTLeafO.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTLeafO.html
Integrability,rout,routine,"ariable size, return a pointer to the TLeaf that stores such size. ;  ; virtual TLeaf * GetLeafCounter (Int_t &countval) const;  Return a pointer to the counter of this leaf (if any) or store the number of elements that the leaf contains in countval. ;  ; virtual const Counts_t * GetLeafCountValues (Long64_t start, Long64_t len);  If this branch is a branch count, return the set of collection size for the entry range requested start: first entry to read and return information about len: number of entries to read. ;  ; virtual Int_t GetLen () const;  Return the number of effective elements of this leaf, for the current entry. ;  ; virtual Int_t GetLenStatic () const;  Return the fixed length of this leaf. ;  ; virtual Int_t GetLenType () const;  ; virtual Int_t GetNdata () const;  ; virtual Int_t GetOffset () const;  ; template<typename T > ; T GetTypedValue (Int_t i=0) const;  ; virtual Long64_t GetValueLong64 (Int_t i=0) const;  ; virtual LongDouble_t GetValueLongDouble (Int_t i=0) const;  ; virtual bool IsOnTerminalBranch () const;  ; virtual bool IsRange () const;  ; virtual bool IsUnsigned () const;  ; virtual bool ReadBasketSerialized (TBuffer &, Long64_t);  ; Int_t ResetAddress (void *add, bool calledFromDestructor=false);  Helper routine for TLeafX::SetAddress. ;  ; virtual void SetBranch (TBranch *branch);  ; virtual void SetLeafCount (TLeaf *leaf);  Set the leaf count of this leaf. ;  ; virtual void SetLen (Int_t len=1);  ; virtual void SetOffset (Int_t offset=0);  ; virtual void SetRange (bool range=true);  ; virtual void SetUnsigned ();  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ;",MatchSource.WIKI,doc/master/classTLeafO.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTLeafO.html
Modifiability,inherit,inherited,"bool IncludeRange (TLeaf *) override;  Copy/set fMinimum and fMaximum to include/be wide than those of the parameter. ;  ; TClass * IsA () const override;  ; void PrintValue (Int_t i=0) const override;  Prints leaf value. ;  ; void ReadBasket (TBuffer &b) override;  Read leaf elements from Basket input buffer. ;  ; void ReadBasketExport (TBuffer &b, TClonesArray *list, Int_t n) override;  Read leaf elements from Basket input buffer and export buffer to TClonesArray objects. ;  ; bool ReadBasketFast (TBuffer &, Long64_t) override;  ; void ReadValue (std::istream &s, Char_t delim=' ') override;  Read a string from std::istream s and store it into the branch buffer. ;  ; void SetAddress (void *add=nullptr) override;  Set leaf buffer data address. ;  ; virtual void SetMaximum (bool max);  ; virtual void SetMinimum (bool min);  ; void Streamer (TBuffer &) override;  Stream a class object. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TLeaf;  TLeaf ();  ;  TLeaf (TBranch *parent, const char *name, const char *type);  Create a Leaf. ;  ;  ~TLeaf () override;  Destructor. ;  ; void Browse (TBrowser *b) override;  Browse the content of this leaf. ;  ; virtual bool CanGenerateOffsetArray ();  ; virtual Int_t * GenerateOffsetArray (Int_t base, Int_t events);  ; TBranch * GetBranch () const;  ; virtual TString GetFullName () const;  Return the full name (including the parent's branch names) of the leaf. ;  ; virtual TLeaf * GetLeafCount () const;  If this leaf stores a variable-sized array or a multi-dimensional array whose last dimension has variable size, return a pointer to the TLeaf that stores such size. ;  ; virtual TLeaf * GetLeafCounter (Int_t &countval) const;  Return a pointer to the counter of this leaf (if any) or store the number of elements that the leaf contains in countval. ;  ; virtual const Counts_t * GetLeafCountValues (Long64_t start, Long64_t len);  If this branch is a branch count, return the s",MatchSource.WIKI,doc/master/classTLeafO.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTLeafO.html
Security,hash,hash,"ool range=true);  ; virtual void SetUnsigned ();  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; TClass * IsA () const override;  ; Bool_t IsSortable () const override;  ; void ls (Option_t *option="""") const override;  List TNamed name and title. ;  ; TNamed & operator= (const TNamed &rhs);  TNamed assignment operator. ;  ; void Print (Option_t *option="""") const override;  Print TNamed name and title. ;  ; virtual void SetName (const char *name);  Set the name of the TNamed. ;  ; virtual void SetNameTitle (const char *name, const char *title);  Set all the TNamed parameters (name and title). ;  ; virtual void SetTitle (const char *title="""");  Set the title of the TNamed. ;  ; virtual Int_t Sizeof () const;  Return size of the TNamed part of the TObject. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;",MatchSource.WIKI,doc/master/classTLeafO.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTLeafO.html
Availability,error,error,"option="""");  Append graphics object to current pad. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t ",MatchSource.WIKI,doc/master/classTLeafObject.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTLeafObject.html
Integrability,rout,routine," (if any) or store the number of elements that the leaf contains in countval. ;  ; virtual const Counts_t * GetLeafCountValues (Long64_t start, Long64_t len);  If this branch is a branch count, return the set of collection size for the entry range requested start: first entry to read and return information about len: number of entries to read. ;  ; virtual Int_t GetLen () const;  Return the number of effective elements of this leaf, for the current entry. ;  ; virtual Int_t GetLenStatic () const;  Return the fixed length of this leaf. ;  ; virtual Int_t GetLenType () const;  ; virtual Int_t GetMaximum () const;  ; virtual Int_t GetMinimum () const;  ; virtual Int_t GetNdata () const;  ; virtual Int_t GetOffset () const;  ; template<typename T > ; T GetTypedValue (Int_t i=0) const;  ; virtual Double_t GetValue (Int_t i=0) const;  ; virtual Long64_t GetValueLong64 (Int_t i=0) const;  ; virtual LongDouble_t GetValueLongDouble (Int_t i=0) const;  ; virtual void Import (TClonesArray *, Int_t);  ; virtual bool IncludeRange (TLeaf *);  ; virtual bool IsRange () const;  ; virtual bool IsUnsigned () const;  ; virtual void ReadBasketExport (TBuffer &, TClonesArray *, Int_t);  ; virtual bool ReadBasketFast (TBuffer &, Long64_t);  ; virtual bool ReadBasketSerialized (TBuffer &, Long64_t);  ; virtual void ReadValue (std::istream &, Char_t=' ');  ; Int_t ResetAddress (void *add, bool calledFromDestructor=false);  Helper routine for TLeafX::SetAddress. ;  ; virtual void SetBranch (TBranch *branch);  ; virtual void SetLeafCount (TLeaf *leaf);  Set the leaf count of this leaf. ;  ; virtual void SetLen (Int_t len=1);  ; virtual void SetOffset (Int_t offset=0);  ; virtual void SetRange (bool range=true);  ; virtual void SetUnsigned ();  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TSt",MatchSource.WIKI,doc/master/classTLeafObject.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTLeafObject.html
Modifiability,inherit,inherited,". ROOT: TLeafObject Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Static Public Member Functions |; Protected Attributes |; List of all members ; TLeafObject Class ReferenceTree Library. ; A TLeaf for a general object derived from TObject. ; Definition at line 31 of file TLeafObject.h. Public Types; enum  EStatusBits { kWarn = (1ULL << ( 14 )); };  ; enum  EStatusBitsOldValues { kOldWarn = (1ULL << ( 12 )); };  In version of ROOT older then v6.12, kWarn was set to BIT(12) which overlaps with TBranch::kBranchObject. More...;  ;  Public Types inherited from TLeaf; enum class  DeserializeType { ;   kInvalid = 0; , kExternal; , kDestructive = kExternal; , kInPlace; , ;   kZeroCopy. };  ; enum  EStatusBits { kIndirectAddress = (1ULL << ( 11 )); , kNewValue = (1ULL << ( 12 )); };  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  . Public Member Functions;  TLeafObject ();  Default constructor for LeafObject. ;  ;  TLeafObject (TBranch *parent, const char *name, const char *type);  Create a LeafObject. ;  ;  ~TLeafObject () override;  Default destructor for a LeafObject. ;  ; bool CanGenerateOffsetArray () override;  ; void FillBasket (TBuffer &b) override;  Pack leaf elements in Basket output buffer. ;  ; virtual Int_t * GenerateOffsetArrayBase (Int_t, Int_t);  ; TClass * GetClas",MatchSource.WIKI,doc/master/classTLeafObject.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTLeafObject.html
Security,hash,hash,"ool range=true);  ; virtual void SetUnsigned ();  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; TClass * IsA () const override;  ; Bool_t IsSortable () const override;  ; void ls (Option_t *option="""") const override;  List TNamed name and title. ;  ; TNamed & operator= (const TNamed &rhs);  TNamed assignment operator. ;  ; void Print (Option_t *option="""") const override;  Print TNamed name and title. ;  ; virtual void SetName (const char *name);  Set the name of the TNamed. ;  ; virtual void SetNameTitle (const char *name, const char *title);  Set all the TNamed parameters (name and title). ;  ; virtual void SetTitle (const char *title="""");  Set the title of the TNamed. ;  ; virtual Int_t Sizeof () const;  Return size of the TNamed part of the TObject. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;",MatchSource.WIKI,doc/master/classTLeafObject.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTLeafObject.html
Availability,error,error,"option="""");  Append graphics object to current pad. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t ",MatchSource.WIKI,doc/master/classTLeafS.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTLeafS.html
Integrability,rout,routine,"ariable size, return a pointer to the TLeaf that stores such size. ;  ; virtual TLeaf * GetLeafCounter (Int_t &countval) const;  Return a pointer to the counter of this leaf (if any) or store the number of elements that the leaf contains in countval. ;  ; virtual const Counts_t * GetLeafCountValues (Long64_t start, Long64_t len);  If this branch is a branch count, return the set of collection size for the entry range requested start: first entry to read and return information about len: number of entries to read. ;  ; virtual Int_t GetLen () const;  Return the number of effective elements of this leaf, for the current entry. ;  ; virtual Int_t GetLenStatic () const;  Return the fixed length of this leaf. ;  ; virtual Int_t GetLenType () const;  ; virtual Int_t GetNdata () const;  ; virtual Int_t GetOffset () const;  ; template<typename T > ; T GetTypedValue (Int_t i=0) const;  ; virtual Long64_t GetValueLong64 (Int_t i=0) const;  ; virtual LongDouble_t GetValueLongDouble (Int_t i=0) const;  ; virtual bool IsOnTerminalBranch () const;  ; virtual bool IsRange () const;  ; virtual bool IsUnsigned () const;  ; virtual bool ReadBasketSerialized (TBuffer &, Long64_t);  ; Int_t ResetAddress (void *add, bool calledFromDestructor=false);  Helper routine for TLeafX::SetAddress. ;  ; virtual void SetBranch (TBranch *branch);  ; virtual void SetLeafCount (TLeaf *leaf);  Set the leaf count of this leaf. ;  ; virtual void SetLen (Int_t len=1);  ; virtual void SetOffset (Int_t offset=0);  ; virtual void SetRange (bool range=true);  ; virtual void SetUnsigned ();  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ;",MatchSource.WIKI,doc/master/classTLeafS.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTLeafS.html
Modifiability,inherit,inherited,"to include/be wide than those of the parameter. ;  ; TClass * IsA () const override;  ; void PrintValue (Int_t i=0) const override;  Prints leaf value. ;  ; void ReadBasket (TBuffer &b) override;  Read leaf elements from Basket input buffer. ;  ; void ReadBasketExport (TBuffer &b, TClonesArray *list, Int_t n) override;  Read leaf elements from Basket input buffer and export buffer to TClonesArray objects. ;  ; bool ReadBasketFast (TBuffer &, Long64_t) override;  Deserialize input by performing byteswap as needed. ;  ; void ReadValue (std::istream &s, Char_t delim=' ') override;  Read a integer integer from std::istream s and store it into the branch buffer. ;  ; void SetAddress (void *add=nullptr) override;  Set leaf buffer data address. ;  ; virtual void SetMaximum (Short_t max);  ; virtual void SetMinimum (Short_t min);  ; void Streamer (TBuffer &) override;  Stream a class object. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TLeaf;  TLeaf ();  ;  TLeaf (TBranch *parent, const char *name, const char *type);  Create a Leaf. ;  ;  ~TLeaf () override;  Destructor. ;  ; void Browse (TBrowser *b) override;  Browse the content of this leaf. ;  ; virtual bool CanGenerateOffsetArray ();  ; virtual Int_t * GenerateOffsetArray (Int_t base, Int_t events);  ; TBranch * GetBranch () const;  ; virtual TString GetFullName () const;  Return the full name (including the parent's branch names) of the leaf. ;  ; virtual TLeaf * GetLeafCount () const;  If this leaf stores a variable-sized array or a multi-dimensional array whose last dimension has variable size, return a pointer to the TLeaf that stores such size. ;  ; virtual TLeaf * GetLeafCounter (Int_t &countval) const;  Return a pointer to the counter of this leaf (if any) or store the number of elements that the leaf contains in countval. ;  ; virtual const Counts_t * GetLeafCountValues (Long64_t start, Long64_t len);  If this branch is a branch count, return the s",MatchSource.WIKI,doc/master/classTLeafS.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTLeafS.html
Performance,perform,performing,"buffer. ;  ; DeserializeType GetDeserializeType () const override;  ; Int_t GetMaximum () const override;  ; Int_t GetMinimum () const override;  ; const char * GetTypeName () const override;  Returns name of leaf type. ;  ; Double_t GetValue (Int_t i=0) const override;  Returns current value of leaf. ;  ; void * GetValuePointer () const override;  ; void Import (TClonesArray *list, Int_t n) override;  Import element from ClonesArray into local leaf buffer. ;  ; bool IncludeRange (TLeaf *) override;  Copy/set fMinimum and fMaximum to include/be wide than those of the parameter. ;  ; TClass * IsA () const override;  ; void PrintValue (Int_t i=0) const override;  Prints leaf value. ;  ; void ReadBasket (TBuffer &b) override;  Read leaf elements from Basket input buffer. ;  ; void ReadBasketExport (TBuffer &b, TClonesArray *list, Int_t n) override;  Read leaf elements from Basket input buffer and export buffer to TClonesArray objects. ;  ; bool ReadBasketFast (TBuffer &, Long64_t) override;  Deserialize input by performing byteswap as needed. ;  ; void ReadValue (std::istream &s, Char_t delim=' ') override;  Read a integer integer from std::istream s and store it into the branch buffer. ;  ; void SetAddress (void *add=nullptr) override;  Set leaf buffer data address. ;  ; virtual void SetMaximum (Short_t max);  ; virtual void SetMinimum (Short_t min);  ; void Streamer (TBuffer &) override;  Stream a class object. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TLeaf;  TLeaf ();  ;  TLeaf (TBranch *parent, const char *name, const char *type);  Create a Leaf. ;  ;  ~TLeaf () override;  Destructor. ;  ; void Browse (TBrowser *b) override;  Browse the content of this leaf. ;  ; virtual bool CanGenerateOffsetArray ();  ; virtual Int_t * GenerateOffsetArray (Int_t base, Int_t events);  ; TBranch * GetBranch () const;  ; virtual TString GetFullName () const;  Return the full name (including the parent's branch name",MatchSource.WIKI,doc/master/classTLeafS.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTLeafS.html
Security,hash,hash,"ool range=true);  ; virtual void SetUnsigned ();  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; TClass * IsA () const override;  ; Bool_t IsSortable () const override;  ; void ls (Option_t *option="""") const override;  List TNamed name and title. ;  ; TNamed & operator= (const TNamed &rhs);  TNamed assignment operator. ;  ; void Print (Option_t *option="""") const override;  Print TNamed name and title. ;  ; virtual void SetName (const char *name);  Set the name of the TNamed. ;  ; virtual void SetNameTitle (const char *name, const char *title);  Set all the TNamed parameters (name and title). ;  ; virtual void SetTitle (const char *title="""");  Set the title of the TNamed. ;  ; virtual Int_t Sizeof () const;  Return size of the TNamed part of the TObject. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;",MatchSource.WIKI,doc/master/classTLeafS.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTLeafS.html
Usability,simpl,simple,"oid TLeafS::FillBasket ; (; TBuffer & ; b). overridevirtual . Pack leaf elements in Basket output buffer. ; Reimplemented from TLeaf.; Definition at line 74 of file TLeafS.cxx. ◆ GetDeserializeType(). DeserializeType TLeafS::GetDeserializeType ; (; ); const. inlineoverridevirtual . Reimplemented from TLeaf.; Definition at line 41 of file TLeafS.h. ◆ GetMaximum(). Int_t TLeafS::GetMaximum ; (; ); const. inlineoverridevirtual . Reimplemented from TLeaf.; Definition at line 42 of file TLeafS.h. ◆ GetMinimum(). Int_t TLeafS::GetMinimum ; (; ); const. inlineoverridevirtual . Reimplemented from TLeaf.; Definition at line 43 of file TLeafS.h. ◆ GetTypeName(). const char * TLeafS::GetTypeName ; (; ); const. overridevirtual . Returns name of leaf type. ; Reimplemented from TLeaf.; Definition at line 92 of file TLeafS.cxx. ◆ GetValue(). Double_t TLeafS::GetValue ; (; Int_t ; i = 0); const. overridevirtual . Returns current value of leaf. . if leaf is a simple type, i must be set to 0; if leaf is an array, i is the array element number to be returned . Reimplemented from TLeaf.; Definition at line 103 of file TLeafS.cxx. ◆ GetValuePointer(). void * TLeafS::GetValuePointer ; (; ); const. inlineoverridevirtual . Reimplemented from TLeaf.; Definition at line 46 of file TLeafS.h. ◆ Import(). void TLeafS::Import ; (; TClonesArray * ; list, . Int_t ; n . ). overridevirtual . Import element from ClonesArray into local leaf buffer. ; Reimplemented from TLeaf.; Definition at line 128 of file TLeafS.cxx. ◆ IncludeRange(). bool TLeafS::IncludeRange ; (; TLeaf * ; input). overridevirtual . Copy/set fMinimum and fMaximum to include/be wide than those of the parameter. ; Reimplemented from TLeaf.; Definition at line 112 of file TLeafS.cxx. ◆ IsA(). TClass * TLeafS::IsA ; (; ); const. inlineoverridevirtual . ReturnsTClass describing current object ; Reimplemented from TLeaf.; Definition at line 58 of file TLeafS.h. ◆ PrintValue(). void TLeafS::PrintValue ; (; Int_t ; i = 0); const. overridev",MatchSource.WIKI,doc/master/classTLeafS.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTLeafS.html
Availability,error,error,"cetoLine(Int_t px, Int_t py, Double_t xp1, Double_t yp1, Double_t xp2, Double_t yp2)TAttLine; DistancetoPrimitive(Int_t px, Int_t py) overrideTPavevirtual; DoError(int level, const char *location, const char *fmt, va_list va) constTObjectprotectedvirtual; Draw(Option_t *option="""") overrideTLegendvirtual; DrawBox(Double_t x1, Double_t y1, Double_t x2, Double_t y2)TBoxvirtual; DrawClass() constTObjectvirtual; DrawClone(Option_t *option="""") constTObjectvirtual; DrawPave(Double_t x1, Double_t y1, Double_t x2, Double_t y2, Int_t bordersize=4, Option_t *option=""br"")TPavevirtual; Dump() constTObjectvirtual; EDeprecatedStatusBits enum nameTObject; EditEntryAttFill()TLegendvirtual; EditEntryAttLine()TLegendvirtual; EditEntryAttMarker()TLegendvirtual; EditEntryAttText()TLegendvirtual; Error(const char *method, const char *msgfmt,...) constTObjectvirtual; EStatusBits enum nameTObject; Execute(const char *method, const char *params, Int_t *error=nullptr)TObjectvirtual; Execute(TMethod *method, TObjArray *params, Int_t *error=nullptr)TObjectvirtual; ExecuteEvent(Int_t event, Int_t px, Int_t py) overrideTPavevirtual; Fatal(const char *method, const char *msgfmt,...) constTObjectvirtual; fBitsTObjectprivate; fBorderSizeTPaveprotected; fColumnSeparationTLegendprotected; fCornerRadiusTPaveprotected; fEntrySeparationTLegendprotected; fFillColorTAttFillprotected; fFillStyleTAttFillprotected; fgDtorOnlyTObjectprivatestatic; fgObjectStatTObjectprivatestatic; FindObject(const char *name) constTObjectvirtual; FindObject(const TObject *obj) constTObjectvirtual; fInitTPaveprotected; fLineColorTAttLineprotected; fLineStyleTAttLineprotected; fLineWidthTAttLineprotected; fMarginTLegendprotected; fNameTPaveprotected; fNColumnsTLegendprotected; fOptionTPaveprotected; fPrimitivesTLegendprotected; fResizingTBoxprotected; fShadowColorTPaveprotected; fTextAlignTAttTextprotected; fTextAngleTAttTextprotected; fTextColorTAttTextprotected; fTextFontTAttTextprotected; fTextSizeTAttTextprotected; fTipTBoxp",MatchSource.WIKI,doc/master/classTLegend-members.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTLegend-members.html
Modifiability,inherit,inherited,". ROOT: Member List. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. TLegend Member List. This is the complete list of members for TLegend, including all inherited members. AbstractMethod(const char *method) constTObject; AddEntry(const TObject *obj, const char *label="""", Option_t *option=""lpf"")TLegend; AddEntry(const char *name, const char *label="""", Option_t *option=""lpf"")TLegend; AddToTObjectTable(TObject *)TObjectprivatestatic; AppendPad(Option_t *option="""")TObjectvirtual; Browse(TBrowser *b)TObjectvirtual; CheckedHash()TObjectinline; Class()TLegendstatic; Class_Name()TLegendstatic; Class_Version()TLegendinlinestatic; ClassName() constTObjectvirtual; Clear(Option_t *option="""") overrideTLegendvirtual; Clone(const char *newname="""") constTObjectvirtual; Compare(const TObject *obj) constTObjectvirtual; ConvertNDCtoPad()TPavevirtual; Copy(TObject &obj) const overrideTLegendvirtual; TPave::TAttLine::Copy(TAttLine &attline) constTAttLine; TPave::TAttFill::Copy(TAttFill &attfill) constTAttFill; TAttText::Copy(TAttText &atttext) constTAttText; DeclFileName()TLegendinlinestatic; Delete(Option_t *option="""")TObjectvirtual; DeleteEntry()TLegendvirtual; DistancetoLine(Int_t px, Int_t py, Double_t xp1, Double_t yp1, Double_t xp2, Double_t yp2)TAttLine; DistancetoPrimitive(Int_t px, Int_t py) overrideTPavevirtual; DoError(int level, const char *location, const char *fmt, va_list va) constTObjectprotectedvirtual; Draw(Option_t *option="""") overrideTLegendvirtual; DrawBox(Double_t x1, Double_t y1, Double_t x2, Double_t y2)TBoxvirtual; DrawClass() constTObjectvirtual; DrawClone(Option_t *option="""") constTObjectvirtual; DrawPave(Double_t x1, Double_t y1, Double_t x2, Double_t y2, Int_t bordersize=4, Option_t *option=""br"")TPavevirtual; Dump() constTObjectvirtual; EDeprecatedStatusBits enum nameTObject; EditEntryAttFill()TLegendvirtual; EditEntryAttLine()TLegendvirtual; EditEntryAttMarker()TLegendvirtual; EditEntryAttText()TLegendvirtual; Error(const ch",MatchSource.WIKI,doc/master/classTLegend-members.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTLegend-members.html
Availability,error,error,"esponding object is added in the legend using its pointer.; {; auto c1 = new TCanvas(""c1"",""c1"",600,500);; gStyle->SetOptStat(0);; ; auto h1 = new TH1F(""h1"",""TLegend Example"",200,-10,10);; h1->FillRandom(""gaus"",30000);; h1->SetFillColor(kGreen);; h1->SetFillStyle(3003);; h1->Draw();; ; auto f1=new TF1(""f1"",""1000*TMath::Abs(sin(x)/x)"",-10,10);; f1->SetLineColor(kBlue);; f1->SetLineWidth(4);; f1->Draw(""same"");; ; const Int_t n = 20;; Double_t x[n], y[n], ex[n], ey[n];; for (Int_t i=0;i<n;i++) {; x[i] = i*0.1;; y[i] = 1000*sin(x[i]+0.2);; x[i] = 17.8*x[i]-8.9;; ex[i] = 1.0;; ey[i] = 10.*i;; }; auto gr = new TGraphErrors(n,x,y,ex,ey);; gr->SetName(""gr"");; gr->SetLineColor(kRed);; gr->SetLineWidth(2);; gr->SetMarkerStyle(21);; gr->SetMarkerSize(1.3);; gr->SetMarkerColor(7);; gr->Draw(""P"");; ; auto legend = new TLegend(0.1,0.7,0.48,0.9);; legend->SetHeader(""The Legend Title"",""C""); // option ""C"" allows to center the header; legend->AddEntry(h1,""Histogram filled with random numbers"",""f"");; legend->AddEntry(""f1"",""Function abs(#frac{sin(x)}{x})"",""l"");; legend->AddEntry(""gr"",""Graph with error bars"",""lep"");; legend->Draw();; }; kRed@ kRedDefinition Rtypes.h:66; kGreen@ kGreenDefinition Rtypes.h:66; kBlue@ kBlueDefinition Rtypes.h:66; gStyleR__EXTERN TStyle * gStyleDefinition TStyle.h:436; TAttFill::SetFillColorvirtual void SetFillColor(Color_t fcolor)Set the fill area color.Definition TAttFill.h:37; TAttFill::SetFillStylevirtual void SetFillStyle(Style_t fstyle)Set the fill area style.Definition TAttFill.h:39; TAttLine::SetLineWidthvirtual void SetLineWidth(Width_t lwidth)Set the line width.Definition TAttLine.h:43; TAttLine::SetLineColorvirtual void SetLineColor(Color_t lcolor)Set the line color.Definition TAttLine.h:40; TAttMarker::SetMarkerColorvirtual void SetMarkerColor(Color_t mcolor=1)Set the marker color.Definition TAttMarker.h:38; TAttMarker::SetMarkerStylevirtual void SetMarkerStyle(Style_t mstyle=1)Set the marker style.Definition TAttMarker.h:40; TAttMarker::SetMarker",MatchSource.WIKI,doc/master/classTLegend.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTLegend.html
Energy Efficiency,green,green,"as(""c2"",""c2"",500,300);; ; auto legend = new TLegend(0.2, 0.2, .8, .8);; auto h = new TH1F("""", """", 1, 0, 1);; ; legend->SetNColumns(2);; ; legend->AddEntry(h, ""Column 1 line 1"", ""l"");; legend->AddEntry(h, ""Column 2 line 1"", ""l"");; legend->AddEntry(h, ""Column 1 line 2"", ""l"");; legend->AddEntry(h, ""Column 2 line 2"", ""l"");; ; legend->Draw();; }; c3return c3Definition legend3.C:15. SinceROOT version 6.09/03; The legend can be placed automatically in the current pad in an empty space found at painting time.; The following example illustrate this facility. Only the width and height of the legend is specified in percentage of the pad size.; ; void legendautoplaced(); {; auto c4 = new TCanvas(""c"", ""c"", 600,500);; auto hpx = new TH1D(""hpx"",""This is the hpx distribution"",100,-4.,4.);; hpx->FillRandom(""gaus"", 50000);; hpx->Draw(""E"");; hpx->GetYaxis()->SetTitle(""Y Axis title"");; hpx->GetYaxis()->SetTitleOffset(1.3); hpx->GetYaxis()->CenterTitle(true);; hpx->GetXaxis()->SetTitle(""X Axis title"");; hpx->GetXaxis()->CenterTitle(true);; ; auto h1 = new TH1D(""h1"",""A green histogram"",100,-2.,2.);; h1->FillRandom(""gaus"", 10000);; h1->SetLineColor(kGreen);; h1->Draw(""same"");; ; auto g = new TGraph();; g->SetPoint(0, -3.5, 100 );; g->SetPoint(1, -3.0, 300 );; g->SetPoint(2, -2.0, 1000 );; g->SetPoint(3, 1.0, 800 );; g->SetPoint(4, 0.0, 200 );; g->SetPoint(5, 3.0, 200 );; g->SetPoint(6, 3.0, 700 );; g->Draw(""L"");; g->SetTitle(""This is a TGraph"");; g->SetLineColor(kRed);; g->SetFillColor(0);; ; // TPad::BuildLegend() default placement values are such that they trigger; // the automatic placement.; c4->BuildLegend();; }; g#define g(i)Definition RSha256.hxx:105; TGraphA TGraph is an object made of two arrays X and Y with npoints each.Definition TGraph.h:41; TH1D1-D histogram with a double per channel (see TH1 documentation)Definition TH1.h:670; . Definition at line 23 of file TLegend.h. Public Member Functions;  TLegend ();  Default constructor. ;  ;  TLegend (const TLegend &legend);  Copy con",MatchSource.WIKI,doc/master/classTLegend.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTLegend.html
Integrability,depend,depending,"x2);  ; void SetY1 (Double_t y1) override;  Set the Y1 value. ;  ; virtual void SetY1NDC (Double_t y1);  ; void SetY2 (Double_t y2) override;  Set the Y2 value. ;  ; virtual void SetY2NDC (Double_t y2);  ; void Streamer (TBuffer &) override;  Stream an object of class TPave. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TBox;  TBox ();  Box default constructor. ;  ;  TBox (const TBox &box);  Box copy constructor. ;  ;  TBox (Double_t x1, Double_t y1, Double_t x2, Double_t y2);  Box standard constructor. ;  ;  ~TBox () override;  Box destructor. ;  ; virtual TBox * DrawBox (Double_t x1, Double_t y1, Double_t x2, Double_t y2);  Draw this box with new coordinates. ;  ; Rectangle_t GetBBox () override;  Return the ""bounding Box"" of the Box. ;  ; TPoint GetBBoxCenter () override;  Return the center of the Box as TPoint in pixels. ;  ; Double_t GetX1 () const;  ; Double_t GetX2 () const;  ; Double_t GetY1 () const;  ; Double_t GetY2 () const;  ; virtual void HideToolTip (Int_t event);  Hide tool tip depending on the event type. ;  ; Bool_t IsBeingResized () const;  ; virtual Int_t IsInside (Double_t x, Double_t y) const;  Function which returns 1 if point x,y lies inside the box, 0 otherwise. ;  ; TBox & operator= (const TBox &);  Assignment operator. ;  ; virtual void PaintBox (Double_t x1, Double_t y1, Double_t x2, Double_t y2, Option_t *option="""");  Draw this box with new coordinates. ;  ; void SetBBoxCenter (const TPoint &p) override;  Set center of the Box. ;  ; void SetBBoxCenterX (const Int_t x) override;  Set X coordinate of the center of the Box. ;  ; void SetBBoxCenterY (const Int_t y) override;  Set Y coordinate of the center of the Box. ;  ; void SetBBoxX1 (const Int_t x) override;  Set left hand side of BoundingBox to a value (resize in x direction on left) ;  ; void SetBBoxX2 (const Int_t x) override;  Set right hand side of BoundingBox to a value (resize in x direction on right) ;  ; void SetBBo",MatchSource.WIKI,doc/master/classTLegend.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTLegend.html
Modifiability,inherit,inherits,"hannel (see TH1 documentation)Definition TH1.h:622; TH1::FillRandomvirtual void FillRandom(const char *fname, Int_t ntimes=5000, TRandom *rng=nullptr)Fill histogram following distribution in function fname.Definition TH1.cxx:3519; TH1::Drawvoid Draw(Option_t *option="""") overrideDraw this histogram with options.Definition TH1.cxx:3066; TLegend::TLegendTLegend()Default constructor.Definition TLegend.cxx:200; TStyle::SetOptStatvoid SetOptStat(Int_t stat=1)The type of information printed in the histogram statistics box can be selected via the parameter mod...Definition TStyle.cxx:1640; double; int; yDouble_t y[n]Definition legend1.C:17; c1return c1Definition legend1.C:41; xDouble_t x[n]Definition legend1.C:17; eyDouble_t ey[n]Definition legend1.C:17; nconst Int_t nDefinition legend1.C:16; grTGraphErrors * grDefinition legend1.C:25; exDouble_t ex[n]Definition legend1.C:17; h1TH1F * h1Definition legend1.C:5; f1TF1 * f1Definition legend1.C:11. TLegend inherits from TAttText therefore changing any text attributes (text alignment, font, color...) on a legend will changed the text attributes on each line.; In particular it can be interesting to change the text alignement that way. In order to have a base-line vertical alignment instead of a centered one simply do: legend->SetTextAlign(13);; or legend->SetTextAlign(11);; The default value of some TLegend attributes can be changed using gStyle. The default settings are: SetLegendBorderSize(1);; SetLegendFillColor(0);; SetLegendFont(42);; SetLegendTextSize(0.);; The global attributes change the default values for the next created legends.; Text attributes can be also changed individually on each legend entry: TLegendEntry *le = leg->AddEntry(h1,""Histogram filled with random numbers"",""f"");; le->SetTextColor(kBlue);; TAttText::SetTextColorvirtual void SetTextColor(Color_t tcolor=1)Set the text color.Definition TAttText.h:44; TLegendEntryStorage class for one entry of a TLegend.Definition TLegendEntry.h:25; leglegDefinition legend1",MatchSource.WIKI,doc/master/classTLegend.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTLegend.html
Performance,perform,performed,".  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; List of all members ; TLegend Class ReferenceGraphics » 2D Graphics » Basic graphics. ; This class displays a legend box (TPaveText) containing several legend entries. ; Each legend entry is made of a reference to a ROOT object, a text label and an option specifying which graphical attributes (marker/line/fill) should be displayed.; The following example shows how to create a legend. In this example the legend contains a histogram, a function and a graph. The histogram is put in the legend using its reference pointer whereas the graph and the function are added using their names. Note that, because TGraph constructors do not have the TGraph name as parameter, the graph name should be specified using the SetName method.; When an object is added by name, a scan is performed on the list of objects contained in the current pad (gPad) and also in the possible TMultiGraph and THStack present in the pad. If a matching name is found, the corresponding object is added in the legend using its pointer.; {; auto c1 = new TCanvas(""c1"",""c1"",600,500);; gStyle->SetOptStat(0);; ; auto h1 = new TH1F(""h1"",""TLegend Example"",200,-10,10);; h1->FillRandom(""gaus"",30000);; h1->SetFillColor(kGreen);; h1->SetFillStyle(3003);; h1->Draw();; ; auto f1=new TF1(""f1"",""1000*TMath::Abs(sin(x)/x)"",-10,10);; f1->SetLineColor(kBlue);; f1->SetLineWidth(4);; f1->Draw(""same"");; ; const Int_t n = 20;; Double_t x[n], y[n], ex[n], ey[n];; for (Int_t i=0;i<n;i++) {; x[i] = i*0.1;; y[i] = 1000*sin(x[i]+0.2);; x[i] = 17.8*x[i]-8.9;; ex[i] = 1.0;; ey[i] = 10.*i;; }; auto gr = new TGraphErrors(n,x,y,ex,ey);; gr->SetName(""gr"");; gr->SetLineColor(kRed);; gr->SetLineWidth(2);; gr->SetMarkerStyle(21);; gr->SetMarkerSize(1.3);; gr->SetMarkerColor(7);; gr->Draw(""P"");; ; auto legend = new TLegend(0.1,0.7,0.48,0.9);; legend->SetHeader(""The Lege",MatchSource.WIKI,doc/master/classTLegend.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTLegend.html
Security,hash,hash,""");  Pave normal constructor. ;  ;  ~TPave () override;  Pave default destructor. ;  ; virtual void ConvertNDCtoPad ();  Convert pave coordinates from NDC to Pad coordinates. ;  ; void Copy (TObject &pave) const override;  Copy this pave to pave. ;  ; Int_t DistancetoPrimitive (Int_t px, Int_t py) override;  Compute distance from point px,py to a pave. ;  ; void Draw (Option_t *option="""") override;  Draw this pave with its current attributes. ;  ; virtual TPave * DrawPave (Double_t x1, Double_t y1, Double_t x2, Double_t y2, Int_t bordersize=4, Option_t *option=""br"");  Draw this pave with new coordinates. ;  ; void ExecuteEvent (Int_t event, Int_t px, Int_t py) override;  Execute action corresponding to one event. ;  ; Int_t GetBorderSize () const;  ; Double_t GetCornerRadius () const;  ; const char * GetName () const override;  Returns name of object. ;  ; Option_t * GetOption () const override;  ; Int_t GetShadowColor () const;  ; Double_t GetX1NDC () const;  ; Double_t GetX2NDC () const;  ; Double_t GetY1NDC () const;  ; Double_t GetY2NDC () const;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; TClass * IsA () const override;  ; Bool_t IsSortable () const override;  ; void ls (Option_t *option="""") const override;  List this pave with its attributes. ;  ; TPave & operator= (const TPave &src);  Assignment operator. ;  ; void Paint (Option_t *option="""") override;  Paint this pave with its current attributes. ;  ; virtual void PaintPave (Double_t x1, Double_t y1, Double_t x2, Double_t y2, Int_t bordersize=4, Option_t *option=""br"");  Draw this pave with new coordinates. ;  ; virtual void PaintPaveArc (Double_t x1, Double_t y1, Double_t x2, Double_t y2, Int_t bordersize=4, Option_t *option=""br"");  Draw this pave with rounded corners. ;  ; void Print (Option_t *option="""") const override;  Dump this pave with its attributes. ;  ; void SavePrimitive (std::ostream &out, Option_t *option="""") override;  Save primitive as a C++ statement(s) on outp",MatchSource.WIKI,doc/master/classTLegend.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTLegend.html
Usability,simpl,simply,"m with options.Definition TH1.cxx:3066; TLegend::TLegendTLegend()Default constructor.Definition TLegend.cxx:200; TStyle::SetOptStatvoid SetOptStat(Int_t stat=1)The type of information printed in the histogram statistics box can be selected via the parameter mod...Definition TStyle.cxx:1640; double; int; yDouble_t y[n]Definition legend1.C:17; c1return c1Definition legend1.C:41; xDouble_t x[n]Definition legend1.C:17; eyDouble_t ey[n]Definition legend1.C:17; nconst Int_t nDefinition legend1.C:16; grTGraphErrors * grDefinition legend1.C:25; exDouble_t ex[n]Definition legend1.C:17; h1TH1F * h1Definition legend1.C:5; f1TF1 * f1Definition legend1.C:11. TLegend inherits from TAttText therefore changing any text attributes (text alignment, font, color...) on a legend will changed the text attributes on each line.; In particular it can be interesting to change the text alignement that way. In order to have a base-line vertical alignment instead of a centered one simply do: legend->SetTextAlign(13);; or legend->SetTextAlign(11);; The default value of some TLegend attributes can be changed using gStyle. The default settings are: SetLegendBorderSize(1);; SetLegendFillColor(0);; SetLegendFont(42);; SetLegendTextSize(0.);; The global attributes change the default values for the next created legends.; Text attributes can be also changed individually on each legend entry: TLegendEntry *le = leg->AddEntry(h1,""Histogram filled with random numbers"",""f"");; le->SetTextColor(kBlue);; TAttText::SetTextColorvirtual void SetTextColor(Color_t tcolor=1)Set the text color.Definition TAttText.h:44; TLegendEntryStorage class for one entry of a TLegend.Definition TLegendEntry.h:25; leglegDefinition legend1.C:34; Note that the TPad class has a method to build automatically a legend for all objects in the pad. It is called TPad::BuildLegend().; Each item in the legend is added using the AddEntry method. This method defines the object to be added (by reference or name), the label associated to this o",MatchSource.WIKI,doc/master/classTLegend.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTLegend.html
Availability,error,error,"opy(TObject &obj) const overrideTLegendEntryvirtual; TAttText::Copy(TAttText &atttext) constTAttText; TAttLine::Copy(TAttLine &attline) constTAttLine; TAttFill::Copy(TAttFill &attfill) constTAttFill; TAttMarker::Copy(TAttMarker &attmarker) constTAttMarker; DeclFileName()TLegendEntryinlinestatic; Delete(Option_t *option="""")TObjectvirtual; DistancetoLine(Int_t px, Int_t py, Double_t xp1, Double_t yp1, Double_t xp2, Double_t yp2)TAttLine; DistancetoPrimitive(Int_t px, Int_t py)TObjectvirtual; DoError(int level, const char *location, const char *fmt, va_list va) constTObjectprotectedvirtual; Draw(Option_t *option="""")TObjectvirtual; DrawClass() constTObjectvirtual; DrawClone(Option_t *option="""") constTObjectvirtual; Dump() constTObjectvirtual; EDeprecatedStatusBits enum nameTObject; Error(const char *method, const char *msgfmt,...) constTObjectvirtual; EStatusBits enum nameTObject; Execute(const char *method, const char *params, Int_t *error=nullptr)TObjectvirtual; Execute(TMethod *method, TObjArray *params, Int_t *error=nullptr)TObjectvirtual; ExecuteEvent(Int_t event, Int_t px, Int_t py)TObjectvirtual; Fatal(const char *method, const char *msgfmt,...) constTObjectvirtual; fBitsTObjectprivate; fFillColorTAttFillprotected; fFillStyleTAttFillprotected; fgDtorOnlyTObjectprivatestatic; fgObjectStatTObjectprivatestatic; FindObject(const char *name) constTObjectvirtual; FindObject(const TObject *obj) constTObjectvirtual; fLabelTLegendEntryprotected; fLineColorTAttLineprotected; fLineStyleTAttLineprotected; fLineWidthTAttLineprotected; fMarkerColorTAttMarkerprotected; fMarkerSizeTAttMarkerprotected; fMarkerStyleTAttMarkerprotected; fObjectTLegendEntryprotected; fOptionTLegendEntryprotected; fTextAlignTAttTextprotected; fTextAngleTAttTextprotected; fTextColorTAttTextprotected; fTextFontTAttTextprotected; fTextSizeTAttTextprotected; fUniqueIDTObjectprivate; GetDrawOption() constTObjectvirtual; GetDtorOnly()TObjectstatic; GetFillColor() constTAttFillinlinevirtual; GetFillStyle() ",MatchSource.WIKI,doc/master/classTLegendEntry-members.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTLegendEntry-members.html
Modifiability,inherit,inherited,". ROOT: Member List. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. TLegendEntry Member List. This is the complete list of members for TLegendEntry, including all inherited members. AbstractMethod(const char *method) constTObject; AddToTObjectTable(TObject *)TObjectprivatestatic; AppendPad(Option_t *option="""")TObjectvirtual; Browse(TBrowser *b)TObjectvirtual; CheckedHash()TObjectinline; Class()TLegendEntrystatic; Class_Name()TLegendEntrystatic; Class_Version()TLegendEntryinlinestatic; ClassName() constTObjectvirtual; Clear(Option_t *="""")TObjectinlinevirtual; Clone(const char *newname="""") constTObjectvirtual; Compare(const TObject *obj) constTObjectvirtual; Copy(TObject &obj) const overrideTLegendEntryvirtual; TAttText::Copy(TAttText &atttext) constTAttText; TAttLine::Copy(TAttLine &attline) constTAttLine; TAttFill::Copy(TAttFill &attfill) constTAttFill; TAttMarker::Copy(TAttMarker &attmarker) constTAttMarker; DeclFileName()TLegendEntryinlinestatic; Delete(Option_t *option="""")TObjectvirtual; DistancetoLine(Int_t px, Int_t py, Double_t xp1, Double_t yp1, Double_t xp2, Double_t yp2)TAttLine; DistancetoPrimitive(Int_t px, Int_t py)TObjectvirtual; DoError(int level, const char *location, const char *fmt, va_list va) constTObjectprotectedvirtual; Draw(Option_t *option="""")TObjectvirtual; DrawClass() constTObjectvirtual; DrawClone(Option_t *option="""") constTObjectvirtual; Dump() constTObjectvirtual; EDeprecatedStatusBits enum nameTObject; Error(const char *method, const char *msgfmt,...) constTObjectvirtual; EStatusBits enum nameTObject; Execute(const char *method, const char *params, Int_t *error=nullptr)TObjectvirtual; Execute(TMethod *method, TObjArray *params, Int_t *error=nullptr)TObjectvirtual; ExecuteEvent(Int_t event, Int_t px, Int_t py)TObjectvirtual; Fatal(const char *method, const char *msgfmt,...) constTObjectvirtual; fBitsTObjectprivate; fFillColorTAttFillprotected; fFillStyleTAttFillprotected; fgDtorOnlyTObjectprivatestatic; fg",MatchSource.WIKI,doc/master/classTLegendEntry-members.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTLegendEntry-members.html
Availability,error,error,"nst char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Return",MatchSource.WIKI,doc/master/classTLegendEntry.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTLegendEntry.html
Integrability,message,message,"nst char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Return",MatchSource.WIKI,doc/master/classTLegendEntry.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTLegendEntry.html
Modifiability,inherit,inherited,";  ~TLegendEntry () override;  TLegendEntry default destructor. ;  ; void Copy (TObject &obj) const override;  copy this TLegendEntry into obj ;  ; virtual const char * GetLabel () const;  ; virtual TObject * GetObject () const;  ; Option_t * GetOption () const override;  ; TClass * IsA () const override;  ; void Print (Option_t *option="""") const override;  dump this TLegendEntry to std::cout ;  ; virtual void SaveEntry (std::ostream &out, const char *name);  Save this TLegendEntry as C++ statements on output stream out to be used with the SaveAs .C option. ;  ; virtual void SetLabel (const char *label="""");  ; virtual void SetObject (const char *objectName);  (re)set the obj pointed to by this entry ;  ; virtual void SetObject (TObject *obj);  (re)set the obj pointed to by this entry ;  ; virtual void SetOption (Option_t *option=""lpf"");  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) c",MatchSource.WIKI,doc/master/classTLegendEntry.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTLegendEntry.html
Security,hash,hash," to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Returns name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual const char * GetTitle () const;  Returns title of object. ;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; virtual ULong_t Hash () const;  Return hash value for this object. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns kTRUE if object inherits from class ""classname"". ;  ; virtual Bool_t InheritsFrom (const TClass *cl) const;  Returns kTRUE if object inherits from TClass cl. ;  ; virtual void Inspect () const;  Dump contents of this object in a graphics canvas. ;  ; void InvertBit (UInt_t f);  ; Bool_t IsDestructed () const;  IsDestructed. ;  ; virtual Bool_t IsEqual (const TObject *obj) const;  Default equal comparison (objects are equal if they have the same address in memory). ;  ; virtual Bool_t IsFolder () const;  Returns kTRUE in case object contains browsable objects (like containers or lists of other objects). ;  ; R__ALWAYS_INLINE Bool_t",MatchSource.WIKI,doc/master/classTLegendEntry.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTLegendEntry.html
Availability,error,error,"ject. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t ",MatchSource.WIKI,doc/master/classTLibraryDocInfo.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTLibraryDocInfo.html
Integrability,message,message,"ject. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t ",MatchSource.WIKI,doc/master/classTLibraryDocInfo.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTLibraryDocInfo.html
Modifiability,inherit,inherited,". ROOT: TLibraryDocInfo Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Private Attributes |; List of all members ; TLibraryDocInfo Class Reference. . Definition at line 141 of file TDocInfo.h. Public Member Functions;  TLibraryDocInfo ();  ;  TLibraryDocInfo (const char *lib);  ; void AddDependency (const std::string &lib);  ; void AddModule (const std::string &module);  ; std::set< std::string > & GetDependencies ();  ; std::set< std::string > & GetModules ();  ; TClass * IsA () const override;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; TClass * IsA () const override;  ; Bool_t IsSortable () const override;  ; void ls (Option_t *option="""") const override;  List TNamed name and title. ;  ; TNamed & operator= (const TNamed &rhs);  TNamed assignment operator. ;  ; void Print (Option_t *option="""") const override;  Print TNamed na",MatchSource.WIKI,doc/master/classTLibraryDocInfo.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTLibraryDocInfo.html
Security,hash,hash," override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; TClass * IsA () const override;  ; Bool_t IsSortable () const override;  ; void ls (Option_t *option="""") const override;  List TNamed name and title. ;  ; TNamed & operator= (const TNamed &rhs);  TNamed assignment operator. ;  ; void Print (Option_t *option="""") const override;  Print TNamed name and title. ;  ; virtual void SetName (const char *name);  Set the name of the TNamed. ;  ; virtual void SetNameTitle (const char *name, const char *title);  Set all the TNamed parameters (name and title). ;  ; virtual void SetTitle (const char *title="""");  Set the title of the TNamed. ;  ; virtual Int_t Sizeof () const;  Return size of the TNamed part of the TObject. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;",MatchSource.WIKI,doc/master/classTLibraryDocInfo.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTLibraryDocInfo.html
Integrability,interface,interface,". ROOT: TLimit Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Static Protected Member Functions |; Static Private Attributes |; List of all members ; TLimit Class ReferenceHistogram Library. ; Legacy Code TLimit is a legacy interface: there will be no bug fixes nor new developments. Therefore it is not recommended to use it in new long-term production code. But, depending on the context, using TLimit might still be a valid solution. Consider switching to RooStats.; Algorithm to compute 95% CL limits using the Likelihood ratio semi-bayesian method. ; Implemented by C. Delaere from the mclimit code written by Tom Junk [HEP-EX/9902006]. See http://cern.ch/thomasj/searchlimits/ecl.html for more details.; It takes signal, background and data histograms wrapped in a TLimitDataSource as input and runs a set of Monte Carlo experiments in order to compute the limits. If needed, inputs are fluctuated according to systematics. The output is a TConfidenceLevel.; The class TLimitDataSource takes the signal, background and data histograms as well as different systematics sources to form the TLimit input.; The class TConfidenceLevel represents the final result of the TLimit algorithm. It is created just after the time-consuming part and can be stored in a TFile for further processing. It contains light methods to return CLs, CLb and other interesting quantities.; The actual algorithm...; From an input (TLimitDataSource) it produces an output TConfidenceLevel. For this, nmc Monte Carlo experiments are performed. As usual, the larger this number, the longer the compute time, but the better the result.; Supposing that there is a plotfile.root file containing 3 histograms (signal, background and data), you can imagine doing things like:; TFile* infile=new TFile(""plotfile.root"",""READ"");; infile->cd();; TH1* sh=(TH1*)infile->Get(""signal"");; TH1* bh=(TH1*)",MatchSource.WIKI,doc/master/classTLimit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTLimit.html
Performance,perform,performed," CL limits using the Likelihood ratio semi-bayesian method. ; Implemented by C. Delaere from the mclimit code written by Tom Junk [HEP-EX/9902006]. See http://cern.ch/thomasj/searchlimits/ecl.html for more details.; It takes signal, background and data histograms wrapped in a TLimitDataSource as input and runs a set of Monte Carlo experiments in order to compute the limits. If needed, inputs are fluctuated according to systematics. The output is a TConfidenceLevel.; The class TLimitDataSource takes the signal, background and data histograms as well as different systematics sources to form the TLimit input.; The class TConfidenceLevel represents the final result of the TLimit algorithm. It is created just after the time-consuming part and can be stored in a TFile for further processing. It contains light methods to return CLs, CLb and other interesting quantities.; The actual algorithm...; From an input (TLimitDataSource) it produces an output TConfidenceLevel. For this, nmc Monte Carlo experiments are performed. As usual, the larger this number, the longer the compute time, but the better the result.; Supposing that there is a plotfile.root file containing 3 histograms (signal, background and data), you can imagine doing things like:; TFile* infile=new TFile(""plotfile.root"",""READ"");; infile->cd();; TH1* sh=(TH1*)infile->Get(""signal"");; TH1* bh=(TH1*)infile->Get(""background"");; TH1* dh=(TH1*)infile->Get(""data"");; TLimitDataSource* mydatasource = new TLimitDataSource(sh,bh,dh);; TConfidenceLevel *myconfidence = TLimit::ComputeLimit(mydatasource,50000);; std::cout << "" CLs : "" << myconfidence->CLs() << std::endl;; std::cout << "" CLsb : "" << myconfidence->CLsb() << std::endl;; std::cout << "" CLb : "" << myconfidence->CLb() << std::endl;; std::cout << ""< CLs > : "" << myconfidence->GetExpectedCLs_b() << std::endl;; std::cout << ""< CLsb > : "" << myconfidence->GetExpectedCLsb_b() << std::endl;; std::cout << ""< CLb > : "" << myconfidence->GetExpectedCLb_b() << std::endl;; delet",MatchSource.WIKI,doc/master/classTLimit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTLimit.html
Testability,log,log," (Double_t s, Double_t b, Int_t d, TVectorD *se, TVectorD *be, TObjArray *, Int_t nmc=50000, bool stat=false, TRandom *generator=nullptr);  ; static TConfidenceLevel * ComputeLimit (TH1 *s, TH1 *b, TH1 *d, Int_t nmc=50000, bool stat=false, TRandom *generator=nullptr);  ; static TConfidenceLevel * ComputeLimit (TH1 *s, TH1 *b, TH1 *d, TVectorD *se, TVectorD *be, TObjArray *, Int_t nmc=50000, bool stat=false, TRandom *generator=nullptr);  ; static TConfidenceLevel * ComputeLimit (TLimitDataSource *data, Int_t nmc=50000, bool stat=false, TRandom *generator=nullptr);  ; static const char * DeclFileName ();  . Static Protected Member Functions; static bool Fluctuate (TLimitDataSource *input, TLimitDataSource *output, bool init, TRandom *, bool stat=false);  ; static Double_t LogLikelihood (Double_t s, Double_t b, Double_t b2, Double_t d);  . Static Private Attributes; static TOrdCollection * fgSystNames = new TOrdCollection();  Collection of systematics names. ;  ; static TArrayD * fgTable = new TArrayD(0);  A log table... just to speed up calculation. ;  . #include <TLimit.h>; Constructor & Destructor Documentation. ◆ TLimit(). TLimit::TLimit ; (; ). inline . Definition at line 25 of file TLimit.h. ◆ ~TLimit(). virtual TLimit::~TLimit ; (; ). inlinevirtual . Definition at line 26 of file TLimit.h. Member Function Documentation. ◆ Class(). static TClass * TLimit::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * TLimit::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t TLimit::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 52 of file TLimit.h. ◆ ComputeLimit() [1/5]. TConfidenceLevel * TLimit::ComputeLimit ; (; Double_t ; s, . Double_t ; b, . Int_t ; d, . Int_t ; nmc = 50000, . bool ; stat = false, . TRandom * ; generator = nullptr . ). static . Definition at line 361 of file TLimit.cxx. ◆ ComputeLimit() [2/5]. TConfidenceLev",MatchSource.WIKI,doc/master/classTLimit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTLimit.html
Availability,error,error,"object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Return",MatchSource.WIKI,doc/master/classTLimitDataSource.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTLimitDataSource.html
Integrability,message,message,"object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Return",MatchSource.WIKI,doc/master/classTLimitDataSource.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTLimitDataSource.html
Modifiability,inherit,inherited," directly adds one channel with signal, background and data given as input. ;  ;  TLimitDataSource (TH1 *s, TH1 *b, TH1 *d, TVectorD *es, TVectorD *eb, TObjArray *names);  Another constructor, directly adds one channel with signal, background and data given as input. ;  ;  ~TLimitDataSource () override;  ; virtual void AddChannel (TH1 *, TH1 *, TH1 *);  Adds a channel with signal, background and data given as input. ;  ; virtual void AddChannel (TH1 *, TH1 *, TH1 *, TVectorD *, TVectorD *, TObjArray *);  Adds a channel with signal, background and data given as input. ;  ; virtual TObjArray * GetBackground ();  ; virtual TObjArray * GetCandidates ();  ; virtual TObjArray * GetErrorNames ();  ; virtual TObjArray * GetErrorOnBackground ();  ; virtual TObjArray * GetErrorOnSignal ();  ; virtual TObjArray * GetSignal ();  ; virtual void SetOwner (bool swtch=kTRUE);  Gives to the TLimitDataSource the ownership of the various objects given as input. ;  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;",MatchSource.WIKI,doc/master/classTLimitDataSource.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTLimitDataSource.html
Security,hash,hash," Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Returns name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual const char * GetTitle () const;  Returns title of object. ;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; virtual ULong_t Hash () const;  Return hash value for this object. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns kTRUE if object inherits from class ""classname"". ;  ; virtual Bool_t InheritsFrom (const TClass *cl) const;  Returns kTRUE if object inherits from TClass cl. ;  ; virtual void Inspect () const;  Dump contents of this object in a graphics canvas. ;  ; void InvertBit (UInt_t f);  ; virtual TClass * IsA () const;  ; Bool_t IsDestructed () const;  IsDestructed. ;  ; virtual Bool_t IsEqual (const TObject *obj) const;  Default equal comparison (objects are equal if they have the same address in memory). ;  ; virtual Bool_t IsFolder () const;  Returns kTRUE in case object contains browsable objects (like containers or lists of other obje",MatchSource.WIKI,doc/master/classTLimitDataSource.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTLimitDataSource.html
Availability,error,error,"tual; Copy(TObject &line) const overrideTLinevirtual; TAttLine::Copy(TAttLine &attline) constTAttLine; DeclFileName()TLineinlinestatic; Delete(Option_t *option="""")TObjectvirtual; DistancetoLine(Int_t px, Int_t py, Double_t xp1, Double_t yp1, Double_t xp2, Double_t yp2)TAttLine; DistancetoPrimitive(Int_t px, Int_t py) overrideTLinevirtual; DoError(int level, const char *location, const char *fmt, va_list va) constTObjectprotectedvirtual; Draw(Option_t *option="""")TObjectvirtual; DrawClass() constTObjectvirtual; DrawClone(Option_t *option="""") constTObjectvirtual; DrawLine(Double_t x1, Double_t y1, Double_t x2, Double_t y2)TLinevirtual; DrawLineNDC(Double_t x1, Double_t y1, Double_t x2, Double_t y2)TLinevirtual; Dump() constTObjectvirtual; EDeprecatedStatusBits enum nameTObject; Error(const char *method, const char *msgfmt,...) constTObjectvirtual; EStatusBits enum nameTObject; Execute(const char *method, const char *params, Int_t *error=nullptr)TObjectvirtual; Execute(TMethod *method, TObjArray *params, Int_t *error=nullptr)TObjectvirtual; ExecuteEvent(Int_t event, Int_t px, Int_t py) overrideTLinevirtual; Fatal(const char *method, const char *msgfmt,...) constTObjectvirtual; fBitsTObjectprivate; fgDtorOnlyTObjectprivatestatic; fgObjectStatTObjectprivatestatic; FindObject(const char *name) constTObjectvirtual; FindObject(const TObject *obj) constTObjectvirtual; fLineColorTAttLineprotected; fLineStyleTAttLineprotected; fLineWidthTAttLineprotected; fUniqueIDTObjectprivate; fX1TLineprotected; fX2TLineprotected; fY1TLineprotected; fY2TLineprotected; GetBBox() overrideTLinevirtual; GetBBoxCenter() overrideTLinevirtual; GetDrawOption() constTObjectvirtual; GetDtorOnly()TObjectstatic; GetIconName() constTObjectvirtual; GetLineColor() constTAttLineinlinevirtual; GetLineStyle() constTAttLineinlinevirtual; GetLineWidth() constTAttLineinlinevirtual; GetName() constTObjectvirtual; GetObjectInfo(Int_t px, Int_t py) constTObjectvirtual; GetObjectStat()TObjectstatic; GetOption() const",MatchSource.WIKI,doc/master/classTLine-members.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTLine-members.html
Modifiability,inherit,inherited,". ROOT: Member List. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. TLine Member List. This is the complete list of members for TLine, including all inherited members. AbstractMethod(const char *method) constTObject; AddToTObjectTable(TObject *)TObjectprivatestatic; AppendPad(Option_t *option="""")TObjectvirtual; Browse(TBrowser *b)TObjectvirtual; CheckedHash()TObjectinline; Class()TLinestatic; Class_Name()TLinestatic; Class_Version()TLineinlinestatic; ClassName() constTObjectvirtual; Clear(Option_t *="""")TObjectinlinevirtual; Clone(const char *newname="""") constTObjectvirtual; Compare(const TObject *obj) constTObjectvirtual; Copy(TObject &line) const overrideTLinevirtual; TAttLine::Copy(TAttLine &attline) constTAttLine; DeclFileName()TLineinlinestatic; Delete(Option_t *option="""")TObjectvirtual; DistancetoLine(Int_t px, Int_t py, Double_t xp1, Double_t yp1, Double_t xp2, Double_t yp2)TAttLine; DistancetoPrimitive(Int_t px, Int_t py) overrideTLinevirtual; DoError(int level, const char *location, const char *fmt, va_list va) constTObjectprotectedvirtual; Draw(Option_t *option="""")TObjectvirtual; DrawClass() constTObjectvirtual; DrawClone(Option_t *option="""") constTObjectvirtual; DrawLine(Double_t x1, Double_t y1, Double_t x2, Double_t y2)TLinevirtual; DrawLineNDC(Double_t x1, Double_t y1, Double_t x2, Double_t y2)TLinevirtual; Dump() constTObjectvirtual; EDeprecatedStatusBits enum nameTObject; Error(const char *method, const char *msgfmt,...) constTObjectvirtual; EStatusBits enum nameTObject; Execute(const char *method, const char *params, Int_t *error=nullptr)TObjectvirtual; Execute(TMethod *method, TObjArray *params, Int_t *error=nullptr)TObjectvirtual; ExecuteEvent(Int_t event, Int_t px, Int_t py) overrideTLinevirtual; Fatal(const char *method, const char *msgfmt,...) constTObjectvirtual; fBitsTObjectprivate; fgDtorOnlyTObjectprivatestatic; fgObjectStatTObjectprivatestatic; FindObject(const char *name) constTObjectvirtual; FindObject(con",MatchSource.WIKI,doc/master/classTLine-members.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTLine-members.html
Availability,error,error," consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Returns name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about th",MatchSource.WIKI,doc/master/classTLine.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTLine.html
Deployability,release,released,"tic . ReturnsName of the file containing the class declaration ; Definition at line 79 of file TLine.h. ◆ DistancetoPrimitive(). Int_t TLine::DistancetoPrimitive ; (; Int_t ; px, . Int_t ; py . ). overridevirtual . Compute distance from point px,py to a line. ; Reimplemented from TObject.; Definition at line 89 of file TLine.cxx. ◆ DrawLine(). TLine * TLine::DrawLine ; (; Double_t ; x1, . Double_t ; y1, . Double_t ; x2, . Double_t ; y2 . ). virtual . Draw this line with new coordinates. ; Definition at line 103 of file TLine.cxx. ◆ DrawLineNDC(). TLine * TLine::DrawLineNDC ; (; Double_t ; x1, . Double_t ; y1, . Double_t ; x2, . Double_t ; y2 . ). virtual . Draw this line with new coordinates in NDC. ; Definition at line 115 of file TLine.cxx. ◆ ExecuteEvent(). void TLine::ExecuteEvent ; (; Int_t ; event, . Int_t ; px, . Int_t ; py . ). overridevirtual . Execute action corresponding to one event. ; This member function is called when a line is clicked with the locator; If Left button clicked on one of the line end points, this point follows the cursor until button is released.; if Middle button clicked, the line is moved parallel to itself until the button is released. ; Reimplemented from TObject.; Definition at line 132 of file TLine.cxx. ◆ GetBBox(). Rectangle_t TLine::GetBBox ; (; ). overridevirtual . Return the bounding Box of the Line. ; Implements TAttBBox2D.; Definition at line 544 of file TLine.cxx. ◆ GetBBoxCenter(). TPoint TLine::GetBBoxCenter ; (; ). overridevirtual . Return the center of the BoundingBox as TPoint in pixels. ; Implements TAttBBox2D.; Definition at line 569 of file TLine.cxx. ◆ GetX1(). Double_t TLine::GetX1 ; (; ); const. inline . Definition at line 50 of file TLine.h. ◆ GetX2(). Double_t TLine::GetX2 ; (; ); const. inline . Definition at line 51 of file TLine.h. ◆ GetY1(). Double_t TLine::GetY1 ; (; ); const. inline . Definition at line 52 of file TLine.h. ◆ GetY2(). Double_t TLine::GetY2 ; (; ); const. inline . Definition at line 53 of ",MatchSource.WIKI,doc/master/classTLine.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTLine.html
Integrability,message,message," consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Returns name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about th",MatchSource.WIKI,doc/master/classTLine.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTLine.html
Modifiability,inherit,inherited,"|; Protected Attributes |; List of all members ; TLine Class ReferenceGraphics » 2D Graphics » Basic graphics. ; Use the TLine constructor to create a simple line. ; TLine(Double_t x1,Double_t y1,Double_t x2,Double_t y2); x2Option_t Option_t TPoint TPoint const char x2Definition TGWin32VirtualXProxy.cxx:70; x1Option_t Option_t TPoint TPoint const char x1Definition TGWin32VirtualXProxy.cxx:70; y2Option_t Option_t TPoint TPoint const char y2Definition TGWin32VirtualXProxy.cxx:70; y1Option_t Option_t TPoint TPoint const char y1Definition TGWin32VirtualXProxy.cxx:70; TLine::TLineTLine()Definition TLine.h:38; double; x1, y1, x2, y2 are the coordinates of the first and the second point.; Example:; root[] l = new TLine(0.2,0.2,0.8,0.3); root[] l->Draw(); Drawth1 Draw(); lTLine lDefinition textangle.C:4. Definition at line 22 of file TLine.h. Public Types; enum  { kLineNDC = (1ULL << ( 14 )); , kVertical = (1ULL << ( 15 )); , kHorizontal = (1ULL << ( 16 )); };  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  . Public Member Functions;  TLine ();  ;  TLine (const TLine &line);  Line copy constructor. ;  ;  TLine (Double_t x1, Double_t y1, Double_t x2, Double_t y2);  Line normal constructor. ;  ;  ~TLine () override=default;  ; void Copy (TObject &line) const override;  Copy this line to line. ;  ; Int_t DistancetoPrimitive (Int_t px, Int_t py) override;  Compute distance from point px,py to a lin",MatchSource.WIKI,doc/master/classTLine.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTLine.html
Security,hash,hash," Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Returns name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual const char * GetTitle () const;  Returns title of object. ;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; virtual ULong_t Hash () const;  Return hash value for this object. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns kTRUE if object inherits from class ""classname"". ;  ; virtual Bool_t InheritsFrom (const TClass *cl) const;  Returns kTRUE if object inherits from TClass cl. ;  ; virtual void Inspect () const;  Dump contents of this object in a graphics canvas. ;  ; void InvertBit (UInt_t f);  ; Bool_t IsDestructed () const;  IsDestructed. ;  ; virtual Bool_t IsEqual (const TObject *obj) const;  Default equal comparison (objects are equal if they have the same address in memory). ;  ; virtual Bool_t IsFolder () const;  Returns kTRUE in case object contains browsable objects (like containers or lists of other objects). ;  ; R__ALWAYS_INLINE Bool_t",MatchSource.WIKI,doc/master/classTLine.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTLine.html
Usability,simpl,simple,". ROOT: TLine Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Static Public Member Functions |; Protected Attributes |; List of all members ; TLine Class ReferenceGraphics » 2D Graphics » Basic graphics. ; Use the TLine constructor to create a simple line. ; TLine(Double_t x1,Double_t y1,Double_t x2,Double_t y2); x2Option_t Option_t TPoint TPoint const char x2Definition TGWin32VirtualXProxy.cxx:70; x1Option_t Option_t TPoint TPoint const char x1Definition TGWin32VirtualXProxy.cxx:70; y2Option_t Option_t TPoint TPoint const char y2Definition TGWin32VirtualXProxy.cxx:70; y1Option_t Option_t TPoint TPoint const char y1Definition TGWin32VirtualXProxy.cxx:70; TLine::TLineTLine()Definition TLine.h:38; double; x1, y1, x2, y2 are the coordinates of the first and the second point.; Example:; root[] l = new TLine(0.2,0.2,0.8,0.3); root[] l->Draw(); Drawth1 Draw(); lTLine lDefinition textangle.C:4. Definition at line 22 of file TLine.h. Public Types; enum  { kLineNDC = (1ULL << ( 14 )); , kVertical = (1ULL << ( 15 )); , kHorizontal = (1ULL << ( 16 )); };  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  . Public Member Functions;  TLine ();  ;  TLine (const TLine &line);  Line copy constructor. ;  ;  TLine (Double_t x1, Double_t y1, Double_t x2, Double_t y2);  Line normal constructor. ;",MatchSource.WIKI,doc/master/classTLine.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTLine.html
Availability,error,errors,", so ""hyp3"" is in fact fitting with ""1++x++y++z"" function. –Fitting hyperplanes is much faster than fitting other expressions so if performance is vital, calculate the function values beforehand and give them to the fitter as variables –Example: You want to fit ""sin(x)|cos(2*x)"" very fast. Calculate sin(x) and cos(2*x) beforehand and store them in array *data. Then: TLinearFitter *lf=new TLinearFitter(2, ""hyp2""); lf->AssignData(npoint, 2, data, y);; 2.3 Resetting the formula; 2.3.1 If the input data is stored (or added via AssignData() function),; the fitting formula can be reset without re-adding all the points. –Example: TLinearFitter *lf=new TLinearFitter(""1++x++x*x"");; lf->AssignData(n, 1, x, y, e);; lf->Eval(); //looking at the parameter significance, you see,; // that maybe the fit will improve, if you take out; // the constant term; lf->SetFormula(""x++x*x"");; lf->Eval();; ...; e#define e(i)Definition RSha256.hxx:103; TLinearFitter::Evalvirtual Int_t Eval()Perform the fit and evaluate the parameters Returns 0 if the fit is ok, 1 if there are errors.Definition TLinearFitter.cxx:874; TLinearFitter::AssignDatavirtual void AssignData(Int_t npoints, Int_t xncols, Double_t *x, Double_t *y, Double_t *e=nullptr)This function is to use when you already have all the data in arrays and don't want to copy them into...Definition TLinearFitter.cxx:583; 2.3.2 If the input data is not stored, the fitter will have to be; cleared and the data will have to be added again to try a different formula. 3.Accessing the fit results; 3.1 There are methods in the fitter to access all relevant information:; –GetParameters, GetCovarianceMatrix, etc –the t-values of parameters and their significance can be reached by GetParTValue() and GetParSignificance() methods; 3.2 If fitting with a pre-defined TF123, the fit results are also; written into this function. 4.Robust fitting - Least Trimmed Squares regression (LTS); Outliers are atypical(by definition), infrequant observations; data points",MatchSource.WIKI,doc/master/classTLinearFitter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTLinearFitter.html
Integrability,depend,dependency,". ROOT: TLinearFitter Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Private Member Functions |; Private Attributes |; Static Private Attributes |; List of all members ; TLinearFitter Class ReferenceMath » TMinuit. ; NoteAn alternative to this class is to use ROOT::Fit::Fitter, calling the LinearFit() method.; The Linear Fitter - For fitting functions that are LINEAR IN PARAMETERS. The Linear Fitter; Linear fitter is used to fit a set of data points with a linear combination of specified functions. Note, that ""linear"" in the name stands only for the model dependency on parameters, the specified functions can be nonlinear. The general form of this kind of model is y(x) = a[0] + a[1]*f[1](x)+...a[n]*f[n](x); f#define f(i)Definition RSha256.hxx:104; a#define a(i)Definition RSha256.hxx:99; yDouble_t y[n]Definition legend1.C:17; xDouble_t x[n]Definition legend1.C:17; nconst Int_t nDefinition legend1.C:16; Functions f are fixed functions of x. For example, fitting with a polynomial is linear fitting in this sense. Introduction; The fitting method; The fit is performed using the Normal Equations method with Cholesky decomposition.; Why should it be used?; The linear fitter is considerably faster than general non-linear fitters and doesn't require to set the initial values of parameters. Using the fitter:. 1.Adding the data points:; 1.1 To store or not to store the input data?. There are 2 options in the constructor - to store or not store the input data. The advantages of storing the data are that you'll be able to reset the fitting model without adding all the points again, and that for very large sets of points the chisquare is calculated more precisely. The obvious disadvantage is the amount of memory used to keep all the points.; Before you start adding the points, you can change the store/not store option by StoreData() method. 1.2 The ",MatchSource.WIKI,doc/master/classTLinearFitter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTLinearFitter.html
Modifiability,variab,variables,"e the store/not store option by StoreData() method. 1.2 The data can be added:. simply point by point - AddPoint() method; an array of points at once: If the data is already stored in some arrays, this data can be assigned to the linear fitter without physically coping bytes, thanks to the Use() method of TVector and TMatrix classes - AssignData() method. 2.Setting the formula; 2.1 The linear formula syntax:; -Additive parts are separated by 2 plus signs ""++"" –for example ""1 ++ x"" - for fitting a straight line -All standard functions, undrestood by TFormula, can be used as additive parts –TMath functions can be used too -Functions, used as additive parts, shouldn't have any parameters, even if those parameters are set. –for example, if normalizing a sum of a gaus(0, 1) and a gaus(0, 2), don't use the built-in ""gaus"" of TFormula, because it has parameters, take TMath::Gaus(x, 0, 1) instead. -Polynomials can be used like ""pol3"", ..""polN"" -If fitting a more than 3-dimensional formula, variables should be numbered as follows: – x[0], x[1], x[2]... For example, to fit ""1 ++ x[0] ++ x[1] ++ x[2] ++ x[3]*x[3]""; 2.2 Setting the formula:; 2.2.1 If fitting a 1-2-3-dimensional formula, one can create a; TF123 based on a linear expression and pass this function to the fitter: –Example: TLinearFitter *lf = new TLinearFitter();; TF2 *f2 = new TF2(""f2"", ""x ++ y ++ x*x*y*y"", -2, 2, -2, 2);; lf->SetFormula(f2);; TF2A 2-Dim function with parameters.Definition TF2.h:29; TLinearFitterDefinition TLinearFitter.h:153; TLinearFitter::TLinearFitterTLinearFitter()default c-tor, input data is stored If you don't want to store the input data, run the function Store...Definition TLinearFitter.cxx:228; TLinearFitter::SetFormulavirtual void SetFormula(const char *formula)Additive parts should be separated by ""++"".Definition TLinearFitter.cxx:1521; –The results of the fit are then stored in the function, just like when the TH1::Fit or TGraph::Fit is used –A linear function of this kind is by no me",MatchSource.WIKI,doc/master/classTLinearFitter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTLinearFitter.html
Performance,perform,performed,"r Functions |; Private Attributes |; Static Private Attributes |; List of all members ; TLinearFitter Class ReferenceMath » TMinuit. ; NoteAn alternative to this class is to use ROOT::Fit::Fitter, calling the LinearFit() method.; The Linear Fitter - For fitting functions that are LINEAR IN PARAMETERS. The Linear Fitter; Linear fitter is used to fit a set of data points with a linear combination of specified functions. Note, that ""linear"" in the name stands only for the model dependency on parameters, the specified functions can be nonlinear. The general form of this kind of model is y(x) = a[0] + a[1]*f[1](x)+...a[n]*f[n](x); f#define f(i)Definition RSha256.hxx:104; a#define a(i)Definition RSha256.hxx:99; yDouble_t y[n]Definition legend1.C:17; xDouble_t x[n]Definition legend1.C:17; nconst Int_t nDefinition legend1.C:16; Functions f are fixed functions of x. For example, fitting with a polynomial is linear fitting in this sense. Introduction; The fitting method; The fit is performed using the Normal Equations method with Cholesky decomposition.; Why should it be used?; The linear fitter is considerably faster than general non-linear fitters and doesn't require to set the initial values of parameters. Using the fitter:. 1.Adding the data points:; 1.1 To store or not to store the input data?. There are 2 options in the constructor - to store or not store the input data. The advantages of storing the data are that you'll be able to reset the fitting model without adding all the points again, and that for very large sets of points the chisquare is calculated more precisely. The obvious disadvantage is the amount of memory used to keep all the points.; Before you start adding the points, you can change the store/not store option by StoreData() method. 1.2 The data can be added:. simply point by point - AddPoint() method; an array of points at once: If the data is already stored in some arrays, this data can be assigned to the linear fitter without physically coping bytes,",MatchSource.WIKI,doc/master/classTLinearFitter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTLinearFitter.html
Security,access,access,"arFitter(""1++x++x*x"");; lf->AssignData(n, 1, x, y, e);; lf->Eval(); //looking at the parameter significance, you see,; // that maybe the fit will improve, if you take out; // the constant term; lf->SetFormula(""x++x*x"");; lf->Eval();; ...; e#define e(i)Definition RSha256.hxx:103; TLinearFitter::Evalvirtual Int_t Eval()Perform the fit and evaluate the parameters Returns 0 if the fit is ok, 1 if there are errors.Definition TLinearFitter.cxx:874; TLinearFitter::AssignDatavirtual void AssignData(Int_t npoints, Int_t xncols, Double_t *x, Double_t *y, Double_t *e=nullptr)This function is to use when you already have all the data in arrays and don't want to copy them into...Definition TLinearFitter.cxx:583; 2.3.2 If the input data is not stored, the fitter will have to be; cleared and the data will have to be added again to try a different formula. 3.Accessing the fit results; 3.1 There are methods in the fitter to access all relevant information:; –GetParameters, GetCovarianceMatrix, etc –the t-values of parameters and their significance can be reached by GetParTValue() and GetParSignificance() methods; 3.2 If fitting with a pre-defined TF123, the fit results are also; written into this function. 4.Robust fitting - Least Trimmed Squares regression (LTS); Outliers are atypical(by definition), infrequant observations; data points which do not appear to follow the characteristic distribution of the rest of the data. These may reflect genuine properties of the underlying phenomenon(variable), or be due to measurement errors or anomalies which shouldn't be modelled. (StatSoft electronic textbook); Even a single gross outlier can greatly influence the results of least- squares fitting procedure, and in this case use of robust(resistant) methods is recommended.; The method implemented here is based on the article and algorithm: ""Computing LTS Regression for Large Data Sets"" by P.J.Rousseeuw and Katrien Van Driessen The idea of the method is to find the fitting coefficients for a ",MatchSource.WIKI,doc/master/classTLinearFitter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTLinearFitter.html
Usability,simpl,simply,"Introduction; The fitting method; The fit is performed using the Normal Equations method with Cholesky decomposition.; Why should it be used?; The linear fitter is considerably faster than general non-linear fitters and doesn't require to set the initial values of parameters. Using the fitter:. 1.Adding the data points:; 1.1 To store or not to store the input data?. There are 2 options in the constructor - to store or not store the input data. The advantages of storing the data are that you'll be able to reset the fitting model without adding all the points again, and that for very large sets of points the chisquare is calculated more precisely. The obvious disadvantage is the amount of memory used to keep all the points.; Before you start adding the points, you can change the store/not store option by StoreData() method. 1.2 The data can be added:. simply point by point - AddPoint() method; an array of points at once: If the data is already stored in some arrays, this data can be assigned to the linear fitter without physically coping bytes, thanks to the Use() method of TVector and TMatrix classes - AssignData() method. 2.Setting the formula; 2.1 The linear formula syntax:; -Additive parts are separated by 2 plus signs ""++"" –for example ""1 ++ x"" - for fitting a straight line -All standard functions, undrestood by TFormula, can be used as additive parts –TMath functions can be used too -Functions, used as additive parts, shouldn't have any parameters, even if those parameters are set. –for example, if normalizing a sum of a gaus(0, 1) and a gaus(0, 2), don't use the built-in ""gaus"" of TFormula, because it has parameters, take TMath::Gaus(x, 0, 1) instead. -Polynomials can be used like ""pol3"", ..""polN"" -If fitting a more than 3-dimensional formula, variables should be numbered as follows: – x[0], x[1], x[2]... For example, to fit ""1 ++ x[0] ++ x[1] ++ x[2] ++ x[3]*x[3]""; 2.2 Setting the formula:; 2.2.1 If fitting a 1-2-3-dimensional formula, one can create a; TF123 ",MatchSource.WIKI,doc/master/classTLinearFitter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTLinearFitter.html
Availability,error,error,"ject. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t ",MatchSource.WIKI,doc/master/classTLinearGradient.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTLinearGradient.html
Integrability,message,message,"ject. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t ",MatchSource.WIKI,doc/master/classTLinearGradient.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTLinearGradient.html
Modifiability,inherit,inherited,"& GetEnd () const;  Get end. ;  ; const Point & GetStart () const;  Get start. ;  ; TClass * IsA () const override;  ; void SetStartEnd (const Point &p1, const Point &p2);  Set end and start. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  TColorGradient ();  ;  TColorGradient (Color_t newColor, UInt_t nPoints, const Double_t *points, const Color_t *colorIndices, ECoordinateMode mode=kObjectBoundingMode);  There is no way to validate parameters here, so it's up to user to pass correct arguments. ;  ;  TColorGradient (Color_t newColor, UInt_t nPoints, const Double_t *points, const Double_t *colors, ECoordinateMode mode=kObjectBoundingMode);  There is no way to validate parameters here, so it's up to user to pass correct arguments. ;  ;  Public Member Functions inherited from TColorGradient;  TColorGradient ();  ;  TColorGradient (Color_t newColor, UInt_t nPoints, const Double_t *points, const Color_t *colorIndices, ECoordinateMode mode=kObjectBoundingMode);  There is no way to validate parameters here, so it's up to user to pass correct arguments. ;  ;  TColorGradient (Color_t newColor, UInt_t nPoints, const Double_t *points, const Double_t *colors, ECoordinateMode mode=kObjectBoundingMode);  There is no way to validate parameters here, so it's up to user to pass correct arguments. ;  ; Double_t GetColorAlpha (UInt_t indx) const;  Return alpha parameter of selected color. ;  ; const Double_t * GetColorPositions () const;  Get color positions. ;  ; const Double_t * GetColors () const;  Get colors. ;  ; ECoordinateMode GetCoordinateMode () const;  Get coordinate mode. ;  ; SizeType_t GetNumberOfSteps () const;  Get number of steps. ;  ; void ResetColor (UInt_t nPoints, const Double_t *points, const Color_t *colorIndices);  Reset color. ;  ; void ResetColor (UInt_t nPoints, const Double_t *points, const Double_t *colorIndices);  Reset color. ;  ; void SetColorAlpha (UInt_t",MatchSource.WIKI,doc/master/classTLinearGradient.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTLinearGradient.html
Security,validat,validate,". ROOT: TLinearGradient Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Private Attributes |; List of all members ; TLinearGradient Class Reference. . Definition at line 97 of file TColorGradient.h. Public Member Functions;  TLinearGradient ();  ; const Point & GetEnd () const;  Get end. ;  ; const Point & GetStart () const;  Get start. ;  ; TClass * IsA () const override;  ; void SetStartEnd (const Point &p1, const Point &p2);  Set end and start. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  TColorGradient ();  ;  TColorGradient (Color_t newColor, UInt_t nPoints, const Double_t *points, const Color_t *colorIndices, ECoordinateMode mode=kObjectBoundingMode);  There is no way to validate parameters here, so it's up to user to pass correct arguments. ;  ;  TColorGradient (Color_t newColor, UInt_t nPoints, const Double_t *points, const Double_t *colors, ECoordinateMode mode=kObjectBoundingMode);  There is no way to validate parameters here, so it's up to user to pass correct arguments. ;  ;  Public Member Functions inherited from TColorGradient;  TColorGradient ();  ;  TColorGradient (Color_t newColor, UInt_t nPoints, const Double_t *points, const Color_t *colorIndices, ECoordinateMode mode=kObjectBoundingMode);  There is no way to validate parameters here, so it's up to user to pass correct arguments. ;  ;  TColorGradient (Color_t newColor, UInt_t nPoints, const Double_t *points, const Double_t *colors, ECoordinateMode mode=kObjectBoundingMode);  There is no way to validate parameters here, so it's up to user to pass correct arguments. ;  ; Double_t GetColorAlpha (UInt_t indx) const;  Return alpha parameter of selected color. ;  ; const Double_t * GetColorPositions () const;  Get color positions. ;  ; const Double_t * GetColors () const;",MatchSource.WIKI,doc/master/classTLinearGradient.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTLinearGradient.html
Availability,error,errors,"directly (by solving a system of linear equations) the minimum of a least-square function which has a linear dependence in the fit parameters. This class is not used directly, but via the ROOT::Fitter class, when calling the LinearFit method. It is instantiates using the plug-in manager (plug-in name is ""Linear""). ; Definition at line 31 of file TLinearMinimizer.h. Public Member Functions;  TLinearMinimizer (const char *type);  Constructor from a char * (used by PM) ;  ;  TLinearMinimizer (int type=0);  Default constructor. ;  ;  ~TLinearMinimizer () override;  Destructor (no operations) ;  ; double CovMatrix (unsigned int i, unsigned int j) const override;  return covariance matrices elements if the variable is fixed the matrix is zero The ordering of the variables is the same as in errors ;  ; int CovMatrixStatus () const override;  return covariance matrix status ;  ; double Edm () const override;  return expected distance reached from the minimum ;  ; const double * Errors () const override;  return errors at the minimum ;  ; virtual TClass * IsA () const;  ; const double * MinGradient () const override;  return pointer to gradient values at the minimum ;  ; bool Minimize () override;  method to perform the minimization ;  ; double MinValue () const override;  return minimum function value ;  ; unsigned int NCalls () const override;  number of function calls to reach the minimum ;  ; unsigned int NDim () const override;  this is <= Function().NDim() which is the total number of variables (free+ constrained ones) ;  ; unsigned int NFree () const override;  number of free variables (real dimension of the problem) this is <= Function().NDim() which is the total ;  ; bool ProvidesError () const override;  minimizer provides error and error matrix ;  ; bool SetFixedVariable (unsigned int, const std::string &, double) override;  set fixed variable (override if minimizer supports them ) ;  ; void SetFunction (const ROOT::Math::IMultiGenFunction &func) override;  set th",MatchSource.WIKI,doc/master/classTLinearMinimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTLinearMinimizer.html
Deployability,configurat,configuration,"inear combination of all other parameters which is most strongly correlated with i. ;  ; virtual bool Hesse ();  perform a full calculation of the Hessian matrix for error calculation ;  ; virtual bool IsFixedVariable (unsigned int ivar) const;  query if an existing variable is fixed (i.e. ;  ; bool IsValidError () const;  return true if Minimizer has performed a detailed error validation (e.g. run Hesse for Minuit) ;  ; unsigned int MaxFunctionCalls () const;  max number of function calls ;  ; unsigned int MaxIterations () const;  max iterations ;  ; virtual int MinosStatus () const;  status code of Minos (to be re-implemented by the minimizers supporting Minos) ;  ; virtual unsigned int NIterations () const;  number of iterations to reach the minimum ;  ; Minimizer & operator= (Minimizer &&)=delete;  ; Minimizer & operator= (Minimizer const &)=delete;  ; virtual MinimizerOptions Options () const;  retrieve the minimizer options (implement derived class if needed) ;  ; double Precision () const;  precision of minimizer in the evaluation of the objective function ( a value <=0 corresponds to the let the minimizer choose its default one) ;  ; int PrintLevel () const;  minimizer configuration parameters ;  ; virtual void PrintResults ();  return reference to the objective function virtual const ROOT::Math::IGenFunction & Function() const = 0; ;  ; virtual bool ReleaseVariable (unsigned int ivar);  release an existing variable ;  ; virtual bool Scan (unsigned int ivar, unsigned int &nstep, double *x, double *y, double xmin=0, double xmax=0);  scan function minimum for variable i. ;  ; virtual bool SetCovariance (std::span< const double > cov, unsigned int nrow);  set initial covariance matrix ;  ; virtual bool SetCovarianceDiag (std::span< const double > d2, unsigned int n);  set initial second derivatives ;  ; void SetDefaultOptions ();  reset the default options (defined in MinimizerOptions) ;  ; void SetErrorDef (double up);  set scale for calculating the errors ;  ",MatchSource.WIKI,doc/master/classTLinearMinimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTLinearMinimizer.html
Integrability,interface,interface,". ROOT: TLinearMinimizer Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Private Attributes |; List of all members ; TLinearMinimizer Class Reference. ; TLinearMinimizer class: minimizer implementation based on TMinuit. ; See alsoMinuit2 for a newer version of this class; TLinearMinimizer, simple class implementing the ROOT::Math::Minimizer interface usingTLinearFitter. This class uses TLinearFitter to find directly (by solving a system of linear equations) the minimum of a least-square function which has a linear dependence in the fit parameters. This class is not used directly, but via the ROOT::Fitter class, when calling the LinearFit method. It is instantiates using the plug-in manager (plug-in name is ""Linear""). ; Definition at line 31 of file TLinearMinimizer.h. Public Member Functions;  TLinearMinimizer (const char *type);  Constructor from a char * (used by PM) ;  ;  TLinearMinimizer (int type=0);  Default constructor. ;  ;  ~TLinearMinimizer () override;  Destructor (no operations) ;  ; double CovMatrix (unsigned int i, unsigned int j) const override;  return covariance matrices elements if the variable is fixed the matrix is zero The ordering of the variables is the same as in errors ;  ; int CovMatrixStatus () const override;  return covariance matrix status ;  ; double Edm () const override;  return expected distance reached from the minimum ;  ; const double * Errors () const override;  return errors at the minimum ;  ; virtual TClass * IsA () const;  ; const double * MinGradient () const override;  return pointer to gradient values at the minimum ;  ; bool Minimize () override;  method to perform the minimization ;  ; double MinValue () const override;  return minimum function value ;  ; unsigned int NCalls () const override;  number of function calls to reach the minimum ;  ; unsigned int NDim () const override;  this is",MatchSource.WIKI,doc/master/classTLinearMinimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTLinearMinimizer.html
Modifiability,plug-in,plug-in,". ROOT: TLinearMinimizer Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Private Attributes |; List of all members ; TLinearMinimizer Class Reference. ; TLinearMinimizer class: minimizer implementation based on TMinuit. ; See alsoMinuit2 for a newer version of this class; TLinearMinimizer, simple class implementing the ROOT::Math::Minimizer interface usingTLinearFitter. This class uses TLinearFitter to find directly (by solving a system of linear equations) the minimum of a least-square function which has a linear dependence in the fit parameters. This class is not used directly, but via the ROOT::Fitter class, when calling the LinearFit method. It is instantiates using the plug-in manager (plug-in name is ""Linear""). ; Definition at line 31 of file TLinearMinimizer.h. Public Member Functions;  TLinearMinimizer (const char *type);  Constructor from a char * (used by PM) ;  ;  TLinearMinimizer (int type=0);  Default constructor. ;  ;  ~TLinearMinimizer () override;  Destructor (no operations) ;  ; double CovMatrix (unsigned int i, unsigned int j) const override;  return covariance matrices elements if the variable is fixed the matrix is zero The ordering of the variables is the same as in errors ;  ; int CovMatrixStatus () const override;  return covariance matrix status ;  ; double Edm () const override;  return expected distance reached from the minimum ;  ; const double * Errors () const override;  return errors at the minimum ;  ; virtual TClass * IsA () const;  ; const double * MinGradient () const override;  return pointer to gradient values at the minimum ;  ; bool Minimize () override;  method to perform the minimization ;  ; double MinValue () const override;  return minimum function value ;  ; unsigned int NCalls () const override;  number of function calls to reach the minimum ;  ; unsigned int NDim () const override;  this is",MatchSource.WIKI,doc/master/classTLinearMinimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTLinearMinimizer.html
Performance,perform,perform,"directly (by solving a system of linear equations) the minimum of a least-square function which has a linear dependence in the fit parameters. This class is not used directly, but via the ROOT::Fitter class, when calling the LinearFit method. It is instantiates using the plug-in manager (plug-in name is ""Linear""). ; Definition at line 31 of file TLinearMinimizer.h. Public Member Functions;  TLinearMinimizer (const char *type);  Constructor from a char * (used by PM) ;  ;  TLinearMinimizer (int type=0);  Default constructor. ;  ;  ~TLinearMinimizer () override;  Destructor (no operations) ;  ; double CovMatrix (unsigned int i, unsigned int j) const override;  return covariance matrices elements if the variable is fixed the matrix is zero The ordering of the variables is the same as in errors ;  ; int CovMatrixStatus () const override;  return covariance matrix status ;  ; double Edm () const override;  return expected distance reached from the minimum ;  ; const double * Errors () const override;  return errors at the minimum ;  ; virtual TClass * IsA () const;  ; const double * MinGradient () const override;  return pointer to gradient values at the minimum ;  ; bool Minimize () override;  method to perform the minimization ;  ; double MinValue () const override;  return minimum function value ;  ; unsigned int NCalls () const override;  number of function calls to reach the minimum ;  ; unsigned int NDim () const override;  this is <= Function().NDim() which is the total number of variables (free+ constrained ones) ;  ; unsigned int NFree () const override;  number of free variables (real dimension of the problem) this is <= Function().NDim() which is the total ;  ; bool ProvidesError () const override;  minimizer provides error and error matrix ;  ; bool SetFixedVariable (unsigned int, const std::string &, double) override;  set fixed variable (override if minimizer supports them ) ;  ; void SetFunction (const ROOT::Math::IMultiGenFunction &func) override;  set th",MatchSource.WIKI,doc/master/classTLinearMinimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTLinearMinimizer.html
Security,validat,validation," &errUp, int option=0);  minos error for variable i, return false if Minos failed or not supported and the lower and upper errors are returned in errLow and errUp An extra flag specifies if only the lower (option=-1) or the upper (option=+1) error calculation is run ;  ; virtual bool GetVariableSettings (unsigned int ivar, ROOT::Fit::ParameterSettings &pars) const;  get variable settings in a variable object (like ROOT::Fit::ParamsSettings) ;  ; virtual double GlobalCC (unsigned int ivar) const;  return global correlation coefficient for variable i This is a number between zero and one which gives the correlation between the i-th parameter and that linear combination of all other parameters which is most strongly correlated with i. ;  ; virtual bool Hesse ();  perform a full calculation of the Hessian matrix for error calculation ;  ; virtual bool IsFixedVariable (unsigned int ivar) const;  query if an existing variable is fixed (i.e. ;  ; bool IsValidError () const;  return true if Minimizer has performed a detailed error validation (e.g. run Hesse for Minuit) ;  ; unsigned int MaxFunctionCalls () const;  max number of function calls ;  ; unsigned int MaxIterations () const;  max iterations ;  ; virtual int MinosStatus () const;  status code of Minos (to be re-implemented by the minimizers supporting Minos) ;  ; virtual unsigned int NIterations () const;  number of iterations to reach the minimum ;  ; Minimizer & operator= (Minimizer &&)=delete;  ; Minimizer & operator= (Minimizer const &)=delete;  ; virtual MinimizerOptions Options () const;  retrieve the minimizer options (implement derived class if needed) ;  ; double Precision () const;  precision of minimizer in the evaluation of the objective function ( a value <=0 corresponds to the let the minimizer choose its default one) ;  ; int PrintLevel () const;  minimizer configuration parameters ;  ; virtual void PrintResults ();  return reference to the objective function virtual const ROOT::Math::IGenFunction & Fu",MatchSource.WIKI,doc/master/classTLinearMinimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTLinearMinimizer.html
Usability,simpl,simple,". ROOT: TLinearMinimizer Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Private Attributes |; List of all members ; TLinearMinimizer Class Reference. ; TLinearMinimizer class: minimizer implementation based on TMinuit. ; See alsoMinuit2 for a newer version of this class; TLinearMinimizer, simple class implementing the ROOT::Math::Minimizer interface usingTLinearFitter. This class uses TLinearFitter to find directly (by solving a system of linear equations) the minimum of a least-square function which has a linear dependence in the fit parameters. This class is not used directly, but via the ROOT::Fitter class, when calling the LinearFit method. It is instantiates using the plug-in manager (plug-in name is ""Linear""). ; Definition at line 31 of file TLinearMinimizer.h. Public Member Functions;  TLinearMinimizer (const char *type);  Constructor from a char * (used by PM) ;  ;  TLinearMinimizer (int type=0);  Default constructor. ;  ;  ~TLinearMinimizer () override;  Destructor (no operations) ;  ; double CovMatrix (unsigned int i, unsigned int j) const override;  return covariance matrices elements if the variable is fixed the matrix is zero The ordering of the variables is the same as in errors ;  ; int CovMatrixStatus () const override;  return covariance matrix status ;  ; double Edm () const override;  return expected distance reached from the minimum ;  ; const double * Errors () const override;  return errors at the minimum ;  ; virtual TClass * IsA () const;  ; const double * MinGradient () const override;  return pointer to gradient values at the minimum ;  ; bool Minimize () override;  method to perform the minimization ;  ; double MinValue () const override;  return minimum function value ;  ; unsigned int NCalls () const override;  number of function calls to reach the minimum ;  ; unsigned int NDim () const override;  this is",MatchSource.WIKI,doc/master/classTLinearMinimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTLinearMinimizer.html
Availability,error,error," (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () co",MatchSource.WIKI,doc/master/classTLink.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTLink.html
Integrability,message,message," (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () co",MatchSource.WIKI,doc/master/classTLink.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTLink.html
Modifiability,inherit,inherited,". ROOT: TLink Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Static Public Member Functions |; Protected Attributes |; List of all members ; TLink Class ReferenceGraphics » 2D Graphics » Basic graphics. ; Special TText object used to show hyperlinks. ; In the example below created by TObject::Inspect, TLinks are used to show pointers to other objects. Clicking on one link, inspect the corresponding object. ; Definition at line 17 of file TLink.h. Public Types; enum  EStatusBits { kIsStarStar = (1ULL << ( 2 )); };  ;  Public Types inherited from TText; enum  { kTextNDC = (1ULL << ( 14 )); };  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  . Public Member Functions;  TLink ();  Link default constructor. ;  ;  TLink (Double_t x, Double_t y, void *pointer);  Constructor to define a link object. ;  ;  ~TLink () override;  Link default destructor. ;  ; void ExecuteEvent (Int_t event, Int_t px, Int_t py) override;  Execute action corresponding to one event. ;  ; TClass * IsA () const override;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TText;  TText ();  ;  TText (const TText &text);  Copy constructor. ;  ;  TText (Double_t x, Double_t y, c",MatchSource.WIKI,doc/master/classTLink.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTLink.html
Security,hash,hash,"t x);  ; virtual void SetY (Double_t y);  ; void Streamer (TBuffer &) override;  Stream an object of class TText. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; Bool_t IsSortable () const override;  ; TNamed & operator= (const TNamed &rhs);  TNamed assignment operator. ;  ; virtual void SetName (const char *name);  Set the name of the TNamed. ;  ; virtual void SetNameTitle (const char *name, const char *title);  Set all the TNamed parameters (name and title). ;  ; virtual void SetTitle (const char *title="""");  Set the title of the TNamed. ;  ; virtual Int_t Sizeof () const;  Return size of the TNamed part of the TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to cu",MatchSource.WIKI,doc/master/classTLink.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTLink.html
Availability,error,error,"*obj) const overrideTCollectionvirtual; Contains(const char *name) constTCollectioninline; Contains(const TObject *obj) constTCollectioninline; Copy(TObject &object) constTObjectvirtual; DeclFileName()TListinlinestatic; Delete(Option_t *option="""") overrideTListvirtual; DistancetoPrimitive(Int_t px, Int_t py)TObjectvirtual; DoError(int level, const char *location, const char *fmt, va_list va) constTObjectprotectedvirtual; DoSort(TObjLinkPtr_t *head, Int_t n)TListprotected; Draw(Option_t *option="""") overrideTCollectionvirtual; DrawClass() constTObjectvirtual; DrawClone(Option_t *option="""") constTObjectvirtual; Dump() const overrideTCollectionvirtual; EDeprecatedStatusBits enum nameTObject; EmptyGarbageCollection()TCollectionstatic; end() constTCollectioninline; Error(const char *method, const char *msgfmt,...) constTObjectvirtual; EStatusBits enum nameTCollectionprotected; Execute(const char *method, const char *params, Int_t *error=nullptr)TObjectvirtual; Execute(TMethod *method, TObjArray *params, Int_t *error=nullptr)TObjectvirtual; ExecuteEvent(Int_t event, Int_t px, Int_t py)TObjectvirtual; fAscendingTListprotected; Fatal(const char *method, const char *msgfmt,...) constTObjectvirtual; fBitsTObjectprivate; fCacheTListprotected; fFirstTListprotected; fgCurrentCollectionTCollectionprivatestatic; fgDtorOnlyTObjectprivatestatic; fgEmptyingGarbageTCollectionprivatestatic; fgGarbageCollectionTCollectionprivatestatic; fgGarbageStackTCollectionprivatestatic; fgObjectStatTObjectprivatestatic; FindLink(const TObject *obj, Int_t &idx) constTListprotected; FindObject(const char *name) const overrideTListvirtual; FindObject(const TObject *obj) const overrideTListvirtual; First() const overrideTListvirtual; FirstLink() constTListinlinevirtual; fLastTListprotected; fNameTCollectionprotected; fSizeTCollectionprotected; fSortedTSeqCollectionprotected; fUniqueIDTObjectprivate; GarbageCollect(TObject *obj)TCollectionstatic; GetCollectionEntryName(TObject *entry) constTCollectionprot",MatchSource.WIKI,doc/master/classTList-members.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTList-members.html
Modifiability,inherit,inherited,". ROOT: Member List. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. TList Member List. This is the complete list of members for TList, including all inherited members. AbstractMethod(const char *method) constTObject; Add(TObject *obj) overrideTListinlinevirtual; Add(TObject *obj, Option_t *opt)TListinlinevirtual; AddAfter(const TObject *after, TObject *obj) overrideTListvirtual; AddAfter(TObjLink *after, TObject *obj)TListvirtual; AddAll(const TCollection *col)TCollectionvirtual; AddAt(TObject *obj, Int_t idx) overrideTListvirtual; AddBefore(const TObject *before, TObject *obj) overrideTListvirtual; AddBefore(TObjLink *before, TObject *obj)TListvirtual; AddFirst(TObject *obj) overrideTListvirtual; AddFirst(TObject *obj, Option_t *opt)TListvirtual; AddLast(TObject *obj) overrideTListvirtual; AddLast(TObject *obj, Option_t *opt)TListvirtual; AddToTObjectTable(TObject *)TObjectprivatestatic; AddVector(TObject *obj1,...)TCollection; After(const TObject *obj) const overrideTListvirtual; AppendPad(Option_t *option="""")TObjectvirtual; AssertClass(TClass *cl) constTCollection; At(Int_t idx) const overrideTListvirtual; Before(const TObject *obj) const overrideTListvirtual; begin() constTCollectioninline; Browse(TBrowser *b) overrideTCollectionvirtual; Capacity() constTCollectioninline; Changed()TSeqCollectioninlineprotectedvirtual; CheckedHash()TObjectinline; Class()TListstatic; Class_Name()TListstatic; Class_Version()TListinlinestatic; ClassName() constTObjectvirtual; Clear(Option_t *option="""") overrideTListvirtual; Clone(const char *newname="""") const overrideTCollectionvirtual; Compare(const TObject *obj) const overrideTCollectionvirtual; Contains(const char *name) constTCollectioninline; Contains(const TObject *obj) constTCollectioninline; Copy(TObject &object) constTObjectvirtual; DeclFileName()TListinlinestatic; Delete(Option_t *option="""") overrideTListvirtual; DistancetoPrimitive(Int_t px, Int_t py)TObjectvirtual; DoError(int level, cons",MatchSource.WIKI,doc/master/classTList-members.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTList-members.html
Availability,error,error,"ar *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual const char * GetTitle () const;  Returns title of object. ;  ; v",MatchSource.WIKI,doc/master/classTList.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTList.html
Integrability,wrap,wrapped,". ROOT: TList Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Static Public Member Functions |; Protected Types |; Protected Member Functions |; Protected Attributes |; Private Member Functions |; Friends |; List of all members ; TList Class ReferenceCore ROOT classes » Containers. ; A doubly linked list. ; All classes inheriting from TObject can be inserted in a TList. Before being inserted into the list the object pointer is wrapped in a TObjLink object which contains, besides the object pointer also a previous and next pointer.; There are several ways to iterate over a TList; in order of preference, if not forced by other constraints:. (Preferred way) Using the C++ range-based for or begin() / end(): for(TObject *obj: *GetListOfPrimitives()); obj->Write();; TCollection::WriteInt_t Write(const char *name=nullptr, Int_t option=0, Int_t bufsize=0) overrideWrite all objects in this collection.Definition TCollection.cxx:672; TObjectMother of all ROOT objects.Definition TObject.h:41. Using the R__FOR_EACH macro: GetListOfPrimitives()->R__FOR_EACH(TObject,Paint)(option);; optionOption_t Option_t optionDefinition TGWin32VirtualXProxy.cxx:44; TCollection::Paintvoid Paint(Option_t *option="""") overridePaint all objects in this collection.Definition TCollection.cxx:417. Using the TList iterator TListIter (via the wrapper class TIter): TIter next(GetListOfPrimitives());; while (TObject *obj = next()); obj->Draw(next.GetOption());; TIterDefinition TCollection.h:235. Using the TList iterator TListIter and std::for_each algorithm: // A function object, which will be applied to each element; // of the given range.; struct STestFunctor {; bool operator()(TObject *aObj) {; ...; return true;; }; }; ...; ...; TIter iter(mylist);; for_each( iter.Begin(), TIter::End(), STestFunctor() );; operator()TRObject operator()(const T1 &t1) constDefinition TRFunctionImport__oprtr.h:",MatchSource.WIKI,doc/master/classTList.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTList.html
Modifiability,inherit,inheriting,". ROOT: TList Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Static Public Member Functions |; Protected Types |; Protected Member Functions |; Protected Attributes |; Private Member Functions |; Friends |; List of all members ; TList Class ReferenceCore ROOT classes » Containers. ; A doubly linked list. ; All classes inheriting from TObject can be inserted in a TList. Before being inserted into the list the object pointer is wrapped in a TObjLink object which contains, besides the object pointer also a previous and next pointer.; There are several ways to iterate over a TList; in order of preference, if not forced by other constraints:. (Preferred way) Using the C++ range-based for or begin() / end(): for(TObject *obj: *GetListOfPrimitives()); obj->Write();; TCollection::WriteInt_t Write(const char *name=nullptr, Int_t option=0, Int_t bufsize=0) overrideWrite all objects in this collection.Definition TCollection.cxx:672; TObjectMother of all ROOT objects.Definition TObject.h:41. Using the R__FOR_EACH macro: GetListOfPrimitives()->R__FOR_EACH(TObject,Paint)(option);; optionOption_t Option_t optionDefinition TGWin32VirtualXProxy.cxx:44; TCollection::Paintvoid Paint(Option_t *option="""") overridePaint all objects in this collection.Definition TCollection.cxx:417. Using the TList iterator TListIter (via the wrapper class TIter): TIter next(GetListOfPrimitives());; while (TObject *obj = next()); obj->Draw(next.GetOption());; TIterDefinition TCollection.h:235. Using the TList iterator TListIter and std::for_each algorithm: // A function object, which will be applied to each element; // of the given range.; struct STestFunctor {; bool operator()(TObject *aObj) {; ...; return true;; }; }; ...; ...; TIter iter(mylist);; for_each( iter.Begin(), TIter::End(), STestFunctor() );; operator()TRObject operator()(const T1 &t1) constDefinition TRFunctionImport__oprtr.h:",MatchSource.WIKI,doc/master/classTList.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTList.html
Performance,perform,perform,"dLink (const TObject *obj, Int_t &idx) const;  Returns the TObjLink object that contains object obj. ;  ; void InsertAfter (const TObjLinkPtr_t &newlink, const TObjLinkPtr_t &prev);  Insert a new link in the chain. ;  ; TObjLink * LinkAt (Int_t idx) const;  sorting order (when calling Sort() or for TSortedList) ;  ; Bool_t LnkCompare (const TObjLinkPtr_t &l1, const TObjLinkPtr_t &l2);  Compares the objects stored in the TObjLink objects. ;  ; TObjLinkPtr_t NewLink (TObject *obj, const TObjLinkPtr_t &prev=nullptr);  Return a new TObjLink. ;  ; TObjLinkPtr_t NewLink (TObject *obj, TObjLink *prev);  ; TObjLinkPtr_t NewOptLink (TObject *obj, Option_t *opt, const TObjLinkPtr_t &prev=nullptr);  Return a new TObjOptLink (a TObjLink that also stores the option). ;  ; TObjLinkPtr_t NewOptLink (TObject *obj, Option_t *opt, TObjLink *prev);  ;  Protected Member Functions inherited from TSeqCollection;  TSeqCollection ();  ; virtual void Changed ();  ;  Protected Member Functions inherited from TCollection;  TCollection ();  ; virtual const char * GetCollectionEntryName (TObject *entry) const;  For given collection entry return the string that is used to identify the object and, potentially, perform wildcard/regexp filtering on. ;  ; virtual void PrintCollectionEntry (TObject *entry, Option_t *option, Int_t recurse) const;  Print the collection entry. ;  ; virtual void PrintCollectionHeader (Option_t *option) const;  Print the collection header. ;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  . Protected Attributes; Bool_t fAscending;  cache to speedup sequential calling of Before() and After() functions ;  ; TObjLinkWeakPtr_t fCache;  pointer to last entry in linked list ;  ; TObjLinkPtr_t fFirst;  ; TObjLinkPtr_t fLast;  pointer to first entry in linked list ;  ;  Protected Attributes inherited from TSeqCollectio",MatchSource.WIKI,doc/master/classTList.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTList.html
Safety,safe,safe,"d Print (Option_t *option, const char *wildcard, Int_t recurse=1) const;  Print the collection header and its elements that match the wildcard. ;  ; virtual void Print (Option_t *option, Int_t recurse) const;  Print the collection header and its elements. ;  ; virtual void Print (Option_t *option, TPRegexp &regexp, Int_t recurse=1) const;  Print the collection header and its elements that match the regexp. ;  ; void Print (Option_t *option="""") const override;  Default print for collections, calls Print(option, 1). ;  ; void RemoveAll ();  ; virtual void RemoveAll (TCollection *col);  Remove all objects in collection col from this collection. ;  ; void SetCurrentCollection ();  Set this collection to be the globally accessible collection. ;  ; void SetName (const char *name);  ; virtual void SetOwner (Bool_t enable=kTRUE);  Set whether this collection is the owner (enable==true) of its content. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual bool UseRWLock (Bool_t enable=true);  Set this collection to use a RW lock upon access, making it thread safe. ;  ; Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const override;  Write all objects in this collection. ;  ; Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) override;  Write all objects in this collection. ;  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () co",MatchSource.WIKI,doc/master/classTList.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTList.html
Security,hash,hash,"s in this collection inherit from class cl. ;  ; TIter begin () const;  ; void Browse (TBrowser *b) override;  Browse this collection (called by TBrowser). ;  ; Int_t Capacity () const;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an collection using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TCollection objects. ;  ; Bool_t Contains (const char *name) const;  ; Bool_t Contains (const TObject *obj) const;  ; void Draw (Option_t *option="""") override;  Draw all objects in this collection. ;  ; void Dump () const override;  Dump all objects in this collection. ;  ; TIter end () const;  ; virtual Int_t GetEntries () const;  ; const char * GetName () const override;  Return name of this collection. ;  ; virtual Int_t GetSize () const;  Return the capacity of the collection, i.e. ;  ; virtual Int_t GrowBy (Int_t delta) const;  Increase the collection's capacity by delta slots. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; Bool_t IsArgNull (const char *where, const TObject *obj) const;  Returns true if object is a null pointer. ;  ; virtual Bool_t IsEmpty () const;  ; Bool_t IsFolder () const override;  Returns kTRUE in case object contains browsable objects (like containers or lists of other objects). ;  ; Bool_t IsOwner () const;  ; Bool_t IsSortable () const override;  ; R__ALWAYS_INLINE Bool_t IsUsingRWLock () const;  ; void ls (Option_t *option="""") const override;  List (ls) all objects in this collection. ;  ; virtual TIterator * MakeReverseIterator () const;  ; Bool_t Notify () override;  'Notify' all objects in this collection. ;  ; TObject * operator() (const char *name) const;  Find an object in this collection by name. ;  ; void Paint (Option_t *option="""") override;  Paint all objects in this collection. ;  ; virtual void Print (Option_t *option, const char *wildcard, Int_t recurse=1) const;  Print the collection header and its elements that match the ",MatchSource.WIKI,doc/master/classTList.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTList.html
Modifiability,inherit,inherited, ; Option_t * GetOption () const override;  Returns the object option stored in the list. ;  ; TClass * IsA () const override;  ; TObject * Next () override;  Return next object in the list. Returns 0 when no more objects in list. ;  ; Bool_t operator!= (const TIterator &aIter) const override;  This operator compares two TIterator objects. ;  ; Bool_t operator!= (const TListIter &aIter) const;  This operator compares two TListIter objects. ;  ; TObject * operator* () const override;  Return current object or nullptr. ;  ; TIterator & operator= (const TIterator &rhs) override;  Overridden assignment operator. ;  ; TListIter & operator= (const TListIter &rhs);  Overloaded assignment operator. ;  ; void Reset () override;  Reset list iterator. ;  ; void SetOption (Option_t *option);  Sets the object option stored in the list. ;  ; void Streamer (TBuffer &) override;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TIterator; virtual ~TIterator ();  ; TObject * operator() ();  ; Bool_t operator== (const TIterator &other) const;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TIterator; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  . Protected Types; using TObjLinkPtr_t = std::shared_ptr< TObjLink >;  . Protected Member Functions;  TListIter ();  ;  Protected Member Functions inherited from TIterator;  TIterator ();  ;  TIterator (const TIterator &);  . Protected Attributes; TObjLinkPtr_t fCurCursor;  ; TObjLinkPtr_t fCursor;  ; Bool_t fDirection;  ; const TList * fList;  ; Bool_t fStarted;  . #include <TList.h>. Inheritance diagram for TListIter:. This brows,MatchSource.WIKI,doc/master/classTListIter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTListIter.html
Availability,error,error,"ar *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual const char * GetTitle () const;  Returns title of object. ;  ; v",MatchSource.WIKI,doc/master/classTListOfDataMembers.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTListOfDataMembers.html
Integrability,message,message,"ar *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual const char * GetTitle () const;  Returns title of object. ;  ; v",MatchSource.WIKI,doc/master/classTListOfDataMembers.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTListOfDataMembers.html
Modifiability,inherit,inherited,". ROOT: TListOfDataMembers Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Static Public Member Functions |; Private Member Functions |; Private Attributes |; List of all members ; TListOfDataMembers Class Reference. ; A collection of TDataMember objects designed for fast access given a DeclId_t and for keep track of TDataMember that were described unloaded data member. ; Definition at line 32 of file TListOfDataMembers.h. Public Types; typedef TDictionary::DeclId_t DeclId_t;  ;  Public Types inherited from TList; typedef TListIter Iterator_t;  ;  Public Types inherited from TCollection; enum  { kInitCapacity = 16; , kInitHashTableCapacity = 17; };  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  . Public Member Functions; template<class DataMemberList > ;  TListOfDataMembers (DataMemberList &dmlist);  Construct from a generic collection of data members objects. ;  ;  TListOfDataMembers (TClass *cl, TDictionary::EMemberSelection selection);  Constructor, possibly for all members of a class (or globals). ;  ;  ~TListOfDataMembers ();  Destructor. ;  ; void AddAfter (const TObject *after, TObject *obj) override;  Insert object after object after in the list. ;  ; void AddAfter (TObjLink *after, TObject *obj) override;  Insert object after object after in the list. ;  ; void Ad",MatchSource.WIKI,doc/master/classTListOfDataMembers.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTListOfDataMembers.html
Performance,load,load,"onstexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  . Private Member Functions;  TListOfDataMembers (const TListOfDataMembers &)=delete;  Whether the list should contain regular data members or only using decls or both. ;  ; void MapObject (TObject *obj);  Add a pair<id, object> to the map of data members and their ids. ;  ; TListOfDataMembers & operator= (const TListOfDataMembers &)=delete;  ; void UnmapObject (TObject *obj);  Remove a pair<id, object> from the map of data members and their ids. ;  . Private Attributes; TClass * fClass = nullptr;  ; TExMap * fIds = nullptr;  Context of this list. Not owned. ;  ; std::atomic< bool > fIsLoaded {kFALSE};  Represent interpreter state when we last did a full load. ;  ; ULong64_t fLastLoadMarker = 0;  Holder of TDataMember for unloaded DataMembers. ;  ; TDictionary::EMemberSelection fSelection = TDictionary::EMemberSelection::kNoUsingDecls;  Mark whether Load was executed. ;  ; THashList * fUnloaded = nullptr;  Map from DeclId_t to TDataMember*. ;  . Additional Inherited Members;  Protected Types inherited from TList; using TObjLinkPtr_t = std::shared_ptr< TObjLink >;  ; using TObjLinkWeakPtr_t = std::weak_ptr< TObjLink >;  ;  Protected Types inherited from TCollection; enum  EStatusBits { kIsOwner = (1ULL << ( 14 )); , kUseRWLock = (1ULL << ( 16 )); };  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Protected Member Functions inherited from TList; TObjLinkPtr_t * DoSort (TObjLinkPtr_t *head, Int_t n);  Sort linked list. ;  ; TObjLink * FindLink (const TObject *obj, Int_t &idx) const;  Returns the TObjLink object that contains object obj. ;  ; void In",MatchSource.WIKI,doc/master/classTListOfDataMembers.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTListOfDataMembers.html
Safety,safe,safe,"ta member to the expect set of list. ;  ;  Public Member Functions inherited from THashList;  THashList (Int_t capacity=TCollection::kInitHashTableCapacity, Int_t rehash=0);  Create a THashList object. ;  ;  THashList (TObject *parent, Int_t capacity=TCollection::kInitHashTableCapacity, Int_t rehash=0);  For backward compatibility only. Use other ctor. ;  ; virtual ~THashList ();  Delete a hashlist. ;  ; Float_t AverageCollisions () const;  Return the average collision rate. ;  ; const TList * GetListForObject (const char *name) const;  Return the THashTable's list (bucket) in which obj can be found based on its hash; see THashTable::GetListForObject(). ;  ; const TList * GetListForObject (const TObject *obj) const;  Return the THashTable's list (bucket) in which obj can be found based on its hash; see THashTable::GetListForObject(). ;  ; void Rehash (Int_t newCapacity);  Rehash the hashlist. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; bool UseRWLock (Bool_t enable=true) override;  Set this collection to use a RW lock upon access, making it thread safe. ;  ;  Public Member Functions inherited from TList;  TList ();  ; The argument is ignored Use the default constructor TList ()."") ;  ;  TList (TObject *) R__DEPRECATED(6;  ; virtual ~TList ();  Delete the list. ;  ; void Add (TObject *obj) override;  ; virtual void Add (TObject *obj, Option_t *opt);  ; TObject * After (const TObject *obj) const override;  Returns the object after object obj. ;  ; TObject * At (Int_t idx) const override;  Returns the object at position idx. Returns 0 if idx is out of range. ;  ; TObject * Before (const TObject *obj) const override;  Returns the object before object obj. ;  ; TObject * First () const override;  Return the first object in the list. Returns 0 when list is empty. ;  ; virtual TObjLink * FirstLink () const;  ; TObject ** GetObjectRef (const TObject *obj) const override;  Return address of pointer to obj. ;  ; Bool_t IsAscending ();  ; TObject * La",MatchSource.WIKI,doc/master/classTListOfDataMembers.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTListOfDataMembers.html
Security,access,access,". ROOT: TListOfDataMembers Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Static Public Member Functions |; Private Member Functions |; Private Attributes |; List of all members ; TListOfDataMembers Class Reference. ; A collection of TDataMember objects designed for fast access given a DeclId_t and for keep track of TDataMember that were described unloaded data member. ; Definition at line 32 of file TListOfDataMembers.h. Public Types; typedef TDictionary::DeclId_t DeclId_t;  ;  Public Types inherited from TList; typedef TListIter Iterator_t;  ;  Public Types inherited from TCollection; enum  { kInitCapacity = 16; , kInitHashTableCapacity = 17; };  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  . Public Member Functions; template<class DataMemberList > ;  TListOfDataMembers (DataMemberList &dmlist);  Construct from a generic collection of data members objects. ;  ;  TListOfDataMembers (TClass *cl, TDictionary::EMemberSelection selection);  Constructor, possibly for all members of a class (or globals). ;  ;  ~TListOfDataMembers ();  Destructor. ;  ; void AddAfter (const TObject *after, TObject *obj) override;  Insert object after object after in the list. ;  ; void AddAfter (TObjLink *after, TObject *obj) override;  Insert object after object after in the list. ;  ; void Ad",MatchSource.WIKI,doc/master/classTListOfDataMembers.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTListOfDataMembers.html
Availability,error,error,"ar *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual const char * GetTitle () const;  Returns title of object. ;  ; v",MatchSource.WIKI,doc/master/classTListOfEnums.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTListOfEnums.html
Integrability,message,message,"ar *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual const char * GetTitle () const;  Returns title of object. ;  ; v",MatchSource.WIKI,doc/master/classTListOfEnums.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTListOfEnums.html
Modifiability,inherit,inherited,". ROOT: TListOfEnums Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Private Member Functions |; Private Attributes |; Friends |; List of all members ; TListOfEnums Class Reference. ; A collection of TEnum objects designed for fast access given a DeclId_t and for keep track of TEnum that were described unloaded enum. ; Definition at line 32 of file TListOfEnums.h. Public Types; typedef TDictionary::DeclId_t DeclId_t;  ;  Public Types inherited from TList; typedef TListIter Iterator_t;  ;  Public Types inherited from TCollection; enum  { kInitCapacity = 16; , kInitHashTableCapacity = 17; };  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  . Public Member Functions;  TListOfEnums (TClass *cl=nullptr);  Constructor. ;  ;  ~TListOfEnums () override;  Destructor. ;  ; void AddAfter (const TObject *after, TObject *obj) override;  Insert object after object after in the list. ;  ; void AddAfter (TObjLink *after, TObject *obj) override;  Insert object after object after in the list. ;  ; void AddAt (TObject *obj, Int_t idx) override;  Insert object at location idx in the list. ;  ; void AddBefore (const TObject *before, TObject *obj) override;  Insert object before object before in the list. ;  ; void AddBefore (TObjLin",MatchSource.WIKI,doc/master/classTListOfEnums.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTListOfEnums.html
Performance,load,loaded,"d object at the beginning of the list and also store option. ;  ; void AddLast (TObject *obj) override;  Add object at the end of the list. ;  ; void AddLast (TObject *obj, Option_t *opt) override;  Add object at the end of the list and also store option. ;  ; void Clear (Option_t *option) override;  Remove all objects from the list. ;  ; void Delete (Option_t *option="""") override;  Delete all TDataMember object files. ;  ; TEnum * Find (DeclId_t id) const;  Return the TEnum corresponding to the Decl 'id' or NULL if it does not exist. ;  ; TObject * FindObject (const char *) const override;  Specialize FindObject to do search for the a enum just by name or create it if its not already in the list. ;  ; TObject * FindObject (const char *name) const override;  Find object using its name. ;  ; TObject * FindObject (const TObject *obj) const override;  Find object using its hash value (returned by its Hash() member). ;  ; virtual TEnum * GetObject (const char *) const;  Return an object from the list of enums if and only if is has already been loaded in the list. ;  ; TClass * IsA () const override;  ; Bool_t IsLoaded () const;  ; void RecursiveRemove (TObject *obj) override;  Remove object from this collection and recursively remove the object from all other objects (and collections). ;  ; TObject * Remove (TObject *obj) override;  Remove object from the list. ;  ; TObject * Remove (TObjLink *lnk) override;  Remove object via its objlink from the list. ;  ; void Streamer (TBuffer &) override;  Stream all objects in the collection to or from the I/O buffer. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from THashList;  THashList (Int_t capacity=TCollection::kInitHashTableCapacity, Int_t rehash=0);  Create a THashList object. ;  ;  THashList (TObject *parent, Int_t capacity=TCollection::kInitHashTableCapacity, Int_t rehash=0);  For backward compatibility only. Use other ctor. ;  ; virtual ~THashList ();  Delete a ",MatchSource.WIKI,doc/master/classTListOfEnums.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTListOfEnums.html
Safety,safe,safe,"TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from THashList;  THashList (Int_t capacity=TCollection::kInitHashTableCapacity, Int_t rehash=0);  Create a THashList object. ;  ;  THashList (TObject *parent, Int_t capacity=TCollection::kInitHashTableCapacity, Int_t rehash=0);  For backward compatibility only. Use other ctor. ;  ; virtual ~THashList ();  Delete a hashlist. ;  ; Float_t AverageCollisions () const;  Return the average collision rate. ;  ; const TList * GetListForObject (const char *name) const;  Return the THashTable's list (bucket) in which obj can be found based on its hash; see THashTable::GetListForObject(). ;  ; const TList * GetListForObject (const TObject *obj) const;  Return the THashTable's list (bucket) in which obj can be found based on its hash; see THashTable::GetListForObject(). ;  ; void Rehash (Int_t newCapacity);  Rehash the hashlist. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; bool UseRWLock (Bool_t enable=true) override;  Set this collection to use a RW lock upon access, making it thread safe. ;  ;  Public Member Functions inherited from TList;  TList ();  ; The argument is ignored Use the default constructor TList ()."") ;  ;  TList (TObject *) R__DEPRECATED(6;  ; virtual ~TList ();  Delete the list. ;  ; void Add (TObject *obj) override;  ; virtual void Add (TObject *obj, Option_t *opt);  ; TObject * After (const TObject *obj) const override;  Returns the object after object obj. ;  ; TObject * At (Int_t idx) const override;  Returns the object at position idx. Returns 0 if idx is out of range. ;  ; TObject * Before (const TObject *obj) const override;  Returns the object before object obj. ;  ; TObject * First () const override;  Return the first object in the list. Returns 0 when list is empty. ;  ; virtual TObjLink * FirstLink () const;  ; TObject ** GetObjectRef (const TObject *obj) const override;  Return address of pointer to obj. ;  ; Bool_t IsAscending ();  ; TObject * La",MatchSource.WIKI,doc/master/classTListOfEnums.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTListOfEnums.html
Security,access,access,". ROOT: TListOfEnums Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Private Member Functions |; Private Attributes |; Friends |; List of all members ; TListOfEnums Class Reference. ; A collection of TEnum objects designed for fast access given a DeclId_t and for keep track of TEnum that were described unloaded enum. ; Definition at line 32 of file TListOfEnums.h. Public Types; typedef TDictionary::DeclId_t DeclId_t;  ;  Public Types inherited from TList; typedef TListIter Iterator_t;  ;  Public Types inherited from TCollection; enum  { kInitCapacity = 16; , kInitHashTableCapacity = 17; };  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  . Public Member Functions;  TListOfEnums (TClass *cl=nullptr);  Constructor. ;  ;  ~TListOfEnums () override;  Destructor. ;  ; void AddAfter (const TObject *after, TObject *obj) override;  Insert object after object after in the list. ;  ; void AddAfter (TObjLink *after, TObject *obj) override;  Insert object after object after in the list. ;  ; void AddAt (TObject *obj, Int_t idx) override;  Insert object at location idx in the list. ;  ; void AddBefore (const TObject *before, TObject *obj) override;  Insert object before object before in the list. ;  ; void AddBefore (TObjLin",MatchSource.WIKI,doc/master/classTListOfEnums.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTListOfEnums.html
Availability,error,error,"ar *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual const char * GetTitle () const;  Returns title of object. ;  ; v",MatchSource.WIKI,doc/master/classTListOfEnumsWithLock.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTListOfEnumsWithLock.html
Energy Efficiency,allocate,allocated,"thLock.cxx. ◆ GetLast(). Int_t TListOfEnumsWithLock::GetLast ; (; ); const. overridevirtual . Returns index of last object in collection. ; Returns -1 when no objects in collection. ; Reimplemented from TSeqCollection.; Definition at line 293 of file TListOfEnumsWithLock.cxx. ◆ GetObject(). TEnum * TListOfEnumsWithLock::GetObject ; (; const char * ; name); const. overridevirtual . Return an object from the list of enums if and only if is has already been loaded in the list. ; This is an internal routine. ; Reimplemented from TListOfEnums.; Definition at line 175 of file TListOfEnumsWithLock.cxx. ◆ GetObjectRef(). TObject ** TListOfEnumsWithLock::GetObjectRef ; (; const TObject * ; obj); const. overridevirtual . Return address of pointer to obj. ; Reimplemented from TList.; Definition at line 268 of file TListOfEnumsWithLock.cxx. ◆ GetSize(). Int_t TListOfEnumsWithLock::GetSize ; (; ); const. overridevirtual . Return the capacity of the collection, i.e. ; the current total amount of space that has been allocated so far. Same as Capacity. Use GetEntries to get the number of elements currently in the collection. ; Reimplemented from TCollection.; Definition at line 310 of file TListOfEnumsWithLock.cxx. ◆ IndexOf(). Int_t TListOfEnumsWithLock::IndexOf ; (; const TObject * ; obj); const. overridevirtual . Return index of object in collection. ; Returns -1 when object not found. Uses member IsEqual() to find object. ; Reimplemented from TSeqCollection.; Definition at line 301 of file TListOfEnumsWithLock.cxx. ◆ IsA(). TClass * TListOfEnumsWithLock::IsA ; (; ); const. inlineoverridevirtual . ReturnsTClass describing current object ; Reimplemented from TListOfEnums.; Definition at line 80 of file TListOfEnumsWithLock.h. ◆ Last(). TObject * TListOfEnumsWithLock::Last ; (; ); const. overridevirtual . Return the last object in the list. Returns 0 when list is empty. ; Reimplemented from TList.; Definition at line 276 of file TListOfEnumsWithLock.cxx. ◆ LastLink(). TObjLink * T",MatchSource.WIKI,doc/master/classTListOfEnumsWithLock.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTListOfEnumsWithLock.html
Integrability,message,message,"ar *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual const char * GetTitle () const;  Returns title of object. ;  ; v",MatchSource.WIKI,doc/master/classTListOfEnumsWithLock.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTListOfEnumsWithLock.html
Modifiability,inherit,inherited,"pointer to obj. ;  ; Int_t GetSize () const override;  Return the capacity of the collection, i.e. ;  ; Int_t IndexOf (const TObject *obj) const override;  Return index of object in collection. ;  ; TClass * IsA () const override;  ; TObject * Last () const override;  Return the last object in the list. Returns 0 when list is empty. ;  ; TObjLink * LastLink () const override;  ; TIterator * MakeIterator (Bool_t dir=kIterForward) const override;  Return a list iterator. ;  ; void RecursiveRemove (TObject *obj) override;  Remove object from this collection and recursively remove the object from all other objects (and collections). ;  ; TObject * Remove (TObject *obj) override;  Remove object from the list. ;  ; TObject * Remove (TObjLink *lnk) override;  Remove object via its objlink from the list. ;  ; void Streamer (TBuffer &) override;  Stream all objects in the collection to or from the I/O buffer. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TListOfEnums;  TListOfEnums (TClass *cl=nullptr);  Constructor. ;  ;  ~TListOfEnums () override;  Destructor. ;  ; TEnum * Find (DeclId_t id) const;  Return the TEnum corresponding to the Decl 'id' or NULL if it does not exist. ;  ; Bool_t IsLoaded () const;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from THashList;  THashList (Int_t capacity=TCollection::kInitHashTableCapacity, Int_t rehash=0);  Create a THashList object. ;  ;  THashList (TObject *parent, Int_t capacity=TCollection::kInitHashTableCapacity, Int_t rehash=0);  For backward compatibility only. Use other ctor. ;  ; virtual ~THashList ();  Delete a hashlist. ;  ; Float_t AverageCollisions () const;  Return the average collision rate. ;  ; const TList * GetListForObject (const char *name) const;  Return the THashTable's list (bucket) in which obj can be found based on its hash; see THashTable::GetListForObject(). ;  ; const TList * GetListFor",MatchSource.WIKI,doc/master/classTListOfEnumsWithLock.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTListOfEnumsWithLock.html
Performance,load,loaded,"ject obj. ;  ; TObject * At (Int_t idx) const override;  Returns the object at position idx. Returns 0 if idx is out of range. ;  ; TObject * Before (const TObject *obj) const override;  Returns the object before object obj. ;  ; void Clear (Option_t *option) override;  Remove all objects from the list. ;  ; void Delete (Option_t *option="""") override;  Delete all TDataMember object files. ;  ; TObject * FindObject (const char *name) const override;  Specialize FindObject to do search for the a enum just by name or create it if its not already in the list. ;  ; TObject * FindObject (const TObject *obj) const override;  Find object using its hash value (returned by its Hash() member). ;  ; TObject * First () const override;  Return the first object in the list. Returns 0 when list is empty. ;  ; TObjLink * FirstLink () const override;  ; Int_t GetLast () const override;  Returns index of last object in collection. ;  ; TEnum * GetObject (const char *) const override;  Return an object from the list of enums if and only if is has already been loaded in the list. ;  ; TObject ** GetObjectRef (const TObject *obj) const override;  Return address of pointer to obj. ;  ; Int_t GetSize () const override;  Return the capacity of the collection, i.e. ;  ; Int_t IndexOf (const TObject *obj) const override;  Return index of object in collection. ;  ; TClass * IsA () const override;  ; TObject * Last () const override;  Return the last object in the list. Returns 0 when list is empty. ;  ; TObjLink * LastLink () const override;  ; TIterator * MakeIterator (Bool_t dir=kIterForward) const override;  Return a list iterator. ;  ; void RecursiveRemove (TObject *obj) override;  Remove object from this collection and recursively remove the object from all other objects (and collections). ;  ; TObject * Remove (TObject *obj) override;  Remove object from the list. ;  ; TObject * Remove (TObjLink *lnk) override;  Remove object via its objlink from the list. ;  ; void Streamer (TBuffer &) ",MatchSource.WIKI,doc/master/classTListOfEnumsWithLock.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTListOfEnumsWithLock.html
Safety,safe,safe,"TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from THashList;  THashList (Int_t capacity=TCollection::kInitHashTableCapacity, Int_t rehash=0);  Create a THashList object. ;  ;  THashList (TObject *parent, Int_t capacity=TCollection::kInitHashTableCapacity, Int_t rehash=0);  For backward compatibility only. Use other ctor. ;  ; virtual ~THashList ();  Delete a hashlist. ;  ; Float_t AverageCollisions () const;  Return the average collision rate. ;  ; const TList * GetListForObject (const char *name) const;  Return the THashTable's list (bucket) in which obj can be found based on its hash; see THashTable::GetListForObject(). ;  ; const TList * GetListForObject (const TObject *obj) const;  Return the THashTable's list (bucket) in which obj can be found based on its hash; see THashTable::GetListForObject(). ;  ; void Rehash (Int_t newCapacity);  Rehash the hashlist. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; bool UseRWLock (Bool_t enable=true) override;  Set this collection to use a RW lock upon access, making it thread safe. ;  ;  Public Member Functions inherited from TList;  TList ();  ; The argument is ignored Use the default constructor TList ()."") ;  ;  TList (TObject *) R__DEPRECATED(6;  ; virtual ~TList ();  Delete the list. ;  ; void Add (TObject *obj) override;  ; virtual void Add (TObject *obj, Option_t *opt);  ; Bool_t IsAscending ();  ; TObject * Remove (const TObjLinkPtr_t &lnk);  ; void RemoveLast () override;  Remove the last object of the list. ;  ; virtual void Sort (Bool_t order=kSortAscending);  Sort linked list. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TSeqCollection; virtual ~TSeqCollection ();  ; void Add (TObject *obj) override;  ; TClass * IsA () const override;  ; virtual Bool_t IsSorted () const;  ; Int_t LastIndex () const;  ; Long64_t Merge (TCollection *list);  Merge this collection with all collections coming in th",MatchSource.WIKI,doc/master/classTListOfEnumsWithLock.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTListOfEnumsWithLock.html
Security,access,access,". ROOT: TListOfEnumsWithLock Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Private Types |; Private Member Functions |; List of all members ; TListOfEnumsWithLock Class Reference. ; A collection of TEnum objects designed for fast access given a DeclId_t and for keep track of TEnum that were described unloaded enum. ; Definition at line 30 of file TListOfEnumsWithLock.h. Public Member Functions;  TListOfEnumsWithLock (TClass *cl=nullptr);  ;  ~TListOfEnumsWithLock () override;  Destructor. ;  ; void AddAfter (const TObject *after, TObject *obj) override;  Insert object after object after in the list. ;  ; void AddAfter (TObjLink *after, TObject *obj) override;  Insert object after object after in the list. ;  ; void AddAt (TObject *obj, Int_t idx) override;  Insert object at location idx in the list. ;  ; void AddBefore (const TObject *before, TObject *obj) override;  Insert object before object before in the list. ;  ; void AddBefore (TObjLink *before, TObject *obj) override;  Insert object before object before in the list. ;  ; void AddFirst (TObject *obj) override;  Add object at the beginning of the list. ;  ; void AddFirst (TObject *obj, Option_t *opt) override;  Add object at the beginning of the list and also store option. ;  ; void AddLast (TObject *obj) override;  Add object at the end of the list. ;  ; void AddLast (TObject *obj, Option_t *opt) override;  Add object at the end of the list and also store option. ;  ; TObject * After (const TObject *obj) const override;  Returns the object after object obj. ;  ; TObject * At (Int_t idx) const override;  Returns the object at position idx. Returns 0 if idx is out of range. ;  ; TObject * Before (const TObject *obj) const override;  Returns the object before object obj. ;  ; void Clear (Option_t *option) override;  Remove all objects from the list. ;  ; void Delete (Option_t *op",MatchSource.WIKI,doc/master/classTListOfEnumsWithLock.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTListOfEnumsWithLock.html
Availability,avail,available,"cts from the list. ;  ; void Delete (Option_t *option="""") override;  Delete all TFunction object files. ;  ; TFunction * Find (DeclId_t id) const;  Return the TMethod or TFunction describing the function corresponding to the Decl 'id'. ;  ; TObject * FindObject (const char *name) const override;  Specialize FindObject to do search for the a function just by name or create it if its not already in the list. ;  ; TObject * FindObject (const TObject *obj) const override;  Find object using its hash value (returned by its Hash() member). ;  ; TObject * First () const override;  Return the first object in the list. Returns 0 when list is empty. ;  ; TObjLink * FirstLink () const override;  ; TFunction * Get (DeclId_t id);  Return (after creating it if necessary) the TMethod or TFunction describing the function corresponding to the Decl 'id'. ;  ; Int_t GetLast () const override;  Returns index of last object in collection. ;  ; virtual TList * GetListForObject (const char *name) const;  Return the set of overloads for this name, collecting all available ones. ;  ; virtual TList * GetListForObject (const TObject *obj) const;  Return the set of overloads for function obj, collecting all available ones. ;  ; TObject ** GetObjectRef (const TObject *obj) const override;  Return address of pointer to obj. ;  ; Int_t GetSize () const override;  Return the capacity of the collection, i.e. ;  ; Int_t IndexOf (const TObject *obj) const override;  Return index of object in collection. ;  ; TClass * IsA () const override;  ; TObject * Last () const override;  Return the last object in the list. Returns 0 when list is empty. ;  ; TObjLink * LastLink () const override;  ; void Load ();  Load all the functions known to the interpreter for the scope 'fClass' into this collection. ;  ; TIterator * MakeIterator (Bool_t dir=kIterForward) const override;  Return a list iterator. ;  ; void RecursiveRemove (TObject *obj) override;  Remove object from this collection and recursively remove the ",MatchSource.WIKI,doc/master/classTListOfFunctions.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTListOfFunctions.html
Energy Efficiency,allocate,allocated," of file TListOfFunctions.cxx. ◆ GetListForObject() [2/2]. TList * TListOfFunctions::GetListForObject ; (; const TObject * ; obj); const. virtual . Return the set of overloads for function obj, collecting all available ones. ; Can construct and insert new TFunction-s. ; Definition at line 239 of file TListOfFunctions.cxx. ◆ GetListForObjectNonConst(). TList * TListOfFunctions::GetListForObjectNonConst ; (; const char * ; name). private . Return the set of overloads for this name, collecting all available ones. ; Can construct and insert new TFunction-s. ; Definition at line 191 of file TListOfFunctions.cxx. ◆ GetObjectRef(). TObject ** TListOfFunctions::GetObjectRef ; (; const TObject * ; obj); const. overridevirtual . Return address of pointer to obj. ; Reimplemented from TList.; Definition at line 499 of file TListOfFunctions.cxx. ◆ GetSize(). Int_t TListOfFunctions::GetSize ; (; ); const. overridevirtual . Return the capacity of the collection, i.e. ; the current total amount of space that has been allocated so far. Same as Capacity. Use GetEntries to get the number of elements currently in the collection. ; Reimplemented from TCollection.; Definition at line 541 of file TListOfFunctions.cxx. ◆ IndexOf(). Int_t TListOfFunctions::IndexOf ; (; const TObject * ; obj); const. overridevirtual . Return index of object in collection. ; Returns -1 when object not found. Uses member IsEqual() to find object. ; Reimplemented from TSeqCollection.; Definition at line 532 of file TListOfFunctions.cxx. ◆ IsA(). TClass * TListOfFunctions::IsA ; (; ); const. inlineoverridevirtual . ReturnsTClass describing current object ; Reimplemented from THashList.; Definition at line 102 of file TListOfFunctions.h. ◆ Last(). TObject * TListOfFunctions::Last ; (; ); const. overridevirtual . Return the last object in the list. Returns 0 when list is empty. ; Reimplemented from TList.; Definition at line 507 of file TListOfFunctions.cxx. ◆ LastLink(). TObjLink * TListOfFunctions::LastLink ; (;",MatchSource.WIKI,doc/master/classTListOfFunctions.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTListOfFunctions.html
Integrability,message,message,"ar *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual const char * GetTitle () const;  Returns title of object. ;  ; v",MatchSource.WIKI,doc/master/classTListOfFunctions.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTListOfFunctions.html
Modifiability,inherit,inherited,". ROOT: TListOfFunctions Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Static Public Member Functions |; Private Member Functions |; Private Attributes |; Friends |; List of all members ; TListOfFunctions Class Reference. ; A collection of TFunction objects designed for fast access given a DeclId_t and for keep track of TFunction that were described unloaded function. ; Definition at line 34 of file TListOfFunctions.h. Public Types; typedef TDictionary::DeclId_t DeclId_t;  ;  Public Types inherited from TList; typedef TListIter Iterator_t;  ;  Public Types inherited from TCollection; enum  { kInitCapacity = 16; , kInitHashTableCapacity = 17; };  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  . Public Member Functions;  TListOfFunctions (TClass *cl);  Constructor. ;  ;  ~TListOfFunctions ();  Destructor. ;  ; void AddAfter (const TObject *after, TObject *obj) override;  Insert object after object after in the list. ;  ; void AddAfter (TObjLink *after, TObject *obj) override;  Insert object after object after in the list. ;  ; void AddAt (TObject *obj, Int_t idx) override;  Insert object at location idx in the list. ;  ; void AddBefore (const TObject *before, TObject *obj) override;  Insert object before object before in the list. ;  ; void AddBefore (TObjLink *before, TObj",MatchSource.WIKI,doc/master/classTListOfFunctions.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTListOfFunctions.html
Performance,perform,perform,"dLink (const TObject *obj, Int_t &idx) const;  Returns the TObjLink object that contains object obj. ;  ; void InsertAfter (const TObjLinkPtr_t &newlink, const TObjLinkPtr_t &prev);  Insert a new link in the chain. ;  ; TObjLink * LinkAt (Int_t idx) const;  sorting order (when calling Sort() or for TSortedList) ;  ; Bool_t LnkCompare (const TObjLinkPtr_t &l1, const TObjLinkPtr_t &l2);  Compares the objects stored in the TObjLink objects. ;  ; TObjLinkPtr_t NewLink (TObject *obj, const TObjLinkPtr_t &prev=nullptr);  Return a new TObjLink. ;  ; TObjLinkPtr_t NewLink (TObject *obj, TObjLink *prev);  ; TObjLinkPtr_t NewOptLink (TObject *obj, Option_t *opt, const TObjLinkPtr_t &prev=nullptr);  Return a new TObjOptLink (a TObjLink that also stores the option). ;  ; TObjLinkPtr_t NewOptLink (TObject *obj, Option_t *opt, TObjLink *prev);  ;  Protected Member Functions inherited from TSeqCollection;  TSeqCollection ();  ; virtual void Changed ();  ;  Protected Member Functions inherited from TCollection;  TCollection ();  ; virtual const char * GetCollectionEntryName (TObject *entry) const;  For given collection entry return the string that is used to identify the object and, potentially, perform wildcard/regexp filtering on. ;  ; virtual void PrintCollectionEntry (TObject *entry, Option_t *option, Int_t recurse) const;  Print the collection entry. ;  ; virtual void PrintCollectionHeader (Option_t *option) const;  Print the collection header. ;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  ;  Protected Attributes inherited from THashList; THashTable * fTable;  ;  Protected Attributes inherited from TList; Bool_t fAscending;  cache to speedup sequential calling of Before() and After() functions ;  ; TObjLinkWeakPtr_t fCache;  pointer to last entry in linked list ;  ; TObjLinkPtr_t fFirst;  ; TObjLinkPtr_t fLast; ",MatchSource.WIKI,doc/master/classTListOfFunctions.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTListOfFunctions.html
Safety,safe,safe,"nc);  Mark 'func' as being unloaded. ;  ;  Public Member Functions inherited from THashList;  THashList (Int_t capacity=TCollection::kInitHashTableCapacity, Int_t rehash=0);  Create a THashList object. ;  ;  THashList (TObject *parent, Int_t capacity=TCollection::kInitHashTableCapacity, Int_t rehash=0);  For backward compatibility only. Use other ctor. ;  ; virtual ~THashList ();  Delete a hashlist. ;  ; Float_t AverageCollisions () const;  Return the average collision rate. ;  ; const TList * GetListForObject (const char *name) const;  Return the THashTable's list (bucket) in which obj can be found based on its hash; see THashTable::GetListForObject(). ;  ; const TList * GetListForObject (const TObject *obj) const;  Return the THashTable's list (bucket) in which obj can be found based on its hash; see THashTable::GetListForObject(). ;  ; void Rehash (Int_t newCapacity);  Rehash the hashlist. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; bool UseRWLock (Bool_t enable=true) override;  Set this collection to use a RW lock upon access, making it thread safe. ;  ;  Public Member Functions inherited from TList;  TList ();  ; The argument is ignored Use the default constructor TList ()."") ;  ;  TList (TObject *) R__DEPRECATED(6;  ; virtual ~TList ();  Delete the list. ;  ; void Add (TObject *obj) override;  ; virtual void Add (TObject *obj, Option_t *opt);  ; Bool_t IsAscending ();  ; TObject * Remove (const TObjLinkPtr_t &lnk);  ; void RemoveLast () override;  Remove the last object of the list. ;  ; virtual void Sort (Bool_t order=kSortAscending);  Sort linked list. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TSeqCollection; virtual ~TSeqCollection ();  ; void Add (TObject *obj) override;  ; TClass * IsA () const override;  ; virtual Bool_t IsSorted () const;  ; Int_t LastIndex () const;  ; Long64_t Merge (TCollection *list);  Merge this collection with all collections coming in th",MatchSource.WIKI,doc/master/classTListOfFunctions.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTListOfFunctions.html
Security,access,access,". ROOT: TListOfFunctions Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Static Public Member Functions |; Private Member Functions |; Private Attributes |; Friends |; List of all members ; TListOfFunctions Class Reference. ; A collection of TFunction objects designed for fast access given a DeclId_t and for keep track of TFunction that were described unloaded function. ; Definition at line 34 of file TListOfFunctions.h. Public Types; typedef TDictionary::DeclId_t DeclId_t;  ;  Public Types inherited from TList; typedef TListIter Iterator_t;  ;  Public Types inherited from TCollection; enum  { kInitCapacity = 16; , kInitHashTableCapacity = 17; };  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  . Public Member Functions;  TListOfFunctions (TClass *cl);  Constructor. ;  ;  ~TListOfFunctions ();  Destructor. ;  ; void AddAfter (const TObject *after, TObject *obj) override;  Insert object after object after in the list. ;  ; void AddAfter (TObjLink *after, TObject *obj) override;  Insert object after object after in the list. ;  ; void AddAt (TObject *obj, Int_t idx) override;  Insert object at location idx in the list. ;  ; void AddBefore (const TObject *before, TObject *obj) override;  Insert object before object before in the list. ;  ; void AddBefore (TObjLink *before, TObj",MatchSource.WIKI,doc/master/classTListOfFunctions.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTListOfFunctions.html
Availability,avail,available," option. ;  ; void AddLast (TObject *obj) override;  Add object at the end of the list. ;  ; void AddLast (TObject *obj, Option_t *opt) override;  Add object at the end of the list and also store option. ;  ; void Clear (Option_t *option="""") override;  Remove all objects from the list. ;  ; void Delete (Option_t *option="""") override;  Delete all TFunction object files. ;  ; TObject * FindObject (const char *name) const override;  Find object using its name. ;  ; TObject * FindObject (const char *name) const override;  Specialize FindObject to do search for the a function just by name or create it if its not already in the list. ;  ; TObject * FindObject (const TObject *obj) const override;  Find object using its hash value (returned by its Hash() member). ;  ; TFunctionTemplate * Get (DeclId_t id);  Return (after creating it if necessary) the TMethod or TFunction describing the function corresponding to the Decl 'id'. ;  ; virtual TList * GetListForObject (const char *name) const;  Return the set of overloads for this name, collecting all available ones. ;  ; virtual TList * GetListForObject (const TObject *obj) const;  Return the set of overloads for function obj, collecting all available ones. ;  ; TClass * IsA () const override;  ; void Load ();  Load all the functions known to the interpreter for the scope 'fClass' into this collection. ;  ; void RecursiveRemove (TObject *obj) override;  Remove object from this collection and recursively remove the object from all other objects (and collections). ;  ; TObject * Remove (TObject *obj) override;  Remove object from the list. ;  ; TObject * Remove (TObjLink *lnk) override;  Remove object via its objlink from the list. ;  ; void Streamer (TBuffer &) override;  Stream all objects in the collection to or from the I/O buffer. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; void Unload ();  Mark 'all func' as being unloaded. ;  ; void Unload (TFunctionTemplate *func);  Mark 'func' as being unloaded. ",MatchSource.WIKI,doc/master/classTListOfFunctionTemplates.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTListOfFunctionTemplates.html
Integrability,message,message,"ar *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual const char * GetTitle () const;  Returns title of object. ;  ; v",MatchSource.WIKI,doc/master/classTListOfFunctionTemplates.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTListOfFunctionTemplates.html
Modifiability,inherit,inherited,"l TList * GetListForObject (const TObject *obj) const;  Return the set of overloads for function obj, collecting all available ones. ;  ; TClass * IsA () const override;  ; void Load ();  Load all the functions known to the interpreter for the scope 'fClass' into this collection. ;  ; void RecursiveRemove (TObject *obj) override;  Remove object from this collection and recursively remove the object from all other objects (and collections). ;  ; TObject * Remove (TObject *obj) override;  Remove object from the list. ;  ; TObject * Remove (TObjLink *lnk) override;  Remove object via its objlink from the list. ;  ; void Streamer (TBuffer &) override;  Stream all objects in the collection to or from the I/O buffer. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; void Unload ();  Mark 'all func' as being unloaded. ;  ; void Unload (TFunctionTemplate *func);  Mark 'func' as being unloaded. ;  ;  Public Member Functions inherited from THashList;  THashList (Int_t capacity=TCollection::kInitHashTableCapacity, Int_t rehash=0);  Create a THashList object. ;  ;  THashList (TObject *parent, Int_t capacity=TCollection::kInitHashTableCapacity, Int_t rehash=0);  For backward compatibility only. Use other ctor. ;  ; virtual ~THashList ();  Delete a hashlist. ;  ; Float_t AverageCollisions () const;  Return the average collision rate. ;  ; const TList * GetListForObject (const char *name) const;  Return the THashTable's list (bucket) in which obj can be found based on its hash; see THashTable::GetListForObject(). ;  ; const TList * GetListForObject (const TObject *obj) const;  Return the THashTable's list (bucket) in which obj can be found based on its hash; see THashTable::GetListForObject(). ;  ; void Rehash (Int_t newCapacity);  Rehash the hashlist. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; bool UseRWLock (Bool_t enable=true) override;  Set this collection to use a RW lock upon access, making it thread safe. ;  ;  Public Member Fun",MatchSource.WIKI,doc/master/classTListOfFunctionTemplates.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTListOfFunctionTemplates.html
Performance,perform,perform,"dLink (const TObject *obj, Int_t &idx) const;  Returns the TObjLink object that contains object obj. ;  ; void InsertAfter (const TObjLinkPtr_t &newlink, const TObjLinkPtr_t &prev);  Insert a new link in the chain. ;  ; TObjLink * LinkAt (Int_t idx) const;  sorting order (when calling Sort() or for TSortedList) ;  ; Bool_t LnkCompare (const TObjLinkPtr_t &l1, const TObjLinkPtr_t &l2);  Compares the objects stored in the TObjLink objects. ;  ; TObjLinkPtr_t NewLink (TObject *obj, const TObjLinkPtr_t &prev=nullptr);  Return a new TObjLink. ;  ; TObjLinkPtr_t NewLink (TObject *obj, TObjLink *prev);  ; TObjLinkPtr_t NewOptLink (TObject *obj, Option_t *opt, const TObjLinkPtr_t &prev=nullptr);  Return a new TObjOptLink (a TObjLink that also stores the option). ;  ; TObjLinkPtr_t NewOptLink (TObject *obj, Option_t *opt, TObjLink *prev);  ;  Protected Member Functions inherited from TSeqCollection;  TSeqCollection ();  ; virtual void Changed ();  ;  Protected Member Functions inherited from TCollection;  TCollection ();  ; virtual const char * GetCollectionEntryName (TObject *entry) const;  For given collection entry return the string that is used to identify the object and, potentially, perform wildcard/regexp filtering on. ;  ; virtual void PrintCollectionEntry (TObject *entry, Option_t *option, Int_t recurse) const;  Print the collection entry. ;  ; virtual void PrintCollectionHeader (Option_t *option) const;  Print the collection header. ;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  ;  Protected Attributes inherited from THashList; THashTable * fTable;  ;  Protected Attributes inherited from TList; Bool_t fAscending;  cache to speedup sequential calling of Before() and After() functions ;  ; TObjLinkWeakPtr_t fCache;  pointer to last entry in linked list ;  ; TObjLinkPtr_t fFirst;  ; TObjLinkPtr_t fLast; ",MatchSource.WIKI,doc/master/classTListOfFunctionTemplates.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTListOfFunctionTemplates.html
Safety,safe,safe,"nc);  Mark 'func' as being unloaded. ;  ;  Public Member Functions inherited from THashList;  THashList (Int_t capacity=TCollection::kInitHashTableCapacity, Int_t rehash=0);  Create a THashList object. ;  ;  THashList (TObject *parent, Int_t capacity=TCollection::kInitHashTableCapacity, Int_t rehash=0);  For backward compatibility only. Use other ctor. ;  ; virtual ~THashList ();  Delete a hashlist. ;  ; Float_t AverageCollisions () const;  Return the average collision rate. ;  ; const TList * GetListForObject (const char *name) const;  Return the THashTable's list (bucket) in which obj can be found based on its hash; see THashTable::GetListForObject(). ;  ; const TList * GetListForObject (const TObject *obj) const;  Return the THashTable's list (bucket) in which obj can be found based on its hash; see THashTable::GetListForObject(). ;  ; void Rehash (Int_t newCapacity);  Rehash the hashlist. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; bool UseRWLock (Bool_t enable=true) override;  Set this collection to use a RW lock upon access, making it thread safe. ;  ;  Public Member Functions inherited from TList;  TList ();  ; The argument is ignored Use the default constructor TList ()."") ;  ;  TList (TObject *) R__DEPRECATED(6;  ; virtual ~TList ();  Delete the list. ;  ; void Add (TObject *obj) override;  ; virtual void Add (TObject *obj, Option_t *opt);  ; TObject * After (const TObject *obj) const override;  Returns the object after object obj. ;  ; TObject * At (Int_t idx) const override;  Returns the object at position idx. Returns 0 if idx is out of range. ;  ; TObject * Before (const TObject *obj) const override;  Returns the object before object obj. ;  ; TObject * First () const override;  Return the first object in the list. Returns 0 when list is empty. ;  ; virtual TObjLink * FirstLink () const;  ; TObject ** GetObjectRef (const TObject *obj) const override;  Return address of pointer to obj. ;  ; Bool_t IsAscending ();  ; TObject * La",MatchSource.WIKI,doc/master/classTListOfFunctionTemplates.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTListOfFunctionTemplates.html
Security,access,access,". ROOT: TListOfFunctionTemplates Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Private Types |; Private Member Functions |; Private Attributes |; Friends |; List of all members ; TListOfFunctionTemplates Class Reference. ; A collection of TFunction objects designed for fast access given a DeclId_t and for keep track of TFunction that were described unloaded function. ; Definition at line 34 of file TListOfFunctionTemplates.h. Public Member Functions;  TListOfFunctionTemplates (TClass *cl);  Constructor. ;  ;  ~TListOfFunctionTemplates ();  Destructor. ;  ; void AddAfter (const TObject *after, TObject *obj) override;  Insert object after object after in the list. ;  ; void AddAfter (TObjLink *after, TObject *obj) override;  Insert object after object after in the list. ;  ; void AddAt (TObject *obj, Int_t idx) override;  Insert object at location idx in the list. ;  ; void AddBefore (const TObject *before, TObject *obj) override;  Insert object before object before in the list. ;  ; void AddBefore (TObjLink *before, TObject *obj) override;  Insert object before object before in the list. ;  ; void AddFirst (TObject *obj) override;  Add object at the beginning of the list. ;  ; void AddFirst (TObject *obj, Option_t *opt) override;  Add object at the beginning of the list and also store option. ;  ; void AddLast (TObject *obj) override;  Add object at the end of the list. ;  ; void AddLast (TObject *obj, Option_t *opt) override;  Add object at the end of the list and also store option. ;  ; void Clear (Option_t *option="""") override;  Remove all objects from the list. ;  ; void Delete (Option_t *option="""") override;  Delete all TFunction object files. ;  ; TObject * FindObject (const char *name) const override;  Find object using its name. ;  ; TObject * FindObject (const char *name) const override;  Specialize FindObject to do search fo",MatchSource.WIKI,doc/master/classTListOfFunctionTemplates.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTListOfFunctionTemplates.html
Availability,error,error,"ar *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual const char * GetTitle () const;  Returns title of object. ;  ; v",MatchSource.WIKI,doc/master/classTListOfTypes.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTListOfTypes.html
Integrability,message,message,"ar *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual const char * GetTitle () const;  Returns title of object. ;  ; v",MatchSource.WIKI,doc/master/classTListOfTypes.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTListOfTypes.html
Modifiability,inherit,inherited," Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; List of all members ; TListOfTypes Class ReferenceCore ROOT classes » Base ROOT classes. ; A collection of TDataType designed to hold the typedef information and numerical type information. ; The collection is populated on demand.; Besides the built-in types (int, float) a typedef is explicitly added to the collection (and thus visible via ls or Print) only if it is requested explicitly. ; Definition at line 30 of file TListOfTypes.h. Public Member Functions;  TListOfTypes ();  ; TObject * FindObject (const char *name) const override;  Find object using its name. ;  ; TObject * FindObject (const char *name) const override;  Find object using its name. ;  ; TObject * FindObject (const TObject *obj) const override;  Find object using its hash value (returned by its Hash() member). ;  ; TDataType * FindType (const char *name) const;  ;  Public Member Functions inherited from THashTable;  THashTable (Int_t capacity=TCollection::kInitHashTableCapacity, Int_t rehash=0);  Create a THashTable object. ;  ; virtual ~THashTable ();  Delete a hashtable. ;  ; void Add (TObject *obj) override;  Add object to the hash table. ;  ; void AddAll (const TCollection *col) override;  Add all objects from collection col to this collection. ;  ; void AddBefore (const TObject *before, TObject *obj);  Add object to the hash table. ;  ; Float_t AverageCollisions () const;  ; void Clear (Option_t *option="""") override;  Remove all objects from the table. ;  ; Int_t Collisions (const char *name) const;  Returns the number of collisions for an object with a certain name (i.e. ;  ; Int_t Collisions (TObject *obj) const;  Returns the number of collisions for an object (i.e. ;  ; void Delete (Option_t *option="""") override;  Remove all objects from the table AND delete all heap based objects. ;  ; Bool_t Empty () const;  ; const TList * GetListForObject (const char *name) const;  Return the TList cor",MatchSource.WIKI,doc/master/classTListOfTypes.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTListOfTypes.html
Performance,perform,perform,"bject *obj);  Add to the list of things to be cleaned up. ;  ; static TCollection * GetCurrentCollection ();  Return the globally accessible collection. ;  ; static void StartGarbageCollection ();  Set up for garbage collection. ;  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  ;  Protected Types inherited from TCollection; enum  EStatusBits { kIsOwner = (1ULL << ( 14 )); , kUseRWLock = (1ULL << ( 16 )); };  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Protected Member Functions inherited from TCollection;  TCollection ();  ; virtual const char * GetCollectionEntryName (TObject *entry) const;  For given collection entry return the string that is used to identify the object and, potentially, perform wildcard/regexp filtering on. ;  ; virtual void PrintCollectionEntry (TObject *entry, Option_t *option, Int_t recurse) const;  Print the collection entry. ;  ; virtual void PrintCollectionHeader (Option_t *option) const;  Print the collection header. ;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  ;  Protected Attributes inherited from TCollection; TString fName;  ; Int_t fSize;  . #include </home/sftnight/build/workspace/root-makedoc-master/rootspi/rdoc/src/master/core/base/src/TListOfTypes.h>. Inheritance diagram for TListOfTypes:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or",MatchSource.WIKI,doc/master/classTListOfTypes.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTListOfTypes.html
Safety,safe,safe,"de;  List (ls) all objects in this collection. ;  ; virtual TIterator * MakeReverseIterator () const;  ; Bool_t Notify () override;  'Notify' all objects in this collection. ;  ; TObject * operator() (const char *name) const;  Find an object in this collection by name. ;  ; void Paint (Option_t *option="""") override;  Paint all objects in this collection. ;  ; void RecursiveRemove (TObject *obj) override;  Remove object from this collection and recursively remove the object from all other objects (and collections). ;  ; void RemoveAll ();  ; virtual void RemoveAll (TCollection *col);  Remove all objects in collection col from this collection. ;  ; void SetCurrentCollection ();  Set this collection to be the globally accessible collection. ;  ; void SetName (const char *name);  ; virtual void SetOwner (Bool_t enable=kTRUE);  Set whether this collection is the owner (enable==true) of its content. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual bool UseRWLock (Bool_t enable=true);  Set this collection to use a RW lock upon access, making it thread safe. ;  ; Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const override;  Write all objects in this collection. ;  ; Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) override;  Write all objects in this collection. ;  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () co",MatchSource.WIKI,doc/master/classTListOfTypes.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTListOfTypes.html
Security,hash,hash,". ROOT: TListOfTypes Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; List of all members ; TListOfTypes Class ReferenceCore ROOT classes » Base ROOT classes. ; A collection of TDataType designed to hold the typedef information and numerical type information. ; The collection is populated on demand.; Besides the built-in types (int, float) a typedef is explicitly added to the collection (and thus visible via ls or Print) only if it is requested explicitly. ; Definition at line 30 of file TListOfTypes.h. Public Member Functions;  TListOfTypes ();  ; TObject * FindObject (const char *name) const override;  Find object using its name. ;  ; TObject * FindObject (const char *name) const override;  Find object using its name. ;  ; TObject * FindObject (const TObject *obj) const override;  Find object using its hash value (returned by its Hash() member). ;  ; TDataType * FindType (const char *name) const;  ;  Public Member Functions inherited from THashTable;  THashTable (Int_t capacity=TCollection::kInitHashTableCapacity, Int_t rehash=0);  Create a THashTable object. ;  ; virtual ~THashTable ();  Delete a hashtable. ;  ; void Add (TObject *obj) override;  Add object to the hash table. ;  ; void AddAll (const TCollection *col) override;  Add all objects from collection col to this collection. ;  ; void AddBefore (const TObject *before, TObject *obj);  Add object to the hash table. ;  ; Float_t AverageCollisions () const;  ; void Clear (Option_t *option="""") override;  Remove all objects from the table. ;  ; Int_t Collisions (const char *name) const;  Returns the number of collisions for an object with a certain name (i.e. ;  ; Int_t Collisions (TObject *obj) const;  Returns the number of collisions for an object (i.e. ;  ; void Delete (Option_t *option="""") override;  Remove all objects from the table AND delete all heap based objects. ;  ; Bool_t Empty () const;  ; const TList ",MatchSource.WIKI,doc/master/classTListOfTypes.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTListOfTypes.html
Availability,error,error,"object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Return",MatchSource.WIKI,doc/master/classTLockFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTLockFile.html
Deployability,release,released,". ROOT: TLockFile Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; Private Member Functions |; List of all members ; TLockFile Class ReferenceInput/Output Library. ; A scoped lock based on files. ; The RAAI idiom is used: the constructor blocks until lock is obtained. Lock is released in the destructor. Use it in scope-blocks like: {; TLockFile lock(""path.to.lock.file"");; // do something you need the lock for; } // lock is automatically released; TLockFileA scoped lock based on files.Definition TLockFile.h:19. Definition at line 19 of file TLockFile.h. Public Member Functions;  TLockFile (const char *path, Int_t timeLimit=0);  Default constructor. ;  ;  ~TLockFile () override;  Destructor. Releases the lock. ;  ; TClass * IsA () const override;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone",MatchSource.WIKI,doc/master/classTLockFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTLockFile.html
Integrability,message,message,"object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Return",MatchSource.WIKI,doc/master/classTLockFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTLockFile.html
Modifiability,inherit,inherited,"rching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; Private Member Functions |; List of all members ; TLockFile Class ReferenceInput/Output Library. ; A scoped lock based on files. ; The RAAI idiom is used: the constructor blocks until lock is obtained. Lock is released in the destructor. Use it in scope-blocks like: {; TLockFile lock(""path.to.lock.file"");; // do something you need the lock for; } // lock is automatically released; TLockFileA scoped lock based on files.Definition TLockFile.h:19. Definition at line 19 of file TLockFile.h. Public Member Functions;  TLockFile (const char *path, Int_t timeLimit=0);  Default constructor. ;  ;  ~TLockFile () override;  Destructor. Releases the lock. ;  ; TClass * IsA () const override;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) c",MatchSource.WIKI,doc/master/classTLockFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTLockFile.html
Security,hash,hash," Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Returns name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual const char * GetTitle () const;  Returns title of object. ;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; virtual ULong_t Hash () const;  Return hash value for this object. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns kTRUE if object inherits from class ""classname"". ;  ; virtual Bool_t InheritsFrom (const TClass *cl) const;  Returns kTRUE if object inherits from TClass cl. ;  ; virtual void Inspect () const;  Dump contents of this object in a graphics canvas. ;  ; void InvertBit (UInt_t f);  ; Bool_t IsDestructed () const;  IsDestructed. ;  ; virtual Bool_t IsEqual (const TObject *obj) const;  Default equal comparison (objects are equal if they have the same address in memory). ;  ; virtual Bool_t IsFolder () const;  Returns kTRUE in case object contains browsable objects (like containers or lists of other objects). ;  ; R__ALWAYS_INLINE Bool_t",MatchSource.WIKI,doc/master/classTLockFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTLockFile.html
Availability,error,error,"object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t ",MatchSource.WIKI,doc/master/classTLockPath.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTLockPath.html
Integrability,message,message,"object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t ",MatchSource.WIKI,doc/master/classTLockPath.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTLockPath.html
Modifiability,inherit,inherited,". ROOT: TLockPath Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Private Attributes |; List of all members ; TLockPath Class ReferencePROOF » PROOF kernel Libraries. ; Path locking class allowing shared and exclusive locks. ; Definition at line 26 of file TLockPath.h. Public Member Functions;  TLockPath (const char *path="""");  Locks the directory. ;  ;  ~TLockPath () override;  ; const char * GetName () const override;  Returns name of object. ;  ; TClass * IsA () const override;  ; Bool_t IsLocked () const;  ; Int_t Lock (Bool_t shared=kFALSE);  ; void SetName (const char *path);  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; Int_t Unlock ();  Unlock the directory. ;  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  C",MatchSource.WIKI,doc/master/classTLockPath.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTLockPath.html
Security,hash,hash,"xecute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual const char * GetTitle () const;  Returns title of object. ;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; virtual ULong_t Hash () const;  Return hash value for this object. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns kTRUE if object inherits from class ""classname"". ;  ; virtual Bool_t InheritsFrom (const TClass *cl) const;  Returns kTRUE if object inherits from TClass cl. ;  ; virtual void Inspect () const;  Dump contents of this object in a graphics canvas. ;  ; void InvertBit (UInt_t f);  ; Bool_t IsDestructed () const;  IsDestructed. ;  ; virtual Bool_t IsEqual (const TObject *obj) const;  Default equal comparison (objects are equal if they have the same address in memory). ;  ; virtual Bool_t IsFolder () const;  Returns kTRUE in case object contains browsable objects (like containers or lists of other objects). ;  ; R__ALWAYS_INLINE Bool_t",MatchSource.WIKI,doc/master/classTLockPath.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTLockPath.html
Availability,error,error,"object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Return",MatchSource.WIKI,doc/master/classTLorentzRotation.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTLorentzRotation.html
Integrability,interface,interface,". ROOT: TLorentzRotation Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Classes |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; List of all members ; TLorentzRotation Class ReferenceMath » Legacy Physics Classes. ; Legacy Code TLorentzRotation is a legacy interface: there will be no bug fixes nor new developments. Therefore it is not recommended to use it in new long-term production code. But, depending on the context, using TLorentzRotation might still be a valid solution. Consider using instead ROOT::Math::LorentzRotation.; The TLorentzRotation class describes Lorentz transformations including Lorentz boosts and rotations (see TRotation) ; | xx xy xz xt |; | |; | yx yy yz yt |; lambda = | |; | zx zy zz zt |; | |; | tx ty tz tt |; xyOption_t Option_t TPoint xyDefinition TGWin32VirtualXProxy.cxx:62; ttauto * ttDefinition textangle.C:16. Declaration; By default it is initialized to the identity matrix, but it may also be initialized by an other TLorentzRotation, by a pure TRotation or by a boost:; TLorentzRotation l; // l is initialized as identity TLorentzRotation m(l); // m = l TRotation r; TLorentzRotation lr(r); TLorentzRotation lb1(bx,by,bz); TVector3 b; TLorentzRotation lb2(b);; The Matrix for a Lorentz boosts is:; | 1+gamma'*bx*bx gamma'*bx*by gamma'*bx*bz gamma*bx |; | gamma'*by*bx 1+gamma'*by*by gamma'*by*bz gamma*by |; | gamma'*bz*bx gamma'*bz*by 1+gamma'*bz*bz gamma*bz |; | gamma*bx gamma*by gamma*bz gamma |; with the boost vector b=(bx,by,bz) and gamma=1/Sqrt(1-beta*beta) and gamma'=(gamma-1)/beta*beta. . Access to the matrix components/Comparisons; Access to the matrix components is possible through the member functions XX(), XY() .. TT(), through the operator (int,int):; Double_t xx;; TLorentzRotation l;; xx = l.XX(); // gets the xx component; xx = l(0,0); // gets the xx component; ; if (l==m) {...} // test for e",MatchSource.WIKI,doc/master/classTLorentzRotation.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTLorentzRotation.html
Modifiability,inherit,inherited,"tor* (const TLorentzVector &) const;  ; TLorentzRotation & operator*= (const TLorentzRotation &);  ; TLorentzRotation & operator= (const TLorentzRotation &);  ; TLorentzRotation & operator= (const TRotation &);  ; Bool_t operator== (const TLorentzRotation &) const;  ; TLorentzRotationRow operator[] (int) const;  ; TLorentzRotation & Rotate (Double_t, const TVector3 &);  ; TLorentzRotation & Rotate (Double_t, const TVector3 *);  ; TLorentzRotation & RotateX (Double_t);  ; TLorentzRotation & RotateY (Double_t);  ; TLorentzRotation & RotateZ (Double_t);  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; TLorentzRotation & Transform (const TLorentzRotation &);  ; TLorentzRotation & Transform (const TRotation &);  ; Double_t TT () const;  ; Double_t TX () const;  ; Double_t TY () const;  ; Double_t TZ () const;  ; TLorentzVector VectorMultiplication (const TLorentzVector &) const;  ; Double_t XT () const;  ; Double_t XX () const;  ; Double_t XY () const;  ; Double_t XZ () const;  ; Double_t YT () const;  ; Double_t YX () const;  ; Double_t YY () const;  ; Double_t YZ () const;  ; Double_t ZT () const;  ; Double_t ZX () const;  ; Double_t ZY () const;  ; Double_t ZZ () const;  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtua",MatchSource.WIKI,doc/master/classTLorentzRotation.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTLorentzRotation.html
Security,hash,hash," Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Returns name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual const char * GetTitle () const;  Returns title of object. ;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; virtual ULong_t Hash () const;  Return hash value for this object. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns kTRUE if object inherits from class ""classname"". ;  ; virtual Bool_t InheritsFrom (const TClass *cl) const;  Returns kTRUE if object inherits from TClass cl. ;  ; virtual void Inspect () const;  Dump contents of this object in a graphics canvas. ;  ; void InvertBit (UInt_t f);  ; Bool_t IsDestructed () const;  IsDestructed. ;  ; virtual Bool_t IsEqual (const TObject *obj) const;  Default equal comparison (objects are equal if they have the same address in memory). ;  ; virtual Bool_t IsFolder () const;  Returns kTRUE in case object contains browsable objects (like containers or lists of other objects). ;  ; R__ALWAYS_INLINE Bool_t",MatchSource.WIKI,doc/master/classTLorentzRotation.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTLorentzRotation.html
Testability,test,test,"; By default it is initialized to the identity matrix, but it may also be initialized by an other TLorentzRotation, by a pure TRotation or by a boost:; TLorentzRotation l; // l is initialized as identity TLorentzRotation m(l); // m = l TRotation r; TLorentzRotation lr(r); TLorentzRotation lb1(bx,by,bz); TVector3 b; TLorentzRotation lb2(b);; The Matrix for a Lorentz boosts is:; | 1+gamma'*bx*bx gamma'*bx*by gamma'*bx*bz gamma*bx |; | gamma'*by*bx 1+gamma'*by*by gamma'*by*bz gamma*by |; | gamma'*bz*bx gamma'*bz*by 1+gamma'*bz*bz gamma*bz |; | gamma*bx gamma*by gamma*bz gamma |; with the boost vector b=(bx,by,bz) and gamma=1/Sqrt(1-beta*beta) and gamma'=(gamma-1)/beta*beta. . Access to the matrix components/Comparisons; Access to the matrix components is possible through the member functions XX(), XY() .. TT(), through the operator (int,int):; Double_t xx;; TLorentzRotation l;; xx = l.XX(); // gets the xx component; xx = l(0,0); // gets the xx component; ; if (l==m) {...} // test for equality; if (l !=m) {...} // test for inequality; if (l.IsIdentity()) {...} // test for identity; TLorentzRotation<div class=""legacybox""><h2>Legacy Code</h2> TLorentzRotation is a legacy interface: there will be no ...Definition TLorentzRotation.h:20; double; mTMarker mDefinition textangle.C:8; lTLine lDefinition textangle.C:4. Transformations of a LorentzRotation; Compound transformations; There are four possibilities to find the product of two TLorentzRotation transformations:; TLorentzRotation a,b,c;; c = b*a;// product; c = a.MatrixMultiplication(b); // a is unchanged; a *= b;// Attention: a=a*b; c = a.Transform(b)// a=b*a then c=a; b#define b(i)Definition RSha256.hxx:100; c#define c(i)Definition RSha256.hxx:101; a#define a(i)Definition RSha256.hxx:99; TLorentzRotation::MatrixMultiplicationTLorentzRotation MatrixMultiplication(const TLorentzRotation &) constDefinition TLorentzRotation.cxx:222; TLorentzRotation::TransformTLorentzRotation & Transform(const TLorentzRotation &)Definition T",MatchSource.WIKI,doc/master/classTLorentzRotation.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTLorentzRotation.html
Availability,error,error,"object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Return",MatchSource.WIKI,doc/master/classTLorentzVector.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTLorentzVector.html
Energy Efficiency,energy,energy,". ROOT: TLorentzVector Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Static Public Member Functions |; Private Attributes |; List of all members ; TLorentzVector Class ReferenceMath » Legacy Physics Classes. ; AttentionTLorentzVector is a legacy class. It is slower and worse for serialization than the recommended superior alternative ROOT::Math::LorentzVector. ROOT provides specialisations of the ROOT::Math::LorentzVector template which offer superior runtime performance, i.e.:; ROOT::Math::PtEtaPhiMVector based on pt (rho),eta,phi and M (t) coordinates in double precision; ROOT::Math::PtEtaPhiEVector based on pt (rho),eta,phi and E (t) coordinates in double precision; ROOT::Math::PxPyPzMVector based on px,py,pz and M (mass) coordinates in double precision; ROOT::Math::PxPyPzEVector based on px,py,pz and E (energy) coordinates in double precision; ROOT::Math::XYZTVector based on x,y,z,t coordinates (cartesian) in double precision (same as PxPyPzEVector); ROOT::Math::XYZTVectorF based on x,y,z,t coordinates (cartesian) in float precision (same as PxPyPzEVector but float). More details can be found in the documentation of the Physics Vectors package. . Description; TLorentzVector is a general four-vector class, which can be used either for the description of position and time (x,y,z,t) or momentum and energy (px,py,pz,E). Declaration; TLorentzVector has been implemented as a set a TVector3 and a Double_t variable. By default all components are initialized by zero.; TLorentzVector v1; // initialized by (0., 0., 0., 0.); TLorentzVector v2(1., 1., 1., 1.);; TLorentzVector v3(v1);; TLorentzVector v4(TVector3(1., 2., 3.),4.);; TLorentzVectorDefinition TLorentzVector.h:31; TVector3Definition TVector3.h:22; v2@ v2Definition rootcling_impl.cxx:3702; v4@ v4Definition rootcling_impl.cxx:3704; v3@ v3Definition rootcling_impl.cxx:3703; v1@ v1Definition rootcling_im",MatchSource.WIKI,doc/master/classTLorentzVector.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTLorentzVector.html
Integrability,interface,interface,"oost transformation from the rod frame to the original frame. BoostVector() returns a TVector3 of the spatial components divided by the time component:; TVector3 b;; v.Boost(bx,by,bz);; v.Boost(b);; b = v.BoostVector(); // b=(x/t,y/t,z/t). Rotations; There are four sets of functions to rotate the TVector3 component of a TLorentzVector:; rotation around axes; v.RotateX(TMath::Pi()/2.);; v.RotateY(.5);; v.RotateZ(.99);; rotation around an arbitrary axis; v.Rotate(TMath::Pi()/4., v1); // rotation around v1; transformation from rotated frame; v.RotateUz(direction); // direction must be a unit TVector3; by TRotation (see TRotation); TRotation r;; v.Transform(r); or v *= r; // Attention v=M*v; rOption_t Option_t TPoint TPoint const char GetTextMagnitude GetFillStyle GetLineColor GetLineWidth GetMarkerStyle GetTextAlign GetTextColor GetTextSize void char Point_t Rectangle_t WindowAttributes_t Float_t rDefinition TGWin32VirtualXProxy.cxx:168; TRotation<div class=""legacybox""><h2>Legacy Code</h2> TRotation is a legacy interface: there will be no bug fix...Definition TRotation.h:20. Misc; Angle between two vectors; Double_t a = v1.Angle(v2.Vect()); // get angle between v1 and v2; a#define a(i)Definition RSha256.hxx:99; Light-cone components; Member functions Plus() and Minus() return the positive and negative light-cone components:; Double_t pcone = v.Plus();; Double_t mcone = v.Minus();; CAVEAT: The values returned are T{+,-}Z. It is known that some authors find it easier to define these components as (T{+,-}Z)/sqrt(2). Thus check what definition is used in the physics you're working in and adapt your code accordingly.; Transformation by TLorentzRotation; A general Lorentz transformation see class TLorentzRotation can be used by the Transform() member function, the *= or operator of the TLorentzRotation class:; TLorentzRotation l;; v.Transform(l);; v = l*v; or v *= l; // Attention v = l*v; TLorentzRotation<div class=""legacybox""><h2>Legacy Code</h2> TLorentzRotation is a legac",MatchSource.WIKI,doc/master/classTLorentzVector.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTLorentzVector.html
Modifiability,variab,variable,"ions of the ROOT::Math::LorentzVector template which offer superior runtime performance, i.e.:; ROOT::Math::PtEtaPhiMVector based on pt (rho),eta,phi and M (t) coordinates in double precision; ROOT::Math::PtEtaPhiEVector based on pt (rho),eta,phi and E (t) coordinates in double precision; ROOT::Math::PxPyPzMVector based on px,py,pz and M (mass) coordinates in double precision; ROOT::Math::PxPyPzEVector based on px,py,pz and E (energy) coordinates in double precision; ROOT::Math::XYZTVector based on x,y,z,t coordinates (cartesian) in double precision (same as PxPyPzEVector); ROOT::Math::XYZTVectorF based on x,y,z,t coordinates (cartesian) in float precision (same as PxPyPzEVector but float). More details can be found in the documentation of the Physics Vectors package. . Description; TLorentzVector is a general four-vector class, which can be used either for the description of position and time (x,y,z,t) or momentum and energy (px,py,pz,E). Declaration; TLorentzVector has been implemented as a set a TVector3 and a Double_t variable. By default all components are initialized by zero.; TLorentzVector v1; // initialized by (0., 0., 0., 0.); TLorentzVector v2(1., 1., 1., 1.);; TLorentzVector v3(v1);; TLorentzVector v4(TVector3(1., 2., 3.),4.);; TLorentzVectorDefinition TLorentzVector.h:31; TVector3Definition TVector3.h:22; v2@ v2Definition rootcling_impl.cxx:3702; v4@ v4Definition rootcling_impl.cxx:3704; v3@ v3Definition rootcling_impl.cxx:3703; v1@ v1Definition rootcling_impl.cxx:3701; For backward compatibility there are two constructors from an Double_t and Float_t C array. Access to the components; There are two sets of access functions to the components of a LorentzVector: X(), Y(), Z(), T() and Px(), Py(), Pz() and E(). Both sets return the same values but the first set is more relevant for use where TLorentzVector describes a combination of position and time and the second set is more relevant where TLorentzVector describes momentum and energy:; Double_t xx =v.X(",MatchSource.WIKI,doc/master/classTLorentzVector.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTLorentzVector.html
Performance,perform,performance,". ROOT: TLorentzVector Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Static Public Member Functions |; Private Attributes |; List of all members ; TLorentzVector Class ReferenceMath » Legacy Physics Classes. ; AttentionTLorentzVector is a legacy class. It is slower and worse for serialization than the recommended superior alternative ROOT::Math::LorentzVector. ROOT provides specialisations of the ROOT::Math::LorentzVector template which offer superior runtime performance, i.e.:; ROOT::Math::PtEtaPhiMVector based on pt (rho),eta,phi and M (t) coordinates in double precision; ROOT::Math::PtEtaPhiEVector based on pt (rho),eta,phi and E (t) coordinates in double precision; ROOT::Math::PxPyPzMVector based on px,py,pz and M (mass) coordinates in double precision; ROOT::Math::PxPyPzEVector based on px,py,pz and E (energy) coordinates in double precision; ROOT::Math::XYZTVector based on x,y,z,t coordinates (cartesian) in double precision (same as PxPyPzEVector); ROOT::Math::XYZTVectorF based on x,y,z,t coordinates (cartesian) in float precision (same as PxPyPzEVector but float). More details can be found in the documentation of the Physics Vectors package. . Description; TLorentzVector is a general four-vector class, which can be used either for the description of position and time (x,y,z,t) or momentum and energy (px,py,pz,E). Declaration; TLorentzVector has been implemented as a set a TVector3 and a Double_t variable. By default all components are initialized by zero.; TLorentzVector v1; // initialized by (0., 0., 0., 0.); TLorentzVector v2(1., 1., 1., 1.);; TLorentzVector v3(v1);; TLorentzVector v4(TVector3(1., 2., 3.),4.);; TLorentzVectorDefinition TLorentzVector.h:31; TVector3Definition TVector3.h:22; v2@ v2Definition rootcling_impl.cxx:3702; v4@ v4Definition rootcling_impl.cxx:3704; v3@ v3Definition rootcling_impl.cxx:3703; v1@ v1Definition rootcling_im",MatchSource.WIKI,doc/master/classTLorentzVector.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTLorentzVector.html
Security,access,access,"xPyPzEVector but float). More details can be found in the documentation of the Physics Vectors package. . Description; TLorentzVector is a general four-vector class, which can be used either for the description of position and time (x,y,z,t) or momentum and energy (px,py,pz,E). Declaration; TLorentzVector has been implemented as a set a TVector3 and a Double_t variable. By default all components are initialized by zero.; TLorentzVector v1; // initialized by (0., 0., 0., 0.); TLorentzVector v2(1., 1., 1., 1.);; TLorentzVector v3(v1);; TLorentzVector v4(TVector3(1., 2., 3.),4.);; TLorentzVectorDefinition TLorentzVector.h:31; TVector3Definition TVector3.h:22; v2@ v2Definition rootcling_impl.cxx:3702; v4@ v4Definition rootcling_impl.cxx:3704; v3@ v3Definition rootcling_impl.cxx:3703; v1@ v1Definition rootcling_impl.cxx:3701; For backward compatibility there are two constructors from an Double_t and Float_t C array. Access to the components; There are two sets of access functions to the components of a LorentzVector: X(), Y(), Z(), T() and Px(), Py(), Pz() and E(). Both sets return the same values but the first set is more relevant for use where TLorentzVector describes a combination of position and time and the second set is more relevant where TLorentzVector describes momentum and energy:; Double_t xx =v.X();; ...; Double_t tt = v.T();; ; Double_t px = v.Px();; ...; Double_t ee = v.E();; double; v@ vDefinition rootcling_impl.cxx:3699; ttauto * ttDefinition textangle.C:16; The components of TLorentzVector can also accessed by index:; xx = v(0); or xx = v[0];; yy = v(1); yy = v[1];; zz = v(2); zz = v[2];; tt = v(3); tt = v[3];; You can use the Vect() member function to get the vector component of TLorentzVector:; TVector3 p = v.Vect();; pwinID h TVirtualViewer3D TVirtualGLPainter pDefinition TGWin32VirtualGLProxy.cxx:51; For setting components also two sets of member functions can be used:; v.SetX(1.); or v.SetPx(1.);; ... ...; v.SetT(1.); v.SetE(1.);; To set more the on",MatchSource.WIKI,doc/master/classTLorentzVector.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTLorentzVector.html
Availability,error,error,"ist of system timers. ;  ; int AnnounceTcpService (int port, Bool_t reuse, int backlog, int tcpwindowsize=-1) override;  Announce TCP/IP service. ;  ; int AnnounceUdpService (int port, int backlog) override;  Announce UDP service. ;  ; int AnnounceUnixService (const char *sockpath, int backlog) override;  Announce unix domain service on path 'sockpath'. ;  ; int AnnounceUnixService (int port, int backlog) override;  Announce unix domain service on path ""kServerPath/<port>"". ;  ; Bool_t ChangeDirectory (const char *path) override;  Change directory. Returns kTRUE in case of success, kFALSE otherwise. ;  ; void CheckChilds ();  Check if children have finished. ;  ; Bool_t CheckDescriptors ();  Check if there is activity on some file descriptors and call their Notify() member. ;  ; Bool_t CheckSignals (Bool_t sync);  Check if some signals were raised and call their Notify() member. ;  ; int Chmod (const char *file, UInt_t mode) override;  Set the file permission bits. Returns -1 in case or error, 0 otherwise. ;  ; void CloseConnection (int sock, Bool_t force=kFALSE) override;  Close socket. ;  ; void Closelog () override;  Close connection to system log daemon. ;  ; int ClosePipe (FILE *pipe) override;  Close the pipe. ;  ; int ConnectService (const char *server, int port, int tcpwindowsize, const char *protocol=""tcp"");  Connect to service servicename on server servername. ;  ; int CopyFile (const char *from, const char *to, Bool_t overwrite=kFALSE) override;  Copy a file. ;  ; void DispatchOneEvent (Bool_t pendingOnly=kFALSE) override;  Dispatch a single event. ;  ; void DispatchSignals (ESignals sig);  Handle and dispatch signals. ;  ; Bool_t DispatchTimers (Bool_t mode);  Handle and dispatch timers. ;  ; Func_t DynFindSymbol (const char *module, const char *entry) override;  dynamic linking of module ;  ; Int_t Exec (const char *shellcmd) override;  Execute a command. ;  ; void Exit (int code, Bool_t mode=kTRUE) override;  Exit the application. ;  ; char * ExpandPat",MatchSource.WIKI,doc/master/classTMacOSXSystem.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMacOSXSystem.html
Integrability,protocol,protocol,"ce unix domain service on path 'sockpath'. ;  ; int AnnounceUnixService (int port, int backlog) override;  Announce unix domain service on path ""kServerPath/<port>"". ;  ; Bool_t ChangeDirectory (const char *path) override;  Change directory. Returns kTRUE in case of success, kFALSE otherwise. ;  ; void CheckChilds ();  Check if children have finished. ;  ; Bool_t CheckDescriptors ();  Check if there is activity on some file descriptors and call their Notify() member. ;  ; Bool_t CheckSignals (Bool_t sync);  Check if some signals were raised and call their Notify() member. ;  ; int Chmod (const char *file, UInt_t mode) override;  Set the file permission bits. Returns -1 in case or error, 0 otherwise. ;  ; void CloseConnection (int sock, Bool_t force=kFALSE) override;  Close socket. ;  ; void Closelog () override;  Close connection to system log daemon. ;  ; int ClosePipe (FILE *pipe) override;  Close the pipe. ;  ; int ConnectService (const char *server, int port, int tcpwindowsize, const char *protocol=""tcp"");  Connect to service servicename on server servername. ;  ; int CopyFile (const char *from, const char *to, Bool_t overwrite=kFALSE) override;  Copy a file. ;  ; void DispatchOneEvent (Bool_t pendingOnly=kFALSE) override;  Dispatch a single event. ;  ; void DispatchSignals (ESignals sig);  Handle and dispatch signals. ;  ; Bool_t DispatchTimers (Bool_t mode);  Handle and dispatch timers. ;  ; Func_t DynFindSymbol (const char *module, const char *entry) override;  dynamic linking of module ;  ; Int_t Exec (const char *shellcmd) override;  Execute a command. ;  ; void Exit (int code, Bool_t mode=kTRUE) override;  Exit the application. ;  ; char * ExpandPathName (const char *path) override;  Expand a pathname getting rid of special shell characaters like ~. ;  ; Bool_t ExpandPathName (TString &patbuf) override;  Expand a pathname getting rid of special shell characters like ~. ;  ; const char * FindDynamicLibrary (TString &lib, Bool_t quiet=kFALSE) override;  Retur",MatchSource.WIKI,doc/master/classTMacOSXSystem.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMacOSXSystem.html
Modifiability,inherit,inherited,". ROOT: TMacOSXSystem Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Private Member Functions |; Private Attributes |; Friends |; List of all members ; TMacOSXSystem Class Reference. . Definition at line 39 of file TMacOSXSystem.h. Public Member Functions;  TMacOSXSystem ();  ;  ~TMacOSXSystem ();  ; bool CocoaInitialized () const;  ; void DispatchOneEvent (Bool_t pendingOnly);  Dispatch a single event. ;  ;  Public Member Functions inherited from TUnixSystem;  TUnixSystem ();  ; virtual ~TUnixSystem ();  Reset to original state. ;  ; void Abort (int code=0) override;  Abort the application. ;  ; int AcceptConnection (int sock) override;  Accept a connection. ;  ; Bool_t AccessPathName (const char *path, EAccessMode mode=kFileExists) override;  Returns FALSE if one can access a file using the specified access mode. ;  ; void AddDynamicPath (const char *lib) override;  Add a new directory to the dynamic path. ;  ; void AddFileHandler (TFileHandler *fh) override;  Add a file handler to the list of system file handlers. ;  ; void AddSignalHandler (TSignalHandler *sh) override;  Add a signal handler to list of system signal handlers. ;  ; void AddTimer (TTimer *ti) override;  Add timer to list of system timers. ;  ; int AnnounceTcpService (int port, Bool_t reuse, int backlog, int tcpwindowsize=-1) override;  Announce TCP/IP service. ;  ; int AnnounceUdpService (int port, int backlog) override;  Announce UDP service. ;  ; int AnnounceUnixService (const char *sockpath, int backlog) override;  Announce unix domain service on path 'sockpath'. ;  ; int AnnounceUnixService (int port, int backlog) override;  Announce unix domain service on path ""kServerPath/<port>"". ;  ; Bool_t ChangeDirectory (const char *path) override;  Change directory. Returns kTRUE in case of success, kFALSE otherwise. ;  ; void CheckChilds ();  Check if children have finished. ;  ; Bool_t CheckDescriptors",MatchSource.WIKI,doc/master/classTMacOSXSystem.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMacOSXSystem.html
Performance,load,load," dispatch timers. ;  ; Func_t DynFindSymbol (const char *module, const char *entry) override;  dynamic linking of module ;  ; Int_t Exec (const char *shellcmd) override;  Execute a command. ;  ; void Exit (int code, Bool_t mode=kTRUE) override;  Exit the application. ;  ; char * ExpandPathName (const char *path) override;  Expand a pathname getting rid of special shell characaters like ~. ;  ; Bool_t ExpandPathName (TString &patbuf) override;  Expand a pathname getting rid of special shell characters like ~. ;  ; const char * FindDynamicLibrary (TString &lib, Bool_t quiet=kFALSE) override;  Returns the path of a shared library (searches for library in the shared library search path). ;  ; const char * FindFile (const char *search, TString &file, EAccessMode mode=kFileExists) override;  Find location of file ""wfil"" in a search path. ;  ; void FreeDirectory (void *dirp) override;  Close a Unix file system directory. ;  ; int GetCpuInfo (CpuInfo_t *info, Int_t sampleTime=1000) const override;  Returns cpu load average and load info into the CpuInfo_t structure. ;  ; Int_t GetCryptoRandom (void *buf, Int_t len) override;  Return cryptographic random number Fill provided buffer with random values Returns number of bytes written to buffer or -1 in case of error. ;  ; const char * GetDirEntry (void *dirp) override;  Get next Unix file system directory entry. Returns 0 if no more entries. ;  ; const char * GetDynamicPath () override;  Return the dynamic path (used to find shared libraries). ;  ; Int_t GetEffectiveGid () override;  Returns the effective group id. ;  ; Int_t GetEffectiveUid () override;  Returns the effective user id. ;  ; const char * Getenv (const char *name) override;  Get environment variable. ;  ; const char * GetError () override;  Return system error string. ;  ; Int_t GetFPEMask () override;  Return the bitmap of conditions that trigger a floating point exception. ;  ; int GetFsInfo (const char *path, Long_t *id, Long_t *bsize, Long_t *blocks, Long_t *",MatchSource.WIKI,doc/master/classTMacOSXSystem.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMacOSXSystem.html
Safety,timeout,timeout,"name, const char *mode=""a"", RedirectHandle_t *h=nullptr) override;  Redirect standard output (stdout, stderr) to the specified file. ;  ; TFileHandler * RemoveFileHandler (TFileHandler *fh) override;  Remove a file handler from the list of file handlers. ;  ; TSignalHandler * RemoveSignalHandler (TSignalHandler *sh) override;  Remove a signal handler from list of signal handlers. ;  ; TTimer * RemoveTimer (TTimer *ti) override;  Remove timer from list of system timers. ;  ; int Rename (const char *from, const char *to) override;  Rename a file. Returns 0 when successful, -1 in case of failure. ;  ; void ResetSignal (ESignals sig, Bool_t reset=kTRUE) override;  If reset is true reset the signal handler for the specified signal to the default handler, else restore previous behaviour. ;  ; void ResetSignals () override;  Reset signals handlers to previous behaviour. ;  ; void ResetTimer (TTimer *ti) override;  Reset a-sync timer. ;  ; Int_t Select (TFileHandler *fh, Long_t timeout) override;  Select on the file descriptor related to file handler h. ;  ; Int_t Select (TList *active, Long_t timeout) override;  Select on file descriptors. ;  ; int SendBuf (int sock, const void *buffer, int length) override;  Send a buffer headed by a length indicator. ;  ; int SendRaw (int sock, const void *buffer, int length, int flag) override;  Send exactly length bytes from buffer. ;  ; void SetDisplay () override;  Set DISPLAY environment variable based on utmp entry. Only for UNIX. ;  ; void SetDynamicPath (const char *lib) override;  Set the dynamic path to a new value. ;  ; void Setenv (const char *name, const char *value) override;  Set environment variable. ;  ; Int_t SetFPEMask (Int_t mask=kDefaultMask) override;  Set which conditions trigger a floating point exception. ;  ; void SetProgname (const char *name) override;  Set the application name (from command line, argv[0]) and copy it in gProgName. ;  ; int SetSockOpt (int sock, int option, int val) override;  Set socket option",MatchSource.WIKI,doc/master/classTMacOSXSystem.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMacOSXSystem.html
Security,access,access,". ROOT: TMacOSXSystem Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Private Member Functions |; Private Attributes |; Friends |; List of all members ; TMacOSXSystem Class Reference. . Definition at line 39 of file TMacOSXSystem.h. Public Member Functions;  TMacOSXSystem ();  ;  ~TMacOSXSystem ();  ; bool CocoaInitialized () const;  ; void DispatchOneEvent (Bool_t pendingOnly);  Dispatch a single event. ;  ;  Public Member Functions inherited from TUnixSystem;  TUnixSystem ();  ; virtual ~TUnixSystem ();  Reset to original state. ;  ; void Abort (int code=0) override;  Abort the application. ;  ; int AcceptConnection (int sock) override;  Accept a connection. ;  ; Bool_t AccessPathName (const char *path, EAccessMode mode=kFileExists) override;  Returns FALSE if one can access a file using the specified access mode. ;  ; void AddDynamicPath (const char *lib) override;  Add a new directory to the dynamic path. ;  ; void AddFileHandler (TFileHandler *fh) override;  Add a file handler to the list of system file handlers. ;  ; void AddSignalHandler (TSignalHandler *sh) override;  Add a signal handler to list of system signal handlers. ;  ; void AddTimer (TTimer *ti) override;  Add timer to list of system timers. ;  ; int AnnounceTcpService (int port, Bool_t reuse, int backlog, int tcpwindowsize=-1) override;  Announce TCP/IP service. ;  ; int AnnounceUdpService (int port, int backlog) override;  Announce UDP service. ;  ; int AnnounceUnixService (const char *sockpath, int backlog) override;  Announce unix domain service on path 'sockpath'. ;  ; int AnnounceUnixService (int port, int backlog) override;  Announce unix domain service on path ""kServerPath/<port>"". ;  ; Bool_t ChangeDirectory (const char *path) override;  Change directory. Returns kTRUE in case of success, kFALSE otherwise. ;  ; void CheckChilds ();  Check if children have finished. ;  ; Bool_t CheckDescriptors",MatchSource.WIKI,doc/master/classTMacOSXSystem.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMacOSXSystem.html
Testability,log,log,"vice. ;  ; int AnnounceUdpService (int port, int backlog) override;  Announce UDP service. ;  ; int AnnounceUnixService (const char *sockpath, int backlog) override;  Announce unix domain service on path 'sockpath'. ;  ; int AnnounceUnixService (int port, int backlog) override;  Announce unix domain service on path ""kServerPath/<port>"". ;  ; Bool_t ChangeDirectory (const char *path) override;  Change directory. Returns kTRUE in case of success, kFALSE otherwise. ;  ; void CheckChilds ();  Check if children have finished. ;  ; Bool_t CheckDescriptors ();  Check if there is activity on some file descriptors and call their Notify() member. ;  ; Bool_t CheckSignals (Bool_t sync);  Check if some signals were raised and call their Notify() member. ;  ; int Chmod (const char *file, UInt_t mode) override;  Set the file permission bits. Returns -1 in case or error, 0 otherwise. ;  ; void CloseConnection (int sock, Bool_t force=kFALSE) override;  Close socket. ;  ; void Closelog () override;  Close connection to system log daemon. ;  ; int ClosePipe (FILE *pipe) override;  Close the pipe. ;  ; int ConnectService (const char *server, int port, int tcpwindowsize, const char *protocol=""tcp"");  Connect to service servicename on server servername. ;  ; int CopyFile (const char *from, const char *to, Bool_t overwrite=kFALSE) override;  Copy a file. ;  ; void DispatchOneEvent (Bool_t pendingOnly=kFALSE) override;  Dispatch a single event. ;  ; void DispatchSignals (ESignals sig);  Handle and dispatch signals. ;  ; Bool_t DispatchTimers (Bool_t mode);  Handle and dispatch timers. ;  ; Func_t DynFindSymbol (const char *module, const char *entry) override;  dynamic linking of module ;  ; Int_t Exec (const char *shellcmd) override;  Execute a command. ;  ; void Exit (int code, Bool_t mode=kTRUE) override;  Exit the application. ;  ; char * ExpandPathName (const char *path) override;  Expand a pathname getting rid of special shell characaters like ~. ;  ; Bool_t ExpandPathName (TString &",MatchSource.WIKI,doc/master/classTMacOSXSystem.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMacOSXSystem.html
Availability,error,error," TMacro.h:31; TObject::Writevirtual Int_t Write(const char *name=nullptr, Int_t option=0, Int_t bufsize=0)Write this object to the current directory.Definition TObject.cxx:886; mTMarker mDefinition textangle.C:8. Definition at line 31 of file TMacro.h. Public Member Functions;  TMacro ();  Create an empty macro, use AddLine() or ReadFile() to fill this macro. ;  ;  TMacro (const char *name, const char *title="""");  Create a macro with a name and a title. ;  ;  TMacro (const TMacro &);  Copy constructor. ;  ; virtual ~TMacro ();  Delete this macro. ;  ; virtual TObjString * AddLine (const char *text);  Add line with text in the list of lines of this macro. ;  ; void Browse (TBrowser *b) override;  When clicking in the browser, the following action is performed on this macro, depending the content of the variable TMacro.Browse. ;  ; virtual TMD5 * Checksum ();  Returns checksum of the current content. ;  ; virtual Longptr_t Exec (const char *params=nullptr, Int_t *error=nullptr);  Execute this macro with params, if params is 0, default parameters (set via SetParams) are used. ;  ; virtual TObjString * GetLineWith (const char *text) const;  Search the first line containing text. ;  ; TList * GetListOfLines () const;  ; TClass * IsA () const override;  ; virtual Bool_t Load () const;  Load the macro into the interpreter. ;  ; TMacro & operator= (const TMacro &);  Copy constructor. ;  ; void Paint (Option_t *option="""") override;  Execute this macro (called by TPad::Paint). ;  ; void Print (Option_t *option="""") const override;  Print contents of this macro. ;  ; virtual Int_t ReadFile (const char *filename);  Read lines in filename in this macro. ;  ; void SavePrimitive (std::ostream &out, Option_t *option="""") override;  Save macro source on stream out. ;  ; virtual void SaveSource (const char *filename);  Save macro source in filename. ;  ; virtual void SetParams (const char *params=nullptr);  Set default parameters to execute this macro. ;  ; void Streamer (TBuffer &) ov",MatchSource.WIKI,doc/master/classTMacro.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMacro.html
Deployability,update,updated,". ROOT: TMacro Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; List of all members ; TMacro Class ReferenceCore ROOT classes » Base ROOT classes. ; Class supporting a collection of lines with C++ code. ; A TMacro can be executed, saved to a ROOT file, edited, etc.; A macro can be built line by line by calling the AddLine function. or it can be created directly from a file via the special constructor when the first argument is a file name.; A macro can be executed via the Exec function. Arguments can be specified when calling Exec.; A macro can be drawn in a pad. When the pad is updated, the macro is automatically executed.; The code in the macro can be saved via the SaveSource function. If the macro is in the list of primitives of a pad/canvas, the macro will be saved in the script generated by TCanvas::SaveSource.; A macro can be written to a ROOT file via TObject::Write.; Examples: TMacro m(""Peaks.C""); //macro m with name ""Peaks"" is created; //from file Peaks.C; m.Exec(); //macro executed with default arguments; m.Exec(""4""); //macro executed with argument; m.SaveSource(""newPeaks.C"");; TFile f(""mymacros.root"",""recreate"");; m.Write(); //macro saved to file with name ""Peaks""; f#define f(i)Definition RSha256.hxx:104; TFileA ROOT file is an on-disk file, usually with extension .root, that stores objects in a file-system-li...Definition TFile.h:53; TMacroClass supporting a collection of lines with C++ code.Definition TMacro.h:31; TObject::Writevirtual Int_t Write(const char *name=nullptr, Int_t option=0, Int_t bufsize=0)Write this object to the current directory.Definition TObject.cxx:886; mTMarker mDefinition textangle.C:8. Definition at line 31 of file TMacro.h. Public Member Functions;  TMacro ();  Create an empty macro, use AddLine() or ReadFile() to fill this macro. ;  ;  TMacro (c",MatchSource.WIKI,doc/master/classTMacro.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMacro.html
Integrability,depend,depending,"ame ""Peaks""; f#define f(i)Definition RSha256.hxx:104; TFileA ROOT file is an on-disk file, usually with extension .root, that stores objects in a file-system-li...Definition TFile.h:53; TMacroClass supporting a collection of lines with C++ code.Definition TMacro.h:31; TObject::Writevirtual Int_t Write(const char *name=nullptr, Int_t option=0, Int_t bufsize=0)Write this object to the current directory.Definition TObject.cxx:886; mTMarker mDefinition textangle.C:8. Definition at line 31 of file TMacro.h. Public Member Functions;  TMacro ();  Create an empty macro, use AddLine() or ReadFile() to fill this macro. ;  ;  TMacro (const char *name, const char *title="""");  Create a macro with a name and a title. ;  ;  TMacro (const TMacro &);  Copy constructor. ;  ; virtual ~TMacro ();  Delete this macro. ;  ; virtual TObjString * AddLine (const char *text);  Add line with text in the list of lines of this macro. ;  ; void Browse (TBrowser *b) override;  When clicking in the browser, the following action is performed on this macro, depending the content of the variable TMacro.Browse. ;  ; virtual TMD5 * Checksum ();  Returns checksum of the current content. ;  ; virtual Longptr_t Exec (const char *params=nullptr, Int_t *error=nullptr);  Execute this macro with params, if params is 0, default parameters (set via SetParams) are used. ;  ; virtual TObjString * GetLineWith (const char *text) const;  Search the first line containing text. ;  ; TList * GetListOfLines () const;  ; TClass * IsA () const override;  ; virtual Bool_t Load () const;  Load the macro into the interpreter. ;  ; TMacro & operator= (const TMacro &);  Copy constructor. ;  ; void Paint (Option_t *option="""") override;  Execute this macro (called by TPad::Paint). ;  ; void Print (Option_t *option="""") const override;  Print contents of this macro. ;  ; virtual Int_t ReadFile (const char *filename);  Read lines in filename in this macro. ;  ; void SavePrimitive (std::ostream &out, Option_t *option="""") override;  Sa",MatchSource.WIKI,doc/master/classTMacro.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMacro.html
Modifiability,variab,variable,"ame ""Peaks""; f#define f(i)Definition RSha256.hxx:104; TFileA ROOT file is an on-disk file, usually with extension .root, that stores objects in a file-system-li...Definition TFile.h:53; TMacroClass supporting a collection of lines with C++ code.Definition TMacro.h:31; TObject::Writevirtual Int_t Write(const char *name=nullptr, Int_t option=0, Int_t bufsize=0)Write this object to the current directory.Definition TObject.cxx:886; mTMarker mDefinition textangle.C:8. Definition at line 31 of file TMacro.h. Public Member Functions;  TMacro ();  Create an empty macro, use AddLine() or ReadFile() to fill this macro. ;  ;  TMacro (const char *name, const char *title="""");  Create a macro with a name and a title. ;  ;  TMacro (const TMacro &);  Copy constructor. ;  ; virtual ~TMacro ();  Delete this macro. ;  ; virtual TObjString * AddLine (const char *text);  Add line with text in the list of lines of this macro. ;  ; void Browse (TBrowser *b) override;  When clicking in the browser, the following action is performed on this macro, depending the content of the variable TMacro.Browse. ;  ; virtual TMD5 * Checksum ();  Returns checksum of the current content. ;  ; virtual Longptr_t Exec (const char *params=nullptr, Int_t *error=nullptr);  Execute this macro with params, if params is 0, default parameters (set via SetParams) are used. ;  ; virtual TObjString * GetLineWith (const char *text) const;  Search the first line containing text. ;  ; TList * GetListOfLines () const;  ; TClass * IsA () const override;  ; virtual Bool_t Load () const;  Load the macro into the interpreter. ;  ; TMacro & operator= (const TMacro &);  Copy constructor. ;  ; void Paint (Option_t *option="""") override;  Execute this macro (called by TPad::Paint). ;  ; void Print (Option_t *option="""") const override;  Print contents of this macro. ;  ; virtual Int_t ReadFile (const char *filename);  Read lines in filename in this macro. ;  ; void SavePrimitive (std::ostream &out, Option_t *option="""") override;  Sa",MatchSource.WIKI,doc/master/classTMacro.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMacro.html
Performance,perform,performed,"ame ""Peaks""; f#define f(i)Definition RSha256.hxx:104; TFileA ROOT file is an on-disk file, usually with extension .root, that stores objects in a file-system-li...Definition TFile.h:53; TMacroClass supporting a collection of lines with C++ code.Definition TMacro.h:31; TObject::Writevirtual Int_t Write(const char *name=nullptr, Int_t option=0, Int_t bufsize=0)Write this object to the current directory.Definition TObject.cxx:886; mTMarker mDefinition textangle.C:8. Definition at line 31 of file TMacro.h. Public Member Functions;  TMacro ();  Create an empty macro, use AddLine() or ReadFile() to fill this macro. ;  ;  TMacro (const char *name, const char *title="""");  Create a macro with a name and a title. ;  ;  TMacro (const TMacro &);  Copy constructor. ;  ; virtual ~TMacro ();  Delete this macro. ;  ; virtual TObjString * AddLine (const char *text);  Add line with text in the list of lines of this macro. ;  ; void Browse (TBrowser *b) override;  When clicking in the browser, the following action is performed on this macro, depending the content of the variable TMacro.Browse. ;  ; virtual TMD5 * Checksum ();  Returns checksum of the current content. ;  ; virtual Longptr_t Exec (const char *params=nullptr, Int_t *error=nullptr);  Execute this macro with params, if params is 0, default parameters (set via SetParams) are used. ;  ; virtual TObjString * GetLineWith (const char *text) const;  Search the first line containing text. ;  ; TList * GetListOfLines () const;  ; TClass * IsA () const override;  ; virtual Bool_t Load () const;  Load the macro into the interpreter. ;  ; TMacro & operator= (const TMacro &);  Copy constructor. ;  ; void Paint (Option_t *option="""") override;  Execute this macro (called by TPad::Paint). ;  ; void Print (Option_t *option="""") const override;  Print contents of this macro. ;  ; virtual Int_t ReadFile (const char *filename);  Read lines in filename in this macro. ;  ; void SavePrimitive (std::ostream &out, Option_t *option="""") override;  Sa",MatchSource.WIKI,doc/master/classTMacro.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMacro.html
Security,checksum,checksum,"ores objects in a file-system-li...Definition TFile.h:53; TMacroClass supporting a collection of lines with C++ code.Definition TMacro.h:31; TObject::Writevirtual Int_t Write(const char *name=nullptr, Int_t option=0, Int_t bufsize=0)Write this object to the current directory.Definition TObject.cxx:886; mTMarker mDefinition textangle.C:8. Definition at line 31 of file TMacro.h. Public Member Functions;  TMacro ();  Create an empty macro, use AddLine() or ReadFile() to fill this macro. ;  ;  TMacro (const char *name, const char *title="""");  Create a macro with a name and a title. ;  ;  TMacro (const TMacro &);  Copy constructor. ;  ; virtual ~TMacro ();  Delete this macro. ;  ; virtual TObjString * AddLine (const char *text);  Add line with text in the list of lines of this macro. ;  ; void Browse (TBrowser *b) override;  When clicking in the browser, the following action is performed on this macro, depending the content of the variable TMacro.Browse. ;  ; virtual TMD5 * Checksum ();  Returns checksum of the current content. ;  ; virtual Longptr_t Exec (const char *params=nullptr, Int_t *error=nullptr);  Execute this macro with params, if params is 0, default parameters (set via SetParams) are used. ;  ; virtual TObjString * GetLineWith (const char *text) const;  Search the first line containing text. ;  ; TList * GetListOfLines () const;  ; TClass * IsA () const override;  ; virtual Bool_t Load () const;  Load the macro into the interpreter. ;  ; TMacro & operator= (const TMacro &);  Copy constructor. ;  ; void Paint (Option_t *option="""") override;  Execute this macro (called by TPad::Paint). ;  ; void Print (Option_t *option="""") const override;  Print contents of this macro. ;  ; virtual Int_t ReadFile (const char *filename);  Read lines in filename in this macro. ;  ; void SavePrimitive (std::ostream &out, Option_t *option="""") override;  Save macro source on stream out. ;  ; virtual void SaveSource (const char *filename);  Save macro source in filename. ;  ; virtual",MatchSource.WIKI,doc/master/classTMacro.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMacro.html
Testability,log,log,"o.Browse. ; TMacro.Browse can be set in the system.rootrc or .rootrc file like: TMacro.Browse : Action; TMacro::Browsevoid Browse(TBrowser *b) overrideWhen clicking in the browser, the following action is performed on this macro, depending the content ...Definition TMacro.cxx:171; or set via gEnv->SetValue, eg gEnv->SetValue(""TMacro.Browse"",""Print"");; gEnvR__EXTERN TEnv * gEnvDefinition TEnv.h:170; TEnv::SetValuevirtual void SetValue(const char *name, const char *value, EEnvLevel level=kEnvChange, const char *type=nullptr)Set the value of a resource or create a new resource.Definition TEnv.cxx:736; By default TMacro.Browse="""" -if TMacro.Browse ="""" the macro is executed -if TMacro.Browse =""Print"" the macro is printed in stdout -if TMacro.Browse is of the form ""mymacro.C"" the macro void mymacro.C(TMacro *m) is called where m=this macro An example of macro.C saving the macro into a file and viewing it with emacs is shown below: void mymacro(TMacro *m) {; m->SaveSource(""xx.log"");; gSystem->Exec(""emacs xx.log&"");; }; gSystemR__EXTERN TSystem * gSystemDefinition TSystem.h:561; TSystem::Execvirtual Int_t Exec(const char *shellcmd)Execute a command.Definition TSystem.cxx:653. Reimplemented from TObject.; Definition at line 171 of file TMacro.cxx. ◆ Checksum(). TMD5 * TMacro::Checksum ; (; ). virtual . Returns checksum of the current content. ; The returned TMD5 object must be deleted by the user. Returns 0 in case of error. ; Definition at line 192 of file TMacro.cxx. ◆ Class(). static TClass * TMacro::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * TMacro::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t TMacro::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 59 of file TMacro.h. ◆ DeclFileName(). static const char * TMacro::DeclFileName ; (; ). inlinestatic . ReturnsName of the file containing the class declaration ; Definit",MatchSource.WIKI,doc/master/classTMacro.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMacro.html
Availability,error,error,"ar *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual const char * GetTitle () const;  Returns title of object. ;  ; v",MatchSource.WIKI,doc/master/classTMap.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMap.html
Energy Efficiency,efficient,efficient,". ROOT: TMap Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Static Public Member Functions |; Protected Types |; Protected Member Functions |; Private Member Functions |; Private Attributes |; Friends |; List of all members ; TMap Class ReferenceCore ROOT classes » Containers. ; TMap implements an associative array of (key,value) pairs using a THashTable for efficient retrieval (therefore TMap does not conserve the order of the entries). ; The hash value is calculated using the value returned by the keys Hash() function and the key comparison is done via the IsEqual() function. Both key and value must inherit from TObject. ; Definition at line 40 of file TMap.h. Public Types; typedef TMapIter Iterator_t;  ;  Public Types inherited from TCollection; enum  { kInitCapacity = 16; , kInitHashTableCapacity = 17; };  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  . Public Member Functions;  TMap (Int_t capacity=TCollection::kInitHashTableCapacity, Int_t rehash=0);  TMap ctor. See THashTable for a description of the arguments. ;  ; virtual ~TMap ();  TMap dtor. ;  ; void Add (TObject *key, TObject *value);  Add a (key,value) pair to the map. ;  ; void Add (TObject *obj) override;  This function may not be used (but we need to provide it since it is a pure virtual in TCollection). ",MatchSource.WIKI,doc/master/classTMap.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMap.html
Integrability,message,message,"ar *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual const char * GetTitle () const;  Returns title of object. ;  ; v",MatchSource.WIKI,doc/master/classTMap.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMap.html
Modifiability,inherit,inherit,". ROOT: TMap Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Static Public Member Functions |; Protected Types |; Protected Member Functions |; Private Member Functions |; Private Attributes |; Friends |; List of all members ; TMap Class ReferenceCore ROOT classes » Containers. ; TMap implements an associative array of (key,value) pairs using a THashTable for efficient retrieval (therefore TMap does not conserve the order of the entries). ; The hash value is calculated using the value returned by the keys Hash() function and the key comparison is done via the IsEqual() function. Both key and value must inherit from TObject. ; Definition at line 40 of file TMap.h. Public Types; typedef TMapIter Iterator_t;  ;  Public Types inherited from TCollection; enum  { kInitCapacity = 16; , kInitHashTableCapacity = 17; };  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  . Public Member Functions;  TMap (Int_t capacity=TCollection::kInitHashTableCapacity, Int_t rehash=0);  TMap ctor. See THashTable for a description of the arguments. ;  ; virtual ~TMap ();  TMap dtor. ;  ; void Add (TObject *key, TObject *value);  Add a (key,value) pair to the map. ;  ; void Add (TObject *obj) override;  This function may not be used (but we need to provide it since it is a pure virtual in TCollection). ",MatchSource.WIKI,doc/master/classTMap.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMap.html
Performance,perform,perform,"ass_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  . Protected Types; enum  EStatusBits { kIsOwnerValue = (1ULL << ( 15 )); };  ;  Protected Types inherited from TCollection; enum  EStatusBits { kIsOwner = (1ULL << ( 14 )); , kUseRWLock = (1ULL << ( 16 )); };  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  . Protected Member Functions; void PrintCollectionEntry (TObject *entry, Option_t *option, Int_t recurse) const override;  Print the collection entry. ;  ;  Protected Member Functions inherited from TCollection;  TCollection ();  ; virtual const char * GetCollectionEntryName (TObject *entry) const;  For given collection entry return the string that is used to identify the object and, potentially, perform wildcard/regexp filtering on. ;  ; virtual void PrintCollectionHeader (Option_t *option) const;  Print the collection header. ;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  . Private Member Functions;  TMap (const TMap &map)=delete;  ; TMap & operator= (const TMap &map)=delete;  . Private Attributes; THashTable * fTable;  . Friends; class TMapIter;  . Additional Inherited Members;  Protected Attributes inherited from TCollection; TString fName;  ; Int_t fSize;  . #include <TMap.h>. Inheritance diagram for TMap:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Member Typedef Documentation. ◆ Iterator_t. typedef TMapIter TMap::Iterator_t. Definition at line 56 of f",MatchSource.WIKI,doc/master/classTMap.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMap.html
Safety,safe,safe,"rint (Option_t *option, Int_t recurse) const;  Print the collection header and its elements. ;  ; virtual void Print (Option_t *option, TPRegexp &regexp, Int_t recurse=1) const;  Print the collection header and its elements that match the regexp. ;  ; void Print (Option_t *option="""") const override;  Default print for collections, calls Print(option, 1). ;  ; void RecursiveRemove (TObject *obj) override;  Remove object from this collection and recursively remove the object from all other objects (and collections). ;  ; void RemoveAll ();  ; virtual void RemoveAll (TCollection *col);  Remove all objects in collection col from this collection. ;  ; void SetCurrentCollection ();  Set this collection to be the globally accessible collection. ;  ; void SetName (const char *name);  ; virtual void SetOwner (Bool_t enable=kTRUE);  Set whether this collection is the owner (enable==true) of its content. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual bool UseRWLock (Bool_t enable=true);  Set this collection to use a RW lock upon access, making it thread safe. ;  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Dr",MatchSource.WIKI,doc/master/classTMap.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMap.html
Security,hash,hash,". ROOT: TMap Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Static Public Member Functions |; Protected Types |; Protected Member Functions |; Private Member Functions |; Private Attributes |; Friends |; List of all members ; TMap Class ReferenceCore ROOT classes » Containers. ; TMap implements an associative array of (key,value) pairs using a THashTable for efficient retrieval (therefore TMap does not conserve the order of the entries). ; The hash value is calculated using the value returned by the keys Hash() function and the key comparison is done via the IsEqual() function. Both key and value must inherit from TObject. ; Definition at line 40 of file TMap.h. Public Types; typedef TMapIter Iterator_t;  ;  Public Types inherited from TCollection; enum  { kInitCapacity = 16; , kInitHashTableCapacity = 17; };  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  . Public Member Functions;  TMap (Int_t capacity=TCollection::kInitHashTableCapacity, Int_t rehash=0);  TMap ctor. See THashTable for a description of the arguments. ;  ; virtual ~TMap ();  TMap dtor. ;  ; void Add (TObject *key, TObject *value);  Add a (key,value) pair to the map. ;  ; void Add (TObject *obj) override;  This function may not be used (but we need to provide it since it is a pure virtual in TCollection). ",MatchSource.WIKI,doc/master/classTMap.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMap.html
Availability,robust,robust,"d allocate an object directly in shared memory in the producer, but the consumer still has to copy the object from shared memory into a local object which has the correct vtbl pointer for that process (copy ctor's can be used for creating the local copy).; Another possibility is to only allow objects without virtual functions in shared memory (like simple C structs), or to forbid (how?) the consumer from calling any virtual functions of the objects in shared memory.; A last option is to copy the object internals to shared memory and copy them again from there. This is what is done in the TMapFile (using the object Streamer() to make a deep copy). Option 1) saves one copy, but requires solid copy ctor's (along the full inheritance chain) to rebuild the object in the consumer. Most classes don't provide these copy ctor's, especially not when objects contain collections, etc. 2) is too limiting or dangerous (calling accidentally a virtual function will segv). So since we have a robust Streamer mechanism I opted for 3). ; Definition at line 26 of file TMapFile.h. Public Types; enum  { kDefaultMapSize = 0x80000; };  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  . Public Member Functions;  ~TMapFile () override;  TMapFiles may not be deleted, since we want to keep the complete TMapFile object in the mapped file for later re-use. ;  ; void Add (const TObject *obj, const char *name="""");  Add an",MatchSource.WIKI,doc/master/classTMapFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMapFile.html
Deployability,update,update,"me, Bool_t lock);  Remove object by name from shared memory. ;  ; TObject * Remove (TObject *obj, Bool_t lock);  Remove object from shared memory. ;  ; void SumBuffer (Int_t bufsize);  Increment statistics for buffer sizes of objects in this file. ;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  . Static Protected Member Functions; static void * MapToAddress ();  Return the base address at which we would like the next TMapFile's mapped data to start. ;  . Private Attributes; ULongptr_t fBaseAddr;  Base address of mapped memory region. ;  ; TList * fBrowseList;  List of KeyMapFile objects. ;  ; TDirectory * fDirectory;  Pointer to directory associated to this mapfile. ;  ; Longptr_t fFd;  Descriptor of mapped file. ;  ; TMapRec * fFirst;  List of streamed objects is shared memory. ;  ; TObject * fGetting;  Don't deadlock in update mode, when from Get() Add() is called. ;  ; ULongptr_t fhSemaphore;  HANDLE of WIN32 Mutex object to implement semaphore. ;  ; TMapRec * fLast;  Last object in list of shared objects. ;  ; void * fMmallocDesc;  Pointer to mmalloc descriptor. ;  ; char * fName;  Name of mapped file. ;  ; Longptr_t fOffset;  Offset in bytes for region mapped by reader. ;  ; char * fOption;  Directory creation options. ;  ; Longptr_t fSemaphore;  Modification semaphore (or getpid() for WIN32) ;  ; Int_t fSize;  Original start size of memory mapped region. ;  ; Double_t fSum2Buffer;  Sum of squares of buffer sizes of objects written so far. ;  ; Double_t fSumBuffer;  Sum of buffer sizes of objects written so far. ;  ; char * fTitle;  Title of mapped file. ;  ; Int_t fVersion;  ROOT version (or -1 for shadow map file) ;  ; Bool_t fWritable;  TRUE if mapped file opened in RDWR mode. ;  ; Int_t fWritten;  Number of objects written so far. ;  . Static Private Attributes; static Longptr_t fgMapAddress = ",MatchSource.WIKI,doc/master/classTMapFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMapFile.html
Energy Efficiency,allocate,allocate,"ry call Update() also whenever the mapped object(s) change(s) call Update() to put a fresh copy in the shared memory. This extra step is necessary since it is not possible to share objects with virtual pointers between processes (the vtbl ptr points to the originators unique address space and can not be used by the consumer process(es)). Consumer processes can map the memory region from this file and access the objects stored in it via the Get() method (which returns a copy of the object stored in the shared memory with correct vtbl ptr set). Only objects of classes with a Streamer() member function defined can be shared.; I know the current implementation is not ideal (you need to copy to and from the shared memory file) but the main problem is with the class' virtual_table pointer. This pointer points to a table unique for every process. Therefore, different options are:; One could allocate an object directly in shared memory in the producer, but the consumer still has to copy the object from shared memory into a local object which has the correct vtbl pointer for that process (copy ctor's can be used for creating the local copy).; Another possibility is to only allow objects without virtual functions in shared memory (like simple C structs), or to forbid (how?) the consumer from calling any virtual functions of the objects in shared memory.; A last option is to copy the object internals to shared memory and copy them again from there. This is what is done in the TMapFile (using the object Streamer() to make a deep copy). Option 1) saves one copy, but requires solid copy ctor's (along the full inheritance chain) to rebuild the object in the consumer. Most classes don't provide these copy ctor's, especially not when objects contain collections, etc. 2) is too limiting or dangerous (calling accidentally a virtual function will segv). So since we have a robust Streamer mechanism I opted for 3). ; Definition at line 26 of file TMapFile.h. Public Types; enum  { kDefault",MatchSource.WIKI,doc/master/classTMapFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMapFile.html
Integrability,message,message,"object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t ",MatchSource.WIKI,doc/master/classTMapFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMapFile.html
Modifiability,inherit,inheritance," can be shared.; I know the current implementation is not ideal (you need to copy to and from the shared memory file) but the main problem is with the class' virtual_table pointer. This pointer points to a table unique for every process. Therefore, different options are:; One could allocate an object directly in shared memory in the producer, but the consumer still has to copy the object from shared memory into a local object which has the correct vtbl pointer for that process (copy ctor's can be used for creating the local copy).; Another possibility is to only allow objects without virtual functions in shared memory (like simple C structs), or to forbid (how?) the consumer from calling any virtual functions of the objects in shared memory.; A last option is to copy the object internals to shared memory and copy them again from there. This is what is done in the TMapFile (using the object Streamer() to make a deep copy). Option 1) saves one copy, but requires solid copy ctor's (along the full inheritance chain) to rebuild the object in the consumer. Most classes don't provide these copy ctor's, especially not when objects contain collections, etc. 2) is too limiting or dangerous (calling accidentally a virtual function will segv). So since we have a robust Streamer mechanism I opted for 3). ; Definition at line 26 of file TMapFile.h. Public Types; enum  { kDefaultMapSize = 0x80000; };  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( ",MatchSource.WIKI,doc/master/classTMapFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMapFile.html
Security,access,access,"ence Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Static Protected Member Functions |; Private Attributes |; Static Private Attributes |; Friends |; List of all members ; TMapFile Class ReferenceInput/Output Library. ; This class implements a shared memory region mapped to a file. ; Objects can be placed into this shared memory area using the Add() member function. To actually place a copy of the object is shared memory call Update() also whenever the mapped object(s) change(s) call Update() to put a fresh copy in the shared memory. This extra step is necessary since it is not possible to share objects with virtual pointers between processes (the vtbl ptr points to the originators unique address space and can not be used by the consumer process(es)). Consumer processes can map the memory region from this file and access the objects stored in it via the Get() method (which returns a copy of the object stored in the shared memory with correct vtbl ptr set). Only objects of classes with a Streamer() member function defined can be shared.; I know the current implementation is not ideal (you need to copy to and from the shared memory file) but the main problem is with the class' virtual_table pointer. This pointer points to a table unique for every process. Therefore, different options are:; One could allocate an object directly in shared memory in the producer, but the consumer still has to copy the object from shared memory into a local object which has the correct vtbl pointer for that process (copy ctor's can be used for creating the local copy).; Another possibility is to only allow objects without virtual functions in shared memory (like simple C structs), or to forbid (how?) the consumer from calling any virtual functions of the objects in shared memory.; A last option is to copy the object internals to shared memory and copy them ",MatchSource.WIKI,doc/master/classTMapFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMapFile.html
Usability,simpl,simple,"originators unique address space and can not be used by the consumer process(es)). Consumer processes can map the memory region from this file and access the objects stored in it via the Get() method (which returns a copy of the object stored in the shared memory with correct vtbl ptr set). Only objects of classes with a Streamer() member function defined can be shared.; I know the current implementation is not ideal (you need to copy to and from the shared memory file) but the main problem is with the class' virtual_table pointer. This pointer points to a table unique for every process. Therefore, different options are:; One could allocate an object directly in shared memory in the producer, but the consumer still has to copy the object from shared memory into a local object which has the correct vtbl pointer for that process (copy ctor's can be used for creating the local copy).; Another possibility is to only allow objects without virtual functions in shared memory (like simple C structs), or to forbid (how?) the consumer from calling any virtual functions of the objects in shared memory.; A last option is to copy the object internals to shared memory and copy them again from there. This is what is done in the TMapFile (using the object Streamer() to make a deep copy). Option 1) saves one copy, but requires solid copy ctor's (along the full inheritance chain) to rebuild the object in the consumer. Most classes don't provide these copy ctor's, especially not when objects contain collections, etc. 2) is too limiting or dangerous (calling accidentally a virtual function will segv). So since we have a robust Streamer mechanism I opted for 3). ; Definition at line 26 of file TMapFile.h. Public Types; enum  { kDefaultMapSize = 0x80000; };  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , k",MatchSource.WIKI,doc/master/classTMapFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMapFile.html
Availability,error,error,"tual; Clone(const char *newname="""") constTObjectvirtual; Compare(const TObject *obj) constTObjectvirtual; Copy(TObject &marker) const overrideTMarkervirtual; TAttMarker::Copy(TAttMarker &attmarker) constTAttMarker; DeclFileName()TMarkerinlinestatic; Delete(Option_t *option="""")TObjectvirtual; DisplayMarkerLineWidths()TMarkerstatic; DisplayMarkerTypes()TMarkerstatic; DistancetoPrimitive(Int_t px, Int_t py) overrideTMarkervirtual; DoError(int level, const char *location, const char *fmt, va_list va) constTObjectprotectedvirtual; Draw(Option_t *option="""") overrideTMarkervirtual; DrawClass() constTObjectvirtual; DrawClone(Option_t *option="""") constTObjectvirtual; DrawMarker(Double_t x, Double_t y)TMarkervirtual; Dump() constTObjectvirtual; EDeprecatedStatusBits enum nameTObject; Error(const char *method, const char *msgfmt,...) constTObjectvirtual; EStatusBits enum nameTObject; Execute(const char *method, const char *params, Int_t *error=nullptr)TObjectvirtual; Execute(TMethod *method, TObjArray *params, Int_t *error=nullptr)TObjectvirtual; ExecuteEvent(Int_t event, Int_t px, Int_t py) overrideTMarkervirtual; Fatal(const char *method, const char *msgfmt,...) constTObjectvirtual; fBitsTObjectprivate; fgDtorOnlyTObjectprivatestatic; fgObjectStatTObjectprivatestatic; FindObject(const char *name) constTObjectvirtual; FindObject(const TObject *obj) constTObjectvirtual; fMarkerColorTAttMarkerprotected; fMarkerSizeTAttMarkerprotected; fMarkerStyleTAttMarkerprotected; fUniqueIDTObjectprivate; fXTMarkerprotected; fYTMarkerprotected; GetBBox() overrideTMarkervirtual; GetBBoxCenter() overrideTMarkervirtual; GetDrawOption() constTObjectvirtual; GetDtorOnly()TObjectstatic; GetIconName() constTObjectvirtual; GetMarkerColor() constTAttMarkerinlinevirtual; GetMarkerLineWidth(Style_t style)TAttMarkerstatic; GetMarkerSize() constTAttMarkerinlinevirtual; GetMarkerStyle() constTAttMarkerinlinevirtual; GetMarkerStyleBase(Style_t style)TAttMarkerstatic; GetName() constTObjectvirtual; GetObject",MatchSource.WIKI,doc/master/classTMarker-members.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMarker-members.html
Modifiability,inherit,inherited,". ROOT: Member List. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. TMarker Member List. This is the complete list of members for TMarker, including all inherited members. AbstractMethod(const char *method) constTObject; AddToTObjectTable(TObject *)TObjectprivatestatic; AppendPad(Option_t *option="""")TObjectvirtual; Browse(TBrowser *b)TObjectvirtual; CheckedHash()TObjectinline; Class()TMarkerstatic; Class_Name()TMarkerstatic; Class_Version()TMarkerinlinestatic; ClassName() constTObjectvirtual; Clear(Option_t *="""")TObjectinlinevirtual; Clone(const char *newname="""") constTObjectvirtual; Compare(const TObject *obj) constTObjectvirtual; Copy(TObject &marker) const overrideTMarkervirtual; TAttMarker::Copy(TAttMarker &attmarker) constTAttMarker; DeclFileName()TMarkerinlinestatic; Delete(Option_t *option="""")TObjectvirtual; DisplayMarkerLineWidths()TMarkerstatic; DisplayMarkerTypes()TMarkerstatic; DistancetoPrimitive(Int_t px, Int_t py) overrideTMarkervirtual; DoError(int level, const char *location, const char *fmt, va_list va) constTObjectprotectedvirtual; Draw(Option_t *option="""") overrideTMarkervirtual; DrawClass() constTObjectvirtual; DrawClone(Option_t *option="""") constTObjectvirtual; DrawMarker(Double_t x, Double_t y)TMarkervirtual; Dump() constTObjectvirtual; EDeprecatedStatusBits enum nameTObject; Error(const char *method, const char *msgfmt,...) constTObjectvirtual; EStatusBits enum nameTObject; Execute(const char *method, const char *params, Int_t *error=nullptr)TObjectvirtual; Execute(TMethod *method, TObjArray *params, Int_t *error=nullptr)TObjectvirtual; ExecuteEvent(Int_t event, Int_t px, Int_t py) overrideTMarkervirtual; Fatal(const char *method, const char *msgfmt,...) constTObjectvirtual; fBitsTObjectprivate; fgDtorOnlyTObjectprivatestatic; fgObjectStatTObjectprivatestatic; FindObject(const char *name) constTObjectvirtual; FindObject(const TObject *obj) constTObjectvirtual; fMarkerColorTAttMarkerprotected; fMarkerSizeTAttMar",MatchSource.WIKI,doc/master/classTMarker-members.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMarker-members.html
Availability,error,error,"ault action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Returns name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about th",MatchSource.WIKI,doc/master/classTMarker.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMarker.html
Deployability,release,released,"py to a marker. ; Compute the closest distance of approach from point px,py to this marker. The distance is computed in pixels units. Returns0 if the distance <= markerRadius exact computed distance if dist in [markerRadius+1, markerRadius+2] 999 if larger than markerRadius + 3 9999 if no pad ; Reimplemented from TObject.; Definition at line 176 of file TMarker.cxx. ◆ Draw(). void TMarker::Draw ; (; Option_t * ; option = """"). overridevirtual . Draw this marker with its current attributes. ; Reimplemented from TObject.; Definition at line 199 of file TMarker.cxx. ◆ DrawMarker(). TMarker * TMarker::DrawMarker ; (; Double_t ; x, . Double_t ; y . ). virtual . Draw this marker with new coordinates. ; Definition at line 208 of file TMarker.cxx. ◆ ExecuteEvent(). void TMarker::ExecuteEvent ; (; Int_t ; event, . Int_t ; px, . Int_t ; py . ). overridevirtual . Execute action corresponding to one event. ; This member function is called when a marker is clicked with the locator; If Left button is clicked on a marker, the marker is moved to a new position when the mouse button is released. ; Reimplemented from TObject.; Definition at line 225 of file TMarker.cxx. ◆ GetBBox(). Rectangle_t TMarker::GetBBox ; (; ). overridevirtual . Return the bounding Box of the Line. ; Implements TAttBBox2D.; Definition at line 402 of file TMarker.cxx. ◆ GetBBoxCenter(). TPoint TMarker::GetBBoxCenter ; (; ). overridevirtual . Return the center of the BoundingBox as TPoint in pixels. ; Implements TAttBBox2D.; Definition at line 418 of file TMarker.cxx. ◆ GetX(). Double_t TMarker::GetX ; (; ); const. inline . Definition at line 44 of file TMarker.h. ◆ GetY(). Double_t TMarker::GetY ; (; ); const. inline . Definition at line 45 of file TMarker.h. ◆ IsA(). TClass * TMarker::IsA ; (; ); const. inlineoverridevirtual . ReturnsTClass describing current object ; Reimplemented from TObject.; Definition at line 69 of file TMarker.h. ◆ ls(). void TMarker::ls ; (; Option_t * ; option = """"); const. overridevi",MatchSource.WIKI,doc/master/classTMarker.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMarker.html
Integrability,message,message,"ault action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Returns name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about th",MatchSource.WIKI,doc/master/classTMarker.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMarker.html
Modifiability,inherit,inherited,"Public Types |; Public Member Functions |; Static Public Member Functions |; Protected Attributes |; List of all members ; TMarker Class ReferenceGraphics » 2D Graphics » Basic graphics. ; Manages Markers. ; Use the TMarker constructor to create a marker.; TMarker(Double_t x,Double_t y,Int_t marker); TMarker::TMarkerTMarker()Marker default constructor.Definition TMarker.cxx:55; double; int; yDouble_t y[n]Definition legend1.C:17; xDouble_t x[n]Definition legend1.C:17; The parameters x and y are the marker coordinates and marker is the marker type.; Use the TPolyMarker to create an array on N points in a 2D space. At each point x[i], y[i] a marker is drawn.; Use the TAttMarker class to change the attributes color, style and size of a marker.; Example. Use the TAttMarker::SetMarkerSize(size) method to set the size of a marker. . Definition at line 22 of file TMarker.h. Public Types; enum  { kMarkerNDC = (1ULL << ( 14 )); };  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  . Public Member Functions;  TMarker ();  Marker default constructor. ;  ;  TMarker (const TMarker &marker);  Marker copy constructor. ;  ;  TMarker (Double_t x, Double_t y, Int_t marker);  Marker normal constructor. ;  ;  ~TMarker () override;  Marker default destructor. ;  ; void Copy (TObject &marker) const override;  Copy this marker to marker. ;  ; Int_t DistancetoPrimitive (Int_t px, Int_t py) override;  Compute dista",MatchSource.WIKI,doc/master/classTMarker.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMarker.html
Security,hash,hash," Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Returns name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual const char * GetTitle () const;  Returns title of object. ;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; virtual ULong_t Hash () const;  Return hash value for this object. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns kTRUE if object inherits from class ""classname"". ;  ; virtual Bool_t InheritsFrom (const TClass *cl) const;  Returns kTRUE if object inherits from TClass cl. ;  ; virtual void Inspect () const;  Dump contents of this object in a graphics canvas. ;  ; void InvertBit (UInt_t f);  ; Bool_t IsDestructed () const;  IsDestructed. ;  ; virtual Bool_t IsEqual (const TObject *obj) const;  Default equal comparison (objects are equal if they have the same address in memory). ;  ; virtual Bool_t IsFolder () const;  Returns kTRUE in case object contains browsable objects (like containers or lists of other objects). ;  ; R__ALWAYS_INLINE Bool_t",MatchSource.WIKI,doc/master/classTMarker.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMarker.html
Availability,error,error,"lar Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Returns name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about th",MatchSource.WIKI,doc/master/classTMarker3DBox.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMarker3DBox.html
Integrability,message,message,"lar Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Returns name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about th",MatchSource.WIKI,doc/master/classTMarker3DBox.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMarker3DBox.html
Modifiability,inherit,inherited,"e event. ;  ; virtual void GetDirection (Float_t &theta, Float_t &phi) const;  ; virtual void GetPosition (Float_t &x, Float_t &y, Float_t &z) const;  ; TObject * GetRefObject () const;  ; virtual void GetSize (Float_t &dx, Float_t &dy, Float_t &dz) const;  ; TClass * IsA () const override;  ; void Paint (Option_t *option) override;  Paint marker 3D box. ;  ; void SavePrimitive (std::ostream &out, Option_t *option="""") override;  Save primitive as a C++ statement(s) on output stream out. ;  ; virtual void SetDirection (Float_t theta, Float_t phi);  Set direction. ;  ; virtual void SetPoints (Double_t *buff) const;  Set points. ;  ; virtual void SetPosition (Float_t x, Float_t y, Float_t z);  Set position. ;  ; virtual void SetRefObject (TObject *obj=nullptr);  ; virtual void SetSize (Float_t dx, Float_t dy, Float_t dz);  Set size. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TMarker3DBox. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) c",MatchSource.WIKI,doc/master/classTMarker3DBox.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMarker3DBox.html
Security,hash,hash," Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Returns name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual const char * GetTitle () const;  Returns title of object. ;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; virtual ULong_t Hash () const;  Return hash value for this object. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns kTRUE if object inherits from class ""classname"". ;  ; virtual Bool_t InheritsFrom (const TClass *cl) const;  Returns kTRUE if object inherits from TClass cl. ;  ; virtual void Inspect () const;  Dump contents of this object in a graphics canvas. ;  ; void InvertBit (UInt_t f);  ; Bool_t IsDestructed () const;  IsDestructed. ;  ; virtual Bool_t IsEqual (const TObject *obj) const;  Default equal comparison (objects are equal if they have the same address in memory). ;  ; virtual Bool_t IsFolder () const;  Returns kTRUE in case object contains browsable objects (like containers or lists of other objects). ;  ; R__ALWAYS_INLINE Bool_t",MatchSource.WIKI,doc/master/classTMarker3DBox.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMarker3DBox.html
Availability,error,error,"ject. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t ",MatchSource.WIKI,doc/master/classTMaterial.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMaterial.html
Integrability,message,message,"ject. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t ",MatchSource.WIKI,doc/master/classTMaterial.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMaterial.html
Modifiability,inherit,inherited," 3D Graphics » Basic 3D graphics. ; Manages a detector material. ; See class TGeometry ; Definition at line 28 of file TMaterial.h. Public Member Functions;  TMaterial ();  Material default constructor. ;  ;  TMaterial (const char *name, const char *title, Float_t a, Float_t z, Float_t density);  Material normal constructor. ;  ;  TMaterial (const char *name, const char *title, Float_t a, Float_t z, Float_t density, Float_t radl, Float_t inter);  Material normal constructor. ;  ;  ~TMaterial () override;  Material default destructor. ;  ; virtual Float_t GetA () const;  ; virtual Float_t GetDensity () const;  ; virtual Float_t GetInterLength () const;  ; virtual Int_t GetNumber () const;  ; virtual Float_t GetRadLength () const;  ; virtual Float_t GetZ () const;  ; TClass * IsA () const override;  ; void Streamer (TBuffer &) override;  Stream an object of class TMaterial. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; TClass * IsA () const override;  ; Bool_t IsSortable () const override;  ; void ls (Option_t *option="""") const override;",MatchSource.WIKI,doc/master/classTMaterial.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMaterial.html
Safety,detect,detector,". ROOT: TMaterial Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Attributes |; List of all members ; TMaterial Class ReferenceGraphics » 3D Graphics » Basic 3D graphics. ; Manages a detector material. ; See class TGeometry ; Definition at line 28 of file TMaterial.h. Public Member Functions;  TMaterial ();  Material default constructor. ;  ;  TMaterial (const char *name, const char *title, Float_t a, Float_t z, Float_t density);  Material normal constructor. ;  ;  TMaterial (const char *name, const char *title, Float_t a, Float_t z, Float_t density, Float_t radl, Float_t inter);  Material normal constructor. ;  ;  ~TMaterial () override;  Material default destructor. ;  ; virtual Float_t GetA () const;  ; virtual Float_t GetDensity () const;  ; virtual Float_t GetInterLength () const;  ; virtual Int_t GetNumber () const;  ; virtual Float_t GetRadLength () const;  ; virtual Float_t GetZ () const;  ; TClass * IsA () const override;  ; void Streamer (TBuffer &) override;  Stream an object of class TMaterial. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  Returns name ",MatchSource.WIKI,doc/master/classTMaterial.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMaterial.html
Security,hash,hash,"verride;  Stream an object of class TMaterial. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; TClass * IsA () const override;  ; Bool_t IsSortable () const override;  ; void ls (Option_t *option="""") const override;  List TNamed name and title. ;  ; TNamed & operator= (const TNamed &rhs);  TNamed assignment operator. ;  ; void Print (Option_t *option="""") const override;  Print TNamed name and title. ;  ; virtual void SetName (const char *name);  Set the name of the TNamed. ;  ; virtual void SetNameTitle (const char *name, const char *title);  Set all the TNamed parameters (name and title). ;  ; virtual void SetTitle (const char *title="""");  Set the title of the TNamed. ;  ; virtual Int_t Sizeof () const;  Return size of the TNamed part of the TObject. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;",MatchSource.WIKI,doc/master/classTMaterial.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMaterial.html
Availability,error,error,") constTAttFill; DeclFileName()TMathTextinlinestatic; Delete(Option_t *option="""")TObjectvirtual; DistancetoPrimitive(Int_t px, Int_t py) overrideTTextvirtual; DoError(int level, const char *location, const char *fmt, va_list va) constTObjectprotectedvirtual; Draw(Option_t *option="""")TObjectvirtual; DrawClass() constTObjectvirtual; DrawClone(Option_t *option="""") constTObjectvirtual; DrawMathText(Double_t x, Double_t y, const char *text)TMathText; DrawText(Double_t x, Double_t y, const char *text)TTextvirtual; DrawText(Double_t x, Double_t y, const wchar_t *text)TTextvirtual; DrawTextNDC(Double_t x, Double_t y, const char *text)TTextvirtual; DrawTextNDC(Double_t x, Double_t y, const wchar_t *text)TTextvirtual; Dump() constTObjectvirtual; EDeprecatedStatusBits enum nameTObject; Error(const char *method, const char *msgfmt,...) constTObjectvirtual; EStatusBits enum nameTObject; Execute(const char *method, const char *params, Int_t *error=nullptr)TObjectvirtual; Execute(TMethod *method, TObjArray *params, Int_t *error=nullptr)TObjectvirtual; ExecuteEvent(Int_t event, Int_t px, Int_t py) overrideTTextvirtual; Fatal(const char *method, const char *msgfmt,...) constTObjectvirtual; fBitsTObjectprivate; fFillColorTAttFillprotected; fFillStyleTAttFillprotected; fgDtorOnlyTObjectprivatestatic; fgObjectStatTObjectprivatestatic; FillBuffer(char *&buffer)TNamedvirtual; FindObject(const char *name) constTObjectvirtual; FindObject(const TObject *obj) constTObjectvirtual; fNameTNamedprotected; fRendererTMathTextprotected; fTextAlignTAttTextprotected; fTextAngleTAttTextprotected; fTextColorTAttTextprotected; fTextFontTAttTextprotected; fTextSizeTAttTextprotected; fTitleTNamedprotected; fUniqueIDTObjectprivate; fWcsTitleTTextprotected; fXTTextprotected; fYTTextprotected; GetAlignPoint(Double_t &x0, Double_t &y0, const Double_t size, const Double_t angle, const Char_t *t, const Int_t length, const Short_t align)TMathTextprotected; GetBBox() overrideTTextvirtual; GetBBoxCenter() overrideT",MatchSource.WIKI,doc/master/classTMathText-members.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMathText-members.html
Modifiability,inherit,inherited,". ROOT: Member List. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. TMathText Member List. This is the complete list of members for TMathText, including all inherited members. AbstractMethod(const char *method) constTObject; AddToTObjectTable(TObject *)TObjectprivatestatic; AppendPad(Option_t *option="""")TObjectvirtual; Browse(TBrowser *b)TObjectvirtual; CheckedHash()TObjectinline; Class()TMathTextstatic; Class_Name()TMathTextstatic; Class_Version()TMathTextinlinestatic; ClassName() constTObjectvirtual; Clear(Option_t *option="""") overrideTNamedvirtual; Clone(const char *newname="""") const overrideTNamedvirtual; Compare(const TObject *obj) const overrideTNamedvirtual; Copy(TObject &text) const overrideTMathTextvirtual; TText::TAttText::Copy(TAttText &atttext) constTAttText; TAttFill::Copy(TAttFill &attfill) constTAttFill; DeclFileName()TMathTextinlinestatic; Delete(Option_t *option="""")TObjectvirtual; DistancetoPrimitive(Int_t px, Int_t py) overrideTTextvirtual; DoError(int level, const char *location, const char *fmt, va_list va) constTObjectprotectedvirtual; Draw(Option_t *option="""")TObjectvirtual; DrawClass() constTObjectvirtual; DrawClone(Option_t *option="""") constTObjectvirtual; DrawMathText(Double_t x, Double_t y, const char *text)TMathText; DrawText(Double_t x, Double_t y, const char *text)TTextvirtual; DrawText(Double_t x, Double_t y, const wchar_t *text)TTextvirtual; DrawTextNDC(Double_t x, Double_t y, const char *text)TTextvirtual; DrawTextNDC(Double_t x, Double_t y, const wchar_t *text)TTextvirtual; Dump() constTObjectvirtual; EDeprecatedStatusBits enum nameTObject; Error(const char *method, const char *msgfmt,...) constTObjectvirtual; EStatusBits enum nameTObject; Execute(const char *method, const char *params, Int_t *error=nullptr)TObjectvirtual; Execute(TMethod *method, TObjArray *params, Int_t *error=nullptr)TObjectvirtual; ExecuteEvent(Int_t event, Int_t px, Int_t py) overrideTTextvirtual; Fatal(const char *method, const ",MatchSource.WIKI,doc/master/classTMathText-members.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMathText-members.html
Availability,avail,available,"left\\{{2\\over 1-\\Delta\\alpha} \\chi(s) \\left[ \\^{g}_\\nu^e \\^{g}_\\nu^f (1 + \\cos^2\\theta) + \\^{g}_a^e \\^{g}_a^f \\cos\\theta \\right] \\right\\}"");; l.DrawMathText(0.50, 0.330, ""p(n) = {1\\over\\pi\\sqrt{2}} \\sum_{k = 1}^\\infty \\sqrt{k} A_k(n) {d\\over dn} {\\sinh \\left\\{ {\\pi\\over k} \\sqrt{2\\over 3} \\sqrt{n - {1\\over 24}} \\right\\} \\over \\sqrt{n - {1\\over 24}}}"");; l.DrawMathText(0.13, 0.150, ""{(\\ell+1)C_{\\ell}^{TE} \\over 2\\pi}"");; l.DrawMathText(0.27, 0.110, ""\\mathbb{N} \\subset \\mathbb{R}"");; l.DrawMathText(0.63, 0.100, ""\\hbox{RHIC スピン物理 Нью-Йорк}"");; ; c1->Print(""c1.png"");; c1->Print(""c1.ps"");; ; return c1;; }; TCanvasThe Canvas class.Definition TCanvas.h:23; TLine::Printvoid Print(Option_t *option="""") const overrideDump this line with its attributes.Definition TLine.cxx:419; TMathTextTo draw TeX Mathematical Formula.Definition TMathText.h:19; c1return c1Definition legend1.C:41; lTLine lDefinition textangle.C:4; . The list of all available symbols is given in the following example:. Limitation:; TMathText rendering is not implemented for the PDF output. PostScript output should be used instead. ; Definition at line 19 of file TMathText.h. Public Types; enum  { kTextNDC = (1ULL << ( 14 )); };  ;  Public Types inherited from TText; enum  { kTextNDC = (1ULL << ( 14 )); };  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  . Public Member Functions;  TMath",MatchSource.WIKI,doc/master/classTMathText.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMathText.html
Integrability,message,message," (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () co",MatchSource.WIKI,doc/master/classTMathText.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMathText.html
Modifiability,inherit,inherited,"t\\} \\over \\sqrt{n - {1\\over 24}}}"");; l.DrawMathText(0.13, 0.150, ""{(\\ell+1)C_{\\ell}^{TE} \\over 2\\pi}"");; l.DrawMathText(0.27, 0.110, ""\\mathbb{N} \\subset \\mathbb{R}"");; l.DrawMathText(0.63, 0.100, ""\\hbox{RHIC スピン物理 Нью-Йорк}"");; ; c1->Print(""c1.png"");; c1->Print(""c1.ps"");; ; return c1;; }; TCanvasThe Canvas class.Definition TCanvas.h:23; TLine::Printvoid Print(Option_t *option="""") const overrideDump this line with its attributes.Definition TLine.cxx:419; TMathTextTo draw TeX Mathematical Formula.Definition TMathText.h:19; c1return c1Definition legend1.C:41; lTLine lDefinition textangle.C:4; . The list of all available symbols is given in the following example:. Limitation:; TMathText rendering is not implemented for the PDF output. PostScript output should be used instead. ; Definition at line 19 of file TMathText.h. Public Types; enum  { kTextNDC = (1ULL << ( 14 )); };  ;  Public Types inherited from TText; enum  { kTextNDC = (1ULL << ( 14 )); };  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  . Public Member Functions;  TMathText ();  Default constructor. ;  ;  TMathText (const TMathText &text);  Copy constructor. ;  ;  TMathText (Double_t x, Double_t y, const char *text);  Normal constructor. ;  ;  ~TMathText () override;  Destructor. ;  ; void Copy (TObject &text) const override;  Copy. ;  ; TMathText * DrawMathText (Double_t x, Double_t y, const char *text);  Make a copy",MatchSource.WIKI,doc/master/classTMathText.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMathText.html
Security,hash,hash,"t x);  ; virtual void SetY (Double_t y);  ; void Streamer (TBuffer &) override;  Stream an object of class TText. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; Bool_t IsSortable () const override;  ; TNamed & operator= (const TNamed &rhs);  TNamed assignment operator. ;  ; virtual void SetName (const char *name);  Set the name of the TNamed. ;  ; virtual void SetNameTitle (const char *name, const char *title);  Set all the TNamed parameters (name and title). ;  ; virtual void SetTitle (const char *title="""");  Set the title of the TNamed. ;  ; virtual Int_t Sizeof () const;  Return size of the TNamed part of the TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to cu",MatchSource.WIKI,doc/master/classTMathText.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMathText.html
Availability,error,error," (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () co",MatchSource.WIKI,doc/master/classTMathTextRenderer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMathTextRenderer.html
Integrability,message,message," (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () co",MatchSource.WIKI,doc/master/classTMathTextRenderer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMathTextRenderer.html
Modifiability,inherit,inherited,". ROOT: TMathTextRenderer Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Protected Member Functions |; Private Member Functions |; Private Attributes |; List of all members ; TMathTextRenderer Class Reference. . Definition at line 54 of file TMathText.cxx. Public Member Functions;  TMathTextRenderer (TMathText *parent);  ; mathtext::bounding_box_t bounding_box (const std::wstring string, const unsigned int family=FAMILY_PLAIN) override;  ; mathtext::bounding_box_t bounding_box (const wchar_t character, float &current_x, const unsigned int family);  ; void filled_rectangle (const mathtext::bounding_box_t &bounding_box_0) override;  ; float font_size (const unsigned int family=FAMILY_PLAIN) const override;  ; void point (const float, const float) override;  ; void rectangle (const mathtext::bounding_box_t &) override;  ; void reset_font_size (const unsigned int) override;  ; void set_font_size (const float size) override;  ; void set_font_size (const float size, const unsigned int family) override;  ; void set_parameter (const float x, const float y, const float size, const float angle_degree);  ; void text_raw (const float x, const float y, const std::wstring string, const unsigned int family=FAMILY_PLAIN) override;  ; void text_with_bounding_box (const float, const float, const std::wstring, const unsigned int) override;  ; void transform_pad (double &xt, double &yt, const float x, const float y) const;  ;  Public Member Functions inherited from TText;  TText ();  ;  TText (const TText &text);  Copy constructor. ;  ;  TText (Double_t x, Double_t y, const char *text);  Text normal constructor. ;  ;  TText (Double_t x, Double_t y, const wchar_t *text);  Text normal constructor. ;  ;  ~TText () override;  Text default destructor. ;  ; void Copy (TObject &text) const override;  Copy this text to text. ;  ; Int_t DistancetoPrimitive (Int_t px, Int_t py) override;  Compute ",MatchSource.WIKI,doc/master/classTMathTextRenderer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMathTextRenderer.html
Security,hash,hash,"t x);  ; virtual void SetY (Double_t y);  ; void Streamer (TBuffer &) override;  Stream an object of class TText. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; Bool_t IsSortable () const override;  ; TNamed & operator= (const TNamed &rhs);  TNamed assignment operator. ;  ; virtual void SetName (const char *name);  Set the name of the TNamed. ;  ; virtual void SetNameTitle (const char *name, const char *title);  Set all the TNamed parameters (name and title). ;  ; virtual void SetTitle (const char *title="""");  Set the title of the TNamed. ;  ; virtual Int_t Sizeof () const;  Return size of the TNamed part of the TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to cu",MatchSource.WIKI,doc/master/classTMathTextRenderer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMathTextRenderer.html
Availability,error,error," the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Return",MatchSource.WIKI,doc/master/classTMatrixT.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMatrixT.html
Energy Efficiency,allocate,allocated,"MatrixT< Element >::TMatrixT ; (; const TMatrixT< Element2 > & ; another). inline . Definition at line 70 of file TMatrixT.h. ◆ TMatrixT() [10/15]. template<class Element > . TMatrixT< Element >::TMatrixT ; (; EMatrixCreatorsOp1 ; op, . const TMatrixT< Element > & ; prototype . ). Constructor of matrix applying a specific operation to the prototype. ; Example: TMatrixT<Element> a(10,12); ...; TMatrixT<Element> b(TMatrixT::kTransposed, a); Supported operations are: kZero, kUnit, kTransposed, kInverted and kAtA. ; Definition at line 119 of file TMatrixT.cxx. ◆ TMatrixT() [11/15]. template<class Element > . TMatrixT< Element >::TMatrixT ; (; const TMatrixT< Element > & ; a, . EMatrixCreatorsOp2 ; op, . const TMatrixT< Element > & ; b . ). Constructor of matrix applying a specific operation to two prototypes. ; Example: TMatrixT<Element> a(10,12), b(12,5); ...; TMatrixT<Element> c(a, TMatrixT::kMult, b); Supported operations are: kMult (a*b), kTransposeMult (a'*b), kInvMult (a^(-1)*b); Whenever kInvMult is invoked and b is not squared, additional memory is allocated for a^(-1) ; Definition at line 165 of file TMatrixT.cxx. ◆ TMatrixT() [12/15]. template<class Element > . TMatrixT< Element >::TMatrixT ; (; const TMatrixT< Element > & ; a, . EMatrixCreatorsOp2 ; op, . const TMatrixTSym< Element > & ; b . ). Constructor of matrix applying a specific operation to two prototypes. ; Example: TMatrixT<Element> a(10,12), b(12,5); ...; TMatrixT<Element> c(a, TMatrixT::kMult, b); Supported operations are: kMult (a*b), kTransposeMult (a'*b), kInvMult (a^(-1)*b) ; Definition at line 227 of file TMatrixT.cxx. ◆ TMatrixT() [13/15]. template<class Element > . TMatrixT< Element >::TMatrixT ; (; const TMatrixTSym< Element > & ; a, . EMatrixCreatorsOp2 ; op, . const TMatrixT< Element > & ; b . ). Constructor of matrix applying a specific operation to two prototypes. ; Example: TMatrixT<Element> a(10,12), b(12,5); ...; TMatrixT<Element> c(a, TMatrixT::kMult, b); Supported operations are: ",MatchSource.WIKI,doc/master/classTMatrixT.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMatrixT.html
Integrability,depend,depends,"ride;  Return the matrix determinant as d1,d2 where det = d1*TMath::Power(2.0,d2) ;  ; const TMatrixT< Element > EigenVectors (TVectorT< Element > &eigenValues) const;  Return a matrix containing the eigen-vectors ordered by descending values of Re^2+Im^2 of the complex eigen-values . ;  ; const Int_t * GetColIndexArray () const override;  ; Int_t * GetColIndexArray () override;  ; const Element * GetMatrixArray () const override;  ; Element * GetMatrixArray () override;  ; const Int_t * GetRowIndexArray () const override;  ; Int_t * GetRowIndexArray () override;  ; TMatrixT< Element > GetSub (Int_t row_lwb, Int_t row_upb, Int_t col_lwb, Int_t col_upb, Option_t *option=""S"") const;  ; TMatrixTBase< Element > & GetSub (Int_t row_lwb, Int_t row_upb, Int_t col_lwb, Int_t col_upb, TMatrixTBase< Element > &target, Option_t *option=""S"") const override;  Get submatrix [row_lwb..row_upb] x [col_lwb..col_upb]; The indexing range of the returned matrix depends on the argument option: ;  ; TMatrixT< Element > & Invert (Double_t *det=nullptr);  Invert the matrix and calculate its determinant. ;  ; TMatrixT< Element > & InvertFast (Double_t *det=nullptr);  Invert the matrix and calculate its determinant, however upto (6x6) a fast Cramer inversion is used . ;  ; TClass * IsA () const override;  ; void Minus (const TMatrixT< Element > &a, const TMatrixT< Element > &b);  General matrix subtraction. Replace this matrix with C such that C = A - B. ;  ; void Minus (const TMatrixT< Element > &a, const TMatrixTSym< Element > &b);  General matrix subtraction. Replace this matrix with C such that C = A - B. ;  ; void Minus (const TMatrixTSym< Element > &a, const TMatrixT< Element > &b);  ; void Mult (const TMatrixT< Element > &a, const TMatrixT< Element > &b);  General matrix multiplication. Replace this matrix with C such that C = A * B. ;  ; void Mult (const TMatrixT< Element > &a, const TMatrixTSym< Element > &b);  Matrix multiplication, with A general and B symmetric. ;  ; void Mult (c",MatchSource.WIKI,doc/master/classTMatrixT.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMatrixT.html
Modifiability,inherit,inherited,". ROOT: TMatrixT< Element > Class Template Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; List of all members ; TMatrixT< Element > Class Template ReferenceMath » Matrix Linear Algebra. ; template<class Element>; class TMatrixT< Element >TMatrixT. ; Template class of a general matrix in the linear algebra package; See the Matrix Linear Algebra page for the documentation of the linear algebra package ; Definition at line 40 of file TMatrixT.h. Public Types; enum  { kWorkMax = 100; };  ; enum  EMatrixCreatorsOp1 { ;   kZero; , kUnit; , kTransposed; , kInverted; , ;   kAtA. };  ; enum  EMatrixCreatorsOp2 { ;   kMult; , kTransposeMult; , kInvMult; , kMultTranspose; , ;   kPlus; , kMinus. };  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  . Public Member Functions;  TMatrixT ();  ;  TMatrixT (const TMatrixT< Element > &a, EMatrixCreatorsOp2 op, const TMatrixT< Element > &b);  Constructor of matrix applying a specific operation to two prototypes. ;  ;  TMatrixT (const TMatrixT< Element > &a, EMatrixCreatorsOp2 op, const TMatrixTSym< Element > &b);  Constructor of matrix applying a specific operation to two prototypes. ;  ;  TMatrixT (const TMatrixT< Element > &another);  Copy constructor. ;  ; temp",MatchSource.WIKI,doc/master/classTMatrixT.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMatrixT.html
Security,hash,hash," Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Returns name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual const char * GetTitle () const;  Returns title of object. ;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; virtual ULong_t Hash () const;  Return hash value for this object. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns kTRUE if object inherits from class ""classname"". ;  ; virtual Bool_t InheritsFrom (const TClass *cl) const;  Returns kTRUE if object inherits from TClass cl. ;  ; virtual void Inspect () const;  Dump contents of this object in a graphics canvas. ;  ; void InvertBit (UInt_t f);  ; Bool_t IsDestructed () const;  IsDestructed. ;  ; virtual Bool_t IsEqual (const TObject *obj) const;  Default equal comparison (objects are equal if they have the same address in memory). ;  ; virtual Bool_t IsFolder () const;  Returns kTRUE in case object contains browsable objects (like containers or lists of other objects). ;  ; R__ALWAYS_INLINE Bool_t",MatchSource.WIKI,doc/master/classTMatrixT.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMatrixT.html
Availability,error,error," the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Return",MatchSource.WIKI,doc/master/classTMatrixTBase.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMatrixTBase.html
Integrability,message,message," the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Return",MatchSource.WIKI,doc/master/classTMatrixTBase.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMatrixTBase.html
Modifiability,inherit,inherited," TMatrixTBase< Element > & SetRowIndexArray (Int_t *data)=0;  ; virtual TMatrixTBase< Element > & SetSub (Int_t row_lwb, Int_t col_lwb, const TMatrixTBase< Element > &source)=0;  ; Element SetTol (Element tol);  ; virtual TMatrixTBase< Element > & Shift (Int_t row_shift, Int_t col_shift);  Shift the row index by adding row_shift and the column index by adding col_shift, respectively. ;  ; virtual TMatrixTBase< Element > & Sqr ();  Square each element of the matrix. ;  ; virtual TMatrixTBase< Element > & Sqrt ();  Take square root of all elements. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TMatrixTBase<Element>. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual Element Sum () const;  Compute sum of elements. ;  ; virtual TMatrixTBase< Element > & UnitMatrix ();  Make a unit matrix (matrix need not be a square one). ;  ; virtual TMatrixTBase< Element > & Zero ();  Set matrix elements to zero. ;  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object)",MatchSource.WIKI,doc/master/classTMatrixTBase.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMatrixTBase.html
Security,hash,hash," Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Returns name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual const char * GetTitle () const;  Returns title of object. ;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; virtual ULong_t Hash () const;  Return hash value for this object. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns kTRUE if object inherits from class ""classname"". ;  ; virtual Bool_t InheritsFrom (const TClass *cl) const;  Returns kTRUE if object inherits from TClass cl. ;  ; virtual void Inspect () const;  Dump contents of this object in a graphics canvas. ;  ; void InvertBit (UInt_t f);  ; Bool_t IsDestructed () const;  IsDestructed. ;  ; virtual Bool_t IsEqual (const TObject *obj) const;  Default equal comparison (objects are equal if they have the same address in memory). ;  ; virtual Bool_t IsFolder () const;  Returns kTRUE in case object contains browsable objects (like containers or lists of other objects). ;  ; R__ALWAYS_INLINE Bool_t",MatchSource.WIKI,doc/master/classTMatrixTBase.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMatrixTBase.html
Modifiability,inherit,inherited,"t of the matrix column with the corresponding element of column mc. ;  ; void operator*= (Element val);  Multiply every element of the matrix column with val. ;  ; void operator+= (const TMatrixTColumn_const< Element > &c);  Add to every element of the matrix row the corresponding element of row mc. ;  ; void operator+= (Element val);  Add val to every element of the matrix column. ;  ; TMatrixTColumn< Element > & operator= (const TMatrixTColumn< Element > &c);  ; void operator= (const TMatrixTColumn_const< Element > &c);  Assignment operator. ;  ; void operator= (const TVectorT< Element > &vec);  Assign a vector to a matrix column. ;  ; void operator= (Element val);  ; void operator= (std::initializer_list< Element > l);  Assign element of the matrix column using given initializer list. ;  ; Element & operator[] (Int_t i);  ; const Element & operator[] (Int_t i) const;  ; void Streamer (TBuffer &) override;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TMatrixTColumn_const< Element >;  TMatrixTColumn_const ();  ;  TMatrixTColumn_const (const TMatrixT< Element > &matrix, Int_t col);  Constructor with column ""col"" of matrix. ;  ;  TMatrixTColumn_const (const TMatrixTColumn_const< Element > &trc);  ;  TMatrixTColumn_const (const TMatrixTSym< Element > &matrix, Int_t col);  Constructor with column ""col"" of matrix. ;  ; virtual ~TMatrixTColumn_const ();  ; Int_t GetColIndex () const;  ; Int_t GetInc () const;  ; const TMatrixTBase< Element > * GetMatrix () const;  ; const Element * GetPtr () const;  ; const Element & operator() (Int_t i) const;  ; TMatrixTColumn_const< Element > & operator= (const TMatrixTColumn_const< Element > &trc);  ; const Element & operator[] (Int_t i) const;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char",MatchSource.WIKI,doc/master/classTMatrixTColumn.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMatrixTColumn.html
Modifiability,inherit,inherited,oid operator*= (const TMatrixTDiag_const< Element > &d);  Multiply every element of the matrix diagonal with the corresponding element of diagonal md. ;  ; void operator*= (Element val);  Assign val to every element of the matrix diagonal. ;  ; void operator+= (const TMatrixTDiag_const< Element > &d);  Add to every element of the matrix diagonal the corresponding element of diagonal md. ;  ; void operator+= (Element val);  Assign val to every element of the matrix diagonal. ;  ; TMatrixTDiag< Element > & operator= (const TMatrixTDiag< Element > &d);  ; void operator= (const TMatrixTDiag_const< Element > &d);  Assignment operator. ;  ; void operator= (const TVectorT< Element > &vec);  Assign a vector to the matrix diagonal. ;  ; void operator= (Element val);  Assign val to every element of the matrix diagonal. ;  ; Element & operator[] (Int_t i);  ; const Element & operator[] (Int_t i) const;  ; void Streamer (TBuffer &) override;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TMatrixTDiag_const< Element >;  TMatrixTDiag_const ();  ;  TMatrixTDiag_const (const TMatrixT< Element > &matrix);  Constructor. ;  ;  TMatrixTDiag_const (const TMatrixTDiag_const< Element > &trc);  ;  TMatrixTDiag_const (const TMatrixTSym< Element > &matrix);  Constructor. ;  ; virtual ~TMatrixTDiag_const ();  ; Int_t GetInc () const;  ; const TMatrixTBase< Element > * GetMatrix () const;  ; Int_t GetNdiags () const;  ; const Element * GetPtr () const;  ; const Element & operator() (Int_t i) const;  ; TMatrixTDiag_const< Element > & operator= (const TMatrixTDiag_const< Element > &trc);  ; const Element & operator[] (Int_t i) const;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TMatr,MatchSource.WIKI,doc/master/classTMatrixTDiag.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMatrixTDiag.html
Availability,error,error,"object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Return",MatchSource.WIKI,doc/master/classTMatrixTLazy.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMatrixTLazy.html
Integrability,message,message,"object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Return",MatchSource.WIKI,doc/master/classTMatrixTLazy.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMatrixTLazy.html
Modifiability,inherit,inherited,"atrix Linear Algebra. ; template<class Element>; class TMatrixTLazy< Element >Templates of Lazy Matrix classes. ; TMatrixTLazy; TMatrixTSymLazy; THaarMatrixT; THilbertMatrixT; THilbertMatrixTSym; THaarMatrixTDefinition TMatrixTLazy.h:122; THilbertMatrixTSymDefinition TMatrixTLazy.h:161; THilbertMatrixTDefinition TMatrixTLazy.h:141; TMatrixTLazyTemplates of Lazy Matrix classes.Definition TMatrixTLazy.h:43; TMatrixTSymLazyDefinition TMatrixTLazy.h:86. Definition at line 43 of file TMatrixTLazy.h. Public Member Functions;  TMatrixTLazy ();  ;  TMatrixTLazy (Int_t nrows, Int_t ncols);  ;  TMatrixTLazy (Int_t row_lwb, Int_t row_upb, Int_t col_lwb, Int_t col_upb);  ;  ~TMatrixTLazy () override;  ; Int_t GetColLwb () const;  ; Int_t GetColUpb () const;  ; Int_t GetRowLwb () const;  ; Int_t GetRowUpb () const;  ; TClass * IsA () const override;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) c",MatchSource.WIKI,doc/master/classTMatrixTLazy.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMatrixTLazy.html
Security,hash,hash," Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Returns name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual const char * GetTitle () const;  Returns title of object. ;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; virtual ULong_t Hash () const;  Return hash value for this object. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns kTRUE if object inherits from class ""classname"". ;  ; virtual Bool_t InheritsFrom (const TClass *cl) const;  Returns kTRUE if object inherits from TClass cl. ;  ; virtual void Inspect () const;  Dump contents of this object in a graphics canvas. ;  ; void InvertBit (UInt_t f);  ; Bool_t IsDestructed () const;  IsDestructed. ;  ; virtual Bool_t IsEqual (const TObject *obj) const;  Default equal comparison (objects are equal if they have the same address in memory). ;  ; virtual Bool_t IsFolder () const;  Returns kTRUE in case object contains browsable objects (like containers or lists of other objects). ;  ; R__ALWAYS_INLINE Bool_t",MatchSource.WIKI,doc/master/classTMatrixTLazy.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMatrixTLazy.html
Modifiability,inherit,inherited,"  ; Element & operator() (Int_t i);  ; const Element & operator() (Int_t i) const;  ; void operator*= (const TMatrixTRow_const< Element > &r);  Multiply every element of the matrix row with the corresponding element of row r. ;  ; void operator*= (Element val);  Multiply every element of the matrix row with val. ;  ; void operator+= (const TMatrixTRow_const< Element > &r);  Add to every element of the matrix row the corresponding element of row r. ;  ; void operator+= (Element val);  Add val to every element of the matrix row. ;  ; TMatrixTRow< Element > & operator= (const TMatrixTRow< Element > &r);  ; void operator= (const TMatrixTRow_const< Element > &r);  Assignment operator. ;  ; void operator= (const TVectorT< Element > &vec);  Assign a vector to a matrix row. ;  ; void operator= (std::initializer_list< Element > l);  ; Element & operator[] (Int_t i);  ; const Element & operator[] (Int_t i) const;  ; void Streamer (TBuffer &) override;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TMatrixTRow_const< Element >;  TMatrixTRow_const ();  ;  TMatrixTRow_const (const TMatrixT< Element > &matrix, Int_t row);  Constructor with row ""row"" of matrix. ;  ;  TMatrixTRow_const (const TMatrixTRow_const< Element > &trc);  ;  TMatrixTRow_const (const TMatrixTSym< Element > &matrix, Int_t row);  Constructor with row ""row"" of symmetric matrix. ;  ; virtual ~TMatrixTRow_const ();  ; Int_t GetInc () const;  ; const TMatrixTBase< Element > * GetMatrix () const;  ; const Element * GetPtr () const;  ; Int_t GetRowIndex () const;  ; const Element & operator() (Int_t i) const;  ; TMatrixTRow_const< Element > & operator= (const TMatrixTRow_const< Element > &trc);  ; const Element & operator[] (Int_t i) const;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static",MatchSource.WIKI,doc/master/classTMatrixTRow.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMatrixTRow.html
Availability,error,error," the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Return",MatchSource.WIKI,doc/master/classTMatrixTSparse.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMatrixTSparse.html
Energy Efficiency,allocate,allocated,"TMatrixTSparse ();  ;  TMatrixTSparse (const TMatrixT< Element > &a, EMatrixCreatorsOp2 op, const TMatrixTSparse< Element > &b);  Create a matrix applying a specific operation to two prototypes. ;  ;  TMatrixTSparse (const TMatrixT< Element > &another);  ;  TMatrixTSparse (const TMatrixTSparse< Element > &a, EMatrixCreatorsOp2 op, const TMatrixT< Element > &b);  Create a matrix applying a specific operation to two prototypes. ;  ;  TMatrixTSparse (const TMatrixTSparse< Element > &a, EMatrixCreatorsOp2 op, const TMatrixTSparse< Element > &b);  Create a matrix applying a specific operation to two prototypes. ;  ;  TMatrixTSparse (const TMatrixTSparse< Element > &another);  ;  TMatrixTSparse (EMatrixCreatorsOp1 op, const TMatrixTSparse< Element > &prototype);  Create a matrix applying a specific operation to the prototype. ;  ;  TMatrixTSparse (Int_t nrows, Int_t ncols);  Space is allocated for row/column indices and data, but the sparse structure information has still to be set ! ;  ;  TMatrixTSparse (Int_t row_lwb, Int_t row_upb, Int_t col_lwb, Int_t col_upb, Int_t *rowptr, Int_t *col, Element *data);  Space is allocated for row/column indices and data. ;  ;  TMatrixTSparse (Int_t row_lwb, Int_t row_upb, Int_t col_lwb, Int_t col_upb, Int_t nr_nonzeros, Int_t *row, Int_t *col, Element *data);  Space is allocated for row/column indices and data. ;  ;  TMatrixTSparse (Int_t row_lwb, Int_t row_upb, Int_t col_lwb, Int_t col_upb, Int_t nr_nonzeros=0);  Space is allocated for row/column indices and data, but the sparse structure information has still to be set ! ;  ;  ~TMatrixTSparse () override;  ; TClass * Class ();  ; void Clear (Option_t *="""") override;  ; Element ColNorm () const override;  Column matrix norm, MAX{ SUM{ |M(i,j)|, over i}, over j}. ;  ; void ExtractRow (Int_t row, Int_t col, Element *v, Int_t n=-1) const override;  Store in array v, n matrix elements of row rown starting at column coln. ;  ; const Int_t * GetColIndexArray () const override;  ; Int_t * Ge",MatchSource.WIKI,doc/master/classTMatrixTSparse.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMatrixTSparse.html
Integrability,rout,routine,"rformance. In the constructor, always the shape of the matrix has to be specified in some form . Data can be entered through the following methods :; constructor from COO matrix format TMatrixTSparse(Int_t row_lwb,Int_t row_upb,Int_t dol_lwb,; Int_t col_upb,Int_t nr_nonzeros,; Int_t *row, Int_t *col,Element *data);; TMatrixTSparse::TMatrixTSparseTMatrixTSparse()Definition TMatrixTSparse.h:83; It uses SetMatrixArray(..), see below; constructor from Harwell-Boeing (CSR) matrix format TMatrixTSparse(Int_t row_lwb,Int_t row_upb,Int_t dol_lwb,; Int_t col_upb,; Int_t *rowptr, Int_t *col,Element *data);; It copies input arrays into matrix .; copy constructors; SetMatrixArray(Int_t nr,Int_t *irow,Int_t *icol,Element *data) where it is expected that the irow,icol and data array contain nr entries . Only the entries with non-zero data[i] value are inserted. Be aware that the input data array will be modified inside the routine for doing the necessary sorting of indices !; SetMatrixArray(Int_t nr,Int_t nrows,Int_t ncols,Int_t *irow,; Int_t *icol,Element *data) where it is expected that the irow, icol and data array contain nr entries . It allows to reshape the matrix according to nrows and ncols. Only the entries with non-zero data[i] value are inserted. Be aware that the input data array will be modified inside the routine for doing the necessary sorting of indices !; TMatrixTSparse a(n,m); for(....) { a(i,j) = .... This is a very flexible method but expensive :; if no entry for slot (i,j) is found in the sparse index table it will be entered, which involves some memory management !; before invoking this method in a loop it is smart to first set the index table through a call to SetSparseIndex(..). SetSub(Int_t row_lwb,Int_t col_lwb,const TMatrixTBase &source) the matrix to be inserted at position (row_lwb,col_lwb) can be both dense or sparse . . Definition at line 36 of file TMatrixTSparse.h. Public Types; enum  EMatrixCreatorsOp1 { kZero; , kUnit; , kTransposed; , kAtA; };  ",MatchSource.WIKI,doc/master/classTMatrixTSparse.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMatrixTSparse.html
Modifiability,flexible,flexible,"wptr, Int_t *col,Element *data);; It copies input arrays into matrix .; copy constructors; SetMatrixArray(Int_t nr,Int_t *irow,Int_t *icol,Element *data) where it is expected that the irow,icol and data array contain nr entries . Only the entries with non-zero data[i] value are inserted. Be aware that the input data array will be modified inside the routine for doing the necessary sorting of indices !; SetMatrixArray(Int_t nr,Int_t nrows,Int_t ncols,Int_t *irow,; Int_t *icol,Element *data) where it is expected that the irow, icol and data array contain nr entries . It allows to reshape the matrix according to nrows and ncols. Only the entries with non-zero data[i] value are inserted. Be aware that the input data array will be modified inside the routine for doing the necessary sorting of indices !; TMatrixTSparse a(n,m); for(....) { a(i,j) = .... This is a very flexible method but expensive :; if no entry for slot (i,j) is found in the sparse index table it will be entered, which involves some memory management !; before invoking this method in a loop it is smart to first set the index table through a call to SetSparseIndex(..). SetSub(Int_t row_lwb,Int_t col_lwb,const TMatrixTBase &source) the matrix to be inserted at position (row_lwb,col_lwb) can be both dense or sparse . . Definition at line 36 of file TMatrixTSparse.h. Public Types; enum  EMatrixCreatorsOp1 { kZero; , kUnit; , kTransposed; , kAtA; };  ; enum  EMatrixCreatorsOp2 { kMult; , kMultTranspose; , kPlus; , kMinus; };  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); ",MatchSource.WIKI,doc/master/classTMatrixTSparse.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMatrixTSparse.html
Performance,perform,performance,"rse.h:40; TMatrixTSparse::fColIndexInt_t * fColIndexDefinition TMatrixTSparse.h:41; As an example how to access all sparse data elements:; for (Int_t irow = 0; irow < this->fNrows; irow++) {; const Int_t sIndex = fRowIndex[irow];; const Int_t eIndex = fRowIndex[irow+1];; for (Int_t index = sIndex; index < eIndex; index++) {; const Int_t icol = fColIndex[index];; const Element data = fElements[index];; printf(""data(%d,%d) = %.4e\n"",irow+this->fRowLwb,icol+; this->fColLwb,data);; }; }; TMatrixTBase::fColLwbInt_t fColLwbDefinition TMatrixTBase.h:93; TMatrixTBase::fRowLwbInt_t fRowLwbDefinition TMatrixTBase.h:92; TMatrixTSparse::fElementsElement * fElementsDefinition TMatrixTSparse.h:42; int; When checking whether sparse matrices are compatible (like in an assignment !), not only the shape parameters are compared but also the sparse structure through fRowIndex and fColIndex .; Several methods exist to fill a sparse matrix with data entries. Most are the same like for dense matrices but some care has to be taken with regard to performance. In the constructor, always the shape of the matrix has to be specified in some form . Data can be entered through the following methods :; constructor from COO matrix format TMatrixTSparse(Int_t row_lwb,Int_t row_upb,Int_t dol_lwb,; Int_t col_upb,Int_t nr_nonzeros,; Int_t *row, Int_t *col,Element *data);; TMatrixTSparse::TMatrixTSparseTMatrixTSparse()Definition TMatrixTSparse.h:83; It uses SetMatrixArray(..), see below; constructor from Harwell-Boeing (CSR) matrix format TMatrixTSparse(Int_t row_lwb,Int_t row_upb,Int_t dol_lwb,; Int_t col_upb,; Int_t *rowptr, Int_t *col,Element *data);; It copies input arrays into matrix .; copy constructors; SetMatrixArray(Int_t nr,Int_t *irow,Int_t *icol,Element *data) where it is expected that the irow,icol and data array contain nr entries . Only the entries with non-zero data[i] value are inserted. Be aware that the input data array will be modified inside the routine for doing the necessary sorti",MatchSource.WIKI,doc/master/classTMatrixTSparse.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMatrixTSparse.html
Security,access,access,"and column array; fColIndex[0,..,fNelems-1]: Stores the column number for each data; element != 0; dataOption_t Option_t TPoint TPoint const char GetTextMagnitude GetFillStyle GetLineColor GetLineWidth GetMarkerStyle GetTextAlign GetTextColor GetTextSize void dataDefinition TGWin32VirtualXProxy.cxx:104; indexOption_t Option_t TPoint TPoint const char GetTextMagnitude GetFillStyle GetLineColor GetLineWidth GetMarkerStyle GetTextAlign GetTextColor GetTextSize void char Point_t Rectangle_t WindowAttributes_t indexDefinition TGWin32VirtualXProxy.cxx:168; TMatrixTBase::fNelemsInt_t fNelemsDefinition TMatrixTBase.h:94; TMatrixTBase::fNrowsInt_t fNrowsDefinition TMatrixTBase.h:90; TMatrixTSparse::fRowIndexInt_t * fRowIndexDefinition TMatrixTSparse.h:40; TMatrixTSparse::fColIndexInt_t * fColIndexDefinition TMatrixTSparse.h:41; As an example how to access all sparse data elements:; for (Int_t irow = 0; irow < this->fNrows; irow++) {; const Int_t sIndex = fRowIndex[irow];; const Int_t eIndex = fRowIndex[irow+1];; for (Int_t index = sIndex; index < eIndex; index++) {; const Int_t icol = fColIndex[index];; const Element data = fElements[index];; printf(""data(%d,%d) = %.4e\n"",irow+this->fRowLwb,icol+; this->fColLwb,data);; }; }; TMatrixTBase::fColLwbInt_t fColLwbDefinition TMatrixTBase.h:93; TMatrixTBase::fRowLwbInt_t fRowLwbDefinition TMatrixTBase.h:92; TMatrixTSparse::fElementsElement * fElementsDefinition TMatrixTSparse.h:42; int; When checking whether sparse matrices are compatible (like in an assignment !), not only the shape parameters are compared but also the sparse structure through fRowIndex and fColIndex .; Several methods exist to fill a sparse matrix with data entries. Most are the same like for dense matrices but some care has to be taken with regard to performance. In the constructor, always the shape of the matrix has to be specified in some form . Data can be entered through the following methods :; constructor from COO matrix format TMatrixTSparse(Int_t row_lwb,",MatchSource.WIKI,doc/master/classTMatrixTSparse.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMatrixTSparse.html
Modifiability,inherit,inherited,". ;  ; void operator+= (const TMatrixTBase< Element > &m);  Add to every element of the submatrix the corresponding element of matrix mt. ;  ; void operator+= (const TMatrixTSub_const< Element > &s);  Add to every element of the submatrix the corresponding element of submatrix ms. ;  ; void operator+= (Element val);  Add val to every element of the sub matrix. ;  ; void operator= (const TMatrixTBase< Element > &m);  Assignment operator. ;  ; TMatrixTSub< Element > & operator= (const TMatrixTSub< Element > &s);  ; void operator= (const TMatrixTSub_const< Element > &s);  Assignment operator. ;  ; void operator= (Element val);  Assign val to every element of the sub matrix. ;  ; void Rank1Update (const TVectorT< Element > &vec, Element alpha=1.0);  Perform a rank 1 operation on the matrix: A += alpha * v * v^T. ;  ; void Streamer (TBuffer &) override;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TMatrixTSub_const< Element >;  TMatrixTSub_const ();  ;  TMatrixTSub_const (const TMatrixT< Element > &matrix, Int_t row_lwb, Int_t row_upb, Int_t col_lwb, Int_t col_upb);  make a reference to submatrix [row_lwbs..row_upbs][col_lwbs..col_upbs]; The indexing range of the reference is [0..row_upbs-row_lwbs+1][0..col_upb-col_lwbs+1] (default) ;  ;  TMatrixTSub_const (const TMatrixTSym< Element > &matrix, Int_t row_lwb, Int_t row_upb, Int_t col_lwb, Int_t col_upb);  make a reference to submatrix [row_lwbs..row_upbs][col_lwbs..col_upbs]; The indexing range of the reference is [0..row_upbs-row_lwbs+1][0..col_upb-col_lwbs+1] (default) ;  ; virtual ~TMatrixTSub_const ();  ; Int_t GetColOff () const;  ; const TMatrixTBase< Element > * GetMatrix () const;  ; Int_t GetNcols () const;  ; Int_t GetNrows () const;  ; Int_t GetRowOff () const;  ; const Element & operator() (Int_t rown, Int_t coln) const;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  . Static Public Member Functions; static TClass * Class ();  ; ",MatchSource.WIKI,doc/master/classTMatrixTSub.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMatrixTSub.html
Availability,error,error," the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Return",MatchSource.WIKI,doc/master/classTMatrixTSym.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMatrixTSym.html
Deployability,update,updated,". ROOT: TMatrixTSym< Element > Class Template Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; List of all members ; TMatrixTSym< Element > Class Template ReferenceMath » Matrix Linear Algebra. ; template<class Element>; class TMatrixTSym< Element >TMatrixTSym. ; Template class of a symmetric matrix in the linear algebra package.; See the Matrix Linear Algebra page for the documentation of the linear algebra package; Note that in this implementation both matrix element m[i][j] and m[j][i] are updated and stored in memory. However, when making the object persistent only the upper right triangle is stored. ; Definition at line 36 of file TMatrixTSym.h. Public Types; enum  { kWorkMax = 100; };  ; enum  EMatrixCreatorsOp1 { ;   kZero; , kUnit; , kTransposed; , kInverted; , ;   kAtA. };  ; enum  EMatrixCreatorsOp2 { kPlus; , kMinus; };  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  . Public Member Functions;  TMatrixTSym ();  ;  TMatrixTSym (const TMatrixTSym< Element > &a, EMatrixCreatorsOp2 op, const TMatrixTSym< Element > &b);  ;  TMatrixTSym (const TMatrixTSym< Element > &another);  ; template<class Element2 > ;  TMatrixTSym (const TMatrixTSym< Element2 > &another);  ;  TMatrixTSym (const TMatr",MatchSource.WIKI,doc/master/classTMatrixTSym.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMatrixTSym.html
Energy Efficiency,efficient,efficient,"&source) override;  Insert matrix source starting at [row_lwb][col_lwb] in a symmetric fashion, thereby overwriting the part [row_lwb..row_lwb+nrows_source][row_lwb..row_lwb+nrows_source];. ;  ; TMatrixTBase< Element > & Shift (Int_t row_shift, Int_t col_shift) override;  Shift the row index by adding row_shift and the column index by adding col_shift, respectively. ;  ; TMatrixTSym< Element > & Similarity (const TMatrixT< Element > &n);  Calculate B * (*this) * B^T , final matrix will be (nrowsb x nrowsb) This is a similarity transform when B is orthogonal . ;  ; TMatrixTSym< Element > & Similarity (const TMatrixTSym< Element > &n);  Calculate B * (*this) * B^T , final matrix will be (nrowsb x nrowsb) This is a similarity transform when B is orthogonal . ;  ; Element Similarity (const TVectorT< Element > &v) const;  Calculate scalar v * (*this) * v^T. ;  ; TMatrixTSym< Element > & SimilarityT (const TMatrixT< Element > &n);  Calculate B^T * (*this) * B , final matrix will be (ncolsb x ncolsb) It is more efficient than applying the actual multiplication because this routine realizes that the final matrix is symmetric . ;  ; void Streamer (TBuffer &) override;  Stream an object of class TMatrixTSym. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; TMatrixTSym< Element > & T ();  ; void TMult (const TMatrixT< Element > &a);  Replace this matrix with C such that C = A' * A. ;  ; void TMult (const TMatrixTSym< Element > &a);  Matrix multiplication, with A symmetric Replace this matrix with C such that C = A' * A = A * A = A * A'. ;  ; TMatrixTSym< Element > & Transpose (const TMatrixTSym< Element > &source);  Transpose a matrix. ;  ; const TMatrixTSym< Element > & Use (const TMatrixTSym< Element > &a) const;  ; const TMatrixTSym< Element > & Use (Int_t nrows, const Element *data) const;  ; TMatrixTSym< Element > & Use (Int_t nrows, Element *data);  ; const TMatrixTSym< Element > & Use (Int_t row_lwb, Int_t row_upb, const Element *data) const;  ; TMa",MatchSource.WIKI,doc/master/classTMatrixTSym.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMatrixTSym.html
Integrability,depend,depends,"t Determinant () const override;  ; void Determinant (Double_t &d1, Double_t &d2) const override;  ; const TMatrixT< Element > EigenVectors (TVectorT< Element > &eigenValues) const;  Return a matrix containing the eigen-vectors ordered by descending eigen-values. ;  ; const Int_t * GetColIndexArray () const override;  ; Int_t * GetColIndexArray () override;  ; const Element * GetMatrixArray () const override;  ; Element * GetMatrixArray () override;  ; const Int_t * GetRowIndexArray () const override;  ; Int_t * GetRowIndexArray () override;  ; TMatrixTSym< Element > GetSub (Int_t row_lwb, Int_t row_upb, Int_t col_lwb, Int_t col_upb, Option_t *option=""S"") const;  ; TMatrixTBase< Element > & GetSub (Int_t row_lwb, Int_t row_upb, Int_t col_lwb, Int_t col_upb, TMatrixTBase< Element > &target, Option_t *option=""S"") const override;  Get submatrix [row_lwb..row_upb][col_lwb..col_upb]; The indexing range of the returned matrix depends on the argument option: ;  ; TMatrixTSym< Element > & GetSub (Int_t row_lwb, Int_t row_upb, TMatrixTSym< Element > &target, Option_t *option=""S"") const;  Get submatrix [row_lwb..row_upb][row_lwb..row_upb]; The indexing range of the returned matrix depends on the argument option: ;  ; TMatrixTSym< Element > & Invert (Double_t *det=nullptr);  Invert the matrix and calculate its determinant Notice that the LU decomposition is used instead of Bunch-Kaufman Bunch-Kaufman guarantees a symmetric inverted matrix but is slower than LU . ;  ; TMatrixTSym< Element > & InvertFast (Double_t *det=nullptr);  Invert the matrix and calculate its determinant. ;  ; TClass * IsA () const override;  ; Bool_t IsSymmetric () const override;  Check whether matrix is symmetric. ;  ; void Minus (const TMatrixTSym< Element > &a, const TMatrixTSym< Element > &b);  Symmetric matrix subtraction. Replace this matrix with C such that C = A - B. ;  ; void Mult (const TMatrixTSym< Element > &a);  ; Element operator() (Int_t rown, Int_t coln) const override;  ; Element & operat",MatchSource.WIKI,doc/master/classTMatrixTSym.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMatrixTSym.html
Modifiability,inherit,inherited,"g...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; List of all members ; TMatrixTSym< Element > Class Template ReferenceMath » Matrix Linear Algebra. ; template<class Element>; class TMatrixTSym< Element >TMatrixTSym. ; Template class of a symmetric matrix in the linear algebra package.; See the Matrix Linear Algebra page for the documentation of the linear algebra package; Note that in this implementation both matrix element m[i][j] and m[j][i] are updated and stored in memory. However, when making the object persistent only the upper right triangle is stored. ; Definition at line 36 of file TMatrixTSym.h. Public Types; enum  { kWorkMax = 100; };  ; enum  EMatrixCreatorsOp1 { ;   kZero; , kUnit; , kTransposed; , kInverted; , ;   kAtA. };  ; enum  EMatrixCreatorsOp2 { kPlus; , kMinus; };  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  . Public Member Functions;  TMatrixTSym ();  ;  TMatrixTSym (const TMatrixTSym< Element > &a, EMatrixCreatorsOp2 op, const TMatrixTSym< Element > &b);  ;  TMatrixTSym (const TMatrixTSym< Element > &another);  ; template<class Element2 > ;  TMatrixTSym (const TMatrixTSym< Element2 > &another);  ;  TMatrixTSym (const TMatrixTSymLazy< Element > &lazy_constructor);  ;  TMatrixTSym (EMatrixCreatorsOp1 op, const TMatrixT< Element ",MatchSource.WIKI,doc/master/classTMatrixTSym.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMatrixTSym.html
Security,hash,hash," Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Returns name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual const char * GetTitle () const;  Returns title of object. ;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; virtual ULong_t Hash () const;  Return hash value for this object. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns kTRUE if object inherits from class ""classname"". ;  ; virtual Bool_t InheritsFrom (const TClass *cl) const;  Returns kTRUE if object inherits from TClass cl. ;  ; virtual void Inspect () const;  Dump contents of this object in a graphics canvas. ;  ; void InvertBit (UInt_t f);  ; Bool_t IsDestructed () const;  IsDestructed. ;  ; virtual Bool_t IsEqual (const TObject *obj) const;  Default equal comparison (objects are equal if they have the same address in memory). ;  ; virtual Bool_t IsFolder () const;  Returns kTRUE in case object contains browsable objects (like containers or lists of other objects). ;  ; R__ALWAYS_INLINE Bool_t",MatchSource.WIKI,doc/master/classTMatrixTSym.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMatrixTSym.html
Availability,error,error,"object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Return",MatchSource.WIKI,doc/master/classTMatrixTSymLazy.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMatrixTSymLazy.html
Integrability,message,message,"object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Return",MatchSource.WIKI,doc/master/classTMatrixTSymLazy.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMatrixTSymLazy.html
Modifiability,inherit,inherited,". ROOT: TMatrixTSymLazy< Element > Class Template Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; Private Member Functions |; Friends |; List of all members ; TMatrixTSymLazy< Element > Class Template Referenceabstract. ; template<class Element>; class TMatrixTSymLazy< Element >; Definition at line 86 of file TMatrixTLazy.h. Public Member Functions;  TMatrixTSymLazy ();  ;  TMatrixTSymLazy (Int_t nrows);  ;  TMatrixTSymLazy (Int_t row_lwb, Int_t row_upb);  ;  ~TMatrixTSymLazy () override;  ; Int_t GetRowLwb () const;  ; Int_t GetRowUpb () const;  ; TClass * IsA () const override;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  ",MatchSource.WIKI,doc/master/classTMatrixTSymLazy.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMatrixTSymLazy.html
Security,hash,hash," Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Returns name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual const char * GetTitle () const;  Returns title of object. ;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; virtual ULong_t Hash () const;  Return hash value for this object. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns kTRUE if object inherits from class ""classname"". ;  ; virtual Bool_t InheritsFrom (const TClass *cl) const;  Returns kTRUE if object inherits from TClass cl. ;  ; virtual void Inspect () const;  Dump contents of this object in a graphics canvas. ;  ; void InvertBit (UInt_t f);  ; Bool_t IsDestructed () const;  IsDestructed. ;  ; virtual Bool_t IsEqual (const TObject *obj) const;  Default equal comparison (objects are equal if they have the same address in memory). ;  ; virtual Bool_t IsFolder () const;  Returns kTRUE in case object contains browsable objects (like containers or lists of other objects). ;  ; R__ALWAYS_INLINE Bool_t",MatchSource.WIKI,doc/master/classTMatrixTSymLazy.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMatrixTSymLazy.html
Availability,error,error,"object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Return",MatchSource.WIKI,doc/master/classTMehrotraSolver.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMehrotraSolver.html
Energy Efficiency,monitor,monitor,". ROOT: TMehrotraSolver Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Attributes |; List of all members ; TMehrotraSolver Class Reference. ; Derived class of TQpSolverBase implementing the original Mehrotra predictor-corrector algorithm. ; Definition at line 55 of file TMehrotraSolver.h. Public Member Functions;  TMehrotraSolver ();  Default constructor. ;  ;  TMehrotraSolver (const TMehrotraSolver &another);  Copy constructor. ;  ;  TMehrotraSolver (TQpProbBase *of, TQpDataBase *prob, Int_t verbose=0);  Constructor. ;  ;  ~TMehrotraSolver () override;  Deconstructor. ;  ; void DefMonitor (TQpDataBase *data, TQpVar *vars, TQpResidual *resids, Double_t alpha, Double_t sigma, Int_t i, Double_t mu, Int_t status_code, Int_t level) override;  Print information about the optimization process and monitor the convergence status of thye algorithm. ;  ; TClass * IsA () const override;  ; TMehrotraSolver & operator= (const TMehrotraSolver &source);  Assignment operator. ;  ; Int_t Solve (TQpDataBase *prob, TQpVar *iterate, TQpResidual *resid) override;  Solve the quadratic programming problem as formulated through prob, store the final solution in iterate->fX . ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TQpSolverBase;  TQpSolverBase ();  Default constructor. ;  ;  TQpSolverBase (const TQpSolverBase &another);  Copy constructor. ;  ;  ~TQpSolverBase () override;  Deconstructor. ;  ; Double_t DataNorm ();  ; virtual void DefStart (TQpProbBase *formulation, TQpVar *iterate, TQpDataBase *prob, TQpResidual *resid, TQpVar *step);  Default starting point. ;  ; virtual Int_t DefStatus (TQpDataBase *data, TQpVar *vars, TQpResidual *resids, Int_t i, Double_t mu, Int_t level);  Default status method. ;  ",MatchSource.WIKI,doc/master/classTMehrotraSolver.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMehrotraSolver.html
Integrability,message,message,"object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Return",MatchSource.WIKI,doc/master/classTMehrotraSolver.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMehrotraSolver.html
Modifiability,inherit,inherited,"er ();  Default constructor. ;  ;  TMehrotraSolver (const TMehrotraSolver &another);  Copy constructor. ;  ;  TMehrotraSolver (TQpProbBase *of, TQpDataBase *prob, Int_t verbose=0);  Constructor. ;  ;  ~TMehrotraSolver () override;  Deconstructor. ;  ; void DefMonitor (TQpDataBase *data, TQpVar *vars, TQpResidual *resids, Double_t alpha, Double_t sigma, Int_t i, Double_t mu, Int_t status_code, Int_t level) override;  Print information about the optimization process and monitor the convergence status of thye algorithm. ;  ; TClass * IsA () const override;  ; TMehrotraSolver & operator= (const TMehrotraSolver &source);  Assignment operator. ;  ; Int_t Solve (TQpDataBase *prob, TQpVar *iterate, TQpResidual *resid) override;  Solve the quadratic programming problem as formulated through prob, store the final solution in iterate->fX . ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TQpSolverBase;  TQpSolverBase ();  Default constructor. ;  ;  TQpSolverBase (const TQpSolverBase &another);  Copy constructor. ;  ;  ~TQpSolverBase () override;  Deconstructor. ;  ; Double_t DataNorm ();  ; virtual void DefStart (TQpProbBase *formulation, TQpVar *iterate, TQpDataBase *prob, TQpResidual *resid, TQpVar *step);  Default starting point. ;  ; virtual Int_t DefStatus (TQpDataBase *data, TQpVar *vars, TQpResidual *resids, Int_t i, Double_t mu, Int_t level);  Default status method. ;  ; virtual void DoMonitor (TQpDataBase *data, TQpVar *vars, TQpResidual *resids, Double_t alpha, Double_t sigma, Int_t i, Double_t mu, Int_t stop_code, Int_t level);  Monitor progress / convergence aat each interior-point iteration. ;  ; virtual Int_t DoStatus (TQpDataBase *data, TQpVar *vars, TQpResidual *resids, Int_t i, Double_t mu, Int_t level);  Tests for termination. ;  ; virtual void DumbStart (TQpProbBase *formulation, TQpVar *iterate, TQpDataBase *prob, TQpResi",MatchSource.WIKI,doc/master/classTMehrotraSolver.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMehrotraSolver.html
Performance,optimiz,optimization,". ROOT: TMehrotraSolver Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Attributes |; List of all members ; TMehrotraSolver Class Reference. ; Derived class of TQpSolverBase implementing the original Mehrotra predictor-corrector algorithm. ; Definition at line 55 of file TMehrotraSolver.h. Public Member Functions;  TMehrotraSolver ();  Default constructor. ;  ;  TMehrotraSolver (const TMehrotraSolver &another);  Copy constructor. ;  ;  TMehrotraSolver (TQpProbBase *of, TQpDataBase *prob, Int_t verbose=0);  Constructor. ;  ;  ~TMehrotraSolver () override;  Deconstructor. ;  ; void DefMonitor (TQpDataBase *data, TQpVar *vars, TQpResidual *resids, Double_t alpha, Double_t sigma, Int_t i, Double_t mu, Int_t status_code, Int_t level) override;  Print information about the optimization process and monitor the convergence status of thye algorithm. ;  ; TClass * IsA () const override;  ; TMehrotraSolver & operator= (const TMehrotraSolver &source);  Assignment operator. ;  ; Int_t Solve (TQpDataBase *prob, TQpVar *iterate, TQpResidual *resid) override;  Solve the quadratic programming problem as formulated through prob, store the final solution in iterate->fX . ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TQpSolverBase;  TQpSolverBase ();  Default constructor. ;  ;  TQpSolverBase (const TQpSolverBase &another);  Copy constructor. ;  ;  ~TQpSolverBase () override;  Deconstructor. ;  ; Double_t DataNorm ();  ; virtual void DefStart (TQpProbBase *formulation, TQpVar *iterate, TQpDataBase *prob, TQpResidual *resid, TQpVar *step);  Default starting point. ;  ; virtual Int_t DefStatus (TQpDataBase *data, TQpVar *vars, TQpResidual *resids, Int_t i, Double_t mu, Int_t level);  Default status method. ;  ",MatchSource.WIKI,doc/master/classTMehrotraSolver.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMehrotraSolver.html
Safety,predict,predictor-corrector,". ROOT: TMehrotraSolver Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Attributes |; List of all members ; TMehrotraSolver Class Reference. ; Derived class of TQpSolverBase implementing the original Mehrotra predictor-corrector algorithm. ; Definition at line 55 of file TMehrotraSolver.h. Public Member Functions;  TMehrotraSolver ();  Default constructor. ;  ;  TMehrotraSolver (const TMehrotraSolver &another);  Copy constructor. ;  ;  TMehrotraSolver (TQpProbBase *of, TQpDataBase *prob, Int_t verbose=0);  Constructor. ;  ;  ~TMehrotraSolver () override;  Deconstructor. ;  ; void DefMonitor (TQpDataBase *data, TQpVar *vars, TQpResidual *resids, Double_t alpha, Double_t sigma, Int_t i, Double_t mu, Int_t status_code, Int_t level) override;  Print information about the optimization process and monitor the convergence status of thye algorithm. ;  ; TClass * IsA () const override;  ; TMehrotraSolver & operator= (const TMehrotraSolver &source);  Assignment operator. ;  ; Int_t Solve (TQpDataBase *prob, TQpVar *iterate, TQpResidual *resid) override;  Solve the quadratic programming problem as formulated through prob, store the final solution in iterate->fX . ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TQpSolverBase;  TQpSolverBase ();  Default constructor. ;  ;  TQpSolverBase (const TQpSolverBase &another);  Copy constructor. ;  ;  ~TQpSolverBase () override;  Deconstructor. ;  ; Double_t DataNorm ();  ; virtual void DefStart (TQpProbBase *formulation, TQpVar *iterate, TQpDataBase *prob, TQpResidual *resid, TQpVar *step);  Default starting point. ;  ; virtual Int_t DefStatus (TQpDataBase *data, TQpVar *vars, TQpResidual *resids, Int_t i, Double_t mu, Int_t level);  Default status method. ;  ",MatchSource.WIKI,doc/master/classTMehrotraSolver.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMehrotraSolver.html
Security,hash,hash," Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Returns name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual const char * GetTitle () const;  Returns title of object. ;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; virtual ULong_t Hash () const;  Return hash value for this object. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns kTRUE if object inherits from class ""classname"". ;  ; virtual Bool_t InheritsFrom (const TClass *cl) const;  Returns kTRUE if object inherits from TClass cl. ;  ; virtual void Inspect () const;  Dump contents of this object in a graphics canvas. ;  ; void InvertBit (UInt_t f);  ; Bool_t IsDestructed () const;  IsDestructed. ;  ; virtual Bool_t IsEqual (const TObject *obj) const;  Default equal comparison (objects are equal if they have the same address in memory). ;  ; virtual Bool_t IsFolder () const;  Returns kTRUE in case object contains browsable objects (like containers or lists of other objects). ;  ; R__ALWAYS_INLINE Bool_t",MatchSource.WIKI,doc/master/classTMehrotraSolver.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMehrotraSolver.html
Security,access,accessing,". ROOT: TMemberInspector Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Classes |; Public Types |; Public Member Functions |; Static Public Member Functions |; Private Member Functions |; Private Attributes |; List of all members ; TMemberInspector Class ReferenceCore ROOT classes » Base ROOT classes. ; Abstract base class for accessing the data-members of a class. ; Classes derived from this class can be given as argument to the ShowMembers() methods of ROOT classes. This feature facilitates the writing of class browsers and inspectors. ; Definition at line 31 of file TMemberInspector.h. Classes; class  TParentBuf;  . Public Types; enum  EObjectPointerState { kUnset; , kNoObjectGiven; , kValidObjectGiven; };  . Public Member Functions;  TMemberInspector ();  ; virtual ~TMemberInspector ();  ; void AddToParent (const char *name);  ; void GenericShowMembers (const char *topClassName, const void *obj, Bool_t transientMember);  ; EObjectPointerState GetObjectValidity () const;  ; const char * GetParent () const;  ; Ssiz_t GetParentLen () const;  ; virtual void Inspect (TClass *cl, const char *parent, const char *name, const void *addr);  ; virtual void Inspect (TClass *cl, const char *parent, const char *name, const void *addr, Bool_t);  ; void InspectMember (const char *topclassname, const void *pobj, const char *name, Bool_t transient);  ; template<class T > ; void InspectMember (const T &obj, const char *name, Bool_t isTransient);  ; void InspectMember (const TObject &obj, const char *name, Bool_t isTransient);  ; void InspectMember (TClass *cl, const void *pobj, const char *name, Bool_t isTransient);  ; virtual TClass * IsA () const;  ; virtual Bool_t IsTreatingNonAccessibleTypes ();  ; void RemoveFromParent (Ssiz_t startingAt);  ; void SetObjectValidity (EObjectPointerState val);  ; virtual void Streamer (TBuffer &);  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  . Static P",MatchSource.WIKI,doc/master/classTMemberInspector.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMemberInspector.html
Availability,alive,alive,"eCompiledDefault, Long64_t defBlockSize=0LL);  Usual Constructor. ;  ;  TMemFile (const char *name, std::unique_ptr< TBufferFile > buffer);  Constructor to create a read-only TMemFile using an std::unique_ptr<TBufferFile> ;  ;  TMemFile (const TMemFile &orig);  Copying the content of the TMemFile into another TMemFile. ;  ;  ~TMemFile () override;  Close and clean-up file. ;  ; virtual void CopyTo (TBuffer &tobuf) const;  Copy the binary representation of the TMemFile into the TBuffer tobuf. ;  ; virtual Long64_t CopyTo (void *to, Long64_t maxsize) const;  Copy the binary representation of the TMemFile into the memory area starting at 'to' and of length at most 'maxsize' returns the number of bytes actually copied. ;  ; Long64_t GetSize () const override;  Return the current size of the memory file. ;  ; TClass * IsA () const override;  ; void Print (Option_t *option="""") const override;  Print all objects in the file. ;  ; void ResetAfterMerge (TFileMergeInfo *) override;  Wipe all the data from the permanent buffer but keep, the in-memory object alive. ;  ; void ResetErrno () const override;  Simply calls TSystem::ResetErrno(). ;  ; void Streamer (TBuffer &) override;  Stream a TFile object. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TFile;  TFile ();  File default Constructor. ;  ;  TFile (const char *fname, Option_t *option="""", const char *ftitle="""", Int_t compress=ROOT::RCompressionSetting::EDefaults::kUseCompiledDefault);  Opens or creates a local ROOT file. ;  ;  ~TFile () override;  File destructor. ;  ; void Close (Option_t *option="""") override;  Close a file. ;  ; void Copy (TObject &) const override;  Copy this to obj. ;  ; virtual Bool_t Cp (const char *dst, Bool_t progressbar=kTRUE, UInt_t buffersize=1000000);  Allows to copy this file to the dst URL. ;  ; virtual TKey * CreateKey (TDirectory *mother, const TObject *obj, const char *name, Int_t bufsize);  Creates key for object and conver",MatchSource.WIKI,doc/master/classTMemFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMemFile.html
Energy Efficiency,allocate,allocated,"ddress of) a shared pointer to the struct holding the actual thread local gDirectory pointer and the atomic_flag for its lock. ;  . #include <TMemFile.h>. Inheritance diagram for TMemFile:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Member Typedef Documentation. ◆ ExternalDataPtr_t. using TMemFile::ExternalDataPtr_t = std::shared_ptr<const std::vector<char> >. Definition at line 21 of file TMemFile.h. Member Enumeration Documentation. ◆ EMode. enum class TMemFile::EMode. strongprotected . EnumeratorkCreate ; kRecreate ; kUpdate ; kRead . Definition at line 75 of file TMemFile.h. Constructor & Destructor Documentation. ◆ TMemFile() [1/6]. TMemFile::TMemFile ; (; const char * ; path, . Option_t * ; option = """", . const char * ; ftitle = """", . Int_t ; compress = ROOT::RCompressionSetting::EDefaults::kUseCompiledDefault, . Long64_t ; defBlockSize = 0LL . ). Usual Constructor. ; The defBlockSize parameter defines the size of the blocks of memory allocated when expanding the underlying TMemFileBuffer. If the value 0 is passed, the default block size, fgDefaultBlockSize, is adopted. See the TFile constructor for details. ; Definition at line 162 of file TMemFile.cxx. ◆ TMemFile() [2/6]. TMemFile::TMemFile ; (; const char * ; name, . char * ; buffer, . Long64_t ; size, . Option_t * ; option = """", . const char * ; ftitle = """", . Int_t ; compress = ROOT::RCompressionSetting::EDefaults::kUseCompiledDefault, . Long64_t ; defBlockSize = 0LL . ). Usual Constructor. See the TFile constructor for details. Copy data from buffer. ; Definition at line 170 of file TMemFile.cxx. ◆ TMemFile() [3/6]. TMemFile::TMemFile ; (; const char * ; name, . ExternalDataPtr_t ; data . ). Constructor to create a TMemFile re-using external storage. ; Definition at line 133 of file TMemFile.cxx. ◆ TMemFile() [4/6]. TMemFile::TMemFile ; (; const char * ; name, . const ZeroCopyView_t & ; datarange . ). Constructor to create a TMemFile re-using external ",MatchSource.WIKI,doc/master/classTMemFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMemFile.html
Integrability,message,message," *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer)",MatchSource.WIKI,doc/master/classTMemFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMemFile.html
Modifiability,inherit,inherited,". ROOT: TMemFile Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Classes |; Public Types |; Public Member Functions |; Static Public Member Functions |; Protected Types |; Protected Member Functions |; Protected Attributes |; Static Protected Attributes |; List of all members ; TMemFile Class ReferenceInput/Output Library. ; A TMemFile is like a normal TFile except that it reads and writes only from memory. ; Definition at line 19 of file TMemFile.h. Classes; struct  TMemBlock;  ; struct  ZeroCopyView_t;  A read-only memory range which we do not control. More...;  . Public Types; using ExternalDataPtr_t = std::shared_ptr< const std::vector< char > >;  ;  Public Types inherited from TFile; enum  { kStartBigFile = 2000000000; };  ; enum  EAsyncOpenStatus { kAOSNotAsync = -1; , kAOSFailure = 0; , kAOSInProgress = 1; , kAOSSuccess = 2; };  Asynchronous open request status. More...;  ; enum  ECacheAction { kDisconnect = 0; , kDoNotDisconnect = 1; };  TTreeCache flushing semantics. More...;  ; enum  EFileType { ;   kDefault = 0; , kLocal = 1; , kNet = 2; , kWeb = 3; , ;   kFile = 4; , kMerge = 5. };  File type. More...;  ; enum  EOpenTimeOut { kInstantTimeout = 0; , kEternalTimeout = 999999999; };  Open timeout constants. More...;  ; enum  ERelativeTo { kBeg = 0; , kCur = 1; , kEnd = 2; };  ; enum  EStatusBits { ;   k630forwardCompatibility = (1ULL << ( 2 )); , kRecovered = (1ULL << ( 10 )); , kHasReferences = (1ULL << ( 11 )); , kDevNull = (1ULL << ( 12 )); , ;   kWriteError = (1ULL << ( 14 )); , kBinaryFile = (1ULL << ( 15 )); , kRedirected = (1ULL << ( 16 )); , kReproducible = (1ULL << ( 17 )). };  TFile status bits. BIT(13) is taken up by TObject. More...;  ;  Public Types inherited from TDirectoryFile; enum  EStatusBits { kCloseDirectory = (1ULL << ( 7 )); };  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsi",MatchSource.WIKI,doc/master/classTMemFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMemFile.html
Performance,cache,cache,"Int_t bufsize);  Creates key for object and converts data to buffer. ;  ; void Delete (const char *namecycle="""") override;  Delete object namecycle. ;  ; void Draw (Option_t *option="""") override;  Fill Graphics Structure and Paint. ;  ; virtual void DrawMap (const char *keys=""*"", Option_t *option="""");  Draw map of objects in this file. ;  ; void FillBuffer (char *&buffer) override;  Encode file output buffer. ;  ; virtual void Flush ();  Synchronize a file's in-memory and on-disk states. ;  ; TArchiveFile * GetArchive () const;  ; Long64_t GetArchiveOffset () const;  ; Int_t GetBestBuffer () const;  Return the best buffer size of objects on this file. ;  ; virtual Long64_t GetBytesRead () const;  ; virtual Long64_t GetBytesReadExtra () const;  ; virtual Int_t GetBytesToPrefetch () const;  Max number of bytes to prefetch. ;  ; virtual Long64_t GetBytesWritten () const;  Return the total number of bytes written so far to the file. ;  ; TFileCacheRead * GetCacheRead (const TObject *tree=nullptr) const;  Return a pointer to the current read cache. ;  ; TFileCacheWrite * GetCacheWrite () const;  Return a pointer to the current write cache. ;  ; TArrayC * GetClassIndex () const;  ; Int_t GetCompressionAlgorithm () const;  ; Float_t GetCompressionFactor ();  Return the file compression factor. ;  ; Int_t GetCompressionLevel () const;  ; Int_t GetCompressionSettings () const;  ; virtual Long64_t GetEND () const;  ; virtual const TUrl * GetEndpointUrl () const;  ; virtual Int_t GetErrno () const;  Method returning errno. ;  ; Int_t GetFd () const;  ; TList * GetListOfFree () const;  ; TObjArray * GetListOfProcessIDs () const;  ; virtual Int_t GetNbytesFree () const;  ; virtual Int_t GetNbytesInfo () const;  ; virtual TString GetNewUrl ();  ; virtual Int_t GetNfree () const;  ; virtual Int_t GetNProcessIDs () const;  ; Option_t * GetOption () const override;  ; virtual Int_t GetReadCalls () const;  ; Int_t GetRecordHeader (char *buf, Long64_t first, Int_t maxbytes, Int_t &nbyt",MatchSource.WIKI,doc/master/classTMemFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMemFile.html
Safety,timeout,timeout,"Member Functions |; Protected Attributes |; Static Protected Attributes |; List of all members ; TMemFile Class ReferenceInput/Output Library. ; A TMemFile is like a normal TFile except that it reads and writes only from memory. ; Definition at line 19 of file TMemFile.h. Classes; struct  TMemBlock;  ; struct  ZeroCopyView_t;  A read-only memory range which we do not control. More...;  . Public Types; using ExternalDataPtr_t = std::shared_ptr< const std::vector< char > >;  ;  Public Types inherited from TFile; enum  { kStartBigFile = 2000000000; };  ; enum  EAsyncOpenStatus { kAOSNotAsync = -1; , kAOSFailure = 0; , kAOSInProgress = 1; , kAOSSuccess = 2; };  Asynchronous open request status. More...;  ; enum  ECacheAction { kDisconnect = 0; , kDoNotDisconnect = 1; };  TTreeCache flushing semantics. More...;  ; enum  EFileType { ;   kDefault = 0; , kLocal = 1; , kNet = 2; , kWeb = 3; , ;   kFile = 4; , kMerge = 5. };  File type. More...;  ; enum  EOpenTimeOut { kInstantTimeout = 0; , kEternalTimeout = 999999999; };  Open timeout constants. More...;  ; enum  ERelativeTo { kBeg = 0; , kCur = 1; , kEnd = 2; };  ; enum  EStatusBits { ;   k630forwardCompatibility = (1ULL << ( 2 )); , kRecovered = (1ULL << ( 10 )); , kHasReferences = (1ULL << ( 11 )); , kDevNull = (1ULL << ( 12 )); , ;   kWriteError = (1ULL << ( 14 )); , kBinaryFile = (1ULL << ( 15 )); , kRedirected = (1ULL << ( 16 )); , kReproducible = (1ULL << ( 17 )). };  TFile status bits. BIT(13) is taken up by TObject. More...;  ;  Public Types inherited from TDirectoryFile; enum  EStatusBits { kCloseDirectory = (1ULL << ( 7 )); };  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ; ",MatchSource.WIKI,doc/master/classTMemFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMemFile.html
Security,access,access,"f, Long64_t first, Int_t maxbytes, Int_t &nbytes, Int_t &objlen, Int_t &keylen);  Read the logical record header starting at a certain postion. ;  ; Long64_t GetRelOffset () const;  ; virtual Long64_t GetSeekFree () const;  ; virtual Long64_t GetSeekInfo () const;  ; const TList * GetStreamerInfoCache ();  Returns the cached list of StreamerInfos used in this file. ;  ; virtual TList * GetStreamerInfoList () final;  Read the list of TStreamerInfo objects written to this file. ;  ; Int_t GetVersion () const;  ; virtual void IncrementProcessIDs ();  ; virtual Bool_t IsArchive () const;  ; Bool_t IsBinary () const;  ; virtual Bool_t IsOpen () const;  Returns kTRUE in case file is open and kFALSE if file is not open. ;  ; Bool_t IsRaw () const;  ; void ls (Option_t *option="""") const override;  List file contents. ;  ; virtual void MakeFree (Long64_t first, Long64_t last);  Mark unused bytes on the file. ;  ; virtual void MakeProject (const char *dirname, const char *classes=""*"", Option_t *option=""new"");  Generate source code necessary to access the objects stored in the file. ;  ; virtual void Map ();  ; virtual void Map (Option_t *opt);  List the contents of a file sequentially. ;  ; virtual Bool_t Matches (const char *name);  Return kTRUE if 'url' matches the coordinates of this file. ;  ; virtual Bool_t MustFlush () const;  ; void Paint (Option_t *option="""") override;  Paint all objects in the file. ;  ; virtual Bool_t ReadBuffer (char *buf, Int_t len);  Read a buffer from the file. ;  ; virtual Bool_t ReadBuffer (char *buf, Long64_t pos, Int_t len);  Read a buffer from the file at the offset 'pos' in the file. ;  ; virtual Bool_t ReadBufferAsync (Long64_t offs, Int_t len);  ; virtual Bool_t ReadBuffers (char *buf, Long64_t *pos, Int_t *len, Int_t nbuf);  Read the nbuf blocks described in arrays pos and len. ;  ; virtual void ReadFree ();  Read the FREE linked list. ;  ; virtual TProcessID * ReadProcessID (UShort_t pidf);  The TProcessID with number pidf is read from",MatchSource.WIKI,doc/master/classTMemFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMemFile.html
Testability,log,logical,"es to prefetch. ;  ; virtual Long64_t GetBytesWritten () const;  Return the total number of bytes written so far to the file. ;  ; TFileCacheRead * GetCacheRead (const TObject *tree=nullptr) const;  Return a pointer to the current read cache. ;  ; TFileCacheWrite * GetCacheWrite () const;  Return a pointer to the current write cache. ;  ; TArrayC * GetClassIndex () const;  ; Int_t GetCompressionAlgorithm () const;  ; Float_t GetCompressionFactor ();  Return the file compression factor. ;  ; Int_t GetCompressionLevel () const;  ; Int_t GetCompressionSettings () const;  ; virtual Long64_t GetEND () const;  ; virtual const TUrl * GetEndpointUrl () const;  ; virtual Int_t GetErrno () const;  Method returning errno. ;  ; Int_t GetFd () const;  ; TList * GetListOfFree () const;  ; TObjArray * GetListOfProcessIDs () const;  ; virtual Int_t GetNbytesFree () const;  ; virtual Int_t GetNbytesInfo () const;  ; virtual TString GetNewUrl ();  ; virtual Int_t GetNfree () const;  ; virtual Int_t GetNProcessIDs () const;  ; Option_t * GetOption () const override;  ; virtual Int_t GetReadCalls () const;  ; Int_t GetRecordHeader (char *buf, Long64_t first, Int_t maxbytes, Int_t &nbytes, Int_t &objlen, Int_t &keylen);  Read the logical record header starting at a certain postion. ;  ; Long64_t GetRelOffset () const;  ; virtual Long64_t GetSeekFree () const;  ; virtual Long64_t GetSeekInfo () const;  ; const TList * GetStreamerInfoCache ();  Returns the cached list of StreamerInfos used in this file. ;  ; virtual TList * GetStreamerInfoList () final;  Read the list of TStreamerInfo objects written to this file. ;  ; Int_t GetVersion () const;  ; virtual void IncrementProcessIDs ();  ; virtual Bool_t IsArchive () const;  ; Bool_t IsBinary () const;  ; virtual Bool_t IsOpen () const;  Returns kTRUE in case file is open and kFALSE if file is not open. ;  ; Bool_t IsRaw () const;  ; void ls (Option_t *option="""") const override;  List file contents. ;  ; virtual void MakeFree (Long64_t first",MatchSource.WIKI,doc/master/classTMemFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMemFile.html
Availability,error,error,"object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Return",MatchSource.WIKI,doc/master/classTMergerInfo.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMergerInfo.html
Integrability,message,message,"object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Return",MatchSource.WIKI,doc/master/classTMergerInfo.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMergerInfo.html
Modifiability,inherit,inherited,"lic Member Functions;  TMergerInfo (TSlave *t, Int_t port, Int_t forHowManyWorkers);  ;  ~TMergerInfo () override;  Destructor. ;  ; void AddMergedObjects (Int_t objects);  ; void AddWorker (TSlave *sl);  Add new worker to the list of workers to be merged by this merger. ;  ; Bool_t AreAllWorkersAssigned ();  Return if the determined number of workers has been already assigned to this merger. ;  ; Bool_t AreAllWorkersMerged ();  Return if merger has already merged all workers, i.e. if it has finished its merging job. ;  ; void Deactivate ();  ; Int_t GetMergedObjects ();  ; Int_t GetMergedWorkers ();  ; TSlave * GetMerger ();  ; Int_t GetPort ();  ; TList * GetWorkers ();  ; Int_t GetWorkersToMerge ();  ; TClass * IsA () const override;  ; Bool_t IsActive ();  ; void SetMergedWorker ();  Increase number of already merged workers by 1. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) c",MatchSource.WIKI,doc/master/classTMergerInfo.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMergerInfo.html
Security,hash,hash," Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Returns name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual const char * GetTitle () const;  Returns title of object. ;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; virtual ULong_t Hash () const;  Return hash value for this object. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns kTRUE if object inherits from class ""classname"". ;  ; virtual Bool_t InheritsFrom (const TClass *cl) const;  Returns kTRUE if object inherits from TClass cl. ;  ; virtual void Inspect () const;  Dump contents of this object in a graphics canvas. ;  ; void InvertBit (UInt_t f);  ; Bool_t IsDestructed () const;  IsDestructed. ;  ; virtual Bool_t IsEqual (const TObject *obj) const;  Default equal comparison (objects are equal if they have the same address in memory). ;  ; virtual Bool_t IsFolder () const;  Returns kTRUE in case object contains browsable objects (like containers or lists of other objects). ;  ; R__ALWAYS_INLINE Bool_t",MatchSource.WIKI,doc/master/classTMergerInfo.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMergerInfo.html
Availability,error,error,"object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Return",MatchSource.WIKI,doc/master/classTMessage.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMessage.html
Integrability,message,message,". ROOT: TMessage Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Private Member Functions |; Private Attributes |; Static Private Attributes |; Friends |; List of all members ; TMessage Class Reference. . Definition at line 33 of file TMessage.h. Public Member Functions;  TMessage (UInt_t what=kMESS_ANY, Int_t bufsiz=TBuffer::kInitialSize);  Create a TMessage object for storing objects. ;  ; virtual ~TMessage ();  Destructor. ;  ; char * CompBuffer () const;  ; Int_t CompLength () const;  ; Int_t Compress ();  Compress the message. ;  ; void EnableSchemaEvolution (Bool_t enable=kTRUE);  ; void ForceWriteInfo (TVirtualStreamerInfo *info, Bool_t force) override;  Force writing the TStreamerInfo to the message. ;  ; void Forward ();  Change a buffer that was received into one that can be send, i.e. ;  ; TClass * GetClass () const;  ; Int_t GetCompressionAlgorithm () const;  ; Int_t GetCompressionLevel () const;  ; Int_t GetCompressionSettings () const;  ; TList * GetStreamerInfos () const;  ; TClass * IsA () const override;  ; void Reset () override;  Reset the message buffer so we can use (i.e. fill) it again. ;  ; void Reset (UInt_t what);  ; void SetCompressionAlgorithm (Int_t algorithm=ROOT::RCompressionSetting::EAlgorithm::kUseGlobal);  Set compression algorithm. ;  ; void SetCompressionLevel (Int_t level=ROOT::RCompressionSetting::ELevel::kUseMin);  Set compression level. ;  ; void SetCompressionSettings (Int_t settings=ROOT::RCompressionSetting::EDefaults::kUseCompiledDefault);  Set compression settings. ;  ; void SetWhat (UInt_t what);  Using this method one can change the message type a-posteriori In case you OR ""what"" with kMESS_ACK, the message will wait for an acknowledgment from the remote side. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtua",MatchSource.WIKI,doc/master/classTMessage.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMessage.html
Modifiability,inherit,inherited,"; void SetCompressionLevel (Int_t level=ROOT::RCompressionSetting::ELevel::kUseMin);  Set compression level. ;  ; void SetCompressionSettings (Int_t settings=ROOT::RCompressionSetting::EDefaults::kUseCompiledDefault);  Set compression settings. ;  ; void SetWhat (UInt_t what);  Using this method one can change the message type a-posteriori In case you OR ""what"" with kMESS_ACK, the message will wait for an acknowledgment from the remote side. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; void TagStreamerInfo (TVirtualStreamerInfo *info) override;  Remember that the StreamerInfo is being used in writing. ;  ; Int_t Uncompress ();  Uncompress the message. ;  ; Bool_t UsesSchemaEvolution () const;  ; UInt_t What () const;  ; UShort_t WriteProcessID (TProcessID *pid) override;  Check if the ProcessID pid is already in the message. ;  ;  Public Member Functions inherited from TBufferFile;  TBufferFile (TBuffer::EMode mode);  Create an I/O buffer object. ;  ;  TBufferFile (TBuffer::EMode mode, Int_t bufsiz);  Create an I/O buffer object. ;  ;  TBufferFile (TBuffer::EMode mode, Int_t bufsiz, void *buf, Bool_t adopt=kTRUE, ReAllocCharFun_t reallocfunc=nullptr);  Create an I/O buffer object. ;  ;  ~TBufferFile () override;  Delete an I/O buffer object. ;  ; Int_t ApplySequence (const TStreamerInfoActions::TActionSequence &sequence, void *object) override;  Read one collection of objects from the buffer using the StreamerInfoLoopAction. ;  ; Int_t ApplySequence (const TStreamerInfoActions::TActionSequence &sequence, void *start_collection, void *end_collection) override;  Read one collection of objects from the buffer using the StreamerInfoLoopAction. ;  ; Int_t ApplySequenceVecPtr (const TStreamerInfoActions::TActionSequence &sequence, void *start_collection, void *end_collection) override;  Read one collection of objects from the buffer using the StreamerInfoLoopAction. ;  ; ",MatchSource.WIKI,doc/master/classTMessage.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMessage.html
Performance,optimiz,optimized," &s) override;  Write TString to TBuffer. ;  ; void WriteUChar (UChar_t c) override;  ; void WriteUInt (UInt_t i) override;  ; void WriteULong (ULong_t l) override;  ; void WriteULong64 (ULong64_t l) override;  ; void WriteUShort (UShort_t s) override;  ; UInt_t WriteVersion (const TClass *cl, Bool_t useBcnt=kFALSE) override;  Write class version to I/O buffer. ;  ; UInt_t WriteVersionMemberWise (const TClass *cl, Bool_t useBcnt=kFALSE) override;  Write class version to I/O buffer after setting the kStreamedMemberWise bit in the version number. ;  ;  Public Member Functions inherited from TBufferIO;  ~TBufferIO () override;  destructor ;  ; Bool_t CheckObject (const TObject *obj) override;  Check if the specified object is already in the buffer. ;  ; Bool_t CheckObject (const void *obj, const TClass *ptrClass) override;  Check if the specified object of the specified class is already in the buffer. ;  ; void ForceWriteInfoClones (TClonesArray *a) override;  Make sure TStreamerInfo is not optimized, otherwise it will not be possible to support schema evolution in read mode. ;  ; Int_t GetBufferDisplacement () const override;  ; TProcessID * GetLastProcessID (TRefTable *reftable) const override;  Return the last TProcessID in the file. ;  ; Int_t GetMapCount () const override;  ; void GetMappedObject (UInt_t tag, void *&ptr, TClass *&ClassPtr) const override;  Retrieve the object stored in the buffer's object map at 'tag' Set ptr and ClassPtr respectively to the address of the object and a pointer to its TClass. ;  ; UShort_t GetPidOffset () const override;  ; UInt_t GetTRefExecId () override;  Return the exec id stored in the current TStreamerInfo element. ;  ; Int_t GetVersionOwner () const override;  Return the version number of the owner file. ;  ; void InitMap () override;  Create the fMap container and initialize them with the null object. ;  ; void MapObject (const TObject *obj, UInt_t offset=1) override;  Add object to the fMap container. ;  ; void MapObject (",MatchSource.WIKI,doc/master/classTMessage.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMessage.html
Security,checksum,checksum,"=nullptr) override;  Read array of floats (written as truncated float) from the I/O buffer. ;  ; virtual void ReadStdString (std::string &s);  ; void ReadStdString (std::string *s) override;  Read std::string from TBuffer. ;  ; virtual void ReadStdString (std::string *s)=0;  ; char * ReadString (char *s, Int_t max) override;  Read string from I/O buffer. ;  ; void ReadTString (TString &s) override;  Read TString from TBuffer. ;  ; void ReadUChar (UChar_t &c) override;  ; void ReadUInt (UInt_t &i) override;  ; void ReadULong (ULong_t &l) override;  ; void ReadULong64 (ULong64_t &l) override;  ; void ReadUShort (UShort_t &s) override;  ; Version_t ReadVersion (UInt_t *start=nullptr, UInt_t *bcnt=nullptr, const TClass *cl=nullptr) override;  Read class version from I/O buffer. ;  ; Version_t ReadVersionForMemberWise (const TClass *cl=nullptr) override;  Read class version from I/O buffer. ;  ; Version_t ReadVersionNoCheckSum (UInt_t *start=nullptr, UInt_t *bcnt=nullptr) override;  Read class version from I/O buffer, when the caller knows for sure that there is no checksum written/involved. ;  ; void ReadWithFactor (Double_t *ptr, Double_t factor, Double_t minvalue) override;  Read a Double32_t from the buffer when the factor and minimum value have been specified see comments about Double32_t encoding at TBufferFile::WriteDouble32(). ;  ; void ReadWithFactor (Float_t *ptr, Double_t factor, Double_t minvalue) override;  Read a Float16_t from the buffer when the factor and minimum value have been specified see comments about Double32_t encoding at TBufferFile::WriteDouble32(). ;  ; void ReadWithNbits (Double_t *ptr, Int_t nbits) override;  Read a Double32_t from the buffer when the number of bits is specified (explicitly or not) see comments about Double32_t encoding at TBufferFile::WriteDouble32(). ;  ; void ReadWithNbits (Float_t *ptr, Int_t nbits) override;  Read a Float16_t from the buffer when the number of bits is specified (explicitly or not) see comments about Floa",MatchSource.WIKI,doc/master/classTMessage.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMessage.html
Availability,error,error,"ject. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t ",MatchSource.WIKI,doc/master/classTMessageHandler.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMessageHandler.html
Deployability,install,install,". ROOT: TMessageHandler Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; List of all members ; TMessageHandler Class ReferenceCore ROOT classes » Base ROOT classes. ; Handle messages that might be generated by the system. ; By default a handler only keeps track of the different messages generated for a specific class. By deriving from this class and overriding Notify() one can implement custom message handling. In Notify() one has access to the message id and the object generating the message. One can install more than one message handler per class. A message handler can be removed or again added when needed. All Root ""Warnings"" are logged as message 1001; All Root ""Errors"" are logged as message 1002; All Root ""SysErrors"" are logged as message 1003; All Root ""Fatals"" are logged as message 1004 . Definition at line 34 of file TMessageHandler.h. Public Member Functions;  TMessageHandler (const char *cl, Bool_t derived=kTRUE);  Create a new message handler for class named cl and add it to the list of message handlers. ;  ;  TMessageHandler (const TClass *cl, Bool_t derived=kTRUE);  Create a new message handler for class cl and add it to the list of message handlers. ;  ; virtual ~TMessageHandler ();  Clean up the message handler. ;  ; virtual void Add ();  Add this message handler to the list of messages handlers. ;  ; virtual void Added ();  ; virtual Int_t GetMessageCount (Long_t messId) const;  Return counter for message with ID=messid. ;  ; Int_t GetSize () const;  ; virtual Int_t GetTotalMessageCount () const;  Return total number of messages. ;  ; Bool_t HandleDerived () const;  ; virtual void HandleMessage (Long_t id, const TObject *obj);  Store message origin, keep statistics and call Notify(). ;  ; TClass * IsA () const override;  ; virtual void Notified ();  ; Bool_t Notify ()",MatchSource.WIKI,doc/master/classTMessageHandler.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMessageHandler.html
Integrability,message,messages,". ROOT: TMessageHandler Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; List of all members ; TMessageHandler Class ReferenceCore ROOT classes » Base ROOT classes. ; Handle messages that might be generated by the system. ; By default a handler only keeps track of the different messages generated for a specific class. By deriving from this class and overriding Notify() one can implement custom message handling. In Notify() one has access to the message id and the object generating the message. One can install more than one message handler per class. A message handler can be removed or again added when needed. All Root ""Warnings"" are logged as message 1001; All Root ""Errors"" are logged as message 1002; All Root ""SysErrors"" are logged as message 1003; All Root ""Fatals"" are logged as message 1004 . Definition at line 34 of file TMessageHandler.h. Public Member Functions;  TMessageHandler (const char *cl, Bool_t derived=kTRUE);  Create a new message handler for class named cl and add it to the list of message handlers. ;  ;  TMessageHandler (const TClass *cl, Bool_t derived=kTRUE);  Create a new message handler for class cl and add it to the list of message handlers. ;  ; virtual ~TMessageHandler ();  Clean up the message handler. ;  ; virtual void Add ();  Add this message handler to the list of messages handlers. ;  ; virtual void Added ();  ; virtual Int_t GetMessageCount (Long_t messId) const;  Return counter for message with ID=messid. ;  ; Int_t GetSize () const;  ; virtual Int_t GetTotalMessageCount () const;  Return total number of messages. ;  ; Bool_t HandleDerived () const;  ; virtual void HandleMessage (Long_t id, const TObject *obj);  Store message origin, keep statistics and call Notify(). ;  ; TClass * IsA () const override;  ; virtual void Notified ();  ; Bool_t Notify ()",MatchSource.WIKI,doc/master/classTMessageHandler.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMessageHandler.html
Modifiability,inherit,inherited,"o the list of messages handlers. ;  ; virtual void Added ();  ; virtual Int_t GetMessageCount (Long_t messId) const;  Return counter for message with ID=messid. ;  ; Int_t GetSize () const;  ; virtual Int_t GetTotalMessageCount () const;  Return total number of messages. ;  ; Bool_t HandleDerived () const;  ; virtual void HandleMessage (Long_t id, const TObject *obj);  Store message origin, keep statistics and call Notify(). ;  ; TClass * IsA () const override;  ; virtual void Notified ();  ; Bool_t Notify () override;  This method must be overridden to handle object notification. ;  ; void Print (Option_t *option="""") const override;  Print statistics for this message handler. ;  ; virtual void Remove ();  Remove this message handler from the list of messages handlers. ;  ; virtual void Removed ();  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; TClass * IsA () const override;  ; Bool_t IsSortable () const override;  ; void ls (Option_t *option="""") const override;",MatchSource.WIKI,doc/master/classTMessageHandler.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMessageHandler.html
Security,access,access,". ROOT: TMessageHandler Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; List of all members ; TMessageHandler Class ReferenceCore ROOT classes » Base ROOT classes. ; Handle messages that might be generated by the system. ; By default a handler only keeps track of the different messages generated for a specific class. By deriving from this class and overriding Notify() one can implement custom message handling. In Notify() one has access to the message id and the object generating the message. One can install more than one message handler per class. A message handler can be removed or again added when needed. All Root ""Warnings"" are logged as message 1001; All Root ""Errors"" are logged as message 1002; All Root ""SysErrors"" are logged as message 1003; All Root ""Fatals"" are logged as message 1004 . Definition at line 34 of file TMessageHandler.h. Public Member Functions;  TMessageHandler (const char *cl, Bool_t derived=kTRUE);  Create a new message handler for class named cl and add it to the list of message handlers. ;  ;  TMessageHandler (const TClass *cl, Bool_t derived=kTRUE);  Create a new message handler for class cl and add it to the list of message handlers. ;  ; virtual ~TMessageHandler ();  Clean up the message handler. ;  ; virtual void Add ();  Add this message handler to the list of messages handlers. ;  ; virtual void Added ();  ; virtual Int_t GetMessageCount (Long_t messId) const;  Return counter for message with ID=messid. ;  ; Int_t GetSize () const;  ; virtual Int_t GetTotalMessageCount () const;  Return total number of messages. ;  ; Bool_t HandleDerived () const;  ; virtual void HandleMessage (Long_t id, const TObject *obj);  Store message origin, keep statistics and call Notify(). ;  ; TClass * IsA () const override;  ; virtual void Notified ();  ; Bool_t Notify ()",MatchSource.WIKI,doc/master/classTMessageHandler.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMessageHandler.html
Testability,log,logged,". ROOT: TMessageHandler Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; List of all members ; TMessageHandler Class ReferenceCore ROOT classes » Base ROOT classes. ; Handle messages that might be generated by the system. ; By default a handler only keeps track of the different messages generated for a specific class. By deriving from this class and overriding Notify() one can implement custom message handling. In Notify() one has access to the message id and the object generating the message. One can install more than one message handler per class. A message handler can be removed or again added when needed. All Root ""Warnings"" are logged as message 1001; All Root ""Errors"" are logged as message 1002; All Root ""SysErrors"" are logged as message 1003; All Root ""Fatals"" are logged as message 1004 . Definition at line 34 of file TMessageHandler.h. Public Member Functions;  TMessageHandler (const char *cl, Bool_t derived=kTRUE);  Create a new message handler for class named cl and add it to the list of message handlers. ;  ;  TMessageHandler (const TClass *cl, Bool_t derived=kTRUE);  Create a new message handler for class cl and add it to the list of message handlers. ;  ; virtual ~TMessageHandler ();  Clean up the message handler. ;  ; virtual void Add ();  Add this message handler to the list of messages handlers. ;  ; virtual void Added ();  ; virtual Int_t GetMessageCount (Long_t messId) const;  Return counter for message with ID=messid. ;  ; Int_t GetSize () const;  ; virtual Int_t GetTotalMessageCount () const;  Return total number of messages. ;  ; Bool_t HandleDerived () const;  ; virtual void HandleMessage (Long_t id, const TObject *obj);  Store message origin, keep statistics and call Notify(). ;  ; TClass * IsA () const override;  ; virtual void Notified ();  ; Bool_t Notify ()",MatchSource.WIKI,doc/master/classTMessageHandler.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMessageHandler.html
Availability,error,error," ; virtual void SetMenuItem (EMenuItemKind menuItem);  ; virtual TMethodCall * SetterMethod ();  Return call environment for this method in case this is a *TOGGLE method which takes a single boolean or integer argument. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; Bool_t Update (MethodInfo_t *info) override;  Update the TMethod to reflect the new info. ;  ;  Public Member Functions inherited from TFunction;  TFunction (const TFunction &orig);  Copy operator. ;  ;  TFunction (MethodInfo_t *info=nullptr);  Default TFunction ctor. ;  ; virtual ~TFunction ();  TFunction dtor deletes adopted CINT MethodInfo. ;  ; Long_t ExtraProperty () const;  Get property description word. For meaning of bits see EProperty. ;  ; DeclId_t GetDeclId () const;  ; TList * GetListOfMethodArgs ();  Return list containing the TMethodArgs of a TFunction. ;  ; virtual const char * GetMangledName () const;  Returns the mangled name as defined by CINT, or 0 in case of error. ;  ; Int_t GetNargs () const;  Number of function arguments. ;  ; Int_t GetNargsOpt () const;  Number of function optional (default) arguments. ;  ; virtual const char * GetPrototype () const;  Returns the prototype of a function as defined by CINT, or 0 in case of error. ;  ; const char * GetReturnTypeName () const;  Get full type description of function return type, e,g.: ""class TDirectory*"". ;  ; std::string GetReturnTypeNormalizedName () const;  Get the normalized name of the return type. ;  ; const char * GetSignature ();  Return signature of function. ;  ; void * InterfaceMethod () const;  Return pointer to the interface method. ;  ; void ls (Option_t *option="""") const override;  List TFunction name and title. ;  ; TFunction & operator= (const TFunction &rhs);  Assignment operator. ;  ; void Print (Option_t *option="""") const override;  Print TFunction name and title. ;  ; Long_t Property () const override;  Get property",MatchSource.WIKI,doc/master/classTMethod.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMethod.html
Deployability,update,updates,"r Functions |; Private Attributes |; List of all members ; TMethod Class Reference. ; Each ROOT class (see TClass) has a linked list of methods. ; This class describes one single method (member function). The method info is obtained via the CINT api. See class TCling.; The method information is used a.o. by the THml class and by the TTree class. ; Definition at line 38 of file TMethod.h. Public Member Functions;  TMethod (const TMethod &org);  Copy ctor. ;  ;  TMethod (MethodInfo_t *info=nullptr, TClass *cl=nullptr);  Default TMethod ctor. ;  ; virtual ~TMethod ();  Cleanup. ;  ; TObject * Clone (const char *newname="""") const override;  Clone method. ;  ; virtual TDataMember * FindDataMember ();  Tries to guess DataMember from comment string and Method's name <==(only if 1 Argument!). ;  ; TClass * GetClass () const;  ; virtual const char * GetCommentString ();  Returns a comment string from the class declaration. ;  ; virtual TList * GetListOfMethodArgs ();  Returns methodarg list and additionally updates fDataMember in TMethod by calling FindDataMember();. ;  ; virtual const char * Getter () const;  ; virtual TMethodCall * GetterMethod ();  Return call environment for the getter method in case this is a *TOGGLE method (for the context menu). ;  ; TClass * IsA () const override;  ; EMenuItemKind IsMenuItem () const;  ; Bool_t IsValid () override;  Return true if this function object is pointing to a currently loaded function. ;  ; TMethod & operator= (const TMethod &rhs);  Assignment operator. ;  ; virtual void SetMenuItem (EMenuItemKind menuItem);  ; virtual TMethodCall * SetterMethod ();  Return call environment for this method in case this is a *TOGGLE method which takes a single boolean or integer argument. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; Bool_t Update (MethodInfo_t *info) override;  Update the TMethod to reflect the new info. ;  ;  Public Member Fu",MatchSource.WIKI,doc/master/classTMethod.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMethod.html
Integrability,interface,interface,"  TFunction dtor deletes adopted CINT MethodInfo. ;  ; Long_t ExtraProperty () const;  Get property description word. For meaning of bits see EProperty. ;  ; DeclId_t GetDeclId () const;  ; TList * GetListOfMethodArgs ();  Return list containing the TMethodArgs of a TFunction. ;  ; virtual const char * GetMangledName () const;  Returns the mangled name as defined by CINT, or 0 in case of error. ;  ; Int_t GetNargs () const;  Number of function arguments. ;  ; Int_t GetNargsOpt () const;  Number of function optional (default) arguments. ;  ; virtual const char * GetPrototype () const;  Returns the prototype of a function as defined by CINT, or 0 in case of error. ;  ; const char * GetReturnTypeName () const;  Get full type description of function return type, e,g.: ""class TDirectory*"". ;  ; std::string GetReturnTypeNormalizedName () const;  Get the normalized name of the return type. ;  ; const char * GetSignature ();  Return signature of function. ;  ; void * InterfaceMethod () const;  Return pointer to the interface method. ;  ; void ls (Option_t *option="""") const override;  List TFunction name and title. ;  ; TFunction & operator= (const TFunction &rhs);  Assignment operator. ;  ; void Print (Option_t *option="""") const override;  Print TFunction name and title. ;  ; Long_t Property () const override;  Get property description word. For meaning of bits see EProperty. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TDictionary;  TDictionary ();  ;  TDictionary (const char *name);  ;  TDictionary (const TDictionary &dict);  ; virtual ~TDictionary ();  ; void CreateAttributeMap ();  ; TDictAttributeMap * GetAttributeMap () const;  ; TDictionary & operator= (const TDictionary &other);  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy cto",MatchSource.WIKI,doc/master/classTMethod.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMethod.html
Modifiability,inherit,inherited,"r in TMethod by calling FindDataMember();. ;  ; virtual const char * Getter () const;  ; virtual TMethodCall * GetterMethod ();  Return call environment for the getter method in case this is a *TOGGLE method (for the context menu). ;  ; TClass * IsA () const override;  ; EMenuItemKind IsMenuItem () const;  ; Bool_t IsValid () override;  Return true if this function object is pointing to a currently loaded function. ;  ; TMethod & operator= (const TMethod &rhs);  Assignment operator. ;  ; virtual void SetMenuItem (EMenuItemKind menuItem);  ; virtual TMethodCall * SetterMethod ();  Return call environment for this method in case this is a *TOGGLE method which takes a single boolean or integer argument. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; Bool_t Update (MethodInfo_t *info) override;  Update the TMethod to reflect the new info. ;  ;  Public Member Functions inherited from TFunction;  TFunction (const TFunction &orig);  Copy operator. ;  ;  TFunction (MethodInfo_t *info=nullptr);  Default TFunction ctor. ;  ; virtual ~TFunction ();  TFunction dtor deletes adopted CINT MethodInfo. ;  ; Long_t ExtraProperty () const;  Get property description word. For meaning of bits see EProperty. ;  ; DeclId_t GetDeclId () const;  ; TList * GetListOfMethodArgs ();  Return list containing the TMethodArgs of a TFunction. ;  ; virtual const char * GetMangledName () const;  Returns the mangled name as defined by CINT, or 0 in case of error. ;  ; Int_t GetNargs () const;  Number of function arguments. ;  ; Int_t GetNargsOpt () const;  Number of function optional (default) arguments. ;  ; virtual const char * GetPrototype () const;  Returns the prototype of a function as defined by CINT, or 0 in case of error. ;  ; const char * GetReturnTypeName () const;  Get full type description of function return type, e,g.: ""class TDirectory*"". ;  ; std::string GetReturnTypeNormalizedName () con",MatchSource.WIKI,doc/master/classTMethod.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMethod.html
Performance,load,loaded,"tion at line 38 of file TMethod.h. Public Member Functions;  TMethod (const TMethod &org);  Copy ctor. ;  ;  TMethod (MethodInfo_t *info=nullptr, TClass *cl=nullptr);  Default TMethod ctor. ;  ; virtual ~TMethod ();  Cleanup. ;  ; TObject * Clone (const char *newname="""") const override;  Clone method. ;  ; virtual TDataMember * FindDataMember ();  Tries to guess DataMember from comment string and Method's name <==(only if 1 Argument!). ;  ; TClass * GetClass () const;  ; virtual const char * GetCommentString ();  Returns a comment string from the class declaration. ;  ; virtual TList * GetListOfMethodArgs ();  Returns methodarg list and additionally updates fDataMember in TMethod by calling FindDataMember();. ;  ; virtual const char * Getter () const;  ; virtual TMethodCall * GetterMethod ();  Return call environment for the getter method in case this is a *TOGGLE method (for the context menu). ;  ; TClass * IsA () const override;  ; EMenuItemKind IsMenuItem () const;  ; Bool_t IsValid () override;  Return true if this function object is pointing to a currently loaded function. ;  ; TMethod & operator= (const TMethod &rhs);  Assignment operator. ;  ; virtual void SetMenuItem (EMenuItemKind menuItem);  ; virtual TMethodCall * SetterMethod ();  Return call environment for this method in case this is a *TOGGLE method which takes a single boolean or integer argument. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; Bool_t Update (MethodInfo_t *info) override;  Update the TMethod to reflect the new info. ;  ;  Public Member Functions inherited from TFunction;  TFunction (const TFunction &orig);  Copy operator. ;  ;  TFunction (MethodInfo_t *info=nullptr);  Default TFunction ctor. ;  ; virtual ~TFunction ();  TFunction dtor deletes adopted CINT MethodInfo. ;  ; Long_t ExtraProperty () const;  Get property description word. For meaning of bits see EProperty. ;  ; DeclId_t GetDe",MatchSource.WIKI,doc/master/classTMethod.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMethod.html
Security,hash,hash,"ctionary & operator= (const TDictionary &other);  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; TClass * IsA () const override;  ; Bool_t IsSortable () const override;  ; void ls (Option_t *option="""") const override;  List TNamed name and title. ;  ; TNamed & operator= (const TNamed &rhs);  TNamed assignment operator. ;  ; void Print (Option_t *option="""") const override;  Print TNamed name and title. ;  ; virtual void SetName (const char *name);  Set the name of the TNamed. ;  ; virtual void SetNameTitle (const char *name, const char *title);  Set all the TNamed parameters (name and title). ;  ; virtual void SetTitle (const char *title="""");  Set the title of the TNamed. ;  ; virtual Int_t Sizeof () const;  Return size of the TNamed part of the TObject. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;",MatchSource.WIKI,doc/master/classTMethod.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMethod.html
Availability,error,error,"ject. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t ",MatchSource.WIKI,doc/master/classTMethodArg.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMethodArg.html
Deployability,update,updated,"deredmultiset; , kUnorderedMap = ROOT::kSTLunorderedmap; , ;   kUnorderedMultimap = ROOT::kSTLunorderedmultimap; , kBitset = ROOT::kSTLbitset. };  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Protected Member Functions inherited from TDictionary; Bool_t UpdateInterpreterStateMarker ();  the Cling ID of the transaction that last updated the object ;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  . #include <TMethodArg.h>. Inheritance diagram for TMethodArg:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ TMethodArg() [1/2]. TMethodArg::TMethodArg ; (; const TMethodArg & ; ). privatedelete . ◆ TMethodArg() [2/2]. TMethodArg::TMethodArg ; (; MethodArgInfo_t * ; info = nullptr, . TFunction * ; method = nullptr . ). Default TMethodArg ctor. ; TMethodArgs are constructed in TFunction via a call to TCling::CreateListOfMethodArgs(). ; Definition at line 35 of file TMethodArg.cxx. ◆ ~TMethodArg(). TMethodArg::~TMethodArg ; (; ). virtual . TMethodArg dtor deletes adopted CI",MatchSource.WIKI,doc/master/classTMethodArg.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMethodArg.html
Integrability,message,message,"ject. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t ",MatchSource.WIKI,doc/master/classTMethodArg.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMethodArg.html
Modifiability,inherit,inherited,"r. ;  ; TypeInfo_t * GetTypeInfo () const;  Get the TypeInfo of the method argument. ;  ; const char * GetTypeName () const;  Get type of method argument, e.g.: ""class TDirectory*"" -> ""TDirectory"" Result needs to be used or copied immediately. ;  ; std::string GetTypeNormalizedName () const;  Get the normalized name of the return type. ;  ; TClass * IsA () const override;  ; Long_t Property () const override;  Get property description word. For meaning of bits see EProperty. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; void Update (MethodArgInfo_t *info);  Update fInfo (to 0 for unloading and non-zero for reloading). ;  ;  Public Member Functions inherited from TDictionary;  TDictionary ();  ;  TDictionary (const char *name);  ;  TDictionary (const TDictionary &dict);  ; virtual ~TDictionary ();  ; void CreateAttributeMap ();  ; TDictAttributeMap * GetAttributeMap () const;  ; TDictionary & operator= (const TDictionary &other);  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Re",MatchSource.WIKI,doc/master/classTMethodArg.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMethodArg.html
Security,hash,hash,"ctionary & operator= (const TDictionary &other);  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; TClass * IsA () const override;  ; Bool_t IsSortable () const override;  ; void ls (Option_t *option="""") const override;  List TNamed name and title. ;  ; TNamed & operator= (const TNamed &rhs);  TNamed assignment operator. ;  ; void Print (Option_t *option="""") const override;  Print TNamed name and title. ;  ; virtual void SetName (const char *name);  Set the name of the TNamed. ;  ; virtual void SetNameTitle (const char *name, const char *title);  Set all the TNamed parameters (name and title). ;  ; virtual void SetTitle (const char *title="""");  Set the title of the TNamed. ;  ; virtual Int_t Sizeof () const;  Return size of the TNamed part of the TObject. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;",MatchSource.WIKI,doc/master/classTMethodArg.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMethodArg.html
Usability,learn,learn,"e(). static const char * TMethodArg::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t TMethodArg::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 64 of file TMethodArg.h. ◆ DeclFileName(). static const char * TMethodArg::DeclFileName ; (; ). inlinestatic . ReturnsName of the file containing the class declaration ; Definition at line 64 of file TMethodArg.h. ◆ GetDataMember(). TDataMember * TMethodArg::GetDataMember ; (; ); const. Returns TDataMember pointed by this methodarg. ; If you want to specify list of options or current value for your MethodArg (i.e. it is used as initial values in argument-asking dialogs popped up from context-meny),you can get this value from one of data members of the class.; The only restriction is, that this DataMember object must have its Getter/Setter methods set-up correctly - for details look at TDataMember. To learn how to specify the data member to which the argument should ""point"", look at TMethod. This is TMethod which sets up fDataMember, so it could work correctly. ; Definition at line 128 of file TMethodArg.cxx. ◆ GetDefault(). const char * TMethodArg::GetDefault ; (; ); const. Get default value of method argument. ; Definition at line 57 of file TMethodArg.cxx. ◆ GetFullTypeName(). const char * TMethodArg::GetFullTypeName ; (; ); const. Get full type description of method argument, e.g.: ""class TDirectory*"". ; Definition at line 74 of file TMethodArg.cxx. ◆ GetMethod(). TFunction * TMethodArg::GetMethod ; (; ); const. inline . Definition at line 52 of file TMethodArg.h. ◆ GetOptions(). TList * TMethodArg::GetOptions ; (; ); const. Returns list of possible options - according to pointed datamember. ; If there is no datamember field assigned to this methodarg - returns 0. ; Definition at line 110 of file TMethodArg.cxx. ◆ GetTypeInfo(). TypeInfo_t * TMethodArg::GetTypeInfo ; (; ); const. Get the TypeInfo of the method argument. ;",MatchSource.WIKI,doc/master/classTMethodArg.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMethodArg.html
Availability,avail,available,". ROOT: TMethodBrowsable Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Static Protected Member Functions |; Private Attributes |; List of all members ; TMethodBrowsable Class ReferenceTree Library. ; This helper object allows the browsing of methods of objects stored in branches. ; They will be depicted by a leaf (or a branch, in case the method returns an object) with a red exclamation mark. Only a subset of all methods will be shown in the browser (see IsMethodBrowsable for the criteria a method has to satisfy).; Obviously, methods are only available if the library is loaded which contains the dictionary for the class to be browsed!; If a branch contains a collection, TMethodBrowsable tries to find out what the contained element is (it will only create methods for the contained elements, but never for the collection). If it fails to extract the type of the contained elements, or if there is no guarantee that the type has any other common denominator than TObject (e.g. in the case of a TObjArray, which can hold any object deriving from TObject) no methods will be added. ; Definition at line 103 of file TBranchBrowsable.h. Public Member Functions;  ~TMethodBrowsable () override;  ; const char * GetIconName () const override;  return our special icons ;  ; TClass * IsA () const override;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TVirtualBranchBrowsable;  ~TVirtualBranchBrowsable () override;  Destructor. Delete our leaves. ;  ; void Browse (TBrowser *b) override;  Calls TTree::Draw on the method if return type is not a class; otherwise expands returned object's ""folder"". ;  ; const TBranch * GetBranch () const;  return the parent branch (might be many levels up) ; ",MatchSource.WIKI,doc/master/classTMethodBrowsable.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMethodBrowsable.html
Integrability,message,message,"option="""");  Append graphics object to current pad. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ; ",MatchSource.WIKI,doc/master/classTMethodBrowsable.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMethodBrowsable.html
Modifiability,inherit,inherited,"e for the criteria a method has to satisfy).; Obviously, methods are only available if the library is loaded which contains the dictionary for the class to be browsed!; If a branch contains a collection, TMethodBrowsable tries to find out what the contained element is (it will only create methods for the contained elements, but never for the collection). If it fails to extract the type of the contained elements, or if there is no guarantee that the type has any other common denominator than TObject (e.g. in the case of a TObjArray, which can hold any object deriving from TObject) no methods will be added. ; Definition at line 103 of file TBranchBrowsable.h. Public Member Functions;  ~TMethodBrowsable () override;  ; const char * GetIconName () const override;  return our special icons ;  ; TClass * IsA () const override;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TVirtualBranchBrowsable;  ~TVirtualBranchBrowsable () override;  Destructor. Delete our leaves. ;  ; void Browse (TBrowser *b) override;  Calls TTree::Draw on the method if return type is not a class; otherwise expands returned object's ""folder"". ;  ; const TBranch * GetBranch () const;  return the parent branch (might be many levels up) ;  ; TClass * GetClassType () const;  return the type of this browsable object ;  ; const char * GetIconName () const override;  return icon shown when browsing a TVirtualBranchBrowsable ;  ; TList * GetLeaves () const;  Return list of leaves. If not set up yet we'll create them. ;  ; const TVirtualBranchBrowsable * GetParent () const;  return the parent TVirtualBranchBrowsable ;  ; void GetScope (TString &scope) const;  Returns the full name for TTree::Draw to draw *this. ;  ; TClass * IsA () const override;  ; bool IsFolder () const override;  check whether we have sub-elements ;  ; void Streamer (TBuffer &) override;  Stream an obje",MatchSource.WIKI,doc/master/classTMethodBrowsable.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMethodBrowsable.html
Performance,load,loaded,". ROOT: TMethodBrowsable Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Static Protected Member Functions |; Private Attributes |; List of all members ; TMethodBrowsable Class ReferenceTree Library. ; This helper object allows the browsing of methods of objects stored in branches. ; They will be depicted by a leaf (or a branch, in case the method returns an object) with a red exclamation mark. Only a subset of all methods will be shown in the browser (see IsMethodBrowsable for the criteria a method has to satisfy).; Obviously, methods are only available if the library is loaded which contains the dictionary for the class to be browsed!; If a branch contains a collection, TMethodBrowsable tries to find out what the contained element is (it will only create methods for the contained elements, but never for the collection). If it fails to extract the type of the contained elements, or if there is no guarantee that the type has any other common denominator than TObject (e.g. in the case of a TObjArray, which can hold any object deriving from TObject) no methods will be added. ; Definition at line 103 of file TBranchBrowsable.h. Public Member Functions;  ~TMethodBrowsable () override;  ; const char * GetIconName () const override;  return our special icons ;  ; TClass * IsA () const override;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TVirtualBranchBrowsable;  ~TVirtualBranchBrowsable () override;  Destructor. Delete our leaves. ;  ; void Browse (TBrowser *b) override;  Calls TTree::Draw on the method if return type is not a class; otherwise expands returned object's ""folder"". ;  ; const TBranch * GetBranch () const;  return the parent branch (might be many levels up) ; ",MatchSource.WIKI,doc/master/classTMethodBrowsable.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMethodBrowsable.html
Security,hash,hash,"amerNVirtual_b);  ; bool TypeIsPointer () const;  return whether the type of this browsable object is a pointer ;  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; Bool_t IsSortable () const override;  ; void ls (Option_t *option="""") const override;  List TNamed name and title. ;  ; TNamed & operator= (const TNamed &rhs);  TNamed assignment operator. ;  ; void Print (Option_t *option="""") const override;  Print TNamed name and title. ;  ; virtual void SetName (const char *name);  Set the name of the TNamed. ;  ; virtual void SetNameTitle (const char *name, const char *title);  Set all the TNamed parameters (name and title). ;  ; virtual void SetTitle (const char *title="""");  Set the title of the TNamed. ;  ; virtual Int_t Sizeof () const;  Return size of the TNamed part of the TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this met",MatchSource.WIKI,doc/master/classTMethodBrowsable.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMethodBrowsable.html
Usability,simpl,simple,"its { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  . #include <TBranchBrowsable.h>. Inheritance diagram for TMethodBrowsable:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ ~TMethodBrowsable(). TMethodBrowsable::~TMethodBrowsable ; (; ). inlineoverride . Definition at line 105 of file TBranchBrowsable.h. ◆ TMethodBrowsable(). TMethodBrowsable::TMethodBrowsable ; (; const TBranch * ; branch, . TMethod * ; m, . const TVirtualBranchBrowsable * ; parent = nullptr . ). protected . Constructor. ; Links a TBranchElement to a TMethod, allowing the TBrowser to browse simple methods.; The c'tor sets the name for a method ""Class::Method(params) const"" to ""Method(params)"", title to TMethod::GetPrototype ; Definition at line 409 of file TBranchBrowsable.cxx. Member Function Documentation. ◆ Class(). static TClass * TMethodBrowsable::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * TMethodBrowsable::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t TMethodBrowsable::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 128 of file TBranchBrowsable.h. ◆ DeclFileName(). static const char * TMethodBrowsable::DeclFileName ; (; ). inlinestatic . ReturnsName of the file containing the class declaration ; Definition at line 128 of file TBranchBrowsable.h. ◆ GetBrowsableMethodsForClass(). void TMethodBrowsable::GetBrowsableMethodsForClass ; (; TClass * ; cl, . TList & ; li . ). staticprotected ",MatchSource.WIKI,doc/master/classTMethodBrowsable.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMethodBrowsable.html
Availability,failure,failures,". ROOT: TMethodCall Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Static Public Member Functions |; Static Public Attributes |; Private Member Functions |; Private Attributes |; List of all members ; TMethodCall Class Reference. ; Method or function calling interface. ; Objects of this class contain the (CINT) environment to call a global function or a method for an object of a specific class with the desired arguments. This class is especially useful when a method has to be called more times for different objects and/or with different arguments. If a function or method needs to be called only once one better uses TInterpreter::Execute().; A limitation is known with the present implementation: failures can occur if parameters involve temporary object construction. ; Definition at line 37 of file TMethodCall.h. Public Types; using EReturnType = TInterpreter::EReturnType;  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  . Public Member Functions;  TMethodCall ();  Default TMethodCall ctor. ;  ;  TMethodCall (const char *function, const char *params);  Create a global function invocation environment. ;  ;  TMethodCall (const TFunction *func);  Create a global function invocation environment base on a TFunction object. ;  ;  TMethodCall (const TMethodCall &org);  Copy ctor. ; ",MatchSource.WIKI,doc/master/classTMethodCall.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMethodCall.html
Energy Efficiency,efficient,efficient,"entation. ◆ EReturnType. using TMethodCall::EReturnType = TInterpreter::EReturnType. Definition at line 40 of file TMethodCall.h. Constructor & Destructor Documentation. ◆ TMethodCall() [1/6]. TMethodCall::TMethodCall ; (; ). Default TMethodCall ctor. ; Use Init() to initialize the method call environment. ; Definition at line 40 of file TMethodCall.cxx. ◆ TMethodCall() [2/6]. TMethodCall::TMethodCall ; (; TClass * ; cl, . CallFunc_t * ; callfunc, . Longptr_t ; offset = 0 . ). Create a method invocation environment for a specific class, method described by the callfunc. ; Definition at line 49 of file TMethodCall.cxx. ◆ TMethodCall() [3/6]. TMethodCall::TMethodCall ; (; TClass * ; cl, . const char * ; method, . const char * ; params . ). Create a method invocation environment for a specific class, method and parameters. ; The parameter string has the form: ""\""aap\"", 3, 4.35"". To execute the method call TMethodCall::Execute(object,...). This two step method is much more efficient than calling for every invocation TInterpreter::Execute(...). ; Definition at line 62 of file TMethodCall.cxx. ◆ TMethodCall() [4/6]. TMethodCall::TMethodCall ; (; const char * ; function, . const char * ; params . ). Create a global function invocation environment. ; The parameter string has the form: ""\""aap\"", 3, 4,35"". To execute the function call TMethodCall::Execute(...). This two step method is much more efficient than calling for every invocation TInterpreter::Execute(...). ; Definition at line 75 of file TMethodCall.cxx. ◆ TMethodCall() [5/6]. TMethodCall::TMethodCall ; (; const TFunction * ; func). Create a global function invocation environment base on a TFunction object. ; To execute the function call TMethodCall::Execute(...). This two step method is much more efficient than calling for every invocation TInterpreter::Execute(...). ; Definition at line 87 of file TMethodCall.cxx. ◆ TMethodCall() [6/6]. TMethodCall::TMethodCall ; (; const TMethodCall & ; org). Copy ctor. ; Definiti",MatchSource.WIKI,doc/master/classTMethodCall.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMethodCall.html
Integrability,interface,interface,". ROOT: TMethodCall Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Static Public Member Functions |; Static Public Attributes |; Private Member Functions |; Private Attributes |; List of all members ; TMethodCall Class Reference. ; Method or function calling interface. ; Objects of this class contain the (CINT) environment to call a global function or a method for an object of a specific class with the desired arguments. This class is especially useful when a method has to be called more times for different objects and/or with different arguments. If a function or method needs to be called only once one better uses TInterpreter::Execute().; A limitation is known with the present implementation: failures can occur if parameters involve temporary object construction. ; Definition at line 37 of file TMethodCall.h. Public Types; using EReturnType = TInterpreter::EReturnType;  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  . Public Member Functions;  TMethodCall ();  Default TMethodCall ctor. ;  ;  TMethodCall (const char *function, const char *params);  Create a global function invocation environment. ;  ;  TMethodCall (const TFunction *func);  Create a global function invocation environment base on a TFunction object. ;  ;  TMethodCall (const TMethodCall &org);  Copy ctor. ; ",MatchSource.WIKI,doc/master/classTMethodCall.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMethodCall.html
Modifiability,inherit,inherited,"nce Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Static Public Member Functions |; Static Public Attributes |; Private Member Functions |; Private Attributes |; List of all members ; TMethodCall Class Reference. ; Method or function calling interface. ; Objects of this class contain the (CINT) environment to call a global function or a method for an object of a specific class with the desired arguments. This class is especially useful when a method has to be called more times for different objects and/or with different arguments. If a function or method needs to be called only once one better uses TInterpreter::Execute().; A limitation is known with the present implementation: failures can occur if parameters involve temporary object construction. ; Definition at line 37 of file TMethodCall.h. Public Types; using EReturnType = TInterpreter::EReturnType;  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  . Public Member Functions;  TMethodCall ();  Default TMethodCall ctor. ;  ;  TMethodCall (const char *function, const char *params);  Create a global function invocation environment. ;  ;  TMethodCall (const TFunction *func);  Create a global function invocation environment base on a TFunction object. ;  ;  TMethodCall (const TMethodCall &org);  Copy ctor. ;  ;  TMethodCall (TClass *cl, CallFunc_t *callfunc, Longptr_t of",MatchSource.WIKI,doc/master/classTMethodCall.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMethodCall.html
Performance,cache,cached,"MethodCall::Execute ; (; void * ; object, . const char * ; params, . Longptr_t & ; retLong . ). Execute the method for the specified object and argument values. ; Definition at line 467 of file TMethodCall.cxx. ◆ Execute() [16/17]. void TMethodCall::Execute ; (; void * ; object, . Double_t & ; retDouble . ). Execute the method (with preset arguments) for the specified object. ; Definition at line 484 of file TMethodCall.cxx. ◆ Execute() [17/17]. void TMethodCall::Execute ; (; void * ; object, . Longptr_t & ; retLong . ). Execute the method (with preset arguments) for the specified object. ; Definition at line 453 of file TMethodCall.cxx. ◆ GetCallFunc(). CallFunc_t * TMethodCall::GetCallFunc ; (; ); const. inline . Definition at line 93 of file TMethodCall.h. ◆ GetMethod(). TFunction * TMethodCall::GetMethod ; (; ). Returns the TMethod describing the method to be executed. ; This takes all overriding and overloading into account (call TClass::GetMethod()). Since finding the method is expensive the result is cached. ; Definition at line 386 of file TMethodCall.cxx. ◆ GetMethodName(). const char * TMethodCall::GetMethodName ; (; ); const. inline . Definition at line 90 of file TMethodCall.h. ◆ GetParams(). const char * TMethodCall::GetParams ; (; ); const. inline . Definition at line 91 of file TMethodCall.h. ◆ GetProto(). const char * TMethodCall::GetProto ; (; ); const. inline . Definition at line 92 of file TMethodCall.h. ◆ Init() [1/4]. void TMethodCall::Init ; (; const char * ; function, . const char * ; params . ). Initialize the function invocation environment. ; Necessary input information: the function name and the parameter string of the form ""\""aap\"", 3, 4.35"".; To execute the method call TMethodCall::Execute(...). This two step method is much more efficient than calling for every invocation TInterpreter::Execute(...). ; Definition at line 281 of file TMethodCall.cxx. ◆ Init() [2/4]. void TMethodCall::Init ; (; const TFunction * ; func). Initialize the meth",MatchSource.WIKI,doc/master/classTMethodCall.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMethodCall.html
Security,hash,hash," Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Returns name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual const char * GetTitle () const;  Returns title of object. ;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; virtual ULong_t Hash () const;  Return hash value for this object. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns kTRUE if object inherits from class ""classname"". ;  ; virtual Bool_t InheritsFrom (const TClass *cl) const;  Returns kTRUE if object inherits from TClass cl. ;  ; virtual void Inspect () const;  Dump contents of this object in a graphics canvas. ;  ; void InvertBit (UInt_t f);  ; Bool_t IsDestructed () const;  IsDestructed. ;  ; virtual Bool_t IsEqual (const TObject *obj) const;  Default equal comparison (objects are equal if they have the same address in memory). ;  ; virtual Bool_t IsFolder () const;  Returns kTRUE in case object contains browsable objects (like containers or lists of other objects). ;  ; R__ALWAYS_INLINE Bool_t",MatchSource.WIKI,doc/master/classTMethodCall.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMethodCall.html
Usability,usab,usable,"(const char *function, const char *params);  Initialize the function invocation environment. ;  ; void Init (const TFunction *func);  Initialize the method invocation environment based on the TFunction object. ;  ; void Init (TClass *cl, CallFunc_t *func, Longptr_t offset=0);  Initialize the method invocation environment based on the CallFunc object and the TClass describing the function context. ;  ; void Init (TClass *cl, const char *method, const char *params, Bool_t objectIsConst=kFALSE);  Initialize the method invocation environment. ;  ; void InitWithPrototype (const char *function, const char *proto, ROOT::EFunctionMatchMode mode=ROOT::kConversionMatch);  Initialize the function invocation environment. ;  ; void InitWithPrototype (TClass *cl, const char *method, const char *proto, Bool_t objectIsConst=kFALSE, ROOT::EFunctionMatchMode mode=ROOT::kConversionMatch);  Initialize the method invocation environment. ;  ; TClass * IsA () const override;  ; Bool_t IsValid () const;  Return true if the method call has been properly initialized and is usable. ;  ; TMethodCall & operator= (const TMethodCall &rhs);  Assignment operator. ;  ; void ResetParam ();  Reset parameter list. To be used before the first call the SetParam(). ;  ; EReturnType ReturnType ();  Returns the return type of the method. ;  ; void SetParam (Double_t d);  Add a double method parameter. ;  ; void SetParam (Float_t f);  Add a double method parameter. ;  ; void SetParam (Long64_t ll);  Add a long long method parameter. ;  ; void SetParam (Long_t l);  Add a long method parameter. ;  ; void SetParam (ULong64_t ull);  Add a unsigned long long method parameter. ;  ; void SetParamPtrs (void *paramArr, Int_t nparam=-1);  Set pointers to parameters. ;  ; template<typename... T> ; void SetParams (const T &... params);  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TO",MatchSource.WIKI,doc/master/classTMethodCall.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMethodCall.html
Availability,error,error,"virtual; Contour(Int_t npoints=10, Int_t pa1=0, Int_t pa2=1)TMinuitvirtual; Copy(TObject &named) const overrideTNamedvirtual; DeclFileName()TMinuitinlinestatic; DefineParameter(Int_t parNo, const char *name, Double_t initVal, Double_t initErr, Double_t lowerLimit, Double_t upperLimit)TMinuitvirtual; Delete(Option_t *option="""")TObjectvirtual; DeleteArrays()TMinuitvirtual; DistancetoPrimitive(Int_t px, Int_t py)TObjectvirtual; DoError(int level, const char *location, const char *fmt, va_list va) constTObjectprotectedvirtual; Draw(Option_t *option="""")TObjectvirtual; DrawClass() constTObjectvirtual; DrawClone(Option_t *option="""") constTObjectvirtual; Dump() constTObjectvirtual; EDeprecatedStatusBits enum nameTObject; Error(const char *method, const char *msgfmt,...) constTObjectvirtual; EStatusBits enum nameTObject; Eval(Int_t npar, Double_t *grad, Double_t &fval, Double_t *par, Int_t flag)TMinuitvirtual; Execute(const char *method, const char *params, Int_t *error=nullptr)TObjectvirtual; Execute(TMethod *method, TObjArray *params, Int_t *error=nullptr)TObjectvirtual; ExecuteEvent(Int_t event, Int_t px, Int_t py)TObjectvirtual; fAlimTMinuit; fAminTMinuit; fApsiTMinuit; Fatal(const char *method, const char *msgfmt,...) constTObjectvirtual; fBigedmTMinuit; fBitsTObjectprivate; fBlimTMinuit; fCfromTMinuit; fChptTMinuit; fCOMDplistTMinuit; fCONTgccTMinuit; fCONTwTMinuit; fCovmesTMinuit; fCpnamTMinuit; fCstatuTMinuit; fCtitlTMinuit; fCundefTMinuit; fCvrsnTMinuit; fCwordTMinuit; fDcovarTMinuit; fDgrdTMinuit; fDirinTMinuit; fDirinsTMinuit; fEDMTMinuit; fEmptyTMinuit; fEpsiTMinuit; fEpsma2TMinuit; fEpsmacTMinuit; fErnTMinuit; fErpTMinuit; fFCNTMinuit; fFIXPyyTMinuit; fFval3TMinuit; fG2TMinuit; fG2sTMinuit; fgDtorOnlyTObjectprivatestatic; fGinTMinuit; fGlobccTMinuit; fgObjectStatTObjectprivatestatic; fGRADgfTMinuit; fGraphicsModeTMinuit; fGrdTMinuit; fGrdsTMinuit; fGstepTMinuit; fGstepsTMinuit; fHESSyyTMinuit; fIcircTMinuit; fIcomndTMinuit; fIdbgTMinuit; FillBuffer(char *&buffer)",MatchSource.WIKI,doc/master/classTMinuit-members.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMinuit-members.html
Modifiability,inherit,inherited,". ROOT: Member List. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. TMinuit Member List. This is the complete list of members for TMinuit, including all inherited members. AbstractMethod(const char *method) constTObject; AddToTObjectTable(TObject *)TObjectprivatestatic; AppendPad(Option_t *option="""")TObjectvirtual; Browse(TBrowser *b)TObjectvirtual; BuildArrays(Int_t maxpar=15)TMinuitvirtual; CheckedHash()TObjectinline; Class()TMinuitstatic; Class_Name()TMinuitstatic; Class_Version()TMinuitinlinestatic; ClassName() constTObjectvirtual; Clear(Option_t *option="""") overrideTNamedvirtual; Clone(const char *newname="""") const overrideTMinuitvirtual; Command(const char *command)TMinuitvirtual; Compare(const TObject *obj) const overrideTNamedvirtual; Contour(Int_t npoints=10, Int_t pa1=0, Int_t pa2=1)TMinuitvirtual; Copy(TObject &named) const overrideTNamedvirtual; DeclFileName()TMinuitinlinestatic; DefineParameter(Int_t parNo, const char *name, Double_t initVal, Double_t initErr, Double_t lowerLimit, Double_t upperLimit)TMinuitvirtual; Delete(Option_t *option="""")TObjectvirtual; DeleteArrays()TMinuitvirtual; DistancetoPrimitive(Int_t px, Int_t py)TObjectvirtual; DoError(int level, const char *location, const char *fmt, va_list va) constTObjectprotectedvirtual; Draw(Option_t *option="""")TObjectvirtual; DrawClass() constTObjectvirtual; DrawClone(Option_t *option="""") constTObjectvirtual; Dump() constTObjectvirtual; EDeprecatedStatusBits enum nameTObject; Error(const char *method, const char *msgfmt,...) constTObjectvirtual; EStatusBits enum nameTObject; Eval(Int_t npar, Double_t *grad, Double_t &fval, Double_t *par, Int_t flag)TMinuitvirtual; Execute(const char *method, const char *params, Int_t *error=nullptr)TObjectvirtual; Execute(TMethod *method, TObjArray *params, Int_t *error=nullptr)TObjectvirtual; ExecuteEvent(Int_t event, Int_t px, Int_t py)TObjectvirtual; fAlimTMinuit; fAminTMinuit; fApsiTMinuit; Fatal(const char *method, const char *m",MatchSource.WIKI,doc/master/classTMinuit-members.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMinuit-members.html
Availability,down,down,"c) and the data for given values of the parameters. It is the task of MINUIT to find those values of the parameters which give the lowest value of chisquare. Basic concepts - The transformation for parameters with limits.; For variable parameters with limits, MINUIT uses the following transformation:. \[; P_{\mathrm{int}} = \arcsin; \left( 2\: \frac{P_{\mathrm{ext}}-a}{b-a} - 1 \right); P_{\mathrm{ext}} = a + \frac{b - a}{2} \left( \sin P_{\mathrm{int}} + 1 \right); \]. so that the internal value \(P_{\mathrm{int}}\) can take on any value, while the external value \(P_{\mathrm{ext}}\) can take on values only between the lower limit \(a\) and the upper limit \(b\). Since the transformation is necessarily non-linear, it would transform a nice linear problem into a nasty non-linear one, which is the reason why limits should be avoided if not necessary. In addition, the transformation does require some computer time, so it slows down the computation a little bit, and more importantly, it introduces additional numerical inaccuracy into the problem in addition to what is introduced in the numerical calculation of the FCN value. The effects of non-linearity and numerical roundoff both become more important as the external value gets closer to one of the limits (expressed as the distance to nearest limit divided by distance between limits). The user must therefore be aware of the fact that, for example, if he puts limits of \((0,10^{10})\) on a parameter, then the values \(0.0\) and \(1.0\) will be indistinguishable to the accuracy of most machines.; The transformation also affects the parameter error matrix, of course, so Minuit does a transformation of the error matrix (and the `‘parabolic’' parameter errors) when there are parameter limits. Users should however realize that the transformation is only a linear approximation, and that it cannot give a meaningful result if one or more parameters is very close to a limit, where \(\partial P_{\mathrm{ext}} / \partial P_{\math",MatchSource.WIKI,doc/master/classTMinuit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMinuit.html
Deployability,release,release,"on of one parameter. ;  ; virtual void mnseek ();  Performs a rough (but global) minimization by monte carlo search. ;  ; virtual void mnset ();  Interprets the commands that start with SET and SHOW. ;  ; virtual void mnsimp ();  Minimization using the simplex method of Nelder and Mead. ;  ; virtual void mnstat (Double_t &fmin, Double_t &fedm, Double_t &errdef, Int_t &npari, Int_t &nparx, Int_t &istat);  Returns concerning the current status of the minimization. ;  ; virtual void mntiny (Double_t epsp1, Double_t &epsbak);  To find the machine precision. ;  ; Bool_t mnunpt (TString &cfname);  Returns .TRUE. ;  ; virtual void mnvert (Double_t *a, Int_t l, Int_t m, Int_t n, Int_t &ifail);  Inverts a symmetric matrix. ;  ; virtual void mnwarn (const char *copt, const char *corg, const char *cmes);  Prints Warning messages. ;  ; virtual void mnwerr ();  Calculates the WERR, external parameter errors. ;  ; virtual Int_t Release (Int_t parNo);  release a parameter ;  ; virtual Int_t SetErrorDef (Double_t up);  To get the n-sigma contour the error def parameter ""up"" has to set to n^2. ;  ; virtual void SetFCN (void(*fcn)(Int_t &, Double_t *, Double_t &f, Double_t *, Int_t));  To set the address of the minimization function. ;  ; virtual void SetGraphicsMode (Bool_t mode=kTRUE);  ; virtual void SetMaxIterations (Int_t maxiter=500);  ; virtual void SetObjectFit (TObject *obj);  ; virtual Int_t SetPrintLevel (Int_t printLevel=0);  set Minuit print level. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const cha",MatchSource.WIKI,doc/master/classTMinuit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMinuit.html
Integrability,depend,depending,". ROOT: TMinuit Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Static Public Member Functions |; Public Attributes |; Private Member Functions |; List of all members ; TMinuit Class ReferenceMath » TMinuit. ; See alsoMinuit2 for a newer version of this package; Implementation in C++ of the Minuit package written by Fred James. This is a straightforward conversion of the original Fortran version.; The main changes are:. The variables in the various Minuit labelled common blocks have been changed to the TMinuit class data members.; The internal arrays with a maximum dimension depending on the maximum number of parameters are now data members arrays with a dynamic dimension such that one can fit very large problems by simply initialising the TMinuit constructor with the maximum number of parameters.; The include file Minuit.h has been commented as much as possible using existing comments in the code or the printed documentation; The original Minuit subroutines are now member functions.; Constructors and destructor have been added.; Instead of passing the FCN function in the argument list, the addresses of this function is stored as pointer in the data members of the class. This is by far more elegant and flexible in an interactive environment. The member function SetFCN can be used to define this pointer.; The ROOT static function Printf is provided to replace all format statements and to print on currently defined output file.; The functions SetObjectFit(TObject * obj)/GetObjectFit() can be used inside the FCN function to set/get a referenced object instead of using global variables. Basic concepts of MINUIT; The MINUIT package acts on a multiparameter Fortran function to which one must give the generic name FCN. In the ROOT implementation, the function FCN is defined via the MINUIT SetFCN member function when an Histogram.Fit command is invoked. The val",MatchSource.WIKI,doc/master/classTMinuit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMinuit.html
Modifiability,variab,variables,". ROOT: TMinuit Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Static Public Member Functions |; Public Attributes |; Private Member Functions |; List of all members ; TMinuit Class ReferenceMath » TMinuit. ; See alsoMinuit2 for a newer version of this package; Implementation in C++ of the Minuit package written by Fred James. This is a straightforward conversion of the original Fortran version.; The main changes are:. The variables in the various Minuit labelled common blocks have been changed to the TMinuit class data members.; The internal arrays with a maximum dimension depending on the maximum number of parameters are now data members arrays with a dynamic dimension such that one can fit very large problems by simply initialising the TMinuit constructor with the maximum number of parameters.; The include file Minuit.h has been commented as much as possible using existing comments in the code or the printed documentation; The original Minuit subroutines are now member functions.; Constructors and destructor have been added.; Instead of passing the FCN function in the argument list, the addresses of this function is stored as pointer in the data members of the class. This is by far more elegant and flexible in an interactive environment. The member function SetFCN can be used to define this pointer.; The ROOT static function Printf is provided to replace all format statements and to print on currently defined output file.; The functions SetObjectFit(TObject * obj)/GetObjectFit() can be used inside the FCN function to set/get a referenced object instead of using global variables. Basic concepts of MINUIT; The MINUIT package acts on a multiparameter Fortran function to which one must give the generic name FCN. In the ROOT implementation, the function FCN is defined via the MINUIT SetFCN member function when an Histogram.Fit command is invoked. The val",MatchSource.WIKI,doc/master/classTMinuit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMinuit.html
Performance,perform,perform,"(expressed as the distance to nearest limit divided by distance between limits). The user must therefore be aware of the fact that, for example, if he puts limits of \((0,10^{10})\) on a parameter, then the values \(0.0\) and \(1.0\) will be indistinguishable to the accuracy of most machines.; The transformation also affects the parameter error matrix, of course, so Minuit does a transformation of the error matrix (and the `‘parabolic’' parameter errors) when there are parameter limits. Users should however realize that the transformation is only a linear approximation, and that it cannot give a meaningful result if one or more parameters is very close to a limit, where \(\partial P_{\mathrm{ext}} / \partial P_{\mathrm{int}} \approx 0\). Therefore, it is recommended that:. Limits on variable parameters should be used only when needed in order to prevent the parameter from taking on unphysical values.; When a satisfactory minimum has been found using limits, the limits should then be removed if possible, in order to perform or re-perform the error analysis without limits. How to get the right answer from MINUIT.; MINUIT offers the user a choice of several minimization algorithms. The MIGRAD algorithm is in general the best minimizer for nearly all functions. It is a variable-metric method with inexact line search, a stable metric updating scheme, and checks for positive-definiteness. Its main weakness is that it depends heavily on knowledge of the first derivatives, and fails miserably if they are very inaccurate.; If parameter limits are needed, in spite of the side effects, then the user should be aware of the following techniques to alleviate problems caused by limits:; Getting the right minimum with limits.; If MIGRAD converges normally to a point where no parameter is near one of its limits, then the existence of limits has probably not prevented MINUIT from finding the right minimum. On the other hand, if one or more parameters is near its limit at the minimum,",MatchSource.WIKI,doc/master/classTMinuit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMinuit.html
Safety,avoid,avoided,"unction defines the Minuit fitting function as being H1FitChisquare or H1FitLikelihood depending on the options selected. H1FitChisquare calculates the chisquare between the user fitting function (gaussian, polynomial, user defined,etc) and the data for given values of the parameters. It is the task of MINUIT to find those values of the parameters which give the lowest value of chisquare. Basic concepts - The transformation for parameters with limits.; For variable parameters with limits, MINUIT uses the following transformation:. \[; P_{\mathrm{int}} = \arcsin; \left( 2\: \frac{P_{\mathrm{ext}}-a}{b-a} - 1 \right); P_{\mathrm{ext}} = a + \frac{b - a}{2} \left( \sin P_{\mathrm{int}} + 1 \right); \]. so that the internal value \(P_{\mathrm{int}}\) can take on any value, while the external value \(P_{\mathrm{ext}}\) can take on values only between the lower limit \(a\) and the upper limit \(b\). Since the transformation is necessarily non-linear, it would transform a nice linear problem into a nasty non-linear one, which is the reason why limits should be avoided if not necessary. In addition, the transformation does require some computer time, so it slows down the computation a little bit, and more importantly, it introduces additional numerical inaccuracy into the problem in addition to what is introduced in the numerical calculation of the FCN value. The effects of non-linearity and numerical roundoff both become more important as the external value gets closer to one of the limits (expressed as the distance to nearest limit divided by distance between limits). The user must therefore be aware of the fact that, for example, if he puts limits of \((0,10^{10})\) on a parameter, then the values \(0.0\) and \(1.0\) will be indistinguishable to the accuracy of most machines.; The transformation also affects the parameter error matrix, of course, so Minuit does a transformation of the error matrix (and the `‘parabolic’' parameter errors) when there are parameter limits. U",MatchSource.WIKI,doc/master/classTMinuit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMinuit.html
Security,hash,hash," override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; TClass * IsA () const override;  ; Bool_t IsSortable () const override;  ; void ls (Option_t *option="""") const override;  List TNamed name and title. ;  ; TNamed & operator= (const TNamed &rhs);  TNamed assignment operator. ;  ; void Print (Option_t *option="""") const override;  Print TNamed name and title. ;  ; virtual void SetName (const char *name);  Set the name of the TNamed. ;  ; virtual void SetNameTitle (const char *name, const char *title);  Set all the TNamed parameters (name and title). ;  ; virtual void SetTitle (const char *title="""");  Set the title of the TNamed. ;  ; virtual Int_t Sizeof () const;  Return size of the TNamed part of the TObject. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;",MatchSource.WIKI,doc/master/classTMinuit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMinuit.html
Testability,log,logical," free side effect, but with a smaller step size in order to obtain a known accuracy. ; Definition at line 3993 of file TMinuit.cxx. ◆ mnimpr(). void TMinuit::mnimpr ; (; ). virtual . Attempts to improve on a good local minimum. ; Attempts to improve on a good local minimum by finding a better one. The quadratic part of FCN is removed by MNCALF and this transformed function is minimised using the simplex method from several random starting points.; ref. – Goldstein and Price, Math.Comp. 25, 569 (1971) ; Definition at line 4295 of file TMinuit.cxx. ◆ mninex(). void TMinuit::mninex ; (; Double_t * ; pint). virtual . Transforms from internal coordinates (PINT) to external (U) ; The minimising routines which work in internal coordinates call this routine before calling FCN. ; Definition at line 4506 of file TMinuit.cxx. ◆ mninit(). void TMinuit::mninit ; (; Int_t ; i1, . Int_t ; i2, . Int_t ; i3 . ). virtual . Main initialization member function for MINUIT. ; It initializes some constants (including the logical I/O unit nos.), ; Definition at line 4526 of file TMinuit.cxx. ◆ mnlims(). void TMinuit::mnlims ; (; ). virtual . Interprets the SET LIM command, to reset the parameter limits. ; Called from MNSET ; Definition at line 4616 of file TMinuit.cxx. ◆ mnline(). void TMinuit::mnline ; (; Double_t * ; start, . Double_t ; fstart, . Double_t * ; step, . Double_t ; slope, . Double_t ; toler . ). virtual . Perform a line search from position START. ; along direction STEP, where the length of vector STEP gives the expected position of minimum.; FSTART is value of function at START; SLOPE (if non-zero) is df/dx along STEP at START; TOLER is initial tolerance of minimum in direction STEP. SLAMBG and ALPHA control the maximum individual steps allowed. The first step is always =1. The max length of second step is SLAMBG. The max size of subsequent steps is the maximum previous successful step multiplied by ALPHA + the size of most recent successful step, but cannot be smaller than ",MatchSource.WIKI,doc/master/classTMinuit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMinuit.html
Usability,simpl,simply,". ROOT: TMinuit Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Static Public Member Functions |; Public Attributes |; Private Member Functions |; List of all members ; TMinuit Class ReferenceMath » TMinuit. ; See alsoMinuit2 for a newer version of this package; Implementation in C++ of the Minuit package written by Fred James. This is a straightforward conversion of the original Fortran version.; The main changes are:. The variables in the various Minuit labelled common blocks have been changed to the TMinuit class data members.; The internal arrays with a maximum dimension depending on the maximum number of parameters are now data members arrays with a dynamic dimension such that one can fit very large problems by simply initialising the TMinuit constructor with the maximum number of parameters.; The include file Minuit.h has been commented as much as possible using existing comments in the code or the printed documentation; The original Minuit subroutines are now member functions.; Constructors and destructor have been added.; Instead of passing the FCN function in the argument list, the addresses of this function is stored as pointer in the data members of the class. This is by far more elegant and flexible in an interactive environment. The member function SetFCN can be used to define this pointer.; The ROOT static function Printf is provided to replace all format statements and to print on currently defined output file.; The functions SetObjectFit(TObject * obj)/GetObjectFit() can be used inside the FCN function to set/get a referenced object instead of using global variables. Basic concepts of MINUIT; The MINUIT package acts on a multiparameter Fortran function to which one must give the generic name FCN. In the ROOT implementation, the function FCN is defined via the MINUIT SetFCN member function when an Histogram.Fit command is invoked. The val",MatchSource.WIKI,doc/master/classTMinuit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMinuit.html
Availability,error,error,"ject. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t ",MatchSource.WIKI,doc/master/classTMinuit2TraceObject.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMinuit2TraceObject.html
Integrability,message,message,"ject. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t ",MatchSource.WIKI,doc/master/classTMinuit2TraceObject.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMinuit2TraceObject.html
Modifiability,inherit,inherited,". ROOT: TMinuit2TraceObject Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Private Attributes |; List of all members ; TMinuit2TraceObject Class Reference. . Definition at line 30 of file TMinuit2TraceObject.h. Public Member Functions;  TMinuit2TraceObject (int parNumber=-1);  ;  ~TMinuit2TraceObject () override;  ; void Init (const ROOT::Minuit2::MnUserParameterState &state) override;  ; TClass * IsA () const override;  ; void operator() (int i, const ROOT::Minuit2::MinimumState &state) override;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from ROOT::Minuit2::MnTraceObject;  MnTraceObject (int parNumber=-1);  ; virtual ~MnTraceObject ();  ; int ParNumber () const;  ; void SetParNumber (int number);  ; const MnUserParameterState & UserState () const;  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; TClass * IsA () const override;  ; Bool_",MatchSource.WIKI,doc/master/classTMinuit2TraceObject.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMinuit2TraceObject.html
Security,hash,hash," ; int ParNumber () const;  ; void SetParNumber (int number);  ; const MnUserParameterState & UserState () const;  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; TClass * IsA () const override;  ; Bool_t IsSortable () const override;  ; void ls (Option_t *option="""") const override;  List TNamed name and title. ;  ; TNamed & operator= (const TNamed &rhs);  TNamed assignment operator. ;  ; void Print (Option_t *option="""") const override;  Print TNamed name and title. ;  ; virtual void SetName (const char *name);  Set the name of the TNamed. ;  ; virtual void SetNameTitle (const char *name, const char *title);  Set all the TNamed parameters (name and title). ;  ; virtual void SetTitle (const char *title="""");  Set the title of the TNamed. ;  ; virtual Int_t Sizeof () const;  Return size of the TNamed part of the TObject. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;",MatchSource.WIKI,doc/master/classTMinuit2TraceObject.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMinuit2TraceObject.html
Availability,error,errors,"ug-in with name Minuit2 Minimization Library or TMinuit). In addition the user can choose the minimizer algorithm: Migrad (the default one), Simplex, or Minimize (combined Migrad + Simplex) ; Definition at line 51 of file TMinuitMinimizer.h. Public Member Functions;  TMinuitMinimizer (const char *type, unsigned int ndim=0);  Constructor from a char * (used by PM) ;  ;  TMinuitMinimizer (ROOT::Minuit::EMinimizerType type=ROOT::Minuit::kMigrad, unsigned int ndim=0);  Default constructor. ;  ;  ~TMinuitMinimizer () override;  Destructor (no operations) ;  ; bool Contour (unsigned int i, unsigned int j, unsigned int &npoints, double *xi, double *xj) override;  find the contour points (xi,xj) of the function for parameter i and j around the minimum The contour will be find for value of the function = Min + ErrorUp(); ;  ; double CovMatrix (unsigned int i, unsigned int j) const override;  return covariance matrices elements if the variable is fixed the matrix is zero The ordering of the variables is the same as in errors ;  ; int CovMatrixStatus () const override;  return status of covariance matrix ;  ; double Edm () const override;  return expected distance reached from the minimum ;  ; const double * Errors () const override;  return errors at the minimum ;  ; bool FixVariable (unsigned int) override;  fix an existing variable ;  ; bool GetCovMatrix (double *cov) const override;  Fill the passed array with the covariance matrix elements if the variable is fixed or const the value is zero. ;  ; bool GetHessianMatrix (double *h) const override;  Fill the passed array with the Hessian matrix elements The Hessian matrix is the matrix of the second derivatives and is the inverse of the covariance matrix If the variable is fixed or const the values for that variables are zero. ;  ; bool GetMinosError (unsigned int i, double &errLow, double &errUp, int=0) override;  minos error for variable i, return false if Minos failed ;  ; bool GetVariableSettings (unsigned int, ROOT::Fit",MatchSource.WIKI,doc/master/classTMinuitMinimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMinuitMinimizer.html
Deployability,release,release,"onst override;  return pointer to gradient values at the minimum ;  ; bool Minimize () override;  method to perform the minimization ;  ; int MinosStatus () const override;  minos status code of last Minos run minos status = -1 : Minos is not run = 0 : last MINOS run was successful > 0 : some problems encountered when running MINOS ;  ; double MinValue () const override;  return minimum function value ;  ; unsigned int NCalls () const override;  number of function calls to reach the minimum ;  ; unsigned int NDim () const override;  this is <= Function().NDim() which is the total number of variables (free+ constrained ones) ;  ; unsigned int NFree () const override;  number of free variables (real dimension of the problem) this is <= Function().NDim() which is the total ;  ; void PrintResults () override;  return reference to the objective function virtual const ROOT::Math::IGenFunction & Function() const = 0; ;  ; bool ProvidesError () const override;  minimizer provides error and error matrix ;  ; bool ReleaseVariable (unsigned int) override;  release an existing variable ;  ; bool Scan (unsigned int i, unsigned int &nstep, double *x, double *y, double xmin=0, double xmax=0) override;  scan a parameter i around the minimum. ;  ; bool SetDebug (bool on=true);  set debug mode. Return true if setting was successful ;  ; bool SetFixedVariable (unsigned int, const std::string &, double) override;  set fixed variable (override if minimizer supports them ) ;  ; void SetFunction (const ROOT::Math::IMultiGenFunction &func) override;  set the function to minimize ;  ; bool SetLimitedVariable (unsigned int ivar, const std::string &name, double val, double step, double, double) override;  set upper/lower limited variable (override if minimizer supports them ) ;  ; bool SetLowerLimitedVariable (unsigned int ivar, const std::string &name, double val, double step, double lower) override;  set lower limit variable (override if minimizer supports them ) ;  ; bool SetUpperLimitedVa",MatchSource.WIKI,doc/master/classTMinuitMinimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMinuitMinimizer.html
Integrability,interface,interface,". ROOT: TMinuitMinimizer Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Static Protected Member Functions |; Private Attributes |; Static Private Attributes |; List of all members ; TMinuitMinimizer Class ReferenceMath » TMinuit. ; TMinuitMinimizer class: ROOT::Math::Minimizer implementation based on TMinuit. ; See alsoMinuit2 for a newer version of this class TMinuitMinimizer class implementing the ROOT::Math::Minimizer interface using TMinuit. This class is normally instantiated using the plug-in manager (plug-in with name Minuit2 Minimization Library or TMinuit). In addition the user can choose the minimizer algorithm: Migrad (the default one), Simplex, or Minimize (combined Migrad + Simplex) ; Definition at line 51 of file TMinuitMinimizer.h. Public Member Functions;  TMinuitMinimizer (const char *type, unsigned int ndim=0);  Constructor from a char * (used by PM) ;  ;  TMinuitMinimizer (ROOT::Minuit::EMinimizerType type=ROOT::Minuit::kMigrad, unsigned int ndim=0);  Default constructor. ;  ;  ~TMinuitMinimizer () override;  Destructor (no operations) ;  ; bool Contour (unsigned int i, unsigned int j, unsigned int &npoints, double *xi, double *xj) override;  find the contour points (xi,xj) of the function for parameter i and j around the minimum The contour will be find for value of the function = Min + ErrorUp(); ;  ; double CovMatrix (unsigned int i, unsigned int j) const override;  return covariance matrices elements if the variable is fixed the matrix is zero The ordering of the variables is the same as in errors ;  ; int CovMatrixStatus () const override;  return status of covariance matrix ;  ; double Edm () const override;  return expected distance reached from the minimum ;  ; const double * Errors () const override;  return errors at the minimum ;  ; bool FixVariable (unsigned int) override;  ",MatchSource.WIKI,doc/master/classTMinuitMinimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMinuitMinimizer.html
Modifiability,plug-in,plug-in,". ROOT: TMinuitMinimizer Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Static Protected Member Functions |; Private Attributes |; Static Private Attributes |; List of all members ; TMinuitMinimizer Class ReferenceMath » TMinuit. ; TMinuitMinimizer class: ROOT::Math::Minimizer implementation based on TMinuit. ; See alsoMinuit2 for a newer version of this class TMinuitMinimizer class implementing the ROOT::Math::Minimizer interface using TMinuit. This class is normally instantiated using the plug-in manager (plug-in with name Minuit2 Minimization Library or TMinuit). In addition the user can choose the minimizer algorithm: Migrad (the default one), Simplex, or Minimize (combined Migrad + Simplex) ; Definition at line 51 of file TMinuitMinimizer.h. Public Member Functions;  TMinuitMinimizer (const char *type, unsigned int ndim=0);  Constructor from a char * (used by PM) ;  ;  TMinuitMinimizer (ROOT::Minuit::EMinimizerType type=ROOT::Minuit::kMigrad, unsigned int ndim=0);  Default constructor. ;  ;  ~TMinuitMinimizer () override;  Destructor (no operations) ;  ; bool Contour (unsigned int i, unsigned int j, unsigned int &npoints, double *xi, double *xj) override;  find the contour points (xi,xj) of the function for parameter i and j around the minimum The contour will be find for value of the function = Min + ErrorUp(); ;  ; double CovMatrix (unsigned int i, unsigned int j) const override;  return covariance matrices elements if the variable is fixed the matrix is zero The ordering of the variables is the same as in errors ;  ; int CovMatrixStatus () const override;  return status of covariance matrix ;  ; double Edm () const override;  return expected distance reached from the minimum ;  ; const double * Errors () const override;  return errors at the minimum ;  ; bool FixVariable (unsigned int) override;  ",MatchSource.WIKI,doc/master/classTMinuitMinimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMinuitMinimizer.html
Performance,perform,perform,"dm () const override;  return expected distance reached from the minimum ;  ; const double * Errors () const override;  return errors at the minimum ;  ; bool FixVariable (unsigned int) override;  fix an existing variable ;  ; bool GetCovMatrix (double *cov) const override;  Fill the passed array with the covariance matrix elements if the variable is fixed or const the value is zero. ;  ; bool GetHessianMatrix (double *h) const override;  Fill the passed array with the Hessian matrix elements The Hessian matrix is the matrix of the second derivatives and is the inverse of the covariance matrix If the variable is fixed or const the values for that variables are zero. ;  ; bool GetMinosError (unsigned int i, double &errLow, double &errUp, int=0) override;  minos error for variable i, return false if Minos failed ;  ; bool GetVariableSettings (unsigned int, ROOT::Fit::ParameterSettings &) const override;  get variable settings in a variable object (like ROOT::Fit::ParamsSettings) ;  ; double GlobalCC (unsigned int) const override;  global correlation coefficient for variable i ;  ; bool Hesse () override;  perform a full calculation of the Hessian matrix for error calculation ;  ; virtual TClass * IsA () const;  ; bool IsFixedVariable (unsigned int) const override;  query if an existing variable is fixed (i.e. ;  ; const double * MinGradient () const override;  return pointer to gradient values at the minimum ;  ; bool Minimize () override;  method to perform the minimization ;  ; int MinosStatus () const override;  minos status code of last Minos run minos status = -1 : Minos is not run = 0 : last MINOS run was successful > 0 : some problems encountered when running MINOS ;  ; double MinValue () const override;  return minimum function value ;  ; unsigned int NCalls () const override;  number of function calls to reach the minimum ;  ; unsigned int NDim () const override;  this is <= Function().NDim() which is the total number of variables (free+ constrained ones) ;  ",MatchSource.WIKI,doc/master/classTMinuitMinimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMinuitMinimizer.html
Security,validat,validation,":string &name) const override;  get index of variable given a variable given a name return always -1 . ;  ; std::string VariableName (unsigned int ivar) const override;  return reference to the objective function virtual const ROOT::Math::IGenFunction & Function() const; ;  ; const double * X () const override;  return pointer to X values at the minimum ;  ;  Public Member Functions inherited from ROOT::Math::Minimizer;  Minimizer ();  Default constructor. ;  ;  Minimizer (Minimizer &&)=delete;  ;  Minimizer (Minimizer const &)=delete;  ; virtual ~Minimizer ();  Destructor (no operations). ;  ; virtual void Clear ();  reset for consecutive minimization - implement if needed ;  ; virtual double Correlation (unsigned int i, unsigned int j) const;  return correlation coefficient between variable i and j. ;  ; double ErrorDef () const;  return the statistical scale used for calculate the error is typically 1 for Chi2 and 0.5 for likelihood minimization ;  ; bool IsValidError () const;  return true if Minimizer has performed a detailed error validation (e.g. run Hesse for Minuit) ;  ; unsigned int MaxFunctionCalls () const;  max number of function calls ;  ; unsigned int MaxIterations () const;  max iterations ;  ; virtual unsigned int NIterations () const;  number of iterations to reach the minimum ;  ; Minimizer & operator= (Minimizer &&)=delete;  ; Minimizer & operator= (Minimizer const &)=delete;  ; virtual MinimizerOptions Options () const;  retrieve the minimizer options (implement derived class if needed) ;  ; double Precision () const;  precision of minimizer in the evaluation of the objective function ( a value <=0 corresponds to the let the minimizer choose its default one) ;  ; int PrintLevel () const;  minimizer configuration parameters ;  ; virtual bool SetCovariance (std::span< const double > cov, unsigned int nrow);  set initial covariance matrix ;  ; virtual bool SetCovarianceDiag (std::span< const double > d2, unsigned int n);  set initial second derivat",MatchSource.WIKI,doc/master/classTMinuitMinimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMinuitMinimizer.html
Availability,error,error,"ject. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t ",MatchSource.WIKI,doc/master/classTMixture.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMixture.html
Integrability,message,message,"ject. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t ",MatchSource.WIKI,doc/master/classTMixture.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMixture.html
Modifiability,inherit,inherited,". master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Attributes |; List of all members ; TMixture Class ReferenceGraphics » 3D Graphics » Basic 3D graphics. ; Manages a detector mixture. ; See class TGeometry. ; Definition at line 27 of file TMixture.h. Public Member Functions;  TMixture ();  Mixture default constructor. ;  ;  TMixture (const char *name, const char *title, Int_t nmixt);  Mixture normal constructor. ;  ;  ~TMixture () override;  Mixture default destructor. ;  ; virtual void DefineElement (Int_t n, Float_t a, Float_t z, Float_t w);  Define one mixture element. ;  ; Float_t * GetAmixt () const;  ; Int_t GetNmixt () const;  ; Float_t * GetWmixt () const;  ; Float_t * GetZmixt () const;  ; TClass * IsA () const override;  ; void Streamer (TBuffer &) override;  Stream a class object. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TMaterial;  TMaterial ();  Material default constructor. ;  ;  TMaterial (const char *name, const char *title, Float_t a, Float_t z, Float_t density);  Material normal constructor. ;  ;  TMaterial (const char *name, const char *title, Float_t a, Float_t z, Float_t density, Float_t radl, Float_t inter);  Material normal constructor. ;  ;  ~TMaterial () override;  Material default destructor. ;  ; virtual Float_t GetA () const;  ; virtual Float_t GetDensity () const;  ; virtual Float_t GetInterLength () const;  ; virtual Int_t GetNumber () const;  ; virtual Float_t GetRadLength () const;  ; virtual Float_t GetZ () const;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clea",MatchSource.WIKI,doc/master/classTMixture.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMixture.html
Safety,detect,detector,". ROOT: TMixture Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Attributes |; List of all members ; TMixture Class ReferenceGraphics » 3D Graphics » Basic 3D graphics. ; Manages a detector mixture. ; See class TGeometry. ; Definition at line 27 of file TMixture.h. Public Member Functions;  TMixture ();  Mixture default constructor. ;  ;  TMixture (const char *name, const char *title, Int_t nmixt);  Mixture normal constructor. ;  ;  ~TMixture () override;  Mixture default destructor. ;  ; virtual void DefineElement (Int_t n, Float_t a, Float_t z, Float_t w);  Define one mixture element. ;  ; Float_t * GetAmixt () const;  ; Int_t GetNmixt () const;  ; Float_t * GetWmixt () const;  ; Float_t * GetZmixt () const;  ; TClass * IsA () const override;  ; void Streamer (TBuffer &) override;  Stream a class object. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TMaterial;  TMaterial ();  Material default constructor. ;  ;  TMaterial (const char *name, const char *title, Float_t a, Float_t z, Float_t density);  Material normal constructor. ;  ;  TMaterial (const char *name, const char *title, Float_t a, Float_t z, Float_t density, Float_t radl, Float_t inter);  Material normal constructor. ;  ;  ~TMaterial () override;  Material default destructor. ;  ; virtual Float_t GetA () const;  ; virtual Float_t GetDensity () const;  ; virtual Float_t GetInterLength () const;  ; virtual Int_t GetNumber () const;  ; virtual Float_t GetRadLength () const;  ; virtual Float_t GetZ () const;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~T",MatchSource.WIKI,doc/master/classTMixture.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMixture.html
Security,hash,hash,"ngth () const;  ; virtual Float_t GetZ () const;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; TClass * IsA () const override;  ; Bool_t IsSortable () const override;  ; void ls (Option_t *option="""") const override;  List TNamed name and title. ;  ; TNamed & operator= (const TNamed &rhs);  TNamed assignment operator. ;  ; void Print (Option_t *option="""") const override;  Print TNamed name and title. ;  ; virtual void SetName (const char *name);  Set the name of the TNamed. ;  ; virtual void SetNameTitle (const char *name, const char *title);  Set all the TNamed parameters (name and title). ;  ; virtual void SetTitle (const char *title="""");  Set the title of the TNamed. ;  ; virtual Int_t Sizeof () const;  Return size of the TNamed part of the TObject. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;",MatchSource.WIKI,doc/master/classTMixture.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMixture.html
Availability,error,error,"object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Return",MatchSource.WIKI,doc/master/classTMLPAnalyzer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMLPAnalyzer.html
Deployability,continuous,continuous," sensitive to small variations of any of my inputs ?. As you might understand, this is to be considered with care and can serve as input for an ""educated guess"" when optimizing the network. ; Definition at line 311 of file TMLPAnalyzer.cxx. ◆ DrawNetwork(). void TMLPAnalyzer::DrawNetwork ; (; Int_t ; neuron, . const char * ; signal, . const char * ; bg . ). Draws the distribution of the neural network (using ith neuron). ; Two distributions are drawn, for events passing respectively the ""signal"" and ""background"" cuts. Only the test sample is used. ; Definition at line 337 of file TMLPAnalyzer.cxx. ◆ DrawTruthDeviation(). TProfile * TMLPAnalyzer::DrawTruthDeviation ; (; Int_t ; outnode = 0, . Option_t * ; option = """" . ). Create a profile of the difference of the MLP output minus the true value for a given output node outnode, vs the true value for outnode, for all test data events. ; This method is mainly useful when doing regression analysis with the MLP (i.e. not classification, but continuous truth values). The resulting TProfile histogram is returned. It is not drawn if option ""goff"" is specified. Options are passed to TProfile::Draw ; Definition at line 398 of file TMLPAnalyzer.cxx. ◆ DrawTruthDeviationInOut(). TProfile * TMLPAnalyzer::DrawTruthDeviationInOut ; (; Int_t ; innode, . Int_t ; outnode = 0, . Option_t * ; option = """" . ). Creates a profile of the difference of the MLP output outnode minus the true value of outnode vs the input value innode, for all test data events. ; The resulting TProfile histogram is returned. It is not drawn if option ""goff"" is specified. Options are passed to TProfile::Draw ; Definition at line 474 of file TMLPAnalyzer.cxx. ◆ DrawTruthDeviationInsOut(). THStack * TMLPAnalyzer::DrawTruthDeviationInsOut ; (; Int_t ; outnode = 0, . Option_t * ; option = """" . ). Creates a profile of the difference of the MLP output outnode minus the true value of outnode vs the input value, stacked for all inputs, for all test data events. ; The re",MatchSource.WIKI,doc/master/classTMLPAnalyzer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMLPAnalyzer.html
Integrability,message,message,"object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Return",MatchSource.WIKI,doc/master/classTMLPAnalyzer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMLPAnalyzer.html
Modifiability,variab,variables,". ROOT: TMLPAnalyzer Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Private Attributes |; List of all members ; TMLPAnalyzer Class Reference. ; This utility class contains a set of tests useful when developing a neural network. ; It allows you to check for unneeded variables, and to control the network structure. ; Definition at line 25 of file TMLPAnalyzer.h. Public Member Functions;  TMLPAnalyzer (TMultiLayerPerceptron &net);  ;  TMLPAnalyzer (TMultiLayerPerceptron *net);  ;  ~TMLPAnalyzer () override;  Destructor. ;  ; void CheckNetwork ();  Gives some information about the network in the terminal. ;  ; void DrawDInput (Int_t i);  Draws the distribution (on the test sample) of the impact on the network output of a small variation of the ith input. ;  ; void DrawDInputs ();  Draws the distribution (on the test sample) of the impact on the network output of a small variation of each input. ;  ; void DrawNetwork (Int_t neuron, const char *signal, const char *bg);  Draws the distribution of the neural network (using ith neuron). ;  ; TProfile * DrawTruthDeviation (Int_t outnode=0, Option_t *option="""");  Create a profile of the difference of the MLP output minus the true value for a given output node outnode, vs the true value for outnode, for all test data events. ;  ; TProfile * DrawTruthDeviationInOut (Int_t innode, Int_t outnode=0, Option_t *option="""");  Creates a profile of the difference of the MLP output outnode minus the true value of outnode vs the input value innode, for all test data events. ;  ; THStack * DrawTruthDeviationInsOut (Int_t outnode=0, Option_t *option="""");  Creates a profile of the difference of the MLP output outnode minus the true value of outnode vs the input value, stacked for all inputs, for all test data events. ;  ; THStack * DrawTruthDeviations (Option_t *option="""");  Create",MatchSource.WIKI,doc/master/classTMLPAnalyzer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMLPAnalyzer.html
Performance,optimiz,optimizing,". Draws the distribution (on the test sample) of the impact on the network output of a small variation of the ith input. ; Definition at line 284 of file TMLPAnalyzer.cxx. ◆ DrawDInputs(). void TMLPAnalyzer::DrawDInputs ; (; ). Draws the distribution (on the test sample) of the impact on the network output of a small variation of each input. ; DrawDInputs() draws something that approximates the distribution of the derivative of the NN w.r.t. each input. That quantity is recognized as one of the measures to determine key quantities in the network.; What is done is to vary one input around its nominal value and to see how the NN changes. This is done for each entry in the sample and produces a distribution.; What you can learn from that is:; is variable a really useful, or is my network insensitive to it ?; is there any risk of big systematic ? Is the network extremely sensitive to small variations of any of my inputs ?. As you might understand, this is to be considered with care and can serve as input for an ""educated guess"" when optimizing the network. ; Definition at line 311 of file TMLPAnalyzer.cxx. ◆ DrawNetwork(). void TMLPAnalyzer::DrawNetwork ; (; Int_t ; neuron, . const char * ; signal, . const char * ; bg . ). Draws the distribution of the neural network (using ith neuron). ; Two distributions are drawn, for events passing respectively the ""signal"" and ""background"" cuts. Only the test sample is used. ; Definition at line 337 of file TMLPAnalyzer.cxx. ◆ DrawTruthDeviation(). TProfile * TMLPAnalyzer::DrawTruthDeviation ; (; Int_t ; outnode = 0, . Option_t * ; option = """" . ). Create a profile of the difference of the MLP output minus the true value for a given output node outnode, vs the true value for outnode, for all test data events. ; This method is mainly useful when doing regression analysis with the MLP (i.e. not classification, but continuous truth values). The resulting TProfile histogram is returned. It is not drawn if option ""goff"" is specified. Op",MatchSource.WIKI,doc/master/classTMLPAnalyzer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMLPAnalyzer.html
Safety,risk,risk,"nestatic . ReturnsName of the file containing the class declaration ; Definition at line 58 of file TMLPAnalyzer.h. ◆ DrawDInput(). void TMLPAnalyzer::DrawDInput ; (; Int_t ; i). Draws the distribution (on the test sample) of the impact on the network output of a small variation of the ith input. ; Definition at line 284 of file TMLPAnalyzer.cxx. ◆ DrawDInputs(). void TMLPAnalyzer::DrawDInputs ; (; ). Draws the distribution (on the test sample) of the impact on the network output of a small variation of each input. ; DrawDInputs() draws something that approximates the distribution of the derivative of the NN w.r.t. each input. That quantity is recognized as one of the measures to determine key quantities in the network.; What is done is to vary one input around its nominal value and to see how the NN changes. This is done for each entry in the sample and produces a distribution.; What you can learn from that is:; is variable a really useful, or is my network insensitive to it ?; is there any risk of big systematic ? Is the network extremely sensitive to small variations of any of my inputs ?. As you might understand, this is to be considered with care and can serve as input for an ""educated guess"" when optimizing the network. ; Definition at line 311 of file TMLPAnalyzer.cxx. ◆ DrawNetwork(). void TMLPAnalyzer::DrawNetwork ; (; Int_t ; neuron, . const char * ; signal, . const char * ; bg . ). Draws the distribution of the neural network (using ith neuron). ; Two distributions are drawn, for events passing respectively the ""signal"" and ""background"" cuts. Only the test sample is used. ; Definition at line 337 of file TMLPAnalyzer.cxx. ◆ DrawTruthDeviation(). TProfile * TMLPAnalyzer::DrawTruthDeviation ; (; Int_t ; outnode = 0, . Option_t * ; option = """" . ). Create a profile of the difference of the MLP output minus the true value for a given output node outnode, vs the true value for outnode, for all test data events. ; This method is mainly useful when doing regress",MatchSource.WIKI,doc/master/classTMLPAnalyzer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMLPAnalyzer.html
Security,hash,hash," Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Returns name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual const char * GetTitle () const;  Returns title of object. ;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; virtual ULong_t Hash () const;  Return hash value for this object. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns kTRUE if object inherits from class ""classname"". ;  ; virtual Bool_t InheritsFrom (const TClass *cl) const;  Returns kTRUE if object inherits from TClass cl. ;  ; virtual void Inspect () const;  Dump contents of this object in a graphics canvas. ;  ; void InvertBit (UInt_t f);  ; Bool_t IsDestructed () const;  IsDestructed. ;  ; virtual Bool_t IsEqual (const TObject *obj) const;  Default equal comparison (objects are equal if they have the same address in memory). ;  ; virtual Bool_t IsFolder () const;  Returns kTRUE in case object contains browsable objects (like containers or lists of other objects). ;  ; R__ALWAYS_INLINE Bool_t",MatchSource.WIKI,doc/master/classTMLPAnalyzer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMLPAnalyzer.html
Testability,test,tests,". ROOT: TMLPAnalyzer Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Private Attributes |; List of all members ; TMLPAnalyzer Class Reference. ; This utility class contains a set of tests useful when developing a neural network. ; It allows you to check for unneeded variables, and to control the network structure. ; Definition at line 25 of file TMLPAnalyzer.h. Public Member Functions;  TMLPAnalyzer (TMultiLayerPerceptron &net);  ;  TMLPAnalyzer (TMultiLayerPerceptron *net);  ;  ~TMLPAnalyzer () override;  Destructor. ;  ; void CheckNetwork ();  Gives some information about the network in the terminal. ;  ; void DrawDInput (Int_t i);  Draws the distribution (on the test sample) of the impact on the network output of a small variation of the ith input. ;  ; void DrawDInputs ();  Draws the distribution (on the test sample) of the impact on the network output of a small variation of each input. ;  ; void DrawNetwork (Int_t neuron, const char *signal, const char *bg);  Draws the distribution of the neural network (using ith neuron). ;  ; TProfile * DrawTruthDeviation (Int_t outnode=0, Option_t *option="""");  Create a profile of the difference of the MLP output minus the true value for a given output node outnode, vs the true value for outnode, for all test data events. ;  ; TProfile * DrawTruthDeviationInOut (Int_t innode, Int_t outnode=0, Option_t *option="""");  Creates a profile of the difference of the MLP output outnode minus the true value of outnode vs the input value innode, for all test data events. ;  ; THStack * DrawTruthDeviationInsOut (Int_t outnode=0, Option_t *option="""");  Creates a profile of the difference of the MLP output outnode minus the true value of outnode vs the input value, stacked for all inputs, for all test data events. ;  ; THStack * DrawTruthDeviations (Option_t *option="""");  Create",MatchSource.WIKI,doc/master/classTMLPAnalyzer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMLPAnalyzer.html
Usability,learn,learn,"nestatic . ReturnsName of the file containing the class declaration ; Definition at line 58 of file TMLPAnalyzer.h. ◆ DrawDInput(). void TMLPAnalyzer::DrawDInput ; (; Int_t ; i). Draws the distribution (on the test sample) of the impact on the network output of a small variation of the ith input. ; Definition at line 284 of file TMLPAnalyzer.cxx. ◆ DrawDInputs(). void TMLPAnalyzer::DrawDInputs ; (; ). Draws the distribution (on the test sample) of the impact on the network output of a small variation of each input. ; DrawDInputs() draws something that approximates the distribution of the derivative of the NN w.r.t. each input. That quantity is recognized as one of the measures to determine key quantities in the network.; What is done is to vary one input around its nominal value and to see how the NN changes. This is done for each entry in the sample and produces a distribution.; What you can learn from that is:; is variable a really useful, or is my network insensitive to it ?; is there any risk of big systematic ? Is the network extremely sensitive to small variations of any of my inputs ?. As you might understand, this is to be considered with care and can serve as input for an ""educated guess"" when optimizing the network. ; Definition at line 311 of file TMLPAnalyzer.cxx. ◆ DrawNetwork(). void TMLPAnalyzer::DrawNetwork ; (; Int_t ; neuron, . const char * ; signal, . const char * ; bg . ). Draws the distribution of the neural network (using ith neuron). ; Two distributions are drawn, for events passing respectively the ""signal"" and ""background"" cuts. Only the test sample is used. ; Definition at line 337 of file TMLPAnalyzer.cxx. ◆ DrawTruthDeviation(). TProfile * TMLPAnalyzer::DrawTruthDeviation ; (; Int_t ; outnode = 0, . Option_t * ; option = """" . ). Create a profile of the difference of the MLP output minus the true value for a given output node outnode, vs the true value for outnode, for all test data events. ; This method is mainly useful when doing regress",MatchSource.WIKI,doc/master/classTMLPAnalyzer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMLPAnalyzer.html
Availability,error,error,"ject. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t ",MatchSource.WIKI,doc/master/classTModuleDocInfo.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTModuleDocInfo.html
Integrability,message,message,"ject. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t ",MatchSource.WIKI,doc/master/classTModuleDocInfo.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTModuleDocInfo.html
Modifiability,inherit,inherited,". ROOT: TModuleDocInfo Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Private Attributes |; List of all members ; TModuleDocInfo Class Reference. . Definition at line 107 of file TDocInfo.h. Public Member Functions;  TModuleDocInfo (const char *name, TModuleDocInfo *super, const char *doc="""");  ;  ~TModuleDocInfo () override;  ; void AddClass (TClassDocInfo *cl);  ; TList * GetClasses ();  ; const char * GetDoc () const;  ; THashList & GetSub ();  ; TModuleDocInfo * GetSuper () const;  ; TClass * IsA () const override;  ; Bool_t IsSelected () const;  ; void SetDoc (const char *doc);  ; void SetSelected (Bool_t sel=kTRUE);  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; TClass * IsA () const override;  ; Bool_t IsSortable () const override;  ; void ls (Option_t *option="""") const override;  List TNamed name and title. ;  ; TNamed & o",MatchSource.WIKI,doc/master/classTModuleDocInfo.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTModuleDocInfo.html
Security,hash,hash," override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; TClass * IsA () const override;  ; Bool_t IsSortable () const override;  ; void ls (Option_t *option="""") const override;  List TNamed name and title. ;  ; TNamed & operator= (const TNamed &rhs);  TNamed assignment operator. ;  ; void Print (Option_t *option="""") const override;  Print TNamed name and title. ;  ; virtual void SetName (const char *name);  Set the name of the TNamed. ;  ; virtual void SetNameTitle (const char *name, const char *title);  Set all the TNamed parameters (name and title). ;  ; virtual void SetTitle (const char *title="""");  Set the title of the TNamed. ;  ; virtual Int_t Sizeof () const;  Return size of the TNamed part of the TObject. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;",MatchSource.WIKI,doc/master/classTModuleDocInfo.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTModuleDocInfo.html
Availability,mask,mask,"ctive () const;  Return number of sockets in the de-active list. ;  ; TList * GetListOfActives () const;  Returns a list with all active sockets. ;  ; TList * GetListOfDeActives () const;  Returns a list with all de-active sockets. ;  ; void Interrupt ();  ; TClass * IsA () const override;  ; Bool_t IsActive (TSocket *s) const;  Check if socket 's' is in the active list. ;  ; virtual void Ready (TSocket *sock);  Emit signal when some socket is ready. ;  ; virtual void Remove (TSocket *sock);  Remove a socket from the monitor. ;  ; virtual void RemoveAll ();  Remove all sockets from the monitor. ;  ; void ResetInterrupt ();  ; TSocket * Select ();  Return pointer to socket for which an event is waiting. ;  ; TSocket * Select (Long_t timeout);  Return pointer to socket for which an event is waiting. ;  ; Int_t Select (TList *rdready, TList *wrready, Long_t timeout);  Return numbers of sockets that are ready for reading or writing. ;  ; virtual void SetInterest (TSocket *sock, Int_t interest=kRead);  Set interest mask for socket sock to interest. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object be",MatchSource.WIKI,doc/master/classTMonitor.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMonitor.html
Energy Efficiency,monitor,monitor,"es. List of all members |; Public Types |; Public Member Functions |; Static Public Member Functions |; Private Member Functions |; Private Attributes |; Friends |; List of all members ; TMonitor Class Reference. . Definition at line 36 of file TMonitor.h. Public Types; enum  EInterest { kRead = 1; , kWrite = 2; };  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  . Public Member Functions;  TMonitor (Bool_t mainloop=kTRUE);  Create a monitor object. ;  ;  TMonitor (const TMonitor &m);  Copy constructor. ;  ; virtual ~TMonitor ();  Cleanup the monitor object. Does not delete sockets being monitored. ;  ; virtual void Activate (TSocket *sock);  Activate a de-activated socket. ;  ; virtual void ActivateAll ();  Activate all de-activated sockets. ;  ; virtual void Add (TSocket *sock, Int_t interest=kRead);  Add socket to the monitor's active list. ;  ; virtual void DeActivate (TSocket *sock);  De-activate a socket. ;  ; virtual void DeActivateAll ();  De-activate all activated sockets. ;  ; Int_t GetActive (Long_t timeout=-1) const;  Return number of sockets in the active list. ;  ; Int_t GetDeActive () const;  Return number of sockets in the de-active list. ;  ; TList * GetListOfActives () const;  Returns a list with all active sockets. ;  ; TList * GetListOfDeActives () const;  Returns a list with all de-active sockets. ;  ; void Interrupt ();  ; TClass * IsA () const override;  ; Bool_t I",MatchSource.WIKI,doc/master/classTMonitor.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMonitor.html
Integrability,message,message,"object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Return",MatchSource.WIKI,doc/master/classTMonitor.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMonitor.html
Modifiability,inherit,inherited,". ROOT: TMonitor Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Static Public Member Functions |; Private Member Functions |; Private Attributes |; Friends |; List of all members ; TMonitor Class Reference. . Definition at line 36 of file TMonitor.h. Public Types; enum  EInterest { kRead = 1; , kWrite = 2; };  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  . Public Member Functions;  TMonitor (Bool_t mainloop=kTRUE);  Create a monitor object. ;  ;  TMonitor (const TMonitor &m);  Copy constructor. ;  ; virtual ~TMonitor ();  Cleanup the monitor object. Does not delete sockets being monitored. ;  ; virtual void Activate (TSocket *sock);  Activate a de-activated socket. ;  ; virtual void ActivateAll ();  Activate all de-activated sockets. ;  ; virtual void Add (TSocket *sock, Int_t interest=kRead);  Add socket to the monitor's active list. ;  ; virtual void DeActivate (TSocket *sock);  De-activate a socket. ;  ; virtual void DeActivateAll ();  De-activate all activated sockets. ;  ; Int_t GetActive (Long_t timeout=-1) const;  Return number of sockets in the active list. ;  ; Int_t GetDeActive () const;  Return number of sockets in the de-active list. ;  ; TList * GetListOfActives () const;  Returns a list with all active sockets. ;  ; TList * GetListOfDeActives () const;  Ret",MatchSource.WIKI,doc/master/classTMonitor.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMonitor.html
Safety,timeout,timeout,"catedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  . Public Member Functions;  TMonitor (Bool_t mainloop=kTRUE);  Create a monitor object. ;  ;  TMonitor (const TMonitor &m);  Copy constructor. ;  ; virtual ~TMonitor ();  Cleanup the monitor object. Does not delete sockets being monitored. ;  ; virtual void Activate (TSocket *sock);  Activate a de-activated socket. ;  ; virtual void ActivateAll ();  Activate all de-activated sockets. ;  ; virtual void Add (TSocket *sock, Int_t interest=kRead);  Add socket to the monitor's active list. ;  ; virtual void DeActivate (TSocket *sock);  De-activate a socket. ;  ; virtual void DeActivateAll ();  De-activate all activated sockets. ;  ; Int_t GetActive (Long_t timeout=-1) const;  Return number of sockets in the active list. ;  ; Int_t GetDeActive () const;  Return number of sockets in the de-active list. ;  ; TList * GetListOfActives () const;  Returns a list with all active sockets. ;  ; TList * GetListOfDeActives () const;  Returns a list with all de-active sockets. ;  ; void Interrupt ();  ; TClass * IsA () const override;  ; Bool_t IsActive (TSocket *s) const;  Check if socket 's' is in the active list. ;  ; virtual void Ready (TSocket *sock);  Emit signal when some socket is ready. ;  ; virtual void Remove (TSocket *sock);  Remove a socket from the monitor. ;  ; virtual void RemoveAll ();  Remove all sockets from the monitor. ;  ; void ResetInterrupt ();  ; TSocket * Select ();  Return pointer to socket for which an event is waiting. ;  ; TSocket * Select (Long_t timeout);  Return pointer to socket for which an event is waiting. ;  ; Int_t Select (TList *rdready, TList *wrready, Long_t timeout);  Return numbers of sockets that are ready for reading or w",MatchSource.WIKI,doc/master/classTMonitor.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMonitor.html
Security,hash,hash," Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Returns name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual const char * GetTitle () const;  Returns title of object. ;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; virtual ULong_t Hash () const;  Return hash value for this object. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns kTRUE if object inherits from class ""classname"". ;  ; virtual Bool_t InheritsFrom (const TClass *cl) const;  Returns kTRUE if object inherits from TClass cl. ;  ; virtual void Inspect () const;  Dump contents of this object in a graphics canvas. ;  ; void InvertBit (UInt_t f);  ; Bool_t IsDestructed () const;  IsDestructed. ;  ; virtual Bool_t IsEqual (const TObject *obj) const;  Default equal comparison (objects are equal if they have the same address in memory). ;  ; virtual Bool_t IsFolder () const;  Returns kTRUE in case object contains browsable objects (like containers or lists of other objects). ;  ; R__ALWAYS_INLINE Bool_t",MatchSource.WIKI,doc/master/classTMonitor.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMonitor.html
Availability,error,error,"t;  Returns name of class to which the object belongs. ;  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Return",MatchSource.WIKI,doc/master/classTMrbSubevent__Caen.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMrbSubevent__Caen.html
Integrability,message,message,"t;  Returns name of class to which the object belongs. ;  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Return",MatchSource.WIKI,doc/master/classTMrbSubevent__Caen.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMrbSubevent__Caen.html
Modifiability,inherit,inherited,". ROOT: TMrbSubevent_Caen Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Attributes |; List of all members ; TMrbSubevent_Caen Class Reference. . Definition at line 46 of file clonesA_Event.h. Public Member Functions;  TMrbSubevent_Caen ();  ; virtual ~TMrbSubevent_Caen ();  ; void Clear (Option_t *="""");  ; TUsrHitBuffer * GetHitBuffer ();  ; virtual TClass * IsA () const;  ; virtual void Streamer (TBuffer &);  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ",MatchSource.WIKI,doc/master/classTMrbSubevent__Caen.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMrbSubevent__Caen.html
Security,hash,hash," Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Returns name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual const char * GetTitle () const;  Returns title of object. ;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; virtual ULong_t Hash () const;  Return hash value for this object. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns kTRUE if object inherits from class ""classname"". ;  ; virtual Bool_t InheritsFrom (const TClass *cl) const;  Returns kTRUE if object inherits from TClass cl. ;  ; virtual void Inspect () const;  Dump contents of this object in a graphics canvas. ;  ; void InvertBit (UInt_t f);  ; Bool_t IsDestructed () const;  IsDestructed. ;  ; virtual Bool_t IsEqual (const TObject *obj) const;  Default equal comparison (objects are equal if they have the same address in memory). ;  ; virtual Bool_t IsFolder () const;  Returns kTRUE in case object contains browsable objects (like containers or lists of other objects). ;  ; R__ALWAYS_INLINE Bool_t",MatchSource.WIKI,doc/master/classTMrbSubevent__Caen.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMrbSubevent__Caen.html
Availability,reliab,reliably,"l members |; Public Types |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; Static Private Attributes |; List of all members ; TMultiDimFit Class ReferenceHistogram Library. ; Multidimensional Fits in ROOT. . Overview; A common problem encountered in different fields of applied science is to find an expression for one physical quantity in terms of several others, which are directly measurable.; An example in high energy physics is the evaluation of the momentum of a charged particle from the observation of its trajectory in a magnetic field. The problem is to relate the momentum of the particle to the observations, which may consists of positional measurements at intervals along the particle trajectory.; The exact functional relationship between the measured quantities (e.g., the space-points) and the dependent quantity (e.g., the momentum) is in general not known, but one possible way of solving the problem, is to find an expression which reliably approximates the dependence of the momentum on the observations.; This explicit function of the observations can be obtained by a least squares fitting procedure applied to a representative sample of the data, for which the dependent quantity (e.g., momentum) and the independent observations are known. The function can then be used to compute the quantity of interest for new observations of the independent variables.; This class TMultiDimFit implements such a procedure in ROOT. It is largely based on the CERNLIB MUDIFI package 2. Though the basic concepts are still sound, and therefore kept, a few implementation details have changed, and this class can take advantage of MINUIT 4 to improve the errors of the fitting, thanks to the class TMinuit.; In 5 and 6 H. Wind demonstrates the utility of this procedure in the context of tracking, magnetic field parameterisation, and so on. The outline of the method used in this class is based on Winds discussion, and ",MatchSource.WIKI,doc/master/classTMultiDimFit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMultiDimFit.html
Energy Efficiency,energy,energy,". ROOT: TMultiDimFit Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; Static Private Attributes |; List of all members ; TMultiDimFit Class ReferenceHistogram Library. ; Multidimensional Fits in ROOT. . Overview; A common problem encountered in different fields of applied science is to find an expression for one physical quantity in terms of several others, which are directly measurable.; An example in high energy physics is the evaluation of the momentum of a charged particle from the observation of its trajectory in a magnetic field. The problem is to relate the momentum of the particle to the observations, which may consists of positional measurements at intervals along the particle trajectory.; The exact functional relationship between the measured quantities (e.g., the space-points) and the dependent quantity (e.g., the momentum) is in general not known, but one possible way of solving the problem, is to find an expression which reliably approximates the dependence of the momentum on the observations.; This explicit function of the observations can be obtained by a least squares fitting procedure applied to a representative sample of the data, for which the dependent quantity (e.g., momentum) and the independent observations are known. The function can then be used to compute the quantity of interest for new observations of the independent variables.; This class TMultiDimFit implements such a procedure in ROOT. It is largely based on the CERNLIB MUDIFI package 2. Though the basic concepts are still sound, and therefore kept, a few implementation details have changed, and this class can take advantage of MINUIT 4 to improve the errors of the fitting, thanks to the class TMinuit.; In 5 and 6 H. Wind demonstrates the utility of this procedure in the context of track",MatchSource.WIKI,doc/master/classTMultiDimFit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMultiDimFit.html
Integrability,depend,dependent," TMultiDimFit Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; Static Private Attributes |; List of all members ; TMultiDimFit Class ReferenceHistogram Library. ; Multidimensional Fits in ROOT. . Overview; A common problem encountered in different fields of applied science is to find an expression for one physical quantity in terms of several others, which are directly measurable.; An example in high energy physics is the evaluation of the momentum of a charged particle from the observation of its trajectory in a magnetic field. The problem is to relate the momentum of the particle to the observations, which may consists of positional measurements at intervals along the particle trajectory.; The exact functional relationship between the measured quantities (e.g., the space-points) and the dependent quantity (e.g., the momentum) is in general not known, but one possible way of solving the problem, is to find an expression which reliably approximates the dependence of the momentum on the observations.; This explicit function of the observations can be obtained by a least squares fitting procedure applied to a representative sample of the data, for which the dependent quantity (e.g., momentum) and the independent observations are known. The function can then be used to compute the quantity of interest for new observations of the independent variables.; This class TMultiDimFit implements such a procedure in ROOT. It is largely based on the CERNLIB MUDIFI package 2. Though the basic concepts are still sound, and therefore kept, a few implementation details have changed, and this class can take advantage of MINUIT 4 to improve the errors of the fitting, thanks to the class TMinuit.; In 5 and 6 H. Wind demonstrates the utility of this procedure in the context of tracking, m",MatchSource.WIKI,doc/master/classTMultiDimFit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMultiDimFit.html
Modifiability,variab,variables,"ical quantity in terms of several others, which are directly measurable.; An example in high energy physics is the evaluation of the momentum of a charged particle from the observation of its trajectory in a magnetic field. The problem is to relate the momentum of the particle to the observations, which may consists of positional measurements at intervals along the particle trajectory.; The exact functional relationship between the measured quantities (e.g., the space-points) and the dependent quantity (e.g., the momentum) is in general not known, but one possible way of solving the problem, is to find an expression which reliably approximates the dependence of the momentum on the observations.; This explicit function of the observations can be obtained by a least squares fitting procedure applied to a representative sample of the data, for which the dependent quantity (e.g., momentum) and the independent observations are known. The function can then be used to compute the quantity of interest for new observations of the independent variables.; This class TMultiDimFit implements such a procedure in ROOT. It is largely based on the CERNLIB MUDIFI package 2. Though the basic concepts are still sound, and therefore kept, a few implementation details have changed, and this class can take advantage of MINUIT 4 to improve the errors of the fitting, thanks to the class TMinuit.; In 5 and 6 H. Wind demonstrates the utility of this procedure in the context of tracking, magnetic field parameterisation, and so on. The outline of the method used in this class is based on Winds discussion, and I refer these two excellents text for more information.; And example of usage is given in multidimfit.C. The Method; Let \( D \) by the dependent quantity of interest, which depends smoothly on the observable quantities \( x_1, \ldots, x_N \) which we'll denote by \(\mathbf{x}\). Given a training sample of \( M\) tuples of the form, (TMultiDimFit::AddRow). \[; \left(\mathbf{x}_j, D_j, E_j\r",MatchSource.WIKI,doc/master/classTMultiDimFit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMultiDimFit.html
Performance,perform,perform,"lon; \]. Optionally, the user may impose a functional expression by specifying the powers of each variable in \( L\) specified functions \( F_1, \ldots,F_L\) (TMultiDimFit::SetPowers). In that case, only the coefficients \( c_l\) is calculated by the class. Limiting the Number of Terms; As always when dealing with fits, there's a real chance of over fitting. As is well-known, it's always possible to fit an \( N-1\) polynomial in \( x\) to \( N\) points \( (x,y)\) with \(\chi^2 = 0\), but the polynomial is not likely to fit new data at all 1. Therefore, the user is asked to provide an upper limit, \( L_{max}\) to the number of terms in \( D_p\) (TMultiDimFit::SetMaxTerms).; However, since there's an infinite number of \( F_l\) to choose from, the user is asked to give the maximum power. \( P_{max,i}\), of each variable \( x_i\) to be considered in the minimization of \( S\) (TMultiDimFit::SetMaxPowers).; One way of obtaining values for the maximum power in variable \( i\), is to perform a regular fit to the dependent quantity \( D\), using a polynomial only in \( x_i\). The maximum power is \( P_{max,i}\) is then the power that does not significantly improve the one-dimensional least-square fit over \( x_i\) to \( D\) 5.; There are still a huge amount of possible choices for \( F_l\); in fact there are \(\prod_{i=1}^{N} (P_{max,i} + 1)\) possible choices. Obviously we need to limit this. To this end, the user is asked to set a power control limit, \( Q\) (TMultiDimFit::SetPowerLimit), and a function \( F_l\) is only accepted if ; \[; Q_l = \sum_{i=1}^{N} \frac{P_{li}}{P_{max,i}} < Q; \]. where \( P_{li}\) is the leading power of variable \( x_i\) in function \( F_l\) (TMultiDimFit::MakeCandidates). So the number of functions increase with \( Q\) (1, 2 is fine, 5 is way out). Gram-Schmidt Orthogonalisation; To further reduce the number of functions in the final expression, only those functions that significantly reduce \( S\) is chosen. What ‘significant’ means, is ch",MatchSource.WIKI,doc/master/classTMultiDimFit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMultiDimFit.html
Security,hash,hash," override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; TClass * IsA () const override;  ; Bool_t IsSortable () const override;  ; void ls (Option_t *option="""") const override;  List TNamed name and title. ;  ; TNamed & operator= (const TNamed &rhs);  TNamed assignment operator. ;  ; void Print (Option_t *option="""") const override;  Print TNamed name and title. ;  ; virtual void SetName (const char *name);  Set the name of the TNamed. ;  ; virtual void SetNameTitle (const char *name, const char *title);  Set all the TNamed parameters (name and title). ;  ; virtual void SetTitle (const char *title="""");  Set the title of the TNamed. ;  ; virtual Int_t Sizeof () const;  Return size of the TNamed part of the TObject. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;",MatchSource.WIKI,doc/master/classTMultiDimFit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMultiDimFit.html
Testability,test,test,"f; w_k\right)}{\mathbf w_k^2}; \end{eqnarray*}. So for each new function \( F_l\) included in the model, we get a reduction of the sum of squares of residuals of \(a_l^2\mathbf{w}_l^2\), where \(\mathbf{w}_l\) is given by 4 and \( a_l\) by 9. Thus, using the Gram-Schmidt orthogonalisation, we can decide if we want to include this function in the final model, before* the matrix inversion. Function Selection Based on Residual; Supposing that \( L-1\) steps of the procedure have been performed, the problem now is to consider the \(L^{\mbox{th}}\) function.; The sum of squares of residuals can be written as ; \[; S_L = \textbf{D}^T\bullet\textbf{D} -; \sum^L_{l=1}a^2_l\left(\textbf{w}_l^T\bullet\textbf{w}_l\right); \]. where the relation 9 have been taken into account. The contribution of the \(L^{\mbox{th}}\) function to the reduction of S, is given by ; \[; \Delta S_L = a^2_L\left(\textbf{w}_L^T\bullet\textbf{w}_L\right); \]. Two test are now applied to decide whether this \(L^{\mbox{th}}\) function is to be included in the final expression, or not. Test 1; Denoting by \( H_{L-1}\) the subspace spanned by \(\textbf{w}_1,\ldots,\textbf{w}_{L-1}\) the function \(\textbf{w}_L\) is by construction (see 4) the projection of the function \( F_L\) onto the direction perpendicular to \( H_{L-1}\). Now, if the length of \(\textbf{w}_L\) (given by \(\textbf{w}_L\bullet\textbf{w}_L\)) is very small compared to the length of \(\textbf{f}_L\) this new function can not contribute much to the reduction of the sum of squares of residuals. The test consists then in calculating the angle \( \theta \) between the two vectors \(\textbf{w}_L\) \( \textbf {f}_L\) (see also figure 1) and requiring that it's greater* then a threshold value which the user must set (TMultiDimFit::SetMinAngle). Figure 1: (a) angle \f$\theta\f$ between \f$\textbf{w}_l\f$ and \f$\textbf{f}_L\f$, (b) angle \f$ \phi \f$ between \f$\textbf{w}_L\f$ and \f$\textbf{D}\f$. Test 2; Let \(\textbf{D}\) be the data vector t",MatchSource.WIKI,doc/master/classTMultiDimFit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMultiDimFit.html
Usability,simpl,simple,"se the algorithm presented here, is a interpolation, rather then a extrapolation 5.; Also, the independent variables \( x_{i}\) need to be linear independent, since the procedure will perform poorly if they are not 5. One can find an linear transformation from ones original variables \( \xi_{i}\) to a set of linear independent variables \( x_{i}\), using a Principal Components Analysis (see TPrincipal), and then use the transformed variable as input to this class [5] 6.; H. Wind also outlines a method for parameterising a multidimensional dependence over a multidimensional set of variables. An example of the method from 5, is a follows (please refer to 5 for a full discussion):. Define \(\mathbf{P} = (P_1, \ldots, P_5)\) are the 5 dependent quantities that define a track.; Compute, for \( M\) different values of \(\mathbf{P}\), the tracks through the magnetic field, and determine the corresponding \(\mathbf{x} = (x_1, \ldots, x_N)\).; Use the simulated observations to determine, with a simple approximation, the values of \(\mathbf{P}_j\). We call these values \(\mathbf{P}^\prime_j, j = 1, \ldots, M\).; Determine from \(\mathbf{x}\) a set of at least five relevant coordinates \(\mathbf{x}^\prime\), using contrains, or alternative:; Perform a Principal Component Analysis (using TPrincipal), and use to get a linear transformation \(\mathbf{x} \rightarrow \mathbf{x}^\prime\), so that \(\mathbf{x}^\prime\) are constrained and linear independent.; Perform a Principal Component Analysis on \(Q_i = P_i / P^\prime_i\, i = 1, \ldots, 5\), to get linear indenpendent (among themselves, but not independent of \(\mathbf{x}\)) quantities \(\mathbf{Q}^\prime\); For each component \(Q^\prime_i\) make a multidimensional fit, using \(\mathbf{x}^\prime\) as the variables, thus determining a set of coefficients \(\mathbf{c}_i\). To process data, using this parameterisation, do; Test wether the observation \(\mathbf{x}\) within the domain of the parameterization, using the result from the",MatchSource.WIKI,doc/master/classTMultiDimFit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMultiDimFit.html
Availability,error,error,"iGraphstatic; Class_Version()TMultiGraphinlinestatic; ClassName() constTObjectvirtual; Clear(Option_t *option="""") overrideTNamedvirtual; Clone(const char *newname="""") const overrideTNamedvirtual; Compare(const TObject *obj) const overrideTNamedvirtual; Copy(TObject &named) const overrideTNamedvirtual; DeclFileName()TMultiGraphinlinestatic; Delete(Option_t *option="""")TObjectvirtual; DistancetoPrimitive(Int_t px, Int_t py) overrideTMultiGraphvirtual; DoError(int level, const char *location, const char *fmt, va_list va) constTObjectprotectedvirtual; Draw(Option_t *chopt="""") overrideTMultiGraphvirtual; DrawClass() constTObjectvirtual; DrawClone(Option_t *option="""") constTObjectvirtual; Dump() constTObjectvirtual; EDeprecatedStatusBits enum nameTObject; end() constTMultiGraphinline; Error(const char *method, const char *msgfmt,...) constTObjectvirtual; EStatusBits enum nameTObject; Execute(const char *method, const char *params, Int_t *error=nullptr)TObjectvirtual; Execute(TMethod *method, TObjArray *params, Int_t *error=nullptr)TObjectvirtual; ExecuteEvent(Int_t event, Int_t px, Int_t py)TObjectvirtual; Fatal(const char *method, const char *msgfmt,...) constTObjectvirtual; fBitsTObjectprivate; fFunctionsTMultiGraphprotected; fgDtorOnlyTObjectprivatestatic; fgObjectStatTObjectprivatestatic; fGraphsTMultiGraphprotected; fHistogramTMultiGraphprotected; FillBuffer(char *&buffer)TNamedvirtual; FindObject(const char *name) constTObjectvirtual; FindObject(const TObject *obj) constTObjectvirtual; Fit(const char *formula, Option_t *option="""", Option_t *goption="""", Axis_t xmin=0, Axis_t xmax=0)TMultiGraphvirtual; Fit(TF1 *f1, Option_t *option="""", Option_t *goption="""", Axis_t rxmin=0, Axis_t rxmax=0)TMultiGraphvirtual; FitPanel()TMultiGraphvirtual; fMaximumTMultiGraphprotected; fMinimumTMultiGraphprotected; fNameTNamedprotected; fTitleTNamedprotected; fUniqueIDTObjectprivate; GetDrawOption() constTObjectvirtual; GetDtorOnly()TObjectstatic; GetFunction(const char *name) constTMulti",MatchSource.WIKI,doc/master/classTMultiGraph-members.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMultiGraph-members.html
Modifiability,inherit,inherited,". ROOT: Member List. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. TMultiGraph Member List. This is the complete list of members for TMultiGraph, including all inherited members. AbstractMethod(const char *method) constTObject; Add(TGraph *graph, Option_t *chopt="""")TMultiGraphvirtual; Add(TMultiGraph *multigraph, Option_t *chopt="""")TMultiGraphvirtual; AddToTObjectTable(TObject *)TObjectprivatestatic; AppendPad(Option_t *option="""")TObjectvirtual; begin() constTMultiGraph; Browse(TBrowser *b) overrideTMultiGraphvirtual; CheckedHash()TObjectinline; Class()TMultiGraphstatic; Class_Name()TMultiGraphstatic; Class_Version()TMultiGraphinlinestatic; ClassName() constTObjectvirtual; Clear(Option_t *option="""") overrideTNamedvirtual; Clone(const char *newname="""") const overrideTNamedvirtual; Compare(const TObject *obj) const overrideTNamedvirtual; Copy(TObject &named) const overrideTNamedvirtual; DeclFileName()TMultiGraphinlinestatic; Delete(Option_t *option="""")TObjectvirtual; DistancetoPrimitive(Int_t px, Int_t py) overrideTMultiGraphvirtual; DoError(int level, const char *location, const char *fmt, va_list va) constTObjectprotectedvirtual; Draw(Option_t *chopt="""") overrideTMultiGraphvirtual; DrawClass() constTObjectvirtual; DrawClone(Option_t *option="""") constTObjectvirtual; Dump() constTObjectvirtual; EDeprecatedStatusBits enum nameTObject; end() constTMultiGraphinline; Error(const char *method, const char *msgfmt,...) constTObjectvirtual; EStatusBits enum nameTObject; Execute(const char *method, const char *params, Int_t *error=nullptr)TObjectvirtual; Execute(TMethod *method, TObjArray *params, Int_t *error=nullptr)TObjectvirtual; ExecuteEvent(Int_t event, Int_t px, Int_t py)TObjectvirtual; Fatal(const char *method, const char *msgfmt,...) constTObjectvirtual; fBitsTObjectprivate; fFunctionsTMultiGraphprotected; fgDtorOnlyTObjectprivatestatic; fgObjectStatTObjectprivatestatic; fGraphsTMultiGraphprotected; fHistogramTMultiGraphprotected; Fil",MatchSource.WIKI,doc/master/classTMultiGraph-members.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMultiGraph-members.html
Availability,error,error,"oduction; MultiGraphs' drawing; Setting drawing options; Titles setting; The option &quot;3D&quot;; Legend drawing; Automatic coloring; Reverse axis. MultiGraphs' fitting; Fit box position. Axis' limits setting. Introduction; A TMultiGraph allows to manipulate a set of graphs as a single entity. In particular, when drawn, the X and Y axis ranges are automatically computed such as all the graphs will be visible.; TMultiGraph::Add should be used to add a new graph to the list.; The TMultiGraph owns the objects in the list.; The number of graphs in a multigraph can be retrieve with: mg->GetListOfGraphs()->GetEntries();. MultiGraphs' Drawing; The drawing options are the same as for TGraph. Like for TGraph, the painting is performed thanks to the TGraphPainter class. All details about the various painting options are given in this class.; Example: TGraph *gr1 = new TGraph(...; TGraphErrors *gr2 = new TGraphErrors(...; TMultiGraph *mg = new TMultiGraph();; mg->Add(gr1,""lp"");; mg->Add(gr2,""cp"");; mg->Draw(""a"");; TGraphErrorsA TGraphErrors is a TGraph with error bars.Definition TGraphErrors.h:26; TGraphA TGraph is an object made of two arrays X and Y with npoints each.Definition TGraph.h:41; TMultiGraphA TMultiGraph is a collection of TGraph (or derived) objects.Definition TMultiGraph.h:34; TMultiGraph::TMultiGraphTMultiGraph()TMultiGraph default constructor.Definition TMultiGraph.cxx:369; TMultiGraph::Addvirtual void Add(TGraph *graph, Option_t *chopt="""")Add a new graph to the list of graphs.Definition TMultiGraph.cxx:419; Setting drawing options; The drawing option for each TGraph may be specified as an optional second argument of the Add function.; If a draw option is specified, it will be used to draw the graph, otherwise the graph will be drawn with the option specified in TMultiGraph::Draw; Titles setting; The global title and the axis titles can be modified the following way:; [...]; auto mg = new TMultiGraph;; mg->SetTitle(""title;xaxis title; yaxis title"");; mg->Add(",MatchSource.WIKI,doc/master/classTMultiGraph.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMultiGraph.html
Deployability,update,updated,"e 699 of file TMultiGraph.cxx. ◆ FitPanel(). void TMultiGraph::FitPanel ; (; ). virtual . Display a panel with all histogram fit options. ; See class TFitPanel for example ; Definition at line 716 of file TMultiGraph.cxx. ◆ GetFunction(). TF1 * TMultiGraph::GetFunction ; (; const char * ; name); const. Return pointer to function with name. ; Functions such as TGraph::Fit store the fitted function in the list of functions of this graph. ; Definition at line 1086 of file TMultiGraph.cxx. ◆ GetGraphDrawOption(). Option_t * TMultiGraph::GetGraphDrawOption ; (; const TGraph * ; gr); const. virtual . Return the draw option for the TGraph gr in this TMultiGraph. ; The return option is the one specified when calling TMultiGraph::Add(gr,option). ; Definition at line 740 of file TMultiGraph.cxx. ◆ GetHistogram(). TH1F * TMultiGraph::GetHistogram ; (; ). Returns a pointer to the histogram used to draw the axis. ; Takes into account following cases. if fHistogram exists it is returned; if fHistogram doesn't exists and gPad exists gPad is updated. That may trigger the creation of fHistogram. If fHistogram still does not exit but hframe does (if user called TPad::DrawFrame) the pointer to hframe histogram is returned; after the two previous steps, if fHistogram still doesn't exist, then it is created. . Definition at line 1015 of file TMultiGraph.cxx. ◆ GetListOfFunctions() [1/2]. TList * TMultiGraph::GetListOfFunctions ; (; ). Return pointer to list of functions. ; If pointer is null create the list ; Definition at line 1096 of file TMultiGraph.cxx. ◆ GetListOfFunctions() [2/2]. const TList * TMultiGraph::GetListOfFunctions ; (; ); const. inline . Definition at line 72 of file TMultiGraph.h. ◆ GetListOfGraphs(). TList * TMultiGraph::GetListOfGraphs ; (; ); const. inline . Definition at line 68 of file TMultiGraph.h. ◆ GetXaxis(). TAxis * TMultiGraph::GetXaxis ; (; ). Get x axis of the graph. ; This method returns a valid axis only after the TMultigraph has been drawn. ; Definitio",MatchSource.WIKI,doc/master/classTMultiGraph.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMultiGraph.html
Integrability,message,message,"tructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t ",MatchSource.WIKI,doc/master/classTMultiGraph.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMultiGraph.html
Modifiability,inherit,inherited,"d PaintPads (Option_t *chopt="""");  Divides the active pad and draws all Graphs in the Multigraph separately. ;  ; void PaintPolyLine3D (Option_t *chopt="""");  Paint all the graphs of this multigraph as 3D lines. ;  ; void PaintReverse (Option_t *chopt="""");  Paint all the graphs of this multigraph reverting values along X and/or Y axis. ;  ; void Print (Option_t *chopt="""") const override;  Print the list of graphs. ;  ; void RecursiveRemove (TObject *obj) override;  Recursively remove this object from a list. ;  ; void SavePrimitive (std::ostream &out, Option_t *option="""") override;  Save primitive as a C++ statement(s) on output stream out. ;  ; virtual void SetMaximum (Double_t maximum=-1111);  Set multigraph maximum. ;  ; virtual void SetMinimum (Double_t minimum=-1111);  Set multigraph minimum. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; TClass * IsA () const override;  ; Bool_t IsSortable () const override;  ; void ls (Option_t *option="""") const override;",MatchSource.WIKI,doc/master/classTMultiGraph.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMultiGraph.html
Performance,perform,performed,"blic Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; List of all members ; TMultiGraph Class ReferenceHistogram Library » Graph classes. ; A TMultiGraph is a collection of TGraph (or derived) objects. . Introduction; MultiGraphs' drawing; Setting drawing options; Titles setting; The option &quot;3D&quot;; Legend drawing; Automatic coloring; Reverse axis. MultiGraphs' fitting; Fit box position. Axis' limits setting. Introduction; A TMultiGraph allows to manipulate a set of graphs as a single entity. In particular, when drawn, the X and Y axis ranges are automatically computed such as all the graphs will be visible.; TMultiGraph::Add should be used to add a new graph to the list.; The TMultiGraph owns the objects in the list.; The number of graphs in a multigraph can be retrieve with: mg->GetListOfGraphs()->GetEntries();. MultiGraphs' Drawing; The drawing options are the same as for TGraph. Like for TGraph, the painting is performed thanks to the TGraphPainter class. All details about the various painting options are given in this class.; Example: TGraph *gr1 = new TGraph(...; TGraphErrors *gr2 = new TGraphErrors(...; TMultiGraph *mg = new TMultiGraph();; mg->Add(gr1,""lp"");; mg->Add(gr2,""cp"");; mg->Draw(""a"");; TGraphErrorsA TGraphErrors is a TGraph with error bars.Definition TGraphErrors.h:26; TGraphA TGraph is an object made of two arrays X and Y with npoints each.Definition TGraph.h:41; TMultiGraphA TMultiGraph is a collection of TGraph (or derived) objects.Definition TMultiGraph.h:34; TMultiGraph::TMultiGraphTMultiGraph()TMultiGraph default constructor.Definition TMultiGraph.cxx:369; TMultiGraph::Addvirtual void Add(TGraph *graph, Option_t *chopt="""")Add a new graph to the list of graphs.Definition TMultiGraph.cxx:419; Setting drawing options; The drawing option for each TGraph may be specified as an optional second argument of the Add function.; If a draw option is specified, it will be used to draw the gr",MatchSource.WIKI,doc/master/classTMultiGraph.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMultiGraph.html
Security,hash,hash," override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; TClass * IsA () const override;  ; Bool_t IsSortable () const override;  ; void ls (Option_t *option="""") const override;  List TNamed name and title. ;  ; TNamed & operator= (const TNamed &rhs);  TNamed assignment operator. ;  ; void Print (Option_t *option="""") const override;  Print TNamed name and title. ;  ; virtual void SetName (const char *name);  Set the name of the TNamed. ;  ; virtual void SetNameTitle (const char *name, const char *title);  Set all the TNamed parameters (name and title). ;  ; virtual void SetTitle (const char *title="""");  Set the title of the TNamed. ;  ; virtual Int_t Sizeof () const;  Return size of the TNamed part of the TObject. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;",MatchSource.WIKI,doc/master/classTMultiGraph.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMultiGraph.html
Availability,avail,available,"; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Private Member Functions |; Private Attributes |; Friends |; List of all members ; TMultiLayerPerceptron Class Reference. ; This class describes a neural network. ; There are facilities to train the network and use the output.; The input layer is made of inactive neurons (returning the optionally normalized input) and output neurons are linear. The type of hidden neurons is free, the default being sigmoids. (One should still try to pass normalized inputs, e.g. between [0.,1]); The basic input is a TTree and two (training and test) TEventLists. Input and output neurons are assigned a value computed for each event with the same possibilities as for TTree::Draw(). Events may be weighted individually or via TTree::SetWeight(). 6 learning methods are available: kStochastic, kBatch, kSteepestDescent, kRibierePolak, kFletcherReeves and kBFGS.; This implementation, written by C. Delaere, is inspired from the mlpfit package from J.Schwindling et al. with some extensions:. the algorithms are globally the same; in TMultilayerPerceptron, there is no limitation on the number of layers/neurons, while MLPFIT was limited to 2 hidden layers; TMultilayerPerceptron allows you to save the network in a root file, and provides more export functionalities; TMultilayerPerceptron gives more flexibility regarding the normalization of inputs/outputs; TMultilayerPerceptron provides, thanks to Andrea Bocci, the possibility to use cross-entropy errors, which allows to train a network for pattern classification based on Bayesian posterior probability. Introduction; Neural Networks are more and more used in various fields for data analysis and classification, both for research and commercial institutions. Some randomly chosen examples are:. image analysis; financial movements predictions and",MatchSource.WIKI,doc/master/classTMultiLayerPerceptron.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMultiLayerPerceptron.html
Deployability,continuous,continuous,"red from the MLPfit package originally written by Jerome Schwindling. MLPfit remains one of the fastest tool for neural networks studies, and this ROOT add-on will not try to compete on that. A clear and flexible Object Oriented implementation has been chosen over a faster but more difficult to maintain code. Nevertheless, the time penalty does not exceed a factor 2. The MLP; The multilayer perceptron is a simple feed-forward network with the following structure:. It is made of neurons characterized by a bias and weighted links between them (let's call those links synapses). The input neurons receive the inputs, normalize them and forward them to the first hidden layer.; Each neuron in any subsequent layer first computes a linear combination of the outputs of the previous layer. The output of the neuron is then function of that combination with f being linear for output neurons or a sigmoid for hidden layers. This is useful because of two theorems:. A linear combination of sigmoids can approximate any continuous function.; Trained with output = 1 for the signal and 0 for the background, the approximated function of inputs X is the probability of signal, knowing X. Learning methods; The aim of all learning methods is to minimize the total error on a set of weighted examples. The error is defined as the sum in quadrature, divided by two, of the error on each individual output neuron. In all methods implemented, one needs to compute the first derivative of that error with respect to the weights. Exploiting the well-known properties of the derivative, especially the derivative of compound functions, one can write:. for a neuron: product of the local derivative with the weighted sum on the outputs of the derivatives.; for a synapse: product of the input with the local derivative of the output neuron. This computation is called back-propagation of the errors. A loop over all examples is called an epoch. Six learning methods are implemented.; Stochastic minimization:; is t",MatchSource.WIKI,doc/master/classTMultiLayerPerceptron.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMultiLayerPerceptron.html
Energy Efficiency,power,powerful,"hastic minimization, but the weights are updated after considering all the examples, with the total derivative dEdw. The parameters for this method are Eta, EtaDecay, Delta and Epsilon.; Steepest descent algorithm:; Weights are set to the minimum along the line defined by the gradient. The only parameter for this method is Tau. Lower tau = higher precision = slower search. A value Tau = 3 seems reasonable.; Conjugate gradients with the Polak-Ribiere updating formula:; Weights are set to the minimum along the line defined by the conjugate gradient. Parameters are Tau and Reset, which defines the epochs where the direction is reset to the steepest descent.; Conjugate gradients with the Fletcher-Reeves updating formula:; Weights are set to the minimum along the line defined by the conjugate gradient. Parameters are Tau and Reset, which defines the epochs where the direction is reset to the steepest descent.; Broyden, Fletcher, Goldfarb, Shanno (BFGS) method:; Implies the computation of a NxN matrix computation, but seems more powerful at least for less than 300 weights. Parameters are Tau and Reset, which defines the epochs where the direction is reset to the steepest descent. How to use it...; TMLP is build from 3 classes: TNeuron, TSynapse and TMultiLayerPerceptron. Only TMultiLayerPerceptron should be used explicitly by the user.; TMultiLayerPerceptron will take examples from a TTree given in the constructor. The network is described by a simple string: The input/output layers are defined by giving the expression for each neuron, separated by comas. Hidden layers are just described by the number of neurons. The layers are separated by colons. In addition, input/output layer formulas can be preceded by '@' (e.g ""@out"") if one wants to also normalize the data from the TTree. Input and outputs are taken from the TTree given as second argument. Expressions are evaluated as for TTree::Draw(), arrays are expended in distinct neurons, one for each index. This can only be d",MatchSource.WIKI,doc/master/classTMultiLayerPerceptron.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMultiLayerPerceptron.html
Integrability,depend,dependant,"const char *extF="""", const char *extD="""");  The network is described by a simple string: The input/output layers are defined by giving the branch names separated by comas. ;  ;  ~TMultiLayerPerceptron () override;  Destructor. ;  ; void ComputeDEDw () const;  Compute the DEDw = sum on all training events of dedw for each weight normalized by the number of events. ;  ; void Draw (Option_t *option="""") override;  Draws the network structure. ;  ; void DrawResult (Int_t index=0, Option_t *option=""test"") const;  Draws the neural net output It produces an histogram with the output for the two datasets. ;  ; Bool_t DumpWeights (Option_t *filename=""-"") const;  Dumps the weights to a text file. ;  ; Double_t Evaluate (Int_t index, Double_t *params) const;  Returns the Neural Net for a given set of input parameters #parameters must equal #input neurons. ;  ; void Export (Option_t *filename=""NNfunction"", Option_t *language=""C++"") const;  Exports the NN as a function for any non-ROOT-dependant code Supported languages are: only C++ , FORTRAN and Python (yet) This feature is also useful if you want to plot the NN as a function (TF1 or TF2). ;  ; Double_t GetDelta () const;  ; Double_t GetEpsilon () const;  ; Double_t GetError (Int_t event) const;  Error on the output for a given event. ;  ; Double_t GetError (TMultiLayerPerceptron::EDataSet set) const;  Error on the whole dataset. ;  ; Double_t GetEta () const;  ; Double_t GetEtaDecay () const;  ; TMultiLayerPerceptron::ELearningMethod GetLearningMethod () const;  ; Int_t GetReset () const;  ; TString GetStructure () const;  ; Double_t GetTau () const;  ; TNeuron::ENeuronType GetType () const;  ; TClass * IsA () const override;  ; Bool_t LoadWeights (Option_t *filename="""");  Loads the weights from a text file conforming to the format defined by DumpWeights. ;  ; void Randomize () const;  Randomize the weights. ;  ; Double_t Result (Int_t event, Int_t index=0) const;  Computes the output for a given event. ;  ; void SetData (TTre",MatchSource.WIKI,doc/master/classTMultiLayerPerceptron.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMultiLayerPerceptron.html
Modifiability,layers,layers,"ve neurons (returning the optionally normalized input) and output neurons are linear. The type of hidden neurons is free, the default being sigmoids. (One should still try to pass normalized inputs, e.g. between [0.,1]); The basic input is a TTree and two (training and test) TEventLists. Input and output neurons are assigned a value computed for each event with the same possibilities as for TTree::Draw(). Events may be weighted individually or via TTree::SetWeight(). 6 learning methods are available: kStochastic, kBatch, kSteepestDescent, kRibierePolak, kFletcherReeves and kBFGS.; This implementation, written by C. Delaere, is inspired from the mlpfit package from J.Schwindling et al. with some extensions:. the algorithms are globally the same; in TMultilayerPerceptron, there is no limitation on the number of layers/neurons, while MLPFIT was limited to 2 hidden layers; TMultilayerPerceptron allows you to save the network in a root file, and provides more export functionalities; TMultilayerPerceptron gives more flexibility regarding the normalization of inputs/outputs; TMultilayerPerceptron provides, thanks to Andrea Bocci, the possibility to use cross-entropy errors, which allows to train a network for pattern classification based on Bayesian posterior probability. Introduction; Neural Networks are more and more used in various fields for data analysis and classification, both for research and commercial institutions. Some randomly chosen examples are:. image analysis; financial movements predictions and analysis; sales forecast and product shipping optimisation; in particles physics: mainly for classification tasks (signal over background discrimination). More than 50% of neural networks are multilayer perceptrons. This implementation of multilayer perceptrons is inspired from the MLPfit package originally written by Jerome Schwindling. MLPfit remains one of the fastest tool for neural networks studies, and this ROOT add-on will not try to compete on that. A clear a",MatchSource.WIKI,doc/master/classTMultiLayerPerceptron.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMultiLayerPerceptron.html
Performance,perform,performance," for the output layer only.; Ex: ""x,y:10:5:c1,c2,c3!""; Input and outputs are taken from the TTree given as second argument. training and test are the two TEventLists defining events to be used during the neural net training. Both the TTree and the TEventLists can be defined in the constructor, or later with the suited setter method. ; Definition at line 380 of file TMultiLayerPerceptron.cxx. ◆ ~TMultiLayerPerceptron(). TMultiLayerPerceptron::~TMultiLayerPerceptron ; (; ). override . Destructor. ; Definition at line 581 of file TMultiLayerPerceptron.cxx. ◆ TMultiLayerPerceptron() [6/6]. TMultiLayerPerceptron::TMultiLayerPerceptron ; (; const TMultiLayerPerceptron & ; ). private . Member Function Documentation. ◆ AttachData(). void TMultiLayerPerceptron::AttachData ; (; ). protected . Connects the TTree to Neurons in input and output layers. ; The formulas associated to each neuron are created and reported to the network formula manager. By default, the branch is not normalised since this would degrade performance for classification jobs. Normalisation can be requested by putting '@' in front of the formula. ; Definition at line 1266 of file TMultiLayerPerceptron.cxx. ◆ BFGSDir(). void TMultiLayerPerceptron::BFGSDir ; (; TMatrixD & ; bfgsh, . Double_t * ; dir . ). protected . Computes the direction for the BFGS algorithm as the product between the Hessian estimate (bfgsh) and the dir. ; Definition at line 2494 of file TMultiLayerPerceptron.cxx. ◆ BuildFirstLayer(). void TMultiLayerPerceptron::BuildFirstLayer ; (; TString & ; input). private . Instantiates the neurons in input Inputs are normalised and the type is set to kOff (simple forward of the formula value) ; Definition at line 1401 of file TMultiLayerPerceptron.cxx. ◆ BuildHiddenLayers(). void TMultiLayerPerceptron::BuildHiddenLayers ; (; TString & ; hidden). private . Builds hidden layers. ; Definition at line 1419 of file TMultiLayerPerceptron.cxx. ◆ BuildLastLayer(). void TMultiLayerPerceptron::BuildLastLayer ",MatchSource.WIKI,doc/master/classTMultiLayerPerceptron.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMultiLayerPerceptron.html
Safety,predict,predictions,"kBFGS.; This implementation, written by C. Delaere, is inspired from the mlpfit package from J.Schwindling et al. with some extensions:. the algorithms are globally the same; in TMultilayerPerceptron, there is no limitation on the number of layers/neurons, while MLPFIT was limited to 2 hidden layers; TMultilayerPerceptron allows you to save the network in a root file, and provides more export functionalities; TMultilayerPerceptron gives more flexibility regarding the normalization of inputs/outputs; TMultilayerPerceptron provides, thanks to Andrea Bocci, the possibility to use cross-entropy errors, which allows to train a network for pattern classification based on Bayesian posterior probability. Introduction; Neural Networks are more and more used in various fields for data analysis and classification, both for research and commercial institutions. Some randomly chosen examples are:. image analysis; financial movements predictions and analysis; sales forecast and product shipping optimisation; in particles physics: mainly for classification tasks (signal over background discrimination). More than 50% of neural networks are multilayer perceptrons. This implementation of multilayer perceptrons is inspired from the MLPfit package originally written by Jerome Schwindling. MLPfit remains one of the fastest tool for neural networks studies, and this ROOT add-on will not try to compete on that. A clear and flexible Object Oriented implementation has been chosen over a faster but more difficult to maintain code. Nevertheless, the time penalty does not exceed a factor 2. The MLP; The multilayer perceptron is a simple feed-forward network with the following structure:. It is made of neurons characterized by a bias and weighted links between them (let's call those links synapses). The input neurons receive the inputs, normalize them and forward them to the first hidden layer.; Each neuron in any subsequent layer first computes a linear combination of the outputs of the previou",MatchSource.WIKI,doc/master/classTMultiLayerPerceptron.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMultiLayerPerceptron.html
Security,hash,hash," Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Returns name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual const char * GetTitle () const;  Returns title of object. ;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; virtual ULong_t Hash () const;  Return hash value for this object. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns kTRUE if object inherits from class ""classname"". ;  ; virtual Bool_t InheritsFrom (const TClass *cl) const;  Returns kTRUE if object inherits from TClass cl. ;  ; virtual void Inspect () const;  Dump contents of this object in a graphics canvas. ;  ; void InvertBit (UInt_t f);  ; Bool_t IsDestructed () const;  IsDestructed. ;  ; virtual Bool_t IsEqual (const TObject *obj) const;  Default equal comparison (objects are equal if they have the same address in memory). ;  ; virtual Bool_t IsFolder () const;  Returns kTRUE in case object contains browsable objects (like containers or lists of other objects). ;  ; R__ALWAYS_INLINE Bool_t",MatchSource.WIKI,doc/master/classTMultiLayerPerceptron.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMultiLayerPerceptron.html
Testability,test,test,". ROOT: TMultiLayerPerceptron Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Private Member Functions |; Private Attributes |; Friends |; List of all members ; TMultiLayerPerceptron Class Reference. ; This class describes a neural network. ; There are facilities to train the network and use the output.; The input layer is made of inactive neurons (returning the optionally normalized input) and output neurons are linear. The type of hidden neurons is free, the default being sigmoids. (One should still try to pass normalized inputs, e.g. between [0.,1]); The basic input is a TTree and two (training and test) TEventLists. Input and output neurons are assigned a value computed for each event with the same possibilities as for TTree::Draw(). Events may be weighted individually or via TTree::SetWeight(). 6 learning methods are available: kStochastic, kBatch, kSteepestDescent, kRibierePolak, kFletcherReeves and kBFGS.; This implementation, written by C. Delaere, is inspired from the mlpfit package from J.Schwindling et al. with some extensions:. the algorithms are globally the same; in TMultilayerPerceptron, there is no limitation on the number of layers/neurons, while MLPFIT was limited to 2 hidden layers; TMultilayerPerceptron allows you to save the network in a root file, and provides more export functionalities; TMultilayerPerceptron gives more flexibility regarding the normalization of inputs/outputs; TMultilayerPerceptron provides, thanks to Andrea Bocci, the possibility to use cross-entropy errors, which allows to train a network for pattern classification based on Bayesian posterior probability. Introduction; Neural Networks are more and more used in various fields for data analysis and classification, both for research and commercial institutions. Some randomly chosen examples are:. imag",MatchSource.WIKI,doc/master/classTMultiLayerPerceptron.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMultiLayerPerceptron.html
Usability,learn,learning,"; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Private Member Functions |; Private Attributes |; Friends |; List of all members ; TMultiLayerPerceptron Class Reference. ; This class describes a neural network. ; There are facilities to train the network and use the output.; The input layer is made of inactive neurons (returning the optionally normalized input) and output neurons are linear. The type of hidden neurons is free, the default being sigmoids. (One should still try to pass normalized inputs, e.g. between [0.,1]); The basic input is a TTree and two (training and test) TEventLists. Input and output neurons are assigned a value computed for each event with the same possibilities as for TTree::Draw(). Events may be weighted individually or via TTree::SetWeight(). 6 learning methods are available: kStochastic, kBatch, kSteepestDescent, kRibierePolak, kFletcherReeves and kBFGS.; This implementation, written by C. Delaere, is inspired from the mlpfit package from J.Schwindling et al. with some extensions:. the algorithms are globally the same; in TMultilayerPerceptron, there is no limitation on the number of layers/neurons, while MLPFIT was limited to 2 hidden layers; TMultilayerPerceptron allows you to save the network in a root file, and provides more export functionalities; TMultilayerPerceptron gives more flexibility regarding the normalization of inputs/outputs; TMultilayerPerceptron provides, thanks to Andrea Bocci, the possibility to use cross-entropy errors, which allows to train a network for pattern classification based on Bayesian posterior probability. Introduction; Neural Networks are more and more used in various fields for data analysis and classification, both for research and commercial institutions. Some randomly chosen examples are:. image analysis; financial movements predictions and",MatchSource.WIKI,doc/master/classTMultiLayerPerceptron.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMultiLayerPerceptron.html
Availability,error,error,"object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Return",MatchSource.WIKI,doc/master/classTMutexImp.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMutexImp.html
Integrability,message,message,"object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Return",MatchSource.WIKI,doc/master/classTMutexImp.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMutexImp.html
Modifiability,inherit,inherited,". ROOT: TMutexImp Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; List of all members ; TMutexImp Class Referenceabstract. . Definition at line 27 of file TMutexImp.h. Public Member Functions;  TMutexImp ();  ; virtual ~TMutexImp ();  ; TClass * IsA () const override;  ; virtual Int_t Lock ()=0;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual Int_t TryLock ()=0;  ; virtual Int_t UnLock ()=0;  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all o",MatchSource.WIKI,doc/master/classTMutexImp.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMutexImp.html
Security,hash,hash," Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Returns name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual const char * GetTitle () const;  Returns title of object. ;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; virtual ULong_t Hash () const;  Return hash value for this object. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns kTRUE if object inherits from class ""classname"". ;  ; virtual Bool_t InheritsFrom (const TClass *cl) const;  Returns kTRUE if object inherits from TClass cl. ;  ; virtual void Inspect () const;  Dump contents of this object in a graphics canvas. ;  ; void InvertBit (UInt_t f);  ; Bool_t IsDestructed () const;  IsDestructed. ;  ; virtual Bool_t IsEqual (const TObject *obj) const;  Default equal comparison (objects are equal if they have the same address in memory). ;  ; virtual Bool_t IsFolder () const;  Returns kTRUE in case object contains browsable objects (like containers or lists of other objects). ;  ; R__ALWAYS_INLINE Bool_t",MatchSource.WIKI,doc/master/classTMutexImp.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMutexImp.html
Modifiability,variab,variable,". ROOT: TMVA Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Attributes |; List of all members ; TMVA Class ReferenceTMVA. ; Base Class for all classes that need option parsing. ; Node for the Decision Tree.; The node specifies ONE variable out of the given set of selection variable that is used to split the sample which ""arrives"" at the node, into a left (background-enhanced) and a right (signal-enhanced) sample. . Public Types; enum  ECellValue { ;   kValue; , kValueError; , kValueDensity; , kMeanValue; , ;   kRms; , kRmsOvMean; , kCellVolume. };  ; enum  EDTSeparation { ;   kFoam; , kGiniIndex; , kMisClassificationError; , kCrossEntropy; , ;   kGiniIndexWithLaplace; , kSdivSqrtSplusB. };  ; enum class  EEfficiencyPlotType { kEffBvsEffS; , kRejBvsEffS; };  ; enum  EFoamType { ;   kSeparate; , kDiscr; , kMonoTarget; , kMultiTarget; , ;   kMultiClass. };  ; enum  EMsgType { ;   kDEBUG = 1; , kVERBOSE = 2; , kINFO = 3; , kWARNING = 4; , ;   kERROR = 5; , kFATAL = 6; , kSILENT = 7; , kHEADER = 8. };  ; enum  ETargetSelection { kMean = 0; , kMpv = 1; };  ; using EventCollection_t = std::vector< Event * >;  ; using EventOutputs_t = std::vector< Float_t >;  ; using EventOutputsMulticlass_t = std::vector< std::vector< Float_t > >;  ; using EventTypes_t = std::vector< Bool_t >;  ; enum  HistType { kMVAType = 0; , kProbaType = 1; , kRarityType = 2; , kCompareType = 3; };  ; typedef UInt_t TMVAVersion_t;  ; enum  VIType { kShort =0; , kAll =1; , kRandom =2; };  . Public Attributes; std::vector< TControlBar * > BDT_Global__cbar;  ; std::vector< TControlBar * > BDTReg_Global__cbar;  ; const Bool_t GeneticAlgorithm__DEBUG__ = kFALSE;  ; const int max_Events_ = 200000;  ; const int max_nLayers_ = 6;  ; const int max_nNodes_ = 200;  ; const int max_nVar_ = 200;  ; const Bool_t MethodPDERS_UseFindRoot = kFALSE;  . Member Typedef Documentation. ◆ EventCollection_t. using TMVA::EventCollec",MatchSource.WIKI,doc/master/classTMVA.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA.html
Modifiability,inherit,inherited,". ROOT: TMVA::AbsoluteDeviationLossFunction Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; List of all members ; TMVA::AbsoluteDeviationLossFunction Class ReferenceTMVA. ; Absolute Deviation Loss Function. ; Definition at line 239 of file LossFunction.h. Public Member Functions;  AbsoluteDeviationLossFunction ();  ;  ~AbsoluteDeviationLossFunction ();  ; Double_t CalculateLoss (LossFunctionEventInfo &e);  absolute deviation, determine the loss for a single event ;  ; Double_t CalculateMeanLoss (std::vector< LossFunctionEventInfo > &evs);  absolute deviation, determine the mean loss for a collection of events ;  ; Double_t CalculateNetLoss (std::vector< LossFunctionEventInfo > &evs);  absolute deviation, determine the net loss for a collection of events ;  ; Int_t Id ();  ; TString Name ();  ;  Public Member Functions inherited from TMVA::LossFunction;  LossFunction ();  ; virtual ~LossFunction ();  . #include <TMVA/LossFunction.h>. Inheritance diagram for TMVA::AbsoluteDeviationLossFunction:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ AbsoluteDeviationLossFunction(). TMVA::AbsoluteDeviationLossFunction::AbsoluteDeviationLossFunction ; (; ). inline . Definition at line 242 of file LossFunction.h. ◆ ~AbsoluteDeviationLossFunction(). TMVA::AbsoluteDeviationLossFunction::~AbsoluteDeviationLossFunction ; (; ). inline . Definition at line 243 of file LossFunction.h. Member Function Documentation. ◆ CalculateLoss(). Double_t TMVA::AbsoluteDeviationLossFunction::CalculateLoss ; (; LossFunctionEventInfo & ; e). virtual . absolute deviation, determine the loss for a single event ; Implements TMVA::LossFunction.; Definition at line 497 of file LossFunction.cxx. ◆ CalculateMeanLoss(). Double_t TMVA::AbsoluteDeviationLossFunction::CalculateMeanLoss ; (; std::vector< LossFunctionEventInfo",MatchSource.WIKI,doc/master/classTMVA_1_1AbsoluteDeviationLossFunction.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1AbsoluteDeviationLossFunction.html
Modifiability,inherit,inherited,"ember Functions |; List of all members ; TMVA::AbsoluteDeviationLossFunctionBDT Class ReferenceTMVA. ; Absolute Deviation BDT Loss Function. ; Definition at line 261 of file LossFunction.h. Public Member Functions;  AbsoluteDeviationLossFunctionBDT ();  ;  ~AbsoluteDeviationLossFunctionBDT ();  ; Double_t Fit (std::vector< LossFunctionEventInfo > &evs);  absolute deviation BDT, determine the fit value for the terminal node based upon the events in the terminal node ;  ; void Init (std::map< const TMVA::Event *, LossFunctionEventInfo > &evinfomap, std::vector< double > &boostWeights);  absolute deviation BDT, initialize the targets and prepare for the regression ;  ; void SetTargets (std::vector< const TMVA::Event * > &evs, std::map< const TMVA::Event *, LossFunctionEventInfo > &evinfomap);  absolute deviation BDT, set the targets for a collection of events ;  ; Double_t Target (LossFunctionEventInfo &e);  absolute deviation BDT, set the target for a single event ;  ;  Public Member Functions inherited from TMVA::LossFunctionBDT;  LossFunctionBDT ();  ; virtual ~LossFunctionBDT ();  ;  Public Member Functions inherited from TMVA::LossFunction;  LossFunction ();  ; virtual ~LossFunction ();  ;  Public Member Functions inherited from TMVA::AbsoluteDeviationLossFunction;  AbsoluteDeviationLossFunction ();  ;  ~AbsoluteDeviationLossFunction ();  ; Double_t CalculateLoss (LossFunctionEventInfo &e);  absolute deviation, determine the loss for a single event ;  ; Double_t CalculateMeanLoss (std::vector< LossFunctionEventInfo > &evs);  absolute deviation, determine the mean loss for a collection of events ;  ; Double_t CalculateNetLoss (std::vector< LossFunctionEventInfo > &evs);  absolute deviation, determine the net loss for a collection of events ;  ; Int_t Id ();  ; TString Name ();  . #include <TMVA/LossFunction.h>. Inheritance diagram for TMVA::AbsoluteDeviationLossFunctionBDT:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [lege",MatchSource.WIKI,doc/master/classTMVA_1_1AbsoluteDeviationLossFunctionBDT.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1AbsoluteDeviationLossFunctionBDT.html
Modifiability,variab,variable,"VarIndex ();  . Private Attributes; Double_t fBkgWeight;  cumulative background weight for splitting ;  ; const Event * fEvent;  ; Double_t fSigWeight;  same for the signal weights ;  . #include <TMVA/BDTEventWrapper.h>; Constructor & Destructor Documentation. ◆ BDTEventWrapper(). BDTEventWrapper::BDTEventWrapper ; (; const Event * ; e). Constructor. ; Definition at line 36 of file BDTEventWrapper.cxx. ◆ ~BDTEventWrapper(). BDTEventWrapper::~BDTEventWrapper ; (; ). Destructor. ; Definition at line 45 of file BDTEventWrapper.cxx. Member Function Documentation. ◆ GetCumulativeWeight(). Double_t BDTEventWrapper::GetCumulativeWeight ; (; Bool_t ; type); const. Get the accumulated weight. ; Parameters. type- true for signal, false for background . Returnsthe cumulative weight for sorted signal/background events ; Definition at line 64 of file BDTEventWrapper.cxx. ◆ GetVal() [1/2]. Double_t TMVA::BDTEventWrapper::GetVal ; (; ); const. inline . Returnsvalue of variable fVarIndex for this event ; Definition at line 65 of file BDTEventWrapper.h. ◆ GetVal() [2/2]. Double_t TMVA::BDTEventWrapper::GetVal ; (; Int_t ; var); const. inline . Definition at line 68 of file BDTEventWrapper.h. ◆ GetVarIndex(). static Int_t & TMVA::BDTEventWrapper::GetVarIndex ; (; ). inlinestaticprivate . Definition at line 73 of file BDTEventWrapper.h. ◆ operator*(). const Event * TMVA::BDTEventWrapper::operator* ; (; ); const. inline . Definition at line 66 of file BDTEventWrapper.h. ◆ operator<(). Bool_t TMVA::BDTEventWrapper::operator< ; (; const BDTEventWrapper & ; other); const. inline . Definition at line 82 of file BDTEventWrapper.h. ◆ SetCumulativeWeight(). void BDTEventWrapper::SetCumulativeWeight ; (; Bool_t ; type, . Double_t ; weight . ). Set the accumulated weight, for sorted signal/background events. ; Parameters. type- true for signal, false for background ; weight- the total weight. Parameters. type- true for signal, false for background ; weight- the total weight . Definition at line ",MatchSource.WIKI,doc/master/classTMVA_1_1BDTEventWrapper.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1BDTEventWrapper.html
Energy Efficiency,reduce,reduce," all its leaf nodes, fill max depth reached in the tree at the same time. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static BinarySearchTree * CreateFromXML (void *node, UInt_t tmva_Version_Code=262657);  re-create a new tree (decision tree or search tree) from XML ;  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TMVA::BinaryTree; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  . Private Member Functions; void DestroyNode (BinarySearchTreeNode *);  ; void Insert (const Event *, Node *);  private internal function to insert a event (node) at the proper position ;  ; Bool_t InVolume (const std::vector< Float_t > &, Volume *) const;  test if the data points are in the given volume ;  ; void NormalizeTree (std::vector< std::pair< Double_t, const TMVA::Event * > >::iterator, std::vector< std::pair< Double_t, const TMVA::Event * > >::iterator, UInt_t);  normalises the binary-search tree to reduce the branch length and hence speed up the search procedure (on average). ;  ; BinarySearchTreeNode * Search (Event *, Node *) const;  Private, recursive, function for searching. ;  ; Double_t SearchVolume (Node *, Volume *, Int_t, std::vector< const TMVA::BinarySearchTreeNode * > *events);  recursively walk through the daughter nodes and add up all weights of events that lie within the given volume ;  . Private Attributes; Bool_t fCanNormalize;  the tree can be normalised ;  ; UInt_t fCurrentDepth;  internal variable, counting the depth of the tree during insertion ;  ; std::vector< Float_t > fMax [2];  RMS for signal and background for each variable. ;  ; std::vector< Float_t > fMeans [2];  mean for signal and background for each variable ;  ; std::vector< Float_t ",MatchSource.WIKI,doc/master/classTMVA_1_1BinarySearchTree.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1BinarySearchTree.html
Modifiability,variab,variable,"e Binary search tree including a volume search method. ; Definition at line 65 of file BinarySearchTree.h. Public Member Functions;  BinarySearchTree (const BinarySearchTree &b);  copy constructor that creates a true copy, i.e. a completely independent tree ;  ;  BinarySearchTree (void);  default constructor ;  ; virtual ~BinarySearchTree (void);  destructor ;  ; void CalcStatistics (TMVA::Node *n=nullptr);  calculate basic statistics (mean, rms for each variable) ;  ; virtual const char * ClassName () const;  ; void Clear (TMVA::Node *n=nullptr);  clear nodes ;  ; virtual Node * CreateNode (UInt_t) const;  ; virtual BinaryTree * CreateTree () const;  ; Double_t Fill (const std::vector< TMVA::Event * > &events, const std::vector< Int_t > &theVars, Int_t theType=-1);  create the search tree from the event collection using ONLY the variables specified in ""theVars"" ;  ; Double_t Fill (const std::vector< TMVA::Event * > &events, Int_t theType=-1);  create the search tree from the events in a TTree using ALL the variables specified included in the Event ;  ; UInt_t GetPeriode (void) const;  ; Double_t GetSumOfWeights (Int_t theType) const;  return the sum of event (node) weights ;  ; Double_t GetSumOfWeights (void) const;  return the sum of event (node) weights ;  ; void Insert (const Event *);  insert a new ""event"" in the binary tree ;  ; virtual TClass * IsA () const;  ; Float_t Max (Types::ESBType sb, UInt_t var);  access to Maximum for signal and background for each variable ;  ; Float_t Mean (Types::ESBType sb, UInt_t var);  access to mean for signal and background for each variable ;  ; Float_t Min (Types::ESBType sb, UInt_t var);  access to Minimum for signal and background for each variable ;  ; void NormalizeTree ();  Normalisation of tree. ;  ; Float_t RMS (Types::ESBType sb, UInt_t var);  access to RMS for signal and background for each variable ;  ; Float_t RMS (UInt_t var);  access to RMS for each variable ;  ; BinarySearchTreeNode * Search (Event *event) con",MatchSource.WIKI,doc/master/classTMVA_1_1BinarySearchTree.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1BinarySearchTree.html
Security,access,access,"e Binary search tree including a volume search method. ; Definition at line 65 of file BinarySearchTree.h. Public Member Functions;  BinarySearchTree (const BinarySearchTree &b);  copy constructor that creates a true copy, i.e. a completely independent tree ;  ;  BinarySearchTree (void);  default constructor ;  ; virtual ~BinarySearchTree (void);  destructor ;  ; void CalcStatistics (TMVA::Node *n=nullptr);  calculate basic statistics (mean, rms for each variable) ;  ; virtual const char * ClassName () const;  ; void Clear (TMVA::Node *n=nullptr);  clear nodes ;  ; virtual Node * CreateNode (UInt_t) const;  ; virtual BinaryTree * CreateTree () const;  ; Double_t Fill (const std::vector< TMVA::Event * > &events, const std::vector< Int_t > &theVars, Int_t theType=-1);  create the search tree from the event collection using ONLY the variables specified in ""theVars"" ;  ; Double_t Fill (const std::vector< TMVA::Event * > &events, Int_t theType=-1);  create the search tree from the events in a TTree using ALL the variables specified included in the Event ;  ; UInt_t GetPeriode (void) const;  ; Double_t GetSumOfWeights (Int_t theType) const;  return the sum of event (node) weights ;  ; Double_t GetSumOfWeights (void) const;  return the sum of event (node) weights ;  ; void Insert (const Event *);  insert a new ""event"" in the binary tree ;  ; virtual TClass * IsA () const;  ; Float_t Max (Types::ESBType sb, UInt_t var);  access to Maximum for signal and background for each variable ;  ; Float_t Mean (Types::ESBType sb, UInt_t var);  access to mean for signal and background for each variable ;  ; Float_t Min (Types::ESBType sb, UInt_t var);  access to Minimum for signal and background for each variable ;  ; void NormalizeTree ();  Normalisation of tree. ;  ; Float_t RMS (Types::ESBType sb, UInt_t var);  access to RMS for signal and background for each variable ;  ; Float_t RMS (UInt_t var);  access to RMS for each variable ;  ; BinarySearchTreeNode * Search (Event *event) con",MatchSource.WIKI,doc/master/classTMVA_1_1BinarySearchTree.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1BinarySearchTree.html
Testability,test,test," all its leaf nodes, fill max depth reached in the tree at the same time. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static BinarySearchTree * CreateFromXML (void *node, UInt_t tmva_Version_Code=262657);  re-create a new tree (decision tree or search tree) from XML ;  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TMVA::BinaryTree; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  . Private Member Functions; void DestroyNode (BinarySearchTreeNode *);  ; void Insert (const Event *, Node *);  private internal function to insert a event (node) at the proper position ;  ; Bool_t InVolume (const std::vector< Float_t > &, Volume *) const;  test if the data points are in the given volume ;  ; void NormalizeTree (std::vector< std::pair< Double_t, const TMVA::Event * > >::iterator, std::vector< std::pair< Double_t, const TMVA::Event * > >::iterator, UInt_t);  normalises the binary-search tree to reduce the branch length and hence speed up the search procedure (on average). ;  ; BinarySearchTreeNode * Search (Event *, Node *) const;  Private, recursive, function for searching. ;  ; Double_t SearchVolume (Node *, Volume *, Int_t, std::vector< const TMVA::BinarySearchTreeNode * > *events);  recursively walk through the daughter nodes and add up all weights of events that lie within the given volume ;  . Private Attributes; Bool_t fCanNormalize;  the tree can be normalised ;  ; UInt_t fCurrentDepth;  internal variable, counting the depth of the tree during insertion ;  ; std::vector< Float_t > fMax [2];  RMS for signal and background for each variable. ;  ; std::vector< Float_t > fMeans [2];  mean for signal and background for each variable ;  ; std::vector< Float_t ",MatchSource.WIKI,doc/master/classTMVA_1_1BinarySearchTree.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1BinarySearchTree.html
Usability,simpl,simple,". ROOT: TMVA::BinarySearchTree Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Private Member Functions |; Private Attributes |; List of all members ; TMVA::BinarySearchTree Class ReferenceTMVA. ; A simple Binary search tree including a volume search method. ; Definition at line 65 of file BinarySearchTree.h. Public Member Functions;  BinarySearchTree (const BinarySearchTree &b);  copy constructor that creates a true copy, i.e. a completely independent tree ;  ;  BinarySearchTree (void);  default constructor ;  ; virtual ~BinarySearchTree (void);  destructor ;  ; void CalcStatistics (TMVA::Node *n=nullptr);  calculate basic statistics (mean, rms for each variable) ;  ; virtual const char * ClassName () const;  ; void Clear (TMVA::Node *n=nullptr);  clear nodes ;  ; virtual Node * CreateNode (UInt_t) const;  ; virtual BinaryTree * CreateTree () const;  ; Double_t Fill (const std::vector< TMVA::Event * > &events, const std::vector< Int_t > &theVars, Int_t theType=-1);  create the search tree from the event collection using ONLY the variables specified in ""theVars"" ;  ; Double_t Fill (const std::vector< TMVA::Event * > &events, Int_t theType=-1);  create the search tree from the events in a TTree using ALL the variables specified included in the Event ;  ; UInt_t GetPeriode (void) const;  ; Double_t GetSumOfWeights (Int_t theType) const;  return the sum of event (node) weights ;  ; Double_t GetSumOfWeights (void) const;  return the sum of event (node) weights ;  ; void Insert (const Event *);  insert a new ""event"" in the binary tree ;  ; virtual TClass * IsA () const;  ; Float_t Max (Types::ESBType sb, UInt_t var);  access to Maximum for signal and background for each variable ;  ; Float_t Mean (Types::ESBType sb, UInt_t var);  access to mean for signal and background for each variable ;  ; Float_t Min (Types::ESBType sb, UInt_t var);  ac",MatchSource.WIKI,doc/master/classTMVA_1_1BinarySearchTree.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1BinarySearchTree.html
Modifiability,variab,variable,". ROOT: TMVA::BinarySearchTreeNode Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Private Attributes |; List of all members ; TMVA::BinarySearchTreeNode Class ReferenceTMVA. ; Node for the BinarySearch or Decision Trees. ; for the binary search tree, it basically consists of the EVENT, and pointers to the parent and daughters; in case of the Decision Tree, it specifies parent and daughters, as well as ""which variable is used"" in the selection of this node, including the respective cut value. ; Definition at line 55 of file BinarySearchTreeNode.h. Public Member Functions;  BinarySearchTreeNode (BinarySearchTreeNode *parent, char pos);  constructor of a daughter node as a daughter of 'p' ;  ;  BinarySearchTreeNode (const BinarySearchTreeNode &n, BinarySearchTreeNode *parent=nullptr);  copy constructor of a node. ;  ;  BinarySearchTreeNode (const Event *e=nullptr, UInt_t signalClass=0);  constructor of a node for the search tree ;  ; virtual ~BinarySearchTreeNode ();  node destructor ;  ; virtual void AddAttributesToNode (void *node) const;  adding attributes to tree node ;  ; virtual void AddContentToNode (std::stringstream &s) const;  adding attributes to tree node ;  ; virtual Node * CreateNode () const;  ; virtual Bool_t EqualsMe (const Event &) const;  check if the event fed into the node actually equals the event that forms the node (in case of a search tree) ;  ; UInt_t GetClass () const;  ; const std::vector< Float_t > & GetEventV () const;  ; Short_t GetSelector () const;  return index of variable used for discrimination at this node ;  ; const std::vector< Float_t > & GetTargets () const;  ; Float_t GetWeight () const;  ; virtual Bool_t GoesLeft (const Event &) const;  check if the event fed into the node goes/descends to the left daughter ;  ; virtual Bool_t GoesRight (const Event &) const;  check if the event fed into the nod",MatchSource.WIKI,doc/master/classTMVA_1_1BinarySearchTreeNode.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1BinarySearchTreeNode.html
Integrability,depend,depends,"::GetRoot ; (; ); const. inlinevirtual . Reimplemented in TMVA::DecisionTree.; Definition at line 83 of file BinaryTree.h. ◆ GetTotalTreeDepth(). UInt_t TMVA::BinaryTree::GetTotalTreeDepth ; (; ); const. inline . Definition at line 93 of file BinaryTree.h. ◆ IsA(). virtual TClass * TMVA::BinaryTree::IsA ; (; ); const. inlinevirtual . ReturnsTClass describing current object ; Reimplemented in TMVA::BinarySearchTree, and TMVA::DecisionTree.; Definition at line 122 of file BinaryTree.h. ◆ Log(). TMVA::MsgLogger & TMVA::BinaryTree::Log ; (; ); const. protected . Definition at line 235 of file BinaryTree.cxx. ◆ Print(). void TMVA::BinaryTree::Print ; (; std::ostream & ; os); const. virtual . recursively print the tree ; Definition at line 125 of file BinaryTree.cxx. ◆ Read(). void TMVA::BinaryTree::Read ; (; std::istream & ; istr, . UInt_t ; tmva_Version_Code = 262657 . ). virtual . Read the binary tree from an input stream. ; The input stream format depends on the tree type, it is defined be the node of the tree ; Definition at line 169 of file BinaryTree.cxx. ◆ ReadXML(). void TMVA::BinaryTree::ReadXML ; (; void * ; node, . UInt_t ; tmva_Version_Code = 262657 . ). virtual . read attributes from XML ; Definition at line 144 of file BinaryTree.cxx. ◆ SetRoot(). void TMVA::BinaryTree::SetRoot ; (; Node * ; r). inline . Definition at line 80 of file BinaryTree.h. ◆ SetTotalTreeDepth() [1/2]. void TMVA::BinaryTree::SetTotalTreeDepth ; (; Int_t ; depth). inline . Definition at line 95 of file BinaryTree.h. ◆ SetTotalTreeDepth() [2/2]. void TMVA::BinaryTree::SetTotalTreeDepth ; (; Node * ; n = nullptr). descend a tree to find all its leaf nodes, fill max depth reached in the tree at the same time. ; Definition at line 213 of file BinaryTree.cxx. ◆ Streamer(). virtual void TMVA::BinaryTree::Streamer ; (; TBuffer & ; ). virtual . Reimplemented in TMVA::BinarySearchTree, and TMVA::DecisionTree. ◆ StreamerNVirtual(). void TMVA::BinaryTree::StreamerNVirtual ; (; TBuffer & ; ClassDe",MatchSource.WIKI,doc/master/classTMVA_1_1BinaryTree.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1BinaryTree.html
Security,validat,validation,". ; A helper class to prune a decision tree using the Cost Complexity method (see Classification and Regression Trees by Leo Breiman et al) . Some definitions:. \( T_{max} \) - the initial, usually highly overtrained tree, that is to be pruned back; \( R(T) \) - quality index (Gini, misclassification rate, or other) of a tree \( T \); \( \sim T \) - set of terminal nodes in \( T \); \( T' \) - the pruned subtree of \( T_max \) that has the best quality index \( R(T') \); \( \alpha \) - the prune strength parameter in Cost Complexity pruning \( (R_{\alpha}(T) = R(T) + \alpha*|\sim T|) \). There are two running modes in CCPruner: (i) one may select a prune strength and prune back the tree \( T_{max}\) until the criterion: ; \[; \alpha < \frac{R(T) - R(t)}{|\sim T_t| - 1}; \]. is true for all nodes t in \( T \), or (ii) the algorithm finds the sequence of critical points \( \alpha_k < \alpha_{k+1} ... < \alpha_K \) such that \( T_K = root(T_{max}) \) and then selects the optimally-pruned subtree, defined to be the subtree with the best quality index for the validation sample. ; Definition at line 62 of file CCPruner.h. Public Types; typedef std::vector< Event * > EventList;  . Public Member Functions;  CCPruner (DecisionTree *t_max, const DataSet *validationSample, SeparationBase *qualityIndex=nullptr);  constructor ;  ;  CCPruner (DecisionTree *t_max, const EventList *validationSample, SeparationBase *qualityIndex=nullptr);  constructor ;  ;  ~CCPruner ();  ; std::vector< TMVA::DecisionTreeNode * > GetOptimalPruneSequence () const;  return the prune strength (=alpha) corresponding to the prune sequence ;  ; Float_t GetOptimalPruneStrength () const;  ; Float_t GetOptimalQualityIndex () const;  ; void Optimize ();  determine the pruning sequence ;  ; void SetPruneStrength (Float_t alpha=-1.0);  . Private Attributes; Float_t fAlpha;  ! regularization parameter in CC pruning ;  ; Bool_t fDebug;  ! debug flag ;  ; Int_t fOptimalK;  ! index of the optimal tree in the pruned",MatchSource.WIKI,doc/master/classTMVA_1_1CCPruner.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1CCPruner.html
Integrability,wrap,wrapped,"r.h. Classes; class  CCTreeNode;  . Public Types; typedef std::vector< Event * > EventList;  . Public Member Functions;  CCTreeWrapper (DecisionTree *T, SeparationBase *qualityIndex);  constructor ;  ;  ~CCTreeWrapper ();  destructor ;  ; Double_t CheckEvent (const TMVA::Event &e, Bool_t useYesNoLeaf=false);  return the decision tree output for an event ;  ; CCTreeNode * GetRoot ();  ; void InitTree (CCTreeNode *t);  initialize the node t and all its descendants ;  ; void PruneNode (CCTreeNode *t);  remove the branch rooted at node t ;  ; Double_t TestTreeQuality (const DataSet *validationSample);  return the misclassification rate of a pruned tree for a validation event sample using the DataSet ;  ; Double_t TestTreeQuality (const EventList *validationSample);  return the misclassification rate of a pruned tree for a validation event sample using an EventList ;  . Private Attributes; DecisionTree * fDTParent;  ! pointer to underlying DecisionTree ;  ; SeparationBase * fQualityIndex;  ! pointer to the used quality index calculator ;  ; CCTreeNode * fRoot;  ! the root node of the (wrapped) decision Tree ;  . #include <TMVA/CCTreeWrapper.h>; Member Typedef Documentation. ◆ EventList. typedef std::vector<Event*> TMVA::CCTreeWrapper::EventList. Definition at line 42 of file CCTreeWrapper.h. Constructor & Destructor Documentation. ◆ CCTreeWrapper(). TMVA::CCTreeWrapper::CCTreeWrapper ; (; DecisionTree * ; T, . SeparationBase * ; qualityIndex . ). constructor ; Definition at line 104 of file CCTreeWrapper.cxx. ◆ ~CCTreeWrapper(). TMVA::CCTreeWrapper::~CCTreeWrapper ; (; ). destructor ; Definition at line 116 of file CCTreeWrapper.cxx. Member Function Documentation. ◆ CheckEvent(). Double_t TMVA::CCTreeWrapper::CheckEvent ; (; const TMVA::Event & ; e, . Bool_t ; useYesNoLeaf = false . ). return the decision tree output for an event ; Definition at line 226 of file CCTreeWrapper.cxx. ◆ GetRoot(). CCTreeNode * TMVA::CCTreeWrapper::GetRoot ; (; ). inline . Definition at line 1",MatchSource.WIKI,doc/master/classTMVA_1_1CCTreeWrapper.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1CCTreeWrapper.html
Security,validat,validationSample,". ROOT: TMVA::CCTreeWrapper Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Classes |; Public Types |; Public Member Functions |; Private Attributes |; List of all members ; TMVA::CCTreeWrapper Class ReferenceTMVA. . Definition at line 38 of file CCTreeWrapper.h. Classes; class  CCTreeNode;  . Public Types; typedef std::vector< Event * > EventList;  . Public Member Functions;  CCTreeWrapper (DecisionTree *T, SeparationBase *qualityIndex);  constructor ;  ;  ~CCTreeWrapper ();  destructor ;  ; Double_t CheckEvent (const TMVA::Event &e, Bool_t useYesNoLeaf=false);  return the decision tree output for an event ;  ; CCTreeNode * GetRoot ();  ; void InitTree (CCTreeNode *t);  initialize the node t and all its descendants ;  ; void PruneNode (CCTreeNode *t);  remove the branch rooted at node t ;  ; Double_t TestTreeQuality (const DataSet *validationSample);  return the misclassification rate of a pruned tree for a validation event sample using the DataSet ;  ; Double_t TestTreeQuality (const EventList *validationSample);  return the misclassification rate of a pruned tree for a validation event sample using an EventList ;  . Private Attributes; DecisionTree * fDTParent;  ! pointer to underlying DecisionTree ;  ; SeparationBase * fQualityIndex;  ! pointer to the used quality index calculator ;  ; CCTreeNode * fRoot;  ! the root node of the (wrapped) decision Tree ;  . #include <TMVA/CCTreeWrapper.h>; Member Typedef Documentation. ◆ EventList. typedef std::vector<Event*> TMVA::CCTreeWrapper::EventList. Definition at line 42 of file CCTreeWrapper.h. Constructor & Destructor Documentation. ◆ CCTreeWrapper(). TMVA::CCTreeWrapper::CCTreeWrapper ; (; DecisionTree * ; T, . SeparationBase * ; qualityIndex . ). constructor ; Definition at line 104 of file CCTreeWrapper.cxx. ◆ ~CCTreeWrapper(). TMVA::CCTreeWrapper::~CCTreeWrapper ; (; ). destructor ; Definition at line 116 of file CCTreeWrapper.cxx. Member Funct",MatchSource.WIKI,doc/master/classTMVA_1_1CCTreeWrapper.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1CCTreeWrapper.html
Modifiability,config,configure,". ROOT: Classification Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Classification Class ReferenceTMVA. ; Class to perform two class classification. ; The first step before any analysis is to prepare the data, to do that you need to create an object of TMVA::DataLoader, in this object you need to configure the variables and the number of events to train/test. The class TMVA::Experimental::Classification needs a TMVA::DataLoader object, optional a TFile object to save the results and some extra options in a string like ""V:Color:Transformations=I;D;P;U;G:Silent:DrawProgressBar:ModelPersistence:Jobs=2"" where: V = verbose output Color = coloured screen output Silent = batch mode: boolean silent flag inhibiting any output from TMVA Transformations = list of transformations to test. DrawProgressBar = draw progress bar to display training and testing. ModelPersistence = to save the trained model in xml or serialized files. Jobs = number of ml methods to test/train in parallel using MultiProc, requires to call Evaluate method. Basic example. void classification(UInt_t jobs = 2); {; TMVA::Tools::Instance();; ; TFile *input(0);; TString fname = ""./tmva_class_example.root"";; if (!gSystem->AccessPathName(fname)) {; input = TFile::Open(fname); // check if file in local directory exists; } else {; TFile::SetCacheFileDir(""."");; input = TFile::Open(""http://root.cern/files/tmva_class_example.root"", ""CACHEREAD"");; }; if (!input) {; std::cout << ""ERROR: could not open data file"" << std::endl;; exit(1);; }; ; // Register the training and test trees; ; TTree *signalTree = (TTree *)input->Get(""TreeS"");; TTree *background = (TTree *)input->Get(""TreeB"");; ; TMVA::DataLoader *dataloader = new TMVA::DataLoader(""dataset"");; ; dataloader->AddVariable(""myvar1 := var1+var2"", 'F');; dataloader->AddVariable(""myvar2 := var1-var2"", ""Expression 2"", """", 'F');; dataloader->AddVariable(""var3"", ""Variable 3"", ""units"", 'F');; dataloader->AddVariable(""var4",MatchSource.WIKI,doc/master/classTMVA_1_1Classification.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1Classification.html
Performance,perform,perform,". ROOT: Classification Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Classification Class ReferenceTMVA. ; Class to perform two class classification. ; The first step before any analysis is to prepare the data, to do that you need to create an object of TMVA::DataLoader, in this object you need to configure the variables and the number of events to train/test. The class TMVA::Experimental::Classification needs a TMVA::DataLoader object, optional a TFile object to save the results and some extra options in a string like ""V:Color:Transformations=I;D;P;U;G:Silent:DrawProgressBar:ModelPersistence:Jobs=2"" where: V = verbose output Color = coloured screen output Silent = batch mode: boolean silent flag inhibiting any output from TMVA Transformations = list of transformations to test. DrawProgressBar = draw progress bar to display training and testing. ModelPersistence = to save the trained model in xml or serialized files. Jobs = number of ml methods to test/train in parallel using MultiProc, requires to call Evaluate method. Basic example. void classification(UInt_t jobs = 2); {; TMVA::Tools::Instance();; ; TFile *input(0);; TString fname = ""./tmva_class_example.root"";; if (!gSystem->AccessPathName(fname)) {; input = TFile::Open(fname); // check if file in local directory exists; } else {; TFile::SetCacheFileDir(""."");; input = TFile::Open(""http://root.cern/files/tmva_class_example.root"", ""CACHEREAD"");; }; if (!input) {; std::cout << ""ERROR: could not open data file"" << std::endl;; exit(1);; }; ; // Register the training and test trees; ; TTree *signalTree = (TTree *)input->Get(""TreeS"");; TTree *background = (TTree *)input->Get(""TreeB"");; ; TMVA::DataLoader *dataloader = new TMVA::DataLoader(""dataset"");; ; dataloader->AddVariable(""myvar1 := var1+var2"", 'F');; dataloader->AddVariable(""myvar2 := var1-var2"", ""Expression 2"", """", 'F');; dataloader->AddVariable(""var3"", ""Variable 3"", ""units"", 'F');; dataloader->AddVariable(""var4",MatchSource.WIKI,doc/master/classTMVA_1_1Classification.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1Classification.html
Security,access,access,"ata set infoDefinition DataLoader.cxx:524; TMVA::DataLoader::SetBackgroundWeightExpressionvoid SetBackgroundWeightExpression(const TString &variable)Definition DataLoader.cxx:556; TMVA::DataLoader::AddVariablevoid AddVariable(const TString &expression, const TString &title, const TString &unit, char type='F', Double_t min=0, Double_t max=0)user inserts discriminating variable in data set infoDefinition DataLoader.cxx:485; TMVA::Envelope::BookMethodvirtual void BookMethod(TString methodname, TString methodtitle, TString options="""")Method to book the machine learning method to perform the algorithm.Definition Envelope.cxx:163; TMVA::Experimental::ClassificationDefinition Classification.h:162; TMVA::Experimental::Classification::GetResultsstd::vector< ClassificationResult > & GetResults()Return the vector of TMVA::Experimental::ClassificationResult objects.Definition Classification.cxx:945; TMVA::Experimental::Classification::Evaluatevirtual void Evaluate()Method to perform Train/Test over all ml method booked.Definition Classification.cxx:248; TMVA::Tools::Instancestatic Tools & Instance()Definition Tools.cxx:71; TMVA::Types::kBDT@ kBDTDefinition Types.h:86; TMVA::Types::kSVM@ kSVMDefinition Types.h:89; TMultiGraphA TMultiGraph is a collection of TGraph (or derived) objects.Definition TMultiGraph.h:34; TStringBasic string class.Definition TString.h:139; TSystem::AccessPathNamevirtual Bool_t AccessPathName(const char *path, EAccessMode mode=kFileExists)Returns FALSE if one can access a file using the specified access mode.Definition TSystem.cxx:1296; TTreeA TTree represents a columnar dataset.Definition TTree.h:79; classificationvoid classification(UInt_t jobs=4)Definition classification.C:14; unsigned int; ; #include <TMVA/Classification.h>; The documentation for this class was generated from the following file:; tmva/tmva/inc/TMVA/Classification.h. Classification. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:35 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,doc/master/classTMVA_1_1Classification.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1Classification.html
Testability,test,test,". ROOT: Classification Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Classification Class ReferenceTMVA. ; Class to perform two class classification. ; The first step before any analysis is to prepare the data, to do that you need to create an object of TMVA::DataLoader, in this object you need to configure the variables and the number of events to train/test. The class TMVA::Experimental::Classification needs a TMVA::DataLoader object, optional a TFile object to save the results and some extra options in a string like ""V:Color:Transformations=I;D;P;U;G:Silent:DrawProgressBar:ModelPersistence:Jobs=2"" where: V = verbose output Color = coloured screen output Silent = batch mode: boolean silent flag inhibiting any output from TMVA Transformations = list of transformations to test. DrawProgressBar = draw progress bar to display training and testing. ModelPersistence = to save the trained model in xml or serialized files. Jobs = number of ml methods to test/train in parallel using MultiProc, requires to call Evaluate method. Basic example. void classification(UInt_t jobs = 2); {; TMVA::Tools::Instance();; ; TFile *input(0);; TString fname = ""./tmva_class_example.root"";; if (!gSystem->AccessPathName(fname)) {; input = TFile::Open(fname); // check if file in local directory exists; } else {; TFile::SetCacheFileDir(""."");; input = TFile::Open(""http://root.cern/files/tmva_class_example.root"", ""CACHEREAD"");; }; if (!input) {; std::cout << ""ERROR: could not open data file"" << std::endl;; exit(1);; }; ; // Register the training and test trees; ; TTree *signalTree = (TTree *)input->Get(""TreeS"");; TTree *background = (TTree *)input->Get(""TreeB"");; ; TMVA::DataLoader *dataloader = new TMVA::DataLoader(""dataset"");; ; dataloader->AddVariable(""myvar1 := var1+var2"", 'F');; dataloader->AddVariable(""myvar2 := var1-var2"", ""Expression 2"", """", 'F');; dataloader->AddVariable(""var3"", ""Variable 3"", ""units"", 'F');; dataloader->AddVariable(""var4",MatchSource.WIKI,doc/master/classTMVA_1_1Classification.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1Classification.html
Usability,progress bar,progress bar,". ROOT: Classification Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Classification Class ReferenceTMVA. ; Class to perform two class classification. ; The first step before any analysis is to prepare the data, to do that you need to create an object of TMVA::DataLoader, in this object you need to configure the variables and the number of events to train/test. The class TMVA::Experimental::Classification needs a TMVA::DataLoader object, optional a TFile object to save the results and some extra options in a string like ""V:Color:Transformations=I;D;P;U;G:Silent:DrawProgressBar:ModelPersistence:Jobs=2"" where: V = verbose output Color = coloured screen output Silent = batch mode: boolean silent flag inhibiting any output from TMVA Transformations = list of transformations to test. DrawProgressBar = draw progress bar to display training and testing. ModelPersistence = to save the trained model in xml or serialized files. Jobs = number of ml methods to test/train in parallel using MultiProc, requires to call Evaluate method. Basic example. void classification(UInt_t jobs = 2); {; TMVA::Tools::Instance();; ; TFile *input(0);; TString fname = ""./tmva_class_example.root"";; if (!gSystem->AccessPathName(fname)) {; input = TFile::Open(fname); // check if file in local directory exists; } else {; TFile::SetCacheFileDir(""."");; input = TFile::Open(""http://root.cern/files/tmva_class_example.root"", ""CACHEREAD"");; }; if (!input) {; std::cout << ""ERROR: could not open data file"" << std::endl;; exit(1);; }; ; // Register the training and test trees; ; TTree *signalTree = (TTree *)input->Get(""TreeS"");; TTree *background = (TTree *)input->Get(""TreeB"");; ; TMVA::DataLoader *dataloader = new TMVA::DataLoader(""dataset"");; ; dataloader->AddVariable(""myvar1 := var1+var2"", 'F');; dataloader->AddVariable(""myvar2 := var1-var2"", ""Expression 2"", """", 'F');; dataloader->AddVariable(""var3"", ""Variable 3"", ""units"", 'F');; dataloader->AddVariable(""var4",MatchSource.WIKI,doc/master/classTMVA_1_1Classification.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1Classification.html
Security,access,access,"t TString &option);  . Public Member Functions; IMethod * Create (const std::string &name, const TString &job, const TString &title, DataSetInfo &dsi, const TString &option);  creates the method if needed based on the method name using the creator function the factory has stored ;  ; IMethod * Create (const std::string &name, DataSetInfo &dsi, const TString &weightfile="""");  creates the method if needed based on the method name using the creator function the factory has stored ;  ; const std::vector< std::string > List () const;  returns a vector of the method type names of registered methods ;  ; void Print () const;  prints the registered method type names ;  ; Bool_t Register (const std::string &name, Creator creator);  registers a classifier creator function under the method type name ;  ; Bool_t Unregister (const std::string &name);  unregisters a classifier type name ;  . Static Public Member Functions; static void DestroyInstance ();  destroy the singleton instance ;  ; static ClassifierFactory & Instance ();  access to the ClassifierFactory singleton creates the instance if needed ;  . Private Types; typedef std::map< std::string, Creator > CallMap;  . Private Member Functions;  ClassifierFactory ();  ;  ClassifierFactory (const ClassifierFactory &);  ;  ~ClassifierFactory ();  ; const ClassifierFactory & operator= (const ClassifierFactory &);  . Private Attributes; CallMap fCalls;  . Static Private Attributes; static ClassifierFactory * fgInstance = 0;  Initialize static singleton pointer. ;  . #include <TMVA/ClassifierFactory.h>; Member Typedef Documentation. ◆ CallMap. typedef std::map<std::string, Creator> TMVA::ClassifierFactory::CallMap. private . Definition at line 98 of file ClassifierFactory.h. ◆ Creator. typedef IMethod *(* TMVA::ClassifierFactory::Creator) (const TString &job, const TString &title, DataSetInfo &dsi, const TString &option). Definition at line 60 of file ClassifierFactory.h. Constructor & Destructor Documentation. ◆ ClassifierFactor",MatchSource.WIKI,doc/master/classTMVA_1_1ClassifierFactory.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1ClassifierFactory.html
Availability,error,error,"ject. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t ",MatchSource.WIKI,doc/master/classTMVA_1_1ClassInfo.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1ClassInfo.html
Integrability,message,message,"ject. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t ",MatchSource.WIKI,doc/master/classTMVA_1_1ClassInfo.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1ClassInfo.html
Modifiability,inherit,inherited,"ide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Private Member Functions |; Private Attributes |; List of all members ; TMVA::ClassInfo Class ReferenceTMVA. ; Class that contains all the information of a class. ; Definition at line 49 of file ClassInfo.h. Public Member Functions;  ClassInfo (const TString &name=""default"");  constructor ;  ;  ~ClassInfo ();  destructor ;  ; const TMatrixD * GetCorrelationMatrix () const;  ; const TCut & GetCut () const;  ; UInt_t GetNumber () const;  ; const TString & GetWeight () const;  ; virtual TClass * IsA () const;  ; void SetCorrelationMatrix (TMatrixD *matrix);  ; void SetCut (const TCut &cut);  ; void SetNumber (const UInt_t index);  ; void SetWeight (const TString &weight);  ; virtual void Streamer (TBuffer &);  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; TClass * IsA () const override;  ; Bool_t IsSortable () const override;  ; void ls (Option_t *option="""") const override;",MatchSource.WIKI,doc/master/classTMVA_1_1ClassInfo.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1ClassInfo.html
Security,hash,hash,"Buffer &);  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; TClass * IsA () const override;  ; Bool_t IsSortable () const override;  ; void ls (Option_t *option="""") const override;  List TNamed name and title. ;  ; TNamed & operator= (const TNamed &rhs);  TNamed assignment operator. ;  ; void Print (Option_t *option="""") const override;  Print TNamed name and title. ;  ; virtual void SetName (const char *name);  Set the name of the TNamed. ;  ; virtual void SetNameTitle (const char *name, const char *title);  Set all the TNamed parameters (name and title). ;  ; virtual void SetTitle (const char *title="""");  Set the title of the TNamed. ;  ; virtual Int_t Sizeof () const;  Return size of the TNamed part of the TObject. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;",MatchSource.WIKI,doc/master/classTMVA_1_1ClassInfo.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1ClassInfo.html
Testability,log,logger," DeclFileName ();  ;  Static Public Member Functions inherited from TNamed; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  . Private Member Functions; MsgLogger & Log () const;  . Private Attributes; TMatrixD * fCorrMatrix;  Correlation matrix for this class. ;  ; TCut fCut;  pre-training cut for the class ;  ; MsgLogger * fLogger;  ! message logger ;  ; UInt_t fNumber;  index in of this class in vectors ;  ; TString fWeight;  the input formula string that is the weight for the class ;  . Additional Inherited Members;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va",MatchSource.WIKI,doc/master/classTMVA_1_1ClassInfo.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1ClassInfo.html
Deployability,configurat,configuration,. ROOT: TMVA::Config Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Classes |; Public Member Functions |; Static Public Member Functions |; Public Attributes |; Protected Attributes |; Private Member Functions |; Private Attributes |; Static Private Attributes |; List of all members ; TMVA::Config Class ReferenceTMVA. ; Singleton class for global configuration settings used by TMVA. ; Definition at line 49 of file Config.h. Classes; class  IONames;  ; class  VariablePlotting;  . Public Member Functions; void DisableMT ();  Force disabling MT running and release the thread pool by using instead seriaql execution. ;  ; Bool_t DrawProgressBar () const;  ; void EnableMT (int numthreads=0);  Enable MT in TMVA (by default is on when ROOT::EnableImplicitMT() is set. ;  ; IONames & GetIONames ();  ; ROOT::TThreadExecutor & GetMultiThreadExecutor ();  ; UInt_t GetNCpu ();  ; UInt_t GetNumWorkers () const;  ; Executor & GetThreadExecutor ();  Get executor class for multi-thread usage In case when MT is not enabled will return a serial executor. ;  ; VariablePlotting & GetVariablePlotting ();  ; virtual TClass * IsA () const;  ; Bool_t IsMTEnabled () const;  Check if IMT is enabled. ;  ; Bool_t IsSilent () const;  ; void SetDrawProgressBar (Bool_t d);  ; void SetNumWorkers (UInt_t n);  ; void SetSilent (Bool_t s);  ; void SetUseColor (Bool_t uc);  ; void SetWriteOptionsReference (Bool_t w);  ; virtual void Streamer (TBuffer &);  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; Bool_t UseColor () const;  ; Bool_t WriteOptionsReference () const;  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static void DestroyInstance ();  static function: destroy TMVA instance ;  ; static Config & Instance ();  static function: returns TMVA instance ;  . Public At,MatchSource.WIKI,doc/master/classTMVA_1_1Config.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1Config.html
Integrability,message,message,rtual void Streamer (TBuffer &);  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; Bool_t UseColor () const;  ; Bool_t WriteOptionsReference () const;  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static void DestroyInstance ();  static function: destroy TMVA instance ;  ; static Config & Instance ();  static function: returns TMVA instance ;  . Public Attributes; class TMVA::Config::IONames fIONames;  ; class TMVA::Config::VariablePlotting fVariablePlotting;  . Protected Attributes; Executor fExecutor;  . Private Member Functions;  Config ();  constructor - set defaults ;  ;  Config (const Config &);  ; virtual ~Config ();  destructor ;  ; MsgLogger & Log () const;  ; Config & operator= (const Config &);  . Private Attributes; std::atomic< Bool_t > fDrawProgressBar;  draw progress bar to indicate training evolution ;  ; MsgLogger * fLogger;  ! message logger ;  ; std::atomic< UInt_t > fNWorkers;  Default number of workers for multi-process jobs. ;  ; std::atomic< Bool_t > fSilent;  no output at all ;  ; std::atomic< Bool_t > fUseColoredConsole;  coloured standard output ;  ; std::atomic< Bool_t > fWriteOptionsReference;  if set true: Configurable objects write file with option reference ;  . Static Private Attributes; static std::atomic< Config * > fgConfigPtr { 0 };  . #include <TMVA/Config.h>; Constructor & Destructor Documentation. ◆ Config() [1/2]. TMVA::Config::Config ; (; ). private . constructor - set defaults ; Definition at line 51 of file Config.cxx. ◆ Config() [2/2]. TMVA::Config::Config ; (; const Config & ; ). private . ◆ ~Config(). TMVA::Config::~Config ; (; ). privatevirtual . destructor ; Definition at line 82 of file Config.cxx. Member Function Documentation. ◆ Class(). static TClass * TMVA::Config::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const ch,MatchSource.WIKI,doc/master/classTMVA_1_1Config.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1Config.html
Modifiability,config,configuration,. ROOT: TMVA::Config Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Classes |; Public Member Functions |; Static Public Member Functions |; Public Attributes |; Protected Attributes |; Private Member Functions |; Private Attributes |; Static Private Attributes |; List of all members ; TMVA::Config Class ReferenceTMVA. ; Singleton class for global configuration settings used by TMVA. ; Definition at line 49 of file Config.h. Classes; class  IONames;  ; class  VariablePlotting;  . Public Member Functions; void DisableMT ();  Force disabling MT running and release the thread pool by using instead seriaql execution. ;  ; Bool_t DrawProgressBar () const;  ; void EnableMT (int numthreads=0);  Enable MT in TMVA (by default is on when ROOT::EnableImplicitMT() is set. ;  ; IONames & GetIONames ();  ; ROOT::TThreadExecutor & GetMultiThreadExecutor ();  ; UInt_t GetNCpu ();  ; UInt_t GetNumWorkers () const;  ; Executor & GetThreadExecutor ();  Get executor class for multi-thread usage In case when MT is not enabled will return a serial executor. ;  ; VariablePlotting & GetVariablePlotting ();  ; virtual TClass * IsA () const;  ; Bool_t IsMTEnabled () const;  Check if IMT is enabled. ;  ; Bool_t IsSilent () const;  ; void SetDrawProgressBar (Bool_t d);  ; void SetNumWorkers (UInt_t n);  ; void SetSilent (Bool_t s);  ; void SetUseColor (Bool_t uc);  ; void SetWriteOptionsReference (Bool_t w);  ; virtual void Streamer (TBuffer &);  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; Bool_t UseColor () const;  ; Bool_t WriteOptionsReference () const;  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static void DestroyInstance ();  static function: destroy TMVA instance ;  ; static Config & Instance ();  static function: returns TMVA instance ;  . Public At,MatchSource.WIKI,doc/master/classTMVA_1_1Config.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1Config.html
Performance,multi-thread,multi-thread,. ROOT: TMVA::Config Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Classes |; Public Member Functions |; Static Public Member Functions |; Public Attributes |; Protected Attributes |; Private Member Functions |; Private Attributes |; Static Private Attributes |; List of all members ; TMVA::Config Class ReferenceTMVA. ; Singleton class for global configuration settings used by TMVA. ; Definition at line 49 of file Config.h. Classes; class  IONames;  ; class  VariablePlotting;  . Public Member Functions; void DisableMT ();  Force disabling MT running and release the thread pool by using instead seriaql execution. ;  ; Bool_t DrawProgressBar () const;  ; void EnableMT (int numthreads=0);  Enable MT in TMVA (by default is on when ROOT::EnableImplicitMT() is set. ;  ; IONames & GetIONames ();  ; ROOT::TThreadExecutor & GetMultiThreadExecutor ();  ; UInt_t GetNCpu ();  ; UInt_t GetNumWorkers () const;  ; Executor & GetThreadExecutor ();  Get executor class for multi-thread usage In case when MT is not enabled will return a serial executor. ;  ; VariablePlotting & GetVariablePlotting ();  ; virtual TClass * IsA () const;  ; Bool_t IsMTEnabled () const;  Check if IMT is enabled. ;  ; Bool_t IsSilent () const;  ; void SetDrawProgressBar (Bool_t d);  ; void SetNumWorkers (UInt_t n);  ; void SetSilent (Bool_t s);  ; void SetUseColor (Bool_t uc);  ; void SetWriteOptionsReference (Bool_t w);  ; virtual void Streamer (TBuffer &);  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; Bool_t UseColor () const;  ; Bool_t WriteOptionsReference () const;  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static void DestroyInstance ();  static function: destroy TMVA instance ;  ; static Config & Instance ();  static function: returns TMVA instance ;  . Public At,MatchSource.WIKI,doc/master/classTMVA_1_1Config.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1Config.html
Testability,log,logger,rtual void Streamer (TBuffer &);  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; Bool_t UseColor () const;  ; Bool_t WriteOptionsReference () const;  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static void DestroyInstance ();  static function: destroy TMVA instance ;  ; static Config & Instance ();  static function: returns TMVA instance ;  . Public Attributes; class TMVA::Config::IONames fIONames;  ; class TMVA::Config::VariablePlotting fVariablePlotting;  . Protected Attributes; Executor fExecutor;  . Private Member Functions;  Config ();  constructor - set defaults ;  ;  Config (const Config &);  ; virtual ~Config ();  destructor ;  ; MsgLogger & Log () const;  ; Config & operator= (const Config &);  . Private Attributes; std::atomic< Bool_t > fDrawProgressBar;  draw progress bar to indicate training evolution ;  ; MsgLogger * fLogger;  ! message logger ;  ; std::atomic< UInt_t > fNWorkers;  Default number of workers for multi-process jobs. ;  ; std::atomic< Bool_t > fSilent;  no output at all ;  ; std::atomic< Bool_t > fUseColoredConsole;  coloured standard output ;  ; std::atomic< Bool_t > fWriteOptionsReference;  if set true: Configurable objects write file with option reference ;  . Static Private Attributes; static std::atomic< Config * > fgConfigPtr { 0 };  . #include <TMVA/Config.h>; Constructor & Destructor Documentation. ◆ Config() [1/2]. TMVA::Config::Config ; (; ). private . constructor - set defaults ; Definition at line 51 of file Config.cxx. ◆ Config() [2/2]. TMVA::Config::Config ; (; const Config & ; ). private . ◆ ~Config(). TMVA::Config::~Config ; (; ). privatevirtual . destructor ; Definition at line 82 of file Config.cxx. Member Function Documentation. ◆ Class(). static TClass * TMVA::Config::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const ch,MatchSource.WIKI,doc/master/classTMVA_1_1Config.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1Config.html
Usability,progress bar,progress bar,rtual void Streamer (TBuffer &);  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; Bool_t UseColor () const;  ; Bool_t WriteOptionsReference () const;  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static void DestroyInstance ();  static function: destroy TMVA instance ;  ; static Config & Instance ();  static function: returns TMVA instance ;  . Public Attributes; class TMVA::Config::IONames fIONames;  ; class TMVA::Config::VariablePlotting fVariablePlotting;  . Protected Attributes; Executor fExecutor;  . Private Member Functions;  Config ();  constructor - set defaults ;  ;  Config (const Config &);  ; virtual ~Config ();  destructor ;  ; MsgLogger & Log () const;  ; Config & operator= (const Config &);  . Private Attributes; std::atomic< Bool_t > fDrawProgressBar;  draw progress bar to indicate training evolution ;  ; MsgLogger * fLogger;  ! message logger ;  ; std::atomic< UInt_t > fNWorkers;  Default number of workers for multi-process jobs. ;  ; std::atomic< Bool_t > fSilent;  no output at all ;  ; std::atomic< Bool_t > fUseColoredConsole;  coloured standard output ;  ; std::atomic< Bool_t > fWriteOptionsReference;  if set true: Configurable objects write file with option reference ;  . Static Private Attributes; static std::atomic< Config * > fgConfigPtr { 0 };  . #include <TMVA/Config.h>; Constructor & Destructor Documentation. ◆ Config() [1/2]. TMVA::Config::Config ; (; ). private . constructor - set defaults ; Definition at line 51 of file Config.cxx. ◆ Config() [2/2]. TMVA::Config::Config ; (; const Config & ; ). private . ◆ ~Config(). TMVA::Config::~Config ; (; ). privatevirtual . destructor ; Definition at line 82 of file Config.cxx. Member Function Documentation. ◆ Class(). static TClass * TMVA::Config::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const ch,MatchSource.WIKI,doc/master/classTMVA_1_1Config.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1Config.html
Availability,error,error,"ject. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t ",MatchSource.WIKI,doc/master/classTMVA_1_1Configurable.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1Configurable.html
Integrability,message,message,"ject. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t ",MatchSource.WIKI,doc/master/classTMVA_1_1Configurable.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1Configurable.html
Modifiability,inherit,inherited,"g &desc="""");  ; const char * GetConfigDescription () const;  ; const char * GetConfigName () const;  ; const TString & GetOptions () const;  ; virtual TClass * IsA () const;  ; MsgLogger & Log () const;  ; virtual void ParseOptions ();  options parser ;  ; void PrintOptions () const;  prints out the options set in the options string and the defaults ;  ; void ReadOptionsFromStream (std::istream &istr);  read option back from the weight file ;  ; void ReadOptionsFromXML (void *node);  ; void SetConfigDescription (const char *d);  ; void SetConfigName (const char *n);  ; void SetMsgType (EMsgType t);  ; void SetOptions (const TString &s);  ; virtual void Streamer (TBuffer &);  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; void WriteOptionsToStream (std::ostream &o, const TString &prefix) const;  write options to output stream (e.g. in writing the MVA weight files ;  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; TClass * IsA () const override;  ; Bool_t IsSortable () const override;  ; void ls (Option_t *option="""") const override;  List TNamed na",MatchSource.WIKI,doc/master/classTMVA_1_1Configurable.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1Configurable.html
Security,hash,hash,"ostream &o, const TString &prefix) const;  write options to output stream (e.g. in writing the MVA weight files ;  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; TClass * IsA () const override;  ; Bool_t IsSortable () const override;  ; void ls (Option_t *option="""") const override;  List TNamed name and title. ;  ; TNamed & operator= (const TNamed &rhs);  TNamed assignment operator. ;  ; void Print (Option_t *option="""") const override;  Print TNamed name and title. ;  ; virtual void SetName (const char *name);  Set the name of the TNamed. ;  ; virtual void SetNameTitle (const char *name, const char *title);  Set all the TNamed parameters (name and title). ;  ; virtual void SetTitle (const char *title="""");  Set the title of the TNamed. ;  ; virtual Int_t Sizeof () const;  Return size of the TNamed part of the TObject. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;",MatchSource.WIKI,doc/master/classTMVA_1_1Configurable.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1Configurable.html
Testability,log,logger,"tic const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  . Protected Member Functions; void EnableLooseOptions (Bool_t b=kTRUE);  ; const TString & GetReferenceFile () const;  ; Bool_t LooseOptionCheckingEnabled () const;  ; void ResetSetFlag ();  resets the IsSet flag for all declare options to be called before options are read from stream ;  ; void WriteOptionsReferenceToFile ();  write complete options to output stream ;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  . Protected Attributes; MsgLogger * fLogger;  ! message logger ;  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  . Private Member Functions; template<class T > ; void AssignOpt (const TString &name, T &valAssign) const;  ; void SplitOptions (const TString &theOpt, TList &loo) const;  splits the option string at ':' and fills the list 'loo' with the primitive strings ;  . Private Attributes; TString fConfigDescription;  description of this configurable ;  ; OptionBase * fLastDeclaredOption;  ! last declared option ;  ; TList fListOfOptions;  option list ;  ; Bool_t fLooseOptionCheckingEnabled;  checker for option string ;  ; TString fOptions;  options string ;  ; TString fReferenceFile;  reference file for options writing ;  . Additional Inherited Members;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelet",MatchSource.WIKI,doc/master/classTMVA_1_1Configurable.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1Configurable.html
Energy Efficiency,reduce,reduce,") to 1 (finished) ; Definition at line 91 of file ConvergenceTest.cxx. ◆ ResetConvergenceCounter(). void TMVA::ConvergenceTest::ResetConvergenceCounter ; (; ). inline . Definition at line 58 of file ConvergenceTest.h. ◆ SetConvergenceParameters(). void TMVA::ConvergenceTest::SetConvergenceParameters ; (; Int_t ; steps, . Double_t ; improvement . ). inline . Definition at line 54 of file ConvergenceTest.h. ◆ SetCurrentValue(). void TMVA::ConvergenceTest::SetCurrentValue ; (; Float_t ; value). inline . Definition at line 56 of file ConvergenceTest.h. ◆ SpeedControl(). Float_t TMVA::ConvergenceTest::SpeedControl ; (; UInt_t ; ofSteps). this function provides the ability to change the learning rate according to the success of the last generations. ; Parameters:. int ofSteps : = if OF the number of STEPS given in this variable (ofSteps) the rate of improvement has to be calculated. using this function one can increase the stepSize of the mutation when we have good success (to pass fast through the easy phase-space) and reduce the learning rate if we are in a difficult ""territory"" of the phase-space. ; Definition at line 112 of file ConvergenceTest.cxx. Member Data Documentation. ◆ fBestResult. Float_t TMVA::ConvergenceTest::fBestResult. private . Definition at line 81 of file ConvergenceTest.h. ◆ fConvValue. Float_t TMVA::ConvergenceTest::fConvValue. private . ! the best ""fitness"" value ; Definition at line 76 of file ConvergenceTest.h. ◆ fCounter. Int_t TMVA::ConvergenceTest::fCounter. private . ! counts the number of steps without improvement ; Definition at line 75 of file ConvergenceTest.h. ◆ fCurrentValue. Float_t TMVA::ConvergenceTest::fCurrentValue. protected . ! current value ; Definition at line 68 of file ConvergenceTest.h. ◆ fImprovement. Float_t TMVA::ConvergenceTest::fImprovement. protected . ! minimum improvement which counts as improvement ; Definition at line 70 of file ConvergenceTest.h. ◆ fLastResult. Float_t TMVA::ConvergenceTest::fLastResult. private ",MatchSource.WIKI,doc/master/classTMVA_1_1ConvergenceTest.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1ConvergenceTest.html
Modifiability,variab,variable,"t is to be expected. ; Definition at line 66 of file ConvergenceTest.cxx. ◆ Progress(). Float_t TMVA::ConvergenceTest::Progress ; (; ). returns a float from 0 (just started) to 1 (finished) ; Definition at line 91 of file ConvergenceTest.cxx. ◆ ResetConvergenceCounter(). void TMVA::ConvergenceTest::ResetConvergenceCounter ; (; ). inline . Definition at line 58 of file ConvergenceTest.h. ◆ SetConvergenceParameters(). void TMVA::ConvergenceTest::SetConvergenceParameters ; (; Int_t ; steps, . Double_t ; improvement . ). inline . Definition at line 54 of file ConvergenceTest.h. ◆ SetCurrentValue(). void TMVA::ConvergenceTest::SetCurrentValue ; (; Float_t ; value). inline . Definition at line 56 of file ConvergenceTest.h. ◆ SpeedControl(). Float_t TMVA::ConvergenceTest::SpeedControl ; (; UInt_t ; ofSteps). this function provides the ability to change the learning rate according to the success of the last generations. ; Parameters:. int ofSteps : = if OF the number of STEPS given in this variable (ofSteps) the rate of improvement has to be calculated. using this function one can increase the stepSize of the mutation when we have good success (to pass fast through the easy phase-space) and reduce the learning rate if we are in a difficult ""territory"" of the phase-space. ; Definition at line 112 of file ConvergenceTest.cxx. Member Data Documentation. ◆ fBestResult. Float_t TMVA::ConvergenceTest::fBestResult. private . Definition at line 81 of file ConvergenceTest.h. ◆ fConvValue. Float_t TMVA::ConvergenceTest::fConvValue. private . ! the best ""fitness"" value ; Definition at line 76 of file ConvergenceTest.h. ◆ fCounter. Int_t TMVA::ConvergenceTest::fCounter. private . ! counts the number of steps without improvement ; Definition at line 75 of file ConvergenceTest.h. ◆ fCurrentValue. Float_t TMVA::ConvergenceTest::fCurrentValue. protected . ! current value ; Definition at line 68 of file ConvergenceTest.h. ◆ fImprovement. Float_t TMVA::ConvergenceTest::fImprovement. protected",MatchSource.WIKI,doc/master/classTMVA_1_1ConvergenceTest.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1ConvergenceTest.html
Usability,learn,learning,". ROOT: TMVA::ConvergenceTest Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Protected Attributes |; Private Attributes |; List of all members ; TMVA::ConvergenceTest Class ReferenceTMVA. ; Check for convergence. ; Definition at line 46 of file ConvergenceTest.h. Public Member Functions;  ConvergenceTest ();  constructor ;  ;  ~ConvergenceTest ();  destructor ;  ; Float_t GetCurrentValue ();  ; Bool_t HasConverged (Bool_t withinConvergenceBand=kFALSE);  gives back true if the last ""steps"" steps have lead to an improvement of the ""fitness"" of the ""individuals"" of at least ""improvement"" ;  ; Float_t Progress ();  returns a float from 0 (just started) to 1 (finished) ;  ; void ResetConvergenceCounter ();  ; void SetConvergenceParameters (Int_t steps, Double_t improvement);  ; void SetCurrentValue (Float_t value);  ; Float_t SpeedControl (UInt_t ofSteps);  this function provides the ability to change the learning rate according to the success of the last generations. ;  . Protected Attributes; Float_t fCurrentValue;  ! current value ;  ; Float_t fImprovement;  ! minimum improvement which counts as improvement ;  ; Int_t fSteps;  ! number of steps without improvement required for convergence ;  . Private Attributes; Float_t fBestResult;  ; Float_t fConvValue;  ! the best ""fitness"" value ;  ; Int_t fCounter;  ! counts the number of steps without improvement ;  ; Float_t fLastResult;  ; Int_t fMaxCounter;  ! maximum value for the counter so far ;  ; std::deque< Short_t > fSuccessList;  to calculate the improvement-speed ;  . #include <TMVA/ConvergenceTest.h>. Inheritance diagram for TMVA::ConvergenceTest:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ ConvergenceTest(). TMVA::ConvergenceTest::ConvergenceTest ; (; ). constructor ; Definition at line 40 of file ConvergenceTest.cxx. ◆ ~C",MatchSource.WIKI,doc/master/classTMVA_1_1ConvergenceTest.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1ConvergenceTest.html
Availability,down,down,"that \( T_K = root(T_{max}) \) and then selects the optimally-pruned subtree, defined to be the subtree with the best quality index for the validation sample. ; Definition at line 62 of file CostComplexityPruneTool.h. Public Member Functions;  CostComplexityPruneTool (SeparationBase *qualityIndex=nullptr);  the constructor for the cost complexity pruning ;  ; virtual ~CostComplexityPruneTool ();  the destructor for the cost complexity pruning ;  ; virtual PruningInfo * CalculatePruningInfo (DecisionTree *dt, const IPruneTool::EventSample *testEvents=nullptr, Bool_t isAutomatic=kFALSE);  the routine that basically ""steers"" the pruning process. ;  ;  Public Member Functions inherited from TMVA::IPruneTool;  IPruneTool ();  ; virtual ~IPruneTool ();  ; Double_t GetPruneStrength () const;  ; Bool_t IsAutomatic () const;  ; void SetAutomatic ();  ; void SetPruneStrength (Double_t alpha);  . Private Member Functions; void InitTreePruningMetaData (DecisionTreeNode *n);  initialise ""meta data"" for the pruning, like the ""costcomplexity"", the critical alpha, the minimal alpha down the tree, etc... for each node!! ;  ; MsgLogger & Log () const;  output stream to save logging information ;  ; void Optimize (DecisionTree *dt, Double_t weights);  after the critical \( \alpha \) values (at which the corresponding nodes would be pruned away) had been established in the ""InitMetaData"" we need now: automatic pruning: ;  . Private Attributes; MsgLogger * fLogger;  ; Int_t fOptimalK;  ! the optimal index of the prune sequence ;  ; std::vector< DecisionTreeNode * > fPruneSequence;  ! map of weakest links (i.e., branches to prune) -> pruning index ;  ; std::vector< Double_t > fPruneStrengthList;  ! map of alpha -> pruning index ;  ; std::vector< Double_t > fQualityIndexList;  ! map of R(T) -> pruning index ;  ; SeparationBase * fQualityIndexTool;  ! the quality index used to calculate R(t), R(T) = sum[t in ~T]{ R(t) } ;  . Additional Inherited Members;  Public Types inherited from TMVA::",MatchSource.WIKI,doc/master/classTMVA_1_1CostComplexityPruneTool.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1CostComplexityPruneTool.html
Integrability,rout,routine,"nal nodes in \( T \); \( T' \) - the pruned subtree of \( T_max \) that has the best quality index \( R(T') \); \( \alpha \) - the prune strength parameter in Cost Complexity pruning \( (R_{\alpha}(T) = R(T) + \alpha*|\sim T|) \). There are two running modes in CCPruner: (i) one may select a prune strength and prune back the tree \( T_{max}\) until the criterion: ; \[; \alpha < \frac{R(T) - R(t)}{|\sim T_t| - 1}; \]. is true for all nodes t in \( T \), or (ii) the algorithm finds the sequence of critical points \( \alpha_k < \alpha_{k+1} ... < \alpha_K \) such that \( T_K = root(T_{max}) \) and then selects the optimally-pruned subtree, defined to be the subtree with the best quality index for the validation sample. ; Definition at line 62 of file CostComplexityPruneTool.h. Public Member Functions;  CostComplexityPruneTool (SeparationBase *qualityIndex=nullptr);  the constructor for the cost complexity pruning ;  ; virtual ~CostComplexityPruneTool ();  the destructor for the cost complexity pruning ;  ; virtual PruningInfo * CalculatePruningInfo (DecisionTree *dt, const IPruneTool::EventSample *testEvents=nullptr, Bool_t isAutomatic=kFALSE);  the routine that basically ""steers"" the pruning process. ;  ;  Public Member Functions inherited from TMVA::IPruneTool;  IPruneTool ();  ; virtual ~IPruneTool ();  ; Double_t GetPruneStrength () const;  ; Bool_t IsAutomatic () const;  ; void SetAutomatic ();  ; void SetPruneStrength (Double_t alpha);  . Private Member Functions; void InitTreePruningMetaData (DecisionTreeNode *n);  initialise ""meta data"" for the pruning, like the ""costcomplexity"", the critical alpha, the minimal alpha down the tree, etc... for each node!! ;  ; MsgLogger & Log () const;  output stream to save logging information ;  ; void Optimize (DecisionTree *dt, Double_t weights);  after the critical \( \alpha \) values (at which the corresponding nodes would be pruned away) had been established in the ""InitMetaData"" we need now: automatic pruning: ;  . Privat",MatchSource.WIKI,doc/master/classTMVA_1_1CostComplexityPruneTool.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1CostComplexityPruneTool.html
Modifiability,inherit,inherited,"}\) until the criterion: ; \[; \alpha < \frac{R(T) - R(t)}{|\sim T_t| - 1}; \]. is true for all nodes t in \( T \), or (ii) the algorithm finds the sequence of critical points \( \alpha_k < \alpha_{k+1} ... < \alpha_K \) such that \( T_K = root(T_{max}) \) and then selects the optimally-pruned subtree, defined to be the subtree with the best quality index for the validation sample. ; Definition at line 62 of file CostComplexityPruneTool.h. Public Member Functions;  CostComplexityPruneTool (SeparationBase *qualityIndex=nullptr);  the constructor for the cost complexity pruning ;  ; virtual ~CostComplexityPruneTool ();  the destructor for the cost complexity pruning ;  ; virtual PruningInfo * CalculatePruningInfo (DecisionTree *dt, const IPruneTool::EventSample *testEvents=nullptr, Bool_t isAutomatic=kFALSE);  the routine that basically ""steers"" the pruning process. ;  ;  Public Member Functions inherited from TMVA::IPruneTool;  IPruneTool ();  ; virtual ~IPruneTool ();  ; Double_t GetPruneStrength () const;  ; Bool_t IsAutomatic () const;  ; void SetAutomatic ();  ; void SetPruneStrength (Double_t alpha);  . Private Member Functions; void InitTreePruningMetaData (DecisionTreeNode *n);  initialise ""meta data"" for the pruning, like the ""costcomplexity"", the critical alpha, the minimal alpha down the tree, etc... for each node!! ;  ; MsgLogger & Log () const;  output stream to save logging information ;  ; void Optimize (DecisionTree *dt, Double_t weights);  after the critical \( \alpha \) values (at which the corresponding nodes would be pruned away) had been established in the ""InitMetaData"" we need now: automatic pruning: ;  . Private Attributes; MsgLogger * fLogger;  ; Int_t fOptimalK;  ! the optimal index of the prune sequence ;  ; std::vector< DecisionTreeNode * > fPruneSequence;  ! map of weakest links (i.e., branches to prune) -> pruning index ;  ; std::vector< Double_t > fPruneStrengthList;  ! map of alpha -> pruning index ;  ; std::vector< Double_t > fQualityI",MatchSource.WIKI,doc/master/classTMVA_1_1CostComplexityPruneTool.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1CostComplexityPruneTool.html
Security,validat,validation,"MVA. ; A class to prune a decision tree using the Cost Complexity method. ; (see ""Classification and Regression Trees"" by Leo Breiman et al). Some definitions:. \( T_{max} \) - the initial, usually highly overtrained tree, that is to be pruned back; \( R(T) \) - quality index (Gini, misclassification rate, or other) of a tree \( T \); \( \sim T \) - set of terminal nodes in \( T \); \( T' \) - the pruned subtree of \( T_max \) that has the best quality index \( R(T') \); \( \alpha \) - the prune strength parameter in Cost Complexity pruning \( (R_{\alpha}(T) = R(T) + \alpha*|\sim T|) \). There are two running modes in CCPruner: (i) one may select a prune strength and prune back the tree \( T_{max}\) until the criterion: ; \[; \alpha < \frac{R(T) - R(t)}{|\sim T_t| - 1}; \]. is true for all nodes t in \( T \), or (ii) the algorithm finds the sequence of critical points \( \alpha_k < \alpha_{k+1} ... < \alpha_K \) such that \( T_K = root(T_{max}) \) and then selects the optimally-pruned subtree, defined to be the subtree with the best quality index for the validation sample. ; Definition at line 62 of file CostComplexityPruneTool.h. Public Member Functions;  CostComplexityPruneTool (SeparationBase *qualityIndex=nullptr);  the constructor for the cost complexity pruning ;  ; virtual ~CostComplexityPruneTool ();  the destructor for the cost complexity pruning ;  ; virtual PruningInfo * CalculatePruningInfo (DecisionTree *dt, const IPruneTool::EventSample *testEvents=nullptr, Bool_t isAutomatic=kFALSE);  the routine that basically ""steers"" the pruning process. ;  ;  Public Member Functions inherited from TMVA::IPruneTool;  IPruneTool ();  ; virtual ~IPruneTool ();  ; Double_t GetPruneStrength () const;  ; Bool_t IsAutomatic () const;  ; void SetAutomatic ();  ; void SetPruneStrength (Double_t alpha);  . Private Member Functions; void InitTreePruningMetaData (DecisionTreeNode *n);  initialise ""meta data"" for the pruning, like the ""costcomplexity"", the critical alpha, the ",MatchSource.WIKI,doc/master/classTMVA_1_1CostComplexityPruneTool.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1CostComplexityPruneTool.html
Testability,test,testEvents,"nal nodes in \( T \); \( T' \) - the pruned subtree of \( T_max \) that has the best quality index \( R(T') \); \( \alpha \) - the prune strength parameter in Cost Complexity pruning \( (R_{\alpha}(T) = R(T) + \alpha*|\sim T|) \). There are two running modes in CCPruner: (i) one may select a prune strength and prune back the tree \( T_{max}\) until the criterion: ; \[; \alpha < \frac{R(T) - R(t)}{|\sim T_t| - 1}; \]. is true for all nodes t in \( T \), or (ii) the algorithm finds the sequence of critical points \( \alpha_k < \alpha_{k+1} ... < \alpha_K \) such that \( T_K = root(T_{max}) \) and then selects the optimally-pruned subtree, defined to be the subtree with the best quality index for the validation sample. ; Definition at line 62 of file CostComplexityPruneTool.h. Public Member Functions;  CostComplexityPruneTool (SeparationBase *qualityIndex=nullptr);  the constructor for the cost complexity pruning ;  ; virtual ~CostComplexityPruneTool ();  the destructor for the cost complexity pruning ;  ; virtual PruningInfo * CalculatePruningInfo (DecisionTree *dt, const IPruneTool::EventSample *testEvents=nullptr, Bool_t isAutomatic=kFALSE);  the routine that basically ""steers"" the pruning process. ;  ;  Public Member Functions inherited from TMVA::IPruneTool;  IPruneTool ();  ; virtual ~IPruneTool ();  ; Double_t GetPruneStrength () const;  ; Bool_t IsAutomatic () const;  ; void SetAutomatic ();  ; void SetPruneStrength (Double_t alpha);  . Private Member Functions; void InitTreePruningMetaData (DecisionTreeNode *n);  initialise ""meta data"" for the pruning, like the ""costcomplexity"", the critical alpha, the minimal alpha down the tree, etc... for each node!! ;  ; MsgLogger & Log () const;  output stream to save logging information ;  ; void Optimize (DecisionTree *dt, Double_t weights);  after the critical \( \alpha \) values (at which the corresponding nodes would be pruned away) had been established in the ""InitMetaData"" we need now: automatic pruning: ;  . Privat",MatchSource.WIKI,doc/master/classTMVA_1_1CostComplexityPruneTool.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1CostComplexityPruneTool.html
Modifiability,inherit,inherited,". ROOT: TMVA::CrossEntropy Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; List of all members ; TMVA::CrossEntropy Class ReferenceTMVA. ; Implementation of the CrossEntropy as separation criterion. ; -p log (p) - (1-p)log(1-p); p=purity. Definition at line 43 of file CrossEntropy.h. Public Member Functions;  CrossEntropy ();  ;  CrossEntropy (const CrossEntropy &g);  ; virtual ~CrossEntropy ();  ; virtual Double_t GetSeparationIndex (const Double_t s, const Double_t b);  Cross Entropy defined as: ;  ; virtual TClass * IsA () const;  ; virtual void Streamer (TBuffer &);  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TMVA::SeparationBase;  SeparationBase ();  Constructor. ;  ;  SeparationBase (const SeparationBase &s);  Copy constructor. ;  ; virtual ~SeparationBase ();  ; const TString & GetName ();  ; virtual Double_t GetSeparationGain (const Double_t nSelS, const Double_t nSelB, const Double_t nTotS, const Double_t nTotB);  Separation Gain: the measure of how the quality of separation of the sample increases by splitting the sample e.g. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TMVA::SeparationBase; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  . Additional Inherited Members;  Protected Attributes inherited from TMVA::SeparationBase; TString fName;  ; Double_t fPrecisionCut;  . #include <TMVA/CrossEntropy.h>. Inheritance diagram for TMVA::CrossEntropy:. This browser is not able to show SVG: try Firefox, Chrome, ",MatchSource.WIKI,doc/master/classTMVA_1_1CrossEntropy.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1CrossEntropy.html
Testability,log,log,". ROOT: TMVA::CrossEntropy Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; List of all members ; TMVA::CrossEntropy Class ReferenceTMVA. ; Implementation of the CrossEntropy as separation criterion. ; -p log (p) - (1-p)log(1-p); p=purity. Definition at line 43 of file CrossEntropy.h. Public Member Functions;  CrossEntropy ();  ;  CrossEntropy (const CrossEntropy &g);  ; virtual ~CrossEntropy ();  ; virtual Double_t GetSeparationIndex (const Double_t s, const Double_t b);  Cross Entropy defined as: ;  ; virtual TClass * IsA () const;  ; virtual void Streamer (TBuffer &);  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TMVA::SeparationBase;  SeparationBase ();  Constructor. ;  ;  SeparationBase (const SeparationBase &s);  Copy constructor. ;  ; virtual ~SeparationBase ();  ; const TString & GetName ();  ; virtual Double_t GetSeparationGain (const Double_t nSelS, const Double_t nSelB, const Double_t nTotS, const Double_t nTotB);  Separation Gain: the measure of how the quality of separation of the sample increases by splitting the sample e.g. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TMVA::SeparationBase; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  . Additional Inherited Members;  Protected Attributes inherited from TMVA::SeparationBase; TString fName;  ; Double_t fPrecisionCut;  . #include <TMVA/CrossEntropy.h>. Inheritance diagram for TMVA::CrossEntropy:. This browser is not able to show SVG: try Firefox, Chrome, ",MatchSource.WIKI,doc/master/classTMVA_1_1CrossEntropy.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1CrossEntropy.html
Availability,avail,available,". ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TMVA::Envelope;  ~Envelope ();  Default destructor. ;  ; virtual void BookMethod (TString methodname, TString methodtitle, TString options="""");  Method to book the machine learning method to perform the algorithm. ;  ; virtual void BookMethod (Types::EMVA method, TString methodtitle, TString options="""");  Method to book the machine learning method to perform the algorithm. ;  ; DataLoader * GetDataLoader ();  Method to get the pointer to TMVA::DataLoader object. ;  ; TFile * GetFile ();  Method to get the pointer to TFile object. ;  ; std::vector< OptionMap > & GetMethods ();  Method get the Booked methods in a option map object. ;  ; Bool_t HasMethod (TString methodname, TString methodtitle);  function to check methods booked ;  ; Bool_t IsModelPersistence ();  Method to see if the algorithm model is saved in xml or serialized files. ;  ; Bool_t IsSilentFile ();  Method to see if a file is available to save results. ;  ; Bool_t IsVerbose ();  Method to see if the algorithm should print extra information. ;  ; void SetDataLoader (DataLoader *dalaloader);  Method to set the pointer to TMVA::DataLoader object. ;  ; void SetFile (TFile *file);  Method to set the pointer to TFile object, with a writable file. ;  ; void SetModelPersistence (Bool_t status=kTRUE);  Method enable model persistence, then algorithms model is saved in xml or serialized files. ;  ; void SetVerbose (Bool_t status);  Method enable print extra information in the algorithms. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TMVA::Configurable;  Configurable (const TString &theOption="""");  constructor ;  ; virtual ~Configurable ();  default destructor ;  ; void AddOptionsXMLTo (void *parent) const;  write options to XML file ;  ; template<class T > ; void AddPreDefVal (const T &);  ; template<class T > ; void AddPreDefVal (const T",MatchSource.WIKI,doc/master/classTMVA_1_1CrossValidation.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1CrossValidation.html
Integrability,message,message,"ject. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t ",MatchSource.WIKI,doc/master/classTMVA_1_1CrossValidation.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1CrossValidation.html
Modifiability,inherit,inherited,"ee( """", """", ""nTest_cls1=1:nTest_cls2=1"" );. Split Expression; See CVSplit documentation? ; Definition at line 124 of file CrossValidation.h. Public Member Functions;  CrossValidation (TString jobName, TMVA::DataLoader *dataloader, TFile *outputFile, TString options);  ;  CrossValidation (TString jobName, TMVA::DataLoader *dataloader, TString options);  ;  ~CrossValidation ();  ; void Evaluate ();  Does training, test set evaluation and performance evaluation of using cross-evalution. ;  ; Factory & GetFactory ();  ; UInt_t GetNumFolds ();  ; const std::vector< CrossValidationResult > & GetResults () const;  ; TString GetSplitExpr ();  ; void InitOptions ();  ; virtual TClass * IsA () const;  ; void ParseOptions ();  Method to parse the internal option string. ;  ; void SetNumFolds (UInt_t i);  ; void SetSplitExpr (TString splitExpr);  ; virtual void Streamer (TBuffer &);  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TMVA::Envelope;  ~Envelope ();  Default destructor. ;  ; virtual void BookMethod (TString methodname, TString methodtitle, TString options="""");  Method to book the machine learning method to perform the algorithm. ;  ; virtual void BookMethod (Types::EMVA method, TString methodtitle, TString options="""");  Method to book the machine learning method to perform the algorithm. ;  ; DataLoader * GetDataLoader ();  Method to get the pointer to TMVA::DataLoader object. ;  ; TFile * GetFile ();  Method to get the pointer to TFile object. ;  ; std::vector< OptionMap > & GetMethods ();  Method get the Booked methods in a option map object. ;  ; Bool_t HasMethod (TString methodname, TString methodtitle);  function to check methods booked ;  ; Bool_t IsModelPersistence ();  Method to see if the algorithm model is saved in xml or serialized files. ;  ; Bool_t IsSilentFile ();  Method to see if a file is available to save results. ;  ; Bool_t IsVerbose ();  Method to se",MatchSource.WIKI,doc/master/classTMVA_1_1CrossValidation.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1CrossValidation.html
Performance,perform,perform,". ROOT: TMVA::CrossValidation Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Private Member Functions |; Private Attributes |; List of all members ; TMVA::CrossValidation Class ReferenceTMVA. ; Class to perform cross validation, splitting the dataloader into folds. ; Use html for explicit line breaking; Markdown links? class reference?; ce->BookMethod(dataloader, options);; ce->Evaluate();; Cross-evaluation will generate a new training and a test set dynamically from from K folds. These K folds are generated by splitting the input training set. The input test set is currently ignored.; This means that when you specify your DataSet you should include all events in your training set. One way of doing this would be the following:; dataloader->AddTree( signalTree, ""cls1"" );; dataloader->AddTree( background, ""cls2"" );; dataloader->PrepareTrainingAndTestTree( """", """", ""nTest_cls1=1:nTest_cls2=1"" );. Split Expression; See CVSplit documentation? ; Definition at line 124 of file CrossValidation.h. Public Member Functions;  CrossValidation (TString jobName, TMVA::DataLoader *dataloader, TFile *outputFile, TString options);  ;  CrossValidation (TString jobName, TMVA::DataLoader *dataloader, TString options);  ;  ~CrossValidation ();  ; void Evaluate ();  Does training, test set evaluation and performance evaluation of using cross-evalution. ;  ; Factory & GetFactory ();  ; UInt_t GetNumFolds ();  ; const std::vector< CrossValidationResult > & GetResults () const;  ; TString GetSplitExpr ();  ; void InitOptions ();  ; virtual TClass * IsA () const;  ; void ParseOptions ();  Method to parse the internal option string. ;  ; void SetNumFolds (UInt_t i);  ; void SetSplitExpr (TString splitExpr);  ; virtual void Streamer (TBuffer &);  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member",MatchSource.WIKI,doc/master/classTMVA_1_1CrossValidation.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1CrossValidation.html
Security,validat,validation,". ROOT: TMVA::CrossValidation Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Private Member Functions |; Private Attributes |; List of all members ; TMVA::CrossValidation Class ReferenceTMVA. ; Class to perform cross validation, splitting the dataloader into folds. ; Use html for explicit line breaking; Markdown links? class reference?; ce->BookMethod(dataloader, options);; ce->Evaluate();; Cross-evaluation will generate a new training and a test set dynamically from from K folds. These K folds are generated by splitting the input training set. The input test set is currently ignored.; This means that when you specify your DataSet you should include all events in your training set. One way of doing this would be the following:; dataloader->AddTree( signalTree, ""cls1"" );; dataloader->AddTree( background, ""cls2"" );; dataloader->PrepareTrainingAndTestTree( """", """", ""nTest_cls1=1:nTest_cls2=1"" );. Split Expression; See CVSplit documentation? ; Definition at line 124 of file CrossValidation.h. Public Member Functions;  CrossValidation (TString jobName, TMVA::DataLoader *dataloader, TFile *outputFile, TString options);  ;  CrossValidation (TString jobName, TMVA::DataLoader *dataloader, TString options);  ;  ~CrossValidation ();  ; void Evaluate ();  Does training, test set evaluation and performance evaluation of using cross-evalution. ;  ; Factory & GetFactory ();  ; UInt_t GetNumFolds ();  ; const std::vector< CrossValidationResult > & GetResults () const;  ; TString GetSplitExpr ();  ; void InitOptions ();  ; virtual TClass * IsA () const;  ; void ParseOptions ();  Method to parse the internal option string. ;  ; void SetNumFolds (UInt_t i);  ; void SetSplitExpr (TString splitExpr);  ; virtual void Streamer (TBuffer &);  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member",MatchSource.WIKI,doc/master/classTMVA_1_1CrossValidation.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1CrossValidation.html
Testability,test,test,". ROOT: TMVA::CrossValidation Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Private Member Functions |; Private Attributes |; List of all members ; TMVA::CrossValidation Class ReferenceTMVA. ; Class to perform cross validation, splitting the dataloader into folds. ; Use html for explicit line breaking; Markdown links? class reference?; ce->BookMethod(dataloader, options);; ce->Evaluate();; Cross-evaluation will generate a new training and a test set dynamically from from K folds. These K folds are generated by splitting the input training set. The input test set is currently ignored.; This means that when you specify your DataSet you should include all events in your training set. One way of doing this would be the following:; dataloader->AddTree( signalTree, ""cls1"" );; dataloader->AddTree( background, ""cls2"" );; dataloader->PrepareTrainingAndTestTree( """", """", ""nTest_cls1=1:nTest_cls2=1"" );. Split Expression; See CVSplit documentation? ; Definition at line 124 of file CrossValidation.h. Public Member Functions;  CrossValidation (TString jobName, TMVA::DataLoader *dataloader, TFile *outputFile, TString options);  ;  CrossValidation (TString jobName, TMVA::DataLoader *dataloader, TString options);  ;  ~CrossValidation ();  ; void Evaluate ();  Does training, test set evaluation and performance evaluation of using cross-evalution. ;  ; Factory & GetFactory ();  ; UInt_t GetNumFolds ();  ; const std::vector< CrossValidationResult > & GetResults () const;  ; TString GetSplitExpr ();  ; void InitOptions ();  ; virtual TClass * IsA () const;  ; void ParseOptions ();  Method to parse the internal option string. ;  ; void SetNumFolds (UInt_t i);  ; void SetSplitExpr (TString splitExpr);  ; virtual void Streamer (TBuffer &);  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member",MatchSource.WIKI,doc/master/classTMVA_1_1CrossValidation.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1CrossValidation.html
Usability,learn,learning,"ns;  CrossValidation (TString jobName, TMVA::DataLoader *dataloader, TFile *outputFile, TString options);  ;  CrossValidation (TString jobName, TMVA::DataLoader *dataloader, TString options);  ;  ~CrossValidation ();  ; void Evaluate ();  Does training, test set evaluation and performance evaluation of using cross-evalution. ;  ; Factory & GetFactory ();  ; UInt_t GetNumFolds ();  ; const std::vector< CrossValidationResult > & GetResults () const;  ; TString GetSplitExpr ();  ; void InitOptions ();  ; virtual TClass * IsA () const;  ; void ParseOptions ();  Method to parse the internal option string. ;  ; void SetNumFolds (UInt_t i);  ; void SetSplitExpr (TString splitExpr);  ; virtual void Streamer (TBuffer &);  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TMVA::Envelope;  ~Envelope ();  Default destructor. ;  ; virtual void BookMethod (TString methodname, TString methodtitle, TString options="""");  Method to book the machine learning method to perform the algorithm. ;  ; virtual void BookMethod (Types::EMVA method, TString methodtitle, TString options="""");  Method to book the machine learning method to perform the algorithm. ;  ; DataLoader * GetDataLoader ();  Method to get the pointer to TMVA::DataLoader object. ;  ; TFile * GetFile ();  Method to get the pointer to TFile object. ;  ; std::vector< OptionMap > & GetMethods ();  Method get the Booked methods in a option map object. ;  ; Bool_t HasMethod (TString methodname, TString methodtitle);  function to check methods booked ;  ; Bool_t IsModelPersistence ();  Method to see if the algorithm model is saved in xml or serialized files. ;  ; Bool_t IsSilentFile ();  Method to see if a file is available to save results. ;  ; Bool_t IsVerbose ();  Method to see if the algorithm should print extra information. ;  ; void SetDataLoader (DataLoader *dalaloader);  Method to set the pointer to TMVA::DataLoader object. ;  ; v",MatchSource.WIKI,doc/master/classTMVA_1_1CrossValidation.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1CrossValidation.html
Security,validat,validation,". ROOT: TMVA::CrossValidationResult Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Private Member Functions |; Private Attributes |; Friends |; List of all members ; TMVA::CrossValidationResult Class ReferenceTMVA. ; Class to save the results of cross validation, the metric for the classification ins ROC and you can ROC curves ROC integrals, ROC average and ROC standard deviation. ; Definition at line 78 of file CrossValidation.h. Public Member Functions;  CrossValidationResult (const CrossValidationResult &);  ;  CrossValidationResult (UInt_t numFolds);  ;  ~CrossValidationResult ();  ; TCanvas * Draw (const TString name=""CrossValidation"") const;  ; TCanvas * DrawAvgROCCurve (Bool_t drawFolds=kFALSE, TString title="""") const;  ; TGraph * GetAvgROCCurve (UInt_t numSamples=100) const;  Generates a multigraph that contains an average ROC Curve. ;  ; std::vector< Double_t > GetEff01Values () const;  ; std::vector< Double_t > GetEff10Values () const;  ; std::vector< Double_t > GetEff30Values () const;  ; std::vector< Double_t > GetEffAreaValues () const;  ; Float_t GetROCAverage () const;  ; TMultiGraph * GetROCCurves (Bool_t fLegend=kTRUE);  ; Float_t GetROCStandardDeviation () const;  ; std::map< UInt_t, Float_t > GetROCValues () const;  ; std::vector< Double_t > GetSepValues () const;  ; std::vector< Double_t > GetSigValues () const;  ; std::vector< Double_t > GetTrainEff01Values () const;  ; std::vector< Double_t > GetTrainEff10Values () const;  ; std::vector< Double_t > GetTrainEff30Values () const;  ; void Print () const;  . Private Member Functions; void Fill (CrossValidationFoldResult const &fr);  . Private Attributes; std::vector< Double_t > fEff01s;  ; std::vector< Double_t > fEff10s;  ; std::vector< Double_t > fEff30s;  ; std::vector< Double_t > fEffAreas;  ; std::shared_ptr< TMultiGraph > fROCCurves;  ; std::map< UInt_t, Float_t > fROCs;  ; std::vector< Double_",MatchSource.WIKI,doc/master/classTMVA_1_1CrossValidationResult.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1CrossValidationResult.html
Availability,error,error,"ject. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t ",MatchSource.WIKI,doc/master/classTMVA_1_1CvSplit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1CvSplit.html
Integrability,message,message,"ject. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t ",MatchSource.WIKI,doc/master/classTMVA_1_1CvSplit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1CvSplit.html
Modifiability,inherit,inherited,"pes::ETreeType tt=Types::kTraining);  ; virtual void Streamer (TBuffer &);  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TMVA::Configurable;  Configurable (const TString &theOption="""");  constructor ;  ; virtual ~Configurable ();  default destructor ;  ; void AddOptionsXMLTo (void *parent) const;  write options to XML file ;  ; template<class T > ; void AddPreDefVal (const T &);  ; template<class T > ; void AddPreDefVal (const TString &optname, const T &);  ; void CheckForUnusedOptions () const;  checks for unused options in option string ;  ; template<class T > ; TMVA::OptionBase * DeclareOptionRef (T &ref, const TString &name, const TString &desc);  ; template<class T > ; OptionBase * DeclareOptionRef (T &ref, const TString &name, const TString &desc="""");  ; template<class T > ; TMVA::OptionBase * DeclareOptionRef (T *&ref, Int_t size, const TString &name, const TString &desc);  ; template<class T > ; OptionBase * DeclareOptionRef (T *&ref, Int_t size, const TString &name, const TString &desc="""");  ; const char * GetConfigDescription () const;  ; const char * GetConfigName () const;  ; const TString & GetOptions () const;  ; MsgLogger & Log () const;  ; virtual void ParseOptions ();  options parser ;  ; void PrintOptions () const;  prints out the options set in the options string and the defaults ;  ; void ReadOptionsFromStream (std::istream &istr);  read option back from the weight file ;  ; void ReadOptionsFromXML (void *node);  ; void SetConfigDescription (const char *d);  ; void SetConfigName (const char *n);  ; void SetMsgType (EMsgType t);  ; void SetOptions (const TString &s);  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; void WriteOptionsToStream (std::ostream &o, const TString &prefix) const;  write options to output stream (e.g. in writing the MVA weight files ;  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed",MatchSource.WIKI,doc/master/classTMVA_1_1CvSplit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1CvSplit.html
Security,hash,hash,"ostream &o, const TString &prefix) const;  write options to output stream (e.g. in writing the MVA weight files ;  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; TClass * IsA () const override;  ; Bool_t IsSortable () const override;  ; void ls (Option_t *option="""") const override;  List TNamed name and title. ;  ; TNamed & operator= (const TNamed &rhs);  TNamed assignment operator. ;  ; void Print (Option_t *option="""") const override;  Print TNamed name and title. ;  ; virtual void SetName (const char *name);  Set the name of the TNamed. ;  ; virtual void SetNameTitle (const char *name, const char *title);  Set all the TNamed parameters (name and title). ;  ; virtual void SetTitle (const char *title="""");  Set the title of the TNamed. ;  ; virtual Int_t Sizeof () const;  Return size of the TNamed part of the TObject. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;",MatchSource.WIKI,doc/master/classTMVA_1_1CvSplit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1CvSplit.html
Testability,test,test,". ROOT: TMVA::CvSplit Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Attributes |; List of all members ; TMVA::CvSplit Class Referenceabstract. . Definition at line 37 of file CvSplit.h. Public Member Functions;  CvSplit (UInt_t numFolds);  ; virtual ~CvSplit ();  ; UInt_t GetNumFolds ();  ; virtual TClass * IsA () const;  ; virtual void MakeKFoldDataSet (DataSetInfo &dsi)=0;  ; Bool_t NeedsRebuild ();  ; virtual void PrepareFoldDataSet (DataSetInfo &dsi, UInt_t foldNumber, Types::ETreeType tt);  Set training and test set vectors of dataset described by dsi. ;  ; virtual void RecombineKFoldDataSet (DataSetInfo &dsi, Types::ETreeType tt=Types::kTraining);  ; virtual void Streamer (TBuffer &);  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TMVA::Configurable;  Configurable (const TString &theOption="""");  constructor ;  ; virtual ~Configurable ();  default destructor ;  ; void AddOptionsXMLTo (void *parent) const;  write options to XML file ;  ; template<class T > ; void AddPreDefVal (const T &);  ; template<class T > ; void AddPreDefVal (const TString &optname, const T &);  ; void CheckForUnusedOptions () const;  checks for unused options in option string ;  ; template<class T > ; TMVA::OptionBase * DeclareOptionRef (T &ref, const TString &name, const TString &desc);  ; template<class T > ; OptionBase * DeclareOptionRef (T &ref, const TString &name, const TString &desc="""");  ; template<class T > ; TMVA::OptionBase * DeclareOptionRef (T *&ref, Int_t size, const TString &name, const TString &desc);  ; template<class T > ; OptionBase * DeclareOptionRef (T *&ref, Int_t size, const TString &name, const TString &desc="""");  ; const char * GetConfigDescription () const;  ; const char * GetConfigName () const;  ; const TString & GetOption",MatchSource.WIKI,doc/master/classTMVA_1_1CvSplit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1CvSplit.html
Availability,error,error,"ject. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t ",MatchSource.WIKI,doc/master/classTMVA_1_1CvSplitKFolds.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1CvSplitKFolds.html
Integrability,message,message,"ject. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t ",MatchSource.WIKI,doc/master/classTMVA_1_1CvSplitKFolds.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1CvSplitKFolds.html
Modifiability,inherit,inherited,". ROOT: TMVA::CvSplitKFolds Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Private Member Functions |; Private Attributes |; List of all members ; TMVA::CvSplitKFolds Class Reference. . Definition at line 92 of file CvSplit.h. Public Member Functions;  CvSplitKFolds (UInt_t numFolds, TString splitExpr="""", Bool_t stratified=kTRUE, UInt_t seed=100);  Splits a dataset into k folds, ready for use in cross validation. ;  ;  ~CvSplitKFolds () override;  ; TClass * IsA () const override;  ; void MakeKFoldDataSet (DataSetInfo &dsi) override;  Prepares a DataSet for cross validation. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TMVA::CvSplit;  CvSplit (UInt_t numFolds);  ; virtual ~CvSplit ();  ; UInt_t GetNumFolds ();  ; Bool_t NeedsRebuild ();  ; virtual void PrepareFoldDataSet (DataSetInfo &dsi, UInt_t foldNumber, Types::ETreeType tt);  Set training and test set vectors of dataset described by dsi. ;  ; virtual void RecombineKFoldDataSet (DataSetInfo &dsi, Types::ETreeType tt=Types::kTraining);  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TMVA::Configurable;  Configurable (const TString &theOption="""");  constructor ;  ; virtual ~Configurable ();  default destructor ;  ; void AddOptionsXMLTo (void *parent) const;  write options to XML file ;  ; template<class T > ; void AddPreDefVal (const T &);  ; template<class T > ; void AddPreDefVal (const TString &optname, const T &);  ; void CheckForUnusedOptions () const;  checks for unused options in option string ;  ; template<class T > ; TMVA::OptionBase * DeclareOptionRef (T &ref, const TString &name, const TString &desc);  ; template<class T > ; OptionBase * DeclareOptionRef (T &ref, const TStri",MatchSource.WIKI,doc/master/classTMVA_1_1CvSplitKFolds.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1CvSplitKFolds.html
Security,validat,validation,". ROOT: TMVA::CvSplitKFolds Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Private Member Functions |; Private Attributes |; List of all members ; TMVA::CvSplitKFolds Class Reference. . Definition at line 92 of file CvSplit.h. Public Member Functions;  CvSplitKFolds (UInt_t numFolds, TString splitExpr="""", Bool_t stratified=kTRUE, UInt_t seed=100);  Splits a dataset into k folds, ready for use in cross validation. ;  ;  ~CvSplitKFolds () override;  ; TClass * IsA () const override;  ; void MakeKFoldDataSet (DataSetInfo &dsi) override;  Prepares a DataSet for cross validation. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TMVA::CvSplit;  CvSplit (UInt_t numFolds);  ; virtual ~CvSplit ();  ; UInt_t GetNumFolds ();  ; Bool_t NeedsRebuild ();  ; virtual void PrepareFoldDataSet (DataSetInfo &dsi, UInt_t foldNumber, Types::ETreeType tt);  Set training and test set vectors of dataset described by dsi. ;  ; virtual void RecombineKFoldDataSet (DataSetInfo &dsi, Types::ETreeType tt=Types::kTraining);  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TMVA::Configurable;  Configurable (const TString &theOption="""");  constructor ;  ; virtual ~Configurable ();  default destructor ;  ; void AddOptionsXMLTo (void *parent) const;  write options to XML file ;  ; template<class T > ; void AddPreDefVal (const T &);  ; template<class T > ; void AddPreDefVal (const TString &optname, const T &);  ; void CheckForUnusedOptions () const;  checks for unused options in option string ;  ; template<class T > ; TMVA::OptionBase * DeclareOptionRef (T &ref, const TString &name, const TString &desc);  ; template<class T > ; OptionBase * DeclareOptionRef (T &ref, const TStri",MatchSource.WIKI,doc/master/classTMVA_1_1CvSplitKFolds.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1CvSplitKFolds.html
Testability,test,test,". ROOT: TMVA::CvSplitKFolds Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Private Member Functions |; Private Attributes |; List of all members ; TMVA::CvSplitKFolds Class Reference. . Definition at line 92 of file CvSplit.h. Public Member Functions;  CvSplitKFolds (UInt_t numFolds, TString splitExpr="""", Bool_t stratified=kTRUE, UInt_t seed=100);  Splits a dataset into k folds, ready for use in cross validation. ;  ;  ~CvSplitKFolds () override;  ; TClass * IsA () const override;  ; void MakeKFoldDataSet (DataSetInfo &dsi) override;  Prepares a DataSet for cross validation. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TMVA::CvSplit;  CvSplit (UInt_t numFolds);  ; virtual ~CvSplit ();  ; UInt_t GetNumFolds ();  ; Bool_t NeedsRebuild ();  ; virtual void PrepareFoldDataSet (DataSetInfo &dsi, UInt_t foldNumber, Types::ETreeType tt);  Set training and test set vectors of dataset described by dsi. ;  ; virtual void RecombineKFoldDataSet (DataSetInfo &dsi, Types::ETreeType tt=Types::kTraining);  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TMVA::Configurable;  Configurable (const TString &theOption="""");  constructor ;  ; virtual ~Configurable ();  default destructor ;  ; void AddOptionsXMLTo (void *parent) const;  write options to XML file ;  ; template<class T > ; void AddPreDefVal (const T &);  ; template<class T > ; void AddPreDefVal (const TString &optname, const T &);  ; void CheckForUnusedOptions () const;  checks for unused options in option string ;  ; template<class T > ; TMVA::OptionBase * DeclareOptionRef (T &ref, const TString &name, const TString &desc);  ; template<class T > ; OptionBase * DeclareOptionRef (T &ref, const TStri",MatchSource.WIKI,doc/master/classTMVA_1_1CvSplitKFolds.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1CvSplitKFolds.html
Availability,error,error,"object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Return",MatchSource.WIKI,doc/master/classTMVA_1_1DataInputHandler.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1DataInputHandler.html
Integrability,message,message,"object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Return",MatchSource.WIKI,doc/master/classTMVA_1_1DataInputHandler.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1DataInputHandler.html
Modifiability,inherit,inherited,"className) const;  ; std::vector< TreeInfo >::const_iterator Bend () const;  ; void ClearBackgroundTreeList ();  ; void ClearSignalTreeList ();  ; void ClearTreeList (const TString &className);  ; std::vector< TreeInfo >::const_iterator end (const TString &className) const;  ; UInt_t GetBackgroundEntries () const;  ; std::vector< TString > * GetClassList () const;  ; UInt_t GetEntries () const;  return number of entries in tree ;  ; UInt_t GetEntries (const TString &name) const;  ; UInt_t GetNBackgroundTrees () const;  ; UInt_t GetNSignalTrees () const;  ; UInt_t GetNTrees (const TString &name) const;  ; UInt_t GetSignalEntries () const;  ; virtual TClass * IsA () const;  ; std::vector< TreeInfo >::const_iterator Sbegin () const;  ; std::vector< TreeInfo >::const_iterator Send () const;  ; const TreeInfo & SignalTreeInfo (Int_t i) const;  ; virtual void Streamer (TBuffer &);  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) c",MatchSource.WIKI,doc/master/classTMVA_1_1DataInputHandler.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1DataInputHandler.html
Security,hash,hash," Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Returns name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual const char * GetTitle () const;  Returns title of object. ;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; virtual ULong_t Hash () const;  Return hash value for this object. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns kTRUE if object inherits from class ""classname"". ;  ; virtual Bool_t InheritsFrom (const TClass *cl) const;  Returns kTRUE if object inherits from TClass cl. ;  ; virtual void Inspect () const;  Dump contents of this object in a graphics canvas. ;  ; void InvertBit (UInt_t f);  ; Bool_t IsDestructed () const;  IsDestructed. ;  ; virtual Bool_t IsEqual (const TObject *obj) const;  Default equal comparison (objects are equal if they have the same address in memory). ;  ; virtual Bool_t IsFolder () const;  Returns kTRUE in case object contains browsable objects (like containers or lists of other objects). ;  ; R__ALWAYS_INLINE Bool_t",MatchSource.WIKI,doc/master/classTMVA_1_1DataInputHandler.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1DataInputHandler.html
Testability,test,testing,"n_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  . Private Member Functions; UInt_t GetEntries (const std::vector< TreeInfo > &tiV) const;  return number of entries in tree ;  ; MsgLogger & Log () const;  ; TTree * ReadInputTree (const TString &dataFile);  create trees from these ascii files ;  . Private Attributes; std::map< std::string, Bool_t > fExplicitTrainTest;  if set to true the user has specified training and testing data explicitly ;  ; std::map< TString, std::vector< TreeInfo > > fInputTrees;  list of input trees per class (classname is given as first parameter in the map) ;  ; MsgLogger * fLogger;  ! message logger ;  . Additional Inherited Members;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Protected Member Functions inherited from TObject; virtual void DoError",MatchSource.WIKI,doc/master/classTMVA_1_1DataInputHandler.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1DataInputHandler.html
Availability,error,error,"tring &desc="""")TMVA::Configurable; DeclareOptionRef(T &ref, const TString &name, const TString &desc)TMVA::Configurable; DeclareOptionRef(T *&ref, Int_t size, const TString &name, const TString &desc)TMVA::Configurable; DeclFileName()TMVA::DataLoaderinlinestatic; DefaultDataSetInfo()TMVA::DataLoaderprivate; Delete(Option_t *option="""")TObjectvirtual; DistancetoPrimitive(Int_t px, Int_t py)TObjectvirtual; DoError(int level, const char *location, const char *fmt, va_list va) constTObjectprotectedvirtual; Draw(Option_t *option="""")TObjectvirtual; DrawClass() constTObjectvirtual; DrawClone(Option_t *option="""") constTObjectvirtual; Dump() constTObjectvirtual; EDeprecatedStatusBits enum nameTObject; EnableLooseOptions(Bool_t b=kTRUE)TMVA::Configurableinlineprotected; Error(const char *method, const char *msgfmt,...) constTObjectvirtual; EStatusBits enum nameTObject; Execute(const char *method, const char *params, Int_t *error=nullptr)TObjectvirtual; Execute(TMethod *method, TObjArray *params, Int_t *error=nullptr)TObjectvirtual; ExecuteEvent(Int_t event, Int_t px, Int_t py)TObjectvirtual; fAnalysisTypeTMVA::DataLoaderprivate; Fatal(const char *method, const char *msgfmt,...) constTObjectvirtual; fATreeEventTMVA::DataLoaderprivate; fATreeTypeTMVA::DataLoaderprivate; fATreeWeightTMVA::DataLoaderprivate; fBitsTObjectprivate; fConfigDescriptionTMVA::Configurableprivate; fDataAssignTypeTMVA::DataLoaderprivate; fDataInputHandlerTMVA::DataLoaderprivate; fDataSetManagerTMVA::DataLoaderprivate; fDefaultTrfsTMVA::DataLoaderprivate; fgDtorOnlyTObjectprivatestatic; fgObjectStatTObjectprivatestatic; FillBuffer(char *&buffer)TNamedvirtual; FindObject(const char *name) constTObjectvirtual; FindObject(const TObject *obj) constTObjectvirtual; fLastDeclaredOptionTMVA::Configurableprivate; fListOfOptionsTMVA::Configurableprivate; fLoggerTMVA::Configurablemutableprotected; fLooseOptionCheckingEnabledTMVA::Configurableprivate; fNameTNamedprotected; fOptionsTMVA::DataLoaderprivate; fReferenceFil",MatchSource.WIKI,doc/master/classTMVA_1_1DataLoader-members.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1DataLoader-members.html
Modifiability,inherit,inherited,". ROOT: Member List. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. TMVA::DataLoader Member List. This is the complete list of members for TMVA::DataLoader, including all inherited members. AbstractMethod(const char *method) constTObject; AddBackgroundTestEvent(const std::vector< Double_t > &event, Double_t weight=1.0)TMVA::DataLoader; AddBackgroundTrainingEvent(const std::vector< Double_t > &event, Double_t weight=1.0)TMVA::DataLoader; AddBackgroundTree(TTree *background, Double_t weight=1.0, Types::ETreeType treetype=Types::kMaxTreeType)TMVA::DataLoader; AddBackgroundTree(TString datFileB, Double_t weight=1.0, Types::ETreeType treetype=Types::kMaxTreeType)TMVA::DataLoader; AddBackgroundTree(TTree *background, Double_t weight, const TString &treetype)TMVA::DataLoader; AddCut(const TString &cut, const TString &className="""")TMVA::DataLoader; AddCut(const TCut &cut, const TString &className="""")TMVA::DataLoader; AddDataSet(DataSetInfo &)TMVA::DataLoader; AddDataSet(const TString &)TMVA::DataLoader; AddEvent(const TString &className, Types::ETreeType tt, const std::vector< Double_t > &event, Double_t weight)TMVA::DataLoader; AddOptionsXMLTo(void *parent) constTMVA::Configurable; AddPreDefVal(const T &)TMVA::Configurable; AddPreDefVal(const TString &optname, const T &)TMVA::Configurable; AddRegressionTarget(const TString &expression, const TString &title="""", const TString &unit="""", Double_t min=0, Double_t max=0)TMVA::DataLoaderinline; AddRegressionTree(TTree *tree, Double_t weight=1.0, Types::ETreeType treetype=Types::kMaxTreeType)TMVA::DataLoaderinline; AddSignalTestEvent(const std::vector< Double_t > &event, Double_t weight=1.0)TMVA::DataLoader; AddSignalTrainingEvent(const std::vector< Double_t > &event, Double_t weight=1.0)TMVA::DataLoader; AddSignalTree(TTree *signal, Double_t weight=1.0, Types::ETreeType treetype=Types::kMaxTreeType)TMVA::DataLoader; AddSignalTree(TString datFileS, Double_t weight=1.0, Types::ETreeType treetype=Typ",MatchSource.WIKI,doc/master/classTMVA_1_1DataLoader-members.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1DataLoader-members.html
Availability,error,error,"ject. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t ",MatchSource.WIKI,doc/master/classTMVA_1_1DataLoader.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1DataLoader.html
Integrability,message,message,"ject. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t ",MatchSource.WIKI,doc/master/classTMVA_1_1DataLoader.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1DataLoader.html
Modifiability,variab,variables,"r Functions;  DataLoader (TString thedlName=""default"");  ; virtual ~DataLoader ();  ; void AddBackgroundTestEvent (const std::vector< Double_t > &event, Double_t weight=1.0);  add signal training event ;  ; void AddBackgroundTrainingEvent (const std::vector< Double_t > &event, Double_t weight=1.0);  add signal training event ;  ; void AddBackgroundTree (TString datFileB, Double_t weight=1.0, Types::ETreeType treetype=Types::kMaxTreeType);  add background tree from text file ;  ; void AddBackgroundTree (TTree *background, Double_t weight, const TString &treetype);  ; void AddBackgroundTree (TTree *background, Double_t weight=1.0, Types::ETreeType treetype=Types::kMaxTreeType);  number of signal events (used to compute significance) ;  ; void AddCut (const TCut &cut, const TString &className="""");  ; void AddCut (const TString &cut, const TString &className="""");  ; DataSetInfo & AddDataSet (const TString &);  ; DataSetInfo & AddDataSet (DataSetInfo &);  ; void AddEvent (const TString &className, Types::ETreeType tt, const std::vector< Double_t > &event, Double_t weight);  add event vector event : the order of values is: variables + targets + spectators ;  ; void AddRegressionTarget (const TString &expression, const TString &title="""", const TString &unit="""", Double_t min=0, Double_t max=0);  ; void AddRegressionTree (TTree *tree, Double_t weight=1.0, Types::ETreeType treetype=Types::kMaxTreeType);  ; void AddSignalTestEvent (const std::vector< Double_t > &event, Double_t weight=1.0);  add signal testing event ;  ; void AddSignalTrainingEvent (const std::vector< Double_t > &event, Double_t weight=1.0);  add signal training event ;  ; void AddSignalTree (TString datFileS, Double_t weight=1.0, Types::ETreeType treetype=Types::kMaxTreeType);  add signal tree from text file ;  ; void AddSignalTree (TTree *signal, Double_t weight, const TString &treetype);  ; void AddSignalTree (TTree *signal, Double_t weight=1.0, Types::ETreeType treetype=Types::kMaxTreeType);  number of sig",MatchSource.WIKI,doc/master/classTMVA_1_1DataLoader.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1DataLoader.html
Security,hash,hash,"ostream &o, const TString &prefix) const;  write options to output stream (e.g. in writing the MVA weight files ;  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; TClass * IsA () const override;  ; Bool_t IsSortable () const override;  ; void ls (Option_t *option="""") const override;  List TNamed name and title. ;  ; TNamed & operator= (const TNamed &rhs);  TNamed assignment operator. ;  ; void Print (Option_t *option="""") const override;  Print TNamed name and title. ;  ; virtual void SetName (const char *name);  Set the name of the TNamed. ;  ; virtual void SetNameTitle (const char *name, const char *title);  Set all the TNamed parameters (name and title). ;  ; virtual void SetTitle (const char *title="""");  Set the title of the TNamed. ;  ; virtual Int_t Sizeof () const;  Return size of the TNamed part of the TObject. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;",MatchSource.WIKI,doc/master/classTMVA_1_1DataLoader.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1DataLoader.html
Testability,test,testing,"eetype);  ; void AddBackgroundTree (TTree *background, Double_t weight=1.0, Types::ETreeType treetype=Types::kMaxTreeType);  number of signal events (used to compute significance) ;  ; void AddCut (const TCut &cut, const TString &className="""");  ; void AddCut (const TString &cut, const TString &className="""");  ; DataSetInfo & AddDataSet (const TString &);  ; DataSetInfo & AddDataSet (DataSetInfo &);  ; void AddEvent (const TString &className, Types::ETreeType tt, const std::vector< Double_t > &event, Double_t weight);  add event vector event : the order of values is: variables + targets + spectators ;  ; void AddRegressionTarget (const TString &expression, const TString &title="""", const TString &unit="""", Double_t min=0, Double_t max=0);  ; void AddRegressionTree (TTree *tree, Double_t weight=1.0, Types::ETreeType treetype=Types::kMaxTreeType);  ; void AddSignalTestEvent (const std::vector< Double_t > &event, Double_t weight=1.0);  add signal testing event ;  ; void AddSignalTrainingEvent (const std::vector< Double_t > &event, Double_t weight=1.0);  add signal training event ;  ; void AddSignalTree (TString datFileS, Double_t weight=1.0, Types::ETreeType treetype=Types::kMaxTreeType);  add signal tree from text file ;  ; void AddSignalTree (TTree *signal, Double_t weight, const TString &treetype);  ; void AddSignalTree (TTree *signal, Double_t weight=1.0, Types::ETreeType treetype=Types::kMaxTreeType);  number of signal events (used to compute significance) ;  ; void AddSpectator (const TString &expression, const TString &title="""", const TString &unit="""", Double_t min=0, Double_t max=0);  user inserts target in data set info ;  ; void AddTarget (const TString &expression, const TString &title="""", const TString &unit="""", Double_t min=0, Double_t max=0);  user inserts target in data set info ;  ; void AddTestEvent (const TString &className, const std::vector< Double_t > &event, Double_t weight);  add signal test event ;  ; void AddTrainingEvent (const TString &classNam",MatchSource.WIKI,doc/master/classTMVA_1_1DataLoader.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1DataLoader.html
Availability,error,error,"ject. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t ",MatchSource.WIKI,doc/master/classTMVA_1_1DataSet.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1DataSet.html
Integrability,message,message,"ject. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t ",MatchSource.WIKI,doc/master/classTMVA_1_1DataSet.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1DataSet.html
Modifiability,variab,variables,"Event (Long64_t ievt, Types::ETreeType type) const;  ; const std::vector< Event * > & GetEventCollection (Types::ETreeType type=Types::kMaxTreeType) const;  ; const TTree * GetEventCollectionAsTree ();  ; Long64_t GetNClassEvents (Int_t type, UInt_t classNumber);  ; Long64_t GetNEvents (Types::ETreeType type=Types::kMaxTreeType) const;  ; Long64_t GetNEvtBkgdTest ();  return number of background test events in dataset ;  ; Long64_t GetNEvtBkgdTrain ();  return number of background training events in dataset ;  ; Long64_t GetNEvtSigTest ();  return number of signal test events in dataset ;  ; Long64_t GetNEvtSigTrain ();  return number of signal training events in dataset ;  ; UInt_t GetNSpectators () const;  access the number of targets through the datasetinfo ;  ; UInt_t GetNTargets () const;  access the number of targets through the datasetinfo ;  ; Long64_t GetNTestEvents () const;  ; Long64_t GetNTrainingEvents () const;  ; UInt_t GetNVariables () const;  access the number of variables through the datasetinfo ;  ; Results * GetResults (const TString &, Types::ETreeType type, Types::EAnalysisType analysistype);  ; const Event * GetTestEvent (Long64_t ievt) const;  ; const Event * GetTrainingEvent (Long64_t ievt) const;  ; TTree * GetTree (Types::ETreeType type);  create the test/trainings tree with all the variables, the weights, the classes, the targets, the spectators, the MVA outputs ;  ; Bool_t HasNegativeEventWeights () const;  ; void IncrementNClassEvents (Int_t type, UInt_t classNumber);  ; void InitSampling (Float_t fraction, Float_t weight, UInt_t seed=0);  initialize random or importance sampling ;  ; virtual TClass * IsA () const;  ; void MoveTrainingBlock (Int_t blockInd, Types::ETreeType dest, Bool_t applyChanges=kTRUE);  move training block ;  ; void SetCurrentEvent (Long64_t ievt) const;  ; void SetCurrentType (Types::ETreeType type) const;  ; void SetEventCollection (std::vector< Event * > *, Types::ETreeType, Bool_t deleteEvents=true);  Sets the ",MatchSource.WIKI,doc/master/classTMVA_1_1DataSet.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1DataSet.html
Performance,perform,performance,"();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  . Private Member Functions; void ApplyTrainingBlockDivision ();  ; void ApplyTrainingSetDivision ();  apply division of data set ;  ; void DestroyCollection (Types::ETreeType type, Bool_t deleteEvents);  destroys the event collection (events + vector) ;  ; MsgLogger & Log () const;  . Private Attributes; std::vector< Char_t > fBlockBelongToTraining;  when dividing the dataset to blocks, sets whether the certain block is in the Training set or else in the validation set boolean are stored, taken std::vector<Char_t> for performance reasons (instead of std::vector<Bool_t>) ;  ; std::vector< std::vector< Long64_t > > fClassEvents;  number of events of class 0,1,2,... in training[0] and testing[1] (+validation, trainingoriginal) ;  ; Long64_t fCurrentEventIdx;  ; UInt_t fCurrentTreeIdx;  ; const DataSetInfo * fdsi;  -> datasetinfo that created this dataset ;  ; std::vector< std::vector< Event * > > fEventCollection;  list of events for training/testing/... ;  ; Bool_t fHasNegativeEventWeights;  true if at least one signal or bkg event has negative weight ;  ; MsgLogger * fLogger;  ! message logger ;  ; std::vector< std::map< TString, Results * > > fResults;  ! [train/test/...][method-identifier] ;  ; std::vector< Char_t > fSampling;  random or importance sampling (not all events are taken) !! Bool_t are stored ( no std::vector<bool> taken for speed (performance) issues ) ;  ; std::vector< std::vector< std::pair< Float_t, Long64_t > > > fSamplingEventList;  w",MatchSource.WIKI,doc/master/classTMVA_1_1DataSet.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1DataSet.html
Security,access,access,"ance sampling weight of the event when not successful and decrease it when successful ;  ; Types::ETreeType GetCurrentType () const;  ; const Event * GetEvent () const;  returns event without transformations ;  ; const Event * GetEvent (Long64_t ievt) const;  ; const Event * GetEvent (Long64_t ievt, Types::ETreeType type) const;  ; const std::vector< Event * > & GetEventCollection (Types::ETreeType type=Types::kMaxTreeType) const;  ; const TTree * GetEventCollectionAsTree ();  ; Long64_t GetNClassEvents (Int_t type, UInt_t classNumber);  ; Long64_t GetNEvents (Types::ETreeType type=Types::kMaxTreeType) const;  ; Long64_t GetNEvtBkgdTest ();  return number of background test events in dataset ;  ; Long64_t GetNEvtBkgdTrain ();  return number of background training events in dataset ;  ; Long64_t GetNEvtSigTest ();  return number of signal test events in dataset ;  ; Long64_t GetNEvtSigTrain ();  return number of signal training events in dataset ;  ; UInt_t GetNSpectators () const;  access the number of targets through the datasetinfo ;  ; UInt_t GetNTargets () const;  access the number of targets through the datasetinfo ;  ; Long64_t GetNTestEvents () const;  ; Long64_t GetNTrainingEvents () const;  ; UInt_t GetNVariables () const;  access the number of variables through the datasetinfo ;  ; Results * GetResults (const TString &, Types::ETreeType type, Types::EAnalysisType analysistype);  ; const Event * GetTestEvent (Long64_t ievt) const;  ; const Event * GetTrainingEvent (Long64_t ievt) const;  ; TTree * GetTree (Types::ETreeType type);  create the test/trainings tree with all the variables, the weights, the classes, the targets, the spectators, the MVA outputs ;  ; Bool_t HasNegativeEventWeights () const;  ; void IncrementNClassEvents (Int_t type, UInt_t classNumber);  ; void InitSampling (Float_t fraction, Float_t weight, UInt_t seed=0);  initialize random or importance sampling ;  ; virtual TClass * IsA () const;  ; void MoveTrainingBlock (Int_t blockInd, Types:",MatchSource.WIKI,doc/master/classTMVA_1_1DataSet.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1DataSet.html
Testability,test,test," ;  ; void DivideTrainingSet (UInt_t blockNum);  divide training set ;  ; void EventResult (Bool_t successful, Long64_t evtNumber=-1);  increase the importance sampling weight of the event when not successful and decrease it when successful ;  ; Types::ETreeType GetCurrentType () const;  ; const Event * GetEvent () const;  returns event without transformations ;  ; const Event * GetEvent (Long64_t ievt) const;  ; const Event * GetEvent (Long64_t ievt, Types::ETreeType type) const;  ; const std::vector< Event * > & GetEventCollection (Types::ETreeType type=Types::kMaxTreeType) const;  ; const TTree * GetEventCollectionAsTree ();  ; Long64_t GetNClassEvents (Int_t type, UInt_t classNumber);  ; Long64_t GetNEvents (Types::ETreeType type=Types::kMaxTreeType) const;  ; Long64_t GetNEvtBkgdTest ();  return number of background test events in dataset ;  ; Long64_t GetNEvtBkgdTrain ();  return number of b",MatchSource.WIKI,doc/master/classTMVA_1_1DataSet.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1DataSet.html
Availability,error,error,"object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Return",MatchSource.WIKI,doc/master/classTMVA_1_1DataSetFactory.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1DataSetFactory.html
Integrability,message,message,"object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Return",MatchSource.WIKI,doc/master/classTMVA_1_1DataSetFactory.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1DataSetFactory.html
Modifiability,inherit,inherited,". ROOT: TMVA::DataSetFactory Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Classes |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; Private Types |; List of all members ; TMVA::DataSetFactory Class ReferenceTMVA. ; Class that contains all the data information. ; Definition at line 116 of file DataSetFactory.h. Classes; class  EventStats;  . Public Member Functions;  DataSetFactory ();  constructor ;  ;  ~DataSetFactory ();  destructor ;  ; DataSet * CreateDataSet (DataSetInfo &, DataInputHandler &);  steering the creation of a new dataset ;  ; virtual TClass * IsA () const;  ; virtual void Streamer (TBuffer &);  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (O",MatchSource.WIKI,doc/master/classTMVA_1_1DataSetFactory.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1DataSetFactory.html
Safety,avoid,avoid,"torOfClassesOfTreeType &eventsmap, const EvtStatsPerClass &eventCounts, const TString &normMode);  renormalisation of the TRAINING event weights ;  ; void ResetBranchAndEventAddresses (TTree *);  ; void ResetCurrentTree ();  ; Bool_t Verbose ();  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  . Protected Attributes; Bool_t fComputeCorrelations = kFALSE;  Whether to force computation of correlations or not. ;  ; Bool_t fCorrelations = kFALSE;  Whether to print correlations or not. ;  ; UInt_t fCurrentEvtIdx;  the current event (to avoid reading of the same event) ;  ; TTree * fCurrentTree;  the tree, events are currently read from ;  ; std::vector< TTreeFormula * > fCutFormulas;  cuts ;  ; std::vector< TTreeFormula * > fInputFormulas;  input variables ;  ; std::vector< std::pair< TTreeFormula *, Int_t > > fInputTableFormulas;  ! input variables expression for arrays ;  ; MsgLogger * fLogger;  ! message logger ;  ; Bool_t fScaleWithPreselEff;  how to deal with requested #events in connection with preselection cuts ;  ; std::vector< TTreeFormula * > fSpectatorFormulas;  spectators ;  ; std::vector< TTreeFormula * > fTargetFormulas;  targets ;  ; Bool_t fVerbose;  Verbosity. ;  ; TString fVerboseLevel;  VerboseLevel. ;  ; std::vector< TTreeFormula * > fWeightFormula;  weights ;  . Private Types; typedef std::vector< Event * > EventVector;  ; typedef std::vector< EventVector > EventVectorOfClasses;  ; typedef std::map< Types::ETreeType, EventVectorOfClasses > EventVectorOfClassesOfTreeType;  ; typedef std::map< Types::ETreeType, EventVector > EventVectorOfTreeType;  ; typedef std::vector< EventStats > EvtStatsPerClass;  ; typedef std::vector< int > NumberPerClass;  ; typedef std::vector< Double_t > ValuePerClass;  ; typedef std::map< Types::ETreeType, ValuePerClass > ValuePerClassOfTreeType;  . Additional Inher",MatchSource.WIKI,doc/master/classTMVA_1_1DataSetFactory.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1DataSetFactory.html
Security,hash,hash," Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Returns name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual const char * GetTitle () const;  Returns title of object. ;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; virtual ULong_t Hash () const;  Return hash value for this object. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns kTRUE if object inherits from class ""classname"". ;  ; virtual Bool_t InheritsFrom (const TClass *cl) const;  Returns kTRUE if object inherits from TClass cl. ;  ; virtual void Inspect () const;  Dump contents of this object in a graphics canvas. ;  ; void InvertBit (UInt_t f);  ; Bool_t IsDestructed () const;  IsDestructed. ;  ; virtual Bool_t IsEqual (const TObject *obj) const;  Default equal comparison (objects are equal if they have the same address in memory). ;  ; virtual Bool_t IsFolder () const;  Returns kTRUE in case object contains browsable objects (like containers or lists of other objects). ;  ; R__ALWAYS_INLINE Bool_t",MatchSource.WIKI,doc/master/classTMVA_1_1DataSetFactory.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1DataSetFactory.html
Testability,test,testing,"_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  . Protected Member Functions; DataSet * BuildDynamicDataSet (DataSetInfo &);  ; void BuildEventVector (DataSetInfo &dsi, DataInputHandler &dataInput, EventVectorOfClassesOfTreeType &eventsmap, EvtStatsPerClass &eventCounts);  build empty event vectors distributes events between kTraining/kTesting/kMaxTreeType ;  ; DataSet * BuildInitialDataSet (DataSetInfo &, TMVA::DataInputHandler &);  if no entries, than create a DataSet with one Event which uses dynamic variables (pointers to variables) ;  ; TMatrixD * CalcCorrelationMatrix (DataSet *, const UInt_t classNumber);  computes correlation matrix for variables ""theVars"" in tree; ""theType"" defines the required event ""type"" (""type"" variable must be present in tree) ;  ; TMatrixD * CalcCovarianceMatrix (DataSet *, const UInt_t classNumber);  compute covariance matrix ;  ; void CalcMinMax (DataSet *, DataSetInfo &dsi);  compute covariance matrix ;  ; void ChangeToNewTree (TreeInfo &, const DataSetInfo &);  While the data gets copied into the local training and testing trees, the input tree can change (for instance when changing from signal to background tree, or using TChains as input) The TTreeFormulas, that hold the input expressions need to be re-associated with the new tree, which is done here. ;  ; Bool_t CheckTTreeFormula (TTreeFormula *ttf, const TString &expression, Bool_t &hasDollar);  checks a TTreeFormula for problems ;  ; void InitOptions (DataSetInfo &dsi, EvtStatsPerClass &eventsmap, TString &normMode, UInt_t &splitSeed, TString &splitMode, TString &mixMode);  the dataset splitting ;  ; MsgLogger & Log () const;  ; DataSet * MixEvents (DataSetInfo",MatchSource.WIKI,doc/master/classTMVA_1_1DataSetFactory.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1DataSetFactory.html
Availability,error,error,"object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t ",MatchSource.WIKI,doc/master/classTMVA_1_1DataSetInfo.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1DataSetInfo.html
Integrability,message,message,"object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t ",MatchSource.WIKI,doc/master/classTMVA_1_1DataSetInfo.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1DataSetInfo.html
Modifiability,inherit,inherited,". ROOT: TMVA::DataSetInfo Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Static Public Member Functions |; Private Member Functions |; Private Attributes |; Friends |; List of all members ; TMVA::DataSetInfo Class ReferenceTMVA. ; Class that contains all the data information. ; Definition at line 62 of file DataSetInfo.h. Public Types; enum  { kIsArrayVariable = (1ULL << ( 15 )); };  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  . Public Member Functions;  DataSetInfo (const TString &name=""Default"");  constructor ;  ; virtual ~DataSetInfo ();  destructor ;  ; ClassInfo * AddClass (const TString &className);  ; void AddCut (const TCut &cut, const TString &className);  set the cut for the classes ;  ; VariableInfo & AddSpectator (const TString &expression, const TString &title, const TString &unit, Double_t min, Double_t max, char type='F', Bool_t normalized=kTRUE, void *external=nullptr);  add a spectator (can be a complex expression) to the set of spectator variables used in the MV analysis ;  ; VariableInfo & AddSpectator (const VariableInfo &varInfo);  add spectator with given VariableInfo ;  ; VariableInfo & AddTarget (const TString &expression, const TString &title, const TString &unit, Double_t min, Double_t max, Bool_t normalized=kTRUE, void *external=nullptr);  add",MatchSource.WIKI,doc/master/classTMVA_1_1DataSetInfo.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1DataSetInfo.html
Security,hash,hash,"xecute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual const char * GetTitle () const;  Returns title of object. ;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; virtual ULong_t Hash () const;  Return hash value for this object. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns kTRUE if object inherits from class ""classname"". ;  ; virtual Bool_t InheritsFrom (const TClass *cl) const;  Returns kTRUE if object inherits from TClass cl. ;  ; virtual void Inspect () const;  Dump contents of this object in a graphics canvas. ;  ; void InvertBit (UInt_t f);  ; Bool_t IsDestructed () const;  IsDestructed. ;  ; virtual Bool_t IsEqual (const TObject *obj) const;  Default equal comparison (objects are equal if they have the same address in memory). ;  ; virtual Bool_t IsFolder () const;  Returns kTRUE in case object contains browsable objects (like containers or lists of other objects). ;  ; R__ALWAYS_INLINE Bool_t",MatchSource.WIKI,doc/master/classTMVA_1_1DataSetInfo.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1DataSetInfo.html
Testability,test,testingSumBackgrWeights,"bleInfo > & GetTargetInfos () const;  ; Int_t GetTargetNameMaxLength () const;  ; std::vector< Float_t > * GetTargetsForMulticlass (const Event *ev);  ; Double_t GetTestingSumBackgrWeights ();  ; Double_t GetTestingSumSignalWeights ();  ; Double_t GetTrainingSumBackgrWeights ();  ; Double_t GetTrainingSumSignalWeights ();  ; Int_t GetVarArraySize (const TString &expression) const;  ; VariableInfo & GetVariableInfo (Int_t i);  ; const VariableInfo & GetVariableInfo (Int_t i) const;  ; std::vector< VariableInfo > & GetVariableInfos ();  ; const std::vector< VariableInfo > & GetVariableInfos () const;  ; Int_t GetVariableNameMaxLength () const;  ; const TString GetWeightExpression (Int_t i) const;  ; Bool_t HasCuts () const;  ; virtual TClass * IsA () const;  ; Bool_t IsSignal (const Event *ev) const;  ; Bool_t IsVariableFromArray (Int_t i) const;  ; void PrintClasses () const;  ; void PrintCorrelationMatrix (const TString &className);  calculates the correlation matrices for signal and background, prints them to standard output, and fills 2D histograms ;  ; void SetCorrelationMatrix (const TString &className, TMatrixD *matrix);  ; void SetCut (const TCut &cut, const TString &className);  set the cut for the classes ;  ; void SetMsgType (EMsgType t) const;  ; void SetNormalization (const TString &norm);  ; void SetRootDir (TDirectory *d);  ; void SetSplitOptions (const TString &so);  ; void SetTestingSumBackgrWeights (Double_t testingSumBackgrWeights);  ; void SetTestingSumSignalWeights (Double_t testingSumSignalWeights);  ; void SetTrainingSumBackgrWeights (Double_t trainingSumBackgrWeights);  ; void SetTrainingSumSignalWeights (Double_t trainingSumSignalWeights);  ; void SetWeightExpression (const TString &exp, const TString &className="""");  set the weight expressions for the classes if class name is specified, set only for this class if class name is unknown, register new class with this name ;  ; virtual void Streamer (TBuffer &);  Stream an object of class TObject.",MatchSource.WIKI,doc/master/classTMVA_1_1DataSetInfo.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1DataSetInfo.html
Availability,error,error,"object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Return",MatchSource.WIKI,doc/master/classTMVA_1_1DataSetManager.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1DataSetManager.html
Integrability,message,message,"object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Return",MatchSource.WIKI,doc/master/classTMVA_1_1DataSetManager.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1DataSetManager.html
Modifiability,inherit,inherited,"blic Member Functions |; Private Member Functions |; Private Attributes |; Friends |; List of all members ; TMVA::DataSetManager Class ReferenceTMVA. ; Class that contains all the data information. ; Definition at line 51 of file DataSetManager.h. Public Member Functions;  DataSetManager ();  constructor ;  ;  DataSetManager (DataInputHandler &dataInput);  constructor ;  ;  ~DataSetManager ();  destructor fDataSetInfoCollection.SetOwner(); // DSMTEST --> created a segfault because the DataSetInfo-objects got deleted twice ;  ; DataSetInfo & AddDataSetInfo (DataSetInfo &dsi);  stores a copy of the dataset info object ;  ; DataSet * CreateDataSet (const TString &dsiName);  Creates the singleton dataset. ;  ; DataSetInfo * GetDataSetInfo (const TString &dsiName);  returns datasetinfo object for given name ;  ; virtual TClass * IsA () const;  ; virtual void Streamer (TBuffer &);  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) c",MatchSource.WIKI,doc/master/classTMVA_1_1DataSetManager.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1DataSetManager.html
Security,hash,hash," Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Returns name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual const char * GetTitle () const;  Returns title of object. ;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; virtual ULong_t Hash () const;  Return hash value for this object. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns kTRUE if object inherits from class ""classname"". ;  ; virtual Bool_t InheritsFrom (const TClass *cl) const;  Returns kTRUE if object inherits from TClass cl. ;  ; virtual void Inspect () const;  Dump contents of this object in a graphics canvas. ;  ; void InvertBit (UInt_t f);  ; Bool_t IsDestructed () const;  IsDestructed. ;  ; virtual Bool_t IsEqual (const TObject *obj) const;  Default equal comparison (objects are equal if they have the same address in memory). ;  ; virtual Bool_t IsFolder () const;  Returns kTRUE in case object contains browsable objects (like containers or lists of other objects). ;  ; R__ALWAYS_INLINE Bool_t",MatchSource.WIKI,doc/master/classTMVA_1_1DataSetManager.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1DataSetManager.html
Testability,log,logger,"_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  . Private Member Functions; DataInputHandler & DataInput ();  ; MsgLogger & Log () const;  . Private Attributes; DataInputHandler * fDataInput;  source of input data ;  ; TMVA::DataSetFactory * fDatasetFactory;  ; TList fDataSetInfoCollection;  all registered dataset definitions ;  ; MsgLogger * fLogger;  ! message logger ;  . Friends; class Envelop;  ; class Factory;  . Additional Inherited Members;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Protected Member Functions inherited from TObject; virtual void DoError (int le",MatchSource.WIKI,doc/master/classTMVA_1_1DataSetManager.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1DataSetManager.html
Availability,down,down,"x as separation criterion, no restrictions on minium number of events in a leave note or the separation gain in the node splitting ;  ; virtual ~DecisionTree (void);  destructor ;  ; void ApplyValidationSample (const EventConstList *validationSample) const;  run the validation sample through the (pruned) tree and fill in the nodes the variables NSValidation and NBValidadtion (i.e. ;  ; UInt_t BuildTree (const EventConstList &eventSample, DecisionTreeNode *node=nullptr);  building the decision tree by recursively calling the splitting of one (root-) node into two daughter nodes (returns the number of nodes) ;  ; Double_t CheckEvent (const TMVA::Event *, Bool_t UseYesNoLeaf=kFALSE) const;  the event e is put into the decision tree (starting at the root node) and the output is NodeType (signal) or (background) of the final node (basket) in which the given events ends up. ;  ; void CheckEventWithPrunedTree (const TMVA::Event *) const;  pass a single validation event through a pruned decision tree on the way down the tree, fill in all the ""intermediate"" information that would normally be there from training. ;  ; virtual const char * ClassName () const;  ; UInt_t CleanTree (DecisionTreeNode *node=nullptr);  remove those last splits that result in two leaf nodes that are both of the type (i.e. ;  ; void ClearTree ();  clear the tree nodes (their S/N, Nevents etc), just keep the structure of the tree ;  ; UInt_t CountLeafNodes (TMVA::Node *n=nullptr);  return the number of terminal nodes in the sub-tree below Node n ;  ; virtual DecisionTreeNode * CreateNode (UInt_t) const;  ; virtual BinaryTree * CreateTree () const;  ; void DescendTree (Node *n=nullptr);  descend a tree to find all its leaf nodes ;  ; Bool_t DoRegression () const;  ; void FillEvent (const TMVA::Event &event, TMVA::DecisionTreeNode *node);  fill the existing the decision tree structure by filling event in from the top node and see where they happen to end up ;  ; void FillTree (const EventList &eventSampl",MatchSource.WIKI,doc/master/classTMVA_1_1DecisionTree.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1DecisionTree.html
Energy Efficiency,monitor,monitor,"n_Code=262657);  re-create a new tree (decision tree or search tree) from XML ;  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TMVA::BinaryTree; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  . Private Member Functions; Double_t SamplePurity (EventList eventSample);  calculates the purity S/(S+B) of a given event sample ;  . Private Attributes; Types::EAnalysisType fAnalysisType;  kClassification(=0=false) or kRegression(=1=true) ;  ; DataSetInfo * fDataSetInfo;  ; UInt_t fMaxDepth;  max depth ;  ; Double_t fMinLinCorrForFisher;  the minimum linear correlation between two variables demanded for use in fisher criterium in node splitting ;  ; Double_t fMinNodeSize;  min fraction of training events in node ;  ; Double_t fMinSepGain;  min number of separation gain to perform node splitting ;  ; Double_t fMinSize;  min number of events in node ;  ; TRandom3 * fMyTrandom;  random number generator for randomised trees ;  ; Int_t fNCuts;  number of grid point in variable cut scans ;  ; Int_t fNNodesBeforePruning;  remember this one (in case of pruning, it allows to monitor the before/after ;  ; Double_t fNodePurityLimit;  purity limit to decide whether a node is signal ;  ; UInt_t fNvars;  number of variables used to separate S and B ;  ; EPruneMethod fPruneMethod;  method used for pruning ;  ; Double_t fPruneStrength;  a parameter to set the ""amount"" of pruning..needs to be adjusted ;  ; Bool_t fRandomisedTree;  choose at each node splitting a random set of variables ;  ; RegressionVariance * fRegType;  the separation criteria used in Regression ;  ; SeparationBase * fSepType;  the separation criteria ;  ; UInt_t fSigClass;  class which is treated as signal when building the tree ;  ; Int_t fTreeID;  just an ID number given to the tree.. makes debugging easier as tree knows who he is. ;  ; Bool_t fUseExclusiveVars;  individual ",MatchSource.WIKI,doc/master/classTMVA_1_1DecisionTree.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1DecisionTree.html
Modifiability,variab,variable,". ROOT: TMVA::DecisionTree Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Static Public Member Functions |; Private Member Functions |; Private Attributes |; Static Private Attributes |; List of all members ; TMVA::DecisionTree Class ReferenceTMVA. ; Implementation of a Decision Tree. ; In a decision tree successive decision nodes are used to categorize the events out of the sample as either signal or background. Each node uses only a single discriminating variable to decide if the event is signal-like (""goes right"") or background-like (""goes left""). This forms a tree like structure with ""baskets"" at the end (leave nodes), and an event is classified as either signal or background according to whether the basket where it ends up has been classified signal or background during the training. Training of a decision tree is the process to define the ""cut criteria"" for each node. The training starts with the root node. Here one takes the full training event sample and selects the variable and corresponding cut value that gives the best separation between signal and background at this stage. Using this cut criterion, the sample is then divided into two subsamples, a signal-like (right) and a background-like (left) sample. Two new nodes are then created for each of the two sub-samples and they are constructed using the same mechanism as described for the root node. The devision is stopped once a certain node has reached either a minimum number of events, or a minimum or maximum signal purity. These leave nodes are then called ""signal"" or ""background"" if they contain more signal respective background events from the training sample. ; Definition at line 65 of file DecisionTree.h. Public Types; enum  EPruneMethod { kExpectedErrorPruning =0; , kCostComplexityPruning; , kNoPruning; };  ; typedef std::vector< const TMVA::Event * > EventConstList;  ; typedef std::ve",MatchSource.WIKI,doc/master/classTMVA_1_1DecisionTree.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1DecisionTree.html
Performance,perform,perform,"n_Code=262657);  re-create a new tree (decision tree or search tree) from XML ;  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TMVA::BinaryTree; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  . Private Member Functions; Double_t SamplePurity (EventList eventSample);  calculates the purity S/(S+B) of a given event sample ;  . Private Attributes; Types::EAnalysisType fAnalysisType;  kClassification(=0=false) or kRegression(=1=true) ;  ; DataSetInfo * fDataSetInfo;  ; UInt_t fMaxDepth;  max depth ;  ; Double_t fMinLinCorrForFisher;  the minimum linear correlation between two variables demanded for use in fisher criterium in node splitting ;  ; Double_t fMinNodeSize;  min fraction of training events in node ;  ; Double_t fMinSepGain;  min number of separation gain to perform node splitting ;  ; Double_t fMinSize;  min number of events in node ;  ; TRandom3 * fMyTrandom;  random number generator for randomised trees ;  ; Int_t fNCuts;  number of grid point in variable cut scans ;  ; Int_t fNNodesBeforePruning;  remember this one (in case of pruning, it allows to monitor the before/after ;  ; Double_t fNodePurityLimit;  purity limit to decide whether a node is signal ;  ; UInt_t fNvars;  number of variables used to separate S and B ;  ; EPruneMethod fPruneMethod;  method used for pruning ;  ; Double_t fPruneStrength;  a parameter to set the ""amount"" of pruning..needs to be adjusted ;  ; Bool_t fRandomisedTree;  choose at each node splitting a random set of variables ;  ; RegressionVariance * fRegType;  the separation criteria used in Regression ;  ; SeparationBase * fSepType;  the separation criteria ;  ; UInt_t fSigClass;  class which is treated as signal when building the tree ;  ; Int_t fTreeID;  just an ID number given to the tree.. makes debugging easier as tree knows who he is. ;  ; Bool_t fUseExclusiveVars;  individual ",MatchSource.WIKI,doc/master/classTMVA_1_1DecisionTree.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1DecisionTree.html
Safety,avoid,avoid,"ariable, UInt_t *variableMap, UInt_t &nVars);  ; virtual DecisionTreeNode * GetRoot () const;  ; Double_t GetSumWeights (const EventConstList *validationSample) const;  calculate the normalization factor for a pruning validation sample ;  ; Int_t GetTreeID ();  ; std::vector< Double_t > GetVariableImportance ();  Return the relative variable importance, normalized to all variables together having the importance 1. ;  ; Double_t GetVariableImportance (UInt_t ivar);  returns the relative importance of variable ivar ;  ; virtual TClass * IsA () const;  ; void PruneNode (TMVA::DecisionTreeNode *node);  prune away the subtree below the node ;  ; void PruneNodeInPlace (TMVA::DecisionTreeNode *node);  prune a node temporarily (without actually deleting its descendants which allows testing the pruned tree quality for many different pruning stages without ""touching"" the tree. ;  ; Double_t PruneTree (const EventConstList *validationSample=nullptr);  prune (get rid of internal nodes) the Decision tree to avoid overtraining several different pruning methods can be applied as selected by the variable ""fPruneMethod"". ;  ; void SetAnalysisType (Types::EAnalysisType t);  ; void SetMinLinCorrForFisher (Double_t min);  ; void SetNodePurityLimit (Double_t p);  ; void SetNVars (Int_t n);  ; void SetParentTreeInNodes (Node *n=nullptr);  descend a tree to find all its leaf nodes, fill max depth reached in the tree at the same time. ;  ; void SetPruneMethod (EPruneMethod m=kCostComplexityPruning);  ; void SetPruneStrength (Double_t p);  ; void SetTreeID (Int_t treeID);  ; void SetUseExclusiveVars (Bool_t t=kTRUE);  ; void SetUseFisherCuts (Bool_t t=kTRUE);  ; virtual void Streamer (TBuffer &);  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; Double_t TestPrunedTreeQuality (const DecisionTreeNode *dt=nullptr, Int_t mode=0) const;  return the misclassification rate of a pruned tree a ""pruned tree"" may have set the variable ""IsTerminal"" to ""arbitrary"" at any node, hence t",MatchSource.WIKI,doc/master/classTMVA_1_1DecisionTree.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1DecisionTree.html
Security,validat,validationSample,"rrorPruning =0; , kCostComplexityPruning; , kNoPruning; };  ; typedef std::vector< const TMVA::Event * > EventConstList;  ; typedef std::vector< TMVA::Event * > EventList;  . Public Member Functions;  DecisionTree (const DecisionTree &d);  copy constructor that creates a true copy, i.e. ;  ;  DecisionTree (SeparationBase *sepType, Float_t minSize, Int_t nCuts, DataSetInfo *=nullptr, UInt_t cls=0, Bool_t randomisedTree=kFALSE, Int_t useNvars=0, Bool_t usePoissonNvars=kFALSE, UInt_t nMaxDepth=9999999, Int_t iSeed=fgRandomSeed, Float_t purityLimit=0.5, Int_t treeID=0);  constructor specifying the separation type, the min number of events in a no that is still subjected to further splitting, the number of bins in the grid used in applying the cut for the node splitting. ;  ;  DecisionTree (void);  default constructor using the GiniIndex as separation criterion, no restrictions on minium number of events in a leave note or the separation gain in the node splitting ;  ; virtual ~DecisionTree (void);  destructor ;  ; void ApplyValidationSample (const EventConstList *validationSample) const;  run the validation sample through the (pruned) tree and fill in the nodes the variables NSValidation and NBValidadtion (i.e. ;  ; UInt_t BuildTree (const EventConstList &eventSample, DecisionTreeNode *node=nullptr);  building the decision tree by recursively calling the splitting of one (root-) node into two daughter nodes (returns the number of nodes) ;  ; Double_t CheckEvent (const TMVA::Event *, Bool_t UseYesNoLeaf=kFALSE) const;  the event e is put into the decision tree (starting at the root node) and the output is NodeType (signal) or (background) of the final node (basket) in which the given events ends up. ;  ; void CheckEventWithPrunedTree (const TMVA::Event *) const;  pass a single validation event through a pruned decision tree on the way down the tree, fill in all the ""intermediate"" information that would normally be there from training. ;  ; virtual const char * ClassName ",MatchSource.WIKI,doc/master/classTMVA_1_1DecisionTree.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1DecisionTree.html
Testability,test,testing,", UInt_t *mapVarInFisher);  calculate the fisher coefficients for the event sample and the variables used ;  ; Int_t GetNNodesBeforePruning ();  ; Node * GetNode (ULong_t sequence, UInt_t depth);  retrieve node from the tree. ;  ; Double_t GetNodePurityLimit () const;  ; Double_t GetPruneStrength () const;  ; void GetRandomisedVariables (Bool_t *useVariable, UInt_t *variableMap, UInt_t &nVars);  ; virtual DecisionTreeNode * GetRoot () const;  ; Double_t GetSumWeights (const EventConstList *validationSample) const;  calculate the normalization factor for a pruning validation sample ;  ; Int_t GetTreeID ();  ; std::vector< Double_t > GetVariableImportance ();  Return the relative variable importance, normalized to all variables together having the importance 1. ;  ; Double_t GetVariableImportance (UInt_t ivar);  returns the relative importance of variable ivar ;  ; virtual TClass * IsA () const;  ; void PruneNode (TMVA::DecisionTreeNode *node);  prune away the subtree below the node ;  ; void PruneNodeInPlace (TMVA::DecisionTreeNode *node);  prune a node temporarily (without actually deleting its descendants which allows testing the pruned tree quality for many different pruning stages without ""touching"" the tree. ;  ; Double_t PruneTree (const EventConstList *validationSample=nullptr);  prune (get rid of internal nodes) the Decision tree to avoid overtraining several different pruning methods can be applied as selected by the variable ""fPruneMethod"". ;  ; void SetAnalysisType (Types::EAnalysisType t);  ; void SetMinLinCorrForFisher (Double_t min);  ; void SetNodePurityLimit (Double_t p);  ; void SetNVars (Int_t n);  ; void SetParentTreeInNodes (Node *n=nullptr);  descend a tree to find all its leaf nodes, fill max depth reached in the tree at the same time. ;  ; void SetPruneMethod (EPruneMethod m=kCostComplexityPruning);  ; void SetPruneStrength (Double_t p);  ; void SetTreeID (Int_t treeID);  ; void SetUseExclusiveVars (Bool_t t=kTRUE);  ; void SetUseFisherCuts (Bo",MatchSource.WIKI,doc/master/classTMVA_1_1DecisionTree.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1DecisionTree.html
Usability,clear,clear,"round) of the final node (basket) in which the given events ends up. ;  ; void CheckEventWithPrunedTree (const TMVA::Event *) const;  pass a single validation event through a pruned decision tree on the way down the tree, fill in all the ""intermediate"" information that would normally be there from training. ;  ; virtual const char * ClassName () const;  ; UInt_t CleanTree (DecisionTreeNode *node=nullptr);  remove those last splits that result in two leaf nodes that are both of the type (i.e. ;  ; void ClearTree ();  clear the tree nodes (their S/N, Nevents etc), just keep the structure of the tree ;  ; UInt_t CountLeafNodes (TMVA::Node *n=nullptr);  return the number of terminal nodes in the sub-tree below Node n ;  ; virtual DecisionTreeNode * CreateNode (UInt_t) const;  ; virtual BinaryTree * CreateTree () const;  ; void DescendTree (Node *n=nullptr);  descend a tree to find all its leaf nodes ;  ; Bool_t DoRegression () const;  ; void FillEvent (const TMVA::Event &event, TMVA::DecisionTreeNode *node);  fill the existing the decision tree structure by filling event in from the top node and see where they happen to end up ;  ; void FillTree (const EventList &eventSample);  fill the existing the decision tree structure by filling event in from the top node and see where they happen to end up ;  ; Types::EAnalysisType GetAnalysisType (void);  ; TMVA::DecisionTreeNode * GetEventNode (const TMVA::Event &e) const;  get the pointer to the leaf node where a particular event ends up in... (used in gradient boosting) ;  ; std::vector< Double_t > GetFisherCoefficients (const EventConstList &eventSample, UInt_t nFisherVars, UInt_t *mapVarInFisher);  calculate the fisher coefficients for the event sample and the variables used ;  ; Int_t GetNNodesBeforePruning ();  ; Node * GetNode (ULong_t sequence, UInt_t depth);  retrieve node from the tree. ;  ; Double_t GetNodePurityLimit () const;  ; Double_t GetPruneStrength () const;  ; void GetRandomisedVariables (Bool_t *useVariable,",MatchSource.WIKI,doc/master/classTMVA_1_1DecisionTree.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1DecisionTree.html
Modifiability,variab,variable,"SigEvents (void) const;  return the sum of the signal weights in the node, or -1 if traininfo undefined ;  ; Float_t GetNSigEvents_unboosted (void) const;  return the sum of unboosted signal weights in the node, or -1 if traininfo undefined ;  ; Float_t GetNSigEvents_unweighted (void) const;  ; Double_t GetNSValidation () const;  return number of signal events from the pruning validation sample, or -1 if traininfo undefined ;  ; Int_t GetNTerminal () const;  return number of terminal nodes in the subtree rooted here, or -1 if traininfo undefined ;  ; virtual DecisionTreeNode * GetParent () const;  ; Float_t GetPurity (void) const;  return S/(S+B) (purity) at this node (from training) ;  ; Float_t GetResponse (void) const;  return the response of the node (for regression) ;  ; virtual DecisionTreeNode * GetRight () const;  ; Float_t GetRMS (void) const;  return the RMS of the response of the node (for regression) ;  ; Float_t GetSampleMax (UInt_t ivar) const;  return the maximum of variable ivar from the training sample that pass/end up in this node, if traininfo defined, otherwise Log Fatal and return 9999 ;  ; Float_t GetSampleMin (UInt_t ivar) const;  return the minimum of variable ivar from the training sample that pass/end up in this node, if traininfo defined, otherwise Log Fatal and return -9999 ;  ; Short_t GetSelector () const;  return index of variable used for discrimination at this node ;  ; Float_t GetSeparationGain (void) const;  return the gain in separation obtained by this node's selection, or -1 if traininfo undefined ;  ; Float_t GetSeparationIndex (void) const;  return the separation index AT this node, or 0 if traininfo undefined ;  ; Double_t GetSubTreeR () const;  return the resubstitution estimate, R(T_t), of the tree rooted at this node, or -1 if traininfo undefined ;  ; Float_t GetSumTarget () const;  return sum target, or -9999 if traininfo undefined ;  ; Float_t GetSumTarget2 () const;  return sum target 2, or -9999 if traininfo undefined ;",MatchSource.WIKI,doc/master/classTMVA_1_1DecisionTreeNode.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1DecisionTreeNode.html
Security,validat,validation,"ed ;  ; Double_t GetAlphaMinSubtree () const;  return the minimum alpha in the tree rooted at this node, or -1 if traininfo undefined ;  ; Double_t GetCC () const;  return CC, or -1 if traininfo undefined ;  ; Bool_t GetCutType (void) const;  return kTRUE: Cuts select signal, kFALSE: Cuts select bkg ;  ; Float_t GetCutValue (void) const;  return the cut value applied at this node ;  ; Double_t GetFisherCoeff (Int_t ivar) const;  get fisher coefficients ;  ; virtual DecisionTreeNode * GetLeft () const;  ; Float_t GetNBkgEvents (void) const;  return the sum of the backgr weights in the node, or -1 if traininfo undefined ;  ; Float_t GetNBkgEvents_unboosted (void) const;  return the sum of unboosted backgr weights in the node, or -1 if traininfo undefined ;  ; Float_t GetNBkgEvents_unweighted (void) const;  return the sum of unweighted backgr weights in the node, or -1 if traininfo undefined ;  ; Double_t GetNBValidation () const;  return number of background events from the pruning validation sample, or -1 if traininfo undefined ;  ; Float_t GetNEvents (void) const;  return the number of events that entered the node (during training), or -1 if traininfo undefined ;  ; Float_t GetNEvents_unboosted (void) const;  return the number of unboosted events that entered the node (during training), or -1 if traininfo undefined ;  ; Float_t GetNEvents_unweighted (void) const;  return the number of unweighted events that entered the node (during training), or -1 if traininfo undefined ;  ; UInt_t GetNFisherCoeff () const;  ; Double_t GetNodeR () const;  return the node resubstitution estimate, R(t), for Cost Complexity pruning, or -1 if traininfo undefined ;  ; Int_t GetNodeType (void) const;  return node type: 1 signal node, -1 bkg leave, 0 intermediate Node ;  ; Float_t GetNSigEvents (void) const;  return the sum of the signal weights in the node, or -1 if traininfo undefined ;  ; Float_t GetNSigEvents_unboosted (void) const;  return the sum of unboosted signal weights in the no",MatchSource.WIKI,doc/master/classTMVA_1_1DecisionTreeNode.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1DecisionTreeNode.html
Testability,test,test,"this node, if traininfo defined, otherwise Log Fatal and return 9999 ;  ; Float_t GetSampleMin (UInt_t ivar) const;  return the minimum of variable ivar from the training sample that pass/end up in this node, if traininfo defined, otherwise Log Fatal and return -9999 ;  ; Short_t GetSelector () const;  return index of variable used for discrimination at this node ;  ; Float_t GetSeparationGain (void) const;  return the gain in separation obtained by this node's selection, or -1 if traininfo undefined ;  ; Float_t GetSeparationIndex (void) const;  return the separation index AT this node, or 0 if traininfo undefined ;  ; Double_t GetSubTreeR () const;  return the resubstitution estimate, R(T_t), of the tree rooted at this node, or -1 if traininfo undefined ;  ; Float_t GetSumTarget () const;  return sum target, or -9999 if traininfo undefined ;  ; Float_t GetSumTarget2 () const;  return sum target 2, or -9999 if traininfo undefined ;  ; virtual Bool_t GoesLeft (const Event &) const;  test event if it descends the tree at this node to the left ;  ; virtual Bool_t GoesRight (const Event &) const;  test event if it descends the tree at this node to the right ;  ; void IncrementNBkgEvents (Float_t b);  increment the sum of the backgr weights in the node, if traininfo defined ;  ; void IncrementNBkgEvents_unweighted ();  increment the sum of the backgr weights in the node, if traininfo defined ;  ; void IncrementNEvents (Float_t nev);  ; void IncrementNEvents_unweighted ();  increment the number of events that entered the node (during training), if traininfo defined ;  ; void IncrementNSigEvents (Float_t s);  increment the sum of the signal weights in the node, if traininfo defined ;  ; void IncrementNSigEvents_unweighted ();  increment the sum of the signal weights in the node, if traininfo defined ;  ; virtual TClass * IsA () const;  ; Bool_t IsTerminal () const;  flag indicates whether this node is terminal ;  ; virtual void Print (std::ostream &os) const;  print the no",MatchSource.WIKI,doc/master/classTMVA_1_1DecisionTreeNode.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1DecisionTreeNode.html
Usability,clear,clear,") ;  ; void AddToSumTarget (Float_t t);  add to sum target, if traininfo defined ;  ; void AddToSumTarget2 (Float_t t2);  add to sum target 2, if traininfo defined ;  ; void ClearNodeAndAllDaughters ();  clear the nodes (their S/N, Nevents etc), just keep the structure of the tree ;  ; virtual Node * CreateNode () const;  ; Double_t GetAlpha () const;  return the critical point alpha, or -1 if traininfo undefined ;  ; Double_t GetAlphaMinSubtree () const;  return the minimum alpha in the tree rooted at this node, or -1 if traininfo undefined ;  ; Double_t GetCC () const;  return CC, or -1 if traininfo undefined ;  ; Bool_t GetCutType (void) const;  return kTRUE: Cuts select signal, kFALSE: Cuts select bkg ;  ; Float_t GetCutValue (void) const;  return the cut value applied at this node ;  ; Double_t GetFisherCoeff (Int_t ivar) const;  get fisher coefficients ;  ; virtual DecisionTreeN",MatchSource.WIKI,doc/master/classTMVA_1_1DecisionTreeNode.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1DecisionTreeNode.html
Availability,error,error,"Type _eMinimizerType=MinimizerType::fSteepest, double _learningRate=1e-5, double _momentum=0.3, int _repetitions=3, bool _useMultithreading=true);  c'tor ;  ; virtual ~ClassificationSettings ();  d'tor ;  ; virtual void endTestCycle ();  action to be done when the training cycle is ended (e.g. ;  ; void endTrainCycle (double);  action to be done when the training cycle is ended (e.g. ;  ; void setResultComputation (std::string _fileNameNetConfig, std::string _fileNameResult, std::vector< Pattern > *_resultPatternContainer);  preparation for monitoring output ;  ; void setWeightSums (double sumOfSigWeights, double sumOfBkgWeights);  set the weight sums to be scaled to (preparations for monitoring output) ;  ; virtual void startTestCycle ();  action to be done when the test cycle is started (e.g. ;  ; void startTrainCycle ();  action to be done when the training cycle is started (e.g. ;  ; void testIteration ();  callback for monitoring and loggging ;  ; void testSample (double error, double output, double target, double weight);  action to be done after the computation of a test sample (e.g. ;  ;  Public Member Functions inherited from TMVA::DNN::Settings;  Settings (TString name, size_t _convergenceSteps=15, size_t _batchSize=10, size_t _testRepetitions=7, double _factorWeightDecay=1e-5, TMVA::DNN::EnumRegularization _regularization=TMVA::DNN::EnumRegularization::NONE, MinimizerType _eMinimizerType=MinimizerType::fSteepest, double _learningRate=1e-5, double _momentum=0.3, int _repetitions=3, bool _multithreading=true);  c'tor ;  ; virtual ~Settings ();  d'tor ;  ; void addPoint (std::string histoName, double x);  for monitoring ;  ; void addPoint (std::string histoName, double x, double y);  for monitoring ;  ; size_t batchSize () const;  mini-batch size ;  ; void clear (std::string histoName);  for monitoring ;  ; virtual void computeResult (const Net &, std::vector< double > &);  callback for monitoring and logging ;  ; size_t convergenceCount () const;  returns t",MatchSource.WIKI,doc/master/classTMVA_1_1DNN_1_1ClassificationSettings.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1DNN_1_1ClassificationSettings.html
Deployability,configurat,configuration,"const;  ; bool exists (std::string histoName);  for monitoring ;  ; double factorWeightDecay () const;  get the weight-decay factor ;  ; virtual bool hasConverged (double testError);  has this training converged already? ;  ; double learningRate () const;  get the learning rate ;  ; size_t maxConvergenceCount () const;  returns the max convergence count so far ;  ; size_t minError () const;  returns the smallest error so far ;  ; MinimizerType minimizerType () const;  which minimizer shall be used (e.g. SGD) ;  ; double momentum () const;  get the momentum (e.g. for SGD) ;  ; void pads (int numPads);  preparation for monitoring ;  ; void plot (std::string histoName, std::string options, int pad, EColor color);  for monitoring ;  ; EnumRegularization regularization () const;  some regularization of the DNN is turned on? ;  ; int repetitions () const;  how many steps have to be gone until the batch is changed ;  ; template<typename Iterator > ; void setDropOut (Iterator begin, Iterator end, size_t _dropRepetitions);  set the drop-out configuration (layer-wise) ;  ; void setMonitoring (std::shared_ptr< Monitoring > ptrMonitoring);  prepared for monitoring ;  ; virtual void setProgressLimits (double minProgress=0, double maxProgress=100);  ; virtual void startTraining ();  ; size_t testRepetitions () const;  how often is the test data tested ;  ; bool useMultithreading () const;  is multithreading turned on? ;  . Public Attributes; std::vector< double > m_ams;  ; double m_cutValue;  ; std::string m_fileNameNetConfig;  ; std::string m_fileNameResult;  ; std::vector< double > m_input;  ; std::vector< double > m_output;  ; std::vector< Pattern > * m_pResultPatternContainer;  ; size_t m_scaleToNumEvents;  ; std::vector< double > m_significances;  ; double m_sumOfBkgWeights;  ; double m_sumOfSigWeights;  ; std::vector< double > m_targets;  ; std::vector< double > m_weights;  ;  Public Attributes inherited from TMVA::DNN::Settings; size_t count_dE;  ; size_t count_E;  ; size_",MatchSource.WIKI,doc/master/classTMVA_1_1DNN_1_1ClassificationSettings.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1DNN_1_1ClassificationSettings.html
Energy Efficiency,monitor,monitoring,"unction signatures. ; contains additional settings if the DNN problem is classification ; Definition at line 894 of file NeuralNet.h. Public Member Functions;  ClassificationSettings (TString name, size_t _convergenceSteps=15, size_t _batchSize=10, size_t _testRepetitions=7, double _factorWeightDecay=1e-5, EnumRegularization _regularization=EnumRegularization::NONE, size_t _scaleToNumEvents=0, MinimizerType _eMinimizerType=MinimizerType::fSteepest, double _learningRate=1e-5, double _momentum=0.3, int _repetitions=3, bool _useMultithreading=true);  c'tor ;  ; virtual ~ClassificationSettings ();  d'tor ;  ; virtual void endTestCycle ();  action to be done when the training cycle is ended (e.g. ;  ; void endTrainCycle (double);  action to be done when the training cycle is ended (e.g. ;  ; void setResultComputation (std::string _fileNameNetConfig, std::string _fileNameResult, std::vector< Pattern > *_resultPatternContainer);  preparation for monitoring output ;  ; void setWeightSums (double sumOfSigWeights, double sumOfBkgWeights);  set the weight sums to be scaled to (preparations for monitoring output) ;  ; virtual void startTestCycle ();  action to be done when the test cycle is started (e.g. ;  ; void startTrainCycle ();  action to be done when the training cycle is started (e.g. ;  ; void testIteration ();  callback for monitoring and loggging ;  ; void testSample (double error, double output, double target, double weight);  action to be done after the computation of a test sample (e.g. ;  ;  Public Member Functions inherited from TMVA::DNN::Settings;  Settings (TString name, size_t _convergenceSteps=15, size_t _batchSize=10, size_t _testRepetitions=7, double _factorWeightDecay=1e-5, TMVA::DNN::EnumRegularization _regularization=TMVA::DNN::EnumRegularization::NONE, MinimizerType _eMinimizerType=MinimizerType::fSteepest, double _learningRate=1e-5, double _momentum=0.3, int _repetitions=3, bool _multithreading=true);  c'tor ;  ; virtual ~Settings ();  d'tor ;  ; void",MatchSource.WIKI,doc/master/classTMVA_1_1DNN_1_1ClassificationSettings.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1DNN_1_1ClassificationSettings.html
Modifiability,inherit,inherited,"void endTrainCycle (double);  action to be done when the training cycle is ended (e.g. ;  ; void setResultComputation (std::string _fileNameNetConfig, std::string _fileNameResult, std::vector< Pattern > *_resultPatternContainer);  preparation for monitoring output ;  ; void setWeightSums (double sumOfSigWeights, double sumOfBkgWeights);  set the weight sums to be scaled to (preparations for monitoring output) ;  ; virtual void startTestCycle ();  action to be done when the test cycle is started (e.g. ;  ; void startTrainCycle ();  action to be done when the training cycle is started (e.g. ;  ; void testIteration ();  callback for monitoring and loggging ;  ; void testSample (double error, double output, double target, double weight);  action to be done after the computation of a test sample (e.g. ;  ;  Public Member Functions inherited from TMVA::DNN::Settings;  Settings (TString name, size_t _convergenceSteps=15, size_t _batchSize=10, size_t _testRepetitions=7, double _factorWeightDecay=1e-5, TMVA::DNN::EnumRegularization _regularization=TMVA::DNN::EnumRegularization::NONE, MinimizerType _eMinimizerType=MinimizerType::fSteepest, double _learningRate=1e-5, double _momentum=0.3, int _repetitions=3, bool _multithreading=true);  c'tor ;  ; virtual ~Settings ();  d'tor ;  ; void addPoint (std::string histoName, double x);  for monitoring ;  ; void addPoint (std::string histoName, double x, double y);  for monitoring ;  ; size_t batchSize () const;  mini-batch size ;  ; void clear (std::string histoName);  for monitoring ;  ; virtual void computeResult (const Net &, std::vector< double > &);  callback for monitoring and logging ;  ; size_t convergenceCount () const;  returns the current convergence count ;  ; size_t convergenceSteps () const;  how many steps until training is deemed to have converged ;  ; void create (std::string histoName, int bins, double min, double max);  for monitoring ;  ; void create (std::string histoName, int bins, double min, double max, int bin",MatchSource.WIKI,doc/master/classTMVA_1_1DNN_1_1ClassificationSettings.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1DNN_1_1ClassificationSettings.html
Testability,test,test,"unction signatures. ; contains additional settings if the DNN problem is classification ; Definition at line 894 of file NeuralNet.h. Public Member Functions;  ClassificationSettings (TString name, size_t _convergenceSteps=15, size_t _batchSize=10, size_t _testRepetitions=7, double _factorWeightDecay=1e-5, EnumRegularization _regularization=EnumRegularization::NONE, size_t _scaleToNumEvents=0, MinimizerType _eMinimizerType=MinimizerType::fSteepest, double _learningRate=1e-5, double _momentum=0.3, int _repetitions=3, bool _useMultithreading=true);  c'tor ;  ; virtual ~ClassificationSettings ();  d'tor ;  ; virtual void endTestCycle ();  action to be done when the training cycle is ended (e.g. ;  ; void endTrainCycle (double);  action to be done when the training cycle is ended (e.g. ;  ; void setResultComputation (std::string _fileNameNetConfig, std::string _fileNameResult, std::vector< Pattern > *_resultPatternContainer);  preparation for monitoring output ;  ; void setWeightSums (double sumOfSigWeights, double sumOfBkgWeights);  set the weight sums to be scaled to (preparations for monitoring output) ;  ; virtual void startTestCycle ();  action to be done when the test cycle is started (e.g. ;  ; void startTrainCycle ();  action to be done when the training cycle is started (e.g. ;  ; void testIteration ();  callback for monitoring and loggging ;  ; void testSample (double error, double output, double target, double weight);  action to be done after the computation of a test sample (e.g. ;  ;  Public Member Functions inherited from TMVA::DNN::Settings;  Settings (TString name, size_t _convergenceSteps=15, size_t _batchSize=10, size_t _testRepetitions=7, double _factorWeightDecay=1e-5, TMVA::DNN::EnumRegularization _regularization=TMVA::DNN::EnumRegularization::NONE, MinimizerType _eMinimizerType=MinimizerType::fSteepest, double _learningRate=1e-5, double _momentum=0.3, int _repetitions=3, bool _multithreading=true);  c'tor ;  ; virtual ~Settings ();  d'tor ;  ; void",MatchSource.WIKI,doc/master/classTMVA_1_1DNN_1_1ClassificationSettings.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1DNN_1_1ClassificationSettings.html
Usability,clear,clear,"rization _regularization=TMVA::DNN::EnumRegularization::NONE, MinimizerType _eMinimizerType=MinimizerType::fSteepest, double _learningRate=1e-5, double _momentum=0.3, int _repetitions=3, bool _multithreading=true);  c'tor ;  ; virtual ~Settings ();  d'tor ;  ; void addPoint (std::string histoName, double x);  for monitoring ;  ; void addPoint (std::string histoName, double x, double y);  for monitoring ;  ; size_t batchSize () const;  mini-batch size ;  ; void clear (std::string histoName);  for monitoring ;  ; virtual void computeResult (const Net &, std::vector< double > &);  callback for monitoring and logging ;  ; size_t convergenceCount () const;  returns the current convergence count ;  ; size_t convergenceSteps () const;  how many steps until training is deemed to have converged ;  ; void create (std::string histoName, int bins, double min, double max);  for monitoring ;  ; void create (std::string histoName, int bins, double min, double max, int bins2, double min2, double max2);  for monitoring ;  ; virtual void cycle (double progress, TString text);  ; virtual void drawSample (const std::vector< double > &, const std::vector< double > &, const std::vector< double > &, double);  callback for monitoring and logging ;  ; const std::vector< double > & dropFractions () const;  ; size_t dropRepetitions () const;  ; bool exists (std::string histoName);  for monitoring ;  ; double factorWeightDecay () const;  get the weight-decay factor ;  ; virtual bool hasConverged (double testError);  has this training converged already? ;  ; double learningRate () const;  get the learning rate ;  ; size_t maxConvergenceCount () const;  returns the max convergence count so far ;  ; size_t minError () const;  returns the smallest error so far ;  ; MinimizerType minimizerType () const;  which minimizer shall be used (e.g. SGD) ;  ; double momentum () const;  get the momentum (e.g. for SGD) ;  ; void pads (int numPads);  preparation for monitoring ;  ; void plot (std::string histoN",MatchSource.WIKI,doc/master/classTMVA_1_1DNN_1_1ClassificationSettings.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1DNN_1_1ClassificationSettings.html
Modifiability,layers,layers," applies a sigmoid transformation to each output value (to create a probability); SOFTMAX applies a softmax transformation to all output values (mutually exclusive probability) . Definition at line 81 of file NeuralNet.cxx. ◆ LayerData() [2/6]. TMVA::DNN::LayerData::LayerData ; (; size_t ; inputSize). c'tor of LayerData ; C'tor of LayerData for the input layer; Parameters. inputSizeinput size of this layer . Definition at line 68 of file NeuralNet.cxx. ◆ ~LayerData(). TMVA::DNN::LayerData::~LayerData ; (; ). inline . Definition at line 471 of file NeuralNet.h. ◆ LayerData() [3/6]. TMVA::DNN::LayerData::LayerData ; (; size_t ; size, . const_iterator_type ; itWeightBegin, . iterator_type ; itGradientBegin, . std::shared_ptr< std::function< double(double)> > ; activationFunction, . std::shared_ptr< std::function< double(double)> > ; inverseActivationFunction, . ModeOutputValues ; eModeOutput = ModeOutputValues::DIRECT . ). c'tor of LayerData ; C'tor of LayerData for all layers which are not the input layer; Used during the training of the DNN; Parameters. sizesize of the layer ; itWeightBeginindicates the start of the weights for this layer on the weight vector ; itGradientBeginindicates the start of the gradients for this layer on the gradient vector ; activationFunctionindicates activation functions for this layer ; inverseActivationFunctionindicates the inverse activation functions for this layer ; eModeOutputindicates a potential tranformation of the output values before further computation DIRECT does not further transformation; SIGMOID applies a sigmoid transformation to each output value (to create a probability); SOFTMAX applies a softmax transformation to all output values (mutually exclusive probability) . Definition at line 97 of file NeuralNet.cxx. ◆ LayerData() [4/6]. TMVA::DNN::LayerData::LayerData ; (; size_t ; size, . const_iterator_type ; itWeightBegin, . std::shared_ptr< std::function< double(double)> > ; activationFunction, . ModeOutputValues ; eModeO",MatchSource.WIKI,doc/master/classTMVA_1_1DNN_1_1LayerData.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1DNN_1_1LayerData.html
Usability,clear,clear,"ember Functions;  LayerData (const LayerData &other);  copy c'tor of LayerData ;  ;  LayerData (const_iterator_type itInputBegin, const_iterator_type itInputEnd, ModeOutputValues eModeOutput=ModeOutputValues::DIRECT);  c'tor of LayerData ;  ;  LayerData (LayerData &&other);  move c'tor of LayerData ;  ;  LayerData (size_t inputSize);  c'tor of LayerData ;  ;  LayerData (size_t size, const_iterator_type itWeightBegin, iterator_type itGradientBegin, std::shared_ptr< std::function< double(double)> > activationFunction, std::shared_ptr< std::function< double(double)> > inverseActivationFunction, ModeOutputValues eModeOutput=ModeOutputValues::DIRECT);  c'tor of LayerData ;  ;  LayerData (size_t size, const_iterator_type itWeightBegin, std::shared_ptr< std::function< double(double)> > activationFunction, ModeOutputValues eModeOutput=ModeOutputValues::DIRECT);  c'tor of LayerData ;  ;  ~LayerData ();  ; std::shared_ptr< std::function< double(double)> > activationFunction () const;  ; void clear ();  clear the values and the deltas ;  ; void clearDropOut ();  clear the drop-out-data for this layer ;  ; iterator_type deltasBegin ();  returns iterator to the begin of the deltas (back-propagation) ;  ; const_iterator_type deltasBegin () const;  returns const iterator to the begin of the deltas (back-propagation) ;  ; iterator_type deltasEnd ();  returns iterator to the end of the deltas (back-propagation) ;  ; const_iterator_type deltasEnd () const;  returns const iterator to the end of the deltas (back-propagation) ;  ; const_dropout_iterator dropOut () const;  return the begin of the drop-out information ;  ; iterator_type gradientsBegin ();  returns iterator to the begin of the gradients ;  ; const_iterator_type gradientsBegin () const;  returns const iterator to the begin of the gradients ;  ; bool hasDropOut () const;  has this layer drop-out turned on? ;  ; std::shared_ptr< std::function< double(double)> > inverseActivationFunction () const;  ; ModeOutputValues outputMod",MatchSource.WIKI,doc/master/classTMVA_1_1DNN_1_1LayerData.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1DNN_1_1LayerData.html
Usability,clear,clear,". ROOT: TMVA::DNN::MeanVariance Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Private Attributes |; List of all members ; TMVA::DNN::MeanVariance Class Reference. . Definition at line 74 of file NeuralNet.h. Public Member Functions;  MeanVariance ();  ; template<typename ITERATOR > ; void add (ITERATOR itBegin, ITERATOR itEnd);  ; template<typename T > ; void add (T value, double weight=1.0);  ; void clear ();  ; int count () const;  ; double mean () const;  ; double stdDev () const;  ; double stdDev_corr () const;  ; double var () const;  ; double var_corr () const;  ; double weights () const;  . Private Attributes; double m_mean;  ; size_t m_n;  ; double m_squared;  ; double m_sumWeights;  . #include <TMVA/NeuralNet.h>; Constructor & Destructor Documentation. ◆ MeanVariance(). TMVA::DNN::MeanVariance::MeanVariance ; (; ). inline . Definition at line 77 of file NeuralNet.h. Member Function Documentation. ◆ add() [1/2]. template<typename ITERATOR > . void TMVA::DNN::MeanVariance::add ; (; ITERATOR ; itBegin, . ITERATOR ; itEnd . ). inline . Definition at line 116 of file NeuralNet.h. ◆ add() [2/2]. template<typename T > . void TMVA::DNN::MeanVariance::add ; (; T ; value, . double ; weight = 1.0 . ). inline . Definition at line 93 of file NeuralNet.h. ◆ clear(). void TMVA::DNN::MeanVariance::clear ; (; ). inline . Definition at line 84 of file NeuralNet.h. ◆ count(). int TMVA::DNN::MeanVariance::count ; (; ); const. inline . Definition at line 124 of file NeuralNet.h. ◆ mean(). double TMVA::DNN::MeanVariance::mean ; (; ); const. inline . Definition at line 126 of file NeuralNet.h. ◆ stdDev(). double TMVA::DNN::MeanVariance::stdDev ; (; ); const. inline . Definition at line 145 of file NeuralNet.h. ◆ stdDev_corr(). double TMVA::DNN::MeanVariance::stdDev_corr ; (; ); const. inline . Definition at line 144 of file NeuralNet.h. ◆ var(). double TMVA::DNN::MeanVariance::var",MatchSource.WIKI,doc/master/classTMVA_1_1DNN_1_1MeanVariance.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1DNN_1_1MeanVariance.html
Availability,error,errorFunction," addLayer (Layer &&layer);  ; void addLayer (Layer &layer);  add a layer (layout) ;  ; template<typename Settings > ; void backPropagate (std::vector< std::vector< LayerData > > &layerPatternData, const Settings &settings, size_t trainFromLayer, size_t totalNumWeights) const;  ; void clear ();  ; template<typename Weights > ; std::vector< double > compute (const std::vector< double > &input, const Weights &weights) const;  compute the net with the given input and the given weights ;  ; template<typename ItWeight > ; std::tuple< double, double > computeError (const Settings &settings, std::vector< LayerData > &lastLayerData, Batch &batch, ItWeight itWeightBegin, ItWeight itWeightEnd) const;  ; void dE ();  ; template<typename WeightsType , typename DropProbabilities > ; void dropOutWeightFactor (WeightsType &weights, const DropProbabilities &drops, bool inverse=false);  set the drop out configuration ;  ; double E ();  ; template<typename Container , typename ItWeight > ; double errorFunction (LayerData &layerData, Container truth, ItWeight itWeight, ItWeight itWeightEnd, double patternWeight, double factorWeightDecay, EnumRegularization eRegularization) const;  computes the error of the DNN ;  ; template<typename OutputContainer > ; void fetchOutput (const LayerData &lastLayerData, OutputContainer &outputContainer) const;  ; template<typename OutputContainer > ; void fetchOutput (const std::vector< LayerData > &layerPatternData, OutputContainer &outputContainer) const;  ; template<typename LayerContainer , typename PassThrough , typename ItWeight , typename ItGradient , typename OutContainer > ; double forward_backward (LayerContainer &layers, PassThrough &settingsAndBatch, ItWeight itWeightBegin, ItWeight itWeightEnd, ItGradient itGradientBegin, ItGradient itGradientEnd, size_t trainFromLayer, OutContainer &outputContainer, bool fetchOutput) const;  main NN computation function ;  ; template<typename LayerContainer , typename LayerPatternContainer > ; void forwardB",MatchSource.WIKI,doc/master/classTMVA_1_1DNN_1_1Net.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1DNN_1_1Net.html
Deployability,configurat,configuration," Public Member Functions;  Net ();  c'tor ;  ;  Net (const Net &other);  d'tor ;  ; void addLayer (Layer &&layer);  ; void addLayer (Layer &layer);  add a layer (layout) ;  ; template<typename Settings > ; void backPropagate (std::vector< std::vector< LayerData > > &layerPatternData, const Settings &settings, size_t trainFromLayer, size_t totalNumWeights) const;  ; void clear ();  ; template<typename Weights > ; std::vector< double > compute (const std::vector< double > &input, const Weights &weights) const;  compute the net with the given input and the given weights ;  ; template<typename ItWeight > ; std::tuple< double, double > computeError (const Settings &settings, std::vector< LayerData > &lastLayerData, Batch &batch, ItWeight itWeightBegin, ItWeight itWeightEnd) const;  ; void dE ();  ; template<typename WeightsType , typename DropProbabilities > ; void dropOutWeightFactor (WeightsType &weights, const DropProbabilities &drops, bool inverse=false);  set the drop out configuration ;  ; double E ();  ; template<typename Container , typename ItWeight > ; double errorFunction (LayerData &layerData, Container truth, ItWeight itWeight, ItWeight itWeightEnd, double patternWeight, double factorWeightDecay, EnumRegularization eRegularization) const;  computes the error of the DNN ;",MatchSource.WIKI,doc/master/classTMVA_1_1DNN_1_1Net.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1DNN_1_1Net.html
Modifiability,layers,layers,". ROOT: TMVA::DNN::Net Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Protected Member Functions |; Protected Attributes |; Private Attributes |; List of all members ; TMVA::DNN::Net Class Reference. ; neural net ; holds the structure of all layers and some data for the whole net does not know the layer data though (i.e. values of the nodes and weights) ; Definition at line 1061 of file NeuralNet.h. Public Types; typedef std::pair< iterator_type, iterator_type > begin_end_type;  ; typedef std::vector< double > container_type;  ; typedef container_type::iterator iterator_type;  . Public Member Functions;  Net ();  c'tor ;  ;  Net (const Net &other);  d'tor ;  ; void addLayer (Layer &&layer);  ; void addLayer (Layer &layer);  add a layer (layout) ;  ; template<typename Settings > ; void backPropagate (std::vector< std::vector< LayerData > > &layerPatternData, const Settings &settings, size_t trainFromLayer, size_t totalNumWeights) const;  ; void clear ();  ; template<typename Weights > ; std::vector< double > compute (const std::vector< double > &input, const Weights &weights) const;  compute the net with the given input and the given weights ;  ; template<typename ItWeight > ; std::tuple< double, double > computeError (const Settings &settings, std::vector< LayerData > &lastLayerData, Batch &batch, ItWeight itWeightBegin, ItWeight itWeightEnd) const;  ; void dE ();  ; template<typename WeightsType , typename DropProbabilities > ; void dropOutWeightFactor (WeightsType &weights, const DropProbabilities &drops, bool inverse=false);  set the drop out configuration ;  ; double E ();  ; template<typename Container , typename ItWeight > ; double errorFunction (LayerData &layerData, Container truth, ItWeight itWeight, ItWeight itWeightEnd, double patternWeight, double factorWeightDecay, EnumRegularization eRegularization) const;  computes the error of the DNN ;",MatchSource.WIKI,doc/master/classTMVA_1_1DNN_1_1Net.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1DNN_1_1Net.html
Testability,test,testPattern,"e PassThrough > ; double operator() (PassThrough &settingsAndBatch, Weights &weights, Gradients &gradients) const;  execute computation of the DNN for one mini-batch (used by the minimizer); returns gradients as well ;  ; template<typename Weights , typename Gradients , typename PassThrough , typename OutContainer > ; double operator() (PassThrough &settingsAndBatch, Weights &weights, Gradients &gradients, ModeOutput eFetch, OutContainer &outputContainer) const;  ; size_t outputSize () const;  output size of the DNN ;  ; template<typename LayerContainer , typename DropContainer , typename ItWeight , typename ItGradient > ; std::vector< std::vector< LayerData > > prepareLayerData (LayerContainer &layers, Batch &batch, const DropContainer &dropContainer, ItWeight itWeightBegin, ItWeight itWeightEnd, ItGradient itGradientBegin, ItGradient itGradientEnd, size_t &totalNumWeights) const;  ; template<typename Minimizer > ; void preTrain (std::vector< double > &weights, std::vector< Pattern > &trainPattern, const std::vector< Pattern > &testPattern, Minimizer &minimizer, Settings &settings);  pre-training for future use ;  ; void removeLayer ();  remove one layer ;  ; void setErrorFunction (ModeErrorFunction eErrorFunction);  which error function is to be used ;  ; void setInputSize (size_t sizeInput);  set the input size of the DNN ;  ; void SetIpythonInteractive (IPythonInteractive *fI, bool *fE, UInt_t *M, UInt_t *C);  ; void setOutputSize (size_t sizeOutput);  set the output size of the DNN ;  ; template<typename Minimizer > ; double train (std::vector< double > &weights, std::vector< Pattern > &trainPattern, const std::vector< Pattern > &testPattern, Minimizer &minimizer, Settings &settings);  start the training ;  ; template<typename Iterator , typename Minimizer > ; double trainCycle (Minimizer &minimizer, std::vector< double > &weights, Iterator itPatternBegin, Iterator itPatternEnd, Settings &settings, DropContainer &dropContainer);  executes one training cycle ;  .",MatchSource.WIKI,doc/master/classTMVA_1_1DNN_1_1Net.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1DNN_1_1Net.html
Usability,clear,clear," Public Member Functions;  Net ();  c'tor ;  ;  Net (const Net &other);  d'tor ;  ; void addLayer (Layer &&layer);  ; void addLayer (Layer &layer);  add a layer (layout) ;  ; template<typename Settings > ; void backPropagate (std::vector< std::vector< LayerData > > &layerPatternData, const Settings &settings, size_t trainFromLayer, size_t totalNumWeights) const;  ; void clear ();  ; template<typename Weights > ; std::vector< double > compute (const std::vector< double > &input, const Weights &weights) const;  compute the net with the given input and the given weights ;  ; template<typename ItWeight > ; std::tuple< double, double > computeError (const Settings &settings, std::vector< LayerData > &lastLayerData, Batch &batch, ItWeight itWeightBegin, ItWeight itWeightEnd) const;  ; void dE ();  ; template<typename WeightsType , typename DropProbabilities > ; void dropOutWeightFactor (WeightsType &weights, const DropProbabilities &drops, bool inverse=false);  set the drop out configuration ;  ; double E ();  ; template<typename Container , typename ItWeight > ; double errorFunction (LayerData &layerData, Container truth, ItWeight itWeight, ItWeight itWeightEnd, double patternWeight, double factorWeightDecay, EnumRegularization eRegularization) const;  computes the error of the DNN ;",MatchSource.WIKI,doc/master/classTMVA_1_1DNN_1_1Net.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1DNN_1_1Net.html
Availability,error,error,"_eMinimizerType=MinimizerType::fSteepest, double _learningRate=1e-5, double _momentum=0.3, int _repetitions=3, bool _multithreading=true);  c'tor ;  ; virtual ~Settings ();  d'tor ;  ; void addPoint (std::string histoName, double x);  for monitoring ;  ; void addPoint (std::string histoName, double x, double y);  for monitoring ;  ; size_t batchSize () const;  mini-batch size ;  ; void clear (std::string histoName);  for monitoring ;  ; virtual void computeResult (const Net &, std::vector< double > &);  callback for monitoring and logging ;  ; size_t convergenceCount () const;  returns the current convergence count ;  ; size_t convergenceSteps () const;  how many steps until training is deemed to have converged ;  ; void create (std::string histoName, int bins, double min, double max);  for monitoring ;  ; void create (std::string histoName, int bins, double min, double max, int bins2, double min2, double max2);  for monitoring ;  ; virtual void cycle (double progress, TString text);  ; virtual void drawSample (const std::vector< double > &, const std::vector< double > &, const std::vector< double > &, double);  callback for monitoring and logging ;  ; const std::vector< double > & dropFractions () const;  ; size_t dropRepetitions () const;  ; virtual void endTestCycle ();  callback for monitoring and loggging ;  ; virtual void endTrainCycle (double);  callback for monitoring and logging ;  ; bool exists (std::string histoName);  for monitoring ;  ; double factorWeightDecay () const;  get the weight-decay factor ;  ; virtual bool hasConverged (double testError);  has this training converged already? ;  ; double learningRate () const;  get the learning rate ;  ; size_t maxConvergenceCount () const;  returns the max convergence count so far ;  ; size_t minError () const;  returns the smallest error so far ;  ; MinimizerType minimizerType () const;  which minimizer shall be used (e.g. SGD) ;  ; double momentum () const;  get the momentum (e.g. for SGD) ;  ; void pads (",MatchSource.WIKI,doc/master/classTMVA_1_1DNN_1_1Settings.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1DNN_1_1Settings.html
Deployability,configurat,configuration,"asConverged (double testError);  has this training converged already? ;  ; double learningRate () const;  get the learning rate ;  ; size_t maxConvergenceCount () const;  returns the max convergence count so far ;  ; size_t minError () const;  returns the smallest error so far ;  ; MinimizerType minimizerType () const;  which minimizer shall be used (e.g. SGD) ;  ; double momentum () const;  get the momentum (e.g. for SGD) ;  ; void pads (int numPads);  preparation for monitoring ;  ; void plot (std::string histoName, std::string options, int pad, EColor color);  for monitoring ;  ; EnumRegularization regularization () const;  some regularization of the DNN is turned on? ;  ; int repetitions () const;  how many steps have to be gone until the batch is changed ;  ; template<typename Iterator > ; void setDropOut (Iterator begin, Iterator end, size_t _dropRepetitions);  set the drop-out configuration (layer-wise) ;  ; void setMonitoring (std::shared_ptr< Monitoring > ptrMonitoring);  prepared for monitoring ;  ; virtual void setProgressLimits (double minProgress=0, double maxProgress=100);  ; virtual void startTestCycle ();  callback for monitoring and loggging ;  ; virtual void startTrainCycle ();  ; virtual void startTraining ();  ; virtual void testIteration ();  callback for monitoring and loggging ;  ; size_t testRepetitions () const;  how often is the test data tested ;  ; virtual void testSample (double, double, double, double);  virtual function to be used for monitoring (callback) ;  ; bool useMultithreading () const;  is multithreading turned on? ;  . Public Attributes; size_t count_dE;  ; size_t count_E;  ; size_t count_mb_dE;  ; size_t count_mb_E;  ; double fLearningRate;  ; MinimizerType fMinimizerType;  ; double fMomentum;  ; int fRepetitions;  ; size_t m_batchSize;  mini-batch size ;  ; size_t m_convergenceCount;  ; size_t m_convergenceSteps;  number of steps without improvement to consider the DNN to have converged ;  ; std::vector< double > m_dropOut;  ",MatchSource.WIKI,doc/master/classTMVA_1_1DNN_1_1Settings.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1DNN_1_1Settings.html
Energy Efficiency,monitor,monitoring,"_eMinimizerType=MinimizerType::fSteepest, double _learningRate=1e-5, double _momentum=0.3, int _repetitions=3, bool _multithreading=true);  c'tor ;  ; virtual ~Settings ();  d'tor ;  ; void addPoint (std::string histoName, double x);  for monitoring ;  ; void addPoint (std::string histoName, double x, double y);  for monitoring ;  ; size_t batchSize () const;  mini-batch size ;  ; void clear (std::string histoName);  for monitoring ;  ; virtual void computeResult (const Net &, std::vector< double > &);  callback for monitoring and logging ;  ; size_t convergenceCount () const;  returns the current convergence count ;  ; size_t convergenceSteps () const;  how many steps until training is deemed to have converged ;  ; void create (std::string histoName, int bins, double min, double max);  for monitoring ;  ; void create (std::string histoName, int bins, double min, double max, int bins2, double min2, double max2);  for monitoring ;  ; virtual void cycle (double progress, TString text);  ; virtual void drawSample (const std::vector< double > &, const std::vector< double > &, const std::vector< double > &, double);  callback for monitoring and logging ;  ; const std::vector< double > & dropFractions () const;  ; size_t dropRepetitions () const;  ; virtual void endTestCycle ();  callback for monitoring and loggging ;  ; virtual void endTrainCycle (double);  callback for monitoring and logging ;  ; bool exists (std::string histoName);  for monitoring ;  ; double factorWeightDecay () const;  get the weight-decay factor ;  ; virtual bool hasConverged (double testError);  has this training converged already? ;  ; double learningRate () const;  get the learning rate ;  ; size_t maxConvergenceCount () const;  returns the max convergence count so far ;  ; size_t minError () const;  returns the smallest error so far ;  ; MinimizerType minimizerType () const;  which minimizer shall be used (e.g. SGD) ;  ; double momentum () const;  get the momentum (e.g. for SGD) ;  ; void pads (",MatchSource.WIKI,doc/master/classTMVA_1_1DNN_1_1Settings.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1DNN_1_1Settings.html
Modifiability,config,configuration,"asConverged (double testError);  has this training converged already? ;  ; double learningRate () const;  get the learning rate ;  ; size_t maxConvergenceCount () const;  returns the max convergence count so far ;  ; size_t minError () const;  returns the smallest error so far ;  ; MinimizerType minimizerType () const;  which minimizer shall be used (e.g. SGD) ;  ; double momentum () const;  get the momentum (e.g. for SGD) ;  ; void pads (int numPads);  preparation for monitoring ;  ; void plot (std::string histoName, std::string options, int pad, EColor color);  for monitoring ;  ; EnumRegularization regularization () const;  some regularization of the DNN is turned on? ;  ; int repetitions () const;  how many steps have to be gone until the batch is changed ;  ; template<typename Iterator > ; void setDropOut (Iterator begin, Iterator end, size_t _dropRepetitions);  set the drop-out configuration (layer-wise) ;  ; void setMonitoring (std::shared_ptr< Monitoring > ptrMonitoring);  prepared for monitoring ;  ; virtual void setProgressLimits (double minProgress=0, double maxProgress=100);  ; virtual void startTestCycle ();  callback for monitoring and loggging ;  ; virtual void startTrainCycle ();  ; virtual void startTraining ();  ; virtual void testIteration ();  callback for monitoring and loggging ;  ; size_t testRepetitions () const;  how often is the test data tested ;  ; virtual void testSample (double, double, double, double);  virtual function to be used for monitoring (callback) ;  ; bool useMultithreading () const;  is multithreading turned on? ;  . Public Attributes; size_t count_dE;  ; size_t count_E;  ; size_t count_mb_dE;  ; size_t count_mb_E;  ; double fLearningRate;  ; MinimizerType fMinimizerType;  ; double fMomentum;  ; int fRepetitions;  ; size_t m_batchSize;  mini-batch size ;  ; size_t m_convergenceCount;  ; size_t m_convergenceSteps;  number of steps without improvement to consider the DNN to have converged ;  ; std::vector< double > m_dropOut;  ",MatchSource.WIKI,doc/master/classTMVA_1_1DNN_1_1Settings.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1DNN_1_1Settings.html
Testability,log,logging,"_eMinimizerType=MinimizerType::fSteepest, double _learningRate=1e-5, double _momentum=0.3, int _repetitions=3, bool _multithreading=true);  c'tor ;  ; virtual ~Settings ();  d'tor ;  ; void addPoint (std::string histoName, double x);  for monitoring ;  ; void addPoint (std::string histoName, double x, double y);  for monitoring ;  ; size_t batchSize () const;  mini-batch size ;  ; void clear (std::string histoName);  for monitoring ;  ; virtual void computeResult (const Net &, std::vector< double > &);  callback for monitoring and logging ;  ; size_t convergenceCount () const;  returns the current convergence count ;  ; size_t convergenceSteps () const;  how many steps until training is deemed to have converged ;  ; void create (std::string histoName, int bins, double min, double max);  for monitoring ;  ; void create (std::string histoName, int bins, double min, double max, int bins2, double min2, double max2);  for monitoring ;  ; virtual void cycle (double progress, TString text);  ; virtual void drawSample (const std::vector< double > &, const std::vector< double > &, const std::vector< double > &, double);  callback for monitoring and logging ;  ; const std::vector< double > & dropFractions () const;  ; size_t dropRepetitions () const;  ; virtual void endTestCycle ();  callback for monitoring and loggging ;  ; virtual void endTrainCycle (double);  callback for monitoring and logging ;  ; bool exists (std::string histoName);  for monitoring ;  ; double factorWeightDecay () const;  get the weight-decay factor ;  ; virtual bool hasConverged (double testError);  has this training converged already? ;  ; double learningRate () const;  get the learning rate ;  ; size_t maxConvergenceCount () const;  returns the max convergence count so far ;  ; size_t minError () const;  returns the smallest error so far ;  ; MinimizerType minimizerType () const;  which minimizer shall be used (e.g. SGD) ;  ; double momentum () const;  get the momentum (e.g. for SGD) ;  ; void pads (",MatchSource.WIKI,doc/master/classTMVA_1_1DNN_1_1Settings.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1DNN_1_1Settings.html
Usability,clear,clear,"_eMinimizerType=MinimizerType::fSteepest, double _learningRate=1e-5, double _momentum=0.3, int _repetitions=3, bool _multithreading=true);  c'tor ;  ; virtual ~Settings ();  d'tor ;  ; void addPoint (std::string histoName, double x);  for monitoring ;  ; void addPoint (std::string histoName, double x, double y);  for monitoring ;  ; size_t batchSize () const;  mini-batch size ;  ; void clear (std::string histoName);  for monitoring ;  ; virtual void computeResult (const Net &, std::vector< double > &);  callback for monitoring and logging ;  ; size_t convergenceCount () const;  returns the current convergence count ;  ; size_t convergenceSteps () const;  how many steps until training is deemed to have converged ;  ; void create (std::string histoName, int bins, double min, double max);  for monitoring ;  ; void create (std::string histoName, int bins, double min, double max, int bins2, double min2, double max2);  for monitoring ;  ; virtual void cycle (double progress, TString text);  ; virtual void drawSample (const std::vector< double > &, const std::vector< double > &, const std::vector< double > &, double);  callback for monitoring and logging ;  ; const std::vector< double > & dropFractions () const;  ; size_t dropRepetitions () const;  ; virtual void endTestCycle ();  callback for monitoring and loggging ;  ; virtual void endTrainCycle (double);  callback for monitoring and logging ;  ; bool exists (std::string histoName);  for monitoring ;  ; double factorWeightDecay () const;  get the weight-decay factor ;  ; virtual bool hasConverged (double testError);  has this training converged already? ;  ; double learningRate () const;  get the learning rate ;  ; size_t maxConvergenceCount () const;  returns the max convergence count so far ;  ; size_t minError () const;  returns the smallest error so far ;  ; MinimizerType minimizerType () const;  which minimizer shall be used (e.g. SGD) ;  ; double momentum () const;  get the momentum (e.g. for SGD) ;  ; void pads (",MatchSource.WIKI,doc/master/classTMVA_1_1DNN_1_1Settings.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1DNN_1_1Settings.html
Usability,learn,learningRate,". ROOT: TMVA::DNN::Steepest Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Public Attributes |; List of all members ; TMVA::DNN::Steepest Class Reference. ; Steepest Gradient Descent algorithm (SGD) ; Implements a steepest gradient descent minimization algorithm ; Definition at line 333 of file NeuralNet.h. Public Member Functions;  Steepest (double learningRate=1e-4, double momentum=0.5, size_t repetitions=10);  c'tor ;  ; template<typename Function , typename Weights , typename PassThrough > ; double operator() (Function &fitnessFunction, Weights &weights, PassThrough &passThrough);  operator to call the steepest gradient descent algorithm ;  . Public Attributes; double m_alpha;  internal parameter (learningRate) ;  ; double m_beta;  internal parameter (momentum) ;  ; std::vector< double > m_localGradients;  local gradients for reuse in thread. ;  ; std::vector< double > m_localWeights;  local weights for reuse in thread. ;  ; std::vector< double > m_prevGradients;  vector remembers the gradients of the previous step ;  ; size_t m_repetitions;  . #include <TMVA/NeuralNet.h>; Constructor & Destructor Documentation. ◆ Steepest(). TMVA::DNN::Steepest::Steepest ; (; double ; learningRate = 1e-4, . double ; momentum = 0.5, . size_t ; repetitions = 10 . ). inline . c'tor ; C'tor; Parameters. learningRatedenotes the learning rate for the SGD algorithm ; momentumfraction of the velocity which is taken over from the last step ; repetitionsre-compute the gradients each ""repetitions"" steps . Definition at line 348 of file NeuralNet.h. Member Function Documentation. ◆ operator()(). template<typename Function , typename Weights , typename PassThrough > . double TMVA::DNN::Steepest::operator() ; (; Function & ; fitnessFunction, . Weights & ; weights, . PassThrough & ; passThrough . ). operator to call the steepest gradient descent algorithm ; implementation of the steepest gradie",MatchSource.WIKI,doc/master/classTMVA_1_1DNN_1_1Steepest.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1DNN_1_1Steepest.html
Deployability,update,updates,"_t i);  ; std::vector< Layer_t * > & GetLayers ();  ; Scalar_t GetLearningRate () const;  Getters. ;  ; void IncrementGlobalStep ();  Increments the global step. ;  ; void SetLearningRate (size_t learningRate);  Setters. ;  ; void Step ();  Performs one step of optimization. ;  . Protected Member Functions; void UpdateBiases (size_t layerIndex, std::vector< Matrix_t > &biases, const std::vector< Matrix_t > &biasGradients);  Update the biases, given the current bias gradients. ;  ; void UpdateWeights (size_t layerIndex, std::vector< Matrix_t > &weights, const std::vector< Matrix_t > &weightGradients);  Update the weights, given the current weight gradients. ;  . Protected Attributes; Scalar_t fEpsilon;  The Smoothing term used to avoid division by zero. ;  ; std::vector< std::vector< Matrix_t > > fPastSquaredBiasGradients;  The accumulation of the square of the past bias gradients associated with the deep net. ;  ; std::vector< std::vector< Matrix_t > > fPastSquaredBiasUpdates;  The accumulation of the square of the past bias updates associated with the deep net. ;  ; std::vector< std::vector< Matrix_t > > fPastSquaredWeightGradients;  The accumulation of the square of the past weight gradients associated with the deep net. ;  ; std::vector< std::vector< Matrix_t > > fPastSquaredWeightUpdates;  The accumulation of the square of the past weight updates associated with the deep net. ;  ; Scalar_t fRho;  The Rho constant used by the optimizer. ;  ; std::vector< std::vector< Matrix_t > > fWorkBiasTensor1;  working tensor used to keep a temporary copy of bias or bias gradients ;  ; std::vector< std::vector< Matrix_t > > fWorkBiasTensor2;  working tensor used to keep a temporary copy of bias or bias gradients ;  ; std::vector< std::vector< Matrix_t > > fWorkWeightTensor1;  working tensor used to keep a temporary copy of weights or weight gradients ;  ; std::vector< std::vector< Matrix_t > > fWorkWeightTensor2;  working tensor used to keep a temporary copy of weights or wei",MatchSource.WIKI,doc/master/classTMVA_1_1DNN_1_1TAdadelta.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1DNN_1_1TAdadelta.html
Modifiability,inherit,inherited,". ROOT: TMVA::DNN::TAdadelta< Architecture_t, Layer_t, DeepNet_t > Class Template Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Protected Member Functions |; Protected Attributes |; List of all members ; TMVA::DNN::TAdadelta< Architecture_t, Layer_t, DeepNet_t > Class Template Reference. ; template<typename Architecture_t, typename Layer_t = VGeneralLayer<Architecture_t>, typename DeepNet_t = TDeepNet<Architecture_t, Layer_t>>; class TMVA::DNN::TAdadelta< Architecture_t, Layer_t, DeepNet_t >Adadelta Optimizer class. ; This class represents the Adadelta Optimizer. ; Definition at line 45 of file Adadelta.h. Public Types; using Matrix_t = typename Architecture_t::Matrix_t;  ; using Scalar_t = typename Architecture_t::Scalar_t;  ;  Public Types inherited from TMVA::DNN::VOptimizer< Architecture_t, Layer_t, DeepNet_t >; using Matrix_t = typename Architecture_t::Matrix_t;  ; using Scalar_t = typename Architecture_t::Scalar_t;  . Public Member Functions;  TAdadelta (DeepNet_t &deepNet, Scalar_t learningRate=1.0, Scalar_t rho=0.95, Scalar_t epsilon=1e-8);  Constructor. ;  ;  ~TAdadelta ()=default;  Destructor. ;  ; Scalar_t GetEpsilon () const;  ; std::vector< std::vector< Matrix_t > > & GetPastSquaredBiasGradients ();  ; std::vector< Matrix_t > & GetPastSquaredBiasGradientsAt (size_t i);  ; std::vector< std::vector< Matrix_t > > & GetPastSquaredBiasUpdates ();  ; std::vector< Matrix_t > & GetPastSquaredBiasUpdatesAt (size_t i);  ; std::vector< std::vector< Matrix_t > > & GetPastSquaredWeightGradients ();  ; std::vector< Matrix_t > & GetPastSquaredWeightGradientsAt (size_t i);  ; std::vector< std::vector< Matrix_t > > & GetPastSquaredWeightUpdates ();  ; std::vector< Matrix_t > & GetPastSquaredWeightUpdatesAt (size_t i);  ; Scalar_t GetRho () const;  Getters. ;  ;  Public Member Functions inherited from TMVA::DNN::VOptimizer< Architecture_t, Layer_t, DeepNet_t >; ",MatchSource.WIKI,doc/master/classTMVA_1_1DNN_1_1TAdadelta.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1DNN_1_1TAdadelta.html
Performance,optimiz,optimization,"< Matrix_t > > & GetPastSquaredBiasUpdates ();  ; std::vector< Matrix_t > & GetPastSquaredBiasUpdatesAt (size_t i);  ; std::vector< std::vector< Matrix_t > > & GetPastSquaredWeightGradients ();  ; std::vector< Matrix_t > & GetPastSquaredWeightGradientsAt (size_t i);  ; std::vector< std::vector< Matrix_t > > & GetPastSquaredWeightUpdates ();  ; std::vector< Matrix_t > & GetPastSquaredWeightUpdatesAt (size_t i);  ; Scalar_t GetRho () const;  Getters. ;  ;  Public Member Functions inherited from TMVA::DNN::VOptimizer< Architecture_t, Layer_t, DeepNet_t >;  VOptimizer (Scalar_t learningRate, DeepNet_t &deepNet);  Constructor. ;  ; virtual ~VOptimizer ()=default;  Virtual Destructor. ;  ; size_t GetGlobalStep () const;  ; Layer_t * GetLayerAt (size_t i);  ; std::vector< Layer_t * > & GetLayers ();  ; Scalar_t GetLearningRate () const;  Getters. ;  ; void IncrementGlobalStep ();  Increments the global step. ;  ; void SetLearningRate (size_t learningRate);  Setters. ;  ; void Step ();  Performs one step of optimization. ;  . Protected Member Functions; void UpdateBiases (size_t layerIndex, std::vector< Matrix_t > &biases, const std::vector< Matrix_t > &biasGradients);  Update the biases, given the current bias gradients. ;  ; void UpdateWeights (size_t layerIndex, std::vector< Matrix_t > &weights, const std::vector< Matrix_t > &weightGradients);  Update the weights, given the current weight gradients. ;  . Protected Attributes; Scalar_t fEpsilon;  The Smoothing term used to avoid division by zero. ;  ; std::vector< std::vector< Matrix_t > > fPastSquaredBiasGradients;  The accumulation of the square of the past bias gradients associated with the deep net. ;  ; std::vector< std::vector< Matrix_t > > fPastSquaredBiasUpdates;  The accumulation of the square of the past bias updates associated with the deep net. ;  ; std::vector< std::vector< Matrix_t > > fPastSquaredWeightGradients;  The accumulation of the square of the past weight gradients associated with the deep net. ;  ; ",MatchSource.WIKI,doc/master/classTMVA_1_1DNN_1_1TAdadelta.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1DNN_1_1TAdadelta.html
Safety,avoid,avoid,"mber Functions inherited from TMVA::DNN::VOptimizer< Architecture_t, Layer_t, DeepNet_t >;  VOptimizer (Scalar_t learningRate, DeepNet_t &deepNet);  Constructor. ;  ; virtual ~VOptimizer ()=default;  Virtual Destructor. ;  ; size_t GetGlobalStep () const;  ; Layer_t * GetLayerAt (size_t i);  ; std::vector< Layer_t * > & GetLayers ();  ; Scalar_t GetLearningRate () const;  Getters. ;  ; void IncrementGlobalStep ();  Increments the global step. ;  ; void SetLearningRate (size_t learningRate);  Setters. ;  ; void Step ();  Performs one step of optimization. ;  . Protected Member Functions; void UpdateBiases (size_t layerIndex, std::vector< Matrix_t > &biases, const std::vector< Matrix_t > &biasGradients);  Update the biases, given the current bias gradients. ;  ; void UpdateWeights (size_t layerIndex, std::vector< Matrix_t > &weights, const std::vector< Matrix_t > &weightGradients);  Update the weights, given the current weight gradients. ;  . Protected Attributes; Scalar_t fEpsilon;  The Smoothing term used to avoid division by zero. ;  ; std::vector< std::vector< Matrix_t > > fPastSquaredBiasGradients;  The accumulation of the square of the past bias gradients associated with the deep net. ;  ; std::vector< std::vector< Matrix_t > > fPastSquaredBiasUpdates;  The accumulation of the square of the past bias updates associated with the deep net. ;  ; std::vector< std::vector< Matrix_t > > fPastSquaredWeightGradients;  The accumulation of the square of the past weight gradients associated with the deep net. ;  ; std::vector< std::vector< Matrix_t > > fPastSquaredWeightUpdates;  The accumulation of the square of the past weight updates associated with the deep net. ;  ; Scalar_t fRho;  The Rho constant used by the optimizer. ;  ; std::vector< std::vector< Matrix_t > > fWorkBiasTensor1;  working tensor used to keep a temporary copy of bias or bias gradients ;  ; std::vector< std::vector< Matrix_t > > fWorkBiasTensor2;  working tensor used to keep a temporary copy of bias or",MatchSource.WIKI,doc/master/classTMVA_1_1DNN_1_1TAdadelta.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1DNN_1_1TAdadelta.html
Usability,learn,learningRate,"e. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Protected Member Functions |; Protected Attributes |; List of all members ; TMVA::DNN::TAdadelta< Architecture_t, Layer_t, DeepNet_t > Class Template Reference. ; template<typename Architecture_t, typename Layer_t = VGeneralLayer<Architecture_t>, typename DeepNet_t = TDeepNet<Architecture_t, Layer_t>>; class TMVA::DNN::TAdadelta< Architecture_t, Layer_t, DeepNet_t >Adadelta Optimizer class. ; This class represents the Adadelta Optimizer. ; Definition at line 45 of file Adadelta.h. Public Types; using Matrix_t = typename Architecture_t::Matrix_t;  ; using Scalar_t = typename Architecture_t::Scalar_t;  ;  Public Types inherited from TMVA::DNN::VOptimizer< Architecture_t, Layer_t, DeepNet_t >; using Matrix_t = typename Architecture_t::Matrix_t;  ; using Scalar_t = typename Architecture_t::Scalar_t;  . Public Member Functions;  TAdadelta (DeepNet_t &deepNet, Scalar_t learningRate=1.0, Scalar_t rho=0.95, Scalar_t epsilon=1e-8);  Constructor. ;  ;  ~TAdadelta ()=default;  Destructor. ;  ; Scalar_t GetEpsilon () const;  ; std::vector< std::vector< Matrix_t > > & GetPastSquaredBiasGradients ();  ; std::vector< Matrix_t > & GetPastSquaredBiasGradientsAt (size_t i);  ; std::vector< std::vector< Matrix_t > > & GetPastSquaredBiasUpdates ();  ; std::vector< Matrix_t > & GetPastSquaredBiasUpdatesAt (size_t i);  ; std::vector< std::vector< Matrix_t > > & GetPastSquaredWeightGradients ();  ; std::vector< Matrix_t > & GetPastSquaredWeightGradientsAt (size_t i);  ; std::vector< std::vector< Matrix_t > > & GetPastSquaredWeightUpdates ();  ; std::vector< Matrix_t > & GetPastSquaredWeightUpdatesAt (size_t i);  ; Scalar_t GetRho () const;  Getters. ;  ;  Public Member Functions inherited from TMVA::DNN::VOptimizer< Architecture_t, Layer_t, DeepNet_t >;  VOptimizer (Scalar_t learningRate, DeepNet_t &deepNet);  Constructor. ;  ; virtual ~VOpt",MatchSource.WIKI,doc/master/classTMVA_1_1DNN_1_1TAdadelta.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1DNN_1_1TAdadelta.html
Modifiability,inherit,inherited,". ROOT: TMVA::DNN::TAdagrad< Architecture_t, Layer_t, DeepNet_t > Class Template Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Protected Member Functions |; Protected Attributes |; List of all members ; TMVA::DNN::TAdagrad< Architecture_t, Layer_t, DeepNet_t > Class Template Reference. ; template<typename Architecture_t, typename Layer_t = VGeneralLayer<Architecture_t>, typename DeepNet_t = TDeepNet<Architecture_t, Layer_t>>; class TMVA::DNN::TAdagrad< Architecture_t, Layer_t, DeepNet_t >Adagrad Optimizer class. ; This class represents the Adagrad Optimizer. ; Definition at line 45 of file Adagrad.h. Public Types; using Matrix_t = typename Architecture_t::Matrix_t;  ; using Scalar_t = typename Architecture_t::Scalar_t;  ;  Public Types inherited from TMVA::DNN::VOptimizer< Architecture_t, Layer_t, DeepNet_t >; using Matrix_t = typename Architecture_t::Matrix_t;  ; using Scalar_t = typename Architecture_t::Scalar_t;  . Public Member Functions;  TAdagrad (DeepNet_t &deepNet, Scalar_t learningRate=0.01, Scalar_t epsilon=1e-8);  Constructor. ;  ;  ~TAdagrad ()=default;  Destructor. ;  ; Scalar_t GetEpsilon () const;  Getters. ;  ; std::vector< std::vector< Matrix_t > > & GetPastSquaredBiasGradients ();  ; std::vector< Matrix_t > & GetPastSquaredBiasGradientsAt (size_t i);  ; std::vector< std::vector< Matrix_t > > & GetPastSquaredWeightGradients ();  ; std::vector< Matrix_t > & GetPastSquaredWeightGradientsAt (size_t i);  ;  Public Member Functions inherited from TMVA::DNN::VOptimizer< Architecture_t, Layer_t, DeepNet_t >;  VOptimizer (Scalar_t learningRate, DeepNet_t &deepNet);  Constructor. ;  ; virtual ~VOptimizer ()=default;  Virtual Destructor. ;  ; size_t GetGlobalStep () const;  ; Layer_t * GetLayerAt (size_t i);  ; std::vector< Layer_t * > & GetLayers ();  ; Scalar_t GetLearningRate () const;  Getters. ;  ; void IncrementGlobalStep ();  Increments the gl",MatchSource.WIKI,doc/master/classTMVA_1_1DNN_1_1TAdagrad.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1DNN_1_1TAdagrad.html
Performance,optimiz,optimization,"t, Scalar_t learningRate=0.01, Scalar_t epsilon=1e-8);  Constructor. ;  ;  ~TAdagrad ()=default;  Destructor. ;  ; Scalar_t GetEpsilon () const;  Getters. ;  ; std::vector< std::vector< Matrix_t > > & GetPastSquaredBiasGradients ();  ; std::vector< Matrix_t > & GetPastSquaredBiasGradientsAt (size_t i);  ; std::vector< std::vector< Matrix_t > > & GetPastSquaredWeightGradients ();  ; std::vector< Matrix_t > & GetPastSquaredWeightGradientsAt (size_t i);  ;  Public Member Functions inherited from TMVA::DNN::VOptimizer< Architecture_t, Layer_t, DeepNet_t >;  VOptimizer (Scalar_t learningRate, DeepNet_t &deepNet);  Constructor. ;  ; virtual ~VOptimizer ()=default;  Virtual Destructor. ;  ; size_t GetGlobalStep () const;  ; Layer_t * GetLayerAt (size_t i);  ; std::vector< Layer_t * > & GetLayers ();  ; Scalar_t GetLearningRate () const;  Getters. ;  ; void IncrementGlobalStep ();  Increments the global step. ;  ; void SetLearningRate (size_t learningRate);  Setters. ;  ; void Step ();  Performs one step of optimization. ;  . Protected Member Functions; void UpdateBiases (size_t layerIndex, std::vector< Matrix_t > &biases, const std::vector< Matrix_t > &biasGradients);  Update the biases, given the current bias gradients. ;  ; void UpdateWeights (size_t layerIndex, std::vector< Matrix_t > &weights, const std::vector< Matrix_t > &weightGradients);  Update the weights, given the current weight gradients. ;  . Protected Attributes; Scalar_t fEpsilon;  The Smoothing term used to avoid division by zero. ;  ; std::vector< std::vector< Matrix_t > > fPastSquaredBiasGradients;  The sum of the square of the past bias gradients associated with the deep net. ;  ; std::vector< std::vector< Matrix_t > > fPastSquaredWeightGradients;  The sum of the square of the past weight gradients associated with the deep net. ;  ; std::vector< std::vector< Matrix_t > > fWorkBiasTensor;  working tensor used to keep a temporary copy of bias or bias gradients ;  ; std::vector< std::vector< Matrix_t > > fW",MatchSource.WIKI,doc/master/classTMVA_1_1DNN_1_1TAdagrad.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1DNN_1_1TAdagrad.html
Safety,avoid,avoid,"mber Functions inherited from TMVA::DNN::VOptimizer< Architecture_t, Layer_t, DeepNet_t >;  VOptimizer (Scalar_t learningRate, DeepNet_t &deepNet);  Constructor. ;  ; virtual ~VOptimizer ()=default;  Virtual Destructor. ;  ; size_t GetGlobalStep () const;  ; Layer_t * GetLayerAt (size_t i);  ; std::vector< Layer_t * > & GetLayers ();  ; Scalar_t GetLearningRate () const;  Getters. ;  ; void IncrementGlobalStep ();  Increments the global step. ;  ; void SetLearningRate (size_t learningRate);  Setters. ;  ; void Step ();  Performs one step of optimization. ;  . Protected Member Functions; void UpdateBiases (size_t layerIndex, std::vector< Matrix_t > &biases, const std::vector< Matrix_t > &biasGradients);  Update the biases, given the current bias gradients. ;  ; void UpdateWeights (size_t layerIndex, std::vector< Matrix_t > &weights, const std::vector< Matrix_t > &weightGradients);  Update the weights, given the current weight gradients. ;  . Protected Attributes; Scalar_t fEpsilon;  The Smoothing term used to avoid division by zero. ;  ; std::vector< std::vector< Matrix_t > > fPastSquaredBiasGradients;  The sum of the square of the past bias gradients associated with the deep net. ;  ; std::vector< std::vector< Matrix_t > > fPastSquaredWeightGradients;  The sum of the square of the past weight gradients associated with the deep net. ;  ; std::vector< std::vector< Matrix_t > > fWorkBiasTensor;  working tensor used to keep a temporary copy of bias or bias gradients ;  ; std::vector< std::vector< Matrix_t > > fWorkWeightTensor;  working tensor used to keep a temporary copy of weights or weight gradients ;  ;  Protected Attributes inherited from TMVA::DNN::VOptimizer< Architecture_t, Layer_t, DeepNet_t >; DeepNet_t & fDeepNet;  The reference to the deep net. ;  ; size_t fGlobalStep;  The current global step count during training. ;  ; Scalar_t fLearningRate;  The learning rate used for training. ;  . #include <TMVA/DNN/Adagrad.h>. Inheritance diagram for TMVA::DNN::TAdagr",MatchSource.WIKI,doc/master/classTMVA_1_1DNN_1_1TAdagrad.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1DNN_1_1TAdagrad.html
Usability,learn,learningRate,"ference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Protected Member Functions |; Protected Attributes |; List of all members ; TMVA::DNN::TAdagrad< Architecture_t, Layer_t, DeepNet_t > Class Template Reference. ; template<typename Architecture_t, typename Layer_t = VGeneralLayer<Architecture_t>, typename DeepNet_t = TDeepNet<Architecture_t, Layer_t>>; class TMVA::DNN::TAdagrad< Architecture_t, Layer_t, DeepNet_t >Adagrad Optimizer class. ; This class represents the Adagrad Optimizer. ; Definition at line 45 of file Adagrad.h. Public Types; using Matrix_t = typename Architecture_t::Matrix_t;  ; using Scalar_t = typename Architecture_t::Scalar_t;  ;  Public Types inherited from TMVA::DNN::VOptimizer< Architecture_t, Layer_t, DeepNet_t >; using Matrix_t = typename Architecture_t::Matrix_t;  ; using Scalar_t = typename Architecture_t::Scalar_t;  . Public Member Functions;  TAdagrad (DeepNet_t &deepNet, Scalar_t learningRate=0.01, Scalar_t epsilon=1e-8);  Constructor. ;  ;  ~TAdagrad ()=default;  Destructor. ;  ; Scalar_t GetEpsilon () const;  Getters. ;  ; std::vector< std::vector< Matrix_t > > & GetPastSquaredBiasGradients ();  ; std::vector< Matrix_t > & GetPastSquaredBiasGradientsAt (size_t i);  ; std::vector< std::vector< Matrix_t > > & GetPastSquaredWeightGradients ();  ; std::vector< Matrix_t > & GetPastSquaredWeightGradientsAt (size_t i);  ;  Public Member Functions inherited from TMVA::DNN::VOptimizer< Architecture_t, Layer_t, DeepNet_t >;  VOptimizer (Scalar_t learningRate, DeepNet_t &deepNet);  Constructor. ;  ; virtual ~VOptimizer ()=default;  Virtual Destructor. ;  ; size_t GetGlobalStep () const;  ; Layer_t * GetLayerAt (size_t i);  ; std::vector< Layer_t * > & GetLayers ();  ; Scalar_t GetLearningRate () const;  Getters. ;  ; void IncrementGlobalStep ();  Increments the global step. ;  ; void SetLearningRate (size_t learningRate);  Setters. ;  ; void Ste",MatchSource.WIKI,doc/master/classTMVA_1_1DNN_1_1TAdagrad.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1DNN_1_1TAdagrad.html
Modifiability,inherit,inherited,". ROOT: TMVA::DNN::TAdam< Architecture_t, Layer_t, DeepNet_t > Class Template Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Protected Member Functions |; Protected Attributes |; List of all members ; TMVA::DNN::TAdam< Architecture_t, Layer_t, DeepNet_t > Class Template Reference. ; template<typename Architecture_t, typename Layer_t = VGeneralLayer<Architecture_t>, typename DeepNet_t = TDeepNet<Architecture_t, Layer_t>>; class TMVA::DNN::TAdam< Architecture_t, Layer_t, DeepNet_t >Adam Optimizer class. ; This class represents the Adam Optimizer. ; Definition at line 45 of file Adam.h. Public Types; using Matrix_t = typename Architecture_t::Matrix_t;  ; using Scalar_t = typename Architecture_t::Scalar_t;  ;  Public Types inherited from TMVA::DNN::VOptimizer< Architecture_t, Layer_t, DeepNet_t >; using Matrix_t = typename Architecture_t::Matrix_t;  ; using Scalar_t = typename Architecture_t::Scalar_t;  . Public Member Functions;  TAdam (DeepNet_t &deepNet, Scalar_t learningRate=0.001, Scalar_t beta1=0.9, Scalar_t beta2=0.999, Scalar_t epsilon=1e-7);  Constructor. ;  ;  ~TAdam ()=default;  Destructor. ;  ; Scalar_t GetBeta1 () const;  Getters. ;  ; Scalar_t GetBeta2 () const;  ; Scalar_t GetEpsilon () const;  ; std::vector< std::vector< Matrix_t > > & GetFirstMomentBiases ();  ; std::vector< Matrix_t > & GetFirstMomentBiasesAt (size_t i);  ; std::vector< std::vector< Matrix_t > > & GetFirstMomentWeights ();  ; std::vector< Matrix_t > & GetFirstMomentWeightsAt (size_t i);  ; std::vector< std::vector< Matrix_t > > & GetSecondMomentBiases ();  ; std::vector< Matrix_t > & GetSecondMomentBiasesAt (size_t i);  ; std::vector< std::vector< Matrix_t > > & GetSecondMomentWeights ();  ; std::vector< Matrix_t > & GetSecondMomentWeightsAt (size_t i);  ;  Public Member Functions inherited from TMVA::DNN::VOptimizer< Architecture_t, Layer_t, DeepNet_t >;  VOptimizer (Scalar_t ",MatchSource.WIKI,doc/master/classTMVA_1_1DNN_1_1TAdam.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1DNN_1_1TAdam.html
Performance,optimiz,optimization,"Matrix_t > & GetFirstMomentBiasesAt (size_t i);  ; std::vector< std::vector< Matrix_t > > & GetFirstMomentWeights ();  ; std::vector< Matrix_t > & GetFirstMomentWeightsAt (size_t i);  ; std::vector< std::vector< Matrix_t > > & GetSecondMomentBiases ();  ; std::vector< Matrix_t > & GetSecondMomentBiasesAt (size_t i);  ; std::vector< std::vector< Matrix_t > > & GetSecondMomentWeights ();  ; std::vector< Matrix_t > & GetSecondMomentWeightsAt (size_t i);  ;  Public Member Functions inherited from TMVA::DNN::VOptimizer< Architecture_t, Layer_t, DeepNet_t >;  VOptimizer (Scalar_t learningRate, DeepNet_t &deepNet);  Constructor. ;  ; virtual ~VOptimizer ()=default;  Virtual Destructor. ;  ; size_t GetGlobalStep () const;  ; Layer_t * GetLayerAt (size_t i);  ; std::vector< Layer_t * > & GetLayers ();  ; Scalar_t GetLearningRate () const;  Getters. ;  ; void IncrementGlobalStep ();  Increments the global step. ;  ; void SetLearningRate (size_t learningRate);  Setters. ;  ; void Step ();  Performs one step of optimization. ;  . Protected Member Functions; void UpdateBiases (size_t layerIndex, std::vector< Matrix_t > &biases, const std::vector< Matrix_t > &biasGradients);  Update the biases, given the current bias gradients. ;  ; void UpdateWeights (size_t layerIndex, std::vector< Matrix_t > &weights, const std::vector< Matrix_t > &weightGradients);  Update the weights, given the current weight gradients. ;  . Protected Attributes; Scalar_t fBeta1;  The Beta1 constant used by the optimizer. ;  ; Scalar_t fBeta2;  The Beta2 constant used by the optimizer. ;  ; Scalar_t fEpsilon;  The Smoothing term used to avoid division by zero. ;  ; std::vector< std::vector< Matrix_t > > fFirstMomentBiases;  The decaying average of the first moment of the past bias gradients associated with the deep net. ;  ; std::vector< std::vector< Matrix_t > > fFirstMomentWeights;  The decaying average of the first moment of the past weight gradients associated with the deep net. ;  ; std::vector< std::vec",MatchSource.WIKI,doc/master/classTMVA_1_1DNN_1_1TAdam.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1DNN_1_1TAdam.html
Safety,avoid,avoid,"eepNet);  Constructor. ;  ; virtual ~VOptimizer ()=default;  Virtual Destructor. ;  ; size_t GetGlobalStep () const;  ; Layer_t * GetLayerAt (size_t i);  ; std::vector< Layer_t * > & GetLayers ();  ; Scalar_t GetLearningRate () const;  Getters. ;  ; void IncrementGlobalStep ();  Increments the global step. ;  ; void SetLearningRate (size_t learningRate);  Setters. ;  ; void Step ();  Performs one step of optimization. ;  . Protected Member Functions; void UpdateBiases (size_t layerIndex, std::vector< Matrix_t > &biases, const std::vector< Matrix_t > &biasGradients);  Update the biases, given the current bias gradients. ;  ; void UpdateWeights (size_t layerIndex, std::vector< Matrix_t > &weights, const std::vector< Matrix_t > &weightGradients);  Update the weights, given the current weight gradients. ;  . Protected Attributes; Scalar_t fBeta1;  The Beta1 constant used by the optimizer. ;  ; Scalar_t fBeta2;  The Beta2 constant used by the optimizer. ;  ; Scalar_t fEpsilon;  The Smoothing term used to avoid division by zero. ;  ; std::vector< std::vector< Matrix_t > > fFirstMomentBiases;  The decaying average of the first moment of the past bias gradients associated with the deep net. ;  ; std::vector< std::vector< Matrix_t > > fFirstMomentWeights;  The decaying average of the first moment of the past weight gradients associated with the deep net. ;  ; std::vector< std::vector< Matrix_t > > fSecondMomentBiases;  The decaying average of the second moment of the past bias gradients associated with the deep net. ;  ; std::vector< std::vector< Matrix_t > > fSecondMomentWeights;  The decaying average of the second moment of the past weight gradients associated with the deep net. ;  ;  Protected Attributes inherited from TMVA::DNN::VOptimizer< Architecture_t, Layer_t, DeepNet_t >; DeepNet_t & fDeepNet;  The reference to the deep net. ;  ; size_t fGlobalStep;  The current global step count during training. ;  ; Scalar_t fLearningRate;  The learning rate used for training. ; ",MatchSource.WIKI,doc/master/classTMVA_1_1DNN_1_1TAdam.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1DNN_1_1TAdam.html
Usability,learn,learningRate,"lass Template Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Protected Member Functions |; Protected Attributes |; List of all members ; TMVA::DNN::TAdam< Architecture_t, Layer_t, DeepNet_t > Class Template Reference. ; template<typename Architecture_t, typename Layer_t = VGeneralLayer<Architecture_t>, typename DeepNet_t = TDeepNet<Architecture_t, Layer_t>>; class TMVA::DNN::TAdam< Architecture_t, Layer_t, DeepNet_t >Adam Optimizer class. ; This class represents the Adam Optimizer. ; Definition at line 45 of file Adam.h. Public Types; using Matrix_t = typename Architecture_t::Matrix_t;  ; using Scalar_t = typename Architecture_t::Scalar_t;  ;  Public Types inherited from TMVA::DNN::VOptimizer< Architecture_t, Layer_t, DeepNet_t >; using Matrix_t = typename Architecture_t::Matrix_t;  ; using Scalar_t = typename Architecture_t::Scalar_t;  . Public Member Functions;  TAdam (DeepNet_t &deepNet, Scalar_t learningRate=0.001, Scalar_t beta1=0.9, Scalar_t beta2=0.999, Scalar_t epsilon=1e-7);  Constructor. ;  ;  ~TAdam ()=default;  Destructor. ;  ; Scalar_t GetBeta1 () const;  Getters. ;  ; Scalar_t GetBeta2 () const;  ; Scalar_t GetEpsilon () const;  ; std::vector< std::vector< Matrix_t > > & GetFirstMomentBiases ();  ; std::vector< Matrix_t > & GetFirstMomentBiasesAt (size_t i);  ; std::vector< std::vector< Matrix_t > > & GetFirstMomentWeights ();  ; std::vector< Matrix_t > & GetFirstMomentWeightsAt (size_t i);  ; std::vector< std::vector< Matrix_t > > & GetSecondMomentBiases ();  ; std::vector< Matrix_t > & GetSecondMomentBiasesAt (size_t i);  ; std::vector< std::vector< Matrix_t > > & GetSecondMomentWeights ();  ; std::vector< Matrix_t > & GetSecondMomentWeightsAt (size_t i);  ;  Public Member Functions inherited from TMVA::DNN::VOptimizer< Architecture_t, Layer_t, DeepNet_t >;  VOptimizer (Scalar_t learningRate, DeepNet_t &deepNet);  Constructor. ;  ; virtual ~",MatchSource.WIKI,doc/master/classTMVA_1_1DNN_1_1TAdam.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1DNN_1_1TAdam.html
Security,access,accessed,". ROOT: TMVA::DNN::TBatch< AArchitecture > Class Template Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Private Types |; Private Attributes |; List of all members ; TMVA::DNN::TBatch< AArchitecture > Class Template Reference. ; template<typename AArchitecture>; class TMVA::DNN::TBatch< AArchitecture >TBatch. ; Class representing training batches consisting of a matrix of input data and a matrix of output data. The input and output data can be accessed using the GetInput() and GetOutput() member functions.; Template Parameters. AArchitectureThe underlying architecture. . Definition at line 54 of file DataLoader.h. Public Member Functions;  TBatch (const TBatch &)=default;  ;  TBatch (Matrix_t &, Matrix_t &, Matrix_t &);  ;  TBatch (TBatch &&)=default;  ; Matrix_t & GetInput ();  Return the matrix representing the input data. ;  ; Matrix_t & GetOutput ();  Return the matrix representing the output data. ;  ; Matrix_t & GetWeights ();  Return the matrix holding the event weights. ;  ; TBatch & operator= (const TBatch &)=default;  ; TBatch & operator= (TBatch &&)=default;  . Private Types; using Matrix_t = typename AArchitecture::Matrix_t;  . Private Attributes; Matrix_t fInputMatrix;  ; Matrix_t fOutputMatrix;  ; Matrix_t fWeightMatrix;  . #include <TMVA/DNN/DataLoader.h>; Member Typedef Documentation. ◆ Matrix_t. template<typename AArchitecture > . using TMVA::DNN::TBatch< AArchitecture >::Matrix_t = typename AArchitecture::Matrix_t. private . Definition at line 58 of file DataLoader.h. Constructor & Destructor Documentation. ◆ TBatch() [1/3]. template<typename AArchitecture > . TMVA::DNN::TBatch< AArchitecture >::TBatch ; (; Matrix_t & ; inputMatrix, . Matrix_t & ; outputMatrix, . Matrix_t & ; weightMatrix . ). Definition at line 192 of file DataLoader.h. ◆ TBatch() [2/3]. template<typename AArchitecture > . TMVA::DNN::TBatch< AArchitecture >::TBatch ; (; const TBatch< AArc",MatchSource.WIKI,doc/master/classTMVA_1_1DNN_1_1TBatch.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1DNN_1_1TBatch.html
Modifiability,variab,variable,". ROOT: TMVA::DNN::TBatchNormLayer< Architecture_t > Class Template Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Static Protected Member Functions |; Private Attributes |; List of all members ; TMVA::DNN::TBatchNormLayer< Architecture_t > Class Template Reference. ; template<typename Architecture_t>; class TMVA::DNN::TBatchNormLayer< Architecture_t >Layer implementing Batch Normalization. ; The input from each batch are normalized during training to have zero mean and unit variance and they are then scaled by two parameter, different for each input variable:; a scale factor gamma; an offset beta. In addition a running batch mean and variance is computed and stored in the class During inference the inputs are not normalized using the batch mean but the previously computed at running mean and variance If momentum is in [0,1) the running mean and variances are the exponential averages using the momentum value running_mean = momentum * running_mean + (1-momentum) * batch_mean If instead momentum<1 the cumulative average is computed running_mean = (nb/(nb+1) * running_mean + 1/(nb+1) * batch_mean; See more at [https://arxiv.org/pdf/1502.03167v3.pdf] ; Definition at line 64 of file BatchNormLayer.h. Public Types; using BNormDescriptors_t = typename Architecture_t::BNormDescriptors_t;  ; using HelperDescriptor_t = typename Architecture_t::TensorDescriptor_t;  ; using Matrix_t = typename Architecture_t::Matrix_t;  ; using Scalar_t = typename Architecture_t::Scalar_t;  ; using Tensor_t = typename Architecture_t::Tensor_t;  . Public Member Functions;  TBatchNormLayer (const TBatchNormLayer &);  Copy Constructor. ;  ;  TBatchNormLayer (size_t batchSize, size_t inputDepth, size_t inputHeight, size_t inputWidth, const std::vector< size_t > &shape, int axis=-1, Scalar_t momentum=-1., Scalar_t epsilon=0.0001);  Constructor. ;  ;  TBatchNormLayer (TBatchNormLayer< Archite",MatchSource.WIKI,doc/master/classTMVA_1_1DNN_1_1TBatchNormLayer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1DNN_1_1TBatchNormLayer.html
Usability,learn,learningRate," const Tensor_t & GetOutput () const;  ; Matrix_t GetOutputAt (size_t i);  ; const Matrix_t & GetOutputAt (size_t i) const;  ; std::vector< Matrix_t > & GetWeightGradients ();  ; const std::vector< Matrix_t > & GetWeightGradients () const;  ; Matrix_t & GetWeightGradientsAt (size_t i);  ; const Matrix_t & GetWeightGradientsAt (size_t i) const;  ; std::vector< Matrix_t > & GetWeights ();  ; const std::vector< Matrix_t > & GetWeights () const;  ; Matrix_t & GetWeightsAt (size_t i);  ; const Matrix_t & GetWeightsAt (size_t i) const;  ; size_t GetWidth () const;  ; bool IsTraining () const;  ; void ReadMatrixXML (void *node, const char *name, Matrix_t &matrix);  ; void SetBatchSize (size_t batchSize);  Setters. ;  ; void SetDepth (size_t depth);  ; virtual void SetDropoutProbability (Scalar_t);  Set Dropout probability. ;  ; void SetHeight (size_t height);  ; void SetInputDepth (size_t inputDepth);  ; void SetInputHeight (size_t inputHeight);  ; void SetInputWidth (size_t inputWidth);  ; void SetIsTraining (bool isTraining);  ; void SetWidth (size_t width);  ; void Update (const Scalar_t learningRate);  Updates the weights and biases, given the learning rate. ;  ; void UpdateBiases (const std::vector< Matrix_t > &biasGradients, const Scalar_t learningRate);  Updates the biases, given the gradients and the learning rate. ;  ; void UpdateBiasGradients (const std::vector< Matrix_t > &biasGradients, const Scalar_t learningRate);  Updates the bias gradients, given some other weight gradients and learning rate. ;  ; void UpdateWeightGradients (const std::vector< Matrix_t > &weightGradients, const Scalar_t learningRate);  Updates the weight gradients, given some other weight gradients and learning rate. ;  ; void UpdateWeights (const std::vector< Matrix_t > &weightGradients, const Scalar_t learningRate);  Updates the weights, given the gradients and the learning rate,. ;  ; void WriteMatrixToXML (void *node, const char *name, const Matrix_t &matrix);  ; void WriteTensorToXML (",MatchSource.WIKI,doc/master/classTMVA_1_1DNN_1_1TBatchNormLayer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1DNN_1_1TBatchNormLayer.html
Availability,error,errors,"atrix_t &C, const Matrix_t &A, const Matrix_t &B);  Standard multiplication of two matrices A and B with the result being written into C. ;  ; static void TransposeMultiply (Matrix_t &output, const Matrix_t &input, const Matrix_t &Weights, Scalar_t alpha=1.0, Scalar_t beta=0.);  Matrix multiplication of two matrices A and B^T (transposed) with the result being written into C. ;  ; static void Hadamard (Tensor_t &A, const Tensor_t &B);  In-place Hadamard (element-wise) product of matrices A and B with the result being written into A. ;  ; static void Hadamard (Matrix_t &A, const Matrix_t &B);  ; static void SumColumns (Matrix_t &B, const Matrix_t &A, Scalar_t alpha=1.0, Scalar_t beta=0.);  Sum columns of (m x n) matrix A and write the results into the first m elements in A. ;  ; static Scalar_t Sum (const Matrix_t &A);  Compute the sum of all elements in A. ;  ; static bool AlmostEquals (const Matrix_t &A, const Matrix_t &B, double epsilon=0.1);  Check two matrices for equality, taking floating point arithmetic errors into account. ;  ; static void ConstAdd (Matrix_t &A, Scalar_t beta);  Add the constant beta to all the elements of matrix A and write the result into A. ;  ; static void ConstMult (Matrix_t &A, Scalar_t beta);  Multiply the constant beta to all the elements of matrix A and write the result into A. ;  ; static void ReciprocalElementWise (Matrix_t &A);  Reciprocal each element of the matrix A and write the result into A. ;  ; static void SquareElementWise (Matrix_t &A);  Square each element of the matrix A and write the result into A. ;  ; static void SqrtElementWise (Matrix_t &A);  Square root each element of the matrix A and write the result into A. ;  ; static void AdamUpdate (Matrix_t &A, const Matrix_t &M, const Matrix_t &V, Scalar_t alpha, Scalar_t eps);  Adam updates. ;  ; static void AdamUpdateFirstMom (Matrix_t &A, const Matrix_t &B, Scalar_t beta);  ; static void AdamUpdateSecondMom (Matrix_t &A, const Matrix_t &B, Scalar_t beta);  ; static void",MatchSource.WIKI,doc/master/classTMVA_1_1DNN_1_1TCpu.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1DNN_1_1TCpu.html
Deployability,update,updates,"to the first m elements in A. ;  ; static Scalar_t Sum (const Matrix_t &A);  Compute the sum of all elements in A. ;  ; static bool AlmostEquals (const Matrix_t &A, const Matrix_t &B, double epsilon=0.1);  Check two matrices for equality, taking floating point arithmetic errors into account. ;  ; static void ConstAdd (Matrix_t &A, Scalar_t beta);  Add the constant beta to all the elements of matrix A and write the result into A. ;  ; static void ConstMult (Matrix_t &A, Scalar_t beta);  Multiply the constant beta to all the elements of matrix A and write the result into A. ;  ; static void ReciprocalElementWise (Matrix_t &A);  Reciprocal each element of the matrix A and write the result into A. ;  ; static void SquareElementWise (Matrix_t &A);  Square each element of the matrix A and write the result into A. ;  ; static void SqrtElementWise (Matrix_t &A);  Square root each element of the matrix A and write the result into A. ;  ; static void AdamUpdate (Matrix_t &A, const Matrix_t &M, const Matrix_t &V, Scalar_t alpha, Scalar_t eps);  Adam updates. ;  ; static void AdamUpdateFirstMom (Matrix_t &A, const Matrix_t &B, Scalar_t beta);  ; static void AdamUpdateSecondMom (Matrix_t &A, const Matrix_t &B, Scalar_t beta);  ; static void PrintTensor (const Tensor_t &A, const std::string name=""Cpu-tensor"", bool truncate=false);  . Static Private Attributes; static TRandom * fgRandomGen = nullptr;  . #include <TMVA/DNN/Architectures/Cpu.h>; Member Typedef Documentation. ◆ ActivationDescriptor_t. template<typename AReal = Float_t> . using TMVA::DNN::TCpu< AReal >::ActivationDescriptor_t = DummyDescriptor. Definition at line 75 of file Cpu.h. ◆ AlgorithmBackward_t. template<typename AReal = Float_t> . using TMVA::DNN::TCpu< AReal >::AlgorithmBackward_t = DummyConvolutionBwdDataAlgo. Definition at line 83 of file Cpu.h. ◆ AlgorithmDataType_t. template<typename AReal = Float_t> . using TMVA::DNN::TCpu< AReal >::AlgorithmDataType_t = DummyDataType. Definition at line 85 of file Cpu.",MatchSource.WIKI,doc/master/classTMVA_1_1DNN_1_1TCpu.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1DNN_1_1TCpu.html
Integrability,interface,interface,". ROOT: TMVA::DNN::TCpu< AReal > Class Template Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Static Public Member Functions |; Static Private Attributes |; List of all members ; TMVA::DNN::TCpu< AReal > Class Template Reference. ; template<typename AReal = Float_t>; class TMVA::DNN::TCpu< AReal >The TCpu architecture class. ; Low-level interface class for multi-threaded CPU architectures. Contains as public types the declaration of the scalar, matrix and data loader types for this architecture as well as the remaining functions in the low-level interface in the form of static members. ; Definition at line 64 of file Cpu.h. Public Types; using ActivationDescriptor_t = DummyDescriptor;  ; using AlgorithmBackward_t = DummyConvolutionBwdDataAlgo;  ; using AlgorithmDataType_t = DummyDataType;  ; using AlgorithmForward_t = DummyConvolutionFwdAlgo;  ; using AlgorithmHelper_t = DummyConvolutionBwdFilterAlgo;  ; using BNormDescriptors_t = TDNNGenDescriptors< BNormLayer_t >;  ; using BNormLayer_t = TBatchNormLayer< TCpu< AReal > >;  ; using ConvDescriptors_t = CNN::TCNNDescriptors< ConvLayer_t >;  ; using ConvLayer_t = CNN::TConvLayer< TCpu< AReal > >;  ; using ConvolutionDescriptor_t = DummyDescriptor;  ; using ConvWorkspace_t = CNN::TCNNWorkspace< ConvLayer_t >;  ; using DeviceBuffer_t = TCpuBuffer< AReal >;  ; using DropoutDescriptor_t = DummyDescriptor;  ; using EmptyDescriptor_t = DummyDescriptor;  ; using FilterDescriptor_t = DummyDescriptor;  ; using GenLayer_t = VGeneralLayer< TCpu< AReal > >;  ; using HostBuffer_t = TCpuBuffer< AReal >;  ; using Matrix_t = TCpuMatrix< AReal >;  ; using PoolingDescriptor_t = DummyDescriptor;  ; using PoolingDescriptors_t = CNN::TCNNDescriptors< PoolingLayer_t >;  ; using PoolingLayer_t = CNN::TMaxPoolLayer< TCpu< AReal > >;  ; using PoolingWorkspace_t = CNN::TCNNWorkspace< PoolingLayer_t >;  ; using RecurrentDescriptor_t = DummyDataType;  ; using Redu",MatchSource.WIKI,doc/master/classTMVA_1_1DNN_1_1TCpu.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1DNN_1_1TCpu.html
Modifiability,extend,extended," AddRowWise (Matrix_t &output, const Matrix_t &biases);  Add the vectors biases row-wise to the matrix output. ;  ; static void AddRowWise (Tensor_t &output, const Matrix_t &biases);  ; Backward Propagation (Dense Layers); Low-level functions required for the forward propagation of activations through the network. . static void Backward (Tensor_t &activationGradientsBackward, Matrix_t &weightGradients, Matrix_t &biasGradients, const Tensor_t &df, const Tensor_t &activationGradients, const Matrix_t &weights, const Tensor_t &activationBackward);  Perform the complete backward propagation step. ;  ; static void ScaleAdd (Matrix_t &A, const Matrix_t &B, Scalar_t beta=1.0);  Adds a the elements in matrix B scaled by c to the elements in the matrix A. ;  ; static void Copy (Matrix_t &B, const Matrix_t &A);  ; template<typename AMatrix_t > ; static void CopyDiffArch (Matrix_t &B, const AMatrix_t &A);  ; static void ScaleAdd (Tensor_t &A, const Tensor_t &B, Scalar_t beta=1.0);  Above functions extended to vectors. ;  ; static void Copy (Tensor_t &A, const Tensor_t &B);  ; template<typename ATensor_t > ; static void CopyDiffArch (Tensor_t &A, const ATensor_t &B);  ; template<typename AMatrix_t > ; static void CopyDiffArch (std::vector< Matrix_t > &A, const std::vector< AMatrix_t > &B);  ; Activation Functions; For each activation function, the low-level interface contains two routines.; One that applies the activation function to a matrix and one that evaluate the derivatives of the activation function at the elements of a given matrix and writes the results into the result matrix. . static void ActivationFunctionForward (Tensor_t &X, EActivationFunction activFunct, const ActivationDescriptor_t activationDescr, const double coef=0.0, const Scalar_t alpha=1, const Scalar_t beta=0);  ; static void ActivationFunctionBackward (Tensor_t &dX, const Tensor_t &Y, const Tensor_t &dY, const Tensor_t &X, EActivationFunction activFunct, const ActivationDescriptor_t activationDescr, const",MatchSource.WIKI,doc/master/classTMVA_1_1DNN_1_1TCpu.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1DNN_1_1TCpu.html
Performance,multi-thread,multi-threaded,". ROOT: TMVA::DNN::TCpu< AReal > Class Template Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Static Public Member Functions |; Static Private Attributes |; List of all members ; TMVA::DNN::TCpu< AReal > Class Template Reference. ; template<typename AReal = Float_t>; class TMVA::DNN::TCpu< AReal >The TCpu architecture class. ; Low-level interface class for multi-threaded CPU architectures. Contains as public types the declaration of the scalar, matrix and data loader types for this architecture as well as the remaining functions in the low-level interface in the form of static members. ; Definition at line 64 of file Cpu.h. Public Types; using ActivationDescriptor_t = DummyDescriptor;  ; using AlgorithmBackward_t = DummyConvolutionBwdDataAlgo;  ; using AlgorithmDataType_t = DummyDataType;  ; using AlgorithmForward_t = DummyConvolutionFwdAlgo;  ; using AlgorithmHelper_t = DummyConvolutionBwdFilterAlgo;  ; using BNormDescriptors_t = TDNNGenDescriptors< BNormLayer_t >;  ; using BNormLayer_t = TBatchNormLayer< TCpu< AReal > >;  ; using ConvDescriptors_t = CNN::TCNNDescriptors< ConvLayer_t >;  ; using ConvLayer_t = CNN::TConvLayer< TCpu< AReal > >;  ; using ConvolutionDescriptor_t = DummyDescriptor;  ; using ConvWorkspace_t = CNN::TCNNWorkspace< ConvLayer_t >;  ; using DeviceBuffer_t = TCpuBuffer< AReal >;  ; using DropoutDescriptor_t = DummyDescriptor;  ; using EmptyDescriptor_t = DummyDescriptor;  ; using FilterDescriptor_t = DummyDescriptor;  ; using GenLayer_t = VGeneralLayer< TCpu< AReal > >;  ; using HostBuffer_t = TCpuBuffer< AReal >;  ; using Matrix_t = TCpuMatrix< AReal >;  ; using PoolingDescriptor_t = DummyDescriptor;  ; using PoolingDescriptors_t = CNN::TCNNDescriptors< PoolingLayer_t >;  ; using PoolingLayer_t = CNN::TMaxPoolLayer< TCpu< AReal > >;  ; using PoolingWorkspace_t = CNN::TCNNWorkspace< PoolingLayer_t >;  ; using RecurrentDescriptor_t = DummyDataType;  ; using Redu",MatchSource.WIKI,doc/master/classTMVA_1_1DNN_1_1TCpu.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1DNN_1_1TCpu.html
Safety,predict,prediction,"x. . static void ActivationFunctionForward (Tensor_t &X, EActivationFunction activFunct, const ActivationDescriptor_t activationDescr, const double coef=0.0, const Scalar_t alpha=1, const Scalar_t beta=0);  ; static void ActivationFunctionBackward (Tensor_t &dX, const Tensor_t &Y, const Tensor_t &dY, const Tensor_t &X, EActivationFunction activFunct, const ActivationDescriptor_t activationDescr, const Scalar_t alpha=1, const Scalar_t beta=0);  Computes the gradient of the activation function. ;  ; static void IdentityDerivative (Tensor_t &B, const Tensor_t &A);  ; static void Relu (Tensor_t &B);  ; static void ReluDerivative (Tensor_t &B, const Tensor_t &A);  ; static void Sigmoid (Tensor_t &B);  ; static void SigmoidDerivative (Tensor_t &B, const Tensor_t &A);  ; static void Tanh (Tensor_t &B);  ; static void TanhDerivative (Tensor_t &B, const Tensor_t &A);  ; static void FastTanh (Tensor_t &B);  ; static void FastTanhDerivative (Tensor_t &B, const Tensor_t &A);  ; static void SymmetricRelu (Tensor_t &B);  ; static void SymmetricReluDerivative (Tensor_t &B, const Tensor_t &A);  ; static void SoftSign (Tensor_t &B);  ; static void SoftSignDerivative (Tensor_t &B, const Tensor_t &A);  ; static void Gauss (Tensor_t &B);  ; static void GaussDerivative (Tensor_t &B, const Tensor_t &A);  ; Loss Functions; Loss functions compute a scalar value given the output of the network for a given training input and the expected network prediction Y that quantifies the quality of the prediction.; For each function also a routing that computes the gradients (suffixed by Gradients) must be provided for the starting of the backpropagation algorithm. . static Scalar_t MeanSquaredError (const Matrix_t &Y, const Matrix_t &output, const Matrix_t &weights);  ; static void MeanSquaredErrorGradients (Matrix_t &dY, const Matrix_t &Y, const Matrix_t &output, const Matrix_t &weights);  ; static Scalar_t CrossEntropy (const Matrix_t &Y, const Matrix_t &output, const Matrix_t &weights);  Sigmoid t",MatchSource.WIKI,doc/master/classTMVA_1_1DNN_1_1TCpu.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1DNN_1_1TCpu.html
Performance,perform,performs,". ROOT: TMVA::DNN::TCpuBuffer< AFloat > Class Template Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Classes |; Public Member Functions |; Private Attributes |; List of all members ; TMVA::DNN::TCpuBuffer< AFloat > Class Template Reference. ; template<typename AFloat>; class TMVA::DNN::TCpuBuffer< AFloat >TCpuBuffer. ; Since the memory on the CPU is homogeneous, only one buffer class is required. The host and device buffer classes are the same and copying between the host and device buffer is achieved by simply swapping the memory pointers.; Memory is handled as a shared pointer to a pointer of type AFloat, which is the floating point type used for the implementation.; Copying and assignment of TCpuBuffer objects performs only a shallow copy meaning the underlying data is shared between those objects.; Template Parameters. AFloatThe floating point type used for the computations. . Definition at line 43 of file CpuBuffer.h. Classes; class  FakeIteratorBegin;  ; struct  TDestructor;  . Public Member Functions;  TCpuBuffer ()=default;  ;  TCpuBuffer (const TCpuBuffer &)=default;  ;  TCpuBuffer (size_t size);  Construct buffer to hold size numbers of type AFloat. ;  ;  TCpuBuffer (TCpuBuffer &&)=default;  ; FakeIteratorBegin begin ();  ; void CopyFrom (const TCpuBuffer &);  Copy data from another buffer. ;  ; void CopyTo (TCpuBuffer &) const;  Copy data to another buffer. ;  ; AFloat * data () const;  ; size_t GetSize () const;  copy pointer from an external ;  ; TCpuBuffer GetSubBuffer (size_t offset, size_t start) const;  Return sub-buffer of size start starting at element offset. ;  ; size_t GetUseCount () const;  ;  operator AFloat * () const;  ; TCpuBuffer & operator= (const TCpuBuffer &)=default;  ; TCpuBuffer & operator= (TCpuBuffer &&)=default;  ; AFloat & operator[] (size_t i);  ; AFloat operator[] (size_t i) const;  . Private Attributes; std::shared_ptr< AFloat * > fBuffer;  ; struct TMVA::DNN",MatchSource.WIKI,doc/master/classTMVA_1_1DNN_1_1TCpuBuffer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1DNN_1_1TCpuBuffer.html
Usability,simpl,simply,". ROOT: TMVA::DNN::TCpuBuffer< AFloat > Class Template Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Classes |; Public Member Functions |; Private Attributes |; List of all members ; TMVA::DNN::TCpuBuffer< AFloat > Class Template Reference. ; template<typename AFloat>; class TMVA::DNN::TCpuBuffer< AFloat >TCpuBuffer. ; Since the memory on the CPU is homogeneous, only one buffer class is required. The host and device buffer classes are the same and copying between the host and device buffer is achieved by simply swapping the memory pointers.; Memory is handled as a shared pointer to a pointer of type AFloat, which is the floating point type used for the implementation.; Copying and assignment of TCpuBuffer objects performs only a shallow copy meaning the underlying data is shared between those objects.; Template Parameters. AFloatThe floating point type used for the computations. . Definition at line 43 of file CpuBuffer.h. Classes; class  FakeIteratorBegin;  ; struct  TDestructor;  . Public Member Functions;  TCpuBuffer ()=default;  ;  TCpuBuffer (const TCpuBuffer &)=default;  ;  TCpuBuffer (size_t size);  Construct buffer to hold size numbers of type AFloat. ;  ;  TCpuBuffer (TCpuBuffer &&)=default;  ; FakeIteratorBegin begin ();  ; void CopyFrom (const TCpuBuffer &);  Copy data from another buffer. ;  ; void CopyTo (TCpuBuffer &) const;  Copy data to another buffer. ;  ; AFloat * data () const;  ; size_t GetSize () const;  copy pointer from an external ;  ; TCpuBuffer GetSubBuffer (size_t offset, size_t start) const;  Return sub-buffer of size start starting at element offset. ;  ; size_t GetUseCount () const;  ;  operator AFloat * () const;  ; TCpuBuffer & operator= (const TCpuBuffer &)=default;  ; TCpuBuffer & operator= (TCpuBuffer &&)=default;  ; AFloat & operator[] (size_t i);  ; AFloat operator[] (size_t i) const;  . Private Attributes; std::shared_ptr< AFloat * > fBuffer;  ; struct TMVA::DNN",MatchSource.WIKI,doc/master/classTMVA_1_1DNN_1_1TCpuBuffer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1DNN_1_1TCpuBuffer.html
Energy Efficiency,allocate,allocate,"DNN::TCpuMatrix< AFloat >The TCpuMatrix class. ; Matrix class for multi-threaded CPU architectures. Uses the TCpuBuffer class to store the matrices in column-major format for compatibility with BLAS. Provides Map and MapFrom member functions to simplify the application of activation functions and derivatives to matrices.; Copying and assignment of TCpuMatrix objects only performs shallow copies, i.e. copying is fast and the resulting objects share the element data.; Template Parameters. AFloatThe floating point type used to represent the matrix elements. . Definition at line 86 of file CpuMatrix.h. Public Member Functions;  TCpuMatrix ();  ;  TCpuMatrix (const TCpuBuffer< AFloat > &buffer, size_t m, size_t n);  Construct a m-times-n matrix from the given buffer. ;  ;  TCpuMatrix (const TCpuMatrix &)=default;  ;  TCpuMatrix (const TMatrixT< AFloat > &);  Construct a TCpuMatrix object by (deeply) copying from a TMatrixT<Double_t> matrix. ;  ;  TCpuMatrix (size_t nRows, size_t nCols);  Construct matrix and allocate space for its elements. ;  ;  TCpuMatrix (TCpuMatrix &&)=default;  ;  ~TCpuMatrix ()=default;  ; TCpuBuffer< AFloat > & GetBuffer ();  Returns pointer to a vector holding only ones with a guaranteed length of the number of columns of every instantiated CpuMatrix object. ;  ; const TCpuBuffer< AFloat > & GetBuffer () const;  ; TCpuBuffer< AFloat > & GetDeviceBuffer ();  ; const TCpuBuffer< AFloat > & GetDeviceBuffer () const;  ; size_t GetNcols () const;  ; size_t GetNoElements () const;  ; size_t GetNrows () const;  ; AFloat * GetRawDataPointer ();  Return raw pointer to the elements stored contiguously in column-major order. ;  ; const AFloat * GetRawDataPointer () const;  ; size_t GetSize () const;  ; template<typename Function_t > ; void Map (Function_t &f);  Map the given function over the matrix elements. ;  ; template<typename Function_t > ; void MapFrom (Function_t &f, const TCpuMatrix &A);  Same as maps but takes the input values from the matrix A an",MatchSource.WIKI,doc/master/classTMVA_1_1DNN_1_1TCpuMatrix.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1DNN_1_1TCpuMatrix.html
Performance,multi-thread,multi-threaded,". ROOT: TMVA::DNN::TCpuMatrix< AFloat > Class Template Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Public Attributes |; Private Member Functions |; Private Attributes |; Static Private Attributes |; List of all members ; TMVA::DNN::TCpuMatrix< AFloat > Class Template Reference. ; template<typename AFloat>; class TMVA::DNN::TCpuMatrix< AFloat >The TCpuMatrix class. ; Matrix class for multi-threaded CPU architectures. Uses the TCpuBuffer class to store the matrices in column-major format for compatibility with BLAS. Provides Map and MapFrom member functions to simplify the application of activation functions and derivatives to matrices.; Copying and assignment of TCpuMatrix objects only performs shallow copies, i.e. copying is fast and the resulting objects share the element data.; Template Parameters. AFloatThe floating point type used to represent the matrix elements. . Definition at line 86 of file CpuMatrix.h. Public Member Functions;  TCpuMatrix ();  ;  TCpuMatrix (const TCpuBuffer< AFloat > &buffer, size_t m, size_t n);  Construct a m-times-n matrix from the given buffer. ;  ;  TCpuMatrix (const TCpuMatrix &)=default;  ;  TCpuMatrix (const TMatrixT< AFloat > &);  Construct a TCpuMatrix object by (deeply) copying from a TMatrixT<Double_t> matrix. ;  ;  TCpuMatrix (size_t nRows, size_t nCols);  Construct matrix and allocate space for its elements. ;  ;  TCpuMatrix (TCpuMatrix &&)=default;  ;  ~TCpuMatrix ()=default;  ; TCpuBuffer< AFloat > & GetBuffer ();  Returns pointer to a vector holding only ones with a guaranteed length of the number of columns of every instantiated CpuMatrix object. ;  ; const TCpuBuffer< AFloat > & GetBuffer () const;  ; TCpuBuffer< AFloat > & GetDeviceBuffer ();  ; const TCpuBuffer< AFloat > & GetDeviceBuffer () const;  ; size_t GetNcols () const;  ; size_t GetNoElements () const;  ; size_t GetNrows () const; ",MatchSource.WIKI,doc/master/classTMVA_1_1DNN_1_1TCpuMatrix.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1DNN_1_1TCpuMatrix.html
Usability,simpl,simplify,". ROOT: TMVA::DNN::TCpuMatrix< AFloat > Class Template Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Public Attributes |; Private Member Functions |; Private Attributes |; Static Private Attributes |; List of all members ; TMVA::DNN::TCpuMatrix< AFloat > Class Template Reference. ; template<typename AFloat>; class TMVA::DNN::TCpuMatrix< AFloat >The TCpuMatrix class. ; Matrix class for multi-threaded CPU architectures. Uses the TCpuBuffer class to store the matrices in column-major format for compatibility with BLAS. Provides Map and MapFrom member functions to simplify the application of activation functions and derivatives to matrices.; Copying and assignment of TCpuMatrix objects only performs shallow copies, i.e. copying is fast and the resulting objects share the element data.; Template Parameters. AFloatThe floating point type used to represent the matrix elements. . Definition at line 86 of file CpuMatrix.h. Public Member Functions;  TCpuMatrix ();  ;  TCpuMatrix (const TCpuBuffer< AFloat > &buffer, size_t m, size_t n);  Construct a m-times-n matrix from the given buffer. ;  ;  TCpuMatrix (const TCpuMatrix &)=default;  ;  TCpuMatrix (const TMatrixT< AFloat > &);  Construct a TCpuMatrix object by (deeply) copying from a TMatrixT<Double_t> matrix. ;  ;  TCpuMatrix (size_t nRows, size_t nCols);  Construct matrix and allocate space for its elements. ;  ;  TCpuMatrix (TCpuMatrix &&)=default;  ;  ~TCpuMatrix ()=default;  ; TCpuBuffer< AFloat > & GetBuffer ();  Returns pointer to a vector holding only ones with a guaranteed length of the number of columns of every instantiated CpuMatrix object. ;  ; const TCpuBuffer< AFloat > & GetBuffer () const;  ; TCpuBuffer< AFloat > & GetDeviceBuffer ();  ; const TCpuBuffer< AFloat > & GetDeviceBuffer () const;  ; size_t GetNcols () const;  ; size_t GetNoElements () const;  ; size_t GetNrows () const; ",MatchSource.WIKI,doc/master/classTMVA_1_1DNN_1_1TCpuMatrix.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1DNN_1_1TCpuMatrix.html
Modifiability,inherit,inherited,". ROOT: TMVA::DNN::TCpuTensor< AFloat > Class Template Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Friends |; List of all members ; TMVA::DNN::TCpuTensor< AFloat > Class Template Reference. ; template<typename AFloat>; class TMVA::DNN::TCpuTensor< AFloat >; Definition at line 40 of file CpuTensor.h. Public Types; using Matrix_t = TCpuMatrix< AFloat >;  ; using MemoryLayout = TMVA::Experimental::MemoryLayout;  ; using Scalar_t = AFloat;  ; using Shape_t = typename TMVA::Experimental::RTensor< AFloat >::Shape_t;  ;  Public Types inherited from TMVA::Experimental::RTensor< AFloat, TCpuBuffer< AFloat > >; using Container_t = TCpuBuffer< AFloat >;  ; using Index_t = Shape_t;  ; using Shape_t = std::vector< std::size_t >;  ; using Slice_t = std::vector< Shape_t >;  ; using Value_t = AFloat;  . Public Member Functions;  TCpuTensor ();  ;  TCpuTensor (AFloat *data, const Shape_t &shape, MemoryLayout memlayout=MemoryLayout::ColumnMajor);  ;  TCpuTensor (const TCpuBuffer< AFloat > &buffer, Shape_t shape, MemoryLayout memlayout=MemoryLayout::ColumnMajor);  constructors from a TCpuBuffer and a shape ;  ;  TCpuTensor (const TCpuMatrix< AFloat > &matrix, size_t dim=3, MemoryLayout memlayout=MemoryLayout::ColumnMajor);  constructors from a TCpuMatrix. ;  ;  TCpuTensor (Shape_t shape, MemoryLayout memlayout=MemoryLayout::ColumnMajor);  constructors from a shape. ;  ;  TCpuTensor (size_t bsize, size_t depth, size_t height, size_t width, MemoryLayout memlayout=MemoryLayout::ColumnMajor);  constructors from batch size, depth, height, width ;  ;  TCpuTensor (size_t bsize, size_t depth, size_t hw, MemoryLayout memlayout=MemoryLayout::ColumnMajor);  constructors from batch size, depth, height*width ;  ;  TCpuTensor (size_t n, size_t m, MemoryLayout memlayout=MemoryLayout::ColumnMajor);  constructors from n m ;  ; TCpuTensor< AFloat > At (size_t i);  ; TCpuTensor< AFloat > At (",MatchSource.WIKI,doc/master/classTMVA_1_1DNN_1_1TCpuTensor.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1DNN_1_1TCpuTensor.html
Availability,error,errors,"atrix_t &C, const Matrix_t &A, const Matrix_t &B);  Standard multiplication of two matrices A and B with the result being written into C. ;  ; static void TransposeMultiply (Matrix_t &output, const Matrix_t &input, const Matrix_t &Weights, Scalar_t alpha=1.0, Scalar_t beta=0.);  Matrix multiplication of two matrices A and B^T (transposed) with the result being written into C. ;  ; static void Hadamard (Tensor_t &A, const Tensor_t &B);  In-place Hadamard (element-wise) product of matrices A and B with the result being written into A. ;  ; static void Hadamard (Matrix_t &A, const Matrix_t &B);  ; static void SumColumns (Matrix_t &B, const Matrix_t &A, Scalar_t alpha=1.0, Scalar_t beta=0.);  Sum columns of (m x n) matrix A and write the results into the first m elements in A. ;  ; static Scalar_t Sum (const Matrix_t &A);  Compute the sum of all elements in A. ;  ; static bool AlmostEquals (const Matrix_t &A, const Matrix_t &B, double epsilon=0.1);  Check two matrices for equality, taking floating point arithmetic errors into account. ;  ; static void ConstAdd (Matrix_t &A, Scalar_t beta);  Add the constant beta to all the elements of matrix A and write the result into A. ;  ; static void ConstMult (Matrix_t &A, Scalar_t beta);  Multiply the constant beta to all the elements of matrix A and write the result into A. ;  ; static void ReciprocalElementWise (Matrix_t &A);  Reciprocal each element of the matrix A and write the result into A. ;  ; static void SquareElementWise (Matrix_t &A);  Square each element of the matrix A and write the result into A. ;  ; static void SqrtElementWise (Matrix_t &A);  Square root each element of the matrix A and write the result into A. ;  ; static void AdamUpdate (Matrix_t &A, const Matrix_t &M, const Matrix_t &V, Scalar_t alpha, Scalar_t eps);  Adam updates. ;  ; static void AdamUpdateFirstMom (Matrix_t &A, const Matrix_t &B, Scalar_t beta);  ; static void AdamUpdateSecondMom (Matrix_t &A, const Matrix_t &B, Scalar_t beta);  ; static void",MatchSource.WIKI,doc/master/classTMVA_1_1DNN_1_1TCuda.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1DNN_1_1TCuda.html
Deployability,update,updates,"to the first m elements in A. ;  ; static Scalar_t Sum (const Matrix_t &A);  Compute the sum of all elements in A. ;  ; static bool AlmostEquals (const Matrix_t &A, const Matrix_t &B, double epsilon=0.1);  Check two matrices for equality, taking floating point arithmetic errors into account. ;  ; static void ConstAdd (Matrix_t &A, Scalar_t beta);  Add the constant beta to all the elements of matrix A and write the result into A. ;  ; static void ConstMult (Matrix_t &A, Scalar_t beta);  Multiply the constant beta to all the elements of matrix A and write the result into A. ;  ; static void ReciprocalElementWise (Matrix_t &A);  Reciprocal each element of the matrix A and write the result into A. ;  ; static void SquareElementWise (Matrix_t &A);  Square each element of the matrix A and write the result into A. ;  ; static void SqrtElementWise (Matrix_t &A);  Square root each element of the matrix A and write the result into A. ;  ; static void AdamUpdate (Matrix_t &A, const Matrix_t &M, const Matrix_t &V, Scalar_t alpha, Scalar_t eps);  Adam updates. ;  ; static void AdamUpdateFirstMom (Matrix_t &A, const Matrix_t &B, Scalar_t beta);  ; static void AdamUpdateSecondMom (Matrix_t &A, const Matrix_t &B, Scalar_t beta);  ; static void PrintTensor (const Tensor_t &A, const std::string name=""Cuda-tensor"", bool=false);  ; static void SumRows (Matrix_t &B, const Matrix_t &A);  extra functions defined only for CPU architecture !!! ;  . Static Private Attributes; static TRandom * fgRandomGen = nullptr;  . #include <TMVA/DNN/Architectures/Cuda.h>; Member Typedef Documentation. ◆ ActivationDescriptor_t. template<typename AReal = Float_t> . using TMVA::DNN::TCuda< AReal >::ActivationDescriptor_t = CudaActivationDescriptor. Definition at line 78 of file Cuda.h. ◆ AFloat. template<typename AReal = Float_t> . using TMVA::DNN::TCuda< AReal >::AFloat = AReal. Definition at line 70 of file Cuda.h. ◆ AlgorithmBackward_t. template<typename AReal = Float_t> . using TMVA::DNN::TCuda< AReal >",MatchSource.WIKI,doc/master/classTMVA_1_1DNN_1_1TCuda.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1DNN_1_1TCuda.html
Integrability,interface,interface,". ROOT: TMVA::DNN::TCuda< AReal > Class Template Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Static Public Member Functions |; Static Private Attributes |; List of all members ; TMVA::DNN::TCuda< AReal > Class Template Reference. ; template<typename AReal = Float_t>; class TMVA::DNN::TCuda< AReal >The TCuda architecture class. ; Low-level interface class for CUDA computing architectures. Contains as public types the declaration of the scalar, matrix and buffer types for this architecture as well as the remaining functions in the low-level interface in the form of static members. ; Definition at line 64 of file Cuda.h. Public Types; using ActivationDescriptor_t = CudaActivationDescriptor;  ; using AFloat = AReal;  ; using AlgorithmBackward_t = CudaConvolutionBwdDataAlgo;  ; using AlgorithmDataType_t = DummyCudaDataType;  ; using AlgorithmForward_t = CudaConvolutionFwdAlgo;  ; using AlgorithmHelper_t = CudaConvolutionBwdFilterAlgo;  ; using BNormDescriptors_t = TDNNGenDescriptors< BNormLayer_t >;  ; using BNormLayer_t = TBatchNormLayer< TCuda< AReal > >;  ; using ConvDescriptors_t = CNN::TCNNDescriptors< ConvLayer_t >;  ; using ConvLayer_t = CNN::TConvLayer< TCuda< AReal > >;  ; using ConvolutionDescriptor_t = CudaConvolutionDescriptor;  ; using ConvWorkspace_t = CNN::TCNNWorkspace< ConvLayer_t >;  ; using DeviceBuffer_t = TCudaDeviceBuffer< AFloat >;  ; using DropoutDescriptor_t = CudaDropoutDescriptor;  ; using EmptyDescriptor_t = CudaEmptyDescriptor;  ; using FilterDescriptor_t = CudaFilterDescriptor;  ; using GenLayer_t = VGeneralLayer< TCuda< AReal > >;  ; using HostBuffer_t = TCudaHostBuffer< AFloat >;  ; using Matrix_t = TCudaMatrix< AFloat >;  ; using PoolingDescriptor_t = CudaPoolingDescriptor;  ; using PoolingDescriptors_t = CNN::TCNNDescriptors< PoolingLayer_t >;  ; using PoolingLayer_t = CNN::TMaxPoolLayer< TCuda< AReal > >;  ; using PoolingWork",MatchSource.WIKI,doc/master/classTMVA_1_1DNN_1_1TCuda.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1DNN_1_1TCuda.html
Modifiability,extend,extended," AddRowWise (Matrix_t &output, const Matrix_t &biases);  Add the vectors biases row-wise to the matrix output. ;  ; static void AddRowWise (Tensor_t &output, const Matrix_t &biases);  ; Backward Propagation (Dense Layers); Low-level functions required for the forward propagation of activations through the network. . static void Backward (Tensor_t &activationGradientsBackward, Matrix_t &weightGradients, Matrix_t &biasGradients, const Tensor_t &df, const Tensor_t &activationGradients, const Matrix_t &weights, const Tensor_t &activationBackward);  Perform the complete backward propagation step. ;  ; static void ScaleAdd (Matrix_t &A, const Matrix_t &B, Scalar_t beta=1.0);  Adds a the elements in matrix B scaled by c to the elements in the matrix A. ;  ; static void Copy (Matrix_t &B, const Matrix_t &A);  ; template<typename AMatrix_t > ; static void CopyDiffArch (Matrix_t &B, const AMatrix_t &A);  ; static void ScaleAdd (Tensor_t &A, const Tensor_t &B, Scalar_t beta=1.0);  Above functions extended to vectors. ;  ; static void Copy (Tensor_t &A, const Tensor_t &B);  ; template<typename ATensor_t > ; static void CopyDiffArch (Tensor_t &A, const ATensor_t &B);  ; template<typename AMatrix_t > ; static void CopyDiffArch (std::vector< Matrix_t > &A, const std::vector< AMatrix_t > &B);  ; Activation Functions; For each activation function, the low-level interface contains two routines.; One that applies the activation function to a matrix and one that evaluate the derivatives of the activation function at the elements of a given matrix and writes the results into the result matrix. . static void ActivationFunctionForward (Tensor_t &X, EActivationFunction activFunct, const ActivationDescriptor_t activationDescr, const double coef=0.0, const AFloat alpha=1, const AFloat beta=0);  ; static void ActivationFunctionBackward (Tensor_t &dX, const Tensor_t &Y, const Tensor_t &dY, const Tensor_t &X, EActivationFunction activFunct, const ActivationDescriptor_t activationDescr, const AFl",MatchSource.WIKI,doc/master/classTMVA_1_1DNN_1_1TCuda.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1DNN_1_1TCuda.html
Performance,tune,tuned,", . size_t ; fltWidth, . size_t ; strideRows, . size_t ; strideCols, . size_t ; zeroPaddingHeight, . size_t ; zeroPaddingWidth . ). static . Transform the matrix B in local view format, suitable for convolution, and store it in matrix A. ; A helper for image operations that rearranges image regions into column vectors.; Parameters. [out]AThe output matrix. Each row corresponds to a receptive field. ; [in]BThe input matrix. Each row corresponds to a row in the image view. ; [in]imgHeightThe heigh of the input. ; [in]imgWidthThe output of the input. ; [in]fltHeightHeight of the kernel. ; [in]fltWidthWidth of the kernel. ; [in]strideRowsstride size in the horizontal dimension. ; [in]strideColsstride size in the vertical dimension. ; [in]zeroPaddingHeightThe padding in the horizontal dimension. ; [in]zeroPaddingWidthThe padding in the vertical dimension. This transformation allows us to express a 2D convolution as a matrix multiplication. We can therefore harness the finely tuned GEMM implementation of cuBLAS to achieve maximum performance. This function can greatly speed-up propagation in TConvLayer. ; Definition at line 183 of file Propagation.cu. ◆ Im2colFast(). template<typename AReal = Float_t> . static void TMVA::DNN::TCuda< AReal >::Im2colFast ; (; Matrix_t & ; A, . const Matrix_t & ; B, . const std::vector< int > & ; V . ). static . ◆ Im2colIndices(). template<typename AReal = Float_t> . static void TMVA::DNN::TCuda< AReal >::Im2colIndices ; (; std::vector< int > & ; V, . const Matrix_t & ; B, . size_t ; nLocalViews, . size_t ; imgHeight, . size_t ; imgWidth, . size_t ; fltHeight, . size_t ; fltWidth, . size_t ; strideRows, . size_t ; strideCols, . size_t ; zeroPaddingHeight, . size_t ; zeroPaddingWidth . ). static . ◆ InitializeActivationDescriptor(). template<typename AReal = Float_t> . static void TMVA::DNN::TCuda< AReal >::InitializeActivationDescriptor ; (; ActivationDescriptor_t & ; , . EActivationFunction ; , . double ; = 0.0 . ). inlinestatic . Definitio",MatchSource.WIKI,doc/master/classTMVA_1_1DNN_1_1TCuda.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1DNN_1_1TCuda.html
Safety,predict,prediction,"lt matrix. . static void ActivationFunctionForward (Tensor_t &X, EActivationFunction activFunct, const ActivationDescriptor_t activationDescr, const double coef=0.0, const AFloat alpha=1, const AFloat beta=0);  ; static void ActivationFunctionBackward (Tensor_t &dX, const Tensor_t &Y, const Tensor_t &dY, const Tensor_t &X, EActivationFunction activFunct, const ActivationDescriptor_t activationDescr, const AFloat alpha=1, const AFloat beta=0);  Computes the gradient of the activation function. ;  ; static void IdentityDerivative (Tensor_t &B, const Tensor_t &A);  ; static void Relu (Tensor_t &B);  ; static void ReluDerivative (Tensor_t &B, const Tensor_t &A);  ; static void Sigmoid (Tensor_t &B);  ; static void SigmoidDerivative (Tensor_t &B, const Tensor_t &A);  ; static void Tanh (Tensor_t &B);  ; static void TanhDerivative (Tensor_t &B, const Tensor_t &A);  ; static void FastTanh (Tensor_t &B);  ; static void FastTanhDerivative (Tensor_t &B, const Tensor_t &A);  ; static void SymmetricRelu (Tensor_t &B);  ; static void SymmetricReluDerivative (Tensor_t &B, const Tensor_t &A);  ; static void SoftSign (Tensor_t &B);  ; static void SoftSignDerivative (Tensor_t &B, const Tensor_t &A);  ; static void Gauss (Tensor_t &B);  ; static void GaussDerivative (Tensor_t &B, const Tensor_t &A);  ; Loss Functions; Loss functions compute a scalar value given the output of the network for a given training input and the expected network prediction Y that quantifies the quality of the prediction.; For each function also a routing that computes the gradients (suffixed by Gradients) must be provided for the starting of the backpropagation algorithm. . static Scalar_t MeanSquaredError (const Matrix_t &Y, const Matrix_t &output, const Matrix_t &weights);  ; static void MeanSquaredErrorGradients (Matrix_t &dY, const Matrix_t &Y, const Matrix_t &output, const Matrix_t &weights);  ; static Scalar_t CrossEntropy (const Matrix_t &Y, const Matrix_t &output, const Matrix_t &weights);  Sigmoid t",MatchSource.WIKI,doc/master/classTMVA_1_1DNN_1_1TCuda.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1DNN_1_1TCuda.html
Integrability,synchroniz,synchronization,". ROOT: TMVA::DNN::TCudaDeviceBuffer< AFloat > Class Template Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Classes |; Public Member Functions |; Private Attributes |; List of all members ; TMVA::DNN::TCudaDeviceBuffer< AFloat > Class Template Reference. ; template<typename AFloat>; class TMVA::DNN::TCudaDeviceBuffer< AFloat >TCudaDeviceBuffer. ; Service class for on-device memory buffers. Uses std::shared_pointer with custom destructor to ensure consistent memory management and allow for easy copying/moving. A device buffer has an associated CUDA compute stream , which is used for implicit synchronization of data transfers.; Template Parameters. AFloatThe floating point type to be stored in the buffers. . Definition at line 100 of file CudaBuffers.h. Classes; struct  TDestructor;  . Public Member Functions;  TCudaDeviceBuffer ()=default;  ;  TCudaDeviceBuffer (AFloat *, size_t size, cudaStream_t stream);  ;  TCudaDeviceBuffer (const TCudaDeviceBuffer &)=default;  ;  TCudaDeviceBuffer (size_t size);  ;  TCudaDeviceBuffer (size_t size, cudaStream_t stream);  ;  TCudaDeviceBuffer (TCudaDeviceBuffer &&)=default;  ; void CopyFrom (const TCudaHostBuffer< AFloat > &) const;  ; void CopyTo (const TCudaHostBuffer< AFloat > &) const;  ; AFloat * data () const;  ; cudaStream_t GetComputeStream () const;  ; size_t GetSize () const;  ; TCudaDeviceBuffer GetSubBuffer (size_t offset, size_t size);  Return sub-buffer of the current buffer. ;  ; size_t GetUseCount () const;  ;  operator AFloat * () const;  Convert to raw device data pointer. ;  ; TCudaDeviceBuffer & operator= (const TCudaDeviceBuffer &)=default;  ; TCudaDeviceBuffer & operator= (TCudaDeviceBuffer &&)=default;  ; void SetComputeStream (cudaStream_t stream);  . Private Attributes; cudaStream_t fComputeStream;  cudaStream for data transfer ;  ; struct TMVA::DNN::TCudaDeviceBuffer::TDestructor fDestructor;  ; std::shared_ptr< AFloat * > fDevicePointer;",MatchSource.WIKI,doc/master/classTMVA_1_1DNN_1_1TCudaDeviceBuffer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1DNN_1_1TCudaDeviceBuffer.html
Integrability,synchroniz,synchronization,. ROOT: TMVA::DNN::TCudaDeviceReference< AFloat > Class Template Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Private Attributes |; List of all members ; TMVA::DNN::TCudaDeviceReference< AFloat > Class Template Reference. ; template<typename AFloat>; class TMVA::DNN::TCudaDeviceReference< AFloat >TCudaDeviceReference. ; Helper class emulating lvalue references for AFloat values that are physically on the device. Allows for example to assign to matrix elements. Note that device access through CudaDeviceReferences enforces synchronization with all streams and thus qualifies as performance killer. Only used for testing. ; Definition at line 58 of file CudaMatrix.h. Public Member Functions;  TCudaDeviceReference (AFloat *devicePointer);  ;  operator AFloat ();  ; void operator+= (AFloat value);  ; void operator-= (AFloat value);  ; void operator= (AFloat value);  ; void operator= (const TCudaDeviceReference &other);  . Private Attributes; AFloat * fDevicePointer;  . #include <TMVA/DNN/Architectures/Cuda/CudaMatrix.h>; Constructor & Destructor Documentation. ◆ TCudaDeviceReference(). template<typename AFloat > . TMVA::DNN::TCudaDeviceReference< AFloat >::TCudaDeviceReference ; (; AFloat * ; devicePointer). Definition at line 209 of file CudaMatrix.h. Member Function Documentation. ◆ operator AFloat(). template<typename AFloat > . TMVA::DNN::TCudaDeviceReference< AFloat >::operator AFloat. Definition at line 217 of file CudaMatrix.h. ◆ operator+=(). template<typename AFloat > . void TMVA::DNN::TCudaDeviceReference< AFloat >::operator+= ; (; AFloat ; value). Definition at line 244 of file CudaMatrix.h. ◆ operator-=(). template<typename AFloat > . void TMVA::DNN::TCudaDeviceReference< AFloat >::operator-= ; (; AFloat ; value). Definition at line 256 of file CudaMatrix.h. ◆ operator=() [1/2]. template<typename AFloat > . void TMVA::DNN::TCudaDeviceReference< AFloat >::operator= ; ,MatchSource.WIKI,doc/master/classTMVA_1_1DNN_1_1TCudaDeviceReference.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1DNN_1_1TCudaDeviceReference.html
Performance,perform,performance,. ROOT: TMVA::DNN::TCudaDeviceReference< AFloat > Class Template Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Private Attributes |; List of all members ; TMVA::DNN::TCudaDeviceReference< AFloat > Class Template Reference. ; template<typename AFloat>; class TMVA::DNN::TCudaDeviceReference< AFloat >TCudaDeviceReference. ; Helper class emulating lvalue references for AFloat values that are physically on the device. Allows for example to assign to matrix elements. Note that device access through CudaDeviceReferences enforces synchronization with all streams and thus qualifies as performance killer. Only used for testing. ; Definition at line 58 of file CudaMatrix.h. Public Member Functions;  TCudaDeviceReference (AFloat *devicePointer);  ;  operator AFloat ();  ; void operator+= (AFloat value);  ; void operator-= (AFloat value);  ; void operator= (AFloat value);  ; void operator= (const TCudaDeviceReference &other);  . Private Attributes; AFloat * fDevicePointer;  . #include <TMVA/DNN/Architectures/Cuda/CudaMatrix.h>; Constructor & Destructor Documentation. ◆ TCudaDeviceReference(). template<typename AFloat > . TMVA::DNN::TCudaDeviceReference< AFloat >::TCudaDeviceReference ; (; AFloat * ; devicePointer). Definition at line 209 of file CudaMatrix.h. Member Function Documentation. ◆ operator AFloat(). template<typename AFloat > . TMVA::DNN::TCudaDeviceReference< AFloat >::operator AFloat. Definition at line 217 of file CudaMatrix.h. ◆ operator+=(). template<typename AFloat > . void TMVA::DNN::TCudaDeviceReference< AFloat >::operator+= ; (; AFloat ; value). Definition at line 244 of file CudaMatrix.h. ◆ operator-=(). template<typename AFloat > . void TMVA::DNN::TCudaDeviceReference< AFloat >::operator-= ; (; AFloat ; value). Definition at line 256 of file CudaMatrix.h. ◆ operator=() [1/2]. template<typename AFloat > . void TMVA::DNN::TCudaDeviceReference< AFloat >::operator= ; ,MatchSource.WIKI,doc/master/classTMVA_1_1DNN_1_1TCudaDeviceReference.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1DNN_1_1TCudaDeviceReference.html
Security,access,access,. ROOT: TMVA::DNN::TCudaDeviceReference< AFloat > Class Template Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Private Attributes |; List of all members ; TMVA::DNN::TCudaDeviceReference< AFloat > Class Template Reference. ; template<typename AFloat>; class TMVA::DNN::TCudaDeviceReference< AFloat >TCudaDeviceReference. ; Helper class emulating lvalue references for AFloat values that are physically on the device. Allows for example to assign to matrix elements. Note that device access through CudaDeviceReferences enforces synchronization with all streams and thus qualifies as performance killer. Only used for testing. ; Definition at line 58 of file CudaMatrix.h. Public Member Functions;  TCudaDeviceReference (AFloat *devicePointer);  ;  operator AFloat ();  ; void operator+= (AFloat value);  ; void operator-= (AFloat value);  ; void operator= (AFloat value);  ; void operator= (const TCudaDeviceReference &other);  . Private Attributes; AFloat * fDevicePointer;  . #include <TMVA/DNN/Architectures/Cuda/CudaMatrix.h>; Constructor & Destructor Documentation. ◆ TCudaDeviceReference(). template<typename AFloat > . TMVA::DNN::TCudaDeviceReference< AFloat >::TCudaDeviceReference ; (; AFloat * ; devicePointer). Definition at line 209 of file CudaMatrix.h. Member Function Documentation. ◆ operator AFloat(). template<typename AFloat > . TMVA::DNN::TCudaDeviceReference< AFloat >::operator AFloat. Definition at line 217 of file CudaMatrix.h. ◆ operator+=(). template<typename AFloat > . void TMVA::DNN::TCudaDeviceReference< AFloat >::operator+= ; (; AFloat ; value). Definition at line 244 of file CudaMatrix.h. ◆ operator-=(). template<typename AFloat > . void TMVA::DNN::TCudaDeviceReference< AFloat >::operator-= ; (; AFloat ; value). Definition at line 256 of file CudaMatrix.h. ◆ operator=() [1/2]. template<typename AFloat > . void TMVA::DNN::TCudaDeviceReference< AFloat >::operator= ; ,MatchSource.WIKI,doc/master/classTMVA_1_1DNN_1_1TCudaDeviceReference.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1DNN_1_1TCudaDeviceReference.html
Testability,test,testing,. ROOT: TMVA::DNN::TCudaDeviceReference< AFloat > Class Template Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Private Attributes |; List of all members ; TMVA::DNN::TCudaDeviceReference< AFloat > Class Template Reference. ; template<typename AFloat>; class TMVA::DNN::TCudaDeviceReference< AFloat >TCudaDeviceReference. ; Helper class emulating lvalue references for AFloat values that are physically on the device. Allows for example to assign to matrix elements. Note that device access through CudaDeviceReferences enforces synchronization with all streams and thus qualifies as performance killer. Only used for testing. ; Definition at line 58 of file CudaMatrix.h. Public Member Functions;  TCudaDeviceReference (AFloat *devicePointer);  ;  operator AFloat ();  ; void operator+= (AFloat value);  ; void operator-= (AFloat value);  ; void operator= (AFloat value);  ; void operator= (const TCudaDeviceReference &other);  . Private Attributes; AFloat * fDevicePointer;  . #include <TMVA/DNN/Architectures/Cuda/CudaMatrix.h>; Constructor & Destructor Documentation. ◆ TCudaDeviceReference(). template<typename AFloat > . TMVA::DNN::TCudaDeviceReference< AFloat >::TCudaDeviceReference ; (; AFloat * ; devicePointer). Definition at line 209 of file CudaMatrix.h. Member Function Documentation. ◆ operator AFloat(). template<typename AFloat > . TMVA::DNN::TCudaDeviceReference< AFloat >::operator AFloat. Definition at line 217 of file CudaMatrix.h. ◆ operator+=(). template<typename AFloat > . void TMVA::DNN::TCudaDeviceReference< AFloat >::operator+= ; (; AFloat ; value). Definition at line 244 of file CudaMatrix.h. ◆ operator-=(). template<typename AFloat > . void TMVA::DNN::TCudaDeviceReference< AFloat >::operator-= ; (; AFloat ; value). Definition at line 256 of file CudaMatrix.h. ◆ operator=() [1/2]. template<typename AFloat > . void TMVA::DNN::TCudaDeviceReference< AFloat >::operator= ; ,MatchSource.WIKI,doc/master/classTMVA_1_1DNN_1_1TCudaDeviceReference.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1DNN_1_1TCudaDeviceReference.html
Performance,perform,performed,". ROOT: TMVA::DNN::TCudaHostBuffer< AFloat > Class Template Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Classes |; Public Member Functions |; Private Attributes |; List of all members ; TMVA::DNN::TCudaHostBuffer< AFloat > Class Template Reference. ; template<typename AFloat>; class TMVA::DNN::TCudaHostBuffer< AFloat >TCudaHostBuffer. ; Wrapper class for pinned memory buffers on the host. Uses std::shared_pointer with custom destructor to ensure consistent memory management and allow for easy copying/moving of the buffers. Copying is asynchronous and will set the cudaStream of the device buffer so that subsequent computations on the device buffer can be performed on the same stream.; Template Parameters. AFloatThe floating point type to be stored in the buffers. . Definition at line 42 of file CudaBuffers.h. Classes; struct  TDestructor;  . Public Member Functions;  TCudaHostBuffer ()=default;  ;  TCudaHostBuffer (AFloat *);  ;  TCudaHostBuffer (const TCudaHostBuffer &)=default;  ;  TCudaHostBuffer (size_t size);  ;  TCudaHostBuffer (TCudaHostBuffer &&)=default;  ; AFloat * data () const;  ; size_t GetSize () const;  ; TCudaHostBuffer GetSubBuffer (size_t offset, size_t size);  Return sub-buffer of the current buffer. ;  ;  operator AFloat * () const;  ; TCudaHostBuffer & operator= (const TCudaHostBuffer &)=default;  ; TCudaHostBuffer & operator= (TCudaHostBuffer &&)=default;  ; AFloat & operator[] (size_t index);  ; AFloat operator[] (size_t index) const;  ; void SetConstVal (const AFloat constVal);  Sets the entire buffer to a constant value. ;  . Private Attributes; cudaStream_t fComputeStream;  cudaStream for data transfer ;  ; struct TMVA::DNN::TCudaHostBuffer::TDestructor fDestructor;  ; std::shared_ptr< AFloat * > fHostPointer;  Pointer to the buffer data. ;  ; size_t fOffset;  Offset for sub-buffers. ;  ; size_t fSize;  ; friend TCudaDeviceBuffer< AFloat >;  . #include <TMVA/DNN/Architectu",MatchSource.WIKI,doc/master/classTMVA_1_1DNN_1_1TCudaHostBuffer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1DNN_1_1TCudaHostBuffer.html
Energy Efficiency,allocate,allocated,". ROOT: TMVA::DNN::TCudaMatrix< AFloat > Class Template Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Static Public Attributes |; Private Member Functions |; Private Attributes |; Static Private Attributes |; List of all members ; TMVA::DNN::TCudaMatrix< AFloat > Class Template Reference. ; template<typename AFloat>; class TMVA::DNN::TCudaMatrix< AFloat >TCudaMatrix Class. ; The TCudaMatrix class represents matrices on a CUDA device. The elements of the matrix are stored in a TCudaDeviceBuffer object which takes care of the allocation and freeing of the device memory. TCudaMatrices are lightweight object, that means on assignment and copy creation only a shallow copy is performed and no new element buffer allocated. To perform a deep copy use the static Copy method of the TCuda architecture class.; The TCudaDeviceBuffer has an associated cuda stream, on which the data is transferred to the device. This stream can be accessed through the GetComputeStream member function and used to synchronize computations.; The TCudaMatrix class also holds static references to CUDA resources. Those are the cublas handle, a buffer of curand states for the generation of random numbers as well as a vector containing ones, which is used for summing column matrices using matrix-vector multiplication. The class also has a static buffer for returning results from the device. ; Definition at line 102 of file CudaMatrix.h. Public Member Functions;  TCudaMatrix ();  ;  TCudaMatrix (const TCudaMatrix &)=default;  ;  TCudaMatrix (const TMatrixT< AFloat > &);  ;  TCudaMatrix (size_t i, size_t j);  ;  TCudaMatrix (TCudaDeviceBuffer< AFloat > buffer, size_t m, size_t n);  ;  TCudaMatrix (TCudaMatrix &&)=default;  ;  ~TCudaMatrix ()=default;  ; cudaStream_t GetComputeStream () const;  ; const cublasHandle_t & GetCublasHandle () const;  ; AFloat * GetDataPointer ();  ; con",MatchSource.WIKI,doc/master/classTMVA_1_1DNN_1_1TCudaMatrix.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1DNN_1_1TCudaMatrix.html
Integrability,synchroniz,synchronize,"e Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Static Public Attributes |; Private Member Functions |; Private Attributes |; Static Private Attributes |; List of all members ; TMVA::DNN::TCudaMatrix< AFloat > Class Template Reference. ; template<typename AFloat>; class TMVA::DNN::TCudaMatrix< AFloat >TCudaMatrix Class. ; The TCudaMatrix class represents matrices on a CUDA device. The elements of the matrix are stored in a TCudaDeviceBuffer object which takes care of the allocation and freeing of the device memory. TCudaMatrices are lightweight object, that means on assignment and copy creation only a shallow copy is performed and no new element buffer allocated. To perform a deep copy use the static Copy method of the TCuda architecture class.; The TCudaDeviceBuffer has an associated cuda stream, on which the data is transferred to the device. This stream can be accessed through the GetComputeStream member function and used to synchronize computations.; The TCudaMatrix class also holds static references to CUDA resources. Those are the cublas handle, a buffer of curand states for the generation of random numbers as well as a vector containing ones, which is used for summing column matrices using matrix-vector multiplication. The class also has a static buffer for returning results from the device. ; Definition at line 102 of file CudaMatrix.h. Public Member Functions;  TCudaMatrix ();  ;  TCudaMatrix (const TCudaMatrix &)=default;  ;  TCudaMatrix (const TMatrixT< AFloat > &);  ;  TCudaMatrix (size_t i, size_t j);  ;  TCudaMatrix (TCudaDeviceBuffer< AFloat > buffer, size_t m, size_t n);  ;  TCudaMatrix (TCudaMatrix &&)=default;  ;  ~TCudaMatrix ()=default;  ; cudaStream_t GetComputeStream () const;  ; const cublasHandle_t & GetCublasHandle () const;  ; AFloat * GetDataPointer ();  ; const AFloat * GetDataPointer () const;  ; TCudaDeviceBuffer< AFloat > GetDeviceBuffer () const;  ",MatchSource.WIKI,doc/master/classTMVA_1_1DNN_1_1TCudaMatrix.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1DNN_1_1TCudaMatrix.html
Performance,perform,performed,". ROOT: TMVA::DNN::TCudaMatrix< AFloat > Class Template Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Static Public Attributes |; Private Member Functions |; Private Attributes |; Static Private Attributes |; List of all members ; TMVA::DNN::TCudaMatrix< AFloat > Class Template Reference. ; template<typename AFloat>; class TMVA::DNN::TCudaMatrix< AFloat >TCudaMatrix Class. ; The TCudaMatrix class represents matrices on a CUDA device. The elements of the matrix are stored in a TCudaDeviceBuffer object which takes care of the allocation and freeing of the device memory. TCudaMatrices are lightweight object, that means on assignment and copy creation only a shallow copy is performed and no new element buffer allocated. To perform a deep copy use the static Copy method of the TCuda architecture class.; The TCudaDeviceBuffer has an associated cuda stream, on which the data is transferred to the device. This stream can be accessed through the GetComputeStream member function and used to synchronize computations.; The TCudaMatrix class also holds static references to CUDA resources. Those are the cublas handle, a buffer of curand states for the generation of random numbers as well as a vector containing ones, which is used for summing column matrices using matrix-vector multiplication. The class also has a static buffer for returning results from the device. ; Definition at line 102 of file CudaMatrix.h. Public Member Functions;  TCudaMatrix ();  ;  TCudaMatrix (const TCudaMatrix &)=default;  ;  TCudaMatrix (const TMatrixT< AFloat > &);  ;  TCudaMatrix (size_t i, size_t j);  ;  TCudaMatrix (TCudaDeviceBuffer< AFloat > buffer, size_t m, size_t n);  ;  TCudaMatrix (TCudaMatrix &&)=default;  ;  ~TCudaMatrix ()=default;  ; cudaStream_t GetComputeStream () const;  ; const cublasHandle_t & GetCublasHandle () const;  ; AFloat * GetDataPointer ();  ; con",MatchSource.WIKI,doc/master/classTMVA_1_1DNN_1_1TCudaMatrix.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1DNN_1_1TCudaMatrix.html
Security,access,accessed,"e Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Static Public Attributes |; Private Member Functions |; Private Attributes |; Static Private Attributes |; List of all members ; TMVA::DNN::TCudaMatrix< AFloat > Class Template Reference. ; template<typename AFloat>; class TMVA::DNN::TCudaMatrix< AFloat >TCudaMatrix Class. ; The TCudaMatrix class represents matrices on a CUDA device. The elements of the matrix are stored in a TCudaDeviceBuffer object which takes care of the allocation and freeing of the device memory. TCudaMatrices are lightweight object, that means on assignment and copy creation only a shallow copy is performed and no new element buffer allocated. To perform a deep copy use the static Copy method of the TCuda architecture class.; The TCudaDeviceBuffer has an associated cuda stream, on which the data is transferred to the device. This stream can be accessed through the GetComputeStream member function and used to synchronize computations.; The TCudaMatrix class also holds static references to CUDA resources. Those are the cublas handle, a buffer of curand states for the generation of random numbers as well as a vector containing ones, which is used for summing column matrices using matrix-vector multiplication. The class also has a static buffer for returning results from the device. ; Definition at line 102 of file CudaMatrix.h. Public Member Functions;  TCudaMatrix ();  ;  TCudaMatrix (const TCudaMatrix &)=default;  ;  TCudaMatrix (const TMatrixT< AFloat > &);  ;  TCudaMatrix (size_t i, size_t j);  ;  TCudaMatrix (TCudaDeviceBuffer< AFloat > buffer, size_t m, size_t n);  ;  TCudaMatrix (TCudaMatrix &&)=default;  ;  ~TCudaMatrix ()=default;  ; cudaStream_t GetComputeStream () const;  ; const cublasHandle_t & GetCublasHandle () const;  ; AFloat * GetDataPointer ();  ; const AFloat * GetDataPointer () const;  ; TCudaDeviceBuffer< AFloat > GetDeviceBuffer () const;  ",MatchSource.WIKI,doc/master/classTMVA_1_1DNN_1_1TCudaMatrix.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1DNN_1_1TCudaMatrix.html
Testability,test,testing,"hared devices resource and makes sure that a sufficient number of curand states are allocated on the device and initialized as well as that the one-vector for the summation over columns has the right size. ; Definition at line 103 of file CudaMatrix.cu. ◆ InitializeCurandStates(). template<typename AFloat > . void TMVA::DNN::TCudaMatrix< AFloat >::InitializeCurandStates. private . Definition at line 140 of file CudaMatrix.cu. ◆ operator TMatrixT(). template<typename AFloat > . TMVA::DNN::TCudaMatrix< AFloat >::operator TMatrixT. Convert cuda matrix to Root TMatrix. ; Performs synchronous data transfer. ; Definition at line 150 of file CudaMatrix.cu. ◆ operator()(). template<typename AFloat > . TCudaDeviceReference< AFloat > TMVA::DNN::TCudaMatrix< AFloat >::operator() ; (; size_t ; i, . size_t ; j . ); const. Access to elements of device matrices provided through TCudaDeviceReference class. ; Note that access is synchronous end enforces device synchronization on all streams. Only used for testing. ; Definition at line 310 of file CudaMatrix.h. ◆ operator=() [1/2]. template<typename AFloat > . TCudaMatrix & TMVA::DNN::TCudaMatrix< AFloat >::operator= ; (; const TCudaMatrix< AFloat > & ; ). default . ◆ operator=() [2/2]. template<typename AFloat > . TCudaMatrix & TMVA::DNN::TCudaMatrix< AFloat >::operator= ; (; TCudaMatrix< AFloat > && ; ). default . ◆ Print(). template<typename AFloat > . void TMVA::DNN::TCudaMatrix< AFloat >::Print ; (; ); const. inline . Definition at line 174 of file CudaMatrix.h. ◆ ResetDeviceReturn(). template<typename AFloat > . void TMVA::DNN::TCudaMatrix< AFloat >::ResetDeviceReturn ; (; AFloat ; value = 0.0). inlinestatic . Set the return buffer on the device to the specified value. ; This is required for example for reductions in order to initialize the accumulator. ; Definition at line 293 of file CudaMatrix.h. ◆ SetComputeStream(). template<typename AFloat > . void TMVA::DNN::TCudaMatrix< AFloat >::SetComputeStream ; (; cudaStream_t ; stre",MatchSource.WIKI,doc/master/classTMVA_1_1DNN_1_1TCudaMatrix.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1DNN_1_1TCudaMatrix.html
Energy Efficiency,allocate,allocated," TCudaDeviceReference< AFloat > operator() (size_t i, size_t j, size_t k, size_t l) const;  ; TCudaTensor & operator= (const TCudaTensor &)=default;  ; TCudaTensor & operator= (TCudaTensor &&)=default;  ; TCudaMatrix< AFloat > operator[] (size_t i) const;  ; void Print (const char *name=""Tensor"", bool truncate=false) const;  ; void PrintShape (const char *name=""Tensor"") const;  ; TCudaTensor< AFloat > Reshape (const Shape_t &newShape) const;  ; void ReshapeInPlace (const Shape_t &newShape);  ; void SetComputeStream (cudaStream_t stream);  ; void SetConstVal (const AFloat constVal);  ; void SetTensorDescriptor ();  ; void Zero ();  . Static Public Member Functions; static std::vector< std::size_t > ComputeStridesFromShape (const std::vector< std::size_t > &shape, bool rowmajorLayout);  This information is needed for the multi-dimensional indexing. ;  . Private Member Functions; void InitializeCuda ();  Initializes all shared devices resource and makes sure that a sufficient number of curand states are allocated on the device and initialized as well as that the one-vector for the summation over columns has the right size. ;  ; void InitializeCurandStates ();  . Private Attributes; int fDevice;  Device associated with current tensor instance. ;  ; TCudaDeviceBuffer< AFloat > fElementBuffer;  ; MemoryLayout fMemoryLayout;  ; size_t fNDim;  Dimension of the tensor (first dimension is the batch size, second is the no. channels) ;  ; Shape_t fShape;  The shape vector (size of dimensions) needs to be ordered as no. ;  ; size_t fSize;  No. of elements. ;  ; int fStreamIndx;  Cuda stream associated with current instance. ;  ; Shape_t fStrides;  Strides between tensor dimensions (always assume dense, non overlapping tensor) ;  ; std::shared_ptr< TensorDescriptor > fTensorDescriptor;  . Static Private Attributes; static std::vector< int > fInstances;  For each GPU device keep the CUDA streams in which tensors are used. ;  . #include <TMVA/DNN/Architectures/Cuda/CudaTensor.h>; M",MatchSource.WIKI,doc/master/classTMVA_1_1DNN_1_1TCudaTensor.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1DNN_1_1TCudaTensor.html
Modifiability,extend,extends,". ROOT: TMVA::DNN::TCudaTensor< AFloat > Class Template Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Classes |; Public Types |; Public Member Functions |; Static Public Member Functions |; Private Member Functions |; Private Attributes |; Static Private Attributes |; List of all members ; TMVA::DNN::TCudaTensor< AFloat > Class Template Reference. ; template<typename AFloat>; class TMVA::DNN::TCudaTensor< AFloat >TCudaTensor Class. ; The TCudaTensor class extends the TCudaMatrix class for dimensions > 2. ; Definition at line 83 of file CudaTensor.h. Classes; struct  TensorDescriptor;  . Public Types; using MemoryLayout = TMVA::Experimental::MemoryLayout;  ; using Scalar_t = AFloat;  ; using Shape_t = std::vector< size_t >;  . Public Member Functions;  TCudaTensor ();  ;  TCudaTensor (const AFloat *data, const std::vector< size_t > &shape, MemoryLayout memlayout=MemoryLayout::ColumnMajor, int deviceIndx=0, int streamIndx=0);  ;  TCudaTensor (const std::vector< size_t > &shape, MemoryLayout memlayout=MemoryLayout::ColumnMajor, int deviceIndx=0, int streamIndx=0);  ;  TCudaTensor (const TCudaMatrix< AFloat > &m, size_t dim=2);  ;  TCudaTensor (const TCudaTensor &)=default;  ;  TCudaTensor (const TMatrixT< AFloat > &m, size_t dim=2);  ;  TCudaTensor (size_t bsize, size_t csize, size_t hsize, size_t wsize, MemoryLayout memlayout=MemoryLayout::ColumnMajor, int deviceIndx=0, int streamIndx=0);  ;  TCudaTensor (size_t bsize, size_t csize, size_t hwsize, MemoryLayout memlayout=MemoryLayout::ColumnMajor, int deviceIndx=0, int streamIndx=0);  ;  TCudaTensor (size_t n, size_t m, MemoryLayout memlayout=MemoryLayout::ColumnMajor, int deviceIndx=0, int streamIndx=0);  ;  TCudaTensor (TCudaDeviceBuffer< AFloat > buffer, const std::vector< size_t > &shape, MemoryLayout memlayout=MemoryLayout::ColumnMajor, int deviceIndx=0, int streamIndx=0);  ;  TCudaTensor (TCudaDeviceBuffer< AFloat > buffer, size_t n, size_t m);  ",MatchSource.WIKI,doc/master/classTMVA_1_1DNN_1_1TCudaTensor.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1DNN_1_1TCudaTensor.html
Integrability,rout,routine,"ename Data_t , typename AArchitecture > . TBatch< AArchitecture > TMVA::DNN::TDataLoader< Data_t, AArchitecture >::GetBatch. Return the next batch from the training set. ; The TDataLoader object keeps an internal counter that cycles over the batches in the training set. ; Definition at line 228 of file DataLoader.h. ◆ operator=() [1/2]. template<typename Data_t , typename AArchitecture > . TDataLoader & TMVA::DNN::TDataLoader< Data_t, AArchitecture >::operator= ; (; const TDataLoader< Data_t, AArchitecture > & ; ). default . ◆ operator=() [2/2]. template<typename Data_t , typename AArchitecture > . TDataLoader & TMVA::DNN::TDataLoader< Data_t, AArchitecture >::operator= ; (; TDataLoader< Data_t, AArchitecture > && ; ). default . ◆ Shuffle(). template<typename Data_t , typename AArchitecture > . void TMVA::DNN::TDataLoader< Data_t, AArchitecture >::Shuffle. Shuffle the order of the samples in the batch. ; The shuffling is indirect, i.e. only the indices are shuffled. No input data is moved by this routine. ; Definition at line 269 of file DataLoader.h. Member Data Documentation. ◆ fBatchIndex. template<typename Data_t , typename AArchitecture > . size_t TMVA::DNN::TDataLoader< Data_t, AArchitecture >::fBatchIndex. private . Definition at line 143 of file DataLoader.h. ◆ fBatchSize. template<typename Data_t , typename AArchitecture > . size_t TMVA::DNN::TDataLoader< Data_t, AArchitecture >::fBatchSize. private . Definition at line 140 of file DataLoader.h. ◆ fData. template<typename Data_t , typename AArchitecture > . const Data_t& TMVA::DNN::TDataLoader< Data_t, AArchitecture >::fData. private . Definition at line 137 of file DataLoader.h. ◆ fDeviceBuffers. template<typename Data_t , typename AArchitecture > . std::vector<DeviceBuffer_t> TMVA::DNN::TDataLoader< Data_t, AArchitecture >::fDeviceBuffers. private . Definition at line 146 of file DataLoader.h. ◆ fHostBuffers. template<typename Data_t , typename AArchitecture > . std::vector<HostBuffer_t> TMVA::DNN::TDataL",MatchSource.WIKI,doc/master/classTMVA_1_1DNN_1_1TDataLoader.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1DNN_1_1TDataLoader.html
Integrability,rout,routine,"pename AData , typename AReal > . TBatch< TReference< AReal > > TMVA::DNN::TDataLoader< AData, TReference< AReal > >::GetBatch. Return the next batch from the training set. ; The TDataLoader object keeps an internal counter that cycles over the batches in the training set. ; Definition at line 97 of file DataLoader.h. ◆ operator=() [1/2]. template<typename AData , typename AReal > . TDataLoader & TMVA::DNN::TDataLoader< AData, TReference< AReal > >::operator= ; (; const TDataLoader< AData, TReference< AReal > > & ; ). default . ◆ operator=() [2/2]. template<typename AData , typename AReal > . TDataLoader & TMVA::DNN::TDataLoader< AData, TReference< AReal > >::operator= ; (; TDataLoader< AData, TReference< AReal > > && ; ). default . ◆ Shuffle(). template<typename AData , typename AReal > . void TMVA::DNN::TDataLoader< AData, TReference< AReal > >::Shuffle. Shuffle the order of the samples in the batch. ; The shuffling is indirect, i.e. only the indices are shuffled. No input data is moved by this routine. ; Definition at line 115 of file DataLoader.h. Member Data Documentation. ◆ fBatchIndex. template<typename AData , typename AReal > . size_t TMVA::DNN::TDataLoader< AData, TReference< AReal > >::fBatchIndex. private . Definition at line 43 of file DataLoader.h. ◆ fBatchSize. template<typename AData , typename AReal > . size_t TMVA::DNN::TDataLoader< AData, TReference< AReal > >::fBatchSize. private . Definition at line 40 of file DataLoader.h. ◆ fData. template<typename AData , typename AReal > . const AData& TMVA::DNN::TDataLoader< AData, TReference< AReal > >::fData. private . Definition at line 37 of file DataLoader.h. ◆ fNInputFeatures. template<typename AData , typename AReal > . size_t TMVA::DNN::TDataLoader< AData, TReference< AReal > >::fNInputFeatures. private . Definition at line 41 of file DataLoader.h. ◆ fNOutputFeatures. template<typename AData , typename AReal > . size_t TMVA::DNN::TDataLoader< AData, TReference< AReal > >::fNOutputFeatures. private .",MatchSource.WIKI,doc/master/classTMVA_1_1DNN_1_1TDataLoader_3_01AData_00_01TReference_3_01AReal_01_4_01_4.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1DNN_1_1TDataLoader_3_01AData_00_01TReference_3_01AReal_01_4_01_4.html
Deployability,update,update," ;  ; void Prediction (Matrix_t &predictions, EOutputFunction f) const;  Prediction based on activations stored in the last layer. ;  ; void Prediction (Matrix_t &predictions, Tensor_t &input, EOutputFunction f);  Prediction for the given inputs, based on what network learned. ;  ; void Print () const;  Print the Deep Net Info. ;  ; Scalar_t RegularizationTerm () const;  Function for computing the regularizaton term to be added to the loss function .  ; void ResetTraining ();  Function that reset some training flags after looping all the events but not the weights. ;  ; void SetBatchDepth (size_t batchDepth);  ; void SetBatchHeight (size_t batchHeight);  ; void SetBatchSize (size_t batchSize);  Setters. ;  ; void SetBatchWidth (size_t batchWidth);  ; void SetDropoutProbabilities (const std::vector< Double_t > &probabilities);  ; void SetInitialization (EInitialization I);  ; void SetInputDepth (size_t inputDepth);  ; void SetInputHeight (size_t inputHeight);  ; void SetInputWidth (size_t inputWidth);  ; void SetLossFunction (ELossFunction J);  ; void SetRegularization (ERegularization R);  ; void SetWeightDecay (Scalar_t weightDecay);  ; void Update (Scalar_t learningRate);  Function that will update the weights and biases in the layers that contain weights and biases. ;  . Private Member Functions; size_t calculateDimension (int imgDim, int fltDim, int padding, int stride);  ; bool isInteger (Scalar_t x) const;  . Private Attributes; size_t fBatchDepth;  The depth of the batch used for training/testing. ;  ; size_t fBatchHeight;  The height of the batch used for training/testing. ;  ; size_t fBatchSize;  Batch size used for training and evaluation. ;  ; size_t fBatchWidth;  The width of the batch used for training/testing. ;  ; EInitialization fI;  The initialization method of the network. ;  ; size_t fInputDepth;  The depth of the input. ;  ; size_t fInputHeight;  The height of the input. ;  ; size_t fInputWidth;  The width of the input. ;  ; bool fIsTraining;  Is ",MatchSource.WIKI,doc/master/classTMVA_1_1DNN_1_1TDeepNet.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1DNN_1_1TDeepNet.html
Modifiability,layers,layers," for adding Max Pooling layer in the Deep Neural Network, when the layer is already created. ;  ; TMaxPoolLayer< Architecture_t > * AddMaxPoolLayer (size_t frameHeight, size_t frameWidth, size_t strideRows, size_t strideCols, Scalar_t dropoutProbability=1.0);  Function for adding Pooling layer in the Deep Neural Network, with a given filter height and width, striding in rows and columns as well as the dropout probability. ;  ; TReshapeLayer< Architecture_t > * AddReshapeLayer (size_t depth, size_t height, size_t width, bool flattening);  Function for adding Reshape Layer in the Deep Neural Network, with a given height and width. ;  ; void AddReshapeLayer (TReshapeLayer< Architecture_t > *reshapeLayer);  Function for adding Reshape Layer in the Deep Neural Network, when the layer is already created. ;  ; void Backward (const Tensor_t &input, const Matrix_t &groundTruth, const Matrix_t &weights);  Function that executes the entire backward pass in the network. ;  ; void Clear ();  Remove all layers from the network. ;  ; void Forward (Tensor_t &input, bool applyDropout=false);  Function that executes the entire forward pass in the network. ;  ; size_t GetBatchDepth () const;  ; size_t GetBatchHeight () const;  ; size_t GetBatchSize () const;  Getters. ;  ; size_t GetBatchWidth () const;  ; size_t GetDepth () const;  ; EInitialization GetInitialization () const;  ; size_t GetInputDepth () const;  ; size_t GetInputHeight () const;  ; size_t GetInputWidth () const;  ; Layer_t * GetLayerAt (size_t i);  Get the layer in the vector of layers at position i. ;  ; const Layer_t * GetLayerAt (size_t i) const;  ; std::vector< Layer_t * > & GetLayers ();  ; const std::vector< Layer_t * > & GetLayers () const;  ; ELossFunction GetLossFunction () const;  ; size_t GetOutputWidth () const;  ; ERegularization GetRegularization () const;  ; Scalar_t GetWeightDecay () const;  ; void Initialize ();  DAE functions. ;  ; bool IsTraining () const;  ; Scalar_t Loss (const Matrix_t &groundTrut",MatchSource.WIKI,doc/master/classTMVA_1_1DNN_1_1TDeepNet.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1DNN_1_1TDeepNet.html
Safety,predict,predictions,"st;  ; size_t GetInputWidth () const;  ; Layer_t * GetLayerAt (size_t i);  Get the layer in the vector of layers at position i. ;  ; const Layer_t * GetLayerAt (size_t i) const;  ; std::vector< Layer_t * > & GetLayers ();  ; const std::vector< Layer_t * > & GetLayers () const;  ; ELossFunction GetLossFunction () const;  ; size_t GetOutputWidth () const;  ; ERegularization GetRegularization () const;  ; Scalar_t GetWeightDecay () const;  ; void Initialize ();  DAE functions. ;  ; bool IsTraining () const;  ; Scalar_t Loss (const Matrix_t &groundTruth, const Matrix_t &weights, bool includeRegularization=true) const;  Function for evaluating the loss, based on the activations stored in the last layer. ;  ; Scalar_t Loss (Tensor_t &input, const Matrix_t &groundTruth, const Matrix_t &weights, bool inTraining=false, bool includeRegularization=true);  Function for evaluating the loss, based on the propagation of the given input. ;  ; void Prediction (Matrix_t &predictions, EOutputFunction f) const;  Prediction based on activations stored in the last layer. ;  ; void Prediction (Matrix_t &predictions, Tensor_t &input, EOutputFunction f);  Prediction for the given inputs, based on what network learned. ;  ; void Print () const;  Print the Deep Net Info. ;  ; Scalar_t RegularizationTerm () const;  Function for computing the regularizaton term to be added to the loss function .  ; void ResetTraining ();  Function that reset some training flags after looping all the events but not the weights. ;  ; void SetBatchDepth (size_t batchDepth);  ; void SetBatchHeight (size_t batchHeight);  ; void SetBatchSize (size_t batchSize);  Setters. ;  ; void SetBatchWidth (size_t batchWidth);  ; void SetDropoutProbabilities (const std::vector< Double_t > &probabilities);  ; void SetInitialization (EInitialization I);  ; void SetInputDepth (size_t inputDepth);  ; void SetInputHeight (size_t inputHeight);  ; void SetInputWidth (size_t inputWidth);  ; void SetLossFunction (ELossFunction J);  ; voi",MatchSource.WIKI,doc/master/classTMVA_1_1DNN_1_1TDeepNet.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1DNN_1_1TDeepNet.html
Testability,test,testing,"unction that reset some training flags after looping all the events but not the weights. ;  ; void SetBatchDepth (size_t batchDepth);  ; void SetBatchHeight (size_t batchHeight);  ; void SetBatchSize (size_t batchSize);  Setters. ;  ; void SetBatchWidth (size_t batchWidth);  ; void SetDropoutProbabilities (const std::vector< Double_t > &probabilities);  ; void SetInitialization (EInitialization I);  ; void SetInputDepth (size_t inputDepth);  ; void SetInputHeight (size_t inputHeight);  ; void SetInputWidth (size_t inputWidth);  ; void SetLossFunction (ELossFunction J);  ; void SetRegularization (ERegularization R);  ; void SetWeightDecay (Scalar_t weightDecay);  ; void Update (Scalar_t learningRate);  Function that will update the weights and biases in the layers that contain weights and biases. ;  . Private Member Functions; size_t calculateDimension (int imgDim, int fltDim, int padding, int stride);  ; bool isInteger (Scalar_t x) const;  . Private Attributes; size_t fBatchDepth;  The depth of the batch used for training/testing. ;  ; size_t fBatchHeight;  The height of the batch used for training/testing. ;  ; size_t fBatchSize;  Batch size used for training and evaluation. ;  ; size_t fBatchWidth;  The width of the batch used for training/testing. ;  ; EInitialization fI;  The initialization method of the network. ;  ; size_t fInputDepth;  The depth of the input. ;  ; size_t fInputHeight;  The height of the input. ;  ; size_t fInputWidth;  The width of the input. ;  ; bool fIsTraining;  Is the network training? ;  ; ELossFunction fJ;  The loss function of the network. ;  ; std::vector< Layer_t * > fLayers;  The layers consisting the DeepNet. ;  ; ERegularization fR;  The regularization used for the network. ;  ; Scalar_t fWeightDecay;  The weight decay factor. ;  . #include <TMVA/DNN/DeepNet.h>; Member Typedef Documentation. ◆ Matrix_t. template<typename Architecture_t , typename Layer_t = VGeneralLayer<Architecture_t>> . using TMVA::DNN::TDeepNet< Architecture_t,",MatchSource.WIKI,doc/master/classTMVA_1_1DNN_1_1TDeepNet.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1DNN_1_1TDeepNet.html
Usability,learn,learned," Layer_t * GetLayerAt (size_t i) const;  ; std::vector< Layer_t * > & GetLayers ();  ; const std::vector< Layer_t * > & GetLayers () const;  ; ELossFunction GetLossFunction () const;  ; size_t GetOutputWidth () const;  ; ERegularization GetRegularization () const;  ; Scalar_t GetWeightDecay () const;  ; void Initialize ();  DAE functions. ;  ; bool IsTraining () const;  ; Scalar_t Loss (const Matrix_t &groundTruth, const Matrix_t &weights, bool includeRegularization=true) const;  Function for evaluating the loss, based on the activations stored in the last layer. ;  ; Scalar_t Loss (Tensor_t &input, const Matrix_t &groundTruth, const Matrix_t &weights, bool inTraining=false, bool includeRegularization=true);  Function for evaluating the loss, based on the propagation of the given input. ;  ; void Prediction (Matrix_t &predictions, EOutputFunction f) const;  Prediction based on activations stored in the last layer. ;  ; void Prediction (Matrix_t &predictions, Tensor_t &input, EOutputFunction f);  Prediction for the given inputs, based on what network learned. ;  ; void Print () const;  Print the Deep Net Info. ;  ; Scalar_t RegularizationTerm () const;  Function for computing the regularizaton term to be added to the loss function .  ; void ResetTraining ();  Function that reset some training flags after looping all the events but not the weights. ;  ; void SetBatchDepth (size_t batchDepth);  ; void SetBatchHeight (size_t batchHeight);  ; void SetBatchSize (size_t batchSize);  Setters. ;  ; void SetBatchWidth (size_t batchWidth);  ; void SetDropoutProbabilities (const std::vector< Double_t > &probabilities);  ; void SetInitialization (EInitialization I);  ; void SetInputDepth (size_t inputDepth);  ; void SetInputHeight (size_t inputHeight);  ; void SetInputWidth (size_t inputWidth);  ; void SetLossFunction (ELossFunction J);  ; void SetRegularization (ERegularization R);  ; void SetWeightDecay (Scalar_t weightDecay);  ; void Update (Scalar_t learningRate);  Function t",MatchSource.WIKI,doc/master/classTMVA_1_1DNN_1_1TDeepNet.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1DNN_1_1TDeepNet.html
Energy Efficiency,allocate,allocates,". ROOT: TMVA::DNN::TDenseLayer< Architecture_t > Class Template Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Private Attributes |; List of all members ; TMVA::DNN::TDenseLayer< Architecture_t > Class Template Reference. ; template<typename Architecture_t>; class TMVA::DNN::TDenseLayer< Architecture_t >Generic layer class. ; This generic layer class represents a dense layer of a neural network with a given width n and activation function f. The activation function of each layer is given by \(\mathbf{u} = \mathbf{W}\mathbf{x} + \boldsymbol{\theta}\).; In addition to the weight and bias matrices, each layer allocates memory for its activations and the corresponding input tensor before evaluation of the activation function as well as the gradients of the weights and biases.; The layer provides member functions for the forward propagation of activations through the given layer. ; Definition at line 59 of file DenseLayer.h. Public Types; using Matrix_t = typename Architecture_t::Matrix_t;  ; using Scalar_t = typename Architecture_t::Scalar_t;  ; using Tensor_t = typename Architecture_t::Tensor_t;  . Public Member Functions;  TDenseLayer (const TDenseLayer &);  Copy Constructor. ;  ;  TDenseLayer (size_t BatchSize, size_t InputWidth, size_t Width, EInitialization init, Scalar_t DropoutProbability, EActivationFunction f, ERegularization reg, Scalar_t weightDecay);  Constructor. ;  ;  TDenseLayer (TDenseLayer< Architecture_t > *layer);  Copy the dense layer provided as a pointer. ;  ;  ~TDenseLayer ();  Destructor. ;  ; virtual void AddWeightsXMLTo (void *parent);  Writes the information and the weights about the layer in an XML node. ;  ; void Backward (Tensor_t &gradients_backward, const Tensor_t &activations_backward);  Compute weight, bias and activation gradients. ;  ; void Forward (Tensor_t &input, bool applyDropout=false);  Compute activation of the layer fo",MatchSource.WIKI,doc/master/classTMVA_1_1DNN_1_1TDenseLayer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1DNN_1_1TDenseLayer.html
Modifiability,inherit,inherited,"oid *parent);  Writes the information and the weights about the layer in an XML node. ;  ; void Backward (Tensor_t &gradients_backward, const Tensor_t &activations_backward);  Compute weight, bias and activation gradients. ;  ; void Forward (Tensor_t &input, bool applyDropout=false);  Compute activation of the layer for the given input. ;  ; EActivationFunction GetActivationFunction () const;  ; Scalar_t GetDropoutProbability () const;  Getters. ;  ; Tensor_t & GetInputActivation ();  ; const Tensor_t & GetInputActivation () const;  ; ERegularization GetRegularization () const;  ; Scalar_t GetWeightDecay () const;  ; void Print () const;  std::vector<Matrix_t> &inp1, std::vector<Matrix_t> &inp2); ;  ; virtual void ReadWeightsFromXML (void *parent);  Read the information and the weights about the layer from XML node. ;  ; virtual void SetDropoutProbability (Scalar_t dropoutProbability);  Set dropout probabilities. ;  ;  Public Member Functions inherited from TMVA::DNN::VGeneralLayer< Architecture_t >;  VGeneralLayer (const VGeneralLayer &);  Copy Constructor. ;  ;  VGeneralLayer (size_t BatchSize, size_t InputDepth, size_t InputHeight, size_t InputWidth, size_t Depth, size_t Height, size_t Width, size_t WeightsNSlices, size_t WeightsNRows, size_t WeightsNCols, size_t BiasesNSlices, size_t BiasesNRows, size_t BiasesNCols, size_t OutputNSlices, size_t OutputNRows, size_t OutputNCols, EInitialization Init);  Constructor. ;  ;  VGeneralLayer (size_t BatchSize, size_t InputDepth, size_t InputHeight, size_t InputWidth, size_t Depth, size_t Height, size_t Width, size_t WeightsNSlices, std::vector< size_t > WeightsNRows, std::vector< size_t > WeightsNCols, size_t BiasesNSlices, std::vector< size_t > BiasesNRows, std::vector< size_t > BiasesNCols, size_t OutputNSlices, size_t OutputNRows, size_t OutputNCols, EInitialization Init);  General Constructor with different weights dimension. ;  ;  VGeneralLayer (VGeneralLayer< Architecture_t > *layer);  Copy the layer provided as a ",MatchSource.WIKI,doc/master/classTMVA_1_1DNN_1_1TDenseLayer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1DNN_1_1TDenseLayer.html
Usability,learn,learningRate,"dients ();  ; const std::vector< Matrix_t > & GetWeightGradients () const;  ; Matrix_t & GetWeightGradientsAt (size_t i);  ; const Matrix_t & GetWeightGradientsAt (size_t i) const;  ; std::vector< Matrix_t > & GetWeights ();  ; const std::vector< Matrix_t > & GetWeights () const;  ; Matrix_t & GetWeightsAt (size_t i);  ; const Matrix_t & GetWeightsAt (size_t i) const;  ; size_t GetWidth () const;  ; virtual void Initialize ();  Initialize the weights and biases according to the given initialization method. ;  ; bool IsTraining () const;  ; void ReadMatrixXML (void *node, const char *name, Matrix_t &matrix);  ; virtual void ResetTraining ();  Reset some training flags after a loop on all batches Some layer (e.g. ;  ; void SetBatchSize (size_t batchSize);  Setters. ;  ; void SetDepth (size_t depth);  ; virtual void SetExtraLayerParameters (const std::vector< Matrix_t > &);  ; void SetHeight (size_t height);  ; void SetInputDepth (size_t inputDepth);  ; void SetInputHeight (size_t inputHeight);  ; void SetInputWidth (size_t inputWidth);  ; void SetIsTraining (bool isTraining);  ; void SetWidth (size_t width);  ; void Update (const Scalar_t learningRate);  Updates the weights and biases, given the learning rate. ;  ; void UpdateBiases (const std::vector< Matrix_t > &biasGradients, const Scalar_t learningRate);  Updates the biases, given the gradients and the learning rate. ;  ; void UpdateBiasGradients (const std::vector< Matrix_t > &biasGradients, const Scalar_t learningRate);  Updates the bias gradients, given some other weight gradients and learning rate. ;  ; void UpdateWeightGradients (const std::vector< Matrix_t > &weightGradients, const Scalar_t learningRate);  Updates the weight gradients, given some other weight gradients and learning rate. ;  ; void UpdateWeights (const std::vector< Matrix_t > &weightGradients, const Scalar_t learningRate);  Updates the weights, given the gradients and the learning rate,. ;  ; void WriteMatrixToXML (void *node, const char *nam",MatchSource.WIKI,doc/master/classTMVA_1_1DNN_1_1TDenseLayer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1DNN_1_1TDenseLayer.html
Availability,error,error,"ntDescent< Architecture_t > Class Template Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Private Attributes |; List of all members ; TMVA::DNN::TDLGradientDescent< Architecture_t > Class Template Reference. ; template<typename Architecture_t>; class TMVA::DNN::TDLGradientDescent< Architecture_t >; Definition at line 65 of file DLMinimizers.h. Public Types; using DeepNet_t = TDeepNet< Architecture_t >;  ; using Matrix_t = typename Architecture_t::Matrix_t;  ; using Scalar_t = typename Architecture_t::Scalar_t;  . Public Member Functions;  TDLGradientDescent ();  ;  TDLGradientDescent (Scalar_t learningRate, size_t convergenceSteps, size_t testInterval);  ; size_t GetConvergenceCount () const;  Getters. ;  ; size_t GetConvergenceSteps () const;  ; Scalar_t GetTestError () const;  ; size_t GetTestInterval () const;  ; Scalar_t GetTrainingError () const;  ; bool HasConverged ();  Increases the minimization step counter by the test error evaluation period and uses the current internal value of the test error to determine if the minimization has converged. ;  ; bool HasConverged (Scalar_t testError);  Increases the minimization step counter by the test error evaluation period and uses the provided test error value to determine if the minimization has converged. ;  ; void Reset ();  Reset minimizer object to default state. ;  ; void SetBatchSize (Scalar_t rate);  ; void SetConvergenceSteps (size_t steps);  Setters. ;  ; void SetLearningRate (Scalar_t rate);  ; void SetTestInterval (size_t interval);  ; void Step (DeepNet_t &deepNet, std::vector< Matrix_t > &input, const Matrix_t &output, const Matrix_t &weights);  Perform a single optimization step on a given batch. ;  ; void Step (DeepNet_t &master, std::vector< DeepNet_t > &nets, std::vector< TTensorBatch< Architecture_t > > &batches);  Perform multiple optimization steps simultaneously. ;  ; Scalar_t StepLoss ",MatchSource.WIKI,doc/master/classTMVA_1_1DNN_1_1TDLGradientDescent.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1DNN_1_1TDLGradientDescent.html
