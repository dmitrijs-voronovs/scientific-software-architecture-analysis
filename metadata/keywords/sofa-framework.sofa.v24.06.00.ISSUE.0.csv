id,quality_attribute,keyword,matched_word,match_idx,sentence,source,author,repo,version,wiki,url
https://github.com/sofa-framework/sofa/issues/2:154,Availability,error,errors,154,"### Details. If the option in the CMake file SOFA_FLOATING_POINT_TYPE is set on float only. Compilation fails initially in SofaDenseSolver library due to errors with the Newmat library, which propagates in further dependencies. It seems that there is no float version of the methods inside Newmat.; ### Build output sample; - 3> Creating library C:/.../lib/Debug/SofaDenseSolver_d.lib and object C:/.../lib/Debug/SofaDenseSolver_d.exp; - 3>LULinearSolver.obj : error LNK2001: unresolved external symbol ""public: virtual float __cdecl NEWMAT::BaseMatrix::SumSquare(void)const "" (?SumSquare@BaseMatrix@NEWMAT@@UEBAMXZ); - 3>NewMatCGLinearSolver.obj : error LNK2001: unresolved external symbol ""public: virtual float __cdecl NEWMAT::BaseMatrix::SumSquare(void)const "" (?SumSquare@BaseMatrix@NEWMAT@@UEBAMXZ); - 3>initDenseSolver.obj : error LNK2001: unresolved external symbol ""public: virtual float __cdecl NEWMAT::BaseMatrix::SumSquare(void)const "" (?SumSquare@BaseMatrix@NEWMAT@@UEBAMXZ); - 3>LULinearSolver.obj : error LNK2001: unresolved external symbol ""public: virtual float __cdecl NEWMAT::BaseMatrix::SumAbsoluteValue(void)const "" (?SumAbsoluteValue@BaseMatrix@NEWMAT@@UEBAMXZ)",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/2
https://github.com/sofa-framework/sofa/issues/2:461,Availability,error,error,461,"### Details. If the option in the CMake file SOFA_FLOATING_POINT_TYPE is set on float only. Compilation fails initially in SofaDenseSolver library due to errors with the Newmat library, which propagates in further dependencies. It seems that there is no float version of the methods inside Newmat.; ### Build output sample; - 3> Creating library C:/.../lib/Debug/SofaDenseSolver_d.lib and object C:/.../lib/Debug/SofaDenseSolver_d.exp; - 3>LULinearSolver.obj : error LNK2001: unresolved external symbol ""public: virtual float __cdecl NEWMAT::BaseMatrix::SumSquare(void)const "" (?SumSquare@BaseMatrix@NEWMAT@@UEBAMXZ); - 3>NewMatCGLinearSolver.obj : error LNK2001: unresolved external symbol ""public: virtual float __cdecl NEWMAT::BaseMatrix::SumSquare(void)const "" (?SumSquare@BaseMatrix@NEWMAT@@UEBAMXZ); - 3>initDenseSolver.obj : error LNK2001: unresolved external symbol ""public: virtual float __cdecl NEWMAT::BaseMatrix::SumSquare(void)const "" (?SumSquare@BaseMatrix@NEWMAT@@UEBAMXZ); - 3>LULinearSolver.obj : error LNK2001: unresolved external symbol ""public: virtual float __cdecl NEWMAT::BaseMatrix::SumAbsoluteValue(void)const "" (?SumAbsoluteValue@BaseMatrix@NEWMAT@@UEBAMXZ)",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/2
https://github.com/sofa-framework/sofa/issues/2:649,Availability,error,error,649,"### Details. If the option in the CMake file SOFA_FLOATING_POINT_TYPE is set on float only. Compilation fails initially in SofaDenseSolver library due to errors with the Newmat library, which propagates in further dependencies. It seems that there is no float version of the methods inside Newmat.; ### Build output sample; - 3> Creating library C:/.../lib/Debug/SofaDenseSolver_d.lib and object C:/.../lib/Debug/SofaDenseSolver_d.exp; - 3>LULinearSolver.obj : error LNK2001: unresolved external symbol ""public: virtual float __cdecl NEWMAT::BaseMatrix::SumSquare(void)const "" (?SumSquare@BaseMatrix@NEWMAT@@UEBAMXZ); - 3>NewMatCGLinearSolver.obj : error LNK2001: unresolved external symbol ""public: virtual float __cdecl NEWMAT::BaseMatrix::SumSquare(void)const "" (?SumSquare@BaseMatrix@NEWMAT@@UEBAMXZ); - 3>initDenseSolver.obj : error LNK2001: unresolved external symbol ""public: virtual float __cdecl NEWMAT::BaseMatrix::SumSquare(void)const "" (?SumSquare@BaseMatrix@NEWMAT@@UEBAMXZ); - 3>LULinearSolver.obj : error LNK2001: unresolved external symbol ""public: virtual float __cdecl NEWMAT::BaseMatrix::SumAbsoluteValue(void)const "" (?SumAbsoluteValue@BaseMatrix@NEWMAT@@UEBAMXZ)",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/2
https://github.com/sofa-framework/sofa/issues/2:832,Availability,error,error,832,"### Details. If the option in the CMake file SOFA_FLOATING_POINT_TYPE is set on float only. Compilation fails initially in SofaDenseSolver library due to errors with the Newmat library, which propagates in further dependencies. It seems that there is no float version of the methods inside Newmat.; ### Build output sample; - 3> Creating library C:/.../lib/Debug/SofaDenseSolver_d.lib and object C:/.../lib/Debug/SofaDenseSolver_d.exp; - 3>LULinearSolver.obj : error LNK2001: unresolved external symbol ""public: virtual float __cdecl NEWMAT::BaseMatrix::SumSquare(void)const "" (?SumSquare@BaseMatrix@NEWMAT@@UEBAMXZ); - 3>NewMatCGLinearSolver.obj : error LNK2001: unresolved external symbol ""public: virtual float __cdecl NEWMAT::BaseMatrix::SumSquare(void)const "" (?SumSquare@BaseMatrix@NEWMAT@@UEBAMXZ); - 3>initDenseSolver.obj : error LNK2001: unresolved external symbol ""public: virtual float __cdecl NEWMAT::BaseMatrix::SumSquare(void)const "" (?SumSquare@BaseMatrix@NEWMAT@@UEBAMXZ); - 3>LULinearSolver.obj : error LNK2001: unresolved external symbol ""public: virtual float __cdecl NEWMAT::BaseMatrix::SumAbsoluteValue(void)const "" (?SumAbsoluteValue@BaseMatrix@NEWMAT@@UEBAMXZ)",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/2
https://github.com/sofa-framework/sofa/issues/2:1014,Availability,error,error,1014,"### Details. If the option in the CMake file SOFA_FLOATING_POINT_TYPE is set on float only. Compilation fails initially in SofaDenseSolver library due to errors with the Newmat library, which propagates in further dependencies. It seems that there is no float version of the methods inside Newmat.; ### Build output sample; - 3> Creating library C:/.../lib/Debug/SofaDenseSolver_d.lib and object C:/.../lib/Debug/SofaDenseSolver_d.exp; - 3>LULinearSolver.obj : error LNK2001: unresolved external symbol ""public: virtual float __cdecl NEWMAT::BaseMatrix::SumSquare(void)const "" (?SumSquare@BaseMatrix@NEWMAT@@UEBAMXZ); - 3>NewMatCGLinearSolver.obj : error LNK2001: unresolved external symbol ""public: virtual float __cdecl NEWMAT::BaseMatrix::SumSquare(void)const "" (?SumSquare@BaseMatrix@NEWMAT@@UEBAMXZ); - 3>initDenseSolver.obj : error LNK2001: unresolved external symbol ""public: virtual float __cdecl NEWMAT::BaseMatrix::SumSquare(void)const "" (?SumSquare@BaseMatrix@NEWMAT@@UEBAMXZ); - 3>LULinearSolver.obj : error LNK2001: unresolved external symbol ""public: virtual float __cdecl NEWMAT::BaseMatrix::SumAbsoluteValue(void)const "" (?SumAbsoluteValue@BaseMatrix@NEWMAT@@UEBAMXZ)",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/2
https://github.com/sofa-framework/sofa/issues/2:214,Integrability,depend,dependencies,214,"### Details. If the option in the CMake file SOFA_FLOATING_POINT_TYPE is set on float only. Compilation fails initially in SofaDenseSolver library due to errors with the Newmat library, which propagates in further dependencies. It seems that there is no float version of the methods inside Newmat.; ### Build output sample; - 3> Creating library C:/.../lib/Debug/SofaDenseSolver_d.lib and object C:/.../lib/Debug/SofaDenseSolver_d.exp; - 3>LULinearSolver.obj : error LNK2001: unresolved external symbol ""public: virtual float __cdecl NEWMAT::BaseMatrix::SumSquare(void)const "" (?SumSquare@BaseMatrix@NEWMAT@@UEBAMXZ); - 3>NewMatCGLinearSolver.obj : error LNK2001: unresolved external symbol ""public: virtual float __cdecl NEWMAT::BaseMatrix::SumSquare(void)const "" (?SumSquare@BaseMatrix@NEWMAT@@UEBAMXZ); - 3>initDenseSolver.obj : error LNK2001: unresolved external symbol ""public: virtual float __cdecl NEWMAT::BaseMatrix::SumSquare(void)const "" (?SumSquare@BaseMatrix@NEWMAT@@UEBAMXZ); - 3>LULinearSolver.obj : error LNK2001: unresolved external symbol ""public: virtual float __cdecl NEWMAT::BaseMatrix::SumAbsoluteValue(void)const "" (?SumAbsoluteValue@BaseMatrix@NEWMAT@@UEBAMXZ)",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/2
https://github.com/sofa-framework/sofa/pull/3:122,Availability,error,error,122,"The preprocessor directive #warning is not standard. It does not exist on Windows in the Visual C++ compiler, creating an error in compilation.",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3
https://github.com/sofa-framework/sofa/pull/4:821,Testability,test,tested,821,"As suggested by Alex Bilger in SOFA forum: https://www.sofa-framework.org/community/forum/topic/duplicated-components-in-xml-export/. > Hello guys,; > ; > I noticed a bad behavior when exporting a scene in xml. The components are duplicated within the same node. The node components are written, then the sub-nodes, and then the same node components again.; > You can get the same behavior by opening any sofa scene and exporting it (File -> Save As in runSofa), then open it in a text editor.; > I see that the xml export uses visitors. I found that the objects are processed twice: once in processNodeTopDown and once in processNodeBottomUp. So I removed the processing part in processNodeBottomUp, and kept only the node closure. I get the expected behavior. Could you guys confirm this is the right thing to do?; > I tested on Windows with a very recent commit.",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4
https://github.com/sofa-framework/sofa/issues/5:149,Deployability,continuous,continuous,149,There seems to be a memory leak when using LocalMinDistance for collision detection. This can be seen if the memory usage is monitored when there is continuous collision between two objects. This has been checked with v15.12 and the latest changes from master branch.The code has been checked for LocalMinDistance as well as through valgrind tool but no result till now. Refer to the post on the forum:; [https://www.sofa-framework.org/community/forum/topic/memory-leak-when-using-localmindistance/](https://www.sofa-framework.org/community/forum/topic/memory-leak-when-using-localmindistance/),MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/5
https://github.com/sofa-framework/sofa/issues/5:125,Energy Efficiency,monitor,monitored,125,There seems to be a memory leak when using LocalMinDistance for collision detection. This can be seen if the memory usage is monitored when there is continuous collision between two objects. This has been checked with v15.12 and the latest changes from master branch.The code has been checked for LocalMinDistance as well as through valgrind tool but no result till now. Refer to the post on the forum:; [https://www.sofa-framework.org/community/forum/topic/memory-leak-when-using-localmindistance/](https://www.sofa-framework.org/community/forum/topic/memory-leak-when-using-localmindistance/),MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/5
https://github.com/sofa-framework/sofa/issues/5:74,Safety,detect,detection,74,There seems to be a memory leak when using LocalMinDistance for collision detection. This can be seen if the memory usage is monitored when there is continuous collision between two objects. This has been checked with v15.12 and the latest changes from master branch.The code has been checked for LocalMinDistance as well as through valgrind tool but no result till now. Refer to the post on the forum:; [https://www.sofa-framework.org/community/forum/topic/memory-leak-when-using-localmindistance/](https://www.sofa-framework.org/community/forum/topic/memory-leak-when-using-localmindistance/),MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/5
https://github.com/sofa-framework/sofa/pull/6:42,Modifiability,Plugin,Plugin,42,"To reproduce the bug: start runSofa, open Plugin Manager, add a plugin, remove the plugin, segfault.",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/6
https://github.com/sofa-framework/sofa/pull/6:64,Modifiability,plugin,plugin,64,"To reproduce the bug: start runSofa, open Plugin Manager, add a plugin, remove the plugin, segfault.",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/6
https://github.com/sofa-framework/sofa/pull/6:83,Modifiability,plugin,plugin,83,"To reproduce the bug: start runSofa, open Plugin Manager, add a plugin, remove the plugin, segfault.",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/6
https://github.com/sofa-framework/sofa/issues/7:266,Usability,simpl,simply,266,"Since drawQuad (as well as drawTriangle..) is a public function, one could think that we can call it from any draw function and get a Quad drawn. But drawQuad doesn't call glBegin(GL_QUADS) which than fail to draw the quad. We must call ourself glBegin(GL_QUADS) or simply call drawQuads with a vector of 4 vertices. Should drawQuad function (as well as drawTriangle..) be made private? Or maybe add a boolean parameter in drawQuad to disable the glBegin calls when we are drawing more than one quad?",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/7
https://github.com/sofa-framework/sofa/pull/8:0,Deployability,update,update,0,update the collodi branch,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/8
https://github.com/sofa-framework/sofa/issues/9:124,Performance,load,loaded,124,"giving a texture in .png to an OglModel is working, while giving the same texture compressed in .jpg is not (the texture is loaded but it does not appear correctly on the mesh, like if the texture coordinates were incorrect)",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/9
https://github.com/sofa-framework/sofa/pull/14:371,Deployability,update,updated,371,"The objective is to remove all files related to Bezier High Order elements in the basic distribution of SOFA. Indeed, this content is still imature and will be provided in 2 separate plugins : SofaHighOrderTopology and SofaHighOrderFEM. In this pull request, topology classes in GeneralTopology has been removed and some associated components have been either removed or updated (to erase any link to Bezier High Order elements).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/14
https://github.com/sofa-framework/sofa/pull/14:183,Modifiability,plugin,plugins,183,"The objective is to remove all files related to Bezier High Order elements in the basic distribution of SOFA. Indeed, this content is still imature and will be provided in 2 separate plugins : SofaHighOrderTopology and SofaHighOrderFEM. In this pull request, topology classes in GeneralTopology has been removed and some associated components have been either removed or updated (to erase any link to Bezier High Order elements).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/14
https://github.com/sofa-framework/sofa/pull/15:25,Modifiability,plugin,plugin,25,"Added fix to add ""_d"" to plugin library name on MSVC on debug mode",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/15
https://github.com/sofa-framework/sofa/pull/16:84,Modifiability,plugin,plugin,84,Removal of Bezier tetrahedron elements and Bezier triangle elements : move to a new plugin SofaHighOrderTopology,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/16
https://github.com/sofa-framework/sofa/issues/17:107,Deployability,install,install,107,"FileRepository needs to be checked and fixed. It does not work for sure in some situations, e.g. if a sofa install is copied in a path containing accents on windows, FileRepository does not find the files. Note I have not go any further, and everything needs to be investigated.; I did not test with the distributed, precompiled package. I did not test on linux...",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/17
https://github.com/sofa-framework/sofa/issues/17:290,Testability,test,test,290,"FileRepository needs to be checked and fixed. It does not work for sure in some situations, e.g. if a sofa install is copied in a path containing accents on windows, FileRepository does not find the files. Note I have not go any further, and everything needs to be investigated.; I did not test with the distributed, precompiled package. I did not test on linux...",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/17
https://github.com/sofa-framework/sofa/issues/17:348,Testability,test,test,348,"FileRepository needs to be checked and fixed. It does not work for sure in some situations, e.g. if a sofa install is copied in a path containing accents on windows, FileRepository does not find the files. Note I have not go any further, and everything needs to be investigated.; I did not test with the distributed, precompiled package. I did not test on linux...",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/17
https://github.com/sofa-framework/sofa/pull/18:41,Deployability,configurat,configuration,41,"This commit fixes compilation of a basic configuration with the additional SOFA_NO_OPENGL flag being set, including compilation of Compliant and SofaPython plugins. Tested for runSofa -gui batch",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/18
https://github.com/sofa-framework/sofa/pull/18:41,Modifiability,config,configuration,41,"This commit fixes compilation of a basic configuration with the additional SOFA_NO_OPENGL flag being set, including compilation of Compliant and SofaPython plugins. Tested for runSofa -gui batch",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/18
https://github.com/sofa-framework/sofa/pull/18:156,Modifiability,plugin,plugins,156,"This commit fixes compilation of a basic configuration with the additional SOFA_NO_OPENGL flag being set, including compilation of Compliant and SofaPython plugins. Tested for runSofa -gui batch",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/18
https://github.com/sofa-framework/sofa/pull/18:165,Testability,Test,Tested,165,"This commit fixes compilation of a basic configuration with the additional SOFA_NO_OPENGL flag being set, including compilation of Compliant and SofaPython plugins. Tested for runSofa -gui batch",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/18
https://github.com/sofa-framework/sofa/pull/19:224,Deployability,patch,patch,224,"Not sure if this is correct, but it seems that sofa uses the rt library (high resolution clock?) on unix, but does not explicitly specify the library when linking. Because of that, compilation may fail on some systems. This patch just makes dependency on the rt library explicit in cmake",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/19
https://github.com/sofa-framework/sofa/pull/19:241,Integrability,depend,dependency,241,"Not sure if this is correct, but it seems that sofa uses the rt library (high resolution clock?) on unix, but does not explicitly specify the library when linking. Because of that, compilation may fail on some systems. This patch just makes dependency on the rt library explicit in cmake",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/19
https://github.com/sofa-framework/sofa/issues/20:176,Availability,error,error,176,"Even if not activated, SofaTest finds the SofaPython package; in SofaTest/CMakeLists.txt; 35: if(SofaPython_FOUND); is true whereas it should be false; and cmake exits with an error at; 52: target_link_libraries(${PROJECT_NAME} SofaPython); since SofaPython target does not exist. Windows, cmake 3.6.2",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/20
https://github.com/sofa-framework/sofa/pull/22:146,Availability,avail,available,146,"This is a small correction to fix the compilation of the Sensable plugin. Also, any idea why we keep the OmniDriver when there is a NewOmniDriver available?",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/22
https://github.com/sofa-framework/sofa/pull/22:66,Modifiability,plugin,plugin,66,"This is a small correction to fix the compilation of the Sensable plugin. Also, any idea why we keep the OmniDriver when there is a NewOmniDriver available?",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/22
https://github.com/sofa-framework/sofa/issues/23:738,Deployability,Update,Update,738,"## Main discussions. Stéphane: building matrices, vectors, to work with SciPy; Matthieu: Numpy is able to access the memory directly (there are examples). There are some Python modules in Compliant with examples to assemble matrices, etc. Components in Python (Stéphane); ""Trash"" code, not clean, way to go to C++. Forcefield. Need to put breakpoints to interact with the scene from Python console. Our Python needs:; - Create scene easily; - Prototype components; - Matlab aspect. Matthieu: 90% of Datas are binded in Python, special cases need a binding. To sum up, we already have what we need, we just don't know how to work with everything. Besides technical aspects, what we need is a step to step tutorial and more examples. . --> Update online documentation to add Numpy; --> Add a doc for newcomers: right now it is very hard to enter in SOFA with Python (no doc). Start with step by step tutorials and create a Python version of each step. ## Other discussions: performances. ### Pypy. x100 perf but big big cost (recode everything: plugin, bindings, ...). ### Cython. ability to code in Python and get C++ code generation; we can keep the current plugin but we wont gain perf; optimizes some small algos; ability to manually release the GIL (lock); ability to connect to the current VM; adds a step of compilation using ""CIMPORT"" but it must have compilo + headers and libs Sofa. ### Problem of version 2.7 vs 3. Current plugin renamed SofaPython27; SofaPython passes python 3.0. ### How do you get to use Python?. Stéphane: Making XML optional?; Matthieu: python is not just a loader, there is a binding too; As said before, we have to use more Python in the tutorials (doc, website ...). ____________________________________. Referee:; @bcarrez . Interested people:; @matthieu-nesme ; @damienmarchal ; @etienneschmitt ; @bruno-marques ; @chpaulus . If you are interested please tell it.",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/23
https://github.com/sofa-framework/sofa/issues/23:1236,Deployability,release,release,1236,"## Main discussions. Stéphane: building matrices, vectors, to work with SciPy; Matthieu: Numpy is able to access the memory directly (there are examples). There are some Python modules in Compliant with examples to assemble matrices, etc. Components in Python (Stéphane); ""Trash"" code, not clean, way to go to C++. Forcefield. Need to put breakpoints to interact with the scene from Python console. Our Python needs:; - Create scene easily; - Prototype components; - Matlab aspect. Matthieu: 90% of Datas are binded in Python, special cases need a binding. To sum up, we already have what we need, we just don't know how to work with everything. Besides technical aspects, what we need is a step to step tutorial and more examples. . --> Update online documentation to add Numpy; --> Add a doc for newcomers: right now it is very hard to enter in SOFA with Python (no doc). Start with step by step tutorials and create a Python version of each step. ## Other discussions: performances. ### Pypy. x100 perf but big big cost (recode everything: plugin, bindings, ...). ### Cython. ability to code in Python and get C++ code generation; we can keep the current plugin but we wont gain perf; optimizes some small algos; ability to manually release the GIL (lock); ability to connect to the current VM; adds a step of compilation using ""CIMPORT"" but it must have compilo + headers and libs Sofa. ### Problem of version 2.7 vs 3. Current plugin renamed SofaPython27; SofaPython passes python 3.0. ### How do you get to use Python?. Stéphane: Making XML optional?; Matthieu: python is not just a loader, there is a binding too; As said before, we have to use more Python in the tutorials (doc, website ...). ____________________________________. Referee:; @bcarrez . Interested people:; @matthieu-nesme ; @damienmarchal ; @etienneschmitt ; @bruno-marques ; @chpaulus . If you are interested please tell it.",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/23
https://github.com/sofa-framework/sofa/issues/23:1043,Modifiability,plugin,plugin,1043,"## Main discussions. Stéphane: building matrices, vectors, to work with SciPy; Matthieu: Numpy is able to access the memory directly (there are examples). There are some Python modules in Compliant with examples to assemble matrices, etc. Components in Python (Stéphane); ""Trash"" code, not clean, way to go to C++. Forcefield. Need to put breakpoints to interact with the scene from Python console. Our Python needs:; - Create scene easily; - Prototype components; - Matlab aspect. Matthieu: 90% of Datas are binded in Python, special cases need a binding. To sum up, we already have what we need, we just don't know how to work with everything. Besides technical aspects, what we need is a step to step tutorial and more examples. . --> Update online documentation to add Numpy; --> Add a doc for newcomers: right now it is very hard to enter in SOFA with Python (no doc). Start with step by step tutorials and create a Python version of each step. ## Other discussions: performances. ### Pypy. x100 perf but big big cost (recode everything: plugin, bindings, ...). ### Cython. ability to code in Python and get C++ code generation; we can keep the current plugin but we wont gain perf; optimizes some small algos; ability to manually release the GIL (lock); ability to connect to the current VM; adds a step of compilation using ""CIMPORT"" but it must have compilo + headers and libs Sofa. ### Problem of version 2.7 vs 3. Current plugin renamed SofaPython27; SofaPython passes python 3.0. ### How do you get to use Python?. Stéphane: Making XML optional?; Matthieu: python is not just a loader, there is a binding too; As said before, we have to use more Python in the tutorials (doc, website ...). ____________________________________. Referee:; @bcarrez . Interested people:; @matthieu-nesme ; @damienmarchal ; @etienneschmitt ; @bruno-marques ; @chpaulus . If you are interested please tell it.",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/23
https://github.com/sofa-framework/sofa/issues/23:1158,Modifiability,plugin,plugin,1158,"## Main discussions. Stéphane: building matrices, vectors, to work with SciPy; Matthieu: Numpy is able to access the memory directly (there are examples). There are some Python modules in Compliant with examples to assemble matrices, etc. Components in Python (Stéphane); ""Trash"" code, not clean, way to go to C++. Forcefield. Need to put breakpoints to interact with the scene from Python console. Our Python needs:; - Create scene easily; - Prototype components; - Matlab aspect. Matthieu: 90% of Datas are binded in Python, special cases need a binding. To sum up, we already have what we need, we just don't know how to work with everything. Besides technical aspects, what we need is a step to step tutorial and more examples. . --> Update online documentation to add Numpy; --> Add a doc for newcomers: right now it is very hard to enter in SOFA with Python (no doc). Start with step by step tutorials and create a Python version of each step. ## Other discussions: performances. ### Pypy. x100 perf but big big cost (recode everything: plugin, bindings, ...). ### Cython. ability to code in Python and get C++ code generation; we can keep the current plugin but we wont gain perf; optimizes some small algos; ability to manually release the GIL (lock); ability to connect to the current VM; adds a step of compilation using ""CIMPORT"" but it must have compilo + headers and libs Sofa. ### Problem of version 2.7 vs 3. Current plugin renamed SofaPython27; SofaPython passes python 3.0. ### How do you get to use Python?. Stéphane: Making XML optional?; Matthieu: python is not just a loader, there is a binding too; As said before, we have to use more Python in the tutorials (doc, website ...). ____________________________________. Referee:; @bcarrez . Interested people:; @matthieu-nesme ; @damienmarchal ; @etienneschmitt ; @bruno-marques ; @chpaulus . If you are interested please tell it.",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/23
https://github.com/sofa-framework/sofa/issues/23:1432,Modifiability,plugin,plugin,1432,"## Main discussions. Stéphane: building matrices, vectors, to work with SciPy; Matthieu: Numpy is able to access the memory directly (there are examples). There are some Python modules in Compliant with examples to assemble matrices, etc. Components in Python (Stéphane); ""Trash"" code, not clean, way to go to C++. Forcefield. Need to put breakpoints to interact with the scene from Python console. Our Python needs:; - Create scene easily; - Prototype components; - Matlab aspect. Matthieu: 90% of Datas are binded in Python, special cases need a binding. To sum up, we already have what we need, we just don't know how to work with everything. Besides technical aspects, what we need is a step to step tutorial and more examples. . --> Update online documentation to add Numpy; --> Add a doc for newcomers: right now it is very hard to enter in SOFA with Python (no doc). Start with step by step tutorials and create a Python version of each step. ## Other discussions: performances. ### Pypy. x100 perf but big big cost (recode everything: plugin, bindings, ...). ### Cython. ability to code in Python and get C++ code generation; we can keep the current plugin but we wont gain perf; optimizes some small algos; ability to manually release the GIL (lock); ability to connect to the current VM; adds a step of compilation using ""CIMPORT"" but it must have compilo + headers and libs Sofa. ### Problem of version 2.7 vs 3. Current plugin renamed SofaPython27; SofaPython passes python 3.0. ### How do you get to use Python?. Stéphane: Making XML optional?; Matthieu: python is not just a loader, there is a binding too; As said before, we have to use more Python in the tutorials (doc, website ...). ____________________________________. Referee:; @bcarrez . Interested people:; @matthieu-nesme ; @damienmarchal ; @etienneschmitt ; @bruno-marques ; @chpaulus . If you are interested please tell it.",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/23
https://github.com/sofa-framework/sofa/issues/23:972,Performance,perform,performances,972,"## Main discussions. Stéphane: building matrices, vectors, to work with SciPy; Matthieu: Numpy is able to access the memory directly (there are examples). There are some Python modules in Compliant with examples to assemble matrices, etc. Components in Python (Stéphane); ""Trash"" code, not clean, way to go to C++. Forcefield. Need to put breakpoints to interact with the scene from Python console. Our Python needs:; - Create scene easily; - Prototype components; - Matlab aspect. Matthieu: 90% of Datas are binded in Python, special cases need a binding. To sum up, we already have what we need, we just don't know how to work with everything. Besides technical aspects, what we need is a step to step tutorial and more examples. . --> Update online documentation to add Numpy; --> Add a doc for newcomers: right now it is very hard to enter in SOFA with Python (no doc). Start with step by step tutorials and create a Python version of each step. ## Other discussions: performances. ### Pypy. x100 perf but big big cost (recode everything: plugin, bindings, ...). ### Cython. ability to code in Python and get C++ code generation; we can keep the current plugin but we wont gain perf; optimizes some small algos; ability to manually release the GIL (lock); ability to connect to the current VM; adds a step of compilation using ""CIMPORT"" but it must have compilo + headers and libs Sofa. ### Problem of version 2.7 vs 3. Current plugin renamed SofaPython27; SofaPython passes python 3.0. ### How do you get to use Python?. Stéphane: Making XML optional?; Matthieu: python is not just a loader, there is a binding too; As said before, we have to use more Python in the tutorials (doc, website ...). ____________________________________. Referee:; @bcarrez . Interested people:; @matthieu-nesme ; @damienmarchal ; @etienneschmitt ; @bruno-marques ; @chpaulus . If you are interested please tell it.",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/23
https://github.com/sofa-framework/sofa/issues/23:1188,Performance,optimiz,optimizes,1188,"## Main discussions. Stéphane: building matrices, vectors, to work with SciPy; Matthieu: Numpy is able to access the memory directly (there are examples). There are some Python modules in Compliant with examples to assemble matrices, etc. Components in Python (Stéphane); ""Trash"" code, not clean, way to go to C++. Forcefield. Need to put breakpoints to interact with the scene from Python console. Our Python needs:; - Create scene easily; - Prototype components; - Matlab aspect. Matthieu: 90% of Datas are binded in Python, special cases need a binding. To sum up, we already have what we need, we just don't know how to work with everything. Besides technical aspects, what we need is a step to step tutorial and more examples. . --> Update online documentation to add Numpy; --> Add a doc for newcomers: right now it is very hard to enter in SOFA with Python (no doc). Start with step by step tutorials and create a Python version of each step. ## Other discussions: performances. ### Pypy. x100 perf but big big cost (recode everything: plugin, bindings, ...). ### Cython. ability to code in Python and get C++ code generation; we can keep the current plugin but we wont gain perf; optimizes some small algos; ability to manually release the GIL (lock); ability to connect to the current VM; adds a step of compilation using ""CIMPORT"" but it must have compilo + headers and libs Sofa. ### Problem of version 2.7 vs 3. Current plugin renamed SofaPython27; SofaPython passes python 3.0. ### How do you get to use Python?. Stéphane: Making XML optional?; Matthieu: python is not just a loader, there is a binding too; As said before, we have to use more Python in the tutorials (doc, website ...). ____________________________________. Referee:; @bcarrez . Interested people:; @matthieu-nesme ; @damienmarchal ; @etienneschmitt ; @bruno-marques ; @chpaulus . If you are interested please tell it.",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/23
https://github.com/sofa-framework/sofa/issues/23:1589,Performance,load,loader,1589,"## Main discussions. Stéphane: building matrices, vectors, to work with SciPy; Matthieu: Numpy is able to access the memory directly (there are examples). There are some Python modules in Compliant with examples to assemble matrices, etc. Components in Python (Stéphane); ""Trash"" code, not clean, way to go to C++. Forcefield. Need to put breakpoints to interact with the scene from Python console. Our Python needs:; - Create scene easily; - Prototype components; - Matlab aspect. Matthieu: 90% of Datas are binded in Python, special cases need a binding. To sum up, we already have what we need, we just don't know how to work with everything. Besides technical aspects, what we need is a step to step tutorial and more examples. . --> Update online documentation to add Numpy; --> Add a doc for newcomers: right now it is very hard to enter in SOFA with Python (no doc). Start with step by step tutorials and create a Python version of each step. ## Other discussions: performances. ### Pypy. x100 perf but big big cost (recode everything: plugin, bindings, ...). ### Cython. ability to code in Python and get C++ code generation; we can keep the current plugin but we wont gain perf; optimizes some small algos; ability to manually release the GIL (lock); ability to connect to the current VM; adds a step of compilation using ""CIMPORT"" but it must have compilo + headers and libs Sofa. ### Problem of version 2.7 vs 3. Current plugin renamed SofaPython27; SofaPython passes python 3.0. ### How do you get to use Python?. Stéphane: Making XML optional?; Matthieu: python is not just a loader, there is a binding too; As said before, we have to use more Python in the tutorials (doc, website ...). ____________________________________. Referee:; @bcarrez . Interested people:; @matthieu-nesme ; @damienmarchal ; @etienneschmitt ; @bruno-marques ; @chpaulus . If you are interested please tell it.",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/23
https://github.com/sofa-framework/sofa/issues/23:106,Security,access,access,106,"## Main discussions. Stéphane: building matrices, vectors, to work with SciPy; Matthieu: Numpy is able to access the memory directly (there are examples). There are some Python modules in Compliant with examples to assemble matrices, etc. Components in Python (Stéphane); ""Trash"" code, not clean, way to go to C++. Forcefield. Need to put breakpoints to interact with the scene from Python console. Our Python needs:; - Create scene easily; - Prototype components; - Matlab aspect. Matthieu: 90% of Datas are binded in Python, special cases need a binding. To sum up, we already have what we need, we just don't know how to work with everything. Besides technical aspects, what we need is a step to step tutorial and more examples. . --> Update online documentation to add Numpy; --> Add a doc for newcomers: right now it is very hard to enter in SOFA with Python (no doc). Start with step by step tutorials and create a Python version of each step. ## Other discussions: performances. ### Pypy. x100 perf but big big cost (recode everything: plugin, bindings, ...). ### Cython. ability to code in Python and get C++ code generation; we can keep the current plugin but we wont gain perf; optimizes some small algos; ability to manually release the GIL (lock); ability to connect to the current VM; adds a step of compilation using ""CIMPORT"" but it must have compilo + headers and libs Sofa. ### Problem of version 2.7 vs 3. Current plugin renamed SofaPython27; SofaPython passes python 3.0. ### How do you get to use Python?. Stéphane: Making XML optional?; Matthieu: python is not just a loader, there is a binding too; As said before, we have to use more Python in the tutorials (doc, website ...). ____________________________________. Referee:; @bcarrez . Interested people:; @matthieu-nesme ; @damienmarchal ; @etienneschmitt ; @bruno-marques ; @chpaulus . If you are interested please tell it.",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/23
https://github.com/sofa-framework/sofa/issues/24:537,Availability,mainten,maintenance,537,"Referee: @faichele. Members: @faichele , @fjourdes , @ChristianDuriez , @thomas-lemaire , @IPeterlik , @courtecuisse , @hdeling . Main objective: bring TaskScheduler within SofaKernel. Subtasks and estimated duration:; - merge the branch _issofa_multithreading_ involving the MultiThreading plugin into master (fixes); - remove dependencies to boost (might face issue in the lock implementation); - create trivial examples describing the API; - add documentation, and examples of Intel; - migration into SofaKernel. Non-requisite:; - no maintenance guarantees for the plugin Multithreading. Future; - nice feature : experiment the definition of a pointer to the Scheduler into ExecParams; - anyone interested can join!",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/24
https://github.com/sofa-framework/sofa/issues/24:662,Energy Efficiency,Schedul,Scheduler,662,"Referee: @faichele. Members: @faichele , @fjourdes , @ChristianDuriez , @thomas-lemaire , @IPeterlik , @courtecuisse , @hdeling . Main objective: bring TaskScheduler within SofaKernel. Subtasks and estimated duration:; - merge the branch _issofa_multithreading_ involving the MultiThreading plugin into master (fixes); - remove dependencies to boost (might face issue in the lock implementation); - create trivial examples describing the API; - add documentation, and examples of Intel; - migration into SofaKernel. Non-requisite:; - no maintenance guarantees for the plugin Multithreading. Future; - nice feature : experiment the definition of a pointer to the Scheduler into ExecParams; - anyone interested can join!",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/24
https://github.com/sofa-framework/sofa/issues/24:328,Integrability,depend,dependencies,328,"Referee: @faichele. Members: @faichele , @fjourdes , @ChristianDuriez , @thomas-lemaire , @IPeterlik , @courtecuisse , @hdeling . Main objective: bring TaskScheduler within SofaKernel. Subtasks and estimated duration:; - merge the branch _issofa_multithreading_ involving the MultiThreading plugin into master (fixes); - remove dependencies to boost (might face issue in the lock implementation); - create trivial examples describing the API; - add documentation, and examples of Intel; - migration into SofaKernel. Non-requisite:; - no maintenance guarantees for the plugin Multithreading. Future; - nice feature : experiment the definition of a pointer to the Scheduler into ExecParams; - anyone interested can join!",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/24
https://github.com/sofa-framework/sofa/issues/24:291,Modifiability,plugin,plugin,291,"Referee: @faichele. Members: @faichele , @fjourdes , @ChristianDuriez , @thomas-lemaire , @IPeterlik , @courtecuisse , @hdeling . Main objective: bring TaskScheduler within SofaKernel. Subtasks and estimated duration:; - merge the branch _issofa_multithreading_ involving the MultiThreading plugin into master (fixes); - remove dependencies to boost (might face issue in the lock implementation); - create trivial examples describing the API; - add documentation, and examples of Intel; - migration into SofaKernel. Non-requisite:; - no maintenance guarantees for the plugin Multithreading. Future; - nice feature : experiment the definition of a pointer to the Scheduler into ExecParams; - anyone interested can join!",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/24
https://github.com/sofa-framework/sofa/issues/24:568,Modifiability,plugin,plugin,568,"Referee: @faichele. Members: @faichele , @fjourdes , @ChristianDuriez , @thomas-lemaire , @IPeterlik , @courtecuisse , @hdeling . Main objective: bring TaskScheduler within SofaKernel. Subtasks and estimated duration:; - merge the branch _issofa_multithreading_ involving the MultiThreading plugin into master (fixes); - remove dependencies to boost (might face issue in the lock implementation); - create trivial examples describing the API; - add documentation, and examples of Intel; - migration into SofaKernel. Non-requisite:; - no maintenance guarantees for the plugin Multithreading. Future; - nice feature : experiment the definition of a pointer to the Scheduler into ExecParams; - anyone interested can join!",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/24
https://github.com/sofa-framework/sofa/issues/25:133,Deployability,continuous,continuous,133,"Referee: @IPeterlik . Members: @IPeterlik @remibessard @hdeling @damienmarchal @fredroy @epernod Jeremie . Main objective: provide a continuous support for validation of SOFA. Subtasks and estimated duration; - using python, based on Method for Manufactured Solutions (MMS), static linear elasticity with linear FEM in (compression and torsion with < 5% deformation); ex: TensorMassFEMForceField; - TensorMassFEMForceField : addKToMatrix, vector of E; - extend it to beams (BeamAdapter); - implement engine : plugged to compute stress data in all FEM in SOFA. Future; - write article; - contact Stefan Suwelack for integration into CAEML.org. ---. Validation solution:; - analytical; - software comparison (Abaqus); - tests; - experimental setup. cases:; - dynamic vs static; - linear elasticity with linear FEM; - metrics : displacement, stress+strain tensors",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/25
https://github.com/sofa-framework/sofa/issues/25:615,Deployability,integrat,integration,615,"Referee: @IPeterlik . Members: @IPeterlik @remibessard @hdeling @damienmarchal @fredroy @epernod Jeremie . Main objective: provide a continuous support for validation of SOFA. Subtasks and estimated duration; - using python, based on Method for Manufactured Solutions (MMS), static linear elasticity with linear FEM in (compression and torsion with < 5% deformation); ex: TensorMassFEMForceField; - TensorMassFEMForceField : addKToMatrix, vector of E; - extend it to beams (BeamAdapter); - implement engine : plugged to compute stress data in all FEM in SOFA. Future; - write article; - contact Stefan Suwelack for integration into CAEML.org. ---. Validation solution:; - analytical; - software comparison (Abaqus); - tests; - experimental setup. cases:; - dynamic vs static; - linear elasticity with linear FEM; - metrics : displacement, stress+strain tensors",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/25
https://github.com/sofa-framework/sofa/issues/25:615,Integrability,integrat,integration,615,"Referee: @IPeterlik . Members: @IPeterlik @remibessard @hdeling @damienmarchal @fredroy @epernod Jeremie . Main objective: provide a continuous support for validation of SOFA. Subtasks and estimated duration; - using python, based on Method for Manufactured Solutions (MMS), static linear elasticity with linear FEM in (compression and torsion with < 5% deformation); ex: TensorMassFEMForceField; - TensorMassFEMForceField : addKToMatrix, vector of E; - extend it to beams (BeamAdapter); - implement engine : plugged to compute stress data in all FEM in SOFA. Future; - write article; - contact Stefan Suwelack for integration into CAEML.org. ---. Validation solution:; - analytical; - software comparison (Abaqus); - tests; - experimental setup. cases:; - dynamic vs static; - linear elasticity with linear FEM; - metrics : displacement, stress+strain tensors",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/25
https://github.com/sofa-framework/sofa/issues/25:454,Modifiability,extend,extend,454,"Referee: @IPeterlik . Members: @IPeterlik @remibessard @hdeling @damienmarchal @fredroy @epernod Jeremie . Main objective: provide a continuous support for validation of SOFA. Subtasks and estimated duration; - using python, based on Method for Manufactured Solutions (MMS), static linear elasticity with linear FEM in (compression and torsion with < 5% deformation); ex: TensorMassFEMForceField; - TensorMassFEMForceField : addKToMatrix, vector of E; - extend it to beams (BeamAdapter); - implement engine : plugged to compute stress data in all FEM in SOFA. Future; - write article; - contact Stefan Suwelack for integration into CAEML.org. ---. Validation solution:; - analytical; - software comparison (Abaqus); - tests; - experimental setup. cases:; - dynamic vs static; - linear elasticity with linear FEM; - metrics : displacement, stress+strain tensors",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/25
https://github.com/sofa-framework/sofa/issues/25:156,Security,validat,validation,156,"Referee: @IPeterlik . Members: @IPeterlik @remibessard @hdeling @damienmarchal @fredroy @epernod Jeremie . Main objective: provide a continuous support for validation of SOFA. Subtasks and estimated duration; - using python, based on Method for Manufactured Solutions (MMS), static linear elasticity with linear FEM in (compression and torsion with < 5% deformation); ex: TensorMassFEMForceField; - TensorMassFEMForceField : addKToMatrix, vector of E; - extend it to beams (BeamAdapter); - implement engine : plugged to compute stress data in all FEM in SOFA. Future; - write article; - contact Stefan Suwelack for integration into CAEML.org. ---. Validation solution:; - analytical; - software comparison (Abaqus); - tests; - experimental setup. cases:; - dynamic vs static; - linear elasticity with linear FEM; - metrics : displacement, stress+strain tensors",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/25
https://github.com/sofa-framework/sofa/issues/25:648,Security,Validat,Validation,648,"Referee: @IPeterlik . Members: @IPeterlik @remibessard @hdeling @damienmarchal @fredroy @epernod Jeremie . Main objective: provide a continuous support for validation of SOFA. Subtasks and estimated duration; - using python, based on Method for Manufactured Solutions (MMS), static linear elasticity with linear FEM in (compression and torsion with < 5% deformation); ex: TensorMassFEMForceField; - TensorMassFEMForceField : addKToMatrix, vector of E; - extend it to beams (BeamAdapter); - implement engine : plugged to compute stress data in all FEM in SOFA. Future; - write article; - contact Stefan Suwelack for integration into CAEML.org. ---. Validation solution:; - analytical; - software comparison (Abaqus); - tests; - experimental setup. cases:; - dynamic vs static; - linear elasticity with linear FEM; - metrics : displacement, stress+strain tensors",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/25
https://github.com/sofa-framework/sofa/issues/25:718,Testability,test,tests,718,"Referee: @IPeterlik . Members: @IPeterlik @remibessard @hdeling @damienmarchal @fredroy @epernod Jeremie . Main objective: provide a continuous support for validation of SOFA. Subtasks and estimated duration; - using python, based on Method for Manufactured Solutions (MMS), static linear elasticity with linear FEM in (compression and torsion with < 5% deformation); ex: TensorMassFEMForceField; - TensorMassFEMForceField : addKToMatrix, vector of E; - extend it to beams (BeamAdapter); - implement engine : plugged to compute stress data in all FEM in SOFA. Future; - write article; - contact Stefan Suwelack for integration into CAEML.org. ---. Validation solution:; - analytical; - software comparison (Abaqus); - tests; - experimental setup. cases:; - dynamic vs static; - linear elasticity with linear FEM; - metrics : displacement, stress+strain tensors",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/25
https://github.com/sofa-framework/sofa/issues/26:253,Availability,avail,available,253,"Referee: @matthieu-nesme @ChristianDuriez. Members: @JeremieA @francoisfaure @courtecuisse, Eulalie Coevoet, Igor Peterlik. Main objective: build or compute the mechanical system when forcefields, constraints etc... are under mapping. 1 implementations available using Compliance plugin (and EigenMatrix) and masks; 1 implementation todo using sparseMatrix of SOFA without masks. For that, the fact that we remove the particular case of InteractionForceField could greatly simplify the solution. There are many different cases depending on the number of dofs that are concerned by the mapped values... Difficult to have the ideal implementation for all the case, but we need to allow several strategies. Maybe possible to avoid the ""explicit"" use of masks given the knowledge of the sparsity of the matrices... . Subtasks:; - Make option ""use Mask"" to false by default; - Tag ""InteractionForceField"" as deprecated; - First implementation for the sparseMatrix of SOFA using applyJt(SparseMatrixDeriv => not ideal for all the case; - see if we could define a common strategy without the use of masks.",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/26
https://github.com/sofa-framework/sofa/issues/26:309,Availability,mask,masks,309,"Referee: @matthieu-nesme @ChristianDuriez. Members: @JeremieA @francoisfaure @courtecuisse, Eulalie Coevoet, Igor Peterlik. Main objective: build or compute the mechanical system when forcefields, constraints etc... are under mapping. 1 implementations available using Compliance plugin (and EigenMatrix) and masks; 1 implementation todo using sparseMatrix of SOFA without masks. For that, the fact that we remove the particular case of InteractionForceField could greatly simplify the solution. There are many different cases depending on the number of dofs that are concerned by the mapped values... Difficult to have the ideal implementation for all the case, but we need to allow several strategies. Maybe possible to avoid the ""explicit"" use of masks given the knowledge of the sparsity of the matrices... . Subtasks:; - Make option ""use Mask"" to false by default; - Tag ""InteractionForceField"" as deprecated; - First implementation for the sparseMatrix of SOFA using applyJt(SparseMatrixDeriv => not ideal for all the case; - see if we could define a common strategy without the use of masks.",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/26
https://github.com/sofa-framework/sofa/issues/26:373,Availability,mask,masks,373,"Referee: @matthieu-nesme @ChristianDuriez. Members: @JeremieA @francoisfaure @courtecuisse, Eulalie Coevoet, Igor Peterlik. Main objective: build or compute the mechanical system when forcefields, constraints etc... are under mapping. 1 implementations available using Compliance plugin (and EigenMatrix) and masks; 1 implementation todo using sparseMatrix of SOFA without masks. For that, the fact that we remove the particular case of InteractionForceField could greatly simplify the solution. There are many different cases depending on the number of dofs that are concerned by the mapped values... Difficult to have the ideal implementation for all the case, but we need to allow several strategies. Maybe possible to avoid the ""explicit"" use of masks given the knowledge of the sparsity of the matrices... . Subtasks:; - Make option ""use Mask"" to false by default; - Tag ""InteractionForceField"" as deprecated; - First implementation for the sparseMatrix of SOFA using applyJt(SparseMatrixDeriv => not ideal for all the case; - see if we could define a common strategy without the use of masks.",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/26
https://github.com/sofa-framework/sofa/issues/26:750,Availability,mask,masks,750,"Referee: @matthieu-nesme @ChristianDuriez. Members: @JeremieA @francoisfaure @courtecuisse, Eulalie Coevoet, Igor Peterlik. Main objective: build or compute the mechanical system when forcefields, constraints etc... are under mapping. 1 implementations available using Compliance plugin (and EigenMatrix) and masks; 1 implementation todo using sparseMatrix of SOFA without masks. For that, the fact that we remove the particular case of InteractionForceField could greatly simplify the solution. There are many different cases depending on the number of dofs that are concerned by the mapped values... Difficult to have the ideal implementation for all the case, but we need to allow several strategies. Maybe possible to avoid the ""explicit"" use of masks given the knowledge of the sparsity of the matrices... . Subtasks:; - Make option ""use Mask"" to false by default; - Tag ""InteractionForceField"" as deprecated; - First implementation for the sparseMatrix of SOFA using applyJt(SparseMatrixDeriv => not ideal for all the case; - see if we could define a common strategy without the use of masks.",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/26
https://github.com/sofa-framework/sofa/issues/26:843,Availability,Mask,Mask,843,"Referee: @matthieu-nesme @ChristianDuriez. Members: @JeremieA @francoisfaure @courtecuisse, Eulalie Coevoet, Igor Peterlik. Main objective: build or compute the mechanical system when forcefields, constraints etc... are under mapping. 1 implementations available using Compliance plugin (and EigenMatrix) and masks; 1 implementation todo using sparseMatrix of SOFA without masks. For that, the fact that we remove the particular case of InteractionForceField could greatly simplify the solution. There are many different cases depending on the number of dofs that are concerned by the mapped values... Difficult to have the ideal implementation for all the case, but we need to allow several strategies. Maybe possible to avoid the ""explicit"" use of masks given the knowledge of the sparsity of the matrices... . Subtasks:; - Make option ""use Mask"" to false by default; - Tag ""InteractionForceField"" as deprecated; - First implementation for the sparseMatrix of SOFA using applyJt(SparseMatrixDeriv => not ideal for all the case; - see if we could define a common strategy without the use of masks.",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/26
https://github.com/sofa-framework/sofa/issues/26:1092,Availability,mask,masks,1092,"Referee: @matthieu-nesme @ChristianDuriez. Members: @JeremieA @francoisfaure @courtecuisse, Eulalie Coevoet, Igor Peterlik. Main objective: build or compute the mechanical system when forcefields, constraints etc... are under mapping. 1 implementations available using Compliance plugin (and EigenMatrix) and masks; 1 implementation todo using sparseMatrix of SOFA without masks. For that, the fact that we remove the particular case of InteractionForceField could greatly simplify the solution. There are many different cases depending on the number of dofs that are concerned by the mapped values... Difficult to have the ideal implementation for all the case, but we need to allow several strategies. Maybe possible to avoid the ""explicit"" use of masks given the knowledge of the sparsity of the matrices... . Subtasks:; - Make option ""use Mask"" to false by default; - Tag ""InteractionForceField"" as deprecated; - First implementation for the sparseMatrix of SOFA using applyJt(SparseMatrixDeriv => not ideal for all the case; - see if we could define a common strategy without the use of masks.",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/26
https://github.com/sofa-framework/sofa/issues/26:527,Integrability,depend,depending,527,"Referee: @matthieu-nesme @ChristianDuriez. Members: @JeremieA @francoisfaure @courtecuisse, Eulalie Coevoet, Igor Peterlik. Main objective: build or compute the mechanical system when forcefields, constraints etc... are under mapping. 1 implementations available using Compliance plugin (and EigenMatrix) and masks; 1 implementation todo using sparseMatrix of SOFA without masks. For that, the fact that we remove the particular case of InteractionForceField could greatly simplify the solution. There are many different cases depending on the number of dofs that are concerned by the mapped values... Difficult to have the ideal implementation for all the case, but we need to allow several strategies. Maybe possible to avoid the ""explicit"" use of masks given the knowledge of the sparsity of the matrices... . Subtasks:; - Make option ""use Mask"" to false by default; - Tag ""InteractionForceField"" as deprecated; - First implementation for the sparseMatrix of SOFA using applyJt(SparseMatrixDeriv => not ideal for all the case; - see if we could define a common strategy without the use of masks.",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/26
https://github.com/sofa-framework/sofa/issues/26:280,Modifiability,plugin,plugin,280,"Referee: @matthieu-nesme @ChristianDuriez. Members: @JeremieA @francoisfaure @courtecuisse, Eulalie Coevoet, Igor Peterlik. Main objective: build or compute the mechanical system when forcefields, constraints etc... are under mapping. 1 implementations available using Compliance plugin (and EigenMatrix) and masks; 1 implementation todo using sparseMatrix of SOFA without masks. For that, the fact that we remove the particular case of InteractionForceField could greatly simplify the solution. There are many different cases depending on the number of dofs that are concerned by the mapped values... Difficult to have the ideal implementation for all the case, but we need to allow several strategies. Maybe possible to avoid the ""explicit"" use of masks given the knowledge of the sparsity of the matrices... . Subtasks:; - Make option ""use Mask"" to false by default; - Tag ""InteractionForceField"" as deprecated; - First implementation for the sparseMatrix of SOFA using applyJt(SparseMatrixDeriv => not ideal for all the case; - see if we could define a common strategy without the use of masks.",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/26
https://github.com/sofa-framework/sofa/issues/26:722,Safety,avoid,avoid,722,"Referee: @matthieu-nesme @ChristianDuriez. Members: @JeremieA @francoisfaure @courtecuisse, Eulalie Coevoet, Igor Peterlik. Main objective: build or compute the mechanical system when forcefields, constraints etc... are under mapping. 1 implementations available using Compliance plugin (and EigenMatrix) and masks; 1 implementation todo using sparseMatrix of SOFA without masks. For that, the fact that we remove the particular case of InteractionForceField could greatly simplify the solution. There are many different cases depending on the number of dofs that are concerned by the mapped values... Difficult to have the ideal implementation for all the case, but we need to allow several strategies. Maybe possible to avoid the ""explicit"" use of masks given the knowledge of the sparsity of the matrices... . Subtasks:; - Make option ""use Mask"" to false by default; - Tag ""InteractionForceField"" as deprecated; - First implementation for the sparseMatrix of SOFA using applyJt(SparseMatrixDeriv => not ideal for all the case; - see if we could define a common strategy without the use of masks.",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/26
https://github.com/sofa-framework/sofa/issues/26:473,Usability,simpl,simplify,473,"Referee: @matthieu-nesme @ChristianDuriez. Members: @JeremieA @francoisfaure @courtecuisse, Eulalie Coevoet, Igor Peterlik. Main objective: build or compute the mechanical system when forcefields, constraints etc... are under mapping. 1 implementations available using Compliance plugin (and EigenMatrix) and masks; 1 implementation todo using sparseMatrix of SOFA without masks. For that, the fact that we remove the particular case of InteractionForceField could greatly simplify the solution. There are many different cases depending on the number of dofs that are concerned by the mapped values... Difficult to have the ideal implementation for all the case, but we need to allow several strategies. Maybe possible to avoid the ""explicit"" use of masks given the knowledge of the sparsity of the matrices... . Subtasks:; - Make option ""use Mask"" to false by default; - Tag ""InteractionForceField"" as deprecated; - First implementation for the sparseMatrix of SOFA using applyJt(SparseMatrixDeriv => not ideal for all the case; - see if we could define a common strategy without the use of masks.",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/26
https://github.com/sofa-framework/sofa/issues/35:1512,Availability,error,error,1512,"Hi,. I found the usage of data alias more annoying than helpful. ; Currently data alias are used to provide backward compatibility with old scenes. The problem is that by doing so it does not indicate to the user that the data field name has changed and that it should change to fix his scenes. The consequence is that we have a lot of old scene that are still using differents name for the same data field. . I would advocate for a more helpful (to the user point of view) approach. This approach consists in saying that the field it is using is now deprecated and provide suggestions to fix his scene. In the following I provide a template of code (taken from the soft-robot plugin) to implement this kind of behavior. . ``` cpp; CableModel<DataTypes>::CableModel(MechanicalState* object); : InverseProblemConstraint<DataTypes>(object); , d_indexDeprecated(initData(&d_indexDeprecated, ""index"",; ""Deprecated, must be replaced by the field name 'indices'"")); , d_indices(initData(&d_indices, ""indices"",; ""List of points connected by the cable (from extremity to actuated point). \n""; ""If no indices are given, default value is 0. \n""; ""In case of multiple indices, one point will be actuated \n""; ""and the others will represent sliding points for the cable."")); {; d_indexDeprecated.setDisplayed(false);; }. template<class DataTypes>; void CableModel<DataTypes>::init(); if(d_indexDeprecated.isSet()) {; msg_warning(this) << ""The field of the Cable component named 'index' is now deprecated. ""; ""To remove this error message, the field 'index' should be replaced by the field 'indices'."" ;; .... depending on whether you want to force the user to fix his scene (so quitting the init with an error) or if you want a transition phase accepting the two field you just have to duplicate the content of d_indexDeprecated into d_indices. ; }; ```. If anyone has an opinion or other approach to the problem it is more than welcome. . D.",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/35
https://github.com/sofa-framework/sofa/issues/35:1692,Availability,error,error,1692,"Hi,. I found the usage of data alias more annoying than helpful. ; Currently data alias are used to provide backward compatibility with old scenes. The problem is that by doing so it does not indicate to the user that the data field name has changed and that it should change to fix his scenes. The consequence is that we have a lot of old scene that are still using differents name for the same data field. . I would advocate for a more helpful (to the user point of view) approach. This approach consists in saying that the field it is using is now deprecated and provide suggestions to fix his scene. In the following I provide a template of code (taken from the soft-robot plugin) to implement this kind of behavior. . ``` cpp; CableModel<DataTypes>::CableModel(MechanicalState* object); : InverseProblemConstraint<DataTypes>(object); , d_indexDeprecated(initData(&d_indexDeprecated, ""index"",; ""Deprecated, must be replaced by the field name 'indices'"")); , d_indices(initData(&d_indices, ""indices"",; ""List of points connected by the cable (from extremity to actuated point). \n""; ""If no indices are given, default value is 0. \n""; ""In case of multiple indices, one point will be actuated \n""; ""and the others will represent sliding points for the cable."")); {; d_indexDeprecated.setDisplayed(false);; }. template<class DataTypes>; void CableModel<DataTypes>::init(); if(d_indexDeprecated.isSet()) {; msg_warning(this) << ""The field of the Cable component named 'index' is now deprecated. ""; ""To remove this error message, the field 'index' should be replaced by the field 'indices'."" ;; .... depending on whether you want to force the user to fix his scene (so quitting the init with an error) or if you want a transition phase accepting the two field you just have to duplicate the content of d_indexDeprecated into d_indices. ; }; ```. If anyone has an opinion or other approach to the problem it is more than welcome. . D.",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/35
https://github.com/sofa-framework/sofa/issues/35:1518,Integrability,message,message,1518,"Hi,. I found the usage of data alias more annoying than helpful. ; Currently data alias are used to provide backward compatibility with old scenes. The problem is that by doing so it does not indicate to the user that the data field name has changed and that it should change to fix his scenes. The consequence is that we have a lot of old scene that are still using differents name for the same data field. . I would advocate for a more helpful (to the user point of view) approach. This approach consists in saying that the field it is using is now deprecated and provide suggestions to fix his scene. In the following I provide a template of code (taken from the soft-robot plugin) to implement this kind of behavior. . ``` cpp; CableModel<DataTypes>::CableModel(MechanicalState* object); : InverseProblemConstraint<DataTypes>(object); , d_indexDeprecated(initData(&d_indexDeprecated, ""index"",; ""Deprecated, must be replaced by the field name 'indices'"")); , d_indices(initData(&d_indices, ""indices"",; ""List of points connected by the cable (from extremity to actuated point). \n""; ""If no indices are given, default value is 0. \n""; ""In case of multiple indices, one point will be actuated \n""; ""and the others will represent sliding points for the cable."")); {; d_indexDeprecated.setDisplayed(false);; }. template<class DataTypes>; void CableModel<DataTypes>::init(); if(d_indexDeprecated.isSet()) {; msg_warning(this) << ""The field of the Cable component named 'index' is now deprecated. ""; ""To remove this error message, the field 'index' should be replaced by the field 'indices'."" ;; .... depending on whether you want to force the user to fix his scene (so quitting the init with an error) or if you want a transition phase accepting the two field you just have to duplicate the content of d_indexDeprecated into d_indices. ; }; ```. If anyone has an opinion or other approach to the problem it is more than welcome. . D.",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/35
https://github.com/sofa-framework/sofa/issues/35:1597,Integrability,depend,depending,1597,"Hi,. I found the usage of data alias more annoying than helpful. ; Currently data alias are used to provide backward compatibility with old scenes. The problem is that by doing so it does not indicate to the user that the data field name has changed and that it should change to fix his scenes. The consequence is that we have a lot of old scene that are still using differents name for the same data field. . I would advocate for a more helpful (to the user point of view) approach. This approach consists in saying that the field it is using is now deprecated and provide suggestions to fix his scene. In the following I provide a template of code (taken from the soft-robot plugin) to implement this kind of behavior. . ``` cpp; CableModel<DataTypes>::CableModel(MechanicalState* object); : InverseProblemConstraint<DataTypes>(object); , d_indexDeprecated(initData(&d_indexDeprecated, ""index"",; ""Deprecated, must be replaced by the field name 'indices'"")); , d_indices(initData(&d_indices, ""indices"",; ""List of points connected by the cable (from extremity to actuated point). \n""; ""If no indices are given, default value is 0. \n""; ""In case of multiple indices, one point will be actuated \n""; ""and the others will represent sliding points for the cable."")); {; d_indexDeprecated.setDisplayed(false);; }. template<class DataTypes>; void CableModel<DataTypes>::init(); if(d_indexDeprecated.isSet()) {; msg_warning(this) << ""The field of the Cable component named 'index' is now deprecated. ""; ""To remove this error message, the field 'index' should be replaced by the field 'indices'."" ;; .... depending on whether you want to force the user to fix his scene (so quitting the init with an error) or if you want a transition phase accepting the two field you just have to duplicate the content of d_indexDeprecated into d_indices. ; }; ```. If anyone has an opinion or other approach to the problem it is more than welcome. . D.",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/35
https://github.com/sofa-framework/sofa/issues/35:677,Modifiability,plugin,plugin,677,"Hi,. I found the usage of data alias more annoying than helpful. ; Currently data alias are used to provide backward compatibility with old scenes. The problem is that by doing so it does not indicate to the user that the data field name has changed and that it should change to fix his scenes. The consequence is that we have a lot of old scene that are still using differents name for the same data field. . I would advocate for a more helpful (to the user point of view) approach. This approach consists in saying that the field it is using is now deprecated and provide suggestions to fix his scene. In the following I provide a template of code (taken from the soft-robot plugin) to implement this kind of behavior. . ``` cpp; CableModel<DataTypes>::CableModel(MechanicalState* object); : InverseProblemConstraint<DataTypes>(object); , d_indexDeprecated(initData(&d_indexDeprecated, ""index"",; ""Deprecated, must be replaced by the field name 'indices'"")); , d_indices(initData(&d_indices, ""indices"",; ""List of points connected by the cable (from extremity to actuated point). \n""; ""If no indices are given, default value is 0. \n""; ""In case of multiple indices, one point will be actuated \n""; ""and the others will represent sliding points for the cable."")); {; d_indexDeprecated.setDisplayed(false);; }. template<class DataTypes>; void CableModel<DataTypes>::init(); if(d_indexDeprecated.isSet()) {; msg_warning(this) << ""The field of the Cable component named 'index' is now deprecated. ""; ""To remove this error message, the field 'index' should be replaced by the field 'indices'."" ;; .... depending on whether you want to force the user to fix his scene (so quitting the init with an error) or if you want a transition phase accepting the two field you just have to duplicate the content of d_indexDeprecated into d_indices. ; }; ```. If anyone has an opinion or other approach to the problem it is more than welcome. . D.",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/35
https://github.com/sofa-framework/sofa/issues/36:462,Availability,error,error,462,I noticed several flaw (or hard to understand) with the way mass and totalMass interact in DiagonalMass compared to what is done in UniformMass. . eg: ; - totalMass is set as readOnly in DiagonalMass while it is not in UniformMass; - despite totalMass is readOnly the value can still be changed in the scene file (so I wonder that the readOnly flag should be renamed to something that reflect what is it used for :)); - despite totalMass is readOnly there is no error message indicating to the user that the value he gave in his scene is simply dropped and that he should not use this flag. ; - the totalMass parameter is re-computed in the un-specialized implementation of the reinit function... but the specialization for rigid/vec and so on are not forwarding to this un-specialized implementation but the to implementation in-herited from the parent. (Is this really what we want ? This look a very weird design to me and I suspect problems on this forwarding to the parent.). ; - f_mass data (mass) field also seems to be a readOnly component (it seems deduced from massDensity and volume of the elements) but it is not tagged in the same way as totalMass. Why ? . Any feedback or confirmation/or not on these topics would help me to write the correct test. . DM.,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/36
https://github.com/sofa-framework/sofa/issues/36:468,Integrability,message,message,468,I noticed several flaw (or hard to understand) with the way mass and totalMass interact in DiagonalMass compared to what is done in UniformMass. . eg: ; - totalMass is set as readOnly in DiagonalMass while it is not in UniformMass; - despite totalMass is readOnly the value can still be changed in the scene file (so I wonder that the readOnly flag should be renamed to something that reflect what is it used for :)); - despite totalMass is readOnly there is no error message indicating to the user that the value he gave in his scene is simply dropped and that he should not use this flag. ; - the totalMass parameter is re-computed in the un-specialized implementation of the reinit function... but the specialization for rigid/vec and so on are not forwarding to this un-specialized implementation but the to implementation in-herited from the parent. (Is this really what we want ? This look a very weird design to me and I suspect problems on this forwarding to the parent.). ; - f_mass data (mass) field also seems to be a readOnly component (it seems deduced from massDensity and volume of the elements) but it is not tagged in the same way as totalMass. Why ? . Any feedback or confirmation/or not on these topics would help me to write the correct test. . DM.,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/36
https://github.com/sofa-framework/sofa/issues/36:1257,Testability,test,test,1257,I noticed several flaw (or hard to understand) with the way mass and totalMass interact in DiagonalMass compared to what is done in UniformMass. . eg: ; - totalMass is set as readOnly in DiagonalMass while it is not in UniformMass; - despite totalMass is readOnly the value can still be changed in the scene file (so I wonder that the readOnly flag should be renamed to something that reflect what is it used for :)); - despite totalMass is readOnly there is no error message indicating to the user that the value he gave in his scene is simply dropped and that he should not use this flag. ; - the totalMass parameter is re-computed in the un-specialized implementation of the reinit function... but the specialization for rigid/vec and so on are not forwarding to this un-specialized implementation but the to implementation in-herited from the parent. (Is this really what we want ? This look a very weird design to me and I suspect problems on this forwarding to the parent.). ; - f_mass data (mass) field also seems to be a readOnly component (it seems deduced from massDensity and volume of the elements) but it is not tagged in the same way as totalMass. Why ? . Any feedback or confirmation/or not on these topics would help me to write the correct test. . DM.,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/36
https://github.com/sofa-framework/sofa/issues/36:538,Usability,simpl,simply,538,I noticed several flaw (or hard to understand) with the way mass and totalMass interact in DiagonalMass compared to what is done in UniformMass. . eg: ; - totalMass is set as readOnly in DiagonalMass while it is not in UniformMass; - despite totalMass is readOnly the value can still be changed in the scene file (so I wonder that the readOnly flag should be renamed to something that reflect what is it used for :)); - despite totalMass is readOnly there is no error message indicating to the user that the value he gave in his scene is simply dropped and that he should not use this flag. ; - the totalMass parameter is re-computed in the un-specialized implementation of the reinit function... but the specialization for rigid/vec and so on are not forwarding to this un-specialized implementation but the to implementation in-herited from the parent. (Is this really what we want ? This look a very weird design to me and I suspect problems on this forwarding to the parent.). ; - f_mass data (mass) field also seems to be a readOnly component (it seems deduced from massDensity and volume of the elements) but it is not tagged in the same way as totalMass. Why ? . Any feedback or confirmation/or not on these topics would help me to write the correct test. . DM.,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/36
https://github.com/sofa-framework/sofa/issues/36:1174,Usability,feedback,feedback,1174,I noticed several flaw (or hard to understand) with the way mass and totalMass interact in DiagonalMass compared to what is done in UniformMass. . eg: ; - totalMass is set as readOnly in DiagonalMass while it is not in UniformMass; - despite totalMass is readOnly the value can still be changed in the scene file (so I wonder that the readOnly flag should be renamed to something that reflect what is it used for :)); - despite totalMass is readOnly there is no error message indicating to the user that the value he gave in his scene is simply dropped and that he should not use this flag. ; - the totalMass parameter is re-computed in the un-specialized implementation of the reinit function... but the specialization for rigid/vec and so on are not forwarding to this un-specialized implementation but the to implementation in-herited from the parent. (Is this really what we want ? This look a very weird design to me and I suspect problems on this forwarding to the parent.). ; - f_mass data (mass) field also seems to be a readOnly component (it seems deduced from massDensity and volume of the elements) but it is not tagged in the same way as totalMass. Why ? . Any feedback or confirmation/or not on these topics would help me to write the correct test. . DM.,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/36
https://github.com/sofa-framework/sofa/issues/37:63,Availability,failure,failure,63,In sofa we are missing a way to handle the component when some failure happens (eg: when it cannot be initialized). Several code patterns are possible... more or less invasive... I'm searching for different alternatives solutions I could employ to solve this issue. . DM.,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/37
https://github.com/sofa-framework/sofa/issues/38:68,Deployability,update,update,68,Whatever I set doUpdate to true or false the BoxROI object seems to update the selected triangles so I wonder what is supposed to be the behavior of this data field ?,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/38
https://github.com/sofa-framework/sofa/issues/43:246,Modifiability,rewrite,rewrite,246,"Hi,. several tests were already done for topological modifier, they are tested through scenes in examples/Components/Topology/TopologicalModifiers. They test: add/remove of topological elements; - Is sofaVerification still used? ; - I can easily rewrite those tests in c++ using the ::Sofa_test api. Is it better? what is the politic between doing tests through scene or Sofa_test.",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/43
https://github.com/sofa-framework/sofa/issues/43:13,Testability,test,tests,13,"Hi,. several tests were already done for topological modifier, they are tested through scenes in examples/Components/Topology/TopologicalModifiers. They test: add/remove of topological elements; - Is sofaVerification still used? ; - I can easily rewrite those tests in c++ using the ::Sofa_test api. Is it better? what is the politic between doing tests through scene or Sofa_test.",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/43
https://github.com/sofa-framework/sofa/issues/43:72,Testability,test,tested,72,"Hi,. several tests were already done for topological modifier, they are tested through scenes in examples/Components/Topology/TopologicalModifiers. They test: add/remove of topological elements; - Is sofaVerification still used? ; - I can easily rewrite those tests in c++ using the ::Sofa_test api. Is it better? what is the politic between doing tests through scene or Sofa_test.",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/43
https://github.com/sofa-framework/sofa/issues/43:153,Testability,test,test,153,"Hi,. several tests were already done for topological modifier, they are tested through scenes in examples/Components/Topology/TopologicalModifiers. They test: add/remove of topological elements; - Is sofaVerification still used? ; - I can easily rewrite those tests in c++ using the ::Sofa_test api. Is it better? what is the politic between doing tests through scene or Sofa_test.",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/43
https://github.com/sofa-framework/sofa/issues/43:260,Testability,test,tests,260,"Hi,. several tests were already done for topological modifier, they are tested through scenes in examples/Components/Topology/TopologicalModifiers. They test: add/remove of topological elements; - Is sofaVerification still used? ; - I can easily rewrite those tests in c++ using the ::Sofa_test api. Is it better? what is the politic between doing tests through scene or Sofa_test.",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/43
https://github.com/sofa-framework/sofa/issues/43:348,Testability,test,tests,348,"Hi,. several tests were already done for topological modifier, they are tested through scenes in examples/Components/Topology/TopologicalModifiers. They test: add/remove of topological elements; - Is sofaVerification still used? ; - I can easily rewrite those tests in c++ using the ::Sofa_test api. Is it better? what is the politic between doing tests through scene or Sofa_test.",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/43
https://github.com/sofa-framework/sofa/issues/44:2192,Energy Efficiency,allocate,allocate,2192,"member `Data` in a component is to do something like:. ``` c++; MyComponent() ; : my_data( initData(&my_data, init_value, ""friendly name"", ""help message"") ) { ; // ...; }; ```. At this point one can remark that most information provided to `initData` depends on the component _class_, and not on the component _instance_ being constructed, save for the initial value and the pointer to the current instance (used by the data as its 'owner'). . Now what happens when the data is constructed using `initData`?; 1. some `BaseInitData` objet is created, mostly holding pointers to character strings and owner,; 2. `BaseData` is constructed from `BaseInitData` (`BaseData.cpp:70`) where the following happens:; 1. data links for `inputs` and `outputs` are setup, 2x `std::vector::push_back`; 2. data are added back to their owner (from which they come anyway) 1x `std::vector::push_back` + 1x `std::map::insert` for aliases. There is also the `DDGNode` base class initialization, which also incurs at least `initLink` for members `inputs` and `outputs` (cf `DDGNode.cpp:43`), each again causing `addLink` back to the owner and an extra `std::vector::push_back`. Phheew. Now you probably see where I am heading at: do we really need to pay a worst case 6x heap allocation for every single data in every single component created? Or at least, can this cost be alleviated somehow?. **Are there component examples that manage `Data` which are not known at compile-time ?**. If most/all the use-cases are in fact per-class, it is relatively easy to imagine a system that maps names to instance members constructed statically, so that component instances don't have to hold and allocate a vector of pointers to their own datas (!). Data links are more tricky since they depend on the graph, but my opinion is that there should be at least a way to disable automatic link management when they are not needed. . Now thanks for reading this far, I look forward to hearing the community's opinion on the subject :-)",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/44
https://github.com/sofa-framework/sofa/issues/44:670,Integrability,message,message,670,"Dear all,. I used a deliberately provocative title to start a friendly technical discussion about the way `Data` are initialized. As of now, `Data` constructors potentially incur a non-negligible overhead per component created, and it is unclear why users should have to pay for (at least some of) it. The overhead can get pretty large as many components are created (think of contacts, for instance), so I hope this discussion will clarify what is really needed and what can be optimized away. The current way to initialize member `Data` in a component is to do something like:. ``` c++; MyComponent() ; : my_data( initData(&my_data, init_value, ""friendly name"", ""help message"") ) { ; // ...; }; ```. At this point one can remark that most information provided to `initData` depends on the component _class_, and not on the component _instance_ being constructed, save for the initial value and the pointer to the current instance (used by the data as its 'owner'). . Now what happens when the data is constructed using `initData`?; 1. some `BaseInitData` objet is created, mostly holding pointers to character strings and owner,; 2. `BaseData` is constructed from `BaseInitData` (`BaseData.cpp:70`) where the following happens:; 1. data links for `inputs` and `outputs` are setup, 2x `std::vector::push_back`; 2. data are added back to their owner (from which they come anyway) 1x `std::vector::push_back` + 1x `std::map::insert` for aliases. There is also the `DDGNode` base class initialization, which also incurs at least `initLink` for members `inputs` and `outputs` (cf `DDGNode.cpp:43`), each again causing `addLink` back to the owner and an extra `std::vector::push_back`. Phheew. Now you probably see where I am heading at: do we really need to pay a worst case 6x heap allocation for every single data in every single component created? Or at least, can this cost be alleviated somehow?. **Are there component examples that manage `Data` which are not known at compile-time ?**. If most/all",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/44
https://github.com/sofa-framework/sofa/issues/44:776,Integrability,depend,depends,776,"Dear all,. I used a deliberately provocative title to start a friendly technical discussion about the way `Data` are initialized. As of now, `Data` constructors potentially incur a non-negligible overhead per component created, and it is unclear why users should have to pay for (at least some of) it. The overhead can get pretty large as many components are created (think of contacts, for instance), so I hope this discussion will clarify what is really needed and what can be optimized away. The current way to initialize member `Data` in a component is to do something like:. ``` c++; MyComponent() ; : my_data( initData(&my_data, init_value, ""friendly name"", ""help message"") ) { ; // ...; }; ```. At this point one can remark that most information provided to `initData` depends on the component _class_, and not on the component _instance_ being constructed, save for the initial value and the pointer to the current instance (used by the data as its 'owner'). . Now what happens when the data is constructed using `initData`?; 1. some `BaseInitData` objet is created, mostly holding pointers to character strings and owner,; 2. `BaseData` is constructed from `BaseInitData` (`BaseData.cpp:70`) where the following happens:; 1. data links for `inputs` and `outputs` are setup, 2x `std::vector::push_back`; 2. data are added back to their owner (from which they come anyway) 1x `std::vector::push_back` + 1x `std::map::insert` for aliases. There is also the `DDGNode` base class initialization, which also incurs at least `initLink` for members `inputs` and `outputs` (cf `DDGNode.cpp:43`), each again causing `addLink` back to the owner and an extra `std::vector::push_back`. Phheew. Now you probably see where I am heading at: do we really need to pay a worst case 6x heap allocation for every single data in every single component created? Or at least, can this cost be alleviated somehow?. **Are there component examples that manage `Data` which are not known at compile-time ?**. If most/all",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/44
https://github.com/sofa-framework/sofa/issues/44:2284,Integrability,depend,depend,2284,"member `Data` in a component is to do something like:. ``` c++; MyComponent() ; : my_data( initData(&my_data, init_value, ""friendly name"", ""help message"") ) { ; // ...; }; ```. At this point one can remark that most information provided to `initData` depends on the component _class_, and not on the component _instance_ being constructed, save for the initial value and the pointer to the current instance (used by the data as its 'owner'). . Now what happens when the data is constructed using `initData`?; 1. some `BaseInitData` objet is created, mostly holding pointers to character strings and owner,; 2. `BaseData` is constructed from `BaseInitData` (`BaseData.cpp:70`) where the following happens:; 1. data links for `inputs` and `outputs` are setup, 2x `std::vector::push_back`; 2. data are added back to their owner (from which they come anyway) 1x `std::vector::push_back` + 1x `std::map::insert` for aliases. There is also the `DDGNode` base class initialization, which also incurs at least `initLink` for members `inputs` and `outputs` (cf `DDGNode.cpp:43`), each again causing `addLink` back to the owner and an extra `std::vector::push_back`. Phheew. Now you probably see where I am heading at: do we really need to pay a worst case 6x heap allocation for every single data in every single component created? Or at least, can this cost be alleviated somehow?. **Are there component examples that manage `Data` which are not known at compile-time ?**. If most/all the use-cases are in fact per-class, it is relatively easy to imagine a system that maps names to instance members constructed statically, so that component instances don't have to hold and allocate a vector of pointers to their own datas (!). Data links are more tricky since they depend on the graph, but my opinion is that there should be at least a way to disable automatic link management when they are not needed. . Now thanks for reading this far, I look forward to hearing the community's opinion on the subject :-)",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/44
https://github.com/sofa-framework/sofa/issues/44:479,Performance,optimiz,optimized,479,"Dear all,. I used a deliberately provocative title to start a friendly technical discussion about the way `Data` are initialized. As of now, `Data` constructors potentially incur a non-negligible overhead per component created, and it is unclear why users should have to pay for (at least some of) it. The overhead can get pretty large as many components are created (think of contacts, for instance), so I hope this discussion will clarify what is really needed and what can be optimized away. The current way to initialize member `Data` in a component is to do something like:. ``` c++; MyComponent() ; : my_data( initData(&my_data, init_value, ""friendly name"", ""help message"") ) { ; // ...; }; ```. At this point one can remark that most information provided to `initData` depends on the component _class_, and not on the component _instance_ being constructed, save for the initial value and the pointer to the current instance (used by the data as its 'owner'). . Now what happens when the data is constructed using `initData`?; 1. some `BaseInitData` objet is created, mostly holding pointers to character strings and owner,; 2. `BaseData` is constructed from `BaseInitData` (`BaseData.cpp:70`) where the following happens:; 1. data links for `inputs` and `outputs` are setup, 2x `std::vector::push_back`; 2. data are added back to their owner (from which they come anyway) 1x `std::vector::push_back` + 1x `std::map::insert` for aliases. There is also the `DDGNode` base class initialization, which also incurs at least `initLink` for members `inputs` and `outputs` (cf `DDGNode.cpp:43`), each again causing `addLink` back to the owner and an extra `std::vector::push_back`. Phheew. Now you probably see where I am heading at: do we really need to pay a worst case 6x heap allocation for every single data in every single component created? Or at least, can this cost be alleviated somehow?. **Are there component examples that manage `Data` which are not known at compile-time ?**. If most/all",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/44
https://github.com/sofa-framework/sofa/issues/45:434,Availability,toler,tolerance,434,"I,. I'm factoring the code that is in double/float template specialization using the design pattern used in the Image plugin (an external class Specialization which is friend to the class to specialize). . The code in:. ``` cpp; BilateralInteractionConstraint<Rigid3fTypes>::getConstraintResolution(...); BilateralInteractionConstraint<Rigid3dTypes>::getConstraintResolution(...); ```. is different. ; Float is using . ``` cpp; temp->tolerance = 0.0001;; ```. Double is using:. ``` cpp; temp->tolerance = 0.01;; ```. Can someone check if this is expected or if this a kind of ""someone change the value in one place and forgot the other"". . DM.",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/45
https://github.com/sofa-framework/sofa/issues/45:493,Availability,toler,tolerance,493,"I,. I'm factoring the code that is in double/float template specialization using the design pattern used in the Image plugin (an external class Specialization which is friend to the class to specialize). . The code in:. ``` cpp; BilateralInteractionConstraint<Rigid3fTypes>::getConstraintResolution(...); BilateralInteractionConstraint<Rigid3dTypes>::getConstraintResolution(...); ```. is different. ; Float is using . ``` cpp; temp->tolerance = 0.0001;; ```. Double is using:. ``` cpp; temp->tolerance = 0.01;; ```. Can someone check if this is expected or if this a kind of ""someone change the value in one place and forgot the other"". . DM.",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/45
https://github.com/sofa-framework/sofa/issues/45:118,Modifiability,plugin,plugin,118,"I,. I'm factoring the code that is in double/float template specialization using the design pattern used in the Image plugin (an external class Specialization which is friend to the class to specialize). . The code in:. ``` cpp; BilateralInteractionConstraint<Rigid3fTypes>::getConstraintResolution(...); BilateralInteractionConstraint<Rigid3dTypes>::getConstraintResolution(...); ```. is different. ; Float is using . ``` cpp; temp->tolerance = 0.0001;; ```. Double is using:. ``` cpp; temp->tolerance = 0.01;; ```. Can someone check if this is expected or if this a kind of ""someone change the value in one place and forgot the other"". . DM.",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/45
https://github.com/sofa-framework/sofa/pull/46:1442,Energy Efficiency,power,powerful,1442,"This PR introduces nice python wrappers for mappings. . It enables easy definition of pure python mappings similar to c++ with little overhead, since all the Eigen sparse matrices are aliased as SciPy sparse matrices (yay!). Here is a small taste:. ``` python; class DistanceMapping(easy.Mapping):; '''a hooke-like distance mapping: . f(p1, p2) = norm(p2 - p1) - rest_length; '''. def __init__(self, node, **kwargs):; easy.Mapping.__init__(self, node, **kwargs). self.rest_length = 0. def apply(self, out, at):. p1 = at[0][0]; p2 = at[1][0]. delta = p2 - p1; norm = math.sqrt(delta.dot(delta)). out[0][0] = norm - self.rest_length. def jacobian(self, js, at):. p1 = at[0][0]; p2 = at[1][0]. delta = p2 - p1; norm = math.sqrt(delta.dot(delta)). if norm > 1e-14:; u = delta / norm; js[0][0] = -u; js[1][0] = u; else:; # warning; js[0][0] = np.zeros(3); js[1][0] = np.zeros(3). def geometric_stiffness(self, gs, at, force):. p1 = at[0][0]; p2 = at[1][0]. delta = p2 - p1. norm = math.sqrt(delta.dot(delta)); if norm > 1e-14:. u = delta / norm; f = force[0][0]. block = (np.identity(3) - np.outer(u, u)) * (f / norm); gs[:3, :3] = block; gs[3:, 3:] = block. gs[:3, 3:] = -block; gs[3:, :3] = -block. else:; gs[:, :] = 0; ```. See `Compliant/examples/easy.py` for a complete example. For now the code lives in `Compliant` for other people to try out, but could migrate to `SofaPython` if needed. . This PR also ditches a previous but less elegant/powerful attempt at the same problem.",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/46
https://github.com/sofa-framework/sofa/pull/46:31,Integrability,wrap,wrappers,31,"This PR introduces nice python wrappers for mappings. . It enables easy definition of pure python mappings similar to c++ with little overhead, since all the Eigen sparse matrices are aliased as SciPy sparse matrices (yay!). Here is a small taste:. ``` python; class DistanceMapping(easy.Mapping):; '''a hooke-like distance mapping: . f(p1, p2) = norm(p2 - p1) - rest_length; '''. def __init__(self, node, **kwargs):; easy.Mapping.__init__(self, node, **kwargs). self.rest_length = 0. def apply(self, out, at):. p1 = at[0][0]; p2 = at[1][0]. delta = p2 - p1; norm = math.sqrt(delta.dot(delta)). out[0][0] = norm - self.rest_length. def jacobian(self, js, at):. p1 = at[0][0]; p2 = at[1][0]. delta = p2 - p1; norm = math.sqrt(delta.dot(delta)). if norm > 1e-14:; u = delta / norm; js[0][0] = -u; js[1][0] = u; else:; # warning; js[0][0] = np.zeros(3); js[1][0] = np.zeros(3). def geometric_stiffness(self, gs, at, force):. p1 = at[0][0]; p2 = at[1][0]. delta = p2 - p1. norm = math.sqrt(delta.dot(delta)); if norm > 1e-14:. u = delta / norm; f = force[0][0]. block = (np.identity(3) - np.outer(u, u)) * (f / norm); gs[:3, :3] = block; gs[3:, 3:] = block. gs[:3, 3:] = -block; gs[3:, :3] = -block. else:; gs[:, :] = 0; ```. See `Compliant/examples/easy.py` for a complete example. For now the code lives in `Compliant` for other people to try out, but could migrate to `SofaPython` if needed. . This PR also ditches a previous but less elegant/powerful attempt at the same problem.",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/46
https://github.com/sofa-framework/sofa/issues/47:308,Integrability,message,message,308,"Hi all,. in SphereModel.cpp it is unclear to me why the functions . ``` cpp; Vector3 TSphere<defaulttype::getContactPointByNormal( const Vector3& );; Vector3 TSphere<defaulttype::getContactPointWithSurfacePoint(...);; ```. Are specialized on Vec3fd to return the center only. . Second question is why do the message says that SphereModel only work with a Vec3 while it seems to also accept Rigid3 types. . Anyone can explain ?. Thank,; DM.",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/47
https://github.com/sofa-framework/sofa/pull/48:30,Availability,error,error,30,This commit fixes compilation error while adding QtGuiInteraction plugin.,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/48
https://github.com/sofa-framework/sofa/pull/48:66,Modifiability,plugin,plugin,66,This commit fixes compilation error while adding QtGuiInteraction plugin.,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/48
https://github.com/sofa-framework/sofa/issues/51:507,Availability,down,down,507,"Reading a JPEG file is implemented by ImageQt, which obviously depends on Qt.; It means that Qt is needed to load any JPEG image (actually, also gif, and other exotic formats). 1) I think we should be able to read JPEG files without Qt ; perhaps using libjpeg ?; 2) Moreover, we need to have a Qt Gui to activate ImageQt ; then it could be an idea to move this class to a plugin ? Which will be able to read all image formats the Qt library can read ?; 3) (BUG) JPEG files read by ImageQt seem to be upside-down, if we compare it with the same image converted in the PNG format (I will write a test to confirm that)",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/51
https://github.com/sofa-framework/sofa/issues/51:63,Integrability,depend,depends,63,"Reading a JPEG file is implemented by ImageQt, which obviously depends on Qt.; It means that Qt is needed to load any JPEG image (actually, also gif, and other exotic formats). 1) I think we should be able to read JPEG files without Qt ; perhaps using libjpeg ?; 2) Moreover, we need to have a Qt Gui to activate ImageQt ; then it could be an idea to move this class to a plugin ? Which will be able to read all image formats the Qt library can read ?; 3) (BUG) JPEG files read by ImageQt seem to be upside-down, if we compare it with the same image converted in the PNG format (I will write a test to confirm that)",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/51
https://github.com/sofa-framework/sofa/issues/51:372,Modifiability,plugin,plugin,372,"Reading a JPEG file is implemented by ImageQt, which obviously depends on Qt.; It means that Qt is needed to load any JPEG image (actually, also gif, and other exotic formats). 1) I think we should be able to read JPEG files without Qt ; perhaps using libjpeg ?; 2) Moreover, we need to have a Qt Gui to activate ImageQt ; then it could be an idea to move this class to a plugin ? Which will be able to read all image formats the Qt library can read ?; 3) (BUG) JPEG files read by ImageQt seem to be upside-down, if we compare it with the same image converted in the PNG format (I will write a test to confirm that)",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/51
https://github.com/sofa-framework/sofa/issues/51:109,Performance,load,load,109,"Reading a JPEG file is implemented by ImageQt, which obviously depends on Qt.; It means that Qt is needed to load any JPEG image (actually, also gif, and other exotic formats). 1) I think we should be able to read JPEG files without Qt ; perhaps using libjpeg ?; 2) Moreover, we need to have a Qt Gui to activate ImageQt ; then it could be an idea to move this class to a plugin ? Which will be able to read all image formats the Qt library can read ?; 3) (BUG) JPEG files read by ImageQt seem to be upside-down, if we compare it with the same image converted in the PNG format (I will write a test to confirm that)",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/51
https://github.com/sofa-framework/sofa/issues/51:594,Testability,test,test,594,"Reading a JPEG file is implemented by ImageQt, which obviously depends on Qt.; It means that Qt is needed to load any JPEG image (actually, also gif, and other exotic formats). 1) I think we should be able to read JPEG files without Qt ; perhaps using libjpeg ?; 2) Moreover, we need to have a Qt Gui to activate ImageQt ; then it could be an idea to move this class to a plugin ? Which will be able to read all image formats the Qt library can read ?; 3) (BUG) JPEG files read by ImageQt seem to be upside-down, if we compare it with the same image converted in the PNG format (I will write a test to confirm that)",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/51
https://github.com/sofa-framework/sofa/issues/52:283,Availability,failure,failure,283,"Hi,. The current dash board does not allows to differentiate tests that fails because they are 'showing' a not yet fixed sofa defect to the one caused by regression (ie tests that were supposed to work but don't anymore). . This is a problem because while introducing new regression failure is a bad thing, introducing new tests that exhibit sofa defect is a positive thing. But they have the same results...turning the dashboard to orange. . I see two consequences:; - when there is test failures because of open-issues we will detect much less easily the regressions tests (that are 'more' important !) ; - people will prevent themselves to push open-issues test to avoid to turn the dash board to a not green status (because they are ashamed...or because they prefer to preserve the readability of the dash board to detect regression). So would it be possible to change that so that each tests with a pattern (lke ""OpenIssue"" in their name are counted separately ?. This would allow to reports two numbers instead of one eg:; regression test failure : 0 ; open issues tests failure: 123 ; And also to let the dashboard green for open issues tests failure. . DM.",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/52
https://github.com/sofa-framework/sofa/issues/52:489,Availability,failure,failures,489,"Hi,. The current dash board does not allows to differentiate tests that fails because they are 'showing' a not yet fixed sofa defect to the one caused by regression (ie tests that were supposed to work but don't anymore). . This is a problem because while introducing new regression failure is a bad thing, introducing new tests that exhibit sofa defect is a positive thing. But they have the same results...turning the dashboard to orange. . I see two consequences:; - when there is test failures because of open-issues we will detect much less easily the regressions tests (that are 'more' important !) ; - people will prevent themselves to push open-issues test to avoid to turn the dash board to a not green status (because they are ashamed...or because they prefer to preserve the readability of the dash board to detect regression). So would it be possible to change that so that each tests with a pattern (lke ""OpenIssue"" in their name are counted separately ?. This would allow to reports two numbers instead of one eg:; regression test failure : 0 ; open issues tests failure: 123 ; And also to let the dashboard green for open issues tests failure. . DM.",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/52
https://github.com/sofa-framework/sofa/issues/52:1045,Availability,failure,failure,1045,"Hi,. The current dash board does not allows to differentiate tests that fails because they are 'showing' a not yet fixed sofa defect to the one caused by regression (ie tests that were supposed to work but don't anymore). . This is a problem because while introducing new regression failure is a bad thing, introducing new tests that exhibit sofa defect is a positive thing. But they have the same results...turning the dashboard to orange. . I see two consequences:; - when there is test failures because of open-issues we will detect much less easily the regressions tests (that are 'more' important !) ; - people will prevent themselves to push open-issues test to avoid to turn the dash board to a not green status (because they are ashamed...or because they prefer to preserve the readability of the dash board to detect regression). So would it be possible to change that so that each tests with a pattern (lke ""OpenIssue"" in their name are counted separately ?. This would allow to reports two numbers instead of one eg:; regression test failure : 0 ; open issues tests failure: 123 ; And also to let the dashboard green for open issues tests failure. . DM.",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/52
https://github.com/sofa-framework/sofa/issues/52:1077,Availability,failure,failure,1077,"Hi,. The current dash board does not allows to differentiate tests that fails because they are 'showing' a not yet fixed sofa defect to the one caused by regression (ie tests that were supposed to work but don't anymore). . This is a problem because while introducing new regression failure is a bad thing, introducing new tests that exhibit sofa defect is a positive thing. But they have the same results...turning the dashboard to orange. . I see two consequences:; - when there is test failures because of open-issues we will detect much less easily the regressions tests (that are 'more' important !) ; - people will prevent themselves to push open-issues test to avoid to turn the dash board to a not green status (because they are ashamed...or because they prefer to preserve the readability of the dash board to detect regression). So would it be possible to change that so that each tests with a pattern (lke ""OpenIssue"" in their name are counted separately ?. This would allow to reports two numbers instead of one eg:; regression test failure : 0 ; open issues tests failure: 123 ; And also to let the dashboard green for open issues tests failure. . DM.",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/52
https://github.com/sofa-framework/sofa/issues/52:1150,Availability,failure,failure,1150,"Hi,. The current dash board does not allows to differentiate tests that fails because they are 'showing' a not yet fixed sofa defect to the one caused by regression (ie tests that were supposed to work but don't anymore). . This is a problem because while introducing new regression failure is a bad thing, introducing new tests that exhibit sofa defect is a positive thing. But they have the same results...turning the dashboard to orange. . I see two consequences:; - when there is test failures because of open-issues we will detect much less easily the regressions tests (that are 'more' important !) ; - people will prevent themselves to push open-issues test to avoid to turn the dash board to a not green status (because they are ashamed...or because they prefer to preserve the readability of the dash board to detect regression). So would it be possible to change that so that each tests with a pattern (lke ""OpenIssue"" in their name are counted separately ?. This would allow to reports two numbers instead of one eg:; regression test failure : 0 ; open issues tests failure: 123 ; And also to let the dashboard green for open issues tests failure. . DM.",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/52
https://github.com/sofa-framework/sofa/issues/52:706,Energy Efficiency,green,green,706,"Hi,. The current dash board does not allows to differentiate tests that fails because they are 'showing' a not yet fixed sofa defect to the one caused by regression (ie tests that were supposed to work but don't anymore). . This is a problem because while introducing new regression failure is a bad thing, introducing new tests that exhibit sofa defect is a positive thing. But they have the same results...turning the dashboard to orange. . I see two consequences:; - when there is test failures because of open-issues we will detect much less easily the regressions tests (that are 'more' important !) ; - people will prevent themselves to push open-issues test to avoid to turn the dash board to a not green status (because they are ashamed...or because they prefer to preserve the readability of the dash board to detect regression). So would it be possible to change that so that each tests with a pattern (lke ""OpenIssue"" in their name are counted separately ?. This would allow to reports two numbers instead of one eg:; regression test failure : 0 ; open issues tests failure: 123 ; And also to let the dashboard green for open issues tests failure. . DM.",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/52
https://github.com/sofa-framework/sofa/issues/52:1122,Energy Efficiency,green,green,1122,"Hi,. The current dash board does not allows to differentiate tests that fails because they are 'showing' a not yet fixed sofa defect to the one caused by regression (ie tests that were supposed to work but don't anymore). . This is a problem because while introducing new regression failure is a bad thing, introducing new tests that exhibit sofa defect is a positive thing. But they have the same results...turning the dashboard to orange. . I see two consequences:; - when there is test failures because of open-issues we will detect much less easily the regressions tests (that are 'more' important !) ; - people will prevent themselves to push open-issues test to avoid to turn the dash board to a not green status (because they are ashamed...or because they prefer to preserve the readability of the dash board to detect regression). So would it be possible to change that so that each tests with a pattern (lke ""OpenIssue"" in their name are counted separately ?. This would allow to reports two numbers instead of one eg:; regression test failure : 0 ; open issues tests failure: 123 ; And also to let the dashboard green for open issues tests failure. . DM.",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/52
https://github.com/sofa-framework/sofa/issues/52:529,Safety,detect,detect,529,"Hi,. The current dash board does not allows to differentiate tests that fails because they are 'showing' a not yet fixed sofa defect to the one caused by regression (ie tests that were supposed to work but don't anymore). . This is a problem because while introducing new regression failure is a bad thing, introducing new tests that exhibit sofa defect is a positive thing. But they have the same results...turning the dashboard to orange. . I see two consequences:; - when there is test failures because of open-issues we will detect much less easily the regressions tests (that are 'more' important !) ; - people will prevent themselves to push open-issues test to avoid to turn the dash board to a not green status (because they are ashamed...or because they prefer to preserve the readability of the dash board to detect regression). So would it be possible to change that so that each tests with a pattern (lke ""OpenIssue"" in their name are counted separately ?. This would allow to reports two numbers instead of one eg:; regression test failure : 0 ; open issues tests failure: 123 ; And also to let the dashboard green for open issues tests failure. . DM.",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/52
https://github.com/sofa-framework/sofa/issues/52:668,Safety,avoid,avoid,668,"Hi,. The current dash board does not allows to differentiate tests that fails because they are 'showing' a not yet fixed sofa defect to the one caused by regression (ie tests that were supposed to work but don't anymore). . This is a problem because while introducing new regression failure is a bad thing, introducing new tests that exhibit sofa defect is a positive thing. But they have the same results...turning the dashboard to orange. . I see two consequences:; - when there is test failures because of open-issues we will detect much less easily the regressions tests (that are 'more' important !) ; - people will prevent themselves to push open-issues test to avoid to turn the dash board to a not green status (because they are ashamed...or because they prefer to preserve the readability of the dash board to detect regression). So would it be possible to change that so that each tests with a pattern (lke ""OpenIssue"" in their name are counted separately ?. This would allow to reports two numbers instead of one eg:; regression test failure : 0 ; open issues tests failure: 123 ; And also to let the dashboard green for open issues tests failure. . DM.",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/52
https://github.com/sofa-framework/sofa/issues/52:819,Safety,detect,detect,819,"Hi,. The current dash board does not allows to differentiate tests that fails because they are 'showing' a not yet fixed sofa defect to the one caused by regression (ie tests that were supposed to work but don't anymore). . This is a problem because while introducing new regression failure is a bad thing, introducing new tests that exhibit sofa defect is a positive thing. But they have the same results...turning the dashboard to orange. . I see two consequences:; - when there is test failures because of open-issues we will detect much less easily the regressions tests (that are 'more' important !) ; - people will prevent themselves to push open-issues test to avoid to turn the dash board to a not green status (because they are ashamed...or because they prefer to preserve the readability of the dash board to detect regression). So would it be possible to change that so that each tests with a pattern (lke ""OpenIssue"" in their name are counted separately ?. This would allow to reports two numbers instead of one eg:; regression test failure : 0 ; open issues tests failure: 123 ; And also to let the dashboard green for open issues tests failure. . DM.",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/52
https://github.com/sofa-framework/sofa/issues/52:61,Testability,test,tests,61,"Hi,. The current dash board does not allows to differentiate tests that fails because they are 'showing' a not yet fixed sofa defect to the one caused by regression (ie tests that were supposed to work but don't anymore). . This is a problem because while introducing new regression failure is a bad thing, introducing new tests that exhibit sofa defect is a positive thing. But they have the same results...turning the dashboard to orange. . I see two consequences:; - when there is test failures because of open-issues we will detect much less easily the regressions tests (that are 'more' important !) ; - people will prevent themselves to push open-issues test to avoid to turn the dash board to a not green status (because they are ashamed...or because they prefer to preserve the readability of the dash board to detect regression). So would it be possible to change that so that each tests with a pattern (lke ""OpenIssue"" in their name are counted separately ?. This would allow to reports two numbers instead of one eg:; regression test failure : 0 ; open issues tests failure: 123 ; And also to let the dashboard green for open issues tests failure. . DM.",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/52
https://github.com/sofa-framework/sofa/issues/52:169,Testability,test,tests,169,"Hi,. The current dash board does not allows to differentiate tests that fails because they are 'showing' a not yet fixed sofa defect to the one caused by regression (ie tests that were supposed to work but don't anymore). . This is a problem because while introducing new regression failure is a bad thing, introducing new tests that exhibit sofa defect is a positive thing. But they have the same results...turning the dashboard to orange. . I see two consequences:; - when there is test failures because of open-issues we will detect much less easily the regressions tests (that are 'more' important !) ; - people will prevent themselves to push open-issues test to avoid to turn the dash board to a not green status (because they are ashamed...or because they prefer to preserve the readability of the dash board to detect regression). So would it be possible to change that so that each tests with a pattern (lke ""OpenIssue"" in their name are counted separately ?. This would allow to reports two numbers instead of one eg:; regression test failure : 0 ; open issues tests failure: 123 ; And also to let the dashboard green for open issues tests failure. . DM.",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/52
https://github.com/sofa-framework/sofa/issues/52:323,Testability,test,tests,323,"Hi,. The current dash board does not allows to differentiate tests that fails because they are 'showing' a not yet fixed sofa defect to the one caused by regression (ie tests that were supposed to work but don't anymore). . This is a problem because while introducing new regression failure is a bad thing, introducing new tests that exhibit sofa defect is a positive thing. But they have the same results...turning the dashboard to orange. . I see two consequences:; - when there is test failures because of open-issues we will detect much less easily the regressions tests (that are 'more' important !) ; - people will prevent themselves to push open-issues test to avoid to turn the dash board to a not green status (because they are ashamed...or because they prefer to preserve the readability of the dash board to detect regression). So would it be possible to change that so that each tests with a pattern (lke ""OpenIssue"" in their name are counted separately ?. This would allow to reports two numbers instead of one eg:; regression test failure : 0 ; open issues tests failure: 123 ; And also to let the dashboard green for open issues tests failure. . DM.",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/52
https://github.com/sofa-framework/sofa/issues/52:484,Testability,test,test,484,"Hi,. The current dash board does not allows to differentiate tests that fails because they are 'showing' a not yet fixed sofa defect to the one caused by regression (ie tests that were supposed to work but don't anymore). . This is a problem because while introducing new regression failure is a bad thing, introducing new tests that exhibit sofa defect is a positive thing. But they have the same results...turning the dashboard to orange. . I see two consequences:; - when there is test failures because of open-issues we will detect much less easily the regressions tests (that are 'more' important !) ; - people will prevent themselves to push open-issues test to avoid to turn the dash board to a not green status (because they are ashamed...or because they prefer to preserve the readability of the dash board to detect regression). So would it be possible to change that so that each tests with a pattern (lke ""OpenIssue"" in their name are counted separately ?. This would allow to reports two numbers instead of one eg:; regression test failure : 0 ; open issues tests failure: 123 ; And also to let the dashboard green for open issues tests failure. . DM.",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/52
https://github.com/sofa-framework/sofa/issues/52:569,Testability,test,tests,569,"Hi,. The current dash board does not allows to differentiate tests that fails because they are 'showing' a not yet fixed sofa defect to the one caused by regression (ie tests that were supposed to work but don't anymore). . This is a problem because while introducing new regression failure is a bad thing, introducing new tests that exhibit sofa defect is a positive thing. But they have the same results...turning the dashboard to orange. . I see two consequences:; - when there is test failures because of open-issues we will detect much less easily the regressions tests (that are 'more' important !) ; - people will prevent themselves to push open-issues test to avoid to turn the dash board to a not green status (because they are ashamed...or because they prefer to preserve the readability of the dash board to detect regression). So would it be possible to change that so that each tests with a pattern (lke ""OpenIssue"" in their name are counted separately ?. This would allow to reports two numbers instead of one eg:; regression test failure : 0 ; open issues tests failure: 123 ; And also to let the dashboard green for open issues tests failure. . DM.",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/52
https://github.com/sofa-framework/sofa/issues/52:660,Testability,test,test,660,"Hi,. The current dash board does not allows to differentiate tests that fails because they are 'showing' a not yet fixed sofa defect to the one caused by regression (ie tests that were supposed to work but don't anymore). . This is a problem because while introducing new regression failure is a bad thing, introducing new tests that exhibit sofa defect is a positive thing. But they have the same results...turning the dashboard to orange. . I see two consequences:; - when there is test failures because of open-issues we will detect much less easily the regressions tests (that are 'more' important !) ; - people will prevent themselves to push open-issues test to avoid to turn the dash board to a not green status (because they are ashamed...or because they prefer to preserve the readability of the dash board to detect regression). So would it be possible to change that so that each tests with a pattern (lke ""OpenIssue"" in their name are counted separately ?. This would allow to reports two numbers instead of one eg:; regression test failure : 0 ; open issues tests failure: 123 ; And also to let the dashboard green for open issues tests failure. . DM.",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/52
https://github.com/sofa-framework/sofa/issues/52:891,Testability,test,tests,891,"Hi,. The current dash board does not allows to differentiate tests that fails because they are 'showing' a not yet fixed sofa defect to the one caused by regression (ie tests that were supposed to work but don't anymore). . This is a problem because while introducing new regression failure is a bad thing, introducing new tests that exhibit sofa defect is a positive thing. But they have the same results...turning the dashboard to orange. . I see two consequences:; - when there is test failures because of open-issues we will detect much less easily the regressions tests (that are 'more' important !) ; - people will prevent themselves to push open-issues test to avoid to turn the dash board to a not green status (because they are ashamed...or because they prefer to preserve the readability of the dash board to detect regression). So would it be possible to change that so that each tests with a pattern (lke ""OpenIssue"" in their name are counted separately ?. This would allow to reports two numbers instead of one eg:; regression test failure : 0 ; open issues tests failure: 123 ; And also to let the dashboard green for open issues tests failure. . DM.",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/52
https://github.com/sofa-framework/sofa/issues/52:1040,Testability,test,test,1040,"Hi,. The current dash board does not allows to differentiate tests that fails because they are 'showing' a not yet fixed sofa defect to the one caused by regression (ie tests that were supposed to work but don't anymore). . This is a problem because while introducing new regression failure is a bad thing, introducing new tests that exhibit sofa defect is a positive thing. But they have the same results...turning the dashboard to orange. . I see two consequences:; - when there is test failures because of open-issues we will detect much less easily the regressions tests (that are 'more' important !) ; - people will prevent themselves to push open-issues test to avoid to turn the dash board to a not green status (because they are ashamed...or because they prefer to preserve the readability of the dash board to detect regression). So would it be possible to change that so that each tests with a pattern (lke ""OpenIssue"" in their name are counted separately ?. This would allow to reports two numbers instead of one eg:; regression test failure : 0 ; open issues tests failure: 123 ; And also to let the dashboard green for open issues tests failure. . DM.",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/52
https://github.com/sofa-framework/sofa/issues/52:1071,Testability,test,tests,1071,"Hi,. The current dash board does not allows to differentiate tests that fails because they are 'showing' a not yet fixed sofa defect to the one caused by regression (ie tests that were supposed to work but don't anymore). . This is a problem because while introducing new regression failure is a bad thing, introducing new tests that exhibit sofa defect is a positive thing. But they have the same results...turning the dashboard to orange. . I see two consequences:; - when there is test failures because of open-issues we will detect much less easily the regressions tests (that are 'more' important !) ; - people will prevent themselves to push open-issues test to avoid to turn the dash board to a not green status (because they are ashamed...or because they prefer to preserve the readability of the dash board to detect regression). So would it be possible to change that so that each tests with a pattern (lke ""OpenIssue"" in their name are counted separately ?. This would allow to reports two numbers instead of one eg:; regression test failure : 0 ; open issues tests failure: 123 ; And also to let the dashboard green for open issues tests failure. . DM.",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/52
https://github.com/sofa-framework/sofa/issues/52:1144,Testability,test,tests,1144,"Hi,. The current dash board does not allows to differentiate tests that fails because they are 'showing' a not yet fixed sofa defect to the one caused by regression (ie tests that were supposed to work but don't anymore). . This is a problem because while introducing new regression failure is a bad thing, introducing new tests that exhibit sofa defect is a positive thing. But they have the same results...turning the dashboard to orange. . I see two consequences:; - when there is test failures because of open-issues we will detect much less easily the regressions tests (that are 'more' important !) ; - people will prevent themselves to push open-issues test to avoid to turn the dash board to a not green status (because they are ashamed...or because they prefer to preserve the readability of the dash board to detect regression). So would it be possible to change that so that each tests with a pattern (lke ""OpenIssue"" in their name are counted separately ?. This would allow to reports two numbers instead of one eg:; regression test failure : 0 ; open issues tests failure: 123 ; And also to let the dashboard green for open issues tests failure. . DM.",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/52
https://github.com/sofa-framework/sofa/issues/54:13,Testability,test,test,13,"Hi all,. One test related to LightManager is failing only on windows eg:; https://github.com/sofa-framework/sofa/commit/6d3e1398363cc617124fd25522193ef20b1b7b1c. The failing scene is rather simple: ; ```xml; <Node name='Root' gravity='0 -9.81 0' time='0' animate='0' >; <Node name='Level 1'>; <MechanicalObject template='Vec3d'/>; <LightManager name='lightmanager'/>; </Node>; </Node>; ```; Any one know why the test on Windows behave differently to to other plateforms ? . DM.",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/54
https://github.com/sofa-framework/sofa/issues/54:412,Testability,test,test,412,"Hi all,. One test related to LightManager is failing only on windows eg:; https://github.com/sofa-framework/sofa/commit/6d3e1398363cc617124fd25522193ef20b1b7b1c. The failing scene is rather simple: ; ```xml; <Node name='Root' gravity='0 -9.81 0' time='0' animate='0' >; <Node name='Level 1'>; <MechanicalObject template='Vec3d'/>; <LightManager name='lightmanager'/>; </Node>; </Node>; ```; Any one know why the test on Windows behave differently to to other plateforms ? . DM.",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/54
https://github.com/sofa-framework/sofa/issues/54:190,Usability,simpl,simple,190,"Hi all,. One test related to LightManager is failing only on windows eg:; https://github.com/sofa-framework/sofa/commit/6d3e1398363cc617124fd25522193ef20b1b7b1c. The failing scene is rather simple: ; ```xml; <Node name='Root' gravity='0 -9.81 0' time='0' animate='0' >; <Node name='Level 1'>; <MechanicalObject template='Vec3d'/>; <LightManager name='lightmanager'/>; </Node>; </Node>; ```; Any one know why the test on Windows behave differently to to other plateforms ? . DM.",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/54
https://github.com/sofa-framework/sofa/pull/55:182,Availability,HeartBeat,HeartBeatEvent,182,"Hi all,. Following the discussion here: ; https://github.com/sofa-framework/sofa/commit/d5241217967853394d103f2f06b2f8359dbde6f9#commitcomment-19827546. This pull-request rename the HeartBeatEvent with one called IdleEvent. ; As HeartBeatEvent was introduced last week I don't expect it will break sofa ; in anyway. . DM.",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/55
https://github.com/sofa-framework/sofa/pull/55:229,Availability,HeartBeat,HeartBeatEvent,229,"Hi all,. Following the discussion here: ; https://github.com/sofa-framework/sofa/commit/d5241217967853394d103f2f06b2f8359dbde6f9#commitcomment-19827546. This pull-request rename the HeartBeatEvent with one called IdleEvent. ; As HeartBeatEvent was introduced last week I don't expect it will break sofa ; in anyway. . DM.",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/55
https://github.com/sofa-framework/sofa/issues/56:1152,Availability,Error,Error,1152,"This issue is connected to the discussion: ; https://github.com/sofa-framework/sofa/commit/aee0d912432d043a792f3b43160417e724b11704. This discussion was continued between I, Mathieu and Guillaume, during our weekly meeting. . Our conclusion were that: ; - in sofa::core the defaultmessagehandler should be the simplest so that people making third party applications out of Sofa are not disturbed by the new formatter. . - runSofa & Test may use the RichStyleFormater . - it would be nice to add more capability of routing the messages (explaination and details in the following). **New features:** ; Currently the _msg_* API has two class of message (Dev and Runtime). Message of class Runtime are supposed to be for ""the users"". Message of class Dev are supposed to be for developers. ; You can send message of class Runtime with _msg_info()_...and message of class Dev with _dmsg info()_. The use of macro was to allows us to totally remove the _dmsg*_ from the sofa official releases (they are totally removed from the binary and thus have a zero cost). ; ; In addition to the classes of message is the 'type' which is among: Advice, Info, Warning, Error, Deprecated, Fatal. To select the type you can use the macro _msg info_, _msg advice, _msg error_, ... or their dmsg_ equivalent. . It was suggested:; - to add one extra class of message for ""Log""; - to add a new MessageHandler that can route precisely the messages depending on the developper's need. ; (eg:; - route all the message to a FileMessageHandler but not the one of type advice); - route all the messages of class Log to a FileMessageHandler as well as the class Runtime&Error). DM",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/56
https://github.com/sofa-framework/sofa/issues/56:1640,Availability,Error,Error,1640,"This issue is connected to the discussion: ; https://github.com/sofa-framework/sofa/commit/aee0d912432d043a792f3b43160417e724b11704. This discussion was continued between I, Mathieu and Guillaume, during our weekly meeting. . Our conclusion were that: ; - in sofa::core the defaultmessagehandler should be the simplest so that people making third party applications out of Sofa are not disturbed by the new formatter. . - runSofa & Test may use the RichStyleFormater . - it would be nice to add more capability of routing the messages (explaination and details in the following). **New features:** ; Currently the _msg_* API has two class of message (Dev and Runtime). Message of class Runtime are supposed to be for ""the users"". Message of class Dev are supposed to be for developers. ; You can send message of class Runtime with _msg_info()_...and message of class Dev with _dmsg info()_. The use of macro was to allows us to totally remove the _dmsg*_ from the sofa official releases (they are totally removed from the binary and thus have a zero cost). ; ; In addition to the classes of message is the 'type' which is among: Advice, Info, Warning, Error, Deprecated, Fatal. To select the type you can use the macro _msg info_, _msg advice, _msg error_, ... or their dmsg_ equivalent. . It was suggested:; - to add one extra class of message for ""Log""; - to add a new MessageHandler that can route precisely the messages depending on the developper's need. ; (eg:; - route all the message to a FileMessageHandler but not the one of type advice); - route all the messages of class Log to a FileMessageHandler as well as the class Runtime&Error). DM",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/56
https://github.com/sofa-framework/sofa/issues/56:978,Deployability,release,releases,978,"This issue is connected to the discussion: ; https://github.com/sofa-framework/sofa/commit/aee0d912432d043a792f3b43160417e724b11704. This discussion was continued between I, Mathieu and Guillaume, during our weekly meeting. . Our conclusion were that: ; - in sofa::core the defaultmessagehandler should be the simplest so that people making third party applications out of Sofa are not disturbed by the new formatter. . - runSofa & Test may use the RichStyleFormater . - it would be nice to add more capability of routing the messages (explaination and details in the following). **New features:** ; Currently the _msg_* API has two class of message (Dev and Runtime). Message of class Runtime are supposed to be for ""the users"". Message of class Dev are supposed to be for developers. ; You can send message of class Runtime with _msg_info()_...and message of class Dev with _dmsg info()_. The use of macro was to allows us to totally remove the _dmsg*_ from the sofa official releases (they are totally removed from the binary and thus have a zero cost). ; ; In addition to the classes of message is the 'type' which is among: Advice, Info, Warning, Error, Deprecated, Fatal. To select the type you can use the macro _msg info_, _msg advice, _msg error_, ... or their dmsg_ equivalent. . It was suggested:; - to add one extra class of message for ""Log""; - to add a new MessageHandler that can route precisely the messages depending on the developper's need. ; (eg:; - route all the message to a FileMessageHandler but not the one of type advice); - route all the messages of class Log to a FileMessageHandler as well as the class Runtime&Error). DM",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/56
https://github.com/sofa-framework/sofa/issues/56:514,Integrability,rout,routing,514,"This issue is connected to the discussion: ; https://github.com/sofa-framework/sofa/commit/aee0d912432d043a792f3b43160417e724b11704. This discussion was continued between I, Mathieu and Guillaume, during our weekly meeting. . Our conclusion were that: ; - in sofa::core the defaultmessagehandler should be the simplest so that people making third party applications out of Sofa are not disturbed by the new formatter. . - runSofa & Test may use the RichStyleFormater . - it would be nice to add more capability of routing the messages (explaination and details in the following). **New features:** ; Currently the _msg_* API has two class of message (Dev and Runtime). Message of class Runtime are supposed to be for ""the users"". Message of class Dev are supposed to be for developers. ; You can send message of class Runtime with _msg_info()_...and message of class Dev with _dmsg info()_. The use of macro was to allows us to totally remove the _dmsg*_ from the sofa official releases (they are totally removed from the binary and thus have a zero cost). ; ; In addition to the classes of message is the 'type' which is among: Advice, Info, Warning, Error, Deprecated, Fatal. To select the type you can use the macro _msg info_, _msg advice, _msg error_, ... or their dmsg_ equivalent. . It was suggested:; - to add one extra class of message for ""Log""; - to add a new MessageHandler that can route precisely the messages depending on the developper's need. ; (eg:; - route all the message to a FileMessageHandler but not the one of type advice); - route all the messages of class Log to a FileMessageHandler as well as the class Runtime&Error). DM",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/56
https://github.com/sofa-framework/sofa/issues/56:526,Integrability,message,messages,526,"This issue is connected to the discussion: ; https://github.com/sofa-framework/sofa/commit/aee0d912432d043a792f3b43160417e724b11704. This discussion was continued between I, Mathieu and Guillaume, during our weekly meeting. . Our conclusion were that: ; - in sofa::core the defaultmessagehandler should be the simplest so that people making third party applications out of Sofa are not disturbed by the new formatter. . - runSofa & Test may use the RichStyleFormater . - it would be nice to add more capability of routing the messages (explaination and details in the following). **New features:** ; Currently the _msg_* API has two class of message (Dev and Runtime). Message of class Runtime are supposed to be for ""the users"". Message of class Dev are supposed to be for developers. ; You can send message of class Runtime with _msg_info()_...and message of class Dev with _dmsg info()_. The use of macro was to allows us to totally remove the _dmsg*_ from the sofa official releases (they are totally removed from the binary and thus have a zero cost). ; ; In addition to the classes of message is the 'type' which is among: Advice, Info, Warning, Error, Deprecated, Fatal. To select the type you can use the macro _msg info_, _msg advice, _msg error_, ... or their dmsg_ equivalent. . It was suggested:; - to add one extra class of message for ""Log""; - to add a new MessageHandler that can route precisely the messages depending on the developper's need. ; (eg:; - route all the message to a FileMessageHandler but not the one of type advice); - route all the messages of class Log to a FileMessageHandler as well as the class Runtime&Error). DM",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/56
https://github.com/sofa-framework/sofa/issues/56:642,Integrability,message,message,642,"This issue is connected to the discussion: ; https://github.com/sofa-framework/sofa/commit/aee0d912432d043a792f3b43160417e724b11704. This discussion was continued between I, Mathieu and Guillaume, during our weekly meeting. . Our conclusion were that: ; - in sofa::core the defaultmessagehandler should be the simplest so that people making third party applications out of Sofa are not disturbed by the new formatter. . - runSofa & Test may use the RichStyleFormater . - it would be nice to add more capability of routing the messages (explaination and details in the following). **New features:** ; Currently the _msg_* API has two class of message (Dev and Runtime). Message of class Runtime are supposed to be for ""the users"". Message of class Dev are supposed to be for developers. ; You can send message of class Runtime with _msg_info()_...and message of class Dev with _dmsg info()_. The use of macro was to allows us to totally remove the _dmsg*_ from the sofa official releases (they are totally removed from the binary and thus have a zero cost). ; ; In addition to the classes of message is the 'type' which is among: Advice, Info, Warning, Error, Deprecated, Fatal. To select the type you can use the macro _msg info_, _msg advice, _msg error_, ... or their dmsg_ equivalent. . It was suggested:; - to add one extra class of message for ""Log""; - to add a new MessageHandler that can route precisely the messages depending on the developper's need. ; (eg:; - route all the message to a FileMessageHandler but not the one of type advice); - route all the messages of class Log to a FileMessageHandler as well as the class Runtime&Error). DM",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/56
https://github.com/sofa-framework/sofa/issues/56:669,Integrability,Message,Message,669,"This issue is connected to the discussion: ; https://github.com/sofa-framework/sofa/commit/aee0d912432d043a792f3b43160417e724b11704. This discussion was continued between I, Mathieu and Guillaume, during our weekly meeting. . Our conclusion were that: ; - in sofa::core the defaultmessagehandler should be the simplest so that people making third party applications out of Sofa are not disturbed by the new formatter. . - runSofa & Test may use the RichStyleFormater . - it would be nice to add more capability of routing the messages (explaination and details in the following). **New features:** ; Currently the _msg_* API has two class of message (Dev and Runtime). Message of class Runtime are supposed to be for ""the users"". Message of class Dev are supposed to be for developers. ; You can send message of class Runtime with _msg_info()_...and message of class Dev with _dmsg info()_. The use of macro was to allows us to totally remove the _dmsg*_ from the sofa official releases (they are totally removed from the binary and thus have a zero cost). ; ; In addition to the classes of message is the 'type' which is among: Advice, Info, Warning, Error, Deprecated, Fatal. To select the type you can use the macro _msg info_, _msg advice, _msg error_, ... or their dmsg_ equivalent. . It was suggested:; - to add one extra class of message for ""Log""; - to add a new MessageHandler that can route precisely the messages depending on the developper's need. ; (eg:; - route all the message to a FileMessageHandler but not the one of type advice); - route all the messages of class Log to a FileMessageHandler as well as the class Runtime&Error). DM",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/56
https://github.com/sofa-framework/sofa/issues/56:730,Integrability,Message,Message,730,"This issue is connected to the discussion: ; https://github.com/sofa-framework/sofa/commit/aee0d912432d043a792f3b43160417e724b11704. This discussion was continued between I, Mathieu and Guillaume, during our weekly meeting. . Our conclusion were that: ; - in sofa::core the defaultmessagehandler should be the simplest so that people making third party applications out of Sofa are not disturbed by the new formatter. . - runSofa & Test may use the RichStyleFormater . - it would be nice to add more capability of routing the messages (explaination and details in the following). **New features:** ; Currently the _msg_* API has two class of message (Dev and Runtime). Message of class Runtime are supposed to be for ""the users"". Message of class Dev are supposed to be for developers. ; You can send message of class Runtime with _msg_info()_...and message of class Dev with _dmsg info()_. The use of macro was to allows us to totally remove the _dmsg*_ from the sofa official releases (they are totally removed from the binary and thus have a zero cost). ; ; In addition to the classes of message is the 'type' which is among: Advice, Info, Warning, Error, Deprecated, Fatal. To select the type you can use the macro _msg info_, _msg advice, _msg error_, ... or their dmsg_ equivalent. . It was suggested:; - to add one extra class of message for ""Log""; - to add a new MessageHandler that can route precisely the messages depending on the developper's need. ; (eg:; - route all the message to a FileMessageHandler but not the one of type advice); - route all the messages of class Log to a FileMessageHandler as well as the class Runtime&Error). DM",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/56
https://github.com/sofa-framework/sofa/issues/56:801,Integrability,message,message,801,"This issue is connected to the discussion: ; https://github.com/sofa-framework/sofa/commit/aee0d912432d043a792f3b43160417e724b11704. This discussion was continued between I, Mathieu and Guillaume, during our weekly meeting. . Our conclusion were that: ; - in sofa::core the defaultmessagehandler should be the simplest so that people making third party applications out of Sofa are not disturbed by the new formatter. . - runSofa & Test may use the RichStyleFormater . - it would be nice to add more capability of routing the messages (explaination and details in the following). **New features:** ; Currently the _msg_* API has two class of message (Dev and Runtime). Message of class Runtime are supposed to be for ""the users"". Message of class Dev are supposed to be for developers. ; You can send message of class Runtime with _msg_info()_...and message of class Dev with _dmsg info()_. The use of macro was to allows us to totally remove the _dmsg*_ from the sofa official releases (they are totally removed from the binary and thus have a zero cost). ; ; In addition to the classes of message is the 'type' which is among: Advice, Info, Warning, Error, Deprecated, Fatal. To select the type you can use the macro _msg info_, _msg advice, _msg error_, ... or their dmsg_ equivalent. . It was suggested:; - to add one extra class of message for ""Log""; - to add a new MessageHandler that can route precisely the messages depending on the developper's need. ; (eg:; - route all the message to a FileMessageHandler but not the one of type advice); - route all the messages of class Log to a FileMessageHandler as well as the class Runtime&Error). DM",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/56
https://github.com/sofa-framework/sofa/issues/56:850,Integrability,message,message,850,"This issue is connected to the discussion: ; https://github.com/sofa-framework/sofa/commit/aee0d912432d043a792f3b43160417e724b11704. This discussion was continued between I, Mathieu and Guillaume, during our weekly meeting. . Our conclusion were that: ; - in sofa::core the defaultmessagehandler should be the simplest so that people making third party applications out of Sofa are not disturbed by the new formatter. . - runSofa & Test may use the RichStyleFormater . - it would be nice to add more capability of routing the messages (explaination and details in the following). **New features:** ; Currently the _msg_* API has two class of message (Dev and Runtime). Message of class Runtime are supposed to be for ""the users"". Message of class Dev are supposed to be for developers. ; You can send message of class Runtime with _msg_info()_...and message of class Dev with _dmsg info()_. The use of macro was to allows us to totally remove the _dmsg*_ from the sofa official releases (they are totally removed from the binary and thus have a zero cost). ; ; In addition to the classes of message is the 'type' which is among: Advice, Info, Warning, Error, Deprecated, Fatal. To select the type you can use the macro _msg info_, _msg advice, _msg error_, ... or their dmsg_ equivalent. . It was suggested:; - to add one extra class of message for ""Log""; - to add a new MessageHandler that can route precisely the messages depending on the developper's need. ; (eg:; - route all the message to a FileMessageHandler but not the one of type advice); - route all the messages of class Log to a FileMessageHandler as well as the class Runtime&Error). DM",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/56
https://github.com/sofa-framework/sofa/issues/56:1091,Integrability,message,message,1091,"This issue is connected to the discussion: ; https://github.com/sofa-framework/sofa/commit/aee0d912432d043a792f3b43160417e724b11704. This discussion was continued between I, Mathieu and Guillaume, during our weekly meeting. . Our conclusion were that: ; - in sofa::core the defaultmessagehandler should be the simplest so that people making third party applications out of Sofa are not disturbed by the new formatter. . - runSofa & Test may use the RichStyleFormater . - it would be nice to add more capability of routing the messages (explaination and details in the following). **New features:** ; Currently the _msg_* API has two class of message (Dev and Runtime). Message of class Runtime are supposed to be for ""the users"". Message of class Dev are supposed to be for developers. ; You can send message of class Runtime with _msg_info()_...and message of class Dev with _dmsg info()_. The use of macro was to allows us to totally remove the _dmsg*_ from the sofa official releases (they are totally removed from the binary and thus have a zero cost). ; ; In addition to the classes of message is the 'type' which is among: Advice, Info, Warning, Error, Deprecated, Fatal. To select the type you can use the macro _msg info_, _msg advice, _msg error_, ... or their dmsg_ equivalent. . It was suggested:; - to add one extra class of message for ""Log""; - to add a new MessageHandler that can route precisely the messages depending on the developper's need. ; (eg:; - route all the message to a FileMessageHandler but not the one of type advice); - route all the messages of class Log to a FileMessageHandler as well as the class Runtime&Error). DM",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/56
https://github.com/sofa-framework/sofa/issues/56:1337,Integrability,message,message,1337,"This issue is connected to the discussion: ; https://github.com/sofa-framework/sofa/commit/aee0d912432d043a792f3b43160417e724b11704. This discussion was continued between I, Mathieu and Guillaume, during our weekly meeting. . Our conclusion were that: ; - in sofa::core the defaultmessagehandler should be the simplest so that people making third party applications out of Sofa are not disturbed by the new formatter. . - runSofa & Test may use the RichStyleFormater . - it would be nice to add more capability of routing the messages (explaination and details in the following). **New features:** ; Currently the _msg_* API has two class of message (Dev and Runtime). Message of class Runtime are supposed to be for ""the users"". Message of class Dev are supposed to be for developers. ; You can send message of class Runtime with _msg_info()_...and message of class Dev with _dmsg info()_. The use of macro was to allows us to totally remove the _dmsg*_ from the sofa official releases (they are totally removed from the binary and thus have a zero cost). ; ; In addition to the classes of message is the 'type' which is among: Advice, Info, Warning, Error, Deprecated, Fatal. To select the type you can use the macro _msg info_, _msg advice, _msg error_, ... or their dmsg_ equivalent. . It was suggested:; - to add one extra class of message for ""Log""; - to add a new MessageHandler that can route precisely the messages depending on the developper's need. ; (eg:; - route all the message to a FileMessageHandler but not the one of type advice); - route all the messages of class Log to a FileMessageHandler as well as the class Runtime&Error). DM",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/56
https://github.com/sofa-framework/sofa/issues/56:1371,Integrability,Message,MessageHandler,1371,"This issue is connected to the discussion: ; https://github.com/sofa-framework/sofa/commit/aee0d912432d043a792f3b43160417e724b11704. This discussion was continued between I, Mathieu and Guillaume, during our weekly meeting. . Our conclusion were that: ; - in sofa::core the defaultmessagehandler should be the simplest so that people making third party applications out of Sofa are not disturbed by the new formatter. . - runSofa & Test may use the RichStyleFormater . - it would be nice to add more capability of routing the messages (explaination and details in the following). **New features:** ; Currently the _msg_* API has two class of message (Dev and Runtime). Message of class Runtime are supposed to be for ""the users"". Message of class Dev are supposed to be for developers. ; You can send message of class Runtime with _msg_info()_...and message of class Dev with _dmsg info()_. The use of macro was to allows us to totally remove the _dmsg*_ from the sofa official releases (they are totally removed from the binary and thus have a zero cost). ; ; In addition to the classes of message is the 'type' which is among: Advice, Info, Warning, Error, Deprecated, Fatal. To select the type you can use the macro _msg info_, _msg advice, _msg error_, ... or their dmsg_ equivalent. . It was suggested:; - to add one extra class of message for ""Log""; - to add a new MessageHandler that can route precisely the messages depending on the developper's need. ; (eg:; - route all the message to a FileMessageHandler but not the one of type advice); - route all the messages of class Log to a FileMessageHandler as well as the class Runtime&Error). DM",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/56
https://github.com/sofa-framework/sofa/issues/56:1395,Integrability,rout,route,1395,"This issue is connected to the discussion: ; https://github.com/sofa-framework/sofa/commit/aee0d912432d043a792f3b43160417e724b11704. This discussion was continued between I, Mathieu and Guillaume, during our weekly meeting. . Our conclusion were that: ; - in sofa::core the defaultmessagehandler should be the simplest so that people making third party applications out of Sofa are not disturbed by the new formatter. . - runSofa & Test may use the RichStyleFormater . - it would be nice to add more capability of routing the messages (explaination and details in the following). **New features:** ; Currently the _msg_* API has two class of message (Dev and Runtime). Message of class Runtime are supposed to be for ""the users"". Message of class Dev are supposed to be for developers. ; You can send message of class Runtime with _msg_info()_...and message of class Dev with _dmsg info()_. The use of macro was to allows us to totally remove the _dmsg*_ from the sofa official releases (they are totally removed from the binary and thus have a zero cost). ; ; In addition to the classes of message is the 'type' which is among: Advice, Info, Warning, Error, Deprecated, Fatal. To select the type you can use the macro _msg info_, _msg advice, _msg error_, ... or their dmsg_ equivalent. . It was suggested:; - to add one extra class of message for ""Log""; - to add a new MessageHandler that can route precisely the messages depending on the developper's need. ; (eg:; - route all the message to a FileMessageHandler but not the one of type advice); - route all the messages of class Log to a FileMessageHandler as well as the class Runtime&Error). DM",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/56
https://github.com/sofa-framework/sofa/issues/56:1415,Integrability,message,messages,1415,"This issue is connected to the discussion: ; https://github.com/sofa-framework/sofa/commit/aee0d912432d043a792f3b43160417e724b11704. This discussion was continued between I, Mathieu and Guillaume, during our weekly meeting. . Our conclusion were that: ; - in sofa::core the defaultmessagehandler should be the simplest so that people making third party applications out of Sofa are not disturbed by the new formatter. . - runSofa & Test may use the RichStyleFormater . - it would be nice to add more capability of routing the messages (explaination and details in the following). **New features:** ; Currently the _msg_* API has two class of message (Dev and Runtime). Message of class Runtime are supposed to be for ""the users"". Message of class Dev are supposed to be for developers. ; You can send message of class Runtime with _msg_info()_...and message of class Dev with _dmsg info()_. The use of macro was to allows us to totally remove the _dmsg*_ from the sofa official releases (they are totally removed from the binary and thus have a zero cost). ; ; In addition to the classes of message is the 'type' which is among: Advice, Info, Warning, Error, Deprecated, Fatal. To select the type you can use the macro _msg info_, _msg advice, _msg error_, ... or their dmsg_ equivalent. . It was suggested:; - to add one extra class of message for ""Log""; - to add a new MessageHandler that can route precisely the messages depending on the developper's need. ; (eg:; - route all the message to a FileMessageHandler but not the one of type advice); - route all the messages of class Log to a FileMessageHandler as well as the class Runtime&Error). DM",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/56
https://github.com/sofa-framework/sofa/issues/56:1424,Integrability,depend,depending,1424,"This issue is connected to the discussion: ; https://github.com/sofa-framework/sofa/commit/aee0d912432d043a792f3b43160417e724b11704. This discussion was continued between I, Mathieu and Guillaume, during our weekly meeting. . Our conclusion were that: ; - in sofa::core the defaultmessagehandler should be the simplest so that people making third party applications out of Sofa are not disturbed by the new formatter. . - runSofa & Test may use the RichStyleFormater . - it would be nice to add more capability of routing the messages (explaination and details in the following). **New features:** ; Currently the _msg_* API has two class of message (Dev and Runtime). Message of class Runtime are supposed to be for ""the users"". Message of class Dev are supposed to be for developers. ; You can send message of class Runtime with _msg_info()_...and message of class Dev with _dmsg info()_. The use of macro was to allows us to totally remove the _dmsg*_ from the sofa official releases (they are totally removed from the binary and thus have a zero cost). ; ; In addition to the classes of message is the 'type' which is among: Advice, Info, Warning, Error, Deprecated, Fatal. To select the type you can use the macro _msg info_, _msg advice, _msg error_, ... or their dmsg_ equivalent. . It was suggested:; - to add one extra class of message for ""Log""; - to add a new MessageHandler that can route precisely the messages depending on the developper's need. ; (eg:; - route all the message to a FileMessageHandler but not the one of type advice); - route all the messages of class Log to a FileMessageHandler as well as the class Runtime&Error). DM",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/56
https://github.com/sofa-framework/sofa/issues/56:1470,Integrability,rout,route,1470,"This issue is connected to the discussion: ; https://github.com/sofa-framework/sofa/commit/aee0d912432d043a792f3b43160417e724b11704. This discussion was continued between I, Mathieu and Guillaume, during our weekly meeting. . Our conclusion were that: ; - in sofa::core the defaultmessagehandler should be the simplest so that people making third party applications out of Sofa are not disturbed by the new formatter. . - runSofa & Test may use the RichStyleFormater . - it would be nice to add more capability of routing the messages (explaination and details in the following). **New features:** ; Currently the _msg_* API has two class of message (Dev and Runtime). Message of class Runtime are supposed to be for ""the users"". Message of class Dev are supposed to be for developers. ; You can send message of class Runtime with _msg_info()_...and message of class Dev with _dmsg info()_. The use of macro was to allows us to totally remove the _dmsg*_ from the sofa official releases (they are totally removed from the binary and thus have a zero cost). ; ; In addition to the classes of message is the 'type' which is among: Advice, Info, Warning, Error, Deprecated, Fatal. To select the type you can use the macro _msg info_, _msg advice, _msg error_, ... or their dmsg_ equivalent. . It was suggested:; - to add one extra class of message for ""Log""; - to add a new MessageHandler that can route precisely the messages depending on the developper's need. ; (eg:; - route all the message to a FileMessageHandler but not the one of type advice); - route all the messages of class Log to a FileMessageHandler as well as the class Runtime&Error). DM",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/56
https://github.com/sofa-framework/sofa/issues/56:1484,Integrability,message,message,1484,"This issue is connected to the discussion: ; https://github.com/sofa-framework/sofa/commit/aee0d912432d043a792f3b43160417e724b11704. This discussion was continued between I, Mathieu and Guillaume, during our weekly meeting. . Our conclusion were that: ; - in sofa::core the defaultmessagehandler should be the simplest so that people making third party applications out of Sofa are not disturbed by the new formatter. . - runSofa & Test may use the RichStyleFormater . - it would be nice to add more capability of routing the messages (explaination and details in the following). **New features:** ; Currently the _msg_* API has two class of message (Dev and Runtime). Message of class Runtime are supposed to be for ""the users"". Message of class Dev are supposed to be for developers. ; You can send message of class Runtime with _msg_info()_...and message of class Dev with _dmsg info()_. The use of macro was to allows us to totally remove the _dmsg*_ from the sofa official releases (they are totally removed from the binary and thus have a zero cost). ; ; In addition to the classes of message is the 'type' which is among: Advice, Info, Warning, Error, Deprecated, Fatal. To select the type you can use the macro _msg info_, _msg advice, _msg error_, ... or their dmsg_ equivalent. . It was suggested:; - to add one extra class of message for ""Log""; - to add a new MessageHandler that can route precisely the messages depending on the developper's need. ; (eg:; - route all the message to a FileMessageHandler but not the one of type advice); - route all the messages of class Log to a FileMessageHandler as well as the class Runtime&Error). DM",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/56
https://github.com/sofa-framework/sofa/issues/56:1551,Integrability,rout,route,1551,"This issue is connected to the discussion: ; https://github.com/sofa-framework/sofa/commit/aee0d912432d043a792f3b43160417e724b11704. This discussion was continued between I, Mathieu and Guillaume, during our weekly meeting. . Our conclusion were that: ; - in sofa::core the defaultmessagehandler should be the simplest so that people making third party applications out of Sofa are not disturbed by the new formatter. . - runSofa & Test may use the RichStyleFormater . - it would be nice to add more capability of routing the messages (explaination and details in the following). **New features:** ; Currently the _msg_* API has two class of message (Dev and Runtime). Message of class Runtime are supposed to be for ""the users"". Message of class Dev are supposed to be for developers. ; You can send message of class Runtime with _msg_info()_...and message of class Dev with _dmsg info()_. The use of macro was to allows us to totally remove the _dmsg*_ from the sofa official releases (they are totally removed from the binary and thus have a zero cost). ; ; In addition to the classes of message is the 'type' which is among: Advice, Info, Warning, Error, Deprecated, Fatal. To select the type you can use the macro _msg info_, _msg advice, _msg error_, ... or their dmsg_ equivalent. . It was suggested:; - to add one extra class of message for ""Log""; - to add a new MessageHandler that can route precisely the messages depending on the developper's need. ; (eg:; - route all the message to a FileMessageHandler but not the one of type advice); - route all the messages of class Log to a FileMessageHandler as well as the class Runtime&Error). DM",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/56
https://github.com/sofa-framework/sofa/issues/56:1565,Integrability,message,messages,1565,"This issue is connected to the discussion: ; https://github.com/sofa-framework/sofa/commit/aee0d912432d043a792f3b43160417e724b11704. This discussion was continued between I, Mathieu and Guillaume, during our weekly meeting. . Our conclusion were that: ; - in sofa::core the defaultmessagehandler should be the simplest so that people making third party applications out of Sofa are not disturbed by the new formatter. . - runSofa & Test may use the RichStyleFormater . - it would be nice to add more capability of routing the messages (explaination and details in the following). **New features:** ; Currently the _msg_* API has two class of message (Dev and Runtime). Message of class Runtime are supposed to be for ""the users"". Message of class Dev are supposed to be for developers. ; You can send message of class Runtime with _msg_info()_...and message of class Dev with _dmsg info()_. The use of macro was to allows us to totally remove the _dmsg*_ from the sofa official releases (they are totally removed from the binary and thus have a zero cost). ; ; In addition to the classes of message is the 'type' which is among: Advice, Info, Warning, Error, Deprecated, Fatal. To select the type you can use the macro _msg info_, _msg advice, _msg error_, ... or their dmsg_ equivalent. . It was suggested:; - to add one extra class of message for ""Log""; - to add a new MessageHandler that can route precisely the messages depending on the developper's need. ; (eg:; - route all the message to a FileMessageHandler but not the one of type advice); - route all the messages of class Log to a FileMessageHandler as well as the class Runtime&Error). DM",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/56
https://github.com/sofa-framework/sofa/issues/56:432,Testability,Test,Test,432,"This issue is connected to the discussion: ; https://github.com/sofa-framework/sofa/commit/aee0d912432d043a792f3b43160417e724b11704. This discussion was continued between I, Mathieu and Guillaume, during our weekly meeting. . Our conclusion were that: ; - in sofa::core the defaultmessagehandler should be the simplest so that people making third party applications out of Sofa are not disturbed by the new formatter. . - runSofa & Test may use the RichStyleFormater . - it would be nice to add more capability of routing the messages (explaination and details in the following). **New features:** ; Currently the _msg_* API has two class of message (Dev and Runtime). Message of class Runtime are supposed to be for ""the users"". Message of class Dev are supposed to be for developers. ; You can send message of class Runtime with _msg_info()_...and message of class Dev with _dmsg info()_. The use of macro was to allows us to totally remove the _dmsg*_ from the sofa official releases (they are totally removed from the binary and thus have a zero cost). ; ; In addition to the classes of message is the 'type' which is among: Advice, Info, Warning, Error, Deprecated, Fatal. To select the type you can use the macro _msg info_, _msg advice, _msg error_, ... or their dmsg_ equivalent. . It was suggested:; - to add one extra class of message for ""Log""; - to add a new MessageHandler that can route precisely the messages depending on the developper's need. ; (eg:; - route all the message to a FileMessageHandler but not the one of type advice); - route all the messages of class Log to a FileMessageHandler as well as the class Runtime&Error). DM",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/56
https://github.com/sofa-framework/sofa/issues/56:1350,Testability,Log,Log,1350,"This issue is connected to the discussion: ; https://github.com/sofa-framework/sofa/commit/aee0d912432d043a792f3b43160417e724b11704. This discussion was continued between I, Mathieu and Guillaume, during our weekly meeting. . Our conclusion were that: ; - in sofa::core the defaultmessagehandler should be the simplest so that people making third party applications out of Sofa are not disturbed by the new formatter. . - runSofa & Test may use the RichStyleFormater . - it would be nice to add more capability of routing the messages (explaination and details in the following). **New features:** ; Currently the _msg_* API has two class of message (Dev and Runtime). Message of class Runtime are supposed to be for ""the users"". Message of class Dev are supposed to be for developers. ; You can send message of class Runtime with _msg_info()_...and message of class Dev with _dmsg info()_. The use of macro was to allows us to totally remove the _dmsg*_ from the sofa official releases (they are totally removed from the binary and thus have a zero cost). ; ; In addition to the classes of message is the 'type' which is among: Advice, Info, Warning, Error, Deprecated, Fatal. To select the type you can use the macro _msg info_, _msg advice, _msg error_, ... or their dmsg_ equivalent. . It was suggested:; - to add one extra class of message for ""Log""; - to add a new MessageHandler that can route precisely the messages depending on the developper's need. ; (eg:; - route all the message to a FileMessageHandler but not the one of type advice); - route all the messages of class Log to a FileMessageHandler as well as the class Runtime&Error). DM",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/56
https://github.com/sofa-framework/sofa/issues/56:1583,Testability,Log,Log,1583,"This issue is connected to the discussion: ; https://github.com/sofa-framework/sofa/commit/aee0d912432d043a792f3b43160417e724b11704. This discussion was continued between I, Mathieu and Guillaume, during our weekly meeting. . Our conclusion were that: ; - in sofa::core the defaultmessagehandler should be the simplest so that people making third party applications out of Sofa are not disturbed by the new formatter. . - runSofa & Test may use the RichStyleFormater . - it would be nice to add more capability of routing the messages (explaination and details in the following). **New features:** ; Currently the _msg_* API has two class of message (Dev and Runtime). Message of class Runtime are supposed to be for ""the users"". Message of class Dev are supposed to be for developers. ; You can send message of class Runtime with _msg_info()_...and message of class Dev with _dmsg info()_. The use of macro was to allows us to totally remove the _dmsg*_ from the sofa official releases (they are totally removed from the binary and thus have a zero cost). ; ; In addition to the classes of message is the 'type' which is among: Advice, Info, Warning, Error, Deprecated, Fatal. To select the type you can use the macro _msg info_, _msg advice, _msg error_, ... or their dmsg_ equivalent. . It was suggested:; - to add one extra class of message for ""Log""; - to add a new MessageHandler that can route precisely the messages depending on the developper's need. ; (eg:; - route all the message to a FileMessageHandler but not the one of type advice); - route all the messages of class Log to a FileMessageHandler as well as the class Runtime&Error). DM",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/56
https://github.com/sofa-framework/sofa/issues/56:310,Usability,simpl,simplest,310,"This issue is connected to the discussion: ; https://github.com/sofa-framework/sofa/commit/aee0d912432d043a792f3b43160417e724b11704. This discussion was continued between I, Mathieu and Guillaume, during our weekly meeting. . Our conclusion were that: ; - in sofa::core the defaultmessagehandler should be the simplest so that people making third party applications out of Sofa are not disturbed by the new formatter. . - runSofa & Test may use the RichStyleFormater . - it would be nice to add more capability of routing the messages (explaination and details in the following). **New features:** ; Currently the _msg_* API has two class of message (Dev and Runtime). Message of class Runtime are supposed to be for ""the users"". Message of class Dev are supposed to be for developers. ; You can send message of class Runtime with _msg_info()_...and message of class Dev with _dmsg info()_. The use of macro was to allows us to totally remove the _dmsg*_ from the sofa official releases (they are totally removed from the binary and thus have a zero cost). ; ; In addition to the classes of message is the 'type' which is among: Advice, Info, Warning, Error, Deprecated, Fatal. To select the type you can use the macro _msg info_, _msg advice, _msg error_, ... or their dmsg_ equivalent. . It was suggested:; - to add one extra class of message for ""Log""; - to add a new MessageHandler that can route precisely the messages depending on the developper's need. ; (eg:; - route all the message to a FileMessageHandler but not the one of type advice); - route all the messages of class Log to a FileMessageHandler as well as the class Runtime&Error). DM",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/56
https://github.com/sofa-framework/sofa/pull/57:310,Deployability,install,install,310,"Implement the improvement discussed in; https://github.com/sofa-framework/sofa/issues/56. This request contains: ; A new message class have been added for logging (in addition to Dev & Runtime).; A new RoutingMessageHandler.; A new test to validate the basic behavior of RoutingMessageHandler. Eg of use... to install a filter that will only send the; Runtime message of type Warning to a File you can do something like:; ```cpp; RoutingMessageHandler* m = new RoutingMessageHandler();; FileMessageHandler* toAFile = new FileMessageHandler(""the file""). /// Yes this is using c++ lambda syntax; m->setAFilter( [](Message& m); {; if(m.context() == Message::Runtime && m.type() == Message::Warning); return true ;; return false ;; }, toAFile );; ```",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/57
https://github.com/sofa-framework/sofa/pull/57:121,Integrability,message,message,121,"Implement the improvement discussed in; https://github.com/sofa-framework/sofa/issues/56. This request contains: ; A new message class have been added for logging (in addition to Dev & Runtime).; A new RoutingMessageHandler.; A new test to validate the basic behavior of RoutingMessageHandler. Eg of use... to install a filter that will only send the; Runtime message of type Warning to a File you can do something like:; ```cpp; RoutingMessageHandler* m = new RoutingMessageHandler();; FileMessageHandler* toAFile = new FileMessageHandler(""the file""). /// Yes this is using c++ lambda syntax; m->setAFilter( [](Message& m); {; if(m.context() == Message::Runtime && m.type() == Message::Warning); return true ;; return false ;; }, toAFile );; ```",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/57
https://github.com/sofa-framework/sofa/pull/57:202,Integrability,Rout,RoutingMessageHandler,202,"Implement the improvement discussed in; https://github.com/sofa-framework/sofa/issues/56. This request contains: ; A new message class have been added for logging (in addition to Dev & Runtime).; A new RoutingMessageHandler.; A new test to validate the basic behavior of RoutingMessageHandler. Eg of use... to install a filter that will only send the; Runtime message of type Warning to a File you can do something like:; ```cpp; RoutingMessageHandler* m = new RoutingMessageHandler();; FileMessageHandler* toAFile = new FileMessageHandler(""the file""). /// Yes this is using c++ lambda syntax; m->setAFilter( [](Message& m); {; if(m.context() == Message::Runtime && m.type() == Message::Warning); return true ;; return false ;; }, toAFile );; ```",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/57
https://github.com/sofa-framework/sofa/pull/57:271,Integrability,Rout,RoutingMessageHandler,271,"Implement the improvement discussed in; https://github.com/sofa-framework/sofa/issues/56. This request contains: ; A new message class have been added for logging (in addition to Dev & Runtime).; A new RoutingMessageHandler.; A new test to validate the basic behavior of RoutingMessageHandler. Eg of use... to install a filter that will only send the; Runtime message of type Warning to a File you can do something like:; ```cpp; RoutingMessageHandler* m = new RoutingMessageHandler();; FileMessageHandler* toAFile = new FileMessageHandler(""the file""). /// Yes this is using c++ lambda syntax; m->setAFilter( [](Message& m); {; if(m.context() == Message::Runtime && m.type() == Message::Warning); return true ;; return false ;; }, toAFile );; ```",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/57
https://github.com/sofa-framework/sofa/pull/57:360,Integrability,message,message,360,"Implement the improvement discussed in; https://github.com/sofa-framework/sofa/issues/56. This request contains: ; A new message class have been added for logging (in addition to Dev & Runtime).; A new RoutingMessageHandler.; A new test to validate the basic behavior of RoutingMessageHandler. Eg of use... to install a filter that will only send the; Runtime message of type Warning to a File you can do something like:; ```cpp; RoutingMessageHandler* m = new RoutingMessageHandler();; FileMessageHandler* toAFile = new FileMessageHandler(""the file""). /// Yes this is using c++ lambda syntax; m->setAFilter( [](Message& m); {; if(m.context() == Message::Runtime && m.type() == Message::Warning); return true ;; return false ;; }, toAFile );; ```",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/57
https://github.com/sofa-framework/sofa/pull/57:430,Integrability,Rout,RoutingMessageHandler,430,"Implement the improvement discussed in; https://github.com/sofa-framework/sofa/issues/56. This request contains: ; A new message class have been added for logging (in addition to Dev & Runtime).; A new RoutingMessageHandler.; A new test to validate the basic behavior of RoutingMessageHandler. Eg of use... to install a filter that will only send the; Runtime message of type Warning to a File you can do something like:; ```cpp; RoutingMessageHandler* m = new RoutingMessageHandler();; FileMessageHandler* toAFile = new FileMessageHandler(""the file""). /// Yes this is using c++ lambda syntax; m->setAFilter( [](Message& m); {; if(m.context() == Message::Runtime && m.type() == Message::Warning); return true ;; return false ;; }, toAFile );; ```",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/57
https://github.com/sofa-framework/sofa/pull/57:461,Integrability,Rout,RoutingMessageHandler,461,"Implement the improvement discussed in; https://github.com/sofa-framework/sofa/issues/56. This request contains: ; A new message class have been added for logging (in addition to Dev & Runtime).; A new RoutingMessageHandler.; A new test to validate the basic behavior of RoutingMessageHandler. Eg of use... to install a filter that will only send the; Runtime message of type Warning to a File you can do something like:; ```cpp; RoutingMessageHandler* m = new RoutingMessageHandler();; FileMessageHandler* toAFile = new FileMessageHandler(""the file""). /// Yes this is using c++ lambda syntax; m->setAFilter( [](Message& m); {; if(m.context() == Message::Runtime && m.type() == Message::Warning); return true ;; return false ;; }, toAFile );; ```",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/57
https://github.com/sofa-framework/sofa/pull/57:612,Integrability,Message,Message,612,"Implement the improvement discussed in; https://github.com/sofa-framework/sofa/issues/56. This request contains: ; A new message class have been added for logging (in addition to Dev & Runtime).; A new RoutingMessageHandler.; A new test to validate the basic behavior of RoutingMessageHandler. Eg of use... to install a filter that will only send the; Runtime message of type Warning to a File you can do something like:; ```cpp; RoutingMessageHandler* m = new RoutingMessageHandler();; FileMessageHandler* toAFile = new FileMessageHandler(""the file""). /// Yes this is using c++ lambda syntax; m->setAFilter( [](Message& m); {; if(m.context() == Message::Runtime && m.type() == Message::Warning); return true ;; return false ;; }, toAFile );; ```",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/57
https://github.com/sofa-framework/sofa/pull/57:646,Integrability,Message,Message,646,"Implement the improvement discussed in; https://github.com/sofa-framework/sofa/issues/56. This request contains: ; A new message class have been added for logging (in addition to Dev & Runtime).; A new RoutingMessageHandler.; A new test to validate the basic behavior of RoutingMessageHandler. Eg of use... to install a filter that will only send the; Runtime message of type Warning to a File you can do something like:; ```cpp; RoutingMessageHandler* m = new RoutingMessageHandler();; FileMessageHandler* toAFile = new FileMessageHandler(""the file""). /// Yes this is using c++ lambda syntax; m->setAFilter( [](Message& m); {; if(m.context() == Message::Runtime && m.type() == Message::Warning); return true ;; return false ;; }, toAFile );; ```",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/57
https://github.com/sofa-framework/sofa/pull/57:678,Integrability,Message,Message,678,"Implement the improvement discussed in; https://github.com/sofa-framework/sofa/issues/56. This request contains: ; A new message class have been added for logging (in addition to Dev & Runtime).; A new RoutingMessageHandler.; A new test to validate the basic behavior of RoutingMessageHandler. Eg of use... to install a filter that will only send the; Runtime message of type Warning to a File you can do something like:; ```cpp; RoutingMessageHandler* m = new RoutingMessageHandler();; FileMessageHandler* toAFile = new FileMessageHandler(""the file""). /// Yes this is using c++ lambda syntax; m->setAFilter( [](Message& m); {; if(m.context() == Message::Runtime && m.type() == Message::Warning); return true ;; return false ;; }, toAFile );; ```",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/57
https://github.com/sofa-framework/sofa/pull/57:240,Security,validat,validate,240,"Implement the improvement discussed in; https://github.com/sofa-framework/sofa/issues/56. This request contains: ; A new message class have been added for logging (in addition to Dev & Runtime).; A new RoutingMessageHandler.; A new test to validate the basic behavior of RoutingMessageHandler. Eg of use... to install a filter that will only send the; Runtime message of type Warning to a File you can do something like:; ```cpp; RoutingMessageHandler* m = new RoutingMessageHandler();; FileMessageHandler* toAFile = new FileMessageHandler(""the file""). /// Yes this is using c++ lambda syntax; m->setAFilter( [](Message& m); {; if(m.context() == Message::Runtime && m.type() == Message::Warning); return true ;; return false ;; }, toAFile );; ```",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/57
https://github.com/sofa-framework/sofa/pull/57:155,Testability,log,logging,155,"Implement the improvement discussed in; https://github.com/sofa-framework/sofa/issues/56. This request contains: ; A new message class have been added for logging (in addition to Dev & Runtime).; A new RoutingMessageHandler.; A new test to validate the basic behavior of RoutingMessageHandler. Eg of use... to install a filter that will only send the; Runtime message of type Warning to a File you can do something like:; ```cpp; RoutingMessageHandler* m = new RoutingMessageHandler();; FileMessageHandler* toAFile = new FileMessageHandler(""the file""). /// Yes this is using c++ lambda syntax; m->setAFilter( [](Message& m); {; if(m.context() == Message::Runtime && m.type() == Message::Warning); return true ;; return false ;; }, toAFile );; ```",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/57
https://github.com/sofa-framework/sofa/pull/57:232,Testability,test,test,232,"Implement the improvement discussed in; https://github.com/sofa-framework/sofa/issues/56. This request contains: ; A new message class have been added for logging (in addition to Dev & Runtime).; A new RoutingMessageHandler.; A new test to validate the basic behavior of RoutingMessageHandler. Eg of use... to install a filter that will only send the; Runtime message of type Warning to a File you can do something like:; ```cpp; RoutingMessageHandler* m = new RoutingMessageHandler();; FileMessageHandler* toAFile = new FileMessageHandler(""the file""). /// Yes this is using c++ lambda syntax; m->setAFilter( [](Message& m); {; if(m.context() == Message::Runtime && m.type() == Message::Warning); return true ;; return false ;; }, toAFile );; ```",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/57
https://github.com/sofa-framework/sofa/pull/58:23,Deployability,update,update,23,This Pull-request only update the ChangeLog.md; It should be easy to review :),MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/58
https://github.com/sofa-framework/sofa/pull/60:604,Deployability,update,update,604,"Adding a few utility functionalities to simplify Data tracking. - externalizing Data tracking system outside of DataEngine so it can be use everywhere.; - Data tracking system is now using Data's counter (lighter and more simple).; - adding DataTrackerEngine that is a kind of DataEngine but that is not a component (not a BaseObject). It can easily be added anywhere and can link any Data, such as inside a Component, or even between components. What you can do: (have a look at the tests); - check if a Data changed on a regular rhythm. e.g check at each time step if a stiffness parameters changed to update a Matrix.; - automatically update a Data if its dependencies changed. e.g. young modulus can be set as a dependency of stiffness matrix, so each time you ask for the matrix, if the modulus changed, the matrix will be updated (behavior similar to DataEngine)",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/60
https://github.com/sofa-framework/sofa/pull/60:638,Deployability,update,update,638,"Adding a few utility functionalities to simplify Data tracking. - externalizing Data tracking system outside of DataEngine so it can be use everywhere.; - Data tracking system is now using Data's counter (lighter and more simple).; - adding DataTrackerEngine that is a kind of DataEngine but that is not a component (not a BaseObject). It can easily be added anywhere and can link any Data, such as inside a Component, or even between components. What you can do: (have a look at the tests); - check if a Data changed on a regular rhythm. e.g check at each time step if a stiffness parameters changed to update a Matrix.; - automatically update a Data if its dependencies changed. e.g. young modulus can be set as a dependency of stiffness matrix, so each time you ask for the matrix, if the modulus changed, the matrix will be updated (behavior similar to DataEngine)",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/60
https://github.com/sofa-framework/sofa/pull/60:828,Deployability,update,updated,828,"Adding a few utility functionalities to simplify Data tracking. - externalizing Data tracking system outside of DataEngine so it can be use everywhere.; - Data tracking system is now using Data's counter (lighter and more simple).; - adding DataTrackerEngine that is a kind of DataEngine but that is not a component (not a BaseObject). It can easily be added anywhere and can link any Data, such as inside a Component, or even between components. What you can do: (have a look at the tests); - check if a Data changed on a regular rhythm. e.g check at each time step if a stiffness parameters changed to update a Matrix.; - automatically update a Data if its dependencies changed. e.g. young modulus can be set as a dependency of stiffness matrix, so each time you ask for the matrix, if the modulus changed, the matrix will be updated (behavior similar to DataEngine)",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/60
https://github.com/sofa-framework/sofa/pull/60:659,Integrability,depend,dependencies,659,"Adding a few utility functionalities to simplify Data tracking. - externalizing Data tracking system outside of DataEngine so it can be use everywhere.; - Data tracking system is now using Data's counter (lighter and more simple).; - adding DataTrackerEngine that is a kind of DataEngine but that is not a component (not a BaseObject). It can easily be added anywhere and can link any Data, such as inside a Component, or even between components. What you can do: (have a look at the tests); - check if a Data changed on a regular rhythm. e.g check at each time step if a stiffness parameters changed to update a Matrix.; - automatically update a Data if its dependencies changed. e.g. young modulus can be set as a dependency of stiffness matrix, so each time you ask for the matrix, if the modulus changed, the matrix will be updated (behavior similar to DataEngine)",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/60
https://github.com/sofa-framework/sofa/pull/60:716,Integrability,depend,dependency,716,"Adding a few utility functionalities to simplify Data tracking. - externalizing Data tracking system outside of DataEngine so it can be use everywhere.; - Data tracking system is now using Data's counter (lighter and more simple).; - adding DataTrackerEngine that is a kind of DataEngine but that is not a component (not a BaseObject). It can easily be added anywhere and can link any Data, such as inside a Component, or even between components. What you can do: (have a look at the tests); - check if a Data changed on a regular rhythm. e.g check at each time step if a stiffness parameters changed to update a Matrix.; - automatically update a Data if its dependencies changed. e.g. young modulus can be set as a dependency of stiffness matrix, so each time you ask for the matrix, if the modulus changed, the matrix will be updated (behavior similar to DataEngine)",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/60
https://github.com/sofa-framework/sofa/pull/60:484,Testability,test,tests,484,"Adding a few utility functionalities to simplify Data tracking. - externalizing Data tracking system outside of DataEngine so it can be use everywhere.; - Data tracking system is now using Data's counter (lighter and more simple).; - adding DataTrackerEngine that is a kind of DataEngine but that is not a component (not a BaseObject). It can easily be added anywhere and can link any Data, such as inside a Component, or even between components. What you can do: (have a look at the tests); - check if a Data changed on a regular rhythm. e.g check at each time step if a stiffness parameters changed to update a Matrix.; - automatically update a Data if its dependencies changed. e.g. young modulus can be set as a dependency of stiffness matrix, so each time you ask for the matrix, if the modulus changed, the matrix will be updated (behavior similar to DataEngine)",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/60
https://github.com/sofa-framework/sofa/pull/60:40,Usability,simpl,simplify,40,"Adding a few utility functionalities to simplify Data tracking. - externalizing Data tracking system outside of DataEngine so it can be use everywhere.; - Data tracking system is now using Data's counter (lighter and more simple).; - adding DataTrackerEngine that is a kind of DataEngine but that is not a component (not a BaseObject). It can easily be added anywhere and can link any Data, such as inside a Component, or even between components. What you can do: (have a look at the tests); - check if a Data changed on a regular rhythm. e.g check at each time step if a stiffness parameters changed to update a Matrix.; - automatically update a Data if its dependencies changed. e.g. young modulus can be set as a dependency of stiffness matrix, so each time you ask for the matrix, if the modulus changed, the matrix will be updated (behavior similar to DataEngine)",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/60
https://github.com/sofa-framework/sofa/pull/60:222,Usability,simpl,simple,222,"Adding a few utility functionalities to simplify Data tracking. - externalizing Data tracking system outside of DataEngine so it can be use everywhere.; - Data tracking system is now using Data's counter (lighter and more simple).; - adding DataTrackerEngine that is a kind of DataEngine but that is not a component (not a BaseObject). It can easily be added anywhere and can link any Data, such as inside a Component, or even between components. What you can do: (have a look at the tests); - check if a Data changed on a regular rhythm. e.g check at each time step if a stiffness parameters changed to update a Matrix.; - automatically update a Data if its dependencies changed. e.g. young modulus can be set as a dependency of stiffness matrix, so each time you ask for the matrix, if the modulus changed, the matrix will be updated (behavior similar to DataEngine)",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/60
https://github.com/sofa-framework/sofa/issues/61:298,Deployability,update,update,298,"The tendency would be to alleviate Data, but one important behavior is missing. Do you have suggestions on how to perform a listener/observer mechanism on Data w/o adding extra cost?; The idea is to be able to call a callback as soon as a Data is modified. The main usage is the gui, to be able to update some stuff w/o having to check for modifications of tons of Data at regular intervals.; This has to be done only for a few specific Data, and should not add extra cost on the 99.99% regular use cases. The easiest way to implement such a thing would be to add a list of listeners to every Data.; But it means storing extra stuff in each Data, and checking if listeners are present at each modification of the Data.; Do you see a less intrusive way to implement such mechanism?",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/61
https://github.com/sofa-framework/sofa/issues/61:114,Performance,perform,perform,114,"The tendency would be to alleviate Data, but one important behavior is missing. Do you have suggestions on how to perform a listener/observer mechanism on Data w/o adding extra cost?; The idea is to be able to call a callback as soon as a Data is modified. The main usage is the gui, to be able to update some stuff w/o having to check for modifications of tons of Data at regular intervals.; This has to be done only for a few specific Data, and should not add extra cost on the 99.99% regular use cases. The easiest way to implement such a thing would be to add a list of listeners to every Data.; But it means storing extra stuff in each Data, and checking if listeners are present at each modification of the Data.; Do you see a less intrusive way to implement such mechanism?",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/61
https://github.com/sofa-framework/sofa/pull/63:545,Deployability,update,update,545,"This commit add the ability to edit shader while sofa is running and on-the fly updating the rendering.; This is an improvement on the workflow for anyone that is developing shading code. Some may be concerned about performances issues so here are more details: . The overhead is near zero.; The GLSLListener is triggered by the file FileMonitor.; FileMonitor is using the event based ""select"" system API and is not actively 'polling' the files. AFAIK this is the most efficient way to monitor files.; If the application don't call FileMonitor::update(0) then this cost nothing. Currently only runSofa is calling FileMonitor::update(0) when started with the -i (for interactive) command line option. So the different scenarios are:; your own app.... (no cost); runSofa -i & changing the file (this cost the reload of the shader (few millisecond each change); runSofa -i & not changing the file (this cost calling the select system call); runSofa as usual...this cost nothing.",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/63
https://github.com/sofa-framework/sofa/pull/63:626,Deployability,update,update,626,"This commit add the ability to edit shader while sofa is running and on-the fly updating the rendering.; This is an improvement on the workflow for anyone that is developing shading code. Some may be concerned about performances issues so here are more details: . The overhead is near zero.; The GLSLListener is triggered by the file FileMonitor.; FileMonitor is using the event based ""select"" system API and is not actively 'polling' the files. AFAIK this is the most efficient way to monitor files.; If the application don't call FileMonitor::update(0) then this cost nothing. Currently only runSofa is calling FileMonitor::update(0) when started with the -i (for interactive) command line option. So the different scenarios are:; your own app.... (no cost); runSofa -i & changing the file (this cost the reload of the shader (few millisecond each change); runSofa -i & not changing the file (this cost calling the select system call); runSofa as usual...this cost nothing.",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/63
https://github.com/sofa-framework/sofa/pull/63:469,Energy Efficiency,efficient,efficient,469,"This commit add the ability to edit shader while sofa is running and on-the fly updating the rendering.; This is an improvement on the workflow for anyone that is developing shading code. Some may be concerned about performances issues so here are more details: . The overhead is near zero.; The GLSLListener is triggered by the file FileMonitor.; FileMonitor is using the event based ""select"" system API and is not actively 'polling' the files. AFAIK this is the most efficient way to monitor files.; If the application don't call FileMonitor::update(0) then this cost nothing. Currently only runSofa is calling FileMonitor::update(0) when started with the -i (for interactive) command line option. So the different scenarios are:; your own app.... (no cost); runSofa -i & changing the file (this cost the reload of the shader (few millisecond each change); runSofa -i & not changing the file (this cost calling the select system call); runSofa as usual...this cost nothing.",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/63
https://github.com/sofa-framework/sofa/pull/63:486,Energy Efficiency,monitor,monitor,486,"This commit add the ability to edit shader while sofa is running and on-the fly updating the rendering.; This is an improvement on the workflow for anyone that is developing shading code. Some may be concerned about performances issues so here are more details: . The overhead is near zero.; The GLSLListener is triggered by the file FileMonitor.; FileMonitor is using the event based ""select"" system API and is not actively 'polling' the files. AFAIK this is the most efficient way to monitor files.; If the application don't call FileMonitor::update(0) then this cost nothing. Currently only runSofa is calling FileMonitor::update(0) when started with the -i (for interactive) command line option. So the different scenarios are:; your own app.... (no cost); runSofa -i & changing the file (this cost the reload of the shader (few millisecond each change); runSofa -i & not changing the file (this cost calling the select system call); runSofa as usual...this cost nothing.",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/63
https://github.com/sofa-framework/sofa/pull/63:216,Performance,perform,performances,216,"This commit add the ability to edit shader while sofa is running and on-the fly updating the rendering.; This is an improvement on the workflow for anyone that is developing shading code. Some may be concerned about performances issues so here are more details: . The overhead is near zero.; The GLSLListener is triggered by the file FileMonitor.; FileMonitor is using the event based ""select"" system API and is not actively 'polling' the files. AFAIK this is the most efficient way to monitor files.; If the application don't call FileMonitor::update(0) then this cost nothing. Currently only runSofa is calling FileMonitor::update(0) when started with the -i (for interactive) command line option. So the different scenarios are:; your own app.... (no cost); runSofa -i & changing the file (this cost the reload of the shader (few millisecond each change); runSofa -i & not changing the file (this cost calling the select system call); runSofa as usual...this cost nothing.",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/63
https://github.com/sofa-framework/sofa/issues/64:243,Deployability,release,release,243,"In sofa, some component allows to specify colors by writing color=""1,0,0"" and ""red"" while others just allow color=""1,0,0"". This is a consistency issue (very very bad for the user experience). ; So we should unify this in all sofa for the next release. . DM.",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/64
https://github.com/sofa-framework/sofa/issues/64:174,Usability,user experience,user experience,174,"In sofa, some component allows to specify colors by writing color=""1,0,0"" and ""red"" while others just allow color=""1,0,0"". This is a consistency issue (very very bad for the user experience). ; So we should unify this in all sofa for the next release. . DM.",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/64
https://github.com/sofa-framework/sofa/pull/65:570,Integrability,depend,depends,570,"This pull-request is related to the issue ; https://github.com/sofa-framework/sofa/issues/64 . It appears that in 2/3 of the cases only 1,0,0 syntax is allowed while the others also; allows ""red"" ""blue"" etc..for color definition.; ; This is an UI consistency issue. Because of UI consistencies our users think that sofa is:; - hard to understand & master; - not well done; ; So we should unify that (if we want to smooth our user&own experience with sofa).; So I add a TODO where this should be done and maybe in the future I will fix some of them :). This Pull-request depends on the following pull-request:; - https://github.com/sofa-framework/sofa/pull/58",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/65
https://github.com/sofa-framework/sofa/pull/67:242,Availability,failure,failure,242,"This Pull_request is adding three new tests:; - LocalMinDistance; - Light (the three kind of light); - AllComponent . These tests contains open issues. ; The AllComponent test will fail until all component have an associated example file, on failure it reports the number of missing examples and the component that have none)... Maybe this test should be moved as a tool and not a systematic test;. . This commit shouldn't break anything in sofa. If it does beep me.",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/67
https://github.com/sofa-framework/sofa/pull/67:38,Testability,test,tests,38,"This Pull_request is adding three new tests:; - LocalMinDistance; - Light (the three kind of light); - AllComponent . These tests contains open issues. ; The AllComponent test will fail until all component have an associated example file, on failure it reports the number of missing examples and the component that have none)... Maybe this test should be moved as a tool and not a systematic test;. . This commit shouldn't break anything in sofa. If it does beep me.",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/67
https://github.com/sofa-framework/sofa/pull/67:124,Testability,test,tests,124,"This Pull_request is adding three new tests:; - LocalMinDistance; - Light (the three kind of light); - AllComponent . These tests contains open issues. ; The AllComponent test will fail until all component have an associated example file, on failure it reports the number of missing examples and the component that have none)... Maybe this test should be moved as a tool and not a systematic test;. . This commit shouldn't break anything in sofa. If it does beep me.",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/67
https://github.com/sofa-framework/sofa/pull/67:171,Testability,test,test,171,"This Pull_request is adding three new tests:; - LocalMinDistance; - Light (the three kind of light); - AllComponent . These tests contains open issues. ; The AllComponent test will fail until all component have an associated example file, on failure it reports the number of missing examples and the component that have none)... Maybe this test should be moved as a tool and not a systematic test;. . This commit shouldn't break anything in sofa. If it does beep me.",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/67
https://github.com/sofa-framework/sofa/pull/67:340,Testability,test,test,340,"This Pull_request is adding three new tests:; - LocalMinDistance; - Light (the three kind of light); - AllComponent . These tests contains open issues. ; The AllComponent test will fail until all component have an associated example file, on failure it reports the number of missing examples and the component that have none)... Maybe this test should be moved as a tool and not a systematic test;. . This commit shouldn't break anything in sofa. If it does beep me.",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/67
https://github.com/sofa-framework/sofa/pull/67:392,Testability,test,test,392,"This Pull_request is adding three new tests:; - LocalMinDistance; - Light (the three kind of light); - AllComponent . These tests contains open issues. ; The AllComponent test will fail until all component have an associated example file, on failure it reports the number of missing examples and the component that have none)... Maybe this test should be moved as a tool and not a systematic test;. . This commit shouldn't break anything in sofa. If it does beep me.",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/67
https://github.com/sofa-framework/sofa/pull/68:9,Security,validat,validated,9,tested & validated,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/68
https://github.com/sofa-framework/sofa/pull/68:0,Testability,test,tested,0,tested & validated,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/68
https://github.com/sofa-framework/sofa/pull/69:234,Integrability,Interface,Interface,234,"Hi,. Here is our 'newtests' contributions for sofa this week. . It is very simple and consists in several new test for components:; - Light, LightManager, LocalMinDistance. One of them is tagged with OpenIssue because it shows a User Interface consistency problem; the ambient term of LightManager is a color but it does not accept string based color name as other sofa component do. To fix this we will need to unify the 'color' in all sofa. ; ; There is also a weird test called AllComponent that checks each sofa components if there is a corresponding example. Currently it fails because only 1/3 of them have one. . Finally Jérémie commited a script to convert the alias in a sofa scene to the real component name.",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/69
https://github.com/sofa-framework/sofa/pull/69:110,Testability,test,test,110,"Hi,. Here is our 'newtests' contributions for sofa this week. . It is very simple and consists in several new test for components:; - Light, LightManager, LocalMinDistance. One of them is tagged with OpenIssue because it shows a User Interface consistency problem; the ambient term of LightManager is a color but it does not accept string based color name as other sofa component do. To fix this we will need to unify the 'color' in all sofa. ; ; There is also a weird test called AllComponent that checks each sofa components if there is a corresponding example. Currently it fails because only 1/3 of them have one. . Finally Jérémie commited a script to convert the alias in a sofa scene to the real component name.",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/69
https://github.com/sofa-framework/sofa/pull/69:469,Testability,test,test,469,"Hi,. Here is our 'newtests' contributions for sofa this week. . It is very simple and consists in several new test for components:; - Light, LightManager, LocalMinDistance. One of them is tagged with OpenIssue because it shows a User Interface consistency problem; the ambient term of LightManager is a color but it does not accept string based color name as other sofa component do. To fix this we will need to unify the 'color' in all sofa. ; ; There is also a weird test called AllComponent that checks each sofa components if there is a corresponding example. Currently it fails because only 1/3 of them have one. . Finally Jérémie commited a script to convert the alias in a sofa scene to the real component name.",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/69
https://github.com/sofa-framework/sofa/pull/69:75,Usability,simpl,simple,75,"Hi,. Here is our 'newtests' contributions for sofa this week. . It is very simple and consists in several new test for components:; - Light, LightManager, LocalMinDistance. One of them is tagged with OpenIssue because it shows a User Interface consistency problem; the ambient term of LightManager is a color but it does not accept string based color name as other sofa component do. To fix this we will need to unify the 'color' in all sofa. ; ; There is also a weird test called AllComponent that checks each sofa components if there is a corresponding example. Currently it fails because only 1/3 of them have one. . Finally Jérémie commited a script to convert the alias in a sofa scene to the real component name.",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/69
https://github.com/sofa-framework/sofa/pull/70:13,Testability,test,test,13,LightManager test was failing on Windows.; Fixed using SofaTest API (inspired by SofaBaseCollision_test/Sphere_test).; Fixes #54,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/70
https://github.com/sofa-framework/sofa/pull/74:100,Deployability,update,update,100,"Just a little fix in SparseLDLImplInvertData, r of sparse is missing. ; Fix needed for Cuda plugins update in sofa-dev.",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/74
https://github.com/sofa-framework/sofa/pull/74:92,Modifiability,plugin,plugins,92,"Just a little fix in SparseLDLImplInvertData, r of sparse is missing. ; Fix needed for Cuda plugins update in sofa-dev.",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/74
https://github.com/sofa-framework/sofa/pull/75:1,Modifiability,Flexible,Flexible,1,"[Flexible] add engines and examples to smooth strains, for faster convergence + minor cleaning on quadrature engines",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/75
https://github.com/sofa-framework/sofa/pull/76:1,Modifiability,Flexible,Flexible,1,"[Flexible] add engines and examples for strain smoothing, and minor cleaning",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/76
https://github.com/sofa-framework/sofa/issues/78:91,Testability,test,tests,91,"There is no implementation of FileMonitor on OSX and Windows, making all the FileMonitor.* tests to fail on these platforms (7 test fails on OSX, 8 on Windows). This has to be fixed.",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/78
https://github.com/sofa-framework/sofa/issues/78:127,Testability,test,test,127,"There is no implementation of FileMonitor on OSX and Windows, making all the FileMonitor.* tests to fail on these platforms (7 test fails on OSX, 8 on Windows). This has to be fixed.",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/78
https://github.com/sofa-framework/sofa/issues/79:119,Performance,load,loading,119,Hello. I made a test with the following scene. It actually pass in the current testing framework despite crashing upon loading in the GUI mode. ; ```; <?xml version='1.0'?>; <Node 	name='Root'>; <VisualStyle displayFlags='showForceFields'/>; <Node name='FEMnode'> ; <MechanicalObject/> ; <TetrahedronFEMForceField/> ; </Node>; </Node>; ```,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/79
https://github.com/sofa-framework/sofa/issues/79:16,Testability,test,test,16,Hello. I made a test with the following scene. It actually pass in the current testing framework despite crashing upon loading in the GUI mode. ; ```; <?xml version='1.0'?>; <Node 	name='Root'>; <VisualStyle displayFlags='showForceFields'/>; <Node name='FEMnode'> ; <MechanicalObject/> ; <TetrahedronFEMForceField/> ; </Node>; </Node>; ```,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/79
https://github.com/sofa-framework/sofa/issues/79:79,Testability,test,testing,79,Hello. I made a test with the following scene. It actually pass in the current testing framework despite crashing upon loading in the GUI mode. ; ```; <?xml version='1.0'?>; <Node 	name='Root'>; <VisualStyle displayFlags='showForceFields'/>; <Node name='FEMnode'> ; <MechanicalObject/> ; <TetrahedronFEMForceField/> ; </Node>; </Node>; ```,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/79
https://github.com/sofa-framework/sofa/pull/80:715,Deployability,update,update,715,"Adding a few utility functionalities to simplify Data tracking. - Data tracking system is now using Data's counter (lighter and simpler).; - externalizing Data tracking system outside of DataEngine so it can be use elsewhere (including other kinds of components).; - adding DataTrackerEngine that is a kind of DataEngine but that is not a component (not a BaseObject). It can easily be added anywhere and can link any Data, such as inside a Component, or even between components.; - adding DataTrackerFunctor to call a functor as soon as a Data is modified. What you can do: (have a look at the tests). - check if a Data changed on a regular rhythm. e.g check at each time step if a stiffness parameters changed to update a Matrix.; - automatically update a Data if its dependencies changed. e.g. young modulus can be set as a dependency of stiffness matrix, so each time you ask for the matrix, if the modulus changed, the matrix will be updated (behavior similar to DataEngine); - do an action as soon as a Data is modified. E.g. updating the gui scene graph as soon as a Node is (de)activated (by tracking the Data Node::activated).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/80
https://github.com/sofa-framework/sofa/pull/80:749,Deployability,update,update,749,"Adding a few utility functionalities to simplify Data tracking. - Data tracking system is now using Data's counter (lighter and simpler).; - externalizing Data tracking system outside of DataEngine so it can be use elsewhere (including other kinds of components).; - adding DataTrackerEngine that is a kind of DataEngine but that is not a component (not a BaseObject). It can easily be added anywhere and can link any Data, such as inside a Component, or even between components.; - adding DataTrackerFunctor to call a functor as soon as a Data is modified. What you can do: (have a look at the tests). - check if a Data changed on a regular rhythm. e.g check at each time step if a stiffness parameters changed to update a Matrix.; - automatically update a Data if its dependencies changed. e.g. young modulus can be set as a dependency of stiffness matrix, so each time you ask for the matrix, if the modulus changed, the matrix will be updated (behavior similar to DataEngine); - do an action as soon as a Data is modified. E.g. updating the gui scene graph as soon as a Node is (de)activated (by tracking the Data Node::activated).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/80
https://github.com/sofa-framework/sofa/pull/80:939,Deployability,update,updated,939,"Adding a few utility functionalities to simplify Data tracking. - Data tracking system is now using Data's counter (lighter and simpler).; - externalizing Data tracking system outside of DataEngine so it can be use elsewhere (including other kinds of components).; - adding DataTrackerEngine that is a kind of DataEngine but that is not a component (not a BaseObject). It can easily be added anywhere and can link any Data, such as inside a Component, or even between components.; - adding DataTrackerFunctor to call a functor as soon as a Data is modified. What you can do: (have a look at the tests). - check if a Data changed on a regular rhythm. e.g check at each time step if a stiffness parameters changed to update a Matrix.; - automatically update a Data if its dependencies changed. e.g. young modulus can be set as a dependency of stiffness matrix, so each time you ask for the matrix, if the modulus changed, the matrix will be updated (behavior similar to DataEngine); - do an action as soon as a Data is modified. E.g. updating the gui scene graph as soon as a Node is (de)activated (by tracking the Data Node::activated).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/80
https://github.com/sofa-framework/sofa/pull/80:770,Integrability,depend,dependencies,770,"Adding a few utility functionalities to simplify Data tracking. - Data tracking system is now using Data's counter (lighter and simpler).; - externalizing Data tracking system outside of DataEngine so it can be use elsewhere (including other kinds of components).; - adding DataTrackerEngine that is a kind of DataEngine but that is not a component (not a BaseObject). It can easily be added anywhere and can link any Data, such as inside a Component, or even between components.; - adding DataTrackerFunctor to call a functor as soon as a Data is modified. What you can do: (have a look at the tests). - check if a Data changed on a regular rhythm. e.g check at each time step if a stiffness parameters changed to update a Matrix.; - automatically update a Data if its dependencies changed. e.g. young modulus can be set as a dependency of stiffness matrix, so each time you ask for the matrix, if the modulus changed, the matrix will be updated (behavior similar to DataEngine); - do an action as soon as a Data is modified. E.g. updating the gui scene graph as soon as a Node is (de)activated (by tracking the Data Node::activated).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/80
https://github.com/sofa-framework/sofa/pull/80:827,Integrability,depend,dependency,827,"Adding a few utility functionalities to simplify Data tracking. - Data tracking system is now using Data's counter (lighter and simpler).; - externalizing Data tracking system outside of DataEngine so it can be use elsewhere (including other kinds of components).; - adding DataTrackerEngine that is a kind of DataEngine but that is not a component (not a BaseObject). It can easily be added anywhere and can link any Data, such as inside a Component, or even between components.; - adding DataTrackerFunctor to call a functor as soon as a Data is modified. What you can do: (have a look at the tests). - check if a Data changed on a regular rhythm. e.g check at each time step if a stiffness parameters changed to update a Matrix.; - automatically update a Data if its dependencies changed. e.g. young modulus can be set as a dependency of stiffness matrix, so each time you ask for the matrix, if the modulus changed, the matrix will be updated (behavior similar to DataEngine); - do an action as soon as a Data is modified. E.g. updating the gui scene graph as soon as a Node is (de)activated (by tracking the Data Node::activated).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/80
https://github.com/sofa-framework/sofa/pull/80:595,Testability,test,tests,595,"Adding a few utility functionalities to simplify Data tracking. - Data tracking system is now using Data's counter (lighter and simpler).; - externalizing Data tracking system outside of DataEngine so it can be use elsewhere (including other kinds of components).; - adding DataTrackerEngine that is a kind of DataEngine but that is not a component (not a BaseObject). It can easily be added anywhere and can link any Data, such as inside a Component, or even between components.; - adding DataTrackerFunctor to call a functor as soon as a Data is modified. What you can do: (have a look at the tests). - check if a Data changed on a regular rhythm. e.g check at each time step if a stiffness parameters changed to update a Matrix.; - automatically update a Data if its dependencies changed. e.g. young modulus can be set as a dependency of stiffness matrix, so each time you ask for the matrix, if the modulus changed, the matrix will be updated (behavior similar to DataEngine); - do an action as soon as a Data is modified. E.g. updating the gui scene graph as soon as a Node is (de)activated (by tracking the Data Node::activated).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/80
https://github.com/sofa-framework/sofa/pull/80:40,Usability,simpl,simplify,40,"Adding a few utility functionalities to simplify Data tracking. - Data tracking system is now using Data's counter (lighter and simpler).; - externalizing Data tracking system outside of DataEngine so it can be use elsewhere (including other kinds of components).; - adding DataTrackerEngine that is a kind of DataEngine but that is not a component (not a BaseObject). It can easily be added anywhere and can link any Data, such as inside a Component, or even between components.; - adding DataTrackerFunctor to call a functor as soon as a Data is modified. What you can do: (have a look at the tests). - check if a Data changed on a regular rhythm. e.g check at each time step if a stiffness parameters changed to update a Matrix.; - automatically update a Data if its dependencies changed. e.g. young modulus can be set as a dependency of stiffness matrix, so each time you ask for the matrix, if the modulus changed, the matrix will be updated (behavior similar to DataEngine); - do an action as soon as a Data is modified. E.g. updating the gui scene graph as soon as a Node is (de)activated (by tracking the Data Node::activated).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/80
https://github.com/sofa-framework/sofa/pull/80:128,Usability,simpl,simpler,128,"Adding a few utility functionalities to simplify Data tracking. - Data tracking system is now using Data's counter (lighter and simpler).; - externalizing Data tracking system outside of DataEngine so it can be use elsewhere (including other kinds of components).; - adding DataTrackerEngine that is a kind of DataEngine but that is not a component (not a BaseObject). It can easily be added anywhere and can link any Data, such as inside a Component, or even between components.; - adding DataTrackerFunctor to call a functor as soon as a Data is modified. What you can do: (have a look at the tests). - check if a Data changed on a regular rhythm. e.g check at each time step if a stiffness parameters changed to update a Matrix.; - automatically update a Data if its dependencies changed. e.g. young modulus can be set as a dependency of stiffness matrix, so each time you ask for the matrix, if the modulus changed, the matrix will be updated (behavior similar to DataEngine); - do an action as soon as a Data is modified. E.g. updating the gui scene graph as soon as a Node is (de)activated (by tracking the Data Node::activated).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/80
https://github.com/sofa-framework/sofa/issues/81:119,Modifiability,plugin,plugin,119,"Hi all, . I wanted to discuss the default behavior of the friction coefficients in the contact models of the Compliant plugin (FrictionCompliantContact.h and CompliantContact.h). The current behavior seems kind of strange:. 1) the global mu coefficient set in the DefaultContactManager component always overrules friction coefficients defined locally for each collision model. 2) when the global mu is set to exactly 0.0, the local coefficients get activated. negative global mu does funny but not really useful stuff in simulations. 3) When having two mu defined by the two colliding models, currently they just get multiplied. So If both models have mu=0.5, they end up having a contact's mu=0.25! Same with large mu: mu=2.0 (i.e. rubber) -> 4.0. . I believe that especially the latter behavior would catch many users on the wrong foot. So here are some changes I propose:. ad 1) locally defined mu should take precedence over globally defined mu's. Of course, this means breaking the existing behavior and probably triggers many regressions, so this should be considered carefully. ad 2) replace `mu.getValue()?` with `(mu.getValue()>0.) ? ` or `(mu.getValue()>=0.) ?` -> a negative value simply means disabling the global override. . ad 3) use the geometric mean of the friction coefficients: replace ; `this->model1->getContactFriction(0)*this->model2->getContactFriction(0)`; with ; `sqrt(this->model1->getContactFriction(0)*this->model2->getContactFriction(0));`. An alternative could be to use the smaller of the two coefficients, but I'm not sure what's the more sensible behavior.",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/81
https://github.com/sofa-framework/sofa/issues/81:1192,Usability,simpl,simply,1192,"Hi all, . I wanted to discuss the default behavior of the friction coefficients in the contact models of the Compliant plugin (FrictionCompliantContact.h and CompliantContact.h). The current behavior seems kind of strange:. 1) the global mu coefficient set in the DefaultContactManager component always overrules friction coefficients defined locally for each collision model. 2) when the global mu is set to exactly 0.0, the local coefficients get activated. negative global mu does funny but not really useful stuff in simulations. 3) When having two mu defined by the two colliding models, currently they just get multiplied. So If both models have mu=0.5, they end up having a contact's mu=0.25! Same with large mu: mu=2.0 (i.e. rubber) -> 4.0. . I believe that especially the latter behavior would catch many users on the wrong foot. So here are some changes I propose:. ad 1) locally defined mu should take precedence over globally defined mu's. Of course, this means breaking the existing behavior and probably triggers many regressions, so this should be considered carefully. ad 2) replace `mu.getValue()?` with `(mu.getValue()>0.) ? ` or `(mu.getValue()>=0.) ?` -> a negative value simply means disabling the global override. . ad 3) use the geometric mean of the friction coefficients: replace ; `this->model1->getContactFriction(0)*this->model2->getContactFriction(0)`; with ; `sqrt(this->model1->getContactFriction(0)*this->model2->getContactFriction(0));`. An alternative could be to use the smaller of the two coefficients, but I'm not sure what's the more sensible behavior.",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/81
https://github.com/sofa-framework/sofa/pull/87:95,Safety,avoid,avoid,95,Printing a warning when an argument is not used while creating a component.; This is useful to avoid typos that can make you lose plenty of time!. Cleaning Base::parse a bit on the way.,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/87
https://github.com/sofa-framework/sofa/pull/88:56,Safety,avoid,avoid,56,Fixes #79 . Add a new test corresponding to this bug to avoid future regression.,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/88
https://github.com/sofa-framework/sofa/pull/88:22,Testability,test,test,22,Fixes #79 . Add a new test corresponding to this bug to avoid future regression.,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/88
https://github.com/sofa-framework/sofa/pull/89:209,Availability,failure,failure,209,"This request contains: ; - Add new tests to LocalMinDistance; - Add new tests Light (the three kind of light); - Add AllComponent (this test is failling until all component have an associated example file, on failure it reports the number of missing examples); - Add new test to LightManager . The ChangeLog is updated with the content of this pull-request.",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/89
https://github.com/sofa-framework/sofa/pull/89:311,Deployability,update,updated,311,"This request contains: ; - Add new tests to LocalMinDistance; - Add new tests Light (the three kind of light); - Add AllComponent (this test is failling until all component have an associated example file, on failure it reports the number of missing examples); - Add new test to LightManager . The ChangeLog is updated with the content of this pull-request.",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/89
https://github.com/sofa-framework/sofa/pull/89:35,Testability,test,tests,35,"This request contains: ; - Add new tests to LocalMinDistance; - Add new tests Light (the three kind of light); - Add AllComponent (this test is failling until all component have an associated example file, on failure it reports the number of missing examples); - Add new test to LightManager . The ChangeLog is updated with the content of this pull-request.",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/89
https://github.com/sofa-framework/sofa/pull/89:72,Testability,test,tests,72,"This request contains: ; - Add new tests to LocalMinDistance; - Add new tests Light (the three kind of light); - Add AllComponent (this test is failling until all component have an associated example file, on failure it reports the number of missing examples); - Add new test to LightManager . The ChangeLog is updated with the content of this pull-request.",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/89
https://github.com/sofa-framework/sofa/pull/89:136,Testability,test,test,136,"This request contains: ; - Add new tests to LocalMinDistance; - Add new tests Light (the three kind of light); - Add AllComponent (this test is failling until all component have an associated example file, on failure it reports the number of missing examples); - Add new test to LightManager . The ChangeLog is updated with the content of this pull-request.",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/89
https://github.com/sofa-framework/sofa/pull/89:271,Testability,test,test,271,"This request contains: ; - Add new tests to LocalMinDistance; - Add new tests Light (the three kind of light); - Add AllComponent (this test is failling until all component have an associated example file, on failure it reports the number of missing examples); - Add new test to LightManager . The ChangeLog is updated with the content of this pull-request.",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/89
https://github.com/sofa-framework/sofa/pull/92:42,Availability,failure,failure,42,This should fix the failing ImagePng test failure. . The problem is the consequence of the use of the ExpectMessage RAII without adding a CountingMessageHandler to the MessageDispatcher. This is quick fix but more fundamentally we need an API improvement to make; that automatical/hidden. But how to do that in an efficient way is yet unclear.,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/92
https://github.com/sofa-framework/sofa/pull/92:314,Energy Efficiency,efficient,efficient,314,This should fix the failing ImagePng test failure. . The problem is the consequence of the use of the ExpectMessage RAII without adding a CountingMessageHandler to the MessageDispatcher. This is quick fix but more fundamentally we need an API improvement to make; that automatical/hidden. But how to do that in an efficient way is yet unclear.,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/92
https://github.com/sofa-framework/sofa/pull/92:168,Integrability,Message,MessageDispatcher,168,This should fix the failing ImagePng test failure. . The problem is the consequence of the use of the ExpectMessage RAII without adding a CountingMessageHandler to the MessageDispatcher. This is quick fix but more fundamentally we need an API improvement to make; that automatical/hidden. But how to do that in an efficient way is yet unclear.,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/92
https://github.com/sofa-framework/sofa/pull/92:37,Testability,test,test,37,This should fix the failing ImagePng test failure. . The problem is the consequence of the use of the ExpectMessage RAII without adding a CountingMessageHandler to the MessageDispatcher. This is quick fix but more fundamentally we need an API improvement to make; that automatical/hidden. But how to do that in an efficient way is yet unclear.,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/92
https://github.com/sofa-framework/sofa/issues/94:102,Availability,error,error,102,`MessageDispatcher::clearHandlers()` can have side effects on other tests in same suite.; See #83 for error case. SofaTest API should ensure that each test starts with a clean MessageDispatcher containing always the same set of MessageHandlers.,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/94
https://github.com/sofa-framework/sofa/issues/94:1,Integrability,Message,MessageDispatcher,1,`MessageDispatcher::clearHandlers()` can have side effects on other tests in same suite.; See #83 for error case. SofaTest API should ensure that each test starts with a clean MessageDispatcher containing always the same set of MessageHandlers.,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/94
https://github.com/sofa-framework/sofa/issues/94:176,Integrability,Message,MessageDispatcher,176,`MessageDispatcher::clearHandlers()` can have side effects on other tests in same suite.; See #83 for error case. SofaTest API should ensure that each test starts with a clean MessageDispatcher containing always the same set of MessageHandlers.,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/94
https://github.com/sofa-framework/sofa/issues/94:228,Integrability,Message,MessageHandlers,228,`MessageDispatcher::clearHandlers()` can have side effects on other tests in same suite.; See #83 for error case. SofaTest API should ensure that each test starts with a clean MessageDispatcher containing always the same set of MessageHandlers.,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/94
https://github.com/sofa-framework/sofa/issues/94:68,Testability,test,tests,68,`MessageDispatcher::clearHandlers()` can have side effects on other tests in same suite.; See #83 for error case. SofaTest API should ensure that each test starts with a clean MessageDispatcher containing always the same set of MessageHandlers.,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/94
https://github.com/sofa-framework/sofa/issues/94:151,Testability,test,test,151,`MessageDispatcher::clearHandlers()` can have side effects on other tests in same suite.; See #83 for error case. SofaTest API should ensure that each test starts with a clean MessageDispatcher containing always the same set of MessageHandlers.,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/94
https://github.com/sofa-framework/sofa/issues/94:20,Usability,clear,clearHandlers,20,`MessageDispatcher::clearHandlers()` can have side effects on other tests in same suite.; See #83 for error case. SofaTest API should ensure that each test starts with a clean MessageDispatcher containing always the same set of MessageHandlers.,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/94
https://github.com/sofa-framework/sofa/pull/95:464,Deployability,update,update,464,This PR is a proposal to remove the TestMessageHandler as it was discussed during the today's meeting (connected to this https://github.com/sofa-framework/sofa/issues/94). . The thing was that the TestMessageHandler class is more or less included in the behavior of the ExpectMessage & MessageAsTestFailure so it make sense to remove it. Please tell me if some scenario of yours cannot be handled nicely with the ExpectMessage & MessageAsTestFailure so that I can update their API. The handlers needed by the ExpectMessage & MessageAsTestFailure are now installed by default. . The tests using the TestMessageHandler class have been fixed to use the ExpectMessage&MessageAsTestFailure. . A bug in LoggingMessageHandler.h has also been corrected.,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/95
https://github.com/sofa-framework/sofa/pull/95:554,Deployability,install,installed,554,This PR is a proposal to remove the TestMessageHandler as it was discussed during the today's meeting (connected to this https://github.com/sofa-framework/sofa/issues/94). . The thing was that the TestMessageHandler class is more or less included in the behavior of the ExpectMessage & MessageAsTestFailure so it make sense to remove it. Please tell me if some scenario of yours cannot be handled nicely with the ExpectMessage & MessageAsTestFailure so that I can update their API. The handlers needed by the ExpectMessage & MessageAsTestFailure are now installed by default. . The tests using the TestMessageHandler class have been fixed to use the ExpectMessage&MessageAsTestFailure. . A bug in LoggingMessageHandler.h has also been corrected.,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/95
https://github.com/sofa-framework/sofa/pull/95:286,Integrability,Message,MessageAsTestFailure,286,This PR is a proposal to remove the TestMessageHandler as it was discussed during the today's meeting (connected to this https://github.com/sofa-framework/sofa/issues/94). . The thing was that the TestMessageHandler class is more or less included in the behavior of the ExpectMessage & MessageAsTestFailure so it make sense to remove it. Please tell me if some scenario of yours cannot be handled nicely with the ExpectMessage & MessageAsTestFailure so that I can update their API. The handlers needed by the ExpectMessage & MessageAsTestFailure are now installed by default. . The tests using the TestMessageHandler class have been fixed to use the ExpectMessage&MessageAsTestFailure. . A bug in LoggingMessageHandler.h has also been corrected.,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/95
https://github.com/sofa-framework/sofa/pull/95:429,Integrability,Message,MessageAsTestFailure,429,This PR is a proposal to remove the TestMessageHandler as it was discussed during the today's meeting (connected to this https://github.com/sofa-framework/sofa/issues/94). . The thing was that the TestMessageHandler class is more or less included in the behavior of the ExpectMessage & MessageAsTestFailure so it make sense to remove it. Please tell me if some scenario of yours cannot be handled nicely with the ExpectMessage & MessageAsTestFailure so that I can update their API. The handlers needed by the ExpectMessage & MessageAsTestFailure are now installed by default. . The tests using the TestMessageHandler class have been fixed to use the ExpectMessage&MessageAsTestFailure. . A bug in LoggingMessageHandler.h has also been corrected.,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/95
https://github.com/sofa-framework/sofa/pull/95:525,Integrability,Message,MessageAsTestFailure,525,This PR is a proposal to remove the TestMessageHandler as it was discussed during the today's meeting (connected to this https://github.com/sofa-framework/sofa/issues/94). . The thing was that the TestMessageHandler class is more or less included in the behavior of the ExpectMessage & MessageAsTestFailure so it make sense to remove it. Please tell me if some scenario of yours cannot be handled nicely with the ExpectMessage & MessageAsTestFailure so that I can update their API. The handlers needed by the ExpectMessage & MessageAsTestFailure are now installed by default. . The tests using the TestMessageHandler class have been fixed to use the ExpectMessage&MessageAsTestFailure. . A bug in LoggingMessageHandler.h has also been corrected.,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/95
https://github.com/sofa-framework/sofa/pull/95:664,Integrability,Message,MessageAsTestFailure,664,This PR is a proposal to remove the TestMessageHandler as it was discussed during the today's meeting (connected to this https://github.com/sofa-framework/sofa/issues/94). . The thing was that the TestMessageHandler class is more or less included in the behavior of the ExpectMessage & MessageAsTestFailure so it make sense to remove it. Please tell me if some scenario of yours cannot be handled nicely with the ExpectMessage & MessageAsTestFailure so that I can update their API. The handlers needed by the ExpectMessage & MessageAsTestFailure are now installed by default. . The tests using the TestMessageHandler class have been fixed to use the ExpectMessage&MessageAsTestFailure. . A bug in LoggingMessageHandler.h has also been corrected.,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/95
https://github.com/sofa-framework/sofa/pull/95:36,Testability,Test,TestMessageHandler,36,This PR is a proposal to remove the TestMessageHandler as it was discussed during the today's meeting (connected to this https://github.com/sofa-framework/sofa/issues/94). . The thing was that the TestMessageHandler class is more or less included in the behavior of the ExpectMessage & MessageAsTestFailure so it make sense to remove it. Please tell me if some scenario of yours cannot be handled nicely with the ExpectMessage & MessageAsTestFailure so that I can update their API. The handlers needed by the ExpectMessage & MessageAsTestFailure are now installed by default. . The tests using the TestMessageHandler class have been fixed to use the ExpectMessage&MessageAsTestFailure. . A bug in LoggingMessageHandler.h has also been corrected.,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/95
https://github.com/sofa-framework/sofa/pull/95:197,Testability,Test,TestMessageHandler,197,This PR is a proposal to remove the TestMessageHandler as it was discussed during the today's meeting (connected to this https://github.com/sofa-framework/sofa/issues/94). . The thing was that the TestMessageHandler class is more or less included in the behavior of the ExpectMessage & MessageAsTestFailure so it make sense to remove it. Please tell me if some scenario of yours cannot be handled nicely with the ExpectMessage & MessageAsTestFailure so that I can update their API. The handlers needed by the ExpectMessage & MessageAsTestFailure are now installed by default. . The tests using the TestMessageHandler class have been fixed to use the ExpectMessage&MessageAsTestFailure. . A bug in LoggingMessageHandler.h has also been corrected.,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/95
https://github.com/sofa-framework/sofa/pull/95:582,Testability,test,tests,582,This PR is a proposal to remove the TestMessageHandler as it was discussed during the today's meeting (connected to this https://github.com/sofa-framework/sofa/issues/94). . The thing was that the TestMessageHandler class is more or less included in the behavior of the ExpectMessage & MessageAsTestFailure so it make sense to remove it. Please tell me if some scenario of yours cannot be handled nicely with the ExpectMessage & MessageAsTestFailure so that I can update their API. The handlers needed by the ExpectMessage & MessageAsTestFailure are now installed by default. . The tests using the TestMessageHandler class have been fixed to use the ExpectMessage&MessageAsTestFailure. . A bug in LoggingMessageHandler.h has also been corrected.,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/95
https://github.com/sofa-framework/sofa/pull/95:598,Testability,Test,TestMessageHandler,598,This PR is a proposal to remove the TestMessageHandler as it was discussed during the today's meeting (connected to this https://github.com/sofa-framework/sofa/issues/94). . The thing was that the TestMessageHandler class is more or less included in the behavior of the ExpectMessage & MessageAsTestFailure so it make sense to remove it. Please tell me if some scenario of yours cannot be handled nicely with the ExpectMessage & MessageAsTestFailure so that I can update their API. The handlers needed by the ExpectMessage & MessageAsTestFailure are now installed by default. . The tests using the TestMessageHandler class have been fixed to use the ExpectMessage&MessageAsTestFailure. . A bug in LoggingMessageHandler.h has also been corrected.,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/95
https://github.com/sofa-framework/sofa/pull/95:697,Testability,Log,LoggingMessageHandler,697,This PR is a proposal to remove the TestMessageHandler as it was discussed during the today's meeting (connected to this https://github.com/sofa-framework/sofa/issues/94). . The thing was that the TestMessageHandler class is more or less included in the behavior of the ExpectMessage & MessageAsTestFailure so it make sense to remove it. Please tell me if some scenario of yours cannot be handled nicely with the ExpectMessage & MessageAsTestFailure so that I can update their API. The handlers needed by the ExpectMessage & MessageAsTestFailure are now installed by default. . The tests using the TestMessageHandler class have been fixed to use the ExpectMessage&MessageAsTestFailure. . A bug in LoggingMessageHandler.h has also been corrected.,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/95
https://github.com/sofa-framework/sofa/pull/96:952,Availability,failure,failure,952,This PR is a proposal to remove the TestMessageHandler as it was discussed during the today's meeting (connected to Issue https://github.com/sofa-framework/sofa/issues/94). The reason is that the TestMessageHandler class is more or less included in the behavior of the ExpectMessage & MessageAsTestFailure. In case I'm wrong please tell me if some scenario of yours cannot be handled nicely with the ExpectMessage & MessageAsTestFailure so that I can update their API. Concretely by this PR:; - The class TestMessageHandler is removed; - Handler needed by ExpectMessage & MessageAsTestFailure are now installed by default for tests ( Issue https://github.com/sofa-framework/sofa/issues/94); - The tests using the TestMessageHandler class have been fixed to use the ExpectMessage&MessageAsTestFailure.; - A bug in LoggingMessageHandler.h has also been corrected. Examples of use of the ExpectMessage & MessageAsTestFailure classes... To generate a test failure when an expected message have not been emitted you have to do; ```cpp; {; ExpectMessage raii(Message::Error);; ... do something that must emit a message ...; }; ```; To generate a test failure when a un-expected message have been emitted you have to do; ```cpp; {; 	MessageAsTestFailure raii(Message::Error);; ... do something that must not emit an error message ...; }; ```. The raii can be combined in the following way:; ```cpp; {; 	ExpectMessage warning(Message::Info);; 	MessageAsTestFailure raii(Message::Error);; 	MessageAsTestFailure raii(Message::Warning);; 	...; }; ```. Any suggestion on this API is more than welcome. . TODO:; 	It would be nice to be able to write; ExpectMessage warning(Message::Info & Message::Warning);,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/96
https://github.com/sofa-framework/sofa/pull/96:1062,Availability,Error,Error,1062,This PR is a proposal to remove the TestMessageHandler as it was discussed during the today's meeting (connected to Issue https://github.com/sofa-framework/sofa/issues/94). The reason is that the TestMessageHandler class is more or less included in the behavior of the ExpectMessage & MessageAsTestFailure. In case I'm wrong please tell me if some scenario of yours cannot be handled nicely with the ExpectMessage & MessageAsTestFailure so that I can update their API. Concretely by this PR:; - The class TestMessageHandler is removed; - Handler needed by ExpectMessage & MessageAsTestFailure are now installed by default for tests ( Issue https://github.com/sofa-framework/sofa/issues/94); - The tests using the TestMessageHandler class have been fixed to use the ExpectMessage&MessageAsTestFailure.; - A bug in LoggingMessageHandler.h has also been corrected. Examples of use of the ExpectMessage & MessageAsTestFailure classes... To generate a test failure when an expected message have not been emitted you have to do; ```cpp; {; ExpectMessage raii(Message::Error);; ... do something that must emit a message ...; }; ```; To generate a test failure when a un-expected message have been emitted you have to do; ```cpp; {; 	MessageAsTestFailure raii(Message::Error);; ... do something that must not emit an error message ...; }; ```. The raii can be combined in the following way:; ```cpp; {; 	ExpectMessage warning(Message::Info);; 	MessageAsTestFailure raii(Message::Error);; 	MessageAsTestFailure raii(Message::Warning);; 	...; }; ```. Any suggestion on this API is more than welcome. . TODO:; 	It would be nice to be able to write; ExpectMessage warning(Message::Info & Message::Warning);,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/96
https://github.com/sofa-framework/sofa/pull/96:1145,Availability,failure,failure,1145,This PR is a proposal to remove the TestMessageHandler as it was discussed during the today's meeting (connected to Issue https://github.com/sofa-framework/sofa/issues/94). The reason is that the TestMessageHandler class is more or less included in the behavior of the ExpectMessage & MessageAsTestFailure. In case I'm wrong please tell me if some scenario of yours cannot be handled nicely with the ExpectMessage & MessageAsTestFailure so that I can update their API. Concretely by this PR:; - The class TestMessageHandler is removed; - Handler needed by ExpectMessage & MessageAsTestFailure are now installed by default for tests ( Issue https://github.com/sofa-framework/sofa/issues/94); - The tests using the TestMessageHandler class have been fixed to use the ExpectMessage&MessageAsTestFailure.; - A bug in LoggingMessageHandler.h has also been corrected. Examples of use of the ExpectMessage & MessageAsTestFailure classes... To generate a test failure when an expected message have not been emitted you have to do; ```cpp; {; ExpectMessage raii(Message::Error);; ... do something that must emit a message ...; }; ```; To generate a test failure when a un-expected message have been emitted you have to do; ```cpp; {; 	MessageAsTestFailure raii(Message::Error);; ... do something that must not emit an error message ...; }; ```. The raii can be combined in the following way:; ```cpp; {; 	ExpectMessage warning(Message::Info);; 	MessageAsTestFailure raii(Message::Error);; 	MessageAsTestFailure raii(Message::Warning);; 	...; }; ```. Any suggestion on this API is more than welcome. . TODO:; 	It would be nice to be able to write; ExpectMessage warning(Message::Info & Message::Warning);,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/96
https://github.com/sofa-framework/sofa/pull/96:1261,Availability,Error,Error,1261,This PR is a proposal to remove the TestMessageHandler as it was discussed during the today's meeting (connected to Issue https://github.com/sofa-framework/sofa/issues/94). The reason is that the TestMessageHandler class is more or less included in the behavior of the ExpectMessage & MessageAsTestFailure. In case I'm wrong please tell me if some scenario of yours cannot be handled nicely with the ExpectMessage & MessageAsTestFailure so that I can update their API. Concretely by this PR:; - The class TestMessageHandler is removed; - Handler needed by ExpectMessage & MessageAsTestFailure are now installed by default for tests ( Issue https://github.com/sofa-framework/sofa/issues/94); - The tests using the TestMessageHandler class have been fixed to use the ExpectMessage&MessageAsTestFailure.; - A bug in LoggingMessageHandler.h has also been corrected. Examples of use of the ExpectMessage & MessageAsTestFailure classes... To generate a test failure when an expected message have not been emitted you have to do; ```cpp; {; ExpectMessage raii(Message::Error);; ... do something that must emit a message ...; }; ```; To generate a test failure when a un-expected message have been emitted you have to do; ```cpp; {; 	MessageAsTestFailure raii(Message::Error);; ... do something that must not emit an error message ...; }; ```. The raii can be combined in the following way:; ```cpp; {; 	ExpectMessage warning(Message::Info);; 	MessageAsTestFailure raii(Message::Error);; 	MessageAsTestFailure raii(Message::Warning);; 	...; }; ```. Any suggestion on this API is more than welcome. . TODO:; 	It would be nice to be able to write; ExpectMessage warning(Message::Info & Message::Warning);,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/96
https://github.com/sofa-framework/sofa/pull/96:1309,Availability,error,error,1309,This PR is a proposal to remove the TestMessageHandler as it was discussed during the today's meeting (connected to Issue https://github.com/sofa-framework/sofa/issues/94). The reason is that the TestMessageHandler class is more or less included in the behavior of the ExpectMessage & MessageAsTestFailure. In case I'm wrong please tell me if some scenario of yours cannot be handled nicely with the ExpectMessage & MessageAsTestFailure so that I can update their API. Concretely by this PR:; - The class TestMessageHandler is removed; - Handler needed by ExpectMessage & MessageAsTestFailure are now installed by default for tests ( Issue https://github.com/sofa-framework/sofa/issues/94); - The tests using the TestMessageHandler class have been fixed to use the ExpectMessage&MessageAsTestFailure.; - A bug in LoggingMessageHandler.h has also been corrected. Examples of use of the ExpectMessage & MessageAsTestFailure classes... To generate a test failure when an expected message have not been emitted you have to do; ```cpp; {; ExpectMessage raii(Message::Error);; ... do something that must emit a message ...; }; ```; To generate a test failure when a un-expected message have been emitted you have to do; ```cpp; {; 	MessageAsTestFailure raii(Message::Error);; ... do something that must not emit an error message ...; }; ```. The raii can be combined in the following way:; ```cpp; {; 	ExpectMessage warning(Message::Info);; 	MessageAsTestFailure raii(Message::Error);; 	MessageAsTestFailure raii(Message::Warning);; 	...; }; ```. Any suggestion on this API is more than welcome. . TODO:; 	It would be nice to be able to write; ExpectMessage warning(Message::Info & Message::Warning);,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/96
https://github.com/sofa-framework/sofa/pull/96:1471,Availability,Error,Error,1471,This PR is a proposal to remove the TestMessageHandler as it was discussed during the today's meeting (connected to Issue https://github.com/sofa-framework/sofa/issues/94). The reason is that the TestMessageHandler class is more or less included in the behavior of the ExpectMessage & MessageAsTestFailure. In case I'm wrong please tell me if some scenario of yours cannot be handled nicely with the ExpectMessage & MessageAsTestFailure so that I can update their API. Concretely by this PR:; - The class TestMessageHandler is removed; - Handler needed by ExpectMessage & MessageAsTestFailure are now installed by default for tests ( Issue https://github.com/sofa-framework/sofa/issues/94); - The tests using the TestMessageHandler class have been fixed to use the ExpectMessage&MessageAsTestFailure.; - A bug in LoggingMessageHandler.h has also been corrected. Examples of use of the ExpectMessage & MessageAsTestFailure classes... To generate a test failure when an expected message have not been emitted you have to do; ```cpp; {; ExpectMessage raii(Message::Error);; ... do something that must emit a message ...; }; ```; To generate a test failure when a un-expected message have been emitted you have to do; ```cpp; {; 	MessageAsTestFailure raii(Message::Error);; ... do something that must not emit an error message ...; }; ```. The raii can be combined in the following way:; ```cpp; {; 	ExpectMessage warning(Message::Info);; 	MessageAsTestFailure raii(Message::Error);; 	MessageAsTestFailure raii(Message::Warning);; 	...; }; ```. Any suggestion on this API is more than welcome. . TODO:; 	It would be nice to be able to write; ExpectMessage warning(Message::Info & Message::Warning);,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/96
https://github.com/sofa-framework/sofa/pull/96:451,Deployability,update,update,451,This PR is a proposal to remove the TestMessageHandler as it was discussed during the today's meeting (connected to Issue https://github.com/sofa-framework/sofa/issues/94). The reason is that the TestMessageHandler class is more or less included in the behavior of the ExpectMessage & MessageAsTestFailure. In case I'm wrong please tell me if some scenario of yours cannot be handled nicely with the ExpectMessage & MessageAsTestFailure so that I can update their API. Concretely by this PR:; - The class TestMessageHandler is removed; - Handler needed by ExpectMessage & MessageAsTestFailure are now installed by default for tests ( Issue https://github.com/sofa-framework/sofa/issues/94); - The tests using the TestMessageHandler class have been fixed to use the ExpectMessage&MessageAsTestFailure.; - A bug in LoggingMessageHandler.h has also been corrected. Examples of use of the ExpectMessage & MessageAsTestFailure classes... To generate a test failure when an expected message have not been emitted you have to do; ```cpp; {; ExpectMessage raii(Message::Error);; ... do something that must emit a message ...; }; ```; To generate a test failure when a un-expected message have been emitted you have to do; ```cpp; {; 	MessageAsTestFailure raii(Message::Error);; ... do something that must not emit an error message ...; }; ```. The raii can be combined in the following way:; ```cpp; {; 	ExpectMessage warning(Message::Info);; 	MessageAsTestFailure raii(Message::Error);; 	MessageAsTestFailure raii(Message::Warning);; 	...; }; ```. Any suggestion on this API is more than welcome. . TODO:; 	It would be nice to be able to write; ExpectMessage warning(Message::Info & Message::Warning);,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/96
https://github.com/sofa-framework/sofa/pull/96:601,Deployability,install,installed,601,This PR is a proposal to remove the TestMessageHandler as it was discussed during the today's meeting (connected to Issue https://github.com/sofa-framework/sofa/issues/94). The reason is that the TestMessageHandler class is more or less included in the behavior of the ExpectMessage & MessageAsTestFailure. In case I'm wrong please tell me if some scenario of yours cannot be handled nicely with the ExpectMessage & MessageAsTestFailure so that I can update their API. Concretely by this PR:; - The class TestMessageHandler is removed; - Handler needed by ExpectMessage & MessageAsTestFailure are now installed by default for tests ( Issue https://github.com/sofa-framework/sofa/issues/94); - The tests using the TestMessageHandler class have been fixed to use the ExpectMessage&MessageAsTestFailure.; - A bug in LoggingMessageHandler.h has also been corrected. Examples of use of the ExpectMessage & MessageAsTestFailure classes... To generate a test failure when an expected message have not been emitted you have to do; ```cpp; {; ExpectMessage raii(Message::Error);; ... do something that must emit a message ...; }; ```; To generate a test failure when a un-expected message have been emitted you have to do; ```cpp; {; 	MessageAsTestFailure raii(Message::Error);; ... do something that must not emit an error message ...; }; ```. The raii can be combined in the following way:; ```cpp; {; 	ExpectMessage warning(Message::Info);; 	MessageAsTestFailure raii(Message::Error);; 	MessageAsTestFailure raii(Message::Warning);; 	...; }; ```. Any suggestion on this API is more than welcome. . TODO:; 	It would be nice to be able to write; ExpectMessage warning(Message::Info & Message::Warning);,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/96
https://github.com/sofa-framework/sofa/pull/96:285,Integrability,Message,MessageAsTestFailure,285,This PR is a proposal to remove the TestMessageHandler as it was discussed during the today's meeting (connected to Issue https://github.com/sofa-framework/sofa/issues/94). The reason is that the TestMessageHandler class is more or less included in the behavior of the ExpectMessage & MessageAsTestFailure. In case I'm wrong please tell me if some scenario of yours cannot be handled nicely with the ExpectMessage & MessageAsTestFailure so that I can update their API. Concretely by this PR:; - The class TestMessageHandler is removed; - Handler needed by ExpectMessage & MessageAsTestFailure are now installed by default for tests ( Issue https://github.com/sofa-framework/sofa/issues/94); - The tests using the TestMessageHandler class have been fixed to use the ExpectMessage&MessageAsTestFailure.; - A bug in LoggingMessageHandler.h has also been corrected. Examples of use of the ExpectMessage & MessageAsTestFailure classes... To generate a test failure when an expected message have not been emitted you have to do; ```cpp; {; ExpectMessage raii(Message::Error);; ... do something that must emit a message ...; }; ```; To generate a test failure when a un-expected message have been emitted you have to do; ```cpp; {; 	MessageAsTestFailure raii(Message::Error);; ... do something that must not emit an error message ...; }; ```. The raii can be combined in the following way:; ```cpp; {; 	ExpectMessage warning(Message::Info);; 	MessageAsTestFailure raii(Message::Error);; 	MessageAsTestFailure raii(Message::Warning);; 	...; }; ```. Any suggestion on this API is more than welcome. . TODO:; 	It would be nice to be able to write; ExpectMessage warning(Message::Info & Message::Warning);,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/96
https://github.com/sofa-framework/sofa/pull/96:416,Integrability,Message,MessageAsTestFailure,416,This PR is a proposal to remove the TestMessageHandler as it was discussed during the today's meeting (connected to Issue https://github.com/sofa-framework/sofa/issues/94). The reason is that the TestMessageHandler class is more or less included in the behavior of the ExpectMessage & MessageAsTestFailure. In case I'm wrong please tell me if some scenario of yours cannot be handled nicely with the ExpectMessage & MessageAsTestFailure so that I can update their API. Concretely by this PR:; - The class TestMessageHandler is removed; - Handler needed by ExpectMessage & MessageAsTestFailure are now installed by default for tests ( Issue https://github.com/sofa-framework/sofa/issues/94); - The tests using the TestMessageHandler class have been fixed to use the ExpectMessage&MessageAsTestFailure.; - A bug in LoggingMessageHandler.h has also been corrected. Examples of use of the ExpectMessage & MessageAsTestFailure classes... To generate a test failure when an expected message have not been emitted you have to do; ```cpp; {; ExpectMessage raii(Message::Error);; ... do something that must emit a message ...; }; ```; To generate a test failure when a un-expected message have been emitted you have to do; ```cpp; {; 	MessageAsTestFailure raii(Message::Error);; ... do something that must not emit an error message ...; }; ```. The raii can be combined in the following way:; ```cpp; {; 	ExpectMessage warning(Message::Info);; 	MessageAsTestFailure raii(Message::Error);; 	MessageAsTestFailure raii(Message::Warning);; 	...; }; ```. Any suggestion on this API is more than welcome. . TODO:; 	It would be nice to be able to write; ExpectMessage warning(Message::Info & Message::Warning);,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/96
https://github.com/sofa-framework/sofa/pull/96:572,Integrability,Message,MessageAsTestFailure,572,This PR is a proposal to remove the TestMessageHandler as it was discussed during the today's meeting (connected to Issue https://github.com/sofa-framework/sofa/issues/94). The reason is that the TestMessageHandler class is more or less included in the behavior of the ExpectMessage & MessageAsTestFailure. In case I'm wrong please tell me if some scenario of yours cannot be handled nicely with the ExpectMessage & MessageAsTestFailure so that I can update their API. Concretely by this PR:; - The class TestMessageHandler is removed; - Handler needed by ExpectMessage & MessageAsTestFailure are now installed by default for tests ( Issue https://github.com/sofa-framework/sofa/issues/94); - The tests using the TestMessageHandler class have been fixed to use the ExpectMessage&MessageAsTestFailure.; - A bug in LoggingMessageHandler.h has also been corrected. Examples of use of the ExpectMessage & MessageAsTestFailure classes... To generate a test failure when an expected message have not been emitted you have to do; ```cpp; {; ExpectMessage raii(Message::Error);; ... do something that must emit a message ...; }; ```; To generate a test failure when a un-expected message have been emitted you have to do; ```cpp; {; 	MessageAsTestFailure raii(Message::Error);; ... do something that must not emit an error message ...; }; ```. The raii can be combined in the following way:; ```cpp; {; 	ExpectMessage warning(Message::Info);; 	MessageAsTestFailure raii(Message::Error);; 	MessageAsTestFailure raii(Message::Warning);; 	...; }; ```. Any suggestion on this API is more than welcome. . TODO:; 	It would be nice to be able to write; ExpectMessage warning(Message::Info & Message::Warning);,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/96
https://github.com/sofa-framework/sofa/pull/96:779,Integrability,Message,MessageAsTestFailure,779,This PR is a proposal to remove the TestMessageHandler as it was discussed during the today's meeting (connected to Issue https://github.com/sofa-framework/sofa/issues/94). The reason is that the TestMessageHandler class is more or less included in the behavior of the ExpectMessage & MessageAsTestFailure. In case I'm wrong please tell me if some scenario of yours cannot be handled nicely with the ExpectMessage & MessageAsTestFailure so that I can update their API. Concretely by this PR:; - The class TestMessageHandler is removed; - Handler needed by ExpectMessage & MessageAsTestFailure are now installed by default for tests ( Issue https://github.com/sofa-framework/sofa/issues/94); - The tests using the TestMessageHandler class have been fixed to use the ExpectMessage&MessageAsTestFailure.; - A bug in LoggingMessageHandler.h has also been corrected. Examples of use of the ExpectMessage & MessageAsTestFailure classes... To generate a test failure when an expected message have not been emitted you have to do; ```cpp; {; ExpectMessage raii(Message::Error);; ... do something that must emit a message ...; }; ```; To generate a test failure when a un-expected message have been emitted you have to do; ```cpp; {; 	MessageAsTestFailure raii(Message::Error);; ... do something that must not emit an error message ...; }; ```. The raii can be combined in the following way:; ```cpp; {; 	ExpectMessage warning(Message::Info);; 	MessageAsTestFailure raii(Message::Error);; 	MessageAsTestFailure raii(Message::Warning);; 	...; }; ```. Any suggestion on this API is more than welcome. . TODO:; 	It would be nice to be able to write; ExpectMessage warning(Message::Info & Message::Warning);,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/96
https://github.com/sofa-framework/sofa/pull/96:901,Integrability,Message,MessageAsTestFailure,901,This PR is a proposal to remove the TestMessageHandler as it was discussed during the today's meeting (connected to Issue https://github.com/sofa-framework/sofa/issues/94). The reason is that the TestMessageHandler class is more or less included in the behavior of the ExpectMessage & MessageAsTestFailure. In case I'm wrong please tell me if some scenario of yours cannot be handled nicely with the ExpectMessage & MessageAsTestFailure so that I can update their API. Concretely by this PR:; - The class TestMessageHandler is removed; - Handler needed by ExpectMessage & MessageAsTestFailure are now installed by default for tests ( Issue https://github.com/sofa-framework/sofa/issues/94); - The tests using the TestMessageHandler class have been fixed to use the ExpectMessage&MessageAsTestFailure.; - A bug in LoggingMessageHandler.h has also been corrected. Examples of use of the ExpectMessage & MessageAsTestFailure classes... To generate a test failure when an expected message have not been emitted you have to do; ```cpp; {; ExpectMessage raii(Message::Error);; ... do something that must emit a message ...; }; ```; To generate a test failure when a un-expected message have been emitted you have to do; ```cpp; {; 	MessageAsTestFailure raii(Message::Error);; ... do something that must not emit an error message ...; }; ```. The raii can be combined in the following way:; ```cpp; {; 	ExpectMessage warning(Message::Info);; 	MessageAsTestFailure raii(Message::Error);; 	MessageAsTestFailure raii(Message::Warning);; 	...; }; ```. Any suggestion on this API is more than welcome. . TODO:; 	It would be nice to be able to write; ExpectMessage warning(Message::Info & Message::Warning);,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/96
https://github.com/sofa-framework/sofa/pull/96:977,Integrability,message,message,977,This PR is a proposal to remove the TestMessageHandler as it was discussed during the today's meeting (connected to Issue https://github.com/sofa-framework/sofa/issues/94). The reason is that the TestMessageHandler class is more or less included in the behavior of the ExpectMessage & MessageAsTestFailure. In case I'm wrong please tell me if some scenario of yours cannot be handled nicely with the ExpectMessage & MessageAsTestFailure so that I can update their API. Concretely by this PR:; - The class TestMessageHandler is removed; - Handler needed by ExpectMessage & MessageAsTestFailure are now installed by default for tests ( Issue https://github.com/sofa-framework/sofa/issues/94); - The tests using the TestMessageHandler class have been fixed to use the ExpectMessage&MessageAsTestFailure.; - A bug in LoggingMessageHandler.h has also been corrected. Examples of use of the ExpectMessage & MessageAsTestFailure classes... To generate a test failure when an expected message have not been emitted you have to do; ```cpp; {; ExpectMessage raii(Message::Error);; ... do something that must emit a message ...; }; ```; To generate a test failure when a un-expected message have been emitted you have to do; ```cpp; {; 	MessageAsTestFailure raii(Message::Error);; ... do something that must not emit an error message ...; }; ```. The raii can be combined in the following way:; ```cpp; {; 	ExpectMessage warning(Message::Info);; 	MessageAsTestFailure raii(Message::Error);; 	MessageAsTestFailure raii(Message::Warning);; 	...; }; ```. Any suggestion on this API is more than welcome. . TODO:; 	It would be nice to be able to write; ExpectMessage warning(Message::Info & Message::Warning);,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/96
https://github.com/sofa-framework/sofa/pull/96:1053,Integrability,Message,Message,1053,This PR is a proposal to remove the TestMessageHandler as it was discussed during the today's meeting (connected to Issue https://github.com/sofa-framework/sofa/issues/94). The reason is that the TestMessageHandler class is more or less included in the behavior of the ExpectMessage & MessageAsTestFailure. In case I'm wrong please tell me if some scenario of yours cannot be handled nicely with the ExpectMessage & MessageAsTestFailure so that I can update their API. Concretely by this PR:; - The class TestMessageHandler is removed; - Handler needed by ExpectMessage & MessageAsTestFailure are now installed by default for tests ( Issue https://github.com/sofa-framework/sofa/issues/94); - The tests using the TestMessageHandler class have been fixed to use the ExpectMessage&MessageAsTestFailure.; - A bug in LoggingMessageHandler.h has also been corrected. Examples of use of the ExpectMessage & MessageAsTestFailure classes... To generate a test failure when an expected message have not been emitted you have to do; ```cpp; {; ExpectMessage raii(Message::Error);; ... do something that must emit a message ...; }; ```; To generate a test failure when a un-expected message have been emitted you have to do; ```cpp; {; 	MessageAsTestFailure raii(Message::Error);; ... do something that must not emit an error message ...; }; ```. The raii can be combined in the following way:; ```cpp; {; 	ExpectMessage warning(Message::Info);; 	MessageAsTestFailure raii(Message::Error);; 	MessageAsTestFailure raii(Message::Warning);; 	...; }; ```. Any suggestion on this API is more than welcome. . TODO:; 	It would be nice to be able to write; ExpectMessage warning(Message::Info & Message::Warning);,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/96
https://github.com/sofa-framework/sofa/pull/96:1105,Integrability,message,message,1105,This PR is a proposal to remove the TestMessageHandler as it was discussed during the today's meeting (connected to Issue https://github.com/sofa-framework/sofa/issues/94). The reason is that the TestMessageHandler class is more or less included in the behavior of the ExpectMessage & MessageAsTestFailure. In case I'm wrong please tell me if some scenario of yours cannot be handled nicely with the ExpectMessage & MessageAsTestFailure so that I can update their API. Concretely by this PR:; - The class TestMessageHandler is removed; - Handler needed by ExpectMessage & MessageAsTestFailure are now installed by default for tests ( Issue https://github.com/sofa-framework/sofa/issues/94); - The tests using the TestMessageHandler class have been fixed to use the ExpectMessage&MessageAsTestFailure.; - A bug in LoggingMessageHandler.h has also been corrected. Examples of use of the ExpectMessage & MessageAsTestFailure classes... To generate a test failure when an expected message have not been emitted you have to do; ```cpp; {; ExpectMessage raii(Message::Error);; ... do something that must emit a message ...; }; ```; To generate a test failure when a un-expected message have been emitted you have to do; ```cpp; {; 	MessageAsTestFailure raii(Message::Error);; ... do something that must not emit an error message ...; }; ```. The raii can be combined in the following way:; ```cpp; {; 	ExpectMessage warning(Message::Info);; 	MessageAsTestFailure raii(Message::Error);; 	MessageAsTestFailure raii(Message::Warning);; 	...; }; ```. Any suggestion on this API is more than welcome. . TODO:; 	It would be nice to be able to write; ExpectMessage warning(Message::Info & Message::Warning);,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/96
https://github.com/sofa-framework/sofa/pull/96:1172,Integrability,message,message,1172,This PR is a proposal to remove the TestMessageHandler as it was discussed during the today's meeting (connected to Issue https://github.com/sofa-framework/sofa/issues/94). The reason is that the TestMessageHandler class is more or less included in the behavior of the ExpectMessage & MessageAsTestFailure. In case I'm wrong please tell me if some scenario of yours cannot be handled nicely with the ExpectMessage & MessageAsTestFailure so that I can update their API. Concretely by this PR:; - The class TestMessageHandler is removed; - Handler needed by ExpectMessage & MessageAsTestFailure are now installed by default for tests ( Issue https://github.com/sofa-framework/sofa/issues/94); - The tests using the TestMessageHandler class have been fixed to use the ExpectMessage&MessageAsTestFailure.; - A bug in LoggingMessageHandler.h has also been corrected. Examples of use of the ExpectMessage & MessageAsTestFailure classes... To generate a test failure when an expected message have not been emitted you have to do; ```cpp; {; ExpectMessage raii(Message::Error);; ... do something that must emit a message ...; }; ```; To generate a test failure when a un-expected message have been emitted you have to do; ```cpp; {; 	MessageAsTestFailure raii(Message::Error);; ... do something that must not emit an error message ...; }; ```. The raii can be combined in the following way:; ```cpp; {; 	ExpectMessage warning(Message::Info);; 	MessageAsTestFailure raii(Message::Error);; 	MessageAsTestFailure raii(Message::Warning);; 	...; }; ```. Any suggestion on this API is more than welcome. . TODO:; 	It would be nice to be able to write; ExpectMessage warning(Message::Info & Message::Warning);,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/96
https://github.com/sofa-framework/sofa/pull/96:1226,Integrability,Message,MessageAsTestFailure,1226,This PR is a proposal to remove the TestMessageHandler as it was discussed during the today's meeting (connected to Issue https://github.com/sofa-framework/sofa/issues/94). The reason is that the TestMessageHandler class is more or less included in the behavior of the ExpectMessage & MessageAsTestFailure. In case I'm wrong please tell me if some scenario of yours cannot be handled nicely with the ExpectMessage & MessageAsTestFailure so that I can update their API. Concretely by this PR:; - The class TestMessageHandler is removed; - Handler needed by ExpectMessage & MessageAsTestFailure are now installed by default for tests ( Issue https://github.com/sofa-framework/sofa/issues/94); - The tests using the TestMessageHandler class have been fixed to use the ExpectMessage&MessageAsTestFailure.; - A bug in LoggingMessageHandler.h has also been corrected. Examples of use of the ExpectMessage & MessageAsTestFailure classes... To generate a test failure when an expected message have not been emitted you have to do; ```cpp; {; ExpectMessage raii(Message::Error);; ... do something that must emit a message ...; }; ```; To generate a test failure when a un-expected message have been emitted you have to do; ```cpp; {; 	MessageAsTestFailure raii(Message::Error);; ... do something that must not emit an error message ...; }; ```. The raii can be combined in the following way:; ```cpp; {; 	ExpectMessage warning(Message::Info);; 	MessageAsTestFailure raii(Message::Error);; 	MessageAsTestFailure raii(Message::Warning);; 	...; }; ```. Any suggestion on this API is more than welcome. . TODO:; 	It would be nice to be able to write; ExpectMessage warning(Message::Info & Message::Warning);,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/96
https://github.com/sofa-framework/sofa/pull/96:1252,Integrability,Message,Message,1252,This PR is a proposal to remove the TestMessageHandler as it was discussed during the today's meeting (connected to Issue https://github.com/sofa-framework/sofa/issues/94). The reason is that the TestMessageHandler class is more or less included in the behavior of the ExpectMessage & MessageAsTestFailure. In case I'm wrong please tell me if some scenario of yours cannot be handled nicely with the ExpectMessage & MessageAsTestFailure so that I can update their API. Concretely by this PR:; - The class TestMessageHandler is removed; - Handler needed by ExpectMessage & MessageAsTestFailure are now installed by default for tests ( Issue https://github.com/sofa-framework/sofa/issues/94); - The tests using the TestMessageHandler class have been fixed to use the ExpectMessage&MessageAsTestFailure.; - A bug in LoggingMessageHandler.h has also been corrected. Examples of use of the ExpectMessage & MessageAsTestFailure classes... To generate a test failure when an expected message have not been emitted you have to do; ```cpp; {; ExpectMessage raii(Message::Error);; ... do something that must emit a message ...; }; ```; To generate a test failure when a un-expected message have been emitted you have to do; ```cpp; {; 	MessageAsTestFailure raii(Message::Error);; ... do something that must not emit an error message ...; }; ```. The raii can be combined in the following way:; ```cpp; {; 	ExpectMessage warning(Message::Info);; 	MessageAsTestFailure raii(Message::Error);; 	MessageAsTestFailure raii(Message::Warning);; 	...; }; ```. Any suggestion on this API is more than welcome. . TODO:; 	It would be nice to be able to write; ExpectMessage warning(Message::Info & Message::Warning);,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/96
https://github.com/sofa-framework/sofa/pull/96:1315,Integrability,message,message,1315,This PR is a proposal to remove the TestMessageHandler as it was discussed during the today's meeting (connected to Issue https://github.com/sofa-framework/sofa/issues/94). The reason is that the TestMessageHandler class is more or less included in the behavior of the ExpectMessage & MessageAsTestFailure. In case I'm wrong please tell me if some scenario of yours cannot be handled nicely with the ExpectMessage & MessageAsTestFailure so that I can update their API. Concretely by this PR:; - The class TestMessageHandler is removed; - Handler needed by ExpectMessage & MessageAsTestFailure are now installed by default for tests ( Issue https://github.com/sofa-framework/sofa/issues/94); - The tests using the TestMessageHandler class have been fixed to use the ExpectMessage&MessageAsTestFailure.; - A bug in LoggingMessageHandler.h has also been corrected. Examples of use of the ExpectMessage & MessageAsTestFailure classes... To generate a test failure when an expected message have not been emitted you have to do; ```cpp; {; ExpectMessage raii(Message::Error);; ... do something that must emit a message ...; }; ```; To generate a test failure when a un-expected message have been emitted you have to do; ```cpp; {; 	MessageAsTestFailure raii(Message::Error);; ... do something that must not emit an error message ...; }; ```. The raii can be combined in the following way:; ```cpp; {; 	ExpectMessage warning(Message::Info);; 	MessageAsTestFailure raii(Message::Error);; 	MessageAsTestFailure raii(Message::Warning);; 	...; }; ```. Any suggestion on this API is more than welcome. . TODO:; 	It would be nice to be able to write; ExpectMessage warning(Message::Info & Message::Warning);,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/96
https://github.com/sofa-framework/sofa/pull/96:1418,Integrability,Message,Message,1418,This PR is a proposal to remove the TestMessageHandler as it was discussed during the today's meeting (connected to Issue https://github.com/sofa-framework/sofa/issues/94). The reason is that the TestMessageHandler class is more or less included in the behavior of the ExpectMessage & MessageAsTestFailure. In case I'm wrong please tell me if some scenario of yours cannot be handled nicely with the ExpectMessage & MessageAsTestFailure so that I can update their API. Concretely by this PR:; - The class TestMessageHandler is removed; - Handler needed by ExpectMessage & MessageAsTestFailure are now installed by default for tests ( Issue https://github.com/sofa-framework/sofa/issues/94); - The tests using the TestMessageHandler class have been fixed to use the ExpectMessage&MessageAsTestFailure.; - A bug in LoggingMessageHandler.h has also been corrected. Examples of use of the ExpectMessage & MessageAsTestFailure classes... To generate a test failure when an expected message have not been emitted you have to do; ```cpp; {; ExpectMessage raii(Message::Error);; ... do something that must emit a message ...; }; ```; To generate a test failure when a un-expected message have been emitted you have to do; ```cpp; {; 	MessageAsTestFailure raii(Message::Error);; ... do something that must not emit an error message ...; }; ```. The raii can be combined in the following way:; ```cpp; {; 	ExpectMessage warning(Message::Info);; 	MessageAsTestFailure raii(Message::Error);; 	MessageAsTestFailure raii(Message::Warning);; 	...; }; ```. Any suggestion on this API is more than welcome. . TODO:; 	It would be nice to be able to write; ExpectMessage warning(Message::Info & Message::Warning);,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/96
https://github.com/sofa-framework/sofa/pull/96:1436,Integrability,Message,MessageAsTestFailure,1436,This PR is a proposal to remove the TestMessageHandler as it was discussed during the today's meeting (connected to Issue https://github.com/sofa-framework/sofa/issues/94). The reason is that the TestMessageHandler class is more or less included in the behavior of the ExpectMessage & MessageAsTestFailure. In case I'm wrong please tell me if some scenario of yours cannot be handled nicely with the ExpectMessage & MessageAsTestFailure so that I can update their API. Concretely by this PR:; - The class TestMessageHandler is removed; - Handler needed by ExpectMessage & MessageAsTestFailure are now installed by default for tests ( Issue https://github.com/sofa-framework/sofa/issues/94); - The tests using the TestMessageHandler class have been fixed to use the ExpectMessage&MessageAsTestFailure.; - A bug in LoggingMessageHandler.h has also been corrected. Examples of use of the ExpectMessage & MessageAsTestFailure classes... To generate a test failure when an expected message have not been emitted you have to do; ```cpp; {; ExpectMessage raii(Message::Error);; ... do something that must emit a message ...; }; ```; To generate a test failure when a un-expected message have been emitted you have to do; ```cpp; {; 	MessageAsTestFailure raii(Message::Error);; ... do something that must not emit an error message ...; }; ```. The raii can be combined in the following way:; ```cpp; {; 	ExpectMessage warning(Message::Info);; 	MessageAsTestFailure raii(Message::Error);; 	MessageAsTestFailure raii(Message::Warning);; 	...; }; ```. Any suggestion on this API is more than welcome. . TODO:; 	It would be nice to be able to write; ExpectMessage warning(Message::Info & Message::Warning);,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/96
https://github.com/sofa-framework/sofa/pull/96:1462,Integrability,Message,Message,1462,This PR is a proposal to remove the TestMessageHandler as it was discussed during the today's meeting (connected to Issue https://github.com/sofa-framework/sofa/issues/94). The reason is that the TestMessageHandler class is more or less included in the behavior of the ExpectMessage & MessageAsTestFailure. In case I'm wrong please tell me if some scenario of yours cannot be handled nicely with the ExpectMessage & MessageAsTestFailure so that I can update their API. Concretely by this PR:; - The class TestMessageHandler is removed; - Handler needed by ExpectMessage & MessageAsTestFailure are now installed by default for tests ( Issue https://github.com/sofa-framework/sofa/issues/94); - The tests using the TestMessageHandler class have been fixed to use the ExpectMessage&MessageAsTestFailure.; - A bug in LoggingMessageHandler.h has also been corrected. Examples of use of the ExpectMessage & MessageAsTestFailure classes... To generate a test failure when an expected message have not been emitted you have to do; ```cpp; {; ExpectMessage raii(Message::Error);; ... do something that must emit a message ...; }; ```; To generate a test failure when a un-expected message have been emitted you have to do; ```cpp; {; 	MessageAsTestFailure raii(Message::Error);; ... do something that must not emit an error message ...; }; ```. The raii can be combined in the following way:; ```cpp; {; 	ExpectMessage warning(Message::Info);; 	MessageAsTestFailure raii(Message::Error);; 	MessageAsTestFailure raii(Message::Warning);; 	...; }; ```. Any suggestion on this API is more than welcome. . TODO:; 	It would be nice to be able to write; ExpectMessage warning(Message::Info & Message::Warning);,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/96
https://github.com/sofa-framework/sofa/pull/96:1481,Integrability,Message,MessageAsTestFailure,1481,This PR is a proposal to remove the TestMessageHandler as it was discussed during the today's meeting (connected to Issue https://github.com/sofa-framework/sofa/issues/94). The reason is that the TestMessageHandler class is more or less included in the behavior of the ExpectMessage & MessageAsTestFailure. In case I'm wrong please tell me if some scenario of yours cannot be handled nicely with the ExpectMessage & MessageAsTestFailure so that I can update their API. Concretely by this PR:; - The class TestMessageHandler is removed; - Handler needed by ExpectMessage & MessageAsTestFailure are now installed by default for tests ( Issue https://github.com/sofa-framework/sofa/issues/94); - The tests using the TestMessageHandler class have been fixed to use the ExpectMessage&MessageAsTestFailure.; - A bug in LoggingMessageHandler.h has also been corrected. Examples of use of the ExpectMessage & MessageAsTestFailure classes... To generate a test failure when an expected message have not been emitted you have to do; ```cpp; {; ExpectMessage raii(Message::Error);; ... do something that must emit a message ...; }; ```; To generate a test failure when a un-expected message have been emitted you have to do; ```cpp; {; 	MessageAsTestFailure raii(Message::Error);; ... do something that must not emit an error message ...; }; ```. The raii can be combined in the following way:; ```cpp; {; 	ExpectMessage warning(Message::Info);; 	MessageAsTestFailure raii(Message::Error);; 	MessageAsTestFailure raii(Message::Warning);; 	...; }; ```. Any suggestion on this API is more than welcome. . TODO:; 	It would be nice to be able to write; ExpectMessage warning(Message::Info & Message::Warning);,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/96
https://github.com/sofa-framework/sofa/pull/96:1507,Integrability,Message,Message,1507,This PR is a proposal to remove the TestMessageHandler as it was discussed during the today's meeting (connected to Issue https://github.com/sofa-framework/sofa/issues/94). The reason is that the TestMessageHandler class is more or less included in the behavior of the ExpectMessage & MessageAsTestFailure. In case I'm wrong please tell me if some scenario of yours cannot be handled nicely with the ExpectMessage & MessageAsTestFailure so that I can update their API. Concretely by this PR:; - The class TestMessageHandler is removed; - Handler needed by ExpectMessage & MessageAsTestFailure are now installed by default for tests ( Issue https://github.com/sofa-framework/sofa/issues/94); - The tests using the TestMessageHandler class have been fixed to use the ExpectMessage&MessageAsTestFailure.; - A bug in LoggingMessageHandler.h has also been corrected. Examples of use of the ExpectMessage & MessageAsTestFailure classes... To generate a test failure when an expected message have not been emitted you have to do; ```cpp; {; ExpectMessage raii(Message::Error);; ... do something that must emit a message ...; }; ```; To generate a test failure when a un-expected message have been emitted you have to do; ```cpp; {; 	MessageAsTestFailure raii(Message::Error);; ... do something that must not emit an error message ...; }; ```. The raii can be combined in the following way:; ```cpp; {; 	ExpectMessage warning(Message::Info);; 	MessageAsTestFailure raii(Message::Error);; 	MessageAsTestFailure raii(Message::Warning);; 	...; }; ```. Any suggestion on this API is more than welcome. . TODO:; 	It would be nice to be able to write; ExpectMessage warning(Message::Info & Message::Warning);,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/96
https://github.com/sofa-framework/sofa/pull/96:1660,Integrability,Message,Message,1660,This PR is a proposal to remove the TestMessageHandler as it was discussed during the today's meeting (connected to Issue https://github.com/sofa-framework/sofa/issues/94). The reason is that the TestMessageHandler class is more or less included in the behavior of the ExpectMessage & MessageAsTestFailure. In case I'm wrong please tell me if some scenario of yours cannot be handled nicely with the ExpectMessage & MessageAsTestFailure so that I can update their API. Concretely by this PR:; - The class TestMessageHandler is removed; - Handler needed by ExpectMessage & MessageAsTestFailure are now installed by default for tests ( Issue https://github.com/sofa-framework/sofa/issues/94); - The tests using the TestMessageHandler class have been fixed to use the ExpectMessage&MessageAsTestFailure.; - A bug in LoggingMessageHandler.h has also been corrected. Examples of use of the ExpectMessage & MessageAsTestFailure classes... To generate a test failure when an expected message have not been emitted you have to do; ```cpp; {; ExpectMessage raii(Message::Error);; ... do something that must emit a message ...; }; ```; To generate a test failure when a un-expected message have been emitted you have to do; ```cpp; {; 	MessageAsTestFailure raii(Message::Error);; ... do something that must not emit an error message ...; }; ```. The raii can be combined in the following way:; ```cpp; {; 	ExpectMessage warning(Message::Info);; 	MessageAsTestFailure raii(Message::Error);; 	MessageAsTestFailure raii(Message::Warning);; 	...; }; ```. Any suggestion on this API is more than welcome. . TODO:; 	It would be nice to be able to write; ExpectMessage warning(Message::Info & Message::Warning);,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/96
https://github.com/sofa-framework/sofa/pull/96:1676,Integrability,Message,Message,1676,This PR is a proposal to remove the TestMessageHandler as it was discussed during the today's meeting (connected to Issue https://github.com/sofa-framework/sofa/issues/94). The reason is that the TestMessageHandler class is more or less included in the behavior of the ExpectMessage & MessageAsTestFailure. In case I'm wrong please tell me if some scenario of yours cannot be handled nicely with the ExpectMessage & MessageAsTestFailure so that I can update their API. Concretely by this PR:; - The class TestMessageHandler is removed; - Handler needed by ExpectMessage & MessageAsTestFailure are now installed by default for tests ( Issue https://github.com/sofa-framework/sofa/issues/94); - The tests using the TestMessageHandler class have been fixed to use the ExpectMessage&MessageAsTestFailure.; - A bug in LoggingMessageHandler.h has also been corrected. Examples of use of the ExpectMessage & MessageAsTestFailure classes... To generate a test failure when an expected message have not been emitted you have to do; ```cpp; {; ExpectMessage raii(Message::Error);; ... do something that must emit a message ...; }; ```; To generate a test failure when a un-expected message have been emitted you have to do; ```cpp; {; 	MessageAsTestFailure raii(Message::Error);; ... do something that must not emit an error message ...; }; ```. The raii can be combined in the following way:; ```cpp; {; 	ExpectMessage warning(Message::Info);; 	MessageAsTestFailure raii(Message::Error);; 	MessageAsTestFailure raii(Message::Warning);; 	...; }; ```. Any suggestion on this API is more than welcome. . TODO:; 	It would be nice to be able to write; ExpectMessage warning(Message::Info & Message::Warning);,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/96
https://github.com/sofa-framework/sofa/pull/96:36,Testability,Test,TestMessageHandler,36,This PR is a proposal to remove the TestMessageHandler as it was discussed during the today's meeting (connected to Issue https://github.com/sofa-framework/sofa/issues/94). The reason is that the TestMessageHandler class is more or less included in the behavior of the ExpectMessage & MessageAsTestFailure. In case I'm wrong please tell me if some scenario of yours cannot be handled nicely with the ExpectMessage & MessageAsTestFailure so that I can update their API. Concretely by this PR:; - The class TestMessageHandler is removed; - Handler needed by ExpectMessage & MessageAsTestFailure are now installed by default for tests ( Issue https://github.com/sofa-framework/sofa/issues/94); - The tests using the TestMessageHandler class have been fixed to use the ExpectMessage&MessageAsTestFailure.; - A bug in LoggingMessageHandler.h has also been corrected. Examples of use of the ExpectMessage & MessageAsTestFailure classes... To generate a test failure when an expected message have not been emitted you have to do; ```cpp; {; ExpectMessage raii(Message::Error);; ... do something that must emit a message ...; }; ```; To generate a test failure when a un-expected message have been emitted you have to do; ```cpp; {; 	MessageAsTestFailure raii(Message::Error);; ... do something that must not emit an error message ...; }; ```. The raii can be combined in the following way:; ```cpp; {; 	ExpectMessage warning(Message::Info);; 	MessageAsTestFailure raii(Message::Error);; 	MessageAsTestFailure raii(Message::Warning);; 	...; }; ```. Any suggestion on this API is more than welcome. . TODO:; 	It would be nice to be able to write; ExpectMessage warning(Message::Info & Message::Warning);,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/96
https://github.com/sofa-framework/sofa/pull/96:196,Testability,Test,TestMessageHandler,196,This PR is a proposal to remove the TestMessageHandler as it was discussed during the today's meeting (connected to Issue https://github.com/sofa-framework/sofa/issues/94). The reason is that the TestMessageHandler class is more or less included in the behavior of the ExpectMessage & MessageAsTestFailure. In case I'm wrong please tell me if some scenario of yours cannot be handled nicely with the ExpectMessage & MessageAsTestFailure so that I can update their API. Concretely by this PR:; - The class TestMessageHandler is removed; - Handler needed by ExpectMessage & MessageAsTestFailure are now installed by default for tests ( Issue https://github.com/sofa-framework/sofa/issues/94); - The tests using the TestMessageHandler class have been fixed to use the ExpectMessage&MessageAsTestFailure.; - A bug in LoggingMessageHandler.h has also been corrected. Examples of use of the ExpectMessage & MessageAsTestFailure classes... To generate a test failure when an expected message have not been emitted you have to do; ```cpp; {; ExpectMessage raii(Message::Error);; ... do something that must emit a message ...; }; ```; To generate a test failure when a un-expected message have been emitted you have to do; ```cpp; {; 	MessageAsTestFailure raii(Message::Error);; ... do something that must not emit an error message ...; }; ```. The raii can be combined in the following way:; ```cpp; {; 	ExpectMessage warning(Message::Info);; 	MessageAsTestFailure raii(Message::Error);; 	MessageAsTestFailure raii(Message::Warning);; 	...; }; ```. Any suggestion on this API is more than welcome. . TODO:; 	It would be nice to be able to write; ExpectMessage warning(Message::Info & Message::Warning);,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/96
https://github.com/sofa-framework/sofa/pull/96:505,Testability,Test,TestMessageHandler,505,This PR is a proposal to remove the TestMessageHandler as it was discussed during the today's meeting (connected to Issue https://github.com/sofa-framework/sofa/issues/94). The reason is that the TestMessageHandler class is more or less included in the behavior of the ExpectMessage & MessageAsTestFailure. In case I'm wrong please tell me if some scenario of yours cannot be handled nicely with the ExpectMessage & MessageAsTestFailure so that I can update their API. Concretely by this PR:; - The class TestMessageHandler is removed; - Handler needed by ExpectMessage & MessageAsTestFailure are now installed by default for tests ( Issue https://github.com/sofa-framework/sofa/issues/94); - The tests using the TestMessageHandler class have been fixed to use the ExpectMessage&MessageAsTestFailure.; - A bug in LoggingMessageHandler.h has also been corrected. Examples of use of the ExpectMessage & MessageAsTestFailure classes... To generate a test failure when an expected message have not been emitted you have to do; ```cpp; {; ExpectMessage raii(Message::Error);; ... do something that must emit a message ...; }; ```; To generate a test failure when a un-expected message have been emitted you have to do; ```cpp; {; 	MessageAsTestFailure raii(Message::Error);; ... do something that must not emit an error message ...; }; ```. The raii can be combined in the following way:; ```cpp; {; 	ExpectMessage warning(Message::Info);; 	MessageAsTestFailure raii(Message::Error);; 	MessageAsTestFailure raii(Message::Warning);; 	...; }; ```. Any suggestion on this API is more than welcome. . TODO:; 	It would be nice to be able to write; ExpectMessage warning(Message::Info & Message::Warning);,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/96
https://github.com/sofa-framework/sofa/pull/96:626,Testability,test,tests,626,This PR is a proposal to remove the TestMessageHandler as it was discussed during the today's meeting (connected to Issue https://github.com/sofa-framework/sofa/issues/94). The reason is that the TestMessageHandler class is more or less included in the behavior of the ExpectMessage & MessageAsTestFailure. In case I'm wrong please tell me if some scenario of yours cannot be handled nicely with the ExpectMessage & MessageAsTestFailure so that I can update their API. Concretely by this PR:; - The class TestMessageHandler is removed; - Handler needed by ExpectMessage & MessageAsTestFailure are now installed by default for tests ( Issue https://github.com/sofa-framework/sofa/issues/94); - The tests using the TestMessageHandler class have been fixed to use the ExpectMessage&MessageAsTestFailure.; - A bug in LoggingMessageHandler.h has also been corrected. Examples of use of the ExpectMessage & MessageAsTestFailure classes... To generate a test failure when an expected message have not been emitted you have to do; ```cpp; {; ExpectMessage raii(Message::Error);; ... do something that must emit a message ...; }; ```; To generate a test failure when a un-expected message have been emitted you have to do; ```cpp; {; 	MessageAsTestFailure raii(Message::Error);; ... do something that must not emit an error message ...; }; ```. The raii can be combined in the following way:; ```cpp; {; 	ExpectMessage warning(Message::Info);; 	MessageAsTestFailure raii(Message::Error);; 	MessageAsTestFailure raii(Message::Warning);; 	...; }; ```. Any suggestion on this API is more than welcome. . TODO:; 	It would be nice to be able to write; ExpectMessage warning(Message::Info & Message::Warning);,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/96
https://github.com/sofa-framework/sofa/pull/96:697,Testability,test,tests,697,This PR is a proposal to remove the TestMessageHandler as it was discussed during the today's meeting (connected to Issue https://github.com/sofa-framework/sofa/issues/94). The reason is that the TestMessageHandler class is more or less included in the behavior of the ExpectMessage & MessageAsTestFailure. In case I'm wrong please tell me if some scenario of yours cannot be handled nicely with the ExpectMessage & MessageAsTestFailure so that I can update their API. Concretely by this PR:; - The class TestMessageHandler is removed; - Handler needed by ExpectMessage & MessageAsTestFailure are now installed by default for tests ( Issue https://github.com/sofa-framework/sofa/issues/94); - The tests using the TestMessageHandler class have been fixed to use the ExpectMessage&MessageAsTestFailure.; - A bug in LoggingMessageHandler.h has also been corrected. Examples of use of the ExpectMessage & MessageAsTestFailure classes... To generate a test failure when an expected message have not been emitted you have to do; ```cpp; {; ExpectMessage raii(Message::Error);; ... do something that must emit a message ...; }; ```; To generate a test failure when a un-expected message have been emitted you have to do; ```cpp; {; 	MessageAsTestFailure raii(Message::Error);; ... do something that must not emit an error message ...; }; ```. The raii can be combined in the following way:; ```cpp; {; 	ExpectMessage warning(Message::Info);; 	MessageAsTestFailure raii(Message::Error);; 	MessageAsTestFailure raii(Message::Warning);; 	...; }; ```. Any suggestion on this API is more than welcome. . TODO:; 	It would be nice to be able to write; ExpectMessage warning(Message::Info & Message::Warning);,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/96
https://github.com/sofa-framework/sofa/pull/96:713,Testability,Test,TestMessageHandler,713,This PR is a proposal to remove the TestMessageHandler as it was discussed during the today's meeting (connected to Issue https://github.com/sofa-framework/sofa/issues/94). The reason is that the TestMessageHandler class is more or less included in the behavior of the ExpectMessage & MessageAsTestFailure. In case I'm wrong please tell me if some scenario of yours cannot be handled nicely with the ExpectMessage & MessageAsTestFailure so that I can update their API. Concretely by this PR:; - The class TestMessageHandler is removed; - Handler needed by ExpectMessage & MessageAsTestFailure are now installed by default for tests ( Issue https://github.com/sofa-framework/sofa/issues/94); - The tests using the TestMessageHandler class have been fixed to use the ExpectMessage&MessageAsTestFailure.; - A bug in LoggingMessageHandler.h has also been corrected. Examples of use of the ExpectMessage & MessageAsTestFailure classes... To generate a test failure when an expected message have not been emitted you have to do; ```cpp; {; ExpectMessage raii(Message::Error);; ... do something that must emit a message ...; }; ```; To generate a test failure when a un-expected message have been emitted you have to do; ```cpp; {; 	MessageAsTestFailure raii(Message::Error);; ... do something that must not emit an error message ...; }; ```. The raii can be combined in the following way:; ```cpp; {; 	ExpectMessage warning(Message::Info);; 	MessageAsTestFailure raii(Message::Error);; 	MessageAsTestFailure raii(Message::Warning);; 	...; }; ```. Any suggestion on this API is more than welcome. . TODO:; 	It would be nice to be able to write; ExpectMessage warning(Message::Info & Message::Warning);,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/96
https://github.com/sofa-framework/sofa/pull/96:813,Testability,Log,LoggingMessageHandler,813,This PR is a proposal to remove the TestMessageHandler as it was discussed during the today's meeting (connected to Issue https://github.com/sofa-framework/sofa/issues/94). The reason is that the TestMessageHandler class is more or less included in the behavior of the ExpectMessage & MessageAsTestFailure. In case I'm wrong please tell me if some scenario of yours cannot be handled nicely with the ExpectMessage & MessageAsTestFailure so that I can update their API. Concretely by this PR:; - The class TestMessageHandler is removed; - Handler needed by ExpectMessage & MessageAsTestFailure are now installed by default for tests ( Issue https://github.com/sofa-framework/sofa/issues/94); - The tests using the TestMessageHandler class have been fixed to use the ExpectMessage&MessageAsTestFailure.; - A bug in LoggingMessageHandler.h has also been corrected. Examples of use of the ExpectMessage & MessageAsTestFailure classes... To generate a test failure when an expected message have not been emitted you have to do; ```cpp; {; ExpectMessage raii(Message::Error);; ... do something that must emit a message ...; }; ```; To generate a test failure when a un-expected message have been emitted you have to do; ```cpp; {; 	MessageAsTestFailure raii(Message::Error);; ... do something that must not emit an error message ...; }; ```. The raii can be combined in the following way:; ```cpp; {; 	ExpectMessage warning(Message::Info);; 	MessageAsTestFailure raii(Message::Error);; 	MessageAsTestFailure raii(Message::Warning);; 	...; }; ```. Any suggestion on this API is more than welcome. . TODO:; 	It would be nice to be able to write; ExpectMessage warning(Message::Info & Message::Warning);,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/96
https://github.com/sofa-framework/sofa/pull/96:947,Testability,test,test,947,This PR is a proposal to remove the TestMessageHandler as it was discussed during the today's meeting (connected to Issue https://github.com/sofa-framework/sofa/issues/94). The reason is that the TestMessageHandler class is more or less included in the behavior of the ExpectMessage & MessageAsTestFailure. In case I'm wrong please tell me if some scenario of yours cannot be handled nicely with the ExpectMessage & MessageAsTestFailure so that I can update their API. Concretely by this PR:; - The class TestMessageHandler is removed; - Handler needed by ExpectMessage & MessageAsTestFailure are now installed by default for tests ( Issue https://github.com/sofa-framework/sofa/issues/94); - The tests using the TestMessageHandler class have been fixed to use the ExpectMessage&MessageAsTestFailure.; - A bug in LoggingMessageHandler.h has also been corrected. Examples of use of the ExpectMessage & MessageAsTestFailure classes... To generate a test failure when an expected message have not been emitted you have to do; ```cpp; {; ExpectMessage raii(Message::Error);; ... do something that must emit a message ...; }; ```; To generate a test failure when a un-expected message have been emitted you have to do; ```cpp; {; 	MessageAsTestFailure raii(Message::Error);; ... do something that must not emit an error message ...; }; ```. The raii can be combined in the following way:; ```cpp; {; 	ExpectMessage warning(Message::Info);; 	MessageAsTestFailure raii(Message::Error);; 	MessageAsTestFailure raii(Message::Warning);; 	...; }; ```. Any suggestion on this API is more than welcome. . TODO:; 	It would be nice to be able to write; ExpectMessage warning(Message::Info & Message::Warning);,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/96
https://github.com/sofa-framework/sofa/pull/96:1140,Testability,test,test,1140,This PR is a proposal to remove the TestMessageHandler as it was discussed during the today's meeting (connected to Issue https://github.com/sofa-framework/sofa/issues/94). The reason is that the TestMessageHandler class is more or less included in the behavior of the ExpectMessage & MessageAsTestFailure. In case I'm wrong please tell me if some scenario of yours cannot be handled nicely with the ExpectMessage & MessageAsTestFailure so that I can update their API. Concretely by this PR:; - The class TestMessageHandler is removed; - Handler needed by ExpectMessage & MessageAsTestFailure are now installed by default for tests ( Issue https://github.com/sofa-framework/sofa/issues/94); - The tests using the TestMessageHandler class have been fixed to use the ExpectMessage&MessageAsTestFailure.; - A bug in LoggingMessageHandler.h has also been corrected. Examples of use of the ExpectMessage & MessageAsTestFailure classes... To generate a test failure when an expected message have not been emitted you have to do; ```cpp; {; ExpectMessage raii(Message::Error);; ... do something that must emit a message ...; }; ```; To generate a test failure when a un-expected message have been emitted you have to do; ```cpp; {; 	MessageAsTestFailure raii(Message::Error);; ... do something that must not emit an error message ...; }; ```. The raii can be combined in the following way:; ```cpp; {; 	ExpectMessage warning(Message::Info);; 	MessageAsTestFailure raii(Message::Error);; 	MessageAsTestFailure raii(Message::Warning);; 	...; }; ```. Any suggestion on this API is more than welcome. . TODO:; 	It would be nice to be able to write; ExpectMessage warning(Message::Info & Message::Warning);,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/96
https://github.com/sofa-framework/sofa/pull/97:13,Testability,test,tests,13,"New batch of tests from DEFROST team. This branch only contains new tests, no new feature.",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/97
https://github.com/sofa-framework/sofa/pull/97:68,Testability,test,tests,68,"New batch of tests from DEFROST team. This branch only contains new tests, no new feature.",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/97
https://github.com/sofa-framework/sofa/issues/98:84,Deployability,continuous,continuous,84,"Currently sofa does not compile with VS2013, and I see there is no VS2013 VM on the continuous integration.; - Is VS2013 support dropped ?; - I read in some email that there is a plan to have again a VS2013 VM, is it still the plan ?. thomas",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/98
https://github.com/sofa-framework/sofa/issues/98:95,Deployability,integrat,integration,95,"Currently sofa does not compile with VS2013, and I see there is no VS2013 VM on the continuous integration.; - Is VS2013 support dropped ?; - I read in some email that there is a plan to have again a VS2013 VM, is it still the plan ?. thomas",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/98
https://github.com/sofa-framework/sofa/issues/98:95,Integrability,integrat,integration,95,"Currently sofa does not compile with VS2013, and I see there is no VS2013 VM on the continuous integration.; - Is VS2013 support dropped ?; - I read in some email that there is a plan to have again a VS2013 VM, is it still the plan ?. thomas",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/98
https://github.com/sofa-framework/sofa/pull/99:4,Integrability,depend,dependencies,4,ADD dependencies to boost::filesystem and boost::locale. Fixes #17,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/99
https://github.com/sofa-framework/sofa/pull/101:151,Usability,feedback,feedback,151,"ADD msg_info_when(verboseSomething) as an alternative to ; if(veboseSomething) sout <<. This shouldn't break existing code. If interested, please give feedback to this way of writing conditional printing.",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/101
https://github.com/sofa-framework/sofa/pull/102:114,Deployability,update,update,114,This PR is for FileMonitor on Mac. ; Added a test in FileMonitor_test to improve test coverage.; Required also to update FileMonitor_test to comply with some osx limitations (ie. delay before file change can be detected by the program).,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/102
https://github.com/sofa-framework/sofa/pull/102:211,Safety,detect,detected,211,This PR is for FileMonitor on Mac. ; Added a test in FileMonitor_test to improve test coverage.; Required also to update FileMonitor_test to comply with some osx limitations (ie. delay before file change can be detected by the program).,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/102
https://github.com/sofa-framework/sofa/pull/102:45,Testability,test,test,45,This PR is for FileMonitor on Mac. ; Added a test in FileMonitor_test to improve test coverage.; Required also to update FileMonitor_test to comply with some osx limitations (ie. delay before file change can be detected by the program).,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/102
https://github.com/sofa-framework/sofa/pull/102:81,Testability,test,test,81,This PR is for FileMonitor on Mac. ; Added a test in FileMonitor_test to improve test coverage.; Required also to update FileMonitor_test to comply with some osx limitations (ie. delay before file change can be detected by the program).,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/102
https://github.com/sofa-framework/sofa/issues/103:11,Deployability,update,update,11,We need to update the documentation to describe the new features.,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/103
https://github.com/sofa-framework/sofa/pull/105:381,Integrability,depend,depend,381,"This PR is focused on cleaning the DefaultPipeline component. It contains:; - several tests with one of them is an OpenIssue (the depth parameter that is not checked nor generate warnings); - fix of the data field names that are not following the sofa guidelines, this may break code; directly using these attributes. ; - change some of the docstring to be more helpful; ; It also depend on the following other pull-requests: ; - https://github.com/sofa-framework/sofa/pull/101",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/105
https://github.com/sofa-framework/sofa/pull/105:86,Testability,test,tests,86,"This PR is focused on cleaning the DefaultPipeline component. It contains:; - several tests with one of them is an OpenIssue (the depth parameter that is not checked nor generate warnings); - fix of the data field names that are not following the sofa guidelines, this may break code; directly using these attributes. ; - change some of the docstring to be more helpful; ; It also depend on the following other pull-requests: ; - https://github.com/sofa-framework/sofa/pull/101",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/105
https://github.com/sofa-framework/sofa/pull/105:252,Usability,guid,guidelines,252,"This PR is focused on cleaning the DefaultPipeline component. It contains:; - several tests with one of them is an OpenIssue (the depth parameter that is not checked nor generate warnings); - fix of the data field names that are not following the sofa guidelines, this may break code; directly using these attributes. ; - change some of the docstring to be more helpful; ; It also depend on the following other pull-requests: ; - https://github.com/sofa-framework/sofa/pull/101",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/105
https://github.com/sofa-framework/sofa/pull/106:1553,Availability,failure,failure,1553,"Let's start from the begining. . By default the msg_ api does not stores the messages because in some context of use it is not needed while in some other it is (in a non graphical sofa vs in a sofa GUI). . Thanks to the MessageHandler class it is easy to add custom message storage that fits the application's needs.; ; Currently the existing LoggingMessageHandler can be used to store in a single storage queue the messages. The queue can be queried to get the messages for whatever the application developer want to do with them (displaying them in GUI or showing a long history, ...). In serr/sout API a different scheme is used as the history is stored at the Base object level in a (size increasing) string. This behavior is now possible with the PerComponentLoggingMessageHandler.; This behavior is closer to the existing serr/sout but it also have several improved properties:; - the message are really stored (not just the 'text' description);; - no text concatenation (memory resize, memory copy) at each message, ; - the queue size of each component can be controlled with a data field as well as the message type to store or to ignore in the queue. ; - when the handler is not installed...there is not recording of the message...so there is a computation & memory zero cost. . NB: The d_msgLevel and d_logLevel in Base* are only there for discussion but they are currently unused now. . There PR also contains several new tests. . Checklist to be merge: ; - [x] succeed on each compilation setup on the CI.; - [x] does not generates new test failure. ; - [x] does not seems to break existing scenes. ; - [x] does not seems to break API compatibility. ; - [x] introduces new component with tests & documentation. ; - [ ] is now 1 week old and no one send a 'no go' comment.",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/106
https://github.com/sofa-framework/sofa/pull/106:1188,Deployability,install,installed,1188,"Let's start from the begining. . By default the msg_ api does not stores the messages because in some context of use it is not needed while in some other it is (in a non graphical sofa vs in a sofa GUI). . Thanks to the MessageHandler class it is easy to add custom message storage that fits the application's needs.; ; Currently the existing LoggingMessageHandler can be used to store in a single storage queue the messages. The queue can be queried to get the messages for whatever the application developer want to do with them (displaying them in GUI or showing a long history, ...). In serr/sout API a different scheme is used as the history is stored at the Base object level in a (size increasing) string. This behavior is now possible with the PerComponentLoggingMessageHandler.; This behavior is closer to the existing serr/sout but it also have several improved properties:; - the message are really stored (not just the 'text' description);; - no text concatenation (memory resize, memory copy) at each message, ; - the queue size of each component can be controlled with a data field as well as the message type to store or to ignore in the queue. ; - when the handler is not installed...there is not recording of the message...so there is a computation & memory zero cost. . NB: The d_msgLevel and d_logLevel in Base* are only there for discussion but they are currently unused now. . There PR also contains several new tests. . Checklist to be merge: ; - [x] succeed on each compilation setup on the CI.; - [x] does not generates new test failure. ; - [x] does not seems to break existing scenes. ; - [x] does not seems to break API compatibility. ; - [x] introduces new component with tests & documentation. ; - [ ] is now 1 week old and no one send a 'no go' comment.",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/106
https://github.com/sofa-framework/sofa/pull/106:77,Integrability,message,messages,77,"Let's start from the begining. . By default the msg_ api does not stores the messages because in some context of use it is not needed while in some other it is (in a non graphical sofa vs in a sofa GUI). . Thanks to the MessageHandler class it is easy to add custom message storage that fits the application's needs.; ; Currently the existing LoggingMessageHandler can be used to store in a single storage queue the messages. The queue can be queried to get the messages for whatever the application developer want to do with them (displaying them in GUI or showing a long history, ...). In serr/sout API a different scheme is used as the history is stored at the Base object level in a (size increasing) string. This behavior is now possible with the PerComponentLoggingMessageHandler.; This behavior is closer to the existing serr/sout but it also have several improved properties:; - the message are really stored (not just the 'text' description);; - no text concatenation (memory resize, memory copy) at each message, ; - the queue size of each component can be controlled with a data field as well as the message type to store or to ignore in the queue. ; - when the handler is not installed...there is not recording of the message...so there is a computation & memory zero cost. . NB: The d_msgLevel and d_logLevel in Base* are only there for discussion but they are currently unused now. . There PR also contains several new tests. . Checklist to be merge: ; - [x] succeed on each compilation setup on the CI.; - [x] does not generates new test failure. ; - [x] does not seems to break existing scenes. ; - [x] does not seems to break API compatibility. ; - [x] introduces new component with tests & documentation. ; - [ ] is now 1 week old and no one send a 'no go' comment.",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/106
https://github.com/sofa-framework/sofa/pull/106:220,Integrability,Message,MessageHandler,220,"Let's start from the begining. . By default the msg_ api does not stores the messages because in some context of use it is not needed while in some other it is (in a non graphical sofa vs in a sofa GUI). . Thanks to the MessageHandler class it is easy to add custom message storage that fits the application's needs.; ; Currently the existing LoggingMessageHandler can be used to store in a single storage queue the messages. The queue can be queried to get the messages for whatever the application developer want to do with them (displaying them in GUI or showing a long history, ...). In serr/sout API a different scheme is used as the history is stored at the Base object level in a (size increasing) string. This behavior is now possible with the PerComponentLoggingMessageHandler.; This behavior is closer to the existing serr/sout but it also have several improved properties:; - the message are really stored (not just the 'text' description);; - no text concatenation (memory resize, memory copy) at each message, ; - the queue size of each component can be controlled with a data field as well as the message type to store or to ignore in the queue. ; - when the handler is not installed...there is not recording of the message...so there is a computation & memory zero cost. . NB: The d_msgLevel and d_logLevel in Base* are only there for discussion but they are currently unused now. . There PR also contains several new tests. . Checklist to be merge: ; - [x] succeed on each compilation setup on the CI.; - [x] does not generates new test failure. ; - [x] does not seems to break existing scenes. ; - [x] does not seems to break API compatibility. ; - [x] introduces new component with tests & documentation. ; - [ ] is now 1 week old and no one send a 'no go' comment.",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/106
https://github.com/sofa-framework/sofa/pull/106:266,Integrability,message,message,266,"Let's start from the begining. . By default the msg_ api does not stores the messages because in some context of use it is not needed while in some other it is (in a non graphical sofa vs in a sofa GUI). . Thanks to the MessageHandler class it is easy to add custom message storage that fits the application's needs.; ; Currently the existing LoggingMessageHandler can be used to store in a single storage queue the messages. The queue can be queried to get the messages for whatever the application developer want to do with them (displaying them in GUI or showing a long history, ...). In serr/sout API a different scheme is used as the history is stored at the Base object level in a (size increasing) string. This behavior is now possible with the PerComponentLoggingMessageHandler.; This behavior is closer to the existing serr/sout but it also have several improved properties:; - the message are really stored (not just the 'text' description);; - no text concatenation (memory resize, memory copy) at each message, ; - the queue size of each component can be controlled with a data field as well as the message type to store or to ignore in the queue. ; - when the handler is not installed...there is not recording of the message...so there is a computation & memory zero cost. . NB: The d_msgLevel and d_logLevel in Base* are only there for discussion but they are currently unused now. . There PR also contains several new tests. . Checklist to be merge: ; - [x] succeed on each compilation setup on the CI.; - [x] does not generates new test failure. ; - [x] does not seems to break existing scenes. ; - [x] does not seems to break API compatibility. ; - [x] introduces new component with tests & documentation. ; - [ ] is now 1 week old and no one send a 'no go' comment.",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/106
https://github.com/sofa-framework/sofa/pull/106:416,Integrability,message,messages,416,"Let's start from the begining. . By default the msg_ api does not stores the messages because in some context of use it is not needed while in some other it is (in a non graphical sofa vs in a sofa GUI). . Thanks to the MessageHandler class it is easy to add custom message storage that fits the application's needs.; ; Currently the existing LoggingMessageHandler can be used to store in a single storage queue the messages. The queue can be queried to get the messages for whatever the application developer want to do with them (displaying them in GUI or showing a long history, ...). In serr/sout API a different scheme is used as the history is stored at the Base object level in a (size increasing) string. This behavior is now possible with the PerComponentLoggingMessageHandler.; This behavior is closer to the existing serr/sout but it also have several improved properties:; - the message are really stored (not just the 'text' description);; - no text concatenation (memory resize, memory copy) at each message, ; - the queue size of each component can be controlled with a data field as well as the message type to store or to ignore in the queue. ; - when the handler is not installed...there is not recording of the message...so there is a computation & memory zero cost. . NB: The d_msgLevel and d_logLevel in Base* are only there for discussion but they are currently unused now. . There PR also contains several new tests. . Checklist to be merge: ; - [x] succeed on each compilation setup on the CI.; - [x] does not generates new test failure. ; - [x] does not seems to break existing scenes. ; - [x] does not seems to break API compatibility. ; - [x] introduces new component with tests & documentation. ; - [ ] is now 1 week old and no one send a 'no go' comment.",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/106
https://github.com/sofa-framework/sofa/pull/106:462,Integrability,message,messages,462,"Let's start from the begining. . By default the msg_ api does not stores the messages because in some context of use it is not needed while in some other it is (in a non graphical sofa vs in a sofa GUI). . Thanks to the MessageHandler class it is easy to add custom message storage that fits the application's needs.; ; Currently the existing LoggingMessageHandler can be used to store in a single storage queue the messages. The queue can be queried to get the messages for whatever the application developer want to do with them (displaying them in GUI or showing a long history, ...). In serr/sout API a different scheme is used as the history is stored at the Base object level in a (size increasing) string. This behavior is now possible with the PerComponentLoggingMessageHandler.; This behavior is closer to the existing serr/sout but it also have several improved properties:; - the message are really stored (not just the 'text' description);; - no text concatenation (memory resize, memory copy) at each message, ; - the queue size of each component can be controlled with a data field as well as the message type to store or to ignore in the queue. ; - when the handler is not installed...there is not recording of the message...so there is a computation & memory zero cost. . NB: The d_msgLevel and d_logLevel in Base* are only there for discussion but they are currently unused now. . There PR also contains several new tests. . Checklist to be merge: ; - [x] succeed on each compilation setup on the CI.; - [x] does not generates new test failure. ; - [x] does not seems to break existing scenes. ; - [x] does not seems to break API compatibility. ; - [x] introduces new component with tests & documentation. ; - [ ] is now 1 week old and no one send a 'no go' comment.",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/106
https://github.com/sofa-framework/sofa/pull/106:891,Integrability,message,message,891,"Let's start from the begining. . By default the msg_ api does not stores the messages because in some context of use it is not needed while in some other it is (in a non graphical sofa vs in a sofa GUI). . Thanks to the MessageHandler class it is easy to add custom message storage that fits the application's needs.; ; Currently the existing LoggingMessageHandler can be used to store in a single storage queue the messages. The queue can be queried to get the messages for whatever the application developer want to do with them (displaying them in GUI or showing a long history, ...). In serr/sout API a different scheme is used as the history is stored at the Base object level in a (size increasing) string. This behavior is now possible with the PerComponentLoggingMessageHandler.; This behavior is closer to the existing serr/sout but it also have several improved properties:; - the message are really stored (not just the 'text' description);; - no text concatenation (memory resize, memory copy) at each message, ; - the queue size of each component can be controlled with a data field as well as the message type to store or to ignore in the queue. ; - when the handler is not installed...there is not recording of the message...so there is a computation & memory zero cost. . NB: The d_msgLevel and d_logLevel in Base* are only there for discussion but they are currently unused now. . There PR also contains several new tests. . Checklist to be merge: ; - [x] succeed on each compilation setup on the CI.; - [x] does not generates new test failure. ; - [x] does not seems to break existing scenes. ; - [x] does not seems to break API compatibility. ; - [x] introduces new component with tests & documentation. ; - [ ] is now 1 week old and no one send a 'no go' comment.",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/106
https://github.com/sofa-framework/sofa/pull/106:1014,Integrability,message,message,1014,"Let's start from the begining. . By default the msg_ api does not stores the messages because in some context of use it is not needed while in some other it is (in a non graphical sofa vs in a sofa GUI). . Thanks to the MessageHandler class it is easy to add custom message storage that fits the application's needs.; ; Currently the existing LoggingMessageHandler can be used to store in a single storage queue the messages. The queue can be queried to get the messages for whatever the application developer want to do with them (displaying them in GUI or showing a long history, ...). In serr/sout API a different scheme is used as the history is stored at the Base object level in a (size increasing) string. This behavior is now possible with the PerComponentLoggingMessageHandler.; This behavior is closer to the existing serr/sout but it also have several improved properties:; - the message are really stored (not just the 'text' description);; - no text concatenation (memory resize, memory copy) at each message, ; - the queue size of each component can be controlled with a data field as well as the message type to store or to ignore in the queue. ; - when the handler is not installed...there is not recording of the message...so there is a computation & memory zero cost. . NB: The d_msgLevel and d_logLevel in Base* are only there for discussion but they are currently unused now. . There PR also contains several new tests. . Checklist to be merge: ; - [x] succeed on each compilation setup on the CI.; - [x] does not generates new test failure. ; - [x] does not seems to break existing scenes. ; - [x] does not seems to break API compatibility. ; - [x] introduces new component with tests & documentation. ; - [ ] is now 1 week old and no one send a 'no go' comment.",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/106
https://github.com/sofa-framework/sofa/pull/106:1111,Integrability,message,message,1111,"Let's start from the begining. . By default the msg_ api does not stores the messages because in some context of use it is not needed while in some other it is (in a non graphical sofa vs in a sofa GUI). . Thanks to the MessageHandler class it is easy to add custom message storage that fits the application's needs.; ; Currently the existing LoggingMessageHandler can be used to store in a single storage queue the messages. The queue can be queried to get the messages for whatever the application developer want to do with them (displaying them in GUI or showing a long history, ...). In serr/sout API a different scheme is used as the history is stored at the Base object level in a (size increasing) string. This behavior is now possible with the PerComponentLoggingMessageHandler.; This behavior is closer to the existing serr/sout but it also have several improved properties:; - the message are really stored (not just the 'text' description);; - no text concatenation (memory resize, memory copy) at each message, ; - the queue size of each component can be controlled with a data field as well as the message type to store or to ignore in the queue. ; - when the handler is not installed...there is not recording of the message...so there is a computation & memory zero cost. . NB: The d_msgLevel and d_logLevel in Base* are only there for discussion but they are currently unused now. . There PR also contains several new tests. . Checklist to be merge: ; - [x] succeed on each compilation setup on the CI.; - [x] does not generates new test failure. ; - [x] does not seems to break existing scenes. ; - [x] does not seems to break API compatibility. ; - [x] introduces new component with tests & documentation. ; - [ ] is now 1 week old and no one send a 'no go' comment.",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/106
https://github.com/sofa-framework/sofa/pull/106:1230,Integrability,message,message,1230,"Let's start from the begining. . By default the msg_ api does not stores the messages because in some context of use it is not needed while in some other it is (in a non graphical sofa vs in a sofa GUI). . Thanks to the MessageHandler class it is easy to add custom message storage that fits the application's needs.; ; Currently the existing LoggingMessageHandler can be used to store in a single storage queue the messages. The queue can be queried to get the messages for whatever the application developer want to do with them (displaying them in GUI or showing a long history, ...). In serr/sout API a different scheme is used as the history is stored at the Base object level in a (size increasing) string. This behavior is now possible with the PerComponentLoggingMessageHandler.; This behavior is closer to the existing serr/sout but it also have several improved properties:; - the message are really stored (not just the 'text' description);; - no text concatenation (memory resize, memory copy) at each message, ; - the queue size of each component can be controlled with a data field as well as the message type to store or to ignore in the queue. ; - when the handler is not installed...there is not recording of the message...so there is a computation & memory zero cost. . NB: The d_msgLevel and d_logLevel in Base* are only there for discussion but they are currently unused now. . There PR also contains several new tests. . Checklist to be merge: ; - [x] succeed on each compilation setup on the CI.; - [x] does not generates new test failure. ; - [x] does not seems to break existing scenes. ; - [x] does not seems to break API compatibility. ; - [x] introduces new component with tests & documentation. ; - [ ] is now 1 week old and no one send a 'no go' comment.",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/106
https://github.com/sofa-framework/sofa/pull/106:406,Performance,queue,queue,406,"Let's start from the begining. . By default the msg_ api does not stores the messages because in some context of use it is not needed while in some other it is (in a non graphical sofa vs in a sofa GUI). . Thanks to the MessageHandler class it is easy to add custom message storage that fits the application's needs.; ; Currently the existing LoggingMessageHandler can be used to store in a single storage queue the messages. The queue can be queried to get the messages for whatever the application developer want to do with them (displaying them in GUI or showing a long history, ...). In serr/sout API a different scheme is used as the history is stored at the Base object level in a (size increasing) string. This behavior is now possible with the PerComponentLoggingMessageHandler.; This behavior is closer to the existing serr/sout but it also have several improved properties:; - the message are really stored (not just the 'text' description);; - no text concatenation (memory resize, memory copy) at each message, ; - the queue size of each component can be controlled with a data field as well as the message type to store or to ignore in the queue. ; - when the handler is not installed...there is not recording of the message...so there is a computation & memory zero cost. . NB: The d_msgLevel and d_logLevel in Base* are only there for discussion but they are currently unused now. . There PR also contains several new tests. . Checklist to be merge: ; - [x] succeed on each compilation setup on the CI.; - [x] does not generates new test failure. ; - [x] does not seems to break existing scenes. ; - [x] does not seems to break API compatibility. ; - [x] introduces new component with tests & documentation. ; - [ ] is now 1 week old and no one send a 'no go' comment.",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/106
https://github.com/sofa-framework/sofa/pull/106:430,Performance,queue,queue,430,"Let's start from the begining. . By default the msg_ api does not stores the messages because in some context of use it is not needed while in some other it is (in a non graphical sofa vs in a sofa GUI). . Thanks to the MessageHandler class it is easy to add custom message storage that fits the application's needs.; ; Currently the existing LoggingMessageHandler can be used to store in a single storage queue the messages. The queue can be queried to get the messages for whatever the application developer want to do with them (displaying them in GUI or showing a long history, ...). In serr/sout API a different scheme is used as the history is stored at the Base object level in a (size increasing) string. This behavior is now possible with the PerComponentLoggingMessageHandler.; This behavior is closer to the existing serr/sout but it also have several improved properties:; - the message are really stored (not just the 'text' description);; - no text concatenation (memory resize, memory copy) at each message, ; - the queue size of each component can be controlled with a data field as well as the message type to store or to ignore in the queue. ; - when the handler is not installed...there is not recording of the message...so there is a computation & memory zero cost. . NB: The d_msgLevel and d_logLevel in Base* are only there for discussion but they are currently unused now. . There PR also contains several new tests. . Checklist to be merge: ; - [x] succeed on each compilation setup on the CI.; - [x] does not generates new test failure. ; - [x] does not seems to break existing scenes. ; - [x] does not seems to break API compatibility. ; - [x] introduces new component with tests & documentation. ; - [ ] is now 1 week old and no one send a 'no go' comment.",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/106
https://github.com/sofa-framework/sofa/pull/106:1031,Performance,queue,queue,1031,"Let's start from the begining. . By default the msg_ api does not stores the messages because in some context of use it is not needed while in some other it is (in a non graphical sofa vs in a sofa GUI). . Thanks to the MessageHandler class it is easy to add custom message storage that fits the application's needs.; ; Currently the existing LoggingMessageHandler can be used to store in a single storage queue the messages. The queue can be queried to get the messages for whatever the application developer want to do with them (displaying them in GUI or showing a long history, ...). In serr/sout API a different scheme is used as the history is stored at the Base object level in a (size increasing) string. This behavior is now possible with the PerComponentLoggingMessageHandler.; This behavior is closer to the existing serr/sout but it also have several improved properties:; - the message are really stored (not just the 'text' description);; - no text concatenation (memory resize, memory copy) at each message, ; - the queue size of each component can be controlled with a data field as well as the message type to store or to ignore in the queue. ; - when the handler is not installed...there is not recording of the message...so there is a computation & memory zero cost. . NB: The d_msgLevel and d_logLevel in Base* are only there for discussion but they are currently unused now. . There PR also contains several new tests. . Checklist to be merge: ; - [x] succeed on each compilation setup on the CI.; - [x] does not generates new test failure. ; - [x] does not seems to break existing scenes. ; - [x] does not seems to break API compatibility. ; - [x] introduces new component with tests & documentation. ; - [ ] is now 1 week old and no one send a 'no go' comment.",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/106
https://github.com/sofa-framework/sofa/pull/106:1153,Performance,queue,queue,1153,"Let's start from the begining. . By default the msg_ api does not stores the messages because in some context of use it is not needed while in some other it is (in a non graphical sofa vs in a sofa GUI). . Thanks to the MessageHandler class it is easy to add custom message storage that fits the application's needs.; ; Currently the existing LoggingMessageHandler can be used to store in a single storage queue the messages. The queue can be queried to get the messages for whatever the application developer want to do with them (displaying them in GUI or showing a long history, ...). In serr/sout API a different scheme is used as the history is stored at the Base object level in a (size increasing) string. This behavior is now possible with the PerComponentLoggingMessageHandler.; This behavior is closer to the existing serr/sout but it also have several improved properties:; - the message are really stored (not just the 'text' description);; - no text concatenation (memory resize, memory copy) at each message, ; - the queue size of each component can be controlled with a data field as well as the message type to store or to ignore in the queue. ; - when the handler is not installed...there is not recording of the message...so there is a computation & memory zero cost. . NB: The d_msgLevel and d_logLevel in Base* are only there for discussion but they are currently unused now. . There PR also contains several new tests. . Checklist to be merge: ; - [x] succeed on each compilation setup on the CI.; - [x] does not generates new test failure. ; - [x] does not seems to break existing scenes. ; - [x] does not seems to break API compatibility. ; - [x] introduces new component with tests & documentation. ; - [ ] is now 1 week old and no one send a 'no go' comment.",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/106
https://github.com/sofa-framework/sofa/pull/106:343,Testability,Log,LoggingMessageHandler,343,"Let's start from the begining. . By default the msg_ api does not stores the messages because in some context of use it is not needed while in some other it is (in a non graphical sofa vs in a sofa GUI). . Thanks to the MessageHandler class it is easy to add custom message storage that fits the application's needs.; ; Currently the existing LoggingMessageHandler can be used to store in a single storage queue the messages. The queue can be queried to get the messages for whatever the application developer want to do with them (displaying them in GUI or showing a long history, ...). In serr/sout API a different scheme is used as the history is stored at the Base object level in a (size increasing) string. This behavior is now possible with the PerComponentLoggingMessageHandler.; This behavior is closer to the existing serr/sout but it also have several improved properties:; - the message are really stored (not just the 'text' description);; - no text concatenation (memory resize, memory copy) at each message, ; - the queue size of each component can be controlled with a data field as well as the message type to store or to ignore in the queue. ; - when the handler is not installed...there is not recording of the message...so there is a computation & memory zero cost. . NB: The d_msgLevel and d_logLevel in Base* are only there for discussion but they are currently unused now. . There PR also contains several new tests. . Checklist to be merge: ; - [x] succeed on each compilation setup on the CI.; - [x] does not generates new test failure. ; - [x] does not seems to break existing scenes. ; - [x] does not seems to break API compatibility. ; - [x] introduces new component with tests & documentation. ; - [ ] is now 1 week old and no one send a 'no go' comment.",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/106
https://github.com/sofa-framework/sofa/pull/106:1433,Testability,test,tests,1433,"Let's start from the begining. . By default the msg_ api does not stores the messages because in some context of use it is not needed while in some other it is (in a non graphical sofa vs in a sofa GUI). . Thanks to the MessageHandler class it is easy to add custom message storage that fits the application's needs.; ; Currently the existing LoggingMessageHandler can be used to store in a single storage queue the messages. The queue can be queried to get the messages for whatever the application developer want to do with them (displaying them in GUI or showing a long history, ...). In serr/sout API a different scheme is used as the history is stored at the Base object level in a (size increasing) string. This behavior is now possible with the PerComponentLoggingMessageHandler.; This behavior is closer to the existing serr/sout but it also have several improved properties:; - the message are really stored (not just the 'text' description);; - no text concatenation (memory resize, memory copy) at each message, ; - the queue size of each component can be controlled with a data field as well as the message type to store or to ignore in the queue. ; - when the handler is not installed...there is not recording of the message...so there is a computation & memory zero cost. . NB: The d_msgLevel and d_logLevel in Base* are only there for discussion but they are currently unused now. . There PR also contains several new tests. . Checklist to be merge: ; - [x] succeed on each compilation setup on the CI.; - [x] does not generates new test failure. ; - [x] does not seems to break existing scenes. ; - [x] does not seems to break API compatibility. ; - [x] introduces new component with tests & documentation. ; - [ ] is now 1 week old and no one send a 'no go' comment.",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/106
https://github.com/sofa-framework/sofa/pull/106:1548,Testability,test,test,1548,"Let's start from the begining. . By default the msg_ api does not stores the messages because in some context of use it is not needed while in some other it is (in a non graphical sofa vs in a sofa GUI). . Thanks to the MessageHandler class it is easy to add custom message storage that fits the application's needs.; ; Currently the existing LoggingMessageHandler can be used to store in a single storage queue the messages. The queue can be queried to get the messages for whatever the application developer want to do with them (displaying them in GUI or showing a long history, ...). In serr/sout API a different scheme is used as the history is stored at the Base object level in a (size increasing) string. This behavior is now possible with the PerComponentLoggingMessageHandler.; This behavior is closer to the existing serr/sout but it also have several improved properties:; - the message are really stored (not just the 'text' description);; - no text concatenation (memory resize, memory copy) at each message, ; - the queue size of each component can be controlled with a data field as well as the message type to store or to ignore in the queue. ; - when the handler is not installed...there is not recording of the message...so there is a computation & memory zero cost. . NB: The d_msgLevel and d_logLevel in Base* are only there for discussion but they are currently unused now. . There PR also contains several new tests. . Checklist to be merge: ; - [x] succeed on each compilation setup on the CI.; - [x] does not generates new test failure. ; - [x] does not seems to break existing scenes. ; - [x] does not seems to break API compatibility. ; - [x] introduces new component with tests & documentation. ; - [ ] is now 1 week old and no one send a 'no go' comment.",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/106
https://github.com/sofa-framework/sofa/pull/106:1700,Testability,test,tests,1700,"Let's start from the begining. . By default the msg_ api does not stores the messages because in some context of use it is not needed while in some other it is (in a non graphical sofa vs in a sofa GUI). . Thanks to the MessageHandler class it is easy to add custom message storage that fits the application's needs.; ; Currently the existing LoggingMessageHandler can be used to store in a single storage queue the messages. The queue can be queried to get the messages for whatever the application developer want to do with them (displaying them in GUI or showing a long history, ...). In serr/sout API a different scheme is used as the history is stored at the Base object level in a (size increasing) string. This behavior is now possible with the PerComponentLoggingMessageHandler.; This behavior is closer to the existing serr/sout but it also have several improved properties:; - the message are really stored (not just the 'text' description);; - no text concatenation (memory resize, memory copy) at each message, ; - the queue size of each component can be controlled with a data field as well as the message type to store or to ignore in the queue. ; - when the handler is not installed...there is not recording of the message...so there is a computation & memory zero cost. . NB: The d_msgLevel and d_logLevel in Base* are only there for discussion but they are currently unused now. . There PR also contains several new tests. . Checklist to be merge: ; - [x] succeed on each compilation setup on the CI.; - [x] does not generates new test failure. ; - [x] does not seems to break existing scenes. ; - [x] does not seems to break API compatibility. ; - [x] introduces new component with tests & documentation. ; - [ ] is now 1 week old and no one send a 'no go' comment.",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/106
https://github.com/sofa-framework/sofa/issues/107:355,Usability,simpl,simply,355,"helper::vector, helper::set, helper::list, etc. lack of important c++11 functionalities; such as move constructor, initializer_list and maybe other stuffs. helper::vector is adding several stuffs to std::vector, so it makes sense to add these functionalities. But is derivating helper::set, helper::list from stl container the right design since they are simply adding the stream operators (for string serialization)? Could not we simply add these operators outside of the class, and always use std containers?",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/107
https://github.com/sofa-framework/sofa/issues/107:431,Usability,simpl,simply,431,"helper::vector, helper::set, helper::list, etc. lack of important c++11 functionalities; such as move constructor, initializer_list and maybe other stuffs. helper::vector is adding several stuffs to std::vector, so it makes sense to add these functionalities. But is derivating helper::set, helper::list from stl container the right design since they are simply adding the stream operators (for string serialization)? Could not we simply add these operators outside of the class, and always use std containers?",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/107
https://github.com/sofa-framework/sofa/pull/108:317,Integrability,message,message,317,"2- ADD tests; 3- CLEAN member variables name (BREAKING); 4- ADD an example of orientedBox dataField use; 5- Changed a bit the implementation from PlaneROI, for computation optimization purpose. Question:; I would like to reimplement PlaneROI so that it does what we expect from its name, and also print a ""deprecated message"" for those who still use PlaneROI as an OrientedBoxROI. Those users will be detected if they use a deprecated data field. What do you think?",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/108
https://github.com/sofa-framework/sofa/pull/108:30,Modifiability,variab,variables,30,"2- ADD tests; 3- CLEAN member variables name (BREAKING); 4- ADD an example of orientedBox dataField use; 5- Changed a bit the implementation from PlaneROI, for computation optimization purpose. Question:; I would like to reimplement PlaneROI so that it does what we expect from its name, and also print a ""deprecated message"" for those who still use PlaneROI as an OrientedBoxROI. Those users will be detected if they use a deprecated data field. What do you think?",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/108
https://github.com/sofa-framework/sofa/pull/108:172,Performance,optimiz,optimization,172,"2- ADD tests; 3- CLEAN member variables name (BREAKING); 4- ADD an example of orientedBox dataField use; 5- Changed a bit the implementation from PlaneROI, for computation optimization purpose. Question:; I would like to reimplement PlaneROI so that it does what we expect from its name, and also print a ""deprecated message"" for those who still use PlaneROI as an OrientedBoxROI. Those users will be detected if they use a deprecated data field. What do you think?",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/108
https://github.com/sofa-framework/sofa/pull/108:401,Safety,detect,detected,401,"2- ADD tests; 3- CLEAN member variables name (BREAKING); 4- ADD an example of orientedBox dataField use; 5- Changed a bit the implementation from PlaneROI, for computation optimization purpose. Question:; I would like to reimplement PlaneROI so that it does what we expect from its name, and also print a ""deprecated message"" for those who still use PlaneROI as an OrientedBoxROI. Those users will be detected if they use a deprecated data field. What do you think?",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/108
https://github.com/sofa-framework/sofa/pull/108:7,Testability,test,tests,7,"2- ADD tests; 3- CLEAN member variables name (BREAKING); 4- ADD an example of orientedBox dataField use; 5- Changed a bit the implementation from PlaneROI, for computation optimization purpose. Question:; I would like to reimplement PlaneROI so that it does what we expect from its name, and also print a ""deprecated message"" for those who still use PlaneROI as an OrientedBoxROI. Those users will be detected if they use a deprecated data field. What do you think?",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/108
https://github.com/sofa-framework/sofa/pull/110:123,Availability,error,error,123,"If the flag SOFA_NO_OPENGL is active, the plugin VolumetricRendering; cannot be compiled. Add the proper CMake warning and error message.",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/110
https://github.com/sofa-framework/sofa/pull/110:129,Integrability,message,message,129,"If the flag SOFA_NO_OPENGL is active, the plugin VolumetricRendering; cannot be compiled. Add the proper CMake warning and error message.",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/110
https://github.com/sofa-framework/sofa/pull/110:42,Modifiability,plugin,plugin,42,"If the flag SOFA_NO_OPENGL is active, the plugin VolumetricRendering; cannot be compiled. Add the proper CMake warning and error message.",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/110
https://github.com/sofa-framework/sofa/issues/111:305,Availability,mask,masks,305,"Trying to list automatable tests we could/should implement.; Feel free to complete it!. - ProjectiveConstraint:; - ""projectResponse"" could be tested by finite differences on ""projectPosition""; - MultiMapping:; - ""getK"" (assembled API) could be compared to ""applyDJT"" (non assembled API); - ForceField:; - masks: all the non-null lines of the stiffness matrix should have an entry in the mask vector (conservative test, i.e. the mask can contain more entries); - the compliance matrix should be equal to the inverse of the stiffness matrix (maybe with a different sign); - {Multi}Mapping; - masks: all the non-null columns of the Jacobian matrices should have an entry in the parent mask vectors (conservative test, i.e. the masks can contain more entries)",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/111
https://github.com/sofa-framework/sofa/issues/111:387,Availability,mask,mask,387,"Trying to list automatable tests we could/should implement.; Feel free to complete it!. - ProjectiveConstraint:; - ""projectResponse"" could be tested by finite differences on ""projectPosition""; - MultiMapping:; - ""getK"" (assembled API) could be compared to ""applyDJT"" (non assembled API); - ForceField:; - masks: all the non-null lines of the stiffness matrix should have an entry in the mask vector (conservative test, i.e. the mask can contain more entries); - the compliance matrix should be equal to the inverse of the stiffness matrix (maybe with a different sign); - {Multi}Mapping; - masks: all the non-null columns of the Jacobian matrices should have an entry in the parent mask vectors (conservative test, i.e. the masks can contain more entries)",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/111
https://github.com/sofa-framework/sofa/issues/111:428,Availability,mask,mask,428,"Trying to list automatable tests we could/should implement.; Feel free to complete it!. - ProjectiveConstraint:; - ""projectResponse"" could be tested by finite differences on ""projectPosition""; - MultiMapping:; - ""getK"" (assembled API) could be compared to ""applyDJT"" (non assembled API); - ForceField:; - masks: all the non-null lines of the stiffness matrix should have an entry in the mask vector (conservative test, i.e. the mask can contain more entries); - the compliance matrix should be equal to the inverse of the stiffness matrix (maybe with a different sign); - {Multi}Mapping; - masks: all the non-null columns of the Jacobian matrices should have an entry in the parent mask vectors (conservative test, i.e. the masks can contain more entries)",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/111
https://github.com/sofa-framework/sofa/issues/111:590,Availability,mask,masks,590,"Trying to list automatable tests we could/should implement.; Feel free to complete it!. - ProjectiveConstraint:; - ""projectResponse"" could be tested by finite differences on ""projectPosition""; - MultiMapping:; - ""getK"" (assembled API) could be compared to ""applyDJT"" (non assembled API); - ForceField:; - masks: all the non-null lines of the stiffness matrix should have an entry in the mask vector (conservative test, i.e. the mask can contain more entries); - the compliance matrix should be equal to the inverse of the stiffness matrix (maybe with a different sign); - {Multi}Mapping; - masks: all the non-null columns of the Jacobian matrices should have an entry in the parent mask vectors (conservative test, i.e. the masks can contain more entries)",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/111
https://github.com/sofa-framework/sofa/issues/111:682,Availability,mask,mask,682,"Trying to list automatable tests we could/should implement.; Feel free to complete it!. - ProjectiveConstraint:; - ""projectResponse"" could be tested by finite differences on ""projectPosition""; - MultiMapping:; - ""getK"" (assembled API) could be compared to ""applyDJT"" (non assembled API); - ForceField:; - masks: all the non-null lines of the stiffness matrix should have an entry in the mask vector (conservative test, i.e. the mask can contain more entries); - the compliance matrix should be equal to the inverse of the stiffness matrix (maybe with a different sign); - {Multi}Mapping; - masks: all the non-null columns of the Jacobian matrices should have an entry in the parent mask vectors (conservative test, i.e. the masks can contain more entries)",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/111
https://github.com/sofa-framework/sofa/issues/111:724,Availability,mask,masks,724,"Trying to list automatable tests we could/should implement.; Feel free to complete it!. - ProjectiveConstraint:; - ""projectResponse"" could be tested by finite differences on ""projectPosition""; - MultiMapping:; - ""getK"" (assembled API) could be compared to ""applyDJT"" (non assembled API); - ForceField:; - masks: all the non-null lines of the stiffness matrix should have an entry in the mask vector (conservative test, i.e. the mask can contain more entries); - the compliance matrix should be equal to the inverse of the stiffness matrix (maybe with a different sign); - {Multi}Mapping; - masks: all the non-null columns of the Jacobian matrices should have an entry in the parent mask vectors (conservative test, i.e. the masks can contain more entries)",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/111
https://github.com/sofa-framework/sofa/issues/111:27,Testability,test,tests,27,"Trying to list automatable tests we could/should implement.; Feel free to complete it!. - ProjectiveConstraint:; - ""projectResponse"" could be tested by finite differences on ""projectPosition""; - MultiMapping:; - ""getK"" (assembled API) could be compared to ""applyDJT"" (non assembled API); - ForceField:; - masks: all the non-null lines of the stiffness matrix should have an entry in the mask vector (conservative test, i.e. the mask can contain more entries); - the compliance matrix should be equal to the inverse of the stiffness matrix (maybe with a different sign); - {Multi}Mapping; - masks: all the non-null columns of the Jacobian matrices should have an entry in the parent mask vectors (conservative test, i.e. the masks can contain more entries)",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/111
https://github.com/sofa-framework/sofa/issues/111:142,Testability,test,tested,142,"Trying to list automatable tests we could/should implement.; Feel free to complete it!. - ProjectiveConstraint:; - ""projectResponse"" could be tested by finite differences on ""projectPosition""; - MultiMapping:; - ""getK"" (assembled API) could be compared to ""applyDJT"" (non assembled API); - ForceField:; - masks: all the non-null lines of the stiffness matrix should have an entry in the mask vector (conservative test, i.e. the mask can contain more entries); - the compliance matrix should be equal to the inverse of the stiffness matrix (maybe with a different sign); - {Multi}Mapping; - masks: all the non-null columns of the Jacobian matrices should have an entry in the parent mask vectors (conservative test, i.e. the masks can contain more entries)",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/111
https://github.com/sofa-framework/sofa/issues/111:413,Testability,test,test,413,"Trying to list automatable tests we could/should implement.; Feel free to complete it!. - ProjectiveConstraint:; - ""projectResponse"" could be tested by finite differences on ""projectPosition""; - MultiMapping:; - ""getK"" (assembled API) could be compared to ""applyDJT"" (non assembled API); - ForceField:; - masks: all the non-null lines of the stiffness matrix should have an entry in the mask vector (conservative test, i.e. the mask can contain more entries); - the compliance matrix should be equal to the inverse of the stiffness matrix (maybe with a different sign); - {Multi}Mapping; - masks: all the non-null columns of the Jacobian matrices should have an entry in the parent mask vectors (conservative test, i.e. the masks can contain more entries)",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/111
https://github.com/sofa-framework/sofa/issues/111:709,Testability,test,test,709,"Trying to list automatable tests we could/should implement.; Feel free to complete it!. - ProjectiveConstraint:; - ""projectResponse"" could be tested by finite differences on ""projectPosition""; - MultiMapping:; - ""getK"" (assembled API) could be compared to ""applyDJT"" (non assembled API); - ForceField:; - masks: all the non-null lines of the stiffness matrix should have an entry in the mask vector (conservative test, i.e. the mask can contain more entries); - the compliance matrix should be equal to the inverse of the stiffness matrix (maybe with a different sign); - {Multi}Mapping; - masks: all the non-null columns of the Jacobian matrices should have an entry in the parent mask vectors (conservative test, i.e. the masks can contain more entries)",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/111
https://github.com/sofa-framework/sofa/issues/114:222,Deployability,install,installation,222,This file is mandatory but is not created w/o SOFA_INSTALL_RESOURCES_FILES. I think /sofa/CMakeLists.txt lines 206-211 should be outside the if(SOFA_INSTALL_RESOURCES_FILES); as the sofa.ini file has nothing to do with an installation.,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/114
https://github.com/sofa-framework/sofa/pull/116:1262,Availability,failure,failure,1262,"The current implementation of file saving in XML is in fact doing a kind of complete dumping of the state of the objects in the scene. This is bad because this produce totally unreadable scene. . The idea of this PR is to implement a much more ""user friendly"" file saving as described in this issue; https://github.com/sofa-framework/sofa/issues/41. Saving caduceus.scn with the old way look produce a 2Mb file like this: http://pastebin.com/01hfAeAT; while with the current code it is a 3.5Kb file looking like this: http://pastebin.com/K3jzVxcE. Please help to improve it by reporting any problem or patch. . Additional things to do in future PR:; - support saving of scene created from Python (I have a prototype...I'm waiting integration of this PR); - support saving scene to python (with the same readability logic); - fix the broken component that parse directly the xml attribute instead of using data. This is the case of (VisualModelImpl, CubeTopology). These component have to be fixed one by one (including test to validate that there is no regression). ; - implement a more ""dump"" like feature to save a scene that have been simulated. . Checklist to be merge: ; - [ ] succeed on each compilation setup on the CI.; - [ ] does not generates new test failure. ; - [ ] does not seems to break existing scenes. ; - [ ] does not seems to break API compatibility. ; - [ ] introduces new component with tests & documentation. ; - [ ] is now 1 week old and no one send a 'no go' comment.",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/116
https://github.com/sofa-framework/sofa/pull/116:602,Deployability,patch,patch,602,"The current implementation of file saving in XML is in fact doing a kind of complete dumping of the state of the objects in the scene. This is bad because this produce totally unreadable scene. . The idea of this PR is to implement a much more ""user friendly"" file saving as described in this issue; https://github.com/sofa-framework/sofa/issues/41. Saving caduceus.scn with the old way look produce a 2Mb file like this: http://pastebin.com/01hfAeAT; while with the current code it is a 3.5Kb file looking like this: http://pastebin.com/K3jzVxcE. Please help to improve it by reporting any problem or patch. . Additional things to do in future PR:; - support saving of scene created from Python (I have a prototype...I'm waiting integration of this PR); - support saving scene to python (with the same readability logic); - fix the broken component that parse directly the xml attribute instead of using data. This is the case of (VisualModelImpl, CubeTopology). These component have to be fixed one by one (including test to validate that there is no regression). ; - implement a more ""dump"" like feature to save a scene that have been simulated. . Checklist to be merge: ; - [ ] succeed on each compilation setup on the CI.; - [ ] does not generates new test failure. ; - [ ] does not seems to break existing scenes. ; - [ ] does not seems to break API compatibility. ; - [ ] introduces new component with tests & documentation. ; - [ ] is now 1 week old and no one send a 'no go' comment.",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/116
https://github.com/sofa-framework/sofa/pull/116:730,Deployability,integrat,integration,730,"The current implementation of file saving in XML is in fact doing a kind of complete dumping of the state of the objects in the scene. This is bad because this produce totally unreadable scene. . The idea of this PR is to implement a much more ""user friendly"" file saving as described in this issue; https://github.com/sofa-framework/sofa/issues/41. Saving caduceus.scn with the old way look produce a 2Mb file like this: http://pastebin.com/01hfAeAT; while with the current code it is a 3.5Kb file looking like this: http://pastebin.com/K3jzVxcE. Please help to improve it by reporting any problem or patch. . Additional things to do in future PR:; - support saving of scene created from Python (I have a prototype...I'm waiting integration of this PR); - support saving scene to python (with the same readability logic); - fix the broken component that parse directly the xml attribute instead of using data. This is the case of (VisualModelImpl, CubeTopology). These component have to be fixed one by one (including test to validate that there is no regression). ; - implement a more ""dump"" like feature to save a scene that have been simulated. . Checklist to be merge: ; - [ ] succeed on each compilation setup on the CI.; - [ ] does not generates new test failure. ; - [ ] does not seems to break existing scenes. ; - [ ] does not seems to break API compatibility. ; - [ ] introduces new component with tests & documentation. ; - [ ] is now 1 week old and no one send a 'no go' comment.",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/116
https://github.com/sofa-framework/sofa/pull/116:730,Integrability,integrat,integration,730,"The current implementation of file saving in XML is in fact doing a kind of complete dumping of the state of the objects in the scene. This is bad because this produce totally unreadable scene. . The idea of this PR is to implement a much more ""user friendly"" file saving as described in this issue; https://github.com/sofa-framework/sofa/issues/41. Saving caduceus.scn with the old way look produce a 2Mb file like this: http://pastebin.com/01hfAeAT; while with the current code it is a 3.5Kb file looking like this: http://pastebin.com/K3jzVxcE. Please help to improve it by reporting any problem or patch. . Additional things to do in future PR:; - support saving of scene created from Python (I have a prototype...I'm waiting integration of this PR); - support saving scene to python (with the same readability logic); - fix the broken component that parse directly the xml attribute instead of using data. This is the case of (VisualModelImpl, CubeTopology). These component have to be fixed one by one (including test to validate that there is no regression). ; - implement a more ""dump"" like feature to save a scene that have been simulated. . Checklist to be merge: ; - [ ] succeed on each compilation setup on the CI.; - [ ] does not generates new test failure. ; - [ ] does not seems to break existing scenes. ; - [ ] does not seems to break API compatibility. ; - [ ] introduces new component with tests & documentation. ; - [ ] is now 1 week old and no one send a 'no go' comment.",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/116
https://github.com/sofa-framework/sofa/pull/116:1027,Security,validat,validate,1027,"The current implementation of file saving in XML is in fact doing a kind of complete dumping of the state of the objects in the scene. This is bad because this produce totally unreadable scene. . The idea of this PR is to implement a much more ""user friendly"" file saving as described in this issue; https://github.com/sofa-framework/sofa/issues/41. Saving caduceus.scn with the old way look produce a 2Mb file like this: http://pastebin.com/01hfAeAT; while with the current code it is a 3.5Kb file looking like this: http://pastebin.com/K3jzVxcE. Please help to improve it by reporting any problem or patch. . Additional things to do in future PR:; - support saving of scene created from Python (I have a prototype...I'm waiting integration of this PR); - support saving scene to python (with the same readability logic); - fix the broken component that parse directly the xml attribute instead of using data. This is the case of (VisualModelImpl, CubeTopology). These component have to be fixed one by one (including test to validate that there is no regression). ; - implement a more ""dump"" like feature to save a scene that have been simulated. . Checklist to be merge: ; - [ ] succeed on each compilation setup on the CI.; - [ ] does not generates new test failure. ; - [ ] does not seems to break existing scenes. ; - [ ] does not seems to break API compatibility. ; - [ ] introduces new component with tests & documentation. ; - [ ] is now 1 week old and no one send a 'no go' comment.",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/116
https://github.com/sofa-framework/sofa/pull/116:815,Testability,log,logic,815,"The current implementation of file saving in XML is in fact doing a kind of complete dumping of the state of the objects in the scene. This is bad because this produce totally unreadable scene. . The idea of this PR is to implement a much more ""user friendly"" file saving as described in this issue; https://github.com/sofa-framework/sofa/issues/41. Saving caduceus.scn with the old way look produce a 2Mb file like this: http://pastebin.com/01hfAeAT; while with the current code it is a 3.5Kb file looking like this: http://pastebin.com/K3jzVxcE. Please help to improve it by reporting any problem or patch. . Additional things to do in future PR:; - support saving of scene created from Python (I have a prototype...I'm waiting integration of this PR); - support saving scene to python (with the same readability logic); - fix the broken component that parse directly the xml attribute instead of using data. This is the case of (VisualModelImpl, CubeTopology). These component have to be fixed one by one (including test to validate that there is no regression). ; - implement a more ""dump"" like feature to save a scene that have been simulated. . Checklist to be merge: ; - [ ] succeed on each compilation setup on the CI.; - [ ] does not generates new test failure. ; - [ ] does not seems to break existing scenes. ; - [ ] does not seems to break API compatibility. ; - [ ] introduces new component with tests & documentation. ; - [ ] is now 1 week old and no one send a 'no go' comment.",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/116
https://github.com/sofa-framework/sofa/pull/116:1019,Testability,test,test,1019,"The current implementation of file saving in XML is in fact doing a kind of complete dumping of the state of the objects in the scene. This is bad because this produce totally unreadable scene. . The idea of this PR is to implement a much more ""user friendly"" file saving as described in this issue; https://github.com/sofa-framework/sofa/issues/41. Saving caduceus.scn with the old way look produce a 2Mb file like this: http://pastebin.com/01hfAeAT; while with the current code it is a 3.5Kb file looking like this: http://pastebin.com/K3jzVxcE. Please help to improve it by reporting any problem or patch. . Additional things to do in future PR:; - support saving of scene created from Python (I have a prototype...I'm waiting integration of this PR); - support saving scene to python (with the same readability logic); - fix the broken component that parse directly the xml attribute instead of using data. This is the case of (VisualModelImpl, CubeTopology). These component have to be fixed one by one (including test to validate that there is no regression). ; - implement a more ""dump"" like feature to save a scene that have been simulated. . Checklist to be merge: ; - [ ] succeed on each compilation setup on the CI.; - [ ] does not generates new test failure. ; - [ ] does not seems to break existing scenes. ; - [ ] does not seems to break API compatibility. ; - [ ] introduces new component with tests & documentation. ; - [ ] is now 1 week old and no one send a 'no go' comment.",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/116
https://github.com/sofa-framework/sofa/pull/116:1257,Testability,test,test,1257,"The current implementation of file saving in XML is in fact doing a kind of complete dumping of the state of the objects in the scene. This is bad because this produce totally unreadable scene. . The idea of this PR is to implement a much more ""user friendly"" file saving as described in this issue; https://github.com/sofa-framework/sofa/issues/41. Saving caduceus.scn with the old way look produce a 2Mb file like this: http://pastebin.com/01hfAeAT; while with the current code it is a 3.5Kb file looking like this: http://pastebin.com/K3jzVxcE. Please help to improve it by reporting any problem or patch. . Additional things to do in future PR:; - support saving of scene created from Python (I have a prototype...I'm waiting integration of this PR); - support saving scene to python (with the same readability logic); - fix the broken component that parse directly the xml attribute instead of using data. This is the case of (VisualModelImpl, CubeTopology). These component have to be fixed one by one (including test to validate that there is no regression). ; - implement a more ""dump"" like feature to save a scene that have been simulated. . Checklist to be merge: ; - [ ] succeed on each compilation setup on the CI.; - [ ] does not generates new test failure. ; - [ ] does not seems to break existing scenes. ; - [ ] does not seems to break API compatibility. ; - [ ] introduces new component with tests & documentation. ; - [ ] is now 1 week old and no one send a 'no go' comment.",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/116
https://github.com/sofa-framework/sofa/pull/116:1409,Testability,test,tests,1409,"The current implementation of file saving in XML is in fact doing a kind of complete dumping of the state of the objects in the scene. This is bad because this produce totally unreadable scene. . The idea of this PR is to implement a much more ""user friendly"" file saving as described in this issue; https://github.com/sofa-framework/sofa/issues/41. Saving caduceus.scn with the old way look produce a 2Mb file like this: http://pastebin.com/01hfAeAT; while with the current code it is a 3.5Kb file looking like this: http://pastebin.com/K3jzVxcE. Please help to improve it by reporting any problem or patch. . Additional things to do in future PR:; - support saving of scene created from Python (I have a prototype...I'm waiting integration of this PR); - support saving scene to python (with the same readability logic); - fix the broken component that parse directly the xml attribute instead of using data. This is the case of (VisualModelImpl, CubeTopology). These component have to be fixed one by one (including test to validate that there is no regression). ; - implement a more ""dump"" like feature to save a scene that have been simulated. . Checklist to be merge: ; - [ ] succeed on each compilation setup on the CI.; - [ ] does not generates new test failure. ; - [ ] does not seems to break existing scenes. ; - [ ] does not seems to break API compatibility. ; - [ ] introduces new component with tests & documentation. ; - [ ] is now 1 week old and no one send a 'no go' comment.",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/116
https://github.com/sofa-framework/sofa/issues/118:298,Availability,redundant,redundant,298,"Hi,. To fully support xml saving (see PR:https://github.com/sofa-framework/sofa/pull/116) we need to clean VisualModelImpl::parse(). . I can do some stuff but is unclear to me how much VisualModelImpl requires cleaning and whether or not some part are deprecated (the loading stuff from file seems redundant with loader). . By the way...any suggestion/advice regarding the data attributes is more than welcome. I started a branch there for that: https://github.com/SofaDefrost/sofa/tree/cleaning_visualmodelimpl",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/118
https://github.com/sofa-framework/sofa/issues/118:268,Performance,load,loading,268,"Hi,. To fully support xml saving (see PR:https://github.com/sofa-framework/sofa/pull/116) we need to clean VisualModelImpl::parse(). . I can do some stuff but is unclear to me how much VisualModelImpl requires cleaning and whether or not some part are deprecated (the loading stuff from file seems redundant with loader). . By the way...any suggestion/advice regarding the data attributes is more than welcome. I started a branch there for that: https://github.com/SofaDefrost/sofa/tree/cleaning_visualmodelimpl",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/118
https://github.com/sofa-framework/sofa/issues/118:313,Performance,load,loader,313,"Hi,. To fully support xml saving (see PR:https://github.com/sofa-framework/sofa/pull/116) we need to clean VisualModelImpl::parse(). . I can do some stuff but is unclear to me how much VisualModelImpl requires cleaning and whether or not some part are deprecated (the loading stuff from file seems redundant with loader). . By the way...any suggestion/advice regarding the data attributes is more than welcome. I started a branch there for that: https://github.com/SofaDefrost/sofa/tree/cleaning_visualmodelimpl",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/118
https://github.com/sofa-framework/sofa/issues/118:298,Safety,redund,redundant,298,"Hi,. To fully support xml saving (see PR:https://github.com/sofa-framework/sofa/pull/116) we need to clean VisualModelImpl::parse(). . I can do some stuff but is unclear to me how much VisualModelImpl requires cleaning and whether or not some part are deprecated (the loading stuff from file seems redundant with loader). . By the way...any suggestion/advice regarding the data attributes is more than welcome. I started a branch there for that: https://github.com/SofaDefrost/sofa/tree/cleaning_visualmodelimpl",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/118
https://github.com/sofa-framework/sofa/pull/119:718,Availability,failure,failure,718,"This PR adds a RGBAColor type in defaulttype as well as dedicated tests. . There is several advantage of doing so:; - no ambiguity in the code between a rgba color and vector4.; - the code needed to build colors from their name, hexadecimal or list of float is factored in this class (while currently there is at least 8 duplications in the sofa code base); - unifying the underlying data also offer the possibility to offer consistent user interface for colors . This PR will be the ground to solve issue #https://github.com/sofa-framework/sofa/issues/64. . This PR have no impact on the sofa source code. Checklist to be merge: ; - [x] succeed on each compilation setup on the CI.; - [x] does not generates new test failure. ; - [x] does not seems to break existing scenes. ; - [x] does not seems to break API compatibility. ; - [x] introduces new component with tests & documentation. ; - [x] is now 1 week old and no one send a 'no go' comment.",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/119
https://github.com/sofa-framework/sofa/pull/119:441,Integrability,interface,interface,441,"This PR adds a RGBAColor type in defaulttype as well as dedicated tests. . There is several advantage of doing so:; - no ambiguity in the code between a rgba color and vector4.; - the code needed to build colors from their name, hexadecimal or list of float is factored in this class (while currently there is at least 8 duplications in the sofa code base); - unifying the underlying data also offer the possibility to offer consistent user interface for colors . This PR will be the ground to solve issue #https://github.com/sofa-framework/sofa/issues/64. . This PR have no impact on the sofa source code. Checklist to be merge: ; - [x] succeed on each compilation setup on the CI.; - [x] does not generates new test failure. ; - [x] does not seems to break existing scenes. ; - [x] does not seems to break API compatibility. ; - [x] introduces new component with tests & documentation. ; - [x] is now 1 week old and no one send a 'no go' comment.",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/119
https://github.com/sofa-framework/sofa/pull/119:66,Testability,test,tests,66,"This PR adds a RGBAColor type in defaulttype as well as dedicated tests. . There is several advantage of doing so:; - no ambiguity in the code between a rgba color and vector4.; - the code needed to build colors from their name, hexadecimal or list of float is factored in this class (while currently there is at least 8 duplications in the sofa code base); - unifying the underlying data also offer the possibility to offer consistent user interface for colors . This PR will be the ground to solve issue #https://github.com/sofa-framework/sofa/issues/64. . This PR have no impact on the sofa source code. Checklist to be merge: ; - [x] succeed on each compilation setup on the CI.; - [x] does not generates new test failure. ; - [x] does not seems to break existing scenes. ; - [x] does not seems to break API compatibility. ; - [x] introduces new component with tests & documentation. ; - [x] is now 1 week old and no one send a 'no go' comment.",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/119
https://github.com/sofa-framework/sofa/pull/119:713,Testability,test,test,713,"This PR adds a RGBAColor type in defaulttype as well as dedicated tests. . There is several advantage of doing so:; - no ambiguity in the code between a rgba color and vector4.; - the code needed to build colors from their name, hexadecimal or list of float is factored in this class (while currently there is at least 8 duplications in the sofa code base); - unifying the underlying data also offer the possibility to offer consistent user interface for colors . This PR will be the ground to solve issue #https://github.com/sofa-framework/sofa/issues/64. . This PR have no impact on the sofa source code. Checklist to be merge: ; - [x] succeed on each compilation setup on the CI.; - [x] does not generates new test failure. ; - [x] does not seems to break existing scenes. ; - [x] does not seems to break API compatibility. ; - [x] introduces new component with tests & documentation. ; - [x] is now 1 week old and no one send a 'no go' comment.",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/119
https://github.com/sofa-framework/sofa/pull/119:865,Testability,test,tests,865,"This PR adds a RGBAColor type in defaulttype as well as dedicated tests. . There is several advantage of doing so:; - no ambiguity in the code between a rgba color and vector4.; - the code needed to build colors from their name, hexadecimal or list of float is factored in this class (while currently there is at least 8 duplications in the sofa code base); - unifying the underlying data also offer the possibility to offer consistent user interface for colors . This PR will be the ground to solve issue #https://github.com/sofa-framework/sofa/issues/64. . This PR have no impact on the sofa source code. Checklist to be merge: ; - [x] succeed on each compilation setup on the CI.; - [x] does not generates new test failure. ; - [x] does not seems to break existing scenes. ; - [x] does not seems to break API compatibility. ; - [x] introduces new component with tests & documentation. ; - [x] is now 1 week old and no one send a 'no go' comment.",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/119
https://github.com/sofa-framework/sofa/pull/122:161,Availability,error,error,161,FileRepository is used by too many components to be optional. As a consequence boost filesystem and locale are made required; This commit fixes undefined symbol error occurring at link time when the filesystem or locale boost lib are not installed,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/122
https://github.com/sofa-framework/sofa/pull/122:238,Deployability,install,installed,238,FileRepository is used by too many components to be optional. As a consequence boost filesystem and locale are made required; This commit fixes undefined symbol error occurring at link time when the filesystem or locale boost lib are not installed,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/122
https://github.com/sofa-framework/sofa/pull/124:1040,Availability,robust,robust,1040,"Summery of the problem statement:; currently in sofa there is not rules to describe colors inthe data fields. Consequently some components use Data<Vec3>, others rely on Data<Vec4> and others are using a combination of Data<string> with private float r,g,b,a member. So there are component that accepts color by string ""blue"" or ""#aabbccdd"", other works by passing ""0 1 0 1"" while others ""0 1 2"". This lack of consistency in a problem in term of user interface design which impact XML, python scene as all as in GUIs like runSofa or qtQuickSofa. To solve that I replace the existing data fields with a dedicated type for color (see defaulttype::RGBAColor introduced in PR #https://github.com/sofa-framework/sofa/pull/119) . The advantages are multiple:; - expose color in a consistent way to the users.; - all the components now supports the following way to set color: ""blue"", ""0 0 1 1"", ""0 0 1"", ""#0000AAAA"", ""#0000AA"", ""#00AA"", ""#00A"", ; - the code to convert the string to a RGBAColor is no more duplicated in component and is now more robust and reports more errors to the users. ; - the behavior of the RGBAColor public API is now tested in Color_test.cpp. . The disadvantage is that despite I try not to break things (especially in scene) ... it may happens (brecause the commit is rather big & touch a lot of files). So please test it on one or two scene of your choice and report problem. This PR depends on PR #https://github.com/sofa-framework/sofa/pull/119 ; This PR solve the Issue https://github.com/sofa-framework/sofa/issues/64. Checklist to be merge: ; - [ ] succeed on each compilation setup on the CI.; - [ ] does not generates new test failure. ; - [ ] does not seems to break existing scenes. ; - [ ] does not seems to break API compatibility. ; - [ ] introduces new component with tests & documentation. ; - [ ] is now 1 week old and no one send a 'no go' comment.",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/124
https://github.com/sofa-framework/sofa/pull/124:1064,Availability,error,errors,1064,"Summery of the problem statement:; currently in sofa there is not rules to describe colors inthe data fields. Consequently some components use Data<Vec3>, others rely on Data<Vec4> and others are using a combination of Data<string> with private float r,g,b,a member. So there are component that accepts color by string ""blue"" or ""#aabbccdd"", other works by passing ""0 1 0 1"" while others ""0 1 2"". This lack of consistency in a problem in term of user interface design which impact XML, python scene as all as in GUIs like runSofa or qtQuickSofa. To solve that I replace the existing data fields with a dedicated type for color (see defaulttype::RGBAColor introduced in PR #https://github.com/sofa-framework/sofa/pull/119) . The advantages are multiple:; - expose color in a consistent way to the users.; - all the components now supports the following way to set color: ""blue"", ""0 0 1 1"", ""0 0 1"", ""#0000AAAA"", ""#0000AA"", ""#00AA"", ""#00A"", ; - the code to convert the string to a RGBAColor is no more duplicated in component and is now more robust and reports more errors to the users. ; - the behavior of the RGBAColor public API is now tested in Color_test.cpp. . The disadvantage is that despite I try not to break things (especially in scene) ... it may happens (brecause the commit is rather big & touch a lot of files). So please test it on one or two scene of your choice and report problem. This PR depends on PR #https://github.com/sofa-framework/sofa/pull/119 ; This PR solve the Issue https://github.com/sofa-framework/sofa/issues/64. Checklist to be merge: ; - [ ] succeed on each compilation setup on the CI.; - [ ] does not generates new test failure. ; - [ ] does not seems to break existing scenes. ; - [ ] does not seems to break API compatibility. ; - [ ] introduces new component with tests & documentation. ; - [ ] is now 1 week old and no one send a 'no go' comment.",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/124
https://github.com/sofa-framework/sofa/pull/124:1656,Availability,failure,failure,1656,"Summery of the problem statement:; currently in sofa there is not rules to describe colors inthe data fields. Consequently some components use Data<Vec3>, others rely on Data<Vec4> and others are using a combination of Data<string> with private float r,g,b,a member. So there are component that accepts color by string ""blue"" or ""#aabbccdd"", other works by passing ""0 1 0 1"" while others ""0 1 2"". This lack of consistency in a problem in term of user interface design which impact XML, python scene as all as in GUIs like runSofa or qtQuickSofa. To solve that I replace the existing data fields with a dedicated type for color (see defaulttype::RGBAColor introduced in PR #https://github.com/sofa-framework/sofa/pull/119) . The advantages are multiple:; - expose color in a consistent way to the users.; - all the components now supports the following way to set color: ""blue"", ""0 0 1 1"", ""0 0 1"", ""#0000AAAA"", ""#0000AA"", ""#00AA"", ""#00A"", ; - the code to convert the string to a RGBAColor is no more duplicated in component and is now more robust and reports more errors to the users. ; - the behavior of the RGBAColor public API is now tested in Color_test.cpp. . The disadvantage is that despite I try not to break things (especially in scene) ... it may happens (brecause the commit is rather big & touch a lot of files). So please test it on one or two scene of your choice and report problem. This PR depends on PR #https://github.com/sofa-framework/sofa/pull/119 ; This PR solve the Issue https://github.com/sofa-framework/sofa/issues/64. Checklist to be merge: ; - [ ] succeed on each compilation setup on the CI.; - [ ] does not generates new test failure. ; - [ ] does not seems to break existing scenes. ; - [ ] does not seems to break API compatibility. ; - [ ] introduces new component with tests & documentation. ; - [ ] is now 1 week old and no one send a 'no go' comment.",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/124
https://github.com/sofa-framework/sofa/pull/124:451,Integrability,interface,interface,451,"Summery of the problem statement:; currently in sofa there is not rules to describe colors inthe data fields. Consequently some components use Data<Vec3>, others rely on Data<Vec4> and others are using a combination of Data<string> with private float r,g,b,a member. So there are component that accepts color by string ""blue"" or ""#aabbccdd"", other works by passing ""0 1 0 1"" while others ""0 1 2"". This lack of consistency in a problem in term of user interface design which impact XML, python scene as all as in GUIs like runSofa or qtQuickSofa. To solve that I replace the existing data fields with a dedicated type for color (see defaulttype::RGBAColor introduced in PR #https://github.com/sofa-framework/sofa/pull/119) . The advantages are multiple:; - expose color in a consistent way to the users.; - all the components now supports the following way to set color: ""blue"", ""0 0 1 1"", ""0 0 1"", ""#0000AAAA"", ""#0000AA"", ""#00AA"", ""#00A"", ; - the code to convert the string to a RGBAColor is no more duplicated in component and is now more robust and reports more errors to the users. ; - the behavior of the RGBAColor public API is now tested in Color_test.cpp. . The disadvantage is that despite I try not to break things (especially in scene) ... it may happens (brecause the commit is rather big & touch a lot of files). So please test it on one or two scene of your choice and report problem. This PR depends on PR #https://github.com/sofa-framework/sofa/pull/119 ; This PR solve the Issue https://github.com/sofa-framework/sofa/issues/64. Checklist to be merge: ; - [ ] succeed on each compilation setup on the CI.; - [ ] does not generates new test failure. ; - [ ] does not seems to break existing scenes. ; - [ ] does not seems to break API compatibility. ; - [ ] introduces new component with tests & documentation. ; - [ ] is now 1 week old and no one send a 'no go' comment.",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/124
https://github.com/sofa-framework/sofa/pull/124:1406,Integrability,depend,depends,1406,"Summery of the problem statement:; currently in sofa there is not rules to describe colors inthe data fields. Consequently some components use Data<Vec3>, others rely on Data<Vec4> and others are using a combination of Data<string> with private float r,g,b,a member. So there are component that accepts color by string ""blue"" or ""#aabbccdd"", other works by passing ""0 1 0 1"" while others ""0 1 2"". This lack of consistency in a problem in term of user interface design which impact XML, python scene as all as in GUIs like runSofa or qtQuickSofa. To solve that I replace the existing data fields with a dedicated type for color (see defaulttype::RGBAColor introduced in PR #https://github.com/sofa-framework/sofa/pull/119) . The advantages are multiple:; - expose color in a consistent way to the users.; - all the components now supports the following way to set color: ""blue"", ""0 0 1 1"", ""0 0 1"", ""#0000AAAA"", ""#0000AA"", ""#00AA"", ""#00A"", ; - the code to convert the string to a RGBAColor is no more duplicated in component and is now more robust and reports more errors to the users. ; - the behavior of the RGBAColor public API is now tested in Color_test.cpp. . The disadvantage is that despite I try not to break things (especially in scene) ... it may happens (brecause the commit is rather big & touch a lot of files). So please test it on one or two scene of your choice and report problem. This PR depends on PR #https://github.com/sofa-framework/sofa/pull/119 ; This PR solve the Issue https://github.com/sofa-framework/sofa/issues/64. Checklist to be merge: ; - [ ] succeed on each compilation setup on the CI.; - [ ] does not generates new test failure. ; - [ ] does not seems to break existing scenes. ; - [ ] does not seems to break API compatibility. ; - [ ] introduces new component with tests & documentation. ; - [ ] is now 1 week old and no one send a 'no go' comment.",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/124
https://github.com/sofa-framework/sofa/pull/124:756,Security,expose,expose,756,"Summery of the problem statement:; currently in sofa there is not rules to describe colors inthe data fields. Consequently some components use Data<Vec3>, others rely on Data<Vec4> and others are using a combination of Data<string> with private float r,g,b,a member. So there are component that accepts color by string ""blue"" or ""#aabbccdd"", other works by passing ""0 1 0 1"" while others ""0 1 2"". This lack of consistency in a problem in term of user interface design which impact XML, python scene as all as in GUIs like runSofa or qtQuickSofa. To solve that I replace the existing data fields with a dedicated type for color (see defaulttype::RGBAColor introduced in PR #https://github.com/sofa-framework/sofa/pull/119) . The advantages are multiple:; - expose color in a consistent way to the users.; - all the components now supports the following way to set color: ""blue"", ""0 0 1 1"", ""0 0 1"", ""#0000AAAA"", ""#0000AA"", ""#00AA"", ""#00A"", ; - the code to convert the string to a RGBAColor is no more duplicated in component and is now more robust and reports more errors to the users. ; - the behavior of the RGBAColor public API is now tested in Color_test.cpp. . The disadvantage is that despite I try not to break things (especially in scene) ... it may happens (brecause the commit is rather big & touch a lot of files). So please test it on one or two scene of your choice and report problem. This PR depends on PR #https://github.com/sofa-framework/sofa/pull/119 ; This PR solve the Issue https://github.com/sofa-framework/sofa/issues/64. Checklist to be merge: ; - [ ] succeed on each compilation setup on the CI.; - [ ] does not generates new test failure. ; - [ ] does not seems to break existing scenes. ; - [ ] does not seems to break API compatibility. ; - [ ] introduces new component with tests & documentation. ; - [ ] is now 1 week old and no one send a 'no go' comment.",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/124
https://github.com/sofa-framework/sofa/pull/124:1137,Testability,test,tested,1137,"Summery of the problem statement:; currently in sofa there is not rules to describe colors inthe data fields. Consequently some components use Data<Vec3>, others rely on Data<Vec4> and others are using a combination of Data<string> with private float r,g,b,a member. So there are component that accepts color by string ""blue"" or ""#aabbccdd"", other works by passing ""0 1 0 1"" while others ""0 1 2"". This lack of consistency in a problem in term of user interface design which impact XML, python scene as all as in GUIs like runSofa or qtQuickSofa. To solve that I replace the existing data fields with a dedicated type for color (see defaulttype::RGBAColor introduced in PR #https://github.com/sofa-framework/sofa/pull/119) . The advantages are multiple:; - expose color in a consistent way to the users.; - all the components now supports the following way to set color: ""blue"", ""0 0 1 1"", ""0 0 1"", ""#0000AAAA"", ""#0000AA"", ""#00AA"", ""#00A"", ; - the code to convert the string to a RGBAColor is no more duplicated in component and is now more robust and reports more errors to the users. ; - the behavior of the RGBAColor public API is now tested in Color_test.cpp. . The disadvantage is that despite I try not to break things (especially in scene) ... it may happens (brecause the commit is rather big & touch a lot of files). So please test it on one or two scene of your choice and report problem. This PR depends on PR #https://github.com/sofa-framework/sofa/pull/119 ; This PR solve the Issue https://github.com/sofa-framework/sofa/issues/64. Checklist to be merge: ; - [ ] succeed on each compilation setup on the CI.; - [ ] does not generates new test failure. ; - [ ] does not seems to break existing scenes. ; - [ ] does not seems to break API compatibility. ; - [ ] introduces new component with tests & documentation. ; - [ ] is now 1 week old and no one send a 'no go' comment.",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/124
https://github.com/sofa-framework/sofa/pull/124:1335,Testability,test,test,1335,"Summery of the problem statement:; currently in sofa there is not rules to describe colors inthe data fields. Consequently some components use Data<Vec3>, others rely on Data<Vec4> and others are using a combination of Data<string> with private float r,g,b,a member. So there are component that accepts color by string ""blue"" or ""#aabbccdd"", other works by passing ""0 1 0 1"" while others ""0 1 2"". This lack of consistency in a problem in term of user interface design which impact XML, python scene as all as in GUIs like runSofa or qtQuickSofa. To solve that I replace the existing data fields with a dedicated type for color (see defaulttype::RGBAColor introduced in PR #https://github.com/sofa-framework/sofa/pull/119) . The advantages are multiple:; - expose color in a consistent way to the users.; - all the components now supports the following way to set color: ""blue"", ""0 0 1 1"", ""0 0 1"", ""#0000AAAA"", ""#0000AA"", ""#00AA"", ""#00A"", ; - the code to convert the string to a RGBAColor is no more duplicated in component and is now more robust and reports more errors to the users. ; - the behavior of the RGBAColor public API is now tested in Color_test.cpp. . The disadvantage is that despite I try not to break things (especially in scene) ... it may happens (brecause the commit is rather big & touch a lot of files). So please test it on one or two scene of your choice and report problem. This PR depends on PR #https://github.com/sofa-framework/sofa/pull/119 ; This PR solve the Issue https://github.com/sofa-framework/sofa/issues/64. Checklist to be merge: ; - [ ] succeed on each compilation setup on the CI.; - [ ] does not generates new test failure. ; - [ ] does not seems to break existing scenes. ; - [ ] does not seems to break API compatibility. ; - [ ] introduces new component with tests & documentation. ; - [ ] is now 1 week old and no one send a 'no go' comment.",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/124
https://github.com/sofa-framework/sofa/pull/124:1651,Testability,test,test,1651,"Summery of the problem statement:; currently in sofa there is not rules to describe colors inthe data fields. Consequently some components use Data<Vec3>, others rely on Data<Vec4> and others are using a combination of Data<string> with private float r,g,b,a member. So there are component that accepts color by string ""blue"" or ""#aabbccdd"", other works by passing ""0 1 0 1"" while others ""0 1 2"". This lack of consistency in a problem in term of user interface design which impact XML, python scene as all as in GUIs like runSofa or qtQuickSofa. To solve that I replace the existing data fields with a dedicated type for color (see defaulttype::RGBAColor introduced in PR #https://github.com/sofa-framework/sofa/pull/119) . The advantages are multiple:; - expose color in a consistent way to the users.; - all the components now supports the following way to set color: ""blue"", ""0 0 1 1"", ""0 0 1"", ""#0000AAAA"", ""#0000AA"", ""#00AA"", ""#00A"", ; - the code to convert the string to a RGBAColor is no more duplicated in component and is now more robust and reports more errors to the users. ; - the behavior of the RGBAColor public API is now tested in Color_test.cpp. . The disadvantage is that despite I try not to break things (especially in scene) ... it may happens (brecause the commit is rather big & touch a lot of files). So please test it on one or two scene of your choice and report problem. This PR depends on PR #https://github.com/sofa-framework/sofa/pull/119 ; This PR solve the Issue https://github.com/sofa-framework/sofa/issues/64. Checklist to be merge: ; - [ ] succeed on each compilation setup on the CI.; - [ ] does not generates new test failure. ; - [ ] does not seems to break existing scenes. ; - [ ] does not seems to break API compatibility. ; - [ ] introduces new component with tests & documentation. ; - [ ] is now 1 week old and no one send a 'no go' comment.",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/124
https://github.com/sofa-framework/sofa/pull/124:1803,Testability,test,tests,1803,"Summery of the problem statement:; currently in sofa there is not rules to describe colors inthe data fields. Consequently some components use Data<Vec3>, others rely on Data<Vec4> and others are using a combination of Data<string> with private float r,g,b,a member. So there are component that accepts color by string ""blue"" or ""#aabbccdd"", other works by passing ""0 1 0 1"" while others ""0 1 2"". This lack of consistency in a problem in term of user interface design which impact XML, python scene as all as in GUIs like runSofa or qtQuickSofa. To solve that I replace the existing data fields with a dedicated type for color (see defaulttype::RGBAColor introduced in PR #https://github.com/sofa-framework/sofa/pull/119) . The advantages are multiple:; - expose color in a consistent way to the users.; - all the components now supports the following way to set color: ""blue"", ""0 0 1 1"", ""0 0 1"", ""#0000AAAA"", ""#0000AA"", ""#00AA"", ""#00A"", ; - the code to convert the string to a RGBAColor is no more duplicated in component and is now more robust and reports more errors to the users. ; - the behavior of the RGBAColor public API is now tested in Color_test.cpp. . The disadvantage is that despite I try not to break things (especially in scene) ... it may happens (brecause the commit is rather big & touch a lot of files). So please test it on one or two scene of your choice and report problem. This PR depends on PR #https://github.com/sofa-framework/sofa/pull/119 ; This PR solve the Issue https://github.com/sofa-framework/sofa/issues/64. Checklist to be merge: ; - [ ] succeed on each compilation setup on the CI.; - [ ] does not generates new test failure. ; - [ ] does not seems to break existing scenes. ; - [ ] does not seems to break API compatibility. ; - [ ] introduces new component with tests & documentation. ; - [ ] is now 1 week old and no one send a 'no go' comment.",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/124
https://github.com/sofa-framework/sofa/issues/127:212,Deployability,release,release,212,"I built sofa v16.08 on CentOS 7 using GCC 4.8.5 with the default cmake options. The build completes successfully. However, when I execute runSofa it terminates due to a segfault. This happens with both debug and release builds. Here's the stack trace after running in debugger:. ```; #0 0x00007ffff7b32133 in sofa::simulation::graph::DAGNode::detachFromGraph (this=0x18a1190) at /media/nvme4/sofa/v16.08/SofaKernel/modules/SofaSimulationGraph/DAGNode.cpp:128; #1 0x00007ffff687257e in sofa::gui::PickHandler::init (this=0xaec5f0, root=0xbe9b40) at /media/nvme4/sofa/v16.08/applications/sofa/gui/PickHandler.cpp:164; #2 0x00007ffff686336e in sofa::gui::BaseViewer::load (this=0x97f178) at /media/nvme4/sofa/v16.08/applications/sofa/gui/BaseViewer.cpp:283; #3 0x00007ffff71c9d61 in sofa::gui::qt::RealGUI::setScene (this=0x8b5ab0, root=..., filename=0x78cbb8 ""/media/nvme4/sofa/v16.08/examples/Demos/caduceus.scn"", temporaryFile=false); at /media/nvme4/sofa/v16.08/applications/sofa/gui/qt/RealGUI.cpp:883; #4 0x00007ffff687b1af in sofa::gui::GUIManager::SetScene (groot=..., filename=0x78cbb8 ""/media/nvme4/sofa/v16.08/examples/Demos/caduceus.scn"", temporaryFile=false) at /media/nvme4/sofa/v16.08/applications/sofa/gui/GUIManager.cpp:298; #5 0x000000000040ef7b in main (argc=1, argv=0x7fffffffa798) at /media/nvme4/sofa/v16.08/applications/projects/runSofa/Main.cpp:374; ```. I tried running some of the tutorial applications as well and it looks like the segfault occurs anytime the sofa simulation gets initialized with a ```DAGSimulation```. e.g. the ```chainHybrid``` tutorial application starts successfully (it uses a ```TreeSimulation```) while one ```oneParticle``` exhibits the segfault. Here's the backtrace from running ```oneParticle```:. ```; #0 0x00007ffff7b3b4d4 in sofa::core::objectmodel::LinkTraitsValueType<sofa::simulation::graph::DAGNode, sofa::simulation::graph::DAGNode*, false, true>::T::operator-> (this=0x8); at /media/nvme4/sofa/v16.08/SofaKernel/framework/sofa/core/../../s",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/127
https://github.com/sofa-framework/sofa/issues/127:664,Performance,load,load,664,"I built sofa v16.08 on CentOS 7 using GCC 4.8.5 with the default cmake options. The build completes successfully. However, when I execute runSofa it terminates due to a segfault. This happens with both debug and release builds. Here's the stack trace after running in debugger:. ```; #0 0x00007ffff7b32133 in sofa::simulation::graph::DAGNode::detachFromGraph (this=0x18a1190) at /media/nvme4/sofa/v16.08/SofaKernel/modules/SofaSimulationGraph/DAGNode.cpp:128; #1 0x00007ffff687257e in sofa::gui::PickHandler::init (this=0xaec5f0, root=0xbe9b40) at /media/nvme4/sofa/v16.08/applications/sofa/gui/PickHandler.cpp:164; #2 0x00007ffff686336e in sofa::gui::BaseViewer::load (this=0x97f178) at /media/nvme4/sofa/v16.08/applications/sofa/gui/BaseViewer.cpp:283; #3 0x00007ffff71c9d61 in sofa::gui::qt::RealGUI::setScene (this=0x8b5ab0, root=..., filename=0x78cbb8 ""/media/nvme4/sofa/v16.08/examples/Demos/caduceus.scn"", temporaryFile=false); at /media/nvme4/sofa/v16.08/applications/sofa/gui/qt/RealGUI.cpp:883; #4 0x00007ffff687b1af in sofa::gui::GUIManager::SetScene (groot=..., filename=0x78cbb8 ""/media/nvme4/sofa/v16.08/examples/Demos/caduceus.scn"", temporaryFile=false) at /media/nvme4/sofa/v16.08/applications/sofa/gui/GUIManager.cpp:298; #5 0x000000000040ef7b in main (argc=1, argv=0x7fffffffa798) at /media/nvme4/sofa/v16.08/applications/projects/runSofa/Main.cpp:374; ```. I tried running some of the tutorial applications as well and it looks like the segfault occurs anytime the sofa simulation gets initialized with a ```DAGSimulation```. e.g. the ```chainHybrid``` tutorial application starts successfully (it uses a ```TreeSimulation```) while one ```oneParticle``` exhibits the segfault. Here's the backtrace from running ```oneParticle```:. ```; #0 0x00007ffff7b3b4d4 in sofa::core::objectmodel::LinkTraitsValueType<sofa::simulation::graph::DAGNode, sofa::simulation::graph::DAGNode*, false, true>::T::operator-> (this=0x8); at /media/nvme4/sofa/v16.08/SofaKernel/framework/sofa/core/../../s",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/127
https://github.com/sofa-framework/sofa/issues/127:2413,Performance,load,load,2413,"4/sofa/v16.08/applications/projects/runSofa/Main.cpp:374; ```. I tried running some of the tutorial applications as well and it looks like the segfault occurs anytime the sofa simulation gets initialized with a ```DAGSimulation```. e.g. the ```chainHybrid``` tutorial application starts successfully (it uses a ```TreeSimulation```) while one ```oneParticle``` exhibits the segfault. Here's the backtrace from running ```oneParticle```:. ```; #0 0x00007ffff7b3b4d4 in sofa::core::objectmodel::LinkTraitsValueType<sofa::simulation::graph::DAGNode, sofa::simulation::graph::DAGNode*, false, true>::T::operator-> (this=0x8); at /media/nvme4/sofa/v16.08/SofaKernel/framework/sofa/core/../../sofa/core/objectmodel/Link.h:100; #1 0x00007ffff7b32104 in sofa::simulation::graph::DAGNode::detachFromGraph (this=0x9d1f80) at /media/nvme4/sofa/v16.08/SofaKernel/modules/SofaSimulationGraph/DAGNode.cpp:128; #2 0x00007ffff687257e in sofa::gui::PickHandler::init (this=0x948090, root=0x6e1300) at /media/nvme4/sofa/v16.08/applications/sofa/gui/PickHandler.cpp:164; #3 0x00007ffff686336e in sofa::gui::BaseViewer::load (this=0x801648) at /media/nvme4/sofa/v16.08/applications/sofa/gui/BaseViewer.cpp:283; #4 0x00007ffff71c9d61 in sofa::gui::qt::RealGUI::setScene (this=0x7384c0, root=..., filename=0x0, temporaryFile=false) at /media/nvme4/sofa/v16.08/applications/sofa/gui/qt/RealGUI.cpp:883; #5 0x00007ffff71c67cc in sofa::gui::qt::RealGUI::CreateGUI (name=0x7ffff783c7a5 ""qglviewer"", options=std::vector of length 0, capacity 0, root=..., filename=0x0) at /media/nvme4/sofa/v16.08/applications/sofa/gui/qt/RealGUI.cpp:170; #6 0x00007ffff687af1b in sofa::gui::GUIManager::createGUI (groot=..., filename=0x0) at /media/nvme4/sofa/v16.08/applications/sofa/gui/GUIManager.cpp:261; #7 0x0000000000409de7 in main (argc=1, argv=0x7fffffffa788) at /media/nvme4/sofa/v16.08/applications/tutorials/oneParticle/oneParticle.cpp:127; ```. I tried building with Clang 3.4.2 and observe the same issue. Any tips for resolving?",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/127
https://github.com/sofa-framework/sofa/issues/128:101,Modifiability,plugin,plugins,101,This issue is following a dev-meeting discussion about putting much more of the sofa components into plugins. . This issue is to continue the discussion and keep a trace.,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/128
https://github.com/sofa-framework/sofa/pull/129:151,Deployability,configurat,configurations,151,"This PR adds support for Visual Studio 13 in the ci scripts. VS2013 builds (on ci) won't work without this.; As soon as the builds of every non-VS2013 configurations are ok on this branch (see https://www.sofa-framework.org/dash/index.php?branch=origin%2Fci-vs2013 ) , I believe it is save to merge.",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/129
https://github.com/sofa-framework/sofa/pull/129:151,Modifiability,config,configurations,151,"This PR adds support for Visual Studio 13 in the ci scripts. VS2013 builds (on ci) won't work without this.; As soon as the builds of every non-VS2013 configurations are ok on this branch (see https://www.sofa-framework.org/dash/index.php?branch=origin%2Fci-vs2013 ) , I believe it is save to merge.",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/129
https://github.com/sofa-framework/sofa/issues/130:178,Availability,error,error,178,"Hi all,. for the PR # https://github.com/sofa-framework/sofa/pull/119; implementing a basic RGBAColor i'm inheriting from Vec4f. This seems to fail on VS compiler. The resulting error on VS2015 is the following (the static_asserts):; https://ci.inria.fr/sofa-ci/job/windows7_VS-2015_default_amd64/1002/console. This seems to suggest that the templated code is 'generated' while it shouldn't. . Any help is welcome.",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/130
https://github.com/sofa-framework/sofa/issues/130:106,Modifiability,inherit,inheriting,106,"Hi all,. for the PR # https://github.com/sofa-framework/sofa/pull/119; implementing a basic RGBAColor i'm inheriting from Vec4f. This seems to fail on VS compiler. The resulting error on VS2015 is the following (the static_asserts):; https://ci.inria.fr/sofa-ci/job/windows7_VS-2015_default_amd64/1002/console. This seems to suggest that the templated code is 'generated' while it shouldn't. . Any help is welcome.",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/130
https://github.com/sofa-framework/sofa/pull/133:429,Availability,failure,failure,429,"Small (and first) Pullrequest to add several methods in plugin SceneCreator:. - to add basic 3D object: Cube, Cylinder, Plane. In rigid or deformable.; - also add an executable sceneCreatorExamples to run simple examples using those methods.; - Minor changes in TriangularFEM and CylindricalGrid to use those components. This PR: ; - [x] succeed on each compilation setup on the CI; - [x] does not generates new warnings or test failure; - [x] does not seems to break existing scenes.; - [x] does not seems to break API compatibility. ; - [x] clean stuff; - [x] is now 1 week old and no one send a 'no go' comment. ; - [x] have tests on the introduced features.",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/133
https://github.com/sofa-framework/sofa/pull/133:56,Modifiability,plugin,plugin,56,"Small (and first) Pullrequest to add several methods in plugin SceneCreator:. - to add basic 3D object: Cube, Cylinder, Plane. In rigid or deformable.; - also add an executable sceneCreatorExamples to run simple examples using those methods.; - Minor changes in TriangularFEM and CylindricalGrid to use those components. This PR: ; - [x] succeed on each compilation setup on the CI; - [x] does not generates new warnings or test failure; - [x] does not seems to break existing scenes.; - [x] does not seems to break API compatibility. ; - [x] clean stuff; - [x] is now 1 week old and no one send a 'no go' comment. ; - [x] have tests on the introduced features.",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/133
https://github.com/sofa-framework/sofa/pull/133:424,Testability,test,test,424,"Small (and first) Pullrequest to add several methods in plugin SceneCreator:. - to add basic 3D object: Cube, Cylinder, Plane. In rigid or deformable.; - also add an executable sceneCreatorExamples to run simple examples using those methods.; - Minor changes in TriangularFEM and CylindricalGrid to use those components. This PR: ; - [x] succeed on each compilation setup on the CI; - [x] does not generates new warnings or test failure; - [x] does not seems to break existing scenes.; - [x] does not seems to break API compatibility. ; - [x] clean stuff; - [x] is now 1 week old and no one send a 'no go' comment. ; - [x] have tests on the introduced features.",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/133
https://github.com/sofa-framework/sofa/pull/133:628,Testability,test,tests,628,"Small (and first) Pullrequest to add several methods in plugin SceneCreator:. - to add basic 3D object: Cube, Cylinder, Plane. In rigid or deformable.; - also add an executable sceneCreatorExamples to run simple examples using those methods.; - Minor changes in TriangularFEM and CylindricalGrid to use those components. This PR: ; - [x] succeed on each compilation setup on the CI; - [x] does not generates new warnings or test failure; - [x] does not seems to break existing scenes.; - [x] does not seems to break API compatibility. ; - [x] clean stuff; - [x] is now 1 week old and no one send a 'no go' comment. ; - [x] have tests on the introduced features.",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/133
https://github.com/sofa-framework/sofa/pull/133:205,Usability,simpl,simple,205,"Small (and first) Pullrequest to add several methods in plugin SceneCreator:. - to add basic 3D object: Cube, Cylinder, Plane. In rigid or deformable.; - also add an executable sceneCreatorExamples to run simple examples using those methods.; - Minor changes in TriangularFEM and CylindricalGrid to use those components. This PR: ; - [x] succeed on each compilation setup on the CI; - [x] does not generates new warnings or test failure; - [x] does not seems to break existing scenes.; - [x] does not seems to break API compatibility. ; - [x] clean stuff; - [x] is now 1 week old and no one send a 'no go' comment. ; - [x] have tests on the introduced features.",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/133
https://github.com/sofa-framework/sofa/issues/134:293,Integrability,depend,depending,293,"Some FEM have similar members and methods but the behaviour slightly changes sometimes. For example:; - In triangular and tetrahedronFEM, you have to choose the method using an enum: (large, small, etc...). In triangular, Large = 0 and in tetra, Large = 1. ; Which is stored as string or enum depending on components.; - Same for setter and getter, you have: TriangularFEMForceField::setYoung vs TetrahedronFEMForceField::setYoungModulus. setPoissonRatio vs setPoisson. Could we setup a commun api for those components? Can someone identify one FEM which could be the reference.",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/134
https://github.com/sofa-framework/sofa/issues/135:101,Availability,error,error-with-cimg-plugin-with-dependancy-to-skeleton-h-does-not-compile,101,"This issue was first discovered by @rosaliepl : https://www.sofa-framework.org/community/forum/topic/error-with-cimg-plugin-with-dependancy-to-skeleton-h-does-not-compile/#post-8397. The image plugin supports the python plugin, but does not require it. However, when linking the image plugin into an external project by using the install path of sofa, the image plugin lists the python plugin as a required dependency. CMake will then return the following error:. ```; CMake Error at CMakeLists.txt:50 (find_package):; Found package configuration file:. /.../sofa/build/install/lib/cmake/image/imageConfig.cmake. but it set image_FOUND to FALSE so package ""image"" is considered to be NOT; FOUND. Reason given by package:. The following imported targets are referenced, but are missing: SofaPython. -- Configuring incomplete, errors occurred!; ```. To reproduce the bug; 1. Compile SOFA with the image plugin activated, but without python plugin; 2. Lauch cmake on an external project and add the image plugin as a dependency; `find_package(image REQUIRED)`",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/135
https://github.com/sofa-framework/sofa/issues/135:456,Availability,error,error,456,"This issue was first discovered by @rosaliepl : https://www.sofa-framework.org/community/forum/topic/error-with-cimg-plugin-with-dependancy-to-skeleton-h-does-not-compile/#post-8397. The image plugin supports the python plugin, but does not require it. However, when linking the image plugin into an external project by using the install path of sofa, the image plugin lists the python plugin as a required dependency. CMake will then return the following error:. ```; CMake Error at CMakeLists.txt:50 (find_package):; Found package configuration file:. /.../sofa/build/install/lib/cmake/image/imageConfig.cmake. but it set image_FOUND to FALSE so package ""image"" is considered to be NOT; FOUND. Reason given by package:. The following imported targets are referenced, but are missing: SofaPython. -- Configuring incomplete, errors occurred!; ```. To reproduce the bug; 1. Compile SOFA with the image plugin activated, but without python plugin; 2. Lauch cmake on an external project and add the image plugin as a dependency; `find_package(image REQUIRED)`",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/135
https://github.com/sofa-framework/sofa/issues/135:475,Availability,Error,Error,475,"This issue was first discovered by @rosaliepl : https://www.sofa-framework.org/community/forum/topic/error-with-cimg-plugin-with-dependancy-to-skeleton-h-does-not-compile/#post-8397. The image plugin supports the python plugin, but does not require it. However, when linking the image plugin into an external project by using the install path of sofa, the image plugin lists the python plugin as a required dependency. CMake will then return the following error:. ```; CMake Error at CMakeLists.txt:50 (find_package):; Found package configuration file:. /.../sofa/build/install/lib/cmake/image/imageConfig.cmake. but it set image_FOUND to FALSE so package ""image"" is considered to be NOT; FOUND. Reason given by package:. The following imported targets are referenced, but are missing: SofaPython. -- Configuring incomplete, errors occurred!; ```. To reproduce the bug; 1. Compile SOFA with the image plugin activated, but without python plugin; 2. Lauch cmake on an external project and add the image plugin as a dependency; `find_package(image REQUIRED)`",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/135
https://github.com/sofa-framework/sofa/issues/135:825,Availability,error,errors,825,"This issue was first discovered by @rosaliepl : https://www.sofa-framework.org/community/forum/topic/error-with-cimg-plugin-with-dependancy-to-skeleton-h-does-not-compile/#post-8397. The image plugin supports the python plugin, but does not require it. However, when linking the image plugin into an external project by using the install path of sofa, the image plugin lists the python plugin as a required dependency. CMake will then return the following error:. ```; CMake Error at CMakeLists.txt:50 (find_package):; Found package configuration file:. /.../sofa/build/install/lib/cmake/image/imageConfig.cmake. but it set image_FOUND to FALSE so package ""image"" is considered to be NOT; FOUND. Reason given by package:. The following imported targets are referenced, but are missing: SofaPython. -- Configuring incomplete, errors occurred!; ```. To reproduce the bug; 1. Compile SOFA with the image plugin activated, but without python plugin; 2. Lauch cmake on an external project and add the image plugin as a dependency; `find_package(image REQUIRED)`",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/135
https://github.com/sofa-framework/sofa/issues/135:330,Deployability,install,install,330,"This issue was first discovered by @rosaliepl : https://www.sofa-framework.org/community/forum/topic/error-with-cimg-plugin-with-dependancy-to-skeleton-h-does-not-compile/#post-8397. The image plugin supports the python plugin, but does not require it. However, when linking the image plugin into an external project by using the install path of sofa, the image plugin lists the python plugin as a required dependency. CMake will then return the following error:. ```; CMake Error at CMakeLists.txt:50 (find_package):; Found package configuration file:. /.../sofa/build/install/lib/cmake/image/imageConfig.cmake. but it set image_FOUND to FALSE so package ""image"" is considered to be NOT; FOUND. Reason given by package:. The following imported targets are referenced, but are missing: SofaPython. -- Configuring incomplete, errors occurred!; ```. To reproduce the bug; 1. Compile SOFA with the image plugin activated, but without python plugin; 2. Lauch cmake on an external project and add the image plugin as a dependency; `find_package(image REQUIRED)`",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/135
https://github.com/sofa-framework/sofa/issues/135:533,Deployability,configurat,configuration,533,"This issue was first discovered by @rosaliepl : https://www.sofa-framework.org/community/forum/topic/error-with-cimg-plugin-with-dependancy-to-skeleton-h-does-not-compile/#post-8397. The image plugin supports the python plugin, but does not require it. However, when linking the image plugin into an external project by using the install path of sofa, the image plugin lists the python plugin as a required dependency. CMake will then return the following error:. ```; CMake Error at CMakeLists.txt:50 (find_package):; Found package configuration file:. /.../sofa/build/install/lib/cmake/image/imageConfig.cmake. but it set image_FOUND to FALSE so package ""image"" is considered to be NOT; FOUND. Reason given by package:. The following imported targets are referenced, but are missing: SofaPython. -- Configuring incomplete, errors occurred!; ```. To reproduce the bug; 1. Compile SOFA with the image plugin activated, but without python plugin; 2. Lauch cmake on an external project and add the image plugin as a dependency; `find_package(image REQUIRED)`",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/135
https://github.com/sofa-framework/sofa/issues/135:570,Deployability,install,install,570,"This issue was first discovered by @rosaliepl : https://www.sofa-framework.org/community/forum/topic/error-with-cimg-plugin-with-dependancy-to-skeleton-h-does-not-compile/#post-8397. The image plugin supports the python plugin, but does not require it. However, when linking the image plugin into an external project by using the install path of sofa, the image plugin lists the python plugin as a required dependency. CMake will then return the following error:. ```; CMake Error at CMakeLists.txt:50 (find_package):; Found package configuration file:. /.../sofa/build/install/lib/cmake/image/imageConfig.cmake. but it set image_FOUND to FALSE so package ""image"" is considered to be NOT; FOUND. Reason given by package:. The following imported targets are referenced, but are missing: SofaPython. -- Configuring incomplete, errors occurred!; ```. To reproduce the bug; 1. Compile SOFA with the image plugin activated, but without python plugin; 2. Lauch cmake on an external project and add the image plugin as a dependency; `find_package(image REQUIRED)`",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/135
https://github.com/sofa-framework/sofa/issues/135:129,Integrability,depend,dependancy-to-skeleton-h-does-not-compile,129,"This issue was first discovered by @rosaliepl : https://www.sofa-framework.org/community/forum/topic/error-with-cimg-plugin-with-dependancy-to-skeleton-h-does-not-compile/#post-8397. The image plugin supports the python plugin, but does not require it. However, when linking the image plugin into an external project by using the install path of sofa, the image plugin lists the python plugin as a required dependency. CMake will then return the following error:. ```; CMake Error at CMakeLists.txt:50 (find_package):; Found package configuration file:. /.../sofa/build/install/lib/cmake/image/imageConfig.cmake. but it set image_FOUND to FALSE so package ""image"" is considered to be NOT; FOUND. Reason given by package:. The following imported targets are referenced, but are missing: SofaPython. -- Configuring incomplete, errors occurred!; ```. To reproduce the bug; 1. Compile SOFA with the image plugin activated, but without python plugin; 2. Lauch cmake on an external project and add the image plugin as a dependency; `find_package(image REQUIRED)`",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/135
https://github.com/sofa-framework/sofa/issues/135:407,Integrability,depend,dependency,407,"This issue was first discovered by @rosaliepl : https://www.sofa-framework.org/community/forum/topic/error-with-cimg-plugin-with-dependancy-to-skeleton-h-does-not-compile/#post-8397. The image plugin supports the python plugin, but does not require it. However, when linking the image plugin into an external project by using the install path of sofa, the image plugin lists the python plugin as a required dependency. CMake will then return the following error:. ```; CMake Error at CMakeLists.txt:50 (find_package):; Found package configuration file:. /.../sofa/build/install/lib/cmake/image/imageConfig.cmake. but it set image_FOUND to FALSE so package ""image"" is considered to be NOT; FOUND. Reason given by package:. The following imported targets are referenced, but are missing: SofaPython. -- Configuring incomplete, errors occurred!; ```. To reproduce the bug; 1. Compile SOFA with the image plugin activated, but without python plugin; 2. Lauch cmake on an external project and add the image plugin as a dependency; `find_package(image REQUIRED)`",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/135
https://github.com/sofa-framework/sofa/issues/135:1014,Integrability,depend,dependency,1014,"This issue was first discovered by @rosaliepl : https://www.sofa-framework.org/community/forum/topic/error-with-cimg-plugin-with-dependancy-to-skeleton-h-does-not-compile/#post-8397. The image plugin supports the python plugin, but does not require it. However, when linking the image plugin into an external project by using the install path of sofa, the image plugin lists the python plugin as a required dependency. CMake will then return the following error:. ```; CMake Error at CMakeLists.txt:50 (find_package):; Found package configuration file:. /.../sofa/build/install/lib/cmake/image/imageConfig.cmake. but it set image_FOUND to FALSE so package ""image"" is considered to be NOT; FOUND. Reason given by package:. The following imported targets are referenced, but are missing: SofaPython. -- Configuring incomplete, errors occurred!; ```. To reproduce the bug; 1. Compile SOFA with the image plugin activated, but without python plugin; 2. Lauch cmake on an external project and add the image plugin as a dependency; `find_package(image REQUIRED)`",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/135
https://github.com/sofa-framework/sofa/issues/135:117,Modifiability,plugin,plugin-with-dependancy-to-skeleton-h-does-not-compile,117,"This issue was first discovered by @rosaliepl : https://www.sofa-framework.org/community/forum/topic/error-with-cimg-plugin-with-dependancy-to-skeleton-h-does-not-compile/#post-8397. The image plugin supports the python plugin, but does not require it. However, when linking the image plugin into an external project by using the install path of sofa, the image plugin lists the python plugin as a required dependency. CMake will then return the following error:. ```; CMake Error at CMakeLists.txt:50 (find_package):; Found package configuration file:. /.../sofa/build/install/lib/cmake/image/imageConfig.cmake. but it set image_FOUND to FALSE so package ""image"" is considered to be NOT; FOUND. Reason given by package:. The following imported targets are referenced, but are missing: SofaPython. -- Configuring incomplete, errors occurred!; ```. To reproduce the bug; 1. Compile SOFA with the image plugin activated, but without python plugin; 2. Lauch cmake on an external project and add the image plugin as a dependency; `find_package(image REQUIRED)`",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/135
https://github.com/sofa-framework/sofa/issues/135:193,Modifiability,plugin,plugin,193,"This issue was first discovered by @rosaliepl : https://www.sofa-framework.org/community/forum/topic/error-with-cimg-plugin-with-dependancy-to-skeleton-h-does-not-compile/#post-8397. The image plugin supports the python plugin, but does not require it. However, when linking the image plugin into an external project by using the install path of sofa, the image plugin lists the python plugin as a required dependency. CMake will then return the following error:. ```; CMake Error at CMakeLists.txt:50 (find_package):; Found package configuration file:. /.../sofa/build/install/lib/cmake/image/imageConfig.cmake. but it set image_FOUND to FALSE so package ""image"" is considered to be NOT; FOUND. Reason given by package:. The following imported targets are referenced, but are missing: SofaPython. -- Configuring incomplete, errors occurred!; ```. To reproduce the bug; 1. Compile SOFA with the image plugin activated, but without python plugin; 2. Lauch cmake on an external project and add the image plugin as a dependency; `find_package(image REQUIRED)`",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/135
https://github.com/sofa-framework/sofa/issues/135:220,Modifiability,plugin,plugin,220,"This issue was first discovered by @rosaliepl : https://www.sofa-framework.org/community/forum/topic/error-with-cimg-plugin-with-dependancy-to-skeleton-h-does-not-compile/#post-8397. The image plugin supports the python plugin, but does not require it. However, when linking the image plugin into an external project by using the install path of sofa, the image plugin lists the python plugin as a required dependency. CMake will then return the following error:. ```; CMake Error at CMakeLists.txt:50 (find_package):; Found package configuration file:. /.../sofa/build/install/lib/cmake/image/imageConfig.cmake. but it set image_FOUND to FALSE so package ""image"" is considered to be NOT; FOUND. Reason given by package:. The following imported targets are referenced, but are missing: SofaPython. -- Configuring incomplete, errors occurred!; ```. To reproduce the bug; 1. Compile SOFA with the image plugin activated, but without python plugin; 2. Lauch cmake on an external project and add the image plugin as a dependency; `find_package(image REQUIRED)`",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/135
https://github.com/sofa-framework/sofa/issues/135:285,Modifiability,plugin,plugin,285,"This issue was first discovered by @rosaliepl : https://www.sofa-framework.org/community/forum/topic/error-with-cimg-plugin-with-dependancy-to-skeleton-h-does-not-compile/#post-8397. The image plugin supports the python plugin, but does not require it. However, when linking the image plugin into an external project by using the install path of sofa, the image plugin lists the python plugin as a required dependency. CMake will then return the following error:. ```; CMake Error at CMakeLists.txt:50 (find_package):; Found package configuration file:. /.../sofa/build/install/lib/cmake/image/imageConfig.cmake. but it set image_FOUND to FALSE so package ""image"" is considered to be NOT; FOUND. Reason given by package:. The following imported targets are referenced, but are missing: SofaPython. -- Configuring incomplete, errors occurred!; ```. To reproduce the bug; 1. Compile SOFA with the image plugin activated, but without python plugin; 2. Lauch cmake on an external project and add the image plugin as a dependency; `find_package(image REQUIRED)`",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/135
https://github.com/sofa-framework/sofa/issues/135:362,Modifiability,plugin,plugin,362,"This issue was first discovered by @rosaliepl : https://www.sofa-framework.org/community/forum/topic/error-with-cimg-plugin-with-dependancy-to-skeleton-h-does-not-compile/#post-8397. The image plugin supports the python plugin, but does not require it. However, when linking the image plugin into an external project by using the install path of sofa, the image plugin lists the python plugin as a required dependency. CMake will then return the following error:. ```; CMake Error at CMakeLists.txt:50 (find_package):; Found package configuration file:. /.../sofa/build/install/lib/cmake/image/imageConfig.cmake. but it set image_FOUND to FALSE so package ""image"" is considered to be NOT; FOUND. Reason given by package:. The following imported targets are referenced, but are missing: SofaPython. -- Configuring incomplete, errors occurred!; ```. To reproduce the bug; 1. Compile SOFA with the image plugin activated, but without python plugin; 2. Lauch cmake on an external project and add the image plugin as a dependency; `find_package(image REQUIRED)`",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/135
https://github.com/sofa-framework/sofa/issues/135:386,Modifiability,plugin,plugin,386,"This issue was first discovered by @rosaliepl : https://www.sofa-framework.org/community/forum/topic/error-with-cimg-plugin-with-dependancy-to-skeleton-h-does-not-compile/#post-8397. The image plugin supports the python plugin, but does not require it. However, when linking the image plugin into an external project by using the install path of sofa, the image plugin lists the python plugin as a required dependency. CMake will then return the following error:. ```; CMake Error at CMakeLists.txt:50 (find_package):; Found package configuration file:. /.../sofa/build/install/lib/cmake/image/imageConfig.cmake. but it set image_FOUND to FALSE so package ""image"" is considered to be NOT; FOUND. Reason given by package:. The following imported targets are referenced, but are missing: SofaPython. -- Configuring incomplete, errors occurred!; ```. To reproduce the bug; 1. Compile SOFA with the image plugin activated, but without python plugin; 2. Lauch cmake on an external project and add the image plugin as a dependency; `find_package(image REQUIRED)`",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/135
https://github.com/sofa-framework/sofa/issues/135:533,Modifiability,config,configuration,533,"This issue was first discovered by @rosaliepl : https://www.sofa-framework.org/community/forum/topic/error-with-cimg-plugin-with-dependancy-to-skeleton-h-does-not-compile/#post-8397. The image plugin supports the python plugin, but does not require it. However, when linking the image plugin into an external project by using the install path of sofa, the image plugin lists the python plugin as a required dependency. CMake will then return the following error:. ```; CMake Error at CMakeLists.txt:50 (find_package):; Found package configuration file:. /.../sofa/build/install/lib/cmake/image/imageConfig.cmake. but it set image_FOUND to FALSE so package ""image"" is considered to be NOT; FOUND. Reason given by package:. The following imported targets are referenced, but are missing: SofaPython. -- Configuring incomplete, errors occurred!; ```. To reproduce the bug; 1. Compile SOFA with the image plugin activated, but without python plugin; 2. Lauch cmake on an external project and add the image plugin as a dependency; `find_package(image REQUIRED)`",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/135
https://github.com/sofa-framework/sofa/issues/135:801,Modifiability,Config,Configuring,801,"This issue was first discovered by @rosaliepl : https://www.sofa-framework.org/community/forum/topic/error-with-cimg-plugin-with-dependancy-to-skeleton-h-does-not-compile/#post-8397. The image plugin supports the python plugin, but does not require it. However, when linking the image plugin into an external project by using the install path of sofa, the image plugin lists the python plugin as a required dependency. CMake will then return the following error:. ```; CMake Error at CMakeLists.txt:50 (find_package):; Found package configuration file:. /.../sofa/build/install/lib/cmake/image/imageConfig.cmake. but it set image_FOUND to FALSE so package ""image"" is considered to be NOT; FOUND. Reason given by package:. The following imported targets are referenced, but are missing: SofaPython. -- Configuring incomplete, errors occurred!; ```. To reproduce the bug; 1. Compile SOFA with the image plugin activated, but without python plugin; 2. Lauch cmake on an external project and add the image plugin as a dependency; `find_package(image REQUIRED)`",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/135
https://github.com/sofa-framework/sofa/issues/135:901,Modifiability,plugin,plugin,901,"This issue was first discovered by @rosaliepl : https://www.sofa-framework.org/community/forum/topic/error-with-cimg-plugin-with-dependancy-to-skeleton-h-does-not-compile/#post-8397. The image plugin supports the python plugin, but does not require it. However, when linking the image plugin into an external project by using the install path of sofa, the image plugin lists the python plugin as a required dependency. CMake will then return the following error:. ```; CMake Error at CMakeLists.txt:50 (find_package):; Found package configuration file:. /.../sofa/build/install/lib/cmake/image/imageConfig.cmake. but it set image_FOUND to FALSE so package ""image"" is considered to be NOT; FOUND. Reason given by package:. The following imported targets are referenced, but are missing: SofaPython. -- Configuring incomplete, errors occurred!; ```. To reproduce the bug; 1. Compile SOFA with the image plugin activated, but without python plugin; 2. Lauch cmake on an external project and add the image plugin as a dependency; `find_package(image REQUIRED)`",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/135
https://github.com/sofa-framework/sofa/issues/135:938,Modifiability,plugin,plugin,938,"This issue was first discovered by @rosaliepl : https://www.sofa-framework.org/community/forum/topic/error-with-cimg-plugin-with-dependancy-to-skeleton-h-does-not-compile/#post-8397. The image plugin supports the python plugin, but does not require it. However, when linking the image plugin into an external project by using the install path of sofa, the image plugin lists the python plugin as a required dependency. CMake will then return the following error:. ```; CMake Error at CMakeLists.txt:50 (find_package):; Found package configuration file:. /.../sofa/build/install/lib/cmake/image/imageConfig.cmake. but it set image_FOUND to FALSE so package ""image"" is considered to be NOT; FOUND. Reason given by package:. The following imported targets are referenced, but are missing: SofaPython. -- Configuring incomplete, errors occurred!; ```. To reproduce the bug; 1. Compile SOFA with the image plugin activated, but without python plugin; 2. Lauch cmake on an external project and add the image plugin as a dependency; `find_package(image REQUIRED)`",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/135
https://github.com/sofa-framework/sofa/issues/135:1002,Modifiability,plugin,plugin,1002,"This issue was first discovered by @rosaliepl : https://www.sofa-framework.org/community/forum/topic/error-with-cimg-plugin-with-dependancy-to-skeleton-h-does-not-compile/#post-8397. The image plugin supports the python plugin, but does not require it. However, when linking the image plugin into an external project by using the install path of sofa, the image plugin lists the python plugin as a required dependency. CMake will then return the following error:. ```; CMake Error at CMakeLists.txt:50 (find_package):; Found package configuration file:. /.../sofa/build/install/lib/cmake/image/imageConfig.cmake. but it set image_FOUND to FALSE so package ""image"" is considered to be NOT; FOUND. Reason given by package:. The following imported targets are referenced, but are missing: SofaPython. -- Configuring incomplete, errors occurred!; ```. To reproduce the bug; 1. Compile SOFA with the image plugin activated, but without python plugin; 2. Lauch cmake on an external project and add the image plugin as a dependency; `find_package(image REQUIRED)`",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/135
https://github.com/sofa-framework/sofa/issues/136:101,Availability,error,error-with-cimg-plugin-with-dependancy-to-skeleton-h-does-not-compile,101,"This issue was first discovered by @rosaliepl : https://www.sofa-framework.org/community/forum/topic/error-with-cimg-plugin-with-dependancy-to-skeleton-h-does-not-compile/#post-8397. When installing SOFA's image plugin (ex.: make install), the image plugin installation does not preserve the file's hierarchy which will failed the compilation of any external project that includes the SOFACImg.h file. `/.../sofa/build/install/include/CImg/CImg.h:9341:21: fatal error: plugins/skeleton.h: No such file or directory`. If we look in the installation folder (sofa/build/install), all the required headers are in include/CImg instead of include/CImg/plugins which will then failed the compilation. To reproduce the bug. 1. Compile and install SOFA with the image plugin activated; 2. Create an external project with the image plugin as a requirement, and add the following line in any of the source file: `#include <CImg/SOFACImg.h>`",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/136
https://github.com/sofa-framework/sofa/issues/136:462,Availability,error,error,462,"This issue was first discovered by @rosaliepl : https://www.sofa-framework.org/community/forum/topic/error-with-cimg-plugin-with-dependancy-to-skeleton-h-does-not-compile/#post-8397. When installing SOFA's image plugin (ex.: make install), the image plugin installation does not preserve the file's hierarchy which will failed the compilation of any external project that includes the SOFACImg.h file. `/.../sofa/build/install/include/CImg/CImg.h:9341:21: fatal error: plugins/skeleton.h: No such file or directory`. If we look in the installation folder (sofa/build/install), all the required headers are in include/CImg instead of include/CImg/plugins which will then failed the compilation. To reproduce the bug. 1. Compile and install SOFA with the image plugin activated; 2. Create an external project with the image plugin as a requirement, and add the following line in any of the source file: `#include <CImg/SOFACImg.h>`",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/136
https://github.com/sofa-framework/sofa/issues/136:188,Deployability,install,installing,188,"This issue was first discovered by @rosaliepl : https://www.sofa-framework.org/community/forum/topic/error-with-cimg-plugin-with-dependancy-to-skeleton-h-does-not-compile/#post-8397. When installing SOFA's image plugin (ex.: make install), the image plugin installation does not preserve the file's hierarchy which will failed the compilation of any external project that includes the SOFACImg.h file. `/.../sofa/build/install/include/CImg/CImg.h:9341:21: fatal error: plugins/skeleton.h: No such file or directory`. If we look in the installation folder (sofa/build/install), all the required headers are in include/CImg instead of include/CImg/plugins which will then failed the compilation. To reproduce the bug. 1. Compile and install SOFA with the image plugin activated; 2. Create an external project with the image plugin as a requirement, and add the following line in any of the source file: `#include <CImg/SOFACImg.h>`",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/136
https://github.com/sofa-framework/sofa/issues/136:230,Deployability,install,install,230,"This issue was first discovered by @rosaliepl : https://www.sofa-framework.org/community/forum/topic/error-with-cimg-plugin-with-dependancy-to-skeleton-h-does-not-compile/#post-8397. When installing SOFA's image plugin (ex.: make install), the image plugin installation does not preserve the file's hierarchy which will failed the compilation of any external project that includes the SOFACImg.h file. `/.../sofa/build/install/include/CImg/CImg.h:9341:21: fatal error: plugins/skeleton.h: No such file or directory`. If we look in the installation folder (sofa/build/install), all the required headers are in include/CImg instead of include/CImg/plugins which will then failed the compilation. To reproduce the bug. 1. Compile and install SOFA with the image plugin activated; 2. Create an external project with the image plugin as a requirement, and add the following line in any of the source file: `#include <CImg/SOFACImg.h>`",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/136
https://github.com/sofa-framework/sofa/issues/136:257,Deployability,install,installation,257,"This issue was first discovered by @rosaliepl : https://www.sofa-framework.org/community/forum/topic/error-with-cimg-plugin-with-dependancy-to-skeleton-h-does-not-compile/#post-8397. When installing SOFA's image plugin (ex.: make install), the image plugin installation does not preserve the file's hierarchy which will failed the compilation of any external project that includes the SOFACImg.h file. `/.../sofa/build/install/include/CImg/CImg.h:9341:21: fatal error: plugins/skeleton.h: No such file or directory`. If we look in the installation folder (sofa/build/install), all the required headers are in include/CImg instead of include/CImg/plugins which will then failed the compilation. To reproduce the bug. 1. Compile and install SOFA with the image plugin activated; 2. Create an external project with the image plugin as a requirement, and add the following line in any of the source file: `#include <CImg/SOFACImg.h>`",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/136
https://github.com/sofa-framework/sofa/issues/136:419,Deployability,install,install,419,"This issue was first discovered by @rosaliepl : https://www.sofa-framework.org/community/forum/topic/error-with-cimg-plugin-with-dependancy-to-skeleton-h-does-not-compile/#post-8397. When installing SOFA's image plugin (ex.: make install), the image plugin installation does not preserve the file's hierarchy which will failed the compilation of any external project that includes the SOFACImg.h file. `/.../sofa/build/install/include/CImg/CImg.h:9341:21: fatal error: plugins/skeleton.h: No such file or directory`. If we look in the installation folder (sofa/build/install), all the required headers are in include/CImg instead of include/CImg/plugins which will then failed the compilation. To reproduce the bug. 1. Compile and install SOFA with the image plugin activated; 2. Create an external project with the image plugin as a requirement, and add the following line in any of the source file: `#include <CImg/SOFACImg.h>`",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/136
https://github.com/sofa-framework/sofa/issues/136:535,Deployability,install,installation,535,"This issue was first discovered by @rosaliepl : https://www.sofa-framework.org/community/forum/topic/error-with-cimg-plugin-with-dependancy-to-skeleton-h-does-not-compile/#post-8397. When installing SOFA's image plugin (ex.: make install), the image plugin installation does not preserve the file's hierarchy which will failed the compilation of any external project that includes the SOFACImg.h file. `/.../sofa/build/install/include/CImg/CImg.h:9341:21: fatal error: plugins/skeleton.h: No such file or directory`. If we look in the installation folder (sofa/build/install), all the required headers are in include/CImg instead of include/CImg/plugins which will then failed the compilation. To reproduce the bug. 1. Compile and install SOFA with the image plugin activated; 2. Create an external project with the image plugin as a requirement, and add the following line in any of the source file: `#include <CImg/SOFACImg.h>`",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/136
https://github.com/sofa-framework/sofa/issues/136:567,Deployability,install,install,567,"This issue was first discovered by @rosaliepl : https://www.sofa-framework.org/community/forum/topic/error-with-cimg-plugin-with-dependancy-to-skeleton-h-does-not-compile/#post-8397. When installing SOFA's image plugin (ex.: make install), the image plugin installation does not preserve the file's hierarchy which will failed the compilation of any external project that includes the SOFACImg.h file. `/.../sofa/build/install/include/CImg/CImg.h:9341:21: fatal error: plugins/skeleton.h: No such file or directory`. If we look in the installation folder (sofa/build/install), all the required headers are in include/CImg instead of include/CImg/plugins which will then failed the compilation. To reproduce the bug. 1. Compile and install SOFA with the image plugin activated; 2. Create an external project with the image plugin as a requirement, and add the following line in any of the source file: `#include <CImg/SOFACImg.h>`",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/136
https://github.com/sofa-framework/sofa/issues/136:731,Deployability,install,install,731,"This issue was first discovered by @rosaliepl : https://www.sofa-framework.org/community/forum/topic/error-with-cimg-plugin-with-dependancy-to-skeleton-h-does-not-compile/#post-8397. When installing SOFA's image plugin (ex.: make install), the image plugin installation does not preserve the file's hierarchy which will failed the compilation of any external project that includes the SOFACImg.h file. `/.../sofa/build/install/include/CImg/CImg.h:9341:21: fatal error: plugins/skeleton.h: No such file or directory`. If we look in the installation folder (sofa/build/install), all the required headers are in include/CImg instead of include/CImg/plugins which will then failed the compilation. To reproduce the bug. 1. Compile and install SOFA with the image plugin activated; 2. Create an external project with the image plugin as a requirement, and add the following line in any of the source file: `#include <CImg/SOFACImg.h>`",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/136
https://github.com/sofa-framework/sofa/issues/136:129,Integrability,depend,dependancy-to-skeleton-h-does-not-compile,129,"This issue was first discovered by @rosaliepl : https://www.sofa-framework.org/community/forum/topic/error-with-cimg-plugin-with-dependancy-to-skeleton-h-does-not-compile/#post-8397. When installing SOFA's image plugin (ex.: make install), the image plugin installation does not preserve the file's hierarchy which will failed the compilation of any external project that includes the SOFACImg.h file. `/.../sofa/build/install/include/CImg/CImg.h:9341:21: fatal error: plugins/skeleton.h: No such file or directory`. If we look in the installation folder (sofa/build/install), all the required headers are in include/CImg instead of include/CImg/plugins which will then failed the compilation. To reproduce the bug. 1. Compile and install SOFA with the image plugin activated; 2. Create an external project with the image plugin as a requirement, and add the following line in any of the source file: `#include <CImg/SOFACImg.h>`",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/136
https://github.com/sofa-framework/sofa/issues/136:117,Modifiability,plugin,plugin-with-dependancy-to-skeleton-h-does-not-compile,117,"This issue was first discovered by @rosaliepl : https://www.sofa-framework.org/community/forum/topic/error-with-cimg-plugin-with-dependancy-to-skeleton-h-does-not-compile/#post-8397. When installing SOFA's image plugin (ex.: make install), the image plugin installation does not preserve the file's hierarchy which will failed the compilation of any external project that includes the SOFACImg.h file. `/.../sofa/build/install/include/CImg/CImg.h:9341:21: fatal error: plugins/skeleton.h: No such file or directory`. If we look in the installation folder (sofa/build/install), all the required headers are in include/CImg instead of include/CImg/plugins which will then failed the compilation. To reproduce the bug. 1. Compile and install SOFA with the image plugin activated; 2. Create an external project with the image plugin as a requirement, and add the following line in any of the source file: `#include <CImg/SOFACImg.h>`",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/136
https://github.com/sofa-framework/sofa/issues/136:212,Modifiability,plugin,plugin,212,"This issue was first discovered by @rosaliepl : https://www.sofa-framework.org/community/forum/topic/error-with-cimg-plugin-with-dependancy-to-skeleton-h-does-not-compile/#post-8397. When installing SOFA's image plugin (ex.: make install), the image plugin installation does not preserve the file's hierarchy which will failed the compilation of any external project that includes the SOFACImg.h file. `/.../sofa/build/install/include/CImg/CImg.h:9341:21: fatal error: plugins/skeleton.h: No such file or directory`. If we look in the installation folder (sofa/build/install), all the required headers are in include/CImg instead of include/CImg/plugins which will then failed the compilation. To reproduce the bug. 1. Compile and install SOFA with the image plugin activated; 2. Create an external project with the image plugin as a requirement, and add the following line in any of the source file: `#include <CImg/SOFACImg.h>`",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/136
https://github.com/sofa-framework/sofa/issues/136:250,Modifiability,plugin,plugin,250,"This issue was first discovered by @rosaliepl : https://www.sofa-framework.org/community/forum/topic/error-with-cimg-plugin-with-dependancy-to-skeleton-h-does-not-compile/#post-8397. When installing SOFA's image plugin (ex.: make install), the image plugin installation does not preserve the file's hierarchy which will failed the compilation of any external project that includes the SOFACImg.h file. `/.../sofa/build/install/include/CImg/CImg.h:9341:21: fatal error: plugins/skeleton.h: No such file or directory`. If we look in the installation folder (sofa/build/install), all the required headers are in include/CImg instead of include/CImg/plugins which will then failed the compilation. To reproduce the bug. 1. Compile and install SOFA with the image plugin activated; 2. Create an external project with the image plugin as a requirement, and add the following line in any of the source file: `#include <CImg/SOFACImg.h>`",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/136
https://github.com/sofa-framework/sofa/issues/136:469,Modifiability,plugin,plugins,469,"This issue was first discovered by @rosaliepl : https://www.sofa-framework.org/community/forum/topic/error-with-cimg-plugin-with-dependancy-to-skeleton-h-does-not-compile/#post-8397. When installing SOFA's image plugin (ex.: make install), the image plugin installation does not preserve the file's hierarchy which will failed the compilation of any external project that includes the SOFACImg.h file. `/.../sofa/build/install/include/CImg/CImg.h:9341:21: fatal error: plugins/skeleton.h: No such file or directory`. If we look in the installation folder (sofa/build/install), all the required headers are in include/CImg instead of include/CImg/plugins which will then failed the compilation. To reproduce the bug. 1. Compile and install SOFA with the image plugin activated; 2. Create an external project with the image plugin as a requirement, and add the following line in any of the source file: `#include <CImg/SOFACImg.h>`",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/136
https://github.com/sofa-framework/sofa/issues/136:646,Modifiability,plugin,plugins,646,"This issue was first discovered by @rosaliepl : https://www.sofa-framework.org/community/forum/topic/error-with-cimg-plugin-with-dependancy-to-skeleton-h-does-not-compile/#post-8397. When installing SOFA's image plugin (ex.: make install), the image plugin installation does not preserve the file's hierarchy which will failed the compilation of any external project that includes the SOFACImg.h file. `/.../sofa/build/install/include/CImg/CImg.h:9341:21: fatal error: plugins/skeleton.h: No such file or directory`. If we look in the installation folder (sofa/build/install), all the required headers are in include/CImg instead of include/CImg/plugins which will then failed the compilation. To reproduce the bug. 1. Compile and install SOFA with the image plugin activated; 2. Create an external project with the image plugin as a requirement, and add the following line in any of the source file: `#include <CImg/SOFACImg.h>`",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/136
https://github.com/sofa-framework/sofa/issues/136:759,Modifiability,plugin,plugin,759,"This issue was first discovered by @rosaliepl : https://www.sofa-framework.org/community/forum/topic/error-with-cimg-plugin-with-dependancy-to-skeleton-h-does-not-compile/#post-8397. When installing SOFA's image plugin (ex.: make install), the image plugin installation does not preserve the file's hierarchy which will failed the compilation of any external project that includes the SOFACImg.h file. `/.../sofa/build/install/include/CImg/CImg.h:9341:21: fatal error: plugins/skeleton.h: No such file or directory`. If we look in the installation folder (sofa/build/install), all the required headers are in include/CImg instead of include/CImg/plugins which will then failed the compilation. To reproduce the bug. 1. Compile and install SOFA with the image plugin activated; 2. Create an external project with the image plugin as a requirement, and add the following line in any of the source file: `#include <CImg/SOFACImg.h>`",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/136
https://github.com/sofa-framework/sofa/issues/136:822,Modifiability,plugin,plugin,822,"This issue was first discovered by @rosaliepl : https://www.sofa-framework.org/community/forum/topic/error-with-cimg-plugin-with-dependancy-to-skeleton-h-does-not-compile/#post-8397. When installing SOFA's image plugin (ex.: make install), the image plugin installation does not preserve the file's hierarchy which will failed the compilation of any external project that includes the SOFACImg.h file. `/.../sofa/build/install/include/CImg/CImg.h:9341:21: fatal error: plugins/skeleton.h: No such file or directory`. If we look in the installation folder (sofa/build/install), all the required headers are in include/CImg instead of include/CImg/plugins which will then failed the compilation. To reproduce the bug. 1. Compile and install SOFA with the image plugin activated; 2. Create an external project with the image plugin as a requirement, and add the following line in any of the source file: `#include <CImg/SOFACImg.h>`",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/136
https://github.com/sofa-framework/sofa/pull/139:1096,Availability,failure,failures,1096,"This PR is big but should finally clean all licenses in SOFA. Here is what I did:; - Fix the licenseUpdater script; - Fix wrong or missing LGPL headers in modules; - Fix wrong or missing LGPL headers in SofaKernel; **WARNING**: I found a **contaminating paste of GPL code** in LCPcalc.cpp:501 (lcp_lexicolemke function). Since I didn't found any usage of this function in SOFA (including plugins), **I removed it**. ; Please **tell me if this is OK**. Otherwise, we will have to discuss about GPL contamination.; - Fix wrong or missing GPL headers in applications/projects; - ~~Fix wrong or missing LGPL headers in applications/plugins~~ (commits removed); - ~~Fix wrong or missing GPL headers in applications/plugins: OptiTrackNatNet, SofaPML and SofaVRPNClient~~ (commits removed); - ~~Fix wrong license in SofaHAPI/initSofaHAPI:58 (should be LGPL)~~ (commits removed); - Optimize organization of LICENSE files in SOFA. <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings nor unit test failures.; - [ ] does not break existing scenes.; - [ ] does not break API compatibility.; - [ ] has been reviewed and agreed to be transitional.; - [ ] is more than 1 week old. **Reviewers will merge only if all this checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/139
https://github.com/sofa-framework/sofa/pull/139:965,Integrability,message,message,965,"This PR is big but should finally clean all licenses in SOFA. Here is what I did:; - Fix the licenseUpdater script; - Fix wrong or missing LGPL headers in modules; - Fix wrong or missing LGPL headers in SofaKernel; **WARNING**: I found a **contaminating paste of GPL code** in LCPcalc.cpp:501 (lcp_lexicolemke function). Since I didn't found any usage of this function in SOFA (including plugins), **I removed it**. ; Please **tell me if this is OK**. Otherwise, we will have to discuss about GPL contamination.; - Fix wrong or missing GPL headers in applications/projects; - ~~Fix wrong or missing LGPL headers in applications/plugins~~ (commits removed); - ~~Fix wrong or missing GPL headers in applications/plugins: OptiTrackNatNet, SofaPML and SofaVRPNClient~~ (commits removed); - ~~Fix wrong license in SofaHAPI/initSofaHAPI:58 (should be LGPL)~~ (commits removed); - Optimize organization of LICENSE files in SOFA. <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings nor unit test failures.; - [ ] does not break existing scenes.; - [ ] does not break API compatibility.; - [ ] has been reviewed and agreed to be transitional.; - [ ] is more than 1 week old. **Reviewers will merge only if all this checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/139
https://github.com/sofa-framework/sofa/pull/139:388,Modifiability,plugin,plugins,388,"This PR is big but should finally clean all licenses in SOFA. Here is what I did:; - Fix the licenseUpdater script; - Fix wrong or missing LGPL headers in modules; - Fix wrong or missing LGPL headers in SofaKernel; **WARNING**: I found a **contaminating paste of GPL code** in LCPcalc.cpp:501 (lcp_lexicolemke function). Since I didn't found any usage of this function in SOFA (including plugins), **I removed it**. ; Please **tell me if this is OK**. Otherwise, we will have to discuss about GPL contamination.; - Fix wrong or missing GPL headers in applications/projects; - ~~Fix wrong or missing LGPL headers in applications/plugins~~ (commits removed); - ~~Fix wrong or missing GPL headers in applications/plugins: OptiTrackNatNet, SofaPML and SofaVRPNClient~~ (commits removed); - ~~Fix wrong license in SofaHAPI/initSofaHAPI:58 (should be LGPL)~~ (commits removed); - Optimize organization of LICENSE files in SOFA. <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings nor unit test failures.; - [ ] does not break existing scenes.; - [ ] does not break API compatibility.; - [ ] has been reviewed and agreed to be transitional.; - [ ] is more than 1 week old. **Reviewers will merge only if all this checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/139
https://github.com/sofa-framework/sofa/pull/139:628,Modifiability,plugin,plugins,628,"This PR is big but should finally clean all licenses in SOFA. Here is what I did:; - Fix the licenseUpdater script; - Fix wrong or missing LGPL headers in modules; - Fix wrong or missing LGPL headers in SofaKernel; **WARNING**: I found a **contaminating paste of GPL code** in LCPcalc.cpp:501 (lcp_lexicolemke function). Since I didn't found any usage of this function in SOFA (including plugins), **I removed it**. ; Please **tell me if this is OK**. Otherwise, we will have to discuss about GPL contamination.; - Fix wrong or missing GPL headers in applications/projects; - ~~Fix wrong or missing LGPL headers in applications/plugins~~ (commits removed); - ~~Fix wrong or missing GPL headers in applications/plugins: OptiTrackNatNet, SofaPML and SofaVRPNClient~~ (commits removed); - ~~Fix wrong license in SofaHAPI/initSofaHAPI:58 (should be LGPL)~~ (commits removed); - Optimize organization of LICENSE files in SOFA. <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings nor unit test failures.; - [ ] does not break existing scenes.; - [ ] does not break API compatibility.; - [ ] has been reviewed and agreed to be transitional.; - [ ] is more than 1 week old. **Reviewers will merge only if all this checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/139
https://github.com/sofa-framework/sofa/pull/139:710,Modifiability,plugin,plugins,710,"This PR is big but should finally clean all licenses in SOFA. Here is what I did:; - Fix the licenseUpdater script; - Fix wrong or missing LGPL headers in modules; - Fix wrong or missing LGPL headers in SofaKernel; **WARNING**: I found a **contaminating paste of GPL code** in LCPcalc.cpp:501 (lcp_lexicolemke function). Since I didn't found any usage of this function in SOFA (including plugins), **I removed it**. ; Please **tell me if this is OK**. Otherwise, we will have to discuss about GPL contamination.; - Fix wrong or missing GPL headers in applications/projects; - ~~Fix wrong or missing LGPL headers in applications/plugins~~ (commits removed); - ~~Fix wrong or missing GPL headers in applications/plugins: OptiTrackNatNet, SofaPML and SofaVRPNClient~~ (commits removed); - ~~Fix wrong license in SofaHAPI/initSofaHAPI:58 (should be LGPL)~~ (commits removed); - Optimize organization of LICENSE files in SOFA. <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings nor unit test failures.; - [ ] does not break existing scenes.; - [ ] does not break API compatibility.; - [ ] has been reviewed and agreed to be transitional.; - [ ] is more than 1 week old. **Reviewers will merge only if all this checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/139
https://github.com/sofa-framework/sofa/pull/139:874,Performance,Optimiz,Optimize,874,"This PR is big but should finally clean all licenses in SOFA. Here is what I did:; - Fix the licenseUpdater script; - Fix wrong or missing LGPL headers in modules; - Fix wrong or missing LGPL headers in SofaKernel; **WARNING**: I found a **contaminating paste of GPL code** in LCPcalc.cpp:501 (lcp_lexicolemke function). Since I didn't found any usage of this function in SOFA (including plugins), **I removed it**. ; Please **tell me if this is OK**. Otherwise, we will have to discuss about GPL contamination.; - Fix wrong or missing GPL headers in applications/projects; - ~~Fix wrong or missing LGPL headers in applications/plugins~~ (commits removed); - ~~Fix wrong or missing GPL headers in applications/plugins: OptiTrackNatNet, SofaPML and SofaVRPNClient~~ (commits removed); - ~~Fix wrong license in SofaHAPI/initSofaHAPI:58 (should be LGPL)~~ (commits removed); - Optimize organization of LICENSE files in SOFA. <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings nor unit test failures.; - [ ] does not break existing scenes.; - [ ] does not break API compatibility.; - [ ] has been reviewed and agreed to be transitional.; - [ ] is more than 1 week old. **Reviewers will merge only if all this checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/139
https://github.com/sofa-framework/sofa/pull/139:1091,Testability,test,test,1091,"This PR is big but should finally clean all licenses in SOFA. Here is what I did:; - Fix the licenseUpdater script; - Fix wrong or missing LGPL headers in modules; - Fix wrong or missing LGPL headers in SofaKernel; **WARNING**: I found a **contaminating paste of GPL code** in LCPcalc.cpp:501 (lcp_lexicolemke function). Since I didn't found any usage of this function in SOFA (including plugins), **I removed it**. ; Please **tell me if this is OK**. Otherwise, we will have to discuss about GPL contamination.; - Fix wrong or missing GPL headers in applications/projects; - ~~Fix wrong or missing LGPL headers in applications/plugins~~ (commits removed); - ~~Fix wrong or missing GPL headers in applications/plugins: OptiTrackNatNet, SofaPML and SofaVRPNClient~~ (commits removed); - ~~Fix wrong license in SofaHAPI/initSofaHAPI:58 (should be LGPL)~~ (commits removed); - Optimize organization of LICENSE files in SOFA. <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings nor unit test failures.; - [ ] does not break existing scenes.; - [ ] does not break API compatibility.; - [ ] has been reviewed and agreed to be transitional.; - [ ] is more than 1 week old. **Reviewers will merge only if all this checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/139
https://github.com/sofa-framework/sofa/issues/140:216,Safety,timeout,timeout,216,There is a problem in how the tests are implemented in FileMonitor. ; This make the test to fail randomly on macosX because of a too long run (or too short delay). ; To fix that the delay should be replaced with the timeout parameter.,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/140
https://github.com/sofa-framework/sofa/issues/140:30,Testability,test,tests,30,There is a problem in how the tests are implemented in FileMonitor. ; This make the test to fail randomly on macosX because of a too long run (or too short delay). ; To fix that the delay should be replaced with the timeout parameter.,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/140
https://github.com/sofa-framework/sofa/issues/140:84,Testability,test,test,84,There is a problem in how the tests are implemented in FileMonitor. ; This make the test to fail randomly on macosX because of a too long run (or too short delay). ; To fix that the delay should be replaced with the timeout parameter.,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/140
https://github.com/sofa-framework/sofa/issues/142:126,Energy Efficiency,efficient,efficient,126,"Would it be possible to boost debug rendering performance, especially when drawing tons of spheres?; I guess it would be more efficient to instantiate only one sphere once for all, and then to draw it many times?",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/142
https://github.com/sofa-framework/sofa/issues/142:46,Performance,perform,performance,46,"Would it be possible to boost debug rendering performance, especially when drawing tons of spheres?; I guess it would be more efficient to instantiate only one sphere once for all, and then to draw it many times?",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/142
https://github.com/sofa-framework/sofa/pull/143:0,Deployability,Update,Update,0,Update: . - now with a correct implementation of the timeout parameter. Tests should not fail randomly now...; - also updated the filemonitor tests to use this timeout parameter correctly,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/143
https://github.com/sofa-framework/sofa/pull/143:118,Deployability,update,updated,118,Update: . - now with a correct implementation of the timeout parameter. Tests should not fail randomly now...; - also updated the filemonitor tests to use this timeout parameter correctly,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/143
https://github.com/sofa-framework/sofa/pull/143:53,Safety,timeout,timeout,53,Update: . - now with a correct implementation of the timeout parameter. Tests should not fail randomly now...; - also updated the filemonitor tests to use this timeout parameter correctly,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/143
https://github.com/sofa-framework/sofa/pull/143:160,Safety,timeout,timeout,160,Update: . - now with a correct implementation of the timeout parameter. Tests should not fail randomly now...; - also updated the filemonitor tests to use this timeout parameter correctly,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/143
https://github.com/sofa-framework/sofa/pull/143:72,Testability,Test,Tests,72,Update: . - now with a correct implementation of the timeout parameter. Tests should not fail randomly now...; - also updated the filemonitor tests to use this timeout parameter correctly,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/143
https://github.com/sofa-framework/sofa/pull/143:142,Testability,test,tests,142,Update: . - now with a correct implementation of the timeout parameter. Tests should not fail randomly now...; - also updated the filemonitor tests to use this timeout parameter correctly,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/143
https://github.com/sofa-framework/sofa/pull/144:185,Testability,test,test,185,Fix the values with which the quaternion is being compared after creation from euler angles. The quaternion is obtained from the euler rotation angles applied in the **zyx order**. The test fails because the previous values considered to be good for comparison are wrong. This PR modifies them.,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/144
https://github.com/sofa-framework/sofa/issues/145:157,Modifiability,variab,variable,157,Clang compiler gives a suspicious warning (for a long time now):; `sofa/SofaKernel/modules/SofaBaseLinearSolver/DefaultMultiMatrixAccessor.cpp:485: warning: variable 'it' is incremented both in the loop header and in the loop body [-Wfor-loop-analysis]`. It is just an information to people that may use DefaultMultiMatrixAccessor massively.; (Hadrien and François J could also be interested),MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/145
https://github.com/sofa-framework/sofa/issues/146:199,Testability,test,test,199,What is the file SofaKernel/framework/framework_test/resources/existing.txt?; Does it really need to be pushed? Could it be removed and added to .gitignore?; It seems to be modified when running the test.,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/146
https://github.com/sofa-framework/sofa/pull/147:202,Availability,failure,failure,202,This PR contains some minor fixes and adds two new components named: UniformStiff & DiagonalStiffness. Checklist: ; - [x] succeed on each compilation setup on the CI.; - [x] does not generates new test failure. ; - [x] does not seems to break existing scenes. ; - [x] does not seems to break API compatibility. ; - [x] introduces new component with tests & documentation. ; - [x] is now 1 week old and no one send a 'no go' comment.,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/147
https://github.com/sofa-framework/sofa/pull/147:197,Testability,test,test,197,This PR contains some minor fixes and adds two new components named: UniformStiff & DiagonalStiffness. Checklist: ; - [x] succeed on each compilation setup on the CI.; - [x] does not generates new test failure. ; - [x] does not seems to break existing scenes. ; - [x] does not seems to break API compatibility. ; - [x] introduces new component with tests & documentation. ; - [x] is now 1 week old and no one send a 'no go' comment.,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/147
https://github.com/sofa-framework/sofa/pull/147:349,Testability,test,tests,349,This PR contains some minor fixes and adds two new components named: UniformStiff & DiagonalStiffness. Checklist: ; - [x] succeed on each compilation setup on the CI.; - [x] does not generates new test failure. ; - [x] does not seems to break existing scenes. ; - [x] does not seems to break API compatibility. ; - [x] introduces new component with tests & documentation. ; - [x] is now 1 week old and no one send a 'no go' comment.,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/147
https://github.com/sofa-framework/sofa/issues/149:134,Security,access,access,134,"Would it be possible to print the call stack in the console when a gtest crashes?; An xml file is generated, but it is complicated to access it, its content could be printed directly in the console. The resulting raw output would be huge but at least we would have access to useful informations.",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/149
https://github.com/sofa-framework/sofa/issues/149:265,Security,access,access,265,"Would it be possible to print the call stack in the console when a gtest crashes?; An xml file is generated, but it is complicated to access it, its content could be printed directly in the console. The resulting raw output would be huge but at least we would have access to useful informations.",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/149
https://github.com/sofa-framework/sofa/issues/151:108,Availability,error,error,108,"If the scale parameter in meshVTKloader is used with the bad encoding (0,001 written in place of 0.001), no error or warning is given, but the simulation doesn't work in batch mode.",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/151
https://github.com/sofa-framework/sofa/issues/152:192,Deployability,update,update,192,"I am using a Visual(Ogl)Model to display a decorative mesh (ie not a simulated object); The geometry is loaded using a MeshLoader. If I change some transformation value in the MeshLoader, and update/reinit this component, I get:; - positions in mesh loader updated; - VisualModel linked positions updated; - the 3d display NOT updated; - even if I reinit the VisualModel the display is still not updated; - even if I step the display is still not updated. I would expect that a VisualModel reinit would do the trick. If I add a MechanicalObject node + bottom level with IdentityMapping+VisualModel, then when I step I have the VisualModel and display updated - this is what I expect in that case (and this is currently my workaround) - What the mapping is doing to make the VisualModel really updates ?. I attach a simple demo .scn that show the issue (well looks like .scn cannot be attached) :. <Node name=""Root"" >; <MeshObjLoader name=""loader"" filename=""mesh/floor3.obj"" />; <MechanicalObject name=""dofs"" src=""@loader"" />; <Node name=""simple"">; <VisualModel name=""visual"" src=""@../loader"" color=""red"" />; </Node>; <Node name=""mapping"">; <VisualModel name=""visual"" src=""@../loader"" color=""blue"" />; <IdentityMapping name=""mapping"" />; </Node>; </Node>. If you think this is not a bug, feel free to change the label of this issue",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/152
https://github.com/sofa-framework/sofa/issues/152:257,Deployability,update,updated,257,"I am using a Visual(Ogl)Model to display a decorative mesh (ie not a simulated object); The geometry is loaded using a MeshLoader. If I change some transformation value in the MeshLoader, and update/reinit this component, I get:; - positions in mesh loader updated; - VisualModel linked positions updated; - the 3d display NOT updated; - even if I reinit the VisualModel the display is still not updated; - even if I step the display is still not updated. I would expect that a VisualModel reinit would do the trick. If I add a MechanicalObject node + bottom level with IdentityMapping+VisualModel, then when I step I have the VisualModel and display updated - this is what I expect in that case (and this is currently my workaround) - What the mapping is doing to make the VisualModel really updates ?. I attach a simple demo .scn that show the issue (well looks like .scn cannot be attached) :. <Node name=""Root"" >; <MeshObjLoader name=""loader"" filename=""mesh/floor3.obj"" />; <MechanicalObject name=""dofs"" src=""@loader"" />; <Node name=""simple"">; <VisualModel name=""visual"" src=""@../loader"" color=""red"" />; </Node>; <Node name=""mapping"">; <VisualModel name=""visual"" src=""@../loader"" color=""blue"" />; <IdentityMapping name=""mapping"" />; </Node>; </Node>. If you think this is not a bug, feel free to change the label of this issue",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/152
https://github.com/sofa-framework/sofa/issues/152:297,Deployability,update,updated,297,"I am using a Visual(Ogl)Model to display a decorative mesh (ie not a simulated object); The geometry is loaded using a MeshLoader. If I change some transformation value in the MeshLoader, and update/reinit this component, I get:; - positions in mesh loader updated; - VisualModel linked positions updated; - the 3d display NOT updated; - even if I reinit the VisualModel the display is still not updated; - even if I step the display is still not updated. I would expect that a VisualModel reinit would do the trick. If I add a MechanicalObject node + bottom level with IdentityMapping+VisualModel, then when I step I have the VisualModel and display updated - this is what I expect in that case (and this is currently my workaround) - What the mapping is doing to make the VisualModel really updates ?. I attach a simple demo .scn that show the issue (well looks like .scn cannot be attached) :. <Node name=""Root"" >; <MeshObjLoader name=""loader"" filename=""mesh/floor3.obj"" />; <MechanicalObject name=""dofs"" src=""@loader"" />; <Node name=""simple"">; <VisualModel name=""visual"" src=""@../loader"" color=""red"" />; </Node>; <Node name=""mapping"">; <VisualModel name=""visual"" src=""@../loader"" color=""blue"" />; <IdentityMapping name=""mapping"" />; </Node>; </Node>. If you think this is not a bug, feel free to change the label of this issue",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/152
https://github.com/sofa-framework/sofa/issues/152:327,Deployability,update,updated,327,"I am using a Visual(Ogl)Model to display a decorative mesh (ie not a simulated object); The geometry is loaded using a MeshLoader. If I change some transformation value in the MeshLoader, and update/reinit this component, I get:; - positions in mesh loader updated; - VisualModel linked positions updated; - the 3d display NOT updated; - even if I reinit the VisualModel the display is still not updated; - even if I step the display is still not updated. I would expect that a VisualModel reinit would do the trick. If I add a MechanicalObject node + bottom level with IdentityMapping+VisualModel, then when I step I have the VisualModel and display updated - this is what I expect in that case (and this is currently my workaround) - What the mapping is doing to make the VisualModel really updates ?. I attach a simple demo .scn that show the issue (well looks like .scn cannot be attached) :. <Node name=""Root"" >; <MeshObjLoader name=""loader"" filename=""mesh/floor3.obj"" />; <MechanicalObject name=""dofs"" src=""@loader"" />; <Node name=""simple"">; <VisualModel name=""visual"" src=""@../loader"" color=""red"" />; </Node>; <Node name=""mapping"">; <VisualModel name=""visual"" src=""@../loader"" color=""blue"" />; <IdentityMapping name=""mapping"" />; </Node>; </Node>. If you think this is not a bug, feel free to change the label of this issue",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/152
https://github.com/sofa-framework/sofa/issues/152:396,Deployability,update,updated,396,"I am using a Visual(Ogl)Model to display a decorative mesh (ie not a simulated object); The geometry is loaded using a MeshLoader. If I change some transformation value in the MeshLoader, and update/reinit this component, I get:; - positions in mesh loader updated; - VisualModel linked positions updated; - the 3d display NOT updated; - even if I reinit the VisualModel the display is still not updated; - even if I step the display is still not updated. I would expect that a VisualModel reinit would do the trick. If I add a MechanicalObject node + bottom level with IdentityMapping+VisualModel, then when I step I have the VisualModel and display updated - this is what I expect in that case (and this is currently my workaround) - What the mapping is doing to make the VisualModel really updates ?. I attach a simple demo .scn that show the issue (well looks like .scn cannot be attached) :. <Node name=""Root"" >; <MeshObjLoader name=""loader"" filename=""mesh/floor3.obj"" />; <MechanicalObject name=""dofs"" src=""@loader"" />; <Node name=""simple"">; <VisualModel name=""visual"" src=""@../loader"" color=""red"" />; </Node>; <Node name=""mapping"">; <VisualModel name=""visual"" src=""@../loader"" color=""blue"" />; <IdentityMapping name=""mapping"" />; </Node>; </Node>. If you think this is not a bug, feel free to change the label of this issue",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/152
https://github.com/sofa-framework/sofa/issues/152:447,Deployability,update,updated,447,"I am using a Visual(Ogl)Model to display a decorative mesh (ie not a simulated object); The geometry is loaded using a MeshLoader. If I change some transformation value in the MeshLoader, and update/reinit this component, I get:; - positions in mesh loader updated; - VisualModel linked positions updated; - the 3d display NOT updated; - even if I reinit the VisualModel the display is still not updated; - even if I step the display is still not updated. I would expect that a VisualModel reinit would do the trick. If I add a MechanicalObject node + bottom level with IdentityMapping+VisualModel, then when I step I have the VisualModel and display updated - this is what I expect in that case (and this is currently my workaround) - What the mapping is doing to make the VisualModel really updates ?. I attach a simple demo .scn that show the issue (well looks like .scn cannot be attached) :. <Node name=""Root"" >; <MeshObjLoader name=""loader"" filename=""mesh/floor3.obj"" />; <MechanicalObject name=""dofs"" src=""@loader"" />; <Node name=""simple"">; <VisualModel name=""visual"" src=""@../loader"" color=""red"" />; </Node>; <Node name=""mapping"">; <VisualModel name=""visual"" src=""@../loader"" color=""blue"" />; <IdentityMapping name=""mapping"" />; </Node>; </Node>. If you think this is not a bug, feel free to change the label of this issue",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/152
https://github.com/sofa-framework/sofa/issues/152:651,Deployability,update,updated,651,"I am using a Visual(Ogl)Model to display a decorative mesh (ie not a simulated object); The geometry is loaded using a MeshLoader. If I change some transformation value in the MeshLoader, and update/reinit this component, I get:; - positions in mesh loader updated; - VisualModel linked positions updated; - the 3d display NOT updated; - even if I reinit the VisualModel the display is still not updated; - even if I step the display is still not updated. I would expect that a VisualModel reinit would do the trick. If I add a MechanicalObject node + bottom level with IdentityMapping+VisualModel, then when I step I have the VisualModel and display updated - this is what I expect in that case (and this is currently my workaround) - What the mapping is doing to make the VisualModel really updates ?. I attach a simple demo .scn that show the issue (well looks like .scn cannot be attached) :. <Node name=""Root"" >; <MeshObjLoader name=""loader"" filename=""mesh/floor3.obj"" />; <MechanicalObject name=""dofs"" src=""@loader"" />; <Node name=""simple"">; <VisualModel name=""visual"" src=""@../loader"" color=""red"" />; </Node>; <Node name=""mapping"">; <VisualModel name=""visual"" src=""@../loader"" color=""blue"" />; <IdentityMapping name=""mapping"" />; </Node>; </Node>. If you think this is not a bug, feel free to change the label of this issue",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/152
https://github.com/sofa-framework/sofa/issues/152:793,Deployability,update,updates,793,"I am using a Visual(Ogl)Model to display a decorative mesh (ie not a simulated object); The geometry is loaded using a MeshLoader. If I change some transformation value in the MeshLoader, and update/reinit this component, I get:; - positions in mesh loader updated; - VisualModel linked positions updated; - the 3d display NOT updated; - even if I reinit the VisualModel the display is still not updated; - even if I step the display is still not updated. I would expect that a VisualModel reinit would do the trick. If I add a MechanicalObject node + bottom level with IdentityMapping+VisualModel, then when I step I have the VisualModel and display updated - this is what I expect in that case (and this is currently my workaround) - What the mapping is doing to make the VisualModel really updates ?. I attach a simple demo .scn that show the issue (well looks like .scn cannot be attached) :. <Node name=""Root"" >; <MeshObjLoader name=""loader"" filename=""mesh/floor3.obj"" />; <MechanicalObject name=""dofs"" src=""@loader"" />; <Node name=""simple"">; <VisualModel name=""visual"" src=""@../loader"" color=""red"" />; </Node>; <Node name=""mapping"">; <VisualModel name=""visual"" src=""@../loader"" color=""blue"" />; <IdentityMapping name=""mapping"" />; </Node>; </Node>. If you think this is not a bug, feel free to change the label of this issue",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/152
https://github.com/sofa-framework/sofa/issues/152:104,Performance,load,loaded,104,"I am using a Visual(Ogl)Model to display a decorative mesh (ie not a simulated object); The geometry is loaded using a MeshLoader. If I change some transformation value in the MeshLoader, and update/reinit this component, I get:; - positions in mesh loader updated; - VisualModel linked positions updated; - the 3d display NOT updated; - even if I reinit the VisualModel the display is still not updated; - even if I step the display is still not updated. I would expect that a VisualModel reinit would do the trick. If I add a MechanicalObject node + bottom level with IdentityMapping+VisualModel, then when I step I have the VisualModel and display updated - this is what I expect in that case (and this is currently my workaround) - What the mapping is doing to make the VisualModel really updates ?. I attach a simple demo .scn that show the issue (well looks like .scn cannot be attached) :. <Node name=""Root"" >; <MeshObjLoader name=""loader"" filename=""mesh/floor3.obj"" />; <MechanicalObject name=""dofs"" src=""@loader"" />; <Node name=""simple"">; <VisualModel name=""visual"" src=""@../loader"" color=""red"" />; </Node>; <Node name=""mapping"">; <VisualModel name=""visual"" src=""@../loader"" color=""blue"" />; <IdentityMapping name=""mapping"" />; </Node>; </Node>. If you think this is not a bug, feel free to change the label of this issue",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/152
https://github.com/sofa-framework/sofa/issues/152:250,Performance,load,loader,250,"I am using a Visual(Ogl)Model to display a decorative mesh (ie not a simulated object); The geometry is loaded using a MeshLoader. If I change some transformation value in the MeshLoader, and update/reinit this component, I get:; - positions in mesh loader updated; - VisualModel linked positions updated; - the 3d display NOT updated; - even if I reinit the VisualModel the display is still not updated; - even if I step the display is still not updated. I would expect that a VisualModel reinit would do the trick. If I add a MechanicalObject node + bottom level with IdentityMapping+VisualModel, then when I step I have the VisualModel and display updated - this is what I expect in that case (and this is currently my workaround) - What the mapping is doing to make the VisualModel really updates ?. I attach a simple demo .scn that show the issue (well looks like .scn cannot be attached) :. <Node name=""Root"" >; <MeshObjLoader name=""loader"" filename=""mesh/floor3.obj"" />; <MechanicalObject name=""dofs"" src=""@loader"" />; <Node name=""simple"">; <VisualModel name=""visual"" src=""@../loader"" color=""red"" />; </Node>; <Node name=""mapping"">; <VisualModel name=""visual"" src=""@../loader"" color=""blue"" />; <IdentityMapping name=""mapping"" />; </Node>; </Node>. If you think this is not a bug, feel free to change the label of this issue",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/152
https://github.com/sofa-framework/sofa/issues/152:939,Performance,load,loader,939,"I am using a Visual(Ogl)Model to display a decorative mesh (ie not a simulated object); The geometry is loaded using a MeshLoader. If I change some transformation value in the MeshLoader, and update/reinit this component, I get:; - positions in mesh loader updated; - VisualModel linked positions updated; - the 3d display NOT updated; - even if I reinit the VisualModel the display is still not updated; - even if I step the display is still not updated. I would expect that a VisualModel reinit would do the trick. If I add a MechanicalObject node + bottom level with IdentityMapping+VisualModel, then when I step I have the VisualModel and display updated - this is what I expect in that case (and this is currently my workaround) - What the mapping is doing to make the VisualModel really updates ?. I attach a simple demo .scn that show the issue (well looks like .scn cannot be attached) :. <Node name=""Root"" >; <MeshObjLoader name=""loader"" filename=""mesh/floor3.obj"" />; <MechanicalObject name=""dofs"" src=""@loader"" />; <Node name=""simple"">; <VisualModel name=""visual"" src=""@../loader"" color=""red"" />; </Node>; <Node name=""mapping"">; <VisualModel name=""visual"" src=""@../loader"" color=""blue"" />; <IdentityMapping name=""mapping"" />; </Node>; </Node>. If you think this is not a bug, feel free to change the label of this issue",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/152
https://github.com/sofa-framework/sofa/issues/152:1014,Performance,load,loader,1014,"I am using a Visual(Ogl)Model to display a decorative mesh (ie not a simulated object); The geometry is loaded using a MeshLoader. If I change some transformation value in the MeshLoader, and update/reinit this component, I get:; - positions in mesh loader updated; - VisualModel linked positions updated; - the 3d display NOT updated; - even if I reinit the VisualModel the display is still not updated; - even if I step the display is still not updated. I would expect that a VisualModel reinit would do the trick. If I add a MechanicalObject node + bottom level with IdentityMapping+VisualModel, then when I step I have the VisualModel and display updated - this is what I expect in that case (and this is currently my workaround) - What the mapping is doing to make the VisualModel really updates ?. I attach a simple demo .scn that show the issue (well looks like .scn cannot be attached) :. <Node name=""Root"" >; <MeshObjLoader name=""loader"" filename=""mesh/floor3.obj"" />; <MechanicalObject name=""dofs"" src=""@loader"" />; <Node name=""simple"">; <VisualModel name=""visual"" src=""@../loader"" color=""red"" />; </Node>; <Node name=""mapping"">; <VisualModel name=""visual"" src=""@../loader"" color=""blue"" />; <IdentityMapping name=""mapping"" />; </Node>; </Node>. If you think this is not a bug, feel free to change the label of this issue",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/152
https://github.com/sofa-framework/sofa/issues/152:1084,Performance,load,loader,1084,"I am using a Visual(Ogl)Model to display a decorative mesh (ie not a simulated object); The geometry is loaded using a MeshLoader. If I change some transformation value in the MeshLoader, and update/reinit this component, I get:; - positions in mesh loader updated; - VisualModel linked positions updated; - the 3d display NOT updated; - even if I reinit the VisualModel the display is still not updated; - even if I step the display is still not updated. I would expect that a VisualModel reinit would do the trick. If I add a MechanicalObject node + bottom level with IdentityMapping+VisualModel, then when I step I have the VisualModel and display updated - this is what I expect in that case (and this is currently my workaround) - What the mapping is doing to make the VisualModel really updates ?. I attach a simple demo .scn that show the issue (well looks like .scn cannot be attached) :. <Node name=""Root"" >; <MeshObjLoader name=""loader"" filename=""mesh/floor3.obj"" />; <MechanicalObject name=""dofs"" src=""@loader"" />; <Node name=""simple"">; <VisualModel name=""visual"" src=""@../loader"" color=""red"" />; </Node>; <Node name=""mapping"">; <VisualModel name=""visual"" src=""@../loader"" color=""blue"" />; <IdentityMapping name=""mapping"" />; </Node>; </Node>. If you think this is not a bug, feel free to change the label of this issue",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/152
https://github.com/sofa-framework/sofa/issues/152:1176,Performance,load,loader,1176,"I am using a Visual(Ogl)Model to display a decorative mesh (ie not a simulated object); The geometry is loaded using a MeshLoader. If I change some transformation value in the MeshLoader, and update/reinit this component, I get:; - positions in mesh loader updated; - VisualModel linked positions updated; - the 3d display NOT updated; - even if I reinit the VisualModel the display is still not updated; - even if I step the display is still not updated. I would expect that a VisualModel reinit would do the trick. If I add a MechanicalObject node + bottom level with IdentityMapping+VisualModel, then when I step I have the VisualModel and display updated - this is what I expect in that case (and this is currently my workaround) - What the mapping is doing to make the VisualModel really updates ?. I attach a simple demo .scn that show the issue (well looks like .scn cannot be attached) :. <Node name=""Root"" >; <MeshObjLoader name=""loader"" filename=""mesh/floor3.obj"" />; <MechanicalObject name=""dofs"" src=""@loader"" />; <Node name=""simple"">; <VisualModel name=""visual"" src=""@../loader"" color=""red"" />; </Node>; <Node name=""mapping"">; <VisualModel name=""visual"" src=""@../loader"" color=""blue"" />; <IdentityMapping name=""mapping"" />; </Node>; </Node>. If you think this is not a bug, feel free to change the label of this issue",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/152
https://github.com/sofa-framework/sofa/issues/152:815,Usability,simpl,simple,815,"I am using a Visual(Ogl)Model to display a decorative mesh (ie not a simulated object); The geometry is loaded using a MeshLoader. If I change some transformation value in the MeshLoader, and update/reinit this component, I get:; - positions in mesh loader updated; - VisualModel linked positions updated; - the 3d display NOT updated; - even if I reinit the VisualModel the display is still not updated; - even if I step the display is still not updated. I would expect that a VisualModel reinit would do the trick. If I add a MechanicalObject node + bottom level with IdentityMapping+VisualModel, then when I step I have the VisualModel and display updated - this is what I expect in that case (and this is currently my workaround) - What the mapping is doing to make the VisualModel really updates ?. I attach a simple demo .scn that show the issue (well looks like .scn cannot be attached) :. <Node name=""Root"" >; <MeshObjLoader name=""loader"" filename=""mesh/floor3.obj"" />; <MechanicalObject name=""dofs"" src=""@loader"" />; <Node name=""simple"">; <VisualModel name=""visual"" src=""@../loader"" color=""red"" />; </Node>; <Node name=""mapping"">; <VisualModel name=""visual"" src=""@../loader"" color=""blue"" />; <IdentityMapping name=""mapping"" />; </Node>; </Node>. If you think this is not a bug, feel free to change the label of this issue",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/152
https://github.com/sofa-framework/sofa/issues/152:1038,Usability,simpl,simple,1038,"I am using a Visual(Ogl)Model to display a decorative mesh (ie not a simulated object); The geometry is loaded using a MeshLoader. If I change some transformation value in the MeshLoader, and update/reinit this component, I get:; - positions in mesh loader updated; - VisualModel linked positions updated; - the 3d display NOT updated; - even if I reinit the VisualModel the display is still not updated; - even if I step the display is still not updated. I would expect that a VisualModel reinit would do the trick. If I add a MechanicalObject node + bottom level with IdentityMapping+VisualModel, then when I step I have the VisualModel and display updated - this is what I expect in that case (and this is currently my workaround) - What the mapping is doing to make the VisualModel really updates ?. I attach a simple demo .scn that show the issue (well looks like .scn cannot be attached) :. <Node name=""Root"" >; <MeshObjLoader name=""loader"" filename=""mesh/floor3.obj"" />; <MechanicalObject name=""dofs"" src=""@loader"" />; <Node name=""simple"">; <VisualModel name=""visual"" src=""@../loader"" color=""red"" />; </Node>; <Node name=""mapping"">; <VisualModel name=""visual"" src=""@../loader"" color=""blue"" />; <IdentityMapping name=""mapping"" />; </Node>; </Node>. If you think this is not a bug, feel free to change the label of this issue",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/152
https://github.com/sofa-framework/sofa/issues/155:307,Availability,avail,available,307,"Hey guys,. apparently, 30 tests out of 32 crash with exit code 53. (And bring some bad red color to the beautiful dashboard). This code is ""The network path was not found"". Is every binary/file where it's supposed to be ?. NB : Is this config worth the trouble ? Or should it be removed as VS2015 is freely available ? (I heard something about people **needing** it but...)",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/155
https://github.com/sofa-framework/sofa/issues/155:236,Modifiability,config,config,236,"Hey guys,. apparently, 30 tests out of 32 crash with exit code 53. (And bring some bad red color to the beautiful dashboard). This code is ""The network path was not found"". Is every binary/file where it's supposed to be ?. NB : Is this config worth the trouble ? Or should it be removed as VS2015 is freely available ? (I heard something about people **needing** it but...)",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/155
https://github.com/sofa-framework/sofa/issues/155:26,Testability,test,tests,26,"Hey guys,. apparently, 30 tests out of 32 crash with exit code 53. (And bring some bad red color to the beautiful dashboard). This code is ""The network path was not found"". Is every binary/file where it's supposed to be ?. NB : Is this config worth the trouble ? Or should it be removed as VS2015 is freely available ? (I heard something about people **needing** it but...)",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/155
https://github.com/sofa-framework/sofa/pull/156:432,Availability,error,error,432,"This PR fixes exception handling in Python bindings. Mostly, the PR replaces the incorrect:; ```c++; PyErr_BadArgument();; Py_RETURN_NONE;; ```; with the correct:; ```c++; PyErr_BadArgument();; return NULL;; ```. As the [Python API](https://docs.python.org/2/c-api/exceptions.html) documentation says: . > [Python exception handling] works somewhat like the Unix errno variable: there is a global indicator (per thread) of the last error that occurred. Most functions don’t clear this on success, but will set it to indicate the cause of the error on failure.; > ; > **Most functions also return an error indicator, usually NULL if they are supposed to return a pointer, or -1 if they return an integer (exception: the PyArg_*() functions return 1 for success and 0 for failure).**. As it happened, any error triggered within the python bindings would go unnoticed until someone else would check the error flag using `PyErr_Occurred`, possibly during a python code error or by some other C extension (in my case, Numpy). . Hopefully the behaviour is now correct. <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings nor unit test failures.; - [x] does not break existing scenes.; - [x] does not break API compatibility.; - [x] the content of the PR is clear and that a future PR from @maxime-tournier may follow the @matthieu-nesme suggestion. ; - [x] is more than 1 week old.; **Reviewers will merge only if all this checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/156
https://github.com/sofa-framework/sofa/pull/156:542,Availability,error,error,542,"This PR fixes exception handling in Python bindings. Mostly, the PR replaces the incorrect:; ```c++; PyErr_BadArgument();; Py_RETURN_NONE;; ```; with the correct:; ```c++; PyErr_BadArgument();; return NULL;; ```. As the [Python API](https://docs.python.org/2/c-api/exceptions.html) documentation says: . > [Python exception handling] works somewhat like the Unix errno variable: there is a global indicator (per thread) of the last error that occurred. Most functions don’t clear this on success, but will set it to indicate the cause of the error on failure.; > ; > **Most functions also return an error indicator, usually NULL if they are supposed to return a pointer, or -1 if they return an integer (exception: the PyArg_*() functions return 1 for success and 0 for failure).**. As it happened, any error triggered within the python bindings would go unnoticed until someone else would check the error flag using `PyErr_Occurred`, possibly during a python code error or by some other C extension (in my case, Numpy). . Hopefully the behaviour is now correct. <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings nor unit test failures.; - [x] does not break existing scenes.; - [x] does not break API compatibility.; - [x] the content of the PR is clear and that a future PR from @maxime-tournier may follow the @matthieu-nesme suggestion. ; - [x] is more than 1 week old.; **Reviewers will merge only if all this checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/156
https://github.com/sofa-framework/sofa/pull/156:551,Availability,failure,failure,551,"This PR fixes exception handling in Python bindings. Mostly, the PR replaces the incorrect:; ```c++; PyErr_BadArgument();; Py_RETURN_NONE;; ```; with the correct:; ```c++; PyErr_BadArgument();; return NULL;; ```. As the [Python API](https://docs.python.org/2/c-api/exceptions.html) documentation says: . > [Python exception handling] works somewhat like the Unix errno variable: there is a global indicator (per thread) of the last error that occurred. Most functions don’t clear this on success, but will set it to indicate the cause of the error on failure.; > ; > **Most functions also return an error indicator, usually NULL if they are supposed to return a pointer, or -1 if they return an integer (exception: the PyArg_*() functions return 1 for success and 0 for failure).**. As it happened, any error triggered within the python bindings would go unnoticed until someone else would check the error flag using `PyErr_Occurred`, possibly during a python code error or by some other C extension (in my case, Numpy). . Hopefully the behaviour is now correct. <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings nor unit test failures.; - [x] does not break existing scenes.; - [x] does not break API compatibility.; - [x] the content of the PR is clear and that a future PR from @maxime-tournier may follow the @matthieu-nesme suggestion. ; - [x] is more than 1 week old.; **Reviewers will merge only if all this checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/156
https://github.com/sofa-framework/sofa/pull/156:599,Availability,error,error,599,"This PR fixes exception handling in Python bindings. Mostly, the PR replaces the incorrect:; ```c++; PyErr_BadArgument();; Py_RETURN_NONE;; ```; with the correct:; ```c++; PyErr_BadArgument();; return NULL;; ```. As the [Python API](https://docs.python.org/2/c-api/exceptions.html) documentation says: . > [Python exception handling] works somewhat like the Unix errno variable: there is a global indicator (per thread) of the last error that occurred. Most functions don’t clear this on success, but will set it to indicate the cause of the error on failure.; > ; > **Most functions also return an error indicator, usually NULL if they are supposed to return a pointer, or -1 if they return an integer (exception: the PyArg_*() functions return 1 for success and 0 for failure).**. As it happened, any error triggered within the python bindings would go unnoticed until someone else would check the error flag using `PyErr_Occurred`, possibly during a python code error or by some other C extension (in my case, Numpy). . Hopefully the behaviour is now correct. <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings nor unit test failures.; - [x] does not break existing scenes.; - [x] does not break API compatibility.; - [x] the content of the PR is clear and that a future PR from @maxime-tournier may follow the @matthieu-nesme suggestion. ; - [x] is more than 1 week old.; **Reviewers will merge only if all this checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/156
https://github.com/sofa-framework/sofa/pull/156:770,Availability,failure,failure,770,"This PR fixes exception handling in Python bindings. Mostly, the PR replaces the incorrect:; ```c++; PyErr_BadArgument();; Py_RETURN_NONE;; ```; with the correct:; ```c++; PyErr_BadArgument();; return NULL;; ```. As the [Python API](https://docs.python.org/2/c-api/exceptions.html) documentation says: . > [Python exception handling] works somewhat like the Unix errno variable: there is a global indicator (per thread) of the last error that occurred. Most functions don’t clear this on success, but will set it to indicate the cause of the error on failure.; > ; > **Most functions also return an error indicator, usually NULL if they are supposed to return a pointer, or -1 if they return an integer (exception: the PyArg_*() functions return 1 for success and 0 for failure).**. As it happened, any error triggered within the python bindings would go unnoticed until someone else would check the error flag using `PyErr_Occurred`, possibly during a python code error or by some other C extension (in my case, Numpy). . Hopefully the behaviour is now correct. <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings nor unit test failures.; - [x] does not break existing scenes.; - [x] does not break API compatibility.; - [x] the content of the PR is clear and that a future PR from @maxime-tournier may follow the @matthieu-nesme suggestion. ; - [x] is more than 1 week old.; **Reviewers will merge only if all this checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/156
https://github.com/sofa-framework/sofa/pull/156:803,Availability,error,error,803,"This PR fixes exception handling in Python bindings. Mostly, the PR replaces the incorrect:; ```c++; PyErr_BadArgument();; Py_RETURN_NONE;; ```; with the correct:; ```c++; PyErr_BadArgument();; return NULL;; ```. As the [Python API](https://docs.python.org/2/c-api/exceptions.html) documentation says: . > [Python exception handling] works somewhat like the Unix errno variable: there is a global indicator (per thread) of the last error that occurred. Most functions don’t clear this on success, but will set it to indicate the cause of the error on failure.; > ; > **Most functions also return an error indicator, usually NULL if they are supposed to return a pointer, or -1 if they return an integer (exception: the PyArg_*() functions return 1 for success and 0 for failure).**. As it happened, any error triggered within the python bindings would go unnoticed until someone else would check the error flag using `PyErr_Occurred`, possibly during a python code error or by some other C extension (in my case, Numpy). . Hopefully the behaviour is now correct. <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings nor unit test failures.; - [x] does not break existing scenes.; - [x] does not break API compatibility.; - [x] the content of the PR is clear and that a future PR from @maxime-tournier may follow the @matthieu-nesme suggestion. ; - [x] is more than 1 week old.; **Reviewers will merge only if all this checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/156
https://github.com/sofa-framework/sofa/pull/156:900,Availability,error,error,900,"This PR fixes exception handling in Python bindings. Mostly, the PR replaces the incorrect:; ```c++; PyErr_BadArgument();; Py_RETURN_NONE;; ```; with the correct:; ```c++; PyErr_BadArgument();; return NULL;; ```. As the [Python API](https://docs.python.org/2/c-api/exceptions.html) documentation says: . > [Python exception handling] works somewhat like the Unix errno variable: there is a global indicator (per thread) of the last error that occurred. Most functions don’t clear this on success, but will set it to indicate the cause of the error on failure.; > ; > **Most functions also return an error indicator, usually NULL if they are supposed to return a pointer, or -1 if they return an integer (exception: the PyArg_*() functions return 1 for success and 0 for failure).**. As it happened, any error triggered within the python bindings would go unnoticed until someone else would check the error flag using `PyErr_Occurred`, possibly during a python code error or by some other C extension (in my case, Numpy). . Hopefully the behaviour is now correct. <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings nor unit test failures.; - [x] does not break existing scenes.; - [x] does not break API compatibility.; - [x] the content of the PR is clear and that a future PR from @maxime-tournier may follow the @matthieu-nesme suggestion. ; - [x] is more than 1 week old.; **Reviewers will merge only if all this checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/156
https://github.com/sofa-framework/sofa/pull/156:965,Availability,error,error,965,"This PR fixes exception handling in Python bindings. Mostly, the PR replaces the incorrect:; ```c++; PyErr_BadArgument();; Py_RETURN_NONE;; ```; with the correct:; ```c++; PyErr_BadArgument();; return NULL;; ```. As the [Python API](https://docs.python.org/2/c-api/exceptions.html) documentation says: . > [Python exception handling] works somewhat like the Unix errno variable: there is a global indicator (per thread) of the last error that occurred. Most functions don’t clear this on success, but will set it to indicate the cause of the error on failure.; > ; > **Most functions also return an error indicator, usually NULL if they are supposed to return a pointer, or -1 if they return an integer (exception: the PyArg_*() functions return 1 for success and 0 for failure).**. As it happened, any error triggered within the python bindings would go unnoticed until someone else would check the error flag using `PyErr_Occurred`, possibly during a python code error or by some other C extension (in my case, Numpy). . Hopefully the behaviour is now correct. <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings nor unit test failures.; - [x] does not break existing scenes.; - [x] does not break API compatibility.; - [x] the content of the PR is clear and that a future PR from @maxime-tournier may follow the @matthieu-nesme suggestion. ; - [x] is more than 1 week old.; **Reviewers will merge only if all this checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/156
https://github.com/sofa-framework/sofa/pull/156:1237,Availability,failure,failures,1237,"This PR fixes exception handling in Python bindings. Mostly, the PR replaces the incorrect:; ```c++; PyErr_BadArgument();; Py_RETURN_NONE;; ```; with the correct:; ```c++; PyErr_BadArgument();; return NULL;; ```. As the [Python API](https://docs.python.org/2/c-api/exceptions.html) documentation says: . > [Python exception handling] works somewhat like the Unix errno variable: there is a global indicator (per thread) of the last error that occurred. Most functions don’t clear this on success, but will set it to indicate the cause of the error on failure.; > ; > **Most functions also return an error indicator, usually NULL if they are supposed to return a pointer, or -1 if they return an integer (exception: the PyArg_*() functions return 1 for success and 0 for failure).**. As it happened, any error triggered within the python bindings would go unnoticed until someone else would check the error flag using `PyErr_Occurred`, possibly during a python code error or by some other C extension (in my case, Numpy). . Hopefully the behaviour is now correct. <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings nor unit test failures.; - [x] does not break existing scenes.; - [x] does not break API compatibility.; - [x] the content of the PR is clear and that a future PR from @maxime-tournier may follow the @matthieu-nesme suggestion. ; - [x] is more than 1 week old.; **Reviewers will merge only if all this checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/156
https://github.com/sofa-framework/sofa/pull/156:1106,Integrability,message,message,1106,"This PR fixes exception handling in Python bindings. Mostly, the PR replaces the incorrect:; ```c++; PyErr_BadArgument();; Py_RETURN_NONE;; ```; with the correct:; ```c++; PyErr_BadArgument();; return NULL;; ```. As the [Python API](https://docs.python.org/2/c-api/exceptions.html) documentation says: . > [Python exception handling] works somewhat like the Unix errno variable: there is a global indicator (per thread) of the last error that occurred. Most functions don’t clear this on success, but will set it to indicate the cause of the error on failure.; > ; > **Most functions also return an error indicator, usually NULL if they are supposed to return a pointer, or -1 if they return an integer (exception: the PyArg_*() functions return 1 for success and 0 for failure).**. As it happened, any error triggered within the python bindings would go unnoticed until someone else would check the error flag using `PyErr_Occurred`, possibly during a python code error or by some other C extension (in my case, Numpy). . Hopefully the behaviour is now correct. <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings nor unit test failures.; - [x] does not break existing scenes.; - [x] does not break API compatibility.; - [x] the content of the PR is clear and that a future PR from @maxime-tournier may follow the @matthieu-nesme suggestion. ; - [x] is more than 1 week old.; **Reviewers will merge only if all this checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/156
https://github.com/sofa-framework/sofa/pull/156:369,Modifiability,variab,variable,369,"This PR fixes exception handling in Python bindings. Mostly, the PR replaces the incorrect:; ```c++; PyErr_BadArgument();; Py_RETURN_NONE;; ```; with the correct:; ```c++; PyErr_BadArgument();; return NULL;; ```. As the [Python API](https://docs.python.org/2/c-api/exceptions.html) documentation says: . > [Python exception handling] works somewhat like the Unix errno variable: there is a global indicator (per thread) of the last error that occurred. Most functions don’t clear this on success, but will set it to indicate the cause of the error on failure.; > ; > **Most functions also return an error indicator, usually NULL if they are supposed to return a pointer, or -1 if they return an integer (exception: the PyArg_*() functions return 1 for success and 0 for failure).**. As it happened, any error triggered within the python bindings would go unnoticed until someone else would check the error flag using `PyErr_Occurred`, possibly during a python code error or by some other C extension (in my case, Numpy). . Hopefully the behaviour is now correct. <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings nor unit test failures.; - [x] does not break existing scenes.; - [x] does not break API compatibility.; - [x] the content of the PR is clear and that a future PR from @maxime-tournier may follow the @matthieu-nesme suggestion. ; - [x] is more than 1 week old.; **Reviewers will merge only if all this checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/156
https://github.com/sofa-framework/sofa/pull/156:1232,Testability,test,test,1232,"This PR fixes exception handling in Python bindings. Mostly, the PR replaces the incorrect:; ```c++; PyErr_BadArgument();; Py_RETURN_NONE;; ```; with the correct:; ```c++; PyErr_BadArgument();; return NULL;; ```. As the [Python API](https://docs.python.org/2/c-api/exceptions.html) documentation says: . > [Python exception handling] works somewhat like the Unix errno variable: there is a global indicator (per thread) of the last error that occurred. Most functions don’t clear this on success, but will set it to indicate the cause of the error on failure.; > ; > **Most functions also return an error indicator, usually NULL if they are supposed to return a pointer, or -1 if they return an integer (exception: the PyArg_*() functions return 1 for success and 0 for failure).**. As it happened, any error triggered within the python bindings would go unnoticed until someone else would check the error flag using `PyErr_Occurred`, possibly during a python code error or by some other C extension (in my case, Numpy). . Hopefully the behaviour is now correct. <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings nor unit test failures.; - [x] does not break existing scenes.; - [x] does not break API compatibility.; - [x] the content of the PR is clear and that a future PR from @maxime-tournier may follow the @matthieu-nesme suggestion. ; - [x] is more than 1 week old.; **Reviewers will merge only if all this checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/156
https://github.com/sofa-framework/sofa/pull/156:474,Usability,clear,clear,474,"This PR fixes exception handling in Python bindings. Mostly, the PR replaces the incorrect:; ```c++; PyErr_BadArgument();; Py_RETURN_NONE;; ```; with the correct:; ```c++; PyErr_BadArgument();; return NULL;; ```. As the [Python API](https://docs.python.org/2/c-api/exceptions.html) documentation says: . > [Python exception handling] works somewhat like the Unix errno variable: there is a global indicator (per thread) of the last error that occurred. Most functions don’t clear this on success, but will set it to indicate the cause of the error on failure.; > ; > **Most functions also return an error indicator, usually NULL if they are supposed to return a pointer, or -1 if they return an integer (exception: the PyArg_*() functions return 1 for success and 0 for failure).**. As it happened, any error triggered within the python bindings would go unnoticed until someone else would check the error flag using `PyErr_Occurred`, possibly during a python code error or by some other C extension (in my case, Numpy). . Hopefully the behaviour is now correct. <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings nor unit test failures.; - [x] does not break existing scenes.; - [x] does not break API compatibility.; - [x] the content of the PR is clear and that a future PR from @maxime-tournier may follow the @matthieu-nesme suggestion. ; - [x] is more than 1 week old.; **Reviewers will merge only if all this checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/156
https://github.com/sofa-framework/sofa/pull/156:1359,Usability,clear,clear,1359,"This PR fixes exception handling in Python bindings. Mostly, the PR replaces the incorrect:; ```c++; PyErr_BadArgument();; Py_RETURN_NONE;; ```; with the correct:; ```c++; PyErr_BadArgument();; return NULL;; ```. As the [Python API](https://docs.python.org/2/c-api/exceptions.html) documentation says: . > [Python exception handling] works somewhat like the Unix errno variable: there is a global indicator (per thread) of the last error that occurred. Most functions don’t clear this on success, but will set it to indicate the cause of the error on failure.; > ; > **Most functions also return an error indicator, usually NULL if they are supposed to return a pointer, or -1 if they return an integer (exception: the PyArg_*() functions return 1 for success and 0 for failure).**. As it happened, any error triggered within the python bindings would go unnoticed until someone else would check the error flag using `PyErr_Occurred`, possibly during a python code error or by some other C extension (in my case, Numpy). . Hopefully the behaviour is now correct. <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings nor unit test failures.; - [x] does not break existing scenes.; - [x] does not break API compatibility.; - [x] the content of the PR is clear and that a future PR from @maxime-tournier may follow the @matthieu-nesme suggestion. ; - [x] is more than 1 week old.; **Reviewers will merge only if all this checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/156
https://github.com/sofa-framework/sofa/pull/158:468,Availability,failure,failure,468,"It is useful to be able to load shaders directly from a std::string as it allows us to not need filesystem management. Consequently ""fixed"" shaders like shadows (or normal rendering when OpenGL Core profile will come) will be directly integrated into the libs (no more share/shaders directory to locate/find/read). [needed to solve #142 ]. Checklist to merge this PR: ; - [x] succeed on each compilation setup on the CI ; - [x] does not generates new warnings or test failure ; - [x] does not seems to break existing scenes.; - [x] does not seems to break API compatibility. ; - [x] cleans stuff; - [x] have tests on the introduced features. ; - [x] is now 1 week old and no one send a 'no go' comment.",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/158
https://github.com/sofa-framework/sofa/pull/158:235,Deployability,integrat,integrated,235,"It is useful to be able to load shaders directly from a std::string as it allows us to not need filesystem management. Consequently ""fixed"" shaders like shadows (or normal rendering when OpenGL Core profile will come) will be directly integrated into the libs (no more share/shaders directory to locate/find/read). [needed to solve #142 ]. Checklist to merge this PR: ; - [x] succeed on each compilation setup on the CI ; - [x] does not generates new warnings or test failure ; - [x] does not seems to break existing scenes.; - [x] does not seems to break API compatibility. ; - [x] cleans stuff; - [x] have tests on the introduced features. ; - [x] is now 1 week old and no one send a 'no go' comment.",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/158
https://github.com/sofa-framework/sofa/pull/158:235,Integrability,integrat,integrated,235,"It is useful to be able to load shaders directly from a std::string as it allows us to not need filesystem management. Consequently ""fixed"" shaders like shadows (or normal rendering when OpenGL Core profile will come) will be directly integrated into the libs (no more share/shaders directory to locate/find/read). [needed to solve #142 ]. Checklist to merge this PR: ; - [x] succeed on each compilation setup on the CI ; - [x] does not generates new warnings or test failure ; - [x] does not seems to break existing scenes.; - [x] does not seems to break API compatibility. ; - [x] cleans stuff; - [x] have tests on the introduced features. ; - [x] is now 1 week old and no one send a 'no go' comment.",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/158
https://github.com/sofa-framework/sofa/pull/158:27,Performance,load,load,27,"It is useful to be able to load shaders directly from a std::string as it allows us to not need filesystem management. Consequently ""fixed"" shaders like shadows (or normal rendering when OpenGL Core profile will come) will be directly integrated into the libs (no more share/shaders directory to locate/find/read). [needed to solve #142 ]. Checklist to merge this PR: ; - [x] succeed on each compilation setup on the CI ; - [x] does not generates new warnings or test failure ; - [x] does not seems to break existing scenes.; - [x] does not seems to break API compatibility. ; - [x] cleans stuff; - [x] have tests on the introduced features. ; - [x] is now 1 week old and no one send a 'no go' comment.",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/158
https://github.com/sofa-framework/sofa/pull/158:463,Testability,test,test,463,"It is useful to be able to load shaders directly from a std::string as it allows us to not need filesystem management. Consequently ""fixed"" shaders like shadows (or normal rendering when OpenGL Core profile will come) will be directly integrated into the libs (no more share/shaders directory to locate/find/read). [needed to solve #142 ]. Checklist to merge this PR: ; - [x] succeed on each compilation setup on the CI ; - [x] does not generates new warnings or test failure ; - [x] does not seems to break existing scenes.; - [x] does not seems to break API compatibility. ; - [x] cleans stuff; - [x] have tests on the introduced features. ; - [x] is now 1 week old and no one send a 'no go' comment.",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/158
https://github.com/sofa-framework/sofa/pull/158:608,Testability,test,tests,608,"It is useful to be able to load shaders directly from a std::string as it allows us to not need filesystem management. Consequently ""fixed"" shaders like shadows (or normal rendering when OpenGL Core profile will come) will be directly integrated into the libs (no more share/shaders directory to locate/find/read). [needed to solve #142 ]. Checklist to merge this PR: ; - [x] succeed on each compilation setup on the CI ; - [x] does not generates new warnings or test failure ; - [x] does not seems to break existing scenes.; - [x] does not seems to break API compatibility. ; - [x] cleans stuff; - [x] have tests on the introduced features. ; - [x] is now 1 week old and no one send a 'no go' comment.",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/158
https://github.com/sofa-framework/sofa/issues/160:418,Availability,down,down,418,@thomas-lemaire pointed that in several place there is mis-usages of printLog. ; We should clean that by clearly defining what is the correct behavior. . We can clean the printLog stuff independently but this is in fact connected to the msg_* API (https://www.sofa-framework.org/community/doc/programming-with-sofa/logger/) as well as this PR(https://github.com/sofa-framework/sofa/pull/106) which are attempts to lay down the foundations for a general handling of all the messages in Sofa.,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/160
https://github.com/sofa-framework/sofa/issues/160:473,Integrability,message,messages,473,@thomas-lemaire pointed that in several place there is mis-usages of printLog. ; We should clean that by clearly defining what is the correct behavior. . We can clean the printLog stuff independently but this is in fact connected to the msg_* API (https://www.sofa-framework.org/community/doc/programming-with-sofa/logger/) as well as this PR(https://github.com/sofa-framework/sofa/pull/106) which are attempts to lay down the foundations for a general handling of all the messages in Sofa.,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/160
https://github.com/sofa-framework/sofa/issues/160:315,Testability,log,logger,315,@thomas-lemaire pointed that in several place there is mis-usages of printLog. ; We should clean that by clearly defining what is the correct behavior. . We can clean the printLog stuff independently but this is in fact connected to the msg_* API (https://www.sofa-framework.org/community/doc/programming-with-sofa/logger/) as well as this PR(https://github.com/sofa-framework/sofa/pull/106) which are attempts to lay down the foundations for a general handling of all the messages in Sofa.,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/160
https://github.com/sofa-framework/sofa/issues/160:105,Usability,clear,clearly,105,@thomas-lemaire pointed that in several place there is mis-usages of printLog. ; We should clean that by clearly defining what is the correct behavior. . We can clean the printLog stuff independently but this is in fact connected to the msg_* API (https://www.sofa-framework.org/community/doc/programming-with-sofa/logger/) as well as this PR(https://github.com/sofa-framework/sofa/pull/106) which are attempts to lay down the foundations for a general handling of all the messages in Sofa.,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/160
https://github.com/sofa-framework/sofa/pull/161:447,Availability,failure,failure,447,"This PR address the problem of the uses of atoi and atof in the parse methods. . In short, ; using atof/i is flawned because:; - it does not check that the attribute is successfully parsed by atoi/atof resulting in undefined behavior when user input is invalid. ; - the components that use them also forgot to set the Local to ""C"" resulting in wrong parsing of 0.1 vs 0,1 (reported in issue https://github.com/sofa-framework/sofa/issues/151); - a failure during the parsing of the attribute does not generate a message to the user when something is wrong. . This PR add getAttributeAsFloat and getAttributeAsInt to be used in place of atof(attr->getAttribute()).; The getAttributeAs* method set the correct Local as well as generates error messages in case they are unable to parse the attribute. The PR contains new tests for the two added functions as well as a more general test in MechanicalObject.; This PR shouldn't break any API or scene or whatever. <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings nor unit test failures.; - [ ] does not break existing scenes.; - [ ] does not break API compatibility.; - [ ] has been reviewed and agreed to be transitional.; - [ ] is more than 1 week old.; **Reviewers will merge only if all this checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/161
https://github.com/sofa-framework/sofa/pull/161:734,Availability,error,error,734,"This PR address the problem of the uses of atoi and atof in the parse methods. . In short, ; using atof/i is flawned because:; - it does not check that the attribute is successfully parsed by atoi/atof resulting in undefined behavior when user input is invalid. ; - the components that use them also forgot to set the Local to ""C"" resulting in wrong parsing of 0.1 vs 0,1 (reported in issue https://github.com/sofa-framework/sofa/issues/151); - a failure during the parsing of the attribute does not generate a message to the user when something is wrong. . This PR add getAttributeAsFloat and getAttributeAsInt to be used in place of atof(attr->getAttribute()).; The getAttributeAs* method set the correct Local as well as generates error messages in case they are unable to parse the attribute. The PR contains new tests for the two added functions as well as a more general test in MechanicalObject.; This PR shouldn't break any API or scene or whatever. <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings nor unit test failures.; - [ ] does not break existing scenes.; - [ ] does not break API compatibility.; - [ ] has been reviewed and agreed to be transitional.; - [ ] is more than 1 week old.; **Reviewers will merge only if all this checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/161
https://github.com/sofa-framework/sofa/pull/161:1132,Availability,failure,failures,1132,"This PR address the problem of the uses of atoi and atof in the parse methods. . In short, ; using atof/i is flawned because:; - it does not check that the attribute is successfully parsed by atoi/atof resulting in undefined behavior when user input is invalid. ; - the components that use them also forgot to set the Local to ""C"" resulting in wrong parsing of 0.1 vs 0,1 (reported in issue https://github.com/sofa-framework/sofa/issues/151); - a failure during the parsing of the attribute does not generate a message to the user when something is wrong. . This PR add getAttributeAsFloat and getAttributeAsInt to be used in place of atof(attr->getAttribute()).; The getAttributeAs* method set the correct Local as well as generates error messages in case they are unable to parse the attribute. The PR contains new tests for the two added functions as well as a more general test in MechanicalObject.; This PR shouldn't break any API or scene or whatever. <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings nor unit test failures.; - [ ] does not break existing scenes.; - [ ] does not break API compatibility.; - [ ] has been reviewed and agreed to be transitional.; - [ ] is more than 1 week old.; **Reviewers will merge only if all this checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/161
https://github.com/sofa-framework/sofa/pull/161:511,Integrability,message,message,511,"This PR address the problem of the uses of atoi and atof in the parse methods. . In short, ; using atof/i is flawned because:; - it does not check that the attribute is successfully parsed by atoi/atof resulting in undefined behavior when user input is invalid. ; - the components that use them also forgot to set the Local to ""C"" resulting in wrong parsing of 0.1 vs 0,1 (reported in issue https://github.com/sofa-framework/sofa/issues/151); - a failure during the parsing of the attribute does not generate a message to the user when something is wrong. . This PR add getAttributeAsFloat and getAttributeAsInt to be used in place of atof(attr->getAttribute()).; The getAttributeAs* method set the correct Local as well as generates error messages in case they are unable to parse the attribute. The PR contains new tests for the two added functions as well as a more general test in MechanicalObject.; This PR shouldn't break any API or scene or whatever. <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings nor unit test failures.; - [ ] does not break existing scenes.; - [ ] does not break API compatibility.; - [ ] has been reviewed and agreed to be transitional.; - [ ] is more than 1 week old.; **Reviewers will merge only if all this checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/161
https://github.com/sofa-framework/sofa/pull/161:740,Integrability,message,messages,740,"This PR address the problem of the uses of atoi and atof in the parse methods. . In short, ; using atof/i is flawned because:; - it does not check that the attribute is successfully parsed by atoi/atof resulting in undefined behavior when user input is invalid. ; - the components that use them also forgot to set the Local to ""C"" resulting in wrong parsing of 0.1 vs 0,1 (reported in issue https://github.com/sofa-framework/sofa/issues/151); - a failure during the parsing of the attribute does not generate a message to the user when something is wrong. . This PR add getAttributeAsFloat and getAttributeAsInt to be used in place of atof(attr->getAttribute()).; The getAttributeAs* method set the correct Local as well as generates error messages in case they are unable to parse the attribute. The PR contains new tests for the two added functions as well as a more general test in MechanicalObject.; This PR shouldn't break any API or scene or whatever. <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings nor unit test failures.; - [ ] does not break existing scenes.; - [ ] does not break API compatibility.; - [ ] has been reviewed and agreed to be transitional.; - [ ] is more than 1 week old.; **Reviewers will merge only if all this checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/161
https://github.com/sofa-framework/sofa/pull/161:1001,Integrability,message,message,1001,"This PR address the problem of the uses of atoi and atof in the parse methods. . In short, ; using atof/i is flawned because:; - it does not check that the attribute is successfully parsed by atoi/atof resulting in undefined behavior when user input is invalid. ; - the components that use them also forgot to set the Local to ""C"" resulting in wrong parsing of 0.1 vs 0,1 (reported in issue https://github.com/sofa-framework/sofa/issues/151); - a failure during the parsing of the attribute does not generate a message to the user when something is wrong. . This PR add getAttributeAsFloat and getAttributeAsInt to be used in place of atof(attr->getAttribute()).; The getAttributeAs* method set the correct Local as well as generates error messages in case they are unable to parse the attribute. The PR contains new tests for the two added functions as well as a more general test in MechanicalObject.; This PR shouldn't break any API or scene or whatever. <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings nor unit test failures.; - [ ] does not break existing scenes.; - [ ] does not break API compatibility.; - [ ] has been reviewed and agreed to be transitional.; - [ ] is more than 1 week old.; **Reviewers will merge only if all this checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/161
https://github.com/sofa-framework/sofa/pull/161:817,Testability,test,tests,817,"This PR address the problem of the uses of atoi and atof in the parse methods. . In short, ; using atof/i is flawned because:; - it does not check that the attribute is successfully parsed by atoi/atof resulting in undefined behavior when user input is invalid. ; - the components that use them also forgot to set the Local to ""C"" resulting in wrong parsing of 0.1 vs 0,1 (reported in issue https://github.com/sofa-framework/sofa/issues/151); - a failure during the parsing of the attribute does not generate a message to the user when something is wrong. . This PR add getAttributeAsFloat and getAttributeAsInt to be used in place of atof(attr->getAttribute()).; The getAttributeAs* method set the correct Local as well as generates error messages in case they are unable to parse the attribute. The PR contains new tests for the two added functions as well as a more general test in MechanicalObject.; This PR shouldn't break any API or scene or whatever. <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings nor unit test failures.; - [ ] does not break existing scenes.; - [ ] does not break API compatibility.; - [ ] has been reviewed and agreed to be transitional.; - [ ] is more than 1 week old.; **Reviewers will merge only if all this checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/161
https://github.com/sofa-framework/sofa/pull/161:877,Testability,test,test,877,"This PR address the problem of the uses of atoi and atof in the parse methods. . In short, ; using atof/i is flawned because:; - it does not check that the attribute is successfully parsed by atoi/atof resulting in undefined behavior when user input is invalid. ; - the components that use them also forgot to set the Local to ""C"" resulting in wrong parsing of 0.1 vs 0,1 (reported in issue https://github.com/sofa-framework/sofa/issues/151); - a failure during the parsing of the attribute does not generate a message to the user when something is wrong. . This PR add getAttributeAsFloat and getAttributeAsInt to be used in place of atof(attr->getAttribute()).; The getAttributeAs* method set the correct Local as well as generates error messages in case they are unable to parse the attribute. The PR contains new tests for the two added functions as well as a more general test in MechanicalObject.; This PR shouldn't break any API or scene or whatever. <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings nor unit test failures.; - [ ] does not break existing scenes.; - [ ] does not break API compatibility.; - [ ] has been reviewed and agreed to be transitional.; - [ ] is more than 1 week old.; **Reviewers will merge only if all this checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/161
https://github.com/sofa-framework/sofa/pull/161:1127,Testability,test,test,1127,"This PR address the problem of the uses of atoi and atof in the parse methods. . In short, ; using atof/i is flawned because:; - it does not check that the attribute is successfully parsed by atoi/atof resulting in undefined behavior when user input is invalid. ; - the components that use them also forgot to set the Local to ""C"" resulting in wrong parsing of 0.1 vs 0,1 (reported in issue https://github.com/sofa-framework/sofa/issues/151); - a failure during the parsing of the attribute does not generate a message to the user when something is wrong. . This PR add getAttributeAsFloat and getAttributeAsInt to be used in place of atof(attr->getAttribute()).; The getAttributeAs* method set the correct Local as well as generates error messages in case they are unable to parse the attribute. The PR contains new tests for the two added functions as well as a more general test in MechanicalObject.; This PR shouldn't break any API or scene or whatever. <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings nor unit test failures.; - [ ] does not break existing scenes.; - [ ] does not break API compatibility.; - [ ] has been reviewed and agreed to be transitional.; - [ ] is more than 1 week old.; **Reviewers will merge only if all this checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/161
https://github.com/sofa-framework/sofa/issues/162:664,Integrability,depend,dependencies,664,"Hi,. I'm working on the different TopologyGrid (cylinder/regular/... PR to come) and during my cleaning I found that some method of the RegularGrid are called directly in the mechanicalObject here:. ```; void MechanicalObject<DataTypes>::reinit(); {; Vector3 p0;; sofa::component::topology::RegularGridTopology *grid;; this->getContext()->get(grid, sofa::core::objectmodel::BaseContext::Local);; if (grid) p0 = grid->getP0();. if (scale.getValue() != Vector3(1.0,1.0,1.0)); {; this->applyScale(scale.getValue()[0],scale.getValue()[1],scale.getValue()[2]);; if (grid) p0 = p0.linearProduct(scale.getValue());; }; ... if (grid); grid->setP0(p0);; }; ```. I find the dependencies a ""bit dirty"". Any idea why this is here? can I move this code in the reinit of the RegularGrid instead. Erik",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/162
https://github.com/sofa-framework/sofa/issues/163:11,Testability,log,logical,11,"Hi,. it is logical that when using a RegularGrid, the discretization should be > 1 in each direction. But the constructor take ; `RegularGridTopology(int nx, int ny, int nz);`. And there is no check on those values. They could even be null or negative.; Then in some methods you have this code:; `i*2*r/(nx-1)`; which could lead to a division by 0 and crash Sofa. As there is not catch and try, how could I block the creation of a RegularGrid(1, 1, 1) ?",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/163
https://github.com/sofa-framework/sofa/pull/164:665,Availability,failure,failures,665,"PR on topologyGrid:. - Add new component: SphereGridTopology to create sphere topo. using grid (similar to CylinderGridTopology) with an example: SphereGridTopology.scn; - Clean the API GridTopology and its children: RegularGridTopology/SphereGridTopology/CylinderGridTopology, move several methods into mother class GridTopology.; - Add doxygen doc for the 4 classes; - Add tests for Cylinder and SphereGridTopology; - Add method addSphere/addRigidSphere in sceneCreator + tests + example. <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings nor unit test failures.; - [x] does not break existing scenes.; - [x] does not break API compatibility.; - [x] has been reviewed and agreed to be transitional.; - [x] is more than 1 week old.; **Reviewers will merge only if all this checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/164
https://github.com/sofa-framework/sofa/pull/164:534,Integrability,message,message,534,"PR on topologyGrid:. - Add new component: SphereGridTopology to create sphere topo. using grid (similar to CylinderGridTopology) with an example: SphereGridTopology.scn; - Clean the API GridTopology and its children: RegularGridTopology/SphereGridTopology/CylinderGridTopology, move several methods into mother class GridTopology.; - Add doxygen doc for the 4 classes; - Add tests for Cylinder and SphereGridTopology; - Add method addSphere/addRigidSphere in sceneCreator + tests + example. <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings nor unit test failures.; - [x] does not break existing scenes.; - [x] does not break API compatibility.; - [x] has been reviewed and agreed to be transitional.; - [x] is more than 1 week old.; **Reviewers will merge only if all this checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/164
https://github.com/sofa-framework/sofa/pull/164:375,Testability,test,tests,375,"PR on topologyGrid:. - Add new component: SphereGridTopology to create sphere topo. using grid (similar to CylinderGridTopology) with an example: SphereGridTopology.scn; - Clean the API GridTopology and its children: RegularGridTopology/SphereGridTopology/CylinderGridTopology, move several methods into mother class GridTopology.; - Add doxygen doc for the 4 classes; - Add tests for Cylinder and SphereGridTopology; - Add method addSphere/addRigidSphere in sceneCreator + tests + example. <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings nor unit test failures.; - [x] does not break existing scenes.; - [x] does not break API compatibility.; - [x] has been reviewed and agreed to be transitional.; - [x] is more than 1 week old.; **Reviewers will merge only if all this checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/164
https://github.com/sofa-framework/sofa/pull/164:474,Testability,test,tests,474,"PR on topologyGrid:. - Add new component: SphereGridTopology to create sphere topo. using grid (similar to CylinderGridTopology) with an example: SphereGridTopology.scn; - Clean the API GridTopology and its children: RegularGridTopology/SphereGridTopology/CylinderGridTopology, move several methods into mother class GridTopology.; - Add doxygen doc for the 4 classes; - Add tests for Cylinder and SphereGridTopology; - Add method addSphere/addRigidSphere in sceneCreator + tests + example. <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings nor unit test failures.; - [x] does not break existing scenes.; - [x] does not break API compatibility.; - [x] has been reviewed and agreed to be transitional.; - [x] is more than 1 week old.; **Reviewers will merge only if all this checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/164
https://github.com/sofa-framework/sofa/pull/164:660,Testability,test,test,660,"PR on topologyGrid:. - Add new component: SphereGridTopology to create sphere topo. using grid (similar to CylinderGridTopology) with an example: SphereGridTopology.scn; - Clean the API GridTopology and its children: RegularGridTopology/SphereGridTopology/CylinderGridTopology, move several methods into mother class GridTopology.; - Add doxygen doc for the 4 classes; - Add tests for Cylinder and SphereGridTopology; - Add method addSphere/addRigidSphere in sceneCreator + tests + example. <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings nor unit test failures.; - [x] does not break existing scenes.; - [x] does not break API compatibility.; - [x] has been reviewed and agreed to be transitional.; - [x] is more than 1 week old.; **Reviewers will merge only if all this checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/164
https://github.com/sofa-framework/sofa/pull/165:306,Availability,failure,failures,306,i.e. to easily define bracket x[] and len(x) operators to a python type defined in c++. (a concrete usage is coming in another PR). <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings nor unit test failures.; - [x] does not break existing scenes.; - [x] does not break API compatibility.; - [x] has been reviewed and agreed to be transitional.; - [x] is more than 1 week old.; **Reviewers will merge only if all this checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/165
https://github.com/sofa-framework/sofa/pull/165:175,Integrability,message,message,175,i.e. to easily define bracket x[] and len(x) operators to a python type defined in c++. (a concrete usage is coming in another PR). <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings nor unit test failures.; - [x] does not break existing scenes.; - [x] does not break API compatibility.; - [x] has been reviewed and agreed to be transitional.; - [x] is more than 1 week old.; **Reviewers will merge only if all this checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/165
https://github.com/sofa-framework/sofa/pull/165:301,Testability,test,test,301,i.e. to easily define bracket x[] and len(x) operators to a python type defined in c++. (a concrete usage is coming in another PR). <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings nor unit test failures.; - [x] does not break existing scenes.; - [x] does not break API compatibility.; - [x] has been reviewed and agreed to be transitional.; - [x] is more than 1 week old.; **Reviewers will merge only if all this checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/165
https://github.com/sofa-framework/sofa/pull/166:443,Availability,failure,failures,443,- removing awful stuff regarding linearspring in Binding_Data; - adding specific Binding_VectorLinearSpringData; - possibility to directly copy a Data in another Data; - possibility to have specific setter for all Data in the factory. WARNING this PR depends on #165 . <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings nor unit test failures.; - [x] does not break existing scenes.; - [x] does not break API compatibility.; - [x] has been reviewed and agreed to be transitional.; - [x] is more than 1 week old.; **Reviewers will merge only if all this checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/166
https://github.com/sofa-framework/sofa/pull/166:251,Integrability,depend,depends,251,- removing awful stuff regarding linearspring in Binding_Data; - adding specific Binding_VectorLinearSpringData; - possibility to directly copy a Data in another Data; - possibility to have specific setter for all Data in the factory. WARNING this PR depends on #165 . <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings nor unit test failures.; - [x] does not break existing scenes.; - [x] does not break API compatibility.; - [x] has been reviewed and agreed to be transitional.; - [x] is more than 1 week old.; **Reviewers will merge only if all this checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/166
https://github.com/sofa-framework/sofa/pull/166:312,Integrability,message,message,312,- removing awful stuff regarding linearspring in Binding_Data; - adding specific Binding_VectorLinearSpringData; - possibility to directly copy a Data in another Data; - possibility to have specific setter for all Data in the factory. WARNING this PR depends on #165 . <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings nor unit test failures.; - [x] does not break existing scenes.; - [x] does not break API compatibility.; - [x] has been reviewed and agreed to be transitional.; - [x] is more than 1 week old.; **Reviewers will merge only if all this checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/166
https://github.com/sofa-framework/sofa/pull/166:438,Testability,test,test,438,- removing awful stuff regarding linearspring in Binding_Data; - adding specific Binding_VectorLinearSpringData; - possibility to directly copy a Data in another Data; - possibility to have specific setter for all Data in the factory. WARNING this PR depends on #165 . <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings nor unit test failures.; - [x] does not break existing scenes.; - [x] does not break API compatibility.; - [x] has been reviewed and agreed to be transitional.; - [x] is more than 1 week old.; **Reviewers will merge only if all this checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/166
https://github.com/sofa-framework/sofa/pull/167:374,Availability,failure,failures,374,Quick PR to fix the SofaPhysicsApi project; - Remove deprecated code regarding OpenGL tetrahedron. ; - FIX some bad path in cpack installation; - Change some class declaration to allow inheritance. . <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings nor unit test failures.; - [x] does not break existing scenes.; - [x] does not break API compatibility.; - [x] has been reviewed; - [x] is more than 1 week old.; **Reviewers will merge only if all this checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/167
https://github.com/sofa-framework/sofa/pull/167:130,Deployability,install,installation,130,Quick PR to fix the SofaPhysicsApi project; - Remove deprecated code regarding OpenGL tetrahedron. ; - FIX some bad path in cpack installation; - Change some class declaration to allow inheritance. . <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings nor unit test failures.; - [x] does not break existing scenes.; - [x] does not break API compatibility.; - [x] has been reviewed; - [x] is more than 1 week old.; **Reviewers will merge only if all this checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/167
https://github.com/sofa-framework/sofa/pull/167:243,Integrability,message,message,243,Quick PR to fix the SofaPhysicsApi project; - Remove deprecated code regarding OpenGL tetrahedron. ; - FIX some bad path in cpack installation; - Change some class declaration to allow inheritance. . <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings nor unit test failures.; - [x] does not break existing scenes.; - [x] does not break API compatibility.; - [x] has been reviewed; - [x] is more than 1 week old.; **Reviewers will merge only if all this checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/167
https://github.com/sofa-framework/sofa/pull/167:185,Modifiability,inherit,inheritance,185,Quick PR to fix the SofaPhysicsApi project; - Remove deprecated code regarding OpenGL tetrahedron. ; - FIX some bad path in cpack installation; - Change some class declaration to allow inheritance. . <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings nor unit test failures.; - [x] does not break existing scenes.; - [x] does not break API compatibility.; - [x] has been reviewed; - [x] is more than 1 week old.; **Reviewers will merge only if all this checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/167
https://github.com/sofa-framework/sofa/pull/167:369,Testability,test,test,369,Quick PR to fix the SofaPhysicsApi project; - Remove deprecated code regarding OpenGL tetrahedron. ; - FIX some bad path in cpack installation; - Change some class declaration to allow inheritance. . <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings nor unit test failures.; - [x] does not break existing scenes.; - [x] does not break API compatibility.; - [x] has been reviewed; - [x] is more than 1 week old.; **Reviewers will merge only if all this checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/167
https://github.com/sofa-framework/sofa/pull/168:1710,Availability,failure,failures,1710,"I am unsure this PR is correct, so it really needs a green light from others before merge. When trying to call `std::exit` in some plugin, I had a segfault in cleanup code similar to this one:. ```c++; // Detect missing cleanup() call.; static const struct CleanupCheck; {; CleanupCheck() {; }; ; ~CleanupCheck() {; if (core::isInitialized() && !core::isCleanedUp()); helper::printLibraryNotCleanedUpWarning(""SofaCore"", ""sofa::core::cleanup()""); // segfault; }; } check;; ```. In fact, most `init.cpp` files in SOFA have code similar to this one. In my case, `MessageDispatcher::LoggerStream::~LoggerStream` caused a call to `MessageDispatcher::process` which would then cause a segfault. What I don't understand is *why* the above code snipped does not simply `cleanup()` the library in the destructor, since the latter is being called while the library unloads and this is the last chance to actually clean things up, instead of (trying to) emit a warning while the whole program is being terminated. So unless there is a compelling reason to leave it this way (and I would really like to know it), I suggest the above to be changed to:. ```c++; static const struct CleanupCheck; {; CleanupCheck() {; init();; }; ; ~CleanupCheck() {; cleanup();; // leaving the warning if for some reason cleanup failed; if (core::isInitialized() && !core::isCleanedUp()); helper::printLibraryNotCleanedUpWarning(""SofaCore"", ""sofa::core::cleanup()"");; }; } check;; ```. so that the library automatically `init()` and `cleanup()` upon `dlopen`/`exit`. <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings nor unit test failures.; - [ ] does not break existing scenes.; - [ ] does not break API compatibility.; - [ ] has been reviewed and agreed to be transitional.; - [ ] is more than 1 week old.; **Reviewers will merge only if all this checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/168
https://github.com/sofa-framework/sofa/pull/168:53,Energy Efficiency,green,green,53,"I am unsure this PR is correct, so it really needs a green light from others before merge. When trying to call `std::exit` in some plugin, I had a segfault in cleanup code similar to this one:. ```c++; // Detect missing cleanup() call.; static const struct CleanupCheck; {; CleanupCheck() {; }; ; ~CleanupCheck() {; if (core::isInitialized() && !core::isCleanedUp()); helper::printLibraryNotCleanedUpWarning(""SofaCore"", ""sofa::core::cleanup()""); // segfault; }; } check;; ```. In fact, most `init.cpp` files in SOFA have code similar to this one. In my case, `MessageDispatcher::LoggerStream::~LoggerStream` caused a call to `MessageDispatcher::process` which would then cause a segfault. What I don't understand is *why* the above code snipped does not simply `cleanup()` the library in the destructor, since the latter is being called while the library unloads and this is the last chance to actually clean things up, instead of (trying to) emit a warning while the whole program is being terminated. So unless there is a compelling reason to leave it this way (and I would really like to know it), I suggest the above to be changed to:. ```c++; static const struct CleanupCheck; {; CleanupCheck() {; init();; }; ; ~CleanupCheck() {; cleanup();; // leaving the warning if for some reason cleanup failed; if (core::isInitialized() && !core::isCleanedUp()); helper::printLibraryNotCleanedUpWarning(""SofaCore"", ""sofa::core::cleanup()"");; }; } check;; ```. so that the library automatically `init()` and `cleanup()` upon `dlopen`/`exit`. <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings nor unit test failures.; - [ ] does not break existing scenes.; - [ ] does not break API compatibility.; - [ ] has been reviewed and agreed to be transitional.; - [ ] is more than 1 week old.; **Reviewers will merge only if all this checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/168
https://github.com/sofa-framework/sofa/pull/168:560,Integrability,Message,MessageDispatcher,560,"I am unsure this PR is correct, so it really needs a green light from others before merge. When trying to call `std::exit` in some plugin, I had a segfault in cleanup code similar to this one:. ```c++; // Detect missing cleanup() call.; static const struct CleanupCheck; {; CleanupCheck() {; }; ; ~CleanupCheck() {; if (core::isInitialized() && !core::isCleanedUp()); helper::printLibraryNotCleanedUpWarning(""SofaCore"", ""sofa::core::cleanup()""); // segfault; }; } check;; ```. In fact, most `init.cpp` files in SOFA have code similar to this one. In my case, `MessageDispatcher::LoggerStream::~LoggerStream` caused a call to `MessageDispatcher::process` which would then cause a segfault. What I don't understand is *why* the above code snipped does not simply `cleanup()` the library in the destructor, since the latter is being called while the library unloads and this is the last chance to actually clean things up, instead of (trying to) emit a warning while the whole program is being terminated. So unless there is a compelling reason to leave it this way (and I would really like to know it), I suggest the above to be changed to:. ```c++; static const struct CleanupCheck; {; CleanupCheck() {; init();; }; ; ~CleanupCheck() {; cleanup();; // leaving the warning if for some reason cleanup failed; if (core::isInitialized() && !core::isCleanedUp()); helper::printLibraryNotCleanedUpWarning(""SofaCore"", ""sofa::core::cleanup()"");; }; } check;; ```. so that the library automatically `init()` and `cleanup()` upon `dlopen`/`exit`. <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings nor unit test failures.; - [ ] does not break existing scenes.; - [ ] does not break API compatibility.; - [ ] has been reviewed and agreed to be transitional.; - [ ] is more than 1 week old.; **Reviewers will merge only if all this checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/168
https://github.com/sofa-framework/sofa/pull/168:626,Integrability,Message,MessageDispatcher,626,"I am unsure this PR is correct, so it really needs a green light from others before merge. When trying to call `std::exit` in some plugin, I had a segfault in cleanup code similar to this one:. ```c++; // Detect missing cleanup() call.; static const struct CleanupCheck; {; CleanupCheck() {; }; ; ~CleanupCheck() {; if (core::isInitialized() && !core::isCleanedUp()); helper::printLibraryNotCleanedUpWarning(""SofaCore"", ""sofa::core::cleanup()""); // segfault; }; } check;; ```. In fact, most `init.cpp` files in SOFA have code similar to this one. In my case, `MessageDispatcher::LoggerStream::~LoggerStream` caused a call to `MessageDispatcher::process` which would then cause a segfault. What I don't understand is *why* the above code snipped does not simply `cleanup()` the library in the destructor, since the latter is being called while the library unloads and this is the last chance to actually clean things up, instead of (trying to) emit a warning while the whole program is being terminated. So unless there is a compelling reason to leave it this way (and I would really like to know it), I suggest the above to be changed to:. ```c++; static const struct CleanupCheck; {; CleanupCheck() {; init();; }; ; ~CleanupCheck() {; cleanup();; // leaving the warning if for some reason cleanup failed; if (core::isInitialized() && !core::isCleanedUp()); helper::printLibraryNotCleanedUpWarning(""SofaCore"", ""sofa::core::cleanup()"");; }; } check;; ```. so that the library automatically `init()` and `cleanup()` upon `dlopen`/`exit`. <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings nor unit test failures.; - [ ] does not break existing scenes.; - [ ] does not break API compatibility.; - [ ] has been reviewed and agreed to be transitional.; - [ ] is more than 1 week old.; **Reviewers will merge only if all this checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/168
https://github.com/sofa-framework/sofa/pull/168:1579,Integrability,message,message,1579,"I am unsure this PR is correct, so it really needs a green light from others before merge. When trying to call `std::exit` in some plugin, I had a segfault in cleanup code similar to this one:. ```c++; // Detect missing cleanup() call.; static const struct CleanupCheck; {; CleanupCheck() {; }; ; ~CleanupCheck() {; if (core::isInitialized() && !core::isCleanedUp()); helper::printLibraryNotCleanedUpWarning(""SofaCore"", ""sofa::core::cleanup()""); // segfault; }; } check;; ```. In fact, most `init.cpp` files in SOFA have code similar to this one. In my case, `MessageDispatcher::LoggerStream::~LoggerStream` caused a call to `MessageDispatcher::process` which would then cause a segfault. What I don't understand is *why* the above code snipped does not simply `cleanup()` the library in the destructor, since the latter is being called while the library unloads and this is the last chance to actually clean things up, instead of (trying to) emit a warning while the whole program is being terminated. So unless there is a compelling reason to leave it this way (and I would really like to know it), I suggest the above to be changed to:. ```c++; static const struct CleanupCheck; {; CleanupCheck() {; init();; }; ; ~CleanupCheck() {; cleanup();; // leaving the warning if for some reason cleanup failed; if (core::isInitialized() && !core::isCleanedUp()); helper::printLibraryNotCleanedUpWarning(""SofaCore"", ""sofa::core::cleanup()"");; }; } check;; ```. so that the library automatically `init()` and `cleanup()` upon `dlopen`/`exit`. <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings nor unit test failures.; - [ ] does not break existing scenes.; - [ ] does not break API compatibility.; - [ ] has been reviewed and agreed to be transitional.; - [ ] is more than 1 week old.; **Reviewers will merge only if all this checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/168
https://github.com/sofa-framework/sofa/pull/168:131,Modifiability,plugin,plugin,131,"I am unsure this PR is correct, so it really needs a green light from others before merge. When trying to call `std::exit` in some plugin, I had a segfault in cleanup code similar to this one:. ```c++; // Detect missing cleanup() call.; static const struct CleanupCheck; {; CleanupCheck() {; }; ; ~CleanupCheck() {; if (core::isInitialized() && !core::isCleanedUp()); helper::printLibraryNotCleanedUpWarning(""SofaCore"", ""sofa::core::cleanup()""); // segfault; }; } check;; ```. In fact, most `init.cpp` files in SOFA have code similar to this one. In my case, `MessageDispatcher::LoggerStream::~LoggerStream` caused a call to `MessageDispatcher::process` which would then cause a segfault. What I don't understand is *why* the above code snipped does not simply `cleanup()` the library in the destructor, since the latter is being called while the library unloads and this is the last chance to actually clean things up, instead of (trying to) emit a warning while the whole program is being terminated. So unless there is a compelling reason to leave it this way (and I would really like to know it), I suggest the above to be changed to:. ```c++; static const struct CleanupCheck; {; CleanupCheck() {; init();; }; ; ~CleanupCheck() {; cleanup();; // leaving the warning if for some reason cleanup failed; if (core::isInitialized() && !core::isCleanedUp()); helper::printLibraryNotCleanedUpWarning(""SofaCore"", ""sofa::core::cleanup()"");; }; } check;; ```. so that the library automatically `init()` and `cleanup()` upon `dlopen`/`exit`. <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings nor unit test failures.; - [ ] does not break existing scenes.; - [ ] does not break API compatibility.; - [ ] has been reviewed and agreed to be transitional.; - [ ] is more than 1 week old.; **Reviewers will merge only if all this checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/168
https://github.com/sofa-framework/sofa/pull/168:205,Safety,Detect,Detect,205,"I am unsure this PR is correct, so it really needs a green light from others before merge. When trying to call `std::exit` in some plugin, I had a segfault in cleanup code similar to this one:. ```c++; // Detect missing cleanup() call.; static const struct CleanupCheck; {; CleanupCheck() {; }; ; ~CleanupCheck() {; if (core::isInitialized() && !core::isCleanedUp()); helper::printLibraryNotCleanedUpWarning(""SofaCore"", ""sofa::core::cleanup()""); // segfault; }; } check;; ```. In fact, most `init.cpp` files in SOFA have code similar to this one. In my case, `MessageDispatcher::LoggerStream::~LoggerStream` caused a call to `MessageDispatcher::process` which would then cause a segfault. What I don't understand is *why* the above code snipped does not simply `cleanup()` the library in the destructor, since the latter is being called while the library unloads and this is the last chance to actually clean things up, instead of (trying to) emit a warning while the whole program is being terminated. So unless there is a compelling reason to leave it this way (and I would really like to know it), I suggest the above to be changed to:. ```c++; static const struct CleanupCheck; {; CleanupCheck() {; init();; }; ; ~CleanupCheck() {; cleanup();; // leaving the warning if for some reason cleanup failed; if (core::isInitialized() && !core::isCleanedUp()); helper::printLibraryNotCleanedUpWarning(""SofaCore"", ""sofa::core::cleanup()"");; }; } check;; ```. so that the library automatically `init()` and `cleanup()` upon `dlopen`/`exit`. <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings nor unit test failures.; - [ ] does not break existing scenes.; - [ ] does not break API compatibility.; - [ ] has been reviewed and agreed to be transitional.; - [ ] is more than 1 week old.; **Reviewers will merge only if all this checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/168
https://github.com/sofa-framework/sofa/pull/168:579,Testability,Log,LoggerStream,579,"I am unsure this PR is correct, so it really needs a green light from others before merge. When trying to call `std::exit` in some plugin, I had a segfault in cleanup code similar to this one:. ```c++; // Detect missing cleanup() call.; static const struct CleanupCheck; {; CleanupCheck() {; }; ; ~CleanupCheck() {; if (core::isInitialized() && !core::isCleanedUp()); helper::printLibraryNotCleanedUpWarning(""SofaCore"", ""sofa::core::cleanup()""); // segfault; }; } check;; ```. In fact, most `init.cpp` files in SOFA have code similar to this one. In my case, `MessageDispatcher::LoggerStream::~LoggerStream` caused a call to `MessageDispatcher::process` which would then cause a segfault. What I don't understand is *why* the above code snipped does not simply `cleanup()` the library in the destructor, since the latter is being called while the library unloads and this is the last chance to actually clean things up, instead of (trying to) emit a warning while the whole program is being terminated. So unless there is a compelling reason to leave it this way (and I would really like to know it), I suggest the above to be changed to:. ```c++; static const struct CleanupCheck; {; CleanupCheck() {; init();; }; ; ~CleanupCheck() {; cleanup();; // leaving the warning if for some reason cleanup failed; if (core::isInitialized() && !core::isCleanedUp()); helper::printLibraryNotCleanedUpWarning(""SofaCore"", ""sofa::core::cleanup()"");; }; } check;; ```. so that the library automatically `init()` and `cleanup()` upon `dlopen`/`exit`. <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings nor unit test failures.; - [ ] does not break existing scenes.; - [ ] does not break API compatibility.; - [ ] has been reviewed and agreed to be transitional.; - [ ] is more than 1 week old.; **Reviewers will merge only if all this checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/168
https://github.com/sofa-framework/sofa/pull/168:594,Testability,Log,LoggerStream,594,"I am unsure this PR is correct, so it really needs a green light from others before merge. When trying to call `std::exit` in some plugin, I had a segfault in cleanup code similar to this one:. ```c++; // Detect missing cleanup() call.; static const struct CleanupCheck; {; CleanupCheck() {; }; ; ~CleanupCheck() {; if (core::isInitialized() && !core::isCleanedUp()); helper::printLibraryNotCleanedUpWarning(""SofaCore"", ""sofa::core::cleanup()""); // segfault; }; } check;; ```. In fact, most `init.cpp` files in SOFA have code similar to this one. In my case, `MessageDispatcher::LoggerStream::~LoggerStream` caused a call to `MessageDispatcher::process` which would then cause a segfault. What I don't understand is *why* the above code snipped does not simply `cleanup()` the library in the destructor, since the latter is being called while the library unloads and this is the last chance to actually clean things up, instead of (trying to) emit a warning while the whole program is being terminated. So unless there is a compelling reason to leave it this way (and I would really like to know it), I suggest the above to be changed to:. ```c++; static const struct CleanupCheck; {; CleanupCheck() {; init();; }; ; ~CleanupCheck() {; cleanup();; // leaving the warning if for some reason cleanup failed; if (core::isInitialized() && !core::isCleanedUp()); helper::printLibraryNotCleanedUpWarning(""SofaCore"", ""sofa::core::cleanup()"");; }; } check;; ```. so that the library automatically `init()` and `cleanup()` upon `dlopen`/`exit`. <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings nor unit test failures.; - [ ] does not break existing scenes.; - [ ] does not break API compatibility.; - [ ] has been reviewed and agreed to be transitional.; - [ ] is more than 1 week old.; **Reviewers will merge only if all this checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/168
https://github.com/sofa-framework/sofa/pull/168:1705,Testability,test,test,1705,"I am unsure this PR is correct, so it really needs a green light from others before merge. When trying to call `std::exit` in some plugin, I had a segfault in cleanup code similar to this one:. ```c++; // Detect missing cleanup() call.; static const struct CleanupCheck; {; CleanupCheck() {; }; ; ~CleanupCheck() {; if (core::isInitialized() && !core::isCleanedUp()); helper::printLibraryNotCleanedUpWarning(""SofaCore"", ""sofa::core::cleanup()""); // segfault; }; } check;; ```. In fact, most `init.cpp` files in SOFA have code similar to this one. In my case, `MessageDispatcher::LoggerStream::~LoggerStream` caused a call to `MessageDispatcher::process` which would then cause a segfault. What I don't understand is *why* the above code snipped does not simply `cleanup()` the library in the destructor, since the latter is being called while the library unloads and this is the last chance to actually clean things up, instead of (trying to) emit a warning while the whole program is being terminated. So unless there is a compelling reason to leave it this way (and I would really like to know it), I suggest the above to be changed to:. ```c++; static const struct CleanupCheck; {; CleanupCheck() {; init();; }; ; ~CleanupCheck() {; cleanup();; // leaving the warning if for some reason cleanup failed; if (core::isInitialized() && !core::isCleanedUp()); helper::printLibraryNotCleanedUpWarning(""SofaCore"", ""sofa::core::cleanup()"");; }; } check;; ```. so that the library automatically `init()` and `cleanup()` upon `dlopen`/`exit`. <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings nor unit test failures.; - [ ] does not break existing scenes.; - [ ] does not break API compatibility.; - [ ] has been reviewed and agreed to be transitional.; - [ ] is more than 1 week old.; **Reviewers will merge only if all this checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/168
https://github.com/sofa-framework/sofa/pull/168:754,Usability,simpl,simply,754,"I am unsure this PR is correct, so it really needs a green light from others before merge. When trying to call `std::exit` in some plugin, I had a segfault in cleanup code similar to this one:. ```c++; // Detect missing cleanup() call.; static const struct CleanupCheck; {; CleanupCheck() {; }; ; ~CleanupCheck() {; if (core::isInitialized() && !core::isCleanedUp()); helper::printLibraryNotCleanedUpWarning(""SofaCore"", ""sofa::core::cleanup()""); // segfault; }; } check;; ```. In fact, most `init.cpp` files in SOFA have code similar to this one. In my case, `MessageDispatcher::LoggerStream::~LoggerStream` caused a call to `MessageDispatcher::process` which would then cause a segfault. What I don't understand is *why* the above code snipped does not simply `cleanup()` the library in the destructor, since the latter is being called while the library unloads and this is the last chance to actually clean things up, instead of (trying to) emit a warning while the whole program is being terminated. So unless there is a compelling reason to leave it this way (and I would really like to know it), I suggest the above to be changed to:. ```c++; static const struct CleanupCheck; {; CleanupCheck() {; init();; }; ; ~CleanupCheck() {; cleanup();; // leaving the warning if for some reason cleanup failed; if (core::isInitialized() && !core::isCleanedUp()); helper::printLibraryNotCleanedUpWarning(""SofaCore"", ""sofa::core::cleanup()"");; }; } check;; ```. so that the library automatically `init()` and `cleanup()` upon `dlopen`/`exit`. <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings nor unit test failures.; - [ ] does not break existing scenes.; - [ ] does not break API compatibility.; - [ ] has been reviewed and agreed to be transitional.; - [ ] is more than 1 week old.; **Reviewers will merge only if all this checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/168
https://github.com/sofa-framework/sofa/pull/169:277,Availability,failure,failures,277,A lot of cosmetic changes and removes some compilation warning related to unsigned int/int conversion. <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings nor unit test failures.; - [x] does not break existing scenes.; - [x] does not break API compatibility.; - [x] has been reviewed and agreed to be transitional.; - [x] is more than 1 week old.; **Reviewers will merge only if all this checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/169
https://github.com/sofa-framework/sofa/pull/169:146,Integrability,message,message,146,A lot of cosmetic changes and removes some compilation warning related to unsigned int/int conversion. <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings nor unit test failures.; - [x] does not break existing scenes.; - [x] does not break API compatibility.; - [x] has been reviewed and agreed to be transitional.; - [x] is more than 1 week old.; **Reviewers will merge only if all this checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/169
https://github.com/sofa-framework/sofa/pull/169:272,Testability,test,test,272,A lot of cosmetic changes and removes some compilation warning related to unsigned int/int conversion. <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings nor unit test failures.; - [x] does not break existing scenes.; - [x] does not break API compatibility.; - [x] has been reviewed and agreed to be transitional.; - [x] is more than 1 week old.; **Reviewers will merge only if all this checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/169
https://github.com/sofa-framework/sofa/pull/170:938,Availability,failure,failures,938,"Speed up by a (huge) factor the rendering of several spheres.; This is done in 2 ways:; - optimizing with VBO for ""normal"" spheres (like before, with rings and segments parameters) ; - impostors (https://paroj.github.io/gltut/Illumination/Tutorial%2013.html). On the same computer, for 150K spheres :; - 0.8fps with previous rendering; - 22fps with VBO; - 46 fps with impostors . This task is also the beginning of optimizing draw tools, by removing deprecated glu calls and non optimized OpenGL code ; and by using VBO/IBO and shaders. (class BasicShapesGL). This PR should resolve more or less the issue #142 . ; It depends if this issue talks about spheres only or more generally speeding up rendering itself (in that case, it will need much more commits ;) ). <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings nor unit test failures.; - [x] does not break existing scenes.; - [x] does not break API compatibility.; - [x] has been reviewed and agreed to be transitional.; - [x] is more than 1 week old. **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/170
https://github.com/sofa-framework/sofa/pull/170:618,Integrability,depend,depends,618,"Speed up by a (huge) factor the rendering of several spheres.; This is done in 2 ways:; - optimizing with VBO for ""normal"" spheres (like before, with rings and segments parameters) ; - impostors (https://paroj.github.io/gltut/Illumination/Tutorial%2013.html). On the same computer, for 150K spheres :; - 0.8fps with previous rendering; - 22fps with VBO; - 46 fps with impostors . This task is also the beginning of optimizing draw tools, by removing deprecated glu calls and non optimized OpenGL code ; and by using VBO/IBO and shaders. (class BasicShapesGL). This PR should resolve more or less the issue #142 . ; It depends if this issue talks about spheres only or more generally speeding up rendering itself (in that case, it will need much more commits ;) ). <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings nor unit test failures.; - [x] does not break existing scenes.; - [x] does not break API compatibility.; - [x] has been reviewed and agreed to be transitional.; - [x] is more than 1 week old. **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/170
https://github.com/sofa-framework/sofa/pull/170:807,Integrability,message,message,807,"Speed up by a (huge) factor the rendering of several spheres.; This is done in 2 ways:; - optimizing with VBO for ""normal"" spheres (like before, with rings and segments parameters) ; - impostors (https://paroj.github.io/gltut/Illumination/Tutorial%2013.html). On the same computer, for 150K spheres :; - 0.8fps with previous rendering; - 22fps with VBO; - 46 fps with impostors . This task is also the beginning of optimizing draw tools, by removing deprecated glu calls and non optimized OpenGL code ; and by using VBO/IBO and shaders. (class BasicShapesGL). This PR should resolve more or less the issue #142 . ; It depends if this issue talks about spheres only or more generally speeding up rendering itself (in that case, it will need much more commits ;) ). <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings nor unit test failures.; - [x] does not break existing scenes.; - [x] does not break API compatibility.; - [x] has been reviewed and agreed to be transitional.; - [x] is more than 1 week old. **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/170
https://github.com/sofa-framework/sofa/pull/170:90,Performance,optimiz,optimizing,90,"Speed up by a (huge) factor the rendering of several spheres.; This is done in 2 ways:; - optimizing with VBO for ""normal"" spheres (like before, with rings and segments parameters) ; - impostors (https://paroj.github.io/gltut/Illumination/Tutorial%2013.html). On the same computer, for 150K spheres :; - 0.8fps with previous rendering; - 22fps with VBO; - 46 fps with impostors . This task is also the beginning of optimizing draw tools, by removing deprecated glu calls and non optimized OpenGL code ; and by using VBO/IBO and shaders. (class BasicShapesGL). This PR should resolve more or less the issue #142 . ; It depends if this issue talks about spheres only or more generally speeding up rendering itself (in that case, it will need much more commits ;) ). <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings nor unit test failures.; - [x] does not break existing scenes.; - [x] does not break API compatibility.; - [x] has been reviewed and agreed to be transitional.; - [x] is more than 1 week old. **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/170
https://github.com/sofa-framework/sofa/pull/170:415,Performance,optimiz,optimizing,415,"Speed up by a (huge) factor the rendering of several spheres.; This is done in 2 ways:; - optimizing with VBO for ""normal"" spheres (like before, with rings and segments parameters) ; - impostors (https://paroj.github.io/gltut/Illumination/Tutorial%2013.html). On the same computer, for 150K spheres :; - 0.8fps with previous rendering; - 22fps with VBO; - 46 fps with impostors . This task is also the beginning of optimizing draw tools, by removing deprecated glu calls and non optimized OpenGL code ; and by using VBO/IBO and shaders. (class BasicShapesGL). This PR should resolve more or less the issue #142 . ; It depends if this issue talks about spheres only or more generally speeding up rendering itself (in that case, it will need much more commits ;) ). <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings nor unit test failures.; - [x] does not break existing scenes.; - [x] does not break API compatibility.; - [x] has been reviewed and agreed to be transitional.; - [x] is more than 1 week old. **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/170
https://github.com/sofa-framework/sofa/pull/170:479,Performance,optimiz,optimized,479,"Speed up by a (huge) factor the rendering of several spheres.; This is done in 2 ways:; - optimizing with VBO for ""normal"" spheres (like before, with rings and segments parameters) ; - impostors (https://paroj.github.io/gltut/Illumination/Tutorial%2013.html). On the same computer, for 150K spheres :; - 0.8fps with previous rendering; - 22fps with VBO; - 46 fps with impostors . This task is also the beginning of optimizing draw tools, by removing deprecated glu calls and non optimized OpenGL code ; and by using VBO/IBO and shaders. (class BasicShapesGL). This PR should resolve more or less the issue #142 . ; It depends if this issue talks about spheres only or more generally speeding up rendering itself (in that case, it will need much more commits ;) ). <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings nor unit test failures.; - [x] does not break existing scenes.; - [x] does not break API compatibility.; - [x] has been reviewed and agreed to be transitional.; - [x] is more than 1 week old. **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/170
https://github.com/sofa-framework/sofa/pull/170:933,Testability,test,test,933,"Speed up by a (huge) factor the rendering of several spheres.; This is done in 2 ways:; - optimizing with VBO for ""normal"" spheres (like before, with rings and segments parameters) ; - impostors (https://paroj.github.io/gltut/Illumination/Tutorial%2013.html). On the same computer, for 150K spheres :; - 0.8fps with previous rendering; - 22fps with VBO; - 46 fps with impostors . This task is also the beginning of optimizing draw tools, by removing deprecated glu calls and non optimized OpenGL code ; and by using VBO/IBO and shaders. (class BasicShapesGL). This PR should resolve more or less the issue #142 . ; It depends if this issue talks about spheres only or more generally speeding up rendering itself (in that case, it will need much more commits ;) ). <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings nor unit test failures.; - [x] does not break existing scenes.; - [x] does not break API compatibility.; - [x] has been reviewed and agreed to be transitional.; - [x] is more than 1 week old. **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/170
https://github.com/sofa-framework/sofa/pull/171:2004,Availability,failure,failures,2004,"nment commits. ## issofa_python. ### New features; Add binding python to get slaves and names on baseObjects.; Add Python bindings for triangle and point topology modifiers. Example scene which show triangle refining.; Creation of Binding_BaseTopologyObject common to PointSetTopologyModifier and TriangleSetTopologyModifier.; Add a getObjects() method to python BaseContext interface. Allow selection of objects based on type and name. May be extended to include more search options later. ### Improvements; SendScriptEvent should only be applied on a specified node, not on root !; WARNING: may affect python script behavior.; Allow to get the value of a data as a string when its type is not handle by the binding.; Object and type names are now both optional when calling BaseContext_getObjects(). Moreover the search direction can now optionally be passed to BaseContext_getObjects() (default is 'Local').; Binding_Data expose fullPath read only parameter for BaseData that derive from DataFileName, which as the name suggests, returns the fullPath to the file pointed by that data. Returns None otherwise. ### Bugfixes; If the data to be gotten using the bind is a vector of type 'unknown' then the text of the data is returned as a whole.; Fix compilation and warnings with gcc.; Fix SofaPython build on linux.; Fix undefined behaviour and potential crash in Python BaseContext.getObjects() due to PyList accessed out of bounds. ; Fix a memory leak which happens whenever an object is transferred from C++ to Python. _______________________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings nor unit test failures.; - [x] does not break existing scenes.; - [x] does not break API compatibility.; - [x] has been reviewed and agreed to be transitional.; - [x] is more than 1 week old. **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/171
https://github.com/sofa-framework/sofa/pull/171:161,Deployability,integrat,integrations,161,"This is the first PR of a long series concerning ISSofa (InSimo) commits merge.; This branch has to be merged first because it is the base branch of all further integrations.; It contains mostly SofaPython commits and also some CI and environment commits. ## issofa_python. ### New features; Add binding python to get slaves and names on baseObjects.; Add Python bindings for triangle and point topology modifiers. Example scene which show triangle refining.; Creation of Binding_BaseTopologyObject common to PointSetTopologyModifier and TriangleSetTopologyModifier.; Add a getObjects() method to python BaseContext interface. Allow selection of objects based on type and name. May be extended to include more search options later. ### Improvements; SendScriptEvent should only be applied on a specified node, not on root !; WARNING: may affect python script behavior.; Allow to get the value of a data as a string when its type is not handle by the binding.; Object and type names are now both optional when calling BaseContext_getObjects(). Moreover the search direction can now optionally be passed to BaseContext_getObjects() (default is 'Local').; Binding_Data expose fullPath read only parameter for BaseData that derive from DataFileName, which as the name suggests, returns the fullPath to the file pointed by that data. Returns None otherwise. ### Bugfixes; If the data to be gotten using the bind is a vector of type 'unknown' then the text of the data is returned as a whole.; Fix compilation and warnings with gcc.; Fix SofaPython build on linux.; Fix undefined behaviour and potential crash in Python BaseContext.getObjects() due to PyList accessed out of bounds. ; Fix a memory leak which happens whenever an object is transferred from C++ to Python. _______________________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings nor unit te",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/171
https://github.com/sofa-framework/sofa/pull/171:161,Integrability,integrat,integrations,161,"This is the first PR of a long series concerning ISSofa (InSimo) commits merge.; This branch has to be merged first because it is the base branch of all further integrations.; It contains mostly SofaPython commits and also some CI and environment commits. ## issofa_python. ### New features; Add binding python to get slaves and names on baseObjects.; Add Python bindings for triangle and point topology modifiers. Example scene which show triangle refining.; Creation of Binding_BaseTopologyObject common to PointSetTopologyModifier and TriangleSetTopologyModifier.; Add a getObjects() method to python BaseContext interface. Allow selection of objects based on type and name. May be extended to include more search options later. ### Improvements; SendScriptEvent should only be applied on a specified node, not on root !; WARNING: may affect python script behavior.; Allow to get the value of a data as a string when its type is not handle by the binding.; Object and type names are now both optional when calling BaseContext_getObjects(). Moreover the search direction can now optionally be passed to BaseContext_getObjects() (default is 'Local').; Binding_Data expose fullPath read only parameter for BaseData that derive from DataFileName, which as the name suggests, returns the fullPath to the file pointed by that data. Returns None otherwise. ### Bugfixes; If the data to be gotten using the bind is a vector of type 'unknown' then the text of the data is returned as a whole.; Fix compilation and warnings with gcc.; Fix SofaPython build on linux.; Fix undefined behaviour and potential crash in Python BaseContext.getObjects() due to PyList accessed out of bounds. ; Fix a memory leak which happens whenever an object is transferred from C++ to Python. _______________________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings nor unit te",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/171
https://github.com/sofa-framework/sofa/pull/171:616,Integrability,interface,interface,616,"This is the first PR of a long series concerning ISSofa (InSimo) commits merge.; This branch has to be merged first because it is the base branch of all further integrations.; It contains mostly SofaPython commits and also some CI and environment commits. ## issofa_python. ### New features; Add binding python to get slaves and names on baseObjects.; Add Python bindings for triangle and point topology modifiers. Example scene which show triangle refining.; Creation of Binding_BaseTopologyObject common to PointSetTopologyModifier and TriangleSetTopologyModifier.; Add a getObjects() method to python BaseContext interface. Allow selection of objects based on type and name. May be extended to include more search options later. ### Improvements; SendScriptEvent should only be applied on a specified node, not on root !; WARNING: may affect python script behavior.; Allow to get the value of a data as a string when its type is not handle by the binding.; Object and type names are now both optional when calling BaseContext_getObjects(). Moreover the search direction can now optionally be passed to BaseContext_getObjects() (default is 'Local').; Binding_Data expose fullPath read only parameter for BaseData that derive from DataFileName, which as the name suggests, returns the fullPath to the file pointed by that data. Returns None otherwise. ### Bugfixes; If the data to be gotten using the bind is a vector of type 'unknown' then the text of the data is returned as a whole.; Fix compilation and warnings with gcc.; Fix SofaPython build on linux.; Fix undefined behaviour and potential crash in Python BaseContext.getObjects() due to PyList accessed out of bounds. ; Fix a memory leak which happens whenever an object is transferred from C++ to Python. _______________________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings nor unit te",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/171
https://github.com/sofa-framework/sofa/pull/171:1873,Integrability,message,message,1873,"nment commits. ## issofa_python. ### New features; Add binding python to get slaves and names on baseObjects.; Add Python bindings for triangle and point topology modifiers. Example scene which show triangle refining.; Creation of Binding_BaseTopologyObject common to PointSetTopologyModifier and TriangleSetTopologyModifier.; Add a getObjects() method to python BaseContext interface. Allow selection of objects based on type and name. May be extended to include more search options later. ### Improvements; SendScriptEvent should only be applied on a specified node, not on root !; WARNING: may affect python script behavior.; Allow to get the value of a data as a string when its type is not handle by the binding.; Object and type names are now both optional when calling BaseContext_getObjects(). Moreover the search direction can now optionally be passed to BaseContext_getObjects() (default is 'Local').; Binding_Data expose fullPath read only parameter for BaseData that derive from DataFileName, which as the name suggests, returns the fullPath to the file pointed by that data. Returns None otherwise. ### Bugfixes; If the data to be gotten using the bind is a vector of type 'unknown' then the text of the data is returned as a whole.; Fix compilation and warnings with gcc.; Fix SofaPython build on linux.; Fix undefined behaviour and potential crash in Python BaseContext.getObjects() due to PyList accessed out of bounds. ; Fix a memory leak which happens whenever an object is transferred from C++ to Python. _______________________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings nor unit test failures.; - [x] does not break existing scenes.; - [x] does not break API compatibility.; - [x] has been reviewed and agreed to be transitional.; - [x] is more than 1 week old. **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/171
https://github.com/sofa-framework/sofa/pull/171:685,Modifiability,extend,extended,685,"This is the first PR of a long series concerning ISSofa (InSimo) commits merge.; This branch has to be merged first because it is the base branch of all further integrations.; It contains mostly SofaPython commits and also some CI and environment commits. ## issofa_python. ### New features; Add binding python to get slaves and names on baseObjects.; Add Python bindings for triangle and point topology modifiers. Example scene which show triangle refining.; Creation of Binding_BaseTopologyObject common to PointSetTopologyModifier and TriangleSetTopologyModifier.; Add a getObjects() method to python BaseContext interface. Allow selection of objects based on type and name. May be extended to include more search options later. ### Improvements; SendScriptEvent should only be applied on a specified node, not on root !; WARNING: may affect python script behavior.; Allow to get the value of a data as a string when its type is not handle by the binding.; Object and type names are now both optional when calling BaseContext_getObjects(). Moreover the search direction can now optionally be passed to BaseContext_getObjects() (default is 'Local').; Binding_Data expose fullPath read only parameter for BaseData that derive from DataFileName, which as the name suggests, returns the fullPath to the file pointed by that data. Returns None otherwise. ### Bugfixes; If the data to be gotten using the bind is a vector of type 'unknown' then the text of the data is returned as a whole.; Fix compilation and warnings with gcc.; Fix SofaPython build on linux.; Fix undefined behaviour and potential crash in Python BaseContext.getObjects() due to PyList accessed out of bounds. ; Fix a memory leak which happens whenever an object is transferred from C++ to Python. _______________________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings nor unit te",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/171
https://github.com/sofa-framework/sofa/pull/171:1166,Security,expose,expose,1166,"ronment commits. ## issofa_python. ### New features; Add binding python to get slaves and names on baseObjects.; Add Python bindings for triangle and point topology modifiers. Example scene which show triangle refining.; Creation of Binding_BaseTopologyObject common to PointSetTopologyModifier and TriangleSetTopologyModifier.; Add a getObjects() method to python BaseContext interface. Allow selection of objects based on type and name. May be extended to include more search options later. ### Improvements; SendScriptEvent should only be applied on a specified node, not on root !; WARNING: may affect python script behavior.; Allow to get the value of a data as a string when its type is not handle by the binding.; Object and type names are now both optional when calling BaseContext_getObjects(). Moreover the search direction can now optionally be passed to BaseContext_getObjects() (default is 'Local').; Binding_Data expose fullPath read only parameter for BaseData that derive from DataFileName, which as the name suggests, returns the fullPath to the file pointed by that data. Returns None otherwise. ### Bugfixes; If the data to be gotten using the bind is a vector of type 'unknown' then the text of the data is returned as a whole.; Fix compilation and warnings with gcc.; Fix SofaPython build on linux.; Fix undefined behaviour and potential crash in Python BaseContext.getObjects() due to PyList accessed out of bounds. ; Fix a memory leak which happens whenever an object is transferred from C++ to Python. _______________________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings nor unit test failures.; - [x] does not break existing scenes.; - [x] does not break API compatibility.; - [x] has been reviewed and agreed to be transitional.; - [x] is more than 1 week old. **Reviewers will merge only if all these checks are true.*",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/171
https://github.com/sofa-framework/sofa/pull/171:1653,Security,access,accessed,1653,"nment commits. ## issofa_python. ### New features; Add binding python to get slaves and names on baseObjects.; Add Python bindings for triangle and point topology modifiers. Example scene which show triangle refining.; Creation of Binding_BaseTopologyObject common to PointSetTopologyModifier and TriangleSetTopologyModifier.; Add a getObjects() method to python BaseContext interface. Allow selection of objects based on type and name. May be extended to include more search options later. ### Improvements; SendScriptEvent should only be applied on a specified node, not on root !; WARNING: may affect python script behavior.; Allow to get the value of a data as a string when its type is not handle by the binding.; Object and type names are now both optional when calling BaseContext_getObjects(). Moreover the search direction can now optionally be passed to BaseContext_getObjects() (default is 'Local').; Binding_Data expose fullPath read only parameter for BaseData that derive from DataFileName, which as the name suggests, returns the fullPath to the file pointed by that data. Returns None otherwise. ### Bugfixes; If the data to be gotten using the bind is a vector of type 'unknown' then the text of the data is returned as a whole.; Fix compilation and warnings with gcc.; Fix SofaPython build on linux.; Fix undefined behaviour and potential crash in Python BaseContext.getObjects() due to PyList accessed out of bounds. ; Fix a memory leak which happens whenever an object is transferred from C++ to Python. _______________________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings nor unit test failures.; - [x] does not break existing scenes.; - [x] does not break API compatibility.; - [x] has been reviewed and agreed to be transitional.; - [x] is more than 1 week old. **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/171
https://github.com/sofa-framework/sofa/pull/171:1999,Testability,test,test,1999,"nment commits. ## issofa_python. ### New features; Add binding python to get slaves and names on baseObjects.; Add Python bindings for triangle and point topology modifiers. Example scene which show triangle refining.; Creation of Binding_BaseTopologyObject common to PointSetTopologyModifier and TriangleSetTopologyModifier.; Add a getObjects() method to python BaseContext interface. Allow selection of objects based on type and name. May be extended to include more search options later. ### Improvements; SendScriptEvent should only be applied on a specified node, not on root !; WARNING: may affect python script behavior.; Allow to get the value of a data as a string when its type is not handle by the binding.; Object and type names are now both optional when calling BaseContext_getObjects(). Moreover the search direction can now optionally be passed to BaseContext_getObjects() (default is 'Local').; Binding_Data expose fullPath read only parameter for BaseData that derive from DataFileName, which as the name suggests, returns the fullPath to the file pointed by that data. Returns None otherwise. ### Bugfixes; If the data to be gotten using the bind is a vector of type 'unknown' then the text of the data is returned as a whole.; Fix compilation and warnings with gcc.; Fix SofaPython build on linux.; Fix undefined behaviour and potential crash in Python BaseContext.getObjects() due to PyList accessed out of bounds. ; Fix a memory leak which happens whenever an object is transferred from C++ to Python. _______________________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings nor unit test failures.; - [x] does not break existing scenes.; - [x] does not break API compatibility.; - [x] has been reviewed and agreed to be transitional.; - [x] is more than 1 week old. **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/171
https://github.com/sofa-framework/sofa/pull/172:1056,Availability,failure,failures,1056,"This PR fixes quaternion integration so that a 1 rad.s^{-1} angular velocity integrated during 1 second results in a 1 rad angle change, as one generally expects. The original quaternion integration scheme is a [gnomonic projection](https://en.wikipedia.org/wiki/Gnomonic_projection) on the 3-sphere (or equivalently, a variant of the Cayley transform) that prevents the maximum angular change to exceed *pi* rad during one time-step, which is problematic as angular velocities get larger. Also, the angular velocity does not integrate to the corresponding rotation angle using this chart, as demonstrated in the failing test. This PR implements the [exponential map](https://en.wikipedia.org/wiki/Exponential_map_(Riemannian_geometry)) for unit quaternion integration given spatial angular velocity, which fixes both issues. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings nor unit test failures.; - [x] does not break existing scenes.; - [x] does not break API compatibility.; - [x] has been reviewed ; - [x] is more than 1 week old. **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/172
https://github.com/sofa-framework/sofa/pull/172:25,Deployability,integrat,integration,25,"This PR fixes quaternion integration so that a 1 rad.s^{-1} angular velocity integrated during 1 second results in a 1 rad angle change, as one generally expects. The original quaternion integration scheme is a [gnomonic projection](https://en.wikipedia.org/wiki/Gnomonic_projection) on the 3-sphere (or equivalently, a variant of the Cayley transform) that prevents the maximum angular change to exceed *pi* rad during one time-step, which is problematic as angular velocities get larger. Also, the angular velocity does not integrate to the corresponding rotation angle using this chart, as demonstrated in the failing test. This PR implements the [exponential map](https://en.wikipedia.org/wiki/Exponential_map_(Riemannian_geometry)) for unit quaternion integration given spatial angular velocity, which fixes both issues. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings nor unit test failures.; - [x] does not break existing scenes.; - [x] does not break API compatibility.; - [x] has been reviewed ; - [x] is more than 1 week old. **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/172
https://github.com/sofa-framework/sofa/pull/172:77,Deployability,integrat,integrated,77,"This PR fixes quaternion integration so that a 1 rad.s^{-1} angular velocity integrated during 1 second results in a 1 rad angle change, as one generally expects. The original quaternion integration scheme is a [gnomonic projection](https://en.wikipedia.org/wiki/Gnomonic_projection) on the 3-sphere (or equivalently, a variant of the Cayley transform) that prevents the maximum angular change to exceed *pi* rad during one time-step, which is problematic as angular velocities get larger. Also, the angular velocity does not integrate to the corresponding rotation angle using this chart, as demonstrated in the failing test. This PR implements the [exponential map](https://en.wikipedia.org/wiki/Exponential_map_(Riemannian_geometry)) for unit quaternion integration given spatial angular velocity, which fixes both issues. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings nor unit test failures.; - [x] does not break existing scenes.; - [x] does not break API compatibility.; - [x] has been reviewed ; - [x] is more than 1 week old. **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/172
https://github.com/sofa-framework/sofa/pull/172:187,Deployability,integrat,integration,187,"This PR fixes quaternion integration so that a 1 rad.s^{-1} angular velocity integrated during 1 second results in a 1 rad angle change, as one generally expects. The original quaternion integration scheme is a [gnomonic projection](https://en.wikipedia.org/wiki/Gnomonic_projection) on the 3-sphere (or equivalently, a variant of the Cayley transform) that prevents the maximum angular change to exceed *pi* rad during one time-step, which is problematic as angular velocities get larger. Also, the angular velocity does not integrate to the corresponding rotation angle using this chart, as demonstrated in the failing test. This PR implements the [exponential map](https://en.wikipedia.org/wiki/Exponential_map_(Riemannian_geometry)) for unit quaternion integration given spatial angular velocity, which fixes both issues. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings nor unit test failures.; - [x] does not break existing scenes.; - [x] does not break API compatibility.; - [x] has been reviewed ; - [x] is more than 1 week old. **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/172
https://github.com/sofa-framework/sofa/pull/172:526,Deployability,integrat,integrate,526,"This PR fixes quaternion integration so that a 1 rad.s^{-1} angular velocity integrated during 1 second results in a 1 rad angle change, as one generally expects. The original quaternion integration scheme is a [gnomonic projection](https://en.wikipedia.org/wiki/Gnomonic_projection) on the 3-sphere (or equivalently, a variant of the Cayley transform) that prevents the maximum angular change to exceed *pi* rad during one time-step, which is problematic as angular velocities get larger. Also, the angular velocity does not integrate to the corresponding rotation angle using this chart, as demonstrated in the failing test. This PR implements the [exponential map](https://en.wikipedia.org/wiki/Exponential_map_(Riemannian_geometry)) for unit quaternion integration given spatial angular velocity, which fixes both issues. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings nor unit test failures.; - [x] does not break existing scenes.; - [x] does not break API compatibility.; - [x] has been reviewed ; - [x] is more than 1 week old. **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/172
https://github.com/sofa-framework/sofa/pull/172:757,Deployability,integrat,integration,757,"This PR fixes quaternion integration so that a 1 rad.s^{-1} angular velocity integrated during 1 second results in a 1 rad angle change, as one generally expects. The original quaternion integration scheme is a [gnomonic projection](https://en.wikipedia.org/wiki/Gnomonic_projection) on the 3-sphere (or equivalently, a variant of the Cayley transform) that prevents the maximum angular change to exceed *pi* rad during one time-step, which is problematic as angular velocities get larger. Also, the angular velocity does not integrate to the corresponding rotation angle using this chart, as demonstrated in the failing test. This PR implements the [exponential map](https://en.wikipedia.org/wiki/Exponential_map_(Riemannian_geometry)) for unit quaternion integration given spatial angular velocity, which fixes both issues. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings nor unit test failures.; - [x] does not break existing scenes.; - [x] does not break API compatibility.; - [x] has been reviewed ; - [x] is more than 1 week old. **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/172
https://github.com/sofa-framework/sofa/pull/172:25,Integrability,integrat,integration,25,"This PR fixes quaternion integration so that a 1 rad.s^{-1} angular velocity integrated during 1 second results in a 1 rad angle change, as one generally expects. The original quaternion integration scheme is a [gnomonic projection](https://en.wikipedia.org/wiki/Gnomonic_projection) on the 3-sphere (or equivalently, a variant of the Cayley transform) that prevents the maximum angular change to exceed *pi* rad during one time-step, which is problematic as angular velocities get larger. Also, the angular velocity does not integrate to the corresponding rotation angle using this chart, as demonstrated in the failing test. This PR implements the [exponential map](https://en.wikipedia.org/wiki/Exponential_map_(Riemannian_geometry)) for unit quaternion integration given spatial angular velocity, which fixes both issues. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings nor unit test failures.; - [x] does not break existing scenes.; - [x] does not break API compatibility.; - [x] has been reviewed ; - [x] is more than 1 week old. **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/172
https://github.com/sofa-framework/sofa/pull/172:77,Integrability,integrat,integrated,77,"This PR fixes quaternion integration so that a 1 rad.s^{-1} angular velocity integrated during 1 second results in a 1 rad angle change, as one generally expects. The original quaternion integration scheme is a [gnomonic projection](https://en.wikipedia.org/wiki/Gnomonic_projection) on the 3-sphere (or equivalently, a variant of the Cayley transform) that prevents the maximum angular change to exceed *pi* rad during one time-step, which is problematic as angular velocities get larger. Also, the angular velocity does not integrate to the corresponding rotation angle using this chart, as demonstrated in the failing test. This PR implements the [exponential map](https://en.wikipedia.org/wiki/Exponential_map_(Riemannian_geometry)) for unit quaternion integration given spatial angular velocity, which fixes both issues. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings nor unit test failures.; - [x] does not break existing scenes.; - [x] does not break API compatibility.; - [x] has been reviewed ; - [x] is more than 1 week old. **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/172
https://github.com/sofa-framework/sofa/pull/172:187,Integrability,integrat,integration,187,"This PR fixes quaternion integration so that a 1 rad.s^{-1} angular velocity integrated during 1 second results in a 1 rad angle change, as one generally expects. The original quaternion integration scheme is a [gnomonic projection](https://en.wikipedia.org/wiki/Gnomonic_projection) on the 3-sphere (or equivalently, a variant of the Cayley transform) that prevents the maximum angular change to exceed *pi* rad during one time-step, which is problematic as angular velocities get larger. Also, the angular velocity does not integrate to the corresponding rotation angle using this chart, as demonstrated in the failing test. This PR implements the [exponential map](https://en.wikipedia.org/wiki/Exponential_map_(Riemannian_geometry)) for unit quaternion integration given spatial angular velocity, which fixes both issues. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings nor unit test failures.; - [x] does not break existing scenes.; - [x] does not break API compatibility.; - [x] has been reviewed ; - [x] is more than 1 week old. **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/172
https://github.com/sofa-framework/sofa/pull/172:526,Integrability,integrat,integrate,526,"This PR fixes quaternion integration so that a 1 rad.s^{-1} angular velocity integrated during 1 second results in a 1 rad angle change, as one generally expects. The original quaternion integration scheme is a [gnomonic projection](https://en.wikipedia.org/wiki/Gnomonic_projection) on the 3-sphere (or equivalently, a variant of the Cayley transform) that prevents the maximum angular change to exceed *pi* rad during one time-step, which is problematic as angular velocities get larger. Also, the angular velocity does not integrate to the corresponding rotation angle using this chart, as demonstrated in the failing test. This PR implements the [exponential map](https://en.wikipedia.org/wiki/Exponential_map_(Riemannian_geometry)) for unit quaternion integration given spatial angular velocity, which fixes both issues. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings nor unit test failures.; - [x] does not break existing scenes.; - [x] does not break API compatibility.; - [x] has been reviewed ; - [x] is more than 1 week old. **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/172
https://github.com/sofa-framework/sofa/pull/172:757,Integrability,integrat,integration,757,"This PR fixes quaternion integration so that a 1 rad.s^{-1} angular velocity integrated during 1 second results in a 1 rad angle change, as one generally expects. The original quaternion integration scheme is a [gnomonic projection](https://en.wikipedia.org/wiki/Gnomonic_projection) on the 3-sphere (or equivalently, a variant of the Cayley transform) that prevents the maximum angular change to exceed *pi* rad during one time-step, which is problematic as angular velocities get larger. Also, the angular velocity does not integrate to the corresponding rotation angle using this chart, as demonstrated in the failing test. This PR implements the [exponential map](https://en.wikipedia.org/wiki/Exponential_map_(Riemannian_geometry)) for unit quaternion integration given spatial angular velocity, which fixes both issues. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings nor unit test failures.; - [x] does not break existing scenes.; - [x] does not break API compatibility.; - [x] has been reviewed ; - [x] is more than 1 week old. **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/172
https://github.com/sofa-framework/sofa/pull/172:925,Integrability,message,message,925,"This PR fixes quaternion integration so that a 1 rad.s^{-1} angular velocity integrated during 1 second results in a 1 rad angle change, as one generally expects. The original quaternion integration scheme is a [gnomonic projection](https://en.wikipedia.org/wiki/Gnomonic_projection) on the 3-sphere (or equivalently, a variant of the Cayley transform) that prevents the maximum angular change to exceed *pi* rad during one time-step, which is problematic as angular velocities get larger. Also, the angular velocity does not integrate to the corresponding rotation angle using this chart, as demonstrated in the failing test. This PR implements the [exponential map](https://en.wikipedia.org/wiki/Exponential_map_(Riemannian_geometry)) for unit quaternion integration given spatial angular velocity, which fixes both issues. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings nor unit test failures.; - [x] does not break existing scenes.; - [x] does not break API compatibility.; - [x] has been reviewed ; - [x] is more than 1 week old. **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/172
https://github.com/sofa-framework/sofa/pull/172:621,Testability,test,test,621,"This PR fixes quaternion integration so that a 1 rad.s^{-1} angular velocity integrated during 1 second results in a 1 rad angle change, as one generally expects. The original quaternion integration scheme is a [gnomonic projection](https://en.wikipedia.org/wiki/Gnomonic_projection) on the 3-sphere (or equivalently, a variant of the Cayley transform) that prevents the maximum angular change to exceed *pi* rad during one time-step, which is problematic as angular velocities get larger. Also, the angular velocity does not integrate to the corresponding rotation angle using this chart, as demonstrated in the failing test. This PR implements the [exponential map](https://en.wikipedia.org/wiki/Exponential_map_(Riemannian_geometry)) for unit quaternion integration given spatial angular velocity, which fixes both issues. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings nor unit test failures.; - [x] does not break existing scenes.; - [x] does not break API compatibility.; - [x] has been reviewed ; - [x] is more than 1 week old. **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/172
https://github.com/sofa-framework/sofa/pull/172:1051,Testability,test,test,1051,"This PR fixes quaternion integration so that a 1 rad.s^{-1} angular velocity integrated during 1 second results in a 1 rad angle change, as one generally expects. The original quaternion integration scheme is a [gnomonic projection](https://en.wikipedia.org/wiki/Gnomonic_projection) on the 3-sphere (or equivalently, a variant of the Cayley transform) that prevents the maximum angular change to exceed *pi* rad during one time-step, which is problematic as angular velocities get larger. Also, the angular velocity does not integrate to the corresponding rotation angle using this chart, as demonstrated in the failing test. This PR implements the [exponential map](https://en.wikipedia.org/wiki/Exponential_map_(Riemannian_geometry)) for unit quaternion integration given spatial angular velocity, which fixes both issues. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings nor unit test failures.; - [x] does not break existing scenes.; - [x] does not break API compatibility.; - [x] has been reviewed ; - [x] is more than 1 week old. **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/172
https://github.com/sofa-framework/sofa/issues/178:241,Usability,feedback,feedback,241,It seems there is a problem on the CI with Centos. ; The compilation time that was around 1h increase to more than 10h since https://ci.inria.fr/sofa-ci/job/centos_clang-3.4_options/180/. We need to fix that. ; @matthieu-nesme when you have feedback on that can you report them here ?,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/178
https://github.com/sofa-framework/sofa/issues/179:622,Availability,error,error,622,"Currently there is different ways to send messages in Sofa. Each way having its own 'side effects' leading to a different results exposed to the users. . This issues was already partially addressed in Issue https://github.com/sofa-framework/sofa/issues/160 or PR https://github.com/sofa-framework/sofa/pull/106 and others.... . The general goal of this Issue is to finally have only one system all around sofa to increase both code consistency and user interface behavior. ; ; Things to do to make that happen: ; - [x] implementing a per component logging system on top of the msg_api to prove we can replace the existing error logging system. (Done in PR https://github.com/sofa-framework/sofa/pull/106). - [x] replace the existing logging of error it should contains:; - removing the filling of the messages in sout.; - removing the old string based buffer (API BREAK).; - removing all the uses of the old message buffers and replace them with the new one (API BREAK).; - updating the gui to use the new msghandler buffers. - [ ] update sofaQtQuick (but there is no API break). - [x] update runSofa to the buffer API break, at least make it compile/run. - [x] clean the way we handle the printLog (see Issue https://github.com/sofa-framework/sofa/issues/160); - remove/rename the printLog data and implement backward compatibility ; - a replacement solution has to be implement to control the printing.; - a replacement solution has to be implement to control the messages based on a per-component selection of the printed messages. - [ ] extending/unifying the sout/serr with more sdebug/swarning. This must be discussed seriously during a meeting because I currently made a lot of attempts to this but didn't managed to implement a working solution without the sever flawn sout/serr have. If you have ideas on that please make a branch with working proposal so that we have sounded discussion (see Issue https://github.com/sofa-framework/sofa/issues/160). - [x] implementing the improvement of the",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/179
https://github.com/sofa-framework/sofa/issues/179:744,Availability,error,error,744,"Currently there is different ways to send messages in Sofa. Each way having its own 'side effects' leading to a different results exposed to the users. . This issues was already partially addressed in Issue https://github.com/sofa-framework/sofa/issues/160 or PR https://github.com/sofa-framework/sofa/pull/106 and others.... . The general goal of this Issue is to finally have only one system all around sofa to increase both code consistency and user interface behavior. ; ; Things to do to make that happen: ; - [x] implementing a per component logging system on top of the msg_api to prove we can replace the existing error logging system. (Done in PR https://github.com/sofa-framework/sofa/pull/106). - [x] replace the existing logging of error it should contains:; - removing the filling of the messages in sout.; - removing the old string based buffer (API BREAK).; - removing all the uses of the old message buffers and replace them with the new one (API BREAK).; - updating the gui to use the new msghandler buffers. - [ ] update sofaQtQuick (but there is no API break). - [x] update runSofa to the buffer API break, at least make it compile/run. - [x] clean the way we handle the printLog (see Issue https://github.com/sofa-framework/sofa/issues/160); - remove/rename the printLog data and implement backward compatibility ; - a replacement solution has to be implement to control the printing.; - a replacement solution has to be implement to control the messages based on a per-component selection of the printed messages. - [ ] extending/unifying the sout/serr with more sdebug/swarning. This must be discussed seriously during a meeting because I currently made a lot of attempts to this but didn't managed to implement a working solution without the sever flawn sout/serr have. If you have ideas on that please make a branch with working proposal so that we have sounded discussion (see Issue https://github.com/sofa-framework/sofa/issues/160). - [x] implementing the improvement of the",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/179
https://github.com/sofa-framework/sofa/issues/179:1032,Deployability,update,update,1032,"n Sofa. Each way having its own 'side effects' leading to a different results exposed to the users. . This issues was already partially addressed in Issue https://github.com/sofa-framework/sofa/issues/160 or PR https://github.com/sofa-framework/sofa/pull/106 and others.... . The general goal of this Issue is to finally have only one system all around sofa to increase both code consistency and user interface behavior. ; ; Things to do to make that happen: ; - [x] implementing a per component logging system on top of the msg_api to prove we can replace the existing error logging system. (Done in PR https://github.com/sofa-framework/sofa/pull/106). - [x] replace the existing logging of error it should contains:; - removing the filling of the messages in sout.; - removing the old string based buffer (API BREAK).; - removing all the uses of the old message buffers and replace them with the new one (API BREAK).; - updating the gui to use the new msghandler buffers. - [ ] update sofaQtQuick (but there is no API break). - [x] update runSofa to the buffer API break, at least make it compile/run. - [x] clean the way we handle the printLog (see Issue https://github.com/sofa-framework/sofa/issues/160); - remove/rename the printLog data and implement backward compatibility ; - a replacement solution has to be implement to control the printing.; - a replacement solution has to be implement to control the messages based on a per-component selection of the printed messages. - [ ] extending/unifying the sout/serr with more sdebug/swarning. This must be discussed seriously during a meeting because I currently made a lot of attempts to this but didn't managed to implement a working solution without the sever flawn sout/serr have. If you have ideas on that please make a branch with working proposal so that we have sounded discussion (see Issue https://github.com/sofa-framework/sofa/issues/160). - [x] implementing the improvement of the msg_* API discussed in #160. . If like me you thin",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/179
https://github.com/sofa-framework/sofa/issues/179:1086,Deployability,update,update,1086,"rent results exposed to the users. . This issues was already partially addressed in Issue https://github.com/sofa-framework/sofa/issues/160 or PR https://github.com/sofa-framework/sofa/pull/106 and others.... . The general goal of this Issue is to finally have only one system all around sofa to increase both code consistency and user interface behavior. ; ; Things to do to make that happen: ; - [x] implementing a per component logging system on top of the msg_api to prove we can replace the existing error logging system. (Done in PR https://github.com/sofa-framework/sofa/pull/106). - [x] replace the existing logging of error it should contains:; - removing the filling of the messages in sout.; - removing the old string based buffer (API BREAK).; - removing all the uses of the old message buffers and replace them with the new one (API BREAK).; - updating the gui to use the new msghandler buffers. - [ ] update sofaQtQuick (but there is no API break). - [x] update runSofa to the buffer API break, at least make it compile/run. - [x] clean the way we handle the printLog (see Issue https://github.com/sofa-framework/sofa/issues/160); - remove/rename the printLog data and implement backward compatibility ; - a replacement solution has to be implement to control the printing.; - a replacement solution has to be implement to control the messages based on a per-component selection of the printed messages. - [ ] extending/unifying the sout/serr with more sdebug/swarning. This must be discussed seriously during a meeting because I currently made a lot of attempts to this but didn't managed to implement a working solution without the sever flawn sout/serr have. If you have ideas on that please make a branch with working proposal so that we have sounded discussion (see Issue https://github.com/sofa-framework/sofa/issues/160). - [x] implementing the improvement of the msg_* API discussed in #160. . If like me you think this should be fixed...please join this discussion and share th",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/179
https://github.com/sofa-framework/sofa/issues/179:42,Integrability,message,messages,42,"Currently there is different ways to send messages in Sofa. Each way having its own 'side effects' leading to a different results exposed to the users. . This issues was already partially addressed in Issue https://github.com/sofa-framework/sofa/issues/160 or PR https://github.com/sofa-framework/sofa/pull/106 and others.... . The general goal of this Issue is to finally have only one system all around sofa to increase both code consistency and user interface behavior. ; ; Things to do to make that happen: ; - [x] implementing a per component logging system on top of the msg_api to prove we can replace the existing error logging system. (Done in PR https://github.com/sofa-framework/sofa/pull/106). - [x] replace the existing logging of error it should contains:; - removing the filling of the messages in sout.; - removing the old string based buffer (API BREAK).; - removing all the uses of the old message buffers and replace them with the new one (API BREAK).; - updating the gui to use the new msghandler buffers. - [ ] update sofaQtQuick (but there is no API break). - [x] update runSofa to the buffer API break, at least make it compile/run. - [x] clean the way we handle the printLog (see Issue https://github.com/sofa-framework/sofa/issues/160); - remove/rename the printLog data and implement backward compatibility ; - a replacement solution has to be implement to control the printing.; - a replacement solution has to be implement to control the messages based on a per-component selection of the printed messages. - [ ] extending/unifying the sout/serr with more sdebug/swarning. This must be discussed seriously during a meeting because I currently made a lot of attempts to this but didn't managed to implement a working solution without the sever flawn sout/serr have. If you have ideas on that please make a branch with working proposal so that we have sounded discussion (see Issue https://github.com/sofa-framework/sofa/issues/160). - [x] implementing the improvement of the",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/179
https://github.com/sofa-framework/sofa/issues/179:453,Integrability,interface,interface,453,"Currently there is different ways to send messages in Sofa. Each way having its own 'side effects' leading to a different results exposed to the users. . This issues was already partially addressed in Issue https://github.com/sofa-framework/sofa/issues/160 or PR https://github.com/sofa-framework/sofa/pull/106 and others.... . The general goal of this Issue is to finally have only one system all around sofa to increase both code consistency and user interface behavior. ; ; Things to do to make that happen: ; - [x] implementing a per component logging system on top of the msg_api to prove we can replace the existing error logging system. (Done in PR https://github.com/sofa-framework/sofa/pull/106). - [x] replace the existing logging of error it should contains:; - removing the filling of the messages in sout.; - removing the old string based buffer (API BREAK).; - removing all the uses of the old message buffers and replace them with the new one (API BREAK).; - updating the gui to use the new msghandler buffers. - [ ] update sofaQtQuick (but there is no API break). - [x] update runSofa to the buffer API break, at least make it compile/run. - [x] clean the way we handle the printLog (see Issue https://github.com/sofa-framework/sofa/issues/160); - remove/rename the printLog data and implement backward compatibility ; - a replacement solution has to be implement to control the printing.; - a replacement solution has to be implement to control the messages based on a per-component selection of the printed messages. - [ ] extending/unifying the sout/serr with more sdebug/swarning. This must be discussed seriously during a meeting because I currently made a lot of attempts to this but didn't managed to implement a working solution without the sever flawn sout/serr have. If you have ideas on that please make a branch with working proposal so that we have sounded discussion (see Issue https://github.com/sofa-framework/sofa/issues/160). - [x] implementing the improvement of the",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/179
https://github.com/sofa-framework/sofa/issues/179:801,Integrability,message,messages,801,"Currently there is different ways to send messages in Sofa. Each way having its own 'side effects' leading to a different results exposed to the users. . This issues was already partially addressed in Issue https://github.com/sofa-framework/sofa/issues/160 or PR https://github.com/sofa-framework/sofa/pull/106 and others.... . The general goal of this Issue is to finally have only one system all around sofa to increase both code consistency and user interface behavior. ; ; Things to do to make that happen: ; - [x] implementing a per component logging system on top of the msg_api to prove we can replace the existing error logging system. (Done in PR https://github.com/sofa-framework/sofa/pull/106). - [x] replace the existing logging of error it should contains:; - removing the filling of the messages in sout.; - removing the old string based buffer (API BREAK).; - removing all the uses of the old message buffers and replace them with the new one (API BREAK).; - updating the gui to use the new msghandler buffers. - [ ] update sofaQtQuick (but there is no API break). - [x] update runSofa to the buffer API break, at least make it compile/run. - [x] clean the way we handle the printLog (see Issue https://github.com/sofa-framework/sofa/issues/160); - remove/rename the printLog data and implement backward compatibility ; - a replacement solution has to be implement to control the printing.; - a replacement solution has to be implement to control the messages based on a per-component selection of the printed messages. - [ ] extending/unifying the sout/serr with more sdebug/swarning. This must be discussed seriously during a meeting because I currently made a lot of attempts to this but didn't managed to implement a working solution without the sever flawn sout/serr have. If you have ideas on that please make a branch with working proposal so that we have sounded discussion (see Issue https://github.com/sofa-framework/sofa/issues/160). - [x] implementing the improvement of the",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/179
https://github.com/sofa-framework/sofa/issues/179:908,Integrability,message,message,908,"Currently there is different ways to send messages in Sofa. Each way having its own 'side effects' leading to a different results exposed to the users. . This issues was already partially addressed in Issue https://github.com/sofa-framework/sofa/issues/160 or PR https://github.com/sofa-framework/sofa/pull/106 and others.... . The general goal of this Issue is to finally have only one system all around sofa to increase both code consistency and user interface behavior. ; ; Things to do to make that happen: ; - [x] implementing a per component logging system on top of the msg_api to prove we can replace the existing error logging system. (Done in PR https://github.com/sofa-framework/sofa/pull/106). - [x] replace the existing logging of error it should contains:; - removing the filling of the messages in sout.; - removing the old string based buffer (API BREAK).; - removing all the uses of the old message buffers and replace them with the new one (API BREAK).; - updating the gui to use the new msghandler buffers. - [ ] update sofaQtQuick (but there is no API break). - [x] update runSofa to the buffer API break, at least make it compile/run. - [x] clean the way we handle the printLog (see Issue https://github.com/sofa-framework/sofa/issues/160); - remove/rename the printLog data and implement backward compatibility ; - a replacement solution has to be implement to control the printing.; - a replacement solution has to be implement to control the messages based on a per-component selection of the printed messages. - [ ] extending/unifying the sout/serr with more sdebug/swarning. This must be discussed seriously during a meeting because I currently made a lot of attempts to this but didn't managed to implement a working solution without the sever flawn sout/serr have. If you have ideas on that please make a branch with working proposal so that we have sounded discussion (see Issue https://github.com/sofa-framework/sofa/issues/160). - [x] implementing the improvement of the",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/179
https://github.com/sofa-framework/sofa/issues/179:1466,Integrability,message,messages,1466,"e https://github.com/sofa-framework/sofa/issues/160 or PR https://github.com/sofa-framework/sofa/pull/106 and others.... . The general goal of this Issue is to finally have only one system all around sofa to increase both code consistency and user interface behavior. ; ; Things to do to make that happen: ; - [x] implementing a per component logging system on top of the msg_api to prove we can replace the existing error logging system. (Done in PR https://github.com/sofa-framework/sofa/pull/106). - [x] replace the existing logging of error it should contains:; - removing the filling of the messages in sout.; - removing the old string based buffer (API BREAK).; - removing all the uses of the old message buffers and replace them with the new one (API BREAK).; - updating the gui to use the new msghandler buffers. - [ ] update sofaQtQuick (but there is no API break). - [x] update runSofa to the buffer API break, at least make it compile/run. - [x] clean the way we handle the printLog (see Issue https://github.com/sofa-framework/sofa/issues/160); - remove/rename the printLog data and implement backward compatibility ; - a replacement solution has to be implement to control the printing.; - a replacement solution has to be implement to control the messages based on a per-component selection of the printed messages. - [ ] extending/unifying the sout/serr with more sdebug/swarning. This must be discussed seriously during a meeting because I currently made a lot of attempts to this but didn't managed to implement a working solution without the sever flawn sout/serr have. If you have ideas on that please make a branch with working proposal so that we have sounded discussion (see Issue https://github.com/sofa-framework/sofa/issues/160). - [x] implementing the improvement of the msg_* API discussed in #160. . If like me you think this should be fixed...please join this discussion and share the workload. ; I'm working in https://github.com/SofaDefrost/sofa/tree/improve-messageapi",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/179
https://github.com/sofa-framework/sofa/issues/179:1525,Integrability,message,messages,1525,"e https://github.com/sofa-framework/sofa/issues/160 or PR https://github.com/sofa-framework/sofa/pull/106 and others.... . The general goal of this Issue is to finally have only one system all around sofa to increase both code consistency and user interface behavior. ; ; Things to do to make that happen: ; - [x] implementing a per component logging system on top of the msg_api to prove we can replace the existing error logging system. (Done in PR https://github.com/sofa-framework/sofa/pull/106). - [x] replace the existing logging of error it should contains:; - removing the filling of the messages in sout.; - removing the old string based buffer (API BREAK).; - removing all the uses of the old message buffers and replace them with the new one (API BREAK).; - updating the gui to use the new msghandler buffers. - [ ] update sofaQtQuick (but there is no API break). - [x] update runSofa to the buffer API break, at least make it compile/run. - [x] clean the way we handle the printLog (see Issue https://github.com/sofa-framework/sofa/issues/160); - remove/rename the printLog data and implement backward compatibility ; - a replacement solution has to be implement to control the printing.; - a replacement solution has to be implement to control the messages based on a per-component selection of the printed messages. - [ ] extending/unifying the sout/serr with more sdebug/swarning. This must be discussed seriously during a meeting because I currently made a lot of attempts to this but didn't managed to implement a working solution without the sever flawn sout/serr have. If you have ideas on that please make a branch with working proposal so that we have sounded discussion (see Issue https://github.com/sofa-framework/sofa/issues/160). - [x] implementing the improvement of the msg_* API discussed in #160. . If like me you think this should be fixed...please join this discussion and share the workload. ; I'm working in https://github.com/SofaDefrost/sofa/tree/improve-messageapi",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/179
https://github.com/sofa-framework/sofa/issues/179:2195,Integrability,message,messageapi,2195,"e https://github.com/sofa-framework/sofa/issues/160 or PR https://github.com/sofa-framework/sofa/pull/106 and others.... . The general goal of this Issue is to finally have only one system all around sofa to increase both code consistency and user interface behavior. ; ; Things to do to make that happen: ; - [x] implementing a per component logging system on top of the msg_api to prove we can replace the existing error logging system. (Done in PR https://github.com/sofa-framework/sofa/pull/106). - [x] replace the existing logging of error it should contains:; - removing the filling of the messages in sout.; - removing the old string based buffer (API BREAK).; - removing all the uses of the old message buffers and replace them with the new one (API BREAK).; - updating the gui to use the new msghandler buffers. - [ ] update sofaQtQuick (but there is no API break). - [x] update runSofa to the buffer API break, at least make it compile/run. - [x] clean the way we handle the printLog (see Issue https://github.com/sofa-framework/sofa/issues/160); - remove/rename the printLog data and implement backward compatibility ; - a replacement solution has to be implement to control the printing.; - a replacement solution has to be implement to control the messages based on a per-component selection of the printed messages. - [ ] extending/unifying the sout/serr with more sdebug/swarning. This must be discussed seriously during a meeting because I currently made a lot of attempts to this but didn't managed to implement a working solution without the sever flawn sout/serr have. If you have ideas on that please make a branch with working proposal so that we have sounded discussion (see Issue https://github.com/sofa-framework/sofa/issues/160). - [x] implementing the improvement of the msg_* API discussed in #160. . If like me you think this should be fixed...please join this discussion and share the workload. ; I'm working in https://github.com/SofaDefrost/sofa/tree/improve-messageapi",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/179
https://github.com/sofa-framework/sofa/issues/179:1541,Modifiability,extend,extending,1541,"e https://github.com/sofa-framework/sofa/issues/160 or PR https://github.com/sofa-framework/sofa/pull/106 and others.... . The general goal of this Issue is to finally have only one system all around sofa to increase both code consistency and user interface behavior. ; ; Things to do to make that happen: ; - [x] implementing a per component logging system on top of the msg_api to prove we can replace the existing error logging system. (Done in PR https://github.com/sofa-framework/sofa/pull/106). - [x] replace the existing logging of error it should contains:; - removing the filling of the messages in sout.; - removing the old string based buffer (API BREAK).; - removing all the uses of the old message buffers and replace them with the new one (API BREAK).; - updating the gui to use the new msghandler buffers. - [ ] update sofaQtQuick (but there is no API break). - [x] update runSofa to the buffer API break, at least make it compile/run. - [x] clean the way we handle the printLog (see Issue https://github.com/sofa-framework/sofa/issues/160); - remove/rename the printLog data and implement backward compatibility ; - a replacement solution has to be implement to control the printing.; - a replacement solution has to be implement to control the messages based on a per-component selection of the printed messages. - [ ] extending/unifying the sout/serr with more sdebug/swarning. This must be discussed seriously during a meeting because I currently made a lot of attempts to this but didn't managed to implement a working solution without the sever flawn sout/serr have. If you have ideas on that please make a branch with working proposal so that we have sounded discussion (see Issue https://github.com/sofa-framework/sofa/issues/160). - [x] implementing the improvement of the msg_* API discussed in #160. . If like me you think this should be fixed...please join this discussion and share the workload. ; I'm working in https://github.com/SofaDefrost/sofa/tree/improve-messageapi",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/179
https://github.com/sofa-framework/sofa/issues/179:130,Security,expose,exposed,130,"Currently there is different ways to send messages in Sofa. Each way having its own 'side effects' leading to a different results exposed to the users. . This issues was already partially addressed in Issue https://github.com/sofa-framework/sofa/issues/160 or PR https://github.com/sofa-framework/sofa/pull/106 and others.... . The general goal of this Issue is to finally have only one system all around sofa to increase both code consistency and user interface behavior. ; ; Things to do to make that happen: ; - [x] implementing a per component logging system on top of the msg_api to prove we can replace the existing error logging system. (Done in PR https://github.com/sofa-framework/sofa/pull/106). - [x] replace the existing logging of error it should contains:; - removing the filling of the messages in sout.; - removing the old string based buffer (API BREAK).; - removing all the uses of the old message buffers and replace them with the new one (API BREAK).; - updating the gui to use the new msghandler buffers. - [ ] update sofaQtQuick (but there is no API break). - [x] update runSofa to the buffer API break, at least make it compile/run. - [x] clean the way we handle the printLog (see Issue https://github.com/sofa-framework/sofa/issues/160); - remove/rename the printLog data and implement backward compatibility ; - a replacement solution has to be implement to control the printing.; - a replacement solution has to be implement to control the messages based on a per-component selection of the printed messages. - [ ] extending/unifying the sout/serr with more sdebug/swarning. This must be discussed seriously during a meeting because I currently made a lot of attempts to this but didn't managed to implement a working solution without the sever flawn sout/serr have. If you have ideas on that please make a branch with working proposal so that we have sounded discussion (see Issue https://github.com/sofa-framework/sofa/issues/160). - [x] implementing the improvement of the",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/179
https://github.com/sofa-framework/sofa/issues/179:548,Testability,log,logging,548,"Currently there is different ways to send messages in Sofa. Each way having its own 'side effects' leading to a different results exposed to the users. . This issues was already partially addressed in Issue https://github.com/sofa-framework/sofa/issues/160 or PR https://github.com/sofa-framework/sofa/pull/106 and others.... . The general goal of this Issue is to finally have only one system all around sofa to increase both code consistency and user interface behavior. ; ; Things to do to make that happen: ; - [x] implementing a per component logging system on top of the msg_api to prove we can replace the existing error logging system. (Done in PR https://github.com/sofa-framework/sofa/pull/106). - [x] replace the existing logging of error it should contains:; - removing the filling of the messages in sout.; - removing the old string based buffer (API BREAK).; - removing all the uses of the old message buffers and replace them with the new one (API BREAK).; - updating the gui to use the new msghandler buffers. - [ ] update sofaQtQuick (but there is no API break). - [x] update runSofa to the buffer API break, at least make it compile/run. - [x] clean the way we handle the printLog (see Issue https://github.com/sofa-framework/sofa/issues/160); - remove/rename the printLog data and implement backward compatibility ; - a replacement solution has to be implement to control the printing.; - a replacement solution has to be implement to control the messages based on a per-component selection of the printed messages. - [ ] extending/unifying the sout/serr with more sdebug/swarning. This must be discussed seriously during a meeting because I currently made a lot of attempts to this but didn't managed to implement a working solution without the sever flawn sout/serr have. If you have ideas on that please make a branch with working proposal so that we have sounded discussion (see Issue https://github.com/sofa-framework/sofa/issues/160). - [x] implementing the improvement of the",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/179
https://github.com/sofa-framework/sofa/issues/179:628,Testability,log,logging,628,"Currently there is different ways to send messages in Sofa. Each way having its own 'side effects' leading to a different results exposed to the users. . This issues was already partially addressed in Issue https://github.com/sofa-framework/sofa/issues/160 or PR https://github.com/sofa-framework/sofa/pull/106 and others.... . The general goal of this Issue is to finally have only one system all around sofa to increase both code consistency and user interface behavior. ; ; Things to do to make that happen: ; - [x] implementing a per component logging system on top of the msg_api to prove we can replace the existing error logging system. (Done in PR https://github.com/sofa-framework/sofa/pull/106). - [x] replace the existing logging of error it should contains:; - removing the filling of the messages in sout.; - removing the old string based buffer (API BREAK).; - removing all the uses of the old message buffers and replace them with the new one (API BREAK).; - updating the gui to use the new msghandler buffers. - [ ] update sofaQtQuick (but there is no API break). - [x] update runSofa to the buffer API break, at least make it compile/run. - [x] clean the way we handle the printLog (see Issue https://github.com/sofa-framework/sofa/issues/160); - remove/rename the printLog data and implement backward compatibility ; - a replacement solution has to be implement to control the printing.; - a replacement solution has to be implement to control the messages based on a per-component selection of the printed messages. - [ ] extending/unifying the sout/serr with more sdebug/swarning. This must be discussed seriously during a meeting because I currently made a lot of attempts to this but didn't managed to implement a working solution without the sever flawn sout/serr have. If you have ideas on that please make a branch with working proposal so that we have sounded discussion (see Issue https://github.com/sofa-framework/sofa/issues/160). - [x] implementing the improvement of the",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/179
https://github.com/sofa-framework/sofa/issues/179:733,Testability,log,logging,733,"Currently there is different ways to send messages in Sofa. Each way having its own 'side effects' leading to a different results exposed to the users. . This issues was already partially addressed in Issue https://github.com/sofa-framework/sofa/issues/160 or PR https://github.com/sofa-framework/sofa/pull/106 and others.... . The general goal of this Issue is to finally have only one system all around sofa to increase both code consistency and user interface behavior. ; ; Things to do to make that happen: ; - [x] implementing a per component logging system on top of the msg_api to prove we can replace the existing error logging system. (Done in PR https://github.com/sofa-framework/sofa/pull/106). - [x] replace the existing logging of error it should contains:; - removing the filling of the messages in sout.; - removing the old string based buffer (API BREAK).; - removing all the uses of the old message buffers and replace them with the new one (API BREAK).; - updating the gui to use the new msghandler buffers. - [ ] update sofaQtQuick (but there is no API break). - [x] update runSofa to the buffer API break, at least make it compile/run. - [x] clean the way we handle the printLog (see Issue https://github.com/sofa-framework/sofa/issues/160); - remove/rename the printLog data and implement backward compatibility ; - a replacement solution has to be implement to control the printing.; - a replacement solution has to be implement to control the messages based on a per-component selection of the printed messages. - [ ] extending/unifying the sout/serr with more sdebug/swarning. This must be discussed seriously during a meeting because I currently made a lot of attempts to this but didn't managed to implement a working solution without the sever flawn sout/serr have. If you have ideas on that please make a branch with working proposal so that we have sounded discussion (see Issue https://github.com/sofa-framework/sofa/issues/160). - [x] implementing the improvement of the",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/179
https://github.com/sofa-framework/sofa/pull/182:516,Availability,failure,failures,516,"/sofa/v16.08/src/examples/Components/forcefield/TetrahedralCorotationalFEMForceField.scn. Before the MechanicalObject definition should; be added geometryAlgorithm; <TetrahedronSetGeometryAlgorithms template=""Vec3d"" name=""GeomAlgo"" />; If it does not exist it produces a warning. best. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings nor unit test failures.; - [ ] does not break existing scenes.; - [ ] does not break API compatibility.; - [ ] has been reviewed and agreed to be transitional.; - [ ] is more than 1 week old. **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/182
https://github.com/sofa-framework/sofa/pull/182:385,Integrability,message,message,385,"/sofa/v16.08/src/examples/Components/forcefield/TetrahedralCorotationalFEMForceField.scn. Before the MechanicalObject definition should; be added geometryAlgorithm; <TetrahedronSetGeometryAlgorithms template=""Vec3d"" name=""GeomAlgo"" />; If it does not exist it produces a warning. best. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings nor unit test failures.; - [ ] does not break existing scenes.; - [ ] does not break API compatibility.; - [ ] has been reviewed and agreed to be transitional.; - [ ] is more than 1 week old. **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/182
https://github.com/sofa-framework/sofa/pull/182:511,Testability,test,test,511,"/sofa/v16.08/src/examples/Components/forcefield/TetrahedralCorotationalFEMForceField.scn. Before the MechanicalObject definition should; be added geometryAlgorithm; <TetrahedronSetGeometryAlgorithms template=""Vec3d"" name=""GeomAlgo"" />; If it does not exist it produces a warning. best. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings nor unit test failures.; - [ ] does not break existing scenes.; - [ ] does not break API compatibility.; - [ ] has been reviewed and agreed to be transitional.; - [ ] is more than 1 week old. **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/182
https://github.com/sofa-framework/sofa/pull/185:655,Availability,failure,failures,655,"This plugin allows us to load images using CImg API. For now this plugin is located in applications/plugins of Sofa, and does not supersede ImageQt/ImagePNG/ImageBMP. Tests and a simple scene to test all the supported formats are provided. An other pull-request will be done to remove ImageQt/ImagePNG/ImageBMP and their posssible dependencies in SofaKernel (e.g libpng), following further discussions. Linked to issue #51 . ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings nor unit test failures.; - [ ] does not break existing scenes.; - [ ] does not break API compatibility.; - [ ] has been reviewed and agreed to be transitional.; - [x] is more than 1 week old. **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/185
https://github.com/sofa-framework/sofa/pull/185:331,Integrability,depend,dependencies,331,"This plugin allows us to load images using CImg API. For now this plugin is located in applications/plugins of Sofa, and does not supersede ImageQt/ImagePNG/ImageBMP. Tests and a simple scene to test all the supported formats are provided. An other pull-request will be done to remove ImageQt/ImagePNG/ImageBMP and their posssible dependencies in SofaKernel (e.g libpng), following further discussions. Linked to issue #51 . ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings nor unit test failures.; - [ ] does not break existing scenes.; - [ ] does not break API compatibility.; - [ ] has been reviewed and agreed to be transitional.; - [x] is more than 1 week old. **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/185
https://github.com/sofa-framework/sofa/pull/185:524,Integrability,message,message,524,"This plugin allows us to load images using CImg API. For now this plugin is located in applications/plugins of Sofa, and does not supersede ImageQt/ImagePNG/ImageBMP. Tests and a simple scene to test all the supported formats are provided. An other pull-request will be done to remove ImageQt/ImagePNG/ImageBMP and their posssible dependencies in SofaKernel (e.g libpng), following further discussions. Linked to issue #51 . ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings nor unit test failures.; - [ ] does not break existing scenes.; - [ ] does not break API compatibility.; - [ ] has been reviewed and agreed to be transitional.; - [x] is more than 1 week old. **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/185
https://github.com/sofa-framework/sofa/pull/185:5,Modifiability,plugin,plugin,5,"This plugin allows us to load images using CImg API. For now this plugin is located in applications/plugins of Sofa, and does not supersede ImageQt/ImagePNG/ImageBMP. Tests and a simple scene to test all the supported formats are provided. An other pull-request will be done to remove ImageQt/ImagePNG/ImageBMP and their posssible dependencies in SofaKernel (e.g libpng), following further discussions. Linked to issue #51 . ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings nor unit test failures.; - [ ] does not break existing scenes.; - [ ] does not break API compatibility.; - [ ] has been reviewed and agreed to be transitional.; - [x] is more than 1 week old. **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/185
https://github.com/sofa-framework/sofa/pull/185:66,Modifiability,plugin,plugin,66,"This plugin allows us to load images using CImg API. For now this plugin is located in applications/plugins of Sofa, and does not supersede ImageQt/ImagePNG/ImageBMP. Tests and a simple scene to test all the supported formats are provided. An other pull-request will be done to remove ImageQt/ImagePNG/ImageBMP and their posssible dependencies in SofaKernel (e.g libpng), following further discussions. Linked to issue #51 . ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings nor unit test failures.; - [ ] does not break existing scenes.; - [ ] does not break API compatibility.; - [ ] has been reviewed and agreed to be transitional.; - [x] is more than 1 week old. **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/185
https://github.com/sofa-framework/sofa/pull/185:100,Modifiability,plugin,plugins,100,"This plugin allows us to load images using CImg API. For now this plugin is located in applications/plugins of Sofa, and does not supersede ImageQt/ImagePNG/ImageBMP. Tests and a simple scene to test all the supported formats are provided. An other pull-request will be done to remove ImageQt/ImagePNG/ImageBMP and their posssible dependencies in SofaKernel (e.g libpng), following further discussions. Linked to issue #51 . ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings nor unit test failures.; - [ ] does not break existing scenes.; - [ ] does not break API compatibility.; - [ ] has been reviewed and agreed to be transitional.; - [x] is more than 1 week old. **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/185
https://github.com/sofa-framework/sofa/pull/185:25,Performance,load,load,25,"This plugin allows us to load images using CImg API. For now this plugin is located in applications/plugins of Sofa, and does not supersede ImageQt/ImagePNG/ImageBMP. Tests and a simple scene to test all the supported formats are provided. An other pull-request will be done to remove ImageQt/ImagePNG/ImageBMP and their posssible dependencies in SofaKernel (e.g libpng), following further discussions. Linked to issue #51 . ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings nor unit test failures.; - [ ] does not break existing scenes.; - [ ] does not break API compatibility.; - [ ] has been reviewed and agreed to be transitional.; - [x] is more than 1 week old. **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/185
https://github.com/sofa-framework/sofa/pull/185:167,Testability,Test,Tests,167,"This plugin allows us to load images using CImg API. For now this plugin is located in applications/plugins of Sofa, and does not supersede ImageQt/ImagePNG/ImageBMP. Tests and a simple scene to test all the supported formats are provided. An other pull-request will be done to remove ImageQt/ImagePNG/ImageBMP and their posssible dependencies in SofaKernel (e.g libpng), following further discussions. Linked to issue #51 . ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings nor unit test failures.; - [ ] does not break existing scenes.; - [ ] does not break API compatibility.; - [ ] has been reviewed and agreed to be transitional.; - [x] is more than 1 week old. **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/185
https://github.com/sofa-framework/sofa/pull/185:195,Testability,test,test,195,"This plugin allows us to load images using CImg API. For now this plugin is located in applications/plugins of Sofa, and does not supersede ImageQt/ImagePNG/ImageBMP. Tests and a simple scene to test all the supported formats are provided. An other pull-request will be done to remove ImageQt/ImagePNG/ImageBMP and their posssible dependencies in SofaKernel (e.g libpng), following further discussions. Linked to issue #51 . ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings nor unit test failures.; - [ ] does not break existing scenes.; - [ ] does not break API compatibility.; - [ ] has been reviewed and agreed to be transitional.; - [x] is more than 1 week old. **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/185
https://github.com/sofa-framework/sofa/pull/185:650,Testability,test,test,650,"This plugin allows us to load images using CImg API. For now this plugin is located in applications/plugins of Sofa, and does not supersede ImageQt/ImagePNG/ImageBMP. Tests and a simple scene to test all the supported formats are provided. An other pull-request will be done to remove ImageQt/ImagePNG/ImageBMP and their posssible dependencies in SofaKernel (e.g libpng), following further discussions. Linked to issue #51 . ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings nor unit test failures.; - [ ] does not break existing scenes.; - [ ] does not break API compatibility.; - [ ] has been reviewed and agreed to be transitional.; - [x] is more than 1 week old. **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/185
https://github.com/sofa-framework/sofa/pull/185:179,Usability,simpl,simple,179,"This plugin allows us to load images using CImg API. For now this plugin is located in applications/plugins of Sofa, and does not supersede ImageQt/ImagePNG/ImageBMP. Tests and a simple scene to test all the supported formats are provided. An other pull-request will be done to remove ImageQt/ImagePNG/ImageBMP and their posssible dependencies in SofaKernel (e.g libpng), following further discussions. Linked to issue #51 . ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings nor unit test failures.; - [ ] does not break existing scenes.; - [ ] does not break API compatibility.; - [ ] has been reviewed and agreed to be transitional.; - [x] is more than 1 week old. **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/185
https://github.com/sofa-framework/sofa/issues/186:55,Deployability,Continuous,Continuous,55,This issue is the general discussion about the project Continuous Integration.; Please feel free to share any remark or ongoing work about it.,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/186
https://github.com/sofa-framework/sofa/issues/186:66,Deployability,Integrat,Integration,66,This issue is the general discussion about the project Continuous Integration.; Please feel free to share any remark or ongoing work about it.,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/186
https://github.com/sofa-framework/sofa/issues/186:66,Integrability,Integrat,Integration,66,This issue is the general discussion about the project Continuous Integration.; Please feel free to share any remark or ongoing work about it.,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/186
https://github.com/sofa-framework/sofa/issues/187:55,Usability,User Experience,User Experience,55,This issue is the general discussion about the project User Experience.; Please feel free to share any remark or ongoing work about it.,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/187
https://github.com/sofa-framework/sofa/pull/188:454,Availability,failure,failures,454,Cherry-pick from master to v16.12.; Fix compilation (https://github.com/sofa-framework/sofa/pull/122) due to boost : FileRepository was not compiled if Boost_FILESYSTEM was not found.; Commits 586820f and 6454b77 fixing it. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings nor unit test failures.; - [x] does not break existing scenes.; - [x] does not break API compatibility.; - [x] has been reviewed and agreed to be transitional. **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/188
https://github.com/sofa-framework/sofa/pull/188:323,Integrability,message,message,323,Cherry-pick from master to v16.12.; Fix compilation (https://github.com/sofa-framework/sofa/pull/122) due to boost : FileRepository was not compiled if Boost_FILESYSTEM was not found.; Commits 586820f and 6454b77 fixing it. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings nor unit test failures.; - [x] does not break existing scenes.; - [x] does not break API compatibility.; - [x] has been reviewed and agreed to be transitional. **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/188
https://github.com/sofa-framework/sofa/pull/188:449,Testability,test,test,449,Cherry-pick from master to v16.12.; Fix compilation (https://github.com/sofa-framework/sofa/pull/122) due to boost : FileRepository was not compiled if Boost_FILESYSTEM was not found.; Commits 586820f and 6454b77 fixing it. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings nor unit test failures.; - [x] does not break existing scenes.; - [x] does not break API compatibility.; - [x] has been reviewed and agreed to be transitional. **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/188
https://github.com/sofa-framework/sofa/pull/190:1434,Availability,error,error,1434,"R https://github.com/sofa-framework/sofa/pull/106 taking into account all the feedback and discussion in https://github.com/sofa-framework/sofa/issues/179. This PR contains: ; - a PerComponentLoggingMessageHandler to stores the messages in components in a much cleaner way compared to the existing code in Sofa.; - the old history code is removed but a compatibility layer on top of the new one is provided to ; provide backward compatibility (eg in third party code like qtSofaQuick). ; - the runSofa GUI is slighly updated and improved to make use of the new component. ; - the msg_api is extended to facilitate its use and coherency; - I fixed all around in the code base the mis-usages of printLog eg: if(f_printLog) cout << .... ; - I didn't replaced the f_printLog data field because it would have broken the API too much ; (maybe one day if someone care). Now a bried summary of the new functions in the msg_* API; ```cpp; msg_info() << ""This is a message sended by the this component"" ;; msg_info(other) << ""This is a message sended by the 'other' component"" ;; msg_info(""A String"") << ""This message is not sended by a component"";; ```; Each version also exist in a conditional form eg:; ```cpp ; msg_info_when(!file.valid()) << ""File is not valid"" ; ```. In the previous examples you can also replace 'info' with the type of message you want to emit among:; 'info', 'advice', 'deprecated', 'warning', 'error', 'fatal'. ; ; 'warning', 'error' and 'fatal' and 'deprecated' message cannot be muted with the printLog parameter while 'info','advice',' can. . ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings nor unit test failures.; - [x] does not break existing scenes.; - [x] does not break API compatibility.; - [x] has been reviewed.; - [x] is more than 1 week old. **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/190
https://github.com/sofa-framework/sofa/pull/190:1467,Availability,error,error,1467,"R https://github.com/sofa-framework/sofa/pull/106 taking into account all the feedback and discussion in https://github.com/sofa-framework/sofa/issues/179. This PR contains: ; - a PerComponentLoggingMessageHandler to stores the messages in components in a much cleaner way compared to the existing code in Sofa.; - the old history code is removed but a compatibility layer on top of the new one is provided to ; provide backward compatibility (eg in third party code like qtSofaQuick). ; - the runSofa GUI is slighly updated and improved to make use of the new component. ; - the msg_api is extended to facilitate its use and coherency; - I fixed all around in the code base the mis-usages of printLog eg: if(f_printLog) cout << .... ; - I didn't replaced the f_printLog data field because it would have broken the API too much ; (maybe one day if someone care). Now a bried summary of the new functions in the msg_* API; ```cpp; msg_info() << ""This is a message sended by the this component"" ;; msg_info(other) << ""This is a message sended by the 'other' component"" ;; msg_info(""A String"") << ""This message is not sended by a component"";; ```; Each version also exist in a conditional form eg:; ```cpp ; msg_info_when(!file.valid()) << ""File is not valid"" ; ```. In the previous examples you can also replace 'info' with the type of message you want to emit among:; 'info', 'advice', 'deprecated', 'warning', 'error', 'fatal'. ; ; 'warning', 'error' and 'fatal' and 'deprecated' message cannot be muted with the printLog parameter while 'info','advice',' can. . ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings nor unit test failures.; - [x] does not break existing scenes.; - [x] does not break API compatibility.; - [x] has been reviewed.; - [x] is more than 1 week old. **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/190
https://github.com/sofa-framework/sofa/pull/190:1816,Availability,failure,failures,1816,"R https://github.com/sofa-framework/sofa/pull/106 taking into account all the feedback and discussion in https://github.com/sofa-framework/sofa/issues/179. This PR contains: ; - a PerComponentLoggingMessageHandler to stores the messages in components in a much cleaner way compared to the existing code in Sofa.; - the old history code is removed but a compatibility layer on top of the new one is provided to ; provide backward compatibility (eg in third party code like qtSofaQuick). ; - the runSofa GUI is slighly updated and improved to make use of the new component. ; - the msg_api is extended to facilitate its use and coherency; - I fixed all around in the code base the mis-usages of printLog eg: if(f_printLog) cout << .... ; - I didn't replaced the f_printLog data field because it would have broken the API too much ; (maybe one day if someone care). Now a bried summary of the new functions in the msg_* API; ```cpp; msg_info() << ""This is a message sended by the this component"" ;; msg_info(other) << ""This is a message sended by the 'other' component"" ;; msg_info(""A String"") << ""This message is not sended by a component"";; ```; Each version also exist in a conditional form eg:; ```cpp ; msg_info_when(!file.valid()) << ""File is not valid"" ; ```. In the previous examples you can also replace 'info' with the type of message you want to emit among:; 'info', 'advice', 'deprecated', 'warning', 'error', 'fatal'. ; ; 'warning', 'error' and 'fatal' and 'deprecated' message cannot be muted with the printLog parameter while 'info','advice',' can. . ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings nor unit test failures.; - [x] does not break existing scenes.; - [x] does not break API compatibility.; - [x] has been reviewed.; - [x] is more than 1 week old. **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/190
https://github.com/sofa-framework/sofa/pull/190:540,Deployability,update,updated,540,"This is the return of PR https://github.com/sofa-framework/sofa/pull/106 taking into account all the feedback and discussion in https://github.com/sofa-framework/sofa/issues/179. This PR contains: ; - a PerComponentLoggingMessageHandler to stores the messages in components in a much cleaner way compared to the existing code in Sofa.; - the old history code is removed but a compatibility layer on top of the new one is provided to ; provide backward compatibility (eg in third party code like qtSofaQuick). ; - the runSofa GUI is slighly updated and improved to make use of the new component. ; - the msg_api is extended to facilitate its use and coherency; - I fixed all around in the code base the mis-usages of printLog eg: if(f_printLog) cout << .... ; - I didn't replaced the f_printLog data field because it would have broken the API too much ; (maybe one day if someone care). Now a bried summary of the new functions in the msg_* API; ```cpp; msg_info() << ""This is a message sended by the this component"" ;; msg_info(other) << ""This is a message sended by the 'other' component"" ;; msg_info(""A String"") << ""This message is not sended by a component"";; ```; Each version also exist in a conditional form eg:; ```cpp ; msg_info_when(!file.valid()) << ""File is not valid"" ; ```. In the previous examples you can also replace 'info' with the type of message you want to emit among:; 'info', 'advice', 'deprecated', 'warning', 'error', 'fatal'. ; ; 'warning', 'error' and 'fatal' and 'deprecated' message cannot be muted with the printLog parameter while 'info','advice',' can. . ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings nor unit test failures.; - [x] does not break existing scenes.; - [x] does not break API compatibility.; - [x] has been reviewed.; - [x] is more than 1 week old. **Reviewers will merge only if all th",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/190
https://github.com/sofa-framework/sofa/pull/190:251,Integrability,message,messages,251,"This is the return of PR https://github.com/sofa-framework/sofa/pull/106 taking into account all the feedback and discussion in https://github.com/sofa-framework/sofa/issues/179. This PR contains: ; - a PerComponentLoggingMessageHandler to stores the messages in components in a much cleaner way compared to the existing code in Sofa.; - the old history code is removed but a compatibility layer on top of the new one is provided to ; provide backward compatibility (eg in third party code like qtSofaQuick). ; - the runSofa GUI is slighly updated and improved to make use of the new component. ; - the msg_api is extended to facilitate its use and coherency; - I fixed all around in the code base the mis-usages of printLog eg: if(f_printLog) cout << .... ; - I didn't replaced the f_printLog data field because it would have broken the API too much ; (maybe one day if someone care). Now a bried summary of the new functions in the msg_* API; ```cpp; msg_info() << ""This is a message sended by the this component"" ;; msg_info(other) << ""This is a message sended by the 'other' component"" ;; msg_info(""A String"") << ""This message is not sended by a component"";; ```; Each version also exist in a conditional form eg:; ```cpp ; msg_info_when(!file.valid()) << ""File is not valid"" ; ```. In the previous examples you can also replace 'info' with the type of message you want to emit among:; 'info', 'advice', 'deprecated', 'warning', 'error', 'fatal'. ; ; 'warning', 'error' and 'fatal' and 'deprecated' message cannot be muted with the printLog parameter while 'info','advice',' can. . ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings nor unit test failures.; - [x] does not break existing scenes.; - [x] does not break API compatibility.; - [x] has been reviewed.; - [x] is more than 1 week old. **Reviewers will merge only if all th",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/190
https://github.com/sofa-framework/sofa/pull/190:978,Integrability,message,message,978,"R https://github.com/sofa-framework/sofa/pull/106 taking into account all the feedback and discussion in https://github.com/sofa-framework/sofa/issues/179. This PR contains: ; - a PerComponentLoggingMessageHandler to stores the messages in components in a much cleaner way compared to the existing code in Sofa.; - the old history code is removed but a compatibility layer on top of the new one is provided to ; provide backward compatibility (eg in third party code like qtSofaQuick). ; - the runSofa GUI is slighly updated and improved to make use of the new component. ; - the msg_api is extended to facilitate its use and coherency; - I fixed all around in the code base the mis-usages of printLog eg: if(f_printLog) cout << .... ; - I didn't replaced the f_printLog data field because it would have broken the API too much ; (maybe one day if someone care). Now a bried summary of the new functions in the msg_* API; ```cpp; msg_info() << ""This is a message sended by the this component"" ;; msg_info(other) << ""This is a message sended by the 'other' component"" ;; msg_info(""A String"") << ""This message is not sended by a component"";; ```; Each version also exist in a conditional form eg:; ```cpp ; msg_info_when(!file.valid()) << ""File is not valid"" ; ```. In the previous examples you can also replace 'info' with the type of message you want to emit among:; 'info', 'advice', 'deprecated', 'warning', 'error', 'fatal'. ; ; 'warning', 'error' and 'fatal' and 'deprecated' message cannot be muted with the printLog parameter while 'info','advice',' can. . ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings nor unit test failures.; - [x] does not break existing scenes.; - [x] does not break API compatibility.; - [x] has been reviewed.; - [x] is more than 1 week old. **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/190
https://github.com/sofa-framework/sofa/pull/190:1049,Integrability,message,message,1049,"R https://github.com/sofa-framework/sofa/pull/106 taking into account all the feedback and discussion in https://github.com/sofa-framework/sofa/issues/179. This PR contains: ; - a PerComponentLoggingMessageHandler to stores the messages in components in a much cleaner way compared to the existing code in Sofa.; - the old history code is removed but a compatibility layer on top of the new one is provided to ; provide backward compatibility (eg in third party code like qtSofaQuick). ; - the runSofa GUI is slighly updated and improved to make use of the new component. ; - the msg_api is extended to facilitate its use and coherency; - I fixed all around in the code base the mis-usages of printLog eg: if(f_printLog) cout << .... ; - I didn't replaced the f_printLog data field because it would have broken the API too much ; (maybe one day if someone care). Now a bried summary of the new functions in the msg_* API; ```cpp; msg_info() << ""This is a message sended by the this component"" ;; msg_info(other) << ""This is a message sended by the 'other' component"" ;; msg_info(""A String"") << ""This message is not sended by a component"";; ```; Each version also exist in a conditional form eg:; ```cpp ; msg_info_when(!file.valid()) << ""File is not valid"" ; ```. In the previous examples you can also replace 'info' with the type of message you want to emit among:; 'info', 'advice', 'deprecated', 'warning', 'error', 'fatal'. ; ; 'warning', 'error' and 'fatal' and 'deprecated' message cannot be muted with the printLog parameter while 'info','advice',' can. . ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings nor unit test failures.; - [x] does not break existing scenes.; - [x] does not break API compatibility.; - [x] has been reviewed.; - [x] is more than 1 week old. **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/190
https://github.com/sofa-framework/sofa/pull/190:1123,Integrability,message,message,1123,"R https://github.com/sofa-framework/sofa/pull/106 taking into account all the feedback and discussion in https://github.com/sofa-framework/sofa/issues/179. This PR contains: ; - a PerComponentLoggingMessageHandler to stores the messages in components in a much cleaner way compared to the existing code in Sofa.; - the old history code is removed but a compatibility layer on top of the new one is provided to ; provide backward compatibility (eg in third party code like qtSofaQuick). ; - the runSofa GUI is slighly updated and improved to make use of the new component. ; - the msg_api is extended to facilitate its use and coherency; - I fixed all around in the code base the mis-usages of printLog eg: if(f_printLog) cout << .... ; - I didn't replaced the f_printLog data field because it would have broken the API too much ; (maybe one day if someone care). Now a bried summary of the new functions in the msg_* API; ```cpp; msg_info() << ""This is a message sended by the this component"" ;; msg_info(other) << ""This is a message sended by the 'other' component"" ;; msg_info(""A String"") << ""This message is not sended by a component"";; ```; Each version also exist in a conditional form eg:; ```cpp ; msg_info_when(!file.valid()) << ""File is not valid"" ; ```. In the previous examples you can also replace 'info' with the type of message you want to emit among:; 'info', 'advice', 'deprecated', 'warning', 'error', 'fatal'. ; ; 'warning', 'error' and 'fatal' and 'deprecated' message cannot be muted with the printLog parameter while 'info','advice',' can. . ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings nor unit test failures.; - [x] does not break existing scenes.; - [x] does not break API compatibility.; - [x] has been reviewed.; - [x] is more than 1 week old. **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/190
https://github.com/sofa-framework/sofa/pull/190:1357,Integrability,message,message,1357,"R https://github.com/sofa-framework/sofa/pull/106 taking into account all the feedback and discussion in https://github.com/sofa-framework/sofa/issues/179. This PR contains: ; - a PerComponentLoggingMessageHandler to stores the messages in components in a much cleaner way compared to the existing code in Sofa.; - the old history code is removed but a compatibility layer on top of the new one is provided to ; provide backward compatibility (eg in third party code like qtSofaQuick). ; - the runSofa GUI is slighly updated and improved to make use of the new component. ; - the msg_api is extended to facilitate its use and coherency; - I fixed all around in the code base the mis-usages of printLog eg: if(f_printLog) cout << .... ; - I didn't replaced the f_printLog data field because it would have broken the API too much ; (maybe one day if someone care). Now a bried summary of the new functions in the msg_* API; ```cpp; msg_info() << ""This is a message sended by the this component"" ;; msg_info(other) << ""This is a message sended by the 'other' component"" ;; msg_info(""A String"") << ""This message is not sended by a component"";; ```; Each version also exist in a conditional form eg:; ```cpp ; msg_info_when(!file.valid()) << ""File is not valid"" ; ```. In the previous examples you can also replace 'info' with the type of message you want to emit among:; 'info', 'advice', 'deprecated', 'warning', 'error', 'fatal'. ; ; 'warning', 'error' and 'fatal' and 'deprecated' message cannot be muted with the printLog parameter while 'info','advice',' can. . ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings nor unit test failures.; - [x] does not break existing scenes.; - [x] does not break API compatibility.; - [x] has been reviewed.; - [x] is more than 1 week old. **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/190
https://github.com/sofa-framework/sofa/pull/190:1503,Integrability,message,message,1503,"R https://github.com/sofa-framework/sofa/pull/106 taking into account all the feedback and discussion in https://github.com/sofa-framework/sofa/issues/179. This PR contains: ; - a PerComponentLoggingMessageHandler to stores the messages in components in a much cleaner way compared to the existing code in Sofa.; - the old history code is removed but a compatibility layer on top of the new one is provided to ; provide backward compatibility (eg in third party code like qtSofaQuick). ; - the runSofa GUI is slighly updated and improved to make use of the new component. ; - the msg_api is extended to facilitate its use and coherency; - I fixed all around in the code base the mis-usages of printLog eg: if(f_printLog) cout << .... ; - I didn't replaced the f_printLog data field because it would have broken the API too much ; (maybe one day if someone care). Now a bried summary of the new functions in the msg_* API; ```cpp; msg_info() << ""This is a message sended by the this component"" ;; msg_info(other) << ""This is a message sended by the 'other' component"" ;; msg_info(""A String"") << ""This message is not sended by a component"";; ```; Each version also exist in a conditional form eg:; ```cpp ; msg_info_when(!file.valid()) << ""File is not valid"" ; ```. In the previous examples you can also replace 'info' with the type of message you want to emit among:; 'info', 'advice', 'deprecated', 'warning', 'error', 'fatal'. ; ; 'warning', 'error' and 'fatal' and 'deprecated' message cannot be muted with the printLog parameter while 'info','advice',' can. . ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings nor unit test failures.; - [x] does not break existing scenes.; - [x] does not break API compatibility.; - [x] has been reviewed.; - [x] is more than 1 week old. **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/190
https://github.com/sofa-framework/sofa/pull/190:1685,Integrability,message,message,1685,"R https://github.com/sofa-framework/sofa/pull/106 taking into account all the feedback and discussion in https://github.com/sofa-framework/sofa/issues/179. This PR contains: ; - a PerComponentLoggingMessageHandler to stores the messages in components in a much cleaner way compared to the existing code in Sofa.; - the old history code is removed but a compatibility layer on top of the new one is provided to ; provide backward compatibility (eg in third party code like qtSofaQuick). ; - the runSofa GUI is slighly updated and improved to make use of the new component. ; - the msg_api is extended to facilitate its use and coherency; - I fixed all around in the code base the mis-usages of printLog eg: if(f_printLog) cout << .... ; - I didn't replaced the f_printLog data field because it would have broken the API too much ; (maybe one day if someone care). Now a bried summary of the new functions in the msg_* API; ```cpp; msg_info() << ""This is a message sended by the this component"" ;; msg_info(other) << ""This is a message sended by the 'other' component"" ;; msg_info(""A String"") << ""This message is not sended by a component"";; ```; Each version also exist in a conditional form eg:; ```cpp ; msg_info_when(!file.valid()) << ""File is not valid"" ; ```. In the previous examples you can also replace 'info' with the type of message you want to emit among:; 'info', 'advice', 'deprecated', 'warning', 'error', 'fatal'. ; ; 'warning', 'error' and 'fatal' and 'deprecated' message cannot be muted with the printLog parameter while 'info','advice',' can. . ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings nor unit test failures.; - [x] does not break existing scenes.; - [x] does not break API compatibility.; - [x] has been reviewed.; - [x] is more than 1 week old. **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/190
https://github.com/sofa-framework/sofa/pull/190:614,Modifiability,extend,extended,614,"This is the return of PR https://github.com/sofa-framework/sofa/pull/106 taking into account all the feedback and discussion in https://github.com/sofa-framework/sofa/issues/179. This PR contains: ; - a PerComponentLoggingMessageHandler to stores the messages in components in a much cleaner way compared to the existing code in Sofa.; - the old history code is removed but a compatibility layer on top of the new one is provided to ; provide backward compatibility (eg in third party code like qtSofaQuick). ; - the runSofa GUI is slighly updated and improved to make use of the new component. ; - the msg_api is extended to facilitate its use and coherency; - I fixed all around in the code base the mis-usages of printLog eg: if(f_printLog) cout << .... ; - I didn't replaced the f_printLog data field because it would have broken the API too much ; (maybe one day if someone care). Now a bried summary of the new functions in the msg_* API; ```cpp; msg_info() << ""This is a message sended by the this component"" ;; msg_info(other) << ""This is a message sended by the 'other' component"" ;; msg_info(""A String"") << ""This message is not sended by a component"";; ```; Each version also exist in a conditional form eg:; ```cpp ; msg_info_when(!file.valid()) << ""File is not valid"" ; ```. In the previous examples you can also replace 'info' with the type of message you want to emit among:; 'info', 'advice', 'deprecated', 'warning', 'error', 'fatal'. ; ; 'warning', 'error' and 'fatal' and 'deprecated' message cannot be muted with the printLog parameter while 'info','advice',' can. . ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings nor unit test failures.; - [x] does not break existing scenes.; - [x] does not break API compatibility.; - [x] has been reviewed.; - [x] is more than 1 week old. **Reviewers will merge only if all th",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/190
https://github.com/sofa-framework/sofa/pull/190:1811,Testability,test,test,1811,"R https://github.com/sofa-framework/sofa/pull/106 taking into account all the feedback and discussion in https://github.com/sofa-framework/sofa/issues/179. This PR contains: ; - a PerComponentLoggingMessageHandler to stores the messages in components in a much cleaner way compared to the existing code in Sofa.; - the old history code is removed but a compatibility layer on top of the new one is provided to ; provide backward compatibility (eg in third party code like qtSofaQuick). ; - the runSofa GUI is slighly updated and improved to make use of the new component. ; - the msg_api is extended to facilitate its use and coherency; - I fixed all around in the code base the mis-usages of printLog eg: if(f_printLog) cout << .... ; - I didn't replaced the f_printLog data field because it would have broken the API too much ; (maybe one day if someone care). Now a bried summary of the new functions in the msg_* API; ```cpp; msg_info() << ""This is a message sended by the this component"" ;; msg_info(other) << ""This is a message sended by the 'other' component"" ;; msg_info(""A String"") << ""This message is not sended by a component"";; ```; Each version also exist in a conditional form eg:; ```cpp ; msg_info_when(!file.valid()) << ""File is not valid"" ; ```. In the previous examples you can also replace 'info' with the type of message you want to emit among:; 'info', 'advice', 'deprecated', 'warning', 'error', 'fatal'. ; ; 'warning', 'error' and 'fatal' and 'deprecated' message cannot be muted with the printLog parameter while 'info','advice',' can. . ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings nor unit test failures.; - [x] does not break existing scenes.; - [x] does not break API compatibility.; - [x] has been reviewed.; - [x] is more than 1 week old. **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/190
https://github.com/sofa-framework/sofa/pull/190:101,Usability,feedback,feedback,101,"This is the return of PR https://github.com/sofa-framework/sofa/pull/106 taking into account all the feedback and discussion in https://github.com/sofa-framework/sofa/issues/179. This PR contains: ; - a PerComponentLoggingMessageHandler to stores the messages in components in a much cleaner way compared to the existing code in Sofa.; - the old history code is removed but a compatibility layer on top of the new one is provided to ; provide backward compatibility (eg in third party code like qtSofaQuick). ; - the runSofa GUI is slighly updated and improved to make use of the new component. ; - the msg_api is extended to facilitate its use and coherency; - I fixed all around in the code base the mis-usages of printLog eg: if(f_printLog) cout << .... ; - I didn't replaced the f_printLog data field because it would have broken the API too much ; (maybe one day if someone care). Now a bried summary of the new functions in the msg_* API; ```cpp; msg_info() << ""This is a message sended by the this component"" ;; msg_info(other) << ""This is a message sended by the 'other' component"" ;; msg_info(""A String"") << ""This message is not sended by a component"";; ```; Each version also exist in a conditional form eg:; ```cpp ; msg_info_when(!file.valid()) << ""File is not valid"" ; ```. In the previous examples you can also replace 'info' with the type of message you want to emit among:; 'info', 'advice', 'deprecated', 'warning', 'error', 'fatal'. ; ; 'warning', 'error' and 'fatal' and 'deprecated' message cannot be muted with the printLog parameter while 'info','advice',' can. . ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings nor unit test failures.; - [x] does not break existing scenes.; - [x] does not break API compatibility.; - [x] has been reviewed.; - [x] is more than 1 week old. **Reviewers will merge only if all th",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/190
https://github.com/sofa-framework/sofa/pull/191:342,Availability,failure,failures,342,As requested by @matthieu-nesme in https://github.com/sofa-framework/sofa/issues/149; (but what is the xml ?) . ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings nor unit test failures.; - [x] does not break existing scenes.; - [x] does not break API compatibility.; - [x] has been reviewed and agreed to be transitional.; - [x] is more than 1 week old. **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/191
https://github.com/sofa-framework/sofa/pull/191:211,Integrability,message,message,211,As requested by @matthieu-nesme in https://github.com/sofa-framework/sofa/issues/149; (but what is the xml ?) . ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings nor unit test failures.; - [x] does not break existing scenes.; - [x] does not break API compatibility.; - [x] has been reviewed and agreed to be transitional.; - [x] is more than 1 week old. **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/191
https://github.com/sofa-framework/sofa/pull/191:337,Testability,test,test,337,As requested by @matthieu-nesme in https://github.com/sofa-framework/sofa/issues/149; (but what is the xml ?) . ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings nor unit test failures.; - [x] does not break existing scenes.; - [x] does not break API compatibility.; - [x] has been reviewed and agreed to be transitional.; - [x] is more than 1 week old. **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/191
https://github.com/sofa-framework/sofa/pull/192:565,Availability,failure,failures,565,Small patch to restore ambient component in fake sphere rendering. Was:; ![manyspheres_00000002](https://cloud.githubusercontent.com/assets/11028016/23556748/ef984e7c-002d-11e7-9346-c7208b12f44d.png). Now:; ![manyspheres_00000001](https://cloud.githubusercontent.com/assets/11028016/23556756/f77050b8-002d-11e7-948d-5605c6cd2825.png). ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings nor unit test failures.; - [x] does not break existing scenes.; - [x] does not break API compatibility.; - [x] has been reviewed ; - [x] is more than 1 week old. **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/192
https://github.com/sofa-framework/sofa/pull/192:6,Deployability,patch,patch,6,Small patch to restore ambient component in fake sphere rendering. Was:; ![manyspheres_00000002](https://cloud.githubusercontent.com/assets/11028016/23556748/ef984e7c-002d-11e7-9346-c7208b12f44d.png). Now:; ![manyspheres_00000001](https://cloud.githubusercontent.com/assets/11028016/23556756/f77050b8-002d-11e7-948d-5605c6cd2825.png). ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings nor unit test failures.; - [x] does not break existing scenes.; - [x] does not break API compatibility.; - [x] has been reviewed ; - [x] is more than 1 week old. **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/192
https://github.com/sofa-framework/sofa/pull/192:434,Integrability,message,message,434,Small patch to restore ambient component in fake sphere rendering. Was:; ![manyspheres_00000002](https://cloud.githubusercontent.com/assets/11028016/23556748/ef984e7c-002d-11e7-9346-c7208b12f44d.png). Now:; ![manyspheres_00000001](https://cloud.githubusercontent.com/assets/11028016/23556756/f77050b8-002d-11e7-948d-5605c6cd2825.png). ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings nor unit test failures.; - [x] does not break existing scenes.; - [x] does not break API compatibility.; - [x] has been reviewed ; - [x] is more than 1 week old. **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/192
https://github.com/sofa-framework/sofa/pull/192:560,Testability,test,test,560,Small patch to restore ambient component in fake sphere rendering. Was:; ![manyspheres_00000002](https://cloud.githubusercontent.com/assets/11028016/23556748/ef984e7c-002d-11e7-9346-c7208b12f44d.png). Now:; ![manyspheres_00000001](https://cloud.githubusercontent.com/assets/11028016/23556756/f77050b8-002d-11e7-948d-5605c6cd2825.png). ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings nor unit test failures.; - [x] does not break existing scenes.; - [x] does not break API compatibility.; - [x] has been reviewed ; - [x] is more than 1 week old. **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/192
https://github.com/sofa-framework/sofa/issues/193:119,Deployability,integrat,integrates,119,"When an imported module is modified, the sofa app needs to be closed and launched again so the sofa-python interpreter integrates the modifications.; How to force reloading imported modules so any modification can be integrated when reloading the scene?; (right now, the reload works for modified main scene file, but is always using the original module code)",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/193
https://github.com/sofa-framework/sofa/issues/193:217,Deployability,integrat,integrated,217,"When an imported module is modified, the sofa app needs to be closed and launched again so the sofa-python interpreter integrates the modifications.; How to force reloading imported modules so any modification can be integrated when reloading the scene?; (right now, the reload works for modified main scene file, but is always using the original module code)",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/193
https://github.com/sofa-framework/sofa/issues/193:119,Integrability,integrat,integrates,119,"When an imported module is modified, the sofa app needs to be closed and launched again so the sofa-python interpreter integrates the modifications.; How to force reloading imported modules so any modification can be integrated when reloading the scene?; (right now, the reload works for modified main scene file, but is always using the original module code)",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/193
https://github.com/sofa-framework/sofa/issues/193:217,Integrability,integrat,integrated,217,"When an imported module is modified, the sofa app needs to be closed and launched again so the sofa-python interpreter integrates the modifications.; How to force reloading imported modules so any modification can be integrated when reloading the scene?; (right now, the reload works for modified main scene file, but is always using the original module code)",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/193
https://github.com/sofa-framework/sofa/pull/194:424,Availability,failure,failures,424,PR #139 moved licence.txt into license.LGPL.txt. This changed has not been propagated in the cpack config. I didn't create a branch as only one line is modified. Hope it doesn't break the CI... ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings nor unit test failures.; - [x] does not break existing scenes.; - [x] does not break API compatibility.; - [x] has been reviewed and agreed to be transitional.; - [ ] is more than 1 week old. **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/194
https://github.com/sofa-framework/sofa/pull/194:293,Integrability,message,message,293,PR #139 moved licence.txt into license.LGPL.txt. This changed has not been propagated in the cpack config. I didn't create a branch as only one line is modified. Hope it doesn't break the CI... ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings nor unit test failures.; - [x] does not break existing scenes.; - [x] does not break API compatibility.; - [x] has been reviewed and agreed to be transitional.; - [ ] is more than 1 week old. **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/194
https://github.com/sofa-framework/sofa/pull/194:99,Modifiability,config,config,99,PR #139 moved licence.txt into license.LGPL.txt. This changed has not been propagated in the cpack config. I didn't create a branch as only one line is modified. Hope it doesn't break the CI... ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings nor unit test failures.; - [x] does not break existing scenes.; - [x] does not break API compatibility.; - [x] has been reviewed and agreed to be transitional.; - [ ] is more than 1 week old. **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/194
https://github.com/sofa-framework/sofa/pull/194:419,Testability,test,test,419,PR #139 moved licence.txt into license.LGPL.txt. This changed has not been propagated in the cpack config. I didn't create a branch as only one line is modified. Hope it doesn't break the CI... ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings nor unit test failures.; - [x] does not break existing scenes.; - [x] does not break API compatibility.; - [x] has been reviewed and agreed to be transitional.; - [ ] is more than 1 week old. **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/194
https://github.com/sofa-framework/sofa/pull/195:501,Availability,failure,failures,501,This should avoid us to scroll through the entire build output searching for a crashed unit test (often due to a segfault).; It is just re-printing the output that was already printed. Some dump is still needed to debug the crash (see PR #191). This PR fixes issue #149. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings nor unit test failures.; - [x] does not break existing scenes.; - [x] does not break API compatibility.; - [x] has been reviewed; - [x] is more than 1 week old. **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/195
https://github.com/sofa-framework/sofa/pull/195:370,Integrability,message,message,370,This should avoid us to scroll through the entire build output searching for a crashed unit test (often due to a segfault).; It is just re-printing the output that was already printed. Some dump is still needed to debug the crash (see PR #191). This PR fixes issue #149. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings nor unit test failures.; - [x] does not break existing scenes.; - [x] does not break API compatibility.; - [x] has been reviewed; - [x] is more than 1 week old. **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/195
https://github.com/sofa-framework/sofa/pull/195:12,Safety,avoid,avoid,12,This should avoid us to scroll through the entire build output searching for a crashed unit test (often due to a segfault).; It is just re-printing the output that was already printed. Some dump is still needed to debug the crash (see PR #191). This PR fixes issue #149. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings nor unit test failures.; - [x] does not break existing scenes.; - [x] does not break API compatibility.; - [x] has been reviewed; - [x] is more than 1 week old. **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/195
https://github.com/sofa-framework/sofa/pull/195:92,Testability,test,test,92,This should avoid us to scroll through the entire build output searching for a crashed unit test (often due to a segfault).; It is just re-printing the output that was already printed. Some dump is still needed to debug the crash (see PR #191). This PR fixes issue #149. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings nor unit test failures.; - [x] does not break existing scenes.; - [x] does not break API compatibility.; - [x] has been reviewed; - [x] is more than 1 week old. **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/195
https://github.com/sofa-framework/sofa/pull/195:496,Testability,test,test,496,This should avoid us to scroll through the entire build output searching for a crashed unit test (often due to a segfault).; It is just re-printing the output that was already printed. Some dump is still needed to debug the crash (see PR #191). This PR fixes issue #149. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings nor unit test failures.; - [x] does not break existing scenes.; - [x] does not break API compatibility.; - [x] has been reviewed; - [x] is more than 1 week old. **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/195
https://github.com/sofa-framework/sofa/issues/197:348,Integrability,message,message,348,Currently loader and components that are working with files does not report loading problem ; in a consistent way. . This is bad for both the sofa users and the developers. . So I suggest to make a set of macro (or helper function) that returns the text for the most common scenarios.; Eg of use; ```cpp; msg_error_when( ! file.open() ) << helper::message::UnableToOpenFile(file) ; ; ```. If you have other thinking or solution please share !,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/197
https://github.com/sofa-framework/sofa/issues/197:10,Performance,load,loader,10,Currently loader and components that are working with files does not report loading problem ; in a consistent way. . This is bad for both the sofa users and the developers. . So I suggest to make a set of macro (or helper function) that returns the text for the most common scenarios.; Eg of use; ```cpp; msg_error_when( ! file.open() ) << helper::message::UnableToOpenFile(file) ; ; ```. If you have other thinking or solution please share !,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/197
https://github.com/sofa-framework/sofa/issues/197:76,Performance,load,loading,76,Currently loader and components that are working with files does not report loading problem ; in a consistent way. . This is bad for both the sofa users and the developers. . So I suggest to make a set of macro (or helper function) that returns the text for the most common scenarios.; Eg of use; ```cpp; msg_error_when( ! file.open() ) << helper::message::UnableToOpenFile(file) ; ; ```. If you have other thinking or solution please share !,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/197
https://github.com/sofa-framework/sofa/pull/198:585,Availability,failure,failures,585,This PR is an attempt to solve the problem pointed in Issue #193 . Problem summary: ; Currently in runSofa when reloading the scene only the ScriptController's are reloaded but not the python code imported by the controllers. . This PR:; solve the issue which avoid to restart runSofa each time an imported module used by a ScriptController is changed. . ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings nor unit test failures.; - [ ] does not break existing scenes.; - [ ] does not break API compatibility.; - [ ] has been reviewed.; - [ ] is more than 1 week old. **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/198
https://github.com/sofa-framework/sofa/pull/198:454,Integrability,message,message,454,This PR is an attempt to solve the problem pointed in Issue #193 . Problem summary: ; Currently in runSofa when reloading the scene only the ScriptController's are reloaded but not the python code imported by the controllers. . This PR:; solve the issue which avoid to restart runSofa each time an imported module used by a ScriptController is changed. . ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings nor unit test failures.; - [ ] does not break existing scenes.; - [ ] does not break API compatibility.; - [ ] has been reviewed.; - [ ] is more than 1 week old. **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/198
https://github.com/sofa-framework/sofa/pull/198:260,Safety,avoid,avoid,260,This PR is an attempt to solve the problem pointed in Issue #193 . Problem summary: ; Currently in runSofa when reloading the scene only the ScriptController's are reloaded but not the python code imported by the controllers. . This PR:; solve the issue which avoid to restart runSofa each time an imported module used by a ScriptController is changed. . ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings nor unit test failures.; - [ ] does not break existing scenes.; - [ ] does not break API compatibility.; - [ ] has been reviewed.; - [ ] is more than 1 week old. **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/198
https://github.com/sofa-framework/sofa/pull/198:580,Testability,test,test,580,This PR is an attempt to solve the problem pointed in Issue #193 . Problem summary: ; Currently in runSofa when reloading the scene only the ScriptController's are reloaded but not the python code imported by the controllers. . This PR:; solve the issue which avoid to restart runSofa each time an imported module used by a ScriptController is changed. . ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings nor unit test failures.; - [ ] does not break existing scenes.; - [ ] does not break API compatibility.; - [ ] has been reviewed.; - [ ] is more than 1 week old. **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/198
https://github.com/sofa-framework/sofa/pull/200:162,Availability,error,errors,162,- ADD function run-single-test-subtests executed if a test crashes to run each subtest and avoid results loss.; - EDIT function print-summary to count crashes as errors.; - EDIT XML report on crashed tests. Set duration to 1s to differentiate errors and failures. This should be done by Jenkins JUnit plugin... See https://issues.jenkins-ci.org/browse/JENKINS-4951; - FIX function print-summary on Windows (MinGW bash). See issue #149 . ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings nor unit test failures.; - [x] does not break existing scenes.; - [x] does not break API compatibility.; - [ ] has been reviewed and agreed to be transitional.; - [ ] is more than 1 week old. **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/200
https://github.com/sofa-framework/sofa/pull/200:243,Availability,error,errors,243,- ADD function run-single-test-subtests executed if a test crashes to run each subtest and avoid results loss.; - EDIT function print-summary to count crashes as errors.; - EDIT XML report on crashed tests. Set duration to 1s to differentiate errors and failures. This should be done by Jenkins JUnit plugin... See https://issues.jenkins-ci.org/browse/JENKINS-4951; - FIX function print-summary on Windows (MinGW bash). See issue #149 . ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings nor unit test failures.; - [x] does not break existing scenes.; - [x] does not break API compatibility.; - [ ] has been reviewed and agreed to be transitional.; - [ ] is more than 1 week old. **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/200
https://github.com/sofa-framework/sofa/pull/200:254,Availability,failure,failures,254,- ADD function run-single-test-subtests executed if a test crashes to run each subtest and avoid results loss.; - EDIT function print-summary to count crashes as errors.; - EDIT XML report on crashed tests. Set duration to 1s to differentiate errors and failures. This should be done by Jenkins JUnit plugin... See https://issues.jenkins-ci.org/browse/JENKINS-4951; - FIX function print-summary on Windows (MinGW bash). See issue #149 . ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings nor unit test failures.; - [x] does not break existing scenes.; - [x] does not break API compatibility.; - [ ] has been reviewed and agreed to be transitional.; - [ ] is more than 1 week old. **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/200
https://github.com/sofa-framework/sofa/pull/200:667,Availability,failure,failures,667,- ADD function run-single-test-subtests executed if a test crashes to run each subtest and avoid results loss.; - EDIT function print-summary to count crashes as errors.; - EDIT XML report on crashed tests. Set duration to 1s to differentiate errors and failures. This should be done by Jenkins JUnit plugin... See https://issues.jenkins-ci.org/browse/JENKINS-4951; - FIX function print-summary on Windows (MinGW bash). See issue #149 . ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings nor unit test failures.; - [x] does not break existing scenes.; - [x] does not break API compatibility.; - [ ] has been reviewed and agreed to be transitional.; - [ ] is more than 1 week old. **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/200
https://github.com/sofa-framework/sofa/pull/200:536,Integrability,message,message,536,- ADD function run-single-test-subtests executed if a test crashes to run each subtest and avoid results loss.; - EDIT function print-summary to count crashes as errors.; - EDIT XML report on crashed tests. Set duration to 1s to differentiate errors and failures. This should be done by Jenkins JUnit plugin... See https://issues.jenkins-ci.org/browse/JENKINS-4951; - FIX function print-summary on Windows (MinGW bash). See issue #149 . ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings nor unit test failures.; - [x] does not break existing scenes.; - [x] does not break API compatibility.; - [ ] has been reviewed and agreed to be transitional.; - [ ] is more than 1 week old. **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/200
https://github.com/sofa-framework/sofa/pull/200:301,Modifiability,plugin,plugin,301,- ADD function run-single-test-subtests executed if a test crashes to run each subtest and avoid results loss.; - EDIT function print-summary to count crashes as errors.; - EDIT XML report on crashed tests. Set duration to 1s to differentiate errors and failures. This should be done by Jenkins JUnit plugin... See https://issues.jenkins-ci.org/browse/JENKINS-4951; - FIX function print-summary on Windows (MinGW bash). See issue #149 . ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings nor unit test failures.; - [x] does not break existing scenes.; - [x] does not break API compatibility.; - [ ] has been reviewed and agreed to be transitional.; - [ ] is more than 1 week old. **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/200
https://github.com/sofa-framework/sofa/pull/200:91,Safety,avoid,avoid,91,- ADD function run-single-test-subtests executed if a test crashes to run each subtest and avoid results loss.; - EDIT function print-summary to count crashes as errors.; - EDIT XML report on crashed tests. Set duration to 1s to differentiate errors and failures. This should be done by Jenkins JUnit plugin... See https://issues.jenkins-ci.org/browse/JENKINS-4951; - FIX function print-summary on Windows (MinGW bash). See issue #149 . ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings nor unit test failures.; - [x] does not break existing scenes.; - [x] does not break API compatibility.; - [ ] has been reviewed and agreed to be transitional.; - [ ] is more than 1 week old. **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/200
https://github.com/sofa-framework/sofa/pull/200:26,Testability,test,test-subtests,26,- ADD function run-single-test-subtests executed if a test crashes to run each subtest and avoid results loss.; - EDIT function print-summary to count crashes as errors.; - EDIT XML report on crashed tests. Set duration to 1s to differentiate errors and failures. This should be done by Jenkins JUnit plugin... See https://issues.jenkins-ci.org/browse/JENKINS-4951; - FIX function print-summary on Windows (MinGW bash). See issue #149 . ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings nor unit test failures.; - [x] does not break existing scenes.; - [x] does not break API compatibility.; - [ ] has been reviewed and agreed to be transitional.; - [ ] is more than 1 week old. **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/200
https://github.com/sofa-framework/sofa/pull/200:54,Testability,test,test,54,- ADD function run-single-test-subtests executed if a test crashes to run each subtest and avoid results loss.; - EDIT function print-summary to count crashes as errors.; - EDIT XML report on crashed tests. Set duration to 1s to differentiate errors and failures. This should be done by Jenkins JUnit plugin... See https://issues.jenkins-ci.org/browse/JENKINS-4951; - FIX function print-summary on Windows (MinGW bash). See issue #149 . ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings nor unit test failures.; - [x] does not break existing scenes.; - [x] does not break API compatibility.; - [ ] has been reviewed and agreed to be transitional.; - [ ] is more than 1 week old. **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/200
https://github.com/sofa-framework/sofa/pull/200:200,Testability,test,tests,200,- ADD function run-single-test-subtests executed if a test crashes to run each subtest and avoid results loss.; - EDIT function print-summary to count crashes as errors.; - EDIT XML report on crashed tests. Set duration to 1s to differentiate errors and failures. This should be done by Jenkins JUnit plugin... See https://issues.jenkins-ci.org/browse/JENKINS-4951; - FIX function print-summary on Windows (MinGW bash). See issue #149 . ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings nor unit test failures.; - [x] does not break existing scenes.; - [x] does not break API compatibility.; - [ ] has been reviewed and agreed to be transitional.; - [ ] is more than 1 week old. **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/200
https://github.com/sofa-framework/sofa/pull/200:662,Testability,test,test,662,- ADD function run-single-test-subtests executed if a test crashes to run each subtest and avoid results loss.; - EDIT function print-summary to count crashes as errors.; - EDIT XML report on crashed tests. Set duration to 1s to differentiate errors and failures. This should be done by Jenkins JUnit plugin... See https://issues.jenkins-ci.org/browse/JENKINS-4951; - FIX function print-summary on Windows (MinGW bash). See issue #149 . ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings nor unit test failures.; - [x] does not break existing scenes.; - [x] does not break API compatibility.; - [ ] has been reviewed and agreed to be transitional.; - [ ] is more than 1 week old. **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/200
https://github.com/sofa-framework/sofa/pull/202:461,Availability,failure,failures,461,Enforcing python module reload (to use their eventual modifications). Note it could easily be added manually to the scene we are working on rather than doing it automatically at each scene loading. Based on @damienmarchal code!!!. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings nor unit test failures.; - [x] does not break existing scenes.; - [x] does not break API compatibility.; - [x] has been reviewed and agreed to be transitional.; - [x] is more than 1 week old.; - [x] #204 is merged. **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/202
https://github.com/sofa-framework/sofa/pull/202:330,Integrability,message,message,330,Enforcing python module reload (to use their eventual modifications). Note it could easily be added manually to the scene we are working on rather than doing it automatically at each scene loading. Based on @damienmarchal code!!!. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings nor unit test failures.; - [x] does not break existing scenes.; - [x] does not break API compatibility.; - [x] has been reviewed and agreed to be transitional.; - [x] is more than 1 week old.; - [x] #204 is merged. **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/202
https://github.com/sofa-framework/sofa/pull/202:189,Performance,load,loading,189,Enforcing python module reload (to use their eventual modifications). Note it could easily be added manually to the scene we are working on rather than doing it automatically at each scene loading. Based on @damienmarchal code!!!. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings nor unit test failures.; - [x] does not break existing scenes.; - [x] does not break API compatibility.; - [x] has been reviewed and agreed to be transitional.; - [x] is more than 1 week old.; - [x] #204 is merged. **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/202
https://github.com/sofa-framework/sofa/pull/202:456,Testability,test,test,456,Enforcing python module reload (to use their eventual modifications). Note it could easily be added manually to the scene we are working on rather than doing it automatically at each scene loading. Based on @damienmarchal code!!!. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings nor unit test failures.; - [x] does not break existing scenes.; - [x] does not break API compatibility.; - [x] has been reviewed and agreed to be transitional.; - [x] is more than 1 week old.; - [x] #204 is merged. **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/202
https://github.com/sofa-framework/sofa/issues/203:100,Modifiability,config,configs,100,"In advanced mode, would it be possible to have a link per line to abort all the compilations (every configs/platforms)?. Suggested labels: <!--- see https://github.com/sofa-framework/sofa/labels -->",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/203
https://github.com/sofa-framework/sofa/issues/203:66,Safety,abort,abort,66,"In advanced mode, would it be possible to have a link per line to abort all the compilations (every configs/platforms)?. Suggested labels: <!--- see https://github.com/sofa-framework/sofa/labels -->",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/203
https://github.com/sofa-framework/sofa/pull/204:355,Availability,failure,failures,355,"in order to be informed when a scene is loaded. WARNING: each SceneLoader's loading function must call ""notifyLoadingScene"". ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings nor unit test failures.; - [x] does not break existing scenes.; - [x] does not break API compatibility.; - [ ] has been reviewed and agreed to be transitional.; - [x] is more than 1 week old. **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/204
https://github.com/sofa-framework/sofa/pull/204:224,Integrability,message,message,224,"in order to be informed when a scene is loaded. WARNING: each SceneLoader's loading function must call ""notifyLoadingScene"". ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings nor unit test failures.; - [x] does not break existing scenes.; - [x] does not break API compatibility.; - [ ] has been reviewed and agreed to be transitional.; - [x] is more than 1 week old. **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/204
https://github.com/sofa-framework/sofa/pull/204:40,Performance,load,loaded,40,"in order to be informed when a scene is loaded. WARNING: each SceneLoader's loading function must call ""notifyLoadingScene"". ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings nor unit test failures.; - [x] does not break existing scenes.; - [x] does not break API compatibility.; - [ ] has been reviewed and agreed to be transitional.; - [x] is more than 1 week old. **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/204
https://github.com/sofa-framework/sofa/pull/204:76,Performance,load,loading,76,"in order to be informed when a scene is loaded. WARNING: each SceneLoader's loading function must call ""notifyLoadingScene"". ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings nor unit test failures.; - [x] does not break existing scenes.; - [x] does not break API compatibility.; - [ ] has been reviewed and agreed to be transitional.; - [x] is more than 1 week old. **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/204
https://github.com/sofa-framework/sofa/pull/204:350,Testability,test,test,350,"in order to be informed when a scene is loaded. WARNING: each SceneLoader's loading function must call ""notifyLoadingScene"". ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings nor unit test failures.; - [x] does not break existing scenes.; - [x] does not break API compatibility.; - [ ] has been reviewed and agreed to be transitional.; - [x] is more than 1 week old. **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/204
https://github.com/sofa-framework/sofa/pull/205:6,Availability,error,error,6,"- FIX error [""cannot create directory: File name too long""](https://ci.inria.fr/sofa-ci/job/windows7_VS-2013_options_amd64/579/console) by improving subtests listing regex.; - FIX error [""tail: illegal option -- -""](https://ci.inria.fr/sofa-ci/job/centos_clang-3.4_options/387/console) by removing crash dump from log summary (dump can be found in test report and build log).; - ADD cosmetic changes. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings nor unit test failures.; - [x] does not break existing scenes.; - [x] does not break API compatibility.; - [x] has been reviewed and agreed to be transitional.; - [x] is more than 1 week old. **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/205
https://github.com/sofa-framework/sofa/pull/205:180,Availability,error,error,180,"- FIX error [""cannot create directory: File name too long""](https://ci.inria.fr/sofa-ci/job/windows7_VS-2013_options_amd64/579/console) by improving subtests listing regex.; - FIX error [""tail: illegal option -- -""](https://ci.inria.fr/sofa-ci/job/centos_clang-3.4_options/387/console) by removing crash dump from log summary (dump can be found in test report and build log).; - ADD cosmetic changes. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings nor unit test failures.; - [x] does not break existing scenes.; - [x] does not break API compatibility.; - [x] has been reviewed and agreed to be transitional.; - [x] is more than 1 week old. **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/205
https://github.com/sofa-framework/sofa/pull/205:631,Availability,failure,failures,631,"- FIX error [""cannot create directory: File name too long""](https://ci.inria.fr/sofa-ci/job/windows7_VS-2013_options_amd64/579/console) by improving subtests listing regex.; - FIX error [""tail: illegal option -- -""](https://ci.inria.fr/sofa-ci/job/centos_clang-3.4_options/387/console) by removing crash dump from log summary (dump can be found in test report and build log).; - ADD cosmetic changes. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings nor unit test failures.; - [x] does not break existing scenes.; - [x] does not break API compatibility.; - [x] has been reviewed and agreed to be transitional.; - [x] is more than 1 week old. **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/205
https://github.com/sofa-framework/sofa/pull/205:500,Integrability,message,message,500,"- FIX error [""cannot create directory: File name too long""](https://ci.inria.fr/sofa-ci/job/windows7_VS-2013_options_amd64/579/console) by improving subtests listing regex.; - FIX error [""tail: illegal option -- -""](https://ci.inria.fr/sofa-ci/job/centos_clang-3.4_options/387/console) by removing crash dump from log summary (dump can be found in test report and build log).; - ADD cosmetic changes. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings nor unit test failures.; - [x] does not break existing scenes.; - [x] does not break API compatibility.; - [x] has been reviewed and agreed to be transitional.; - [x] is more than 1 week old. **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/205
https://github.com/sofa-framework/sofa/pull/205:314,Testability,log,log,314,"- FIX error [""cannot create directory: File name too long""](https://ci.inria.fr/sofa-ci/job/windows7_VS-2013_options_amd64/579/console) by improving subtests listing regex.; - FIX error [""tail: illegal option -- -""](https://ci.inria.fr/sofa-ci/job/centos_clang-3.4_options/387/console) by removing crash dump from log summary (dump can be found in test report and build log).; - ADD cosmetic changes. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings nor unit test failures.; - [x] does not break existing scenes.; - [x] does not break API compatibility.; - [x] has been reviewed and agreed to be transitional.; - [x] is more than 1 week old. **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/205
https://github.com/sofa-framework/sofa/pull/205:348,Testability,test,test,348,"- FIX error [""cannot create directory: File name too long""](https://ci.inria.fr/sofa-ci/job/windows7_VS-2013_options_amd64/579/console) by improving subtests listing regex.; - FIX error [""tail: illegal option -- -""](https://ci.inria.fr/sofa-ci/job/centos_clang-3.4_options/387/console) by removing crash dump from log summary (dump can be found in test report and build log).; - ADD cosmetic changes. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings nor unit test failures.; - [x] does not break existing scenes.; - [x] does not break API compatibility.; - [x] has been reviewed and agreed to be transitional.; - [x] is more than 1 week old. **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/205
https://github.com/sofa-framework/sofa/pull/205:370,Testability,log,log,370,"- FIX error [""cannot create directory: File name too long""](https://ci.inria.fr/sofa-ci/job/windows7_VS-2013_options_amd64/579/console) by improving subtests listing regex.; - FIX error [""tail: illegal option -- -""](https://ci.inria.fr/sofa-ci/job/centos_clang-3.4_options/387/console) by removing crash dump from log summary (dump can be found in test report and build log).; - ADD cosmetic changes. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings nor unit test failures.; - [x] does not break existing scenes.; - [x] does not break API compatibility.; - [x] has been reviewed and agreed to be transitional.; - [x] is more than 1 week old. **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/205
https://github.com/sofa-framework/sofa/pull/205:626,Testability,test,test,626,"- FIX error [""cannot create directory: File name too long""](https://ci.inria.fr/sofa-ci/job/windows7_VS-2013_options_amd64/579/console) by improving subtests listing regex.; - FIX error [""tail: illegal option -- -""](https://ci.inria.fr/sofa-ci/job/centos_clang-3.4_options/387/console) by removing crash dump from log summary (dump can be found in test report and build log).; - ADD cosmetic changes. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings nor unit test failures.; - [x] does not break existing scenes.; - [x] does not break API compatibility.; - [x] has been reviewed and agreed to be transitional.; - [x] is more than 1 week old. **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/205
https://github.com/sofa-framework/sofa/pull/206:976,Availability,robust,robust,976,"Summery of the problem statement:; currently in sofa there is not rules to describe colors inthe data fields. Consequently some components use Data, others rely on Data and others are using a combination of Data with private float r,g,b,a member. So there are component that accepts color by string ""blue"" or ""#aabbccdd"", other works by passing ""0 1 0 1"" while others ""0 1 2"". This lack of consistency in a problem in term of user interface design which impact XML, python scene as all as in GUIs like runSofa or qtQuickSofa. To solve that I replace the existing data fields with a dedicated type for color (see defaulttype::RGBAColor introduced in PR ##119) . The advantages are multiple:; - expose color in a consistent way to the users.; - all the components now supports the following way to set color: ""blue"", ""0 0 1 1"", ""0 0 1"", ""#0000AAAA"", ""#0000AA"", ""#00AA"", ""#00A"",; - the code to convert the string to a RGBAColor is no more duplicated in component and is now more robust and reports more errors to the users.; - the behavior of the RGBAColor public API is now tested in Color_test.cpp. The disadvantage is that despite I try not to break things (especially in scene) ... it may happens (brecause the commit is rather big & touch a lot of files). So please test it on one or two scene of your choice and report problem. This PR depends on PR #119; This PR replace PR #124 ; This PR solve the Issue #64. Checklist to be merge:. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings nor unit test failures.; - [x] does not break existing scenes.; - [x] does may break API compatibility.; - [x] has been reviewed.; - [x] is more than 1 week old. **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/206
https://github.com/sofa-framework/sofa/pull/206:1000,Availability,error,errors,1000,"Summery of the problem statement:; currently in sofa there is not rules to describe colors inthe data fields. Consequently some components use Data, others rely on Data and others are using a combination of Data with private float r,g,b,a member. So there are component that accepts color by string ""blue"" or ""#aabbccdd"", other works by passing ""0 1 0 1"" while others ""0 1 2"". This lack of consistency in a problem in term of user interface design which impact XML, python scene as all as in GUIs like runSofa or qtQuickSofa. To solve that I replace the existing data fields with a dedicated type for color (see defaulttype::RGBAColor introduced in PR ##119) . The advantages are multiple:; - expose color in a consistent way to the users.; - all the components now supports the following way to set color: ""blue"", ""0 0 1 1"", ""0 0 1"", ""#0000AAAA"", ""#0000AA"", ""#00AA"", ""#00A"",; - the code to convert the string to a RGBAColor is no more duplicated in component and is now more robust and reports more errors to the users.; - the behavior of the RGBAColor public API is now tested in Color_test.cpp. The disadvantage is that despite I try not to break things (especially in scene) ... it may happens (brecause the commit is rather big & touch a lot of files). So please test it on one or two scene of your choice and report problem. This PR depends on PR #119; This PR replace PR #124 ; This PR solve the Issue #64. Checklist to be merge:. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings nor unit test failures.; - [x] does not break existing scenes.; - [x] does may break API compatibility.; - [x] has been reviewed.; - [x] is more than 1 week old. **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/206
https://github.com/sofa-framework/sofa/pull/206:1668,Availability,failure,failures,1668,"Summery of the problem statement:; currently in sofa there is not rules to describe colors inthe data fields. Consequently some components use Data, others rely on Data and others are using a combination of Data with private float r,g,b,a member. So there are component that accepts color by string ""blue"" or ""#aabbccdd"", other works by passing ""0 1 0 1"" while others ""0 1 2"". This lack of consistency in a problem in term of user interface design which impact XML, python scene as all as in GUIs like runSofa or qtQuickSofa. To solve that I replace the existing data fields with a dedicated type for color (see defaulttype::RGBAColor introduced in PR ##119) . The advantages are multiple:; - expose color in a consistent way to the users.; - all the components now supports the following way to set color: ""blue"", ""0 0 1 1"", ""0 0 1"", ""#0000AAAA"", ""#0000AA"", ""#00AA"", ""#00A"",; - the code to convert the string to a RGBAColor is no more duplicated in component and is now more robust and reports more errors to the users.; - the behavior of the RGBAColor public API is now tested in Color_test.cpp. The disadvantage is that despite I try not to break things (especially in scene) ... it may happens (brecause the commit is rather big & touch a lot of files). So please test it on one or two scene of your choice and report problem. This PR depends on PR #119; This PR replace PR #124 ; This PR solve the Issue #64. Checklist to be merge:. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings nor unit test failures.; - [x] does not break existing scenes.; - [x] does may break API compatibility.; - [x] has been reviewed.; - [x] is more than 1 week old. **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/206
https://github.com/sofa-framework/sofa/pull/206:431,Integrability,interface,interface,431,"Summery of the problem statement:; currently in sofa there is not rules to describe colors inthe data fields. Consequently some components use Data, others rely on Data and others are using a combination of Data with private float r,g,b,a member. So there are component that accepts color by string ""blue"" or ""#aabbccdd"", other works by passing ""0 1 0 1"" while others ""0 1 2"". This lack of consistency in a problem in term of user interface design which impact XML, python scene as all as in GUIs like runSofa or qtQuickSofa. To solve that I replace the existing data fields with a dedicated type for color (see defaulttype::RGBAColor introduced in PR ##119) . The advantages are multiple:; - expose color in a consistent way to the users.; - all the components now supports the following way to set color: ""blue"", ""0 0 1 1"", ""0 0 1"", ""#0000AAAA"", ""#0000AA"", ""#00AA"", ""#00A"",; - the code to convert the string to a RGBAColor is no more duplicated in component and is now more robust and reports more errors to the users.; - the behavior of the RGBAColor public API is now tested in Color_test.cpp. The disadvantage is that despite I try not to break things (especially in scene) ... it may happens (brecause the commit is rather big & touch a lot of files). So please test it on one or two scene of your choice and report problem. This PR depends on PR #119; This PR replace PR #124 ; This PR solve the Issue #64. Checklist to be merge:. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings nor unit test failures.; - [x] does not break existing scenes.; - [x] does may break API compatibility.; - [x] has been reviewed.; - [x] is more than 1 week old. **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/206
https://github.com/sofa-framework/sofa/pull/206:1339,Integrability,depend,depends,1339,"Summery of the problem statement:; currently in sofa there is not rules to describe colors inthe data fields. Consequently some components use Data, others rely on Data and others are using a combination of Data with private float r,g,b,a member. So there are component that accepts color by string ""blue"" or ""#aabbccdd"", other works by passing ""0 1 0 1"" while others ""0 1 2"". This lack of consistency in a problem in term of user interface design which impact XML, python scene as all as in GUIs like runSofa or qtQuickSofa. To solve that I replace the existing data fields with a dedicated type for color (see defaulttype::RGBAColor introduced in PR ##119) . The advantages are multiple:; - expose color in a consistent way to the users.; - all the components now supports the following way to set color: ""blue"", ""0 0 1 1"", ""0 0 1"", ""#0000AAAA"", ""#0000AA"", ""#00AA"", ""#00A"",; - the code to convert the string to a RGBAColor is no more duplicated in component and is now more robust and reports more errors to the users.; - the behavior of the RGBAColor public API is now tested in Color_test.cpp. The disadvantage is that despite I try not to break things (especially in scene) ... it may happens (brecause the commit is rather big & touch a lot of files). So please test it on one or two scene of your choice and report problem. This PR depends on PR #119; This PR replace PR #124 ; This PR solve the Issue #64. Checklist to be merge:. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings nor unit test failures.; - [x] does not break existing scenes.; - [x] does may break API compatibility.; - [x] has been reviewed.; - [x] is more than 1 week old. **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/206
https://github.com/sofa-framework/sofa/pull/206:1537,Integrability,message,message,1537,"Summery of the problem statement:; currently in sofa there is not rules to describe colors inthe data fields. Consequently some components use Data, others rely on Data and others are using a combination of Data with private float r,g,b,a member. So there are component that accepts color by string ""blue"" or ""#aabbccdd"", other works by passing ""0 1 0 1"" while others ""0 1 2"". This lack of consistency in a problem in term of user interface design which impact XML, python scene as all as in GUIs like runSofa or qtQuickSofa. To solve that I replace the existing data fields with a dedicated type for color (see defaulttype::RGBAColor introduced in PR ##119) . The advantages are multiple:; - expose color in a consistent way to the users.; - all the components now supports the following way to set color: ""blue"", ""0 0 1 1"", ""0 0 1"", ""#0000AAAA"", ""#0000AA"", ""#00AA"", ""#00A"",; - the code to convert the string to a RGBAColor is no more duplicated in component and is now more robust and reports more errors to the users.; - the behavior of the RGBAColor public API is now tested in Color_test.cpp. The disadvantage is that despite I try not to break things (especially in scene) ... it may happens (brecause the commit is rather big & touch a lot of files). So please test it on one or two scene of your choice and report problem. This PR depends on PR #119; This PR replace PR #124 ; This PR solve the Issue #64. Checklist to be merge:. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings nor unit test failures.; - [x] does not break existing scenes.; - [x] does may break API compatibility.; - [x] has been reviewed.; - [x] is more than 1 week old. **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/206
https://github.com/sofa-framework/sofa/pull/206:693,Security,expose,expose,693,"Summery of the problem statement:; currently in sofa there is not rules to describe colors inthe data fields. Consequently some components use Data, others rely on Data and others are using a combination of Data with private float r,g,b,a member. So there are component that accepts color by string ""blue"" or ""#aabbccdd"", other works by passing ""0 1 0 1"" while others ""0 1 2"". This lack of consistency in a problem in term of user interface design which impact XML, python scene as all as in GUIs like runSofa or qtQuickSofa. To solve that I replace the existing data fields with a dedicated type for color (see defaulttype::RGBAColor introduced in PR ##119) . The advantages are multiple:; - expose color in a consistent way to the users.; - all the components now supports the following way to set color: ""blue"", ""0 0 1 1"", ""0 0 1"", ""#0000AAAA"", ""#0000AA"", ""#00AA"", ""#00A"",; - the code to convert the string to a RGBAColor is no more duplicated in component and is now more robust and reports more errors to the users.; - the behavior of the RGBAColor public API is now tested in Color_test.cpp. The disadvantage is that despite I try not to break things (especially in scene) ... it may happens (brecause the commit is rather big & touch a lot of files). So please test it on one or two scene of your choice and report problem. This PR depends on PR #119; This PR replace PR #124 ; This PR solve the Issue #64. Checklist to be merge:. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings nor unit test failures.; - [x] does not break existing scenes.; - [x] does may break API compatibility.; - [x] has been reviewed.; - [x] is more than 1 week old. **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/206
https://github.com/sofa-framework/sofa/pull/206:1072,Testability,test,tested,1072,"Summery of the problem statement:; currently in sofa there is not rules to describe colors inthe data fields. Consequently some components use Data, others rely on Data and others are using a combination of Data with private float r,g,b,a member. So there are component that accepts color by string ""blue"" or ""#aabbccdd"", other works by passing ""0 1 0 1"" while others ""0 1 2"". This lack of consistency in a problem in term of user interface design which impact XML, python scene as all as in GUIs like runSofa or qtQuickSofa. To solve that I replace the existing data fields with a dedicated type for color (see defaulttype::RGBAColor introduced in PR ##119) . The advantages are multiple:; - expose color in a consistent way to the users.; - all the components now supports the following way to set color: ""blue"", ""0 0 1 1"", ""0 0 1"", ""#0000AAAA"", ""#0000AA"", ""#00AA"", ""#00A"",; - the code to convert the string to a RGBAColor is no more duplicated in component and is now more robust and reports more errors to the users.; - the behavior of the RGBAColor public API is now tested in Color_test.cpp. The disadvantage is that despite I try not to break things (especially in scene) ... it may happens (brecause the commit is rather big & touch a lot of files). So please test it on one or two scene of your choice and report problem. This PR depends on PR #119; This PR replace PR #124 ; This PR solve the Issue #64. Checklist to be merge:. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings nor unit test failures.; - [x] does not break existing scenes.; - [x] does may break API compatibility.; - [x] has been reviewed.; - [x] is more than 1 week old. **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/206
https://github.com/sofa-framework/sofa/pull/206:1268,Testability,test,test,1268,"Summery of the problem statement:; currently in sofa there is not rules to describe colors inthe data fields. Consequently some components use Data, others rely on Data and others are using a combination of Data with private float r,g,b,a member. So there are component that accepts color by string ""blue"" or ""#aabbccdd"", other works by passing ""0 1 0 1"" while others ""0 1 2"". This lack of consistency in a problem in term of user interface design which impact XML, python scene as all as in GUIs like runSofa or qtQuickSofa. To solve that I replace the existing data fields with a dedicated type for color (see defaulttype::RGBAColor introduced in PR ##119) . The advantages are multiple:; - expose color in a consistent way to the users.; - all the components now supports the following way to set color: ""blue"", ""0 0 1 1"", ""0 0 1"", ""#0000AAAA"", ""#0000AA"", ""#00AA"", ""#00A"",; - the code to convert the string to a RGBAColor is no more duplicated in component and is now more robust and reports more errors to the users.; - the behavior of the RGBAColor public API is now tested in Color_test.cpp. The disadvantage is that despite I try not to break things (especially in scene) ... it may happens (brecause the commit is rather big & touch a lot of files). So please test it on one or two scene of your choice and report problem. This PR depends on PR #119; This PR replace PR #124 ; This PR solve the Issue #64. Checklist to be merge:. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings nor unit test failures.; - [x] does not break existing scenes.; - [x] does may break API compatibility.; - [x] has been reviewed.; - [x] is more than 1 week old. **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/206
https://github.com/sofa-framework/sofa/pull/206:1663,Testability,test,test,1663,"Summery of the problem statement:; currently in sofa there is not rules to describe colors inthe data fields. Consequently some components use Data, others rely on Data and others are using a combination of Data with private float r,g,b,a member. So there are component that accepts color by string ""blue"" or ""#aabbccdd"", other works by passing ""0 1 0 1"" while others ""0 1 2"". This lack of consistency in a problem in term of user interface design which impact XML, python scene as all as in GUIs like runSofa or qtQuickSofa. To solve that I replace the existing data fields with a dedicated type for color (see defaulttype::RGBAColor introduced in PR ##119) . The advantages are multiple:; - expose color in a consistent way to the users.; - all the components now supports the following way to set color: ""blue"", ""0 0 1 1"", ""0 0 1"", ""#0000AAAA"", ""#0000AA"", ""#00AA"", ""#00A"",; - the code to convert the string to a RGBAColor is no more duplicated in component and is now more robust and reports more errors to the users.; - the behavior of the RGBAColor public API is now tested in Color_test.cpp. The disadvantage is that despite I try not to break things (especially in scene) ... it may happens (brecause the commit is rather big & touch a lot of files). So please test it on one or two scene of your choice and report problem. This PR depends on PR #119; This PR replace PR #124 ; This PR solve the Issue #64. Checklist to be merge:. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings nor unit test failures.; - [x] does not break existing scenes.; - [x] does may break API compatibility.; - [x] has been reviewed.; - [x] is more than 1 week old. **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/206
https://github.com/sofa-framework/sofa/pull/207:230,Availability,failure,failures,230,______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings nor unit test failures.; - [x] does not break existing scenes.; - [x] does not break API compatibility.; - [x] has been reviewed and agreed to be transitional.; - [x] is more than 1 week old. **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/207
https://github.com/sofa-framework/sofa/pull/207:99,Integrability,message,message,99,______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings nor unit test failures.; - [x] does not break existing scenes.; - [x] does not break API compatibility.; - [x] has been reviewed and agreed to be transitional.; - [x] is more than 1 week old. **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/207
https://github.com/sofa-framework/sofa/pull/207:225,Testability,test,test,225,______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings nor unit test failures.; - [x] does not break existing scenes.; - [x] does not break API compatibility.; - [x] has been reviewed and agreed to be transitional.; - [x] is more than 1 week old. **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/207
https://github.com/sofa-framework/sofa/pull/208:176,Availability,avail,available,176,"Add virtuals functions in image API. Problem : the virtual class ImageTransform doesn't have transformations functions (translation, rotation, scale). These functions are only available for ImageLPTransform type. (fix needed for an incoming feature in sofaqtquick). ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings nor unit test failures.; - [x] does not break existing scenes.; - [x] does not break API compatibility.; - [x] has been reviewed and agreed to be transitional.; - [ ] is more than 1 week old. **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/208
https://github.com/sofa-framework/sofa/pull/208:496,Availability,failure,failures,496,"Add virtuals functions in image API. Problem : the virtual class ImageTransform doesn't have transformations functions (translation, rotation, scale). These functions are only available for ImageLPTransform type. (fix needed for an incoming feature in sofaqtquick). ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings nor unit test failures.; - [x] does not break existing scenes.; - [x] does not break API compatibility.; - [x] has been reviewed and agreed to be transitional.; - [ ] is more than 1 week old. **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/208
https://github.com/sofa-framework/sofa/pull/208:365,Integrability,message,message,365,"Add virtuals functions in image API. Problem : the virtual class ImageTransform doesn't have transformations functions (translation, rotation, scale). These functions are only available for ImageLPTransform type. (fix needed for an incoming feature in sofaqtquick). ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings nor unit test failures.; - [x] does not break existing scenes.; - [x] does not break API compatibility.; - [x] has been reviewed and agreed to be transitional.; - [ ] is more than 1 week old. **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/208
https://github.com/sofa-framework/sofa/pull/208:491,Testability,test,test,491,"Add virtuals functions in image API. Problem : the virtual class ImageTransform doesn't have transformations functions (translation, rotation, scale). These functions are only available for ImageLPTransform type. (fix needed for an incoming feature in sofaqtquick). ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings nor unit test failures.; - [x] does not break existing scenes.; - [x] does not break API compatibility.; - [x] has been reviewed and agreed to be transitional.; - [ ] is more than 1 week old. **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/208
https://github.com/sofa-framework/sofa/pull/209:367,Availability,failure,failures,367,"in ForceField_test, {Multi,Multi2}Mapping_test.; (+ minor cleaning). EDIT: I also added a missing automatic test for MultiMapping::getK. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings nor unit test failures.; - [x] does not break existing scenes.; - [x] does not break API compatibility.; - [x] has been reviewed and agreed to be transitional.; - [x] is more than 1 week old. **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/209
https://github.com/sofa-framework/sofa/pull/209:236,Integrability,message,message,236,"in ForceField_test, {Multi,Multi2}Mapping_test.; (+ minor cleaning). EDIT: I also added a missing automatic test for MultiMapping::getK. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings nor unit test failures.; - [x] does not break existing scenes.; - [x] does not break API compatibility.; - [x] has been reviewed and agreed to be transitional.; - [x] is more than 1 week old. **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/209
https://github.com/sofa-framework/sofa/pull/209:108,Testability,test,test,108,"in ForceField_test, {Multi,Multi2}Mapping_test.; (+ minor cleaning). EDIT: I also added a missing automatic test for MultiMapping::getK. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings nor unit test failures.; - [x] does not break existing scenes.; - [x] does not break API compatibility.; - [x] has been reviewed and agreed to be transitional.; - [x] is more than 1 week old. **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/209
https://github.com/sofa-framework/sofa/pull/209:362,Testability,test,test,362,"in ForceField_test, {Multi,Multi2}Mapping_test.; (+ minor cleaning). EDIT: I also added a missing automatic test for MultiMapping::getK. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings nor unit test failures.; - [x] does not break existing scenes.; - [x] does not break API compatibility.; - [x] has been reviewed and agreed to be transitional.; - [x] is more than 1 week old. **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/209
https://github.com/sofa-framework/sofa/issues/210:52,Modifiability,plugin,plugin,52,"Add a SOFAPYTHON_PYTHON3 cmake option to SofaPython plugin, to use Python 3 C-API",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/210
https://github.com/sofa-framework/sofa/issues/211:36,Availability,error,errors,36,"Some unit tests are generating sofa errors w/o generating gtest errors (e.g. SofaBoundaryCondition_test). To detect such problems, I had added a msg handler that was returning a gtest error at each sofa error.; It was not good enough because some tests can generate sofa errors on purpose.; But the new implementation defeat the main purpose.",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/211
https://github.com/sofa-framework/sofa/issues/211:64,Availability,error,errors,64,"Some unit tests are generating sofa errors w/o generating gtest errors (e.g. SofaBoundaryCondition_test). To detect such problems, I had added a msg handler that was returning a gtest error at each sofa error.; It was not good enough because some tests can generate sofa errors on purpose.; But the new implementation defeat the main purpose.",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/211
https://github.com/sofa-framework/sofa/issues/211:184,Availability,error,error,184,"Some unit tests are generating sofa errors w/o generating gtest errors (e.g. SofaBoundaryCondition_test). To detect such problems, I had added a msg handler that was returning a gtest error at each sofa error.; It was not good enough because some tests can generate sofa errors on purpose.; But the new implementation defeat the main purpose.",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/211
https://github.com/sofa-framework/sofa/issues/211:203,Availability,error,error,203,"Some unit tests are generating sofa errors w/o generating gtest errors (e.g. SofaBoundaryCondition_test). To detect such problems, I had added a msg handler that was returning a gtest error at each sofa error.; It was not good enough because some tests can generate sofa errors on purpose.; But the new implementation defeat the main purpose.",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/211
https://github.com/sofa-framework/sofa/issues/211:271,Availability,error,errors,271,"Some unit tests are generating sofa errors w/o generating gtest errors (e.g. SofaBoundaryCondition_test). To detect such problems, I had added a msg handler that was returning a gtest error at each sofa error.; It was not good enough because some tests can generate sofa errors on purpose.; But the new implementation defeat the main purpose.",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/211
https://github.com/sofa-framework/sofa/issues/211:109,Safety,detect,detect,109,"Some unit tests are generating sofa errors w/o generating gtest errors (e.g. SofaBoundaryCondition_test). To detect such problems, I had added a msg handler that was returning a gtest error at each sofa error.; It was not good enough because some tests can generate sofa errors on purpose.; But the new implementation defeat the main purpose.",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/211
https://github.com/sofa-framework/sofa/issues/211:10,Testability,test,tests,10,"Some unit tests are generating sofa errors w/o generating gtest errors (e.g. SofaBoundaryCondition_test). To detect such problems, I had added a msg handler that was returning a gtest error at each sofa error.; It was not good enough because some tests can generate sofa errors on purpose.; But the new implementation defeat the main purpose.",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/211
https://github.com/sofa-framework/sofa/issues/211:247,Testability,test,tests,247,"Some unit tests are generating sofa errors w/o generating gtest errors (e.g. SofaBoundaryCondition_test). To detect such problems, I had added a msg handler that was returning a gtest error at each sofa error.; It was not good enough because some tests can generate sofa errors on purpose.; But the new implementation defeat the main purpose.",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/211
https://github.com/sofa-framework/sofa/pull/213:101,Availability,error,error,101,"Problem statement:; Historically a lot of tests were implemented with the assumption that warning or error messages were tests failure. This assumption was problematic as it favor the testing of code paths that does not generate warning or errors instead of testing all the possible paths. To favor both valid and invalid paths this implicit behavior was remove and and made explicit using the ExpectMessage and MessageAsTestFailure raii's. In the process the old behavior of generating failure on errors was lost. . The PR mix the two and: ; - restores this old behavior by default so a test that specify nothing will fail on warning and error.; - but in addition, each tests class/function/bloc can now specify how a specific bloc can react to a message. This can be done using a new syntax taken inspired mimicking the one from gtest. ; - improve the way test failures about warning and error are reported:; https://ci.inria.fr/sofa-ci/job/ubuntu_gcc-4.8_options/5074/testReport/junit/(root)/RigidRigidMappingTest_0/test_translation/; . Example: ; ```cpp; class MyTest : public Sofa_test<>; ; /// This test will fail if a warning/error message is send because the test inherit from sofa_test; void defaultTestBehavior(); {; ....; }. /// This test should generate failure if NO warning and NO Error message is emitted; void catchingTestBehavior(); {; EXPECT_MSG_EMIT(Warning) ;; EXPECT_MSG_EMIT(Error) ;. mycomponent.load(""atotallybrokenfile.txt""); }. /// By default test failure are catched from Sofa_test. This means that the information returned; /// in the test failure are the location of the failure in Sofa_test.cpp:lineno; /// This is why it is always better to explicitely specify the test behavior (possible the same as ; /// the default one as it will report correct testname/line number information. ; void noEmitTestBehavior(); {; EXPECT_MSG_NOEMIT(Warning) ;; EXPECT_MSG_NOEMIT(Error) ;; }; ; /// Finally it is possible to narrow where the messages are expected using blocks...; void c",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/213
https://github.com/sofa-framework/sofa/pull/213:127,Availability,failure,failure,127,"Problem statement:; Historically a lot of tests were implemented with the assumption that warning or error messages were tests failure. This assumption was problematic as it favor the testing of code paths that does not generate warning or errors instead of testing all the possible paths. To favor both valid and invalid paths this implicit behavior was remove and and made explicit using the ExpectMessage and MessageAsTestFailure raii's. In the process the old behavior of generating failure on errors was lost. . The PR mix the two and: ; - restores this old behavior by default so a test that specify nothing will fail on warning and error.; - but in addition, each tests class/function/bloc can now specify how a specific bloc can react to a message. This can be done using a new syntax taken inspired mimicking the one from gtest. ; - improve the way test failures about warning and error are reported:; https://ci.inria.fr/sofa-ci/job/ubuntu_gcc-4.8_options/5074/testReport/junit/(root)/RigidRigidMappingTest_0/test_translation/; . Example: ; ```cpp; class MyTest : public Sofa_test<>; ; /// This test will fail if a warning/error message is send because the test inherit from sofa_test; void defaultTestBehavior(); {; ....; }. /// This test should generate failure if NO warning and NO Error message is emitted; void catchingTestBehavior(); {; EXPECT_MSG_EMIT(Warning) ;; EXPECT_MSG_EMIT(Error) ;. mycomponent.load(""atotallybrokenfile.txt""); }. /// By default test failure are catched from Sofa_test. This means that the information returned; /// in the test failure are the location of the failure in Sofa_test.cpp:lineno; /// This is why it is always better to explicitely specify the test behavior (possible the same as ; /// the default one as it will report correct testname/line number information. ; void noEmitTestBehavior(); {; EXPECT_MSG_NOEMIT(Warning) ;; EXPECT_MSG_NOEMIT(Error) ;; }; ; /// Finally it is possible to narrow where the messages are expected using blocks...; void c",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/213
https://github.com/sofa-framework/sofa/pull/213:240,Availability,error,errors,240,"Problem statement:; Historically a lot of tests were implemented with the assumption that warning or error messages were tests failure. This assumption was problematic as it favor the testing of code paths that does not generate warning or errors instead of testing all the possible paths. To favor both valid and invalid paths this implicit behavior was remove and and made explicit using the ExpectMessage and MessageAsTestFailure raii's. In the process the old behavior of generating failure on errors was lost. . The PR mix the two and: ; - restores this old behavior by default so a test that specify nothing will fail on warning and error.; - but in addition, each tests class/function/bloc can now specify how a specific bloc can react to a message. This can be done using a new syntax taken inspired mimicking the one from gtest. ; - improve the way test failures about warning and error are reported:; https://ci.inria.fr/sofa-ci/job/ubuntu_gcc-4.8_options/5074/testReport/junit/(root)/RigidRigidMappingTest_0/test_translation/; . Example: ; ```cpp; class MyTest : public Sofa_test<>; ; /// This test will fail if a warning/error message is send because the test inherit from sofa_test; void defaultTestBehavior(); {; ....; }. /// This test should generate failure if NO warning and NO Error message is emitted; void catchingTestBehavior(); {; EXPECT_MSG_EMIT(Warning) ;; EXPECT_MSG_EMIT(Error) ;. mycomponent.load(""atotallybrokenfile.txt""); }. /// By default test failure are catched from Sofa_test. This means that the information returned; /// in the test failure are the location of the failure in Sofa_test.cpp:lineno; /// This is why it is always better to explicitely specify the test behavior (possible the same as ; /// the default one as it will report correct testname/line number information. ; void noEmitTestBehavior(); {; EXPECT_MSG_NOEMIT(Warning) ;; EXPECT_MSG_NOEMIT(Error) ;; }; ; /// Finally it is possible to narrow where the messages are expected using blocks...; void c",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/213
https://github.com/sofa-framework/sofa/pull/213:487,Availability,failure,failure,487,"Problem statement:; Historically a lot of tests were implemented with the assumption that warning or error messages were tests failure. This assumption was problematic as it favor the testing of code paths that does not generate warning or errors instead of testing all the possible paths. To favor both valid and invalid paths this implicit behavior was remove and and made explicit using the ExpectMessage and MessageAsTestFailure raii's. In the process the old behavior of generating failure on errors was lost. . The PR mix the two and: ; - restores this old behavior by default so a test that specify nothing will fail on warning and error.; - but in addition, each tests class/function/bloc can now specify how a specific bloc can react to a message. This can be done using a new syntax taken inspired mimicking the one from gtest. ; - improve the way test failures about warning and error are reported:; https://ci.inria.fr/sofa-ci/job/ubuntu_gcc-4.8_options/5074/testReport/junit/(root)/RigidRigidMappingTest_0/test_translation/; . Example: ; ```cpp; class MyTest : public Sofa_test<>; ; /// This test will fail if a warning/error message is send because the test inherit from sofa_test; void defaultTestBehavior(); {; ....; }. /// This test should generate failure if NO warning and NO Error message is emitted; void catchingTestBehavior(); {; EXPECT_MSG_EMIT(Warning) ;; EXPECT_MSG_EMIT(Error) ;. mycomponent.load(""atotallybrokenfile.txt""); }. /// By default test failure are catched from Sofa_test. This means that the information returned; /// in the test failure are the location of the failure in Sofa_test.cpp:lineno; /// This is why it is always better to explicitely specify the test behavior (possible the same as ; /// the default one as it will report correct testname/line number information. ; void noEmitTestBehavior(); {; EXPECT_MSG_NOEMIT(Warning) ;; EXPECT_MSG_NOEMIT(Error) ;; }; ; /// Finally it is possible to narrow where the messages are expected using blocks...; void c",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/213
https://github.com/sofa-framework/sofa/pull/213:498,Availability,error,errors,498,"Problem statement:; Historically a lot of tests were implemented with the assumption that warning or error messages were tests failure. This assumption was problematic as it favor the testing of code paths that does not generate warning or errors instead of testing all the possible paths. To favor both valid and invalid paths this implicit behavior was remove and and made explicit using the ExpectMessage and MessageAsTestFailure raii's. In the process the old behavior of generating failure on errors was lost. . The PR mix the two and: ; - restores this old behavior by default so a test that specify nothing will fail on warning and error.; - but in addition, each tests class/function/bloc can now specify how a specific bloc can react to a message. This can be done using a new syntax taken inspired mimicking the one from gtest. ; - improve the way test failures about warning and error are reported:; https://ci.inria.fr/sofa-ci/job/ubuntu_gcc-4.8_options/5074/testReport/junit/(root)/RigidRigidMappingTest_0/test_translation/; . Example: ; ```cpp; class MyTest : public Sofa_test<>; ; /// This test will fail if a warning/error message is send because the test inherit from sofa_test; void defaultTestBehavior(); {; ....; }. /// This test should generate failure if NO warning and NO Error message is emitted; void catchingTestBehavior(); {; EXPECT_MSG_EMIT(Warning) ;; EXPECT_MSG_EMIT(Error) ;. mycomponent.load(""atotallybrokenfile.txt""); }. /// By default test failure are catched from Sofa_test. This means that the information returned; /// in the test failure are the location of the failure in Sofa_test.cpp:lineno; /// This is why it is always better to explicitely specify the test behavior (possible the same as ; /// the default one as it will report correct testname/line number information. ; void noEmitTestBehavior(); {; EXPECT_MSG_NOEMIT(Warning) ;; EXPECT_MSG_NOEMIT(Error) ;; }; ; /// Finally it is possible to narrow where the messages are expected using blocks...; void c",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/213
https://github.com/sofa-framework/sofa/pull/213:639,Availability,error,error,639,"Problem statement:; Historically a lot of tests were implemented with the assumption that warning or error messages were tests failure. This assumption was problematic as it favor the testing of code paths that does not generate warning or errors instead of testing all the possible paths. To favor both valid and invalid paths this implicit behavior was remove and and made explicit using the ExpectMessage and MessageAsTestFailure raii's. In the process the old behavior of generating failure on errors was lost. . The PR mix the two and: ; - restores this old behavior by default so a test that specify nothing will fail on warning and error.; - but in addition, each tests class/function/bloc can now specify how a specific bloc can react to a message. This can be done using a new syntax taken inspired mimicking the one from gtest. ; - improve the way test failures about warning and error are reported:; https://ci.inria.fr/sofa-ci/job/ubuntu_gcc-4.8_options/5074/testReport/junit/(root)/RigidRigidMappingTest_0/test_translation/; . Example: ; ```cpp; class MyTest : public Sofa_test<>; ; /// This test will fail if a warning/error message is send because the test inherit from sofa_test; void defaultTestBehavior(); {; ....; }. /// This test should generate failure if NO warning and NO Error message is emitted; void catchingTestBehavior(); {; EXPECT_MSG_EMIT(Warning) ;; EXPECT_MSG_EMIT(Error) ;. mycomponent.load(""atotallybrokenfile.txt""); }. /// By default test failure are catched from Sofa_test. This means that the information returned; /// in the test failure are the location of the failure in Sofa_test.cpp:lineno; /// This is why it is always better to explicitely specify the test behavior (possible the same as ; /// the default one as it will report correct testname/line number information. ; void noEmitTestBehavior(); {; EXPECT_MSG_NOEMIT(Warning) ;; EXPECT_MSG_NOEMIT(Error) ;; }; ; /// Finally it is possible to narrow where the messages are expected using blocks...; void c",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/213
https://github.com/sofa-framework/sofa/pull/213:863,Availability,failure,failures,863,"Problem statement:; Historically a lot of tests were implemented with the assumption that warning or error messages were tests failure. This assumption was problematic as it favor the testing of code paths that does not generate warning or errors instead of testing all the possible paths. To favor both valid and invalid paths this implicit behavior was remove and and made explicit using the ExpectMessage and MessageAsTestFailure raii's. In the process the old behavior of generating failure on errors was lost. . The PR mix the two and: ; - restores this old behavior by default so a test that specify nothing will fail on warning and error.; - but in addition, each tests class/function/bloc can now specify how a specific bloc can react to a message. This can be done using a new syntax taken inspired mimicking the one from gtest. ; - improve the way test failures about warning and error are reported:; https://ci.inria.fr/sofa-ci/job/ubuntu_gcc-4.8_options/5074/testReport/junit/(root)/RigidRigidMappingTest_0/test_translation/; . Example: ; ```cpp; class MyTest : public Sofa_test<>; ; /// This test will fail if a warning/error message is send because the test inherit from sofa_test; void defaultTestBehavior(); {; ....; }. /// This test should generate failure if NO warning and NO Error message is emitted; void catchingTestBehavior(); {; EXPECT_MSG_EMIT(Warning) ;; EXPECT_MSG_EMIT(Error) ;. mycomponent.load(""atotallybrokenfile.txt""); }. /// By default test failure are catched from Sofa_test. This means that the information returned; /// in the test failure are the location of the failure in Sofa_test.cpp:lineno; /// This is why it is always better to explicitely specify the test behavior (possible the same as ; /// the default one as it will report correct testname/line number information. ; void noEmitTestBehavior(); {; EXPECT_MSG_NOEMIT(Warning) ;; EXPECT_MSG_NOEMIT(Error) ;; }; ; /// Finally it is possible to narrow where the messages are expected using blocks...; void c",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/213
https://github.com/sofa-framework/sofa/pull/213:890,Availability,error,error,890,"Problem statement:; Historically a lot of tests were implemented with the assumption that warning or error messages were tests failure. This assumption was problematic as it favor the testing of code paths that does not generate warning or errors instead of testing all the possible paths. To favor both valid and invalid paths this implicit behavior was remove and and made explicit using the ExpectMessage and MessageAsTestFailure raii's. In the process the old behavior of generating failure on errors was lost. . The PR mix the two and: ; - restores this old behavior by default so a test that specify nothing will fail on warning and error.; - but in addition, each tests class/function/bloc can now specify how a specific bloc can react to a message. This can be done using a new syntax taken inspired mimicking the one from gtest. ; - improve the way test failures about warning and error are reported:; https://ci.inria.fr/sofa-ci/job/ubuntu_gcc-4.8_options/5074/testReport/junit/(root)/RigidRigidMappingTest_0/test_translation/; . Example: ; ```cpp; class MyTest : public Sofa_test<>; ; /// This test will fail if a warning/error message is send because the test inherit from sofa_test; void defaultTestBehavior(); {; ....; }. /// This test should generate failure if NO warning and NO Error message is emitted; void catchingTestBehavior(); {; EXPECT_MSG_EMIT(Warning) ;; EXPECT_MSG_EMIT(Error) ;. mycomponent.load(""atotallybrokenfile.txt""); }. /// By default test failure are catched from Sofa_test. This means that the information returned; /// in the test failure are the location of the failure in Sofa_test.cpp:lineno; /// This is why it is always better to explicitely specify the test behavior (possible the same as ; /// the default one as it will report correct testname/line number information. ; void noEmitTestBehavior(); {; EXPECT_MSG_NOEMIT(Warning) ;; EXPECT_MSG_NOEMIT(Error) ;; }; ; /// Finally it is possible to narrow where the messages are expected using blocks...; void c",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/213
https://github.com/sofa-framework/sofa/pull/213:1133,Availability,error,error,1133,"e. This assumption was problematic as it favor the testing of code paths that does not generate warning or errors instead of testing all the possible paths. To favor both valid and invalid paths this implicit behavior was remove and and made explicit using the ExpectMessage and MessageAsTestFailure raii's. In the process the old behavior of generating failure on errors was lost. . The PR mix the two and: ; - restores this old behavior by default so a test that specify nothing will fail on warning and error.; - but in addition, each tests class/function/bloc can now specify how a specific bloc can react to a message. This can be done using a new syntax taken inspired mimicking the one from gtest. ; - improve the way test failures about warning and error are reported:; https://ci.inria.fr/sofa-ci/job/ubuntu_gcc-4.8_options/5074/testReport/junit/(root)/RigidRigidMappingTest_0/test_translation/; . Example: ; ```cpp; class MyTest : public Sofa_test<>; ; /// This test will fail if a warning/error message is send because the test inherit from sofa_test; void defaultTestBehavior(); {; ....; }. /// This test should generate failure if NO warning and NO Error message is emitted; void catchingTestBehavior(); {; EXPECT_MSG_EMIT(Warning) ;; EXPECT_MSG_EMIT(Error) ;. mycomponent.load(""atotallybrokenfile.txt""); }. /// By default test failure are catched from Sofa_test. This means that the information returned; /// in the test failure are the location of the failure in Sofa_test.cpp:lineno; /// This is why it is always better to explicitely specify the test behavior (possible the same as ; /// the default one as it will report correct testname/line number information. ; void noEmitTestBehavior(); {; EXPECT_MSG_NOEMIT(Warning) ;; EXPECT_MSG_NOEMIT(Error) ;; }; ; /// Finally it is possible to narrow where the messages are expected using blocks...; void complexTestBehavior(); {; /// Here is the default mode. ; ....; {; /// We will report a failure is there no warning nor error emitted ",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/213
https://github.com/sofa-framework/sofa/pull/213:1266,Availability,failure,failure,1266,"d paths this implicit behavior was remove and and made explicit using the ExpectMessage and MessageAsTestFailure raii's. In the process the old behavior of generating failure on errors was lost. . The PR mix the two and: ; - restores this old behavior by default so a test that specify nothing will fail on warning and error.; - but in addition, each tests class/function/bloc can now specify how a specific bloc can react to a message. This can be done using a new syntax taken inspired mimicking the one from gtest. ; - improve the way test failures about warning and error are reported:; https://ci.inria.fr/sofa-ci/job/ubuntu_gcc-4.8_options/5074/testReport/junit/(root)/RigidRigidMappingTest_0/test_translation/; . Example: ; ```cpp; class MyTest : public Sofa_test<>; ; /// This test will fail if a warning/error message is send because the test inherit from sofa_test; void defaultTestBehavior(); {; ....; }. /// This test should generate failure if NO warning and NO Error message is emitted; void catchingTestBehavior(); {; EXPECT_MSG_EMIT(Warning) ;; EXPECT_MSG_EMIT(Error) ;. mycomponent.load(""atotallybrokenfile.txt""); }. /// By default test failure are catched from Sofa_test. This means that the information returned; /// in the test failure are the location of the failure in Sofa_test.cpp:lineno; /// This is why it is always better to explicitely specify the test behavior (possible the same as ; /// the default one as it will report correct testname/line number information. ; void noEmitTestBehavior(); {; EXPECT_MSG_NOEMIT(Warning) ;; EXPECT_MSG_NOEMIT(Error) ;; }; ; /// Finally it is possible to narrow where the messages are expected using blocks...; void complexTestBehavior(); {; /// Here is the default mode. ; ....; {; /// We will report a failure is there no warning nor error emitted before the end of this block. ; EXPECT_MSG_EMIT(Warning) ;; EXPECT_MSG_EMIT(Error) ;; ...; { ; /// But this sub-part does not count... and it shouldn't emit a message. ; EXPECT_MSG_NOEMIT",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/213
https://github.com/sofa-framework/sofa/pull/213:1295,Availability,Error,Error,1295,"d paths this implicit behavior was remove and and made explicit using the ExpectMessage and MessageAsTestFailure raii's. In the process the old behavior of generating failure on errors was lost. . The PR mix the two and: ; - restores this old behavior by default so a test that specify nothing will fail on warning and error.; - but in addition, each tests class/function/bloc can now specify how a specific bloc can react to a message. This can be done using a new syntax taken inspired mimicking the one from gtest. ; - improve the way test failures about warning and error are reported:; https://ci.inria.fr/sofa-ci/job/ubuntu_gcc-4.8_options/5074/testReport/junit/(root)/RigidRigidMappingTest_0/test_translation/; . Example: ; ```cpp; class MyTest : public Sofa_test<>; ; /// This test will fail if a warning/error message is send because the test inherit from sofa_test; void defaultTestBehavior(); {; ....; }. /// This test should generate failure if NO warning and NO Error message is emitted; void catchingTestBehavior(); {; EXPECT_MSG_EMIT(Warning) ;; EXPECT_MSG_EMIT(Error) ;. mycomponent.load(""atotallybrokenfile.txt""); }. /// By default test failure are catched from Sofa_test. This means that the information returned; /// in the test failure are the location of the failure in Sofa_test.cpp:lineno; /// This is why it is always better to explicitely specify the test behavior (possible the same as ; /// the default one as it will report correct testname/line number information. ; void noEmitTestBehavior(); {; EXPECT_MSG_NOEMIT(Warning) ;; EXPECT_MSG_NOEMIT(Error) ;; }; ; /// Finally it is possible to narrow where the messages are expected using blocks...; void complexTestBehavior(); {; /// Here is the default mode. ; ....; {; /// We will report a failure is there no warning nor error emitted before the end of this block. ; EXPECT_MSG_EMIT(Warning) ;; EXPECT_MSG_EMIT(Error) ;; ...; { ; /// But this sub-part does not count... and it shouldn't emit a message. ; EXPECT_MSG_NOEMIT",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/213
https://github.com/sofa-framework/sofa/pull/213:1397,Availability,Error,Error,1397,"d paths this implicit behavior was remove and and made explicit using the ExpectMessage and MessageAsTestFailure raii's. In the process the old behavior of generating failure on errors was lost. . The PR mix the two and: ; - restores this old behavior by default so a test that specify nothing will fail on warning and error.; - but in addition, each tests class/function/bloc can now specify how a specific bloc can react to a message. This can be done using a new syntax taken inspired mimicking the one from gtest. ; - improve the way test failures about warning and error are reported:; https://ci.inria.fr/sofa-ci/job/ubuntu_gcc-4.8_options/5074/testReport/junit/(root)/RigidRigidMappingTest_0/test_translation/; . Example: ; ```cpp; class MyTest : public Sofa_test<>; ; /// This test will fail if a warning/error message is send because the test inherit from sofa_test; void defaultTestBehavior(); {; ....; }. /// This test should generate failure if NO warning and NO Error message is emitted; void catchingTestBehavior(); {; EXPECT_MSG_EMIT(Warning) ;; EXPECT_MSG_EMIT(Error) ;. mycomponent.load(""atotallybrokenfile.txt""); }. /// By default test failure are catched from Sofa_test. This means that the information returned; /// in the test failure are the location of the failure in Sofa_test.cpp:lineno; /// This is why it is always better to explicitely specify the test behavior (possible the same as ; /// the default one as it will report correct testname/line number information. ; void noEmitTestBehavior(); {; EXPECT_MSG_NOEMIT(Warning) ;; EXPECT_MSG_NOEMIT(Error) ;; }; ; /// Finally it is possible to narrow where the messages are expected using blocks...; void complexTestBehavior(); {; /// Here is the default mode. ; ....; {; /// We will report a failure is there no warning nor error emitted before the end of this block. ; EXPECT_MSG_EMIT(Warning) ;; EXPECT_MSG_EMIT(Error) ;; ...; { ; /// But this sub-part does not count... and it shouldn't emit a message. ; EXPECT_MSG_NOEMIT",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/213
https://github.com/sofa-framework/sofa/pull/213:1474,Availability,failure,failure,1474,"ating failure on errors was lost. . The PR mix the two and: ; - restores this old behavior by default so a test that specify nothing will fail on warning and error.; - but in addition, each tests class/function/bloc can now specify how a specific bloc can react to a message. This can be done using a new syntax taken inspired mimicking the one from gtest. ; - improve the way test failures about warning and error are reported:; https://ci.inria.fr/sofa-ci/job/ubuntu_gcc-4.8_options/5074/testReport/junit/(root)/RigidRigidMappingTest_0/test_translation/; . Example: ; ```cpp; class MyTest : public Sofa_test<>; ; /// This test will fail if a warning/error message is send because the test inherit from sofa_test; void defaultTestBehavior(); {; ....; }. /// This test should generate failure if NO warning and NO Error message is emitted; void catchingTestBehavior(); {; EXPECT_MSG_EMIT(Warning) ;; EXPECT_MSG_EMIT(Error) ;. mycomponent.load(""atotallybrokenfile.txt""); }. /// By default test failure are catched from Sofa_test. This means that the information returned; /// in the test failure are the location of the failure in Sofa_test.cpp:lineno; /// This is why it is always better to explicitely specify the test behavior (possible the same as ; /// the default one as it will report correct testname/line number information. ; void noEmitTestBehavior(); {; EXPECT_MSG_NOEMIT(Warning) ;; EXPECT_MSG_NOEMIT(Error) ;; }; ; /// Finally it is possible to narrow where the messages are expected using blocks...; void complexTestBehavior(); {; /// Here is the default mode. ; ....; {; /// We will report a failure is there no warning nor error emitted before the end of this block. ; EXPECT_MSG_EMIT(Warning) ;; EXPECT_MSG_EMIT(Error) ;; ...; { ; /// But this sub-part does not count... and it shouldn't emit a message. ; EXPECT_MSG_NOEMIT(Error) ;; .... ; }; }; }; ```. This PR will generate a lot of new test failure... that are either real failure that deserve investigation or ; tests that was p",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/213
https://github.com/sofa-framework/sofa/pull/213:1568,Availability,failure,failure,1568,"havior by default so a test that specify nothing will fail on warning and error.; - but in addition, each tests class/function/bloc can now specify how a specific bloc can react to a message. This can be done using a new syntax taken inspired mimicking the one from gtest. ; - improve the way test failures about warning and error are reported:; https://ci.inria.fr/sofa-ci/job/ubuntu_gcc-4.8_options/5074/testReport/junit/(root)/RigidRigidMappingTest_0/test_translation/; . Example: ; ```cpp; class MyTest : public Sofa_test<>; ; /// This test will fail if a warning/error message is send because the test inherit from sofa_test; void defaultTestBehavior(); {; ....; }. /// This test should generate failure if NO warning and NO Error message is emitted; void catchingTestBehavior(); {; EXPECT_MSG_EMIT(Warning) ;; EXPECT_MSG_EMIT(Error) ;. mycomponent.load(""atotallybrokenfile.txt""); }. /// By default test failure are catched from Sofa_test. This means that the information returned; /// in the test failure are the location of the failure in Sofa_test.cpp:lineno; /// This is why it is always better to explicitely specify the test behavior (possible the same as ; /// the default one as it will report correct testname/line number information. ; void noEmitTestBehavior(); {; EXPECT_MSG_NOEMIT(Warning) ;; EXPECT_MSG_NOEMIT(Error) ;; }; ; /// Finally it is possible to narrow where the messages are expected using blocks...; void complexTestBehavior(); {; /// Here is the default mode. ; ....; {; /// We will report a failure is there no warning nor error emitted before the end of this block. ; EXPECT_MSG_EMIT(Warning) ;; EXPECT_MSG_EMIT(Error) ;; ...; { ; /// But this sub-part does not count... and it shouldn't emit a message. ; EXPECT_MSG_NOEMIT(Error) ;; .... ; }; }; }; ```. This PR will generate a lot of new test failure... that are either real failure that deserve investigation or ; tests that was previously simply previously ignoring error & warning messages; . CHANGELOG for @hugt",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/213
https://github.com/sofa-framework/sofa/pull/213:1600,Availability,failure,failure,1600,"havior by default so a test that specify nothing will fail on warning and error.; - but in addition, each tests class/function/bloc can now specify how a specific bloc can react to a message. This can be done using a new syntax taken inspired mimicking the one from gtest. ; - improve the way test failures about warning and error are reported:; https://ci.inria.fr/sofa-ci/job/ubuntu_gcc-4.8_options/5074/testReport/junit/(root)/RigidRigidMappingTest_0/test_translation/; . Example: ; ```cpp; class MyTest : public Sofa_test<>; ; /// This test will fail if a warning/error message is send because the test inherit from sofa_test; void defaultTestBehavior(); {; ....; }. /// This test should generate failure if NO warning and NO Error message is emitted; void catchingTestBehavior(); {; EXPECT_MSG_EMIT(Warning) ;; EXPECT_MSG_EMIT(Error) ;. mycomponent.load(""atotallybrokenfile.txt""); }. /// By default test failure are catched from Sofa_test. This means that the information returned; /// in the test failure are the location of the failure in Sofa_test.cpp:lineno; /// This is why it is always better to explicitely specify the test behavior (possible the same as ; /// the default one as it will report correct testname/line number information. ; void noEmitTestBehavior(); {; EXPECT_MSG_NOEMIT(Warning) ;; EXPECT_MSG_NOEMIT(Error) ;; }; ; /// Finally it is possible to narrow where the messages are expected using blocks...; void complexTestBehavior(); {; /// Here is the default mode. ; ....; {; /// We will report a failure is there no warning nor error emitted before the end of this block. ; EXPECT_MSG_EMIT(Warning) ;; EXPECT_MSG_EMIT(Error) ;; ...; { ; /// But this sub-part does not count... and it shouldn't emit a message. ; EXPECT_MSG_NOEMIT(Error) ;; .... ; }; }; }; ```. This PR will generate a lot of new test failure... that are either real failure that deserve investigation or ; tests that was previously simply previously ignoring error & warning messages; . CHANGELOG for @hugt",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/213
https://github.com/sofa-framework/sofa/pull/213:1894,Availability,Error,Error,1894,"ported:; https://ci.inria.fr/sofa-ci/job/ubuntu_gcc-4.8_options/5074/testReport/junit/(root)/RigidRigidMappingTest_0/test_translation/; . Example: ; ```cpp; class MyTest : public Sofa_test<>; ; /// This test will fail if a warning/error message is send because the test inherit from sofa_test; void defaultTestBehavior(); {; ....; }. /// This test should generate failure if NO warning and NO Error message is emitted; void catchingTestBehavior(); {; EXPECT_MSG_EMIT(Warning) ;; EXPECT_MSG_EMIT(Error) ;. mycomponent.load(""atotallybrokenfile.txt""); }. /// By default test failure are catched from Sofa_test. This means that the information returned; /// in the test failure are the location of the failure in Sofa_test.cpp:lineno; /// This is why it is always better to explicitely specify the test behavior (possible the same as ; /// the default one as it will report correct testname/line number information. ; void noEmitTestBehavior(); {; EXPECT_MSG_NOEMIT(Warning) ;; EXPECT_MSG_NOEMIT(Error) ;; }; ; /// Finally it is possible to narrow where the messages are expected using blocks...; void complexTestBehavior(); {; /// Here is the default mode. ; ....; {; /// We will report a failure is there no warning nor error emitted before the end of this block. ; EXPECT_MSG_EMIT(Warning) ;; EXPECT_MSG_EMIT(Error) ;; ...; { ; /// But this sub-part does not count... and it shouldn't emit a message. ; EXPECT_MSG_NOEMIT(Error) ;; .... ; }; }; }; ```. This PR will generate a lot of new test failure... that are either real failure that deserve investigation or ; tests that was previously simply previously ignoring error & warning messages; . CHANGELOG for @hugtalbot & @guparan :; - TestMessageHandler.cpp implements a new & robust way to connect msg_* message to test failure ; - TestMessageHandler_test.cpp implements test for TestMessageHandler. ; - Sofa_test is updated to use the new TestMessageHandler where msg_error generates test failures ; - All the existing tests have been changed to us",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/213
https://github.com/sofa-framework/sofa/pull/213:2088,Availability,failure,failure,2088,"ll fail if a warning/error message is send because the test inherit from sofa_test; void defaultTestBehavior(); {; ....; }. /// This test should generate failure if NO warning and NO Error message is emitted; void catchingTestBehavior(); {; EXPECT_MSG_EMIT(Warning) ;; EXPECT_MSG_EMIT(Error) ;. mycomponent.load(""atotallybrokenfile.txt""); }. /// By default test failure are catched from Sofa_test. This means that the information returned; /// in the test failure are the location of the failure in Sofa_test.cpp:lineno; /// This is why it is always better to explicitely specify the test behavior (possible the same as ; /// the default one as it will report correct testname/line number information. ; void noEmitTestBehavior(); {; EXPECT_MSG_NOEMIT(Warning) ;; EXPECT_MSG_NOEMIT(Error) ;; }; ; /// Finally it is possible to narrow where the messages are expected using blocks...; void complexTestBehavior(); {; /// Here is the default mode. ; ....; {; /// We will report a failure is there no warning nor error emitted before the end of this block. ; EXPECT_MSG_EMIT(Warning) ;; EXPECT_MSG_EMIT(Error) ;; ...; { ; /// But this sub-part does not count... and it shouldn't emit a message. ; EXPECT_MSG_NOEMIT(Error) ;; .... ; }; }; }; ```. This PR will generate a lot of new test failure... that are either real failure that deserve investigation or ; tests that was previously simply previously ignoring error & warning messages; . CHANGELOG for @hugtalbot & @guparan :; - TestMessageHandler.cpp implements a new & robust way to connect msg_* message to test failure ; - TestMessageHandler_test.cpp implements test for TestMessageHandler. ; - Sofa_test is updated to use the new TestMessageHandler where msg_error generates test failures ; - All the existing tests have been changed to use the new API & removed the old one. ; - MeshSTL.cpp replace a std:cerr by a msg_error so that FIX the corresponding failing test.; - Message.cpp adds a way to convert message type to string.; - updates externs/",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/213
https://github.com/sofa-framework/sofa/pull/213:2120,Availability,error,error,2120,"ll fail if a warning/error message is send because the test inherit from sofa_test; void defaultTestBehavior(); {; ....; }. /// This test should generate failure if NO warning and NO Error message is emitted; void catchingTestBehavior(); {; EXPECT_MSG_EMIT(Warning) ;; EXPECT_MSG_EMIT(Error) ;. mycomponent.load(""atotallybrokenfile.txt""); }. /// By default test failure are catched from Sofa_test. This means that the information returned; /// in the test failure are the location of the failure in Sofa_test.cpp:lineno; /// This is why it is always better to explicitely specify the test behavior (possible the same as ; /// the default one as it will report correct testname/line number information. ; void noEmitTestBehavior(); {; EXPECT_MSG_NOEMIT(Warning) ;; EXPECT_MSG_NOEMIT(Error) ;; }; ; /// Finally it is possible to narrow where the messages are expected using blocks...; void complexTestBehavior(); {; /// Here is the default mode. ; ....; {; /// We will report a failure is there no warning nor error emitted before the end of this block. ; EXPECT_MSG_EMIT(Warning) ;; EXPECT_MSG_EMIT(Error) ;; ...; { ; /// But this sub-part does not count... and it shouldn't emit a message. ; EXPECT_MSG_NOEMIT(Error) ;; .... ; }; }; }; ```. This PR will generate a lot of new test failure... that are either real failure that deserve investigation or ; tests that was previously simply previously ignoring error & warning messages; . CHANGELOG for @hugtalbot & @guparan :; - TestMessageHandler.cpp implements a new & robust way to connect msg_* message to test failure ; - TestMessageHandler_test.cpp implements test for TestMessageHandler. ; - Sofa_test is updated to use the new TestMessageHandler where msg_error generates test failures ; - All the existing tests have been changed to use the new API & removed the old one. ; - MeshSTL.cpp replace a std:cerr by a msg_error so that FIX the corresponding failing test.; - Message.cpp adds a way to convert message type to string.; - updates externs/",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/213
https://github.com/sofa-framework/sofa/pull/213:2210,Availability,Error,Error,2210,"st; void defaultTestBehavior(); {; ....; }. /// This test should generate failure if NO warning and NO Error message is emitted; void catchingTestBehavior(); {; EXPECT_MSG_EMIT(Warning) ;; EXPECT_MSG_EMIT(Error) ;. mycomponent.load(""atotallybrokenfile.txt""); }. /// By default test failure are catched from Sofa_test. This means that the information returned; /// in the test failure are the location of the failure in Sofa_test.cpp:lineno; /// This is why it is always better to explicitely specify the test behavior (possible the same as ; /// the default one as it will report correct testname/line number information. ; void noEmitTestBehavior(); {; EXPECT_MSG_NOEMIT(Warning) ;; EXPECT_MSG_NOEMIT(Error) ;; }; ; /// Finally it is possible to narrow where the messages are expected using blocks...; void complexTestBehavior(); {; /// Here is the default mode. ; ....; {; /// We will report a failure is there no warning nor error emitted before the end of this block. ; EXPECT_MSG_EMIT(Warning) ;; EXPECT_MSG_EMIT(Error) ;; ...; { ; /// But this sub-part does not count... and it shouldn't emit a message. ; EXPECT_MSG_NOEMIT(Error) ;; .... ; }; }; }; ```. This PR will generate a lot of new test failure... that are either real failure that deserve investigation or ; tests that was previously simply previously ignoring error & warning messages; . CHANGELOG for @hugtalbot & @guparan :; - TestMessageHandler.cpp implements a new & robust way to connect msg_* message to test failure ; - TestMessageHandler_test.cpp implements test for TestMessageHandler. ; - Sofa_test is updated to use the new TestMessageHandler where msg_error generates test failures ; - All the existing tests have been changed to use the new API & removed the old one. ; - MeshSTL.cpp replace a std:cerr by a msg_error so that FIX the corresponding failing test.; - Message.cpp adds a way to convert message type to string.; - updates externs/gtest to a fresh checkout. ; __________________________________________________",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/213
https://github.com/sofa-framework/sofa/pull/213:2322,Availability,Error,Error,2322,"ed; void catchingTestBehavior(); {; EXPECT_MSG_EMIT(Warning) ;; EXPECT_MSG_EMIT(Error) ;. mycomponent.load(""atotallybrokenfile.txt""); }. /// By default test failure are catched from Sofa_test. This means that the information returned; /// in the test failure are the location of the failure in Sofa_test.cpp:lineno; /// This is why it is always better to explicitely specify the test behavior (possible the same as ; /// the default one as it will report correct testname/line number information. ; void noEmitTestBehavior(); {; EXPECT_MSG_NOEMIT(Warning) ;; EXPECT_MSG_NOEMIT(Error) ;; }; ; /// Finally it is possible to narrow where the messages are expected using blocks...; void complexTestBehavior(); {; /// Here is the default mode. ; ....; {; /// We will report a failure is there no warning nor error emitted before the end of this block. ; EXPECT_MSG_EMIT(Warning) ;; EXPECT_MSG_EMIT(Error) ;; ...; { ; /// But this sub-part does not count... and it shouldn't emit a message. ; EXPECT_MSG_NOEMIT(Error) ;; .... ; }; }; }; ```. This PR will generate a lot of new test failure... that are either real failure that deserve investigation or ; tests that was previously simply previously ignoring error & warning messages; . CHANGELOG for @hugtalbot & @guparan :; - TestMessageHandler.cpp implements a new & robust way to connect msg_* message to test failure ; - TestMessageHandler_test.cpp implements test for TestMessageHandler. ; - Sofa_test is updated to use the new TestMessageHandler where msg_error generates test failures ; - All the existing tests have been changed to use the new API & removed the old one. ; - MeshSTL.cpp replace a std:cerr by a msg_error so that FIX the corresponding failing test.; - Message.cpp adds a way to convert message type to string.; - updates externs/gtest to a fresh checkout. ; ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the C",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/213
https://github.com/sofa-framework/sofa/pull/213:2393,Availability,failure,failure,2393,") ;; EXPECT_MSG_EMIT(Error) ;. mycomponent.load(""atotallybrokenfile.txt""); }. /// By default test failure are catched from Sofa_test. This means that the information returned; /// in the test failure are the location of the failure in Sofa_test.cpp:lineno; /// This is why it is always better to explicitely specify the test behavior (possible the same as ; /// the default one as it will report correct testname/line number information. ; void noEmitTestBehavior(); {; EXPECT_MSG_NOEMIT(Warning) ;; EXPECT_MSG_NOEMIT(Error) ;; }; ; /// Finally it is possible to narrow where the messages are expected using blocks...; void complexTestBehavior(); {; /// Here is the default mode. ; ....; {; /// We will report a failure is there no warning nor error emitted before the end of this block. ; EXPECT_MSG_EMIT(Warning) ;; EXPECT_MSG_EMIT(Error) ;; ...; { ; /// But this sub-part does not count... and it shouldn't emit a message. ; EXPECT_MSG_NOEMIT(Error) ;; .... ; }; }; }; ```. This PR will generate a lot of new test failure... that are either real failure that deserve investigation or ; tests that was previously simply previously ignoring error & warning messages; . CHANGELOG for @hugtalbot & @guparan :; - TestMessageHandler.cpp implements a new & robust way to connect msg_* message to test failure ; - TestMessageHandler_test.cpp implements test for TestMessageHandler. ; - Sofa_test is updated to use the new TestMessageHandler where msg_error generates test failures ; - All the existing tests have been changed to use the new API & removed the old one. ; - MeshSTL.cpp replace a std:cerr by a msg_error so that FIX the corresponding failing test.; - Message.cpp adds a way to convert message type to string.; - updates externs/gtest to a fresh checkout. ; ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings nor unit test failu",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/213
https://github.com/sofa-framework/sofa/pull/213:2425,Availability,failure,failure,2425,failure are catched from Sofa_test. This means that the information returned; /// in the test failure are the location of the failure in Sofa_test.cpp:lineno; /// This is why it is always better to explicitely specify the test behavior (possible the same as ; /// the default one as it will report correct testname/line number information. ; void noEmitTestBehavior(); {; EXPECT_MSG_NOEMIT(Warning) ;; EXPECT_MSG_NOEMIT(Error) ;; }; ; /// Finally it is possible to narrow where the messages are expected using blocks...; void complexTestBehavior(); {; /// Here is the default mode. ; ....; {; /// We will report a failure is there no warning nor error emitted before the end of this block. ; EXPECT_MSG_EMIT(Warning) ;; EXPECT_MSG_EMIT(Error) ;; ...; { ; /// But this sub-part does not count... and it shouldn't emit a message. ; EXPECT_MSG_NOEMIT(Error) ;; .... ; }; }; }; ```. This PR will generate a lot of new test failure... that are either real failure that deserve investigation or ; tests that was previously simply previously ignoring error & warning messages; . CHANGELOG for @hugtalbot & @guparan :; - TestMessageHandler.cpp implements a new & robust way to connect msg_* message to test failure ; - TestMessageHandler_test.cpp implements test for TestMessageHandler. ; - Sofa_test is updated to use the new TestMessageHandler where msg_error generates test failures ; - All the existing tests have been changed to use the new API & removed the old one. ; - MeshSTL.cpp replace a std:cerr by a msg_error so that FIX the corresponding failing test.; - Message.cpp adds a way to convert message type to string.; - updates externs/gtest to a fresh checkout. ; ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings nor unit test failures. (This PR cannot do that...read my comment about that). ; - [x] does not break existing scene,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/213
https://github.com/sofa-framework/sofa/pull/213:2518,Availability,error,error,2518,failure are catched from Sofa_test. This means that the information returned; /// in the test failure are the location of the failure in Sofa_test.cpp:lineno; /// This is why it is always better to explicitely specify the test behavior (possible the same as ; /// the default one as it will report correct testname/line number information. ; void noEmitTestBehavior(); {; EXPECT_MSG_NOEMIT(Warning) ;; EXPECT_MSG_NOEMIT(Error) ;; }; ; /// Finally it is possible to narrow where the messages are expected using blocks...; void complexTestBehavior(); {; /// Here is the default mode. ; ....; {; /// We will report a failure is there no warning nor error emitted before the end of this block. ; EXPECT_MSG_EMIT(Warning) ;; EXPECT_MSG_EMIT(Error) ;; ...; { ; /// But this sub-part does not count... and it shouldn't emit a message. ; EXPECT_MSG_NOEMIT(Error) ;; .... ; }; }; }; ```. This PR will generate a lot of new test failure... that are either real failure that deserve investigation or ; tests that was previously simply previously ignoring error & warning messages; . CHANGELOG for @hugtalbot & @guparan :; - TestMessageHandler.cpp implements a new & robust way to connect msg_* message to test failure ; - TestMessageHandler_test.cpp implements test for TestMessageHandler. ; - Sofa_test is updated to use the new TestMessageHandler where msg_error generates test failures ; - All the existing tests have been changed to use the new API & removed the old one. ; - MeshSTL.cpp replace a std:cerr by a msg_error so that FIX the corresponding failing test.; - Message.cpp adds a way to convert message type to string.; - updates externs/gtest to a fresh checkout. ; ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings nor unit test failures. (This PR cannot do that...read my comment about that). ; - [x] does not break existing scene,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/213
https://github.com/sofa-framework/sofa/pull/213:2629,Availability,robust,robust,2629,ways better to explicitely specify the test behavior (possible the same as ; /// the default one as it will report correct testname/line number information. ; void noEmitTestBehavior(); {; EXPECT_MSG_NOEMIT(Warning) ;; EXPECT_MSG_NOEMIT(Error) ;; }; ; /// Finally it is possible to narrow where the messages are expected using blocks...; void complexTestBehavior(); {; /// Here is the default mode. ; ....; {; /// We will report a failure is there no warning nor error emitted before the end of this block. ; EXPECT_MSG_EMIT(Warning) ;; EXPECT_MSG_EMIT(Error) ;; ...; { ; /// But this sub-part does not count... and it shouldn't emit a message. ; EXPECT_MSG_NOEMIT(Error) ;; .... ; }; }; }; ```. This PR will generate a lot of new test failure... that are either real failure that deserve investigation or ; tests that was previously simply previously ignoring error & warning messages; . CHANGELOG for @hugtalbot & @guparan :; - TestMessageHandler.cpp implements a new & robust way to connect msg_* message to test failure ; - TestMessageHandler_test.cpp implements test for TestMessageHandler. ; - Sofa_test is updated to use the new TestMessageHandler where msg_error generates test failures ; - All the existing tests have been changed to use the new API & removed the old one. ; - MeshSTL.cpp replace a std:cerr by a msg_error so that FIX the corresponding failing test.; - Message.cpp adds a way to convert message type to string.; - updates externs/gtest to a fresh checkout. ; ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings nor unit test failures. (This PR cannot do that...read my comment about that). ; - [x] does not break existing scenes.; - [x] does not break API compatibility.; - [x] has been reviewed and agreed to be transitional.; - [x] is more than 1 week old.; - [ ] #237 should fix most of the newly failing tes,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/213
https://github.com/sofa-framework/sofa/pull/213:2673,Availability,failure,failure,2673,ways better to explicitely specify the test behavior (possible the same as ; /// the default one as it will report correct testname/line number information. ; void noEmitTestBehavior(); {; EXPECT_MSG_NOEMIT(Warning) ;; EXPECT_MSG_NOEMIT(Error) ;; }; ; /// Finally it is possible to narrow where the messages are expected using blocks...; void complexTestBehavior(); {; /// Here is the default mode. ; ....; {; /// We will report a failure is there no warning nor error emitted before the end of this block. ; EXPECT_MSG_EMIT(Warning) ;; EXPECT_MSG_EMIT(Error) ;; ...; { ; /// But this sub-part does not count... and it shouldn't emit a message. ; EXPECT_MSG_NOEMIT(Error) ;; .... ; }; }; }; ```. This PR will generate a lot of new test failure... that are either real failure that deserve investigation or ; tests that was previously simply previously ignoring error & warning messages; . CHANGELOG for @hugtalbot & @guparan :; - TestMessageHandler.cpp implements a new & robust way to connect msg_* message to test failure ; - TestMessageHandler_test.cpp implements test for TestMessageHandler. ; - Sofa_test is updated to use the new TestMessageHandler where msg_error generates test failures ; - All the existing tests have been changed to use the new API & removed the old one. ; - MeshSTL.cpp replace a std:cerr by a msg_error so that FIX the corresponding failing test.; - Message.cpp adds a way to convert message type to string.; - updates externs/gtest to a fresh checkout. ; ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings nor unit test failures. (This PR cannot do that...read my comment about that). ; - [x] does not break existing scenes.; - [x] does not break API compatibility.; - [x] has been reviewed and agreed to be transitional.; - [x] is more than 1 week old.; - [ ] #237 should fix most of the newly failing tes,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/213
https://github.com/sofa-framework/sofa/pull/213:2843,Availability,failure,failures,2843, report correct testname/line number information. ; void noEmitTestBehavior(); {; EXPECT_MSG_NOEMIT(Warning) ;; EXPECT_MSG_NOEMIT(Error) ;; }; ; /// Finally it is possible to narrow where the messages are expected using blocks...; void complexTestBehavior(); {; /// Here is the default mode. ; ....; {; /// We will report a failure is there no warning nor error emitted before the end of this block. ; EXPECT_MSG_EMIT(Warning) ;; EXPECT_MSG_EMIT(Error) ;; ...; { ; /// But this sub-part does not count... and it shouldn't emit a message. ; EXPECT_MSG_NOEMIT(Error) ;; .... ; }; }; }; ```. This PR will generate a lot of new test failure... that are either real failure that deserve investigation or ; tests that was previously simply previously ignoring error & warning messages; . CHANGELOG for @hugtalbot & @guparan :; - TestMessageHandler.cpp implements a new & robust way to connect msg_* message to test failure ; - TestMessageHandler_test.cpp implements test for TestMessageHandler. ; - Sofa_test is updated to use the new TestMessageHandler where msg_error generates test failures ; - All the existing tests have been changed to use the new API & removed the old one. ; - MeshSTL.cpp replace a std:cerr by a msg_error so that FIX the corresponding failing test.; - Message.cpp adds a way to convert message type to string.; - updates externs/gtest to a fresh checkout. ; ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings nor unit test failures. (This PR cannot do that...read my comment about that). ; - [x] does not break existing scenes.; - [x] does not break API compatibility.; - [x] has been reviewed and agreed to be transitional.; - [x] is more than 1 week old.; - [ ] #237 should fix most of the newly failing tests. #237 should be merged right after this PR. **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/213
https://github.com/sofa-framework/sofa/pull/213:3372,Availability,failure,failures,3372, report correct testname/line number information. ; void noEmitTestBehavior(); {; EXPECT_MSG_NOEMIT(Warning) ;; EXPECT_MSG_NOEMIT(Error) ;; }; ; /// Finally it is possible to narrow where the messages are expected using blocks...; void complexTestBehavior(); {; /// Here is the default mode. ; ....; {; /// We will report a failure is there no warning nor error emitted before the end of this block. ; EXPECT_MSG_EMIT(Warning) ;; EXPECT_MSG_EMIT(Error) ;; ...; { ; /// But this sub-part does not count... and it shouldn't emit a message. ; EXPECT_MSG_NOEMIT(Error) ;; .... ; }; }; }; ```. This PR will generate a lot of new test failure... that are either real failure that deserve investigation or ; tests that was previously simply previously ignoring error & warning messages; . CHANGELOG for @hugtalbot & @guparan :; - TestMessageHandler.cpp implements a new & robust way to connect msg_* message to test failure ; - TestMessageHandler_test.cpp implements test for TestMessageHandler. ; - Sofa_test is updated to use the new TestMessageHandler where msg_error generates test failures ; - All the existing tests have been changed to use the new API & removed the old one. ; - MeshSTL.cpp replace a std:cerr by a msg_error so that FIX the corresponding failing test.; - Message.cpp adds a way to convert message type to string.; - updates externs/gtest to a fresh checkout. ; ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings nor unit test failures. (This PR cannot do that...read my comment about that). ; - [x] does not break existing scenes.; - [x] does not break API compatibility.; - [x] has been reviewed and agreed to be transitional.; - [x] is more than 1 week old.; - [ ] #237 should fix most of the newly failing tests. #237 should be merged right after this PR. **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/213
https://github.com/sofa-framework/sofa/pull/213:2770,Deployability,update,updated,2770, report correct testname/line number information. ; void noEmitTestBehavior(); {; EXPECT_MSG_NOEMIT(Warning) ;; EXPECT_MSG_NOEMIT(Error) ;; }; ; /// Finally it is possible to narrow where the messages are expected using blocks...; void complexTestBehavior(); {; /// Here is the default mode. ; ....; {; /// We will report a failure is there no warning nor error emitted before the end of this block. ; EXPECT_MSG_EMIT(Warning) ;; EXPECT_MSG_EMIT(Error) ;; ...; { ; /// But this sub-part does not count... and it shouldn't emit a message. ; EXPECT_MSG_NOEMIT(Error) ;; .... ; }; }; }; ```. This PR will generate a lot of new test failure... that are either real failure that deserve investigation or ; tests that was previously simply previously ignoring error & warning messages; . CHANGELOG for @hugtalbot & @guparan :; - TestMessageHandler.cpp implements a new & robust way to connect msg_* message to test failure ; - TestMessageHandler_test.cpp implements test for TestMessageHandler. ; - Sofa_test is updated to use the new TestMessageHandler where msg_error generates test failures ; - All the existing tests have been changed to use the new API & removed the old one. ; - MeshSTL.cpp replace a std:cerr by a msg_error so that FIX the corresponding failing test.; - Message.cpp adds a way to convert message type to string.; - updates externs/gtest to a fresh checkout. ; ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings nor unit test failures. (This PR cannot do that...read my comment about that). ; - [x] does not break existing scenes.; - [x] does not break API compatibility.; - [x] has been reviewed and agreed to be transitional.; - [x] is more than 1 week old.; - [ ] #237 should fix most of the newly failing tests. #237 should be merged right after this PR. **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/213
https://github.com/sofa-framework/sofa/pull/213:3097,Deployability,update,updates,3097, report correct testname/line number information. ; void noEmitTestBehavior(); {; EXPECT_MSG_NOEMIT(Warning) ;; EXPECT_MSG_NOEMIT(Error) ;; }; ; /// Finally it is possible to narrow where the messages are expected using blocks...; void complexTestBehavior(); {; /// Here is the default mode. ; ....; {; /// We will report a failure is there no warning nor error emitted before the end of this block. ; EXPECT_MSG_EMIT(Warning) ;; EXPECT_MSG_EMIT(Error) ;; ...; { ; /// But this sub-part does not count... and it shouldn't emit a message. ; EXPECT_MSG_NOEMIT(Error) ;; .... ; }; }; }; ```. This PR will generate a lot of new test failure... that are either real failure that deserve investigation or ; tests that was previously simply previously ignoring error & warning messages; . CHANGELOG for @hugtalbot & @guparan :; - TestMessageHandler.cpp implements a new & robust way to connect msg_* message to test failure ; - TestMessageHandler_test.cpp implements test for TestMessageHandler. ; - Sofa_test is updated to use the new TestMessageHandler where msg_error generates test failures ; - All the existing tests have been changed to use the new API & removed the old one. ; - MeshSTL.cpp replace a std:cerr by a msg_error so that FIX the corresponding failing test.; - Message.cpp adds a way to convert message type to string.; - updates externs/gtest to a fresh checkout. ; ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings nor unit test failures. (This PR cannot do that...read my comment about that). ; - [x] does not break existing scenes.; - [x] does not break API compatibility.; - [x] has been reviewed and agreed to be transitional.; - [x] is more than 1 week old.; - [ ] #237 should fix most of the newly failing tests. #237 should be merged right after this PR. **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/213
https://github.com/sofa-framework/sofa/pull/213:107,Integrability,message,messages,107,"Problem statement:; Historically a lot of tests were implemented with the assumption that warning or error messages were tests failure. This assumption was problematic as it favor the testing of code paths that does not generate warning or errors instead of testing all the possible paths. To favor both valid and invalid paths this implicit behavior was remove and and made explicit using the ExpectMessage and MessageAsTestFailure raii's. In the process the old behavior of generating failure on errors was lost. . The PR mix the two and: ; - restores this old behavior by default so a test that specify nothing will fail on warning and error.; - but in addition, each tests class/function/bloc can now specify how a specific bloc can react to a message. This can be done using a new syntax taken inspired mimicking the one from gtest. ; - improve the way test failures about warning and error are reported:; https://ci.inria.fr/sofa-ci/job/ubuntu_gcc-4.8_options/5074/testReport/junit/(root)/RigidRigidMappingTest_0/test_translation/; . Example: ; ```cpp; class MyTest : public Sofa_test<>; ; /// This test will fail if a warning/error message is send because the test inherit from sofa_test; void defaultTestBehavior(); {; ....; }. /// This test should generate failure if NO warning and NO Error message is emitted; void catchingTestBehavior(); {; EXPECT_MSG_EMIT(Warning) ;; EXPECT_MSG_EMIT(Error) ;. mycomponent.load(""atotallybrokenfile.txt""); }. /// By default test failure are catched from Sofa_test. This means that the information returned; /// in the test failure are the location of the failure in Sofa_test.cpp:lineno; /// This is why it is always better to explicitely specify the test behavior (possible the same as ; /// the default one as it will report correct testname/line number information. ; void noEmitTestBehavior(); {; EXPECT_MSG_NOEMIT(Warning) ;; EXPECT_MSG_NOEMIT(Error) ;; }; ; /// Finally it is possible to narrow where the messages are expected using blocks...; void c",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/213
https://github.com/sofa-framework/sofa/pull/213:412,Integrability,Message,MessageAsTestFailure,412,"Problem statement:; Historically a lot of tests were implemented with the assumption that warning or error messages were tests failure. This assumption was problematic as it favor the testing of code paths that does not generate warning or errors instead of testing all the possible paths. To favor both valid and invalid paths this implicit behavior was remove and and made explicit using the ExpectMessage and MessageAsTestFailure raii's. In the process the old behavior of generating failure on errors was lost. . The PR mix the two and: ; - restores this old behavior by default so a test that specify nothing will fail on warning and error.; - but in addition, each tests class/function/bloc can now specify how a specific bloc can react to a message. This can be done using a new syntax taken inspired mimicking the one from gtest. ; - improve the way test failures about warning and error are reported:; https://ci.inria.fr/sofa-ci/job/ubuntu_gcc-4.8_options/5074/testReport/junit/(root)/RigidRigidMappingTest_0/test_translation/; . Example: ; ```cpp; class MyTest : public Sofa_test<>; ; /// This test will fail if a warning/error message is send because the test inherit from sofa_test; void defaultTestBehavior(); {; ....; }. /// This test should generate failure if NO warning and NO Error message is emitted; void catchingTestBehavior(); {; EXPECT_MSG_EMIT(Warning) ;; EXPECT_MSG_EMIT(Error) ;. mycomponent.load(""atotallybrokenfile.txt""); }. /// By default test failure are catched from Sofa_test. This means that the information returned; /// in the test failure are the location of the failure in Sofa_test.cpp:lineno; /// This is why it is always better to explicitely specify the test behavior (possible the same as ; /// the default one as it will report correct testname/line number information. ; void noEmitTestBehavior(); {; EXPECT_MSG_NOEMIT(Warning) ;; EXPECT_MSG_NOEMIT(Error) ;; }; ; /// Finally it is possible to narrow where the messages are expected using blocks...; void c",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/213
https://github.com/sofa-framework/sofa/pull/213:748,Integrability,message,message,748,"Problem statement:; Historically a lot of tests were implemented with the assumption that warning or error messages were tests failure. This assumption was problematic as it favor the testing of code paths that does not generate warning or errors instead of testing all the possible paths. To favor both valid and invalid paths this implicit behavior was remove and and made explicit using the ExpectMessage and MessageAsTestFailure raii's. In the process the old behavior of generating failure on errors was lost. . The PR mix the two and: ; - restores this old behavior by default so a test that specify nothing will fail on warning and error.; - but in addition, each tests class/function/bloc can now specify how a specific bloc can react to a message. This can be done using a new syntax taken inspired mimicking the one from gtest. ; - improve the way test failures about warning and error are reported:; https://ci.inria.fr/sofa-ci/job/ubuntu_gcc-4.8_options/5074/testReport/junit/(root)/RigidRigidMappingTest_0/test_translation/; . Example: ; ```cpp; class MyTest : public Sofa_test<>; ; /// This test will fail if a warning/error message is send because the test inherit from sofa_test; void defaultTestBehavior(); {; ....; }. /// This test should generate failure if NO warning and NO Error message is emitted; void catchingTestBehavior(); {; EXPECT_MSG_EMIT(Warning) ;; EXPECT_MSG_EMIT(Error) ;. mycomponent.load(""atotallybrokenfile.txt""); }. /// By default test failure are catched from Sofa_test. This means that the information returned; /// in the test failure are the location of the failure in Sofa_test.cpp:lineno; /// This is why it is always better to explicitely specify the test behavior (possible the same as ; /// the default one as it will report correct testname/line number information. ; void noEmitTestBehavior(); {; EXPECT_MSG_NOEMIT(Warning) ;; EXPECT_MSG_NOEMIT(Error) ;; }; ; /// Finally it is possible to narrow where the messages are expected using blocks...; void c",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/213
https://github.com/sofa-framework/sofa/pull/213:1139,Integrability,message,message,1139,"e. This assumption was problematic as it favor the testing of code paths that does not generate warning or errors instead of testing all the possible paths. To favor both valid and invalid paths this implicit behavior was remove and and made explicit using the ExpectMessage and MessageAsTestFailure raii's. In the process the old behavior of generating failure on errors was lost. . The PR mix the two and: ; - restores this old behavior by default so a test that specify nothing will fail on warning and error.; - but in addition, each tests class/function/bloc can now specify how a specific bloc can react to a message. This can be done using a new syntax taken inspired mimicking the one from gtest. ; - improve the way test failures about warning and error are reported:; https://ci.inria.fr/sofa-ci/job/ubuntu_gcc-4.8_options/5074/testReport/junit/(root)/RigidRigidMappingTest_0/test_translation/; . Example: ; ```cpp; class MyTest : public Sofa_test<>; ; /// This test will fail if a warning/error message is send because the test inherit from sofa_test; void defaultTestBehavior(); {; ....; }. /// This test should generate failure if NO warning and NO Error message is emitted; void catchingTestBehavior(); {; EXPECT_MSG_EMIT(Warning) ;; EXPECT_MSG_EMIT(Error) ;. mycomponent.load(""atotallybrokenfile.txt""); }. /// By default test failure are catched from Sofa_test. This means that the information returned; /// in the test failure are the location of the failure in Sofa_test.cpp:lineno; /// This is why it is always better to explicitely specify the test behavior (possible the same as ; /// the default one as it will report correct testname/line number information. ; void noEmitTestBehavior(); {; EXPECT_MSG_NOEMIT(Warning) ;; EXPECT_MSG_NOEMIT(Error) ;; }; ; /// Finally it is possible to narrow where the messages are expected using blocks...; void complexTestBehavior(); {; /// Here is the default mode. ; ....; {; /// We will report a failure is there no warning nor error emitted ",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/213
https://github.com/sofa-framework/sofa/pull/213:1301,Integrability,message,message,1301,"d paths this implicit behavior was remove and and made explicit using the ExpectMessage and MessageAsTestFailure raii's. In the process the old behavior of generating failure on errors was lost. . The PR mix the two and: ; - restores this old behavior by default so a test that specify nothing will fail on warning and error.; - but in addition, each tests class/function/bloc can now specify how a specific bloc can react to a message. This can be done using a new syntax taken inspired mimicking the one from gtest. ; - improve the way test failures about warning and error are reported:; https://ci.inria.fr/sofa-ci/job/ubuntu_gcc-4.8_options/5074/testReport/junit/(root)/RigidRigidMappingTest_0/test_translation/; . Example: ; ```cpp; class MyTest : public Sofa_test<>; ; /// This test will fail if a warning/error message is send because the test inherit from sofa_test; void defaultTestBehavior(); {; ....; }. /// This test should generate failure if NO warning and NO Error message is emitted; void catchingTestBehavior(); {; EXPECT_MSG_EMIT(Warning) ;; EXPECT_MSG_EMIT(Error) ;. mycomponent.load(""atotallybrokenfile.txt""); }. /// By default test failure are catched from Sofa_test. This means that the information returned; /// in the test failure are the location of the failure in Sofa_test.cpp:lineno; /// This is why it is always better to explicitely specify the test behavior (possible the same as ; /// the default one as it will report correct testname/line number information. ; void noEmitTestBehavior(); {; EXPECT_MSG_NOEMIT(Warning) ;; EXPECT_MSG_NOEMIT(Error) ;; }; ; /// Finally it is possible to narrow where the messages are expected using blocks...; void complexTestBehavior(); {; /// Here is the default mode. ; ....; {; /// We will report a failure is there no warning nor error emitted before the end of this block. ; EXPECT_MSG_EMIT(Warning) ;; EXPECT_MSG_EMIT(Error) ;; ...; { ; /// But this sub-part does not count... and it shouldn't emit a message. ; EXPECT_MSG_NOEMIT",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/213
https://github.com/sofa-framework/sofa/pull/213:1956,Integrability,message,messages,1956,"ported:; https://ci.inria.fr/sofa-ci/job/ubuntu_gcc-4.8_options/5074/testReport/junit/(root)/RigidRigidMappingTest_0/test_translation/; . Example: ; ```cpp; class MyTest : public Sofa_test<>; ; /// This test will fail if a warning/error message is send because the test inherit from sofa_test; void defaultTestBehavior(); {; ....; }. /// This test should generate failure if NO warning and NO Error message is emitted; void catchingTestBehavior(); {; EXPECT_MSG_EMIT(Warning) ;; EXPECT_MSG_EMIT(Error) ;. mycomponent.load(""atotallybrokenfile.txt""); }. /// By default test failure are catched from Sofa_test. This means that the information returned; /// in the test failure are the location of the failure in Sofa_test.cpp:lineno; /// This is why it is always better to explicitely specify the test behavior (possible the same as ; /// the default one as it will report correct testname/line number information. ; void noEmitTestBehavior(); {; EXPECT_MSG_NOEMIT(Warning) ;; EXPECT_MSG_NOEMIT(Error) ;; }; ; /// Finally it is possible to narrow where the messages are expected using blocks...; void complexTestBehavior(); {; /// Here is the default mode. ; ....; {; /// We will report a failure is there no warning nor error emitted before the end of this block. ; EXPECT_MSG_EMIT(Warning) ;; EXPECT_MSG_EMIT(Error) ;; ...; { ; /// But this sub-part does not count... and it shouldn't emit a message. ; EXPECT_MSG_NOEMIT(Error) ;; .... ; }; }; }; ```. This PR will generate a lot of new test failure... that are either real failure that deserve investigation or ; tests that was previously simply previously ignoring error & warning messages; . CHANGELOG for @hugtalbot & @guparan :; - TestMessageHandler.cpp implements a new & robust way to connect msg_* message to test failure ; - TestMessageHandler_test.cpp implements test for TestMessageHandler. ; - Sofa_test is updated to use the new TestMessageHandler where msg_error generates test failures ; - All the existing tests have been changed to us",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/213
https://github.com/sofa-framework/sofa/pull/213:2293,Integrability,message,message,2293,"ing and NO Error message is emitted; void catchingTestBehavior(); {; EXPECT_MSG_EMIT(Warning) ;; EXPECT_MSG_EMIT(Error) ;. mycomponent.load(""atotallybrokenfile.txt""); }. /// By default test failure are catched from Sofa_test. This means that the information returned; /// in the test failure are the location of the failure in Sofa_test.cpp:lineno; /// This is why it is always better to explicitely specify the test behavior (possible the same as ; /// the default one as it will report correct testname/line number information. ; void noEmitTestBehavior(); {; EXPECT_MSG_NOEMIT(Warning) ;; EXPECT_MSG_NOEMIT(Error) ;; }; ; /// Finally it is possible to narrow where the messages are expected using blocks...; void complexTestBehavior(); {; /// Here is the default mode. ; ....; {; /// We will report a failure is there no warning nor error emitted before the end of this block. ; EXPECT_MSG_EMIT(Warning) ;; EXPECT_MSG_EMIT(Error) ;; ...; { ; /// But this sub-part does not count... and it shouldn't emit a message. ; EXPECT_MSG_NOEMIT(Error) ;; .... ; }; }; }; ```. This PR will generate a lot of new test failure... that are either real failure that deserve investigation or ; tests that was previously simply previously ignoring error & warning messages; . CHANGELOG for @hugtalbot & @guparan :; - TestMessageHandler.cpp implements a new & robust way to connect msg_* message to test failure ; - TestMessageHandler_test.cpp implements test for TestMessageHandler. ; - Sofa_test is updated to use the new TestMessageHandler where msg_error generates test failures ; - All the existing tests have been changed to use the new API & removed the old one. ; - MeshSTL.cpp replace a std:cerr by a msg_error so that FIX the corresponding failing test.; - Message.cpp adds a way to convert message type to string.; - updates externs/gtest to a fresh checkout. ; ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SU",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/213
https://github.com/sofa-framework/sofa/pull/213:2534,Integrability,message,messages,2534,failure are catched from Sofa_test. This means that the information returned; /// in the test failure are the location of the failure in Sofa_test.cpp:lineno; /// This is why it is always better to explicitely specify the test behavior (possible the same as ; /// the default one as it will report correct testname/line number information. ; void noEmitTestBehavior(); {; EXPECT_MSG_NOEMIT(Warning) ;; EXPECT_MSG_NOEMIT(Error) ;; }; ; /// Finally it is possible to narrow where the messages are expected using blocks...; void complexTestBehavior(); {; /// Here is the default mode. ; ....; {; /// We will report a failure is there no warning nor error emitted before the end of this block. ; EXPECT_MSG_EMIT(Warning) ;; EXPECT_MSG_EMIT(Error) ;; ...; { ; /// But this sub-part does not count... and it shouldn't emit a message. ; EXPECT_MSG_NOEMIT(Error) ;; .... ; }; }; }; ```. This PR will generate a lot of new test failure... that are either real failure that deserve investigation or ; tests that was previously simply previously ignoring error & warning messages; . CHANGELOG for @hugtalbot & @guparan :; - TestMessageHandler.cpp implements a new & robust way to connect msg_* message to test failure ; - TestMessageHandler_test.cpp implements test for TestMessageHandler. ; - Sofa_test is updated to use the new TestMessageHandler where msg_error generates test failures ; - All the existing tests have been changed to use the new API & removed the old one. ; - MeshSTL.cpp replace a std:cerr by a msg_error so that FIX the corresponding failing test.; - Message.cpp adds a way to convert message type to string.; - updates externs/gtest to a fresh checkout. ; ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings nor unit test failures. (This PR cannot do that...read my comment about that). ; - [x] does not break existing scene,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/213
https://github.com/sofa-framework/sofa/pull/213:2657,Integrability,message,message,2657,ways better to explicitely specify the test behavior (possible the same as ; /// the default one as it will report correct testname/line number information. ; void noEmitTestBehavior(); {; EXPECT_MSG_NOEMIT(Warning) ;; EXPECT_MSG_NOEMIT(Error) ;; }; ; /// Finally it is possible to narrow where the messages are expected using blocks...; void complexTestBehavior(); {; /// Here is the default mode. ; ....; {; /// We will report a failure is there no warning nor error emitted before the end of this block. ; EXPECT_MSG_EMIT(Warning) ;; EXPECT_MSG_EMIT(Error) ;; ...; { ; /// But this sub-part does not count... and it shouldn't emit a message. ; EXPECT_MSG_NOEMIT(Error) ;; .... ; }; }; }; ```. This PR will generate a lot of new test failure... that are either real failure that deserve investigation or ; tests that was previously simply previously ignoring error & warning messages; . CHANGELOG for @hugtalbot & @guparan :; - TestMessageHandler.cpp implements a new & robust way to connect msg_* message to test failure ; - TestMessageHandler_test.cpp implements test for TestMessageHandler. ; - Sofa_test is updated to use the new TestMessageHandler where msg_error generates test failures ; - All the existing tests have been changed to use the new API & removed the old one. ; - MeshSTL.cpp replace a std:cerr by a msg_error so that FIX the corresponding failing test.; - Message.cpp adds a way to convert message type to string.; - updates externs/gtest to a fresh checkout. ; ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings nor unit test failures. (This PR cannot do that...read my comment about that). ; - [x] does not break existing scenes.; - [x] does not break API compatibility.; - [x] has been reviewed and agreed to be transitional.; - [x] is more than 1 week old.; - [ ] #237 should fix most of the newly failing tes,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/213
https://github.com/sofa-framework/sofa/pull/213:3036,Integrability,Message,Message,3036, report correct testname/line number information. ; void noEmitTestBehavior(); {; EXPECT_MSG_NOEMIT(Warning) ;; EXPECT_MSG_NOEMIT(Error) ;; }; ; /// Finally it is possible to narrow where the messages are expected using blocks...; void complexTestBehavior(); {; /// Here is the default mode. ; ....; {; /// We will report a failure is there no warning nor error emitted before the end of this block. ; EXPECT_MSG_EMIT(Warning) ;; EXPECT_MSG_EMIT(Error) ;; ...; { ; /// But this sub-part does not count... and it shouldn't emit a message. ; EXPECT_MSG_NOEMIT(Error) ;; .... ; }; }; }; ```. This PR will generate a lot of new test failure... that are either real failure that deserve investigation or ; tests that was previously simply previously ignoring error & warning messages; . CHANGELOG for @hugtalbot & @guparan :; - TestMessageHandler.cpp implements a new & robust way to connect msg_* message to test failure ; - TestMessageHandler_test.cpp implements test for TestMessageHandler. ; - Sofa_test is updated to use the new TestMessageHandler where msg_error generates test failures ; - All the existing tests have been changed to use the new API & removed the old one. ; - MeshSTL.cpp replace a std:cerr by a msg_error so that FIX the corresponding failing test.; - Message.cpp adds a way to convert message type to string.; - updates externs/gtest to a fresh checkout. ; ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings nor unit test failures. (This PR cannot do that...read my comment about that). ; - [x] does not break existing scenes.; - [x] does not break API compatibility.; - [x] has been reviewed and agreed to be transitional.; - [x] is more than 1 week old.; - [ ] #237 should fix most of the newly failing tests. #237 should be merged right after this PR. **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/213
https://github.com/sofa-framework/sofa/pull/213:3070,Integrability,message,message,3070, report correct testname/line number information. ; void noEmitTestBehavior(); {; EXPECT_MSG_NOEMIT(Warning) ;; EXPECT_MSG_NOEMIT(Error) ;; }; ; /// Finally it is possible to narrow where the messages are expected using blocks...; void complexTestBehavior(); {; /// Here is the default mode. ; ....; {; /// We will report a failure is there no warning nor error emitted before the end of this block. ; EXPECT_MSG_EMIT(Warning) ;; EXPECT_MSG_EMIT(Error) ;; ...; { ; /// But this sub-part does not count... and it shouldn't emit a message. ; EXPECT_MSG_NOEMIT(Error) ;; .... ; }; }; }; ```. This PR will generate a lot of new test failure... that are either real failure that deserve investigation or ; tests that was previously simply previously ignoring error & warning messages; . CHANGELOG for @hugtalbot & @guparan :; - TestMessageHandler.cpp implements a new & robust way to connect msg_* message to test failure ; - TestMessageHandler_test.cpp implements test for TestMessageHandler. ; - Sofa_test is updated to use the new TestMessageHandler where msg_error generates test failures ; - All the existing tests have been changed to use the new API & removed the old one. ; - MeshSTL.cpp replace a std:cerr by a msg_error so that FIX the corresponding failing test.; - Message.cpp adds a way to convert message type to string.; - updates externs/gtest to a fresh checkout. ; ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings nor unit test failures. (This PR cannot do that...read my comment about that). ; - [x] does not break existing scenes.; - [x] does not break API compatibility.; - [x] has been reviewed and agreed to be transitional.; - [x] is more than 1 week old.; - [ ] #237 should fix most of the newly failing tests. #237 should be merged right after this PR. **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/213
https://github.com/sofa-framework/sofa/pull/213:3241,Integrability,message,message,3241, report correct testname/line number information. ; void noEmitTestBehavior(); {; EXPECT_MSG_NOEMIT(Warning) ;; EXPECT_MSG_NOEMIT(Error) ;; }; ; /// Finally it is possible to narrow where the messages are expected using blocks...; void complexTestBehavior(); {; /// Here is the default mode. ; ....; {; /// We will report a failure is there no warning nor error emitted before the end of this block. ; EXPECT_MSG_EMIT(Warning) ;; EXPECT_MSG_EMIT(Error) ;; ...; { ; /// But this sub-part does not count... and it shouldn't emit a message. ; EXPECT_MSG_NOEMIT(Error) ;; .... ; }; }; }; ```. This PR will generate a lot of new test failure... that are either real failure that deserve investigation or ; tests that was previously simply previously ignoring error & warning messages; . CHANGELOG for @hugtalbot & @guparan :; - TestMessageHandler.cpp implements a new & robust way to connect msg_* message to test failure ; - TestMessageHandler_test.cpp implements test for TestMessageHandler. ; - Sofa_test is updated to use the new TestMessageHandler where msg_error generates test failures ; - All the existing tests have been changed to use the new API & removed the old one. ; - MeshSTL.cpp replace a std:cerr by a msg_error so that FIX the corresponding failing test.; - Message.cpp adds a way to convert message type to string.; - updates externs/gtest to a fresh checkout. ; ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings nor unit test failures. (This PR cannot do that...read my comment about that). ; - [x] does not break existing scenes.; - [x] does not break API compatibility.; - [x] has been reviewed and agreed to be transitional.; - [x] is more than 1 week old.; - [ ] #237 should fix most of the newly failing tests. #237 should be merged right after this PR. **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/213
https://github.com/sofa-framework/sofa/pull/213:1172,Modifiability,inherit,inherit,1172,"e. This assumption was problematic as it favor the testing of code paths that does not generate warning or errors instead of testing all the possible paths. To favor both valid and invalid paths this implicit behavior was remove and and made explicit using the ExpectMessage and MessageAsTestFailure raii's. In the process the old behavior of generating failure on errors was lost. . The PR mix the two and: ; - restores this old behavior by default so a test that specify nothing will fail on warning and error.; - but in addition, each tests class/function/bloc can now specify how a specific bloc can react to a message. This can be done using a new syntax taken inspired mimicking the one from gtest. ; - improve the way test failures about warning and error are reported:; https://ci.inria.fr/sofa-ci/job/ubuntu_gcc-4.8_options/5074/testReport/junit/(root)/RigidRigidMappingTest_0/test_translation/; . Example: ; ```cpp; class MyTest : public Sofa_test<>; ; /// This test will fail if a warning/error message is send because the test inherit from sofa_test; void defaultTestBehavior(); {; ....; }. /// This test should generate failure if NO warning and NO Error message is emitted; void catchingTestBehavior(); {; EXPECT_MSG_EMIT(Warning) ;; EXPECT_MSG_EMIT(Error) ;. mycomponent.load(""atotallybrokenfile.txt""); }. /// By default test failure are catched from Sofa_test. This means that the information returned; /// in the test failure are the location of the failure in Sofa_test.cpp:lineno; /// This is why it is always better to explicitely specify the test behavior (possible the same as ; /// the default one as it will report correct testname/line number information. ; void noEmitTestBehavior(); {; EXPECT_MSG_NOEMIT(Warning) ;; EXPECT_MSG_NOEMIT(Error) ;; }; ; /// Finally it is possible to narrow where the messages are expected using blocks...; void complexTestBehavior(); {; /// Here is the default mode. ; ....; {; /// We will report a failure is there no warning nor error emitted ",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/213
https://github.com/sofa-framework/sofa/pull/213:1419,Performance,load,load,1419,"e raii's. In the process the old behavior of generating failure on errors was lost. . The PR mix the two and: ; - restores this old behavior by default so a test that specify nothing will fail on warning and error.; - but in addition, each tests class/function/bloc can now specify how a specific bloc can react to a message. This can be done using a new syntax taken inspired mimicking the one from gtest. ; - improve the way test failures about warning and error are reported:; https://ci.inria.fr/sofa-ci/job/ubuntu_gcc-4.8_options/5074/testReport/junit/(root)/RigidRigidMappingTest_0/test_translation/; . Example: ; ```cpp; class MyTest : public Sofa_test<>; ; /// This test will fail if a warning/error message is send because the test inherit from sofa_test; void defaultTestBehavior(); {; ....; }. /// This test should generate failure if NO warning and NO Error message is emitted; void catchingTestBehavior(); {; EXPECT_MSG_EMIT(Warning) ;; EXPECT_MSG_EMIT(Error) ;. mycomponent.load(""atotallybrokenfile.txt""); }. /// By default test failure are catched from Sofa_test. This means that the information returned; /// in the test failure are the location of the failure in Sofa_test.cpp:lineno; /// This is why it is always better to explicitely specify the test behavior (possible the same as ; /// the default one as it will report correct testname/line number information. ; void noEmitTestBehavior(); {; EXPECT_MSG_NOEMIT(Warning) ;; EXPECT_MSG_NOEMIT(Error) ;; }; ; /// Finally it is possible to narrow where the messages are expected using blocks...; void complexTestBehavior(); {; /// Here is the default mode. ; ....; {; /// We will report a failure is there no warning nor error emitted before the end of this block. ; EXPECT_MSG_EMIT(Warning) ;; EXPECT_MSG_EMIT(Error) ;; ...; { ; /// But this sub-part does not count... and it shouldn't emit a message. ; EXPECT_MSG_NOEMIT(Error) ;; .... ; }; }; }; ```. This PR will generate a lot of new test failure... that are either real failure",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/213
https://github.com/sofa-framework/sofa/pull/213:42,Testability,test,tests,42,"Problem statement:; Historically a lot of tests were implemented with the assumption that warning or error messages were tests failure. This assumption was problematic as it favor the testing of code paths that does not generate warning or errors instead of testing all the possible paths. To favor both valid and invalid paths this implicit behavior was remove and and made explicit using the ExpectMessage and MessageAsTestFailure raii's. In the process the old behavior of generating failure on errors was lost. . The PR mix the two and: ; - restores this old behavior by default so a test that specify nothing will fail on warning and error.; - but in addition, each tests class/function/bloc can now specify how a specific bloc can react to a message. This can be done using a new syntax taken inspired mimicking the one from gtest. ; - improve the way test failures about warning and error are reported:; https://ci.inria.fr/sofa-ci/job/ubuntu_gcc-4.8_options/5074/testReport/junit/(root)/RigidRigidMappingTest_0/test_translation/; . Example: ; ```cpp; class MyTest : public Sofa_test<>; ; /// This test will fail if a warning/error message is send because the test inherit from sofa_test; void defaultTestBehavior(); {; ....; }. /// This test should generate failure if NO warning and NO Error message is emitted; void catchingTestBehavior(); {; EXPECT_MSG_EMIT(Warning) ;; EXPECT_MSG_EMIT(Error) ;. mycomponent.load(""atotallybrokenfile.txt""); }. /// By default test failure are catched from Sofa_test. This means that the information returned; /// in the test failure are the location of the failure in Sofa_test.cpp:lineno; /// This is why it is always better to explicitely specify the test behavior (possible the same as ; /// the default one as it will report correct testname/line number information. ; void noEmitTestBehavior(); {; EXPECT_MSG_NOEMIT(Warning) ;; EXPECT_MSG_NOEMIT(Error) ;; }; ; /// Finally it is possible to narrow where the messages are expected using blocks...; void c",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/213
https://github.com/sofa-framework/sofa/pull/213:121,Testability,test,tests,121,"Problem statement:; Historically a lot of tests were implemented with the assumption that warning or error messages were tests failure. This assumption was problematic as it favor the testing of code paths that does not generate warning or errors instead of testing all the possible paths. To favor both valid and invalid paths this implicit behavior was remove and and made explicit using the ExpectMessage and MessageAsTestFailure raii's. In the process the old behavior of generating failure on errors was lost. . The PR mix the two and: ; - restores this old behavior by default so a test that specify nothing will fail on warning and error.; - but in addition, each tests class/function/bloc can now specify how a specific bloc can react to a message. This can be done using a new syntax taken inspired mimicking the one from gtest. ; - improve the way test failures about warning and error are reported:; https://ci.inria.fr/sofa-ci/job/ubuntu_gcc-4.8_options/5074/testReport/junit/(root)/RigidRigidMappingTest_0/test_translation/; . Example: ; ```cpp; class MyTest : public Sofa_test<>; ; /// This test will fail if a warning/error message is send because the test inherit from sofa_test; void defaultTestBehavior(); {; ....; }. /// This test should generate failure if NO warning and NO Error message is emitted; void catchingTestBehavior(); {; EXPECT_MSG_EMIT(Warning) ;; EXPECT_MSG_EMIT(Error) ;. mycomponent.load(""atotallybrokenfile.txt""); }. /// By default test failure are catched from Sofa_test. This means that the information returned; /// in the test failure are the location of the failure in Sofa_test.cpp:lineno; /// This is why it is always better to explicitely specify the test behavior (possible the same as ; /// the default one as it will report correct testname/line number information. ; void noEmitTestBehavior(); {; EXPECT_MSG_NOEMIT(Warning) ;; EXPECT_MSG_NOEMIT(Error) ;; }; ; /// Finally it is possible to narrow where the messages are expected using blocks...; void c",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/213
https://github.com/sofa-framework/sofa/pull/213:184,Testability,test,testing,184,"Problem statement:; Historically a lot of tests were implemented with the assumption that warning or error messages were tests failure. This assumption was problematic as it favor the testing of code paths that does not generate warning or errors instead of testing all the possible paths. To favor both valid and invalid paths this implicit behavior was remove and and made explicit using the ExpectMessage and MessageAsTestFailure raii's. In the process the old behavior of generating failure on errors was lost. . The PR mix the two and: ; - restores this old behavior by default so a test that specify nothing will fail on warning and error.; - but in addition, each tests class/function/bloc can now specify how a specific bloc can react to a message. This can be done using a new syntax taken inspired mimicking the one from gtest. ; - improve the way test failures about warning and error are reported:; https://ci.inria.fr/sofa-ci/job/ubuntu_gcc-4.8_options/5074/testReport/junit/(root)/RigidRigidMappingTest_0/test_translation/; . Example: ; ```cpp; class MyTest : public Sofa_test<>; ; /// This test will fail if a warning/error message is send because the test inherit from sofa_test; void defaultTestBehavior(); {; ....; }. /// This test should generate failure if NO warning and NO Error message is emitted; void catchingTestBehavior(); {; EXPECT_MSG_EMIT(Warning) ;; EXPECT_MSG_EMIT(Error) ;. mycomponent.load(""atotallybrokenfile.txt""); }. /// By default test failure are catched from Sofa_test. This means that the information returned; /// in the test failure are the location of the failure in Sofa_test.cpp:lineno; /// This is why it is always better to explicitely specify the test behavior (possible the same as ; /// the default one as it will report correct testname/line number information. ; void noEmitTestBehavior(); {; EXPECT_MSG_NOEMIT(Warning) ;; EXPECT_MSG_NOEMIT(Error) ;; }; ; /// Finally it is possible to narrow where the messages are expected using blocks...; void c",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/213
https://github.com/sofa-framework/sofa/pull/213:258,Testability,test,testing,258,"Problem statement:; Historically a lot of tests were implemented with the assumption that warning or error messages were tests failure. This assumption was problematic as it favor the testing of code paths that does not generate warning or errors instead of testing all the possible paths. To favor both valid and invalid paths this implicit behavior was remove and and made explicit using the ExpectMessage and MessageAsTestFailure raii's. In the process the old behavior of generating failure on errors was lost. . The PR mix the two and: ; - restores this old behavior by default so a test that specify nothing will fail on warning and error.; - but in addition, each tests class/function/bloc can now specify how a specific bloc can react to a message. This can be done using a new syntax taken inspired mimicking the one from gtest. ; - improve the way test failures about warning and error are reported:; https://ci.inria.fr/sofa-ci/job/ubuntu_gcc-4.8_options/5074/testReport/junit/(root)/RigidRigidMappingTest_0/test_translation/; . Example: ; ```cpp; class MyTest : public Sofa_test<>; ; /// This test will fail if a warning/error message is send because the test inherit from sofa_test; void defaultTestBehavior(); {; ....; }. /// This test should generate failure if NO warning and NO Error message is emitted; void catchingTestBehavior(); {; EXPECT_MSG_EMIT(Warning) ;; EXPECT_MSG_EMIT(Error) ;. mycomponent.load(""atotallybrokenfile.txt""); }. /// By default test failure are catched from Sofa_test. This means that the information returned; /// in the test failure are the location of the failure in Sofa_test.cpp:lineno; /// This is why it is always better to explicitely specify the test behavior (possible the same as ; /// the default one as it will report correct testname/line number information. ; void noEmitTestBehavior(); {; EXPECT_MSG_NOEMIT(Warning) ;; EXPECT_MSG_NOEMIT(Error) ;; }; ; /// Finally it is possible to narrow where the messages are expected using blocks...; void c",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/213
https://github.com/sofa-framework/sofa/pull/213:588,Testability,test,test,588,"Problem statement:; Historically a lot of tests were implemented with the assumption that warning or error messages were tests failure. This assumption was problematic as it favor the testing of code paths that does not generate warning or errors instead of testing all the possible paths. To favor both valid and invalid paths this implicit behavior was remove and and made explicit using the ExpectMessage and MessageAsTestFailure raii's. In the process the old behavior of generating failure on errors was lost. . The PR mix the two and: ; - restores this old behavior by default so a test that specify nothing will fail on warning and error.; - but in addition, each tests class/function/bloc can now specify how a specific bloc can react to a message. This can be done using a new syntax taken inspired mimicking the one from gtest. ; - improve the way test failures about warning and error are reported:; https://ci.inria.fr/sofa-ci/job/ubuntu_gcc-4.8_options/5074/testReport/junit/(root)/RigidRigidMappingTest_0/test_translation/; . Example: ; ```cpp; class MyTest : public Sofa_test<>; ; /// This test will fail if a warning/error message is send because the test inherit from sofa_test; void defaultTestBehavior(); {; ....; }. /// This test should generate failure if NO warning and NO Error message is emitted; void catchingTestBehavior(); {; EXPECT_MSG_EMIT(Warning) ;; EXPECT_MSG_EMIT(Error) ;. mycomponent.load(""atotallybrokenfile.txt""); }. /// By default test failure are catched from Sofa_test. This means that the information returned; /// in the test failure are the location of the failure in Sofa_test.cpp:lineno; /// This is why it is always better to explicitely specify the test behavior (possible the same as ; /// the default one as it will report correct testname/line number information. ; void noEmitTestBehavior(); {; EXPECT_MSG_NOEMIT(Warning) ;; EXPECT_MSG_NOEMIT(Error) ;; }; ; /// Finally it is possible to narrow where the messages are expected using blocks...; void c",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/213
https://github.com/sofa-framework/sofa/pull/213:671,Testability,test,tests,671,"Problem statement:; Historically a lot of tests were implemented with the assumption that warning or error messages were tests failure. This assumption was problematic as it favor the testing of code paths that does not generate warning or errors instead of testing all the possible paths. To favor both valid and invalid paths this implicit behavior was remove and and made explicit using the ExpectMessage and MessageAsTestFailure raii's. In the process the old behavior of generating failure on errors was lost. . The PR mix the two and: ; - restores this old behavior by default so a test that specify nothing will fail on warning and error.; - but in addition, each tests class/function/bloc can now specify how a specific bloc can react to a message. This can be done using a new syntax taken inspired mimicking the one from gtest. ; - improve the way test failures about warning and error are reported:; https://ci.inria.fr/sofa-ci/job/ubuntu_gcc-4.8_options/5074/testReport/junit/(root)/RigidRigidMappingTest_0/test_translation/; . Example: ; ```cpp; class MyTest : public Sofa_test<>; ; /// This test will fail if a warning/error message is send because the test inherit from sofa_test; void defaultTestBehavior(); {; ....; }. /// This test should generate failure if NO warning and NO Error message is emitted; void catchingTestBehavior(); {; EXPECT_MSG_EMIT(Warning) ;; EXPECT_MSG_EMIT(Error) ;. mycomponent.load(""atotallybrokenfile.txt""); }. /// By default test failure are catched from Sofa_test. This means that the information returned; /// in the test failure are the location of the failure in Sofa_test.cpp:lineno; /// This is why it is always better to explicitely specify the test behavior (possible the same as ; /// the default one as it will report correct testname/line number information. ; void noEmitTestBehavior(); {; EXPECT_MSG_NOEMIT(Warning) ;; EXPECT_MSG_NOEMIT(Error) ;; }; ; /// Finally it is possible to narrow where the messages are expected using blocks...; void c",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/213
https://github.com/sofa-framework/sofa/pull/213:858,Testability,test,test,858,"Problem statement:; Historically a lot of tests were implemented with the assumption that warning or error messages were tests failure. This assumption was problematic as it favor the testing of code paths that does not generate warning or errors instead of testing all the possible paths. To favor both valid and invalid paths this implicit behavior was remove and and made explicit using the ExpectMessage and MessageAsTestFailure raii's. In the process the old behavior of generating failure on errors was lost. . The PR mix the two and: ; - restores this old behavior by default so a test that specify nothing will fail on warning and error.; - but in addition, each tests class/function/bloc can now specify how a specific bloc can react to a message. This can be done using a new syntax taken inspired mimicking the one from gtest. ; - improve the way test failures about warning and error are reported:; https://ci.inria.fr/sofa-ci/job/ubuntu_gcc-4.8_options/5074/testReport/junit/(root)/RigidRigidMappingTest_0/test_translation/; . Example: ; ```cpp; class MyTest : public Sofa_test<>; ; /// This test will fail if a warning/error message is send because the test inherit from sofa_test; void defaultTestBehavior(); {; ....; }. /// This test should generate failure if NO warning and NO Error message is emitted; void catchingTestBehavior(); {; EXPECT_MSG_EMIT(Warning) ;; EXPECT_MSG_EMIT(Error) ;. mycomponent.load(""atotallybrokenfile.txt""); }. /// By default test failure are catched from Sofa_test. This means that the information returned; /// in the test failure are the location of the failure in Sofa_test.cpp:lineno; /// This is why it is always better to explicitely specify the test behavior (possible the same as ; /// the default one as it will report correct testname/line number information. ; void noEmitTestBehavior(); {; EXPECT_MSG_NOEMIT(Warning) ;; EXPECT_MSG_NOEMIT(Error) ;; }; ; /// Finally it is possible to narrow where the messages are expected using blocks...; void c",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/213
https://github.com/sofa-framework/sofa/pull/213:971,Testability,test,testReport,971,"Problem statement:; Historically a lot of tests were implemented with the assumption that warning or error messages were tests failure. This assumption was problematic as it favor the testing of code paths that does not generate warning or errors instead of testing all the possible paths. To favor both valid and invalid paths this implicit behavior was remove and and made explicit using the ExpectMessage and MessageAsTestFailure raii's. In the process the old behavior of generating failure on errors was lost. . The PR mix the two and: ; - restores this old behavior by default so a test that specify nothing will fail on warning and error.; - but in addition, each tests class/function/bloc can now specify how a specific bloc can react to a message. This can be done using a new syntax taken inspired mimicking the one from gtest. ; - improve the way test failures about warning and error are reported:; https://ci.inria.fr/sofa-ci/job/ubuntu_gcc-4.8_options/5074/testReport/junit/(root)/RigidRigidMappingTest_0/test_translation/; . Example: ; ```cpp; class MyTest : public Sofa_test<>; ; /// This test will fail if a warning/error message is send because the test inherit from sofa_test; void defaultTestBehavior(); {; ....; }. /// This test should generate failure if NO warning and NO Error message is emitted; void catchingTestBehavior(); {; EXPECT_MSG_EMIT(Warning) ;; EXPECT_MSG_EMIT(Error) ;. mycomponent.load(""atotallybrokenfile.txt""); }. /// By default test failure are catched from Sofa_test. This means that the information returned; /// in the test failure are the location of the failure in Sofa_test.cpp:lineno; /// This is why it is always better to explicitely specify the test behavior (possible the same as ; /// the default one as it will report correct testname/line number information. ; void noEmitTestBehavior(); {; EXPECT_MSG_NOEMIT(Warning) ;; EXPECT_MSG_NOEMIT(Error) ;; }; ; /// Finally it is possible to narrow where the messages are expected using blocks...; void c",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/213
https://github.com/sofa-framework/sofa/pull/213:1105,Testability,test,test,1105,"e. This assumption was problematic as it favor the testing of code paths that does not generate warning or errors instead of testing all the possible paths. To favor both valid and invalid paths this implicit behavior was remove and and made explicit using the ExpectMessage and MessageAsTestFailure raii's. In the process the old behavior of generating failure on errors was lost. . The PR mix the two and: ; - restores this old behavior by default so a test that specify nothing will fail on warning and error.; - but in addition, each tests class/function/bloc can now specify how a specific bloc can react to a message. This can be done using a new syntax taken inspired mimicking the one from gtest. ; - improve the way test failures about warning and error are reported:; https://ci.inria.fr/sofa-ci/job/ubuntu_gcc-4.8_options/5074/testReport/junit/(root)/RigidRigidMappingTest_0/test_translation/; . Example: ; ```cpp; class MyTest : public Sofa_test<>; ; /// This test will fail if a warning/error message is send because the test inherit from sofa_test; void defaultTestBehavior(); {; ....; }. /// This test should generate failure if NO warning and NO Error message is emitted; void catchingTestBehavior(); {; EXPECT_MSG_EMIT(Warning) ;; EXPECT_MSG_EMIT(Error) ;. mycomponent.load(""atotallybrokenfile.txt""); }. /// By default test failure are catched from Sofa_test. This means that the information returned; /// in the test failure are the location of the failure in Sofa_test.cpp:lineno; /// This is why it is always better to explicitely specify the test behavior (possible the same as ; /// the default one as it will report correct testname/line number information. ; void noEmitTestBehavior(); {; EXPECT_MSG_NOEMIT(Warning) ;; EXPECT_MSG_NOEMIT(Error) ;; }; ; /// Finally it is possible to narrow where the messages are expected using blocks...; void complexTestBehavior(); {; /// Here is the default mode. ; ....; {; /// We will report a failure is there no warning nor error emitted ",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/213
https://github.com/sofa-framework/sofa/pull/213:1167,Testability,test,test,1167,"e. This assumption was problematic as it favor the testing of code paths that does not generate warning or errors instead of testing all the possible paths. To favor both valid and invalid paths this implicit behavior was remove and and made explicit using the ExpectMessage and MessageAsTestFailure raii's. In the process the old behavior of generating failure on errors was lost. . The PR mix the two and: ; - restores this old behavior by default so a test that specify nothing will fail on warning and error.; - but in addition, each tests class/function/bloc can now specify how a specific bloc can react to a message. This can be done using a new syntax taken inspired mimicking the one from gtest. ; - improve the way test failures about warning and error are reported:; https://ci.inria.fr/sofa-ci/job/ubuntu_gcc-4.8_options/5074/testReport/junit/(root)/RigidRigidMappingTest_0/test_translation/; . Example: ; ```cpp; class MyTest : public Sofa_test<>; ; /// This test will fail if a warning/error message is send because the test inherit from sofa_test; void defaultTestBehavior(); {; ....; }. /// This test should generate failure if NO warning and NO Error message is emitted; void catchingTestBehavior(); {; EXPECT_MSG_EMIT(Warning) ;; EXPECT_MSG_EMIT(Error) ;. mycomponent.load(""atotallybrokenfile.txt""); }. /// By default test failure are catched from Sofa_test. This means that the information returned; /// in the test failure are the location of the failure in Sofa_test.cpp:lineno; /// This is why it is always better to explicitely specify the test behavior (possible the same as ; /// the default one as it will report correct testname/line number information. ; void noEmitTestBehavior(); {; EXPECT_MSG_NOEMIT(Warning) ;; EXPECT_MSG_NOEMIT(Error) ;; }; ; /// Finally it is possible to narrow where the messages are expected using blocks...; void complexTestBehavior(); {; /// Here is the default mode. ; ....; {; /// We will report a failure is there no warning nor error emitted ",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/213
https://github.com/sofa-framework/sofa/pull/213:1245,Testability,test,test,1245,"d paths this implicit behavior was remove and and made explicit using the ExpectMessage and MessageAsTestFailure raii's. In the process the old behavior of generating failure on errors was lost. . The PR mix the two and: ; - restores this old behavior by default so a test that specify nothing will fail on warning and error.; - but in addition, each tests class/function/bloc can now specify how a specific bloc can react to a message. This can be done using a new syntax taken inspired mimicking the one from gtest. ; - improve the way test failures about warning and error are reported:; https://ci.inria.fr/sofa-ci/job/ubuntu_gcc-4.8_options/5074/testReport/junit/(root)/RigidRigidMappingTest_0/test_translation/; . Example: ; ```cpp; class MyTest : public Sofa_test<>; ; /// This test will fail if a warning/error message is send because the test inherit from sofa_test; void defaultTestBehavior(); {; ....; }. /// This test should generate failure if NO warning and NO Error message is emitted; void catchingTestBehavior(); {; EXPECT_MSG_EMIT(Warning) ;; EXPECT_MSG_EMIT(Error) ;. mycomponent.load(""atotallybrokenfile.txt""); }. /// By default test failure are catched from Sofa_test. This means that the information returned; /// in the test failure are the location of the failure in Sofa_test.cpp:lineno; /// This is why it is always better to explicitely specify the test behavior (possible the same as ; /// the default one as it will report correct testname/line number information. ; void noEmitTestBehavior(); {; EXPECT_MSG_NOEMIT(Warning) ;; EXPECT_MSG_NOEMIT(Error) ;; }; ; /// Finally it is possible to narrow where the messages are expected using blocks...; void complexTestBehavior(); {; /// Here is the default mode. ; ....; {; /// We will report a failure is there no warning nor error emitted before the end of this block. ; EXPECT_MSG_EMIT(Warning) ;; EXPECT_MSG_EMIT(Error) ;; ...; { ; /// But this sub-part does not count... and it shouldn't emit a message. ; EXPECT_MSG_NOEMIT",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/213
https://github.com/sofa-framework/sofa/pull/213:1469,Testability,test,test,1469,"ating failure on errors was lost. . The PR mix the two and: ; - restores this old behavior by default so a test that specify nothing will fail on warning and error.; - but in addition, each tests class/function/bloc can now specify how a specific bloc can react to a message. This can be done using a new syntax taken inspired mimicking the one from gtest. ; - improve the way test failures about warning and error are reported:; https://ci.inria.fr/sofa-ci/job/ubuntu_gcc-4.8_options/5074/testReport/junit/(root)/RigidRigidMappingTest_0/test_translation/; . Example: ; ```cpp; class MyTest : public Sofa_test<>; ; /// This test will fail if a warning/error message is send because the test inherit from sofa_test; void defaultTestBehavior(); {; ....; }. /// This test should generate failure if NO warning and NO Error message is emitted; void catchingTestBehavior(); {; EXPECT_MSG_EMIT(Warning) ;; EXPECT_MSG_EMIT(Error) ;. mycomponent.load(""atotallybrokenfile.txt""); }. /// By default test failure are catched from Sofa_test. This means that the information returned; /// in the test failure are the location of the failure in Sofa_test.cpp:lineno; /// This is why it is always better to explicitely specify the test behavior (possible the same as ; /// the default one as it will report correct testname/line number information. ; void noEmitTestBehavior(); {; EXPECT_MSG_NOEMIT(Warning) ;; EXPECT_MSG_NOEMIT(Error) ;; }; ; /// Finally it is possible to narrow where the messages are expected using blocks...; void complexTestBehavior(); {; /// Here is the default mode. ; ....; {; /// We will report a failure is there no warning nor error emitted before the end of this block. ; EXPECT_MSG_EMIT(Warning) ;; EXPECT_MSG_EMIT(Error) ;; ...; { ; /// But this sub-part does not count... and it shouldn't emit a message. ; EXPECT_MSG_NOEMIT(Error) ;; .... ; }; }; }; ```. This PR will generate a lot of new test failure... that are either real failure that deserve investigation or ; tests that was p",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/213
https://github.com/sofa-framework/sofa/pull/213:1563,Testability,test,test,1563,"havior by default so a test that specify nothing will fail on warning and error.; - but in addition, each tests class/function/bloc can now specify how a specific bloc can react to a message. This can be done using a new syntax taken inspired mimicking the one from gtest. ; - improve the way test failures about warning and error are reported:; https://ci.inria.fr/sofa-ci/job/ubuntu_gcc-4.8_options/5074/testReport/junit/(root)/RigidRigidMappingTest_0/test_translation/; . Example: ; ```cpp; class MyTest : public Sofa_test<>; ; /// This test will fail if a warning/error message is send because the test inherit from sofa_test; void defaultTestBehavior(); {; ....; }. /// This test should generate failure if NO warning and NO Error message is emitted; void catchingTestBehavior(); {; EXPECT_MSG_EMIT(Warning) ;; EXPECT_MSG_EMIT(Error) ;. mycomponent.load(""atotallybrokenfile.txt""); }. /// By default test failure are catched from Sofa_test. This means that the information returned; /// in the test failure are the location of the failure in Sofa_test.cpp:lineno; /// This is why it is always better to explicitely specify the test behavior (possible the same as ; /// the default one as it will report correct testname/line number information. ; void noEmitTestBehavior(); {; EXPECT_MSG_NOEMIT(Warning) ;; EXPECT_MSG_NOEMIT(Error) ;; }; ; /// Finally it is possible to narrow where the messages are expected using blocks...; void complexTestBehavior(); {; /// Here is the default mode. ; ....; {; /// We will report a failure is there no warning nor error emitted before the end of this block. ; EXPECT_MSG_EMIT(Warning) ;; EXPECT_MSG_EMIT(Error) ;; ...; { ; /// But this sub-part does not count... and it shouldn't emit a message. ; EXPECT_MSG_NOEMIT(Error) ;; .... ; }; }; }; ```. This PR will generate a lot of new test failure... that are either real failure that deserve investigation or ; tests that was previously simply previously ignoring error & warning messages; . CHANGELOG for @hugt",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/213
https://github.com/sofa-framework/sofa/pull/213:1696,Testability,test,test,1696,"a specific bloc can react to a message. This can be done using a new syntax taken inspired mimicking the one from gtest. ; - improve the way test failures about warning and error are reported:; https://ci.inria.fr/sofa-ci/job/ubuntu_gcc-4.8_options/5074/testReport/junit/(root)/RigidRigidMappingTest_0/test_translation/; . Example: ; ```cpp; class MyTest : public Sofa_test<>; ; /// This test will fail if a warning/error message is send because the test inherit from sofa_test; void defaultTestBehavior(); {; ....; }. /// This test should generate failure if NO warning and NO Error message is emitted; void catchingTestBehavior(); {; EXPECT_MSG_EMIT(Warning) ;; EXPECT_MSG_EMIT(Error) ;. mycomponent.load(""atotallybrokenfile.txt""); }. /// By default test failure are catched from Sofa_test. This means that the information returned; /// in the test failure are the location of the failure in Sofa_test.cpp:lineno; /// This is why it is always better to explicitely specify the test behavior (possible the same as ; /// the default one as it will report correct testname/line number information. ; void noEmitTestBehavior(); {; EXPECT_MSG_NOEMIT(Warning) ;; EXPECT_MSG_NOEMIT(Error) ;; }; ; /// Finally it is possible to narrow where the messages are expected using blocks...; void complexTestBehavior(); {; /// Here is the default mode. ; ....; {; /// We will report a failure is there no warning nor error emitted before the end of this block. ; EXPECT_MSG_EMIT(Warning) ;; EXPECT_MSG_EMIT(Error) ;; ...; { ; /// But this sub-part does not count... and it shouldn't emit a message. ; EXPECT_MSG_NOEMIT(Error) ;; .... ; }; }; }; ```. This PR will generate a lot of new test failure... that are either real failure that deserve investigation or ; tests that was previously simply previously ignoring error & warning messages; . CHANGELOG for @hugtalbot & @guparan :; - TestMessageHandler.cpp implements a new & robust way to connect msg_* message to test failure ; - TestMessageHandler_test.cpp impl",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/213
https://github.com/sofa-framework/sofa/pull/213:1780,Testability,test,testname,1780,"a specific bloc can react to a message. This can be done using a new syntax taken inspired mimicking the one from gtest. ; - improve the way test failures about warning and error are reported:; https://ci.inria.fr/sofa-ci/job/ubuntu_gcc-4.8_options/5074/testReport/junit/(root)/RigidRigidMappingTest_0/test_translation/; . Example: ; ```cpp; class MyTest : public Sofa_test<>; ; /// This test will fail if a warning/error message is send because the test inherit from sofa_test; void defaultTestBehavior(); {; ....; }. /// This test should generate failure if NO warning and NO Error message is emitted; void catchingTestBehavior(); {; EXPECT_MSG_EMIT(Warning) ;; EXPECT_MSG_EMIT(Error) ;. mycomponent.load(""atotallybrokenfile.txt""); }. /// By default test failure are catched from Sofa_test. This means that the information returned; /// in the test failure are the location of the failure in Sofa_test.cpp:lineno; /// This is why it is always better to explicitely specify the test behavior (possible the same as ; /// the default one as it will report correct testname/line number information. ; void noEmitTestBehavior(); {; EXPECT_MSG_NOEMIT(Warning) ;; EXPECT_MSG_NOEMIT(Error) ;; }; ; /// Finally it is possible to narrow where the messages are expected using blocks...; void complexTestBehavior(); {; /// Here is the default mode. ; ....; {; /// We will report a failure is there no warning nor error emitted before the end of this block. ; EXPECT_MSG_EMIT(Warning) ;; EXPECT_MSG_EMIT(Error) ;; ...; { ; /// But this sub-part does not count... and it shouldn't emit a message. ; EXPECT_MSG_NOEMIT(Error) ;; .... ; }; }; }; ```. This PR will generate a lot of new test failure... that are either real failure that deserve investigation or ; tests that was previously simply previously ignoring error & warning messages; . CHANGELOG for @hugtalbot & @guparan :; - TestMessageHandler.cpp implements a new & robust way to connect msg_* message to test failure ; - TestMessageHandler_test.cpp impl",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/213
https://github.com/sofa-framework/sofa/pull/213:2388,Testability,test,test,2388,") ;; EXPECT_MSG_EMIT(Error) ;. mycomponent.load(""atotallybrokenfile.txt""); }. /// By default test failure are catched from Sofa_test. This means that the information returned; /// in the test failure are the location of the failure in Sofa_test.cpp:lineno; /// This is why it is always better to explicitely specify the test behavior (possible the same as ; /// the default one as it will report correct testname/line number information. ; void noEmitTestBehavior(); {; EXPECT_MSG_NOEMIT(Warning) ;; EXPECT_MSG_NOEMIT(Error) ;; }; ; /// Finally it is possible to narrow where the messages are expected using blocks...; void complexTestBehavior(); {; /// Here is the default mode. ; ....; {; /// We will report a failure is there no warning nor error emitted before the end of this block. ; EXPECT_MSG_EMIT(Warning) ;; EXPECT_MSG_EMIT(Error) ;; ...; { ; /// But this sub-part does not count... and it shouldn't emit a message. ; EXPECT_MSG_NOEMIT(Error) ;; .... ; }; }; }; ```. This PR will generate a lot of new test failure... that are either real failure that deserve investigation or ; tests that was previously simply previously ignoring error & warning messages; . CHANGELOG for @hugtalbot & @guparan :; - TestMessageHandler.cpp implements a new & robust way to connect msg_* message to test failure ; - TestMessageHandler_test.cpp implements test for TestMessageHandler. ; - Sofa_test is updated to use the new TestMessageHandler where msg_error generates test failures ; - All the existing tests have been changed to use the new API & removed the old one. ; - MeshSTL.cpp replace a std:cerr by a msg_error so that FIX the corresponding failing test.; - Message.cpp adds a way to convert message type to string.; - updates externs/gtest to a fresh checkout. ; ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings nor unit test failu",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/213
https://github.com/sofa-framework/sofa/pull/213:2465,Testability,test,tests,2465,failure are catched from Sofa_test. This means that the information returned; /// in the test failure are the location of the failure in Sofa_test.cpp:lineno; /// This is why it is always better to explicitely specify the test behavior (possible the same as ; /// the default one as it will report correct testname/line number information. ; void noEmitTestBehavior(); {; EXPECT_MSG_NOEMIT(Warning) ;; EXPECT_MSG_NOEMIT(Error) ;; }; ; /// Finally it is possible to narrow where the messages are expected using blocks...; void complexTestBehavior(); {; /// Here is the default mode. ; ....; {; /// We will report a failure is there no warning nor error emitted before the end of this block. ; EXPECT_MSG_EMIT(Warning) ;; EXPECT_MSG_EMIT(Error) ;; ...; { ; /// But this sub-part does not count... and it shouldn't emit a message. ; EXPECT_MSG_NOEMIT(Error) ;; .... ; }; }; }; ```. This PR will generate a lot of new test failure... that are either real failure that deserve investigation or ; tests that was previously simply previously ignoring error & warning messages; . CHANGELOG for @hugtalbot & @guparan :; - TestMessageHandler.cpp implements a new & robust way to connect msg_* message to test failure ; - TestMessageHandler_test.cpp implements test for TestMessageHandler. ; - Sofa_test is updated to use the new TestMessageHandler where msg_error generates test failures ; - All the existing tests have been changed to use the new API & removed the old one. ; - MeshSTL.cpp replace a std:cerr by a msg_error so that FIX the corresponding failing test.; - Message.cpp adds a way to convert message type to string.; - updates externs/gtest to a fresh checkout. ; ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings nor unit test failures. (This PR cannot do that...read my comment about that). ; - [x] does not break existing scene,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/213
https://github.com/sofa-framework/sofa/pull/213:2587,Testability,Test,TestMessageHandler,2587, are the location of the failure in Sofa_test.cpp:lineno; /// This is why it is always better to explicitely specify the test behavior (possible the same as ; /// the default one as it will report correct testname/line number information. ; void noEmitTestBehavior(); {; EXPECT_MSG_NOEMIT(Warning) ;; EXPECT_MSG_NOEMIT(Error) ;; }; ; /// Finally it is possible to narrow where the messages are expected using blocks...; void complexTestBehavior(); {; /// Here is the default mode. ; ....; {; /// We will report a failure is there no warning nor error emitted before the end of this block. ; EXPECT_MSG_EMIT(Warning) ;; EXPECT_MSG_EMIT(Error) ;; ...; { ; /// But this sub-part does not count... and it shouldn't emit a message. ; EXPECT_MSG_NOEMIT(Error) ;; .... ; }; }; }; ```. This PR will generate a lot of new test failure... that are either real failure that deserve investigation or ; tests that was previously simply previously ignoring error & warning messages; . CHANGELOG for @hugtalbot & @guparan :; - TestMessageHandler.cpp implements a new & robust way to connect msg_* message to test failure ; - TestMessageHandler_test.cpp implements test for TestMessageHandler. ; - Sofa_test is updated to use the new TestMessageHandler where msg_error generates test failures ; - All the existing tests have been changed to use the new API & removed the old one. ; - MeshSTL.cpp replace a std:cerr by a msg_error so that FIX the corresponding failing test.; - Message.cpp adds a way to convert message type to string.; - updates externs/gtest to a fresh checkout. ; ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings nor unit test failures. (This PR cannot do that...read my comment about that). ; - [x] does not break existing scenes.; - [x] does not break API compatibility.; - [x] has been reviewed and agreed to be transitional.; -,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/213
https://github.com/sofa-framework/sofa/pull/213:2668,Testability,test,test,2668,ways better to explicitely specify the test behavior (possible the same as ; /// the default one as it will report correct testname/line number information. ; void noEmitTestBehavior(); {; EXPECT_MSG_NOEMIT(Warning) ;; EXPECT_MSG_NOEMIT(Error) ;; }; ; /// Finally it is possible to narrow where the messages are expected using blocks...; void complexTestBehavior(); {; /// Here is the default mode. ; ....; {; /// We will report a failure is there no warning nor error emitted before the end of this block. ; EXPECT_MSG_EMIT(Warning) ;; EXPECT_MSG_EMIT(Error) ;; ...; { ; /// But this sub-part does not count... and it shouldn't emit a message. ; EXPECT_MSG_NOEMIT(Error) ;; .... ; }; }; }; ```. This PR will generate a lot of new test failure... that are either real failure that deserve investigation or ; tests that was previously simply previously ignoring error & warning messages; . CHANGELOG for @hugtalbot & @guparan :; - TestMessageHandler.cpp implements a new & robust way to connect msg_* message to test failure ; - TestMessageHandler_test.cpp implements test for TestMessageHandler. ; - Sofa_test is updated to use the new TestMessageHandler where msg_error generates test failures ; - All the existing tests have been changed to use the new API & removed the old one. ; - MeshSTL.cpp replace a std:cerr by a msg_error so that FIX the corresponding failing test.; - Message.cpp adds a way to convert message type to string.; - updates externs/gtest to a fresh checkout. ; ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings nor unit test failures. (This PR cannot do that...read my comment about that). ; - [x] does not break existing scenes.; - [x] does not break API compatibility.; - [x] has been reviewed and agreed to be transitional.; - [x] is more than 1 week old.; - [ ] #237 should fix most of the newly failing tes,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/213
https://github.com/sofa-framework/sofa/pull/213:2724,Testability,test,test,2724,s ; /// the default one as it will report correct testname/line number information. ; void noEmitTestBehavior(); {; EXPECT_MSG_NOEMIT(Warning) ;; EXPECT_MSG_NOEMIT(Error) ;; }; ; /// Finally it is possible to narrow where the messages are expected using blocks...; void complexTestBehavior(); {; /// Here is the default mode. ; ....; {; /// We will report a failure is there no warning nor error emitted before the end of this block. ; EXPECT_MSG_EMIT(Warning) ;; EXPECT_MSG_EMIT(Error) ;; ...; { ; /// But this sub-part does not count... and it shouldn't emit a message. ; EXPECT_MSG_NOEMIT(Error) ;; .... ; }; }; }; ```. This PR will generate a lot of new test failure... that are either real failure that deserve investigation or ; tests that was previously simply previously ignoring error & warning messages; . CHANGELOG for @hugtalbot & @guparan :; - TestMessageHandler.cpp implements a new & robust way to connect msg_* message to test failure ; - TestMessageHandler_test.cpp implements test for TestMessageHandler. ; - Sofa_test is updated to use the new TestMessageHandler where msg_error generates test failures ; - All the existing tests have been changed to use the new API & removed the old one. ; - MeshSTL.cpp replace a std:cerr by a msg_error so that FIX the corresponding failing test.; - Message.cpp adds a way to convert message type to string.; - updates externs/gtest to a fresh checkout. ; ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings nor unit test failures. (This PR cannot do that...read my comment about that). ; - [x] does not break existing scenes.; - [x] does not break API compatibility.; - [x] has been reviewed and agreed to be transitional.; - [x] is more than 1 week old.; - [ ] #237 should fix most of the newly failing tests. #237 should be merged right after this PR. **Reviewers will merge onl,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/213
https://github.com/sofa-framework/sofa/pull/213:2733,Testability,Test,TestMessageHandler,2733,s ; /// the default one as it will report correct testname/line number information. ; void noEmitTestBehavior(); {; EXPECT_MSG_NOEMIT(Warning) ;; EXPECT_MSG_NOEMIT(Error) ;; }; ; /// Finally it is possible to narrow where the messages are expected using blocks...; void complexTestBehavior(); {; /// Here is the default mode. ; ....; {; /// We will report a failure is there no warning nor error emitted before the end of this block. ; EXPECT_MSG_EMIT(Warning) ;; EXPECT_MSG_EMIT(Error) ;; ...; { ; /// But this sub-part does not count... and it shouldn't emit a message. ; EXPECT_MSG_NOEMIT(Error) ;; .... ; }; }; }; ```. This PR will generate a lot of new test failure... that are either real failure that deserve investigation or ; tests that was previously simply previously ignoring error & warning messages; . CHANGELOG for @hugtalbot & @guparan :; - TestMessageHandler.cpp implements a new & robust way to connect msg_* message to test failure ; - TestMessageHandler_test.cpp implements test for TestMessageHandler. ; - Sofa_test is updated to use the new TestMessageHandler where msg_error generates test failures ; - All the existing tests have been changed to use the new API & removed the old one. ; - MeshSTL.cpp replace a std:cerr by a msg_error so that FIX the corresponding failing test.; - Message.cpp adds a way to convert message type to string.; - updates externs/gtest to a fresh checkout. ; ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings nor unit test failures. (This PR cannot do that...read my comment about that). ; - [x] does not break existing scenes.; - [x] does not break API compatibility.; - [x] has been reviewed and agreed to be transitional.; - [x] is more than 1 week old.; - [ ] #237 should fix most of the newly failing tests. #237 should be merged right after this PR. **Reviewers will merge onl,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/213
https://github.com/sofa-framework/sofa/pull/213:2793,Testability,Test,TestMessageHandler,2793, report correct testname/line number information. ; void noEmitTestBehavior(); {; EXPECT_MSG_NOEMIT(Warning) ;; EXPECT_MSG_NOEMIT(Error) ;; }; ; /// Finally it is possible to narrow where the messages are expected using blocks...; void complexTestBehavior(); {; /// Here is the default mode. ; ....; {; /// We will report a failure is there no warning nor error emitted before the end of this block. ; EXPECT_MSG_EMIT(Warning) ;; EXPECT_MSG_EMIT(Error) ;; ...; { ; /// But this sub-part does not count... and it shouldn't emit a message. ; EXPECT_MSG_NOEMIT(Error) ;; .... ; }; }; }; ```. This PR will generate a lot of new test failure... that are either real failure that deserve investigation or ; tests that was previously simply previously ignoring error & warning messages; . CHANGELOG for @hugtalbot & @guparan :; - TestMessageHandler.cpp implements a new & robust way to connect msg_* message to test failure ; - TestMessageHandler_test.cpp implements test for TestMessageHandler. ; - Sofa_test is updated to use the new TestMessageHandler where msg_error generates test failures ; - All the existing tests have been changed to use the new API & removed the old one. ; - MeshSTL.cpp replace a std:cerr by a msg_error so that FIX the corresponding failing test.; - Message.cpp adds a way to convert message type to string.; - updates externs/gtest to a fresh checkout. ; ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings nor unit test failures. (This PR cannot do that...read my comment about that). ; - [x] does not break existing scenes.; - [x] does not break API compatibility.; - [x] has been reviewed and agreed to be transitional.; - [x] is more than 1 week old.; - [ ] #237 should fix most of the newly failing tests. #237 should be merged right after this PR. **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/213
https://github.com/sofa-framework/sofa/pull/213:2838,Testability,test,test,2838, report correct testname/line number information. ; void noEmitTestBehavior(); {; EXPECT_MSG_NOEMIT(Warning) ;; EXPECT_MSG_NOEMIT(Error) ;; }; ; /// Finally it is possible to narrow where the messages are expected using blocks...; void complexTestBehavior(); {; /// Here is the default mode. ; ....; {; /// We will report a failure is there no warning nor error emitted before the end of this block. ; EXPECT_MSG_EMIT(Warning) ;; EXPECT_MSG_EMIT(Error) ;; ...; { ; /// But this sub-part does not count... and it shouldn't emit a message. ; EXPECT_MSG_NOEMIT(Error) ;; .... ; }; }; }; ```. This PR will generate a lot of new test failure... that are either real failure that deserve investigation or ; tests that was previously simply previously ignoring error & warning messages; . CHANGELOG for @hugtalbot & @guparan :; - TestMessageHandler.cpp implements a new & robust way to connect msg_* message to test failure ; - TestMessageHandler_test.cpp implements test for TestMessageHandler. ; - Sofa_test is updated to use the new TestMessageHandler where msg_error generates test failures ; - All the existing tests have been changed to use the new API & removed the old one. ; - MeshSTL.cpp replace a std:cerr by a msg_error so that FIX the corresponding failing test.; - Message.cpp adds a way to convert message type to string.; - updates externs/gtest to a fresh checkout. ; ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings nor unit test failures. (This PR cannot do that...read my comment about that). ; - [x] does not break existing scenes.; - [x] does not break API compatibility.; - [x] has been reviewed and agreed to be transitional.; - [x] is more than 1 week old.; - [ ] #237 should fix most of the newly failing tests. #237 should be merged right after this PR. **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/213
https://github.com/sofa-framework/sofa/pull/213:2873,Testability,test,tests,2873, report correct testname/line number information. ; void noEmitTestBehavior(); {; EXPECT_MSG_NOEMIT(Warning) ;; EXPECT_MSG_NOEMIT(Error) ;; }; ; /// Finally it is possible to narrow where the messages are expected using blocks...; void complexTestBehavior(); {; /// Here is the default mode. ; ....; {; /// We will report a failure is there no warning nor error emitted before the end of this block. ; EXPECT_MSG_EMIT(Warning) ;; EXPECT_MSG_EMIT(Error) ;; ...; { ; /// But this sub-part does not count... and it shouldn't emit a message. ; EXPECT_MSG_NOEMIT(Error) ;; .... ; }; }; }; ```. This PR will generate a lot of new test failure... that are either real failure that deserve investigation or ; tests that was previously simply previously ignoring error & warning messages; . CHANGELOG for @hugtalbot & @guparan :; - TestMessageHandler.cpp implements a new & robust way to connect msg_* message to test failure ; - TestMessageHandler_test.cpp implements test for TestMessageHandler. ; - Sofa_test is updated to use the new TestMessageHandler where msg_error generates test failures ; - All the existing tests have been changed to use the new API & removed the old one. ; - MeshSTL.cpp replace a std:cerr by a msg_error so that FIX the corresponding failing test.; - Message.cpp adds a way to convert message type to string.; - updates externs/gtest to a fresh checkout. ; ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings nor unit test failures. (This PR cannot do that...read my comment about that). ; - [x] does not break existing scenes.; - [x] does not break API compatibility.; - [x] has been reviewed and agreed to be transitional.; - [x] is more than 1 week old.; - [ ] #237 should fix most of the newly failing tests. #237 should be merged right after this PR. **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/213
https://github.com/sofa-framework/sofa/pull/213:3027,Testability,test,test,3027, report correct testname/line number information. ; void noEmitTestBehavior(); {; EXPECT_MSG_NOEMIT(Warning) ;; EXPECT_MSG_NOEMIT(Error) ;; }; ; /// Finally it is possible to narrow where the messages are expected using blocks...; void complexTestBehavior(); {; /// Here is the default mode. ; ....; {; /// We will report a failure is there no warning nor error emitted before the end of this block. ; EXPECT_MSG_EMIT(Warning) ;; EXPECT_MSG_EMIT(Error) ;; ...; { ; /// But this sub-part does not count... and it shouldn't emit a message. ; EXPECT_MSG_NOEMIT(Error) ;; .... ; }; }; }; ```. This PR will generate a lot of new test failure... that are either real failure that deserve investigation or ; tests that was previously simply previously ignoring error & warning messages; . CHANGELOG for @hugtalbot & @guparan :; - TestMessageHandler.cpp implements a new & robust way to connect msg_* message to test failure ; - TestMessageHandler_test.cpp implements test for TestMessageHandler. ; - Sofa_test is updated to use the new TestMessageHandler where msg_error generates test failures ; - All the existing tests have been changed to use the new API & removed the old one. ; - MeshSTL.cpp replace a std:cerr by a msg_error so that FIX the corresponding failing test.; - Message.cpp adds a way to convert message type to string.; - updates externs/gtest to a fresh checkout. ; ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings nor unit test failures. (This PR cannot do that...read my comment about that). ; - [x] does not break existing scenes.; - [x] does not break API compatibility.; - [x] has been reviewed and agreed to be transitional.; - [x] is more than 1 week old.; - [ ] #237 should fix most of the newly failing tests. #237 should be merged right after this PR. **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/213
https://github.com/sofa-framework/sofa/pull/213:3367,Testability,test,test,3367, report correct testname/line number information. ; void noEmitTestBehavior(); {; EXPECT_MSG_NOEMIT(Warning) ;; EXPECT_MSG_NOEMIT(Error) ;; }; ; /// Finally it is possible to narrow where the messages are expected using blocks...; void complexTestBehavior(); {; /// Here is the default mode. ; ....; {; /// We will report a failure is there no warning nor error emitted before the end of this block. ; EXPECT_MSG_EMIT(Warning) ;; EXPECT_MSG_EMIT(Error) ;; ...; { ; /// But this sub-part does not count... and it shouldn't emit a message. ; EXPECT_MSG_NOEMIT(Error) ;; .... ; }; }; }; ```. This PR will generate a lot of new test failure... that are either real failure that deserve investigation or ; tests that was previously simply previously ignoring error & warning messages; . CHANGELOG for @hugtalbot & @guparan :; - TestMessageHandler.cpp implements a new & robust way to connect msg_* message to test failure ; - TestMessageHandler_test.cpp implements test for TestMessageHandler. ; - Sofa_test is updated to use the new TestMessageHandler where msg_error generates test failures ; - All the existing tests have been changed to use the new API & removed the old one. ; - MeshSTL.cpp replace a std:cerr by a msg_error so that FIX the corresponding failing test.; - Message.cpp adds a way to convert message type to string.; - updates externs/gtest to a fresh checkout. ; ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings nor unit test failures. (This PR cannot do that...read my comment about that). ; - [x] does not break existing scenes.; - [x] does not break API compatibility.; - [x] has been reviewed and agreed to be transitional.; - [x] is more than 1 week old.; - [ ] #237 should fix most of the newly failing tests. #237 should be merged right after this PR. **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/213
https://github.com/sofa-framework/sofa/pull/213:3655,Testability,test,tests,3655, report correct testname/line number information. ; void noEmitTestBehavior(); {; EXPECT_MSG_NOEMIT(Warning) ;; EXPECT_MSG_NOEMIT(Error) ;; }; ; /// Finally it is possible to narrow where the messages are expected using blocks...; void complexTestBehavior(); {; /// Here is the default mode. ; ....; {; /// We will report a failure is there no warning nor error emitted before the end of this block. ; EXPECT_MSG_EMIT(Warning) ;; EXPECT_MSG_EMIT(Error) ;; ...; { ; /// But this sub-part does not count... and it shouldn't emit a message. ; EXPECT_MSG_NOEMIT(Error) ;; .... ; }; }; }; ```. This PR will generate a lot of new test failure... that are either real failure that deserve investigation or ; tests that was previously simply previously ignoring error & warning messages; . CHANGELOG for @hugtalbot & @guparan :; - TestMessageHandler.cpp implements a new & robust way to connect msg_* message to test failure ; - TestMessageHandler_test.cpp implements test for TestMessageHandler. ; - Sofa_test is updated to use the new TestMessageHandler where msg_error generates test failures ; - All the existing tests have been changed to use the new API & removed the old one. ; - MeshSTL.cpp replace a std:cerr by a msg_error so that FIX the corresponding failing test.; - Message.cpp adds a way to convert message type to string.; - updates externs/gtest to a fresh checkout. ; ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings nor unit test failures. (This PR cannot do that...read my comment about that). ; - [x] does not break existing scenes.; - [x] does not break API compatibility.; - [x] has been reviewed and agreed to be transitional.; - [x] is more than 1 week old.; - [ ] #237 should fix most of the newly failing tests. #237 should be merged right after this PR. **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/213
https://github.com/sofa-framework/sofa/pull/213:2491,Usability,simpl,simply,2491,failure are catched from Sofa_test. This means that the information returned; /// in the test failure are the location of the failure in Sofa_test.cpp:lineno; /// This is why it is always better to explicitely specify the test behavior (possible the same as ; /// the default one as it will report correct testname/line number information. ; void noEmitTestBehavior(); {; EXPECT_MSG_NOEMIT(Warning) ;; EXPECT_MSG_NOEMIT(Error) ;; }; ; /// Finally it is possible to narrow where the messages are expected using blocks...; void complexTestBehavior(); {; /// Here is the default mode. ; ....; {; /// We will report a failure is there no warning nor error emitted before the end of this block. ; EXPECT_MSG_EMIT(Warning) ;; EXPECT_MSG_EMIT(Error) ;; ...; { ; /// But this sub-part does not count... and it shouldn't emit a message. ; EXPECT_MSG_NOEMIT(Error) ;; .... ; }; }; }; ```. This PR will generate a lot of new test failure... that are either real failure that deserve investigation or ; tests that was previously simply previously ignoring error & warning messages; . CHANGELOG for @hugtalbot & @guparan :; - TestMessageHandler.cpp implements a new & robust way to connect msg_* message to test failure ; - TestMessageHandler_test.cpp implements test for TestMessageHandler. ; - Sofa_test is updated to use the new TestMessageHandler where msg_error generates test failures ; - All the existing tests have been changed to use the new API & removed the old one. ; - MeshSTL.cpp replace a std:cerr by a msg_error so that FIX the corresponding failing test.; - Message.cpp adds a way to convert message type to string.; - updates externs/gtest to a fresh checkout. ; ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings nor unit test failures. (This PR cannot do that...read my comment about that). ; - [x] does not break existing scene,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/213
https://github.com/sofa-framework/sofa/pull/214:237,Availability,failure,failures,237,fixed. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings nor unit test failures.; - [x] does not break existing scenes.; - [x] does not break API compatibility.; - [x] has been reviewed and agreed to be transitional.; - [x] is more than 1 week old. **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/214
https://github.com/sofa-framework/sofa/pull/214:106,Integrability,message,message,106,fixed. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings nor unit test failures.; - [x] does not break existing scenes.; - [x] does not break API compatibility.; - [x] has been reviewed and agreed to be transitional.; - [x] is more than 1 week old. **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/214
https://github.com/sofa-framework/sofa/pull/214:232,Testability,test,test,232,fixed. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings nor unit test failures.; - [x] does not break existing scenes.; - [x] does not break API compatibility.; - [x] has been reviewed and agreed to be transitional.; - [x] is more than 1 week old. **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/214
https://github.com/sofa-framework/sofa/pull/215:2528,Availability,redundant,redundant,2528,",` with `sofa::core::collision::ContactCreator<` to improve thread safety of contact creation.; - AnimateBeginEvent and AnimateEndEvent can now receive an optional pointer to a TaskStatus ( in a form of a void pointer ). When using SofaMultithreading, this taksStatus pointer can be used to spawn the AnimateBeginEvent method in a separate thread. It is the reponsibility of the component to decide whether or not its AnimateBeginEvent method is thread safe.; - Change BaseObject argument parsing. When parsing, ensures if src attribute is used with link @ now allow the use of src="""". Topologies container associated to src="""" are supposed to be filled by following topological mapping. Using src=""@"" to avoid link warning drove to an autolink where the loader refers on container itself. Modification of implicated scenes and xml accordingly.; - WorkerThread maintains a list of stealable tasks as well as a list of higher priority thread specific tasks. Remove ThreadSpecificTask (not used and redundant with new thread-specific task queues). Update Task logging.; - Adapted MultiThreading plugin to the new build system.; - SetDirectory no longer changes the system current directory (shared by all threads in the process), but uses a global variable to record the current directory to be used within Sofa. But changing to the current file's directory is needed to load Python scene. For the moment, python loader is not use with multithreading, changing directory in the loader is a temporary solution. The functioning of python scene loader need to be adapted in the futur. ### Cleans; - Streamline calls to createResponse in case no groupManager is used; - Clean warnings in Task and TaskSchedulerBoost for Multithreading plugin. ### Bugfixes; - Fix crash with multithreaded collision detection. Call `TriangleModel::getTriangleFlag` method for all triangles of the topology to force the initialization of adjacency.information in the topology before some actual collision detection code is exe",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/215
https://github.com/sofa-framework/sofa/pull/215:3648,Availability,error,error,3648," thread specific tasks. Remove ThreadSpecificTask (not used and redundant with new thread-specific task queues). Update Task logging.; - Adapted MultiThreading plugin to the new build system.; - SetDirectory no longer changes the system current directory (shared by all threads in the process), but uses a global variable to record the current directory to be used within Sofa. But changing to the current file's directory is needed to load Python scene. For the moment, python loader is not use with multithreading, changing directory in the loader is a temporary solution. The functioning of python scene loader need to be adapted in the futur. ### Cleans; - Streamline calls to createResponse in case no groupManager is used; - Clean warnings in Task and TaskSchedulerBoost for Multithreading plugin. ### Bugfixes; - Fix crash with multithreaded collision detection. Call `TriangleModel::getTriangleFlag` method for all triangles of the topology to force the initialization of adjacency.information in the topology before some actual collision detection code is executed.; - DDGNode should never be copied to ensure thread safe. Add private copy constructor that gives compilation error to ensure that.; - Compilation fixes for compatibility with boost 1_55. Corrected also the copyright notice.; - Fix execution freeze bug due to simultaneous and reciprocal task stealing between 2 threads (WorkerThread).; - Fix data race at startup, WorkerThread:mTaskScheduler was set by the main thread while being read by the worker thread. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings nor unit test failures.; - [ ] does not break existing scenes.; - [ ] does not break API compatibility.; - [ ] has been reviewed and agreed to be transitional.; - [ ] is more than 1 week old. **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/215
https://github.com/sofa-framework/sofa/pull/215:4227,Availability,failure,failures,4227," thread specific tasks. Remove ThreadSpecificTask (not used and redundant with new thread-specific task queues). Update Task logging.; - Adapted MultiThreading plugin to the new build system.; - SetDirectory no longer changes the system current directory (shared by all threads in the process), but uses a global variable to record the current directory to be used within Sofa. But changing to the current file's directory is needed to load Python scene. For the moment, python loader is not use with multithreading, changing directory in the loader is a temporary solution. The functioning of python scene loader need to be adapted in the futur. ### Cleans; - Streamline calls to createResponse in case no groupManager is used; - Clean warnings in Task and TaskSchedulerBoost for Multithreading plugin. ### Bugfixes; - Fix crash with multithreaded collision detection. Call `TriangleModel::getTriangleFlag` method for all triangles of the topology to force the initialization of adjacency.information in the topology before some actual collision detection code is executed.; - DDGNode should never be copied to ensure thread safe. Add private copy constructor that gives compilation error to ensure that.; - Compilation fixes for compatibility with boost 1_55. Corrected also the copyright notice.; - Fix execution freeze bug due to simultaneous and reciprocal task stealing between 2 threads (WorkerThread).; - Fix data race at startup, WorkerThread:mTaskScheduler was set by the main thread while being read by the worker thread. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings nor unit test failures.; - [ ] does not break existing scenes.; - [ ] does not break API compatibility.; - [ ] has been reviewed and agreed to be transitional.; - [ ] is more than 1 week old. **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/215
https://github.com/sofa-framework/sofa/pull/215:736,Deployability,update,updates,736,"This PR is certainly the biggest contribution from InSimo merge sprint. ; It will be further discussed during STC#3. ## issofa_multithreading. ### New features; - Add logGraphUpdates / logDataUpdates global variable in objectmodel to be able to debug multi-threading issue (not declared in headers, temporary until a better design is proposed); - Add a flag d_threadsafevisitor in solvers to disable writing in mechanicalstates of InteractionForceField in MechanicalVReallocVisitor/MechanicalVFreeVisitor as it might crash in multithreaded context; - Add `Contact::computeResponse()` and `Contact::finalizeResponse()` to separate thread-safe from sequential parts of the response computations; - Implement thread-safe Data engine/links updates by adding a lock while calling update().This requires that requestUpdate() or requestUpdateIfDirty() be called instead of update() directly, which is now protected.Bonus side effect is that it no longer matter where or if engines call cleanDirty() in their update method.; - Update all engines to new thread-safe design; - Add execution info in Task and index in WorkerThread; - Add support for multithreaded task logging (for visual profiling); - Add some const correctness in getColor and getName methods. ### Improvements; - Remove ClassInfo, deprecated in favor of BaseClass, and make sure all static instances are initialized while registering objects in the factory, to FIX ""pure virtual call"" crashes with visual c++ in multi-threaded contexts; - Replace `Creator<Contact::Factory,` with `sofa::core::collision::ContactCreator<` to improve thread safety of contact creation.; - AnimateBeginEvent and AnimateEndEvent can now receive an optional pointer to a TaskStatus ( in a form of a void pointer ). When using SofaMultithreading, this taksStatus pointer can be used to spawn the AnimateBeginEvent method in a separate thread. It is the reponsibility of the component to decide whether or not its AnimateBeginEvent method is thread safe.; - Change B",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/215
https://github.com/sofa-framework/sofa/pull/215:775,Deployability,update,update,775,"This PR is certainly the biggest contribution from InSimo merge sprint. ; It will be further discussed during STC#3. ## issofa_multithreading. ### New features; - Add logGraphUpdates / logDataUpdates global variable in objectmodel to be able to debug multi-threading issue (not declared in headers, temporary until a better design is proposed); - Add a flag d_threadsafevisitor in solvers to disable writing in mechanicalstates of InteractionForceField in MechanicalVReallocVisitor/MechanicalVFreeVisitor as it might crash in multithreaded context; - Add `Contact::computeResponse()` and `Contact::finalizeResponse()` to separate thread-safe from sequential parts of the response computations; - Implement thread-safe Data engine/links updates by adding a lock while calling update().This requires that requestUpdate() or requestUpdateIfDirty() be called instead of update() directly, which is now protected.Bonus side effect is that it no longer matter where or if engines call cleanDirty() in their update method.; - Update all engines to new thread-safe design; - Add execution info in Task and index in WorkerThread; - Add support for multithreaded task logging (for visual profiling); - Add some const correctness in getColor and getName methods. ### Improvements; - Remove ClassInfo, deprecated in favor of BaseClass, and make sure all static instances are initialized while registering objects in the factory, to FIX ""pure virtual call"" crashes with visual c++ in multi-threaded contexts; - Replace `Creator<Contact::Factory,` with `sofa::core::collision::ContactCreator<` to improve thread safety of contact creation.; - AnimateBeginEvent and AnimateEndEvent can now receive an optional pointer to a TaskStatus ( in a form of a void pointer ). When using SofaMultithreading, this taksStatus pointer can be used to spawn the AnimateBeginEvent method in a separate thread. It is the reponsibility of the component to decide whether or not its AnimateBeginEvent method is thread safe.; - Change B",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/215
https://github.com/sofa-framework/sofa/pull/215:866,Deployability,update,update,866,"This PR is certainly the biggest contribution from InSimo merge sprint. ; It will be further discussed during STC#3. ## issofa_multithreading. ### New features; - Add logGraphUpdates / logDataUpdates global variable in objectmodel to be able to debug multi-threading issue (not declared in headers, temporary until a better design is proposed); - Add a flag d_threadsafevisitor in solvers to disable writing in mechanicalstates of InteractionForceField in MechanicalVReallocVisitor/MechanicalVFreeVisitor as it might crash in multithreaded context; - Add `Contact::computeResponse()` and `Contact::finalizeResponse()` to separate thread-safe from sequential parts of the response computations; - Implement thread-safe Data engine/links updates by adding a lock while calling update().This requires that requestUpdate() or requestUpdateIfDirty() be called instead of update() directly, which is now protected.Bonus side effect is that it no longer matter where or if engines call cleanDirty() in their update method.; - Update all engines to new thread-safe design; - Add execution info in Task and index in WorkerThread; - Add support for multithreaded task logging (for visual profiling); - Add some const correctness in getColor and getName methods. ### Improvements; - Remove ClassInfo, deprecated in favor of BaseClass, and make sure all static instances are initialized while registering objects in the factory, to FIX ""pure virtual call"" crashes with visual c++ in multi-threaded contexts; - Replace `Creator<Contact::Factory,` with `sofa::core::collision::ContactCreator<` to improve thread safety of contact creation.; - AnimateBeginEvent and AnimateEndEvent can now receive an optional pointer to a TaskStatus ( in a form of a void pointer ). When using SofaMultithreading, this taksStatus pointer can be used to spawn the AnimateBeginEvent method in a separate thread. It is the reponsibility of the component to decide whether or not its AnimateBeginEvent method is thread safe.; - Change B",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/215
https://github.com/sofa-framework/sofa/pull/215:1001,Deployability,update,update,1001,"This PR is certainly the biggest contribution from InSimo merge sprint. ; It will be further discussed during STC#3. ## issofa_multithreading. ### New features; - Add logGraphUpdates / logDataUpdates global variable in objectmodel to be able to debug multi-threading issue (not declared in headers, temporary until a better design is proposed); - Add a flag d_threadsafevisitor in solvers to disable writing in mechanicalstates of InteractionForceField in MechanicalVReallocVisitor/MechanicalVFreeVisitor as it might crash in multithreaded context; - Add `Contact::computeResponse()` and `Contact::finalizeResponse()` to separate thread-safe from sequential parts of the response computations; - Implement thread-safe Data engine/links updates by adding a lock while calling update().This requires that requestUpdate() or requestUpdateIfDirty() be called instead of update() directly, which is now protected.Bonus side effect is that it no longer matter where or if engines call cleanDirty() in their update method.; - Update all engines to new thread-safe design; - Add execution info in Task and index in WorkerThread; - Add support for multithreaded task logging (for visual profiling); - Add some const correctness in getColor and getName methods. ### Improvements; - Remove ClassInfo, deprecated in favor of BaseClass, and make sure all static instances are initialized while registering objects in the factory, to FIX ""pure virtual call"" crashes with visual c++ in multi-threaded contexts; - Replace `Creator<Contact::Factory,` with `sofa::core::collision::ContactCreator<` to improve thread safety of contact creation.; - AnimateBeginEvent and AnimateEndEvent can now receive an optional pointer to a TaskStatus ( in a form of a void pointer ). When using SofaMultithreading, this taksStatus pointer can be used to spawn the AnimateBeginEvent method in a separate thread. It is the reponsibility of the component to decide whether or not its AnimateBeginEvent method is thread safe.; - Change B",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/215
https://github.com/sofa-framework/sofa/pull/215:1019,Deployability,Update,Update,1019,"hreading. ### New features; - Add logGraphUpdates / logDataUpdates global variable in objectmodel to be able to debug multi-threading issue (not declared in headers, temporary until a better design is proposed); - Add a flag d_threadsafevisitor in solvers to disable writing in mechanicalstates of InteractionForceField in MechanicalVReallocVisitor/MechanicalVFreeVisitor as it might crash in multithreaded context; - Add `Contact::computeResponse()` and `Contact::finalizeResponse()` to separate thread-safe from sequential parts of the response computations; - Implement thread-safe Data engine/links updates by adding a lock while calling update().This requires that requestUpdate() or requestUpdateIfDirty() be called instead of update() directly, which is now protected.Bonus side effect is that it no longer matter where or if engines call cleanDirty() in their update method.; - Update all engines to new thread-safe design; - Add execution info in Task and index in WorkerThread; - Add support for multithreaded task logging (for visual profiling); - Add some const correctness in getColor and getName methods. ### Improvements; - Remove ClassInfo, deprecated in favor of BaseClass, and make sure all static instances are initialized while registering objects in the factory, to FIX ""pure virtual call"" crashes with visual c++ in multi-threaded contexts; - Replace `Creator<Contact::Factory,` with `sofa::core::collision::ContactCreator<` to improve thread safety of contact creation.; - AnimateBeginEvent and AnimateEndEvent can now receive an optional pointer to a TaskStatus ( in a form of a void pointer ). When using SofaMultithreading, this taksStatus pointer can be used to spawn the AnimateBeginEvent method in a separate thread. It is the reponsibility of the component to decide whether or not its AnimateBeginEvent method is thread safe.; - Change BaseObject argument parsing. When parsing, ensures if src attribute is used with link @ now allow the use of src="""". Topologies conta",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/215
https://github.com/sofa-framework/sofa/pull/215:2577,Deployability,Update,Update,2577,"rove thread safety of contact creation.; - AnimateBeginEvent and AnimateEndEvent can now receive an optional pointer to a TaskStatus ( in a form of a void pointer ). When using SofaMultithreading, this taksStatus pointer can be used to spawn the AnimateBeginEvent method in a separate thread. It is the reponsibility of the component to decide whether or not its AnimateBeginEvent method is thread safe.; - Change BaseObject argument parsing. When parsing, ensures if src attribute is used with link @ now allow the use of src="""". Topologies container associated to src="""" are supposed to be filled by following topological mapping. Using src=""@"" to avoid link warning drove to an autolink where the loader refers on container itself. Modification of implicated scenes and xml accordingly.; - WorkerThread maintains a list of stealable tasks as well as a list of higher priority thread specific tasks. Remove ThreadSpecificTask (not used and redundant with new thread-specific task queues). Update Task logging.; - Adapted MultiThreading plugin to the new build system.; - SetDirectory no longer changes the system current directory (shared by all threads in the process), but uses a global variable to record the current directory to be used within Sofa. But changing to the current file's directory is needed to load Python scene. For the moment, python loader is not use with multithreading, changing directory in the loader is a temporary solution. The functioning of python scene loader need to be adapted in the futur. ### Cleans; - Streamline calls to createResponse in case no groupManager is used; - Clean warnings in Task and TaskSchedulerBoost for Multithreading plugin. ### Bugfixes; - Fix crash with multithreaded collision detection. Call `TriangleModel::getTriangleFlag` method for all triangles of the topology to force the initialization of adjacency.information in the topology before some actual collision detection code is executed.; - DDGNode should never be copied to ensure thre",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/215
https://github.com/sofa-framework/sofa/pull/215:2601,Energy Efficiency,Adapt,Adapted,2601," - AnimateBeginEvent and AnimateEndEvent can now receive an optional pointer to a TaskStatus ( in a form of a void pointer ). When using SofaMultithreading, this taksStatus pointer can be used to spawn the AnimateBeginEvent method in a separate thread. It is the reponsibility of the component to decide whether or not its AnimateBeginEvent method is thread safe.; - Change BaseObject argument parsing. When parsing, ensures if src attribute is used with link @ now allow the use of src="""". Topologies container associated to src="""" are supposed to be filled by following topological mapping. Using src=""@"" to avoid link warning drove to an autolink where the loader refers on container itself. Modification of implicated scenes and xml accordingly.; - WorkerThread maintains a list of stealable tasks as well as a list of higher priority thread specific tasks. Remove ThreadSpecificTask (not used and redundant with new thread-specific task queues). Update Task logging.; - Adapted MultiThreading plugin to the new build system.; - SetDirectory no longer changes the system current directory (shared by all threads in the process), but uses a global variable to record the current directory to be used within Sofa. But changing to the current file's directory is needed to load Python scene. For the moment, python loader is not use with multithreading, changing directory in the loader is a temporary solution. The functioning of python scene loader need to be adapted in the futur. ### Cleans; - Streamline calls to createResponse in case no groupManager is used; - Clean warnings in Task and TaskSchedulerBoost for Multithreading plugin. ### Bugfixes; - Fix crash with multithreaded collision detection. Call `TriangleModel::getTriangleFlag` method for all triangles of the topology to force the initialization of adjacency.information in the topology before some actual collision detection code is executed.; - DDGNode should never be copied to ensure thread safe. Add private copy constructor t",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/215
https://github.com/sofa-framework/sofa/pull/215:3089,Energy Efficiency,adapt,adapted,3089,"d with link @ now allow the use of src="""". Topologies container associated to src="""" are supposed to be filled by following topological mapping. Using src=""@"" to avoid link warning drove to an autolink where the loader refers on container itself. Modification of implicated scenes and xml accordingly.; - WorkerThread maintains a list of stealable tasks as well as a list of higher priority thread specific tasks. Remove ThreadSpecificTask (not used and redundant with new thread-specific task queues). Update Task logging.; - Adapted MultiThreading plugin to the new build system.; - SetDirectory no longer changes the system current directory (shared by all threads in the process), but uses a global variable to record the current directory to be used within Sofa. But changing to the current file's directory is needed to load Python scene. For the moment, python loader is not use with multithreading, changing directory in the loader is a temporary solution. The functioning of python scene loader need to be adapted in the futur. ### Cleans; - Streamline calls to createResponse in case no groupManager is used; - Clean warnings in Task and TaskSchedulerBoost for Multithreading plugin. ### Bugfixes; - Fix crash with multithreaded collision detection. Call `TriangleModel::getTriangleFlag` method for all triangles of the topology to force the initialization of adjacency.information in the topology before some actual collision detection code is executed.; - DDGNode should never be copied to ensure thread safe. Add private copy constructor that gives compilation error to ensure that.; - Compilation fixes for compatibility with boost 1_55. Corrected also the copyright notice.; - Fix execution freeze bug due to simultaneous and reciprocal task stealing between 2 threads (WorkerThread).; - Fix data race at startup, WorkerThread:mTaskScheduler was set by the main thread while being read by the worker thread. ______________________________________________________; <!--- Please leave th",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/215
https://github.com/sofa-framework/sofa/pull/215:4096,Integrability,message,message,4096," thread specific tasks. Remove ThreadSpecificTask (not used and redundant with new thread-specific task queues). Update Task logging.; - Adapted MultiThreading plugin to the new build system.; - SetDirectory no longer changes the system current directory (shared by all threads in the process), but uses a global variable to record the current directory to be used within Sofa. But changing to the current file's directory is needed to load Python scene. For the moment, python loader is not use with multithreading, changing directory in the loader is a temporary solution. The functioning of python scene loader need to be adapted in the futur. ### Cleans; - Streamline calls to createResponse in case no groupManager is used; - Clean warnings in Task and TaskSchedulerBoost for Multithreading plugin. ### Bugfixes; - Fix crash with multithreaded collision detection. Call `TriangleModel::getTriangleFlag` method for all triangles of the topology to force the initialization of adjacency.information in the topology before some actual collision detection code is executed.; - DDGNode should never be copied to ensure thread safe. Add private copy constructor that gives compilation error to ensure that.; - Compilation fixes for compatibility with boost 1_55. Corrected also the copyright notice.; - Fix execution freeze bug due to simultaneous and reciprocal task stealing between 2 threads (WorkerThread).; - Fix data race at startup, WorkerThread:mTaskScheduler was set by the main thread while being read by the worker thread. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings nor unit test failures.; - [ ] does not break existing scenes.; - [ ] does not break API compatibility.; - [ ] has been reviewed and agreed to be transitional.; - [ ] is more than 1 week old. **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/215
https://github.com/sofa-framework/sofa/pull/215:207,Modifiability,variab,variable,207,"This PR is certainly the biggest contribution from InSimo merge sprint. ; It will be further discussed during STC#3. ## issofa_multithreading. ### New features; - Add logGraphUpdates / logDataUpdates global variable in objectmodel to be able to debug multi-threading issue (not declared in headers, temporary until a better design is proposed); - Add a flag d_threadsafevisitor in solvers to disable writing in mechanicalstates of InteractionForceField in MechanicalVReallocVisitor/MechanicalVFreeVisitor as it might crash in multithreaded context; - Add `Contact::computeResponse()` and `Contact::finalizeResponse()` to separate thread-safe from sequential parts of the response computations; - Implement thread-safe Data engine/links updates by adding a lock while calling update().This requires that requestUpdate() or requestUpdateIfDirty() be called instead of update() directly, which is now protected.Bonus side effect is that it no longer matter where or if engines call cleanDirty() in their update method.; - Update all engines to new thread-safe design; - Add execution info in Task and index in WorkerThread; - Add support for multithreaded task logging (for visual profiling); - Add some const correctness in getColor and getName methods. ### Improvements; - Remove ClassInfo, deprecated in favor of BaseClass, and make sure all static instances are initialized while registering objects in the factory, to FIX ""pure virtual call"" crashes with visual c++ in multi-threaded contexts; - Replace `Creator<Contact::Factory,` with `sofa::core::collision::ContactCreator<` to improve thread safety of contact creation.; - AnimateBeginEvent and AnimateEndEvent can now receive an optional pointer to a TaskStatus ( in a form of a void pointer ). When using SofaMultithreading, this taksStatus pointer can be used to spawn the AnimateBeginEvent method in a separate thread. It is the reponsibility of the component to decide whether or not its AnimateBeginEvent method is thread safe.; - Change B",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/215
https://github.com/sofa-framework/sofa/pull/215:2601,Modifiability,Adapt,Adapted,2601," - AnimateBeginEvent and AnimateEndEvent can now receive an optional pointer to a TaskStatus ( in a form of a void pointer ). When using SofaMultithreading, this taksStatus pointer can be used to spawn the AnimateBeginEvent method in a separate thread. It is the reponsibility of the component to decide whether or not its AnimateBeginEvent method is thread safe.; - Change BaseObject argument parsing. When parsing, ensures if src attribute is used with link @ now allow the use of src="""". Topologies container associated to src="""" are supposed to be filled by following topological mapping. Using src=""@"" to avoid link warning drove to an autolink where the loader refers on container itself. Modification of implicated scenes and xml accordingly.; - WorkerThread maintains a list of stealable tasks as well as a list of higher priority thread specific tasks. Remove ThreadSpecificTask (not used and redundant with new thread-specific task queues). Update Task logging.; - Adapted MultiThreading plugin to the new build system.; - SetDirectory no longer changes the system current directory (shared by all threads in the process), but uses a global variable to record the current directory to be used within Sofa. But changing to the current file's directory is needed to load Python scene. For the moment, python loader is not use with multithreading, changing directory in the loader is a temporary solution. The functioning of python scene loader need to be adapted in the futur. ### Cleans; - Streamline calls to createResponse in case no groupManager is used; - Clean warnings in Task and TaskSchedulerBoost for Multithreading plugin. ### Bugfixes; - Fix crash with multithreaded collision detection. Call `TriangleModel::getTriangleFlag` method for all triangles of the topology to force the initialization of adjacency.information in the topology before some actual collision detection code is executed.; - DDGNode should never be copied to ensure thread safe. Add private copy constructor t",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/215
https://github.com/sofa-framework/sofa/pull/215:2624,Modifiability,plugin,plugin,2624," - AnimateBeginEvent and AnimateEndEvent can now receive an optional pointer to a TaskStatus ( in a form of a void pointer ). When using SofaMultithreading, this taksStatus pointer can be used to spawn the AnimateBeginEvent method in a separate thread. It is the reponsibility of the component to decide whether or not its AnimateBeginEvent method is thread safe.; - Change BaseObject argument parsing. When parsing, ensures if src attribute is used with link @ now allow the use of src="""". Topologies container associated to src="""" are supposed to be filled by following topological mapping. Using src=""@"" to avoid link warning drove to an autolink where the loader refers on container itself. Modification of implicated scenes and xml accordingly.; - WorkerThread maintains a list of stealable tasks as well as a list of higher priority thread specific tasks. Remove ThreadSpecificTask (not used and redundant with new thread-specific task queues). Update Task logging.; - Adapted MultiThreading plugin to the new build system.; - SetDirectory no longer changes the system current directory (shared by all threads in the process), but uses a global variable to record the current directory to be used within Sofa. But changing to the current file's directory is needed to load Python scene. For the moment, python loader is not use with multithreading, changing directory in the loader is a temporary solution. The functioning of python scene loader need to be adapted in the futur. ### Cleans; - Streamline calls to createResponse in case no groupManager is used; - Clean warnings in Task and TaskSchedulerBoost for Multithreading plugin. ### Bugfixes; - Fix crash with multithreaded collision detection. Call `TriangleModel::getTriangleFlag` method for all triangles of the topology to force the initialization of adjacency.information in the topology before some actual collision detection code is executed.; - DDGNode should never be copied to ensure thread safe. Add private copy constructor t",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/215
https://github.com/sofa-framework/sofa/pull/215:2777,Modifiability,variab,variable,2777," ). When using SofaMultithreading, this taksStatus pointer can be used to spawn the AnimateBeginEvent method in a separate thread. It is the reponsibility of the component to decide whether or not its AnimateBeginEvent method is thread safe.; - Change BaseObject argument parsing. When parsing, ensures if src attribute is used with link @ now allow the use of src="""". Topologies container associated to src="""" are supposed to be filled by following topological mapping. Using src=""@"" to avoid link warning drove to an autolink where the loader refers on container itself. Modification of implicated scenes and xml accordingly.; - WorkerThread maintains a list of stealable tasks as well as a list of higher priority thread specific tasks. Remove ThreadSpecificTask (not used and redundant with new thread-specific task queues). Update Task logging.; - Adapted MultiThreading plugin to the new build system.; - SetDirectory no longer changes the system current directory (shared by all threads in the process), but uses a global variable to record the current directory to be used within Sofa. But changing to the current file's directory is needed to load Python scene. For the moment, python loader is not use with multithreading, changing directory in the loader is a temporary solution. The functioning of python scene loader need to be adapted in the futur. ### Cleans; - Streamline calls to createResponse in case no groupManager is used; - Clean warnings in Task and TaskSchedulerBoost for Multithreading plugin. ### Bugfixes; - Fix crash with multithreaded collision detection. Call `TriangleModel::getTriangleFlag` method for all triangles of the topology to force the initialization of adjacency.information in the topology before some actual collision detection code is executed.; - DDGNode should never be copied to ensure thread safe. Add private copy constructor that gives compilation error to ensure that.; - Compilation fixes for compatibility with boost 1_55. Corrected also the cop",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/215
https://github.com/sofa-framework/sofa/pull/215:3089,Modifiability,adapt,adapted,3089,"d with link @ now allow the use of src="""". Topologies container associated to src="""" are supposed to be filled by following topological mapping. Using src=""@"" to avoid link warning drove to an autolink where the loader refers on container itself. Modification of implicated scenes and xml accordingly.; - WorkerThread maintains a list of stealable tasks as well as a list of higher priority thread specific tasks. Remove ThreadSpecificTask (not used and redundant with new thread-specific task queues). Update Task logging.; - Adapted MultiThreading plugin to the new build system.; - SetDirectory no longer changes the system current directory (shared by all threads in the process), but uses a global variable to record the current directory to be used within Sofa. But changing to the current file's directory is needed to load Python scene. For the moment, python loader is not use with multithreading, changing directory in the loader is a temporary solution. The functioning of python scene loader need to be adapted in the futur. ### Cleans; - Streamline calls to createResponse in case no groupManager is used; - Clean warnings in Task and TaskSchedulerBoost for Multithreading plugin. ### Bugfixes; - Fix crash with multithreaded collision detection. Call `TriangleModel::getTriangleFlag` method for all triangles of the topology to force the initialization of adjacency.information in the topology before some actual collision detection code is executed.; - DDGNode should never be copied to ensure thread safe. Add private copy constructor that gives compilation error to ensure that.; - Compilation fixes for compatibility with boost 1_55. Corrected also the copyright notice.; - Fix execution freeze bug due to simultaneous and reciprocal task stealing between 2 threads (WorkerThread).; - Fix data race at startup, WorkerThread:mTaskScheduler was set by the main thread while being read by the worker thread. ______________________________________________________; <!--- Please leave th",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/215
https://github.com/sofa-framework/sofa/pull/215:3260,Modifiability,plugin,plugin,3260,"following topological mapping. Using src=""@"" to avoid link warning drove to an autolink where the loader refers on container itself. Modification of implicated scenes and xml accordingly.; - WorkerThread maintains a list of stealable tasks as well as a list of higher priority thread specific tasks. Remove ThreadSpecificTask (not used and redundant with new thread-specific task queues). Update Task logging.; - Adapted MultiThreading plugin to the new build system.; - SetDirectory no longer changes the system current directory (shared by all threads in the process), but uses a global variable to record the current directory to be used within Sofa. But changing to the current file's directory is needed to load Python scene. For the moment, python loader is not use with multithreading, changing directory in the loader is a temporary solution. The functioning of python scene loader need to be adapted in the futur. ### Cleans; - Streamline calls to createResponse in case no groupManager is used; - Clean warnings in Task and TaskSchedulerBoost for Multithreading plugin. ### Bugfixes; - Fix crash with multithreaded collision detection. Call `TriangleModel::getTriangleFlag` method for all triangles of the topology to force the initialization of adjacency.information in the topology before some actual collision detection code is executed.; - DDGNode should never be copied to ensure thread safe. Add private copy constructor that gives compilation error to ensure that.; - Compilation fixes for compatibility with boost 1_55. Corrected also the copyright notice.; - Fix execution freeze bug due to simultaneous and reciprocal task stealing between 2 threads (WorkerThread).; - Fix data race at startup, WorkerThread:mTaskScheduler was set by the main thread while being read by the worker thread. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does no",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/215
https://github.com/sofa-framework/sofa/pull/215:251,Performance,multi-thread,multi-threading,251,"This PR is certainly the biggest contribution from InSimo merge sprint. ; It will be further discussed during STC#3. ## issofa_multithreading. ### New features; - Add logGraphUpdates / logDataUpdates global variable in objectmodel to be able to debug multi-threading issue (not declared in headers, temporary until a better design is proposed); - Add a flag d_threadsafevisitor in solvers to disable writing in mechanicalstates of InteractionForceField in MechanicalVReallocVisitor/MechanicalVFreeVisitor as it might crash in multithreaded context; - Add `Contact::computeResponse()` and `Contact::finalizeResponse()` to separate thread-safe from sequential parts of the response computations; - Implement thread-safe Data engine/links updates by adding a lock while calling update().This requires that requestUpdate() or requestUpdateIfDirty() be called instead of update() directly, which is now protected.Bonus side effect is that it no longer matter where or if engines call cleanDirty() in their update method.; - Update all engines to new thread-safe design; - Add execution info in Task and index in WorkerThread; - Add support for multithreaded task logging (for visual profiling); - Add some const correctness in getColor and getName methods. ### Improvements; - Remove ClassInfo, deprecated in favor of BaseClass, and make sure all static instances are initialized while registering objects in the factory, to FIX ""pure virtual call"" crashes with visual c++ in multi-threaded contexts; - Replace `Creator<Contact::Factory,` with `sofa::core::collision::ContactCreator<` to improve thread safety of contact creation.; - AnimateBeginEvent and AnimateEndEvent can now receive an optional pointer to a TaskStatus ( in a form of a void pointer ). When using SofaMultithreading, this taksStatus pointer can be used to spawn the AnimateBeginEvent method in a separate thread. It is the reponsibility of the component to decide whether or not its AnimateBeginEvent method is thread safe.; - Change B",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/215
https://github.com/sofa-framework/sofa/pull/215:1471,Performance,multi-thread,multi-threaded,1471,"tionForceField in MechanicalVReallocVisitor/MechanicalVFreeVisitor as it might crash in multithreaded context; - Add `Contact::computeResponse()` and `Contact::finalizeResponse()` to separate thread-safe from sequential parts of the response computations; - Implement thread-safe Data engine/links updates by adding a lock while calling update().This requires that requestUpdate() or requestUpdateIfDirty() be called instead of update() directly, which is now protected.Bonus side effect is that it no longer matter where or if engines call cleanDirty() in their update method.; - Update all engines to new thread-safe design; - Add execution info in Task and index in WorkerThread; - Add support for multithreaded task logging (for visual profiling); - Add some const correctness in getColor and getName methods. ### Improvements; - Remove ClassInfo, deprecated in favor of BaseClass, and make sure all static instances are initialized while registering objects in the factory, to FIX ""pure virtual call"" crashes with visual c++ in multi-threaded contexts; - Replace `Creator<Contact::Factory,` with `sofa::core::collision::ContactCreator<` to improve thread safety of contact creation.; - AnimateBeginEvent and AnimateEndEvent can now receive an optional pointer to a TaskStatus ( in a form of a void pointer ). When using SofaMultithreading, this taksStatus pointer can be used to spawn the AnimateBeginEvent method in a separate thread. It is the reponsibility of the component to decide whether or not its AnimateBeginEvent method is thread safe.; - Change BaseObject argument parsing. When parsing, ensures if src attribute is used with link @ now allow the use of src="""". Topologies container associated to src="""" are supposed to be filled by following topological mapping. Using src=""@"" to avoid link warning drove to an autolink where the loader refers on container itself. Modification of implicated scenes and xml accordingly.; - WorkerThread maintains a list of stealable tasks as well as",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/215
https://github.com/sofa-framework/sofa/pull/215:2286,Performance,load,loader,2286," - Remove ClassInfo, deprecated in favor of BaseClass, and make sure all static instances are initialized while registering objects in the factory, to FIX ""pure virtual call"" crashes with visual c++ in multi-threaded contexts; - Replace `Creator<Contact::Factory,` with `sofa::core::collision::ContactCreator<` to improve thread safety of contact creation.; - AnimateBeginEvent and AnimateEndEvent can now receive an optional pointer to a TaskStatus ( in a form of a void pointer ). When using SofaMultithreading, this taksStatus pointer can be used to spawn the AnimateBeginEvent method in a separate thread. It is the reponsibility of the component to decide whether or not its AnimateBeginEvent method is thread safe.; - Change BaseObject argument parsing. When parsing, ensures if src attribute is used with link @ now allow the use of src="""". Topologies container associated to src="""" are supposed to be filled by following topological mapping. Using src=""@"" to avoid link warning drove to an autolink where the loader refers on container itself. Modification of implicated scenes and xml accordingly.; - WorkerThread maintains a list of stealable tasks as well as a list of higher priority thread specific tasks. Remove ThreadSpecificTask (not used and redundant with new thread-specific task queues). Update Task logging.; - Adapted MultiThreading plugin to the new build system.; - SetDirectory no longer changes the system current directory (shared by all threads in the process), but uses a global variable to record the current directory to be used within Sofa. But changing to the current file's directory is needed to load Python scene. For the moment, python loader is not use with multithreading, changing directory in the loader is a temporary solution. The functioning of python scene loader need to be adapted in the futur. ### Cleans; - Streamline calls to createResponse in case no groupManager is used; - Clean warnings in Task and TaskSchedulerBoost for Multithreading plugin. #",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/215
https://github.com/sofa-framework/sofa/pull/215:2568,Performance,queue,queues,2568,",` with `sofa::core::collision::ContactCreator<` to improve thread safety of contact creation.; - AnimateBeginEvent and AnimateEndEvent can now receive an optional pointer to a TaskStatus ( in a form of a void pointer ). When using SofaMultithreading, this taksStatus pointer can be used to spawn the AnimateBeginEvent method in a separate thread. It is the reponsibility of the component to decide whether or not its AnimateBeginEvent method is thread safe.; - Change BaseObject argument parsing. When parsing, ensures if src attribute is used with link @ now allow the use of src="""". Topologies container associated to src="""" are supposed to be filled by following topological mapping. Using src=""@"" to avoid link warning drove to an autolink where the loader refers on container itself. Modification of implicated scenes and xml accordingly.; - WorkerThread maintains a list of stealable tasks as well as a list of higher priority thread specific tasks. Remove ThreadSpecificTask (not used and redundant with new thread-specific task queues). Update Task logging.; - Adapted MultiThreading plugin to the new build system.; - SetDirectory no longer changes the system current directory (shared by all threads in the process), but uses a global variable to record the current directory to be used within Sofa. But changing to the current file's directory is needed to load Python scene. For the moment, python loader is not use with multithreading, changing directory in the loader is a temporary solution. The functioning of python scene loader need to be adapted in the futur. ### Cleans; - Streamline calls to createResponse in case no groupManager is used; - Clean warnings in Task and TaskSchedulerBoost for Multithreading plugin. ### Bugfixes; - Fix crash with multithreaded collision detection. Call `TriangleModel::getTriangleFlag` method for all triangles of the topology to force the initialization of adjacency.information in the topology before some actual collision detection code is exe",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/215
https://github.com/sofa-framework/sofa/pull/215:2900,Performance,load,load,2900,"It is the reponsibility of the component to decide whether or not its AnimateBeginEvent method is thread safe.; - Change BaseObject argument parsing. When parsing, ensures if src attribute is used with link @ now allow the use of src="""". Topologies container associated to src="""" are supposed to be filled by following topological mapping. Using src=""@"" to avoid link warning drove to an autolink where the loader refers on container itself. Modification of implicated scenes and xml accordingly.; - WorkerThread maintains a list of stealable tasks as well as a list of higher priority thread specific tasks. Remove ThreadSpecificTask (not used and redundant with new thread-specific task queues). Update Task logging.; - Adapted MultiThreading plugin to the new build system.; - SetDirectory no longer changes the system current directory (shared by all threads in the process), but uses a global variable to record the current directory to be used within Sofa. But changing to the current file's directory is needed to load Python scene. For the moment, python loader is not use with multithreading, changing directory in the loader is a temporary solution. The functioning of python scene loader need to be adapted in the futur. ### Cleans; - Streamline calls to createResponse in case no groupManager is used; - Clean warnings in Task and TaskSchedulerBoost for Multithreading plugin. ### Bugfixes; - Fix crash with multithreaded collision detection. Call `TriangleModel::getTriangleFlag` method for all triangles of the topology to force the initialization of adjacency.information in the topology before some actual collision detection code is executed.; - DDGNode should never be copied to ensure thread safe. Add private copy constructor that gives compilation error to ensure that.; - Compilation fixes for compatibility with boost 1_55. Corrected also the copyright notice.; - Fix execution freeze bug due to simultaneous and reciprocal task stealing between 2 threads (WorkerThread).; - Fix",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/215
https://github.com/sofa-framework/sofa/pull/215:2942,Performance,load,loader,2942,"hread safe.; - Change BaseObject argument parsing. When parsing, ensures if src attribute is used with link @ now allow the use of src="""". Topologies container associated to src="""" are supposed to be filled by following topological mapping. Using src=""@"" to avoid link warning drove to an autolink where the loader refers on container itself. Modification of implicated scenes and xml accordingly.; - WorkerThread maintains a list of stealable tasks as well as a list of higher priority thread specific tasks. Remove ThreadSpecificTask (not used and redundant with new thread-specific task queues). Update Task logging.; - Adapted MultiThreading plugin to the new build system.; - SetDirectory no longer changes the system current directory (shared by all threads in the process), but uses a global variable to record the current directory to be used within Sofa. But changing to the current file's directory is needed to load Python scene. For the moment, python loader is not use with multithreading, changing directory in the loader is a temporary solution. The functioning of python scene loader need to be adapted in the futur. ### Cleans; - Streamline calls to createResponse in case no groupManager is used; - Clean warnings in Task and TaskSchedulerBoost for Multithreading plugin. ### Bugfixes; - Fix crash with multithreaded collision detection. Call `TriangleModel::getTriangleFlag` method for all triangles of the topology to force the initialization of adjacency.information in the topology before some actual collision detection code is executed.; - DDGNode should never be copied to ensure thread safe. Add private copy constructor that gives compilation error to ensure that.; - Compilation fixes for compatibility with boost 1_55. Corrected also the copyright notice.; - Fix execution freeze bug due to simultaneous and reciprocal task stealing between 2 threads (WorkerThread).; - Fix data race at startup, WorkerThread:mTaskScheduler was set by the main thread while being read by ",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/215
https://github.com/sofa-framework/sofa/pull/215:3007,Performance,load,loader,3007,"hread safe.; - Change BaseObject argument parsing. When parsing, ensures if src attribute is used with link @ now allow the use of src="""". Topologies container associated to src="""" are supposed to be filled by following topological mapping. Using src=""@"" to avoid link warning drove to an autolink where the loader refers on container itself. Modification of implicated scenes and xml accordingly.; - WorkerThread maintains a list of stealable tasks as well as a list of higher priority thread specific tasks. Remove ThreadSpecificTask (not used and redundant with new thread-specific task queues). Update Task logging.; - Adapted MultiThreading plugin to the new build system.; - SetDirectory no longer changes the system current directory (shared by all threads in the process), but uses a global variable to record the current directory to be used within Sofa. But changing to the current file's directory is needed to load Python scene. For the moment, python loader is not use with multithreading, changing directory in the loader is a temporary solution. The functioning of python scene loader need to be adapted in the futur. ### Cleans; - Streamline calls to createResponse in case no groupManager is used; - Clean warnings in Task and TaskSchedulerBoost for Multithreading plugin. ### Bugfixes; - Fix crash with multithreaded collision detection. Call `TriangleModel::getTriangleFlag` method for all triangles of the topology to force the initialization of adjacency.information in the topology before some actual collision detection code is executed.; - DDGNode should never be copied to ensure thread safe. Add private copy constructor that gives compilation error to ensure that.; - Compilation fixes for compatibility with boost 1_55. Corrected also the copyright notice.; - Fix execution freeze bug due to simultaneous and reciprocal task stealing between 2 threads (WorkerThread).; - Fix data race at startup, WorkerThread:mTaskScheduler was set by the main thread while being read by ",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/215
https://github.com/sofa-framework/sofa/pull/215:3071,Performance,load,loader,3071,"d with link @ now allow the use of src="""". Topologies container associated to src="""" are supposed to be filled by following topological mapping. Using src=""@"" to avoid link warning drove to an autolink where the loader refers on container itself. Modification of implicated scenes and xml accordingly.; - WorkerThread maintains a list of stealable tasks as well as a list of higher priority thread specific tasks. Remove ThreadSpecificTask (not used and redundant with new thread-specific task queues). Update Task logging.; - Adapted MultiThreading plugin to the new build system.; - SetDirectory no longer changes the system current directory (shared by all threads in the process), but uses a global variable to record the current directory to be used within Sofa. But changing to the current file's directory is needed to load Python scene. For the moment, python loader is not use with multithreading, changing directory in the loader is a temporary solution. The functioning of python scene loader need to be adapted in the futur. ### Cleans; - Streamline calls to createResponse in case no groupManager is used; - Clean warnings in Task and TaskSchedulerBoost for Multithreading plugin. ### Bugfixes; - Fix crash with multithreaded collision detection. Call `TriangleModel::getTriangleFlag` method for all triangles of the topology to force the initialization of adjacency.information in the topology before some actual collision detection code is executed.; - DDGNode should never be copied to ensure thread safe. Add private copy constructor that gives compilation error to ensure that.; - Compilation fixes for compatibility with boost 1_55. Corrected also the copyright notice.; - Fix execution freeze bug due to simultaneous and reciprocal task stealing between 2 threads (WorkerThread).; - Fix data race at startup, WorkerThread:mTaskScheduler was set by the main thread while being read by the worker thread. ______________________________________________________; <!--- Please leave th",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/215
https://github.com/sofa-framework/sofa/pull/215:637,Safety,safe,safe,637,"This PR is certainly the biggest contribution from InSimo merge sprint. ; It will be further discussed during STC#3. ## issofa_multithreading. ### New features; - Add logGraphUpdates / logDataUpdates global variable in objectmodel to be able to debug multi-threading issue (not declared in headers, temporary until a better design is proposed); - Add a flag d_threadsafevisitor in solvers to disable writing in mechanicalstates of InteractionForceField in MechanicalVReallocVisitor/MechanicalVFreeVisitor as it might crash in multithreaded context; - Add `Contact::computeResponse()` and `Contact::finalizeResponse()` to separate thread-safe from sequential parts of the response computations; - Implement thread-safe Data engine/links updates by adding a lock while calling update().This requires that requestUpdate() or requestUpdateIfDirty() be called instead of update() directly, which is now protected.Bonus side effect is that it no longer matter where or if engines call cleanDirty() in their update method.; - Update all engines to new thread-safe design; - Add execution info in Task and index in WorkerThread; - Add support for multithreaded task logging (for visual profiling); - Add some const correctness in getColor and getName methods. ### Improvements; - Remove ClassInfo, deprecated in favor of BaseClass, and make sure all static instances are initialized while registering objects in the factory, to FIX ""pure virtual call"" crashes with visual c++ in multi-threaded contexts; - Replace `Creator<Contact::Factory,` with `sofa::core::collision::ContactCreator<` to improve thread safety of contact creation.; - AnimateBeginEvent and AnimateEndEvent can now receive an optional pointer to a TaskStatus ( in a form of a void pointer ). When using SofaMultithreading, this taksStatus pointer can be used to spawn the AnimateBeginEvent method in a separate thread. It is the reponsibility of the component to decide whether or not its AnimateBeginEvent method is thread safe.; - Change B",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/215
https://github.com/sofa-framework/sofa/pull/215:713,Safety,safe,safe,713,"This PR is certainly the biggest contribution from InSimo merge sprint. ; It will be further discussed during STC#3. ## issofa_multithreading. ### New features; - Add logGraphUpdates / logDataUpdates global variable in objectmodel to be able to debug multi-threading issue (not declared in headers, temporary until a better design is proposed); - Add a flag d_threadsafevisitor in solvers to disable writing in mechanicalstates of InteractionForceField in MechanicalVReallocVisitor/MechanicalVFreeVisitor as it might crash in multithreaded context; - Add `Contact::computeResponse()` and `Contact::finalizeResponse()` to separate thread-safe from sequential parts of the response computations; - Implement thread-safe Data engine/links updates by adding a lock while calling update().This requires that requestUpdate() or requestUpdateIfDirty() be called instead of update() directly, which is now protected.Bonus side effect is that it no longer matter where or if engines call cleanDirty() in their update method.; - Update all engines to new thread-safe design; - Add execution info in Task and index in WorkerThread; - Add support for multithreaded task logging (for visual profiling); - Add some const correctness in getColor and getName methods. ### Improvements; - Remove ClassInfo, deprecated in favor of BaseClass, and make sure all static instances are initialized while registering objects in the factory, to FIX ""pure virtual call"" crashes with visual c++ in multi-threaded contexts; - Replace `Creator<Contact::Factory,` with `sofa::core::collision::ContactCreator<` to improve thread safety of contact creation.; - AnimateBeginEvent and AnimateEndEvent can now receive an optional pointer to a TaskStatus ( in a form of a void pointer ). When using SofaMultithreading, this taksStatus pointer can be used to spawn the AnimateBeginEvent method in a separate thread. It is the reponsibility of the component to decide whether or not its AnimateBeginEvent method is thread safe.; - Change B",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/215
https://github.com/sofa-framework/sofa/pull/215:1052,Safety,safe,safe,1052,"hreading. ### New features; - Add logGraphUpdates / logDataUpdates global variable in objectmodel to be able to debug multi-threading issue (not declared in headers, temporary until a better design is proposed); - Add a flag d_threadsafevisitor in solvers to disable writing in mechanicalstates of InteractionForceField in MechanicalVReallocVisitor/MechanicalVFreeVisitor as it might crash in multithreaded context; - Add `Contact::computeResponse()` and `Contact::finalizeResponse()` to separate thread-safe from sequential parts of the response computations; - Implement thread-safe Data engine/links updates by adding a lock while calling update().This requires that requestUpdate() or requestUpdateIfDirty() be called instead of update() directly, which is now protected.Bonus side effect is that it no longer matter where or if engines call cleanDirty() in their update method.; - Update all engines to new thread-safe design; - Add execution info in Task and index in WorkerThread; - Add support for multithreaded task logging (for visual profiling); - Add some const correctness in getColor and getName methods. ### Improvements; - Remove ClassInfo, deprecated in favor of BaseClass, and make sure all static instances are initialized while registering objects in the factory, to FIX ""pure virtual call"" crashes with visual c++ in multi-threaded contexts; - Replace `Creator<Contact::Factory,` with `sofa::core::collision::ContactCreator<` to improve thread safety of contact creation.; - AnimateBeginEvent and AnimateEndEvent can now receive an optional pointer to a TaskStatus ( in a form of a void pointer ). When using SofaMultithreading, this taksStatus pointer can be used to spawn the AnimateBeginEvent method in a separate thread. It is the reponsibility of the component to decide whether or not its AnimateBeginEvent method is thread safe.; - Change BaseObject argument parsing. When parsing, ensures if src attribute is used with link @ now allow the use of src="""". Topologies conta",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/215
https://github.com/sofa-framework/sofa/pull/215:1598,Safety,safe,safety,1598,"tionForceField in MechanicalVReallocVisitor/MechanicalVFreeVisitor as it might crash in multithreaded context; - Add `Contact::computeResponse()` and `Contact::finalizeResponse()` to separate thread-safe from sequential parts of the response computations; - Implement thread-safe Data engine/links updates by adding a lock while calling update().This requires that requestUpdate() or requestUpdateIfDirty() be called instead of update() directly, which is now protected.Bonus side effect is that it no longer matter where or if engines call cleanDirty() in their update method.; - Update all engines to new thread-safe design; - Add execution info in Task and index in WorkerThread; - Add support for multithreaded task logging (for visual profiling); - Add some const correctness in getColor and getName methods. ### Improvements; - Remove ClassInfo, deprecated in favor of BaseClass, and make sure all static instances are initialized while registering objects in the factory, to FIX ""pure virtual call"" crashes with visual c++ in multi-threaded contexts; - Replace `Creator<Contact::Factory,` with `sofa::core::collision::ContactCreator<` to improve thread safety of contact creation.; - AnimateBeginEvent and AnimateEndEvent can now receive an optional pointer to a TaskStatus ( in a form of a void pointer ). When using SofaMultithreading, this taksStatus pointer can be used to spawn the AnimateBeginEvent method in a separate thread. It is the reponsibility of the component to decide whether or not its AnimateBeginEvent method is thread safe.; - Change BaseObject argument parsing. When parsing, ensures if src attribute is used with link @ now allow the use of src="""". Topologies container associated to src="""" are supposed to be filled by following topological mapping. Using src=""@"" to avoid link warning drove to an autolink where the loader refers on container itself. Modification of implicated scenes and xml accordingly.; - WorkerThread maintains a list of stealable tasks as well as",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/215
https://github.com/sofa-framework/sofa/pull/215:1984,Safety,safe,safe,1984," it no longer matter where or if engines call cleanDirty() in their update method.; - Update all engines to new thread-safe design; - Add execution info in Task and index in WorkerThread; - Add support for multithreaded task logging (for visual profiling); - Add some const correctness in getColor and getName methods. ### Improvements; - Remove ClassInfo, deprecated in favor of BaseClass, and make sure all static instances are initialized while registering objects in the factory, to FIX ""pure virtual call"" crashes with visual c++ in multi-threaded contexts; - Replace `Creator<Contact::Factory,` with `sofa::core::collision::ContactCreator<` to improve thread safety of contact creation.; - AnimateBeginEvent and AnimateEndEvent can now receive an optional pointer to a TaskStatus ( in a form of a void pointer ). When using SofaMultithreading, this taksStatus pointer can be used to spawn the AnimateBeginEvent method in a separate thread. It is the reponsibility of the component to decide whether or not its AnimateBeginEvent method is thread safe.; - Change BaseObject argument parsing. When parsing, ensures if src attribute is used with link @ now allow the use of src="""". Topologies container associated to src="""" are supposed to be filled by following topological mapping. Using src=""@"" to avoid link warning drove to an autolink where the loader refers on container itself. Modification of implicated scenes and xml accordingly.; - WorkerThread maintains a list of stealable tasks as well as a list of higher priority thread specific tasks. Remove ThreadSpecificTask (not used and redundant with new thread-specific task queues). Update Task logging.; - Adapted MultiThreading plugin to the new build system.; - SetDirectory no longer changes the system current directory (shared by all threads in the process), but uses a global variable to record the current directory to be used within Sofa. But changing to the current file's directory is needed to load Python scene. For the moment,",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/215
https://github.com/sofa-framework/sofa/pull/215:2236,Safety,avoid,avoid,2236," - Remove ClassInfo, deprecated in favor of BaseClass, and make sure all static instances are initialized while registering objects in the factory, to FIX ""pure virtual call"" crashes with visual c++ in multi-threaded contexts; - Replace `Creator<Contact::Factory,` with `sofa::core::collision::ContactCreator<` to improve thread safety of contact creation.; - AnimateBeginEvent and AnimateEndEvent can now receive an optional pointer to a TaskStatus ( in a form of a void pointer ). When using SofaMultithreading, this taksStatus pointer can be used to spawn the AnimateBeginEvent method in a separate thread. It is the reponsibility of the component to decide whether or not its AnimateBeginEvent method is thread safe.; - Change BaseObject argument parsing. When parsing, ensures if src attribute is used with link @ now allow the use of src="""". Topologies container associated to src="""" are supposed to be filled by following topological mapping. Using src=""@"" to avoid link warning drove to an autolink where the loader refers on container itself. Modification of implicated scenes and xml accordingly.; - WorkerThread maintains a list of stealable tasks as well as a list of higher priority thread specific tasks. Remove ThreadSpecificTask (not used and redundant with new thread-specific task queues). Update Task logging.; - Adapted MultiThreading plugin to the new build system.; - SetDirectory no longer changes the system current directory (shared by all threads in the process), but uses a global variable to record the current directory to be used within Sofa. But changing to the current file's directory is needed to load Python scene. For the moment, python loader is not use with multithreading, changing directory in the loader is a temporary solution. The functioning of python scene loader need to be adapted in the futur. ### Cleans; - Streamline calls to createResponse in case no groupManager is used; - Clean warnings in Task and TaskSchedulerBoost for Multithreading plugin. #",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/215
https://github.com/sofa-framework/sofa/pull/215:2528,Safety,redund,redundant,2528,",` with `sofa::core::collision::ContactCreator<` to improve thread safety of contact creation.; - AnimateBeginEvent and AnimateEndEvent can now receive an optional pointer to a TaskStatus ( in a form of a void pointer ). When using SofaMultithreading, this taksStatus pointer can be used to spawn the AnimateBeginEvent method in a separate thread. It is the reponsibility of the component to decide whether or not its AnimateBeginEvent method is thread safe.; - Change BaseObject argument parsing. When parsing, ensures if src attribute is used with link @ now allow the use of src="""". Topologies container associated to src="""" are supposed to be filled by following topological mapping. Using src=""@"" to avoid link warning drove to an autolink where the loader refers on container itself. Modification of implicated scenes and xml accordingly.; - WorkerThread maintains a list of stealable tasks as well as a list of higher priority thread specific tasks. Remove ThreadSpecificTask (not used and redundant with new thread-specific task queues). Update Task logging.; - Adapted MultiThreading plugin to the new build system.; - SetDirectory no longer changes the system current directory (shared by all threads in the process), but uses a global variable to record the current directory to be used within Sofa. But changing to the current file's directory is needed to load Python scene. For the moment, python loader is not use with multithreading, changing directory in the loader is a temporary solution. The functioning of python scene loader need to be adapted in the futur. ### Cleans; - Streamline calls to createResponse in case no groupManager is used; - Clean warnings in Task and TaskSchedulerBoost for Multithreading plugin. ### Bugfixes; - Fix crash with multithreaded collision detection. Call `TriangleModel::getTriangleFlag` method for all triangles of the topology to force the initialization of adjacency.information in the topology before some actual collision detection code is exe",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/215
https://github.com/sofa-framework/sofa/pull/215:3323,Safety,detect,detection,3323,"on container itself. Modification of implicated scenes and xml accordingly.; - WorkerThread maintains a list of stealable tasks as well as a list of higher priority thread specific tasks. Remove ThreadSpecificTask (not used and redundant with new thread-specific task queues). Update Task logging.; - Adapted MultiThreading plugin to the new build system.; - SetDirectory no longer changes the system current directory (shared by all threads in the process), but uses a global variable to record the current directory to be used within Sofa. But changing to the current file's directory is needed to load Python scene. For the moment, python loader is not use with multithreading, changing directory in the loader is a temporary solution. The functioning of python scene loader need to be adapted in the futur. ### Cleans; - Streamline calls to createResponse in case no groupManager is used; - Clean warnings in Task and TaskSchedulerBoost for Multithreading plugin. ### Bugfixes; - Fix crash with multithreaded collision detection. Call `TriangleModel::getTriangleFlag` method for all triangles of the topology to force the initialization of adjacency.information in the topology before some actual collision detection code is executed.; - DDGNode should never be copied to ensure thread safe. Add private copy constructor that gives compilation error to ensure that.; - Compilation fixes for compatibility with boost 1_55. Corrected also the copyright notice.; - Fix execution freeze bug due to simultaneous and reciprocal task stealing between 2 threads (WorkerThread).; - Fix data race at startup, WorkerThread:mTaskScheduler was set by the main thread while being read by the worker thread. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings nor unit test failures.; - [ ] does not break existing scenes.; - [ ] does not break AP",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/215
https://github.com/sofa-framework/sofa/pull/215:3511,Safety,detect,detection,3511," thread specific tasks. Remove ThreadSpecificTask (not used and redundant with new thread-specific task queues). Update Task logging.; - Adapted MultiThreading plugin to the new build system.; - SetDirectory no longer changes the system current directory (shared by all threads in the process), but uses a global variable to record the current directory to be used within Sofa. But changing to the current file's directory is needed to load Python scene. For the moment, python loader is not use with multithreading, changing directory in the loader is a temporary solution. The functioning of python scene loader need to be adapted in the futur. ### Cleans; - Streamline calls to createResponse in case no groupManager is used; - Clean warnings in Task and TaskSchedulerBoost for Multithreading plugin. ### Bugfixes; - Fix crash with multithreaded collision detection. Call `TriangleModel::getTriangleFlag` method for all triangles of the topology to force the initialization of adjacency.information in the topology before some actual collision detection code is executed.; - DDGNode should never be copied to ensure thread safe. Add private copy constructor that gives compilation error to ensure that.; - Compilation fixes for compatibility with boost 1_55. Corrected also the copyright notice.; - Fix execution freeze bug due to simultaneous and reciprocal task stealing between 2 threads (WorkerThread).; - Fix data race at startup, WorkerThread:mTaskScheduler was set by the main thread while being read by the worker thread. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings nor unit test failures.; - [ ] does not break existing scenes.; - [ ] does not break API compatibility.; - [ ] has been reviewed and agreed to be transitional.; - [ ] is more than 1 week old. **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/215
https://github.com/sofa-framework/sofa/pull/215:3590,Safety,safe,safe,3590," thread specific tasks. Remove ThreadSpecificTask (not used and redundant with new thread-specific task queues). Update Task logging.; - Adapted MultiThreading plugin to the new build system.; - SetDirectory no longer changes the system current directory (shared by all threads in the process), but uses a global variable to record the current directory to be used within Sofa. But changing to the current file's directory is needed to load Python scene. For the moment, python loader is not use with multithreading, changing directory in the loader is a temporary solution. The functioning of python scene loader need to be adapted in the futur. ### Cleans; - Streamline calls to createResponse in case no groupManager is used; - Clean warnings in Task and TaskSchedulerBoost for Multithreading plugin. ### Bugfixes; - Fix crash with multithreaded collision detection. Call `TriangleModel::getTriangleFlag` method for all triangles of the topology to force the initialization of adjacency.information in the topology before some actual collision detection code is executed.; - DDGNode should never be copied to ensure thread safe. Add private copy constructor that gives compilation error to ensure that.; - Compilation fixes for compatibility with boost 1_55. Corrected also the copyright notice.; - Fix execution freeze bug due to simultaneous and reciprocal task stealing between 2 threads (WorkerThread).; - Fix data race at startup, WorkerThread:mTaskScheduler was set by the main thread while being read by the worker thread. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings nor unit test failures.; - [ ] does not break existing scenes.; - [ ] does not break API compatibility.; - [ ] has been reviewed and agreed to be transitional.; - [ ] is more than 1 week old. **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/215
https://github.com/sofa-framework/sofa/pull/215:167,Testability,log,logGraphUpdates,167,"This PR is certainly the biggest contribution from InSimo merge sprint. ; It will be further discussed during STC#3. ## issofa_multithreading. ### New features; - Add logGraphUpdates / logDataUpdates global variable in objectmodel to be able to debug multi-threading issue (not declared in headers, temporary until a better design is proposed); - Add a flag d_threadsafevisitor in solvers to disable writing in mechanicalstates of InteractionForceField in MechanicalVReallocVisitor/MechanicalVFreeVisitor as it might crash in multithreaded context; - Add `Contact::computeResponse()` and `Contact::finalizeResponse()` to separate thread-safe from sequential parts of the response computations; - Implement thread-safe Data engine/links updates by adding a lock while calling update().This requires that requestUpdate() or requestUpdateIfDirty() be called instead of update() directly, which is now protected.Bonus side effect is that it no longer matter where or if engines call cleanDirty() in their update method.; - Update all engines to new thread-safe design; - Add execution info in Task and index in WorkerThread; - Add support for multithreaded task logging (for visual profiling); - Add some const correctness in getColor and getName methods. ### Improvements; - Remove ClassInfo, deprecated in favor of BaseClass, and make sure all static instances are initialized while registering objects in the factory, to FIX ""pure virtual call"" crashes with visual c++ in multi-threaded contexts; - Replace `Creator<Contact::Factory,` with `sofa::core::collision::ContactCreator<` to improve thread safety of contact creation.; - AnimateBeginEvent and AnimateEndEvent can now receive an optional pointer to a TaskStatus ( in a form of a void pointer ). When using SofaMultithreading, this taksStatus pointer can be used to spawn the AnimateBeginEvent method in a separate thread. It is the reponsibility of the component to decide whether or not its AnimateBeginEvent method is thread safe.; - Change B",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/215
https://github.com/sofa-framework/sofa/pull/215:185,Testability,log,logDataUpdates,185,"This PR is certainly the biggest contribution from InSimo merge sprint. ; It will be further discussed during STC#3. ## issofa_multithreading. ### New features; - Add logGraphUpdates / logDataUpdates global variable in objectmodel to be able to debug multi-threading issue (not declared in headers, temporary until a better design is proposed); - Add a flag d_threadsafevisitor in solvers to disable writing in mechanicalstates of InteractionForceField in MechanicalVReallocVisitor/MechanicalVFreeVisitor as it might crash in multithreaded context; - Add `Contact::computeResponse()` and `Contact::finalizeResponse()` to separate thread-safe from sequential parts of the response computations; - Implement thread-safe Data engine/links updates by adding a lock while calling update().This requires that requestUpdate() or requestUpdateIfDirty() be called instead of update() directly, which is now protected.Bonus side effect is that it no longer matter where or if engines call cleanDirty() in their update method.; - Update all engines to new thread-safe design; - Add execution info in Task and index in WorkerThread; - Add support for multithreaded task logging (for visual profiling); - Add some const correctness in getColor and getName methods. ### Improvements; - Remove ClassInfo, deprecated in favor of BaseClass, and make sure all static instances are initialized while registering objects in the factory, to FIX ""pure virtual call"" crashes with visual c++ in multi-threaded contexts; - Replace `Creator<Contact::Factory,` with `sofa::core::collision::ContactCreator<` to improve thread safety of contact creation.; - AnimateBeginEvent and AnimateEndEvent can now receive an optional pointer to a TaskStatus ( in a form of a void pointer ). When using SofaMultithreading, this taksStatus pointer can be used to spawn the AnimateBeginEvent method in a separate thread. It is the reponsibility of the component to decide whether or not its AnimateBeginEvent method is thread safe.; - Change B",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/215
https://github.com/sofa-framework/sofa/pull/215:1158,Testability,log,logging,1158,"hreading. ### New features; - Add logGraphUpdates / logDataUpdates global variable in objectmodel to be able to debug multi-threading issue (not declared in headers, temporary until a better design is proposed); - Add a flag d_threadsafevisitor in solvers to disable writing in mechanicalstates of InteractionForceField in MechanicalVReallocVisitor/MechanicalVFreeVisitor as it might crash in multithreaded context; - Add `Contact::computeResponse()` and `Contact::finalizeResponse()` to separate thread-safe from sequential parts of the response computations; - Implement thread-safe Data engine/links updates by adding a lock while calling update().This requires that requestUpdate() or requestUpdateIfDirty() be called instead of update() directly, which is now protected.Bonus side effect is that it no longer matter where or if engines call cleanDirty() in their update method.; - Update all engines to new thread-safe design; - Add execution info in Task and index in WorkerThread; - Add support for multithreaded task logging (for visual profiling); - Add some const correctness in getColor and getName methods. ### Improvements; - Remove ClassInfo, deprecated in favor of BaseClass, and make sure all static instances are initialized while registering objects in the factory, to FIX ""pure virtual call"" crashes with visual c++ in multi-threaded contexts; - Replace `Creator<Contact::Factory,` with `sofa::core::collision::ContactCreator<` to improve thread safety of contact creation.; - AnimateBeginEvent and AnimateEndEvent can now receive an optional pointer to a TaskStatus ( in a form of a void pointer ). When using SofaMultithreading, this taksStatus pointer can be used to spawn the AnimateBeginEvent method in a separate thread. It is the reponsibility of the component to decide whether or not its AnimateBeginEvent method is thread safe.; - Change BaseObject argument parsing. When parsing, ensures if src attribute is used with link @ now allow the use of src="""". Topologies conta",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/215
https://github.com/sofa-framework/sofa/pull/215:2589,Testability,log,logging,2589,"rove thread safety of contact creation.; - AnimateBeginEvent and AnimateEndEvent can now receive an optional pointer to a TaskStatus ( in a form of a void pointer ). When using SofaMultithreading, this taksStatus pointer can be used to spawn the AnimateBeginEvent method in a separate thread. It is the reponsibility of the component to decide whether or not its AnimateBeginEvent method is thread safe.; - Change BaseObject argument parsing. When parsing, ensures if src attribute is used with link @ now allow the use of src="""". Topologies container associated to src="""" are supposed to be filled by following topological mapping. Using src=""@"" to avoid link warning drove to an autolink where the loader refers on container itself. Modification of implicated scenes and xml accordingly.; - WorkerThread maintains a list of stealable tasks as well as a list of higher priority thread specific tasks. Remove ThreadSpecificTask (not used and redundant with new thread-specific task queues). Update Task logging.; - Adapted MultiThreading plugin to the new build system.; - SetDirectory no longer changes the system current directory (shared by all threads in the process), but uses a global variable to record the current directory to be used within Sofa. But changing to the current file's directory is needed to load Python scene. For the moment, python loader is not use with multithreading, changing directory in the loader is a temporary solution. The functioning of python scene loader need to be adapted in the futur. ### Cleans; - Streamline calls to createResponse in case no groupManager is used; - Clean warnings in Task and TaskSchedulerBoost for Multithreading plugin. ### Bugfixes; - Fix crash with multithreaded collision detection. Call `TriangleModel::getTriangleFlag` method for all triangles of the topology to force the initialization of adjacency.information in the topology before some actual collision detection code is executed.; - DDGNode should never be copied to ensure thre",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/215
https://github.com/sofa-framework/sofa/pull/215:4222,Testability,test,test,4222," thread specific tasks. Remove ThreadSpecificTask (not used and redundant with new thread-specific task queues). Update Task logging.; - Adapted MultiThreading plugin to the new build system.; - SetDirectory no longer changes the system current directory (shared by all threads in the process), but uses a global variable to record the current directory to be used within Sofa. But changing to the current file's directory is needed to load Python scene. For the moment, python loader is not use with multithreading, changing directory in the loader is a temporary solution. The functioning of python scene loader need to be adapted in the futur. ### Cleans; - Streamline calls to createResponse in case no groupManager is used; - Clean warnings in Task and TaskSchedulerBoost for Multithreading plugin. ### Bugfixes; - Fix crash with multithreaded collision detection. Call `TriangleModel::getTriangleFlag` method for all triangles of the topology to force the initialization of adjacency.information in the topology before some actual collision detection code is executed.; - DDGNode should never be copied to ensure thread safe. Add private copy constructor that gives compilation error to ensure that.; - Compilation fixes for compatibility with boost 1_55. Corrected also the copyright notice.; - Fix execution freeze bug due to simultaneous and reciprocal task stealing between 2 threads (WorkerThread).; - Fix data race at startup, WorkerThread:mTaskScheduler was set by the main thread while being read by the worker thread. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings nor unit test failures.; - [ ] does not break existing scenes.; - [ ] does not break API compatibility.; - [ ] has been reviewed and agreed to be transitional.; - [ ] is more than 1 week old. **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/215
https://github.com/sofa-framework/sofa/pull/216:1413,Availability,failure,failures,1413,"### Description; This PR removes option to apply projective constraints during velocity and/or position propagation visitors, as it makes it unreliable to put projective constraints in child nodes (required when they apply on the DOFs but with a different/subset topology). All codes (solvers and animationloop) must now explicitly call projection operations/visitors before propagations when required (mostly after `OdeSolver::solve())`. This PR is changing the behavior as projective constraints because they are no longer applied at the end of Simulation::init(). To clearly make that visible to calling's code the propagate visitor was renamed to make sure existing codes fail at compilation time. ; To fix that in private/external repos should be easy:; - if projective constraints should not be applied, simply apply the rename to the visitor class; - if projective constraints should be applied, add a MechanicalProject???Visitor first, then rename the existing one. CHANGELOG for @guparan and @hugtalbot ; - [SofaKernel] Change the way all MechanicaVisitor apply projective constraints. This change is breaking the API aand external solver's code need to be updated (see #PR26). ; - ...to finish ....; ___________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings nor unit test failures.; - [x] does not break existing scenes.; - [ ] does not break API compatibility.; - [x] has been reviewed and agreed to be transitional.; - [x] is more than 1 week old. **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/216
https://github.com/sofa-framework/sofa/pull/216:1166,Deployability,update,updated,1166,"### Description; This PR removes option to apply projective constraints during velocity and/or position propagation visitors, as it makes it unreliable to put projective constraints in child nodes (required when they apply on the DOFs but with a different/subset topology). All codes (solvers and animationloop) must now explicitly call projection operations/visitors before propagations when required (mostly after `OdeSolver::solve())`. This PR is changing the behavior as projective constraints because they are no longer applied at the end of Simulation::init(). To clearly make that visible to calling's code the propagate visitor was renamed to make sure existing codes fail at compilation time. ; To fix that in private/external repos should be easy:; - if projective constraints should not be applied, simply apply the rename to the visitor class; - if projective constraints should be applied, add a MechanicalProject???Visitor first, then rename the existing one. CHANGELOG for @guparan and @hugtalbot ; - [SofaKernel] Change the way all MechanicaVisitor apply projective constraints. This change is breaking the API aand external solver's code need to be updated (see #PR26). ; - ...to finish ....; ___________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings nor unit test failures.; - [x] does not break existing scenes.; - [ ] does not break API compatibility.; - [x] has been reviewed and agreed to be transitional.; - [x] is more than 1 week old. **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/216
https://github.com/sofa-framework/sofa/pull/216:1282,Integrability,message,message,1282,"### Description; This PR removes option to apply projective constraints during velocity and/or position propagation visitors, as it makes it unreliable to put projective constraints in child nodes (required when they apply on the DOFs but with a different/subset topology). All codes (solvers and animationloop) must now explicitly call projection operations/visitors before propagations when required (mostly after `OdeSolver::solve())`. This PR is changing the behavior as projective constraints because they are no longer applied at the end of Simulation::init(). To clearly make that visible to calling's code the propagate visitor was renamed to make sure existing codes fail at compilation time. ; To fix that in private/external repos should be easy:; - if projective constraints should not be applied, simply apply the rename to the visitor class; - if projective constraints should be applied, add a MechanicalProject???Visitor first, then rename the existing one. CHANGELOG for @guparan and @hugtalbot ; - [SofaKernel] Change the way all MechanicaVisitor apply projective constraints. This change is breaking the API aand external solver's code need to be updated (see #PR26). ; - ...to finish ....; ___________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings nor unit test failures.; - [x] does not break existing scenes.; - [ ] does not break API compatibility.; - [x] has been reviewed and agreed to be transitional.; - [x] is more than 1 week old. **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/216
https://github.com/sofa-framework/sofa/pull/216:1408,Testability,test,test,1408,"### Description; This PR removes option to apply projective constraints during velocity and/or position propagation visitors, as it makes it unreliable to put projective constraints in child nodes (required when they apply on the DOFs but with a different/subset topology). All codes (solvers and animationloop) must now explicitly call projection operations/visitors before propagations when required (mostly after `OdeSolver::solve())`. This PR is changing the behavior as projective constraints because they are no longer applied at the end of Simulation::init(). To clearly make that visible to calling's code the propagate visitor was renamed to make sure existing codes fail at compilation time. ; To fix that in private/external repos should be easy:; - if projective constraints should not be applied, simply apply the rename to the visitor class; - if projective constraints should be applied, add a MechanicalProject???Visitor first, then rename the existing one. CHANGELOG for @guparan and @hugtalbot ; - [SofaKernel] Change the way all MechanicaVisitor apply projective constraints. This change is breaking the API aand external solver's code need to be updated (see #PR26). ; - ...to finish ....; ___________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings nor unit test failures.; - [x] does not break existing scenes.; - [ ] does not break API compatibility.; - [x] has been reviewed and agreed to be transitional.; - [x] is more than 1 week old. **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/216
https://github.com/sofa-framework/sofa/pull/216:570,Usability,clear,clearly,570,"### Description; This PR removes option to apply projective constraints during velocity and/or position propagation visitors, as it makes it unreliable to put projective constraints in child nodes (required when they apply on the DOFs but with a different/subset topology). All codes (solvers and animationloop) must now explicitly call projection operations/visitors before propagations when required (mostly after `OdeSolver::solve())`. This PR is changing the behavior as projective constraints because they are no longer applied at the end of Simulation::init(). To clearly make that visible to calling's code the propagate visitor was renamed to make sure existing codes fail at compilation time. ; To fix that in private/external repos should be easy:; - if projective constraints should not be applied, simply apply the rename to the visitor class; - if projective constraints should be applied, add a MechanicalProject???Visitor first, then rename the existing one. CHANGELOG for @guparan and @hugtalbot ; - [SofaKernel] Change the way all MechanicaVisitor apply projective constraints. This change is breaking the API aand external solver's code need to be updated (see #PR26). ; - ...to finish ....; ___________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings nor unit test failures.; - [x] does not break existing scenes.; - [ ] does not break API compatibility.; - [x] has been reviewed and agreed to be transitional.; - [x] is more than 1 week old. **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/216
https://github.com/sofa-framework/sofa/pull/216:810,Usability,simpl,simply,810,"### Description; This PR removes option to apply projective constraints during velocity and/or position propagation visitors, as it makes it unreliable to put projective constraints in child nodes (required when they apply on the DOFs but with a different/subset topology). All codes (solvers and animationloop) must now explicitly call projection operations/visitors before propagations when required (mostly after `OdeSolver::solve())`. This PR is changing the behavior as projective constraints because they are no longer applied at the end of Simulation::init(). To clearly make that visible to calling's code the propagate visitor was renamed to make sure existing codes fail at compilation time. ; To fix that in private/external repos should be easy:; - if projective constraints should not be applied, simply apply the rename to the visitor class; - if projective constraints should be applied, add a MechanicalProject???Visitor first, then rename the existing one. CHANGELOG for @guparan and @hugtalbot ; - [SofaKernel] Change the way all MechanicaVisitor apply projective constraints. This change is breaking the API aand external solver's code need to be updated (see #PR26). ; - ...to finish ....; ___________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings nor unit test failures.; - [x] does not break existing scenes.; - [ ] does not break API compatibility.; - [x] has been reviewed and agreed to be transitional.; - [x] is more than 1 week old. **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/216
https://github.com/sofa-framework/sofa/pull/217:1919,Availability,failure,failures,1919,"pological changes for compliance vector; - Container : add accessor to the topology type; - SubsetMapping : add resizeToModel flag in SubsetMapping to enable resizing of the destination MechanicalState to the size of indices; - BaseContext : add new method getActiveMeshTopology to get relevant topology, taking `BaseMaping::sameTopology()` into account; - PointSetTopology : add some unit tests. ### Improvements; - each time a topological change sequence is detected in BarycentricMapperTriangleSetTopology the mapping is initialized; - PointSetTopologyContainer maintains a list of point indices, accessible through the data points; - Topology : Factorize the last method specific to each topological elements in data containers. ### Cleans; - MechanicalObject size and link to topology is now exposed as Data and Link, using the new getActiveMeshTopology() method. Set the link manually and/or set useTopology=""false"" to override. ### Bugfixes; - apply data container updates before mapping updates; - use existing parameter handleTopologyChange in SubsetMapping; - slightly cleanup topology change handling method for triangle mappers; - check of upper topology based on the emptiness of the upper container; - crash in `MeshTopology::init()` for non manifold meshes; - re-enable Propagate of topological changes inbetween triangle creation and removal in `TriangleSetTopologyModifier::addRemoveTriangles(),` as it is required in cases involving chains of topology mapping and topology data containers depending on each other . ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings nor unit test failures.; - [x] does not break existing scenes.; - [x] does not break API compatibility.; - [x] has been reviewed and agreed to be transitional.; - [x] is more than 1 week old. **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/217
https://github.com/sofa-framework/sofa/pull/217:1128,Deployability,update,updates,1128,"pological changes for compliance vector; - Container : add accessor to the topology type; - SubsetMapping : add resizeToModel flag in SubsetMapping to enable resizing of the destination MechanicalState to the size of indices; - BaseContext : add new method getActiveMeshTopology to get relevant topology, taking `BaseMaping::sameTopology()` into account; - PointSetTopology : add some unit tests. ### Improvements; - each time a topological change sequence is detected in BarycentricMapperTriangleSetTopology the mapping is initialized; - PointSetTopologyContainer maintains a list of point indices, accessible through the data points; - Topology : Factorize the last method specific to each topological elements in data containers. ### Cleans; - MechanicalObject size and link to topology is now exposed as Data and Link, using the new getActiveMeshTopology() method. Set the link manually and/or set useTopology=""false"" to override. ### Bugfixes; - apply data container updates before mapping updates; - use existing parameter handleTopologyChange in SubsetMapping; - slightly cleanup topology change handling method for triangle mappers; - check of upper topology based on the emptiness of the upper container; - crash in `MeshTopology::init()` for non manifold meshes; - re-enable Propagate of topological changes inbetween triangle creation and removal in `TriangleSetTopologyModifier::addRemoveTriangles(),` as it is required in cases involving chains of topology mapping and topology data containers depending on each other . ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings nor unit test failures.; - [x] does not break existing scenes.; - [x] does not break API compatibility.; - [x] has been reviewed and agreed to be transitional.; - [x] is more than 1 week old. **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/217
https://github.com/sofa-framework/sofa/pull/217:1151,Deployability,update,updates,1151,"pological changes for compliance vector; - Container : add accessor to the topology type; - SubsetMapping : add resizeToModel flag in SubsetMapping to enable resizing of the destination MechanicalState to the size of indices; - BaseContext : add new method getActiveMeshTopology to get relevant topology, taking `BaseMaping::sameTopology()` into account; - PointSetTopology : add some unit tests. ### Improvements; - each time a topological change sequence is detected in BarycentricMapperTriangleSetTopology the mapping is initialized; - PointSetTopologyContainer maintains a list of point indices, accessible through the data points; - Topology : Factorize the last method specific to each topological elements in data containers. ### Cleans; - MechanicalObject size and link to topology is now exposed as Data and Link, using the new getActiveMeshTopology() method. Set the link manually and/or set useTopology=""false"" to override. ### Bugfixes; - apply data container updates before mapping updates; - use existing parameter handleTopologyChange in SubsetMapping; - slightly cleanup topology change handling method for triangle mappers; - check of upper topology based on the emptiness of the upper container; - crash in `MeshTopology::init()` for non manifold meshes; - re-enable Propagate of topological changes inbetween triangle creation and removal in `TriangleSetTopologyModifier::addRemoveTriangles(),` as it is required in cases involving chains of topology mapping and topology data containers depending on each other . ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings nor unit test failures.; - [x] does not break existing scenes.; - [x] does not break API compatibility.; - [x] has been reviewed and agreed to be transitional.; - [x] is more than 1 week old. **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/217
https://github.com/sofa-framework/sofa/pull/217:1663,Integrability,depend,depending,1663,"pological changes for compliance vector; - Container : add accessor to the topology type; - SubsetMapping : add resizeToModel flag in SubsetMapping to enable resizing of the destination MechanicalState to the size of indices; - BaseContext : add new method getActiveMeshTopology to get relevant topology, taking `BaseMaping::sameTopology()` into account; - PointSetTopology : add some unit tests. ### Improvements; - each time a topological change sequence is detected in BarycentricMapperTriangleSetTopology the mapping is initialized; - PointSetTopologyContainer maintains a list of point indices, accessible through the data points; - Topology : Factorize the last method specific to each topological elements in data containers. ### Cleans; - MechanicalObject size and link to topology is now exposed as Data and Link, using the new getActiveMeshTopology() method. Set the link manually and/or set useTopology=""false"" to override. ### Bugfixes; - apply data container updates before mapping updates; - use existing parameter handleTopologyChange in SubsetMapping; - slightly cleanup topology change handling method for triangle mappers; - check of upper topology based on the emptiness of the upper container; - crash in `MeshTopology::init()` for non manifold meshes; - re-enable Propagate of topological changes inbetween triangle creation and removal in `TriangleSetTopologyModifier::addRemoveTriangles(),` as it is required in cases involving chains of topology mapping and topology data containers depending on each other . ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings nor unit test failures.; - [x] does not break existing scenes.; - [x] does not break API compatibility.; - [x] has been reviewed and agreed to be transitional.; - [x] is more than 1 week old. **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/217
https://github.com/sofa-framework/sofa/pull/217:1788,Integrability,message,message,1788,"pological changes for compliance vector; - Container : add accessor to the topology type; - SubsetMapping : add resizeToModel flag in SubsetMapping to enable resizing of the destination MechanicalState to the size of indices; - BaseContext : add new method getActiveMeshTopology to get relevant topology, taking `BaseMaping::sameTopology()` into account; - PointSetTopology : add some unit tests. ### Improvements; - each time a topological change sequence is detected in BarycentricMapperTriangleSetTopology the mapping is initialized; - PointSetTopologyContainer maintains a list of point indices, accessible through the data points; - Topology : Factorize the last method specific to each topological elements in data containers. ### Cleans; - MechanicalObject size and link to topology is now exposed as Data and Link, using the new getActiveMeshTopology() method. Set the link manually and/or set useTopology=""false"" to override. ### Bugfixes; - apply data container updates before mapping updates; - use existing parameter handleTopologyChange in SubsetMapping; - slightly cleanup topology change handling method for triangle mappers; - check of upper topology based on the emptiness of the upper container; - crash in `MeshTopology::init()` for non manifold meshes; - re-enable Propagate of topological changes inbetween triangle creation and removal in `TriangleSetTopologyModifier::addRemoveTriangles(),` as it is required in cases involving chains of topology mapping and topology data containers depending on each other . ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings nor unit test failures.; - [x] does not break existing scenes.; - [x] does not break API compatibility.; - [x] has been reviewed and agreed to be transitional.; - [x] is more than 1 week old. **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/217
https://github.com/sofa-framework/sofa/pull/217:616,Safety,detect,detected,616,"This PR will be further discussed during STC#3. ## issofa_topology. ### New features; - UncoupledConstraintCorrection : add option to disable handling of topological changes for compliance vector; - Container : add accessor to the topology type; - SubsetMapping : add resizeToModel flag in SubsetMapping to enable resizing of the destination MechanicalState to the size of indices; - BaseContext : add new method getActiveMeshTopology to get relevant topology, taking `BaseMaping::sameTopology()` into account; - PointSetTopology : add some unit tests. ### Improvements; - each time a topological change sequence is detected in BarycentricMapperTriangleSetTopology the mapping is initialized; - PointSetTopologyContainer maintains a list of point indices, accessible through the data points; - Topology : Factorize the last method specific to each topological elements in data containers. ### Cleans; - MechanicalObject size and link to topology is now exposed as Data and Link, using the new getActiveMeshTopology() method. Set the link manually and/or set useTopology=""false"" to override. ### Bugfixes; - apply data container updates before mapping updates; - use existing parameter handleTopologyChange in SubsetMapping; - slightly cleanup topology change handling method for triangle mappers; - check of upper topology based on the emptiness of the upper container; - crash in `MeshTopology::init()` for non manifold meshes; - re-enable Propagate of topological changes inbetween triangle creation and removal in `TriangleSetTopologyModifier::addRemoveTriangles(),` as it is required in cases involving chains of topology mapping and topology data containers depending on each other . ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings nor unit test failures.; - [x] does not break existing scenes.; - [x] does not break API compati",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/217
https://github.com/sofa-framework/sofa/pull/217:215,Security,access,accessor,215,"This PR will be further discussed during STC#3. ## issofa_topology. ### New features; - UncoupledConstraintCorrection : add option to disable handling of topological changes for compliance vector; - Container : add accessor to the topology type; - SubsetMapping : add resizeToModel flag in SubsetMapping to enable resizing of the destination MechanicalState to the size of indices; - BaseContext : add new method getActiveMeshTopology to get relevant topology, taking `BaseMaping::sameTopology()` into account; - PointSetTopology : add some unit tests. ### Improvements; - each time a topological change sequence is detected in BarycentricMapperTriangleSetTopology the mapping is initialized; - PointSetTopologyContainer maintains a list of point indices, accessible through the data points; - Topology : Factorize the last method specific to each topological elements in data containers. ### Cleans; - MechanicalObject size and link to topology is now exposed as Data and Link, using the new getActiveMeshTopology() method. Set the link manually and/or set useTopology=""false"" to override. ### Bugfixes; - apply data container updates before mapping updates; - use existing parameter handleTopologyChange in SubsetMapping; - slightly cleanup topology change handling method for triangle mappers; - check of upper topology based on the emptiness of the upper container; - crash in `MeshTopology::init()` for non manifold meshes; - re-enable Propagate of topological changes inbetween triangle creation and removal in `TriangleSetTopologyModifier::addRemoveTriangles(),` as it is required in cases involving chains of topology mapping and topology data containers depending on each other . ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings nor unit test failures.; - [x] does not break existing scenes.; - [x] does not break API compati",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/217
https://github.com/sofa-framework/sofa/pull/217:756,Security,access,accessible,756,"This PR will be further discussed during STC#3. ## issofa_topology. ### New features; - UncoupledConstraintCorrection : add option to disable handling of topological changes for compliance vector; - Container : add accessor to the topology type; - SubsetMapping : add resizeToModel flag in SubsetMapping to enable resizing of the destination MechanicalState to the size of indices; - BaseContext : add new method getActiveMeshTopology to get relevant topology, taking `BaseMaping::sameTopology()` into account; - PointSetTopology : add some unit tests. ### Improvements; - each time a topological change sequence is detected in BarycentricMapperTriangleSetTopology the mapping is initialized; - PointSetTopologyContainer maintains a list of point indices, accessible through the data points; - Topology : Factorize the last method specific to each topological elements in data containers. ### Cleans; - MechanicalObject size and link to topology is now exposed as Data and Link, using the new getActiveMeshTopology() method. Set the link manually and/or set useTopology=""false"" to override. ### Bugfixes; - apply data container updates before mapping updates; - use existing parameter handleTopologyChange in SubsetMapping; - slightly cleanup topology change handling method for triangle mappers; - check of upper topology based on the emptiness of the upper container; - crash in `MeshTopology::init()` for non manifold meshes; - re-enable Propagate of topological changes inbetween triangle creation and removal in `TriangleSetTopologyModifier::addRemoveTriangles(),` as it is required in cases involving chains of topology mapping and topology data containers depending on each other . ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings nor unit test failures.; - [x] does not break existing scenes.; - [x] does not break API compati",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/217
https://github.com/sofa-framework/sofa/pull/217:953,Security,expose,exposed,953,"This PR will be further discussed during STC#3. ## issofa_topology. ### New features; - UncoupledConstraintCorrection : add option to disable handling of topological changes for compliance vector; - Container : add accessor to the topology type; - SubsetMapping : add resizeToModel flag in SubsetMapping to enable resizing of the destination MechanicalState to the size of indices; - BaseContext : add new method getActiveMeshTopology to get relevant topology, taking `BaseMaping::sameTopology()` into account; - PointSetTopology : add some unit tests. ### Improvements; - each time a topological change sequence is detected in BarycentricMapperTriangleSetTopology the mapping is initialized; - PointSetTopologyContainer maintains a list of point indices, accessible through the data points; - Topology : Factorize the last method specific to each topological elements in data containers. ### Cleans; - MechanicalObject size and link to topology is now exposed as Data and Link, using the new getActiveMeshTopology() method. Set the link manually and/or set useTopology=""false"" to override. ### Bugfixes; - apply data container updates before mapping updates; - use existing parameter handleTopologyChange in SubsetMapping; - slightly cleanup topology change handling method for triangle mappers; - check of upper topology based on the emptiness of the upper container; - crash in `MeshTopology::init()` for non manifold meshes; - re-enable Propagate of topological changes inbetween triangle creation and removal in `TriangleSetTopologyModifier::addRemoveTriangles(),` as it is required in cases involving chains of topology mapping and topology data containers depending on each other . ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings nor unit test failures.; - [x] does not break existing scenes.; - [x] does not break API compati",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/217
https://github.com/sofa-framework/sofa/pull/217:546,Testability,test,tests,546,"This PR will be further discussed during STC#3. ## issofa_topology. ### New features; - UncoupledConstraintCorrection : add option to disable handling of topological changes for compliance vector; - Container : add accessor to the topology type; - SubsetMapping : add resizeToModel flag in SubsetMapping to enable resizing of the destination MechanicalState to the size of indices; - BaseContext : add new method getActiveMeshTopology to get relevant topology, taking `BaseMaping::sameTopology()` into account; - PointSetTopology : add some unit tests. ### Improvements; - each time a topological change sequence is detected in BarycentricMapperTriangleSetTopology the mapping is initialized; - PointSetTopologyContainer maintains a list of point indices, accessible through the data points; - Topology : Factorize the last method specific to each topological elements in data containers. ### Cleans; - MechanicalObject size and link to topology is now exposed as Data and Link, using the new getActiveMeshTopology() method. Set the link manually and/or set useTopology=""false"" to override. ### Bugfixes; - apply data container updates before mapping updates; - use existing parameter handleTopologyChange in SubsetMapping; - slightly cleanup topology change handling method for triangle mappers; - check of upper topology based on the emptiness of the upper container; - crash in `MeshTopology::init()` for non manifold meshes; - re-enable Propagate of topological changes inbetween triangle creation and removal in `TriangleSetTopologyModifier::addRemoveTriangles(),` as it is required in cases involving chains of topology mapping and topology data containers depending on each other . ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings nor unit test failures.; - [x] does not break existing scenes.; - [x] does not break API compati",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/217
https://github.com/sofa-framework/sofa/pull/217:1914,Testability,test,test,1914,"pological changes for compliance vector; - Container : add accessor to the topology type; - SubsetMapping : add resizeToModel flag in SubsetMapping to enable resizing of the destination MechanicalState to the size of indices; - BaseContext : add new method getActiveMeshTopology to get relevant topology, taking `BaseMaping::sameTopology()` into account; - PointSetTopology : add some unit tests. ### Improvements; - each time a topological change sequence is detected in BarycentricMapperTriangleSetTopology the mapping is initialized; - PointSetTopologyContainer maintains a list of point indices, accessible through the data points; - Topology : Factorize the last method specific to each topological elements in data containers. ### Cleans; - MechanicalObject size and link to topology is now exposed as Data and Link, using the new getActiveMeshTopology() method. Set the link manually and/or set useTopology=""false"" to override. ### Bugfixes; - apply data container updates before mapping updates; - use existing parameter handleTopologyChange in SubsetMapping; - slightly cleanup topology change handling method for triangle mappers; - check of upper topology based on the emptiness of the upper container; - crash in `MeshTopology::init()` for non manifold meshes; - re-enable Propagate of topological changes inbetween triangle creation and removal in `TriangleSetTopologyModifier::addRemoveTriangles(),` as it is required in cases involving chains of topology mapping and topology data containers depending on each other . ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings nor unit test failures.; - [x] does not break existing scenes.; - [x] does not break API compatibility.; - [x] has been reviewed and agreed to be transitional.; - [x] is more than 1 week old. **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/217
https://github.com/sofa-framework/sofa/pull/218:135,Availability,Error,Error,135,"This PR will be further discussed during STC#3. ## issofa_bugfix. ### Cleans; - BaseObject: Output message in serr for required datas. Error word should be reserved for messages that will make the application fail.; - RayTriangleVisitor and SceneLoaderFactory: clean warnings; - ParticlesRepulsionForceField: Add empty implementation of addKToMatrix to get rid of console warnings. ### Bugfixes; - AttachConstraint: fix crash when indices are resized; - BTDLinearSolver: fix constant log + operator new [] vs operator delete mismatch; - CatmullRomSplineMapping: fix applyJ compilation; - ConstantForceField: fix avoid crashes in draw when trying to apply a constantforcefield to a non existing point; - DistanceGrid: fix incorrect use of serr; - GeneralConstraintSolver: fix incorrect parent class in SOFA_CLASS macro; - IndicesFromValues: fix use getTemplateName to avoid problems of links with other data; - EulerImplicitSolver: fix Disable calls to solveConstraint from EulerImplicitSolver by default as it is not needed unless an very specific solver is added and it currently crashes in other cases + wrong argument order in calls to `AdvancedTimer::stepNext()`; - FixedConstraint and PartialFixedConstraint: fix ""fixed FixedConstraint & PartialFixedConstraint for size-varying mechanical objects"".; - MechanicalObject: fix crash in debug with null pointer; - Mass: fix remove error logging in Mass method that are inherited from Forcefield API and that are not relevant for Mass; - MechanicalMatrixVisitor and MechanicalOperations: fix if using a Linear Solver, projective constraints were wrongly applied when a force field is in a child node; - Mesh2PointMechanicalMapping: fix constraints ApplyJT; - Metis(gk_arch.h): fix compilation with Visual Studio 2015; - ParticlesRepulsionForceField and RepulsiveSpringForceField: fix avoid division by 0 on repulsion force fields; - PersistentContactBarycentricMapping: fix init variables in constructor; - RestShapeSpringsForceField: fix Runtime stif",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/218
https://github.com/sofa-framework/sofa/pull/218:1382,Availability,error,error,1382,"ator delete mismatch; - CatmullRomSplineMapping: fix applyJ compilation; - ConstantForceField: fix avoid crashes in draw when trying to apply a constantforcefield to a non existing point; - DistanceGrid: fix incorrect use of serr; - GeneralConstraintSolver: fix incorrect parent class in SOFA_CLASS macro; - IndicesFromValues: fix use getTemplateName to avoid problems of links with other data; - EulerImplicitSolver: fix Disable calls to solveConstraint from EulerImplicitSolver by default as it is not needed unless an very specific solver is added and it currently crashes in other cases + wrong argument order in calls to `AdvancedTimer::stepNext()`; - FixedConstraint and PartialFixedConstraint: fix ""fixed FixedConstraint & PartialFixedConstraint for size-varying mechanical objects"".; - MechanicalObject: fix crash in debug with null pointer; - Mass: fix remove error logging in Mass method that are inherited from Forcefield API and that are not relevant for Mass; - MechanicalMatrixVisitor and MechanicalOperations: fix if using a Linear Solver, projective constraints were wrongly applied when a force field is in a child node; - Mesh2PointMechanicalMapping: fix constraints ApplyJT; - Metis(gk_arch.h): fix compilation with Visual Studio 2015; - ParticlesRepulsionForceField and RepulsiveSpringForceField: fix avoid division by 0 on repulsion force fields; - PersistentContactBarycentricMapping: fix init variables in constructor; - RestShapeSpringsForceField: fix Runtime stiffness tunning was not working + optimisation and cleaning; - SkinningMapping: fix compilation of SofaRigid; - SofaViewer: fix crashes when current camera of pick-handler is NULL; - SurfacePressureForceField: fix volume computation formula; - TaitSurfacePressureForceField: fix contribution to the stiffness matrix for the second component df = P+dN in TaitSurfacePressureForceField; - TopologicalMapping: fix display error messages when a TopologicalMapping failed to be created; - TriangularFEMForceFieldOptim: ",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/218
https://github.com/sofa-framework/sofa/pull/218:2418,Availability,error,error,2418,"FixedConstraint & PartialFixedConstraint for size-varying mechanical objects"".; - MechanicalObject: fix crash in debug with null pointer; - Mass: fix remove error logging in Mass method that are inherited from Forcefield API and that are not relevant for Mass; - MechanicalMatrixVisitor and MechanicalOperations: fix if using a Linear Solver, projective constraints were wrongly applied when a force field is in a child node; - Mesh2PointMechanicalMapping: fix constraints ApplyJT; - Metis(gk_arch.h): fix compilation with Visual Studio 2015; - ParticlesRepulsionForceField and RepulsiveSpringForceField: fix avoid division by 0 on repulsion force fields; - PersistentContactBarycentricMapping: fix init variables in constructor; - RestShapeSpringsForceField: fix Runtime stiffness tunning was not working + optimisation and cleaning; - SkinningMapping: fix compilation of SofaRigid; - SofaViewer: fix crashes when current camera of pick-handler is NULL; - SurfacePressureForceField: fix volume computation formula; - TaitSurfacePressureForceField: fix contribution to the stiffness matrix for the second component df = P+dN in TaitSurfacePressureForceField; - TopologicalMapping: fix display error messages when a TopologicalMapping failed to be created; - TriangularFEMForceFieldOptim: fix principal values ordering with input matrix is diagonal + uninitialized value warning; - VisualModelImpl: fix wrong object (triangles) called when adding quads in handleTopologyChange(); - VoxelGridLoader: `std::unique` result was not used. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings nor unit test failures.; - [x] does not break existing scenes.; - [x] does not break API compatibility.; - [x] has been reviewed and agreed to be transitional.; - [x] is more than 1 week old. **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/218
https://github.com/sofa-framework/sofa/pull/218:2988,Availability,failure,failures,2988,"FixedConstraint & PartialFixedConstraint for size-varying mechanical objects"".; - MechanicalObject: fix crash in debug with null pointer; - Mass: fix remove error logging in Mass method that are inherited from Forcefield API and that are not relevant for Mass; - MechanicalMatrixVisitor and MechanicalOperations: fix if using a Linear Solver, projective constraints were wrongly applied when a force field is in a child node; - Mesh2PointMechanicalMapping: fix constraints ApplyJT; - Metis(gk_arch.h): fix compilation with Visual Studio 2015; - ParticlesRepulsionForceField and RepulsiveSpringForceField: fix avoid division by 0 on repulsion force fields; - PersistentContactBarycentricMapping: fix init variables in constructor; - RestShapeSpringsForceField: fix Runtime stiffness tunning was not working + optimisation and cleaning; - SkinningMapping: fix compilation of SofaRigid; - SofaViewer: fix crashes when current camera of pick-handler is NULL; - SurfacePressureForceField: fix volume computation formula; - TaitSurfacePressureForceField: fix contribution to the stiffness matrix for the second component df = P+dN in TaitSurfacePressureForceField; - TopologicalMapping: fix display error messages when a TopologicalMapping failed to be created; - TriangularFEMForceFieldOptim: fix principal values ordering with input matrix is diagonal + uninitialized value warning; - VisualModelImpl: fix wrong object (triangles) called when adding quads in handleTopologyChange(); - VoxelGridLoader: `std::unique` result was not used. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings nor unit test failures.; - [x] does not break existing scenes.; - [x] does not break API compatibility.; - [x] has been reviewed and agreed to be transitional.; - [x] is more than 1 week old. **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/218
https://github.com/sofa-framework/sofa/pull/218:99,Integrability,message,message,99,"This PR will be further discussed during STC#3. ## issofa_bugfix. ### Cleans; - BaseObject: Output message in serr for required datas. Error word should be reserved for messages that will make the application fail.; - RayTriangleVisitor and SceneLoaderFactory: clean warnings; - ParticlesRepulsionForceField: Add empty implementation of addKToMatrix to get rid of console warnings. ### Bugfixes; - AttachConstraint: fix crash when indices are resized; - BTDLinearSolver: fix constant log + operator new [] vs operator delete mismatch; - CatmullRomSplineMapping: fix applyJ compilation; - ConstantForceField: fix avoid crashes in draw when trying to apply a constantforcefield to a non existing point; - DistanceGrid: fix incorrect use of serr; - GeneralConstraintSolver: fix incorrect parent class in SOFA_CLASS macro; - IndicesFromValues: fix use getTemplateName to avoid problems of links with other data; - EulerImplicitSolver: fix Disable calls to solveConstraint from EulerImplicitSolver by default as it is not needed unless an very specific solver is added and it currently crashes in other cases + wrong argument order in calls to `AdvancedTimer::stepNext()`; - FixedConstraint and PartialFixedConstraint: fix ""fixed FixedConstraint & PartialFixedConstraint for size-varying mechanical objects"".; - MechanicalObject: fix crash in debug with null pointer; - Mass: fix remove error logging in Mass method that are inherited from Forcefield API and that are not relevant for Mass; - MechanicalMatrixVisitor and MechanicalOperations: fix if using a Linear Solver, projective constraints were wrongly applied when a force field is in a child node; - Mesh2PointMechanicalMapping: fix constraints ApplyJT; - Metis(gk_arch.h): fix compilation with Visual Studio 2015; - ParticlesRepulsionForceField and RepulsiveSpringForceField: fix avoid division by 0 on repulsion force fields; - PersistentContactBarycentricMapping: fix init variables in constructor; - RestShapeSpringsForceField: fix Runtime stif",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/218
https://github.com/sofa-framework/sofa/pull/218:169,Integrability,message,messages,169,"This PR will be further discussed during STC#3. ## issofa_bugfix. ### Cleans; - BaseObject: Output message in serr for required datas. Error word should be reserved for messages that will make the application fail.; - RayTriangleVisitor and SceneLoaderFactory: clean warnings; - ParticlesRepulsionForceField: Add empty implementation of addKToMatrix to get rid of console warnings. ### Bugfixes; - AttachConstraint: fix crash when indices are resized; - BTDLinearSolver: fix constant log + operator new [] vs operator delete mismatch; - CatmullRomSplineMapping: fix applyJ compilation; - ConstantForceField: fix avoid crashes in draw when trying to apply a constantforcefield to a non existing point; - DistanceGrid: fix incorrect use of serr; - GeneralConstraintSolver: fix incorrect parent class in SOFA_CLASS macro; - IndicesFromValues: fix use getTemplateName to avoid problems of links with other data; - EulerImplicitSolver: fix Disable calls to solveConstraint from EulerImplicitSolver by default as it is not needed unless an very specific solver is added and it currently crashes in other cases + wrong argument order in calls to `AdvancedTimer::stepNext()`; - FixedConstraint and PartialFixedConstraint: fix ""fixed FixedConstraint & PartialFixedConstraint for size-varying mechanical objects"".; - MechanicalObject: fix crash in debug with null pointer; - Mass: fix remove error logging in Mass method that are inherited from Forcefield API and that are not relevant for Mass; - MechanicalMatrixVisitor and MechanicalOperations: fix if using a Linear Solver, projective constraints were wrongly applied when a force field is in a child node; - Mesh2PointMechanicalMapping: fix constraints ApplyJT; - Metis(gk_arch.h): fix compilation with Visual Studio 2015; - ParticlesRepulsionForceField and RepulsiveSpringForceField: fix avoid division by 0 on repulsion force fields; - PersistentContactBarycentricMapping: fix init variables in constructor; - RestShapeSpringsForceField: fix Runtime stif",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/218
https://github.com/sofa-framework/sofa/pull/218:2424,Integrability,message,messages,2424,"FixedConstraint & PartialFixedConstraint for size-varying mechanical objects"".; - MechanicalObject: fix crash in debug with null pointer; - Mass: fix remove error logging in Mass method that are inherited from Forcefield API and that are not relevant for Mass; - MechanicalMatrixVisitor and MechanicalOperations: fix if using a Linear Solver, projective constraints were wrongly applied when a force field is in a child node; - Mesh2PointMechanicalMapping: fix constraints ApplyJT; - Metis(gk_arch.h): fix compilation with Visual Studio 2015; - ParticlesRepulsionForceField and RepulsiveSpringForceField: fix avoid division by 0 on repulsion force fields; - PersistentContactBarycentricMapping: fix init variables in constructor; - RestShapeSpringsForceField: fix Runtime stiffness tunning was not working + optimisation and cleaning; - SkinningMapping: fix compilation of SofaRigid; - SofaViewer: fix crashes when current camera of pick-handler is NULL; - SurfacePressureForceField: fix volume computation formula; - TaitSurfacePressureForceField: fix contribution to the stiffness matrix for the second component df = P+dN in TaitSurfacePressureForceField; - TopologicalMapping: fix display error messages when a TopologicalMapping failed to be created; - TriangularFEMForceFieldOptim: fix principal values ordering with input matrix is diagonal + uninitialized value warning; - VisualModelImpl: fix wrong object (triangles) called when adding quads in handleTopologyChange(); - VoxelGridLoader: `std::unique` result was not used. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings nor unit test failures.; - [x] does not break existing scenes.; - [x] does not break API compatibility.; - [x] has been reviewed and agreed to be transitional.; - [x] is more than 1 week old. **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/218
https://github.com/sofa-framework/sofa/pull/218:2857,Integrability,message,message,2857,"FixedConstraint & PartialFixedConstraint for size-varying mechanical objects"".; - MechanicalObject: fix crash in debug with null pointer; - Mass: fix remove error logging in Mass method that are inherited from Forcefield API and that are not relevant for Mass; - MechanicalMatrixVisitor and MechanicalOperations: fix if using a Linear Solver, projective constraints were wrongly applied when a force field is in a child node; - Mesh2PointMechanicalMapping: fix constraints ApplyJT; - Metis(gk_arch.h): fix compilation with Visual Studio 2015; - ParticlesRepulsionForceField and RepulsiveSpringForceField: fix avoid division by 0 on repulsion force fields; - PersistentContactBarycentricMapping: fix init variables in constructor; - RestShapeSpringsForceField: fix Runtime stiffness tunning was not working + optimisation and cleaning; - SkinningMapping: fix compilation of SofaRigid; - SofaViewer: fix crashes when current camera of pick-handler is NULL; - SurfacePressureForceField: fix volume computation formula; - TaitSurfacePressureForceField: fix contribution to the stiffness matrix for the second component df = P+dN in TaitSurfacePressureForceField; - TopologicalMapping: fix display error messages when a TopologicalMapping failed to be created; - TriangularFEMForceFieldOptim: fix principal values ordering with input matrix is diagonal + uninitialized value warning; - VisualModelImpl: fix wrong object (triangles) called when adding quads in handleTopologyChange(); - VoxelGridLoader: `std::unique` result was not used. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings nor unit test failures.; - [x] does not break existing scenes.; - [x] does not break API compatibility.; - [x] has been reviewed and agreed to be transitional.; - [x] is more than 1 week old. **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/218
https://github.com/sofa-framework/sofa/pull/218:1420,Modifiability,inherit,inherited,1420,"ator delete mismatch; - CatmullRomSplineMapping: fix applyJ compilation; - ConstantForceField: fix avoid crashes in draw when trying to apply a constantforcefield to a non existing point; - DistanceGrid: fix incorrect use of serr; - GeneralConstraintSolver: fix incorrect parent class in SOFA_CLASS macro; - IndicesFromValues: fix use getTemplateName to avoid problems of links with other data; - EulerImplicitSolver: fix Disable calls to solveConstraint from EulerImplicitSolver by default as it is not needed unless an very specific solver is added and it currently crashes in other cases + wrong argument order in calls to `AdvancedTimer::stepNext()`; - FixedConstraint and PartialFixedConstraint: fix ""fixed FixedConstraint & PartialFixedConstraint for size-varying mechanical objects"".; - MechanicalObject: fix crash in debug with null pointer; - Mass: fix remove error logging in Mass method that are inherited from Forcefield API and that are not relevant for Mass; - MechanicalMatrixVisitor and MechanicalOperations: fix if using a Linear Solver, projective constraints were wrongly applied when a force field is in a child node; - Mesh2PointMechanicalMapping: fix constraints ApplyJT; - Metis(gk_arch.h): fix compilation with Visual Studio 2015; - ParticlesRepulsionForceField and RepulsiveSpringForceField: fix avoid division by 0 on repulsion force fields; - PersistentContactBarycentricMapping: fix init variables in constructor; - RestShapeSpringsForceField: fix Runtime stiffness tunning was not working + optimisation and cleaning; - SkinningMapping: fix compilation of SofaRigid; - SofaViewer: fix crashes when current camera of pick-handler is NULL; - SurfacePressureForceField: fix volume computation formula; - TaitSurfacePressureForceField: fix contribution to the stiffness matrix for the second component df = P+dN in TaitSurfacePressureForceField; - TopologicalMapping: fix display error messages when a TopologicalMapping failed to be created; - TriangularFEMForceFieldOptim: ",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/218
https://github.com/sofa-framework/sofa/pull/218:1929,Modifiability,variab,variables,1929,"FixedConstraint & PartialFixedConstraint for size-varying mechanical objects"".; - MechanicalObject: fix crash in debug with null pointer; - Mass: fix remove error logging in Mass method that are inherited from Forcefield API and that are not relevant for Mass; - MechanicalMatrixVisitor and MechanicalOperations: fix if using a Linear Solver, projective constraints were wrongly applied when a force field is in a child node; - Mesh2PointMechanicalMapping: fix constraints ApplyJT; - Metis(gk_arch.h): fix compilation with Visual Studio 2015; - ParticlesRepulsionForceField and RepulsiveSpringForceField: fix avoid division by 0 on repulsion force fields; - PersistentContactBarycentricMapping: fix init variables in constructor; - RestShapeSpringsForceField: fix Runtime stiffness tunning was not working + optimisation and cleaning; - SkinningMapping: fix compilation of SofaRigid; - SofaViewer: fix crashes when current camera of pick-handler is NULL; - SurfacePressureForceField: fix volume computation formula; - TaitSurfacePressureForceField: fix contribution to the stiffness matrix for the second component df = P+dN in TaitSurfacePressureForceField; - TopologicalMapping: fix display error messages when a TopologicalMapping failed to be created; - TriangularFEMForceFieldOptim: fix principal values ordering with input matrix is diagonal + uninitialized value warning; - VisualModelImpl: fix wrong object (triangles) called when adding quads in handleTopologyChange(); - VoxelGridLoader: `std::unique` result was not used. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings nor unit test failures.; - [x] does not break existing scenes.; - [x] does not break API compatibility.; - [x] has been reviewed and agreed to be transitional.; - [x] is more than 1 week old. **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/218
https://github.com/sofa-framework/sofa/pull/218:612,Safety,avoid,avoid,612,"This PR will be further discussed during STC#3. ## issofa_bugfix. ### Cleans; - BaseObject: Output message in serr for required datas. Error word should be reserved for messages that will make the application fail.; - RayTriangleVisitor and SceneLoaderFactory: clean warnings; - ParticlesRepulsionForceField: Add empty implementation of addKToMatrix to get rid of console warnings. ### Bugfixes; - AttachConstraint: fix crash when indices are resized; - BTDLinearSolver: fix constant log + operator new [] vs operator delete mismatch; - CatmullRomSplineMapping: fix applyJ compilation; - ConstantForceField: fix avoid crashes in draw when trying to apply a constantforcefield to a non existing point; - DistanceGrid: fix incorrect use of serr; - GeneralConstraintSolver: fix incorrect parent class in SOFA_CLASS macro; - IndicesFromValues: fix use getTemplateName to avoid problems of links with other data; - EulerImplicitSolver: fix Disable calls to solveConstraint from EulerImplicitSolver by default as it is not needed unless an very specific solver is added and it currently crashes in other cases + wrong argument order in calls to `AdvancedTimer::stepNext()`; - FixedConstraint and PartialFixedConstraint: fix ""fixed FixedConstraint & PartialFixedConstraint for size-varying mechanical objects"".; - MechanicalObject: fix crash in debug with null pointer; - Mass: fix remove error logging in Mass method that are inherited from Forcefield API and that are not relevant for Mass; - MechanicalMatrixVisitor and MechanicalOperations: fix if using a Linear Solver, projective constraints were wrongly applied when a force field is in a child node; - Mesh2PointMechanicalMapping: fix constraints ApplyJT; - Metis(gk_arch.h): fix compilation with Visual Studio 2015; - ParticlesRepulsionForceField and RepulsiveSpringForceField: fix avoid division by 0 on repulsion force fields; - PersistentContactBarycentricMapping: fix init variables in constructor; - RestShapeSpringsForceField: fix Runtime stif",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/218
https://github.com/sofa-framework/sofa/pull/218:867,Safety,avoid,avoid,867,"This PR will be further discussed during STC#3. ## issofa_bugfix. ### Cleans; - BaseObject: Output message in serr for required datas. Error word should be reserved for messages that will make the application fail.; - RayTriangleVisitor and SceneLoaderFactory: clean warnings; - ParticlesRepulsionForceField: Add empty implementation of addKToMatrix to get rid of console warnings. ### Bugfixes; - AttachConstraint: fix crash when indices are resized; - BTDLinearSolver: fix constant log + operator new [] vs operator delete mismatch; - CatmullRomSplineMapping: fix applyJ compilation; - ConstantForceField: fix avoid crashes in draw when trying to apply a constantforcefield to a non existing point; - DistanceGrid: fix incorrect use of serr; - GeneralConstraintSolver: fix incorrect parent class in SOFA_CLASS macro; - IndicesFromValues: fix use getTemplateName to avoid problems of links with other data; - EulerImplicitSolver: fix Disable calls to solveConstraint from EulerImplicitSolver by default as it is not needed unless an very specific solver is added and it currently crashes in other cases + wrong argument order in calls to `AdvancedTimer::stepNext()`; - FixedConstraint and PartialFixedConstraint: fix ""fixed FixedConstraint & PartialFixedConstraint for size-varying mechanical objects"".; - MechanicalObject: fix crash in debug with null pointer; - Mass: fix remove error logging in Mass method that are inherited from Forcefield API and that are not relevant for Mass; - MechanicalMatrixVisitor and MechanicalOperations: fix if using a Linear Solver, projective constraints were wrongly applied when a force field is in a child node; - Mesh2PointMechanicalMapping: fix constraints ApplyJT; - Metis(gk_arch.h): fix compilation with Visual Studio 2015; - ParticlesRepulsionForceField and RepulsiveSpringForceField: fix avoid division by 0 on repulsion force fields; - PersistentContactBarycentricMapping: fix init variables in constructor; - RestShapeSpringsForceField: fix Runtime stif",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/218
https://github.com/sofa-framework/sofa/pull/218:1834,Safety,avoid,avoid,1834,"FixedConstraint & PartialFixedConstraint for size-varying mechanical objects"".; - MechanicalObject: fix crash in debug with null pointer; - Mass: fix remove error logging in Mass method that are inherited from Forcefield API and that are not relevant for Mass; - MechanicalMatrixVisitor and MechanicalOperations: fix if using a Linear Solver, projective constraints were wrongly applied when a force field is in a child node; - Mesh2PointMechanicalMapping: fix constraints ApplyJT; - Metis(gk_arch.h): fix compilation with Visual Studio 2015; - ParticlesRepulsionForceField and RepulsiveSpringForceField: fix avoid division by 0 on repulsion force fields; - PersistentContactBarycentricMapping: fix init variables in constructor; - RestShapeSpringsForceField: fix Runtime stiffness tunning was not working + optimisation and cleaning; - SkinningMapping: fix compilation of SofaRigid; - SofaViewer: fix crashes when current camera of pick-handler is NULL; - SurfacePressureForceField: fix volume computation formula; - TaitSurfacePressureForceField: fix contribution to the stiffness matrix for the second component df = P+dN in TaitSurfacePressureForceField; - TopologicalMapping: fix display error messages when a TopologicalMapping failed to be created; - TriangularFEMForceFieldOptim: fix principal values ordering with input matrix is diagonal + uninitialized value warning; - VisualModelImpl: fix wrong object (triangles) called when adding quads in handleTopologyChange(); - VoxelGridLoader: `std::unique` result was not used. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings nor unit test failures.; - [x] does not break existing scenes.; - [x] does not break API compatibility.; - [x] has been reviewed and agreed to be transitional.; - [x] is more than 1 week old. **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/218
https://github.com/sofa-framework/sofa/pull/218:484,Testability,log,log,484,"This PR will be further discussed during STC#3. ## issofa_bugfix. ### Cleans; - BaseObject: Output message in serr for required datas. Error word should be reserved for messages that will make the application fail.; - RayTriangleVisitor and SceneLoaderFactory: clean warnings; - ParticlesRepulsionForceField: Add empty implementation of addKToMatrix to get rid of console warnings. ### Bugfixes; - AttachConstraint: fix crash when indices are resized; - BTDLinearSolver: fix constant log + operator new [] vs operator delete mismatch; - CatmullRomSplineMapping: fix applyJ compilation; - ConstantForceField: fix avoid crashes in draw when trying to apply a constantforcefield to a non existing point; - DistanceGrid: fix incorrect use of serr; - GeneralConstraintSolver: fix incorrect parent class in SOFA_CLASS macro; - IndicesFromValues: fix use getTemplateName to avoid problems of links with other data; - EulerImplicitSolver: fix Disable calls to solveConstraint from EulerImplicitSolver by default as it is not needed unless an very specific solver is added and it currently crashes in other cases + wrong argument order in calls to `AdvancedTimer::stepNext()`; - FixedConstraint and PartialFixedConstraint: fix ""fixed FixedConstraint & PartialFixedConstraint for size-varying mechanical objects"".; - MechanicalObject: fix crash in debug with null pointer; - Mass: fix remove error logging in Mass method that are inherited from Forcefield API and that are not relevant for Mass; - MechanicalMatrixVisitor and MechanicalOperations: fix if using a Linear Solver, projective constraints were wrongly applied when a force field is in a child node; - Mesh2PointMechanicalMapping: fix constraints ApplyJT; - Metis(gk_arch.h): fix compilation with Visual Studio 2015; - ParticlesRepulsionForceField and RepulsiveSpringForceField: fix avoid division by 0 on repulsion force fields; - PersistentContactBarycentricMapping: fix init variables in constructor; - RestShapeSpringsForceField: fix Runtime stif",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/218
https://github.com/sofa-framework/sofa/pull/218:1388,Testability,log,logging,1388,"ator delete mismatch; - CatmullRomSplineMapping: fix applyJ compilation; - ConstantForceField: fix avoid crashes in draw when trying to apply a constantforcefield to a non existing point; - DistanceGrid: fix incorrect use of serr; - GeneralConstraintSolver: fix incorrect parent class in SOFA_CLASS macro; - IndicesFromValues: fix use getTemplateName to avoid problems of links with other data; - EulerImplicitSolver: fix Disable calls to solveConstraint from EulerImplicitSolver by default as it is not needed unless an very specific solver is added and it currently crashes in other cases + wrong argument order in calls to `AdvancedTimer::stepNext()`; - FixedConstraint and PartialFixedConstraint: fix ""fixed FixedConstraint & PartialFixedConstraint for size-varying mechanical objects"".; - MechanicalObject: fix crash in debug with null pointer; - Mass: fix remove error logging in Mass method that are inherited from Forcefield API and that are not relevant for Mass; - MechanicalMatrixVisitor and MechanicalOperations: fix if using a Linear Solver, projective constraints were wrongly applied when a force field is in a child node; - Mesh2PointMechanicalMapping: fix constraints ApplyJT; - Metis(gk_arch.h): fix compilation with Visual Studio 2015; - ParticlesRepulsionForceField and RepulsiveSpringForceField: fix avoid division by 0 on repulsion force fields; - PersistentContactBarycentricMapping: fix init variables in constructor; - RestShapeSpringsForceField: fix Runtime stiffness tunning was not working + optimisation and cleaning; - SkinningMapping: fix compilation of SofaRigid; - SofaViewer: fix crashes when current camera of pick-handler is NULL; - SurfacePressureForceField: fix volume computation formula; - TaitSurfacePressureForceField: fix contribution to the stiffness matrix for the second component df = P+dN in TaitSurfacePressureForceField; - TopologicalMapping: fix display error messages when a TopologicalMapping failed to be created; - TriangularFEMForceFieldOptim: ",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/218
https://github.com/sofa-framework/sofa/pull/218:2983,Testability,test,test,2983,"FixedConstraint & PartialFixedConstraint for size-varying mechanical objects"".; - MechanicalObject: fix crash in debug with null pointer; - Mass: fix remove error logging in Mass method that are inherited from Forcefield API and that are not relevant for Mass; - MechanicalMatrixVisitor and MechanicalOperations: fix if using a Linear Solver, projective constraints were wrongly applied when a force field is in a child node; - Mesh2PointMechanicalMapping: fix constraints ApplyJT; - Metis(gk_arch.h): fix compilation with Visual Studio 2015; - ParticlesRepulsionForceField and RepulsiveSpringForceField: fix avoid division by 0 on repulsion force fields; - PersistentContactBarycentricMapping: fix init variables in constructor; - RestShapeSpringsForceField: fix Runtime stiffness tunning was not working + optimisation and cleaning; - SkinningMapping: fix compilation of SofaRigid; - SofaViewer: fix crashes when current camera of pick-handler is NULL; - SurfacePressureForceField: fix volume computation formula; - TaitSurfacePressureForceField: fix contribution to the stiffness matrix for the second component df = P+dN in TaitSurfacePressureForceField; - TopologicalMapping: fix display error messages when a TopologicalMapping failed to be created; - TriangularFEMForceFieldOptim: fix principal values ordering with input matrix is diagonal + uninitialized value warning; - VisualModelImpl: fix wrong object (triangles) called when adding quads in handleTopologyChange(); - VoxelGridLoader: `std::unique` result was not used. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings nor unit test failures.; - [x] does not break existing scenes.; - [x] does not break API compatibility.; - [x] has been reviewed and agreed to be transitional.; - [x] is more than 1 week old. **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/218
https://github.com/sofa-framework/sofa/pull/219:606,Availability,failure,failures,606,This pull-request adds the following features ; - add numerical integration on tetrahedra and triangles; - add a mechanical tag on a PointSetGeometry object in order to find its associated MechanicalObject; - add the orthogonal of a 2d vector; - add support of high order elements in VTK and Gmesh mesh loaders. It also fixes some bugs ; -Quand2Triangle Topologivcal mapping. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings nor unit test failures.; - [x] does not break existing scenes.; - [x] does not break API compatibility.; - [x] has been reviewed and agreed to be transitional.; - [x] is more than 1 week old. **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/219
https://github.com/sofa-framework/sofa/pull/219:64,Deployability,integrat,integration,64,This pull-request adds the following features ; - add numerical integration on tetrahedra and triangles; - add a mechanical tag on a PointSetGeometry object in order to find its associated MechanicalObject; - add the orthogonal of a 2d vector; - add support of high order elements in VTK and Gmesh mesh loaders. It also fixes some bugs ; -Quand2Triangle Topologivcal mapping. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings nor unit test failures.; - [x] does not break existing scenes.; - [x] does not break API compatibility.; - [x] has been reviewed and agreed to be transitional.; - [x] is more than 1 week old. **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/219
https://github.com/sofa-framework/sofa/pull/219:64,Integrability,integrat,integration,64,This pull-request adds the following features ; - add numerical integration on tetrahedra and triangles; - add a mechanical tag on a PointSetGeometry object in order to find its associated MechanicalObject; - add the orthogonal of a 2d vector; - add support of high order elements in VTK and Gmesh mesh loaders. It also fixes some bugs ; -Quand2Triangle Topologivcal mapping. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings nor unit test failures.; - [x] does not break existing scenes.; - [x] does not break API compatibility.; - [x] has been reviewed and agreed to be transitional.; - [x] is more than 1 week old. **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/219
https://github.com/sofa-framework/sofa/pull/219:475,Integrability,message,message,475,This pull-request adds the following features ; - add numerical integration on tetrahedra and triangles; - add a mechanical tag on a PointSetGeometry object in order to find its associated MechanicalObject; - add the orthogonal of a 2d vector; - add support of high order elements in VTK and Gmesh mesh loaders. It also fixes some bugs ; -Quand2Triangle Topologivcal mapping. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings nor unit test failures.; - [x] does not break existing scenes.; - [x] does not break API compatibility.; - [x] has been reviewed and agreed to be transitional.; - [x] is more than 1 week old. **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/219
https://github.com/sofa-framework/sofa/pull/219:303,Performance,load,loaders,303,This pull-request adds the following features ; - add numerical integration on tetrahedra and triangles; - add a mechanical tag on a PointSetGeometry object in order to find its associated MechanicalObject; - add the orthogonal of a 2d vector; - add support of high order elements in VTK and Gmesh mesh loaders. It also fixes some bugs ; -Quand2Triangle Topologivcal mapping. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings nor unit test failures.; - [x] does not break existing scenes.; - [x] does not break API compatibility.; - [x] has been reviewed and agreed to be transitional.; - [x] is more than 1 week old. **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/219
https://github.com/sofa-framework/sofa/pull/219:601,Testability,test,test,601,This pull-request adds the following features ; - add numerical integration on tetrahedra and triangles; - add a mechanical tag on a PointSetGeometry object in order to find its associated MechanicalObject; - add the orthogonal of a 2d vector; - add support of high order elements in VTK and Gmesh mesh loaders. It also fixes some bugs ; -Quand2Triangle Topologivcal mapping. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings nor unit test failures.; - [x] does not break existing scenes.; - [x] does not break API compatibility.; - [x] has been reviewed and agreed to be transitional.; - [x] is more than 1 week old. **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/219
https://github.com/sofa-framework/sofa/pull/220:450,Availability,failure,failures,450,Removing all highorder classes from the base topological classes of SOFA.; Created a new open repository for those classes at sofa-framework/plugin.HighOrder 👍 ( https://github.com/sofa-framework/plugin.HighOrder.git ). ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings nor unit test failures.; - [ ] does not break existing scenes.; - [ ] does not break API compatibility.; - [ ] has been reviewed and agreed to be transitional.; - [ ] is more than 1 week old.; - [ ] updated Flexible plugin to use the new plugin. **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/220
https://github.com/sofa-framework/sofa/pull/220:635,Deployability,update,updated,635,Removing all highorder classes from the base topological classes of SOFA.; Created a new open repository for those classes at sofa-framework/plugin.HighOrder 👍 ( https://github.com/sofa-framework/plugin.HighOrder.git ). ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings nor unit test failures.; - [ ] does not break existing scenes.; - [ ] does not break API compatibility.; - [ ] has been reviewed and agreed to be transitional.; - [ ] is more than 1 week old.; - [ ] updated Flexible plugin to use the new plugin. **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/220
https://github.com/sofa-framework/sofa/pull/220:319,Integrability,message,message,319,Removing all highorder classes from the base topological classes of SOFA.; Created a new open repository for those classes at sofa-framework/plugin.HighOrder 👍 ( https://github.com/sofa-framework/plugin.HighOrder.git ). ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings nor unit test failures.; - [ ] does not break existing scenes.; - [ ] does not break API compatibility.; - [ ] has been reviewed and agreed to be transitional.; - [ ] is more than 1 week old.; - [ ] updated Flexible plugin to use the new plugin. **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/220
https://github.com/sofa-framework/sofa/pull/220:141,Modifiability,plugin,plugin,141,Removing all highorder classes from the base topological classes of SOFA.; Created a new open repository for those classes at sofa-framework/plugin.HighOrder 👍 ( https://github.com/sofa-framework/plugin.HighOrder.git ). ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings nor unit test failures.; - [ ] does not break existing scenes.; - [ ] does not break API compatibility.; - [ ] has been reviewed and agreed to be transitional.; - [ ] is more than 1 week old.; - [ ] updated Flexible plugin to use the new plugin. **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/220
https://github.com/sofa-framework/sofa/pull/220:196,Modifiability,plugin,plugin,196,Removing all highorder classes from the base topological classes of SOFA.; Created a new open repository for those classes at sofa-framework/plugin.HighOrder 👍 ( https://github.com/sofa-framework/plugin.HighOrder.git ). ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings nor unit test failures.; - [ ] does not break existing scenes.; - [ ] does not break API compatibility.; - [ ] has been reviewed and agreed to be transitional.; - [ ] is more than 1 week old.; - [ ] updated Flexible plugin to use the new plugin. **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/220
https://github.com/sofa-framework/sofa/pull/220:643,Modifiability,Flexible,Flexible,643,Removing all highorder classes from the base topological classes of SOFA.; Created a new open repository for those classes at sofa-framework/plugin.HighOrder 👍 ( https://github.com/sofa-framework/plugin.HighOrder.git ). ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings nor unit test failures.; - [ ] does not break existing scenes.; - [ ] does not break API compatibility.; - [ ] has been reviewed and agreed to be transitional.; - [ ] is more than 1 week old.; - [ ] updated Flexible plugin to use the new plugin. **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/220
https://github.com/sofa-framework/sofa/pull/220:652,Modifiability,plugin,plugin,652,Removing all highorder classes from the base topological classes of SOFA.; Created a new open repository for those classes at sofa-framework/plugin.HighOrder 👍 ( https://github.com/sofa-framework/plugin.HighOrder.git ). ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings nor unit test failures.; - [ ] does not break existing scenes.; - [ ] does not break API compatibility.; - [ ] has been reviewed and agreed to be transitional.; - [ ] is more than 1 week old.; - [ ] updated Flexible plugin to use the new plugin. **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/220
https://github.com/sofa-framework/sofa/pull/220:674,Modifiability,plugin,plugin,674,Removing all highorder classes from the base topological classes of SOFA.; Created a new open repository for those classes at sofa-framework/plugin.HighOrder 👍 ( https://github.com/sofa-framework/plugin.HighOrder.git ). ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings nor unit test failures.; - [ ] does not break existing scenes.; - [ ] does not break API compatibility.; - [ ] has been reviewed and agreed to be transitional.; - [ ] is more than 1 week old.; - [ ] updated Flexible plugin to use the new plugin. **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/220
https://github.com/sofa-framework/sofa/pull/220:445,Testability,test,test,445,Removing all highorder classes from the base topological classes of SOFA.; Created a new open repository for those classes at sofa-framework/plugin.HighOrder 👍 ( https://github.com/sofa-framework/plugin.HighOrder.git ). ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings nor unit test failures.; - [ ] does not break existing scenes.; - [ ] does not break API compatibility.; - [ ] has been reviewed and agreed to be transitional.; - [ ] is more than 1 week old.; - [ ] updated Flexible plugin to use the new plugin. **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/220
https://github.com/sofa-framework/sofa/issues/221:130,Testability,test,test,130,"We regularly have build slaves not responding on CentOS, Windows and MacOS. After investigations, this is always caused by zombie test processes (Compliant_test) that disturb the daily cleaning job, and therefore the whole build machine. ; The only way to fix it for a while is to kill all proccesses on the corresponding slave, wipe the work folder and restart the slave.",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/221
https://github.com/sofa-framework/sofa/pull/222:717,Availability,failure,failures,717,This pull request removes classes implementing High Order simplicial elements from SOFA.; Those classes have been moved to plugin sofaFramework/ plugin.HighOrder; Updates include . - removing topological classes for High order triangulation and tetrahedral meshes; - removing tests associated with topological classes; - removing topological and mechanical mapping between regular and highorder meshes; - update of MeshMassMatrix by removing code to compute mass of high order elements. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings nor unit test failures.; - [x] does not break existing scenes.; - [x] does not break API compatibility.; - [x] has been reviewed and agreed to be transitional.; - [x] is more than 1 week old. **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/222
https://github.com/sofa-framework/sofa/pull/222:163,Deployability,Update,Updates,163,This pull request removes classes implementing High Order simplicial elements from SOFA.; Those classes have been moved to plugin sofaFramework/ plugin.HighOrder; Updates include . - removing topological classes for High order triangulation and tetrahedral meshes; - removing tests associated with topological classes; - removing topological and mechanical mapping between regular and highorder meshes; - update of MeshMassMatrix by removing code to compute mass of high order elements. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings nor unit test failures.; - [x] does not break existing scenes.; - [x] does not break API compatibility.; - [x] has been reviewed and agreed to be transitional.; - [x] is more than 1 week old. **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/222
https://github.com/sofa-framework/sofa/pull/222:405,Deployability,update,update,405,This pull request removes classes implementing High Order simplicial elements from SOFA.; Those classes have been moved to plugin sofaFramework/ plugin.HighOrder; Updates include . - removing topological classes for High order triangulation and tetrahedral meshes; - removing tests associated with topological classes; - removing topological and mechanical mapping between regular and highorder meshes; - update of MeshMassMatrix by removing code to compute mass of high order elements. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings nor unit test failures.; - [x] does not break existing scenes.; - [x] does not break API compatibility.; - [x] has been reviewed and agreed to be transitional.; - [x] is more than 1 week old. **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/222
https://github.com/sofa-framework/sofa/pull/222:586,Integrability,message,message,586,This pull request removes classes implementing High Order simplicial elements from SOFA.; Those classes have been moved to plugin sofaFramework/ plugin.HighOrder; Updates include . - removing topological classes for High order triangulation and tetrahedral meshes; - removing tests associated with topological classes; - removing topological and mechanical mapping between regular and highorder meshes; - update of MeshMassMatrix by removing code to compute mass of high order elements. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings nor unit test failures.; - [x] does not break existing scenes.; - [x] does not break API compatibility.; - [x] has been reviewed and agreed to be transitional.; - [x] is more than 1 week old. **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/222
https://github.com/sofa-framework/sofa/pull/222:123,Modifiability,plugin,plugin,123,This pull request removes classes implementing High Order simplicial elements from SOFA.; Those classes have been moved to plugin sofaFramework/ plugin.HighOrder; Updates include . - removing topological classes for High order triangulation and tetrahedral meshes; - removing tests associated with topological classes; - removing topological and mechanical mapping between regular and highorder meshes; - update of MeshMassMatrix by removing code to compute mass of high order elements. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings nor unit test failures.; - [x] does not break existing scenes.; - [x] does not break API compatibility.; - [x] has been reviewed and agreed to be transitional.; - [x] is more than 1 week old. **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/222
https://github.com/sofa-framework/sofa/pull/222:145,Modifiability,plugin,plugin,145,This pull request removes classes implementing High Order simplicial elements from SOFA.; Those classes have been moved to plugin sofaFramework/ plugin.HighOrder; Updates include . - removing topological classes for High order triangulation and tetrahedral meshes; - removing tests associated with topological classes; - removing topological and mechanical mapping between regular and highorder meshes; - update of MeshMassMatrix by removing code to compute mass of high order elements. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings nor unit test failures.; - [x] does not break existing scenes.; - [x] does not break API compatibility.; - [x] has been reviewed and agreed to be transitional.; - [x] is more than 1 week old. **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/222
https://github.com/sofa-framework/sofa/pull/222:276,Testability,test,tests,276,This pull request removes classes implementing High Order simplicial elements from SOFA.; Those classes have been moved to plugin sofaFramework/ plugin.HighOrder; Updates include . - removing topological classes for High order triangulation and tetrahedral meshes; - removing tests associated with topological classes; - removing topological and mechanical mapping between regular and highorder meshes; - update of MeshMassMatrix by removing code to compute mass of high order elements. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings nor unit test failures.; - [x] does not break existing scenes.; - [x] does not break API compatibility.; - [x] has been reviewed and agreed to be transitional.; - [x] is more than 1 week old. **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/222
https://github.com/sofa-framework/sofa/pull/222:712,Testability,test,test,712,This pull request removes classes implementing High Order simplicial elements from SOFA.; Those classes have been moved to plugin sofaFramework/ plugin.HighOrder; Updates include . - removing topological classes for High order triangulation and tetrahedral meshes; - removing tests associated with topological classes; - removing topological and mechanical mapping between regular and highorder meshes; - update of MeshMassMatrix by removing code to compute mass of high order elements. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings nor unit test failures.; - [x] does not break existing scenes.; - [x] does not break API compatibility.; - [x] has been reviewed and agreed to be transitional.; - [x] is more than 1 week old. **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/222
https://github.com/sofa-framework/sofa/pull/222:58,Usability,simpl,simplicial,58,This pull request removes classes implementing High Order simplicial elements from SOFA.; Those classes have been moved to plugin sofaFramework/ plugin.HighOrder; Updates include . - removing topological classes for High order triangulation and tetrahedral meshes; - removing tests associated with topological classes; - removing topological and mechanical mapping between regular and highorder meshes; - update of MeshMassMatrix by removing code to compute mass of high order elements. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings nor unit test failures.; - [x] does not break existing scenes.; - [x] does not break API compatibility.; - [x] has been reviewed and agreed to be transitional.; - [x] is more than 1 week old. **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/222
https://github.com/sofa-framework/sofa/issues/223:568,Security,validat,validate,568,In PR https://github.com/sofa-framework/sofa/pull/217. ```cpp; #ifdef BARYCENTRIC_MAPPER_TOPOCHANGE_REINIT; // handle topology changes in the From topology; virtual void handleTopologyChange(core::topology::Topology* t);; #endif // BARYCENTRIC_MAPPER_TOPOCHANGE_REINIT; ```; Is coding to change to runtime condition instead of #IFDEF. . @JeremieA pointed that this rise consistency issues in how the topology changes are handled into the mapping. . Maybe we should keep that in mind and in some future do something (eg making a test that should be done all mapping to validate a consistent and clear behavior).,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/223
https://github.com/sofa-framework/sofa/issues/223:528,Testability,test,test,528,In PR https://github.com/sofa-framework/sofa/pull/217. ```cpp; #ifdef BARYCENTRIC_MAPPER_TOPOCHANGE_REINIT; // handle topology changes in the From topology; virtual void handleTopologyChange(core::topology::Topology* t);; #endif // BARYCENTRIC_MAPPER_TOPOCHANGE_REINIT; ```; Is coding to change to runtime condition instead of #IFDEF. . @JeremieA pointed that this rise consistency issues in how the topology changes are handled into the mapping. . Maybe we should keep that in mind and in some future do something (eg making a test that should be done all mapping to validate a consistent and clear behavior).,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/223
https://github.com/sofa-framework/sofa/issues/223:594,Usability,clear,clear,594,In PR https://github.com/sofa-framework/sofa/pull/217. ```cpp; #ifdef BARYCENTRIC_MAPPER_TOPOCHANGE_REINIT; // handle topology changes in the From topology; virtual void handleTopologyChange(core::topology::Topology* t);; #endif // BARYCENTRIC_MAPPER_TOPOCHANGE_REINIT; ```; Is coding to change to runtime condition instead of #IFDEF. . @JeremieA pointed that this rise consistency issues in how the topology changes are handled into the mapping. . Maybe we should keep that in mind and in some future do something (eg making a test that should be done all mapping to validate a consistent and clear behavior).,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/223
https://github.com/sofa-framework/sofa/issues/224:51,Performance,load,loading,51,A clean version implementing a correct incremental loading and a correct Newton loop.,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/224
https://github.com/sofa-framework/sofa/issues/228:85,Deployability,upgrade,upgraded,85,"create a quality checklist, a list of criterias where selected NG components will be upgraded",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/228
https://github.com/sofa-framework/sofa/pull/229:301,Availability,failure,failures,301,Warnings were due to unused function and overwriting function (clang). ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings nor unit test failures.; - [x] does not break existing scenes.; - [x] does not break API compatibility.; - [x] has been reviewed and agreed to be transitional.; - [x] is more than 1 week old. **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/229
https://github.com/sofa-framework/sofa/pull/229:170,Integrability,message,message,170,Warnings were due to unused function and overwriting function (clang). ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings nor unit test failures.; - [x] does not break existing scenes.; - [x] does not break API compatibility.; - [x] has been reviewed and agreed to be transitional.; - [x] is more than 1 week old. **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/229
https://github.com/sofa-framework/sofa/pull/229:296,Testability,test,test,296,Warnings were due to unused function and overwriting function (clang). ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings nor unit test failures.; - [x] does not break existing scenes.; - [x] does not break API compatibility.; - [x] has been reviewed and agreed to be transitional.; - [x] is more than 1 week old. **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/229
https://github.com/sofa-framework/sofa/pull/230:658,Availability,failure,failures,658,"This commit sets the d_totalMass as read and write in DiagonalMass.; Before set as read-only, without reason.; The commit also updates the coding rules in the Data. Tests are added to check for both hexa and tetra topologies,; the coherency between totalMass and massDensity. It also checks that; if both totalMass and massDensity are defined, totalMass predomines. WARNING: the test showed issue of casting in the EXPECT_EQ(). ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings nor unit test failures.; - [x] breaks existing scenes.; - [x] breaks API compatibility.; - [x] has been reviewed.; - [x] is more than 1 week old. **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/230
https://github.com/sofa-framework/sofa/pull/230:127,Deployability,update,updates,127,"This commit sets the d_totalMass as read and write in DiagonalMass.; Before set as read-only, without reason.; The commit also updates the coding rules in the Data. Tests are added to check for both hexa and tetra topologies,; the coherency between totalMass and massDensity. It also checks that; if both totalMass and massDensity are defined, totalMass predomines. WARNING: the test showed issue of casting in the EXPECT_EQ(). ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings nor unit test failures.; - [x] breaks existing scenes.; - [x] breaks API compatibility.; - [x] has been reviewed.; - [x] is more than 1 week old. **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/230
https://github.com/sofa-framework/sofa/pull/230:527,Integrability,message,message,527,"This commit sets the d_totalMass as read and write in DiagonalMass.; Before set as read-only, without reason.; The commit also updates the coding rules in the Data. Tests are added to check for both hexa and tetra topologies,; the coherency between totalMass and massDensity. It also checks that; if both totalMass and massDensity are defined, totalMass predomines. WARNING: the test showed issue of casting in the EXPECT_EQ(). ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings nor unit test failures.; - [x] breaks existing scenes.; - [x] breaks API compatibility.; - [x] has been reviewed.; - [x] is more than 1 week old. **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/230
https://github.com/sofa-framework/sofa/pull/230:165,Testability,Test,Tests,165,"This commit sets the d_totalMass as read and write in DiagonalMass.; Before set as read-only, without reason.; The commit also updates the coding rules in the Data. Tests are added to check for both hexa and tetra topologies,; the coherency between totalMass and massDensity. It also checks that; if both totalMass and massDensity are defined, totalMass predomines. WARNING: the test showed issue of casting in the EXPECT_EQ(). ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings nor unit test failures.; - [x] breaks existing scenes.; - [x] breaks API compatibility.; - [x] has been reviewed.; - [x] is more than 1 week old. **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/230
https://github.com/sofa-framework/sofa/pull/230:379,Testability,test,test,379,"This commit sets the d_totalMass as read and write in DiagonalMass.; Before set as read-only, without reason.; The commit also updates the coding rules in the Data. Tests are added to check for both hexa and tetra topologies,; the coherency between totalMass and massDensity. It also checks that; if both totalMass and massDensity are defined, totalMass predomines. WARNING: the test showed issue of casting in the EXPECT_EQ(). ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings nor unit test failures.; - [x] breaks existing scenes.; - [x] breaks API compatibility.; - [x] has been reviewed.; - [x] is more than 1 week old. **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/230
https://github.com/sofa-framework/sofa/pull/230:653,Testability,test,test,653,"This commit sets the d_totalMass as read and write in DiagonalMass.; Before set as read-only, without reason.; The commit also updates the coding rules in the Data. Tests are added to check for both hexa and tetra topologies,; the coherency between totalMass and massDensity. It also checks that; if both totalMass and massDensity are defined, totalMass predomines. WARNING: the test showed issue of casting in the EXPECT_EQ(). ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings nor unit test failures.; - [x] breaks existing scenes.; - [x] breaks API compatibility.; - [x] has been reviewed.; - [x] is more than 1 week old. **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/230
https://github.com/sofa-framework/sofa/issues/231:62,Availability,avail,available,62,@hdeling suggested to make a basic version of hyperelasticity available in SOFA,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/231
https://github.com/sofa-framework/sofa/issues/233:62,Security,validat,validation,62,"Some test scenes must be written (Python?) for comparison and validation.; These scenes could also later on, be used for regression tests.",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/233
https://github.com/sofa-framework/sofa/issues/233:5,Testability,test,test,5,"Some test scenes must be written (Python?) for comparison and validation.; These scenes could also later on, be used for regression tests.",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/233
https://github.com/sofa-framework/sofa/issues/233:132,Testability,test,tests,132,"Some test scenes must be written (Python?) for comparison and validation.; These scenes could also later on, be used for regression tests.",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/233
https://github.com/sofa-framework/sofa/issues/234:67,Deployability,upgrade,upgrade,67,"""If you have a version older than 2.7.4, it is highly advisable to upgrade.""; See https://github.com/git-for-windows/git/wiki/FAQ. Plus: it adds **unzip** which is needed for Windows dependency pack.",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/234
https://github.com/sofa-framework/sofa/issues/234:183,Integrability,depend,dependency,183,"""If you have a version older than 2.7.4, it is highly advisable to upgrade.""; See https://github.com/git-for-windows/git/wiki/FAQ. Plus: it adds **unzip** which is needed for Windows dependency pack.",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/234
https://github.com/sofa-framework/sofa/issues/235:33,Integrability,interface,interface,33,Data fields are part of the user interface. ; The problem is that relationship between the data field is not encoded.; bool enableShadow ; float shadowParam1; float shadowParam2 . A good user interface should make the shadowParam1 et 2 only visible and editable iff enableShadow is set to true. Not having this relationship prevent us from doing that in Sofa user interfaces. How can we handle that in sofa ?,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/235
https://github.com/sofa-framework/sofa/issues/235:192,Integrability,interface,interface,192,Data fields are part of the user interface. ; The problem is that relationship between the data field is not encoded.; bool enableShadow ; float shadowParam1; float shadowParam2 . A good user interface should make the shadowParam1 et 2 only visible and editable iff enableShadow is set to true. Not having this relationship prevent us from doing that in Sofa user interfaces. How can we handle that in sofa ?,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/235
https://github.com/sofa-framework/sofa/issues/235:364,Integrability,interface,interfaces,364,Data fields are part of the user interface. ; The problem is that relationship between the data field is not encoded.; bool enableShadow ; float shadowParam1; float shadowParam2 . A good user interface should make the shadowParam1 et 2 only visible and editable iff enableShadow is set to true. Not having this relationship prevent us from doing that in Sofa user interfaces. How can we handle that in sofa ?,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/235
https://github.com/sofa-framework/sofa/pull/236:311,Availability,failure,failures,311,Happened after migration to Let's Encrypt SSL certificate on sofa-framework.org. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings nor unit test failures.; - [x] does not break existing scenes.; - [x] does not break API compatibility.; - [x] has been reviewed and agreed to be transitional.; - [x] is more than 1 week old. **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/236
https://github.com/sofa-framework/sofa/pull/236:180,Integrability,message,message,180,Happened after migration to Let's Encrypt SSL certificate on sofa-framework.org. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings nor unit test failures.; - [x] does not break existing scenes.; - [x] does not break API compatibility.; - [x] has been reviewed and agreed to be transitional.; - [x] is more than 1 week old. **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/236
https://github.com/sofa-framework/sofa/pull/236:34,Security,Encrypt,Encrypt,34,Happened after migration to Let's Encrypt SSL certificate on sofa-framework.org. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings nor unit test failures.; - [x] does not break existing scenes.; - [x] does not break API compatibility.; - [x] has been reviewed and agreed to be transitional.; - [x] is more than 1 week old. **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/236
https://github.com/sofa-framework/sofa/pull/236:46,Security,certificate,certificate,46,Happened after migration to Let's Encrypt SSL certificate on sofa-framework.org. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings nor unit test failures.; - [x] does not break existing scenes.; - [x] does not break API compatibility.; - [x] has been reviewed and agreed to be transitional.; - [x] is more than 1 week old. **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/236
https://github.com/sofa-framework/sofa/pull/236:306,Testability,test,test,306,Happened after migration to Let's Encrypt SSL certificate on sofa-framework.org. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings nor unit test failures.; - [x] does not break existing scenes.; - [x] does not break API compatibility.; - [x] has been reviewed and agreed to be transitional.; - [x] is more than 1 week old. **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/236
https://github.com/sofa-framework/sofa/pull/237:23,Availability,failure,failures,23,WIP branch fixing test failures caused by warning/error/deprecated messages issued from #213. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings nor unit test failures.; - [ ] does not break existing scenes.; - [ ] does not break API compatibility.; - [ ] has been reviewed and agreed to be transitional.; - [ ] is more than 1 week old.; - [ ] #213 has been merged. **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/237
https://github.com/sofa-framework/sofa/pull/237:50,Availability,error,error,50,WIP branch fixing test failures caused by warning/error/deprecated messages issued from #213. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings nor unit test failures.; - [ ] does not break existing scenes.; - [ ] does not break API compatibility.; - [ ] has been reviewed and agreed to be transitional.; - [ ] is more than 1 week old.; - [ ] #213 has been merged. **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/237
https://github.com/sofa-framework/sofa/pull/237:324,Availability,failure,failures,324,WIP branch fixing test failures caused by warning/error/deprecated messages issued from #213. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings nor unit test failures.; - [ ] does not break existing scenes.; - [ ] does not break API compatibility.; - [ ] has been reviewed and agreed to be transitional.; - [ ] is more than 1 week old.; - [ ] #213 has been merged. **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/237
https://github.com/sofa-framework/sofa/pull/237:67,Integrability,message,messages,67,WIP branch fixing test failures caused by warning/error/deprecated messages issued from #213. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings nor unit test failures.; - [ ] does not break existing scenes.; - [ ] does not break API compatibility.; - [ ] has been reviewed and agreed to be transitional.; - [ ] is more than 1 week old.; - [ ] #213 has been merged. **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/237
https://github.com/sofa-framework/sofa/pull/237:193,Integrability,message,message,193,WIP branch fixing test failures caused by warning/error/deprecated messages issued from #213. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings nor unit test failures.; - [ ] does not break existing scenes.; - [ ] does not break API compatibility.; - [ ] has been reviewed and agreed to be transitional.; - [ ] is more than 1 week old.; - [ ] #213 has been merged. **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/237
https://github.com/sofa-framework/sofa/pull/237:18,Testability,test,test,18,WIP branch fixing test failures caused by warning/error/deprecated messages issued from #213. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings nor unit test failures.; - [ ] does not break existing scenes.; - [ ] does not break API compatibility.; - [ ] has been reviewed and agreed to be transitional.; - [ ] is more than 1 week old.; - [ ] #213 has been merged. **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/237
https://github.com/sofa-framework/sofa/pull/237:319,Testability,test,test,319,WIP branch fixing test failures caused by warning/error/deprecated messages issued from #213. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings nor unit test failures.; - [ ] does not break existing scenes.; - [ ] does not break API compatibility.; - [ ] has been reviewed and agreed to be transitional.; - [ ] is more than 1 week old.; - [ ] #213 has been merged. **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/237
https://github.com/sofa-framework/sofa/issues/238:138,Availability,error,error,138,"runSofa's QtViewer and the new SofaQtQuick interface create a ""Core Profile"" OpenGL context on Linux, with Intel GPUs, with the following error messages:. > QtViewer: OpenGL 4.5 (Core Profile) Mesa 17.0.2 context created.; > Error: GL_ARB_multitexture not supported; > ########## SIG 11 - SIGSEGV: segfault ##########. A core profile context isn't likely to support the ARB_multitexture extension because that extension is specific to the fixed-function pipeline. (For more information: [Check this thread on OpenGL's forum](https://www.opengl.org/discussion_boards/showthread.php/199472-GL_ARB_multitexture-not-supported?p=1286582). Bug reproduced on 3 laptops with intel graphics, with Intel's drivers installed, on Ubuntu 16.04 and Arch linux.; ______________________________________________________. Suggested labels: <!--- see https://github.com/sofa-framework/sofa/labels -->",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/238
https://github.com/sofa-framework/sofa/issues/238:225,Availability,Error,Error,225,"runSofa's QtViewer and the new SofaQtQuick interface create a ""Core Profile"" OpenGL context on Linux, with Intel GPUs, with the following error messages:. > QtViewer: OpenGL 4.5 (Core Profile) Mesa 17.0.2 context created.; > Error: GL_ARB_multitexture not supported; > ########## SIG 11 - SIGSEGV: segfault ##########. A core profile context isn't likely to support the ARB_multitexture extension because that extension is specific to the fixed-function pipeline. (For more information: [Check this thread on OpenGL's forum](https://www.opengl.org/discussion_boards/showthread.php/199472-GL_ARB_multitexture-not-supported?p=1286582). Bug reproduced on 3 laptops with intel graphics, with Intel's drivers installed, on Ubuntu 16.04 and Arch linux.; ______________________________________________________. Suggested labels: <!--- see https://github.com/sofa-framework/sofa/labels -->",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/238
https://github.com/sofa-framework/sofa/issues/238:454,Deployability,pipeline,pipeline,454,"runSofa's QtViewer and the new SofaQtQuick interface create a ""Core Profile"" OpenGL context on Linux, with Intel GPUs, with the following error messages:. > QtViewer: OpenGL 4.5 (Core Profile) Mesa 17.0.2 context created.; > Error: GL_ARB_multitexture not supported; > ########## SIG 11 - SIGSEGV: segfault ##########. A core profile context isn't likely to support the ARB_multitexture extension because that extension is specific to the fixed-function pipeline. (For more information: [Check this thread on OpenGL's forum](https://www.opengl.org/discussion_boards/showthread.php/199472-GL_ARB_multitexture-not-supported?p=1286582). Bug reproduced on 3 laptops with intel graphics, with Intel's drivers installed, on Ubuntu 16.04 and Arch linux.; ______________________________________________________. Suggested labels: <!--- see https://github.com/sofa-framework/sofa/labels -->",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/238
https://github.com/sofa-framework/sofa/issues/238:704,Deployability,install,installed,704,"runSofa's QtViewer and the new SofaQtQuick interface create a ""Core Profile"" OpenGL context on Linux, with Intel GPUs, with the following error messages:. > QtViewer: OpenGL 4.5 (Core Profile) Mesa 17.0.2 context created.; > Error: GL_ARB_multitexture not supported; > ########## SIG 11 - SIGSEGV: segfault ##########. A core profile context isn't likely to support the ARB_multitexture extension because that extension is specific to the fixed-function pipeline. (For more information: [Check this thread on OpenGL's forum](https://www.opengl.org/discussion_boards/showthread.php/199472-GL_ARB_multitexture-not-supported?p=1286582). Bug reproduced on 3 laptops with intel graphics, with Intel's drivers installed, on Ubuntu 16.04 and Arch linux.; ______________________________________________________. Suggested labels: <!--- see https://github.com/sofa-framework/sofa/labels -->",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/238
https://github.com/sofa-framework/sofa/issues/238:43,Integrability,interface,interface,43,"runSofa's QtViewer and the new SofaQtQuick interface create a ""Core Profile"" OpenGL context on Linux, with Intel GPUs, with the following error messages:. > QtViewer: OpenGL 4.5 (Core Profile) Mesa 17.0.2 context created.; > Error: GL_ARB_multitexture not supported; > ########## SIG 11 - SIGSEGV: segfault ##########. A core profile context isn't likely to support the ARB_multitexture extension because that extension is specific to the fixed-function pipeline. (For more information: [Check this thread on OpenGL's forum](https://www.opengl.org/discussion_boards/showthread.php/199472-GL_ARB_multitexture-not-supported?p=1286582). Bug reproduced on 3 laptops with intel graphics, with Intel's drivers installed, on Ubuntu 16.04 and Arch linux.; ______________________________________________________. Suggested labels: <!--- see https://github.com/sofa-framework/sofa/labels -->",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/238
https://github.com/sofa-framework/sofa/issues/238:144,Integrability,message,messages,144,"runSofa's QtViewer and the new SofaQtQuick interface create a ""Core Profile"" OpenGL context on Linux, with Intel GPUs, with the following error messages:. > QtViewer: OpenGL 4.5 (Core Profile) Mesa 17.0.2 context created.; > Error: GL_ARB_multitexture not supported; > ########## SIG 11 - SIGSEGV: segfault ##########. A core profile context isn't likely to support the ARB_multitexture extension because that extension is specific to the fixed-function pipeline. (For more information: [Check this thread on OpenGL's forum](https://www.opengl.org/discussion_boards/showthread.php/199472-GL_ARB_multitexture-not-supported?p=1286582). Bug reproduced on 3 laptops with intel graphics, with Intel's drivers installed, on Ubuntu 16.04 and Arch linux.; ______________________________________________________. Suggested labels: <!--- see https://github.com/sofa-framework/sofa/labels -->",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/238
https://github.com/sofa-framework/sofa/issues/239:56,Integrability,depend,depends,56,"Sofa's default CMake settings activates SofaTest, which depends on PLUGIN_SOFAPYTHON, which is not activated by default. This result in an unsuccessful generation of the project. Either SofaPython should be a default SOFA dependency, or Sofa tests using SofaPython should be separated and only activated when SofaPython plugin is too. @bcarrez @matthieu-nesme might be interested; ______________________________________________________. Suggested labels: <!--- see https://github.com/sofa-framework/sofa/labels -->",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/239
https://github.com/sofa-framework/sofa/issues/239:222,Integrability,depend,dependency,222,"Sofa's default CMake settings activates SofaTest, which depends on PLUGIN_SOFAPYTHON, which is not activated by default. This result in an unsuccessful generation of the project. Either SofaPython should be a default SOFA dependency, or Sofa tests using SofaPython should be separated and only activated when SofaPython plugin is too. @bcarrez @matthieu-nesme might be interested; ______________________________________________________. Suggested labels: <!--- see https://github.com/sofa-framework/sofa/labels -->",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/239
https://github.com/sofa-framework/sofa/issues/239:320,Modifiability,plugin,plugin,320,"Sofa's default CMake settings activates SofaTest, which depends on PLUGIN_SOFAPYTHON, which is not activated by default. This result in an unsuccessful generation of the project. Either SofaPython should be a default SOFA dependency, or Sofa tests using SofaPython should be separated and only activated when SofaPython plugin is too. @bcarrez @matthieu-nesme might be interested; ______________________________________________________. Suggested labels: <!--- see https://github.com/sofa-framework/sofa/labels -->",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/239
https://github.com/sofa-framework/sofa/issues/239:242,Testability,test,tests,242,"Sofa's default CMake settings activates SofaTest, which depends on PLUGIN_SOFAPYTHON, which is not activated by default. This result in an unsuccessful generation of the project. Either SofaPython should be a default SOFA dependency, or Sofa tests using SofaPython should be separated and only activated when SofaPython plugin is too. @bcarrez @matthieu-nesme might be interested; ______________________________________________________. Suggested labels: <!--- see https://github.com/sofa-framework/sofa/labels -->",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/239
https://github.com/sofa-framework/sofa/pull/240:249,Availability,failure,failures,249,Title says all :). ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings nor unit test failures.; - [x] does not break existing scenes.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label).; - [x] has been reviewed and agreed to be transitional.; - [x] reports important changes in Changelog. **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/240
https://github.com/sofa-framework/sofa/pull/240:118,Integrability,message,message,118,Title says all :). ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings nor unit test failures.; - [x] does not break existing scenes.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label).; - [x] has been reviewed and agreed to be transitional.; - [x] reports important changes in Changelog. **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/240
https://github.com/sofa-framework/sofa/pull/240:244,Testability,test,test,244,Title says all :). ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings nor unit test failures.; - [x] does not break existing scenes.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label).; - [x] has been reviewed and agreed to be transitional.; - [x] reports important changes in Changelog. **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/240
https://github.com/sofa-framework/sofa/issues/242:115,Integrability,depend,dependencies,115,"Hey,. In the context of the workgroup SOFA NG, it has been noticed ( @fredroy ) that the MechanicalObject presents dependencies on TopologyData.inl, itself having dependencies to all topologies in SOFA (containers etc.). For SOFA NG, it is intended to provide a first set of basic components, implementing the main virtual classes defined in SofaFramework and SofaSimulation. This first step helps us in detecting unexpected/undesired dependencies. We already know that the MechanicalObject does depend on GridTopology (see issue #162 ), but this is a new dependency that should also be avoided. Any suggestions?. This could be of interest for @fredroy @epernod @damienmarchal @fjourdes @JeremieA",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/242
https://github.com/sofa-framework/sofa/issues/242:163,Integrability,depend,dependencies,163,"Hey,. In the context of the workgroup SOFA NG, it has been noticed ( @fredroy ) that the MechanicalObject presents dependencies on TopologyData.inl, itself having dependencies to all topologies in SOFA (containers etc.). For SOFA NG, it is intended to provide a first set of basic components, implementing the main virtual classes defined in SofaFramework and SofaSimulation. This first step helps us in detecting unexpected/undesired dependencies. We already know that the MechanicalObject does depend on GridTopology (see issue #162 ), but this is a new dependency that should also be avoided. Any suggestions?. This could be of interest for @fredroy @epernod @damienmarchal @fjourdes @JeremieA",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/242
https://github.com/sofa-framework/sofa/issues/242:435,Integrability,depend,dependencies,435,"Hey,. In the context of the workgroup SOFA NG, it has been noticed ( @fredroy ) that the MechanicalObject presents dependencies on TopologyData.inl, itself having dependencies to all topologies in SOFA (containers etc.). For SOFA NG, it is intended to provide a first set of basic components, implementing the main virtual classes defined in SofaFramework and SofaSimulation. This first step helps us in detecting unexpected/undesired dependencies. We already know that the MechanicalObject does depend on GridTopology (see issue #162 ), but this is a new dependency that should also be avoided. Any suggestions?. This could be of interest for @fredroy @epernod @damienmarchal @fjourdes @JeremieA",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/242
https://github.com/sofa-framework/sofa/issues/242:496,Integrability,depend,depend,496,"Hey,. In the context of the workgroup SOFA NG, it has been noticed ( @fredroy ) that the MechanicalObject presents dependencies on TopologyData.inl, itself having dependencies to all topologies in SOFA (containers etc.). For SOFA NG, it is intended to provide a first set of basic components, implementing the main virtual classes defined in SofaFramework and SofaSimulation. This first step helps us in detecting unexpected/undesired dependencies. We already know that the MechanicalObject does depend on GridTopology (see issue #162 ), but this is a new dependency that should also be avoided. Any suggestions?. This could be of interest for @fredroy @epernod @damienmarchal @fjourdes @JeremieA",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/242
https://github.com/sofa-framework/sofa/issues/242:556,Integrability,depend,dependency,556,"Hey,. In the context of the workgroup SOFA NG, it has been noticed ( @fredroy ) that the MechanicalObject presents dependencies on TopologyData.inl, itself having dependencies to all topologies in SOFA (containers etc.). For SOFA NG, it is intended to provide a first set of basic components, implementing the main virtual classes defined in SofaFramework and SofaSimulation. This first step helps us in detecting unexpected/undesired dependencies. We already know that the MechanicalObject does depend on GridTopology (see issue #162 ), but this is a new dependency that should also be avoided. Any suggestions?. This could be of interest for @fredroy @epernod @damienmarchal @fjourdes @JeremieA",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/242
https://github.com/sofa-framework/sofa/issues/242:404,Safety,detect,detecting,404,"Hey,. In the context of the workgroup SOFA NG, it has been noticed ( @fredroy ) that the MechanicalObject presents dependencies on TopologyData.inl, itself having dependencies to all topologies in SOFA (containers etc.). For SOFA NG, it is intended to provide a first set of basic components, implementing the main virtual classes defined in SofaFramework and SofaSimulation. This first step helps us in detecting unexpected/undesired dependencies. We already know that the MechanicalObject does depend on GridTopology (see issue #162 ), but this is a new dependency that should also be avoided. Any suggestions?. This could be of interest for @fredroy @epernod @damienmarchal @fjourdes @JeremieA",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/242
https://github.com/sofa-framework/sofa/issues/242:587,Safety,avoid,avoided,587,"Hey,. In the context of the workgroup SOFA NG, it has been noticed ( @fredroy ) that the MechanicalObject presents dependencies on TopologyData.inl, itself having dependencies to all topologies in SOFA (containers etc.). For SOFA NG, it is intended to provide a first set of basic components, implementing the main virtual classes defined in SofaFramework and SofaSimulation. This first step helps us in detecting unexpected/undesired dependencies. We already know that the MechanicalObject does depend on GridTopology (see issue #162 ), but this is a new dependency that should also be avoided. Any suggestions?. This could be of interest for @fredroy @epernod @damienmarchal @fjourdes @JeremieA",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/242
https://github.com/sofa-framework/sofa/pull/243:1967,Availability,failure,failures,1967,"zeToModel flag in SubsetMapping to enable resizing of the destination MechanicalState to the size of indices; - BaseContext : add new method getActiveMeshTopology to get relevant topology, taking `BaseMaping::sameTopology()` into account; - PointSetTopology : add some unit tests. ### Improvements; - each time a topological change sequence is detected in BarycentricMapperTriangleSetTopology the mapping is initialized; - PointSetTopologyContainer maintains a list of point indices, accessible through the data points; - Topology : Factorize the last method specific to each topological elements in data containers. ### Cleans; - MechanicalObject size and link to topology is now exposed as Data and Link, using the new getActiveMeshTopology() method. Set the link manually and/or set useTopology=""false"" to override. ### Bugfixes; - apply data container updates before mapping updates; - use existing parameter handleTopologyChange in SubsetMapping; - slightly cleanup topology change handling method for triangle mappers; - check of upper topology based on the emptiness of the upper container; - crash in `MeshTopology::init()` for non manifold meshes; - re-enable Propagate of topological changes inbetween triangle creation and removal in `TriangleSetTopologyModifier::addRemoveTriangles(),` as it is required in cases involving chains of topology mapping and topology data containers depending on each other . This is the re-opening of [previous issofa_topology pull-request](https://github.com/sofa-framework/sofa/pull/217). ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings nor unit test failures.; - [x] does not break existing scenes.; - [x] does not break API compatibility.; - [x] has been reviewed and agreed to be transitional.; - [x] is more than 1 week old. **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/243
https://github.com/sofa-framework/sofa/pull/243:1060,Deployability,update,updates,1060,"zeToModel flag in SubsetMapping to enable resizing of the destination MechanicalState to the size of indices; - BaseContext : add new method getActiveMeshTopology to get relevant topology, taking `BaseMaping::sameTopology()` into account; - PointSetTopology : add some unit tests. ### Improvements; - each time a topological change sequence is detected in BarycentricMapperTriangleSetTopology the mapping is initialized; - PointSetTopologyContainer maintains a list of point indices, accessible through the data points; - Topology : Factorize the last method specific to each topological elements in data containers. ### Cleans; - MechanicalObject size and link to topology is now exposed as Data and Link, using the new getActiveMeshTopology() method. Set the link manually and/or set useTopology=""false"" to override. ### Bugfixes; - apply data container updates before mapping updates; - use existing parameter handleTopologyChange in SubsetMapping; - slightly cleanup topology change handling method for triangle mappers; - check of upper topology based on the emptiness of the upper container; - crash in `MeshTopology::init()` for non manifold meshes; - re-enable Propagate of topological changes inbetween triangle creation and removal in `TriangleSetTopologyModifier::addRemoveTriangles(),` as it is required in cases involving chains of topology mapping and topology data containers depending on each other . This is the re-opening of [previous issofa_topology pull-request](https://github.com/sofa-framework/sofa/pull/217). ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings nor unit test failures.; - [x] does not break existing scenes.; - [x] does not break API compatibility.; - [x] has been reviewed and agreed to be transitional.; - [x] is more than 1 week old. **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/243
https://github.com/sofa-framework/sofa/pull/243:1083,Deployability,update,updates,1083,"zeToModel flag in SubsetMapping to enable resizing of the destination MechanicalState to the size of indices; - BaseContext : add new method getActiveMeshTopology to get relevant topology, taking `BaseMaping::sameTopology()` into account; - PointSetTopology : add some unit tests. ### Improvements; - each time a topological change sequence is detected in BarycentricMapperTriangleSetTopology the mapping is initialized; - PointSetTopologyContainer maintains a list of point indices, accessible through the data points; - Topology : Factorize the last method specific to each topological elements in data containers. ### Cleans; - MechanicalObject size and link to topology is now exposed as Data and Link, using the new getActiveMeshTopology() method. Set the link manually and/or set useTopology=""false"" to override. ### Bugfixes; - apply data container updates before mapping updates; - use existing parameter handleTopologyChange in SubsetMapping; - slightly cleanup topology change handling method for triangle mappers; - check of upper topology based on the emptiness of the upper container; - crash in `MeshTopology::init()` for non manifold meshes; - re-enable Propagate of topological changes inbetween triangle creation and removal in `TriangleSetTopologyModifier::addRemoveTriangles(),` as it is required in cases involving chains of topology mapping and topology data containers depending on each other . This is the re-opening of [previous issofa_topology pull-request](https://github.com/sofa-framework/sofa/pull/217). ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings nor unit test failures.; - [x] does not break existing scenes.; - [x] does not break API compatibility.; - [x] has been reviewed and agreed to be transitional.; - [x] is more than 1 week old. **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/243
https://github.com/sofa-framework/sofa/pull/243:1595,Integrability,depend,depending,1595,"zeToModel flag in SubsetMapping to enable resizing of the destination MechanicalState to the size of indices; - BaseContext : add new method getActiveMeshTopology to get relevant topology, taking `BaseMaping::sameTopology()` into account; - PointSetTopology : add some unit tests. ### Improvements; - each time a topological change sequence is detected in BarycentricMapperTriangleSetTopology the mapping is initialized; - PointSetTopologyContainer maintains a list of point indices, accessible through the data points; - Topology : Factorize the last method specific to each topological elements in data containers. ### Cleans; - MechanicalObject size and link to topology is now exposed as Data and Link, using the new getActiveMeshTopology() method. Set the link manually and/or set useTopology=""false"" to override. ### Bugfixes; - apply data container updates before mapping updates; - use existing parameter handleTopologyChange in SubsetMapping; - slightly cleanup topology change handling method for triangle mappers; - check of upper topology based on the emptiness of the upper container; - crash in `MeshTopology::init()` for non manifold meshes; - re-enable Propagate of topological changes inbetween triangle creation and removal in `TriangleSetTopologyModifier::addRemoveTriangles(),` as it is required in cases involving chains of topology mapping and topology data containers depending on each other . This is the re-opening of [previous issofa_topology pull-request](https://github.com/sofa-framework/sofa/pull/217). ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings nor unit test failures.; - [x] does not break existing scenes.; - [x] does not break API compatibility.; - [x] has been reviewed and agreed to be transitional.; - [x] is more than 1 week old. **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/243
https://github.com/sofa-framework/sofa/pull/243:1836,Integrability,message,message,1836,"zeToModel flag in SubsetMapping to enable resizing of the destination MechanicalState to the size of indices; - BaseContext : add new method getActiveMeshTopology to get relevant topology, taking `BaseMaping::sameTopology()` into account; - PointSetTopology : add some unit tests. ### Improvements; - each time a topological change sequence is detected in BarycentricMapperTriangleSetTopology the mapping is initialized; - PointSetTopologyContainer maintains a list of point indices, accessible through the data points; - Topology : Factorize the last method specific to each topological elements in data containers. ### Cleans; - MechanicalObject size and link to topology is now exposed as Data and Link, using the new getActiveMeshTopology() method. Set the link manually and/or set useTopology=""false"" to override. ### Bugfixes; - apply data container updates before mapping updates; - use existing parameter handleTopologyChange in SubsetMapping; - slightly cleanup topology change handling method for triangle mappers; - check of upper topology based on the emptiness of the upper container; - crash in `MeshTopology::init()` for non manifold meshes; - re-enable Propagate of topological changes inbetween triangle creation and removal in `TriangleSetTopologyModifier::addRemoveTriangles(),` as it is required in cases involving chains of topology mapping and topology data containers depending on each other . This is the re-opening of [previous issofa_topology pull-request](https://github.com/sofa-framework/sofa/pull/217). ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings nor unit test failures.; - [x] does not break existing scenes.; - [x] does not break API compatibility.; - [x] has been reviewed and agreed to be transitional.; - [x] is more than 1 week old. **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/243
https://github.com/sofa-framework/sofa/pull/243:548,Safety,detect,detected,548,"### New features; - UncoupledConstraintCorrection : add option to disable handling of topological changes for compliance vector; - Container : add accessor to the topology type; - SubsetMapping : add resizeToModel flag in SubsetMapping to enable resizing of the destination MechanicalState to the size of indices; - BaseContext : add new method getActiveMeshTopology to get relevant topology, taking `BaseMaping::sameTopology()` into account; - PointSetTopology : add some unit tests. ### Improvements; - each time a topological change sequence is detected in BarycentricMapperTriangleSetTopology the mapping is initialized; - PointSetTopologyContainer maintains a list of point indices, accessible through the data points; - Topology : Factorize the last method specific to each topological elements in data containers. ### Cleans; - MechanicalObject size and link to topology is now exposed as Data and Link, using the new getActiveMeshTopology() method. Set the link manually and/or set useTopology=""false"" to override. ### Bugfixes; - apply data container updates before mapping updates; - use existing parameter handleTopologyChange in SubsetMapping; - slightly cleanup topology change handling method for triangle mappers; - check of upper topology based on the emptiness of the upper container; - crash in `MeshTopology::init()` for non manifold meshes; - re-enable Propagate of topological changes inbetween triangle creation and removal in `TriangleSetTopologyModifier::addRemoveTriangles(),` as it is required in cases involving chains of topology mapping and topology data containers depending on each other . This is the re-opening of [previous issofa_topology pull-request](https://github.com/sofa-framework/sofa/pull/217). ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings nor unit test failures.; - [x] does not break ex",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/243
https://github.com/sofa-framework/sofa/pull/243:147,Security,access,accessor,147,"### New features; - UncoupledConstraintCorrection : add option to disable handling of topological changes for compliance vector; - Container : add accessor to the topology type; - SubsetMapping : add resizeToModel flag in SubsetMapping to enable resizing of the destination MechanicalState to the size of indices; - BaseContext : add new method getActiveMeshTopology to get relevant topology, taking `BaseMaping::sameTopology()` into account; - PointSetTopology : add some unit tests. ### Improvements; - each time a topological change sequence is detected in BarycentricMapperTriangleSetTopology the mapping is initialized; - PointSetTopologyContainer maintains a list of point indices, accessible through the data points; - Topology : Factorize the last method specific to each topological elements in data containers. ### Cleans; - MechanicalObject size and link to topology is now exposed as Data and Link, using the new getActiveMeshTopology() method. Set the link manually and/or set useTopology=""false"" to override. ### Bugfixes; - apply data container updates before mapping updates; - use existing parameter handleTopologyChange in SubsetMapping; - slightly cleanup topology change handling method for triangle mappers; - check of upper topology based on the emptiness of the upper container; - crash in `MeshTopology::init()` for non manifold meshes; - re-enable Propagate of topological changes inbetween triangle creation and removal in `TriangleSetTopologyModifier::addRemoveTriangles(),` as it is required in cases involving chains of topology mapping and topology data containers depending on each other . This is the re-opening of [previous issofa_topology pull-request](https://github.com/sofa-framework/sofa/pull/217). ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings nor unit test failures.; - [x] does not break ex",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/243
https://github.com/sofa-framework/sofa/pull/243:688,Security,access,accessible,688,"### New features; - UncoupledConstraintCorrection : add option to disable handling of topological changes for compliance vector; - Container : add accessor to the topology type; - SubsetMapping : add resizeToModel flag in SubsetMapping to enable resizing of the destination MechanicalState to the size of indices; - BaseContext : add new method getActiveMeshTopology to get relevant topology, taking `BaseMaping::sameTopology()` into account; - PointSetTopology : add some unit tests. ### Improvements; - each time a topological change sequence is detected in BarycentricMapperTriangleSetTopology the mapping is initialized; - PointSetTopologyContainer maintains a list of point indices, accessible through the data points; - Topology : Factorize the last method specific to each topological elements in data containers. ### Cleans; - MechanicalObject size and link to topology is now exposed as Data and Link, using the new getActiveMeshTopology() method. Set the link manually and/or set useTopology=""false"" to override. ### Bugfixes; - apply data container updates before mapping updates; - use existing parameter handleTopologyChange in SubsetMapping; - slightly cleanup topology change handling method for triangle mappers; - check of upper topology based on the emptiness of the upper container; - crash in `MeshTopology::init()` for non manifold meshes; - re-enable Propagate of topological changes inbetween triangle creation and removal in `TriangleSetTopologyModifier::addRemoveTriangles(),` as it is required in cases involving chains of topology mapping and topology data containers depending on each other . This is the re-opening of [previous issofa_topology pull-request](https://github.com/sofa-framework/sofa/pull/217). ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings nor unit test failures.; - [x] does not break ex",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/243
https://github.com/sofa-framework/sofa/pull/243:885,Security,expose,exposed,885,"### New features; - UncoupledConstraintCorrection : add option to disable handling of topological changes for compliance vector; - Container : add accessor to the topology type; - SubsetMapping : add resizeToModel flag in SubsetMapping to enable resizing of the destination MechanicalState to the size of indices; - BaseContext : add new method getActiveMeshTopology to get relevant topology, taking `BaseMaping::sameTopology()` into account; - PointSetTopology : add some unit tests. ### Improvements; - each time a topological change sequence is detected in BarycentricMapperTriangleSetTopology the mapping is initialized; - PointSetTopologyContainer maintains a list of point indices, accessible through the data points; - Topology : Factorize the last method specific to each topological elements in data containers. ### Cleans; - MechanicalObject size and link to topology is now exposed as Data and Link, using the new getActiveMeshTopology() method. Set the link manually and/or set useTopology=""false"" to override. ### Bugfixes; - apply data container updates before mapping updates; - use existing parameter handleTopologyChange in SubsetMapping; - slightly cleanup topology change handling method for triangle mappers; - check of upper topology based on the emptiness of the upper container; - crash in `MeshTopology::init()` for non manifold meshes; - re-enable Propagate of topological changes inbetween triangle creation and removal in `TriangleSetTopologyModifier::addRemoveTriangles(),` as it is required in cases involving chains of topology mapping and topology data containers depending on each other . This is the re-opening of [previous issofa_topology pull-request](https://github.com/sofa-framework/sofa/pull/217). ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings nor unit test failures.; - [x] does not break ex",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/243
https://github.com/sofa-framework/sofa/pull/243:478,Testability,test,tests,478,"### New features; - UncoupledConstraintCorrection : add option to disable handling of topological changes for compliance vector; - Container : add accessor to the topology type; - SubsetMapping : add resizeToModel flag in SubsetMapping to enable resizing of the destination MechanicalState to the size of indices; - BaseContext : add new method getActiveMeshTopology to get relevant topology, taking `BaseMaping::sameTopology()` into account; - PointSetTopology : add some unit tests. ### Improvements; - each time a topological change sequence is detected in BarycentricMapperTriangleSetTopology the mapping is initialized; - PointSetTopologyContainer maintains a list of point indices, accessible through the data points; - Topology : Factorize the last method specific to each topological elements in data containers. ### Cleans; - MechanicalObject size and link to topology is now exposed as Data and Link, using the new getActiveMeshTopology() method. Set the link manually and/or set useTopology=""false"" to override. ### Bugfixes; - apply data container updates before mapping updates; - use existing parameter handleTopologyChange in SubsetMapping; - slightly cleanup topology change handling method for triangle mappers; - check of upper topology based on the emptiness of the upper container; - crash in `MeshTopology::init()` for non manifold meshes; - re-enable Propagate of topological changes inbetween triangle creation and removal in `TriangleSetTopologyModifier::addRemoveTriangles(),` as it is required in cases involving chains of topology mapping and topology data containers depending on each other . This is the re-opening of [previous issofa_topology pull-request](https://github.com/sofa-framework/sofa/pull/217). ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings nor unit test failures.; - [x] does not break ex",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/243
https://github.com/sofa-framework/sofa/pull/243:1962,Testability,test,test,1962,"zeToModel flag in SubsetMapping to enable resizing of the destination MechanicalState to the size of indices; - BaseContext : add new method getActiveMeshTopology to get relevant topology, taking `BaseMaping::sameTopology()` into account; - PointSetTopology : add some unit tests. ### Improvements; - each time a topological change sequence is detected in BarycentricMapperTriangleSetTopology the mapping is initialized; - PointSetTopologyContainer maintains a list of point indices, accessible through the data points; - Topology : Factorize the last method specific to each topological elements in data containers. ### Cleans; - MechanicalObject size and link to topology is now exposed as Data and Link, using the new getActiveMeshTopology() method. Set the link manually and/or set useTopology=""false"" to override. ### Bugfixes; - apply data container updates before mapping updates; - use existing parameter handleTopologyChange in SubsetMapping; - slightly cleanup topology change handling method for triangle mappers; - check of upper topology based on the emptiness of the upper container; - crash in `MeshTopology::init()` for non manifold meshes; - re-enable Propagate of topological changes inbetween triangle creation and removal in `TriangleSetTopologyModifier::addRemoveTriangles(),` as it is required in cases involving chains of topology mapping and topology data containers depending on each other . This is the re-opening of [previous issofa_topology pull-request](https://github.com/sofa-framework/sofa/pull/217). ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings nor unit test failures.; - [x] does not break existing scenes.; - [x] does not break API compatibility.; - [x] has been reviewed and agreed to be transitional.; - [x] is more than 1 week old. **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/243
https://github.com/sofa-framework/sofa/issues/245:91,Deployability,configurat,configuration,91,"As soon as the 1st SOFA NG version is ready, the github repository including the CMakeList configuration of NG should be released.",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/245
https://github.com/sofa-framework/sofa/issues/245:121,Deployability,release,released,121,"As soon as the 1st SOFA NG version is ready, the github repository including the CMakeList configuration of NG should be released.",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/245
https://github.com/sofa-framework/sofa/issues/245:91,Modifiability,config,configuration,91,"As soon as the 1st SOFA NG version is ready, the github repository including the CMakeList configuration of NG should be released.",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/245
https://github.com/sofa-framework/sofa/issues/246:2,Integrability,depend,dependency,2,A dependency is noted in FixedConstraint on the Topology (for topological changes). A version without topological dependencies would make sense. This is in relationship with issue #242,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/246
https://github.com/sofa-framework/sofa/issues/246:114,Integrability,depend,dependencies,114,A dependency is noted in FixedConstraint on the Topology (for topological changes). A version without topological dependencies would make sense. This is in relationship with issue #242,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/246
https://github.com/sofa-framework/sofa/issues/247:165,Testability,test,testing,165,"A list of components is being defined, see issue #226 ; The idea is to present shortly a first prototype of SOFA NG to involve more and more people in the cleaning, testing of SOFA. This 1st SOFA NG version focuses on : . - very few classes (~20); - simple implementation of the base classes. This would allow to have a first set of simple components allowing for:; - new users to understand SOFA easier; - advanced developers and companies using SOFA for its core features (scene graph, DAG, visitors etc.) but without interests for all other codes. Example of these 20 components: DefaultAnimationLoop, UniformMass, ConstantForceField, EulerExplicit, Cholesky (see #244 ), IdentityMapping, FixedConstraint (see #246 ), ValuesFromIndices, MeshObjLoader (and others), RequiredPlugin. Any feedback is more than welcome : @ChristianDuriez @damienmarchal @StephaneCotin @JeremieA @matthieu-nesme",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/247
https://github.com/sofa-framework/sofa/issues/247:250,Usability,simpl,simple,250,"A list of components is being defined, see issue #226 ; The idea is to present shortly a first prototype of SOFA NG to involve more and more people in the cleaning, testing of SOFA. This 1st SOFA NG version focuses on : . - very few classes (~20); - simple implementation of the base classes. This would allow to have a first set of simple components allowing for:; - new users to understand SOFA easier; - advanced developers and companies using SOFA for its core features (scene graph, DAG, visitors etc.) but without interests for all other codes. Example of these 20 components: DefaultAnimationLoop, UniformMass, ConstantForceField, EulerExplicit, Cholesky (see #244 ), IdentityMapping, FixedConstraint (see #246 ), ValuesFromIndices, MeshObjLoader (and others), RequiredPlugin. Any feedback is more than welcome : @ChristianDuriez @damienmarchal @StephaneCotin @JeremieA @matthieu-nesme",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/247
https://github.com/sofa-framework/sofa/issues/247:333,Usability,simpl,simple,333,"A list of components is being defined, see issue #226 ; The idea is to present shortly a first prototype of SOFA NG to involve more and more people in the cleaning, testing of SOFA. This 1st SOFA NG version focuses on : . - very few classes (~20); - simple implementation of the base classes. This would allow to have a first set of simple components allowing for:; - new users to understand SOFA easier; - advanced developers and companies using SOFA for its core features (scene graph, DAG, visitors etc.) but without interests for all other codes. Example of these 20 components: DefaultAnimationLoop, UniformMass, ConstantForceField, EulerExplicit, Cholesky (see #244 ), IdentityMapping, FixedConstraint (see #246 ), ValuesFromIndices, MeshObjLoader (and others), RequiredPlugin. Any feedback is more than welcome : @ChristianDuriez @damienmarchal @StephaneCotin @JeremieA @matthieu-nesme",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/247
https://github.com/sofa-framework/sofa/issues/247:788,Usability,feedback,feedback,788,"A list of components is being defined, see issue #226 ; The idea is to present shortly a first prototype of SOFA NG to involve more and more people in the cleaning, testing of SOFA. This 1st SOFA NG version focuses on : . - very few classes (~20); - simple implementation of the base classes. This would allow to have a first set of simple components allowing for:; - new users to understand SOFA easier; - advanced developers and companies using SOFA for its core features (scene graph, DAG, visitors etc.) but without interests for all other codes. Example of these 20 components: DefaultAnimationLoop, UniformMass, ConstantForceField, EulerExplicit, Cholesky (see #244 ), IdentityMapping, FixedConstraint (see #246 ), ValuesFromIndices, MeshObjLoader (and others), RequiredPlugin. Any feedback is more than welcome : @ChristianDuriez @damienmarchal @StephaneCotin @JeremieA @matthieu-nesme",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/247
https://github.com/sofa-framework/sofa/pull/249:560,Availability,failure,failures,560,"Small PR to : ; - ~~remove useless header~~ (and then remove one dependency on SofaBaseTopology) (see discussion #242 ) (actually instead of removing, I used an existing #ifdef macro); - add forgotten Windows macro to export specialized functions into DLLs. This should not break any API compatibility or compilation (hopefully). ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings nor unit test failures.; - [x] does not break existing scenes.; - [x] does not break API compatibility.; - [x] has been reviewed.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/249
https://github.com/sofa-framework/sofa/pull/249:65,Integrability,depend,dependency,65,"Small PR to : ; - ~~remove useless header~~ (and then remove one dependency on SofaBaseTopology) (see discussion #242 ) (actually instead of removing, I used an existing #ifdef macro); - add forgotten Windows macro to export specialized functions into DLLs. This should not break any API compatibility or compilation (hopefully). ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings nor unit test failures.; - [x] does not break existing scenes.; - [x] does not break API compatibility.; - [x] has been reviewed.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/249
https://github.com/sofa-framework/sofa/pull/249:429,Integrability,message,message,429,"Small PR to : ; - ~~remove useless header~~ (and then remove one dependency on SofaBaseTopology) (see discussion #242 ) (actually instead of removing, I used an existing #ifdef macro); - add forgotten Windows macro to export specialized functions into DLLs. This should not break any API compatibility or compilation (hopefully). ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings nor unit test failures.; - [x] does not break existing scenes.; - [x] does not break API compatibility.; - [x] has been reviewed.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/249
https://github.com/sofa-framework/sofa/pull/249:555,Testability,test,test,555,"Small PR to : ; - ~~remove useless header~~ (and then remove one dependency on SofaBaseTopology) (see discussion #242 ) (actually instead of removing, I used an existing #ifdef macro); - add forgotten Windows macro to export specialized functions into DLLs. This should not break any API compatibility or compilation (hopefully). ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings nor unit test failures.; - [x] does not break existing scenes.; - [x] does not break API compatibility.; - [x] has been reviewed.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/249
https://github.com/sofa-framework/sofa/pull/250:565,Availability,failure,failures,565,Problem:; The implementation of getRelativePath is broken as it returns the current; value which can be either a relative or an absolute path. Solution:; The new implementation is building a real relative path against the path contained; in the DataRepository. I also added few test for DataFileName to valide the different behaviors. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings nor unit test failures.; - [x] does not break existing scenes.; - [x] does not break API compatibility.; - [x] has been reviewed.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/250
https://github.com/sofa-framework/sofa/pull/250:434,Integrability,message,message,434,Problem:; The implementation of getRelativePath is broken as it returns the current; value which can be either a relative or an absolute path. Solution:; The new implementation is building a real relative path against the path contained; in the DataRepository. I also added few test for DataFileName to valide the different behaviors. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings nor unit test failures.; - [x] does not break existing scenes.; - [x] does not break API compatibility.; - [x] has been reviewed.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/250
https://github.com/sofa-framework/sofa/pull/250:278,Testability,test,test,278,Problem:; The implementation of getRelativePath is broken as it returns the current; value which can be either a relative or an absolute path. Solution:; The new implementation is building a real relative path against the path contained; in the DataRepository. I also added few test for DataFileName to valide the different behaviors. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings nor unit test failures.; - [x] does not break existing scenes.; - [x] does not break API compatibility.; - [x] has been reviewed.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/250
https://github.com/sofa-framework/sofa/pull/250:560,Testability,test,test,560,Problem:; The implementation of getRelativePath is broken as it returns the current; value which can be either a relative or an absolute path. Solution:; The new implementation is building a real relative path against the path contained; in the DataRepository. I also added few test for DataFileName to valide the different behaviors. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings nor unit test failures.; - [x] does not break existing scenes.; - [x] does not break API compatibility.; - [x] has been reviewed.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/250
https://github.com/sofa-framework/sofa/issues/251:38,Integrability,depend,dependencies,38,"DiscreteIntersection class has direct dependencies to ""not common"" collision primitives such as RigidSphereModel, CapsuleModel, OBBModel, CylinderModel .... and registers itself the possible intersectors between those primitives.; It seems it has been added for an ad-hoc code at some point in the past, and should be isolated like mesh primitives (line, triangle) in the module SofaMeshCollision. I propose to : ; - move the code related to those primitives into an other *Intersection class ; - DiscreteIntersection only registers Sphere/Cube primitives intersectors (or even move those intersectors to a new class). ______________________________________________________. Suggested labels: <!--- see https://github.com/sofa-framework/sofa/labels -->",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/251
https://github.com/sofa-framework/sofa/pull/252:353,Availability,failure,failures,353,"This PR add:; Initialization of helper::vector using {}. Example:; helper::vector< double > vec1 = {5,4,7,1,2};; helper::vector<helper::vector< double >> vec2 = {{5,4},{7,1,2}};; ______________________________________________________. This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings nor unit test failures.; - [x] does not break existing scenes.; - [x] does not break API compatibility.; - [x] has been reviewed.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/252
https://github.com/sofa-framework/sofa/pull/252:348,Testability,test,test,348,"This PR add:; Initialization of helper::vector using {}. Example:; helper::vector< double > vec1 = {5,4,7,1,2};; helper::vector<helper::vector< double >> vec2 = {{5,4},{7,1,2}};; ______________________________________________________. This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings nor unit test failures.; - [x] does not break existing scenes.; - [x] does not break API compatibility.; - [x] has been reviewed.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/252
https://github.com/sofa-framework/sofa/pull/253:1025,Availability,failure,failures,1025,"This PR adds the ability to autoload plugins, i.e without the need to add ""RequiredPlugin"" in each scene file.; This is especially useful for ""essential"" plugins such as SofaPython.; For now, only SofaPython is marked as ""Autoloadable"". An other future PR will activate CImgPlugin to add image loading (and remove ImagePNG/ImageBMP from SofaKernel). ""Main"" programs just needs to add the line : ; `sofa::helper::system::PluginManager::getInstance().autoloadPlugins();`. Important Changes:; * autoload API in Plugin ""interface""; * remove hard loading of SofaPython in runSofa; * add a new commandline in runSofa to disable autoloading of plugins (enable by default); * add a test; * (not really related to the PR but could be useful) add an helper function to check if a file is a symbolic link. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings nor unit test failures.; - [ ] does not break existing scenes.; - [ ] does not break API compatibility.; - [ ] has been reviewed and agreed to be transitional.; - [ ] is more than 1 week old (or has fast-merge label).; - [ ] reports important changes in Changelog. **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/253
https://github.com/sofa-framework/sofa/pull/253:516,Integrability,interface,interface,516,"This PR adds the ability to autoload plugins, i.e without the need to add ""RequiredPlugin"" in each scene file.; This is especially useful for ""essential"" plugins such as SofaPython.; For now, only SofaPython is marked as ""Autoloadable"". An other future PR will activate CImgPlugin to add image loading (and remove ImagePNG/ImageBMP from SofaKernel). ""Main"" programs just needs to add the line : ; `sofa::helper::system::PluginManager::getInstance().autoloadPlugins();`. Important Changes:; * autoload API in Plugin ""interface""; * remove hard loading of SofaPython in runSofa; * add a new commandline in runSofa to disable autoloading of plugins (enable by default); * add a test; * (not really related to the PR but could be useful) add an helper function to check if a file is a symbolic link. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings nor unit test failures.; - [ ] does not break existing scenes.; - [ ] does not break API compatibility.; - [ ] has been reviewed and agreed to be transitional.; - [ ] is more than 1 week old (or has fast-merge label).; - [ ] reports important changes in Changelog. **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/253
https://github.com/sofa-framework/sofa/pull/253:894,Integrability,message,message,894,"This PR adds the ability to autoload plugins, i.e without the need to add ""RequiredPlugin"" in each scene file.; This is especially useful for ""essential"" plugins such as SofaPython.; For now, only SofaPython is marked as ""Autoloadable"". An other future PR will activate CImgPlugin to add image loading (and remove ImagePNG/ImageBMP from SofaKernel). ""Main"" programs just needs to add the line : ; `sofa::helper::system::PluginManager::getInstance().autoloadPlugins();`. Important Changes:; * autoload API in Plugin ""interface""; * remove hard loading of SofaPython in runSofa; * add a new commandline in runSofa to disable autoloading of plugins (enable by default); * add a test; * (not really related to the PR but could be useful) add an helper function to check if a file is a symbolic link. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings nor unit test failures.; - [ ] does not break existing scenes.; - [ ] does not break API compatibility.; - [ ] has been reviewed and agreed to be transitional.; - [ ] is more than 1 week old (or has fast-merge label).; - [ ] reports important changes in Changelog. **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/253
https://github.com/sofa-framework/sofa/pull/253:37,Modifiability,plugin,plugins,37,"This PR adds the ability to autoload plugins, i.e without the need to add ""RequiredPlugin"" in each scene file.; This is especially useful for ""essential"" plugins such as SofaPython.; For now, only SofaPython is marked as ""Autoloadable"". An other future PR will activate CImgPlugin to add image loading (and remove ImagePNG/ImageBMP from SofaKernel). ""Main"" programs just needs to add the line : ; `sofa::helper::system::PluginManager::getInstance().autoloadPlugins();`. Important Changes:; * autoload API in Plugin ""interface""; * remove hard loading of SofaPython in runSofa; * add a new commandline in runSofa to disable autoloading of plugins (enable by default); * add a test; * (not really related to the PR but could be useful) add an helper function to check if a file is a symbolic link. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings nor unit test failures.; - [ ] does not break existing scenes.; - [ ] does not break API compatibility.; - [ ] has been reviewed and agreed to be transitional.; - [ ] is more than 1 week old (or has fast-merge label).; - [ ] reports important changes in Changelog. **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/253
https://github.com/sofa-framework/sofa/pull/253:154,Modifiability,plugin,plugins,154,"This PR adds the ability to autoload plugins, i.e without the need to add ""RequiredPlugin"" in each scene file.; This is especially useful for ""essential"" plugins such as SofaPython.; For now, only SofaPython is marked as ""Autoloadable"". An other future PR will activate CImgPlugin to add image loading (and remove ImagePNG/ImageBMP from SofaKernel). ""Main"" programs just needs to add the line : ; `sofa::helper::system::PluginManager::getInstance().autoloadPlugins();`. Important Changes:; * autoload API in Plugin ""interface""; * remove hard loading of SofaPython in runSofa; * add a new commandline in runSofa to disable autoloading of plugins (enable by default); * add a test; * (not really related to the PR but could be useful) add an helper function to check if a file is a symbolic link. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings nor unit test failures.; - [ ] does not break existing scenes.; - [ ] does not break API compatibility.; - [ ] has been reviewed and agreed to be transitional.; - [ ] is more than 1 week old (or has fast-merge label).; - [ ] reports important changes in Changelog. **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/253
https://github.com/sofa-framework/sofa/pull/253:420,Modifiability,Plugin,PluginManager,420,"This PR adds the ability to autoload plugins, i.e without the need to add ""RequiredPlugin"" in each scene file.; This is especially useful for ""essential"" plugins such as SofaPython.; For now, only SofaPython is marked as ""Autoloadable"". An other future PR will activate CImgPlugin to add image loading (and remove ImagePNG/ImageBMP from SofaKernel). ""Main"" programs just needs to add the line : ; `sofa::helper::system::PluginManager::getInstance().autoloadPlugins();`. Important Changes:; * autoload API in Plugin ""interface""; * remove hard loading of SofaPython in runSofa; * add a new commandline in runSofa to disable autoloading of plugins (enable by default); * add a test; * (not really related to the PR but could be useful) add an helper function to check if a file is a symbolic link. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings nor unit test failures.; - [ ] does not break existing scenes.; - [ ] does not break API compatibility.; - [ ] has been reviewed and agreed to be transitional.; - [ ] is more than 1 week old (or has fast-merge label).; - [ ] reports important changes in Changelog. **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/253
https://github.com/sofa-framework/sofa/pull/253:508,Modifiability,Plugin,Plugin,508,"This PR adds the ability to autoload plugins, i.e without the need to add ""RequiredPlugin"" in each scene file.; This is especially useful for ""essential"" plugins such as SofaPython.; For now, only SofaPython is marked as ""Autoloadable"". An other future PR will activate CImgPlugin to add image loading (and remove ImagePNG/ImageBMP from SofaKernel). ""Main"" programs just needs to add the line : ; `sofa::helper::system::PluginManager::getInstance().autoloadPlugins();`. Important Changes:; * autoload API in Plugin ""interface""; * remove hard loading of SofaPython in runSofa; * add a new commandline in runSofa to disable autoloading of plugins (enable by default); * add a test; * (not really related to the PR but could be useful) add an helper function to check if a file is a symbolic link. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings nor unit test failures.; - [ ] does not break existing scenes.; - [ ] does not break API compatibility.; - [ ] has been reviewed and agreed to be transitional.; - [ ] is more than 1 week old (or has fast-merge label).; - [ ] reports important changes in Changelog. **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/253
https://github.com/sofa-framework/sofa/pull/253:637,Modifiability,plugin,plugins,637,"This PR adds the ability to autoload plugins, i.e without the need to add ""RequiredPlugin"" in each scene file.; This is especially useful for ""essential"" plugins such as SofaPython.; For now, only SofaPython is marked as ""Autoloadable"". An other future PR will activate CImgPlugin to add image loading (and remove ImagePNG/ImageBMP from SofaKernel). ""Main"" programs just needs to add the line : ; `sofa::helper::system::PluginManager::getInstance().autoloadPlugins();`. Important Changes:; * autoload API in Plugin ""interface""; * remove hard loading of SofaPython in runSofa; * add a new commandline in runSofa to disable autoloading of plugins (enable by default); * add a test; * (not really related to the PR but could be useful) add an helper function to check if a file is a symbolic link. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings nor unit test failures.; - [ ] does not break existing scenes.; - [ ] does not break API compatibility.; - [ ] has been reviewed and agreed to be transitional.; - [ ] is more than 1 week old (or has fast-merge label).; - [ ] reports important changes in Changelog. **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/253
https://github.com/sofa-framework/sofa/pull/253:294,Performance,load,loading,294,"This PR adds the ability to autoload plugins, i.e without the need to add ""RequiredPlugin"" in each scene file.; This is especially useful for ""essential"" plugins such as SofaPython.; For now, only SofaPython is marked as ""Autoloadable"". An other future PR will activate CImgPlugin to add image loading (and remove ImagePNG/ImageBMP from SofaKernel). ""Main"" programs just needs to add the line : ; `sofa::helper::system::PluginManager::getInstance().autoloadPlugins();`. Important Changes:; * autoload API in Plugin ""interface""; * remove hard loading of SofaPython in runSofa; * add a new commandline in runSofa to disable autoloading of plugins (enable by default); * add a test; * (not really related to the PR but could be useful) add an helper function to check if a file is a symbolic link. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings nor unit test failures.; - [ ] does not break existing scenes.; - [ ] does not break API compatibility.; - [ ] has been reviewed and agreed to be transitional.; - [ ] is more than 1 week old (or has fast-merge label).; - [ ] reports important changes in Changelog. **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/253
https://github.com/sofa-framework/sofa/pull/253:542,Performance,load,loading,542,"This PR adds the ability to autoload plugins, i.e without the need to add ""RequiredPlugin"" in each scene file.; This is especially useful for ""essential"" plugins such as SofaPython.; For now, only SofaPython is marked as ""Autoloadable"". An other future PR will activate CImgPlugin to add image loading (and remove ImagePNG/ImageBMP from SofaKernel). ""Main"" programs just needs to add the line : ; `sofa::helper::system::PluginManager::getInstance().autoloadPlugins();`. Important Changes:; * autoload API in Plugin ""interface""; * remove hard loading of SofaPython in runSofa; * add a new commandline in runSofa to disable autoloading of plugins (enable by default); * add a test; * (not really related to the PR but could be useful) add an helper function to check if a file is a symbolic link. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings nor unit test failures.; - [ ] does not break existing scenes.; - [ ] does not break API compatibility.; - [ ] has been reviewed and agreed to be transitional.; - [ ] is more than 1 week old (or has fast-merge label).; - [ ] reports important changes in Changelog. **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/253
https://github.com/sofa-framework/sofa/pull/253:674,Testability,test,test,674,"This PR adds the ability to autoload plugins, i.e without the need to add ""RequiredPlugin"" in each scene file.; This is especially useful for ""essential"" plugins such as SofaPython.; For now, only SofaPython is marked as ""Autoloadable"". An other future PR will activate CImgPlugin to add image loading (and remove ImagePNG/ImageBMP from SofaKernel). ""Main"" programs just needs to add the line : ; `sofa::helper::system::PluginManager::getInstance().autoloadPlugins();`. Important Changes:; * autoload API in Plugin ""interface""; * remove hard loading of SofaPython in runSofa; * add a new commandline in runSofa to disable autoloading of plugins (enable by default); * add a test; * (not really related to the PR but could be useful) add an helper function to check if a file is a symbolic link. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings nor unit test failures.; - [ ] does not break existing scenes.; - [ ] does not break API compatibility.; - [ ] has been reviewed and agreed to be transitional.; - [ ] is more than 1 week old (or has fast-merge label).; - [ ] reports important changes in Changelog. **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/253
https://github.com/sofa-framework/sofa/pull/253:1020,Testability,test,test,1020,"This PR adds the ability to autoload plugins, i.e without the need to add ""RequiredPlugin"" in each scene file.; This is especially useful for ""essential"" plugins such as SofaPython.; For now, only SofaPython is marked as ""Autoloadable"". An other future PR will activate CImgPlugin to add image loading (and remove ImagePNG/ImageBMP from SofaKernel). ""Main"" programs just needs to add the line : ; `sofa::helper::system::PluginManager::getInstance().autoloadPlugins();`. Important Changes:; * autoload API in Plugin ""interface""; * remove hard loading of SofaPython in runSofa; * add a new commandline in runSofa to disable autoloading of plugins (enable by default); * add a test; * (not really related to the PR but could be useful) add an helper function to check if a file is a symbolic link. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings nor unit test failures.; - [ ] does not break existing scenes.; - [ ] does not break API compatibility.; - [ ] has been reviewed and agreed to be transitional.; - [ ] is more than 1 week old (or has fast-merge label).; - [ ] reports important changes in Changelog. **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/253
https://github.com/sofa-framework/sofa/pull/254:605,Availability,failure,failures,605,"This PR adds the cmake option ""NINJA_BUILD_POOL_FLEXIBLE"" which limits the number of CPU cores used to build the Flexible target (default value: 1). Can be easily replicated to other projects as needed. ; This is only effective when using Ninja.; This will make possible to optimize the number of build threads without hitting the RAM limit on CI, but also on workstations.; ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings nor unit test failures.; - [x] does not break existing scenes.; - [x] does not break API compatibility.; - [x] has been reviewed and agreed to be transitional.; - [ ] is more than 1 week old (or has fast-merge label).; - [ ] reports important changes in Changelog. **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/254
https://github.com/sofa-framework/sofa/pull/254:474,Integrability,message,message,474,"This PR adds the cmake option ""NINJA_BUILD_POOL_FLEXIBLE"" which limits the number of CPU cores used to build the Flexible target (default value: 1). Can be easily replicated to other projects as needed. ; This is only effective when using Ninja.; This will make possible to optimize the number of build threads without hitting the RAM limit on CI, but also on workstations.; ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings nor unit test failures.; - [x] does not break existing scenes.; - [x] does not break API compatibility.; - [x] has been reviewed and agreed to be transitional.; - [ ] is more than 1 week old (or has fast-merge label).; - [ ] reports important changes in Changelog. **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/254
https://github.com/sofa-framework/sofa/pull/254:113,Modifiability,Flexible,Flexible,113,"This PR adds the cmake option ""NINJA_BUILD_POOL_FLEXIBLE"" which limits the number of CPU cores used to build the Flexible target (default value: 1). Can be easily replicated to other projects as needed. ; This is only effective when using Ninja.; This will make possible to optimize the number of build threads without hitting the RAM limit on CI, but also on workstations.; ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings nor unit test failures.; - [x] does not break existing scenes.; - [x] does not break API compatibility.; - [x] has been reviewed and agreed to be transitional.; - [ ] is more than 1 week old (or has fast-merge label).; - [ ] reports important changes in Changelog. **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/254
https://github.com/sofa-framework/sofa/pull/254:274,Performance,optimiz,optimize,274,"This PR adds the cmake option ""NINJA_BUILD_POOL_FLEXIBLE"" which limits the number of CPU cores used to build the Flexible target (default value: 1). Can be easily replicated to other projects as needed. ; This is only effective when using Ninja.; This will make possible to optimize the number of build threads without hitting the RAM limit on CI, but also on workstations.; ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings nor unit test failures.; - [x] does not break existing scenes.; - [x] does not break API compatibility.; - [x] has been reviewed and agreed to be transitional.; - [ ] is more than 1 week old (or has fast-merge label).; - [ ] reports important changes in Changelog. **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/254
https://github.com/sofa-framework/sofa/pull/254:600,Testability,test,test,600,"This PR adds the cmake option ""NINJA_BUILD_POOL_FLEXIBLE"" which limits the number of CPU cores used to build the Flexible target (default value: 1). Can be easily replicated to other projects as needed. ; This is only effective when using Ninja.; This will make possible to optimize the number of build threads without hitting the RAM limit on CI, but also on workstations.; ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings nor unit test failures.; - [x] does not break existing scenes.; - [x] does not break API compatibility.; - [x] has been reviewed and agreed to be transitional.; - [ ] is more than 1 week old (or has fast-merge label).; - [ ] reports important changes in Changelog. **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/254
https://github.com/sofa-framework/sofa/pull/255:818,Availability,failure,failures,818,When I have free time but cannot be concentrated I do trivial 'cleaning' changes resulting in this kind of PR where I replaced the std::cout by msg_info. CHANGELOG for @hugtalbot :; Trivial replacement of std::cout by msg_info; - [SofaUserInteraction] ; - [SofaValidation]; - [SofaVolumetricData]; - [SofaOpenGl]; - [SofaNonUniformFem]; - [SofaPython]; - [SofaSparseSolver]; - [SofaSphFluid]; - [SofaTopology]; - [SofaUserInteraction]. I also replaced this code pattern:; ```cpp; #ifndef NDEBUG; std::cout << blahblah; #endif; ```. into this pattern:; ```cpp; dmsg_info() << ; ....; ```; ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings nor unit test failures.; - [x] does not break existing scenes.; - [x] does not break API compatibility.; - [x] has been reviewed; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/255
https://github.com/sofa-framework/sofa/pull/255:687,Integrability,message,message,687,When I have free time but cannot be concentrated I do trivial 'cleaning' changes resulting in this kind of PR where I replaced the std::cout by msg_info. CHANGELOG for @hugtalbot :; Trivial replacement of std::cout by msg_info; - [SofaUserInteraction] ; - [SofaValidation]; - [SofaVolumetricData]; - [SofaOpenGl]; - [SofaNonUniformFem]; - [SofaPython]; - [SofaSparseSolver]; - [SofaSphFluid]; - [SofaTopology]; - [SofaUserInteraction]. I also replaced this code pattern:; ```cpp; #ifndef NDEBUG; std::cout << blahblah; #endif; ```. into this pattern:; ```cpp; dmsg_info() << ; ....; ```; ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings nor unit test failures.; - [x] does not break existing scenes.; - [x] does not break API compatibility.; - [x] has been reviewed; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/255
https://github.com/sofa-framework/sofa/pull/255:813,Testability,test,test,813,When I have free time but cannot be concentrated I do trivial 'cleaning' changes resulting in this kind of PR where I replaced the std::cout by msg_info. CHANGELOG for @hugtalbot :; Trivial replacement of std::cout by msg_info; - [SofaUserInteraction] ; - [SofaValidation]; - [SofaVolumetricData]; - [SofaOpenGl]; - [SofaNonUniformFem]; - [SofaPython]; - [SofaSparseSolver]; - [SofaSphFluid]; - [SofaTopology]; - [SofaUserInteraction]. I also replaced this code pattern:; ```cpp; #ifndef NDEBUG; std::cout << blahblah; #endif; ```. into this pattern:; ```cpp; dmsg_info() << ; ....; ```; ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings nor unit test failures.; - [x] does not break existing scenes.; - [x] does not break API compatibility.; - [x] has been reviewed; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/255
https://github.com/sofa-framework/sofa/pull/256:71,Testability,test,test,71,Reverts sofa-framework/sofa#219 because it introduce regression on the test scene.,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/256
https://github.com/sofa-framework/sofa/pull/257:270,Availability,failure,failure,270,Problem:; MessageDispatcher is not thread safe as showned with the failing test named ; testThreading_OpenIssue. This PR:; - the MessageDispatcher is now thread safe so we can emit messages from different threads. ; - the test is not an OpenIssue anymore and its future failure should be considered as regression. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings nor unit test failures.; - [x] does not break existing scenes.; - [x] does not break API compatibility.; - [x] has been reviewed ; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/257
https://github.com/sofa-framework/sofa/pull/257:544,Availability,failure,failures,544,Problem:; MessageDispatcher is not thread safe as showned with the failing test named ; testThreading_OpenIssue. This PR:; - the MessageDispatcher is now thread safe so we can emit messages from different threads. ; - the test is not an OpenIssue anymore and its future failure should be considered as regression. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings nor unit test failures.; - [x] does not break existing scenes.; - [x] does not break API compatibility.; - [x] has been reviewed ; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/257
https://github.com/sofa-framework/sofa/pull/257:10,Integrability,Message,MessageDispatcher,10,Problem:; MessageDispatcher is not thread safe as showned with the failing test named ; testThreading_OpenIssue. This PR:; - the MessageDispatcher is now thread safe so we can emit messages from different threads. ; - the test is not an OpenIssue anymore and its future failure should be considered as regression. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings nor unit test failures.; - [x] does not break existing scenes.; - [x] does not break API compatibility.; - [x] has been reviewed ; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/257
https://github.com/sofa-framework/sofa/pull/257:129,Integrability,Message,MessageDispatcher,129,Problem:; MessageDispatcher is not thread safe as showned with the failing test named ; testThreading_OpenIssue. This PR:; - the MessageDispatcher is now thread safe so we can emit messages from different threads. ; - the test is not an OpenIssue anymore and its future failure should be considered as regression. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings nor unit test failures.; - [x] does not break existing scenes.; - [x] does not break API compatibility.; - [x] has been reviewed ; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/257
https://github.com/sofa-framework/sofa/pull/257:181,Integrability,message,messages,181,Problem:; MessageDispatcher is not thread safe as showned with the failing test named ; testThreading_OpenIssue. This PR:; - the MessageDispatcher is now thread safe so we can emit messages from different threads. ; - the test is not an OpenIssue anymore and its future failure should be considered as regression. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings nor unit test failures.; - [x] does not break existing scenes.; - [x] does not break API compatibility.; - [x] has been reviewed ; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/257
https://github.com/sofa-framework/sofa/pull/257:413,Integrability,message,message,413,Problem:; MessageDispatcher is not thread safe as showned with the failing test named ; testThreading_OpenIssue. This PR:; - the MessageDispatcher is now thread safe so we can emit messages from different threads. ; - the test is not an OpenIssue anymore and its future failure should be considered as regression. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings nor unit test failures.; - [x] does not break existing scenes.; - [x] does not break API compatibility.; - [x] has been reviewed ; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/257
https://github.com/sofa-framework/sofa/pull/257:42,Safety,safe,safe,42,Problem:; MessageDispatcher is not thread safe as showned with the failing test named ; testThreading_OpenIssue. This PR:; - the MessageDispatcher is now thread safe so we can emit messages from different threads. ; - the test is not an OpenIssue anymore and its future failure should be considered as regression. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings nor unit test failures.; - [x] does not break existing scenes.; - [x] does not break API compatibility.; - [x] has been reviewed ; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/257
https://github.com/sofa-framework/sofa/pull/257:161,Safety,safe,safe,161,Problem:; MessageDispatcher is not thread safe as showned with the failing test named ; testThreading_OpenIssue. This PR:; - the MessageDispatcher is now thread safe so we can emit messages from different threads. ; - the test is not an OpenIssue anymore and its future failure should be considered as regression. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings nor unit test failures.; - [x] does not break existing scenes.; - [x] does not break API compatibility.; - [x] has been reviewed ; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/257
https://github.com/sofa-framework/sofa/pull/257:75,Testability,test,test,75,Problem:; MessageDispatcher is not thread safe as showned with the failing test named ; testThreading_OpenIssue. This PR:; - the MessageDispatcher is now thread safe so we can emit messages from different threads. ; - the test is not an OpenIssue anymore and its future failure should be considered as regression. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings nor unit test failures.; - [x] does not break existing scenes.; - [x] does not break API compatibility.; - [x] has been reviewed ; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/257
https://github.com/sofa-framework/sofa/pull/257:222,Testability,test,test,222,Problem:; MessageDispatcher is not thread safe as showned with the failing test named ; testThreading_OpenIssue. This PR:; - the MessageDispatcher is now thread safe so we can emit messages from different threads. ; - the test is not an OpenIssue anymore and its future failure should be considered as regression. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings nor unit test failures.; - [x] does not break existing scenes.; - [x] does not break API compatibility.; - [x] has been reviewed ; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/257
https://github.com/sofa-framework/sofa/pull/257:539,Testability,test,test,539,Problem:; MessageDispatcher is not thread safe as showned with the failing test named ; testThreading_OpenIssue. This PR:; - the MessageDispatcher is now thread safe so we can emit messages from different threads. ; - the test is not an OpenIssue anymore and its future failure should be considered as regression. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings nor unit test failures.; - [x] does not break existing scenes.; - [x] does not break API compatibility.; - [x] has been reviewed ; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/257
https://github.com/sofa-framework/sofa/pull/258:1114,Availability,failure,failures,1114,"This is the Defrost week contribution in cleaning & testing. CHANGE for Hugo:; - [FileMonitor] fix the recurrent problem with file 'SofaKernel/framework/framework_test/resources/existing.txt' pointed in Issue https://github.com/sofa-framework/sofa/issues/146; - [ConstantForceField] clean to follow sofa guideline & fix the ""visible dependencies"", ; - [ConstantForceField] replace the ""points"" attribute by ""indices"" (with backward compatibility & deprecation message); - [ConstantForceField] add test in ConstantForceField_test, some of them are OpenIssue demonstrating existing problem (as crashing sofa when using negative (or too large) values in indices). ; - [Light] clean and strenghening the interface; - [Light] add tests ; - [DefaultAnimationLoop] add tests; - [LocalMinDistance] add tests; - [RequiredPlugin] add tests; - [ClipPlane] add tests; - [DistanceGrid] add tests. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings nor unit test failures.; - [ ] does not break existing scenes.; - [ ] does not break API compatibility.; - [x] has been reviewed and agreed to be transitional.; - [ ] is more than 1 week old (or has fast-merge label).; - [ ] reports important changes in Changelog. **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/258
https://github.com/sofa-framework/sofa/pull/258:333,Integrability,depend,dependencies,333,"This is the Defrost week contribution in cleaning & testing. CHANGE for Hugo:; - [FileMonitor] fix the recurrent problem with file 'SofaKernel/framework/framework_test/resources/existing.txt' pointed in Issue https://github.com/sofa-framework/sofa/issues/146; - [ConstantForceField] clean to follow sofa guideline & fix the ""visible dependencies"", ; - [ConstantForceField] replace the ""points"" attribute by ""indices"" (with backward compatibility & deprecation message); - [ConstantForceField] add test in ConstantForceField_test, some of them are OpenIssue demonstrating existing problem (as crashing sofa when using negative (or too large) values in indices). ; - [Light] clean and strenghening the interface; - [Light] add tests ; - [DefaultAnimationLoop] add tests; - [LocalMinDistance] add tests; - [RequiredPlugin] add tests; - [ClipPlane] add tests; - [DistanceGrid] add tests. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings nor unit test failures.; - [ ] does not break existing scenes.; - [ ] does not break API compatibility.; - [x] has been reviewed and agreed to be transitional.; - [ ] is more than 1 week old (or has fast-merge label).; - [ ] reports important changes in Changelog. **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/258
https://github.com/sofa-framework/sofa/pull/258:460,Integrability,message,message,460,"This is the Defrost week contribution in cleaning & testing. CHANGE for Hugo:; - [FileMonitor] fix the recurrent problem with file 'SofaKernel/framework/framework_test/resources/existing.txt' pointed in Issue https://github.com/sofa-framework/sofa/issues/146; - [ConstantForceField] clean to follow sofa guideline & fix the ""visible dependencies"", ; - [ConstantForceField] replace the ""points"" attribute by ""indices"" (with backward compatibility & deprecation message); - [ConstantForceField] add test in ConstantForceField_test, some of them are OpenIssue demonstrating existing problem (as crashing sofa when using negative (or too large) values in indices). ; - [Light] clean and strenghening the interface; - [Light] add tests ; - [DefaultAnimationLoop] add tests; - [LocalMinDistance] add tests; - [RequiredPlugin] add tests; - [ClipPlane] add tests; - [DistanceGrid] add tests. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings nor unit test failures.; - [ ] does not break existing scenes.; - [ ] does not break API compatibility.; - [x] has been reviewed and agreed to be transitional.; - [ ] is more than 1 week old (or has fast-merge label).; - [ ] reports important changes in Changelog. **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/258
https://github.com/sofa-framework/sofa/pull/258:700,Integrability,interface,interface,700,"This is the Defrost week contribution in cleaning & testing. CHANGE for Hugo:; - [FileMonitor] fix the recurrent problem with file 'SofaKernel/framework/framework_test/resources/existing.txt' pointed in Issue https://github.com/sofa-framework/sofa/issues/146; - [ConstantForceField] clean to follow sofa guideline & fix the ""visible dependencies"", ; - [ConstantForceField] replace the ""points"" attribute by ""indices"" (with backward compatibility & deprecation message); - [ConstantForceField] add test in ConstantForceField_test, some of them are OpenIssue demonstrating existing problem (as crashing sofa when using negative (or too large) values in indices). ; - [Light] clean and strenghening the interface; - [Light] add tests ; - [DefaultAnimationLoop] add tests; - [LocalMinDistance] add tests; - [RequiredPlugin] add tests; - [ClipPlane] add tests; - [DistanceGrid] add tests. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings nor unit test failures.; - [ ] does not break existing scenes.; - [ ] does not break API compatibility.; - [x] has been reviewed and agreed to be transitional.; - [ ] is more than 1 week old (or has fast-merge label).; - [ ] reports important changes in Changelog. **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/258
https://github.com/sofa-framework/sofa/pull/258:983,Integrability,message,message,983,"This is the Defrost week contribution in cleaning & testing. CHANGE for Hugo:; - [FileMonitor] fix the recurrent problem with file 'SofaKernel/framework/framework_test/resources/existing.txt' pointed in Issue https://github.com/sofa-framework/sofa/issues/146; - [ConstantForceField] clean to follow sofa guideline & fix the ""visible dependencies"", ; - [ConstantForceField] replace the ""points"" attribute by ""indices"" (with backward compatibility & deprecation message); - [ConstantForceField] add test in ConstantForceField_test, some of them are OpenIssue demonstrating existing problem (as crashing sofa when using negative (or too large) values in indices). ; - [Light] clean and strenghening the interface; - [Light] add tests ; - [DefaultAnimationLoop] add tests; - [LocalMinDistance] add tests; - [RequiredPlugin] add tests; - [ClipPlane] add tests; - [DistanceGrid] add tests. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings nor unit test failures.; - [ ] does not break existing scenes.; - [ ] does not break API compatibility.; - [x] has been reviewed and agreed to be transitional.; - [ ] is more than 1 week old (or has fast-merge label).; - [ ] reports important changes in Changelog. **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/258
https://github.com/sofa-framework/sofa/pull/258:52,Testability,test,testing,52,"This is the Defrost week contribution in cleaning & testing. CHANGE for Hugo:; - [FileMonitor] fix the recurrent problem with file 'SofaKernel/framework/framework_test/resources/existing.txt' pointed in Issue https://github.com/sofa-framework/sofa/issues/146; - [ConstantForceField] clean to follow sofa guideline & fix the ""visible dependencies"", ; - [ConstantForceField] replace the ""points"" attribute by ""indices"" (with backward compatibility & deprecation message); - [ConstantForceField] add test in ConstantForceField_test, some of them are OpenIssue demonstrating existing problem (as crashing sofa when using negative (or too large) values in indices). ; - [Light] clean and strenghening the interface; - [Light] add tests ; - [DefaultAnimationLoop] add tests; - [LocalMinDistance] add tests; - [RequiredPlugin] add tests; - [ClipPlane] add tests; - [DistanceGrid] add tests. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings nor unit test failures.; - [ ] does not break existing scenes.; - [ ] does not break API compatibility.; - [x] has been reviewed and agreed to be transitional.; - [ ] is more than 1 week old (or has fast-merge label).; - [ ] reports important changes in Changelog. **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/258
https://github.com/sofa-framework/sofa/pull/258:497,Testability,test,test,497,"This is the Defrost week contribution in cleaning & testing. CHANGE for Hugo:; - [FileMonitor] fix the recurrent problem with file 'SofaKernel/framework/framework_test/resources/existing.txt' pointed in Issue https://github.com/sofa-framework/sofa/issues/146; - [ConstantForceField] clean to follow sofa guideline & fix the ""visible dependencies"", ; - [ConstantForceField] replace the ""points"" attribute by ""indices"" (with backward compatibility & deprecation message); - [ConstantForceField] add test in ConstantForceField_test, some of them are OpenIssue demonstrating existing problem (as crashing sofa when using negative (or too large) values in indices). ; - [Light] clean and strenghening the interface; - [Light] add tests ; - [DefaultAnimationLoop] add tests; - [LocalMinDistance] add tests; - [RequiredPlugin] add tests; - [ClipPlane] add tests; - [DistanceGrid] add tests. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings nor unit test failures.; - [ ] does not break existing scenes.; - [ ] does not break API compatibility.; - [x] has been reviewed and agreed to be transitional.; - [ ] is more than 1 week old (or has fast-merge label).; - [ ] reports important changes in Changelog. **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/258
https://github.com/sofa-framework/sofa/pull/258:725,Testability,test,tests,725,"This is the Defrost week contribution in cleaning & testing. CHANGE for Hugo:; - [FileMonitor] fix the recurrent problem with file 'SofaKernel/framework/framework_test/resources/existing.txt' pointed in Issue https://github.com/sofa-framework/sofa/issues/146; - [ConstantForceField] clean to follow sofa guideline & fix the ""visible dependencies"", ; - [ConstantForceField] replace the ""points"" attribute by ""indices"" (with backward compatibility & deprecation message); - [ConstantForceField] add test in ConstantForceField_test, some of them are OpenIssue demonstrating existing problem (as crashing sofa when using negative (or too large) values in indices). ; - [Light] clean and strenghening the interface; - [Light] add tests ; - [DefaultAnimationLoop] add tests; - [LocalMinDistance] add tests; - [RequiredPlugin] add tests; - [ClipPlane] add tests; - [DistanceGrid] add tests. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings nor unit test failures.; - [ ] does not break existing scenes.; - [ ] does not break API compatibility.; - [x] has been reviewed and agreed to be transitional.; - [ ] is more than 1 week old (or has fast-merge label).; - [ ] reports important changes in Changelog. **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/258
https://github.com/sofa-framework/sofa/pull/258:762,Testability,test,tests,762,"This is the Defrost week contribution in cleaning & testing. CHANGE for Hugo:; - [FileMonitor] fix the recurrent problem with file 'SofaKernel/framework/framework_test/resources/existing.txt' pointed in Issue https://github.com/sofa-framework/sofa/issues/146; - [ConstantForceField] clean to follow sofa guideline & fix the ""visible dependencies"", ; - [ConstantForceField] replace the ""points"" attribute by ""indices"" (with backward compatibility & deprecation message); - [ConstantForceField] add test in ConstantForceField_test, some of them are OpenIssue demonstrating existing problem (as crashing sofa when using negative (or too large) values in indices). ; - [Light] clean and strenghening the interface; - [Light] add tests ; - [DefaultAnimationLoop] add tests; - [LocalMinDistance] add tests; - [RequiredPlugin] add tests; - [ClipPlane] add tests; - [DistanceGrid] add tests. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings nor unit test failures.; - [ ] does not break existing scenes.; - [ ] does not break API compatibility.; - [x] has been reviewed and agreed to be transitional.; - [ ] is more than 1 week old (or has fast-merge label).; - [ ] reports important changes in Changelog. **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/258
https://github.com/sofa-framework/sofa/pull/258:794,Testability,test,tests,794,"This is the Defrost week contribution in cleaning & testing. CHANGE for Hugo:; - [FileMonitor] fix the recurrent problem with file 'SofaKernel/framework/framework_test/resources/existing.txt' pointed in Issue https://github.com/sofa-framework/sofa/issues/146; - [ConstantForceField] clean to follow sofa guideline & fix the ""visible dependencies"", ; - [ConstantForceField] replace the ""points"" attribute by ""indices"" (with backward compatibility & deprecation message); - [ConstantForceField] add test in ConstantForceField_test, some of them are OpenIssue demonstrating existing problem (as crashing sofa when using negative (or too large) values in indices). ; - [Light] clean and strenghening the interface; - [Light] add tests ; - [DefaultAnimationLoop] add tests; - [LocalMinDistance] add tests; - [RequiredPlugin] add tests; - [ClipPlane] add tests; - [DistanceGrid] add tests. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings nor unit test failures.; - [ ] does not break existing scenes.; - [ ] does not break API compatibility.; - [x] has been reviewed and agreed to be transitional.; - [ ] is more than 1 week old (or has fast-merge label).; - [ ] reports important changes in Changelog. **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/258
https://github.com/sofa-framework/sofa/pull/258:824,Testability,test,tests,824,"This is the Defrost week contribution in cleaning & testing. CHANGE for Hugo:; - [FileMonitor] fix the recurrent problem with file 'SofaKernel/framework/framework_test/resources/existing.txt' pointed in Issue https://github.com/sofa-framework/sofa/issues/146; - [ConstantForceField] clean to follow sofa guideline & fix the ""visible dependencies"", ; - [ConstantForceField] replace the ""points"" attribute by ""indices"" (with backward compatibility & deprecation message); - [ConstantForceField] add test in ConstantForceField_test, some of them are OpenIssue demonstrating existing problem (as crashing sofa when using negative (or too large) values in indices). ; - [Light] clean and strenghening the interface; - [Light] add tests ; - [DefaultAnimationLoop] add tests; - [LocalMinDistance] add tests; - [RequiredPlugin] add tests; - [ClipPlane] add tests; - [DistanceGrid] add tests. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings nor unit test failures.; - [ ] does not break existing scenes.; - [ ] does not break API compatibility.; - [x] has been reviewed and agreed to be transitional.; - [ ] is more than 1 week old (or has fast-merge label).; - [ ] reports important changes in Changelog. **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/258
https://github.com/sofa-framework/sofa/pull/258:849,Testability,test,tests,849,"This is the Defrost week contribution in cleaning & testing. CHANGE for Hugo:; - [FileMonitor] fix the recurrent problem with file 'SofaKernel/framework/framework_test/resources/existing.txt' pointed in Issue https://github.com/sofa-framework/sofa/issues/146; - [ConstantForceField] clean to follow sofa guideline & fix the ""visible dependencies"", ; - [ConstantForceField] replace the ""points"" attribute by ""indices"" (with backward compatibility & deprecation message); - [ConstantForceField] add test in ConstantForceField_test, some of them are OpenIssue demonstrating existing problem (as crashing sofa when using negative (or too large) values in indices). ; - [Light] clean and strenghening the interface; - [Light] add tests ; - [DefaultAnimationLoop] add tests; - [LocalMinDistance] add tests; - [RequiredPlugin] add tests; - [ClipPlane] add tests; - [DistanceGrid] add tests. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings nor unit test failures.; - [ ] does not break existing scenes.; - [ ] does not break API compatibility.; - [x] has been reviewed and agreed to be transitional.; - [ ] is more than 1 week old (or has fast-merge label).; - [ ] reports important changes in Changelog. **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/258
https://github.com/sofa-framework/sofa/pull/258:877,Testability,test,tests,877,"This is the Defrost week contribution in cleaning & testing. CHANGE for Hugo:; - [FileMonitor] fix the recurrent problem with file 'SofaKernel/framework/framework_test/resources/existing.txt' pointed in Issue https://github.com/sofa-framework/sofa/issues/146; - [ConstantForceField] clean to follow sofa guideline & fix the ""visible dependencies"", ; - [ConstantForceField] replace the ""points"" attribute by ""indices"" (with backward compatibility & deprecation message); - [ConstantForceField] add test in ConstantForceField_test, some of them are OpenIssue demonstrating existing problem (as crashing sofa when using negative (or too large) values in indices). ; - [Light] clean and strenghening the interface; - [Light] add tests ; - [DefaultAnimationLoop] add tests; - [LocalMinDistance] add tests; - [RequiredPlugin] add tests; - [ClipPlane] add tests; - [DistanceGrid] add tests. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings nor unit test failures.; - [ ] does not break existing scenes.; - [ ] does not break API compatibility.; - [x] has been reviewed and agreed to be transitional.; - [ ] is more than 1 week old (or has fast-merge label).; - [ ] reports important changes in Changelog. **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/258
https://github.com/sofa-framework/sofa/pull/258:1109,Testability,test,test,1109,"This is the Defrost week contribution in cleaning & testing. CHANGE for Hugo:; - [FileMonitor] fix the recurrent problem with file 'SofaKernel/framework/framework_test/resources/existing.txt' pointed in Issue https://github.com/sofa-framework/sofa/issues/146; - [ConstantForceField] clean to follow sofa guideline & fix the ""visible dependencies"", ; - [ConstantForceField] replace the ""points"" attribute by ""indices"" (with backward compatibility & deprecation message); - [ConstantForceField] add test in ConstantForceField_test, some of them are OpenIssue demonstrating existing problem (as crashing sofa when using negative (or too large) values in indices). ; - [Light] clean and strenghening the interface; - [Light] add tests ; - [DefaultAnimationLoop] add tests; - [LocalMinDistance] add tests; - [RequiredPlugin] add tests; - [ClipPlane] add tests; - [DistanceGrid] add tests. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings nor unit test failures.; - [ ] does not break existing scenes.; - [ ] does not break API compatibility.; - [x] has been reviewed and agreed to be transitional.; - [ ] is more than 1 week old (or has fast-merge label).; - [ ] reports important changes in Changelog. **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/258
https://github.com/sofa-framework/sofa/pull/258:304,Usability,guid,guideline,304,"This is the Defrost week contribution in cleaning & testing. CHANGE for Hugo:; - [FileMonitor] fix the recurrent problem with file 'SofaKernel/framework/framework_test/resources/existing.txt' pointed in Issue https://github.com/sofa-framework/sofa/issues/146; - [ConstantForceField] clean to follow sofa guideline & fix the ""visible dependencies"", ; - [ConstantForceField] replace the ""points"" attribute by ""indices"" (with backward compatibility & deprecation message); - [ConstantForceField] add test in ConstantForceField_test, some of them are OpenIssue demonstrating existing problem (as crashing sofa when using negative (or too large) values in indices). ; - [Light] clean and strenghening the interface; - [Light] add tests ; - [DefaultAnimationLoop] add tests; - [LocalMinDistance] add tests; - [RequiredPlugin] add tests; - [ClipPlane] add tests; - [DistanceGrid] add tests. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings nor unit test failures.; - [ ] does not break existing scenes.; - [ ] does not break API compatibility.; - [x] has been reviewed and agreed to be transitional.; - [ ] is more than 1 week old (or has fast-merge label).; - [ ] reports important changes in Changelog. **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/258
https://github.com/sofa-framework/sofa/pull/260:451,Availability,failure,failures,451,"Update CONTRIBUTING.md further to 20170503 SOFA meeting. - Track the status of each pull request using labels.; - If an issue reports a bug or any abnormal behavior in SOFA, a test highlighting the issue must be written. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings nor unit test failures.; - [x] does not break existing scenes.; - [x] does not break API compatibility.; - [x] has been reviewed.; - [x] is more than 1 week old (or has fast-merge label).; - [ ] reports important changes in Changelog. **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/260
https://github.com/sofa-framework/sofa/pull/260:0,Deployability,Update,Update,0,"Update CONTRIBUTING.md further to 20170503 SOFA meeting. - Track the status of each pull request using labels.; - If an issue reports a bug or any abnormal behavior in SOFA, a test highlighting the issue must be written. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings nor unit test failures.; - [x] does not break existing scenes.; - [x] does not break API compatibility.; - [x] has been reviewed.; - [x] is more than 1 week old (or has fast-merge label).; - [ ] reports important changes in Changelog. **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/260
https://github.com/sofa-framework/sofa/pull/260:320,Integrability,message,message,320,"Update CONTRIBUTING.md further to 20170503 SOFA meeting. - Track the status of each pull request using labels.; - If an issue reports a bug or any abnormal behavior in SOFA, a test highlighting the issue must be written. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings nor unit test failures.; - [x] does not break existing scenes.; - [x] does not break API compatibility.; - [x] has been reviewed.; - [x] is more than 1 week old (or has fast-merge label).; - [ ] reports important changes in Changelog. **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/260
https://github.com/sofa-framework/sofa/pull/260:176,Testability,test,test,176,"Update CONTRIBUTING.md further to 20170503 SOFA meeting. - Track the status of each pull request using labels.; - If an issue reports a bug or any abnormal behavior in SOFA, a test highlighting the issue must be written. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings nor unit test failures.; - [x] does not break existing scenes.; - [x] does not break API compatibility.; - [x] has been reviewed.; - [x] is more than 1 week old (or has fast-merge label).; - [ ] reports important changes in Changelog. **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/260
https://github.com/sofa-framework/sofa/pull/260:446,Testability,test,test,446,"Update CONTRIBUTING.md further to 20170503 SOFA meeting. - Track the status of each pull request using labels.; - If an issue reports a bug or any abnormal behavior in SOFA, a test highlighting the issue must be written. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings nor unit test failures.; - [x] does not break existing scenes.; - [x] does not break API compatibility.; - [x] has been reviewed.; - [x] is more than 1 week old (or has fast-merge label).; - [ ] reports important changes in Changelog. **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/260
https://github.com/sofa-framework/sofa/pull/261:785,Availability,failure,failures,785,Now 255 is merged I can write the CHANGELOG for @hugtalbot (thank for the reminder:)). CHANGELOG: ; Batch replacement of std::cout with msg_info or dmsg_info and some delete of commented lines in the following module:; [SofaBaseMechanic]; [SofaBaseTopology]; [SofaBoundaryCondition]; [SceneCreator] ; [SofaGeneralSimpleFEM]; [SofaConstraint]; [SofaGeneralVisual]; [SofaMisc]; [SofaMiscCollision]; [SofaMiscEngine]; [SofaMiscFEM]; [SofaMiscMapping]; [SofaMiscTopology]; [SofaOpenGLVisual] ; [SofaPrecontionner]; [SofaSparseSolver]; [SofaVolumetricData]; ; ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings nor unit test failures.; - [x] does not break existing scenes.; - [x] does not break API compatibility.; - [x] has been reviewed.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/261
https://github.com/sofa-framework/sofa/pull/261:654,Integrability,message,message,654,Now 255 is merged I can write the CHANGELOG for @hugtalbot (thank for the reminder:)). CHANGELOG: ; Batch replacement of std::cout with msg_info or dmsg_info and some delete of commented lines in the following module:; [SofaBaseMechanic]; [SofaBaseTopology]; [SofaBoundaryCondition]; [SceneCreator] ; [SofaGeneralSimpleFEM]; [SofaConstraint]; [SofaGeneralVisual]; [SofaMisc]; [SofaMiscCollision]; [SofaMiscEngine]; [SofaMiscFEM]; [SofaMiscMapping]; [SofaMiscTopology]; [SofaOpenGLVisual] ; [SofaPrecontionner]; [SofaSparseSolver]; [SofaVolumetricData]; ; ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings nor unit test failures.; - [x] does not break existing scenes.; - [x] does not break API compatibility.; - [x] has been reviewed.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/261
https://github.com/sofa-framework/sofa/pull/261:780,Testability,test,test,780,Now 255 is merged I can write the CHANGELOG for @hugtalbot (thank for the reminder:)). CHANGELOG: ; Batch replacement of std::cout with msg_info or dmsg_info and some delete of commented lines in the following module:; [SofaBaseMechanic]; [SofaBaseTopology]; [SofaBoundaryCondition]; [SceneCreator] ; [SofaGeneralSimpleFEM]; [SofaConstraint]; [SofaGeneralVisual]; [SofaMisc]; [SofaMiscCollision]; [SofaMiscEngine]; [SofaMiscFEM]; [SofaMiscMapping]; [SofaMiscTopology]; [SofaOpenGLVisual] ; [SofaPrecontionner]; [SofaSparseSolver]; [SofaVolumetricData]; ; ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings nor unit test failures.; - [x] does not break existing scenes.; - [x] does not break API compatibility.; - [x] has been reviewed.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/261
https://github.com/sofa-framework/sofa/pull/262:922,Availability,failure,failures,922,"issue sofa-framework/sofa#2 Fix compilation when option SOFA_FLOATING_POINT_TYPE in CMake selected as float. The problem arising when trying to compile with float was due to missing declaration from newmat external library.; The library has been modified for sofa to use a #define SOFA_FLOAT in include.h; However the SOFA_FLOAT was never defined for the extlib since the current procedure is to set CMake variable SOFA_FLOAT and SOFA_DOUBLE to 1. This was done anyway AFTER processing the cmake of the extlibs. Therefore, this pr moves the option for floating point type in sofa in the root CMakeLists and adds the #define for the newmat library to actually create the float type functions. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings nor unit test failures.; - [x] does not break existing scenes.; - [x] does not break API compatibility.; - [x] has been reviewed and agreed to be transitional.; - [x] is more than 1 week old (or has fast-merge label).; - [x] reports important changes in Changelog. **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/262
https://github.com/sofa-framework/sofa/pull/262:791,Integrability,message,message,791,"issue sofa-framework/sofa#2 Fix compilation when option SOFA_FLOATING_POINT_TYPE in CMake selected as float. The problem arising when trying to compile with float was due to missing declaration from newmat external library.; The library has been modified for sofa to use a #define SOFA_FLOAT in include.h; However the SOFA_FLOAT was never defined for the extlib since the current procedure is to set CMake variable SOFA_FLOAT and SOFA_DOUBLE to 1. This was done anyway AFTER processing the cmake of the extlibs. Therefore, this pr moves the option for floating point type in sofa in the root CMakeLists and adds the #define for the newmat library to actually create the float type functions. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings nor unit test failures.; - [x] does not break existing scenes.; - [x] does not break API compatibility.; - [x] has been reviewed and agreed to be transitional.; - [x] is more than 1 week old (or has fast-merge label).; - [x] reports important changes in Changelog. **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/262
https://github.com/sofa-framework/sofa/pull/262:406,Modifiability,variab,variable,406,"issue sofa-framework/sofa#2 Fix compilation when option SOFA_FLOATING_POINT_TYPE in CMake selected as float. The problem arising when trying to compile with float was due to missing declaration from newmat external library.; The library has been modified for sofa to use a #define SOFA_FLOAT in include.h; However the SOFA_FLOAT was never defined for the extlib since the current procedure is to set CMake variable SOFA_FLOAT and SOFA_DOUBLE to 1. This was done anyway AFTER processing the cmake of the extlibs. Therefore, this pr moves the option for floating point type in sofa in the root CMakeLists and adds the #define for the newmat library to actually create the float type functions. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings nor unit test failures.; - [x] does not break existing scenes.; - [x] does not break API compatibility.; - [x] has been reviewed and agreed to be transitional.; - [x] is more than 1 week old (or has fast-merge label).; - [x] reports important changes in Changelog. **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/262
https://github.com/sofa-framework/sofa/pull/262:917,Testability,test,test,917,"issue sofa-framework/sofa#2 Fix compilation when option SOFA_FLOATING_POINT_TYPE in CMake selected as float. The problem arising when trying to compile with float was due to missing declaration from newmat external library.; The library has been modified for sofa to use a #define SOFA_FLOAT in include.h; However the SOFA_FLOAT was never defined for the extlib since the current procedure is to set CMake variable SOFA_FLOAT and SOFA_DOUBLE to 1. This was done anyway AFTER processing the cmake of the extlibs. Therefore, this pr moves the option for floating point type in sofa in the root CMakeLists and adds the #define for the newmat library to actually create the float type functions. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings nor unit test failures.; - [x] does not break existing scenes.; - [x] does not break API compatibility.; - [x] has been reviewed and agreed to be transitional.; - [x] is more than 1 week old (or has fast-merge label).; - [x] reports important changes in Changelog. **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/262
https://github.com/sofa-framework/sofa/pull/263:273,Availability,failure,failures,273,As promised !; Update of the ChangeLog.md. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings nor unit test failures.; - [x] does not break existing scenes.; - [x] does not break API compatibility.; - [x] has been reviewed and agreed to be transitional.; - [x] is more than 1 week old (or has fast-merge label).; - [x] reports important changes in Changelog. **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/263
https://github.com/sofa-framework/sofa/pull/263:15,Deployability,Update,Update,15,As promised !; Update of the ChangeLog.md. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings nor unit test failures.; - [x] does not break existing scenes.; - [x] does not break API compatibility.; - [x] has been reviewed and agreed to be transitional.; - [x] is more than 1 week old (or has fast-merge label).; - [x] reports important changes in Changelog. **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/263
https://github.com/sofa-framework/sofa/pull/263:142,Integrability,message,message,142,As promised !; Update of the ChangeLog.md. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings nor unit test failures.; - [x] does not break existing scenes.; - [x] does not break API compatibility.; - [x] has been reviewed and agreed to be transitional.; - [x] is more than 1 week old (or has fast-merge label).; - [x] reports important changes in Changelog. **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/263
https://github.com/sofa-framework/sofa/pull/263:268,Testability,test,test,268,As promised !; Update of the ChangeLog.md. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings nor unit test failures.; - [x] does not break existing scenes.; - [x] does not break API compatibility.; - [x] has been reviewed and agreed to be transitional.; - [x] is more than 1 week old (or has fast-merge label).; - [x] reports important changes in Changelog. **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/263
https://github.com/sofa-framework/sofa/pull/264:844,Availability,failure,failures,844,"The WIN32 implementation is lowering the case of the given path. This is; not consistent with other case insensitive OS like macos and is discussed in:; https://github.com/sofa-framework/sofa/pull/250. In this PR I deprecate this 'lowering' behavior, adds a dedicated message & I updated; the calling point all around Sofa. Code updated shouldn't print any message but un-touched one should continue working as usual and prints the deprecated message to indicate to user they must update. CHANGELOG:; - [SofaKernel]; - FileRepository::getRelativePath() lowering the case on WIN32 is now a deprecated behavior. ; . ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings nor unit test failures.; - [x] does not break existing scenes.; - [x] does not break API compatibility.; - [x] has been reviewed and agreed to be transitional.; - [x] is more than 1 week old (or has fast-merge label).; - [x] reports important changes in Changelog. **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/264
https://github.com/sofa-framework/sofa/pull/264:280,Deployability,update,updated,280,"The WIN32 implementation is lowering the case of the given path. This is; not consistent with other case insensitive OS like macos and is discussed in:; https://github.com/sofa-framework/sofa/pull/250. In this PR I deprecate this 'lowering' behavior, adds a dedicated message & I updated; the calling point all around Sofa. Code updated shouldn't print any message but un-touched one should continue working as usual and prints the deprecated message to indicate to user they must update. CHANGELOG:; - [SofaKernel]; - FileRepository::getRelativePath() lowering the case on WIN32 is now a deprecated behavior. ; . ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings nor unit test failures.; - [x] does not break existing scenes.; - [x] does not break API compatibility.; - [x] has been reviewed and agreed to be transitional.; - [x] is more than 1 week old (or has fast-merge label).; - [x] reports important changes in Changelog. **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/264
https://github.com/sofa-framework/sofa/pull/264:329,Deployability,update,updated,329,"The WIN32 implementation is lowering the case of the given path. This is; not consistent with other case insensitive OS like macos and is discussed in:; https://github.com/sofa-framework/sofa/pull/250. In this PR I deprecate this 'lowering' behavior, adds a dedicated message & I updated; the calling point all around Sofa. Code updated shouldn't print any message but un-touched one should continue working as usual and prints the deprecated message to indicate to user they must update. CHANGELOG:; - [SofaKernel]; - FileRepository::getRelativePath() lowering the case on WIN32 is now a deprecated behavior. ; . ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings nor unit test failures.; - [x] does not break existing scenes.; - [x] does not break API compatibility.; - [x] has been reviewed and agreed to be transitional.; - [x] is more than 1 week old (or has fast-merge label).; - [x] reports important changes in Changelog. **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/264
https://github.com/sofa-framework/sofa/pull/264:481,Deployability,update,update,481,"The WIN32 implementation is lowering the case of the given path. This is; not consistent with other case insensitive OS like macos and is discussed in:; https://github.com/sofa-framework/sofa/pull/250. In this PR I deprecate this 'lowering' behavior, adds a dedicated message & I updated; the calling point all around Sofa. Code updated shouldn't print any message but un-touched one should continue working as usual and prints the deprecated message to indicate to user they must update. CHANGELOG:; - [SofaKernel]; - FileRepository::getRelativePath() lowering the case on WIN32 is now a deprecated behavior. ; . ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings nor unit test failures.; - [x] does not break existing scenes.; - [x] does not break API compatibility.; - [x] has been reviewed and agreed to be transitional.; - [x] is more than 1 week old (or has fast-merge label).; - [x] reports important changes in Changelog. **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/264
https://github.com/sofa-framework/sofa/pull/264:268,Integrability,message,message,268,"The WIN32 implementation is lowering the case of the given path. This is; not consistent with other case insensitive OS like macos and is discussed in:; https://github.com/sofa-framework/sofa/pull/250. In this PR I deprecate this 'lowering' behavior, adds a dedicated message & I updated; the calling point all around Sofa. Code updated shouldn't print any message but un-touched one should continue working as usual and prints the deprecated message to indicate to user they must update. CHANGELOG:; - [SofaKernel]; - FileRepository::getRelativePath() lowering the case on WIN32 is now a deprecated behavior. ; . ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings nor unit test failures.; - [x] does not break existing scenes.; - [x] does not break API compatibility.; - [x] has been reviewed and agreed to be transitional.; - [x] is more than 1 week old (or has fast-merge label).; - [x] reports important changes in Changelog. **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/264
https://github.com/sofa-framework/sofa/pull/264:357,Integrability,message,message,357,"The WIN32 implementation is lowering the case of the given path. This is; not consistent with other case insensitive OS like macos and is discussed in:; https://github.com/sofa-framework/sofa/pull/250. In this PR I deprecate this 'lowering' behavior, adds a dedicated message & I updated; the calling point all around Sofa. Code updated shouldn't print any message but un-touched one should continue working as usual and prints the deprecated message to indicate to user they must update. CHANGELOG:; - [SofaKernel]; - FileRepository::getRelativePath() lowering the case on WIN32 is now a deprecated behavior. ; . ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings nor unit test failures.; - [x] does not break existing scenes.; - [x] does not break API compatibility.; - [x] has been reviewed and agreed to be transitional.; - [x] is more than 1 week old (or has fast-merge label).; - [x] reports important changes in Changelog. **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/264
https://github.com/sofa-framework/sofa/pull/264:443,Integrability,message,message,443,"The WIN32 implementation is lowering the case of the given path. This is; not consistent with other case insensitive OS like macos and is discussed in:; https://github.com/sofa-framework/sofa/pull/250. In this PR I deprecate this 'lowering' behavior, adds a dedicated message & I updated; the calling point all around Sofa. Code updated shouldn't print any message but un-touched one should continue working as usual and prints the deprecated message to indicate to user they must update. CHANGELOG:; - [SofaKernel]; - FileRepository::getRelativePath() lowering the case on WIN32 is now a deprecated behavior. ; . ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings nor unit test failures.; - [x] does not break existing scenes.; - [x] does not break API compatibility.; - [x] has been reviewed and agreed to be transitional.; - [x] is more than 1 week old (or has fast-merge label).; - [x] reports important changes in Changelog. **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/264
https://github.com/sofa-framework/sofa/pull/264:713,Integrability,message,message,713,"The WIN32 implementation is lowering the case of the given path. This is; not consistent with other case insensitive OS like macos and is discussed in:; https://github.com/sofa-framework/sofa/pull/250. In this PR I deprecate this 'lowering' behavior, adds a dedicated message & I updated; the calling point all around Sofa. Code updated shouldn't print any message but un-touched one should continue working as usual and prints the deprecated message to indicate to user they must update. CHANGELOG:; - [SofaKernel]; - FileRepository::getRelativePath() lowering the case on WIN32 is now a deprecated behavior. ; . ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings nor unit test failures.; - [x] does not break existing scenes.; - [x] does not break API compatibility.; - [x] has been reviewed and agreed to be transitional.; - [x] is more than 1 week old (or has fast-merge label).; - [x] reports important changes in Changelog. **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/264
https://github.com/sofa-framework/sofa/pull/264:839,Testability,test,test,839,"The WIN32 implementation is lowering the case of the given path. This is; not consistent with other case insensitive OS like macos and is discussed in:; https://github.com/sofa-framework/sofa/pull/250. In this PR I deprecate this 'lowering' behavior, adds a dedicated message & I updated; the calling point all around Sofa. Code updated shouldn't print any message but un-touched one should continue working as usual and prints the deprecated message to indicate to user they must update. CHANGELOG:; - [SofaKernel]; - FileRepository::getRelativePath() lowering the case on WIN32 is now a deprecated behavior. ; . ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings nor unit test failures.; - [x] does not break existing scenes.; - [x] does not break API compatibility.; - [x] has been reviewed and agreed to be transitional.; - [x] is more than 1 week old (or has fast-merge label).; - [x] reports important changes in Changelog. **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/264
https://github.com/sofa-framework/sofa/issues/265:257,Availability,robust,robust,257,"This issue comes up from a SOFA-meeting discussion.; The question is how to homogenize and improve the check of data initialization (e.g. out of bounds values etc) in SOFA while avoiding increasing the computation time at the init phase. Consequence a more robust SOFA and possibility of avoiding long init phases. An option has been proposed and consists in creating a new specific virtual function ""check"" in which these checks would be done. To avoid over-computation, this function could be skipped to avoid huge computation time for SOFA-based applications. Could be [BREAKING] the API. Interested ? Any remark ? @damienmarchal @bcarrez @matthieu-nesme @francoisfaure @JeremieA",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/265
https://github.com/sofa-framework/sofa/issues/265:178,Safety,avoid,avoiding,178,"This issue comes up from a SOFA-meeting discussion.; The question is how to homogenize and improve the check of data initialization (e.g. out of bounds values etc) in SOFA while avoiding increasing the computation time at the init phase. Consequence a more robust SOFA and possibility of avoiding long init phases. An option has been proposed and consists in creating a new specific virtual function ""check"" in which these checks would be done. To avoid over-computation, this function could be skipped to avoid huge computation time for SOFA-based applications. Could be [BREAKING] the API. Interested ? Any remark ? @damienmarchal @bcarrez @matthieu-nesme @francoisfaure @JeremieA",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/265
https://github.com/sofa-framework/sofa/issues/265:288,Safety,avoid,avoiding,288,"This issue comes up from a SOFA-meeting discussion.; The question is how to homogenize and improve the check of data initialization (e.g. out of bounds values etc) in SOFA while avoiding increasing the computation time at the init phase. Consequence a more robust SOFA and possibility of avoiding long init phases. An option has been proposed and consists in creating a new specific virtual function ""check"" in which these checks would be done. To avoid over-computation, this function could be skipped to avoid huge computation time for SOFA-based applications. Could be [BREAKING] the API. Interested ? Any remark ? @damienmarchal @bcarrez @matthieu-nesme @francoisfaure @JeremieA",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/265
https://github.com/sofa-framework/sofa/issues/265:448,Safety,avoid,avoid,448,"This issue comes up from a SOFA-meeting discussion.; The question is how to homogenize and improve the check of data initialization (e.g. out of bounds values etc) in SOFA while avoiding increasing the computation time at the init phase. Consequence a more robust SOFA and possibility of avoiding long init phases. An option has been proposed and consists in creating a new specific virtual function ""check"" in which these checks would be done. To avoid over-computation, this function could be skipped to avoid huge computation time for SOFA-based applications. Could be [BREAKING] the API. Interested ? Any remark ? @damienmarchal @bcarrez @matthieu-nesme @francoisfaure @JeremieA",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/265
https://github.com/sofa-framework/sofa/issues/265:506,Safety,avoid,avoid,506,"This issue comes up from a SOFA-meeting discussion.; The question is how to homogenize and improve the check of data initialization (e.g. out of bounds values etc) in SOFA while avoiding increasing the computation time at the init phase. Consequence a more robust SOFA and possibility of avoiding long init phases. An option has been proposed and consists in creating a new specific virtual function ""check"" in which these checks would be done. To avoid over-computation, this function could be skipped to avoid huge computation time for SOFA-based applications. Could be [BREAKING] the API. Interested ? Any remark ? @damienmarchal @bcarrez @matthieu-nesme @francoisfaure @JeremieA",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/265
https://github.com/sofa-framework/sofa/pull/267:296,Integrability,message,message,296,"This is an attempt to fix FileMonitor-fileChangeTwice_test, failing on windows on other PRs since merge of PR #258 . CHANGELOG:; - Fix FileMonitor_test about file that was not correctly recreated. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not break existing scenes.; - [x] does not break API compatibility.; - [x] has been reviewed and agreed to be transitional.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/267
https://github.com/sofa-framework/sofa/pull/268:376,Availability,failure,failures,376,Here are a few tests about following components :; - IndicesFromValues; - MergePoints. They should not disturb any others functionality of SOFA.; ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings nor unit test failures.; - [x] does not break existing scenes.; - [x] does not break API compatibility.; - [x] has been reviewed and agreed to be transitional.; - [x] is more than 1 week old (or has fast-merge label).; - [x] reports important changes in Changelog. **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/268
https://github.com/sofa-framework/sofa/pull/268:245,Integrability,message,message,245,Here are a few tests about following components :; - IndicesFromValues; - MergePoints. They should not disturb any others functionality of SOFA.; ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings nor unit test failures.; - [x] does not break existing scenes.; - [x] does not break API compatibility.; - [x] has been reviewed and agreed to be transitional.; - [x] is more than 1 week old (or has fast-merge label).; - [x] reports important changes in Changelog. **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/268
https://github.com/sofa-framework/sofa/pull/268:15,Testability,test,tests,15,Here are a few tests about following components :; - IndicesFromValues; - MergePoints. They should not disturb any others functionality of SOFA.; ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings nor unit test failures.; - [x] does not break existing scenes.; - [x] does not break API compatibility.; - [x] has been reviewed and agreed to be transitional.; - [x] is more than 1 week old (or has fast-merge label).; - [x] reports important changes in Changelog. **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/268
https://github.com/sofa-framework/sofa/pull/268:371,Testability,test,test,371,Here are a few tests about following components :; - IndicesFromValues; - MergePoints. They should not disturb any others functionality of SOFA.; ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings nor unit test failures.; - [x] does not break existing scenes.; - [x] does not break API compatibility.; - [x] has been reviewed and agreed to be transitional.; - [x] is more than 1 week old (or has fast-merge label).; - [x] reports important changes in Changelog. **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/268
https://github.com/sofa-framework/sofa/pull/269:372,Availability,failure,failures,372,PR #213 breaks api compatibility because it misspelled MessageAsTestFailure; by MesssageAsTestFailure (with three 's'). This commit fix that. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings nor unit test failures.; - [x] does not break existing scenes.; - [x] does not break API compatibility.; - [ ] has been reviewed and agreed to be transitional.; - [x] is more than 1 week old (or has fast-merge label).; - [x] reports important changes in Changelog. **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/269
https://github.com/sofa-framework/sofa/pull/269:55,Integrability,Message,MessageAsTestFailure,55,PR #213 breaks api compatibility because it misspelled MessageAsTestFailure; by MesssageAsTestFailure (with three 's'). This commit fix that. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings nor unit test failures.; - [x] does not break existing scenes.; - [x] does not break API compatibility.; - [ ] has been reviewed and agreed to be transitional.; - [x] is more than 1 week old (or has fast-merge label).; - [x] reports important changes in Changelog. **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/269
https://github.com/sofa-framework/sofa/pull/269:241,Integrability,message,message,241,PR #213 breaks api compatibility because it misspelled MessageAsTestFailure; by MesssageAsTestFailure (with three 's'). This commit fix that. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings nor unit test failures.; - [x] does not break existing scenes.; - [x] does not break API compatibility.; - [ ] has been reviewed and agreed to be transitional.; - [x] is more than 1 week old (or has fast-merge label).; - [x] reports important changes in Changelog. **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/269
https://github.com/sofa-framework/sofa/pull/269:367,Testability,test,test,367,PR #213 breaks api compatibility because it misspelled MessageAsTestFailure; by MesssageAsTestFailure (with three 's'). This commit fix that. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings nor unit test failures.; - [x] does not break existing scenes.; - [x] does not break API compatibility.; - [ ] has been reviewed and agreed to be transitional.; - [x] is more than 1 week old (or has fast-merge label).; - [x] reports important changes in Changelog. **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/269
https://github.com/sofa-framework/sofa/pull/270:1151,Availability,failure,failures,1151,"Small PR on GridTopology and RegularGridTopology link to issue: #163. - Allow to set RegularGridTopology in 1,2 or 3 dimension. But still check if the grid resolution is valid.; - Fix example of Tetrahedron FEM that was crashing if no tetrahedron is found in the scene.; - Add an example scene.; - Remove RegularGridTopology dependencies from MechanicalObject. CHANGELOG:; - GridTopology ; - clean the code & factor the constructor; - implement ""flat"" grids in 1 or 2 dimension by using setting grid resolution to ""1"" in the corresponding axis; - RegularGridTopology clean the constructor's code & remove NDEBUG code. ; - Adds RegularGridTopology_test; - TetrahedronFEMForceField clean code; - MechanicalObject removes code that was specific to the grid. ; - Adds new examples scenes called: ; examples/Components/topology/Hexa2TetraTopologicalMapping.scn; examples/Components/topology/RegularGridTopology_dimension.scn; ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings nor unit test failures.; - [x] does not break existing scenes.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/270
https://github.com/sofa-framework/sofa/pull/270:325,Integrability,depend,dependencies,325,"Small PR on GridTopology and RegularGridTopology link to issue: #163. - Allow to set RegularGridTopology in 1,2 or 3 dimension. But still check if the grid resolution is valid.; - Fix example of Tetrahedron FEM that was crashing if no tetrahedron is found in the scene.; - Add an example scene.; - Remove RegularGridTopology dependencies from MechanicalObject. CHANGELOG:; - GridTopology ; - clean the code & factor the constructor; - implement ""flat"" grids in 1 or 2 dimension by using setting grid resolution to ""1"" in the corresponding axis; - RegularGridTopology clean the constructor's code & remove NDEBUG code. ; - Adds RegularGridTopology_test; - TetrahedronFEMForceField clean code; - MechanicalObject removes code that was specific to the grid. ; - Adds new examples scenes called: ; examples/Components/topology/Hexa2TetraTopologicalMapping.scn; examples/Components/topology/RegularGridTopology_dimension.scn; ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings nor unit test failures.; - [x] does not break existing scenes.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/270
https://github.com/sofa-framework/sofa/pull/270:1020,Integrability,message,message,1020,"Small PR on GridTopology and RegularGridTopology link to issue: #163. - Allow to set RegularGridTopology in 1,2 or 3 dimension. But still check if the grid resolution is valid.; - Fix example of Tetrahedron FEM that was crashing if no tetrahedron is found in the scene.; - Add an example scene.; - Remove RegularGridTopology dependencies from MechanicalObject. CHANGELOG:; - GridTopology ; - clean the code & factor the constructor; - implement ""flat"" grids in 1 or 2 dimension by using setting grid resolution to ""1"" in the corresponding axis; - RegularGridTopology clean the constructor's code & remove NDEBUG code. ; - Adds RegularGridTopology_test; - TetrahedronFEMForceField clean code; - MechanicalObject removes code that was specific to the grid. ; - Adds new examples scenes called: ; examples/Components/topology/Hexa2TetraTopologicalMapping.scn; examples/Components/topology/RegularGridTopology_dimension.scn; ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings nor unit test failures.; - [x] does not break existing scenes.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/270
https://github.com/sofa-framework/sofa/pull/270:1146,Testability,test,test,1146,"Small PR on GridTopology and RegularGridTopology link to issue: #163. - Allow to set RegularGridTopology in 1,2 or 3 dimension. But still check if the grid resolution is valid.; - Fix example of Tetrahedron FEM that was crashing if no tetrahedron is found in the scene.; - Add an example scene.; - Remove RegularGridTopology dependencies from MechanicalObject. CHANGELOG:; - GridTopology ; - clean the code & factor the constructor; - implement ""flat"" grids in 1 or 2 dimension by using setting grid resolution to ""1"" in the corresponding axis; - RegularGridTopology clean the constructor's code & remove NDEBUG code. ; - Adds RegularGridTopology_test; - TetrahedronFEMForceField clean code; - MechanicalObject removes code that was specific to the grid. ; - Adds new examples scenes called: ; examples/Components/topology/Hexa2TetraTopologicalMapping.scn; examples/Components/topology/RegularGridTopology_dimension.scn; ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings nor unit test failures.; - [x] does not break existing scenes.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/270
https://github.com/sofa-framework/sofa/pull/271:528,Availability,error,errors,528,"This PR is a ""all-in-one"" fix that correct all the failing test taggued ""OpenIssue"". ; To fix the issues some changes have been done but it shouldn't be too disturbing. The biggest is probably the fixing done in sofa::helper::vector (have a look at the allowed syntax in the _test""). . CHANGELOG:; - ADD sofa::helper::vector<int> tests validating the different possible syntax ; - ADD sofa::helper::vector<unsigned int> tests validating the different possible syntax ; - FIX sofa::helper::vector<int>::read() so that it reports errors message in case of problem ; - FIX sofa::helper::vector<int>::read() so that there is no more endless loop for some input; - FIX sofa::helper::vector<unsigned int>::read() so that it reports errors message in case of problem ; - FIX sofa::helper::vector<unsigned int>::read() so that there is no more endless loop for some input; - FIX in all tests the ""_OpenIssue"" suffix that I forgot to remove when I fix the tests; - FIX MassSpringLoader to refuse to load a Xsp containing a rigid object and send warning messages. ; - FIX DefaultPipeline that was allowing negative depth attribute. Now it warns the user and set it default value (6).; - FIX DiagonalMass_test that was not checking that some pointer were valid before using them. ; - CHG GenerateRigiMass.inl now sends a warning message instead of an error. ; - FIX DistanceGrid add basic validation of dimensions given to the constructors. Sends a dmsg_warning if they are invalid and returns 0. ; - FIX DistanceGrid rename the attributes' names to match the sofa guidelines. . That's all, ; if merged with #267, #264 and #257 we should have a nearly green dashboard . ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings nor unit test failures.; - [x] does not break existing scenes.; - [x] does not break API compatibility.; - [x] is more than 1 ",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/271
https://github.com/sofa-framework/sofa/pull/271:726,Availability,error,errors,726,"This PR is a ""all-in-one"" fix that correct all the failing test taggued ""OpenIssue"". ; To fix the issues some changes have been done but it shouldn't be too disturbing. The biggest is probably the fixing done in sofa::helper::vector (have a look at the allowed syntax in the _test""). . CHANGELOG:; - ADD sofa::helper::vector<int> tests validating the different possible syntax ; - ADD sofa::helper::vector<unsigned int> tests validating the different possible syntax ; - FIX sofa::helper::vector<int>::read() so that it reports errors message in case of problem ; - FIX sofa::helper::vector<int>::read() so that there is no more endless loop for some input; - FIX sofa::helper::vector<unsigned int>::read() so that it reports errors message in case of problem ; - FIX sofa::helper::vector<unsigned int>::read() so that there is no more endless loop for some input; - FIX in all tests the ""_OpenIssue"" suffix that I forgot to remove when I fix the tests; - FIX MassSpringLoader to refuse to load a Xsp containing a rigid object and send warning messages. ; - FIX DefaultPipeline that was allowing negative depth attribute. Now it warns the user and set it default value (6).; - FIX DiagonalMass_test that was not checking that some pointer were valid before using them. ; - CHG GenerateRigiMass.inl now sends a warning message instead of an error. ; - FIX DistanceGrid add basic validation of dimensions given to the constructors. Sends a dmsg_warning if they are invalid and returns 0. ; - FIX DistanceGrid rename the attributes' names to match the sofa guidelines. . That's all, ; if merged with #267, #264 and #257 we should have a nearly green dashboard . ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings nor unit test failures.; - [x] does not break existing scenes.; - [x] does not break API compatibility.; - [x] is more than 1 ",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/271
https://github.com/sofa-framework/sofa/pull/271:1340,Availability,error,error,1340,"uldn't be too disturbing. The biggest is probably the fixing done in sofa::helper::vector (have a look at the allowed syntax in the _test""). . CHANGELOG:; - ADD sofa::helper::vector<int> tests validating the different possible syntax ; - ADD sofa::helper::vector<unsigned int> tests validating the different possible syntax ; - FIX sofa::helper::vector<int>::read() so that it reports errors message in case of problem ; - FIX sofa::helper::vector<int>::read() so that there is no more endless loop for some input; - FIX sofa::helper::vector<unsigned int>::read() so that it reports errors message in case of problem ; - FIX sofa::helper::vector<unsigned int>::read() so that there is no more endless loop for some input; - FIX in all tests the ""_OpenIssue"" suffix that I forgot to remove when I fix the tests; - FIX MassSpringLoader to refuse to load a Xsp containing a rigid object and send warning messages. ; - FIX DefaultPipeline that was allowing negative depth attribute. Now it warns the user and set it default value (6).; - FIX DiagonalMass_test that was not checking that some pointer were valid before using them. ; - CHG GenerateRigiMass.inl now sends a warning message instead of an error. ; - FIX DistanceGrid add basic validation of dimensions given to the constructors. Sends a dmsg_warning if they are invalid and returns 0. ; - FIX DistanceGrid rename the attributes' names to match the sofa guidelines. . That's all, ; if merged with #267, #264 and #257 we should have a nearly green dashboard . ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings nor unit test failures.; - [x] does not break existing scenes.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label).; - [x] reports important changes in Changelog. **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/271
https://github.com/sofa-framework/sofa/pull/271:1889,Availability,failure,failures,1889,"uldn't be too disturbing. The biggest is probably the fixing done in sofa::helper::vector (have a look at the allowed syntax in the _test""). . CHANGELOG:; - ADD sofa::helper::vector<int> tests validating the different possible syntax ; - ADD sofa::helper::vector<unsigned int> tests validating the different possible syntax ; - FIX sofa::helper::vector<int>::read() so that it reports errors message in case of problem ; - FIX sofa::helper::vector<int>::read() so that there is no more endless loop for some input; - FIX sofa::helper::vector<unsigned int>::read() so that it reports errors message in case of problem ; - FIX sofa::helper::vector<unsigned int>::read() so that there is no more endless loop for some input; - FIX in all tests the ""_OpenIssue"" suffix that I forgot to remove when I fix the tests; - FIX MassSpringLoader to refuse to load a Xsp containing a rigid object and send warning messages. ; - FIX DefaultPipeline that was allowing negative depth attribute. Now it warns the user and set it default value (6).; - FIX DiagonalMass_test that was not checking that some pointer were valid before using them. ; - CHG GenerateRigiMass.inl now sends a warning message instead of an error. ; - FIX DistanceGrid add basic validation of dimensions given to the constructors. Sends a dmsg_warning if they are invalid and returns 0. ; - FIX DistanceGrid rename the attributes' names to match the sofa guidelines. . That's all, ; if merged with #267, #264 and #257 we should have a nearly green dashboard . ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings nor unit test failures.; - [x] does not break existing scenes.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label).; - [x] reports important changes in Changelog. **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/271
https://github.com/sofa-framework/sofa/pull/271:1641,Energy Efficiency,green,green,1641,"uldn't be too disturbing. The biggest is probably the fixing done in sofa::helper::vector (have a look at the allowed syntax in the _test""). . CHANGELOG:; - ADD sofa::helper::vector<int> tests validating the different possible syntax ; - ADD sofa::helper::vector<unsigned int> tests validating the different possible syntax ; - FIX sofa::helper::vector<int>::read() so that it reports errors message in case of problem ; - FIX sofa::helper::vector<int>::read() so that there is no more endless loop for some input; - FIX sofa::helper::vector<unsigned int>::read() so that it reports errors message in case of problem ; - FIX sofa::helper::vector<unsigned int>::read() so that there is no more endless loop for some input; - FIX in all tests the ""_OpenIssue"" suffix that I forgot to remove when I fix the tests; - FIX MassSpringLoader to refuse to load a Xsp containing a rigid object and send warning messages. ; - FIX DefaultPipeline that was allowing negative depth attribute. Now it warns the user and set it default value (6).; - FIX DiagonalMass_test that was not checking that some pointer were valid before using them. ; - CHG GenerateRigiMass.inl now sends a warning message instead of an error. ; - FIX DistanceGrid add basic validation of dimensions given to the constructors. Sends a dmsg_warning if they are invalid and returns 0. ; - FIX DistanceGrid rename the attributes' names to match the sofa guidelines. . That's all, ; if merged with #267, #264 and #257 we should have a nearly green dashboard . ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings nor unit test failures.; - [x] does not break existing scenes.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label).; - [x] reports important changes in Changelog. **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/271
https://github.com/sofa-framework/sofa/pull/271:535,Integrability,message,message,535,"This PR is a ""all-in-one"" fix that correct all the failing test taggued ""OpenIssue"". ; To fix the issues some changes have been done but it shouldn't be too disturbing. The biggest is probably the fixing done in sofa::helper::vector (have a look at the allowed syntax in the _test""). . CHANGELOG:; - ADD sofa::helper::vector<int> tests validating the different possible syntax ; - ADD sofa::helper::vector<unsigned int> tests validating the different possible syntax ; - FIX sofa::helper::vector<int>::read() so that it reports errors message in case of problem ; - FIX sofa::helper::vector<int>::read() so that there is no more endless loop for some input; - FIX sofa::helper::vector<unsigned int>::read() so that it reports errors message in case of problem ; - FIX sofa::helper::vector<unsigned int>::read() so that there is no more endless loop for some input; - FIX in all tests the ""_OpenIssue"" suffix that I forgot to remove when I fix the tests; - FIX MassSpringLoader to refuse to load a Xsp containing a rigid object and send warning messages. ; - FIX DefaultPipeline that was allowing negative depth attribute. Now it warns the user and set it default value (6).; - FIX DiagonalMass_test that was not checking that some pointer were valid before using them. ; - CHG GenerateRigiMass.inl now sends a warning message instead of an error. ; - FIX DistanceGrid add basic validation of dimensions given to the constructors. Sends a dmsg_warning if they are invalid and returns 0. ; - FIX DistanceGrid rename the attributes' names to match the sofa guidelines. . That's all, ; if merged with #267, #264 and #257 we should have a nearly green dashboard . ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings nor unit test failures.; - [x] does not break existing scenes.; - [x] does not break API compatibility.; - [x] is more than 1 ",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/271
https://github.com/sofa-framework/sofa/pull/271:733,Integrability,message,message,733,"This PR is a ""all-in-one"" fix that correct all the failing test taggued ""OpenIssue"". ; To fix the issues some changes have been done but it shouldn't be too disturbing. The biggest is probably the fixing done in sofa::helper::vector (have a look at the allowed syntax in the _test""). . CHANGELOG:; - ADD sofa::helper::vector<int> tests validating the different possible syntax ; - ADD sofa::helper::vector<unsigned int> tests validating the different possible syntax ; - FIX sofa::helper::vector<int>::read() so that it reports errors message in case of problem ; - FIX sofa::helper::vector<int>::read() so that there is no more endless loop for some input; - FIX sofa::helper::vector<unsigned int>::read() so that it reports errors message in case of problem ; - FIX sofa::helper::vector<unsigned int>::read() so that there is no more endless loop for some input; - FIX in all tests the ""_OpenIssue"" suffix that I forgot to remove when I fix the tests; - FIX MassSpringLoader to refuse to load a Xsp containing a rigid object and send warning messages. ; - FIX DefaultPipeline that was allowing negative depth attribute. Now it warns the user and set it default value (6).; - FIX DiagonalMass_test that was not checking that some pointer were valid before using them. ; - CHG GenerateRigiMass.inl now sends a warning message instead of an error. ; - FIX DistanceGrid add basic validation of dimensions given to the constructors. Sends a dmsg_warning if they are invalid and returns 0. ; - FIX DistanceGrid rename the attributes' names to match the sofa guidelines. . That's all, ; if merged with #267, #264 and #257 we should have a nearly green dashboard . ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings nor unit test failures.; - [x] does not break existing scenes.; - [x] does not break API compatibility.; - [x] is more than 1 ",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/271
https://github.com/sofa-framework/sofa/pull/271:1044,Integrability,message,messages,1044,"This PR is a ""all-in-one"" fix that correct all the failing test taggued ""OpenIssue"". ; To fix the issues some changes have been done but it shouldn't be too disturbing. The biggest is probably the fixing done in sofa::helper::vector (have a look at the allowed syntax in the _test""). . CHANGELOG:; - ADD sofa::helper::vector<int> tests validating the different possible syntax ; - ADD sofa::helper::vector<unsigned int> tests validating the different possible syntax ; - FIX sofa::helper::vector<int>::read() so that it reports errors message in case of problem ; - FIX sofa::helper::vector<int>::read() so that there is no more endless loop for some input; - FIX sofa::helper::vector<unsigned int>::read() so that it reports errors message in case of problem ; - FIX sofa::helper::vector<unsigned int>::read() so that there is no more endless loop for some input; - FIX in all tests the ""_OpenIssue"" suffix that I forgot to remove when I fix the tests; - FIX MassSpringLoader to refuse to load a Xsp containing a rigid object and send warning messages. ; - FIX DefaultPipeline that was allowing negative depth attribute. Now it warns the user and set it default value (6).; - FIX DiagonalMass_test that was not checking that some pointer were valid before using them. ; - CHG GenerateRigiMass.inl now sends a warning message instead of an error. ; - FIX DistanceGrid add basic validation of dimensions given to the constructors. Sends a dmsg_warning if they are invalid and returns 0. ; - FIX DistanceGrid rename the attributes' names to match the sofa guidelines. . That's all, ; if merged with #267, #264 and #257 we should have a nearly green dashboard . ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings nor unit test failures.; - [x] does not break existing scenes.; - [x] does not break API compatibility.; - [x] is more than 1 ",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/271
https://github.com/sofa-framework/sofa/pull/271:1318,Integrability,message,message,1318,"uldn't be too disturbing. The biggest is probably the fixing done in sofa::helper::vector (have a look at the allowed syntax in the _test""). . CHANGELOG:; - ADD sofa::helper::vector<int> tests validating the different possible syntax ; - ADD sofa::helper::vector<unsigned int> tests validating the different possible syntax ; - FIX sofa::helper::vector<int>::read() so that it reports errors message in case of problem ; - FIX sofa::helper::vector<int>::read() so that there is no more endless loop for some input; - FIX sofa::helper::vector<unsigned int>::read() so that it reports errors message in case of problem ; - FIX sofa::helper::vector<unsigned int>::read() so that there is no more endless loop for some input; - FIX in all tests the ""_OpenIssue"" suffix that I forgot to remove when I fix the tests; - FIX MassSpringLoader to refuse to load a Xsp containing a rigid object and send warning messages. ; - FIX DefaultPipeline that was allowing negative depth attribute. Now it warns the user and set it default value (6).; - FIX DiagonalMass_test that was not checking that some pointer were valid before using them. ; - CHG GenerateRigiMass.inl now sends a warning message instead of an error. ; - FIX DistanceGrid add basic validation of dimensions given to the constructors. Sends a dmsg_warning if they are invalid and returns 0. ; - FIX DistanceGrid rename the attributes' names to match the sofa guidelines. . That's all, ; if merged with #267, #264 and #257 we should have a nearly green dashboard . ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings nor unit test failures.; - [x] does not break existing scenes.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label).; - [x] reports important changes in Changelog. **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/271
https://github.com/sofa-framework/sofa/pull/271:1758,Integrability,message,message,1758,"uldn't be too disturbing. The biggest is probably the fixing done in sofa::helper::vector (have a look at the allowed syntax in the _test""). . CHANGELOG:; - ADD sofa::helper::vector<int> tests validating the different possible syntax ; - ADD sofa::helper::vector<unsigned int> tests validating the different possible syntax ; - FIX sofa::helper::vector<int>::read() so that it reports errors message in case of problem ; - FIX sofa::helper::vector<int>::read() so that there is no more endless loop for some input; - FIX sofa::helper::vector<unsigned int>::read() so that it reports errors message in case of problem ; - FIX sofa::helper::vector<unsigned int>::read() so that there is no more endless loop for some input; - FIX in all tests the ""_OpenIssue"" suffix that I forgot to remove when I fix the tests; - FIX MassSpringLoader to refuse to load a Xsp containing a rigid object and send warning messages. ; - FIX DefaultPipeline that was allowing negative depth attribute. Now it warns the user and set it default value (6).; - FIX DiagonalMass_test that was not checking that some pointer were valid before using them. ; - CHG GenerateRigiMass.inl now sends a warning message instead of an error. ; - FIX DistanceGrid add basic validation of dimensions given to the constructors. Sends a dmsg_warning if they are invalid and returns 0. ; - FIX DistanceGrid rename the attributes' names to match the sofa guidelines. . That's all, ; if merged with #267, #264 and #257 we should have a nearly green dashboard . ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings nor unit test failures.; - [x] does not break existing scenes.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label).; - [x] reports important changes in Changelog. **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/271
https://github.com/sofa-framework/sofa/pull/271:990,Performance,load,load,990,"This PR is a ""all-in-one"" fix that correct all the failing test taggued ""OpenIssue"". ; To fix the issues some changes have been done but it shouldn't be too disturbing. The biggest is probably the fixing done in sofa::helper::vector (have a look at the allowed syntax in the _test""). . CHANGELOG:; - ADD sofa::helper::vector<int> tests validating the different possible syntax ; - ADD sofa::helper::vector<unsigned int> tests validating the different possible syntax ; - FIX sofa::helper::vector<int>::read() so that it reports errors message in case of problem ; - FIX sofa::helper::vector<int>::read() so that there is no more endless loop for some input; - FIX sofa::helper::vector<unsigned int>::read() so that it reports errors message in case of problem ; - FIX sofa::helper::vector<unsigned int>::read() so that there is no more endless loop for some input; - FIX in all tests the ""_OpenIssue"" suffix that I forgot to remove when I fix the tests; - FIX MassSpringLoader to refuse to load a Xsp containing a rigid object and send warning messages. ; - FIX DefaultPipeline that was allowing negative depth attribute. Now it warns the user and set it default value (6).; - FIX DiagonalMass_test that was not checking that some pointer were valid before using them. ; - CHG GenerateRigiMass.inl now sends a warning message instead of an error. ; - FIX DistanceGrid add basic validation of dimensions given to the constructors. Sends a dmsg_warning if they are invalid and returns 0. ; - FIX DistanceGrid rename the attributes' names to match the sofa guidelines. . That's all, ; if merged with #267, #264 and #257 we should have a nearly green dashboard . ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings nor unit test failures.; - [x] does not break existing scenes.; - [x] does not break API compatibility.; - [x] is more than 1 ",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/271
https://github.com/sofa-framework/sofa/pull/271:336,Security,validat,validating,336,"This PR is a ""all-in-one"" fix that correct all the failing test taggued ""OpenIssue"". ; To fix the issues some changes have been done but it shouldn't be too disturbing. The biggest is probably the fixing done in sofa::helper::vector (have a look at the allowed syntax in the _test""). . CHANGELOG:; - ADD sofa::helper::vector<int> tests validating the different possible syntax ; - ADD sofa::helper::vector<unsigned int> tests validating the different possible syntax ; - FIX sofa::helper::vector<int>::read() so that it reports errors message in case of problem ; - FIX sofa::helper::vector<int>::read() so that there is no more endless loop for some input; - FIX sofa::helper::vector<unsigned int>::read() so that it reports errors message in case of problem ; - FIX sofa::helper::vector<unsigned int>::read() so that there is no more endless loop for some input; - FIX in all tests the ""_OpenIssue"" suffix that I forgot to remove when I fix the tests; - FIX MassSpringLoader to refuse to load a Xsp containing a rigid object and send warning messages. ; - FIX DefaultPipeline that was allowing negative depth attribute. Now it warns the user and set it default value (6).; - FIX DiagonalMass_test that was not checking that some pointer were valid before using them. ; - CHG GenerateRigiMass.inl now sends a warning message instead of an error. ; - FIX DistanceGrid add basic validation of dimensions given to the constructors. Sends a dmsg_warning if they are invalid and returns 0. ; - FIX DistanceGrid rename the attributes' names to match the sofa guidelines. . That's all, ; if merged with #267, #264 and #257 we should have a nearly green dashboard . ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings nor unit test failures.; - [x] does not break existing scenes.; - [x] does not break API compatibility.; - [x] is more than 1 ",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/271
https://github.com/sofa-framework/sofa/pull/271:426,Security,validat,validating,426,"This PR is a ""all-in-one"" fix that correct all the failing test taggued ""OpenIssue"". ; To fix the issues some changes have been done but it shouldn't be too disturbing. The biggest is probably the fixing done in sofa::helper::vector (have a look at the allowed syntax in the _test""). . CHANGELOG:; - ADD sofa::helper::vector<int> tests validating the different possible syntax ; - ADD sofa::helper::vector<unsigned int> tests validating the different possible syntax ; - FIX sofa::helper::vector<int>::read() so that it reports errors message in case of problem ; - FIX sofa::helper::vector<int>::read() so that there is no more endless loop for some input; - FIX sofa::helper::vector<unsigned int>::read() so that it reports errors message in case of problem ; - FIX sofa::helper::vector<unsigned int>::read() so that there is no more endless loop for some input; - FIX in all tests the ""_OpenIssue"" suffix that I forgot to remove when I fix the tests; - FIX MassSpringLoader to refuse to load a Xsp containing a rigid object and send warning messages. ; - FIX DefaultPipeline that was allowing negative depth attribute. Now it warns the user and set it default value (6).; - FIX DiagonalMass_test that was not checking that some pointer were valid before using them. ; - CHG GenerateRigiMass.inl now sends a warning message instead of an error. ; - FIX DistanceGrid add basic validation of dimensions given to the constructors. Sends a dmsg_warning if they are invalid and returns 0. ; - FIX DistanceGrid rename the attributes' names to match the sofa guidelines. . That's all, ; if merged with #267, #264 and #257 we should have a nearly green dashboard . ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings nor unit test failures.; - [x] does not break existing scenes.; - [x] does not break API compatibility.; - [x] is more than 1 ",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/271
https://github.com/sofa-framework/sofa/pull/271:1378,Security,validat,validation,1378,"uldn't be too disturbing. The biggest is probably the fixing done in sofa::helper::vector (have a look at the allowed syntax in the _test""). . CHANGELOG:; - ADD sofa::helper::vector<int> tests validating the different possible syntax ; - ADD sofa::helper::vector<unsigned int> tests validating the different possible syntax ; - FIX sofa::helper::vector<int>::read() so that it reports errors message in case of problem ; - FIX sofa::helper::vector<int>::read() so that there is no more endless loop for some input; - FIX sofa::helper::vector<unsigned int>::read() so that it reports errors message in case of problem ; - FIX sofa::helper::vector<unsigned int>::read() so that there is no more endless loop for some input; - FIX in all tests the ""_OpenIssue"" suffix that I forgot to remove when I fix the tests; - FIX MassSpringLoader to refuse to load a Xsp containing a rigid object and send warning messages. ; - FIX DefaultPipeline that was allowing negative depth attribute. Now it warns the user and set it default value (6).; - FIX DiagonalMass_test that was not checking that some pointer were valid before using them. ; - CHG GenerateRigiMass.inl now sends a warning message instead of an error. ; - FIX DistanceGrid add basic validation of dimensions given to the constructors. Sends a dmsg_warning if they are invalid and returns 0. ; - FIX DistanceGrid rename the attributes' names to match the sofa guidelines. . That's all, ; if merged with #267, #264 and #257 we should have a nearly green dashboard . ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings nor unit test failures.; - [x] does not break existing scenes.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label).; - [x] reports important changes in Changelog. **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/271
https://github.com/sofa-framework/sofa/pull/271:59,Testability,test,test,59,"This PR is a ""all-in-one"" fix that correct all the failing test taggued ""OpenIssue"". ; To fix the issues some changes have been done but it shouldn't be too disturbing. The biggest is probably the fixing done in sofa::helper::vector (have a look at the allowed syntax in the _test""). . CHANGELOG:; - ADD sofa::helper::vector<int> tests validating the different possible syntax ; - ADD sofa::helper::vector<unsigned int> tests validating the different possible syntax ; - FIX sofa::helper::vector<int>::read() so that it reports errors message in case of problem ; - FIX sofa::helper::vector<int>::read() so that there is no more endless loop for some input; - FIX sofa::helper::vector<unsigned int>::read() so that it reports errors message in case of problem ; - FIX sofa::helper::vector<unsigned int>::read() so that there is no more endless loop for some input; - FIX in all tests the ""_OpenIssue"" suffix that I forgot to remove when I fix the tests; - FIX MassSpringLoader to refuse to load a Xsp containing a rigid object and send warning messages. ; - FIX DefaultPipeline that was allowing negative depth attribute. Now it warns the user and set it default value (6).; - FIX DiagonalMass_test that was not checking that some pointer were valid before using them. ; - CHG GenerateRigiMass.inl now sends a warning message instead of an error. ; - FIX DistanceGrid add basic validation of dimensions given to the constructors. Sends a dmsg_warning if they are invalid and returns 0. ; - FIX DistanceGrid rename the attributes' names to match the sofa guidelines. . That's all, ; if merged with #267, #264 and #257 we should have a nearly green dashboard . ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings nor unit test failures.; - [x] does not break existing scenes.; - [x] does not break API compatibility.; - [x] is more than 1 ",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/271
https://github.com/sofa-framework/sofa/pull/271:330,Testability,test,tests,330,"This PR is a ""all-in-one"" fix that correct all the failing test taggued ""OpenIssue"". ; To fix the issues some changes have been done but it shouldn't be too disturbing. The biggest is probably the fixing done in sofa::helper::vector (have a look at the allowed syntax in the _test""). . CHANGELOG:; - ADD sofa::helper::vector<int> tests validating the different possible syntax ; - ADD sofa::helper::vector<unsigned int> tests validating the different possible syntax ; - FIX sofa::helper::vector<int>::read() so that it reports errors message in case of problem ; - FIX sofa::helper::vector<int>::read() so that there is no more endless loop for some input; - FIX sofa::helper::vector<unsigned int>::read() so that it reports errors message in case of problem ; - FIX sofa::helper::vector<unsigned int>::read() so that there is no more endless loop for some input; - FIX in all tests the ""_OpenIssue"" suffix that I forgot to remove when I fix the tests; - FIX MassSpringLoader to refuse to load a Xsp containing a rigid object and send warning messages. ; - FIX DefaultPipeline that was allowing negative depth attribute. Now it warns the user and set it default value (6).; - FIX DiagonalMass_test that was not checking that some pointer were valid before using them. ; - CHG GenerateRigiMass.inl now sends a warning message instead of an error. ; - FIX DistanceGrid add basic validation of dimensions given to the constructors. Sends a dmsg_warning if they are invalid and returns 0. ; - FIX DistanceGrid rename the attributes' names to match the sofa guidelines. . That's all, ; if merged with #267, #264 and #257 we should have a nearly green dashboard . ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings nor unit test failures.; - [x] does not break existing scenes.; - [x] does not break API compatibility.; - [x] is more than 1 ",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/271
https://github.com/sofa-framework/sofa/pull/271:420,Testability,test,tests,420,"This PR is a ""all-in-one"" fix that correct all the failing test taggued ""OpenIssue"". ; To fix the issues some changes have been done but it shouldn't be too disturbing. The biggest is probably the fixing done in sofa::helper::vector (have a look at the allowed syntax in the _test""). . CHANGELOG:; - ADD sofa::helper::vector<int> tests validating the different possible syntax ; - ADD sofa::helper::vector<unsigned int> tests validating the different possible syntax ; - FIX sofa::helper::vector<int>::read() so that it reports errors message in case of problem ; - FIX sofa::helper::vector<int>::read() so that there is no more endless loop for some input; - FIX sofa::helper::vector<unsigned int>::read() so that it reports errors message in case of problem ; - FIX sofa::helper::vector<unsigned int>::read() so that there is no more endless loop for some input; - FIX in all tests the ""_OpenIssue"" suffix that I forgot to remove when I fix the tests; - FIX MassSpringLoader to refuse to load a Xsp containing a rigid object and send warning messages. ; - FIX DefaultPipeline that was allowing negative depth attribute. Now it warns the user and set it default value (6).; - FIX DiagonalMass_test that was not checking that some pointer were valid before using them. ; - CHG GenerateRigiMass.inl now sends a warning message instead of an error. ; - FIX DistanceGrid add basic validation of dimensions given to the constructors. Sends a dmsg_warning if they are invalid and returns 0. ; - FIX DistanceGrid rename the attributes' names to match the sofa guidelines. . That's all, ; if merged with #267, #264 and #257 we should have a nearly green dashboard . ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings nor unit test failures.; - [x] does not break existing scenes.; - [x] does not break API compatibility.; - [x] is more than 1 ",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/271
https://github.com/sofa-framework/sofa/pull/271:878,Testability,test,tests,878,"This PR is a ""all-in-one"" fix that correct all the failing test taggued ""OpenIssue"". ; To fix the issues some changes have been done but it shouldn't be too disturbing. The biggest is probably the fixing done in sofa::helper::vector (have a look at the allowed syntax in the _test""). . CHANGELOG:; - ADD sofa::helper::vector<int> tests validating the different possible syntax ; - ADD sofa::helper::vector<unsigned int> tests validating the different possible syntax ; - FIX sofa::helper::vector<int>::read() so that it reports errors message in case of problem ; - FIX sofa::helper::vector<int>::read() so that there is no more endless loop for some input; - FIX sofa::helper::vector<unsigned int>::read() so that it reports errors message in case of problem ; - FIX sofa::helper::vector<unsigned int>::read() so that there is no more endless loop for some input; - FIX in all tests the ""_OpenIssue"" suffix that I forgot to remove when I fix the tests; - FIX MassSpringLoader to refuse to load a Xsp containing a rigid object and send warning messages. ; - FIX DefaultPipeline that was allowing negative depth attribute. Now it warns the user and set it default value (6).; - FIX DiagonalMass_test that was not checking that some pointer were valid before using them. ; - CHG GenerateRigiMass.inl now sends a warning message instead of an error. ; - FIX DistanceGrid add basic validation of dimensions given to the constructors. Sends a dmsg_warning if they are invalid and returns 0. ; - FIX DistanceGrid rename the attributes' names to match the sofa guidelines. . That's all, ; if merged with #267, #264 and #257 we should have a nearly green dashboard . ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings nor unit test failures.; - [x] does not break existing scenes.; - [x] does not break API compatibility.; - [x] is more than 1 ",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/271
https://github.com/sofa-framework/sofa/pull/271:947,Testability,test,tests,947,"This PR is a ""all-in-one"" fix that correct all the failing test taggued ""OpenIssue"". ; To fix the issues some changes have been done but it shouldn't be too disturbing. The biggest is probably the fixing done in sofa::helper::vector (have a look at the allowed syntax in the _test""). . CHANGELOG:; - ADD sofa::helper::vector<int> tests validating the different possible syntax ; - ADD sofa::helper::vector<unsigned int> tests validating the different possible syntax ; - FIX sofa::helper::vector<int>::read() so that it reports errors message in case of problem ; - FIX sofa::helper::vector<int>::read() so that there is no more endless loop for some input; - FIX sofa::helper::vector<unsigned int>::read() so that it reports errors message in case of problem ; - FIX sofa::helper::vector<unsigned int>::read() so that there is no more endless loop for some input; - FIX in all tests the ""_OpenIssue"" suffix that I forgot to remove when I fix the tests; - FIX MassSpringLoader to refuse to load a Xsp containing a rigid object and send warning messages. ; - FIX DefaultPipeline that was allowing negative depth attribute. Now it warns the user and set it default value (6).; - FIX DiagonalMass_test that was not checking that some pointer were valid before using them. ; - CHG GenerateRigiMass.inl now sends a warning message instead of an error. ; - FIX DistanceGrid add basic validation of dimensions given to the constructors. Sends a dmsg_warning if they are invalid and returns 0. ; - FIX DistanceGrid rename the attributes' names to match the sofa guidelines. . That's all, ; if merged with #267, #264 and #257 we should have a nearly green dashboard . ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings nor unit test failures.; - [x] does not break existing scenes.; - [x] does not break API compatibility.; - [x] is more than 1 ",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/271
https://github.com/sofa-framework/sofa/pull/271:1884,Testability,test,test,1884,"uldn't be too disturbing. The biggest is probably the fixing done in sofa::helper::vector (have a look at the allowed syntax in the _test""). . CHANGELOG:; - ADD sofa::helper::vector<int> tests validating the different possible syntax ; - ADD sofa::helper::vector<unsigned int> tests validating the different possible syntax ; - FIX sofa::helper::vector<int>::read() so that it reports errors message in case of problem ; - FIX sofa::helper::vector<int>::read() so that there is no more endless loop for some input; - FIX sofa::helper::vector<unsigned int>::read() so that it reports errors message in case of problem ; - FIX sofa::helper::vector<unsigned int>::read() so that there is no more endless loop for some input; - FIX in all tests the ""_OpenIssue"" suffix that I forgot to remove when I fix the tests; - FIX MassSpringLoader to refuse to load a Xsp containing a rigid object and send warning messages. ; - FIX DefaultPipeline that was allowing negative depth attribute. Now it warns the user and set it default value (6).; - FIX DiagonalMass_test that was not checking that some pointer were valid before using them. ; - CHG GenerateRigiMass.inl now sends a warning message instead of an error. ; - FIX DistanceGrid add basic validation of dimensions given to the constructors. Sends a dmsg_warning if they are invalid and returns 0. ; - FIX DistanceGrid rename the attributes' names to match the sofa guidelines. . That's all, ; if merged with #267, #264 and #257 we should have a nearly green dashboard . ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings nor unit test failures.; - [x] does not break existing scenes.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label).; - [x] reports important changes in Changelog. **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/271
https://github.com/sofa-framework/sofa/pull/271:1554,Usability,guid,guidelines,1554,"uldn't be too disturbing. The biggest is probably the fixing done in sofa::helper::vector (have a look at the allowed syntax in the _test""). . CHANGELOG:; - ADD sofa::helper::vector<int> tests validating the different possible syntax ; - ADD sofa::helper::vector<unsigned int> tests validating the different possible syntax ; - FIX sofa::helper::vector<int>::read() so that it reports errors message in case of problem ; - FIX sofa::helper::vector<int>::read() so that there is no more endless loop for some input; - FIX sofa::helper::vector<unsigned int>::read() so that it reports errors message in case of problem ; - FIX sofa::helper::vector<unsigned int>::read() so that there is no more endless loop for some input; - FIX in all tests the ""_OpenIssue"" suffix that I forgot to remove when I fix the tests; - FIX MassSpringLoader to refuse to load a Xsp containing a rigid object and send warning messages. ; - FIX DefaultPipeline that was allowing negative depth attribute. Now it warns the user and set it default value (6).; - FIX DiagonalMass_test that was not checking that some pointer were valid before using them. ; - CHG GenerateRigiMass.inl now sends a warning message instead of an error. ; - FIX DistanceGrid add basic validation of dimensions given to the constructors. Sends a dmsg_warning if they are invalid and returns 0. ; - FIX DistanceGrid rename the attributes' names to match the sofa guidelines. . That's all, ; if merged with #267, #264 and #257 we should have a nearly green dashboard . ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings nor unit test failures.; - [x] does not break existing scenes.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label).; - [x] reports important changes in Changelog. **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/271
https://github.com/sofa-framework/sofa/issues/272:743,Deployability,update,update,743,"Hi all,. When crawling into sofa code I often found line like that:; ```cpp; /** A class that define topological Data general methods; DEPRECATED; */; template < class T = void* >; class BaseTopologyData : public sofa::core::objectmodel::Data <T>; {...}; ```; This kind of comment is problematic as I have no idea what to do and it rise a lot of questions. Each time we want to deprecate something we should make efforts on documenting that properly to manage the changes. ; To me this means at least answering the following questions in the source code & in a github Issue: ; - why the code is deprecated and what is the replacement approach; - when it have been deprecated; - when can we remove deprecated class; - who is supposed to do the update...and if it is not the person that deprecate the code what is the implemented approach to notified calling code they are using deprecated code and that they have to be fixed. A good idea is to use dmsg_deprecated() messages for that. ; - how are we supposed to update thing that make use of the deprecated function; . ______________________________________________________. Suggested labels: <!--- see https://github.com/sofa-framework/sofa/labels -->",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/272
https://github.com/sofa-framework/sofa/issues/272:1011,Deployability,update,update,1011,"Hi all,. When crawling into sofa code I often found line like that:; ```cpp; /** A class that define topological Data general methods; DEPRECATED; */; template < class T = void* >; class BaseTopologyData : public sofa::core::objectmodel::Data <T>; {...}; ```; This kind of comment is problematic as I have no idea what to do and it rise a lot of questions. Each time we want to deprecate something we should make efforts on documenting that properly to manage the changes. ; To me this means at least answering the following questions in the source code & in a github Issue: ; - why the code is deprecated and what is the replacement approach; - when it have been deprecated; - when can we remove deprecated class; - who is supposed to do the update...and if it is not the person that deprecate the code what is the implemented approach to notified calling code they are using deprecated code and that they have to be fixed. A good idea is to use dmsg_deprecated() messages for that. ; - how are we supposed to update thing that make use of the deprecated function; . ______________________________________________________. Suggested labels: <!--- see https://github.com/sofa-framework/sofa/labels -->",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/272
https://github.com/sofa-framework/sofa/issues/272:965,Integrability,message,messages,965,"Hi all,. When crawling into sofa code I often found line like that:; ```cpp; /** A class that define topological Data general methods; DEPRECATED; */; template < class T = void* >; class BaseTopologyData : public sofa::core::objectmodel::Data <T>; {...}; ```; This kind of comment is problematic as I have no idea what to do and it rise a lot of questions. Each time we want to deprecate something we should make efforts on documenting that properly to manage the changes. ; To me this means at least answering the following questions in the source code & in a github Issue: ; - why the code is deprecated and what is the replacement approach; - when it have been deprecated; - when can we remove deprecated class; - who is supposed to do the update...and if it is not the person that deprecate the code what is the implemented approach to notified calling code they are using deprecated code and that they have to be fixed. A good idea is to use dmsg_deprecated() messages for that. ; - how are we supposed to update thing that make use of the deprecated function; . ______________________________________________________. Suggested labels: <!--- see https://github.com/sofa-framework/sofa/labels -->",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/272
https://github.com/sofa-framework/sofa/pull/273:282,Availability,failure,failures,282,Fixes #33.; Remove deprecated miniBoost dependency. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings nor unit test failures.; - [x] does not break existing scenes.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/273
https://github.com/sofa-framework/sofa/pull/273:40,Integrability,depend,dependency,40,Fixes #33.; Remove deprecated miniBoost dependency. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings nor unit test failures.; - [x] does not break existing scenes.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/273
https://github.com/sofa-framework/sofa/pull/273:151,Integrability,message,message,151,Fixes #33.; Remove deprecated miniBoost dependency. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings nor unit test failures.; - [x] does not break existing scenes.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/273
https://github.com/sofa-framework/sofa/pull/273:277,Testability,test,test,277,Fixes #33.; Remove deprecated miniBoost dependency. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings nor unit test failures.; - [x] does not break existing scenes.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/273
https://github.com/sofa-framework/sofa/issues/274:81,Availability,error,error,81,The duplicated code to initialize the data field in component looks really bad & error prone. ; Since c++x11 we can probably do much better.; ; If you think this is something to fix (or at least stop doing in new components) and have a better pattern that our copy-paste approach please drop it here. ______________________________________________________. Suggested labels: <!--- see https://github.com/sofa-framework/sofa/labels -->,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/274
https://github.com/sofa-framework/sofa/pull/275:740,Availability,failure,failures,740,"Changelog: ; Batch replacement of std::cout to msg_* API, removal of commented code ; The inpacted files are in:; - SofaBoundaryCondition; - SofaConstraint; - SofaEulerianFluid; - SofaExporter; - SofaGeneralEngine; - SofaGeneralExplicitODESolver; - SofaGeneralLoader; - SofaGeneralMeshCOllision; - SofaGeneralObjectInteraction; - SofaGeneralRigid; - SofaGeneralSimpleFEM; - SofaGeneralVIsual; - SofaMiscFEM; - SofaMiscForceField; - SofaMiscMapping; - SofaMiscSolver. @hugtalbot done. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [x] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/275
https://github.com/sofa-framework/sofa/pull/275:790,Availability,failure,failures,790,"Changelog: ; Batch replacement of std::cout to msg_* API, removal of commented code ; The inpacted files are in:; - SofaBoundaryCondition; - SofaConstraint; - SofaEulerianFluid; - SofaExporter; - SofaGeneralEngine; - SofaGeneralExplicitODESolver; - SofaGeneralLoader; - SofaGeneralMeshCOllision; - SofaGeneralObjectInteraction; - SofaGeneralRigid; - SofaGeneralSimpleFEM; - SofaGeneralVIsual; - SofaMiscFEM; - SofaMiscForceField; - SofaMiscMapping; - SofaMiscSolver. @hugtalbot done. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [x] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/275
https://github.com/sofa-framework/sofa/pull/275:583,Integrability,message,message,583,"Changelog: ; Batch replacement of std::cout to msg_* API, removal of commented code ; The inpacted files are in:; - SofaBoundaryCondition; - SofaConstraint; - SofaEulerianFluid; - SofaExporter; - SofaGeneralEngine; - SofaGeneralExplicitODESolver; - SofaGeneralLoader; - SofaGeneralMeshCOllision; - SofaGeneralObjectInteraction; - SofaGeneralRigid; - SofaGeneralSimpleFEM; - SofaGeneralVIsual; - SofaMiscFEM; - SofaMiscForceField; - SofaMiscMapping; - SofaMiscSolver. @hugtalbot done. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [x] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/275
https://github.com/sofa-framework/sofa/pull/275:735,Testability,test,test,735,"Changelog: ; Batch replacement of std::cout to msg_* API, removal of commented code ; The inpacted files are in:; - SofaBoundaryCondition; - SofaConstraint; - SofaEulerianFluid; - SofaExporter; - SofaGeneralEngine; - SofaGeneralExplicitODESolver; - SofaGeneralLoader; - SofaGeneralMeshCOllision; - SofaGeneralObjectInteraction; - SofaGeneralRigid; - SofaGeneralSimpleFEM; - SofaGeneralVIsual; - SofaMiscFEM; - SofaMiscForceField; - SofaMiscMapping; - SofaMiscSolver. @hugtalbot done. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [x] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/275
https://github.com/sofa-framework/sofa/pull/275:785,Testability,test,test,785,"Changelog: ; Batch replacement of std::cout to msg_* API, removal of commented code ; The inpacted files are in:; - SofaBoundaryCondition; - SofaConstraint; - SofaEulerianFluid; - SofaExporter; - SofaGeneralEngine; - SofaGeneralExplicitODESolver; - SofaGeneralLoader; - SofaGeneralMeshCOllision; - SofaGeneralObjectInteraction; - SofaGeneralRigid; - SofaGeneralSimpleFEM; - SofaGeneralVIsual; - SofaMiscFEM; - SofaMiscForceField; - SofaMiscMapping; - SofaMiscSolver. @hugtalbot done. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [x] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/275
https://github.com/sofa-framework/sofa/pull/276:665,Availability,failure,failures,665,"To experiment a new handling of sparse matrices under mappings in our plugin, a few changes are needed in the core of SOFA.; Main changes:; - Add a new function in MechanicalObject (commit 6a6fd98).; - Refactoring of MatrixDerivId: warning holonomicC() is deprecated --> replaced by constraintMatrix (commit 966f9af).; - Change allocation in createMatrix from a fullMatrix to a sparseMatrix.; Linked to #26 . ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/276
https://github.com/sofa-framework/sofa/pull/276:715,Availability,failure,failures,715,"To experiment a new handling of sparse matrices under mappings in our plugin, a few changes are needed in the core of SOFA.; Main changes:; - Add a new function in MechanicalObject (commit 6a6fd98).; - Refactoring of MatrixDerivId: warning holonomicC() is deprecated --> replaced by constraintMatrix (commit 966f9af).; - Change allocation in createMatrix from a fullMatrix to a sparseMatrix.; Linked to #26 . ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/276
https://github.com/sofa-framework/sofa/pull/276:508,Integrability,message,message,508,"To experiment a new handling of sparse matrices under mappings in our plugin, a few changes are needed in the core of SOFA.; Main changes:; - Add a new function in MechanicalObject (commit 6a6fd98).; - Refactoring of MatrixDerivId: warning holonomicC() is deprecated --> replaced by constraintMatrix (commit 966f9af).; - Change allocation in createMatrix from a fullMatrix to a sparseMatrix.; Linked to #26 . ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/276
https://github.com/sofa-framework/sofa/pull/276:70,Modifiability,plugin,plugin,70,"To experiment a new handling of sparse matrices under mappings in our plugin, a few changes are needed in the core of SOFA.; Main changes:; - Add a new function in MechanicalObject (commit 6a6fd98).; - Refactoring of MatrixDerivId: warning holonomicC() is deprecated --> replaced by constraintMatrix (commit 966f9af).; - Change allocation in createMatrix from a fullMatrix to a sparseMatrix.; Linked to #26 . ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/276
https://github.com/sofa-framework/sofa/pull/276:202,Modifiability,Refactor,Refactoring,202,"To experiment a new handling of sparse matrices under mappings in our plugin, a few changes are needed in the core of SOFA.; Main changes:; - Add a new function in MechanicalObject (commit 6a6fd98).; - Refactoring of MatrixDerivId: warning holonomicC() is deprecated --> replaced by constraintMatrix (commit 966f9af).; - Change allocation in createMatrix from a fullMatrix to a sparseMatrix.; Linked to #26 . ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/276
https://github.com/sofa-framework/sofa/pull/276:660,Testability,test,test,660,"To experiment a new handling of sparse matrices under mappings in our plugin, a few changes are needed in the core of SOFA.; Main changes:; - Add a new function in MechanicalObject (commit 6a6fd98).; - Refactoring of MatrixDerivId: warning holonomicC() is deprecated --> replaced by constraintMatrix (commit 966f9af).; - Change allocation in createMatrix from a fullMatrix to a sparseMatrix.; Linked to #26 . ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/276
https://github.com/sofa-framework/sofa/pull/276:710,Testability,test,test,710,"To experiment a new handling of sparse matrices under mappings in our plugin, a few changes are needed in the core of SOFA.; Main changes:; - Add a new function in MechanicalObject (commit 6a6fd98).; - Refactoring of MatrixDerivId: warning holonomicC() is deprecated --> replaced by constraintMatrix (commit 966f9af).; - Change allocation in createMatrix from a fullMatrix to a sparseMatrix.; Linked to #26 . ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/276
https://github.com/sofa-framework/sofa/pull/278:1382,Availability,failure,failures,1382,"The state of vector.h and set.h is a bit messy right now. . A recent PR have added tests to vector & fix several crashes & infinite loop. It appears that the problematic code is also in set.h so a general code factoring is needed. . There is also some details on container refactoring in PR #113 ; Finally it is not very clear what should be in std:: and what should be in sofa::helper:: ...; and there is a lot of code in the .h for only two specialization I see no reason why they shouldn't be make extern and implemented in .cpp. . So this PR is a WIP in which everyone is welcome to contribute. My current todo list is:; - implement tests for set so we can refactor safely. ; - declare int & unsigned int as extern template & move specialization from .h to .cpp for vector & set; - have everything in sofa::helper for consistancy (vector, set, map, pair, list, deque); - fix the problem pointed by @maxime-tournier in #271 in the remove* functions. ; - remove the lines added by hugo ; ```cpp; /// \todo: refactoring of the containers required; /// More info PR #113: https://github.com/sofa-framework/sofa/pull/113; ```; ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/278
https://github.com/sofa-framework/sofa/pull/278:1432,Availability,failure,failures,1432,"The state of vector.h and set.h is a bit messy right now. . A recent PR have added tests to vector & fix several crashes & infinite loop. It appears that the problematic code is also in set.h so a general code factoring is needed. . There is also some details on container refactoring in PR #113 ; Finally it is not very clear what should be in std:: and what should be in sofa::helper:: ...; and there is a lot of code in the .h for only two specialization I see no reason why they shouldn't be make extern and implemented in .cpp. . So this PR is a WIP in which everyone is welcome to contribute. My current todo list is:; - implement tests for set so we can refactor safely. ; - declare int & unsigned int as extern template & move specialization from .h to .cpp for vector & set; - have everything in sofa::helper for consistancy (vector, set, map, pair, list, deque); - fix the problem pointed by @maxime-tournier in #271 in the remove* functions. ; - remove the lines added by hugo ; ```cpp; /// \todo: refactoring of the containers required; /// More info PR #113: https://github.com/sofa-framework/sofa/pull/113; ```; ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/278
https://github.com/sofa-framework/sofa/pull/278:1225,Integrability,message,message,1225,"The state of vector.h and set.h is a bit messy right now. . A recent PR have added tests to vector & fix several crashes & infinite loop. It appears that the problematic code is also in set.h so a general code factoring is needed. . There is also some details on container refactoring in PR #113 ; Finally it is not very clear what should be in std:: and what should be in sofa::helper:: ...; and there is a lot of code in the .h for only two specialization I see no reason why they shouldn't be make extern and implemented in .cpp. . So this PR is a WIP in which everyone is welcome to contribute. My current todo list is:; - implement tests for set so we can refactor safely. ; - declare int & unsigned int as extern template & move specialization from .h to .cpp for vector & set; - have everything in sofa::helper for consistancy (vector, set, map, pair, list, deque); - fix the problem pointed by @maxime-tournier in #271 in the remove* functions. ; - remove the lines added by hugo ; ```cpp; /// \todo: refactoring of the containers required; /// More info PR #113: https://github.com/sofa-framework/sofa/pull/113; ```; ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/278
https://github.com/sofa-framework/sofa/pull/278:273,Modifiability,refactor,refactoring,273,"The state of vector.h and set.h is a bit messy right now. . A recent PR have added tests to vector & fix several crashes & infinite loop. It appears that the problematic code is also in set.h so a general code factoring is needed. . There is also some details on container refactoring in PR #113 ; Finally it is not very clear what should be in std:: and what should be in sofa::helper:: ...; and there is a lot of code in the .h for only two specialization I see no reason why they shouldn't be make extern and implemented in .cpp. . So this PR is a WIP in which everyone is welcome to contribute. My current todo list is:; - implement tests for set so we can refactor safely. ; - declare int & unsigned int as extern template & move specialization from .h to .cpp for vector & set; - have everything in sofa::helper for consistancy (vector, set, map, pair, list, deque); - fix the problem pointed by @maxime-tournier in #271 in the remove* functions. ; - remove the lines added by hugo ; ```cpp; /// \todo: refactoring of the containers required; /// More info PR #113: https://github.com/sofa-framework/sofa/pull/113; ```; ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/278
https://github.com/sofa-framework/sofa/pull/278:661,Modifiability,refactor,refactor,661,"The state of vector.h and set.h is a bit messy right now. . A recent PR have added tests to vector & fix several crashes & infinite loop. It appears that the problematic code is also in set.h so a general code factoring is needed. . There is also some details on container refactoring in PR #113 ; Finally it is not very clear what should be in std:: and what should be in sofa::helper:: ...; and there is a lot of code in the .h for only two specialization I see no reason why they shouldn't be make extern and implemented in .cpp. . So this PR is a WIP in which everyone is welcome to contribute. My current todo list is:; - implement tests for set so we can refactor safely. ; - declare int & unsigned int as extern template & move specialization from .h to .cpp for vector & set; - have everything in sofa::helper for consistancy (vector, set, map, pair, list, deque); - fix the problem pointed by @maxime-tournier in #271 in the remove* functions. ; - remove the lines added by hugo ; ```cpp; /// \todo: refactoring of the containers required; /// More info PR #113: https://github.com/sofa-framework/sofa/pull/113; ```; ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/278
https://github.com/sofa-framework/sofa/pull/278:1009,Modifiability,refactor,refactoring,1009,"The state of vector.h and set.h is a bit messy right now. . A recent PR have added tests to vector & fix several crashes & infinite loop. It appears that the problematic code is also in set.h so a general code factoring is needed. . There is also some details on container refactoring in PR #113 ; Finally it is not very clear what should be in std:: and what should be in sofa::helper:: ...; and there is a lot of code in the .h for only two specialization I see no reason why they shouldn't be make extern and implemented in .cpp. . So this PR is a WIP in which everyone is welcome to contribute. My current todo list is:; - implement tests for set so we can refactor safely. ; - declare int & unsigned int as extern template & move specialization from .h to .cpp for vector & set; - have everything in sofa::helper for consistancy (vector, set, map, pair, list, deque); - fix the problem pointed by @maxime-tournier in #271 in the remove* functions. ; - remove the lines added by hugo ; ```cpp; /// \todo: refactoring of the containers required; /// More info PR #113: https://github.com/sofa-framework/sofa/pull/113; ```; ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/278
https://github.com/sofa-framework/sofa/pull/278:670,Safety,safe,safely,670,"The state of vector.h and set.h is a bit messy right now. . A recent PR have added tests to vector & fix several crashes & infinite loop. It appears that the problematic code is also in set.h so a general code factoring is needed. . There is also some details on container refactoring in PR #113 ; Finally it is not very clear what should be in std:: and what should be in sofa::helper:: ...; and there is a lot of code in the .h for only two specialization I see no reason why they shouldn't be make extern and implemented in .cpp. . So this PR is a WIP in which everyone is welcome to contribute. My current todo list is:; - implement tests for set so we can refactor safely. ; - declare int & unsigned int as extern template & move specialization from .h to .cpp for vector & set; - have everything in sofa::helper for consistancy (vector, set, map, pair, list, deque); - fix the problem pointed by @maxime-tournier in #271 in the remove* functions. ; - remove the lines added by hugo ; ```cpp; /// \todo: refactoring of the containers required; /// More info PR #113: https://github.com/sofa-framework/sofa/pull/113; ```; ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/278
https://github.com/sofa-framework/sofa/pull/278:83,Testability,test,tests,83,"The state of vector.h and set.h is a bit messy right now. . A recent PR have added tests to vector & fix several crashes & infinite loop. It appears that the problematic code is also in set.h so a general code factoring is needed. . There is also some details on container refactoring in PR #113 ; Finally it is not very clear what should be in std:: and what should be in sofa::helper:: ...; and there is a lot of code in the .h for only two specialization I see no reason why they shouldn't be make extern and implemented in .cpp. . So this PR is a WIP in which everyone is welcome to contribute. My current todo list is:; - implement tests for set so we can refactor safely. ; - declare int & unsigned int as extern template & move specialization from .h to .cpp for vector & set; - have everything in sofa::helper for consistancy (vector, set, map, pair, list, deque); - fix the problem pointed by @maxime-tournier in #271 in the remove* functions. ; - remove the lines added by hugo ; ```cpp; /// \todo: refactoring of the containers required; /// More info PR #113: https://github.com/sofa-framework/sofa/pull/113; ```; ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/278
https://github.com/sofa-framework/sofa/pull/278:637,Testability,test,tests,637,"The state of vector.h and set.h is a bit messy right now. . A recent PR have added tests to vector & fix several crashes & infinite loop. It appears that the problematic code is also in set.h so a general code factoring is needed. . There is also some details on container refactoring in PR #113 ; Finally it is not very clear what should be in std:: and what should be in sofa::helper:: ...; and there is a lot of code in the .h for only two specialization I see no reason why they shouldn't be make extern and implemented in .cpp. . So this PR is a WIP in which everyone is welcome to contribute. My current todo list is:; - implement tests for set so we can refactor safely. ; - declare int & unsigned int as extern template & move specialization from .h to .cpp for vector & set; - have everything in sofa::helper for consistancy (vector, set, map, pair, list, deque); - fix the problem pointed by @maxime-tournier in #271 in the remove* functions. ; - remove the lines added by hugo ; ```cpp; /// \todo: refactoring of the containers required; /// More info PR #113: https://github.com/sofa-framework/sofa/pull/113; ```; ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/278
https://github.com/sofa-framework/sofa/pull/278:1377,Testability,test,test,1377,"The state of vector.h and set.h is a bit messy right now. . A recent PR have added tests to vector & fix several crashes & infinite loop. It appears that the problematic code is also in set.h so a general code factoring is needed. . There is also some details on container refactoring in PR #113 ; Finally it is not very clear what should be in std:: and what should be in sofa::helper:: ...; and there is a lot of code in the .h for only two specialization I see no reason why they shouldn't be make extern and implemented in .cpp. . So this PR is a WIP in which everyone is welcome to contribute. My current todo list is:; - implement tests for set so we can refactor safely. ; - declare int & unsigned int as extern template & move specialization from .h to .cpp for vector & set; - have everything in sofa::helper for consistancy (vector, set, map, pair, list, deque); - fix the problem pointed by @maxime-tournier in #271 in the remove* functions. ; - remove the lines added by hugo ; ```cpp; /// \todo: refactoring of the containers required; /// More info PR #113: https://github.com/sofa-framework/sofa/pull/113; ```; ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/278
https://github.com/sofa-framework/sofa/pull/278:1427,Testability,test,test,1427,"The state of vector.h and set.h is a bit messy right now. . A recent PR have added tests to vector & fix several crashes & infinite loop. It appears that the problematic code is also in set.h so a general code factoring is needed. . There is also some details on container refactoring in PR #113 ; Finally it is not very clear what should be in std:: and what should be in sofa::helper:: ...; and there is a lot of code in the .h for only two specialization I see no reason why they shouldn't be make extern and implemented in .cpp. . So this PR is a WIP in which everyone is welcome to contribute. My current todo list is:; - implement tests for set so we can refactor safely. ; - declare int & unsigned int as extern template & move specialization from .h to .cpp for vector & set; - have everything in sofa::helper for consistancy (vector, set, map, pair, list, deque); - fix the problem pointed by @maxime-tournier in #271 in the remove* functions. ; - remove the lines added by hugo ; ```cpp; /// \todo: refactoring of the containers required; /// More info PR #113: https://github.com/sofa-framework/sofa/pull/113; ```; ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/278
https://github.com/sofa-framework/sofa/pull/278:321,Usability,clear,clear,321,"The state of vector.h and set.h is a bit messy right now. . A recent PR have added tests to vector & fix several crashes & infinite loop. It appears that the problematic code is also in set.h so a general code factoring is needed. . There is also some details on container refactoring in PR #113 ; Finally it is not very clear what should be in std:: and what should be in sofa::helper:: ...; and there is a lot of code in the .h for only two specialization I see no reason why they shouldn't be make extern and implemented in .cpp. . So this PR is a WIP in which everyone is welcome to contribute. My current todo list is:; - implement tests for set so we can refactor safely. ; - declare int & unsigned int as extern template & move specialization from .h to .cpp for vector & set; - have everything in sofa::helper for consistancy (vector, set, map, pair, list, deque); - fix the problem pointed by @maxime-tournier in #271 in the remove* functions. ; - remove the lines added by hugo ; ```cpp; /// \todo: refactoring of the containers required; /// More info PR #113: https://github.com/sofa-framework/sofa/pull/113; ```; ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/278
https://github.com/sofa-framework/sofa/pull/279:657,Availability,failure,failures,657,Fix the failing test in; - MeshROI_test ; - PluginManager_test; - in TestMessageHandler remove un-used attribute that was causing a compilation warning in clang; - in image_test do some cosmetic cleaning to find why it fails... but in fact the problem should be fixed on the CI by installing convert & gm.exe on the VM. (this is done since this morning); - Improve the tests in FixedConstraint_test.; ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/279
https://github.com/sofa-framework/sofa/pull/279:707,Availability,failure,failures,707,Fix the failing test in; - MeshROI_test ; - PluginManager_test; - in TestMessageHandler remove un-used attribute that was causing a compilation warning in clang; - in image_test do some cosmetic cleaning to find why it fails... but in fact the problem should be fixed on the CI by installing convert & gm.exe on the VM. (this is done since this morning); - Improve the tests in FixedConstraint_test.; ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/279
https://github.com/sofa-framework/sofa/pull/279:281,Deployability,install,installing,281,Fix the failing test in; - MeshROI_test ; - PluginManager_test; - in TestMessageHandler remove un-used attribute that was causing a compilation warning in clang; - in image_test do some cosmetic cleaning to find why it fails... but in fact the problem should be fixed on the CI by installing convert & gm.exe on the VM. (this is done since this morning); - Improve the tests in FixedConstraint_test.; ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/279
https://github.com/sofa-framework/sofa/pull/279:500,Integrability,message,message,500,Fix the failing test in; - MeshROI_test ; - PluginManager_test; - in TestMessageHandler remove un-used attribute that was causing a compilation warning in clang; - in image_test do some cosmetic cleaning to find why it fails... but in fact the problem should be fixed on the CI by installing convert & gm.exe on the VM. (this is done since this morning); - Improve the tests in FixedConstraint_test.; ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/279
https://github.com/sofa-framework/sofa/pull/279:16,Testability,test,test,16,Fix the failing test in; - MeshROI_test ; - PluginManager_test; - in TestMessageHandler remove un-used attribute that was causing a compilation warning in clang; - in image_test do some cosmetic cleaning to find why it fails... but in fact the problem should be fixed on the CI by installing convert & gm.exe on the VM. (this is done since this morning); - Improve the tests in FixedConstraint_test.; ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/279
https://github.com/sofa-framework/sofa/pull/279:69,Testability,Test,TestMessageHandler,69,Fix the failing test in; - MeshROI_test ; - PluginManager_test; - in TestMessageHandler remove un-used attribute that was causing a compilation warning in clang; - in image_test do some cosmetic cleaning to find why it fails... but in fact the problem should be fixed on the CI by installing convert & gm.exe on the VM. (this is done since this morning); - Improve the tests in FixedConstraint_test.; ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/279
https://github.com/sofa-framework/sofa/pull/279:369,Testability,test,tests,369,Fix the failing test in; - MeshROI_test ; - PluginManager_test; - in TestMessageHandler remove un-used attribute that was causing a compilation warning in clang; - in image_test do some cosmetic cleaning to find why it fails... but in fact the problem should be fixed on the CI by installing convert & gm.exe on the VM. (this is done since this morning); - Improve the tests in FixedConstraint_test.; ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/279
https://github.com/sofa-framework/sofa/pull/279:652,Testability,test,test,652,Fix the failing test in; - MeshROI_test ; - PluginManager_test; - in TestMessageHandler remove un-used attribute that was causing a compilation warning in clang; - in image_test do some cosmetic cleaning to find why it fails... but in fact the problem should be fixed on the CI by installing convert & gm.exe on the VM. (this is done since this morning); - Improve the tests in FixedConstraint_test.; ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/279
https://github.com/sofa-framework/sofa/pull/279:702,Testability,test,test,702,Fix the failing test in; - MeshROI_test ; - PluginManager_test; - in TestMessageHandler remove un-used attribute that was causing a compilation warning in clang; - in image_test do some cosmetic cleaning to find why it fails... but in fact the problem should be fixed on the CI by installing convert & gm.exe on the VM. (this is done since this morning); - Improve the tests in FixedConstraint_test.; ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/279
https://github.com/sofa-framework/sofa/issues/280:445,Integrability,message,message,445,"After spending half a day struggling on a little piece of code, I finally found out that my call to invertMatrix didn't return the correct result:. In Sofa, calling ; ```; Matrix3 M;; M.invert(M);. ``` ; returns a grotesque bullshit, because ""from"" and ""dest"" are the same, and no copy is made, so values are changed and read at the same time.; I understand that in terms of performance, avoiding a useless copy is good, but there is no warning message of any kind, not even as a comment over the function. For the `transpose()` function, there is an additional` transposed()` method that directly stores the transposed matrix in its initial data structure.; I suggest that an `inverted() `method be added to `Mat`, and a little comment above the `invertMatrix()` function be added to warn about this specific problem. What do you think?; If it sounds good to you, I can take care of it. If you see a better way of warning the user about this behavior, or consider that removing entirely the issue by making a temporary copy of the value is not aberrant, that would be even better I guess. @hugtalbot @guparan . ______________________________________________________. Suggested labels: <!--- see https://github.com/sofa-framework/sofa/labels -->",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/280
https://github.com/sofa-framework/sofa/issues/280:375,Performance,perform,performance,375,"After spending half a day struggling on a little piece of code, I finally found out that my call to invertMatrix didn't return the correct result:. In Sofa, calling ; ```; Matrix3 M;; M.invert(M);. ``` ; returns a grotesque bullshit, because ""from"" and ""dest"" are the same, and no copy is made, so values are changed and read at the same time.; I understand that in terms of performance, avoiding a useless copy is good, but there is no warning message of any kind, not even as a comment over the function. For the `transpose()` function, there is an additional` transposed()` method that directly stores the transposed matrix in its initial data structure.; I suggest that an `inverted() `method be added to `Mat`, and a little comment above the `invertMatrix()` function be added to warn about this specific problem. What do you think?; If it sounds good to you, I can take care of it. If you see a better way of warning the user about this behavior, or consider that removing entirely the issue by making a temporary copy of the value is not aberrant, that would be even better I guess. @hugtalbot @guparan . ______________________________________________________. Suggested labels: <!--- see https://github.com/sofa-framework/sofa/labels -->",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/280
https://github.com/sofa-framework/sofa/issues/280:388,Safety,avoid,avoiding,388,"After spending half a day struggling on a little piece of code, I finally found out that my call to invertMatrix didn't return the correct result:. In Sofa, calling ; ```; Matrix3 M;; M.invert(M);. ``` ; returns a grotesque bullshit, because ""from"" and ""dest"" are the same, and no copy is made, so values are changed and read at the same time.; I understand that in terms of performance, avoiding a useless copy is good, but there is no warning message of any kind, not even as a comment over the function. For the `transpose()` function, there is an additional` transposed()` method that directly stores the transposed matrix in its initial data structure.; I suggest that an `inverted() `method be added to `Mat`, and a little comment above the `invertMatrix()` function be added to warn about this specific problem. What do you think?; If it sounds good to you, I can take care of it. If you see a better way of warning the user about this behavior, or consider that removing entirely the issue by making a temporary copy of the value is not aberrant, that would be even better I guess. @hugtalbot @guparan . ______________________________________________________. Suggested labels: <!--- see https://github.com/sofa-framework/sofa/labels -->",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/280
https://github.com/sofa-framework/sofa/issues/281:102,Deployability,configurat,configuration,102,"[ Follow-up of #253 ]. To sum up the ideas:; - create a manifest file @ plugin post-build; - create a configuration system where applications can find the list of plugins to load automatically at startup; - inform the user that if you want to use `<ComponentAFromPluginXXX>`, you need to add the line `<RequiredPlugin pluginName=""PluginXXX"" >`. (Everything started from:; - hard loading of SofaPython in runSofa; - in the future we want to remove ImageBMP/ImagePNG/ImageQt and use ImageCImg from the plugin CimgPlugin, and avoid to always add the RequiredPlugin line in each scene.). The Manifest file will be useful when the components in the Sofa trunk will be dispatched in several plugins (planned in the far future)",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/281
https://github.com/sofa-framework/sofa/issues/281:72,Modifiability,plugin,plugin,72,"[ Follow-up of #253 ]. To sum up the ideas:; - create a manifest file @ plugin post-build; - create a configuration system where applications can find the list of plugins to load automatically at startup; - inform the user that if you want to use `<ComponentAFromPluginXXX>`, you need to add the line `<RequiredPlugin pluginName=""PluginXXX"" >`. (Everything started from:; - hard loading of SofaPython in runSofa; - in the future we want to remove ImageBMP/ImagePNG/ImageQt and use ImageCImg from the plugin CimgPlugin, and avoid to always add the RequiredPlugin line in each scene.). The Manifest file will be useful when the components in the Sofa trunk will be dispatched in several plugins (planned in the far future)",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/281
https://github.com/sofa-framework/sofa/issues/281:102,Modifiability,config,configuration,102,"[ Follow-up of #253 ]. To sum up the ideas:; - create a manifest file @ plugin post-build; - create a configuration system where applications can find the list of plugins to load automatically at startup; - inform the user that if you want to use `<ComponentAFromPluginXXX>`, you need to add the line `<RequiredPlugin pluginName=""PluginXXX"" >`. (Everything started from:; - hard loading of SofaPython in runSofa; - in the future we want to remove ImageBMP/ImagePNG/ImageQt and use ImageCImg from the plugin CimgPlugin, and avoid to always add the RequiredPlugin line in each scene.). The Manifest file will be useful when the components in the Sofa trunk will be dispatched in several plugins (planned in the far future)",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/281
https://github.com/sofa-framework/sofa/issues/281:163,Modifiability,plugin,plugins,163,"[ Follow-up of #253 ]. To sum up the ideas:; - create a manifest file @ plugin post-build; - create a configuration system where applications can find the list of plugins to load automatically at startup; - inform the user that if you want to use `<ComponentAFromPluginXXX>`, you need to add the line `<RequiredPlugin pluginName=""PluginXXX"" >`. (Everything started from:; - hard loading of SofaPython in runSofa; - in the future we want to remove ImageBMP/ImagePNG/ImageQt and use ImageCImg from the plugin CimgPlugin, and avoid to always add the RequiredPlugin line in each scene.). The Manifest file will be useful when the components in the Sofa trunk will be dispatched in several plugins (planned in the far future)",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/281
https://github.com/sofa-framework/sofa/issues/281:318,Modifiability,plugin,pluginName,318,"[ Follow-up of #253 ]. To sum up the ideas:; - create a manifest file @ plugin post-build; - create a configuration system where applications can find the list of plugins to load automatically at startup; - inform the user that if you want to use `<ComponentAFromPluginXXX>`, you need to add the line `<RequiredPlugin pluginName=""PluginXXX"" >`. (Everything started from:; - hard loading of SofaPython in runSofa; - in the future we want to remove ImageBMP/ImagePNG/ImageQt and use ImageCImg from the plugin CimgPlugin, and avoid to always add the RequiredPlugin line in each scene.). The Manifest file will be useful when the components in the Sofa trunk will be dispatched in several plugins (planned in the far future)",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/281
https://github.com/sofa-framework/sofa/issues/281:330,Modifiability,Plugin,PluginXXX,330,"[ Follow-up of #253 ]. To sum up the ideas:; - create a manifest file @ plugin post-build; - create a configuration system where applications can find the list of plugins to load automatically at startup; - inform the user that if you want to use `<ComponentAFromPluginXXX>`, you need to add the line `<RequiredPlugin pluginName=""PluginXXX"" >`. (Everything started from:; - hard loading of SofaPython in runSofa; - in the future we want to remove ImageBMP/ImagePNG/ImageQt and use ImageCImg from the plugin CimgPlugin, and avoid to always add the RequiredPlugin line in each scene.). The Manifest file will be useful when the components in the Sofa trunk will be dispatched in several plugins (planned in the far future)",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/281
https://github.com/sofa-framework/sofa/issues/281:500,Modifiability,plugin,plugin,500,"[ Follow-up of #253 ]. To sum up the ideas:; - create a manifest file @ plugin post-build; - create a configuration system where applications can find the list of plugins to load automatically at startup; - inform the user that if you want to use `<ComponentAFromPluginXXX>`, you need to add the line `<RequiredPlugin pluginName=""PluginXXX"" >`. (Everything started from:; - hard loading of SofaPython in runSofa; - in the future we want to remove ImageBMP/ImagePNG/ImageQt and use ImageCImg from the plugin CimgPlugin, and avoid to always add the RequiredPlugin line in each scene.). The Manifest file will be useful when the components in the Sofa trunk will be dispatched in several plugins (planned in the far future)",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/281
https://github.com/sofa-framework/sofa/issues/281:685,Modifiability,plugin,plugins,685,"[ Follow-up of #253 ]. To sum up the ideas:; - create a manifest file @ plugin post-build; - create a configuration system where applications can find the list of plugins to load automatically at startup; - inform the user that if you want to use `<ComponentAFromPluginXXX>`, you need to add the line `<RequiredPlugin pluginName=""PluginXXX"" >`. (Everything started from:; - hard loading of SofaPython in runSofa; - in the future we want to remove ImageBMP/ImagePNG/ImageQt and use ImageCImg from the plugin CimgPlugin, and avoid to always add the RequiredPlugin line in each scene.). The Manifest file will be useful when the components in the Sofa trunk will be dispatched in several plugins (planned in the far future)",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/281
https://github.com/sofa-framework/sofa/issues/281:174,Performance,load,load,174,"[ Follow-up of #253 ]. To sum up the ideas:; - create a manifest file @ plugin post-build; - create a configuration system where applications can find the list of plugins to load automatically at startup; - inform the user that if you want to use `<ComponentAFromPluginXXX>`, you need to add the line `<RequiredPlugin pluginName=""PluginXXX"" >`. (Everything started from:; - hard loading of SofaPython in runSofa; - in the future we want to remove ImageBMP/ImagePNG/ImageQt and use ImageCImg from the plugin CimgPlugin, and avoid to always add the RequiredPlugin line in each scene.). The Manifest file will be useful when the components in the Sofa trunk will be dispatched in several plugins (planned in the far future)",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/281
https://github.com/sofa-framework/sofa/issues/281:379,Performance,load,loading,379,"[ Follow-up of #253 ]. To sum up the ideas:; - create a manifest file @ plugin post-build; - create a configuration system where applications can find the list of plugins to load automatically at startup; - inform the user that if you want to use `<ComponentAFromPluginXXX>`, you need to add the line `<RequiredPlugin pluginName=""PluginXXX"" >`. (Everything started from:; - hard loading of SofaPython in runSofa; - in the future we want to remove ImageBMP/ImagePNG/ImageQt and use ImageCImg from the plugin CimgPlugin, and avoid to always add the RequiredPlugin line in each scene.). The Manifest file will be useful when the components in the Sofa trunk will be dispatched in several plugins (planned in the far future)",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/281
https://github.com/sofa-framework/sofa/issues/281:523,Safety,avoid,avoid,523,"[ Follow-up of #253 ]. To sum up the ideas:; - create a manifest file @ plugin post-build; - create a configuration system where applications can find the list of plugins to load automatically at startup; - inform the user that if you want to use `<ComponentAFromPluginXXX>`, you need to add the line `<RequiredPlugin pluginName=""PluginXXX"" >`. (Everything started from:; - hard loading of SofaPython in runSofa; - in the future we want to remove ImageBMP/ImagePNG/ImageQt and use ImageCImg from the plugin CimgPlugin, and avoid to always add the RequiredPlugin line in each scene.). The Manifest file will be useful when the components in the Sofa trunk will be dispatched in several plugins (planned in the far future)",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/281
https://github.com/sofa-framework/sofa/pull/282:275,Availability,failure,failures,275,Solves issue #84 . ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/282
https://github.com/sofa-framework/sofa/pull/282:325,Availability,failure,failures,325,Solves issue #84 . ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/282
https://github.com/sofa-framework/sofa/pull/282:118,Integrability,message,message,118,Solves issue #84 . ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/282
https://github.com/sofa-framework/sofa/pull/282:270,Testability,test,test,270,Solves issue #84 . ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/282
https://github.com/sofa-framework/sofa/pull/282:320,Testability,test,test,320,Solves issue #84 . ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/282
https://github.com/sofa-framework/sofa/pull/283:3649,Availability,failure,failures,3649,"t otherwise Controllers now act as any other python object. The old behavior still works, should you need it. ```python; ; import Sofa ; class Script(Sofa.PythonScriptController):. def __init__(self, node, *args, **kwargs):; self.bacon = kwargs.pop('egg', 'spam'). def onBeginAnimationStep(self, dt):; print(self.bacon). ; def createScene(node):; script = Script(node, egg = 'spam'); . ```. Creating instances directly no longer calls `onLoaded` nor `createGraph`:. - nothing is actually loaded; - code in `createGraph` really belongs to `__init__` anyways. This behavior can be changed of course, maybe a warning can/should be emitted if the instance creation detects a derived implementation. Comments welcome :). The PR also removes heavy copypasta in some files, removes unneeded `extern ""C""` linkage and a few other cosmetic changes. # Changelog. - `PythonScriptController` and derived classes are now instantiable directly in python. The constructor requires a `Node` as first parameter.; - `onLoaded` and `createGraph` entry points are no longer called when classes are instantiated directly from python. Corresponding code belongs to the derived class constructor.; - creating instances ""the old way"" through `node.createGraph` has unchanged behavior; - the workaround module `SofaPython.script` now features a deprecation message, together with a derived class easing transition (calls `createGraph` on construction, warns if `onLoaded` is defined); - updated `ControllerVariable.py` example ; - some minor cleanups; ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/283
https://github.com/sofa-framework/sofa/pull/283:3699,Availability,failure,failures,3699,"t otherwise Controllers now act as any other python object. The old behavior still works, should you need it. ```python; ; import Sofa ; class Script(Sofa.PythonScriptController):. def __init__(self, node, *args, **kwargs):; self.bacon = kwargs.pop('egg', 'spam'). def onBeginAnimationStep(self, dt):; print(self.bacon). ; def createScene(node):; script = Script(node, egg = 'spam'); . ```. Creating instances directly no longer calls `onLoaded` nor `createGraph`:. - nothing is actually loaded; - code in `createGraph` really belongs to `__init__` anyways. This behavior can be changed of course, maybe a warning can/should be emitted if the instance creation detects a derived implementation. Comments welcome :). The PR also removes heavy copypasta in some files, removes unneeded `extern ""C""` linkage and a few other cosmetic changes. # Changelog. - `PythonScriptController` and derived classes are now instantiable directly in python. The constructor requires a `Node` as first parameter.; - `onLoaded` and `createGraph` entry points are no longer called when classes are instantiated directly from python. Corresponding code belongs to the derived class constructor.; - creating instances ""the old way"" through `node.createGraph` has unchanged behavior; - the workaround module `SofaPython.script` now features a deprecation message, together with a derived class easing transition (calls `createGraph` on construction, warns if `onLoaded` is defined); - updated `ControllerVariable.py` example ; - some minor cleanups; ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/283
https://github.com/sofa-framework/sofa/pull/283:3328,Deployability,update,updated,3328,"t otherwise Controllers now act as any other python object. The old behavior still works, should you need it. ```python; ; import Sofa ; class Script(Sofa.PythonScriptController):. def __init__(self, node, *args, **kwargs):; self.bacon = kwargs.pop('egg', 'spam'). def onBeginAnimationStep(self, dt):; print(self.bacon). ; def createScene(node):; script = Script(node, egg = 'spam'); . ```. Creating instances directly no longer calls `onLoaded` nor `createGraph`:. - nothing is actually loaded; - code in `createGraph` really belongs to `__init__` anyways. This behavior can be changed of course, maybe a warning can/should be emitted if the instance creation detects a derived implementation. Comments welcome :). The PR also removes heavy copypasta in some files, removes unneeded `extern ""C""` linkage and a few other cosmetic changes. # Changelog. - `PythonScriptController` and derived classes are now instantiable directly in python. The constructor requires a `Node` as first parameter.; - `onLoaded` and `createGraph` entry points are no longer called when classes are instantiated directly from python. Corresponding code belongs to the derived class constructor.; - creating instances ""the old way"" through `node.createGraph` has unchanged behavior; - the workaround module `SofaPython.script` now features a deprecation message, together with a derived class easing transition (calls `createGraph` on construction, warns if `onLoaded` is defined); - updated `ControllerVariable.py` example ; - some minor cleanups; ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/283
https://github.com/sofa-framework/sofa/pull/283:714,Integrability,wrap,wrapper,714,"Hello all,. This PR somewhat simplifies the creation and handling of `PythonScriptControllers` from python scenes. Here's the TL;DR version:. ```python; import Sofa ; class Script(Sofa.PythonScriptController): pass. def createScene(node):; # now you can do; script = Script(node, 'bar', egg = 'spam'). # the old behavior still works:; old = node.createObject('PythonScriptController', filename = '', classname = 'Script'); ```. Now for the details:. ## Existing approach; The current approach is to use ; ```python; node.createObject('PythonScriptController', filename = '', classname = 'Script'); ```; which has several drawbacks:; - The returned object does not point to the control object, but to the component wrapper. This makes it complicated to pass data around at scene creation (people generally resort to `global` variables for this purpose).; - If `filename` is non-empty, the corresponding file is (re)loaded, causing all sorts of *interesting* side-effects. If you ever had to struggle with these, you know what I mean.; - If `filename` is empty, the control class has to lie in the `__main__` namespace; - It is quite verbose; - It just feels plain wrong *not* to create python objects directly when called from python. It does have a few advantages though:; - It does not require any `PythonScriptController`-specific code for object creation,; - It enables the creation of `PythonScriptController` instances from XML scenes . ## Current workaround; There is a workaround class `SofaPython.script.Controller` that somewhat fixes some of the issues by implementing `__new__` in a derived Python class, intercepting and returning the control instance and optional initialization arguments, but overall it feels more like a hack. ## This PR. This PR simply provides a clean binding for instance creation. You need to provide a node as a first argument, but otherwise Controllers now act as any other python object. The old behavior still works, should you need it. ```python; ; import Sofa",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/283
https://github.com/sofa-framework/sofa/pull/283:3198,Integrability,message,message,3198,"t otherwise Controllers now act as any other python object. The old behavior still works, should you need it. ```python; ; import Sofa ; class Script(Sofa.PythonScriptController):. def __init__(self, node, *args, **kwargs):; self.bacon = kwargs.pop('egg', 'spam'). def onBeginAnimationStep(self, dt):; print(self.bacon). ; def createScene(node):; script = Script(node, egg = 'spam'); . ```. Creating instances directly no longer calls `onLoaded` nor `createGraph`:. - nothing is actually loaded; - code in `createGraph` really belongs to `__init__` anyways. This behavior can be changed of course, maybe a warning can/should be emitted if the instance creation detects a derived implementation. Comments welcome :). The PR also removes heavy copypasta in some files, removes unneeded `extern ""C""` linkage and a few other cosmetic changes. # Changelog. - `PythonScriptController` and derived classes are now instantiable directly in python. The constructor requires a `Node` as first parameter.; - `onLoaded` and `createGraph` entry points are no longer called when classes are instantiated directly from python. Corresponding code belongs to the derived class constructor.; - creating instances ""the old way"" through `node.createGraph` has unchanged behavior; - the workaround module `SofaPython.script` now features a deprecation message, together with a derived class easing transition (calls `createGraph` on construction, warns if `onLoaded` is defined); - updated `ControllerVariable.py` example ; - some minor cleanups; ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/283
https://github.com/sofa-framework/sofa/pull/283:3492,Integrability,message,message,3492,"t otherwise Controllers now act as any other python object. The old behavior still works, should you need it. ```python; ; import Sofa ; class Script(Sofa.PythonScriptController):. def __init__(self, node, *args, **kwargs):; self.bacon = kwargs.pop('egg', 'spam'). def onBeginAnimationStep(self, dt):; print(self.bacon). ; def createScene(node):; script = Script(node, egg = 'spam'); . ```. Creating instances directly no longer calls `onLoaded` nor `createGraph`:. - nothing is actually loaded; - code in `createGraph` really belongs to `__init__` anyways. This behavior can be changed of course, maybe a warning can/should be emitted if the instance creation detects a derived implementation. Comments welcome :). The PR also removes heavy copypasta in some files, removes unneeded `extern ""C""` linkage and a few other cosmetic changes. # Changelog. - `PythonScriptController` and derived classes are now instantiable directly in python. The constructor requires a `Node` as first parameter.; - `onLoaded` and `createGraph` entry points are no longer called when classes are instantiated directly from python. Corresponding code belongs to the derived class constructor.; - creating instances ""the old way"" through `node.createGraph` has unchanged behavior; - the workaround module `SofaPython.script` now features a deprecation message, together with a derived class easing transition (calls `createGraph` on construction, warns if `onLoaded` is defined); - updated `ControllerVariable.py` example ; - some minor cleanups; ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/283
https://github.com/sofa-framework/sofa/pull/283:824,Modifiability,variab,variables,824,"Hello all,. This PR somewhat simplifies the creation and handling of `PythonScriptControllers` from python scenes. Here's the TL;DR version:. ```python; import Sofa ; class Script(Sofa.PythonScriptController): pass. def createScene(node):; # now you can do; script = Script(node, 'bar', egg = 'spam'). # the old behavior still works:; old = node.createObject('PythonScriptController', filename = '', classname = 'Script'); ```. Now for the details:. ## Existing approach; The current approach is to use ; ```python; node.createObject('PythonScriptController', filename = '', classname = 'Script'); ```; which has several drawbacks:; - The returned object does not point to the control object, but to the component wrapper. This makes it complicated to pass data around at scene creation (people generally resort to `global` variables for this purpose).; - If `filename` is non-empty, the corresponding file is (re)loaded, causing all sorts of *interesting* side-effects. If you ever had to struggle with these, you know what I mean.; - If `filename` is empty, the control class has to lie in the `__main__` namespace; - It is quite verbose; - It just feels plain wrong *not* to create python objects directly when called from python. It does have a few advantages though:; - It does not require any `PythonScriptController`-specific code for object creation,; - It enables the creation of `PythonScriptController` instances from XML scenes . ## Current workaround; There is a workaround class `SofaPython.script.Controller` that somewhat fixes some of the issues by implementing `__new__` in a derived Python class, intercepting and returning the control instance and optional initialization arguments, but overall it feels more like a hack. ## This PR. This PR simply provides a clean binding for instance creation. You need to provide a node as a first argument, but otherwise Controllers now act as any other python object. The old behavior still works, should you need it. ```python; ; import Sofa",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/283
https://github.com/sofa-framework/sofa/pull/283:914,Performance,load,loaded,914,"Hello all,. This PR somewhat simplifies the creation and handling of `PythonScriptControllers` from python scenes. Here's the TL;DR version:. ```python; import Sofa ; class Script(Sofa.PythonScriptController): pass. def createScene(node):; # now you can do; script = Script(node, 'bar', egg = 'spam'). # the old behavior still works:; old = node.createObject('PythonScriptController', filename = '', classname = 'Script'); ```. Now for the details:. ## Existing approach; The current approach is to use ; ```python; node.createObject('PythonScriptController', filename = '', classname = 'Script'); ```; which has several drawbacks:; - The returned object does not point to the control object, but to the component wrapper. This makes it complicated to pass data around at scene creation (people generally resort to `global` variables for this purpose).; - If `filename` is non-empty, the corresponding file is (re)loaded, causing all sorts of *interesting* side-effects. If you ever had to struggle with these, you know what I mean.; - If `filename` is empty, the control class has to lie in the `__main__` namespace; - It is quite verbose; - It just feels plain wrong *not* to create python objects directly when called from python. It does have a few advantages though:; - It does not require any `PythonScriptController`-specific code for object creation,; - It enables the creation of `PythonScriptController` instances from XML scenes . ## Current workaround; There is a workaround class `SofaPython.script.Controller` that somewhat fixes some of the issues by implementing `__new__` in a derived Python class, intercepting and returning the control instance and optional initialization arguments, but overall it feels more like a hack. ## This PR. This PR simply provides a clean binding for instance creation. You need to provide a node as a first argument, but otherwise Controllers now act as any other python object. The old behavior still works, should you need it. ```python; ; import Sofa",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/283
https://github.com/sofa-framework/sofa/pull/283:2355,Performance,load,loaded,2355,"reation of `PythonScriptController` instances from XML scenes . ## Current workaround; There is a workaround class `SofaPython.script.Controller` that somewhat fixes some of the issues by implementing `__new__` in a derived Python class, intercepting and returning the control instance and optional initialization arguments, but overall it feels more like a hack. ## This PR. This PR simply provides a clean binding for instance creation. You need to provide a node as a first argument, but otherwise Controllers now act as any other python object. The old behavior still works, should you need it. ```python; ; import Sofa ; class Script(Sofa.PythonScriptController):. def __init__(self, node, *args, **kwargs):; self.bacon = kwargs.pop('egg', 'spam'). def onBeginAnimationStep(self, dt):; print(self.bacon). ; def createScene(node):; script = Script(node, egg = 'spam'); . ```. Creating instances directly no longer calls `onLoaded` nor `createGraph`:. - nothing is actually loaded; - code in `createGraph` really belongs to `__init__` anyways. This behavior can be changed of course, maybe a warning can/should be emitted if the instance creation detects a derived implementation. Comments welcome :). The PR also removes heavy copypasta in some files, removes unneeded `extern ""C""` linkage and a few other cosmetic changes. # Changelog. - `PythonScriptController` and derived classes are now instantiable directly in python. The constructor requires a `Node` as first parameter.; - `onLoaded` and `createGraph` entry points are no longer called when classes are instantiated directly from python. Corresponding code belongs to the derived class constructor.; - creating instances ""the old way"" through `node.createGraph` has unchanged behavior; - the workaround module `SofaPython.script` now features a deprecation message, together with a derived class easing transition (calls `createGraph` on construction, warns if `onLoaded` is defined); - updated `ControllerVariable.py` example ; - some m",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/283
https://github.com/sofa-framework/sofa/pull/283:2528,Safety,detect,detects,2528," `SofaPython.script.Controller` that somewhat fixes some of the issues by implementing `__new__` in a derived Python class, intercepting and returning the control instance and optional initialization arguments, but overall it feels more like a hack. ## This PR. This PR simply provides a clean binding for instance creation. You need to provide a node as a first argument, but otherwise Controllers now act as any other python object. The old behavior still works, should you need it. ```python; ; import Sofa ; class Script(Sofa.PythonScriptController):. def __init__(self, node, *args, **kwargs):; self.bacon = kwargs.pop('egg', 'spam'). def onBeginAnimationStep(self, dt):; print(self.bacon). ; def createScene(node):; script = Script(node, egg = 'spam'); . ```. Creating instances directly no longer calls `onLoaded` nor `createGraph`:. - nothing is actually loaded; - code in `createGraph` really belongs to `__init__` anyways. This behavior can be changed of course, maybe a warning can/should be emitted if the instance creation detects a derived implementation. Comments welcome :). The PR also removes heavy copypasta in some files, removes unneeded `extern ""C""` linkage and a few other cosmetic changes. # Changelog. - `PythonScriptController` and derived classes are now instantiable directly in python. The constructor requires a `Node` as first parameter.; - `onLoaded` and `createGraph` entry points are no longer called when classes are instantiated directly from python. Corresponding code belongs to the derived class constructor.; - creating instances ""the old way"" through `node.createGraph` has unchanged behavior; - the workaround module `SofaPython.script` now features a deprecation message, together with a derived class easing transition (calls `createGraph` on construction, warns if `onLoaded` is defined); - updated `ControllerVariable.py` example ; - some minor cleanups; ______________________________________________________; <!--- Please leave this at the end of your m",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/283
https://github.com/sofa-framework/sofa/pull/283:3644,Testability,test,test,3644,"t otherwise Controllers now act as any other python object. The old behavior still works, should you need it. ```python; ; import Sofa ; class Script(Sofa.PythonScriptController):. def __init__(self, node, *args, **kwargs):; self.bacon = kwargs.pop('egg', 'spam'). def onBeginAnimationStep(self, dt):; print(self.bacon). ; def createScene(node):; script = Script(node, egg = 'spam'); . ```. Creating instances directly no longer calls `onLoaded` nor `createGraph`:. - nothing is actually loaded; - code in `createGraph` really belongs to `__init__` anyways. This behavior can be changed of course, maybe a warning can/should be emitted if the instance creation detects a derived implementation. Comments welcome :). The PR also removes heavy copypasta in some files, removes unneeded `extern ""C""` linkage and a few other cosmetic changes. # Changelog. - `PythonScriptController` and derived classes are now instantiable directly in python. The constructor requires a `Node` as first parameter.; - `onLoaded` and `createGraph` entry points are no longer called when classes are instantiated directly from python. Corresponding code belongs to the derived class constructor.; - creating instances ""the old way"" through `node.createGraph` has unchanged behavior; - the workaround module `SofaPython.script` now features a deprecation message, together with a derived class easing transition (calls `createGraph` on construction, warns if `onLoaded` is defined); - updated `ControllerVariable.py` example ; - some minor cleanups; ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/283
https://github.com/sofa-framework/sofa/pull/283:3694,Testability,test,test,3694,"t otherwise Controllers now act as any other python object. The old behavior still works, should you need it. ```python; ; import Sofa ; class Script(Sofa.PythonScriptController):. def __init__(self, node, *args, **kwargs):; self.bacon = kwargs.pop('egg', 'spam'). def onBeginAnimationStep(self, dt):; print(self.bacon). ; def createScene(node):; script = Script(node, egg = 'spam'); . ```. Creating instances directly no longer calls `onLoaded` nor `createGraph`:. - nothing is actually loaded; - code in `createGraph` really belongs to `__init__` anyways. This behavior can be changed of course, maybe a warning can/should be emitted if the instance creation detects a derived implementation. Comments welcome :). The PR also removes heavy copypasta in some files, removes unneeded `extern ""C""` linkage and a few other cosmetic changes. # Changelog. - `PythonScriptController` and derived classes are now instantiable directly in python. The constructor requires a `Node` as first parameter.; - `onLoaded` and `createGraph` entry points are no longer called when classes are instantiated directly from python. Corresponding code belongs to the derived class constructor.; - creating instances ""the old way"" through `node.createGraph` has unchanged behavior; - the workaround module `SofaPython.script` now features a deprecation message, together with a derived class easing transition (calls `createGraph` on construction, warns if `onLoaded` is defined); - updated `ControllerVariable.py` example ; - some minor cleanups; ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/283
https://github.com/sofa-framework/sofa/pull/283:29,Usability,simpl,simplifies,29,"Hello all,. This PR somewhat simplifies the creation and handling of `PythonScriptControllers` from python scenes. Here's the TL;DR version:. ```python; import Sofa ; class Script(Sofa.PythonScriptController): pass. def createScene(node):; # now you can do; script = Script(node, 'bar', egg = 'spam'). # the old behavior still works:; old = node.createObject('PythonScriptController', filename = '', classname = 'Script'); ```. Now for the details:. ## Existing approach; The current approach is to use ; ```python; node.createObject('PythonScriptController', filename = '', classname = 'Script'); ```; which has several drawbacks:; - The returned object does not point to the control object, but to the component wrapper. This makes it complicated to pass data around at scene creation (people generally resort to `global` variables for this purpose).; - If `filename` is non-empty, the corresponding file is (re)loaded, causing all sorts of *interesting* side-effects. If you ever had to struggle with these, you know what I mean.; - If `filename` is empty, the control class has to lie in the `__main__` namespace; - It is quite verbose; - It just feels plain wrong *not* to create python objects directly when called from python. It does have a few advantages though:; - It does not require any `PythonScriptController`-specific code for object creation,; - It enables the creation of `PythonScriptController` instances from XML scenes . ## Current workaround; There is a workaround class `SofaPython.script.Controller` that somewhat fixes some of the issues by implementing `__new__` in a derived Python class, intercepting and returning the control instance and optional initialization arguments, but overall it feels more like a hack. ## This PR. This PR simply provides a clean binding for instance creation. You need to provide a node as a first argument, but otherwise Controllers now act as any other python object. The old behavior still works, should you need it. ```python; ; import Sofa",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/283
https://github.com/sofa-framework/sofa/pull/283:1762,Usability,simpl,simply,1762,"on (people generally resort to `global` variables for this purpose).; - If `filename` is non-empty, the corresponding file is (re)loaded, causing all sorts of *interesting* side-effects. If you ever had to struggle with these, you know what I mean.; - If `filename` is empty, the control class has to lie in the `__main__` namespace; - It is quite verbose; - It just feels plain wrong *not* to create python objects directly when called from python. It does have a few advantages though:; - It does not require any `PythonScriptController`-specific code for object creation,; - It enables the creation of `PythonScriptController` instances from XML scenes . ## Current workaround; There is a workaround class `SofaPython.script.Controller` that somewhat fixes some of the issues by implementing `__new__` in a derived Python class, intercepting and returning the control instance and optional initialization arguments, but overall it feels more like a hack. ## This PR. This PR simply provides a clean binding for instance creation. You need to provide a node as a first argument, but otherwise Controllers now act as any other python object. The old behavior still works, should you need it. ```python; ; import Sofa ; class Script(Sofa.PythonScriptController):. def __init__(self, node, *args, **kwargs):; self.bacon = kwargs.pop('egg', 'spam'). def onBeginAnimationStep(self, dt):; print(self.bacon). ; def createScene(node):; script = Script(node, egg = 'spam'); . ```. Creating instances directly no longer calls `onLoaded` nor `createGraph`:. - nothing is actually loaded; - code in `createGraph` really belongs to `__init__` anyways. This behavior can be changed of course, maybe a warning can/should be emitted if the instance creation detects a derived implementation. Comments welcome :). The PR also removes heavy copypasta in some files, removes unneeded `extern ""C""` linkage and a few other cosmetic changes. # Changelog. - `PythonScriptController` and derived classes are now instantiabl",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/283
https://github.com/sofa-framework/sofa/pull/284:438,Availability,failure,failures,438,"Small fix related to issue #114 . Have tested the compilation without the flag `SOFA_INSTALL_RESOURCES_FILES` (which is set by default), Sofa.ini which is necessary is well created. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/284
https://github.com/sofa-framework/sofa/pull/284:488,Availability,failure,failures,488,"Small fix related to issue #114 . Have tested the compilation without the flag `SOFA_INSTALL_RESOURCES_FILES` (which is set by default), Sofa.ini which is necessary is well created. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/284
https://github.com/sofa-framework/sofa/pull/284:281,Integrability,message,message,281,"Small fix related to issue #114 . Have tested the compilation without the flag `SOFA_INSTALL_RESOURCES_FILES` (which is set by default), Sofa.ini which is necessary is well created. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/284
https://github.com/sofa-framework/sofa/pull/284:39,Testability,test,tested,39,"Small fix related to issue #114 . Have tested the compilation without the flag `SOFA_INSTALL_RESOURCES_FILES` (which is set by default), Sofa.ini which is necessary is well created. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/284
https://github.com/sofa-framework/sofa/pull/284:433,Testability,test,test,433,"Small fix related to issue #114 . Have tested the compilation without the flag `SOFA_INSTALL_RESOURCES_FILES` (which is set by default), Sofa.ini which is necessary is well created. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/284
https://github.com/sofa-framework/sofa/pull/284:483,Testability,test,test,483,"Small fix related to issue #114 . Have tested the compilation without the flag `SOFA_INSTALL_RESOURCES_FILES` (which is set by default), Sofa.ini which is necessary is well created. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/284
https://github.com/sofa-framework/sofa/pull/285:335,Availability,failure,failures,335,This file is needed even if SOFA_INSTALL_RESOURCES_FILES == false; Fixes #114. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/285
https://github.com/sofa-framework/sofa/pull/285:385,Availability,failure,failures,385,This file is needed even if SOFA_INSTALL_RESOURCES_FILES == false; Fixes #114. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/285
https://github.com/sofa-framework/sofa/pull/285:178,Integrability,message,message,178,This file is needed even if SOFA_INSTALL_RESOURCES_FILES == false; Fixes #114. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/285
https://github.com/sofa-framework/sofa/pull/285:330,Testability,test,test,330,This file is needed even if SOFA_INSTALL_RESOURCES_FILES == false; Fixes #114. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/285
https://github.com/sofa-framework/sofa/pull/285:380,Testability,test,test,380,This file is needed even if SOFA_INSTALL_RESOURCES_FILES == false; Fixes #114. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/285
https://github.com/sofa-framework/sofa/pull/286:784,Availability,failure,failures,784,"In createObject... When you given an object as argument instead of a string the binding convert it (with str). This is problematic in many cases eg. with a list it is converted with the bracket (ie: '[' ) and comma as separator. To resolve that I add a method that, if a list is passed as an argument, convert it as a string following the sofa style (without comma and bracket). CHANGELOG for @hugtalbot & @guparan :; [SofaPython]: change the way createObject() handle its arguments to simplify scene writing + batch of tests.; ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/286
https://github.com/sofa-framework/sofa/pull/286:834,Availability,failure,failures,834,"In createObject... When you given an object as argument instead of a string the binding convert it (with str). This is problematic in many cases eg. with a list it is converted with the bracket (ie: '[' ) and comma as separator. To resolve that I add a method that, if a list is passed as an argument, convert it as a string following the sofa style (without comma and bracket). CHANGELOG for @hugtalbot & @guparan :; [SofaPython]: change the way createObject() handle its arguments to simplify scene writing + batch of tests.; ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/286
https://github.com/sofa-framework/sofa/pull/286:627,Integrability,message,message,627,"In createObject... When you given an object as argument instead of a string the binding convert it (with str). This is problematic in many cases eg. with a list it is converted with the bracket (ie: '[' ) and comma as separator. To resolve that I add a method that, if a list is passed as an argument, convert it as a string following the sofa style (without comma and bracket). CHANGELOG for @hugtalbot & @guparan :; [SofaPython]: change the way createObject() handle its arguments to simplify scene writing + batch of tests.; ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/286
https://github.com/sofa-framework/sofa/pull/286:520,Testability,test,tests,520,"In createObject... When you given an object as argument instead of a string the binding convert it (with str). This is problematic in many cases eg. with a list it is converted with the bracket (ie: '[' ) and comma as separator. To resolve that I add a method that, if a list is passed as an argument, convert it as a string following the sofa style (without comma and bracket). CHANGELOG for @hugtalbot & @guparan :; [SofaPython]: change the way createObject() handle its arguments to simplify scene writing + batch of tests.; ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/286
https://github.com/sofa-framework/sofa/pull/286:779,Testability,test,test,779,"In createObject... When you given an object as argument instead of a string the binding convert it (with str). This is problematic in many cases eg. with a list it is converted with the bracket (ie: '[' ) and comma as separator. To resolve that I add a method that, if a list is passed as an argument, convert it as a string following the sofa style (without comma and bracket). CHANGELOG for @hugtalbot & @guparan :; [SofaPython]: change the way createObject() handle its arguments to simplify scene writing + batch of tests.; ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/286
https://github.com/sofa-framework/sofa/pull/286:829,Testability,test,test,829,"In createObject... When you given an object as argument instead of a string the binding convert it (with str). This is problematic in many cases eg. with a list it is converted with the bracket (ie: '[' ) and comma as separator. To resolve that I add a method that, if a list is passed as an argument, convert it as a string following the sofa style (without comma and bracket). CHANGELOG for @hugtalbot & @guparan :; [SofaPython]: change the way createObject() handle its arguments to simplify scene writing + batch of tests.; ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/286
https://github.com/sofa-framework/sofa/pull/286:486,Usability,simpl,simplify,486,"In createObject... When you given an object as argument instead of a string the binding convert it (with str). This is problematic in many cases eg. with a list it is converted with the bracket (ie: '[' ) and comma as separator. To resolve that I add a method that, if a list is passed as an argument, convert it as a string following the sofa style (without comma and bracket). CHANGELOG for @hugtalbot & @guparan :; [SofaPython]: change the way createObject() handle its arguments to simplify scene writing + batch of tests.; ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/286
https://github.com/sofa-framework/sofa/pull/287:562,Availability,failure,failures,562,"- add CMakeLists.txt for anatomyModelling tutorial example (which was missing); - update anatomyModelling.cpp in order to build the anatomy example (in bin directory); The example compiles and runs fine on linux ubuntu, but I'm not sure that behaviour is as it should be! Please examine it before merging. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/287
https://github.com/sofa-framework/sofa/pull/287:612,Availability,failure,failures,612,"- add CMakeLists.txt for anatomyModelling tutorial example (which was missing); - update anatomyModelling.cpp in order to build the anatomy example (in bin directory); The example compiles and runs fine on linux ubuntu, but I'm not sure that behaviour is as it should be! Please examine it before merging. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/287
https://github.com/sofa-framework/sofa/pull/287:82,Deployability,update,update,82,"- add CMakeLists.txt for anatomyModelling tutorial example (which was missing); - update anatomyModelling.cpp in order to build the anatomy example (in bin directory); The example compiles and runs fine on linux ubuntu, but I'm not sure that behaviour is as it should be! Please examine it before merging. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/287
https://github.com/sofa-framework/sofa/pull/287:405,Integrability,message,message,405,"- add CMakeLists.txt for anatomyModelling tutorial example (which was missing); - update anatomyModelling.cpp in order to build the anatomy example (in bin directory); The example compiles and runs fine on linux ubuntu, but I'm not sure that behaviour is as it should be! Please examine it before merging. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/287
https://github.com/sofa-framework/sofa/pull/287:557,Testability,test,test,557,"- add CMakeLists.txt for anatomyModelling tutorial example (which was missing); - update anatomyModelling.cpp in order to build the anatomy example (in bin directory); The example compiles and runs fine on linux ubuntu, but I'm not sure that behaviour is as it should be! Please examine it before merging. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/287
https://github.com/sofa-framework/sofa/pull/287:607,Testability,test,test,607,"- add CMakeLists.txt for anatomyModelling tutorial example (which was missing); - update anatomyModelling.cpp in order to build the anatomy example (in bin directory); The example compiles and runs fine on linux ubuntu, but I'm not sure that behaviour is as it should be! Please examine it before merging. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/287
https://github.com/sofa-framework/sofa/pull/288:459,Availability,failure,failures,459,In component FixeConstraint in function projectVelocity use Data flag instead of #define Flag to set velocity and free velocity to zero. ; @digitaltrainers and @matthieu-nesme . Suggested label enhance. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/288
https://github.com/sofa-framework/sofa/pull/288:509,Availability,failure,failures,509,In component FixeConstraint in function projectVelocity use Data flag instead of #define Flag to set velocity and free velocity to zero. ; @digitaltrainers and @matthieu-nesme . Suggested label enhance. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/288
https://github.com/sofa-framework/sofa/pull/288:302,Integrability,message,message,302,In component FixeConstraint in function projectVelocity use Data flag instead of #define Flag to set velocity and free velocity to zero. ; @digitaltrainers and @matthieu-nesme . Suggested label enhance. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/288
https://github.com/sofa-framework/sofa/pull/288:194,Modifiability,enhance,enhance,194,In component FixeConstraint in function projectVelocity use Data flag instead of #define Flag to set velocity and free velocity to zero. ; @digitaltrainers and @matthieu-nesme . Suggested label enhance. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/288
https://github.com/sofa-framework/sofa/pull/288:454,Testability,test,test,454,In component FixeConstraint in function projectVelocity use Data flag instead of #define Flag to set velocity and free velocity to zero. ; @digitaltrainers and @matthieu-nesme . Suggested label enhance. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/288
https://github.com/sofa-framework/sofa/pull/288:504,Testability,test,test,504,In component FixeConstraint in function projectVelocity use Data flag instead of #define Flag to set velocity and free velocity to zero. ; @digitaltrainers and @matthieu-nesme . Suggested label enhance. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/288
https://github.com/sofa-framework/sofa/pull/289:295,Availability,failure,failures,295,add bounding box to hexaFemForceField. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/289
https://github.com/sofa-framework/sofa/pull/289:345,Availability,failure,failures,345,add bounding box to hexaFemForceField. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/289
https://github.com/sofa-framework/sofa/pull/289:138,Integrability,message,message,138,add bounding box to hexaFemForceField. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/289
https://github.com/sofa-framework/sofa/pull/289:290,Testability,test,test,290,add bounding box to hexaFemForceField. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/289
https://github.com/sofa-framework/sofa/pull/289:340,Testability,test,test,340,add bounding box to hexaFemForceField. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/289
https://github.com/sofa-framework/sofa/pull/290:281,Availability,failure,failures,281,*SpringForceField fixes. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/290
https://github.com/sofa-framework/sofa/pull/290:331,Availability,failure,failures,331,*SpringForceField fixes. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/290
https://github.com/sofa-framework/sofa/pull/290:124,Integrability,message,message,124,*SpringForceField fixes. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/290
https://github.com/sofa-framework/sofa/pull/290:276,Testability,test,test,276,*SpringForceField fixes. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/290
https://github.com/sofa-framework/sofa/pull/290:326,Testability,test,test,326,*SpringForceField fixes. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/290
https://github.com/sofa-framework/sofa/pull/291:540,Availability,failure,failures,540,"Same as PR #284 but without the unwanted merge commits. Small fix related to issue #114 . Have tested the compilation without the flag SOFA_INSTALL_RESOURCES_FILES (which is set by default), Sofa.ini and installedSofa.ini, which are necessary for build and install, are well created. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/291
https://github.com/sofa-framework/sofa/pull/291:590,Availability,failure,failures,590,"Same as PR #284 but without the unwanted merge commits. Small fix related to issue #114 . Have tested the compilation without the flag SOFA_INSTALL_RESOURCES_FILES (which is set by default), Sofa.ini and installedSofa.ini, which are necessary for build and install, are well created. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/291
https://github.com/sofa-framework/sofa/pull/291:204,Deployability,install,installedSofa,204,"Same as PR #284 but without the unwanted merge commits. Small fix related to issue #114 . Have tested the compilation without the flag SOFA_INSTALL_RESOURCES_FILES (which is set by default), Sofa.ini and installedSofa.ini, which are necessary for build and install, are well created. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/291
https://github.com/sofa-framework/sofa/pull/291:257,Deployability,install,install,257,"Same as PR #284 but without the unwanted merge commits. Small fix related to issue #114 . Have tested the compilation without the flag SOFA_INSTALL_RESOURCES_FILES (which is set by default), Sofa.ini and installedSofa.ini, which are necessary for build and install, are well created. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/291
https://github.com/sofa-framework/sofa/pull/291:383,Integrability,message,message,383,"Same as PR #284 but without the unwanted merge commits. Small fix related to issue #114 . Have tested the compilation without the flag SOFA_INSTALL_RESOURCES_FILES (which is set by default), Sofa.ini and installedSofa.ini, which are necessary for build and install, are well created. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/291
https://github.com/sofa-framework/sofa/pull/291:95,Testability,test,tested,95,"Same as PR #284 but without the unwanted merge commits. Small fix related to issue #114 . Have tested the compilation without the flag SOFA_INSTALL_RESOURCES_FILES (which is set by default), Sofa.ini and installedSofa.ini, which are necessary for build and install, are well created. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/291
https://github.com/sofa-framework/sofa/pull/291:535,Testability,test,test,535,"Same as PR #284 but without the unwanted merge commits. Small fix related to issue #114 . Have tested the compilation without the flag SOFA_INSTALL_RESOURCES_FILES (which is set by default), Sofa.ini and installedSofa.ini, which are necessary for build and install, are well created. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/291
https://github.com/sofa-framework/sofa/pull/291:585,Testability,test,test,585,"Same as PR #284 but without the unwanted merge commits. Small fix related to issue #114 . Have tested the compilation without the flag SOFA_INSTALL_RESOURCES_FILES (which is set by default), Sofa.ini and installedSofa.ini, which are necessary for build and install, are well created. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/291
https://github.com/sofa-framework/sofa/issues/292:947,Energy Efficiency,efficient,efficient,947,"The `Node::get{Component}` (e.g. `getShader`, `getMechanicalState`) can be silently quadratic (i.e. if they do not find the component at the local level, they search up in the parent nodes). `Node::getShader` is called for each Node traversal in `VisualDrawVisitor` that is VERY costly (issue pointed by @maxime-tournier). The right way to do would be to use a stack inside the `VisualDrawVisitor` (pushing a shader, each time a Node contains a Shader, and popping this shader when existing the Node). Each `VisualModel` should use the last shader in the stack. There is one subtlety, the `VisualDrawVisitor` is based on `Visitor::subsetsToManage`, so only the last shader containing the selected tags should be used for a specific `VisualModel`. So it is not necessarily the last shader on the stack that will be used, we would have to search up in the stack to find the right shader, so it's O(n*k). Even if in real scenes, it would be way more efficient than the actual code (k<<n), is it really useful? It would be even easier and even more efficient to skip that functionality.",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/292
https://github.com/sofa-framework/sofa/issues/292:1045,Energy Efficiency,efficient,efficient,1045,"The `Node::get{Component}` (e.g. `getShader`, `getMechanicalState`) can be silently quadratic (i.e. if they do not find the component at the local level, they search up in the parent nodes). `Node::getShader` is called for each Node traversal in `VisualDrawVisitor` that is VERY costly (issue pointed by @maxime-tournier). The right way to do would be to use a stack inside the `VisualDrawVisitor` (pushing a shader, each time a Node contains a Shader, and popping this shader when existing the Node). Each `VisualModel` should use the last shader in the stack. There is one subtlety, the `VisualDrawVisitor` is based on `Visitor::subsetsToManage`, so only the last shader containing the selected tags should be used for a specific `VisualModel`. So it is not necessarily the last shader on the stack that will be used, we would have to search up in the stack to find the right shader, so it's O(n*k). Even if in real scenes, it would be way more efficient than the actual code (k<<n), is it really useful? It would be even easier and even more efficient to skip that functionality.",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/292
https://github.com/sofa-framework/sofa/pull/293:1239,Availability,failure,failures,1239,"Fix issue #7 . Summary: drawQuad needed a call to glBegin(GL_QUADS) to draw a quad, defeating the purpose to avoid to use explicitly OpenGL API. Same problem with drawTriangle and drawPoint,; I suppose that these functions, at the beginning, was just needed to factorize OpenGL code (but still you needed to use OpenGL with it). ; Now that we remove the explicit calls, those functions should not be accessible outside.; But a few code in Sofa (and maybe plugins?) are using those calls to draw one primitive. Finally, what have been done:; - remove public visibility to those functions and rename it to internalDrawXXXX (where XXXX is point, triangle, quad); - keep the old calls to keep compatibility; - add addLine to keep consistency with the other primitives. I am wondering if in the future (or just right now), the drawXXX (drawing ONE primitive) should be removed and force users to use the drawXXXXs with a vector (and oblige user to build a std::vector with ONE primitive. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/293
https://github.com/sofa-framework/sofa/pull/293:1289,Availability,failure,failures,1289,"Fix issue #7 . Summary: drawQuad needed a call to glBegin(GL_QUADS) to draw a quad, defeating the purpose to avoid to use explicitly OpenGL API. Same problem with drawTriangle and drawPoint,; I suppose that these functions, at the beginning, was just needed to factorize OpenGL code (but still you needed to use OpenGL with it). ; Now that we remove the explicit calls, those functions should not be accessible outside.; But a few code in Sofa (and maybe plugins?) are using those calls to draw one primitive. Finally, what have been done:; - remove public visibility to those functions and rename it to internalDrawXXXX (where XXXX is point, triangle, quad); - keep the old calls to keep compatibility; - add addLine to keep consistency with the other primitives. I am wondering if in the future (or just right now), the drawXXX (drawing ONE primitive) should be removed and force users to use the drawXXXXs with a vector (and oblige user to build a std::vector with ONE primitive. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/293
https://github.com/sofa-framework/sofa/pull/293:1082,Integrability,message,message,1082,"Fix issue #7 . Summary: drawQuad needed a call to glBegin(GL_QUADS) to draw a quad, defeating the purpose to avoid to use explicitly OpenGL API. Same problem with drawTriangle and drawPoint,; I suppose that these functions, at the beginning, was just needed to factorize OpenGL code (but still you needed to use OpenGL with it). ; Now that we remove the explicit calls, those functions should not be accessible outside.; But a few code in Sofa (and maybe plugins?) are using those calls to draw one primitive. Finally, what have been done:; - remove public visibility to those functions and rename it to internalDrawXXXX (where XXXX is point, triangle, quad); - keep the old calls to keep compatibility; - add addLine to keep consistency with the other primitives. I am wondering if in the future (or just right now), the drawXXX (drawing ONE primitive) should be removed and force users to use the drawXXXXs with a vector (and oblige user to build a std::vector with ONE primitive. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/293
https://github.com/sofa-framework/sofa/pull/293:455,Modifiability,plugin,plugins,455,"Fix issue #7 . Summary: drawQuad needed a call to glBegin(GL_QUADS) to draw a quad, defeating the purpose to avoid to use explicitly OpenGL API. Same problem with drawTriangle and drawPoint,; I suppose that these functions, at the beginning, was just needed to factorize OpenGL code (but still you needed to use OpenGL with it). ; Now that we remove the explicit calls, those functions should not be accessible outside.; But a few code in Sofa (and maybe plugins?) are using those calls to draw one primitive. Finally, what have been done:; - remove public visibility to those functions and rename it to internalDrawXXXX (where XXXX is point, triangle, quad); - keep the old calls to keep compatibility; - add addLine to keep consistency with the other primitives. I am wondering if in the future (or just right now), the drawXXX (drawing ONE primitive) should be removed and force users to use the drawXXXXs with a vector (and oblige user to build a std::vector with ONE primitive. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/293
https://github.com/sofa-framework/sofa/pull/293:109,Safety,avoid,avoid,109,"Fix issue #7 . Summary: drawQuad needed a call to glBegin(GL_QUADS) to draw a quad, defeating the purpose to avoid to use explicitly OpenGL API. Same problem with drawTriangle and drawPoint,; I suppose that these functions, at the beginning, was just needed to factorize OpenGL code (but still you needed to use OpenGL with it). ; Now that we remove the explicit calls, those functions should not be accessible outside.; But a few code in Sofa (and maybe plugins?) are using those calls to draw one primitive. Finally, what have been done:; - remove public visibility to those functions and rename it to internalDrawXXXX (where XXXX is point, triangle, quad); - keep the old calls to keep compatibility; - add addLine to keep consistency with the other primitives. I am wondering if in the future (or just right now), the drawXXX (drawing ONE primitive) should be removed and force users to use the drawXXXXs with a vector (and oblige user to build a std::vector with ONE primitive. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/293
https://github.com/sofa-framework/sofa/pull/293:400,Security,access,accessible,400,"Fix issue #7 . Summary: drawQuad needed a call to glBegin(GL_QUADS) to draw a quad, defeating the purpose to avoid to use explicitly OpenGL API. Same problem with drawTriangle and drawPoint,; I suppose that these functions, at the beginning, was just needed to factorize OpenGL code (but still you needed to use OpenGL with it). ; Now that we remove the explicit calls, those functions should not be accessible outside.; But a few code in Sofa (and maybe plugins?) are using those calls to draw one primitive. Finally, what have been done:; - remove public visibility to those functions and rename it to internalDrawXXXX (where XXXX is point, triangle, quad); - keep the old calls to keep compatibility; - add addLine to keep consistency with the other primitives. I am wondering if in the future (or just right now), the drawXXX (drawing ONE primitive) should be removed and force users to use the drawXXXXs with a vector (and oblige user to build a std::vector with ONE primitive. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/293
https://github.com/sofa-framework/sofa/pull/293:1234,Testability,test,test,1234,"Fix issue #7 . Summary: drawQuad needed a call to glBegin(GL_QUADS) to draw a quad, defeating the purpose to avoid to use explicitly OpenGL API. Same problem with drawTriangle and drawPoint,; I suppose that these functions, at the beginning, was just needed to factorize OpenGL code (but still you needed to use OpenGL with it). ; Now that we remove the explicit calls, those functions should not be accessible outside.; But a few code in Sofa (and maybe plugins?) are using those calls to draw one primitive. Finally, what have been done:; - remove public visibility to those functions and rename it to internalDrawXXXX (where XXXX is point, triangle, quad); - keep the old calls to keep compatibility; - add addLine to keep consistency with the other primitives. I am wondering if in the future (or just right now), the drawXXX (drawing ONE primitive) should be removed and force users to use the drawXXXXs with a vector (and oblige user to build a std::vector with ONE primitive. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/293
https://github.com/sofa-framework/sofa/pull/293:1284,Testability,test,test,1284,"Fix issue #7 . Summary: drawQuad needed a call to glBegin(GL_QUADS) to draw a quad, defeating the purpose to avoid to use explicitly OpenGL API. Same problem with drawTriangle and drawPoint,; I suppose that these functions, at the beginning, was just needed to factorize OpenGL code (but still you needed to use OpenGL with it). ; Now that we remove the explicit calls, those functions should not be accessible outside.; But a few code in Sofa (and maybe plugins?) are using those calls to draw one primitive. Finally, what have been done:; - remove public visibility to those functions and rename it to internalDrawXXXX (where XXXX is point, triangle, quad); - keep the old calls to keep compatibility; - add addLine to keep consistency with the other primitives. I am wondering if in the future (or just right now), the drawXXX (drawing ONE primitive) should be removed and force users to use the drawXXXXs with a vector (and oblige user to build a std::vector with ONE primitive. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/293
https://github.com/sofa-framework/sofa/pull/294:633,Availability,failure,failures,633,"ADD: new functionality for mesh generation from image: allows for explicit definition of features, i.e., set of positions which will be maintained as sub-set of the mesh nodes. The code was added to the MeshGenerationFromImage components, an example scene was added together with a test that verifies that all features (specified in a VTK file) become nodes of the new mesh. . ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/294
https://github.com/sofa-framework/sofa/pull/294:683,Availability,failure,failures,683,"ADD: new functionality for mesh generation from image: allows for explicit definition of features, i.e., set of positions which will be maintained as sub-set of the mesh nodes. The code was added to the MeshGenerationFromImage components, an example scene was added together with a test that verifies that all features (specified in a VTK file) become nodes of the new mesh. . ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/294
https://github.com/sofa-framework/sofa/pull/294:476,Integrability,message,message,476,"ADD: new functionality for mesh generation from image: allows for explicit definition of features, i.e., set of positions which will be maintained as sub-set of the mesh nodes. The code was added to the MeshGenerationFromImage components, an example scene was added together with a test that verifies that all features (specified in a VTK file) become nodes of the new mesh. . ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/294
https://github.com/sofa-framework/sofa/pull/294:282,Testability,test,test,282,"ADD: new functionality for mesh generation from image: allows for explicit definition of features, i.e., set of positions which will be maintained as sub-set of the mesh nodes. The code was added to the MeshGenerationFromImage components, an example scene was added together with a test that verifies that all features (specified in a VTK file) become nodes of the new mesh. . ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/294
https://github.com/sofa-framework/sofa/pull/294:628,Testability,test,test,628,"ADD: new functionality for mesh generation from image: allows for explicit definition of features, i.e., set of positions which will be maintained as sub-set of the mesh nodes. The code was added to the MeshGenerationFromImage components, an example scene was added together with a test that verifies that all features (specified in a VTK file) become nodes of the new mesh. . ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/294
https://github.com/sofa-framework/sofa/pull/294:678,Testability,test,test,678,"ADD: new functionality for mesh generation from image: allows for explicit definition of features, i.e., set of positions which will be maintained as sub-set of the mesh nodes. The code was added to the MeshGenerationFromImage components, an example scene was added together with a test that verifies that all features (specified in a VTK file) become nodes of the new mesh. . ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/294
https://github.com/sofa-framework/sofa/issues/295:50,Integrability,depend,dependencies,50,"zlib library, provided on site as part of Windows dependencies archive is built with VS2013 instead of VS2015, which may result in Sofa applications crashes.",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/295
https://github.com/sofa-framework/sofa/pull/296:391,Availability,failure,failures,391,VisualTransform moved from SofaBaseVisual to SofaGeneralVisual. ChangeLog:; - FIX: compilation LeapMotion plugin (issue since v16.12). ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/296
https://github.com/sofa-framework/sofa/pull/296:441,Availability,failure,failures,441,VisualTransform moved from SofaBaseVisual to SofaGeneralVisual. ChangeLog:; - FIX: compilation LeapMotion plugin (issue since v16.12). ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/296
https://github.com/sofa-framework/sofa/pull/296:234,Integrability,message,message,234,VisualTransform moved from SofaBaseVisual to SofaGeneralVisual. ChangeLog:; - FIX: compilation LeapMotion plugin (issue since v16.12). ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/296
https://github.com/sofa-framework/sofa/pull/296:106,Modifiability,plugin,plugin,106,VisualTransform moved from SofaBaseVisual to SofaGeneralVisual. ChangeLog:; - FIX: compilation LeapMotion plugin (issue since v16.12). ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/296
https://github.com/sofa-framework/sofa/pull/296:386,Testability,test,test,386,VisualTransform moved from SofaBaseVisual to SofaGeneralVisual. ChangeLog:; - FIX: compilation LeapMotion plugin (issue since v16.12). ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/296
https://github.com/sofa-framework/sofa/pull/296:436,Testability,test,test,436,VisualTransform moved from SofaBaseVisual to SofaGeneralVisual. ChangeLog:; - FIX: compilation LeapMotion plugin (issue since v16.12). ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/296
https://github.com/sofa-framework/sofa/pull/297:426,Availability,failure,failures,426,"Libraries for debug configuration have suffix ""d"". For that reason release and; debug configurations must have different pragmas for linking libpng and zlib; under MSVS. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [x] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/297
https://github.com/sofa-framework/sofa/pull/297:476,Availability,failure,failures,476,"Libraries for debug configuration have suffix ""d"". For that reason release and; debug configurations must have different pragmas for linking libpng and zlib; under MSVS. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [x] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/297
https://github.com/sofa-framework/sofa/pull/297:20,Deployability,configurat,configuration,20,"Libraries for debug configuration have suffix ""d"". For that reason release and; debug configurations must have different pragmas for linking libpng and zlib; under MSVS. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [x] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/297
https://github.com/sofa-framework/sofa/pull/297:67,Deployability,release,release,67,"Libraries for debug configuration have suffix ""d"". For that reason release and; debug configurations must have different pragmas for linking libpng and zlib; under MSVS. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [x] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/297
https://github.com/sofa-framework/sofa/pull/297:86,Deployability,configurat,configurations,86,"Libraries for debug configuration have suffix ""d"". For that reason release and; debug configurations must have different pragmas for linking libpng and zlib; under MSVS. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [x] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/297
https://github.com/sofa-framework/sofa/pull/297:269,Integrability,message,message,269,"Libraries for debug configuration have suffix ""d"". For that reason release and; debug configurations must have different pragmas for linking libpng and zlib; under MSVS. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [x] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/297
https://github.com/sofa-framework/sofa/pull/297:20,Modifiability,config,configuration,20,"Libraries for debug configuration have suffix ""d"". For that reason release and; debug configurations must have different pragmas for linking libpng and zlib; under MSVS. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [x] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/297
https://github.com/sofa-framework/sofa/pull/297:86,Modifiability,config,configurations,86,"Libraries for debug configuration have suffix ""d"". For that reason release and; debug configurations must have different pragmas for linking libpng and zlib; under MSVS. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [x] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/297
https://github.com/sofa-framework/sofa/pull/297:421,Testability,test,test,421,"Libraries for debug configuration have suffix ""d"". For that reason release and; debug configurations must have different pragmas for linking libpng and zlib; under MSVS. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [x] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/297
https://github.com/sofa-framework/sofa/pull/297:471,Testability,test,test,471,"Libraries for debug configuration have suffix ""d"". For that reason release and; debug configurations must have different pragmas for linking libpng and zlib; under MSVS. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [x] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/297
https://github.com/sofa-framework/sofa/pull/298:426,Availability,failure,failures,426,"Libraries for debug configuration have suffix ""d"". For that reason release and; debug configurations must have different pragmas for linking libpng and zlib; under MSVS. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/298
https://github.com/sofa-framework/sofa/pull/298:476,Availability,failure,failures,476,"Libraries for debug configuration have suffix ""d"". For that reason release and; debug configurations must have different pragmas for linking libpng and zlib; under MSVS. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/298
https://github.com/sofa-framework/sofa/pull/298:20,Deployability,configurat,configuration,20,"Libraries for debug configuration have suffix ""d"". For that reason release and; debug configurations must have different pragmas for linking libpng and zlib; under MSVS. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/298
https://github.com/sofa-framework/sofa/pull/298:67,Deployability,release,release,67,"Libraries for debug configuration have suffix ""d"". For that reason release and; debug configurations must have different pragmas for linking libpng and zlib; under MSVS. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/298
https://github.com/sofa-framework/sofa/pull/298:86,Deployability,configurat,configurations,86,"Libraries for debug configuration have suffix ""d"". For that reason release and; debug configurations must have different pragmas for linking libpng and zlib; under MSVS. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/298
https://github.com/sofa-framework/sofa/pull/298:269,Integrability,message,message,269,"Libraries for debug configuration have suffix ""d"". For that reason release and; debug configurations must have different pragmas for linking libpng and zlib; under MSVS. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/298
https://github.com/sofa-framework/sofa/pull/298:20,Modifiability,config,configuration,20,"Libraries for debug configuration have suffix ""d"". For that reason release and; debug configurations must have different pragmas for linking libpng and zlib; under MSVS. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/298
https://github.com/sofa-framework/sofa/pull/298:86,Modifiability,config,configurations,86,"Libraries for debug configuration have suffix ""d"". For that reason release and; debug configurations must have different pragmas for linking libpng and zlib; under MSVS. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/298
https://github.com/sofa-framework/sofa/pull/298:421,Testability,test,test,421,"Libraries for debug configuration have suffix ""d"". For that reason release and; debug configurations must have different pragmas for linking libpng and zlib; under MSVS. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/298
https://github.com/sofa-framework/sofa/pull/298:471,Testability,test,test,471,"Libraries for debug configuration have suffix ""d"". For that reason release and; debug configurations must have different pragmas for linking libpng and zlib; under MSVS. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/298
https://github.com/sofa-framework/sofa/pull/299:374,Availability,failure,failures,374,"Example scene files are in ""scenes"" directory and not in ""examples"" directory,; as expected by CMake install command. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/299
https://github.com/sofa-framework/sofa/pull/299:424,Availability,failure,failures,424,"Example scene files are in ""scenes"" directory and not in ""examples"" directory,; as expected by CMake install command. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/299
https://github.com/sofa-framework/sofa/pull/299:101,Deployability,install,install,101,"Example scene files are in ""scenes"" directory and not in ""examples"" directory,; as expected by CMake install command. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/299
https://github.com/sofa-framework/sofa/pull/299:217,Integrability,message,message,217,"Example scene files are in ""scenes"" directory and not in ""examples"" directory,; as expected by CMake install command. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/299
https://github.com/sofa-framework/sofa/pull/299:369,Testability,test,test,369,"Example scene files are in ""scenes"" directory and not in ""examples"" directory,; as expected by CMake install command. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/299
https://github.com/sofa-framework/sofa/pull/299:419,Testability,test,test,419,"Example scene files are in ""scenes"" directory and not in ""examples"" directory,; as expected by CMake install command. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/299
https://github.com/sofa-framework/sofa/pull/300:758,Availability,failure,failures,758,Targets are built with debug version of runtime library in debug configuration; under MS Visual Studio. This is enabled with /MDd compiler flag. Missing this; flag for NVCC generated object files results in linker fails due to different; versions of runtime libraries. The problem is resolved by explicitly setting compiler options for debug build; under Windows. The solution is given only for Windows and only for MSVS because; it's the only officially supported by NVidia compiler on this platform. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/300
https://github.com/sofa-framework/sofa/pull/300:808,Availability,failure,failures,808,Targets are built with debug version of runtime library in debug configuration; under MS Visual Studio. This is enabled with /MDd compiler flag. Missing this; flag for NVCC generated object files results in linker fails due to different; versions of runtime libraries. The problem is resolved by explicitly setting compiler options for debug build; under Windows. The solution is given only for Windows and only for MSVS because; it's the only officially supported by NVidia compiler on this platform. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/300
https://github.com/sofa-framework/sofa/pull/300:65,Deployability,configurat,configuration,65,Targets are built with debug version of runtime library in debug configuration; under MS Visual Studio. This is enabled with /MDd compiler flag. Missing this; flag for NVCC generated object files results in linker fails due to different; versions of runtime libraries. The problem is resolved by explicitly setting compiler options for debug build; under Windows. The solution is given only for Windows and only for MSVS because; it's the only officially supported by NVidia compiler on this platform. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/300
https://github.com/sofa-framework/sofa/pull/300:601,Integrability,message,message,601,Targets are built with debug version of runtime library in debug configuration; under MS Visual Studio. This is enabled with /MDd compiler flag. Missing this; flag for NVCC generated object files results in linker fails due to different; versions of runtime libraries. The problem is resolved by explicitly setting compiler options for debug build; under Windows. The solution is given only for Windows and only for MSVS because; it's the only officially supported by NVidia compiler on this platform. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/300
https://github.com/sofa-framework/sofa/pull/300:65,Modifiability,config,configuration,65,Targets are built with debug version of runtime library in debug configuration; under MS Visual Studio. This is enabled with /MDd compiler flag. Missing this; flag for NVCC generated object files results in linker fails due to different; versions of runtime libraries. The problem is resolved by explicitly setting compiler options for debug build; under Windows. The solution is given only for Windows and only for MSVS because; it's the only officially supported by NVidia compiler on this platform. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/300
https://github.com/sofa-framework/sofa/pull/300:753,Testability,test,test,753,Targets are built with debug version of runtime library in debug configuration; under MS Visual Studio. This is enabled with /MDd compiler flag. Missing this; flag for NVCC generated object files results in linker fails due to different; versions of runtime libraries. The problem is resolved by explicitly setting compiler options for debug build; under Windows. The solution is given only for Windows and only for MSVS because; it's the only officially supported by NVidia compiler on this platform. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/300
https://github.com/sofa-framework/sofa/pull/300:803,Testability,test,test,803,Targets are built with debug version of runtime library in debug configuration; under MS Visual Studio. This is enabled with /MDd compiler flag. Missing this; flag for NVCC generated object files results in linker fails due to different; versions of runtime libraries. The problem is resolved by explicitly setting compiler options for debug build; under Windows. The solution is given only for Windows and only for MSVS because; it's the only officially supported by NVidia compiler on this platform. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/300
https://github.com/sofa-framework/sofa/pull/301:856,Availability,failure,failures,856,"Implementation of the (2nd part of) proposal #281 . Quick Reminder:; - CMake generates the list of compiled plugins in a file (`plugin_list.conf.default`) at the configuration stage.; - runSofa loads this list at startup; - if the user creates a custom `plugin_list.conf`, it will load this list instead.; - add an option to bypass the file (thus disable automatic loading) in runSofa. Everything is done in the runSofa application (+small patch in the macro sofa_add_generic() in SofaFramework CMake modules ; that allows us to have a list of all added targets which is not possible in CMake 3.1) . ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/301
https://github.com/sofa-framework/sofa/pull/301:906,Availability,failure,failures,906,"Implementation of the (2nd part of) proposal #281 . Quick Reminder:; - CMake generates the list of compiled plugins in a file (`plugin_list.conf.default`) at the configuration stage.; - runSofa loads this list at startup; - if the user creates a custom `plugin_list.conf`, it will load this list instead.; - add an option to bypass the file (thus disable automatic loading) in runSofa. Everything is done in the runSofa application (+small patch in the macro sofa_add_generic() in SofaFramework CMake modules ; that allows us to have a list of all added targets which is not possible in CMake 3.1) . ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/301
https://github.com/sofa-framework/sofa/pull/301:162,Deployability,configurat,configuration,162,"Implementation of the (2nd part of) proposal #281 . Quick Reminder:; - CMake generates the list of compiled plugins in a file (`plugin_list.conf.default`) at the configuration stage.; - runSofa loads this list at startup; - if the user creates a custom `plugin_list.conf`, it will load this list instead.; - add an option to bypass the file (thus disable automatic loading) in runSofa. Everything is done in the runSofa application (+small patch in the macro sofa_add_generic() in SofaFramework CMake modules ; that allows us to have a list of all added targets which is not possible in CMake 3.1) . ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/301
https://github.com/sofa-framework/sofa/pull/301:440,Deployability,patch,patch,440,"Implementation of the (2nd part of) proposal #281 . Quick Reminder:; - CMake generates the list of compiled plugins in a file (`plugin_list.conf.default`) at the configuration stage.; - runSofa loads this list at startup; - if the user creates a custom `plugin_list.conf`, it will load this list instead.; - add an option to bypass the file (thus disable automatic loading) in runSofa. Everything is done in the runSofa application (+small patch in the macro sofa_add_generic() in SofaFramework CMake modules ; that allows us to have a list of all added targets which is not possible in CMake 3.1) . ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/301
https://github.com/sofa-framework/sofa/pull/301:699,Integrability,message,message,699,"Implementation of the (2nd part of) proposal #281 . Quick Reminder:; - CMake generates the list of compiled plugins in a file (`plugin_list.conf.default`) at the configuration stage.; - runSofa loads this list at startup; - if the user creates a custom `plugin_list.conf`, it will load this list instead.; - add an option to bypass the file (thus disable automatic loading) in runSofa. Everything is done in the runSofa application (+small patch in the macro sofa_add_generic() in SofaFramework CMake modules ; that allows us to have a list of all added targets which is not possible in CMake 3.1) . ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/301
https://github.com/sofa-framework/sofa/pull/301:108,Modifiability,plugin,plugins,108,"Implementation of the (2nd part of) proposal #281 . Quick Reminder:; - CMake generates the list of compiled plugins in a file (`plugin_list.conf.default`) at the configuration stage.; - runSofa loads this list at startup; - if the user creates a custom `plugin_list.conf`, it will load this list instead.; - add an option to bypass the file (thus disable automatic loading) in runSofa. Everything is done in the runSofa application (+small patch in the macro sofa_add_generic() in SofaFramework CMake modules ; that allows us to have a list of all added targets which is not possible in CMake 3.1) . ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/301
https://github.com/sofa-framework/sofa/pull/301:162,Modifiability,config,configuration,162,"Implementation of the (2nd part of) proposal #281 . Quick Reminder:; - CMake generates the list of compiled plugins in a file (`plugin_list.conf.default`) at the configuration stage.; - runSofa loads this list at startup; - if the user creates a custom `plugin_list.conf`, it will load this list instead.; - add an option to bypass the file (thus disable automatic loading) in runSofa. Everything is done in the runSofa application (+small patch in the macro sofa_add_generic() in SofaFramework CMake modules ; that allows us to have a list of all added targets which is not possible in CMake 3.1) . ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/301
https://github.com/sofa-framework/sofa/pull/301:194,Performance,load,loads,194,"Implementation of the (2nd part of) proposal #281 . Quick Reminder:; - CMake generates the list of compiled plugins in a file (`plugin_list.conf.default`) at the configuration stage.; - runSofa loads this list at startup; - if the user creates a custom `plugin_list.conf`, it will load this list instead.; - add an option to bypass the file (thus disable automatic loading) in runSofa. Everything is done in the runSofa application (+small patch in the macro sofa_add_generic() in SofaFramework CMake modules ; that allows us to have a list of all added targets which is not possible in CMake 3.1) . ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/301
https://github.com/sofa-framework/sofa/pull/301:281,Performance,load,load,281,"Implementation of the (2nd part of) proposal #281 . Quick Reminder:; - CMake generates the list of compiled plugins in a file (`plugin_list.conf.default`) at the configuration stage.; - runSofa loads this list at startup; - if the user creates a custom `plugin_list.conf`, it will load this list instead.; - add an option to bypass the file (thus disable automatic loading) in runSofa. Everything is done in the runSofa application (+small patch in the macro sofa_add_generic() in SofaFramework CMake modules ; that allows us to have a list of all added targets which is not possible in CMake 3.1) . ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/301
https://github.com/sofa-framework/sofa/pull/301:365,Performance,load,loading,365,"Implementation of the (2nd part of) proposal #281 . Quick Reminder:; - CMake generates the list of compiled plugins in a file (`plugin_list.conf.default`) at the configuration stage.; - runSofa loads this list at startup; - if the user creates a custom `plugin_list.conf`, it will load this list instead.; - add an option to bypass the file (thus disable automatic loading) in runSofa. Everything is done in the runSofa application (+small patch in the macro sofa_add_generic() in SofaFramework CMake modules ; that allows us to have a list of all added targets which is not possible in CMake 3.1) . ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/301
https://github.com/sofa-framework/sofa/pull/301:851,Testability,test,test,851,"Implementation of the (2nd part of) proposal #281 . Quick Reminder:; - CMake generates the list of compiled plugins in a file (`plugin_list.conf.default`) at the configuration stage.; - runSofa loads this list at startup; - if the user creates a custom `plugin_list.conf`, it will load this list instead.; - add an option to bypass the file (thus disable automatic loading) in runSofa. Everything is done in the runSofa application (+small patch in the macro sofa_add_generic() in SofaFramework CMake modules ; that allows us to have a list of all added targets which is not possible in CMake 3.1) . ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/301
https://github.com/sofa-framework/sofa/pull/301:901,Testability,test,test,901,"Implementation of the (2nd part of) proposal #281 . Quick Reminder:; - CMake generates the list of compiled plugins in a file (`plugin_list.conf.default`) at the configuration stage.; - runSofa loads this list at startup; - if the user creates a custom `plugin_list.conf`, it will load this list instead.; - add an option to bypass the file (thus disable automatic loading) in runSofa. Everything is done in the runSofa application (+small patch in the macro sofa_add_generic() in SofaFramework CMake modules ; that allows us to have a list of all added targets which is not possible in CMake 3.1) . ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/301
https://github.com/sofa-framework/sofa/pull/303:331,Availability,failure,failures,331,FIX scene: update GenerateGrid usage to match current component interface. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/303
https://github.com/sofa-framework/sofa/pull/303:381,Availability,failure,failures,381,FIX scene: update GenerateGrid usage to match current component interface. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/303
https://github.com/sofa-framework/sofa/pull/303:11,Deployability,update,update,11,FIX scene: update GenerateGrid usage to match current component interface. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/303
https://github.com/sofa-framework/sofa/pull/303:64,Integrability,interface,interface,64,FIX scene: update GenerateGrid usage to match current component interface. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/303
https://github.com/sofa-framework/sofa/pull/303:174,Integrability,message,message,174,FIX scene: update GenerateGrid usage to match current component interface. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/303
https://github.com/sofa-framework/sofa/pull/303:326,Testability,test,test,326,FIX scene: update GenerateGrid usage to match current component interface. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/303
https://github.com/sofa-framework/sofa/pull/303:376,Testability,test,test,376,FIX scene: update GenerateGrid usage to match current component interface. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/303
https://github.com/sofa-framework/sofa/pull/304:313,Availability,error,errors,313,"EDITED: Damien. Currently the SofaPython plugin is in a very poor shapes with two serious problems. The first one is a problem for developper with a lot of duplicated or invalid or in-elegant code which impact maintainability of our code base. The second problem is the lack of consistency in the way warning and errors are reported. In sofa some component rise en exception while others prints a message and return None which is very problematic to users. . In this PR we addressed these two issues through a major cleaning set of changes:; - [SofaPython]: ; * refactor the way to get get Sofa object from their PyObject equivalent (hundred of changes). ; * add dedicated easing function (unwrap, get, get_baseobject) ; * replace wherever possible copy-pasted code with these function. ; * refactor the way we report error from binding (hundred of changes) (API BREAK). ; * returning NULL with a correctly set exception type as it is the way of handling error in python. ; * when returning NULL it is mandatory to preceed the return with an exception type & message specification. This can be done either with PyExc_SetString() or Py_BaddArgument(), ; * when returning after a failing Py_ParseTuple is an exception, as the function sets itself a very ; descriptive and standardized error message.; * add macros (SP_PYERR_SETSTRING_INVALIDTYPE and SP_PYERR_SETSTRING_OUTOFBOUND) to report consistant message with PyErr_SetString ; * add SP_CLASS_METHOD_DOC() and SP_CLASS_METHOD_KW_DOC() to declare method with their docstring (if you don't know what are docstring read: http://sametmax.com/les-docstrings/); * add new bindings:; * BaseState::getSize ; * BaseMapping::applyJT; * BaseMapping::applyDJT; * Data::getCounter ; * Data::isDirty; * Node::getMass; * Node::getForceField; * STLExporter; * Sofa.unload; * Sofa.path; * Sofa.getAvailableComponents; * VisualModel::updateVisual; * VisualModel::initVisual; * add in PythonEnvironment::getPythonCallingPointAsFileInfo() a function that return a stri",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/304
https://github.com/sofa-framework/sofa/pull/304:818,Availability,error,error,818,"EDITED: Damien. Currently the SofaPython plugin is in a very poor shapes with two serious problems. The first one is a problem for developper with a lot of duplicated or invalid or in-elegant code which impact maintainability of our code base. The second problem is the lack of consistency in the way warning and errors are reported. In sofa some component rise en exception while others prints a message and return None which is very problematic to users. . In this PR we addressed these two issues through a major cleaning set of changes:; - [SofaPython]: ; * refactor the way to get get Sofa object from their PyObject equivalent (hundred of changes). ; * add dedicated easing function (unwrap, get, get_baseobject) ; * replace wherever possible copy-pasted code with these function. ; * refactor the way we report error from binding (hundred of changes) (API BREAK). ; * returning NULL with a correctly set exception type as it is the way of handling error in python. ; * when returning NULL it is mandatory to preceed the return with an exception type & message specification. This can be done either with PyExc_SetString() or Py_BaddArgument(), ; * when returning after a failing Py_ParseTuple is an exception, as the function sets itself a very ; descriptive and standardized error message.; * add macros (SP_PYERR_SETSTRING_INVALIDTYPE and SP_PYERR_SETSTRING_OUTOFBOUND) to report consistant message with PyErr_SetString ; * add SP_CLASS_METHOD_DOC() and SP_CLASS_METHOD_KW_DOC() to declare method with their docstring (if you don't know what are docstring read: http://sametmax.com/les-docstrings/); * add new bindings:; * BaseState::getSize ; * BaseMapping::applyJT; * BaseMapping::applyDJT; * Data::getCounter ; * Data::isDirty; * Node::getMass; * Node::getForceField; * STLExporter; * Sofa.unload; * Sofa.path; * Sofa.getAvailableComponents; * VisualModel::updateVisual; * VisualModel::initVisual; * add in PythonEnvironment::getPythonCallingPointAsFileInfo() a function that return a stri",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/304
https://github.com/sofa-framework/sofa/pull/304:955,Availability,error,error,955,"EDITED: Damien. Currently the SofaPython plugin is in a very poor shapes with two serious problems. The first one is a problem for developper with a lot of duplicated or invalid or in-elegant code which impact maintainability of our code base. The second problem is the lack of consistency in the way warning and errors are reported. In sofa some component rise en exception while others prints a message and return None which is very problematic to users. . In this PR we addressed these two issues through a major cleaning set of changes:; - [SofaPython]: ; * refactor the way to get get Sofa object from their PyObject equivalent (hundred of changes). ; * add dedicated easing function (unwrap, get, get_baseobject) ; * replace wherever possible copy-pasted code with these function. ; * refactor the way we report error from binding (hundred of changes) (API BREAK). ; * returning NULL with a correctly set exception type as it is the way of handling error in python. ; * when returning NULL it is mandatory to preceed the return with an exception type & message specification. This can be done either with PyExc_SetString() or Py_BaddArgument(), ; * when returning after a failing Py_ParseTuple is an exception, as the function sets itself a very ; descriptive and standardized error message.; * add macros (SP_PYERR_SETSTRING_INVALIDTYPE and SP_PYERR_SETSTRING_OUTOFBOUND) to report consistant message with PyErr_SetString ; * add SP_CLASS_METHOD_DOC() and SP_CLASS_METHOD_KW_DOC() to declare method with their docstring (if you don't know what are docstring read: http://sametmax.com/les-docstrings/); * add new bindings:; * BaseState::getSize ; * BaseMapping::applyJT; * BaseMapping::applyDJT; * Data::getCounter ; * Data::isDirty; * Node::getMass; * Node::getForceField; * STLExporter; * Sofa.unload; * Sofa.path; * Sofa.getAvailableComponents; * VisualModel::updateVisual; * VisualModel::initVisual; * add in PythonEnvironment::getPythonCallingPointAsFileInfo() a function that return a stri",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/304
https://github.com/sofa-framework/sofa/pull/304:1283,Availability,error,error,1283,"nt code which impact maintainability of our code base. The second problem is the lack of consistency in the way warning and errors are reported. In sofa some component rise en exception while others prints a message and return None which is very problematic to users. . In this PR we addressed these two issues through a major cleaning set of changes:; - [SofaPython]: ; * refactor the way to get get Sofa object from their PyObject equivalent (hundred of changes). ; * add dedicated easing function (unwrap, get, get_baseobject) ; * replace wherever possible copy-pasted code with these function. ; * refactor the way we report error from binding (hundred of changes) (API BREAK). ; * returning NULL with a correctly set exception type as it is the way of handling error in python. ; * when returning NULL it is mandatory to preceed the return with an exception type & message specification. This can be done either with PyExc_SetString() or Py_BaddArgument(), ; * when returning after a failing Py_ParseTuple is an exception, as the function sets itself a very ; descriptive and standardized error message.; * add macros (SP_PYERR_SETSTRING_INVALIDTYPE and SP_PYERR_SETSTRING_OUTOFBOUND) to report consistant message with PyErr_SetString ; * add SP_CLASS_METHOD_DOC() and SP_CLASS_METHOD_KW_DOC() to declare method with their docstring (if you don't know what are docstring read: http://sametmax.com/les-docstrings/); * add new bindings:; * BaseState::getSize ; * BaseMapping::applyJT; * BaseMapping::applyDJT; * Data::getCounter ; * Data::isDirty; * Node::getMass; * Node::getForceField; * STLExporter; * Sofa.unload; * Sofa.path; * Sofa.getAvailableComponents; * VisualModel::updateVisual; * VisualModel::initVisual; * add in PythonEnvironment::getPythonCallingPointAsFileInfo() a function that return a string with the ; python file/line info to add report them in msg_* ; * adds 'override' keyword when needed (more info => http://en.cppreference.com/w/cpp/language/override); * adds tests on P",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/304
https://github.com/sofa-framework/sofa/pull/304:3642,Availability,error,error,3642,"o that the un-catched exceptions are sended as msg_error instead of being printed on the console. ; * cosmetic changes like replacing 'using namespace a;' with the precise 'using a:TheClass', removing in-consistant line spacing. ; * replace ""extern C"" with static. - [Flexible/python] Fix the examples & the tests to take into account the changes in SofaPython; - [Compliant/python] Fix the examples & the tests to take into account the changes in SofaPython. To simplify the submitter's life (and don't waste their time) some extras (read not really relevant) changes are also added to the PR:; - remove a virtual in-heritance on BaseController and plugin/optitracknet. ; - adds a << operator to Message.h to handle file:line information (now in PR: #314 ) ; - made some changes in STLExporter to stay consistant with Sofa guidelines. . There is still some work todo (if you have free time to offer):; Eg: ; in Compliant there is still patterns like:; ```cpp; SP_MESSAGE_ERROR( ""_Compliant_getAssembledImplicitMatrix: wrong arguments"" );; return NULL;; ```; The SP_MESSAGE_ERROR is probably not needed as it duplicate the one provided by the python exception. . While in ; ```cpp; SP_MESSAGE_ERROR( ""_Compliant_getAssembledImplicitMatrix: first argument is not a BaseNode"" );; PyErr_BadArgument();; return NULL;; ```; PyExc_SetString() should replace the message error & the bad argument. . More generally there is still a lot of SP_MESSAGE_*() instead of msg_* and there is a lot of method that haven't their docstring. ; ; ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/304
https://github.com/sofa-framework/sofa/pull/304:4060,Availability,failure,failures,4060,"o that the un-catched exceptions are sended as msg_error instead of being printed on the console. ; * cosmetic changes like replacing 'using namespace a;' with the precise 'using a:TheClass', removing in-consistant line spacing. ; * replace ""extern C"" with static. - [Flexible/python] Fix the examples & the tests to take into account the changes in SofaPython; - [Compliant/python] Fix the examples & the tests to take into account the changes in SofaPython. To simplify the submitter's life (and don't waste their time) some extras (read not really relevant) changes are also added to the PR:; - remove a virtual in-heritance on BaseController and plugin/optitracknet. ; - adds a << operator to Message.h to handle file:line information (now in PR: #314 ) ; - made some changes in STLExporter to stay consistant with Sofa guidelines. . There is still some work todo (if you have free time to offer):; Eg: ; in Compliant there is still patterns like:; ```cpp; SP_MESSAGE_ERROR( ""_Compliant_getAssembledImplicitMatrix: wrong arguments"" );; return NULL;; ```; The SP_MESSAGE_ERROR is probably not needed as it duplicate the one provided by the python exception. . While in ; ```cpp; SP_MESSAGE_ERROR( ""_Compliant_getAssembledImplicitMatrix: first argument is not a BaseNode"" );; PyErr_BadArgument();; return NULL;; ```; PyExc_SetString() should replace the message error & the bad argument. . More generally there is still a lot of SP_MESSAGE_*() instead of msg_* and there is a lot of method that haven't their docstring. ; ; ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/304
https://github.com/sofa-framework/sofa/pull/304:4110,Availability,failure,failures,4110,"o that the un-catched exceptions are sended as msg_error instead of being printed on the console. ; * cosmetic changes like replacing 'using namespace a;' with the precise 'using a:TheClass', removing in-consistant line spacing. ; * replace ""extern C"" with static. - [Flexible/python] Fix the examples & the tests to take into account the changes in SofaPython; - [Compliant/python] Fix the examples & the tests to take into account the changes in SofaPython. To simplify the submitter's life (and don't waste their time) some extras (read not really relevant) changes are also added to the PR:; - remove a virtual in-heritance on BaseController and plugin/optitracknet. ; - adds a << operator to Message.h to handle file:line information (now in PR: #314 ) ; - made some changes in STLExporter to stay consistant with Sofa guidelines. . There is still some work todo (if you have free time to offer):; Eg: ; in Compliant there is still patterns like:; ```cpp; SP_MESSAGE_ERROR( ""_Compliant_getAssembledImplicitMatrix: wrong arguments"" );; return NULL;; ```; The SP_MESSAGE_ERROR is probably not needed as it duplicate the one provided by the python exception. . While in ; ```cpp; SP_MESSAGE_ERROR( ""_Compliant_getAssembledImplicitMatrix: first argument is not a BaseNode"" );; PyErr_BadArgument();; return NULL;; ```; PyExc_SetString() should replace the message error & the bad argument. . More generally there is still a lot of SP_MESSAGE_*() instead of msg_* and there is a lot of method that haven't their docstring. ; ; ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/304
https://github.com/sofa-framework/sofa/pull/304:1869,Deployability,update,updateVisual,1869,"n returning NULL it is mandatory to preceed the return with an exception type & message specification. This can be done either with PyExc_SetString() or Py_BaddArgument(), ; * when returning after a failing Py_ParseTuple is an exception, as the function sets itself a very ; descriptive and standardized error message.; * add macros (SP_PYERR_SETSTRING_INVALIDTYPE and SP_PYERR_SETSTRING_OUTOFBOUND) to report consistant message with PyErr_SetString ; * add SP_CLASS_METHOD_DOC() and SP_CLASS_METHOD_KW_DOC() to declare method with their docstring (if you don't know what are docstring read: http://sametmax.com/les-docstrings/); * add new bindings:; * BaseState::getSize ; * BaseMapping::applyJT; * BaseMapping::applyDJT; * Data::getCounter ; * Data::isDirty; * Node::getMass; * Node::getForceField; * STLExporter; * Sofa.unload; * Sofa.path; * Sofa.getAvailableComponents; * VisualModel::updateVisual; * VisualModel::initVisual; * add in PythonEnvironment::getPythonCallingPointAsFileInfo() a function that return a string with the ; python file/line info to add report them in msg_* ; * adds 'override' keyword when needed (more info => http://en.cppreference.com/w/cpp/language/override); * adds tests on PythonScriptController; * adds tests on SofaModule; * adds a exception handler in python so that the un-catched exceptions are sended as msg_error instead of being printed on the console. ; * cosmetic changes like replacing 'using namespace a;' with the precise 'using a:TheClass', removing in-consistant line spacing. ; * replace ""extern C"" with static. - [Flexible/python] Fix the examples & the tests to take into account the changes in SofaPython; - [Compliant/python] Fix the examples & the tests to take into account the changes in SofaPython. To simplify the submitter's life (and don't waste their time) some extras (read not really relevant) changes are also added to the PR:; - remove a virtual in-heritance on BaseController and plugin/optitracknet. ; - adds a << operator to Messa",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/304
https://github.com/sofa-framework/sofa/pull/304:397,Integrability,message,message,397,"EDITED: Damien. Currently the SofaPython plugin is in a very poor shapes with two serious problems. The first one is a problem for developper with a lot of duplicated or invalid or in-elegant code which impact maintainability of our code base. The second problem is the lack of consistency in the way warning and errors are reported. In sofa some component rise en exception while others prints a message and return None which is very problematic to users. . In this PR we addressed these two issues through a major cleaning set of changes:; - [SofaPython]: ; * refactor the way to get get Sofa object from their PyObject equivalent (hundred of changes). ; * add dedicated easing function (unwrap, get, get_baseobject) ; * replace wherever possible copy-pasted code with these function. ; * refactor the way we report error from binding (hundred of changes) (API BREAK). ; * returning NULL with a correctly set exception type as it is the way of handling error in python. ; * when returning NULL it is mandatory to preceed the return with an exception type & message specification. This can be done either with PyExc_SetString() or Py_BaddArgument(), ; * when returning after a failing Py_ParseTuple is an exception, as the function sets itself a very ; descriptive and standardized error message.; * add macros (SP_PYERR_SETSTRING_INVALIDTYPE and SP_PYERR_SETSTRING_OUTOFBOUND) to report consistant message with PyErr_SetString ; * add SP_CLASS_METHOD_DOC() and SP_CLASS_METHOD_KW_DOC() to declare method with their docstring (if you don't know what are docstring read: http://sametmax.com/les-docstrings/); * add new bindings:; * BaseState::getSize ; * BaseMapping::applyJT; * BaseMapping::applyDJT; * Data::getCounter ; * Data::isDirty; * Node::getMass; * Node::getForceField; * STLExporter; * Sofa.unload; * Sofa.path; * Sofa.getAvailableComponents; * VisualModel::updateVisual; * VisualModel::initVisual; * add in PythonEnvironment::getPythonCallingPointAsFileInfo() a function that return a stri",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/304
https://github.com/sofa-framework/sofa/pull/304:1059,Integrability,message,message,1059,"the SofaPython plugin is in a very poor shapes with two serious problems. The first one is a problem for developper with a lot of duplicated or invalid or in-elegant code which impact maintainability of our code base. The second problem is the lack of consistency in the way warning and errors are reported. In sofa some component rise en exception while others prints a message and return None which is very problematic to users. . In this PR we addressed these two issues through a major cleaning set of changes:; - [SofaPython]: ; * refactor the way to get get Sofa object from their PyObject equivalent (hundred of changes). ; * add dedicated easing function (unwrap, get, get_baseobject) ; * replace wherever possible copy-pasted code with these function. ; * refactor the way we report error from binding (hundred of changes) (API BREAK). ; * returning NULL with a correctly set exception type as it is the way of handling error in python. ; * when returning NULL it is mandatory to preceed the return with an exception type & message specification. This can be done either with PyExc_SetString() or Py_BaddArgument(), ; * when returning after a failing Py_ParseTuple is an exception, as the function sets itself a very ; descriptive and standardized error message.; * add macros (SP_PYERR_SETSTRING_INVALIDTYPE and SP_PYERR_SETSTRING_OUTOFBOUND) to report consistant message with PyErr_SetString ; * add SP_CLASS_METHOD_DOC() and SP_CLASS_METHOD_KW_DOC() to declare method with their docstring (if you don't know what are docstring read: http://sametmax.com/les-docstrings/); * add new bindings:; * BaseState::getSize ; * BaseMapping::applyJT; * BaseMapping::applyDJT; * Data::getCounter ; * Data::isDirty; * Node::getMass; * Node::getForceField; * STLExporter; * Sofa.unload; * Sofa.path; * Sofa.getAvailableComponents; * VisualModel::updateVisual; * VisualModel::initVisual; * add in PythonEnvironment::getPythonCallingPointAsFileInfo() a function that return a string with the ; python file",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/304
https://github.com/sofa-framework/sofa/pull/304:1289,Integrability,message,message,1289,"nt code which impact maintainability of our code base. The second problem is the lack of consistency in the way warning and errors are reported. In sofa some component rise en exception while others prints a message and return None which is very problematic to users. . In this PR we addressed these two issues through a major cleaning set of changes:; - [SofaPython]: ; * refactor the way to get get Sofa object from their PyObject equivalent (hundred of changes). ; * add dedicated easing function (unwrap, get, get_baseobject) ; * replace wherever possible copy-pasted code with these function. ; * refactor the way we report error from binding (hundred of changes) (API BREAK). ; * returning NULL with a correctly set exception type as it is the way of handling error in python. ; * when returning NULL it is mandatory to preceed the return with an exception type & message specification. This can be done either with PyExc_SetString() or Py_BaddArgument(), ; * when returning after a failing Py_ParseTuple is an exception, as the function sets itself a very ; descriptive and standardized error message.; * add macros (SP_PYERR_SETSTRING_INVALIDTYPE and SP_PYERR_SETSTRING_OUTOFBOUND) to report consistant message with PyErr_SetString ; * add SP_CLASS_METHOD_DOC() and SP_CLASS_METHOD_KW_DOC() to declare method with their docstring (if you don't know what are docstring read: http://sametmax.com/les-docstrings/); * add new bindings:; * BaseState::getSize ; * BaseMapping::applyJT; * BaseMapping::applyDJT; * Data::getCounter ; * Data::isDirty; * Node::getMass; * Node::getForceField; * STLExporter; * Sofa.unload; * Sofa.path; * Sofa.getAvailableComponents; * VisualModel::updateVisual; * VisualModel::initVisual; * add in PythonEnvironment::getPythonCallingPointAsFileInfo() a function that return a string with the ; python file/line info to add report them in msg_* ; * adds 'override' keyword when needed (more info => http://en.cppreference.com/w/cpp/language/override); * adds tests on P",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/304
https://github.com/sofa-framework/sofa/pull/304:1400,Integrability,message,message,1400,"atic to users. . In this PR we addressed these two issues through a major cleaning set of changes:; - [SofaPython]: ; * refactor the way to get get Sofa object from their PyObject equivalent (hundred of changes). ; * add dedicated easing function (unwrap, get, get_baseobject) ; * replace wherever possible copy-pasted code with these function. ; * refactor the way we report error from binding (hundred of changes) (API BREAK). ; * returning NULL with a correctly set exception type as it is the way of handling error in python. ; * when returning NULL it is mandatory to preceed the return with an exception type & message specification. This can be done either with PyExc_SetString() or Py_BaddArgument(), ; * when returning after a failing Py_ParseTuple is an exception, as the function sets itself a very ; descriptive and standardized error message.; * add macros (SP_PYERR_SETSTRING_INVALIDTYPE and SP_PYERR_SETSTRING_OUTOFBOUND) to report consistant message with PyErr_SetString ; * add SP_CLASS_METHOD_DOC() and SP_CLASS_METHOD_KW_DOC() to declare method with their docstring (if you don't know what are docstring read: http://sametmax.com/les-docstrings/); * add new bindings:; * BaseState::getSize ; * BaseMapping::applyJT; * BaseMapping::applyDJT; * Data::getCounter ; * Data::isDirty; * Node::getMass; * Node::getForceField; * STLExporter; * Sofa.unload; * Sofa.path; * Sofa.getAvailableComponents; * VisualModel::updateVisual; * VisualModel::initVisual; * add in PythonEnvironment::getPythonCallingPointAsFileInfo() a function that return a string with the ; python file/line info to add report them in msg_* ; * adds 'override' keyword when needed (more info => http://en.cppreference.com/w/cpp/language/override); * adds tests on PythonScriptController; * adds tests on SofaModule; * adds a exception handler in python so that the un-catched exceptions are sended as msg_error instead of being printed on the console. ; * cosmetic changes like replacing 'using namespace a;' with the ",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/304
https://github.com/sofa-framework/sofa/pull/304:2975,Integrability,Message,Message,2975,"Info() a function that return a string with the ; python file/line info to add report them in msg_* ; * adds 'override' keyword when needed (more info => http://en.cppreference.com/w/cpp/language/override); * adds tests on PythonScriptController; * adds tests on SofaModule; * adds a exception handler in python so that the un-catched exceptions are sended as msg_error instead of being printed on the console. ; * cosmetic changes like replacing 'using namespace a;' with the precise 'using a:TheClass', removing in-consistant line spacing. ; * replace ""extern C"" with static. - [Flexible/python] Fix the examples & the tests to take into account the changes in SofaPython; - [Compliant/python] Fix the examples & the tests to take into account the changes in SofaPython. To simplify the submitter's life (and don't waste their time) some extras (read not really relevant) changes are also added to the PR:; - remove a virtual in-heritance on BaseController and plugin/optitracknet. ; - adds a << operator to Message.h to handle file:line information (now in PR: #314 ) ; - made some changes in STLExporter to stay consistant with Sofa guidelines. . There is still some work todo (if you have free time to offer):; Eg: ; in Compliant there is still patterns like:; ```cpp; SP_MESSAGE_ERROR( ""_Compliant_getAssembledImplicitMatrix: wrong arguments"" );; return NULL;; ```; The SP_MESSAGE_ERROR is probably not needed as it duplicate the one provided by the python exception. . While in ; ```cpp; SP_MESSAGE_ERROR( ""_Compliant_getAssembledImplicitMatrix: first argument is not a BaseNode"" );; PyErr_BadArgument();; return NULL;; ```; PyExc_SetString() should replace the message error & the bad argument. . More generally there is still a lot of SP_MESSAGE_*() instead of msg_* and there is a lot of method that haven't their docstring. ; ; ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platf",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/304
https://github.com/sofa-framework/sofa/pull/304:3634,Integrability,message,message,3634,"o that the un-catched exceptions are sended as msg_error instead of being printed on the console. ; * cosmetic changes like replacing 'using namespace a;' with the precise 'using a:TheClass', removing in-consistant line spacing. ; * replace ""extern C"" with static. - [Flexible/python] Fix the examples & the tests to take into account the changes in SofaPython; - [Compliant/python] Fix the examples & the tests to take into account the changes in SofaPython. To simplify the submitter's life (and don't waste their time) some extras (read not really relevant) changes are also added to the PR:; - remove a virtual in-heritance on BaseController and plugin/optitracknet. ; - adds a << operator to Message.h to handle file:line information (now in PR: #314 ) ; - made some changes in STLExporter to stay consistant with Sofa guidelines. . There is still some work todo (if you have free time to offer):; Eg: ; in Compliant there is still patterns like:; ```cpp; SP_MESSAGE_ERROR( ""_Compliant_getAssembledImplicitMatrix: wrong arguments"" );; return NULL;; ```; The SP_MESSAGE_ERROR is probably not needed as it duplicate the one provided by the python exception. . While in ; ```cpp; SP_MESSAGE_ERROR( ""_Compliant_getAssembledImplicitMatrix: first argument is not a BaseNode"" );; PyErr_BadArgument();; return NULL;; ```; PyExc_SetString() should replace the message error & the bad argument. . More generally there is still a lot of SP_MESSAGE_*() instead of msg_* and there is a lot of method that haven't their docstring. ; ; ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/304
https://github.com/sofa-framework/sofa/pull/304:3903,Integrability,message,message,3903,"o that the un-catched exceptions are sended as msg_error instead of being printed on the console. ; * cosmetic changes like replacing 'using namespace a;' with the precise 'using a:TheClass', removing in-consistant line spacing. ; * replace ""extern C"" with static. - [Flexible/python] Fix the examples & the tests to take into account the changes in SofaPython; - [Compliant/python] Fix the examples & the tests to take into account the changes in SofaPython. To simplify the submitter's life (and don't waste their time) some extras (read not really relevant) changes are also added to the PR:; - remove a virtual in-heritance on BaseController and plugin/optitracknet. ; - adds a << operator to Message.h to handle file:line information (now in PR: #314 ) ; - made some changes in STLExporter to stay consistant with Sofa guidelines. . There is still some work todo (if you have free time to offer):; Eg: ; in Compliant there is still patterns like:; ```cpp; SP_MESSAGE_ERROR( ""_Compliant_getAssembledImplicitMatrix: wrong arguments"" );; return NULL;; ```; The SP_MESSAGE_ERROR is probably not needed as it duplicate the one provided by the python exception. . While in ; ```cpp; SP_MESSAGE_ERROR( ""_Compliant_getAssembledImplicitMatrix: first argument is not a BaseNode"" );; PyErr_BadArgument();; return NULL;; ```; PyExc_SetString() should replace the message error & the bad argument. . More generally there is still a lot of SP_MESSAGE_*() instead of msg_* and there is a lot of method that haven't their docstring. ; ; ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/304
https://github.com/sofa-framework/sofa/pull/304:41,Modifiability,plugin,plugin,41,"EDITED: Damien. Currently the SofaPython plugin is in a very poor shapes with two serious problems. The first one is a problem for developper with a lot of duplicated or invalid or in-elegant code which impact maintainability of our code base. The second problem is the lack of consistency in the way warning and errors are reported. In sofa some component rise en exception while others prints a message and return None which is very problematic to users. . In this PR we addressed these two issues through a major cleaning set of changes:; - [SofaPython]: ; * refactor the way to get get Sofa object from their PyObject equivalent (hundred of changes). ; * add dedicated easing function (unwrap, get, get_baseobject) ; * replace wherever possible copy-pasted code with these function. ; * refactor the way we report error from binding (hundred of changes) (API BREAK). ; * returning NULL with a correctly set exception type as it is the way of handling error in python. ; * when returning NULL it is mandatory to preceed the return with an exception type & message specification. This can be done either with PyExc_SetString() or Py_BaddArgument(), ; * when returning after a failing Py_ParseTuple is an exception, as the function sets itself a very ; descriptive and standardized error message.; * add macros (SP_PYERR_SETSTRING_INVALIDTYPE and SP_PYERR_SETSTRING_OUTOFBOUND) to report consistant message with PyErr_SetString ; * add SP_CLASS_METHOD_DOC() and SP_CLASS_METHOD_KW_DOC() to declare method with their docstring (if you don't know what are docstring read: http://sametmax.com/les-docstrings/); * add new bindings:; * BaseState::getSize ; * BaseMapping::applyJT; * BaseMapping::applyDJT; * Data::getCounter ; * Data::isDirty; * Node::getMass; * Node::getForceField; * STLExporter; * Sofa.unload; * Sofa.path; * Sofa.getAvailableComponents; * VisualModel::updateVisual; * VisualModel::initVisual; * add in PythonEnvironment::getPythonCallingPointAsFileInfo() a function that return a stri",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/304
https://github.com/sofa-framework/sofa/pull/304:210,Modifiability,maintainab,maintainability,210,"EDITED: Damien. Currently the SofaPython plugin is in a very poor shapes with two serious problems. The first one is a problem for developper with a lot of duplicated or invalid or in-elegant code which impact maintainability of our code base. The second problem is the lack of consistency in the way warning and errors are reported. In sofa some component rise en exception while others prints a message and return None which is very problematic to users. . In this PR we addressed these two issues through a major cleaning set of changes:; - [SofaPython]: ; * refactor the way to get get Sofa object from their PyObject equivalent (hundred of changes). ; * add dedicated easing function (unwrap, get, get_baseobject) ; * replace wherever possible copy-pasted code with these function. ; * refactor the way we report error from binding (hundred of changes) (API BREAK). ; * returning NULL with a correctly set exception type as it is the way of handling error in python. ; * when returning NULL it is mandatory to preceed the return with an exception type & message specification. This can be done either with PyExc_SetString() or Py_BaddArgument(), ; * when returning after a failing Py_ParseTuple is an exception, as the function sets itself a very ; descriptive and standardized error message.; * add macros (SP_PYERR_SETSTRING_INVALIDTYPE and SP_PYERR_SETSTRING_OUTOFBOUND) to report consistant message with PyErr_SetString ; * add SP_CLASS_METHOD_DOC() and SP_CLASS_METHOD_KW_DOC() to declare method with their docstring (if you don't know what are docstring read: http://sametmax.com/les-docstrings/); * add new bindings:; * BaseState::getSize ; * BaseMapping::applyJT; * BaseMapping::applyDJT; * Data::getCounter ; * Data::isDirty; * Node::getMass; * Node::getForceField; * STLExporter; * Sofa.unload; * Sofa.path; * Sofa.getAvailableComponents; * VisualModel::updateVisual; * VisualModel::initVisual; * add in PythonEnvironment::getPythonCallingPointAsFileInfo() a function that return a stri",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/304
https://github.com/sofa-framework/sofa/pull/304:562,Modifiability,refactor,refactor,562,"EDITED: Damien. Currently the SofaPython plugin is in a very poor shapes with two serious problems. The first one is a problem for developper with a lot of duplicated or invalid or in-elegant code which impact maintainability of our code base. The second problem is the lack of consistency in the way warning and errors are reported. In sofa some component rise en exception while others prints a message and return None which is very problematic to users. . In this PR we addressed these two issues through a major cleaning set of changes:; - [SofaPython]: ; * refactor the way to get get Sofa object from their PyObject equivalent (hundred of changes). ; * add dedicated easing function (unwrap, get, get_baseobject) ; * replace wherever possible copy-pasted code with these function. ; * refactor the way we report error from binding (hundred of changes) (API BREAK). ; * returning NULL with a correctly set exception type as it is the way of handling error in python. ; * when returning NULL it is mandatory to preceed the return with an exception type & message specification. This can be done either with PyExc_SetString() or Py_BaddArgument(), ; * when returning after a failing Py_ParseTuple is an exception, as the function sets itself a very ; descriptive and standardized error message.; * add macros (SP_PYERR_SETSTRING_INVALIDTYPE and SP_PYERR_SETSTRING_OUTOFBOUND) to report consistant message with PyErr_SetString ; * add SP_CLASS_METHOD_DOC() and SP_CLASS_METHOD_KW_DOC() to declare method with their docstring (if you don't know what are docstring read: http://sametmax.com/les-docstrings/); * add new bindings:; * BaseState::getSize ; * BaseMapping::applyJT; * BaseMapping::applyDJT; * Data::getCounter ; * Data::isDirty; * Node::getMass; * Node::getForceField; * STLExporter; * Sofa.unload; * Sofa.path; * Sofa.getAvailableComponents; * VisualModel::updateVisual; * VisualModel::initVisual; * add in PythonEnvironment::getPythonCallingPointAsFileInfo() a function that return a stri",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/304
https://github.com/sofa-framework/sofa/pull/304:791,Modifiability,refactor,refactor,791,"EDITED: Damien. Currently the SofaPython plugin is in a very poor shapes with two serious problems. The first one is a problem for developper with a lot of duplicated or invalid or in-elegant code which impact maintainability of our code base. The second problem is the lack of consistency in the way warning and errors are reported. In sofa some component rise en exception while others prints a message and return None which is very problematic to users. . In this PR we addressed these two issues through a major cleaning set of changes:; - [SofaPython]: ; * refactor the way to get get Sofa object from their PyObject equivalent (hundred of changes). ; * add dedicated easing function (unwrap, get, get_baseobject) ; * replace wherever possible copy-pasted code with these function. ; * refactor the way we report error from binding (hundred of changes) (API BREAK). ; * returning NULL with a correctly set exception type as it is the way of handling error in python. ; * when returning NULL it is mandatory to preceed the return with an exception type & message specification. This can be done either with PyExc_SetString() or Py_BaddArgument(), ; * when returning after a failing Py_ParseTuple is an exception, as the function sets itself a very ; descriptive and standardized error message.; * add macros (SP_PYERR_SETSTRING_INVALIDTYPE and SP_PYERR_SETSTRING_OUTOFBOUND) to report consistant message with PyErr_SetString ; * add SP_CLASS_METHOD_DOC() and SP_CLASS_METHOD_KW_DOC() to declare method with their docstring (if you don't know what are docstring read: http://sametmax.com/les-docstrings/); * add new bindings:; * BaseState::getSize ; * BaseMapping::applyJT; * BaseMapping::applyDJT; * Data::getCounter ; * Data::isDirty; * Node::getMass; * Node::getForceField; * STLExporter; * Sofa.unload; * Sofa.path; * Sofa.getAvailableComponents; * VisualModel::updateVisual; * VisualModel::initVisual; * add in PythonEnvironment::getPythonCallingPointAsFileInfo() a function that return a stri",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/304
https://github.com/sofa-framework/sofa/pull/304:2546,Modifiability,Flexible,Flexible,2546,"te::getSize ; * BaseMapping::applyJT; * BaseMapping::applyDJT; * Data::getCounter ; * Data::isDirty; * Node::getMass; * Node::getForceField; * STLExporter; * Sofa.unload; * Sofa.path; * Sofa.getAvailableComponents; * VisualModel::updateVisual; * VisualModel::initVisual; * add in PythonEnvironment::getPythonCallingPointAsFileInfo() a function that return a string with the ; python file/line info to add report them in msg_* ; * adds 'override' keyword when needed (more info => http://en.cppreference.com/w/cpp/language/override); * adds tests on PythonScriptController; * adds tests on SofaModule; * adds a exception handler in python so that the un-catched exceptions are sended as msg_error instead of being printed on the console. ; * cosmetic changes like replacing 'using namespace a;' with the precise 'using a:TheClass', removing in-consistant line spacing. ; * replace ""extern C"" with static. - [Flexible/python] Fix the examples & the tests to take into account the changes in SofaPython; - [Compliant/python] Fix the examples & the tests to take into account the changes in SofaPython. To simplify the submitter's life (and don't waste their time) some extras (read not really relevant) changes are also added to the PR:; - remove a virtual in-heritance on BaseController and plugin/optitracknet. ; - adds a << operator to Message.h to handle file:line information (now in PR: #314 ) ; - made some changes in STLExporter to stay consistant with Sofa guidelines. . There is still some work todo (if you have free time to offer):; Eg: ; in Compliant there is still patterns like:; ```cpp; SP_MESSAGE_ERROR( ""_Compliant_getAssembledImplicitMatrix: wrong arguments"" );; return NULL;; ```; The SP_MESSAGE_ERROR is probably not needed as it duplicate the one provided by the python exception. . While in ; ```cpp; SP_MESSAGE_ERROR( ""_Compliant_getAssembledImplicitMatrix: first argument is not a BaseNode"" );; PyErr_BadArgument();; return NULL;; ```; PyExc_SetString() should replace the messag",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/304
https://github.com/sofa-framework/sofa/pull/304:2928,Modifiability,plugin,plugin,2928,"Components; * VisualModel::updateVisual; * VisualModel::initVisual; * add in PythonEnvironment::getPythonCallingPointAsFileInfo() a function that return a string with the ; python file/line info to add report them in msg_* ; * adds 'override' keyword when needed (more info => http://en.cppreference.com/w/cpp/language/override); * adds tests on PythonScriptController; * adds tests on SofaModule; * adds a exception handler in python so that the un-catched exceptions are sended as msg_error instead of being printed on the console. ; * cosmetic changes like replacing 'using namespace a;' with the precise 'using a:TheClass', removing in-consistant line spacing. ; * replace ""extern C"" with static. - [Flexible/python] Fix the examples & the tests to take into account the changes in SofaPython; - [Compliant/python] Fix the examples & the tests to take into account the changes in SofaPython. To simplify the submitter's life (and don't waste their time) some extras (read not really relevant) changes are also added to the PR:; - remove a virtual in-heritance on BaseController and plugin/optitracknet. ; - adds a << operator to Message.h to handle file:line information (now in PR: #314 ) ; - made some changes in STLExporter to stay consistant with Sofa guidelines. . There is still some work todo (if you have free time to offer):; Eg: ; in Compliant there is still patterns like:; ```cpp; SP_MESSAGE_ERROR( ""_Compliant_getAssembledImplicitMatrix: wrong arguments"" );; return NULL;; ```; The SP_MESSAGE_ERROR is probably not needed as it duplicate the one provided by the python exception. . While in ; ```cpp; SP_MESSAGE_ERROR( ""_Compliant_getAssembledImplicitMatrix: first argument is not a BaseNode"" );; PyErr_BadArgument();; return NULL;; ```; PyExc_SetString() should replace the message error & the bad argument. . More generally there is still a lot of SP_MESSAGE_*() instead of msg_* and there is a lot of method that haven't their docstring. ; ; _______________________________________",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/304
https://github.com/sofa-framework/sofa/pull/304:2179,Testability,test,tests,2179,"riptive and standardized error message.; * add macros (SP_PYERR_SETSTRING_INVALIDTYPE and SP_PYERR_SETSTRING_OUTOFBOUND) to report consistant message with PyErr_SetString ; * add SP_CLASS_METHOD_DOC() and SP_CLASS_METHOD_KW_DOC() to declare method with their docstring (if you don't know what are docstring read: http://sametmax.com/les-docstrings/); * add new bindings:; * BaseState::getSize ; * BaseMapping::applyJT; * BaseMapping::applyDJT; * Data::getCounter ; * Data::isDirty; * Node::getMass; * Node::getForceField; * STLExporter; * Sofa.unload; * Sofa.path; * Sofa.getAvailableComponents; * VisualModel::updateVisual; * VisualModel::initVisual; * add in PythonEnvironment::getPythonCallingPointAsFileInfo() a function that return a string with the ; python file/line info to add report them in msg_* ; * adds 'override' keyword when needed (more info => http://en.cppreference.com/w/cpp/language/override); * adds tests on PythonScriptController; * adds tests on SofaModule; * adds a exception handler in python so that the un-catched exceptions are sended as msg_error instead of being printed on the console. ; * cosmetic changes like replacing 'using namespace a;' with the precise 'using a:TheClass', removing in-consistant line spacing. ; * replace ""extern C"" with static. - [Flexible/python] Fix the examples & the tests to take into account the changes in SofaPython; - [Compliant/python] Fix the examples & the tests to take into account the changes in SofaPython. To simplify the submitter's life (and don't waste their time) some extras (read not really relevant) changes are also added to the PR:; - remove a virtual in-heritance on BaseController and plugin/optitracknet. ; - adds a << operator to Message.h to handle file:line information (now in PR: #314 ) ; - made some changes in STLExporter to stay consistant with Sofa guidelines. . There is still some work todo (if you have free time to offer):; Eg: ; in Compliant there is still patterns like:; ```cpp; SP_MESSAGE_ERROR( ""_",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/304
https://github.com/sofa-framework/sofa/pull/304:2219,Testability,test,tests,2219,"riptive and standardized error message.; * add macros (SP_PYERR_SETSTRING_INVALIDTYPE and SP_PYERR_SETSTRING_OUTOFBOUND) to report consistant message with PyErr_SetString ; * add SP_CLASS_METHOD_DOC() and SP_CLASS_METHOD_KW_DOC() to declare method with their docstring (if you don't know what are docstring read: http://sametmax.com/les-docstrings/); * add new bindings:; * BaseState::getSize ; * BaseMapping::applyJT; * BaseMapping::applyDJT; * Data::getCounter ; * Data::isDirty; * Node::getMass; * Node::getForceField; * STLExporter; * Sofa.unload; * Sofa.path; * Sofa.getAvailableComponents; * VisualModel::updateVisual; * VisualModel::initVisual; * add in PythonEnvironment::getPythonCallingPointAsFileInfo() a function that return a string with the ; python file/line info to add report them in msg_* ; * adds 'override' keyword when needed (more info => http://en.cppreference.com/w/cpp/language/override); * adds tests on PythonScriptController; * adds tests on SofaModule; * adds a exception handler in python so that the un-catched exceptions are sended as msg_error instead of being printed on the console. ; * cosmetic changes like replacing 'using namespace a;' with the precise 'using a:TheClass', removing in-consistant line spacing. ; * replace ""extern C"" with static. - [Flexible/python] Fix the examples & the tests to take into account the changes in SofaPython; - [Compliant/python] Fix the examples & the tests to take into account the changes in SofaPython. To simplify the submitter's life (and don't waste their time) some extras (read not really relevant) changes are also added to the PR:; - remove a virtual in-heritance on BaseController and plugin/optitracknet. ; - adds a << operator to Message.h to handle file:line information (now in PR: #314 ) ; - made some changes in STLExporter to stay consistant with Sofa guidelines. . There is still some work todo (if you have free time to offer):; Eg: ; in Compliant there is still patterns like:; ```cpp; SP_MESSAGE_ERROR( ""_",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/304
https://github.com/sofa-framework/sofa/pull/304:2586,Testability,test,tests,2586,"te::getSize ; * BaseMapping::applyJT; * BaseMapping::applyDJT; * Data::getCounter ; * Data::isDirty; * Node::getMass; * Node::getForceField; * STLExporter; * Sofa.unload; * Sofa.path; * Sofa.getAvailableComponents; * VisualModel::updateVisual; * VisualModel::initVisual; * add in PythonEnvironment::getPythonCallingPointAsFileInfo() a function that return a string with the ; python file/line info to add report them in msg_* ; * adds 'override' keyword when needed (more info => http://en.cppreference.com/w/cpp/language/override); * adds tests on PythonScriptController; * adds tests on SofaModule; * adds a exception handler in python so that the un-catched exceptions are sended as msg_error instead of being printed on the console. ; * cosmetic changes like replacing 'using namespace a;' with the precise 'using a:TheClass', removing in-consistant line spacing. ; * replace ""extern C"" with static. - [Flexible/python] Fix the examples & the tests to take into account the changes in SofaPython; - [Compliant/python] Fix the examples & the tests to take into account the changes in SofaPython. To simplify the submitter's life (and don't waste their time) some extras (read not really relevant) changes are also added to the PR:; - remove a virtual in-heritance on BaseController and plugin/optitracknet. ; - adds a << operator to Message.h to handle file:line information (now in PR: #314 ) ; - made some changes in STLExporter to stay consistant with Sofa guidelines. . There is still some work todo (if you have free time to offer):; Eg: ; in Compliant there is still patterns like:; ```cpp; SP_MESSAGE_ERROR( ""_Compliant_getAssembledImplicitMatrix: wrong arguments"" );; return NULL;; ```; The SP_MESSAGE_ERROR is probably not needed as it duplicate the one provided by the python exception. . While in ; ```cpp; SP_MESSAGE_ERROR( ""_Compliant_getAssembledImplicitMatrix: first argument is not a BaseNode"" );; PyErr_BadArgument();; return NULL;; ```; PyExc_SetString() should replace the messag",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/304
https://github.com/sofa-framework/sofa/pull/304:2684,Testability,test,tests,2684,"te::getSize ; * BaseMapping::applyJT; * BaseMapping::applyDJT; * Data::getCounter ; * Data::isDirty; * Node::getMass; * Node::getForceField; * STLExporter; * Sofa.unload; * Sofa.path; * Sofa.getAvailableComponents; * VisualModel::updateVisual; * VisualModel::initVisual; * add in PythonEnvironment::getPythonCallingPointAsFileInfo() a function that return a string with the ; python file/line info to add report them in msg_* ; * adds 'override' keyword when needed (more info => http://en.cppreference.com/w/cpp/language/override); * adds tests on PythonScriptController; * adds tests on SofaModule; * adds a exception handler in python so that the un-catched exceptions are sended as msg_error instead of being printed on the console. ; * cosmetic changes like replacing 'using namespace a;' with the precise 'using a:TheClass', removing in-consistant line spacing. ; * replace ""extern C"" with static. - [Flexible/python] Fix the examples & the tests to take into account the changes in SofaPython; - [Compliant/python] Fix the examples & the tests to take into account the changes in SofaPython. To simplify the submitter's life (and don't waste their time) some extras (read not really relevant) changes are also added to the PR:; - remove a virtual in-heritance on BaseController and plugin/optitracknet. ; - adds a << operator to Message.h to handle file:line information (now in PR: #314 ) ; - made some changes in STLExporter to stay consistant with Sofa guidelines. . There is still some work todo (if you have free time to offer):; Eg: ; in Compliant there is still patterns like:; ```cpp; SP_MESSAGE_ERROR( ""_Compliant_getAssembledImplicitMatrix: wrong arguments"" );; return NULL;; ```; The SP_MESSAGE_ERROR is probably not needed as it duplicate the one provided by the python exception. . While in ; ```cpp; SP_MESSAGE_ERROR( ""_Compliant_getAssembledImplicitMatrix: first argument is not a BaseNode"" );; PyErr_BadArgument();; return NULL;; ```; PyExc_SetString() should replace the messag",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/304
https://github.com/sofa-framework/sofa/pull/304:4055,Testability,test,test,4055,"o that the un-catched exceptions are sended as msg_error instead of being printed on the console. ; * cosmetic changes like replacing 'using namespace a;' with the precise 'using a:TheClass', removing in-consistant line spacing. ; * replace ""extern C"" with static. - [Flexible/python] Fix the examples & the tests to take into account the changes in SofaPython; - [Compliant/python] Fix the examples & the tests to take into account the changes in SofaPython. To simplify the submitter's life (and don't waste their time) some extras (read not really relevant) changes are also added to the PR:; - remove a virtual in-heritance on BaseController and plugin/optitracknet. ; - adds a << operator to Message.h to handle file:line information (now in PR: #314 ) ; - made some changes in STLExporter to stay consistant with Sofa guidelines. . There is still some work todo (if you have free time to offer):; Eg: ; in Compliant there is still patterns like:; ```cpp; SP_MESSAGE_ERROR( ""_Compliant_getAssembledImplicitMatrix: wrong arguments"" );; return NULL;; ```; The SP_MESSAGE_ERROR is probably not needed as it duplicate the one provided by the python exception. . While in ; ```cpp; SP_MESSAGE_ERROR( ""_Compliant_getAssembledImplicitMatrix: first argument is not a BaseNode"" );; PyErr_BadArgument();; return NULL;; ```; PyExc_SetString() should replace the message error & the bad argument. . More generally there is still a lot of SP_MESSAGE_*() instead of msg_* and there is a lot of method that haven't their docstring. ; ; ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/304
https://github.com/sofa-framework/sofa/pull/304:4105,Testability,test,test,4105,"o that the un-catched exceptions are sended as msg_error instead of being printed on the console. ; * cosmetic changes like replacing 'using namespace a;' with the precise 'using a:TheClass', removing in-consistant line spacing. ; * replace ""extern C"" with static. - [Flexible/python] Fix the examples & the tests to take into account the changes in SofaPython; - [Compliant/python] Fix the examples & the tests to take into account the changes in SofaPython. To simplify the submitter's life (and don't waste their time) some extras (read not really relevant) changes are also added to the PR:; - remove a virtual in-heritance on BaseController and plugin/optitracknet. ; - adds a << operator to Message.h to handle file:line information (now in PR: #314 ) ; - made some changes in STLExporter to stay consistant with Sofa guidelines. . There is still some work todo (if you have free time to offer):; Eg: ; in Compliant there is still patterns like:; ```cpp; SP_MESSAGE_ERROR( ""_Compliant_getAssembledImplicitMatrix: wrong arguments"" );; return NULL;; ```; The SP_MESSAGE_ERROR is probably not needed as it duplicate the one provided by the python exception. . While in ; ```cpp; SP_MESSAGE_ERROR( ""_Compliant_getAssembledImplicitMatrix: first argument is not a BaseNode"" );; PyErr_BadArgument();; return NULL;; ```; PyExc_SetString() should replace the message error & the bad argument. . More generally there is still a lot of SP_MESSAGE_*() instead of msg_* and there is a lot of method that haven't their docstring. ; ; ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/304
https://github.com/sofa-framework/sofa/pull/304:2741,Usability,simpl,simplify,2741,"Components; * VisualModel::updateVisual; * VisualModel::initVisual; * add in PythonEnvironment::getPythonCallingPointAsFileInfo() a function that return a string with the ; python file/line info to add report them in msg_* ; * adds 'override' keyword when needed (more info => http://en.cppreference.com/w/cpp/language/override); * adds tests on PythonScriptController; * adds tests on SofaModule; * adds a exception handler in python so that the un-catched exceptions are sended as msg_error instead of being printed on the console. ; * cosmetic changes like replacing 'using namespace a;' with the precise 'using a:TheClass', removing in-consistant line spacing. ; * replace ""extern C"" with static. - [Flexible/python] Fix the examples & the tests to take into account the changes in SofaPython; - [Compliant/python] Fix the examples & the tests to take into account the changes in SofaPython. To simplify the submitter's life (and don't waste their time) some extras (read not really relevant) changes are also added to the PR:; - remove a virtual in-heritance on BaseController and plugin/optitracknet. ; - adds a << operator to Message.h to handle file:line information (now in PR: #314 ) ; - made some changes in STLExporter to stay consistant with Sofa guidelines. . There is still some work todo (if you have free time to offer):; Eg: ; in Compliant there is still patterns like:; ```cpp; SP_MESSAGE_ERROR( ""_Compliant_getAssembledImplicitMatrix: wrong arguments"" );; return NULL;; ```; The SP_MESSAGE_ERROR is probably not needed as it duplicate the one provided by the python exception. . While in ; ```cpp; SP_MESSAGE_ERROR( ""_Compliant_getAssembledImplicitMatrix: first argument is not a BaseNode"" );; PyErr_BadArgument();; return NULL;; ```; PyExc_SetString() should replace the message error & the bad argument. . More generally there is still a lot of SP_MESSAGE_*() instead of msg_* and there is a lot of method that haven't their docstring. ; ; _______________________________________",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/304
https://github.com/sofa-framework/sofa/pull/304:3102,Usability,guid,guidelines,3102,"rt them in msg_* ; * adds 'override' keyword when needed (more info => http://en.cppreference.com/w/cpp/language/override); * adds tests on PythonScriptController; * adds tests on SofaModule; * adds a exception handler in python so that the un-catched exceptions are sended as msg_error instead of being printed on the console. ; * cosmetic changes like replacing 'using namespace a;' with the precise 'using a:TheClass', removing in-consistant line spacing. ; * replace ""extern C"" with static. - [Flexible/python] Fix the examples & the tests to take into account the changes in SofaPython; - [Compliant/python] Fix the examples & the tests to take into account the changes in SofaPython. To simplify the submitter's life (and don't waste their time) some extras (read not really relevant) changes are also added to the PR:; - remove a virtual in-heritance on BaseController and plugin/optitracknet. ; - adds a << operator to Message.h to handle file:line information (now in PR: #314 ) ; - made some changes in STLExporter to stay consistant with Sofa guidelines. . There is still some work todo (if you have free time to offer):; Eg: ; in Compliant there is still patterns like:; ```cpp; SP_MESSAGE_ERROR( ""_Compliant_getAssembledImplicitMatrix: wrong arguments"" );; return NULL;; ```; The SP_MESSAGE_ERROR is probably not needed as it duplicate the one provided by the python exception. . While in ; ```cpp; SP_MESSAGE_ERROR( ""_Compliant_getAssembledImplicitMatrix: first argument is not a BaseNode"" );; PyErr_BadArgument();; return NULL;; ```; PyExc_SetString() should replace the message error & the bad argument. . More generally there is still a lot of SP_MESSAGE_*() instead of msg_* and there is a lot of method that haven't their docstring. ; ; ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate ne",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/304
https://github.com/sofa-framework/sofa/pull/305:532,Availability,failure,failures,532,There was a regression in the way RGBAColor are parsed by the stream operator>>.; This was the cause of Material reading was not working (issue #302). . This PR fix:; - fix the problem. ; - add new tests for RGBAColor & Material ; - Clean Material without breaking the API. . ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/305
https://github.com/sofa-framework/sofa/pull/305:582,Availability,failure,failures,582,There was a regression in the way RGBAColor are parsed by the stream operator>>.; This was the cause of Material reading was not working (issue #302). . This PR fix:; - fix the problem. ; - add new tests for RGBAColor & Material ; - Clean Material without breaking the API. . ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/305
https://github.com/sofa-framework/sofa/pull/305:375,Integrability,message,message,375,There was a regression in the way RGBAColor are parsed by the stream operator>>.; This was the cause of Material reading was not working (issue #302). . This PR fix:; - fix the problem. ; - add new tests for RGBAColor & Material ; - Clean Material without breaking the API. . ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/305
https://github.com/sofa-framework/sofa/pull/305:198,Testability,test,tests,198,There was a regression in the way RGBAColor are parsed by the stream operator>>.; This was the cause of Material reading was not working (issue #302). . This PR fix:; - fix the problem. ; - add new tests for RGBAColor & Material ; - Clean Material without breaking the API. . ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/305
https://github.com/sofa-framework/sofa/pull/305:527,Testability,test,test,527,There was a regression in the way RGBAColor are parsed by the stream operator>>.; This was the cause of Material reading was not working (issue #302). . This PR fix:; - fix the problem. ; - add new tests for RGBAColor & Material ; - Clean Material without breaking the API. . ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/305
https://github.com/sofa-framework/sofa/pull/305:577,Testability,test,test,577,There was a regression in the way RGBAColor are parsed by the stream operator>>.; This was the cause of Material reading was not working (issue #302). . This PR fix:; - fix the problem. ; - add new tests for RGBAColor & Material ; - Clean Material without breaking the API. . ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/305
https://github.com/sofa-framework/sofa/pull/306:1083,Availability,failure,failures,1083,"Problem:; It is common that people write scene in which they used components from specific plugins but forgot the corresponding ; ```xml ; <RequiredPlugin name=''>; ```; because they, in a way or an other, preload the plugin. . This is problematic because, when the environment change (you compile sofa in a different way, your preload different plugin, it is a different person on a different computer,... ) and the preload is not done anymore it makes the component/plugin tracking very hard if it is not a trivial component in a trivial plugin. . To solve this problem, I implemented a SceneCheckerVistitor that scans the scene and detects which components are from a plugin and warn the user if there is no RequiredPlugin in there scene with this component and explaine how his scene should be fixed for the good of all. . ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/306
https://github.com/sofa-framework/sofa/pull/306:1133,Availability,failure,failures,1133,"Problem:; It is common that people write scene in which they used components from specific plugins but forgot the corresponding ; ```xml ; <RequiredPlugin name=''>; ```; because they, in a way or an other, preload the plugin. . This is problematic because, when the environment change (you compile sofa in a different way, your preload different plugin, it is a different person on a different computer,... ) and the preload is not done anymore it makes the component/plugin tracking very hard if it is not a trivial component in a trivial plugin. . To solve this problem, I implemented a SceneCheckerVistitor that scans the scene and detects which components are from a plugin and warn the user if there is no RequiredPlugin in there scene with this component and explaine how his scene should be fixed for the good of all. . ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/306
https://github.com/sofa-framework/sofa/pull/306:926,Integrability,message,message,926,"Problem:; It is common that people write scene in which they used components from specific plugins but forgot the corresponding ; ```xml ; <RequiredPlugin name=''>; ```; because they, in a way or an other, preload the plugin. . This is problematic because, when the environment change (you compile sofa in a different way, your preload different plugin, it is a different person on a different computer,... ) and the preload is not done anymore it makes the component/plugin tracking very hard if it is not a trivial component in a trivial plugin. . To solve this problem, I implemented a SceneCheckerVistitor that scans the scene and detects which components are from a plugin and warn the user if there is no RequiredPlugin in there scene with this component and explaine how his scene should be fixed for the good of all. . ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/306
https://github.com/sofa-framework/sofa/pull/306:91,Modifiability,plugin,plugins,91,"Problem:; It is common that people write scene in which they used components from specific plugins but forgot the corresponding ; ```xml ; <RequiredPlugin name=''>; ```; because they, in a way or an other, preload the plugin. . This is problematic because, when the environment change (you compile sofa in a different way, your preload different plugin, it is a different person on a different computer,... ) and the preload is not done anymore it makes the component/plugin tracking very hard if it is not a trivial component in a trivial plugin. . To solve this problem, I implemented a SceneCheckerVistitor that scans the scene and detects which components are from a plugin and warn the user if there is no RequiredPlugin in there scene with this component and explaine how his scene should be fixed for the good of all. . ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/306
https://github.com/sofa-framework/sofa/pull/306:218,Modifiability,plugin,plugin,218,"Problem:; It is common that people write scene in which they used components from specific plugins but forgot the corresponding ; ```xml ; <RequiredPlugin name=''>; ```; because they, in a way or an other, preload the plugin. . This is problematic because, when the environment change (you compile sofa in a different way, your preload different plugin, it is a different person on a different computer,... ) and the preload is not done anymore it makes the component/plugin tracking very hard if it is not a trivial component in a trivial plugin. . To solve this problem, I implemented a SceneCheckerVistitor that scans the scene and detects which components are from a plugin and warn the user if there is no RequiredPlugin in there scene with this component and explaine how his scene should be fixed for the good of all. . ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/306
https://github.com/sofa-framework/sofa/pull/306:346,Modifiability,plugin,plugin,346,"Problem:; It is common that people write scene in which they used components from specific plugins but forgot the corresponding ; ```xml ; <RequiredPlugin name=''>; ```; because they, in a way or an other, preload the plugin. . This is problematic because, when the environment change (you compile sofa in a different way, your preload different plugin, it is a different person on a different computer,... ) and the preload is not done anymore it makes the component/plugin tracking very hard if it is not a trivial component in a trivial plugin. . To solve this problem, I implemented a SceneCheckerVistitor that scans the scene and detects which components are from a plugin and warn the user if there is no RequiredPlugin in there scene with this component and explaine how his scene should be fixed for the good of all. . ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/306
https://github.com/sofa-framework/sofa/pull/306:468,Modifiability,plugin,plugin,468,"Problem:; It is common that people write scene in which they used components from specific plugins but forgot the corresponding ; ```xml ; <RequiredPlugin name=''>; ```; because they, in a way or an other, preload the plugin. . This is problematic because, when the environment change (you compile sofa in a different way, your preload different plugin, it is a different person on a different computer,... ) and the preload is not done anymore it makes the component/plugin tracking very hard if it is not a trivial component in a trivial plugin. . To solve this problem, I implemented a SceneCheckerVistitor that scans the scene and detects which components are from a plugin and warn the user if there is no RequiredPlugin in there scene with this component and explaine how his scene should be fixed for the good of all. . ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/306
https://github.com/sofa-framework/sofa/pull/306:540,Modifiability,plugin,plugin,540,"Problem:; It is common that people write scene in which they used components from specific plugins but forgot the corresponding ; ```xml ; <RequiredPlugin name=''>; ```; because they, in a way or an other, preload the plugin. . This is problematic because, when the environment change (you compile sofa in a different way, your preload different plugin, it is a different person on a different computer,... ) and the preload is not done anymore it makes the component/plugin tracking very hard if it is not a trivial component in a trivial plugin. . To solve this problem, I implemented a SceneCheckerVistitor that scans the scene and detects which components are from a plugin and warn the user if there is no RequiredPlugin in there scene with this component and explaine how his scene should be fixed for the good of all. . ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/306
https://github.com/sofa-framework/sofa/pull/306:671,Modifiability,plugin,plugin,671,"Problem:; It is common that people write scene in which they used components from specific plugins but forgot the corresponding ; ```xml ; <RequiredPlugin name=''>; ```; because they, in a way or an other, preload the plugin. . This is problematic because, when the environment change (you compile sofa in a different way, your preload different plugin, it is a different person on a different computer,... ) and the preload is not done anymore it makes the component/plugin tracking very hard if it is not a trivial component in a trivial plugin. . To solve this problem, I implemented a SceneCheckerVistitor that scans the scene and detects which components are from a plugin and warn the user if there is no RequiredPlugin in there scene with this component and explaine how his scene should be fixed for the good of all. . ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/306
https://github.com/sofa-framework/sofa/pull/306:635,Safety,detect,detects,635,"Problem:; It is common that people write scene in which they used components from specific plugins but forgot the corresponding ; ```xml ; <RequiredPlugin name=''>; ```; because they, in a way or an other, preload the plugin. . This is problematic because, when the environment change (you compile sofa in a different way, your preload different plugin, it is a different person on a different computer,... ) and the preload is not done anymore it makes the component/plugin tracking very hard if it is not a trivial component in a trivial plugin. . To solve this problem, I implemented a SceneCheckerVistitor that scans the scene and detects which components are from a plugin and warn the user if there is no RequiredPlugin in there scene with this component and explaine how his scene should be fixed for the good of all. . ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/306
https://github.com/sofa-framework/sofa/pull/306:1078,Testability,test,test,1078,"Problem:; It is common that people write scene in which they used components from specific plugins but forgot the corresponding ; ```xml ; <RequiredPlugin name=''>; ```; because they, in a way or an other, preload the plugin. . This is problematic because, when the environment change (you compile sofa in a different way, your preload different plugin, it is a different person on a different computer,... ) and the preload is not done anymore it makes the component/plugin tracking very hard if it is not a trivial component in a trivial plugin. . To solve this problem, I implemented a SceneCheckerVistitor that scans the scene and detects which components are from a plugin and warn the user if there is no RequiredPlugin in there scene with this component and explaine how his scene should be fixed for the good of all. . ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/306
https://github.com/sofa-framework/sofa/pull/306:1128,Testability,test,test,1128,"Problem:; It is common that people write scene in which they used components from specific plugins but forgot the corresponding ; ```xml ; <RequiredPlugin name=''>; ```; because they, in a way or an other, preload the plugin. . This is problematic because, when the environment change (you compile sofa in a different way, your preload different plugin, it is a different person on a different computer,... ) and the preload is not done anymore it makes the component/plugin tracking very hard if it is not a trivial component in a trivial plugin. . To solve this problem, I implemented a SceneCheckerVistitor that scans the scene and detects which components are from a plugin and warn the user if there is no RequiredPlugin in there scene with this component and explaine how his scene should be fixed for the good of all. . ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/306
https://github.com/sofa-framework/sofa/issues/307:180,Availability,error,errors,180,I built Sofa with the registration plugin successfully. When I had a test with ICPRegistration_ShapeMatching.scn in .\applications\plugins\Registration\examples. It reminded these errors:. [INFO] [SofaPython] Added ‘F:/SOFA16.12/sofaproject/sofasrc/applications/plugins/image/python’ to sys.path; [INFO] [SofaPython] Added ‘F:/SOFA16.12/sofaproject/sofasrc/applications/plugins/Registration/python’ to sys.path; [INFO] [SofaPython] Added ‘F:/SOFA16.12/sofaproject/sofasrc/applications/plugins/SofaPython/python’ to sys.path; [INFO] [PluginManager] Loaded plugin: F:/SOFA16.12/sofaproject/sofabuild/bin/Release/SofaPython.dll. [INFO] [PluginManager] Loaded plugin: F:/SOFA16.12/sofaproject/sofabuild/bin/Release/Registration.dll; [ERROR] [RequiredPlugin] Plugin not found: “SofaMiscForceFieldDev”; [ERROR] [DAGNode “source”] Object type “RotationFinder” creation Failed; [ERROR] [DAGNode “source”] Object type “ShapeMatchingForceField” creation Failed; [ERROR] [SceneLoaderXML] Node initialization failed. I didn’t find any information about this SofaMiscForceFieldDev plugin. Can anyone give me some tips about that?. Thanks in advance!,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/307
https://github.com/sofa-framework/sofa/issues/307:730,Availability,ERROR,ERROR,730,I built Sofa with the registration plugin successfully. When I had a test with ICPRegistration_ShapeMatching.scn in .\applications\plugins\Registration\examples. It reminded these errors:. [INFO] [SofaPython] Added ‘F:/SOFA16.12/sofaproject/sofasrc/applications/plugins/image/python’ to sys.path; [INFO] [SofaPython] Added ‘F:/SOFA16.12/sofaproject/sofasrc/applications/plugins/Registration/python’ to sys.path; [INFO] [SofaPython] Added ‘F:/SOFA16.12/sofaproject/sofasrc/applications/plugins/SofaPython/python’ to sys.path; [INFO] [PluginManager] Loaded plugin: F:/SOFA16.12/sofaproject/sofabuild/bin/Release/SofaPython.dll. [INFO] [PluginManager] Loaded plugin: F:/SOFA16.12/sofaproject/sofabuild/bin/Release/Registration.dll; [ERROR] [RequiredPlugin] Plugin not found: “SofaMiscForceFieldDev”; [ERROR] [DAGNode “source”] Object type “RotationFinder” creation Failed; [ERROR] [DAGNode “source”] Object type “ShapeMatchingForceField” creation Failed; [ERROR] [SceneLoaderXML] Node initialization failed. I didn’t find any information about this SofaMiscForceFieldDev plugin. Can anyone give me some tips about that?. Thanks in advance!,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/307
https://github.com/sofa-framework/sofa/issues/307:798,Availability,ERROR,ERROR,798,I built Sofa with the registration plugin successfully. When I had a test with ICPRegistration_ShapeMatching.scn in .\applications\plugins\Registration\examples. It reminded these errors:. [INFO] [SofaPython] Added ‘F:/SOFA16.12/sofaproject/sofasrc/applications/plugins/image/python’ to sys.path; [INFO] [SofaPython] Added ‘F:/SOFA16.12/sofaproject/sofasrc/applications/plugins/Registration/python’ to sys.path; [INFO] [SofaPython] Added ‘F:/SOFA16.12/sofaproject/sofasrc/applications/plugins/SofaPython/python’ to sys.path; [INFO] [PluginManager] Loaded plugin: F:/SOFA16.12/sofaproject/sofabuild/bin/Release/SofaPython.dll. [INFO] [PluginManager] Loaded plugin: F:/SOFA16.12/sofaproject/sofabuild/bin/Release/Registration.dll; [ERROR] [RequiredPlugin] Plugin not found: “SofaMiscForceFieldDev”; [ERROR] [DAGNode “source”] Object type “RotationFinder” creation Failed; [ERROR] [DAGNode “source”] Object type “ShapeMatchingForceField” creation Failed; [ERROR] [SceneLoaderXML] Node initialization failed. I didn’t find any information about this SofaMiscForceFieldDev plugin. Can anyone give me some tips about that?. Thanks in advance!,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/307
https://github.com/sofa-framework/sofa/issues/307:871,Availability,ERROR,ERROR,871,I built Sofa with the registration plugin successfully. When I had a test with ICPRegistration_ShapeMatching.scn in .\applications\plugins\Registration\examples. It reminded these errors:. [INFO] [SofaPython] Added ‘F:/SOFA16.12/sofaproject/sofasrc/applications/plugins/image/python’ to sys.path; [INFO] [SofaPython] Added ‘F:/SOFA16.12/sofaproject/sofasrc/applications/plugins/Registration/python’ to sys.path; [INFO] [SofaPython] Added ‘F:/SOFA16.12/sofaproject/sofasrc/applications/plugins/SofaPython/python’ to sys.path; [INFO] [PluginManager] Loaded plugin: F:/SOFA16.12/sofaproject/sofabuild/bin/Release/SofaPython.dll. [INFO] [PluginManager] Loaded plugin: F:/SOFA16.12/sofaproject/sofabuild/bin/Release/Registration.dll; [ERROR] [RequiredPlugin] Plugin not found: “SofaMiscForceFieldDev”; [ERROR] [DAGNode “source”] Object type “RotationFinder” creation Failed; [ERROR] [DAGNode “source”] Object type “ShapeMatchingForceField” creation Failed; [ERROR] [SceneLoaderXML] Node initialization failed. I didn’t find any information about this SofaMiscForceFieldDev plugin. Can anyone give me some tips about that?. Thanks in advance!,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/307
https://github.com/sofa-framework/sofa/issues/307:953,Availability,ERROR,ERROR,953,I built Sofa with the registration plugin successfully. When I had a test with ICPRegistration_ShapeMatching.scn in .\applications\plugins\Registration\examples. It reminded these errors:. [INFO] [SofaPython] Added ‘F:/SOFA16.12/sofaproject/sofasrc/applications/plugins/image/python’ to sys.path; [INFO] [SofaPython] Added ‘F:/SOFA16.12/sofaproject/sofasrc/applications/plugins/Registration/python’ to sys.path; [INFO] [SofaPython] Added ‘F:/SOFA16.12/sofaproject/sofasrc/applications/plugins/SofaPython/python’ to sys.path; [INFO] [PluginManager] Loaded plugin: F:/SOFA16.12/sofaproject/sofabuild/bin/Release/SofaPython.dll. [INFO] [PluginManager] Loaded plugin: F:/SOFA16.12/sofaproject/sofabuild/bin/Release/Registration.dll; [ERROR] [RequiredPlugin] Plugin not found: “SofaMiscForceFieldDev”; [ERROR] [DAGNode “source”] Object type “RotationFinder” creation Failed; [ERROR] [DAGNode “source”] Object type “ShapeMatchingForceField” creation Failed; [ERROR] [SceneLoaderXML] Node initialization failed. I didn’t find any information about this SofaMiscForceFieldDev plugin. Can anyone give me some tips about that?. Thanks in advance!,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/307
https://github.com/sofa-framework/sofa/issues/307:602,Deployability,Release,Release,602,I built Sofa with the registration plugin successfully. When I had a test with ICPRegistration_ShapeMatching.scn in .\applications\plugins\Registration\examples. It reminded these errors:. [INFO] [SofaPython] Added ‘F:/SOFA16.12/sofaproject/sofasrc/applications/plugins/image/python’ to sys.path; [INFO] [SofaPython] Added ‘F:/SOFA16.12/sofaproject/sofasrc/applications/plugins/Registration/python’ to sys.path; [INFO] [SofaPython] Added ‘F:/SOFA16.12/sofaproject/sofasrc/applications/plugins/SofaPython/python’ to sys.path; [INFO] [PluginManager] Loaded plugin: F:/SOFA16.12/sofaproject/sofabuild/bin/Release/SofaPython.dll. [INFO] [PluginManager] Loaded plugin: F:/SOFA16.12/sofaproject/sofabuild/bin/Release/Registration.dll; [ERROR] [RequiredPlugin] Plugin not found: “SofaMiscForceFieldDev”; [ERROR] [DAGNode “source”] Object type “RotationFinder” creation Failed; [ERROR] [DAGNode “source”] Object type “ShapeMatchingForceField” creation Failed; [ERROR] [SceneLoaderXML] Node initialization failed. I didn’t find any information about this SofaMiscForceFieldDev plugin. Can anyone give me some tips about that?. Thanks in advance!,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/307
https://github.com/sofa-framework/sofa/issues/307:703,Deployability,Release,Release,703,I built Sofa with the registration plugin successfully. When I had a test with ICPRegistration_ShapeMatching.scn in .\applications\plugins\Registration\examples. It reminded these errors:. [INFO] [SofaPython] Added ‘F:/SOFA16.12/sofaproject/sofasrc/applications/plugins/image/python’ to sys.path; [INFO] [SofaPython] Added ‘F:/SOFA16.12/sofaproject/sofasrc/applications/plugins/Registration/python’ to sys.path; [INFO] [SofaPython] Added ‘F:/SOFA16.12/sofaproject/sofasrc/applications/plugins/SofaPython/python’ to sys.path; [INFO] [PluginManager] Loaded plugin: F:/SOFA16.12/sofaproject/sofabuild/bin/Release/SofaPython.dll. [INFO] [PluginManager] Loaded plugin: F:/SOFA16.12/sofaproject/sofabuild/bin/Release/Registration.dll; [ERROR] [RequiredPlugin] Plugin not found: “SofaMiscForceFieldDev”; [ERROR] [DAGNode “source”] Object type “RotationFinder” creation Failed; [ERROR] [DAGNode “source”] Object type “ShapeMatchingForceField” creation Failed; [ERROR] [SceneLoaderXML] Node initialization failed. I didn’t find any information about this SofaMiscForceFieldDev plugin. Can anyone give me some tips about that?. Thanks in advance!,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/307
https://github.com/sofa-framework/sofa/issues/307:35,Modifiability,plugin,plugin,35,I built Sofa with the registration plugin successfully. When I had a test with ICPRegistration_ShapeMatching.scn in .\applications\plugins\Registration\examples. It reminded these errors:. [INFO] [SofaPython] Added ‘F:/SOFA16.12/sofaproject/sofasrc/applications/plugins/image/python’ to sys.path; [INFO] [SofaPython] Added ‘F:/SOFA16.12/sofaproject/sofasrc/applications/plugins/Registration/python’ to sys.path; [INFO] [SofaPython] Added ‘F:/SOFA16.12/sofaproject/sofasrc/applications/plugins/SofaPython/python’ to sys.path; [INFO] [PluginManager] Loaded plugin: F:/SOFA16.12/sofaproject/sofabuild/bin/Release/SofaPython.dll. [INFO] [PluginManager] Loaded plugin: F:/SOFA16.12/sofaproject/sofabuild/bin/Release/Registration.dll; [ERROR] [RequiredPlugin] Plugin not found: “SofaMiscForceFieldDev”; [ERROR] [DAGNode “source”] Object type “RotationFinder” creation Failed; [ERROR] [DAGNode “source”] Object type “ShapeMatchingForceField” creation Failed; [ERROR] [SceneLoaderXML] Node initialization failed. I didn’t find any information about this SofaMiscForceFieldDev plugin. Can anyone give me some tips about that?. Thanks in advance!,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/307
https://github.com/sofa-framework/sofa/issues/307:131,Modifiability,plugin,plugins,131,I built Sofa with the registration plugin successfully. When I had a test with ICPRegistration_ShapeMatching.scn in .\applications\plugins\Registration\examples. It reminded these errors:. [INFO] [SofaPython] Added ‘F:/SOFA16.12/sofaproject/sofasrc/applications/plugins/image/python’ to sys.path; [INFO] [SofaPython] Added ‘F:/SOFA16.12/sofaproject/sofasrc/applications/plugins/Registration/python’ to sys.path; [INFO] [SofaPython] Added ‘F:/SOFA16.12/sofaproject/sofasrc/applications/plugins/SofaPython/python’ to sys.path; [INFO] [PluginManager] Loaded plugin: F:/SOFA16.12/sofaproject/sofabuild/bin/Release/SofaPython.dll. [INFO] [PluginManager] Loaded plugin: F:/SOFA16.12/sofaproject/sofabuild/bin/Release/Registration.dll; [ERROR] [RequiredPlugin] Plugin not found: “SofaMiscForceFieldDev”; [ERROR] [DAGNode “source”] Object type “RotationFinder” creation Failed; [ERROR] [DAGNode “source”] Object type “ShapeMatchingForceField” creation Failed; [ERROR] [SceneLoaderXML] Node initialization failed. I didn’t find any information about this SofaMiscForceFieldDev plugin. Can anyone give me some tips about that?. Thanks in advance!,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/307
https://github.com/sofa-framework/sofa/issues/307:262,Modifiability,plugin,plugins,262,I built Sofa with the registration plugin successfully. When I had a test with ICPRegistration_ShapeMatching.scn in .\applications\plugins\Registration\examples. It reminded these errors:. [INFO] [SofaPython] Added ‘F:/SOFA16.12/sofaproject/sofasrc/applications/plugins/image/python’ to sys.path; [INFO] [SofaPython] Added ‘F:/SOFA16.12/sofaproject/sofasrc/applications/plugins/Registration/python’ to sys.path; [INFO] [SofaPython] Added ‘F:/SOFA16.12/sofaproject/sofasrc/applications/plugins/SofaPython/python’ to sys.path; [INFO] [PluginManager] Loaded plugin: F:/SOFA16.12/sofaproject/sofabuild/bin/Release/SofaPython.dll. [INFO] [PluginManager] Loaded plugin: F:/SOFA16.12/sofaproject/sofabuild/bin/Release/Registration.dll; [ERROR] [RequiredPlugin] Plugin not found: “SofaMiscForceFieldDev”; [ERROR] [DAGNode “source”] Object type “RotationFinder” creation Failed; [ERROR] [DAGNode “source”] Object type “ShapeMatchingForceField” creation Failed; [ERROR] [SceneLoaderXML] Node initialization failed. I didn’t find any information about this SofaMiscForceFieldDev plugin. Can anyone give me some tips about that?. Thanks in advance!,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/307
https://github.com/sofa-framework/sofa/issues/307:370,Modifiability,plugin,plugins,370,I built Sofa with the registration plugin successfully. When I had a test with ICPRegistration_ShapeMatching.scn in .\applications\plugins\Registration\examples. It reminded these errors:. [INFO] [SofaPython] Added ‘F:/SOFA16.12/sofaproject/sofasrc/applications/plugins/image/python’ to sys.path; [INFO] [SofaPython] Added ‘F:/SOFA16.12/sofaproject/sofasrc/applications/plugins/Registration/python’ to sys.path; [INFO] [SofaPython] Added ‘F:/SOFA16.12/sofaproject/sofasrc/applications/plugins/SofaPython/python’ to sys.path; [INFO] [PluginManager] Loaded plugin: F:/SOFA16.12/sofaproject/sofabuild/bin/Release/SofaPython.dll. [INFO] [PluginManager] Loaded plugin: F:/SOFA16.12/sofaproject/sofabuild/bin/Release/Registration.dll; [ERROR] [RequiredPlugin] Plugin not found: “SofaMiscForceFieldDev”; [ERROR] [DAGNode “source”] Object type “RotationFinder” creation Failed; [ERROR] [DAGNode “source”] Object type “ShapeMatchingForceField” creation Failed; [ERROR] [SceneLoaderXML] Node initialization failed. I didn’t find any information about this SofaMiscForceFieldDev plugin. Can anyone give me some tips about that?. Thanks in advance!,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/307
https://github.com/sofa-framework/sofa/issues/307:485,Modifiability,plugin,plugins,485,I built Sofa with the registration plugin successfully. When I had a test with ICPRegistration_ShapeMatching.scn in .\applications\plugins\Registration\examples. It reminded these errors:. [INFO] [SofaPython] Added ‘F:/SOFA16.12/sofaproject/sofasrc/applications/plugins/image/python’ to sys.path; [INFO] [SofaPython] Added ‘F:/SOFA16.12/sofaproject/sofasrc/applications/plugins/Registration/python’ to sys.path; [INFO] [SofaPython] Added ‘F:/SOFA16.12/sofaproject/sofasrc/applications/plugins/SofaPython/python’ to sys.path; [INFO] [PluginManager] Loaded plugin: F:/SOFA16.12/sofaproject/sofabuild/bin/Release/SofaPython.dll. [INFO] [PluginManager] Loaded plugin: F:/SOFA16.12/sofaproject/sofabuild/bin/Release/Registration.dll; [ERROR] [RequiredPlugin] Plugin not found: “SofaMiscForceFieldDev”; [ERROR] [DAGNode “source”] Object type “RotationFinder” creation Failed; [ERROR] [DAGNode “source”] Object type “ShapeMatchingForceField” creation Failed; [ERROR] [SceneLoaderXML] Node initialization failed. I didn’t find any information about this SofaMiscForceFieldDev plugin. Can anyone give me some tips about that?. Thanks in advance!,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/307
https://github.com/sofa-framework/sofa/issues/307:533,Modifiability,Plugin,PluginManager,533,I built Sofa with the registration plugin successfully. When I had a test with ICPRegistration_ShapeMatching.scn in .\applications\plugins\Registration\examples. It reminded these errors:. [INFO] [SofaPython] Added ‘F:/SOFA16.12/sofaproject/sofasrc/applications/plugins/image/python’ to sys.path; [INFO] [SofaPython] Added ‘F:/SOFA16.12/sofaproject/sofasrc/applications/plugins/Registration/python’ to sys.path; [INFO] [SofaPython] Added ‘F:/SOFA16.12/sofaproject/sofasrc/applications/plugins/SofaPython/python’ to sys.path; [INFO] [PluginManager] Loaded plugin: F:/SOFA16.12/sofaproject/sofabuild/bin/Release/SofaPython.dll. [INFO] [PluginManager] Loaded plugin: F:/SOFA16.12/sofaproject/sofabuild/bin/Release/Registration.dll; [ERROR] [RequiredPlugin] Plugin not found: “SofaMiscForceFieldDev”; [ERROR] [DAGNode “source”] Object type “RotationFinder” creation Failed; [ERROR] [DAGNode “source”] Object type “ShapeMatchingForceField” creation Failed; [ERROR] [SceneLoaderXML] Node initialization failed. I didn’t find any information about this SofaMiscForceFieldDev plugin. Can anyone give me some tips about that?. Thanks in advance!,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/307
https://github.com/sofa-framework/sofa/issues/307:555,Modifiability,plugin,plugin,555,I built Sofa with the registration plugin successfully. When I had a test with ICPRegistration_ShapeMatching.scn in .\applications\plugins\Registration\examples. It reminded these errors:. [INFO] [SofaPython] Added ‘F:/SOFA16.12/sofaproject/sofasrc/applications/plugins/image/python’ to sys.path; [INFO] [SofaPython] Added ‘F:/SOFA16.12/sofaproject/sofasrc/applications/plugins/Registration/python’ to sys.path; [INFO] [SofaPython] Added ‘F:/SOFA16.12/sofaproject/sofasrc/applications/plugins/SofaPython/python’ to sys.path; [INFO] [PluginManager] Loaded plugin: F:/SOFA16.12/sofaproject/sofabuild/bin/Release/SofaPython.dll. [INFO] [PluginManager] Loaded plugin: F:/SOFA16.12/sofaproject/sofabuild/bin/Release/Registration.dll; [ERROR] [RequiredPlugin] Plugin not found: “SofaMiscForceFieldDev”; [ERROR] [DAGNode “source”] Object type “RotationFinder” creation Failed; [ERROR] [DAGNode “source”] Object type “ShapeMatchingForceField” creation Failed; [ERROR] [SceneLoaderXML] Node initialization failed. I didn’t find any information about this SofaMiscForceFieldDev plugin. Can anyone give me some tips about that?. Thanks in advance!,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/307
https://github.com/sofa-framework/sofa/issues/307:634,Modifiability,Plugin,PluginManager,634,I built Sofa with the registration plugin successfully. When I had a test with ICPRegistration_ShapeMatching.scn in .\applications\plugins\Registration\examples. It reminded these errors:. [INFO] [SofaPython] Added ‘F:/SOFA16.12/sofaproject/sofasrc/applications/plugins/image/python’ to sys.path; [INFO] [SofaPython] Added ‘F:/SOFA16.12/sofaproject/sofasrc/applications/plugins/Registration/python’ to sys.path; [INFO] [SofaPython] Added ‘F:/SOFA16.12/sofaproject/sofasrc/applications/plugins/SofaPython/python’ to sys.path; [INFO] [PluginManager] Loaded plugin: F:/SOFA16.12/sofaproject/sofabuild/bin/Release/SofaPython.dll. [INFO] [PluginManager] Loaded plugin: F:/SOFA16.12/sofaproject/sofabuild/bin/Release/Registration.dll; [ERROR] [RequiredPlugin] Plugin not found: “SofaMiscForceFieldDev”; [ERROR] [DAGNode “source”] Object type “RotationFinder” creation Failed; [ERROR] [DAGNode “source”] Object type “ShapeMatchingForceField” creation Failed; [ERROR] [SceneLoaderXML] Node initialization failed. I didn’t find any information about this SofaMiscForceFieldDev plugin. Can anyone give me some tips about that?. Thanks in advance!,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/307
https://github.com/sofa-framework/sofa/issues/307:656,Modifiability,plugin,plugin,656,I built Sofa with the registration plugin successfully. When I had a test with ICPRegistration_ShapeMatching.scn in .\applications\plugins\Registration\examples. It reminded these errors:. [INFO] [SofaPython] Added ‘F:/SOFA16.12/sofaproject/sofasrc/applications/plugins/image/python’ to sys.path; [INFO] [SofaPython] Added ‘F:/SOFA16.12/sofaproject/sofasrc/applications/plugins/Registration/python’ to sys.path; [INFO] [SofaPython] Added ‘F:/SOFA16.12/sofaproject/sofasrc/applications/plugins/SofaPython/python’ to sys.path; [INFO] [PluginManager] Loaded plugin: F:/SOFA16.12/sofaproject/sofabuild/bin/Release/SofaPython.dll. [INFO] [PluginManager] Loaded plugin: F:/SOFA16.12/sofaproject/sofabuild/bin/Release/Registration.dll; [ERROR] [RequiredPlugin] Plugin not found: “SofaMiscForceFieldDev”; [ERROR] [DAGNode “source”] Object type “RotationFinder” creation Failed; [ERROR] [DAGNode “source”] Object type “ShapeMatchingForceField” creation Failed; [ERROR] [SceneLoaderXML] Node initialization failed. I didn’t find any information about this SofaMiscForceFieldDev plugin. Can anyone give me some tips about that?. Thanks in advance!,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/307
https://github.com/sofa-framework/sofa/issues/307:754,Modifiability,Plugin,Plugin,754,I built Sofa with the registration plugin successfully. When I had a test with ICPRegistration_ShapeMatching.scn in .\applications\plugins\Registration\examples. It reminded these errors:. [INFO] [SofaPython] Added ‘F:/SOFA16.12/sofaproject/sofasrc/applications/plugins/image/python’ to sys.path; [INFO] [SofaPython] Added ‘F:/SOFA16.12/sofaproject/sofasrc/applications/plugins/Registration/python’ to sys.path; [INFO] [SofaPython] Added ‘F:/SOFA16.12/sofaproject/sofasrc/applications/plugins/SofaPython/python’ to sys.path; [INFO] [PluginManager] Loaded plugin: F:/SOFA16.12/sofaproject/sofabuild/bin/Release/SofaPython.dll. [INFO] [PluginManager] Loaded plugin: F:/SOFA16.12/sofaproject/sofabuild/bin/Release/Registration.dll; [ERROR] [RequiredPlugin] Plugin not found: “SofaMiscForceFieldDev”; [ERROR] [DAGNode “source”] Object type “RotationFinder” creation Failed; [ERROR] [DAGNode “source”] Object type “ShapeMatchingForceField” creation Failed; [ERROR] [SceneLoaderXML] Node initialization failed. I didn’t find any information about this SofaMiscForceFieldDev plugin. Can anyone give me some tips about that?. Thanks in advance!,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/307
https://github.com/sofa-framework/sofa/issues/307:1068,Modifiability,plugin,plugin,1068,I built Sofa with the registration plugin successfully. When I had a test with ICPRegistration_ShapeMatching.scn in .\applications\plugins\Registration\examples. It reminded these errors:. [INFO] [SofaPython] Added ‘F:/SOFA16.12/sofaproject/sofasrc/applications/plugins/image/python’ to sys.path; [INFO] [SofaPython] Added ‘F:/SOFA16.12/sofaproject/sofasrc/applications/plugins/Registration/python’ to sys.path; [INFO] [SofaPython] Added ‘F:/SOFA16.12/sofaproject/sofasrc/applications/plugins/SofaPython/python’ to sys.path; [INFO] [PluginManager] Loaded plugin: F:/SOFA16.12/sofaproject/sofabuild/bin/Release/SofaPython.dll. [INFO] [PluginManager] Loaded plugin: F:/SOFA16.12/sofaproject/sofabuild/bin/Release/Registration.dll; [ERROR] [RequiredPlugin] Plugin not found: “SofaMiscForceFieldDev”; [ERROR] [DAGNode “source”] Object type “RotationFinder” creation Failed; [ERROR] [DAGNode “source”] Object type “ShapeMatchingForceField” creation Failed; [ERROR] [SceneLoaderXML] Node initialization failed. I didn’t find any information about this SofaMiscForceFieldDev plugin. Can anyone give me some tips about that?. Thanks in advance!,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/307
https://github.com/sofa-framework/sofa/issues/307:548,Performance,Load,Loaded,548,I built Sofa with the registration plugin successfully. When I had a test with ICPRegistration_ShapeMatching.scn in .\applications\plugins\Registration\examples. It reminded these errors:. [INFO] [SofaPython] Added ‘F:/SOFA16.12/sofaproject/sofasrc/applications/plugins/image/python’ to sys.path; [INFO] [SofaPython] Added ‘F:/SOFA16.12/sofaproject/sofasrc/applications/plugins/Registration/python’ to sys.path; [INFO] [SofaPython] Added ‘F:/SOFA16.12/sofaproject/sofasrc/applications/plugins/SofaPython/python’ to sys.path; [INFO] [PluginManager] Loaded plugin: F:/SOFA16.12/sofaproject/sofabuild/bin/Release/SofaPython.dll. [INFO] [PluginManager] Loaded plugin: F:/SOFA16.12/sofaproject/sofabuild/bin/Release/Registration.dll; [ERROR] [RequiredPlugin] Plugin not found: “SofaMiscForceFieldDev”; [ERROR] [DAGNode “source”] Object type “RotationFinder” creation Failed; [ERROR] [DAGNode “source”] Object type “ShapeMatchingForceField” creation Failed; [ERROR] [SceneLoaderXML] Node initialization failed. I didn’t find any information about this SofaMiscForceFieldDev plugin. Can anyone give me some tips about that?. Thanks in advance!,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/307
https://github.com/sofa-framework/sofa/issues/307:649,Performance,Load,Loaded,649,I built Sofa with the registration plugin successfully. When I had a test with ICPRegistration_ShapeMatching.scn in .\applications\plugins\Registration\examples. It reminded these errors:. [INFO] [SofaPython] Added ‘F:/SOFA16.12/sofaproject/sofasrc/applications/plugins/image/python’ to sys.path; [INFO] [SofaPython] Added ‘F:/SOFA16.12/sofaproject/sofasrc/applications/plugins/Registration/python’ to sys.path; [INFO] [SofaPython] Added ‘F:/SOFA16.12/sofaproject/sofasrc/applications/plugins/SofaPython/python’ to sys.path; [INFO] [PluginManager] Loaded plugin: F:/SOFA16.12/sofaproject/sofabuild/bin/Release/SofaPython.dll. [INFO] [PluginManager] Loaded plugin: F:/SOFA16.12/sofaproject/sofabuild/bin/Release/Registration.dll; [ERROR] [RequiredPlugin] Plugin not found: “SofaMiscForceFieldDev”; [ERROR] [DAGNode “source”] Object type “RotationFinder” creation Failed; [ERROR] [DAGNode “source”] Object type “ShapeMatchingForceField” creation Failed; [ERROR] [SceneLoaderXML] Node initialization failed. I didn’t find any information about this SofaMiscForceFieldDev plugin. Can anyone give me some tips about that?. Thanks in advance!,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/307
https://github.com/sofa-framework/sofa/issues/307:69,Testability,test,test,69,I built Sofa with the registration plugin successfully. When I had a test with ICPRegistration_ShapeMatching.scn in .\applications\plugins\Registration\examples. It reminded these errors:. [INFO] [SofaPython] Added ‘F:/SOFA16.12/sofaproject/sofasrc/applications/plugins/image/python’ to sys.path; [INFO] [SofaPython] Added ‘F:/SOFA16.12/sofaproject/sofasrc/applications/plugins/Registration/python’ to sys.path; [INFO] [SofaPython] Added ‘F:/SOFA16.12/sofaproject/sofasrc/applications/plugins/SofaPython/python’ to sys.path; [INFO] [PluginManager] Loaded plugin: F:/SOFA16.12/sofaproject/sofabuild/bin/Release/SofaPython.dll. [INFO] [PluginManager] Loaded plugin: F:/SOFA16.12/sofaproject/sofabuild/bin/Release/Registration.dll; [ERROR] [RequiredPlugin] Plugin not found: “SofaMiscForceFieldDev”; [ERROR] [DAGNode “source”] Object type “RotationFinder” creation Failed; [ERROR] [DAGNode “source”] Object type “ShapeMatchingForceField” creation Failed; [ERROR] [SceneLoaderXML] Node initialization failed. I didn’t find any information about this SofaMiscForceFieldDev plugin. Can anyone give me some tips about that?. Thanks in advance!,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/307
https://github.com/sofa-framework/sofa/pull/309:337,Availability,failure,failures,337,FIX allows to extend VTKExporter in a plugin (for quadratic meshes for example). ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/309
https://github.com/sofa-framework/sofa/pull/309:387,Availability,failure,failures,387,FIX allows to extend VTKExporter in a plugin (for quadratic meshes for example). ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/309
https://github.com/sofa-framework/sofa/pull/309:180,Integrability,message,message,180,FIX allows to extend VTKExporter in a plugin (for quadratic meshes for example). ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/309
https://github.com/sofa-framework/sofa/pull/309:14,Modifiability,extend,extend,14,FIX allows to extend VTKExporter in a plugin (for quadratic meshes for example). ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/309
https://github.com/sofa-framework/sofa/pull/309:38,Modifiability,plugin,plugin,38,FIX allows to extend VTKExporter in a plugin (for quadratic meshes for example). ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/309
https://github.com/sofa-framework/sofa/pull/309:332,Testability,test,test,332,FIX allows to extend VTKExporter in a plugin (for quadratic meshes for example). ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/309
https://github.com/sofa-framework/sofa/pull/309:382,Testability,test,test,382,FIX allows to extend VTKExporter in a plugin (for quadratic meshes for example). ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/309
https://github.com/sofa-framework/sofa/pull/310:294,Availability,failure,failures,294,"xml header, solver iterations, etc... ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/310
https://github.com/sofa-framework/sofa/pull/310:344,Availability,failure,failures,344,"xml header, solver iterations, etc... ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/310
https://github.com/sofa-framework/sofa/pull/310:137,Integrability,message,message,137,"xml header, solver iterations, etc... ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/310
https://github.com/sofa-framework/sofa/pull/310:289,Testability,test,test,289,"xml header, solver iterations, etc... ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/310
https://github.com/sofa-framework/sofa/pull/310:339,Testability,test,test,339,"xml header, solver iterations, etc... ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/310
https://github.com/sofa-framework/sofa/pull/311:402,Availability,failure,failures,402,Tested on classical and retina screens on os x system and classical screen on linux system. I do not know how to create a unit test for this fix. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/311
https://github.com/sofa-framework/sofa/pull/311:452,Availability,failure,failures,452,Tested on classical and retina screens on os x system and classical screen on linux system. I do not know how to create a unit test for this fix. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/311
https://github.com/sofa-framework/sofa/pull/311:245,Integrability,message,message,245,Tested on classical and retina screens on os x system and classical screen on linux system. I do not know how to create a unit test for this fix. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/311
https://github.com/sofa-framework/sofa/pull/311:0,Testability,Test,Tested,0,Tested on classical and retina screens on os x system and classical screen on linux system. I do not know how to create a unit test for this fix. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/311
https://github.com/sofa-framework/sofa/pull/311:127,Testability,test,test,127,Tested on classical and retina screens on os x system and classical screen on linux system. I do not know how to create a unit test for this fix. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/311
https://github.com/sofa-framework/sofa/pull/311:397,Testability,test,test,397,Tested on classical and retina screens on os x system and classical screen on linux system. I do not know how to create a unit test for this fix. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/311
https://github.com/sofa-framework/sofa/pull/311:447,Testability,test,test,447,Tested on classical and retina screens on os x system and classical screen on linux system. I do not know how to create a unit test for this fix. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/311
https://github.com/sofa-framework/sofa/pull/312:710,Availability,failure,failures,710,"Hi,; with @IPeterlik we noticed not so long ago that the pointers to the velocity, forces and positions of the mechanical object linked to the Monitor were not pointing at the same place before and after the call to init().; To show the issue I made this test scene for the monitor, but now the problem doesn't show up anymore. So it either has been corrected or the problem came from somewhere else. Anyway the test is coded now, so here's a PR for it. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/312
https://github.com/sofa-framework/sofa/pull/312:760,Availability,failure,failures,760,"Hi,; with @IPeterlik we noticed not so long ago that the pointers to the velocity, forces and positions of the mechanical object linked to the Monitor were not pointing at the same place before and after the call to init().; To show the issue I made this test scene for the monitor, but now the problem doesn't show up anymore. So it either has been corrected or the problem came from somewhere else. Anyway the test is coded now, so here's a PR for it. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/312
https://github.com/sofa-framework/sofa/pull/312:143,Energy Efficiency,Monitor,Monitor,143,"Hi,; with @IPeterlik we noticed not so long ago that the pointers to the velocity, forces and positions of the mechanical object linked to the Monitor were not pointing at the same place before and after the call to init().; To show the issue I made this test scene for the monitor, but now the problem doesn't show up anymore. So it either has been corrected or the problem came from somewhere else. Anyway the test is coded now, so here's a PR for it. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/312
https://github.com/sofa-framework/sofa/pull/312:274,Energy Efficiency,monitor,monitor,274,"Hi,; with @IPeterlik we noticed not so long ago that the pointers to the velocity, forces and positions of the mechanical object linked to the Monitor were not pointing at the same place before and after the call to init().; To show the issue I made this test scene for the monitor, but now the problem doesn't show up anymore. So it either has been corrected or the problem came from somewhere else. Anyway the test is coded now, so here's a PR for it. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/312
https://github.com/sofa-framework/sofa/pull/312:553,Integrability,message,message,553,"Hi,; with @IPeterlik we noticed not so long ago that the pointers to the velocity, forces and positions of the mechanical object linked to the Monitor were not pointing at the same place before and after the call to init().; To show the issue I made this test scene for the monitor, but now the problem doesn't show up anymore. So it either has been corrected or the problem came from somewhere else. Anyway the test is coded now, so here's a PR for it. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/312
https://github.com/sofa-framework/sofa/pull/312:255,Testability,test,test,255,"Hi,; with @IPeterlik we noticed not so long ago that the pointers to the velocity, forces and positions of the mechanical object linked to the Monitor were not pointing at the same place before and after the call to init().; To show the issue I made this test scene for the monitor, but now the problem doesn't show up anymore. So it either has been corrected or the problem came from somewhere else. Anyway the test is coded now, so here's a PR for it. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/312
https://github.com/sofa-framework/sofa/pull/312:412,Testability,test,test,412,"Hi,; with @IPeterlik we noticed not so long ago that the pointers to the velocity, forces and positions of the mechanical object linked to the Monitor were not pointing at the same place before and after the call to init().; To show the issue I made this test scene for the monitor, but now the problem doesn't show up anymore. So it either has been corrected or the problem came from somewhere else. Anyway the test is coded now, so here's a PR for it. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/312
https://github.com/sofa-framework/sofa/pull/312:705,Testability,test,test,705,"Hi,; with @IPeterlik we noticed not so long ago that the pointers to the velocity, forces and positions of the mechanical object linked to the Monitor were not pointing at the same place before and after the call to init().; To show the issue I made this test scene for the monitor, but now the problem doesn't show up anymore. So it either has been corrected or the problem came from somewhere else. Anyway the test is coded now, so here's a PR for it. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/312
https://github.com/sofa-framework/sofa/pull/312:755,Testability,test,test,755,"Hi,; with @IPeterlik we noticed not so long ago that the pointers to the velocity, forces and positions of the mechanical object linked to the Monitor were not pointing at the same place before and after the call to init().; To show the issue I made this test scene for the monitor, but now the problem doesn't show up anymore. So it either has been corrected or the problem came from somewhere else. Anyway the test is coded now, so here's a PR for it. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/312
https://github.com/sofa-framework/sofa/pull/313:898,Availability,failure,failures,898,"### Problem: Sofa crash when an Unicode string is used.; Here an example scene:. ``` python; # coding=utf-8; import Sofa. def createScene(node):; node.createObject('MechanicalObject', name=u""Éœùæ""); ```; With the current behavior, an Unicode string used as data is interpreted as a sequence. This causes some problems with path to files for example. ### Changelog. * In `Binding_BaseContext::pythonToSofaDataString:`, add unicode to string convertion and a warning message when PySequence_Check is true but the given PyObject is not a list.; * In `Binding_BaseData::SetDataValuePython` an unicode to string convertion too.; * And add a test. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/313
https://github.com/sofa-framework/sofa/pull/313:948,Availability,failure,failures,948,"### Problem: Sofa crash when an Unicode string is used.; Here an example scene:. ``` python; # coding=utf-8; import Sofa. def createScene(node):; node.createObject('MechanicalObject', name=u""Éœùæ""); ```; With the current behavior, an Unicode string used as data is interpreted as a sequence. This causes some problems with path to files for example. ### Changelog. * In `Binding_BaseContext::pythonToSofaDataString:`, add unicode to string convertion and a warning message when PySequence_Check is true but the given PyObject is not a list.; * In `Binding_BaseData::SetDataValuePython` an unicode to string convertion too.; * And add a test. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/313
https://github.com/sofa-framework/sofa/pull/313:465,Integrability,message,message,465,"### Problem: Sofa crash when an Unicode string is used.; Here an example scene:. ``` python; # coding=utf-8; import Sofa. def createScene(node):; node.createObject('MechanicalObject', name=u""Éœùæ""); ```; With the current behavior, an Unicode string used as data is interpreted as a sequence. This causes some problems with path to files for example. ### Changelog. * In `Binding_BaseContext::pythonToSofaDataString:`, add unicode to string convertion and a warning message when PySequence_Check is true but the given PyObject is not a list.; * In `Binding_BaseData::SetDataValuePython` an unicode to string convertion too.; * And add a test. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/313
https://github.com/sofa-framework/sofa/pull/313:741,Integrability,message,message,741,"### Problem: Sofa crash when an Unicode string is used.; Here an example scene:. ``` python; # coding=utf-8; import Sofa. def createScene(node):; node.createObject('MechanicalObject', name=u""Éœùæ""); ```; With the current behavior, an Unicode string used as data is interpreted as a sequence. This causes some problems with path to files for example. ### Changelog. * In `Binding_BaseContext::pythonToSofaDataString:`, add unicode to string convertion and a warning message when PySequence_Check is true but the given PyObject is not a list.; * In `Binding_BaseData::SetDataValuePython` an unicode to string convertion too.; * And add a test. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/313
https://github.com/sofa-framework/sofa/pull/313:636,Testability,test,test,636,"### Problem: Sofa crash when an Unicode string is used.; Here an example scene:. ``` python; # coding=utf-8; import Sofa. def createScene(node):; node.createObject('MechanicalObject', name=u""Éœùæ""); ```; With the current behavior, an Unicode string used as data is interpreted as a sequence. This causes some problems with path to files for example. ### Changelog. * In `Binding_BaseContext::pythonToSofaDataString:`, add unicode to string convertion and a warning message when PySequence_Check is true but the given PyObject is not a list.; * In `Binding_BaseData::SetDataValuePython` an unicode to string convertion too.; * And add a test. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/313
https://github.com/sofa-framework/sofa/pull/313:893,Testability,test,test,893,"### Problem: Sofa crash when an Unicode string is used.; Here an example scene:. ``` python; # coding=utf-8; import Sofa. def createScene(node):; node.createObject('MechanicalObject', name=u""Éœùæ""); ```; With the current behavior, an Unicode string used as data is interpreted as a sequence. This causes some problems with path to files for example. ### Changelog. * In `Binding_BaseContext::pythonToSofaDataString:`, add unicode to string convertion and a warning message when PySequence_Check is true but the given PyObject is not a list.; * In `Binding_BaseData::SetDataValuePython` an unicode to string convertion too.; * And add a test. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/313
https://github.com/sofa-framework/sofa/pull/313:943,Testability,test,test,943,"### Problem: Sofa crash when an Unicode string is used.; Here an example scene:. ``` python; # coding=utf-8; import Sofa. def createScene(node):; node.createObject('MechanicalObject', name=u""Éœùæ""); ```; With the current behavior, an Unicode string used as data is interpreted as a sequence. This causes some problems with path to files for example. ### Changelog. * In `Binding_BaseContext::pythonToSofaDataString:`, add unicode to string convertion and a warning message when PySequence_Check is true but the given PyObject is not a list.; * In `Binding_BaseData::SetDataValuePython` an unicode to string convertion too.; * And add a test. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/313
https://github.com/sofa-framework/sofa/pull/314:860,Availability,failure,failures,860,"Currently when object are unable to be created there is no filename/line information on where the problem come from. . In this PR I implemented the missing <<operator in messaging.h to report those line number. ; Now you can write: ; ```cpp; msg_info() << SOFA_FILE_INFO_COPIED_FROM(""myPythonFile.py"", 4) << ""blah balh"" ; ```; To have the file name & line number associated in the message emitting information. If you don't the emitting information will be the source code file&line location. . If updated the xml load to take this feature into account. ; The python loader is updated in the PR #304 . ; ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/314
https://github.com/sofa-framework/sofa/pull/314:910,Availability,failure,failures,910,"Currently when object are unable to be created there is no filename/line information on where the problem come from. . In this PR I implemented the missing <<operator in messaging.h to report those line number. ; Now you can write: ; ```cpp; msg_info() << SOFA_FILE_INFO_COPIED_FROM(""myPythonFile.py"", 4) << ""blah balh"" ; ```; To have the file name & line number associated in the message emitting information. If you don't the emitting information will be the source code file&line location. . If updated the xml load to take this feature into account. ; The python loader is updated in the PR #304 . ; ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/314
https://github.com/sofa-framework/sofa/pull/314:498,Deployability,update,updated,498,"Currently when object are unable to be created there is no filename/line information on where the problem come from. . In this PR I implemented the missing <<operator in messaging.h to report those line number. ; Now you can write: ; ```cpp; msg_info() << SOFA_FILE_INFO_COPIED_FROM(""myPythonFile.py"", 4) << ""blah balh"" ; ```; To have the file name & line number associated in the message emitting information. If you don't the emitting information will be the source code file&line location. . If updated the xml load to take this feature into account. ; The python loader is updated in the PR #304 . ; ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/314
https://github.com/sofa-framework/sofa/pull/314:577,Deployability,update,updated,577,"Currently when object are unable to be created there is no filename/line information on where the problem come from. . In this PR I implemented the missing <<operator in messaging.h to report those line number. ; Now you can write: ; ```cpp; msg_info() << SOFA_FILE_INFO_COPIED_FROM(""myPythonFile.py"", 4) << ""blah balh"" ; ```; To have the file name & line number associated in the message emitting information. If you don't the emitting information will be the source code file&line location. . If updated the xml load to take this feature into account. ; The python loader is updated in the PR #304 . ; ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/314
https://github.com/sofa-framework/sofa/pull/314:381,Integrability,message,message,381,"Currently when object are unable to be created there is no filename/line information on where the problem come from. . In this PR I implemented the missing <<operator in messaging.h to report those line number. ; Now you can write: ; ```cpp; msg_info() << SOFA_FILE_INFO_COPIED_FROM(""myPythonFile.py"", 4) << ""blah balh"" ; ```; To have the file name & line number associated in the message emitting information. If you don't the emitting information will be the source code file&line location. . If updated the xml load to take this feature into account. ; The python loader is updated in the PR #304 . ; ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/314
https://github.com/sofa-framework/sofa/pull/314:703,Integrability,message,message,703,"Currently when object are unable to be created there is no filename/line information on where the problem come from. . In this PR I implemented the missing <<operator in messaging.h to report those line number. ; Now you can write: ; ```cpp; msg_info() << SOFA_FILE_INFO_COPIED_FROM(""myPythonFile.py"", 4) << ""blah balh"" ; ```; To have the file name & line number associated in the message emitting information. If you don't the emitting information will be the source code file&line location. . If updated the xml load to take this feature into account. ; The python loader is updated in the PR #304 . ; ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/314
https://github.com/sofa-framework/sofa/pull/314:514,Performance,load,load,514,"Currently when object are unable to be created there is no filename/line information on where the problem come from. . In this PR I implemented the missing <<operator in messaging.h to report those line number. ; Now you can write: ; ```cpp; msg_info() << SOFA_FILE_INFO_COPIED_FROM(""myPythonFile.py"", 4) << ""blah balh"" ; ```; To have the file name & line number associated in the message emitting information. If you don't the emitting information will be the source code file&line location. . If updated the xml load to take this feature into account. ; The python loader is updated in the PR #304 . ; ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/314
https://github.com/sofa-framework/sofa/pull/314:567,Performance,load,loader,567,"Currently when object are unable to be created there is no filename/line information on where the problem come from. . In this PR I implemented the missing <<operator in messaging.h to report those line number. ; Now you can write: ; ```cpp; msg_info() << SOFA_FILE_INFO_COPIED_FROM(""myPythonFile.py"", 4) << ""blah balh"" ; ```; To have the file name & line number associated in the message emitting information. If you don't the emitting information will be the source code file&line location. . If updated the xml load to take this feature into account. ; The python loader is updated in the PR #304 . ; ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/314
https://github.com/sofa-framework/sofa/pull/314:855,Testability,test,test,855,"Currently when object are unable to be created there is no filename/line information on where the problem come from. . In this PR I implemented the missing <<operator in messaging.h to report those line number. ; Now you can write: ; ```cpp; msg_info() << SOFA_FILE_INFO_COPIED_FROM(""myPythonFile.py"", 4) << ""blah balh"" ; ```; To have the file name & line number associated in the message emitting information. If you don't the emitting information will be the source code file&line location. . If updated the xml load to take this feature into account. ; The python loader is updated in the PR #304 . ; ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/314
https://github.com/sofa-framework/sofa/pull/314:905,Testability,test,test,905,"Currently when object are unable to be created there is no filename/line information on where the problem come from. . In this PR I implemented the missing <<operator in messaging.h to report those line number. ; Now you can write: ; ```cpp; msg_info() << SOFA_FILE_INFO_COPIED_FROM(""myPythonFile.py"", 4) << ""blah balh"" ; ```; To have the file name & line number associated in the message emitting information. If you don't the emitting information will be the source code file&line location. . If updated the xml load to take this feature into account. ; The python loader is updated in the PR #304 . ; ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/314
https://github.com/sofa-framework/sofa/pull/315:629,Availability,failure,failures,629,"In RestShapeSpringsForceField the rest_shape is currently provided using a raw pointer which is really Bad. ; In this PR is change that to use SingleLink instead. . The PR imply a change by which the syntax of the external_rest_shape is provided. Adding an ""@"" as in the test examples/Components/forcefield/RestShapeSpringsForceField2.scn make it work. Editting: Damien. ; ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/315
https://github.com/sofa-framework/sofa/pull/315:679,Availability,failure,failures,679,"In RestShapeSpringsForceField the rest_shape is currently provided using a raw pointer which is really Bad. ; In this PR is change that to use SingleLink instead. . The PR imply a change by which the syntax of the external_rest_shape is provided. Adding an ""@"" as in the test examples/Components/forcefield/RestShapeSpringsForceField2.scn make it work. Editting: Damien. ; ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/315
https://github.com/sofa-framework/sofa/pull/315:472,Integrability,message,message,472,"In RestShapeSpringsForceField the rest_shape is currently provided using a raw pointer which is really Bad. ; In this PR is change that to use SingleLink instead. . The PR imply a change by which the syntax of the external_rest_shape is provided. Adding an ""@"" as in the test examples/Components/forcefield/RestShapeSpringsForceField2.scn make it work. Editting: Damien. ; ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/315
https://github.com/sofa-framework/sofa/pull/315:271,Testability,test,test,271,"In RestShapeSpringsForceField the rest_shape is currently provided using a raw pointer which is really Bad. ; In this PR is change that to use SingleLink instead. . The PR imply a change by which the syntax of the external_rest_shape is provided. Adding an ""@"" as in the test examples/Components/forcefield/RestShapeSpringsForceField2.scn make it work. Editting: Damien. ; ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/315
https://github.com/sofa-framework/sofa/pull/315:624,Testability,test,test,624,"In RestShapeSpringsForceField the rest_shape is currently provided using a raw pointer which is really Bad. ; In this PR is change that to use SingleLink instead. . The PR imply a change by which the syntax of the external_rest_shape is provided. Adding an ""@"" as in the test examples/Components/forcefield/RestShapeSpringsForceField2.scn make it work. Editting: Damien. ; ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/315
https://github.com/sofa-framework/sofa/pull/315:674,Testability,test,test,674,"In RestShapeSpringsForceField the rest_shape is currently provided using a raw pointer which is really Bad. ; In this PR is change that to use SingleLink instead. . The PR imply a change by which the syntax of the external_rest_shape is provided. Adding an ""@"" as in the test examples/Components/forcefield/RestShapeSpringsForceField2.scn make it work. Editting: Damien. ; ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/315
https://github.com/sofa-framework/sofa/issues/316:1566,Availability,error,error,1566,"ofaKernel/SofaSimulation/../modules -I../SofaKernel/framework/sofa/core/../.. -I../SofaKernel/framework/sofa/helper/../.. -F/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX10.12.sdk/System/Library/Frameworks -I../SofaKernel/extlibs/eigen-3.2.7 -ISofaKernel/SofaFramework -I../SofaKernel/extlibs/tinyxml -I../SofaKernel/framework/sofa/defaulttype/../.. -I../SofaMisc/../modules -I../SofaKernel/SofaCommon/../modules -isystem=/opt/local/include/Qt -Wall -W -O3 -DNDEBUG -isysroot /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX10.12.sdk -mmacosx-version-min=10.11 -fPIC -DSOFA_MULTITHREADING_PLUGIN -std=gnu++11 -MD -MT applications/plugins/MultiThreading/CMakeFiles/MultiThreading.dir/src/TaskSchedulerBoost.cpp.o -MF applications/plugins/MultiThreading/CMakeFiles/MultiThreading.dir/src/TaskSchedulerBoost.cpp.o.d -o applications/plugins/MultiThreading/CMakeFiles/MultiThreading.dir/src/TaskSchedulerBoost.cpp.o -c ../applications/plugins/MultiThreading/src/TaskSchedulerBoost.cpp; ../applications/plugins/MultiThreading/src/TaskSchedulerBoost.cpp:192:18: error: overload resolution selected deleted operator '='; mTaskMutex.v_ = 0L;; ~~~~~~~~~~~~~ ^ ~~; /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/../include/c++/v1/atomic:1654:18: note: candidate function has been explicitly deleted; atomic_flag& operator=(const atomic_flag&) = delete;; ^; /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/../include/c++/v1/atomic:1655:18: note: candidate function has been explicitly deleted; atomic_flag& operator=(const atomic_flag&) volatile = delete;; ^; 1 error generated.; ```. This plugin should either be updated with the new boost API, or get rid of boost dependency.; I don't know this plugin enough... ______________________________________________________. Suggested labels: <!--- see https://github.com/sofa-framework/sofa/labels -->",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/316
https://github.com/sofa-framework/sofa/issues/316:2140,Availability,error,error,2140,"ofaKernel/SofaSimulation/../modules -I../SofaKernel/framework/sofa/core/../.. -I../SofaKernel/framework/sofa/helper/../.. -F/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX10.12.sdk/System/Library/Frameworks -I../SofaKernel/extlibs/eigen-3.2.7 -ISofaKernel/SofaFramework -I../SofaKernel/extlibs/tinyxml -I../SofaKernel/framework/sofa/defaulttype/../.. -I../SofaMisc/../modules -I../SofaKernel/SofaCommon/../modules -isystem=/opt/local/include/Qt -Wall -W -O3 -DNDEBUG -isysroot /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX10.12.sdk -mmacosx-version-min=10.11 -fPIC -DSOFA_MULTITHREADING_PLUGIN -std=gnu++11 -MD -MT applications/plugins/MultiThreading/CMakeFiles/MultiThreading.dir/src/TaskSchedulerBoost.cpp.o -MF applications/plugins/MultiThreading/CMakeFiles/MultiThreading.dir/src/TaskSchedulerBoost.cpp.o.d -o applications/plugins/MultiThreading/CMakeFiles/MultiThreading.dir/src/TaskSchedulerBoost.cpp.o -c ../applications/plugins/MultiThreading/src/TaskSchedulerBoost.cpp; ../applications/plugins/MultiThreading/src/TaskSchedulerBoost.cpp:192:18: error: overload resolution selected deleted operator '='; mTaskMutex.v_ = 0L;; ~~~~~~~~~~~~~ ^ ~~; /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/../include/c++/v1/atomic:1654:18: note: candidate function has been explicitly deleted; atomic_flag& operator=(const atomic_flag&) = delete;; ^; /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/../include/c++/v1/atomic:1655:18: note: candidate function has been explicitly deleted; atomic_flag& operator=(const atomic_flag&) volatile = delete;; ^; 1 error generated.; ```. This plugin should either be updated with the new boost API, or get rid of boost dependency.; I don't know this plugin enough... ______________________________________________________. Suggested labels: <!--- see https://github.com/sofa-framework/sofa/labels -->",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/316
https://github.com/sofa-framework/sofa/issues/316:2192,Deployability,update,updated,2192,"ofaKernel/SofaSimulation/../modules -I../SofaKernel/framework/sofa/core/../.. -I../SofaKernel/framework/sofa/helper/../.. -F/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX10.12.sdk/System/Library/Frameworks -I../SofaKernel/extlibs/eigen-3.2.7 -ISofaKernel/SofaFramework -I../SofaKernel/extlibs/tinyxml -I../SofaKernel/framework/sofa/defaulttype/../.. -I../SofaMisc/../modules -I../SofaKernel/SofaCommon/../modules -isystem=/opt/local/include/Qt -Wall -W -O3 -DNDEBUG -isysroot /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX10.12.sdk -mmacosx-version-min=10.11 -fPIC -DSOFA_MULTITHREADING_PLUGIN -std=gnu++11 -MD -MT applications/plugins/MultiThreading/CMakeFiles/MultiThreading.dir/src/TaskSchedulerBoost.cpp.o -MF applications/plugins/MultiThreading/CMakeFiles/MultiThreading.dir/src/TaskSchedulerBoost.cpp.o.d -o applications/plugins/MultiThreading/CMakeFiles/MultiThreading.dir/src/TaskSchedulerBoost.cpp.o -c ../applications/plugins/MultiThreading/src/TaskSchedulerBoost.cpp; ../applications/plugins/MultiThreading/src/TaskSchedulerBoost.cpp:192:18: error: overload resolution selected deleted operator '='; mTaskMutex.v_ = 0L;; ~~~~~~~~~~~~~ ^ ~~; /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/../include/c++/v1/atomic:1654:18: note: candidate function has been explicitly deleted; atomic_flag& operator=(const atomic_flag&) = delete;; ^; /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/../include/c++/v1/atomic:1655:18: note: candidate function has been explicitly deleted; atomic_flag& operator=(const atomic_flag&) volatile = delete;; ^; 1 error generated.; ```. This plugin should either be updated with the new boost API, or get rid of boost dependency.; I don't know this plugin enough... ______________________________________________________. Suggested labels: <!--- see https://github.com/sofa-framework/sofa/labels -->",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/316
https://github.com/sofa-framework/sofa/issues/316:80,Integrability,message,message,80,"With Boost 1.64, at least on Mac, Multithreading build fails with the following message:; ```FAILED: applications/plugins/MultiThreading/CMakeFiles/MultiThreading.dir/src/TaskSchedulerBoost.cpp.o ; /usr/local/bin/ccache clang++ -Qunused-arguments -Wno-deprecated-declarations -DMultiThreading_EXPORTS -Iinclude -I../applications/plugins/MultiThreading/.. -isystem /usr/local/include -I../SofaKernel/SofaBase/../modules -I../SofaKernel/SofaSimulation/../modules -I../SofaKernel/framework/sofa/core/../.. -I../SofaKernel/framework/sofa/helper/../.. -F/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX10.12.sdk/System/Library/Frameworks -I../SofaKernel/extlibs/eigen-3.2.7 -ISofaKernel/SofaFramework -I../SofaKernel/extlibs/tinyxml -I../SofaKernel/framework/sofa/defaulttype/../.. -I../SofaMisc/../modules -I../SofaKernel/SofaCommon/../modules -isystem=/opt/local/include/Qt -Wall -W -O3 -DNDEBUG -isysroot /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX10.12.sdk -mmacosx-version-min=10.11 -fPIC -DSOFA_MULTITHREADING_PLUGIN -std=gnu++11 -MD -MT applications/plugins/MultiThreading/CMakeFiles/MultiThreading.dir/src/TaskSchedulerBoost.cpp.o -MF applications/plugins/MultiThreading/CMakeFiles/MultiThreading.dir/src/TaskSchedulerBoost.cpp.o.d -o applications/plugins/MultiThreading/CMakeFiles/MultiThreading.dir/src/TaskSchedulerBoost.cpp.o -c ../applications/plugins/MultiThreading/src/TaskSchedulerBoost.cpp; ../applications/plugins/MultiThreading/src/TaskSchedulerBoost.cpp:192:18: error: overload resolution selected deleted operator '='; mTaskMutex.v_ = 0L;; ~~~~~~~~~~~~~ ^ ~~; /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/../include/c++/v1/atomic:1654:18: note: candidate function has been explicitly deleted; atomic_flag& operator=(const atomic_flag&) = delete;; ^; /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/../include/c++/v1",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/316
https://github.com/sofa-framework/sofa/issues/316:2244,Integrability,depend,dependency,2244,"ofaKernel/SofaSimulation/../modules -I../SofaKernel/framework/sofa/core/../.. -I../SofaKernel/framework/sofa/helper/../.. -F/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX10.12.sdk/System/Library/Frameworks -I../SofaKernel/extlibs/eigen-3.2.7 -ISofaKernel/SofaFramework -I../SofaKernel/extlibs/tinyxml -I../SofaKernel/framework/sofa/defaulttype/../.. -I../SofaMisc/../modules -I../SofaKernel/SofaCommon/../modules -isystem=/opt/local/include/Qt -Wall -W -O3 -DNDEBUG -isysroot /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX10.12.sdk -mmacosx-version-min=10.11 -fPIC -DSOFA_MULTITHREADING_PLUGIN -std=gnu++11 -MD -MT applications/plugins/MultiThreading/CMakeFiles/MultiThreading.dir/src/TaskSchedulerBoost.cpp.o -MF applications/plugins/MultiThreading/CMakeFiles/MultiThreading.dir/src/TaskSchedulerBoost.cpp.o.d -o applications/plugins/MultiThreading/CMakeFiles/MultiThreading.dir/src/TaskSchedulerBoost.cpp.o -c ../applications/plugins/MultiThreading/src/TaskSchedulerBoost.cpp; ../applications/plugins/MultiThreading/src/TaskSchedulerBoost.cpp:192:18: error: overload resolution selected deleted operator '='; mTaskMutex.v_ = 0L;; ~~~~~~~~~~~~~ ^ ~~; /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/../include/c++/v1/atomic:1654:18: note: candidate function has been explicitly deleted; atomic_flag& operator=(const atomic_flag&) = delete;; ^; /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/../include/c++/v1/atomic:1655:18: note: candidate function has been explicitly deleted; atomic_flag& operator=(const atomic_flag&) volatile = delete;; ^; 1 error generated.; ```. This plugin should either be updated with the new boost API, or get rid of boost dependency.; I don't know this plugin enough... ______________________________________________________. Suggested labels: <!--- see https://github.com/sofa-framework/sofa/labels -->",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/316
https://github.com/sofa-framework/sofa/issues/316:114,Modifiability,plugin,plugins,114,"With Boost 1.64, at least on Mac, Multithreading build fails with the following message:; ```FAILED: applications/plugins/MultiThreading/CMakeFiles/MultiThreading.dir/src/TaskSchedulerBoost.cpp.o ; /usr/local/bin/ccache clang++ -Qunused-arguments -Wno-deprecated-declarations -DMultiThreading_EXPORTS -Iinclude -I../applications/plugins/MultiThreading/.. -isystem /usr/local/include -I../SofaKernel/SofaBase/../modules -I../SofaKernel/SofaSimulation/../modules -I../SofaKernel/framework/sofa/core/../.. -I../SofaKernel/framework/sofa/helper/../.. -F/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX10.12.sdk/System/Library/Frameworks -I../SofaKernel/extlibs/eigen-3.2.7 -ISofaKernel/SofaFramework -I../SofaKernel/extlibs/tinyxml -I../SofaKernel/framework/sofa/defaulttype/../.. -I../SofaMisc/../modules -I../SofaKernel/SofaCommon/../modules -isystem=/opt/local/include/Qt -Wall -W -O3 -DNDEBUG -isysroot /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX10.12.sdk -mmacosx-version-min=10.11 -fPIC -DSOFA_MULTITHREADING_PLUGIN -std=gnu++11 -MD -MT applications/plugins/MultiThreading/CMakeFiles/MultiThreading.dir/src/TaskSchedulerBoost.cpp.o -MF applications/plugins/MultiThreading/CMakeFiles/MultiThreading.dir/src/TaskSchedulerBoost.cpp.o.d -o applications/plugins/MultiThreading/CMakeFiles/MultiThreading.dir/src/TaskSchedulerBoost.cpp.o -c ../applications/plugins/MultiThreading/src/TaskSchedulerBoost.cpp; ../applications/plugins/MultiThreading/src/TaskSchedulerBoost.cpp:192:18: error: overload resolution selected deleted operator '='; mTaskMutex.v_ = 0L;; ~~~~~~~~~~~~~ ^ ~~; /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/../include/c++/v1/atomic:1654:18: note: candidate function has been explicitly deleted; atomic_flag& operator=(const atomic_flag&) = delete;; ^; /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/../include/c++/v1",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/316
https://github.com/sofa-framework/sofa/issues/316:329,Modifiability,plugin,plugins,329,"With Boost 1.64, at least on Mac, Multithreading build fails with the following message:; ```FAILED: applications/plugins/MultiThreading/CMakeFiles/MultiThreading.dir/src/TaskSchedulerBoost.cpp.o ; /usr/local/bin/ccache clang++ -Qunused-arguments -Wno-deprecated-declarations -DMultiThreading_EXPORTS -Iinclude -I../applications/plugins/MultiThreading/.. -isystem /usr/local/include -I../SofaKernel/SofaBase/../modules -I../SofaKernel/SofaSimulation/../modules -I../SofaKernel/framework/sofa/core/../.. -I../SofaKernel/framework/sofa/helper/../.. -F/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX10.12.sdk/System/Library/Frameworks -I../SofaKernel/extlibs/eigen-3.2.7 -ISofaKernel/SofaFramework -I../SofaKernel/extlibs/tinyxml -I../SofaKernel/framework/sofa/defaulttype/../.. -I../SofaMisc/../modules -I../SofaKernel/SofaCommon/../modules -isystem=/opt/local/include/Qt -Wall -W -O3 -DNDEBUG -isysroot /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX10.12.sdk -mmacosx-version-min=10.11 -fPIC -DSOFA_MULTITHREADING_PLUGIN -std=gnu++11 -MD -MT applications/plugins/MultiThreading/CMakeFiles/MultiThreading.dir/src/TaskSchedulerBoost.cpp.o -MF applications/plugins/MultiThreading/CMakeFiles/MultiThreading.dir/src/TaskSchedulerBoost.cpp.o.d -o applications/plugins/MultiThreading/CMakeFiles/MultiThreading.dir/src/TaskSchedulerBoost.cpp.o -c ../applications/plugins/MultiThreading/src/TaskSchedulerBoost.cpp; ../applications/plugins/MultiThreading/src/TaskSchedulerBoost.cpp:192:18: error: overload resolution selected deleted operator '='; mTaskMutex.v_ = 0L;; ~~~~~~~~~~~~~ ^ ~~; /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/../include/c++/v1/atomic:1654:18: note: candidate function has been explicitly deleted; atomic_flag& operator=(const atomic_flag&) = delete;; ^; /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/../include/c++/v1",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/316
https://github.com/sofa-framework/sofa/issues/316:1141,Modifiability,plugin,plugins,1141,reading/CMakeFiles/MultiThreading.dir/src/TaskSchedulerBoost.cpp.o ; /usr/local/bin/ccache clang++ -Qunused-arguments -Wno-deprecated-declarations -DMultiThreading_EXPORTS -Iinclude -I../applications/plugins/MultiThreading/.. -isystem /usr/local/include -I../SofaKernel/SofaBase/../modules -I../SofaKernel/SofaSimulation/../modules -I../SofaKernel/framework/sofa/core/../.. -I../SofaKernel/framework/sofa/helper/../.. -F/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX10.12.sdk/System/Library/Frameworks -I../SofaKernel/extlibs/eigen-3.2.7 -ISofaKernel/SofaFramework -I../SofaKernel/extlibs/tinyxml -I../SofaKernel/framework/sofa/defaulttype/../.. -I../SofaMisc/../modules -I../SofaKernel/SofaCommon/../modules -isystem=/opt/local/include/Qt -Wall -W -O3 -DNDEBUG -isysroot /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX10.12.sdk -mmacosx-version-min=10.11 -fPIC -DSOFA_MULTITHREADING_PLUGIN -std=gnu++11 -MD -MT applications/plugins/MultiThreading/CMakeFiles/MultiThreading.dir/src/TaskSchedulerBoost.cpp.o -MF applications/plugins/MultiThreading/CMakeFiles/MultiThreading.dir/src/TaskSchedulerBoost.cpp.o.d -o applications/plugins/MultiThreading/CMakeFiles/MultiThreading.dir/src/TaskSchedulerBoost.cpp.o -c ../applications/plugins/MultiThreading/src/TaskSchedulerBoost.cpp; ../applications/plugins/MultiThreading/src/TaskSchedulerBoost.cpp:192:18: error: overload resolution selected deleted operator '='; mTaskMutex.v_ = 0L;; ~~~~~~~~~~~~~ ^ ~~; /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/../include/c++/v1/atomic:1654:18: note: candidate function has been explicitly deleted; atomic_flag& operator=(const atomic_flag&) = delete;; ^; /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/../include/c++/v1/atomic:1655:18: note: candidate function has been explicitly deleted; atomic_flag& operator=(const atomic_flag&) volatile = dele,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/316
https://github.com/sofa-framework/sofa/issues/316:1240,Modifiability,plugin,plugins,1240,"recated-declarations -DMultiThreading_EXPORTS -Iinclude -I../applications/plugins/MultiThreading/.. -isystem /usr/local/include -I../SofaKernel/SofaBase/../modules -I../SofaKernel/SofaSimulation/../modules -I../SofaKernel/framework/sofa/core/../.. -I../SofaKernel/framework/sofa/helper/../.. -F/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX10.12.sdk/System/Library/Frameworks -I../SofaKernel/extlibs/eigen-3.2.7 -ISofaKernel/SofaFramework -I../SofaKernel/extlibs/tinyxml -I../SofaKernel/framework/sofa/defaulttype/../.. -I../SofaMisc/../modules -I../SofaKernel/SofaCommon/../modules -isystem=/opt/local/include/Qt -Wall -W -O3 -DNDEBUG -isysroot /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX10.12.sdk -mmacosx-version-min=10.11 -fPIC -DSOFA_MULTITHREADING_PLUGIN -std=gnu++11 -MD -MT applications/plugins/MultiThreading/CMakeFiles/MultiThreading.dir/src/TaskSchedulerBoost.cpp.o -MF applications/plugins/MultiThreading/CMakeFiles/MultiThreading.dir/src/TaskSchedulerBoost.cpp.o.d -o applications/plugins/MultiThreading/CMakeFiles/MultiThreading.dir/src/TaskSchedulerBoost.cpp.o -c ../applications/plugins/MultiThreading/src/TaskSchedulerBoost.cpp; ../applications/plugins/MultiThreading/src/TaskSchedulerBoost.cpp:192:18: error: overload resolution selected deleted operator '='; mTaskMutex.v_ = 0L;; ~~~~~~~~~~~~~ ^ ~~; /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/../include/c++/v1/atomic:1654:18: note: candidate function has been explicitly deleted; atomic_flag& operator=(const atomic_flag&) = delete;; ^; /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/../include/c++/v1/atomic:1655:18: note: candidate function has been explicitly deleted; atomic_flag& operator=(const atomic_flag&) volatile = delete;; ^; 1 error generated.; ```. This plugin should either be updated with the new boost API, or get rid of boost dependency.",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/316
https://github.com/sofa-framework/sofa/issues/316:1340,Modifiability,plugin,plugins,1340,"-isystem /usr/local/include -I../SofaKernel/SofaBase/../modules -I../SofaKernel/SofaSimulation/../modules -I../SofaKernel/framework/sofa/core/../.. -I../SofaKernel/framework/sofa/helper/../.. -F/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX10.12.sdk/System/Library/Frameworks -I../SofaKernel/extlibs/eigen-3.2.7 -ISofaKernel/SofaFramework -I../SofaKernel/extlibs/tinyxml -I../SofaKernel/framework/sofa/defaulttype/../.. -I../SofaMisc/../modules -I../SofaKernel/SofaCommon/../modules -isystem=/opt/local/include/Qt -Wall -W -O3 -DNDEBUG -isysroot /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX10.12.sdk -mmacosx-version-min=10.11 -fPIC -DSOFA_MULTITHREADING_PLUGIN -std=gnu++11 -MD -MT applications/plugins/MultiThreading/CMakeFiles/MultiThreading.dir/src/TaskSchedulerBoost.cpp.o -MF applications/plugins/MultiThreading/CMakeFiles/MultiThreading.dir/src/TaskSchedulerBoost.cpp.o.d -o applications/plugins/MultiThreading/CMakeFiles/MultiThreading.dir/src/TaskSchedulerBoost.cpp.o -c ../applications/plugins/MultiThreading/src/TaskSchedulerBoost.cpp; ../applications/plugins/MultiThreading/src/TaskSchedulerBoost.cpp:192:18: error: overload resolution selected deleted operator '='; mTaskMutex.v_ = 0L;; ~~~~~~~~~~~~~ ^ ~~; /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/../include/c++/v1/atomic:1654:18: note: candidate function has been explicitly deleted; atomic_flag& operator=(const atomic_flag&) = delete;; ^; /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/../include/c++/v1/atomic:1655:18: note: candidate function has been explicitly deleted; atomic_flag& operator=(const atomic_flag&) volatile = delete;; ^; 1 error generated.; ```. This plugin should either be updated with the new boost API, or get rid of boost dependency.; I don't know this plugin enough... ______________________________________________________. Suggeste",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/316
https://github.com/sofa-framework/sofa/issues/316:1441,Modifiability,plugin,plugins,1441,"ofaKernel/SofaSimulation/../modules -I../SofaKernel/framework/sofa/core/../.. -I../SofaKernel/framework/sofa/helper/../.. -F/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX10.12.sdk/System/Library/Frameworks -I../SofaKernel/extlibs/eigen-3.2.7 -ISofaKernel/SofaFramework -I../SofaKernel/extlibs/tinyxml -I../SofaKernel/framework/sofa/defaulttype/../.. -I../SofaMisc/../modules -I../SofaKernel/SofaCommon/../modules -isystem=/opt/local/include/Qt -Wall -W -O3 -DNDEBUG -isysroot /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX10.12.sdk -mmacosx-version-min=10.11 -fPIC -DSOFA_MULTITHREADING_PLUGIN -std=gnu++11 -MD -MT applications/plugins/MultiThreading/CMakeFiles/MultiThreading.dir/src/TaskSchedulerBoost.cpp.o -MF applications/plugins/MultiThreading/CMakeFiles/MultiThreading.dir/src/TaskSchedulerBoost.cpp.o.d -o applications/plugins/MultiThreading/CMakeFiles/MultiThreading.dir/src/TaskSchedulerBoost.cpp.o -c ../applications/plugins/MultiThreading/src/TaskSchedulerBoost.cpp; ../applications/plugins/MultiThreading/src/TaskSchedulerBoost.cpp:192:18: error: overload resolution selected deleted operator '='; mTaskMutex.v_ = 0L;; ~~~~~~~~~~~~~ ^ ~~; /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/../include/c++/v1/atomic:1654:18: note: candidate function has been explicitly deleted; atomic_flag& operator=(const atomic_flag&) = delete;; ^; /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/../include/c++/v1/atomic:1655:18: note: candidate function has been explicitly deleted; atomic_flag& operator=(const atomic_flag&) volatile = delete;; ^; 1 error generated.; ```. This plugin should either be updated with the new boost API, or get rid of boost dependency.; I don't know this plugin enough... ______________________________________________________. Suggested labels: <!--- see https://github.com/sofa-framework/sofa/labels -->",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/316
https://github.com/sofa-framework/sofa/issues/316:1508,Modifiability,plugin,plugins,1508,"ofaKernel/SofaSimulation/../modules -I../SofaKernel/framework/sofa/core/../.. -I../SofaKernel/framework/sofa/helper/../.. -F/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX10.12.sdk/System/Library/Frameworks -I../SofaKernel/extlibs/eigen-3.2.7 -ISofaKernel/SofaFramework -I../SofaKernel/extlibs/tinyxml -I../SofaKernel/framework/sofa/defaulttype/../.. -I../SofaMisc/../modules -I../SofaKernel/SofaCommon/../modules -isystem=/opt/local/include/Qt -Wall -W -O3 -DNDEBUG -isysroot /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX10.12.sdk -mmacosx-version-min=10.11 -fPIC -DSOFA_MULTITHREADING_PLUGIN -std=gnu++11 -MD -MT applications/plugins/MultiThreading/CMakeFiles/MultiThreading.dir/src/TaskSchedulerBoost.cpp.o -MF applications/plugins/MultiThreading/CMakeFiles/MultiThreading.dir/src/TaskSchedulerBoost.cpp.o.d -o applications/plugins/MultiThreading/CMakeFiles/MultiThreading.dir/src/TaskSchedulerBoost.cpp.o -c ../applications/plugins/MultiThreading/src/TaskSchedulerBoost.cpp; ../applications/plugins/MultiThreading/src/TaskSchedulerBoost.cpp:192:18: error: overload resolution selected deleted operator '='; mTaskMutex.v_ = 0L;; ~~~~~~~~~~~~~ ^ ~~; /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/../include/c++/v1/atomic:1654:18: note: candidate function has been explicitly deleted; atomic_flag& operator=(const atomic_flag&) = delete;; ^; /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/../include/c++/v1/atomic:1655:18: note: candidate function has been explicitly deleted; atomic_flag& operator=(const atomic_flag&) volatile = delete;; ^; 1 error generated.; ```. This plugin should either be updated with the new boost API, or get rid of boost dependency.; I don't know this plugin enough... ______________________________________________________. Suggested labels: <!--- see https://github.com/sofa-framework/sofa/labels -->",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/316
https://github.com/sofa-framework/sofa/issues/316:2168,Modifiability,plugin,plugin,2168,"ofaKernel/SofaSimulation/../modules -I../SofaKernel/framework/sofa/core/../.. -I../SofaKernel/framework/sofa/helper/../.. -F/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX10.12.sdk/System/Library/Frameworks -I../SofaKernel/extlibs/eigen-3.2.7 -ISofaKernel/SofaFramework -I../SofaKernel/extlibs/tinyxml -I../SofaKernel/framework/sofa/defaulttype/../.. -I../SofaMisc/../modules -I../SofaKernel/SofaCommon/../modules -isystem=/opt/local/include/Qt -Wall -W -O3 -DNDEBUG -isysroot /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX10.12.sdk -mmacosx-version-min=10.11 -fPIC -DSOFA_MULTITHREADING_PLUGIN -std=gnu++11 -MD -MT applications/plugins/MultiThreading/CMakeFiles/MultiThreading.dir/src/TaskSchedulerBoost.cpp.o -MF applications/plugins/MultiThreading/CMakeFiles/MultiThreading.dir/src/TaskSchedulerBoost.cpp.o.d -o applications/plugins/MultiThreading/CMakeFiles/MultiThreading.dir/src/TaskSchedulerBoost.cpp.o -c ../applications/plugins/MultiThreading/src/TaskSchedulerBoost.cpp; ../applications/plugins/MultiThreading/src/TaskSchedulerBoost.cpp:192:18: error: overload resolution selected deleted operator '='; mTaskMutex.v_ = 0L;; ~~~~~~~~~~~~~ ^ ~~; /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/../include/c++/v1/atomic:1654:18: note: candidate function has been explicitly deleted; atomic_flag& operator=(const atomic_flag&) = delete;; ^; /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/../include/c++/v1/atomic:1655:18: note: candidate function has been explicitly deleted; atomic_flag& operator=(const atomic_flag&) volatile = delete;; ^; 1 error generated.; ```. This plugin should either be updated with the new boost API, or get rid of boost dependency.; I don't know this plugin enough... ______________________________________________________. Suggested labels: <!--- see https://github.com/sofa-framework/sofa/labels -->",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/316
https://github.com/sofa-framework/sofa/issues/316:2275,Modifiability,plugin,plugin,2275,"ofaKernel/SofaSimulation/../modules -I../SofaKernel/framework/sofa/core/../.. -I../SofaKernel/framework/sofa/helper/../.. -F/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX10.12.sdk/System/Library/Frameworks -I../SofaKernel/extlibs/eigen-3.2.7 -ISofaKernel/SofaFramework -I../SofaKernel/extlibs/tinyxml -I../SofaKernel/framework/sofa/defaulttype/../.. -I../SofaMisc/../modules -I../SofaKernel/SofaCommon/../modules -isystem=/opt/local/include/Qt -Wall -W -O3 -DNDEBUG -isysroot /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX10.12.sdk -mmacosx-version-min=10.11 -fPIC -DSOFA_MULTITHREADING_PLUGIN -std=gnu++11 -MD -MT applications/plugins/MultiThreading/CMakeFiles/MultiThreading.dir/src/TaskSchedulerBoost.cpp.o -MF applications/plugins/MultiThreading/CMakeFiles/MultiThreading.dir/src/TaskSchedulerBoost.cpp.o.d -o applications/plugins/MultiThreading/CMakeFiles/MultiThreading.dir/src/TaskSchedulerBoost.cpp.o -c ../applications/plugins/MultiThreading/src/TaskSchedulerBoost.cpp; ../applications/plugins/MultiThreading/src/TaskSchedulerBoost.cpp:192:18: error: overload resolution selected deleted operator '='; mTaskMutex.v_ = 0L;; ~~~~~~~~~~~~~ ^ ~~; /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/../include/c++/v1/atomic:1654:18: note: candidate function has been explicitly deleted; atomic_flag& operator=(const atomic_flag&) = delete;; ^; /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/../include/c++/v1/atomic:1655:18: note: candidate function has been explicitly deleted; atomic_flag& operator=(const atomic_flag&) volatile = delete;; ^; 1 error generated.; ```. This plugin should either be updated with the new boost API, or get rid of boost dependency.; I don't know this plugin enough... ______________________________________________________. Suggested labels: <!--- see https://github.com/sofa-framework/sofa/labels -->",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/316
https://github.com/sofa-framework/sofa/pull/317:351,Availability,failure,failures,351,"when passing ""this"" as argument, forcing object copy to avoid unexpected results; Fixes #280 . ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/317
https://github.com/sofa-framework/sofa/pull/317:401,Availability,failure,failures,401,"when passing ""this"" as argument, forcing object copy to avoid unexpected results; Fixes #280 . ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/317
https://github.com/sofa-framework/sofa/pull/317:194,Integrability,message,message,194,"when passing ""this"" as argument, forcing object copy to avoid unexpected results; Fixes #280 . ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/317
https://github.com/sofa-framework/sofa/pull/317:56,Safety,avoid,avoid,56,"when passing ""this"" as argument, forcing object copy to avoid unexpected results; Fixes #280 . ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/317
https://github.com/sofa-framework/sofa/pull/317:346,Testability,test,test,346,"when passing ""this"" as argument, forcing object copy to avoid unexpected results; Fixes #280 . ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/317
https://github.com/sofa-framework/sofa/pull/317:396,Testability,test,test,396,"when passing ""this"" as argument, forcing object copy to avoid unexpected results; Fixes #280 . ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/317
https://github.com/sofa-framework/sofa/issues/318:1316,Deployability,release,release,1316,"Currently we have a very strict reviewing process to validate a PR for merging in master. This is very good because we now have a very stable master. But after one year I think our approach also tend to favor trivial ""micro changes"" against complex things. . Because they are hard to read, or review, or because they may eventually break something, big PRs are often rejected. This is a drama and I think that we should make en effort to facilitate much more these one because they contains real work (ie...an engineer spends several days or week that he (and is employer) is willing to offer to the community). Loosing those contributions is just a raw loss for the community. . So I think we should relax a bit our rules to allow this kind of PR to be merged.; I see several aspects:; - reviewers should adapt their ""quality level"" to the size of the PR. There is no need to be super pinchy on two or three micro-details of a 50h PR. (reviewers should instead contribute to the PR by fixing that details); - reviewers should be willing and adapt their reviewing time to the size of the PR. A 50h PR really deserve 1H of reviewing from the community. ; - we should also have a way to relax the ""stability"" constraint of our API/software to allow breaking changes. On that aspect I would like to propose to have one release a year dedicated to BREAKING changes and ship it with tools to help users to fix their scenes. Any opinion ?; @bcarrez @hugtalbot @guparan @fredroy @matthieu-nesme @JeremieA, @ChristianDuriez, @olivier-goury",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/318
https://github.com/sofa-framework/sofa/issues/318:806,Energy Efficiency,adapt,adapt,806,"Currently we have a very strict reviewing process to validate a PR for merging in master. This is very good because we now have a very stable master. But after one year I think our approach also tend to favor trivial ""micro changes"" against complex things. . Because they are hard to read, or review, or because they may eventually break something, big PRs are often rejected. This is a drama and I think that we should make en effort to facilitate much more these one because they contains real work (ie...an engineer spends several days or week that he (and is employer) is willing to offer to the community). Loosing those contributions is just a raw loss for the community. . So I think we should relax a bit our rules to allow this kind of PR to be merged.; I see several aspects:; - reviewers should adapt their ""quality level"" to the size of the PR. There is no need to be super pinchy on two or three micro-details of a 50h PR. (reviewers should instead contribute to the PR by fixing that details); - reviewers should be willing and adapt their reviewing time to the size of the PR. A 50h PR really deserve 1H of reviewing from the community. ; - we should also have a way to relax the ""stability"" constraint of our API/software to allow breaking changes. On that aspect I would like to propose to have one release a year dedicated to BREAKING changes and ship it with tools to help users to fix their scenes. Any opinion ?; @bcarrez @hugtalbot @guparan @fredroy @matthieu-nesme @JeremieA, @ChristianDuriez, @olivier-goury",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/318
https://github.com/sofa-framework/sofa/issues/318:1042,Energy Efficiency,adapt,adapt,1042,"Currently we have a very strict reviewing process to validate a PR for merging in master. This is very good because we now have a very stable master. But after one year I think our approach also tend to favor trivial ""micro changes"" against complex things. . Because they are hard to read, or review, or because they may eventually break something, big PRs are often rejected. This is a drama and I think that we should make en effort to facilitate much more these one because they contains real work (ie...an engineer spends several days or week that he (and is employer) is willing to offer to the community). Loosing those contributions is just a raw loss for the community. . So I think we should relax a bit our rules to allow this kind of PR to be merged.; I see several aspects:; - reviewers should adapt their ""quality level"" to the size of the PR. There is no need to be super pinchy on two or three micro-details of a 50h PR. (reviewers should instead contribute to the PR by fixing that details); - reviewers should be willing and adapt their reviewing time to the size of the PR. A 50h PR really deserve 1H of reviewing from the community. ; - we should also have a way to relax the ""stability"" constraint of our API/software to allow breaking changes. On that aspect I would like to propose to have one release a year dedicated to BREAKING changes and ship it with tools to help users to fix their scenes. Any opinion ?; @bcarrez @hugtalbot @guparan @fredroy @matthieu-nesme @JeremieA, @ChristianDuriez, @olivier-goury",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/318
https://github.com/sofa-framework/sofa/issues/318:806,Modifiability,adapt,adapt,806,"Currently we have a very strict reviewing process to validate a PR for merging in master. This is very good because we now have a very stable master. But after one year I think our approach also tend to favor trivial ""micro changes"" against complex things. . Because they are hard to read, or review, or because they may eventually break something, big PRs are often rejected. This is a drama and I think that we should make en effort to facilitate much more these one because they contains real work (ie...an engineer spends several days or week that he (and is employer) is willing to offer to the community). Loosing those contributions is just a raw loss for the community. . So I think we should relax a bit our rules to allow this kind of PR to be merged.; I see several aspects:; - reviewers should adapt their ""quality level"" to the size of the PR. There is no need to be super pinchy on two or three micro-details of a 50h PR. (reviewers should instead contribute to the PR by fixing that details); - reviewers should be willing and adapt their reviewing time to the size of the PR. A 50h PR really deserve 1H of reviewing from the community. ; - we should also have a way to relax the ""stability"" constraint of our API/software to allow breaking changes. On that aspect I would like to propose to have one release a year dedicated to BREAKING changes and ship it with tools to help users to fix their scenes. Any opinion ?; @bcarrez @hugtalbot @guparan @fredroy @matthieu-nesme @JeremieA, @ChristianDuriez, @olivier-goury",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/318
https://github.com/sofa-framework/sofa/issues/318:1042,Modifiability,adapt,adapt,1042,"Currently we have a very strict reviewing process to validate a PR for merging in master. This is very good because we now have a very stable master. But after one year I think our approach also tend to favor trivial ""micro changes"" against complex things. . Because they are hard to read, or review, or because they may eventually break something, big PRs are often rejected. This is a drama and I think that we should make en effort to facilitate much more these one because they contains real work (ie...an engineer spends several days or week that he (and is employer) is willing to offer to the community). Loosing those contributions is just a raw loss for the community. . So I think we should relax a bit our rules to allow this kind of PR to be merged.; I see several aspects:; - reviewers should adapt their ""quality level"" to the size of the PR. There is no need to be super pinchy on two or three micro-details of a 50h PR. (reviewers should instead contribute to the PR by fixing that details); - reviewers should be willing and adapt their reviewing time to the size of the PR. A 50h PR really deserve 1H of reviewing from the community. ; - we should also have a way to relax the ""stability"" constraint of our API/software to allow breaking changes. On that aspect I would like to propose to have one release a year dedicated to BREAKING changes and ship it with tools to help users to fix their scenes. Any opinion ?; @bcarrez @hugtalbot @guparan @fredroy @matthieu-nesme @JeremieA, @ChristianDuriez, @olivier-goury",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/318
https://github.com/sofa-framework/sofa/issues/318:53,Security,validat,validate,53,"Currently we have a very strict reviewing process to validate a PR for merging in master. This is very good because we now have a very stable master. But after one year I think our approach also tend to favor trivial ""micro changes"" against complex things. . Because they are hard to read, or review, or because they may eventually break something, big PRs are often rejected. This is a drama and I think that we should make en effort to facilitate much more these one because they contains real work (ie...an engineer spends several days or week that he (and is employer) is willing to offer to the community). Loosing those contributions is just a raw loss for the community. . So I think we should relax a bit our rules to allow this kind of PR to be merged.; I see several aspects:; - reviewers should adapt their ""quality level"" to the size of the PR. There is no need to be super pinchy on two or three micro-details of a 50h PR. (reviewers should instead contribute to the PR by fixing that details); - reviewers should be willing and adapt their reviewing time to the size of the PR. A 50h PR really deserve 1H of reviewing from the community. ; - we should also have a way to relax the ""stability"" constraint of our API/software to allow breaking changes. On that aspect I would like to propose to have one release a year dedicated to BREAKING changes and ship it with tools to help users to fix their scenes. Any opinion ?; @bcarrez @hugtalbot @guparan @fredroy @matthieu-nesme @JeremieA, @ChristianDuriez, @olivier-goury",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/318
https://github.com/sofa-framework/sofa/pull/319:648,Availability,failure,failures,648,"Introduction (by Damien); Erwan is a new member of Defrost. He will work on sofa, cleaning the haptic plugins & finally make user interfaces. Here is his first PR (to practice writing tests and our workflow :)). This PR contains tests to validate the behavior of the IndexValueMapper engine which was not tested before. ; The component was selected as it is listed into the SofaNGExt list. . ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/319
https://github.com/sofa-framework/sofa/pull/319:698,Availability,failure,failures,698,"Introduction (by Damien); Erwan is a new member of Defrost. He will work on sofa, cleaning the haptic plugins & finally make user interfaces. Here is his first PR (to practice writing tests and our workflow :)). This PR contains tests to validate the behavior of the IndexValueMapper engine which was not tested before. ; The component was selected as it is listed into the SofaNGExt list. . ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/319
https://github.com/sofa-framework/sofa/pull/319:130,Integrability,interface,interfaces,130,"Introduction (by Damien); Erwan is a new member of Defrost. He will work on sofa, cleaning the haptic plugins & finally make user interfaces. Here is his first PR (to practice writing tests and our workflow :)). This PR contains tests to validate the behavior of the IndexValueMapper engine which was not tested before. ; The component was selected as it is listed into the SofaNGExt list. . ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/319
https://github.com/sofa-framework/sofa/pull/319:491,Integrability,message,message,491,"Introduction (by Damien); Erwan is a new member of Defrost. He will work on sofa, cleaning the haptic plugins & finally make user interfaces. Here is his first PR (to practice writing tests and our workflow :)). This PR contains tests to validate the behavior of the IndexValueMapper engine which was not tested before. ; The component was selected as it is listed into the SofaNGExt list. . ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/319
https://github.com/sofa-framework/sofa/pull/319:102,Modifiability,plugin,plugins,102,"Introduction (by Damien); Erwan is a new member of Defrost. He will work on sofa, cleaning the haptic plugins & finally make user interfaces. Here is his first PR (to practice writing tests and our workflow :)). This PR contains tests to validate the behavior of the IndexValueMapper engine which was not tested before. ; The component was selected as it is listed into the SofaNGExt list. . ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/319
https://github.com/sofa-framework/sofa/pull/319:238,Security,validat,validate,238,"Introduction (by Damien); Erwan is a new member of Defrost. He will work on sofa, cleaning the haptic plugins & finally make user interfaces. Here is his first PR (to practice writing tests and our workflow :)). This PR contains tests to validate the behavior of the IndexValueMapper engine which was not tested before. ; The component was selected as it is listed into the SofaNGExt list. . ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/319
https://github.com/sofa-framework/sofa/pull/319:184,Testability,test,tests,184,"Introduction (by Damien); Erwan is a new member of Defrost. He will work on sofa, cleaning the haptic plugins & finally make user interfaces. Here is his first PR (to practice writing tests and our workflow :)). This PR contains tests to validate the behavior of the IndexValueMapper engine which was not tested before. ; The component was selected as it is listed into the SofaNGExt list. . ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/319
https://github.com/sofa-framework/sofa/pull/319:229,Testability,test,tests,229,"Introduction (by Damien); Erwan is a new member of Defrost. He will work on sofa, cleaning the haptic plugins & finally make user interfaces. Here is his first PR (to practice writing tests and our workflow :)). This PR contains tests to validate the behavior of the IndexValueMapper engine which was not tested before. ; The component was selected as it is listed into the SofaNGExt list. . ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/319
https://github.com/sofa-framework/sofa/pull/319:305,Testability,test,tested,305,"Introduction (by Damien); Erwan is a new member of Defrost. He will work on sofa, cleaning the haptic plugins & finally make user interfaces. Here is his first PR (to practice writing tests and our workflow :)). This PR contains tests to validate the behavior of the IndexValueMapper engine which was not tested before. ; The component was selected as it is listed into the SofaNGExt list. . ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/319
https://github.com/sofa-framework/sofa/pull/319:643,Testability,test,test,643,"Introduction (by Damien); Erwan is a new member of Defrost. He will work on sofa, cleaning the haptic plugins & finally make user interfaces. Here is his first PR (to practice writing tests and our workflow :)). This PR contains tests to validate the behavior of the IndexValueMapper engine which was not tested before. ; The component was selected as it is listed into the SofaNGExt list. . ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/319
https://github.com/sofa-framework/sofa/pull/319:693,Testability,test,test,693,"Introduction (by Damien); Erwan is a new member of Defrost. He will work on sofa, cleaning the haptic plugins & finally make user interfaces. Here is his first PR (to practice writing tests and our workflow :)). This PR contains tests to validate the behavior of the IndexValueMapper engine which was not tested before. ; The component was selected as it is listed into the SofaNGExt list. . ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/319
https://github.com/sofa-framework/sofa/pull/320:933,Availability,failure,failures,933,"The access to the pointer of data &ptr[0] have been replaced by the use of .data() in PR #279 . This generate a problem because helper::vector is specialized for cuda (thanks to the MemoryManager) in vector_device.h. This type of vector mimic a std::vector but it does not implement all the functions of the stl. If new functions are necessary they must be also implemented in this vector_device class, but the consistency of data must be CAREFULLY checked. Indeed a cudavector has data both on the CPU and the GPU and one must guarantee that the accessed data is the correct one. This PR add the missing function in vector_device to make it match the API of helper::vector. ; ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/320
https://github.com/sofa-framework/sofa/pull/320:983,Availability,failure,failures,983,"The access to the pointer of data &ptr[0] have been replaced by the use of .data() in PR #279 . This generate a problem because helper::vector is specialized for cuda (thanks to the MemoryManager) in vector_device.h. This type of vector mimic a std::vector but it does not implement all the functions of the stl. If new functions are necessary they must be also implemented in this vector_device class, but the consistency of data must be CAREFULLY checked. Indeed a cudavector has data both on the CPU and the GPU and one must guarantee that the accessed data is the correct one. This PR add the missing function in vector_device to make it match the API of helper::vector. ; ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/320
https://github.com/sofa-framework/sofa/pull/320:776,Integrability,message,message,776,"The access to the pointer of data &ptr[0] have been replaced by the use of .data() in PR #279 . This generate a problem because helper::vector is specialized for cuda (thanks to the MemoryManager) in vector_device.h. This type of vector mimic a std::vector but it does not implement all the functions of the stl. If new functions are necessary they must be also implemented in this vector_device class, but the consistency of data must be CAREFULLY checked. Indeed a cudavector has data both on the CPU and the GPU and one must guarantee that the accessed data is the correct one. This PR add the missing function in vector_device to make it match the API of helper::vector. ; ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/320
https://github.com/sofa-framework/sofa/pull/320:4,Security,access,access,4,"The access to the pointer of data &ptr[0] have been replaced by the use of .data() in PR #279 . This generate a problem because helper::vector is specialized for cuda (thanks to the MemoryManager) in vector_device.h. This type of vector mimic a std::vector but it does not implement all the functions of the stl. If new functions are necessary they must be also implemented in this vector_device class, but the consistency of data must be CAREFULLY checked. Indeed a cudavector has data both on the CPU and the GPU and one must guarantee that the accessed data is the correct one. This PR add the missing function in vector_device to make it match the API of helper::vector. ; ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/320
https://github.com/sofa-framework/sofa/pull/320:547,Security,access,accessed,547,"The access to the pointer of data &ptr[0] have been replaced by the use of .data() in PR #279 . This generate a problem because helper::vector is specialized for cuda (thanks to the MemoryManager) in vector_device.h. This type of vector mimic a std::vector but it does not implement all the functions of the stl. If new functions are necessary they must be also implemented in this vector_device class, but the consistency of data must be CAREFULLY checked. Indeed a cudavector has data both on the CPU and the GPU and one must guarantee that the accessed data is the correct one. This PR add the missing function in vector_device to make it match the API of helper::vector. ; ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/320
https://github.com/sofa-framework/sofa/pull/320:928,Testability,test,test,928,"The access to the pointer of data &ptr[0] have been replaced by the use of .data() in PR #279 . This generate a problem because helper::vector is specialized for cuda (thanks to the MemoryManager) in vector_device.h. This type of vector mimic a std::vector but it does not implement all the functions of the stl. If new functions are necessary they must be also implemented in this vector_device class, but the consistency of data must be CAREFULLY checked. Indeed a cudavector has data both on the CPU and the GPU and one must guarantee that the accessed data is the correct one. This PR add the missing function in vector_device to make it match the API of helper::vector. ; ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/320
https://github.com/sofa-framework/sofa/pull/320:978,Testability,test,test,978,"The access to the pointer of data &ptr[0] have been replaced by the use of .data() in PR #279 . This generate a problem because helper::vector is specialized for cuda (thanks to the MemoryManager) in vector_device.h. This type of vector mimic a std::vector but it does not implement all the functions of the stl. If new functions are necessary they must be also implemented in this vector_device class, but the consistency of data must be CAREFULLY checked. Indeed a cudavector has data both on the CPU and the GPU and one must guarantee that the accessed data is the correct one. This PR add the missing function in vector_device to make it match the API of helper::vector. ; ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/320
https://github.com/sofa-framework/sofa/issues/321:475,Usability,User Experience,User Experience,475,"It seems like there is no way with the current implementation to set a default value to a DataFileName field. In fact, it is not possible at all to modify a value passed through a DataFileName. Neither setValue() nor read() etc. work, as the operator=() is made private...; Did I miss anything? otherwise, especially if DataFileName should be the official way of providing a file path to a component, this should be fixed. @damienmarchal, since it is about code cleaning and User Experience, I believe you might have nice inputs..? :); ______________________________________________________. Suggested labels: <!--- see https://github.com/sofa-framework/sofa/labels -->",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/321
https://github.com/sofa-framework/sofa/pull/322:2615,Availability,failure,failures,2615," happen when loading a scene at level '17.06' on runSofa at level '17.12' (our master branch) with a BoxStiffSpringForceField (that could behave differently because of PR #290); ```; [INFO] [SceneChecker] The 'APIVersion' directive is missing in the current scene. ; Switching to the APIVersion level '17.06' ; [INFO] [SceneChecker] Validating a scene: ; - APIVersion checking: 1 ; - RequiredPlugin checking: 1; [WARNING] [BoxStiffSpringForceField(Spring)] BoxStiffSpringForceField have changed since 17.06. To use the old behavior you need to set parameter 'forceOldBehavior=true'; ```. The nice thing with the approach is that we can write custom condition to rise those messages. Here is a simple example (to handle PR315 & an imaginary deprecation of a component):; ```cpp; addHookInChangeSet(""17.06"", [](Base* o){; if(o->getClassName() == ""RestShapeSpringsForceField"" && o->findData(""external_rest_shape"")->isSet()); msg_warning(o) << ""RestShapeSpringsForceField have changed since 17.06. The parameter 'external_rest_shape' is now a Link. To fix your scene you need to add and '@' in front of the provided path. See PR#315"" ;; }) ;. addHookInChangeSet(""17.06"", [](Base* o){; if(o->getClassName() == ""TheComponentWeWantToRemove"" ); msg_warning(o) << ""TheComponentWewantToRemove is deprecated since sofa 17.06. It have been replaced by TheSuperComponent. #See PR318"" ;; }) ;; }; ```. Everything is in SceneChecker.cpp/SceneChecker.h and APIVersion.* ...the other files in the changes are ; in fact the content of PR #314; ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/322
https://github.com/sofa-framework/sofa/pull/322:2665,Availability,failure,failures,2665," happen when loading a scene at level '17.06' on runSofa at level '17.12' (our master branch) with a BoxStiffSpringForceField (that could behave differently because of PR #290); ```; [INFO] [SceneChecker] The 'APIVersion' directive is missing in the current scene. ; Switching to the APIVersion level '17.06' ; [INFO] [SceneChecker] Validating a scene: ; - APIVersion checking: 1 ; - RequiredPlugin checking: 1; [WARNING] [BoxStiffSpringForceField(Spring)] BoxStiffSpringForceField have changed since 17.06. To use the old behavior you need to set parameter 'forceOldBehavior=true'; ```. The nice thing with the approach is that we can write custom condition to rise those messages. Here is a simple example (to handle PR315 & an imaginary deprecation of a component):; ```cpp; addHookInChangeSet(""17.06"", [](Base* o){; if(o->getClassName() == ""RestShapeSpringsForceField"" && o->findData(""external_rest_shape"")->isSet()); msg_warning(o) << ""RestShapeSpringsForceField have changed since 17.06. The parameter 'external_rest_shape' is now a Link. To fix your scene you need to add and '@' in front of the provided path. See PR#315"" ;; }) ;. addHookInChangeSet(""17.06"", [](Base* o){; if(o->getClassName() == ""TheComponentWeWantToRemove"" ); msg_warning(o) << ""TheComponentWewantToRemove is deprecated since sofa 17.06. It have been replaced by TheSuperComponent. #See PR318"" ;; }) ;; }; ```. Everything is in SceneChecker.cpp/SceneChecker.h and APIVersion.* ...the other files in the changes are ; in fact the content of PR #314; ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/322
https://github.com/sofa-framework/sofa/pull/322:750,Integrability,message,messages,750,"(EDIT: THIS PR WAS NOT CLEANED SO I MADE A VERSION 2 in PR #329). Currently in Sofa there is only rudimentary way to handle component evolution (change of implementation, change of parameters, deprecation) and report the change to our users. . In this PR I implemented a mecanism to do that. ; The basic idea is to have in scene a component that specify for which version of Sofa the scene have been tested. Here is how it looks in the scene:; ```xml; <APIVersion level='17.06'/>; ```; If the scene does not have this component the level is automatically set to 17.06 so existing scene will just work as they should. Now what happens if a scene with a given level is loaded in a sofa that have a different level (eg: '17.12'). In this case dedicated messages are printed to warn user things may go wrong. . Here is an example of what happen when loading a scene at level '17.06' on runSofa at level '17.12' (our master branch) with a BoxStiffSpringForceField (that could behave differently because of PR #290); ```; [INFO] [SceneChecker] The 'APIVersion' directive is missing in the current scene. ; Switching to the APIVersion level '17.06' ; [INFO] [SceneChecker] Validating a scene: ; - APIVersion checking: 1 ; - RequiredPlugin checking: 1; [WARNING] [BoxStiffSpringForceField(Spring)] BoxStiffSpringForceField have changed since 17.06. To use the old behavior you need to set parameter 'forceOldBehavior=true'; ```. The nice thing with the approach is that we can write custom condition to rise those messages. Here is a simple example (to handle PR315 & an imaginary deprecation of a component):; ```cpp; addHookInChangeSet(""17.06"", [](Base* o){; if(o->getClassName() == ""RestShapeSpringsForceField"" && o->findData(""external_rest_shape"")->isSet()); msg_warning(o) << ""RestShapeSpringsForceField have changed since 17.06. The parameter 'external_rest_shape' is now a Link. To fix your scene you need to add and '@' in front of the provided path. See PR#315"" ;; }) ;. addHookInChangeSet(""17.06"", [",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/322
https://github.com/sofa-framework/sofa/pull/322:1506,Integrability,message,messages,1506,"el='17.06'/>; ```; If the scene does not have this component the level is automatically set to 17.06 so existing scene will just work as they should. Now what happens if a scene with a given level is loaded in a sofa that have a different level (eg: '17.12'). In this case dedicated messages are printed to warn user things may go wrong. . Here is an example of what happen when loading a scene at level '17.06' on runSofa at level '17.12' (our master branch) with a BoxStiffSpringForceField (that could behave differently because of PR #290); ```; [INFO] [SceneChecker] The 'APIVersion' directive is missing in the current scene. ; Switching to the APIVersion level '17.06' ; [INFO] [SceneChecker] Validating a scene: ; - APIVersion checking: 1 ; - RequiredPlugin checking: 1; [WARNING] [BoxStiffSpringForceField(Spring)] BoxStiffSpringForceField have changed since 17.06. To use the old behavior you need to set parameter 'forceOldBehavior=true'; ```. The nice thing with the approach is that we can write custom condition to rise those messages. Here is a simple example (to handle PR315 & an imaginary deprecation of a component):; ```cpp; addHookInChangeSet(""17.06"", [](Base* o){; if(o->getClassName() == ""RestShapeSpringsForceField"" && o->findData(""external_rest_shape"")->isSet()); msg_warning(o) << ""RestShapeSpringsForceField have changed since 17.06. The parameter 'external_rest_shape' is now a Link. To fix your scene you need to add and '@' in front of the provided path. See PR#315"" ;; }) ;. addHookInChangeSet(""17.06"", [](Base* o){; if(o->getClassName() == ""TheComponentWeWantToRemove"" ); msg_warning(o) << ""TheComponentWewantToRemove is deprecated since sofa 17.06. It have been replaced by TheSuperComponent. #See PR318"" ;; }) ;; }; ```. Everything is in SceneChecker.cpp/SceneChecker.h and APIVersion.* ...the other files in the changes are ; in fact the content of PR #314; ______________________________________________________; <!--- Please leave this at the end of your message --",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/322
https://github.com/sofa-framework/sofa/pull/322:2458,Integrability,message,message,2458," happen when loading a scene at level '17.06' on runSofa at level '17.12' (our master branch) with a BoxStiffSpringForceField (that could behave differently because of PR #290); ```; [INFO] [SceneChecker] The 'APIVersion' directive is missing in the current scene. ; Switching to the APIVersion level '17.06' ; [INFO] [SceneChecker] Validating a scene: ; - APIVersion checking: 1 ; - RequiredPlugin checking: 1; [WARNING] [BoxStiffSpringForceField(Spring)] BoxStiffSpringForceField have changed since 17.06. To use the old behavior you need to set parameter 'forceOldBehavior=true'; ```. The nice thing with the approach is that we can write custom condition to rise those messages. Here is a simple example (to handle PR315 & an imaginary deprecation of a component):; ```cpp; addHookInChangeSet(""17.06"", [](Base* o){; if(o->getClassName() == ""RestShapeSpringsForceField"" && o->findData(""external_rest_shape"")->isSet()); msg_warning(o) << ""RestShapeSpringsForceField have changed since 17.06. The parameter 'external_rest_shape' is now a Link. To fix your scene you need to add and '@' in front of the provided path. See PR#315"" ;; }) ;. addHookInChangeSet(""17.06"", [](Base* o){; if(o->getClassName() == ""TheComponentWeWantToRemove"" ); msg_warning(o) << ""TheComponentWewantToRemove is deprecated since sofa 17.06. It have been replaced by TheSuperComponent. #See PR318"" ;; }) ;; }; ```. Everything is in SceneChecker.cpp/SceneChecker.h and APIVersion.* ...the other files in the changes are ; in fact the content of PR #314; ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/322
https://github.com/sofa-framework/sofa/pull/322:667,Performance,load,loaded,667,"(EDIT: THIS PR WAS NOT CLEANED SO I MADE A VERSION 2 in PR #329). Currently in Sofa there is only rudimentary way to handle component evolution (change of implementation, change of parameters, deprecation) and report the change to our users. . In this PR I implemented a mecanism to do that. ; The basic idea is to have in scene a component that specify for which version of Sofa the scene have been tested. Here is how it looks in the scene:; ```xml; <APIVersion level='17.06'/>; ```; If the scene does not have this component the level is automatically set to 17.06 so existing scene will just work as they should. Now what happens if a scene with a given level is loaded in a sofa that have a different level (eg: '17.12'). In this case dedicated messages are printed to warn user things may go wrong. . Here is an example of what happen when loading a scene at level '17.06' on runSofa at level '17.12' (our master branch) with a BoxStiffSpringForceField (that could behave differently because of PR #290); ```; [INFO] [SceneChecker] The 'APIVersion' directive is missing in the current scene. ; Switching to the APIVersion level '17.06' ; [INFO] [SceneChecker] Validating a scene: ; - APIVersion checking: 1 ; - RequiredPlugin checking: 1; [WARNING] [BoxStiffSpringForceField(Spring)] BoxStiffSpringForceField have changed since 17.06. To use the old behavior you need to set parameter 'forceOldBehavior=true'; ```. The nice thing with the approach is that we can write custom condition to rise those messages. Here is a simple example (to handle PR315 & an imaginary deprecation of a component):; ```cpp; addHookInChangeSet(""17.06"", [](Base* o){; if(o->getClassName() == ""RestShapeSpringsForceField"" && o->findData(""external_rest_shape"")->isSet()); msg_warning(o) << ""RestShapeSpringsForceField have changed since 17.06. The parameter 'external_rest_shape' is now a Link. To fix your scene you need to add and '@' in front of the provided path. See PR#315"" ;; }) ;. addHookInChangeSet(""17.06"", [",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/322
https://github.com/sofa-framework/sofa/pull/322:846,Performance,load,loading,846,"(EDIT: THIS PR WAS NOT CLEANED SO I MADE A VERSION 2 in PR #329). Currently in Sofa there is only rudimentary way to handle component evolution (change of implementation, change of parameters, deprecation) and report the change to our users. . In this PR I implemented a mecanism to do that. ; The basic idea is to have in scene a component that specify for which version of Sofa the scene have been tested. Here is how it looks in the scene:; ```xml; <APIVersion level='17.06'/>; ```; If the scene does not have this component the level is automatically set to 17.06 so existing scene will just work as they should. Now what happens if a scene with a given level is loaded in a sofa that have a different level (eg: '17.12'). In this case dedicated messages are printed to warn user things may go wrong. . Here is an example of what happen when loading a scene at level '17.06' on runSofa at level '17.12' (our master branch) with a BoxStiffSpringForceField (that could behave differently because of PR #290); ```; [INFO] [SceneChecker] The 'APIVersion' directive is missing in the current scene. ; Switching to the APIVersion level '17.06' ; [INFO] [SceneChecker] Validating a scene: ; - APIVersion checking: 1 ; - RequiredPlugin checking: 1; [WARNING] [BoxStiffSpringForceField(Spring)] BoxStiffSpringForceField have changed since 17.06. To use the old behavior you need to set parameter 'forceOldBehavior=true'; ```. The nice thing with the approach is that we can write custom condition to rise those messages. Here is a simple example (to handle PR315 & an imaginary deprecation of a component):; ```cpp; addHookInChangeSet(""17.06"", [](Base* o){; if(o->getClassName() == ""RestShapeSpringsForceField"" && o->findData(""external_rest_shape"")->isSet()); msg_warning(o) << ""RestShapeSpringsForceField have changed since 17.06. The parameter 'external_rest_shape' is now a Link. To fix your scene you need to add and '@' in front of the provided path. See PR#315"" ;; }) ;. addHookInChangeSet(""17.06"", [",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/322
https://github.com/sofa-framework/sofa/pull/322:1166,Security,Validat,Validating,1166,"ers. . In this PR I implemented a mecanism to do that. ; The basic idea is to have in scene a component that specify for which version of Sofa the scene have been tested. Here is how it looks in the scene:; ```xml; <APIVersion level='17.06'/>; ```; If the scene does not have this component the level is automatically set to 17.06 so existing scene will just work as they should. Now what happens if a scene with a given level is loaded in a sofa that have a different level (eg: '17.12'). In this case dedicated messages are printed to warn user things may go wrong. . Here is an example of what happen when loading a scene at level '17.06' on runSofa at level '17.12' (our master branch) with a BoxStiffSpringForceField (that could behave differently because of PR #290); ```; [INFO] [SceneChecker] The 'APIVersion' directive is missing in the current scene. ; Switching to the APIVersion level '17.06' ; [INFO] [SceneChecker] Validating a scene: ; - APIVersion checking: 1 ; - RequiredPlugin checking: 1; [WARNING] [BoxStiffSpringForceField(Spring)] BoxStiffSpringForceField have changed since 17.06. To use the old behavior you need to set parameter 'forceOldBehavior=true'; ```. The nice thing with the approach is that we can write custom condition to rise those messages. Here is a simple example (to handle PR315 & an imaginary deprecation of a component):; ```cpp; addHookInChangeSet(""17.06"", [](Base* o){; if(o->getClassName() == ""RestShapeSpringsForceField"" && o->findData(""external_rest_shape"")->isSet()); msg_warning(o) << ""RestShapeSpringsForceField have changed since 17.06. The parameter 'external_rest_shape' is now a Link. To fix your scene you need to add and '@' in front of the provided path. See PR#315"" ;; }) ;. addHookInChangeSet(""17.06"", [](Base* o){; if(o->getClassName() == ""TheComponentWeWantToRemove"" ); msg_warning(o) << ""TheComponentWewantToRemove is deprecated since sofa 17.06. It have been replaced by TheSuperComponent. #See PR318"" ;; }) ;; }; ```. Everything is in ",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/322
https://github.com/sofa-framework/sofa/pull/322:400,Testability,test,tested,400,"(EDIT: THIS PR WAS NOT CLEANED SO I MADE A VERSION 2 in PR #329). Currently in Sofa there is only rudimentary way to handle component evolution (change of implementation, change of parameters, deprecation) and report the change to our users. . In this PR I implemented a mecanism to do that. ; The basic idea is to have in scene a component that specify for which version of Sofa the scene have been tested. Here is how it looks in the scene:; ```xml; <APIVersion level='17.06'/>; ```; If the scene does not have this component the level is automatically set to 17.06 so existing scene will just work as they should. Now what happens if a scene with a given level is loaded in a sofa that have a different level (eg: '17.12'). In this case dedicated messages are printed to warn user things may go wrong. . Here is an example of what happen when loading a scene at level '17.06' on runSofa at level '17.12' (our master branch) with a BoxStiffSpringForceField (that could behave differently because of PR #290); ```; [INFO] [SceneChecker] The 'APIVersion' directive is missing in the current scene. ; Switching to the APIVersion level '17.06' ; [INFO] [SceneChecker] Validating a scene: ; - APIVersion checking: 1 ; - RequiredPlugin checking: 1; [WARNING] [BoxStiffSpringForceField(Spring)] BoxStiffSpringForceField have changed since 17.06. To use the old behavior you need to set parameter 'forceOldBehavior=true'; ```. The nice thing with the approach is that we can write custom condition to rise those messages. Here is a simple example (to handle PR315 & an imaginary deprecation of a component):; ```cpp; addHookInChangeSet(""17.06"", [](Base* o){; if(o->getClassName() == ""RestShapeSpringsForceField"" && o->findData(""external_rest_shape"")->isSet()); msg_warning(o) << ""RestShapeSpringsForceField have changed since 17.06. The parameter 'external_rest_shape' is now a Link. To fix your scene you need to add and '@' in front of the provided path. See PR#315"" ;; }) ;. addHookInChangeSet(""17.06"", [",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/322
https://github.com/sofa-framework/sofa/pull/322:2610,Testability,test,test,2610," happen when loading a scene at level '17.06' on runSofa at level '17.12' (our master branch) with a BoxStiffSpringForceField (that could behave differently because of PR #290); ```; [INFO] [SceneChecker] The 'APIVersion' directive is missing in the current scene. ; Switching to the APIVersion level '17.06' ; [INFO] [SceneChecker] Validating a scene: ; - APIVersion checking: 1 ; - RequiredPlugin checking: 1; [WARNING] [BoxStiffSpringForceField(Spring)] BoxStiffSpringForceField have changed since 17.06. To use the old behavior you need to set parameter 'forceOldBehavior=true'; ```. The nice thing with the approach is that we can write custom condition to rise those messages. Here is a simple example (to handle PR315 & an imaginary deprecation of a component):; ```cpp; addHookInChangeSet(""17.06"", [](Base* o){; if(o->getClassName() == ""RestShapeSpringsForceField"" && o->findData(""external_rest_shape"")->isSet()); msg_warning(o) << ""RestShapeSpringsForceField have changed since 17.06. The parameter 'external_rest_shape' is now a Link. To fix your scene you need to add and '@' in front of the provided path. See PR#315"" ;; }) ;. addHookInChangeSet(""17.06"", [](Base* o){; if(o->getClassName() == ""TheComponentWeWantToRemove"" ); msg_warning(o) << ""TheComponentWewantToRemove is deprecated since sofa 17.06. It have been replaced by TheSuperComponent. #See PR318"" ;; }) ;; }; ```. Everything is in SceneChecker.cpp/SceneChecker.h and APIVersion.* ...the other files in the changes are ; in fact the content of PR #314; ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/322
https://github.com/sofa-framework/sofa/pull/322:2660,Testability,test,test,2660," happen when loading a scene at level '17.06' on runSofa at level '17.12' (our master branch) with a BoxStiffSpringForceField (that could behave differently because of PR #290); ```; [INFO] [SceneChecker] The 'APIVersion' directive is missing in the current scene. ; Switching to the APIVersion level '17.06' ; [INFO] [SceneChecker] Validating a scene: ; - APIVersion checking: 1 ; - RequiredPlugin checking: 1; [WARNING] [BoxStiffSpringForceField(Spring)] BoxStiffSpringForceField have changed since 17.06. To use the old behavior you need to set parameter 'forceOldBehavior=true'; ```. The nice thing with the approach is that we can write custom condition to rise those messages. Here is a simple example (to handle PR315 & an imaginary deprecation of a component):; ```cpp; addHookInChangeSet(""17.06"", [](Base* o){; if(o->getClassName() == ""RestShapeSpringsForceField"" && o->findData(""external_rest_shape"")->isSet()); msg_warning(o) << ""RestShapeSpringsForceField have changed since 17.06. The parameter 'external_rest_shape' is now a Link. To fix your scene you need to add and '@' in front of the provided path. See PR#315"" ;; }) ;. addHookInChangeSet(""17.06"", [](Base* o){; if(o->getClassName() == ""TheComponentWeWantToRemove"" ); msg_warning(o) << ""TheComponentWewantToRemove is deprecated since sofa 17.06. It have been replaced by TheSuperComponent. #See PR318"" ;; }) ;; }; ```. Everything is in SceneChecker.cpp/SceneChecker.h and APIVersion.* ...the other files in the changes are ; in fact the content of PR #314; ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/322
https://github.com/sofa-framework/sofa/pull/322:1526,Usability,simpl,simple,1526,"sting scene will just work as they should. Now what happens if a scene with a given level is loaded in a sofa that have a different level (eg: '17.12'). In this case dedicated messages are printed to warn user things may go wrong. . Here is an example of what happen when loading a scene at level '17.06' on runSofa at level '17.12' (our master branch) with a BoxStiffSpringForceField (that could behave differently because of PR #290); ```; [INFO] [SceneChecker] The 'APIVersion' directive is missing in the current scene. ; Switching to the APIVersion level '17.06' ; [INFO] [SceneChecker] Validating a scene: ; - APIVersion checking: 1 ; - RequiredPlugin checking: 1; [WARNING] [BoxStiffSpringForceField(Spring)] BoxStiffSpringForceField have changed since 17.06. To use the old behavior you need to set parameter 'forceOldBehavior=true'; ```. The nice thing with the approach is that we can write custom condition to rise those messages. Here is a simple example (to handle PR315 & an imaginary deprecation of a component):; ```cpp; addHookInChangeSet(""17.06"", [](Base* o){; if(o->getClassName() == ""RestShapeSpringsForceField"" && o->findData(""external_rest_shape"")->isSet()); msg_warning(o) << ""RestShapeSpringsForceField have changed since 17.06. The parameter 'external_rest_shape' is now a Link. To fix your scene you need to add and '@' in front of the provided path. See PR#315"" ;; }) ;. addHookInChangeSet(""17.06"", [](Base* o){; if(o->getClassName() == ""TheComponentWeWantToRemove"" ); msg_warning(o) << ""TheComponentWewantToRemove is deprecated since sofa 17.06. It have been replaced by TheSuperComponent. #See PR318"" ;; }) ;; }; ```. Everything is in SceneChecker.cpp/SceneChecker.h and APIVersion.* ...the other files in the changes are ; in fact the content of PR #314; ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/322
https://github.com/sofa-framework/sofa/issues/323:211,Availability,error,error,211,"[Here](https://github.com/sofa-framework/sofa/blob/33690ee02117a875f4332996932a327736d6d7ea/applications/projects/runSofa/Main.cpp#L323). The single quote mark is LEFT SINGLE QUOTATION MARK U+2018, which causes error in my compiler(VS2015). ; It's better to use APOSTROPHE U+0027. Error:; ```; 73>sofa\sofa\v16.12\src\applications\projects\runSofa\Main.cpp(316): error C3688: invalid literal suffix '鈥for'; literal operator or literal operator template 'operator """"鈥for' not found; 73>sofa\sofa\v16.12\src\applications\projects\runSofa\Main.cpp(316): error C2146: syntax error: missing ';' before identifier '鈥'; 73>sofa\sofa\v16.12\src\applications\projects\runSofa\Main.cpp(316): error C2065: '鈥': undeclared identifier; 73>sofa\sofa\v16.12\src\applications\projects\runSofa\Main.cpp(316): error C2065: 'formatting鈥': undeclared identifier; ```",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/323
https://github.com/sofa-framework/sofa/issues/323:281,Availability,Error,Error,281,"[Here](https://github.com/sofa-framework/sofa/blob/33690ee02117a875f4332996932a327736d6d7ea/applications/projects/runSofa/Main.cpp#L323). The single quote mark is LEFT SINGLE QUOTATION MARK U+2018, which causes error in my compiler(VS2015). ; It's better to use APOSTROPHE U+0027. Error:; ```; 73>sofa\sofa\v16.12\src\applications\projects\runSofa\Main.cpp(316): error C3688: invalid literal suffix '鈥for'; literal operator or literal operator template 'operator """"鈥for' not found; 73>sofa\sofa\v16.12\src\applications\projects\runSofa\Main.cpp(316): error C2146: syntax error: missing ';' before identifier '鈥'; 73>sofa\sofa\v16.12\src\applications\projects\runSofa\Main.cpp(316): error C2065: '鈥': undeclared identifier; 73>sofa\sofa\v16.12\src\applications\projects\runSofa\Main.cpp(316): error C2065: 'formatting鈥': undeclared identifier; ```",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/323
https://github.com/sofa-framework/sofa/issues/323:363,Availability,error,error,363,"[Here](https://github.com/sofa-framework/sofa/blob/33690ee02117a875f4332996932a327736d6d7ea/applications/projects/runSofa/Main.cpp#L323). The single quote mark is LEFT SINGLE QUOTATION MARK U+2018, which causes error in my compiler(VS2015). ; It's better to use APOSTROPHE U+0027. Error:; ```; 73>sofa\sofa\v16.12\src\applications\projects\runSofa\Main.cpp(316): error C3688: invalid literal suffix '鈥for'; literal operator or literal operator template 'operator """"鈥for' not found; 73>sofa\sofa\v16.12\src\applications\projects\runSofa\Main.cpp(316): error C2146: syntax error: missing ';' before identifier '鈥'; 73>sofa\sofa\v16.12\src\applications\projects\runSofa\Main.cpp(316): error C2065: '鈥': undeclared identifier; 73>sofa\sofa\v16.12\src\applications\projects\runSofa\Main.cpp(316): error C2065: 'formatting鈥': undeclared identifier; ```",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/323
https://github.com/sofa-framework/sofa/issues/323:551,Availability,error,error,551,"[Here](https://github.com/sofa-framework/sofa/blob/33690ee02117a875f4332996932a327736d6d7ea/applications/projects/runSofa/Main.cpp#L323). The single quote mark is LEFT SINGLE QUOTATION MARK U+2018, which causes error in my compiler(VS2015). ; It's better to use APOSTROPHE U+0027. Error:; ```; 73>sofa\sofa\v16.12\src\applications\projects\runSofa\Main.cpp(316): error C3688: invalid literal suffix '鈥for'; literal operator or literal operator template 'operator """"鈥for' not found; 73>sofa\sofa\v16.12\src\applications\projects\runSofa\Main.cpp(316): error C2146: syntax error: missing ';' before identifier '鈥'; 73>sofa\sofa\v16.12\src\applications\projects\runSofa\Main.cpp(316): error C2065: '鈥': undeclared identifier; 73>sofa\sofa\v16.12\src\applications\projects\runSofa\Main.cpp(316): error C2065: 'formatting鈥': undeclared identifier; ```",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/323
https://github.com/sofa-framework/sofa/issues/323:571,Availability,error,error,571,"[Here](https://github.com/sofa-framework/sofa/blob/33690ee02117a875f4332996932a327736d6d7ea/applications/projects/runSofa/Main.cpp#L323). The single quote mark is LEFT SINGLE QUOTATION MARK U+2018, which causes error in my compiler(VS2015). ; It's better to use APOSTROPHE U+0027. Error:; ```; 73>sofa\sofa\v16.12\src\applications\projects\runSofa\Main.cpp(316): error C3688: invalid literal suffix '鈥for'; literal operator or literal operator template 'operator """"鈥for' not found; 73>sofa\sofa\v16.12\src\applications\projects\runSofa\Main.cpp(316): error C2146: syntax error: missing ';' before identifier '鈥'; 73>sofa\sofa\v16.12\src\applications\projects\runSofa\Main.cpp(316): error C2065: '鈥': undeclared identifier; 73>sofa\sofa\v16.12\src\applications\projects\runSofa\Main.cpp(316): error C2065: 'formatting鈥': undeclared identifier; ```",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/323
https://github.com/sofa-framework/sofa/issues/323:682,Availability,error,error,682,"[Here](https://github.com/sofa-framework/sofa/blob/33690ee02117a875f4332996932a327736d6d7ea/applications/projects/runSofa/Main.cpp#L323). The single quote mark is LEFT SINGLE QUOTATION MARK U+2018, which causes error in my compiler(VS2015). ; It's better to use APOSTROPHE U+0027. Error:; ```; 73>sofa\sofa\v16.12\src\applications\projects\runSofa\Main.cpp(316): error C3688: invalid literal suffix '鈥for'; literal operator or literal operator template 'operator """"鈥for' not found; 73>sofa\sofa\v16.12\src\applications\projects\runSofa\Main.cpp(316): error C2146: syntax error: missing ';' before identifier '鈥'; 73>sofa\sofa\v16.12\src\applications\projects\runSofa\Main.cpp(316): error C2065: '鈥': undeclared identifier; 73>sofa\sofa\v16.12\src\applications\projects\runSofa\Main.cpp(316): error C2065: 'formatting鈥': undeclared identifier; ```",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/323
https://github.com/sofa-framework/sofa/issues/323:792,Availability,error,error,792,"[Here](https://github.com/sofa-framework/sofa/blob/33690ee02117a875f4332996932a327736d6d7ea/applications/projects/runSofa/Main.cpp#L323). The single quote mark is LEFT SINGLE QUOTATION MARK U+2018, which causes error in my compiler(VS2015). ; It's better to use APOSTROPHE U+0027. Error:; ```; 73>sofa\sofa\v16.12\src\applications\projects\runSofa\Main.cpp(316): error C3688: invalid literal suffix '鈥for'; literal operator or literal operator template 'operator """"鈥for' not found; 73>sofa\sofa\v16.12\src\applications\projects\runSofa\Main.cpp(316): error C2146: syntax error: missing ';' before identifier '鈥'; 73>sofa\sofa\v16.12\src\applications\projects\runSofa\Main.cpp(316): error C2065: '鈥': undeclared identifier; 73>sofa\sofa\v16.12\src\applications\projects\runSofa\Main.cpp(316): error C2065: 'formatting鈥': undeclared identifier; ```",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/323
https://github.com/sofa-framework/sofa/pull/324:719,Availability,failure,failures,719,"This PR is linked to the issue #308 .; Since the modification of MechanicalObject reinit method in PR #270 ([this commit](https://github.com/sofa-framework/sofa/pull/270/commits/b6750f06ea0c5082f8c88d5aaea6bc65d8840429) ). The mechanicalObject doesn't change the value of P0. Thus, it is not necessary anymore to shift the OglModel and the Surf mechanicalObj. Several scenes were impacted but without ground truth it is hard to say if the scene is totally fixed. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/324
https://github.com/sofa-framework/sofa/pull/324:769,Availability,failure,failures,769,"This PR is linked to the issue #308 .; Since the modification of MechanicalObject reinit method in PR #270 ([this commit](https://github.com/sofa-framework/sofa/pull/270/commits/b6750f06ea0c5082f8c88d5aaea6bc65d8840429) ). The mechanicalObject doesn't change the value of P0. Thus, it is not necessary anymore to shift the OglModel and the Surf mechanicalObj. Several scenes were impacted but without ground truth it is hard to say if the scene is totally fixed. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/324
https://github.com/sofa-framework/sofa/pull/324:562,Integrability,message,message,562,"This PR is linked to the issue #308 .; Since the modification of MechanicalObject reinit method in PR #270 ([this commit](https://github.com/sofa-framework/sofa/pull/270/commits/b6750f06ea0c5082f8c88d5aaea6bc65d8840429) ). The mechanicalObject doesn't change the value of P0. Thus, it is not necessary anymore to shift the OglModel and the Surf mechanicalObj. Several scenes were impacted but without ground truth it is hard to say if the scene is totally fixed. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/324
https://github.com/sofa-framework/sofa/pull/324:714,Testability,test,test,714,"This PR is linked to the issue #308 .; Since the modification of MechanicalObject reinit method in PR #270 ([this commit](https://github.com/sofa-framework/sofa/pull/270/commits/b6750f06ea0c5082f8c88d5aaea6bc65d8840429) ). The mechanicalObject doesn't change the value of P0. Thus, it is not necessary anymore to shift the OglModel and the Surf mechanicalObj. Several scenes were impacted but without ground truth it is hard to say if the scene is totally fixed. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/324
https://github.com/sofa-framework/sofa/pull/324:764,Testability,test,test,764,"This PR is linked to the issue #308 .; Since the modification of MechanicalObject reinit method in PR #270 ([this commit](https://github.com/sofa-framework/sofa/pull/270/commits/b6750f06ea0c5082f8c88d5aaea6bc65d8840429) ). The mechanicalObject doesn't change the value of P0. Thus, it is not necessary anymore to shift the OglModel and the Surf mechanicalObj. Several scenes were impacted but without ground truth it is hard to say if the scene is totally fixed. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/324
https://github.com/sofa-framework/sofa/pull/325:144,Availability,error,error,144,Appeared after upgrading MacOS to 10.11:; using a relative filename in SceneLoaderXML::loadFromMemory raises ENOENT (No such file or directory) error during SetDirectory chdir.; Still don't know why though :-/. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/325
https://github.com/sofa-framework/sofa/pull/325:467,Availability,failure,failures,467,Appeared after upgrading MacOS to 10.11:; using a relative filename in SceneLoaderXML::loadFromMemory raises ENOENT (No such file or directory) error during SetDirectory chdir.; Still don't know why though :-/. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/325
https://github.com/sofa-framework/sofa/pull/325:517,Availability,failure,failures,517,Appeared after upgrading MacOS to 10.11:; using a relative filename in SceneLoaderXML::loadFromMemory raises ENOENT (No such file or directory) error during SetDirectory chdir.; Still don't know why though :-/. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/325
https://github.com/sofa-framework/sofa/pull/325:310,Integrability,message,message,310,Appeared after upgrading MacOS to 10.11:; using a relative filename in SceneLoaderXML::loadFromMemory raises ENOENT (No such file or directory) error during SetDirectory chdir.; Still don't know why though :-/. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/325
https://github.com/sofa-framework/sofa/pull/325:87,Performance,load,loadFromMemory,87,Appeared after upgrading MacOS to 10.11:; using a relative filename in SceneLoaderXML::loadFromMemory raises ENOENT (No such file or directory) error during SetDirectory chdir.; Still don't know why though :-/. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/325
https://github.com/sofa-framework/sofa/pull/325:462,Testability,test,test,462,Appeared after upgrading MacOS to 10.11:; using a relative filename in SceneLoaderXML::loadFromMemory raises ENOENT (No such file or directory) error during SetDirectory chdir.; Still don't know why though :-/. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/325
https://github.com/sofa-framework/sofa/pull/325:512,Testability,test,test,512,Appeared after upgrading MacOS to 10.11:; using a relative filename in SceneLoaderXML::loadFromMemory raises ENOENT (No such file or directory) error during SetDirectory chdir.; Still don't know why though :-/. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/325
https://github.com/sofa-framework/sofa/pull/326:1496,Availability,failure,failures,1496,"Hello all,. This PR adds (hopefully) proper GIL handling to `SofaPython`, so that it is possible to run python threads concurrently with the main Sofa program. It enables the following scene to run concurrently with the main program: . ```python; def createScene(node):. from threading import Thread; import time; ; def target():; while True:; time.sleep(1); print(""it's aliiive!""); ; thread = Thread(target = target); thread.daemon = True; thread.start(). time.sleep(2); ```. This is achieved through the RAII class `PythonEnvironment::gil`, which is meant to protect the boundaries between c++ and python code as follows:. ```c++; // some function called from the c++ side; {; PythonEnvironment::gil lock;; // safely call python functions here: the GIL ; // is acquired and released automatically; }; ```. The trick is that the GIL should also be released prior to the first lock so that the last object to unlock the GIL gives an opportunity to python threads to run, if any. Otherwise, the main thread still holds the GIL after the last lock is destroyed, and python threads never get to run. This is a work in progress, but should be pretty harmless and easy to disable if something goes wrong. EDIT: it does not work on this branch :-/; ___________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/326
https://github.com/sofa-framework/sofa/pull/326:1546,Availability,failure,failures,1546,"Hello all,. This PR adds (hopefully) proper GIL handling to `SofaPython`, so that it is possible to run python threads concurrently with the main Sofa program. It enables the following scene to run concurrently with the main program: . ```python; def createScene(node):. from threading import Thread; import time; ; def target():; while True:; time.sleep(1); print(""it's aliiive!""); ; thread = Thread(target = target); thread.daemon = True; thread.start(). time.sleep(2); ```. This is achieved through the RAII class `PythonEnvironment::gil`, which is meant to protect the boundaries between c++ and python code as follows:. ```c++; // some function called from the c++ side; {; PythonEnvironment::gil lock;; // safely call python functions here: the GIL ; // is acquired and released automatically; }; ```. The trick is that the GIL should also be released prior to the first lock so that the last object to unlock the GIL gives an opportunity to python threads to run, if any. Otherwise, the main thread still holds the GIL after the last lock is destroyed, and python threads never get to run. This is a work in progress, but should be pretty harmless and easy to disable if something goes wrong. EDIT: it does not work on this branch :-/; ___________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/326
https://github.com/sofa-framework/sofa/pull/326:776,Deployability,release,released,776,"Hello all,. This PR adds (hopefully) proper GIL handling to `SofaPython`, so that it is possible to run python threads concurrently with the main Sofa program. It enables the following scene to run concurrently with the main program: . ```python; def createScene(node):. from threading import Thread; import time; ; def target():; while True:; time.sleep(1); print(""it's aliiive!""); ; thread = Thread(target = target); thread.daemon = True; thread.start(). time.sleep(2); ```. This is achieved through the RAII class `PythonEnvironment::gil`, which is meant to protect the boundaries between c++ and python code as follows:. ```c++; // some function called from the c++ side; {; PythonEnvironment::gil lock;; // safely call python functions here: the GIL ; // is acquired and released automatically; }; ```. The trick is that the GIL should also be released prior to the first lock so that the last object to unlock the GIL gives an opportunity to python threads to run, if any. Otherwise, the main thread still holds the GIL after the last lock is destroyed, and python threads never get to run. This is a work in progress, but should be pretty harmless and easy to disable if something goes wrong. EDIT: it does not work on this branch :-/; ___________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/326
https://github.com/sofa-framework/sofa/pull/326:849,Deployability,release,released,849,"Hello all,. This PR adds (hopefully) proper GIL handling to `SofaPython`, so that it is possible to run python threads concurrently with the main Sofa program. It enables the following scene to run concurrently with the main program: . ```python; def createScene(node):. from threading import Thread; import time; ; def target():; while True:; time.sleep(1); print(""it's aliiive!""); ; thread = Thread(target = target); thread.daemon = True; thread.start(). time.sleep(2); ```. This is achieved through the RAII class `PythonEnvironment::gil`, which is meant to protect the boundaries between c++ and python code as follows:. ```c++; // some function called from the c++ side; {; PythonEnvironment::gil lock;; // safely call python functions here: the GIL ; // is acquired and released automatically; }; ```. The trick is that the GIL should also be released prior to the first lock so that the last object to unlock the GIL gives an opportunity to python threads to run, if any. Otherwise, the main thread still holds the GIL after the last lock is destroyed, and python threads never get to run. This is a work in progress, but should be pretty harmless and easy to disable if something goes wrong. EDIT: it does not work on this branch :-/; ___________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/326
https://github.com/sofa-framework/sofa/pull/326:1339,Integrability,message,message,1339,"Hello all,. This PR adds (hopefully) proper GIL handling to `SofaPython`, so that it is possible to run python threads concurrently with the main Sofa program. It enables the following scene to run concurrently with the main program: . ```python; def createScene(node):. from threading import Thread; import time; ; def target():; while True:; time.sleep(1); print(""it's aliiive!""); ; thread = Thread(target = target); thread.daemon = True; thread.start(). time.sleep(2); ```. This is achieved through the RAII class `PythonEnvironment::gil`, which is meant to protect the boundaries between c++ and python code as follows:. ```c++; // some function called from the c++ side; {; PythonEnvironment::gil lock;; // safely call python functions here: the GIL ; // is acquired and released automatically; }; ```. The trick is that the GIL should also be released prior to the first lock so that the last object to unlock the GIL gives an opportunity to python threads to run, if any. Otherwise, the main thread still holds the GIL after the last lock is destroyed, and python threads never get to run. This is a work in progress, but should be pretty harmless and easy to disable if something goes wrong. EDIT: it does not work on this branch :-/; ___________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/326
https://github.com/sofa-framework/sofa/pull/326:119,Performance,concurren,concurrently,119,"Hello all,. This PR adds (hopefully) proper GIL handling to `SofaPython`, so that it is possible to run python threads concurrently with the main Sofa program. It enables the following scene to run concurrently with the main program: . ```python; def createScene(node):. from threading import Thread; import time; ; def target():; while True:; time.sleep(1); print(""it's aliiive!""); ; thread = Thread(target = target); thread.daemon = True; thread.start(). time.sleep(2); ```. This is achieved through the RAII class `PythonEnvironment::gil`, which is meant to protect the boundaries between c++ and python code as follows:. ```c++; // some function called from the c++ side; {; PythonEnvironment::gil lock;; // safely call python functions here: the GIL ; // is acquired and released automatically; }; ```. The trick is that the GIL should also be released prior to the first lock so that the last object to unlock the GIL gives an opportunity to python threads to run, if any. Otherwise, the main thread still holds the GIL after the last lock is destroyed, and python threads never get to run. This is a work in progress, but should be pretty harmless and easy to disable if something goes wrong. EDIT: it does not work on this branch :-/; ___________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/326
https://github.com/sofa-framework/sofa/pull/326:198,Performance,concurren,concurrently,198,"Hello all,. This PR adds (hopefully) proper GIL handling to `SofaPython`, so that it is possible to run python threads concurrently with the main Sofa program. It enables the following scene to run concurrently with the main program: . ```python; def createScene(node):. from threading import Thread; import time; ; def target():; while True:; time.sleep(1); print(""it's aliiive!""); ; thread = Thread(target = target); thread.daemon = True; thread.start(). time.sleep(2); ```. This is achieved through the RAII class `PythonEnvironment::gil`, which is meant to protect the boundaries between c++ and python code as follows:. ```c++; // some function called from the c++ side; {; PythonEnvironment::gil lock;; // safely call python functions here: the GIL ; // is acquired and released automatically; }; ```. The trick is that the GIL should also be released prior to the first lock so that the last object to unlock the GIL gives an opportunity to python threads to run, if any. Otherwise, the main thread still holds the GIL after the last lock is destroyed, and python threads never get to run. This is a work in progress, but should be pretty harmless and easy to disable if something goes wrong. EDIT: it does not work on this branch :-/; ___________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/326
https://github.com/sofa-framework/sofa/pull/326:712,Safety,safe,safely,712,"Hello all,. This PR adds (hopefully) proper GIL handling to `SofaPython`, so that it is possible to run python threads concurrently with the main Sofa program. It enables the following scene to run concurrently with the main program: . ```python; def createScene(node):. from threading import Thread; import time; ; def target():; while True:; time.sleep(1); print(""it's aliiive!""); ; thread = Thread(target = target); thread.daemon = True; thread.start(). time.sleep(2); ```. This is achieved through the RAII class `PythonEnvironment::gil`, which is meant to protect the boundaries between c++ and python code as follows:. ```c++; // some function called from the c++ side; {; PythonEnvironment::gil lock;; // safely call python functions here: the GIL ; // is acquired and released automatically; }; ```. The trick is that the GIL should also be released prior to the first lock so that the last object to unlock the GIL gives an opportunity to python threads to run, if any. Otherwise, the main thread still holds the GIL after the last lock is destroyed, and python threads never get to run. This is a work in progress, but should be pretty harmless and easy to disable if something goes wrong. EDIT: it does not work on this branch :-/; ___________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/326
https://github.com/sofa-framework/sofa/pull/326:1491,Testability,test,test,1491,"Hello all,. This PR adds (hopefully) proper GIL handling to `SofaPython`, so that it is possible to run python threads concurrently with the main Sofa program. It enables the following scene to run concurrently with the main program: . ```python; def createScene(node):. from threading import Thread; import time; ; def target():; while True:; time.sleep(1); print(""it's aliiive!""); ; thread = Thread(target = target); thread.daemon = True; thread.start(). time.sleep(2); ```. This is achieved through the RAII class `PythonEnvironment::gil`, which is meant to protect the boundaries between c++ and python code as follows:. ```c++; // some function called from the c++ side; {; PythonEnvironment::gil lock;; // safely call python functions here: the GIL ; // is acquired and released automatically; }; ```. The trick is that the GIL should also be released prior to the first lock so that the last object to unlock the GIL gives an opportunity to python threads to run, if any. Otherwise, the main thread still holds the GIL after the last lock is destroyed, and python threads never get to run. This is a work in progress, but should be pretty harmless and easy to disable if something goes wrong. EDIT: it does not work on this branch :-/; ___________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/326
https://github.com/sofa-framework/sofa/pull/326:1541,Testability,test,test,1541,"Hello all,. This PR adds (hopefully) proper GIL handling to `SofaPython`, so that it is possible to run python threads concurrently with the main Sofa program. It enables the following scene to run concurrently with the main program: . ```python; def createScene(node):. from threading import Thread; import time; ; def target():; while True:; time.sleep(1); print(""it's aliiive!""); ; thread = Thread(target = target); thread.daemon = True; thread.start(). time.sleep(2); ```. This is achieved through the RAII class `PythonEnvironment::gil`, which is meant to protect the boundaries between c++ and python code as follows:. ```c++; // some function called from the c++ side; {; PythonEnvironment::gil lock;; // safely call python functions here: the GIL ; // is acquired and released automatically; }; ```. The trick is that the GIL should also be released prior to the first lock so that the last object to unlock the GIL gives an opportunity to python threads to run, if any. Otherwise, the main thread still holds the GIL after the last lock is destroyed, and python threads never get to run. This is a work in progress, but should be pretty harmless and easy to disable if something goes wrong. EDIT: it does not work on this branch :-/; ___________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/326
https://github.com/sofa-framework/sofa/pull/327:397,Availability,failure,failures,397,non-ASCII chars caused problems in some platform when compiling; Discussed in [Issue323](https://github.com/sofa-framework/sofa/issues/323). ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/327
https://github.com/sofa-framework/sofa/pull/327:447,Availability,failure,failures,447,non-ASCII chars caused problems in some platform when compiling; Discussed in [Issue323](https://github.com/sofa-framework/sofa/issues/323). ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/327
https://github.com/sofa-framework/sofa/pull/327:240,Integrability,message,message,240,non-ASCII chars caused problems in some platform when compiling; Discussed in [Issue323](https://github.com/sofa-framework/sofa/issues/323). ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/327
https://github.com/sofa-framework/sofa/pull/327:392,Testability,test,test,392,non-ASCII chars caused problems in some platform when compiling; Discussed in [Issue323](https://github.com/sofa-framework/sofa/issues/323). ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/327
https://github.com/sofa-framework/sofa/pull/327:442,Testability,test,test,442,non-ASCII chars caused problems in some platform when compiling; Discussed in [Issue323](https://github.com/sofa-framework/sofa/issues/323). ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/327
https://github.com/sofa-framework/sofa/pull/328:960,Availability,failure,failures,960,"This PR change the behavior of helper::vector to make it closer to svector; - helper::vector can parse space separated values **and** [,] separated values; - helper::vector now serialize into [,] separated string; - helper::Vec<Type> can also parse space separated values **and** [,] separated values. As a consequence the serialization/deserialization on the python side (SofaPython plugin) need to be updated accordingly. Now the repr() of a python object is used to serialize it into a string in the Node.createObject() method if it is not a string already. Later on, code can be cleaned-up:; - no more cat/concat/listToStr() calls needed in python code; - no more helper::svector needed in c++ code. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/328
https://github.com/sofa-framework/sofa/pull/328:1010,Availability,failure,failures,1010,"This PR change the behavior of helper::vector to make it closer to svector; - helper::vector can parse space separated values **and** [,] separated values; - helper::vector now serialize into [,] separated string; - helper::Vec<Type> can also parse space separated values **and** [,] separated values. As a consequence the serialization/deserialization on the python side (SofaPython plugin) need to be updated accordingly. Now the repr() of a python object is used to serialize it into a string in the Node.createObject() method if it is not a string already. Later on, code can be cleaned-up:; - no more cat/concat/listToStr() calls needed in python code; - no more helper::svector needed in c++ code. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/328
https://github.com/sofa-framework/sofa/pull/328:403,Deployability,update,updated,403,"This PR change the behavior of helper::vector to make it closer to svector; - helper::vector can parse space separated values **and** [,] separated values; - helper::vector now serialize into [,] separated string; - helper::Vec<Type> can also parse space separated values **and** [,] separated values. As a consequence the serialization/deserialization on the python side (SofaPython plugin) need to be updated accordingly. Now the repr() of a python object is used to serialize it into a string in the Node.createObject() method if it is not a string already. Later on, code can be cleaned-up:; - no more cat/concat/listToStr() calls needed in python code; - no more helper::svector needed in c++ code. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/328
https://github.com/sofa-framework/sofa/pull/328:803,Integrability,message,message,803,"This PR change the behavior of helper::vector to make it closer to svector; - helper::vector can parse space separated values **and** [,] separated values; - helper::vector now serialize into [,] separated string; - helper::Vec<Type> can also parse space separated values **and** [,] separated values. As a consequence the serialization/deserialization on the python side (SofaPython plugin) need to be updated accordingly. Now the repr() of a python object is used to serialize it into a string in the Node.createObject() method if it is not a string already. Later on, code can be cleaned-up:; - no more cat/concat/listToStr() calls needed in python code; - no more helper::svector needed in c++ code. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/328
https://github.com/sofa-framework/sofa/pull/328:384,Modifiability,plugin,plugin,384,"This PR change the behavior of helper::vector to make it closer to svector; - helper::vector can parse space separated values **and** [,] separated values; - helper::vector now serialize into [,] separated string; - helper::Vec<Type> can also parse space separated values **and** [,] separated values. As a consequence the serialization/deserialization on the python side (SofaPython plugin) need to be updated accordingly. Now the repr() of a python object is used to serialize it into a string in the Node.createObject() method if it is not a string already. Later on, code can be cleaned-up:; - no more cat/concat/listToStr() calls needed in python code; - no more helper::svector needed in c++ code. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/328
https://github.com/sofa-framework/sofa/pull/328:955,Testability,test,test,955,"This PR change the behavior of helper::vector to make it closer to svector; - helper::vector can parse space separated values **and** [,] separated values; - helper::vector now serialize into [,] separated string; - helper::Vec<Type> can also parse space separated values **and** [,] separated values. As a consequence the serialization/deserialization on the python side (SofaPython plugin) need to be updated accordingly. Now the repr() of a python object is used to serialize it into a string in the Node.createObject() method if it is not a string already. Later on, code can be cleaned-up:; - no more cat/concat/listToStr() calls needed in python code; - no more helper::svector needed in c++ code. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/328
https://github.com/sofa-framework/sofa/pull/328:1005,Testability,test,test,1005,"This PR change the behavior of helper::vector to make it closer to svector; - helper::vector can parse space separated values **and** [,] separated values; - helper::vector now serialize into [,] separated string; - helper::Vec<Type> can also parse space separated values **and** [,] separated values. As a consequence the serialization/deserialization on the python side (SofaPython plugin) need to be updated accordingly. Now the repr() of a python object is used to serialize it into a string in the Node.createObject() method if it is not a string already. Later on, code can be cleaned-up:; - no more cat/concat/listToStr() calls needed in python code; - no more helper::svector needed in c++ code. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/328
https://github.com/sofa-framework/sofa/pull/329:2568,Availability,failure,failures,2568," happen when loading a scene at level '17.06' on runSofa at level '17.12' (our master branch) with a BoxStiffSpringForceField (that could behave differently because of PR #290); ```; [INFO] [SceneChecker] The 'APIVersion' directive is missing in the current scene. ; Switching to the APIVersion level '17.06' ; [INFO] [SceneChecker] Validating a scene: ; - APIVersion checking: 1 ; - RequiredPlugin checking: 1; [WARNING] [BoxStiffSpringForceField(Spring)] BoxStiffSpringForceField have changed since 17.06. To use the old behavior you need to set parameter 'forceOldBehavior=true'; ```. The nice thing with the approach is that we can write custom condition to rise those messages. Here is a simple example (to handle PR315 & an imaginary deprecation of a component):; ```cpp; addHookInChangeSet(""17.06"", [](Base* o){; if(o->getClassName() == ""RestShapeSpringsForceField"" && o->findData(""external_rest_shape"")->isSet()); msg_warning(o) << ""RestShapeSpringsForceField have changed since 17.06. The parameter 'external_rest_shape' is now a Link. To fix your scene you need to add and '@' in front of the provided path. See PR#315"" ;; }) ;. addHookInChangeSet(""17.06"", [](Base* o){; if(o->getClassName() == ""TheComponentWeWantToRemove"" ); msg_warning(o) << ""TheComponentWewantToRemove is deprecated since sofa 17.06. It have been replaced by TheSuperComponent. #See PR318"" ;; }) ;; }; ```. Everything is in SceneChecker.cpp/SceneChecker.h and APIVersion.* ...the other files in the changes are ; in fact the content of PR #314; ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/329
https://github.com/sofa-framework/sofa/pull/329:2618,Availability,failure,failures,2618," happen when loading a scene at level '17.06' on runSofa at level '17.12' (our master branch) with a BoxStiffSpringForceField (that could behave differently because of PR #290); ```; [INFO] [SceneChecker] The 'APIVersion' directive is missing in the current scene. ; Switching to the APIVersion level '17.06' ; [INFO] [SceneChecker] Validating a scene: ; - APIVersion checking: 1 ; - RequiredPlugin checking: 1; [WARNING] [BoxStiffSpringForceField(Spring)] BoxStiffSpringForceField have changed since 17.06. To use the old behavior you need to set parameter 'forceOldBehavior=true'; ```. The nice thing with the approach is that we can write custom condition to rise those messages. Here is a simple example (to handle PR315 & an imaginary deprecation of a component):; ```cpp; addHookInChangeSet(""17.06"", [](Base* o){; if(o->getClassName() == ""RestShapeSpringsForceField"" && o->findData(""external_rest_shape"")->isSet()); msg_warning(o) << ""RestShapeSpringsForceField have changed since 17.06. The parameter 'external_rest_shape' is now a Link. To fix your scene you need to add and '@' in front of the provided path. See PR#315"" ;; }) ;. addHookInChangeSet(""17.06"", [](Base* o){; if(o->getClassName() == ""TheComponentWeWantToRemove"" ); msg_warning(o) << ""TheComponentWewantToRemove is deprecated since sofa 17.06. It have been replaced by TheSuperComponent. #See PR318"" ;; }) ;; }; ```. Everything is in SceneChecker.cpp/SceneChecker.h and APIVersion.* ...the other files in the changes are ; in fact the content of PR #314; ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/329
https://github.com/sofa-framework/sofa/pull/329:703,Integrability,message,messages,703,"(THIS WAS PR 322). Currently in Sofa there is only rudimentary way to handle component evolution (change of implementation, change of parameters, deprecation) and report the change to our users. . In this PR I implemented a mecanism to do that. ; The basic idea is to have in scene a component that specify for which version of Sofa the scene have been tested. Here is how it looks in the scene:; ```xml; <APIVersion level='17.06'/>; ```; If the scene does not have this component the level is automatically set to 17.06 so existing scene will just work as they should. Now what happens if a scene with a given level is loaded in a sofa that have a different level (eg: '17.12'). In this case dedicated messages are printed to warn user things may go wrong. . Here is an example of what happen when loading a scene at level '17.06' on runSofa at level '17.12' (our master branch) with a BoxStiffSpringForceField (that could behave differently because of PR #290); ```; [INFO] [SceneChecker] The 'APIVersion' directive is missing in the current scene. ; Switching to the APIVersion level '17.06' ; [INFO] [SceneChecker] Validating a scene: ; - APIVersion checking: 1 ; - RequiredPlugin checking: 1; [WARNING] [BoxStiffSpringForceField(Spring)] BoxStiffSpringForceField have changed since 17.06. To use the old behavior you need to set parameter 'forceOldBehavior=true'; ```. The nice thing with the approach is that we can write custom condition to rise those messages. Here is a simple example (to handle PR315 & an imaginary deprecation of a component):; ```cpp; addHookInChangeSet(""17.06"", [](Base* o){; if(o->getClassName() == ""RestShapeSpringsForceField"" && o->findData(""external_rest_shape"")->isSet()); msg_warning(o) << ""RestShapeSpringsForceField have changed since 17.06. The parameter 'external_rest_shape' is now a Link. To fix your scene you need to add and '@' in front of the provided path. See PR#315"" ;; }) ;. addHookInChangeSet(""17.06"", [](Base* o){; if(o->getClassName() == ""TheCompon",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/329
https://github.com/sofa-framework/sofa/pull/329:1459,Integrability,message,messages,1459,"el='17.06'/>; ```; If the scene does not have this component the level is automatically set to 17.06 so existing scene will just work as they should. Now what happens if a scene with a given level is loaded in a sofa that have a different level (eg: '17.12'). In this case dedicated messages are printed to warn user things may go wrong. . Here is an example of what happen when loading a scene at level '17.06' on runSofa at level '17.12' (our master branch) with a BoxStiffSpringForceField (that could behave differently because of PR #290); ```; [INFO] [SceneChecker] The 'APIVersion' directive is missing in the current scene. ; Switching to the APIVersion level '17.06' ; [INFO] [SceneChecker] Validating a scene: ; - APIVersion checking: 1 ; - RequiredPlugin checking: 1; [WARNING] [BoxStiffSpringForceField(Spring)] BoxStiffSpringForceField have changed since 17.06. To use the old behavior you need to set parameter 'forceOldBehavior=true'; ```. The nice thing with the approach is that we can write custom condition to rise those messages. Here is a simple example (to handle PR315 & an imaginary deprecation of a component):; ```cpp; addHookInChangeSet(""17.06"", [](Base* o){; if(o->getClassName() == ""RestShapeSpringsForceField"" && o->findData(""external_rest_shape"")->isSet()); msg_warning(o) << ""RestShapeSpringsForceField have changed since 17.06. The parameter 'external_rest_shape' is now a Link. To fix your scene you need to add and '@' in front of the provided path. See PR#315"" ;; }) ;. addHookInChangeSet(""17.06"", [](Base* o){; if(o->getClassName() == ""TheComponentWeWantToRemove"" ); msg_warning(o) << ""TheComponentWewantToRemove is deprecated since sofa 17.06. It have been replaced by TheSuperComponent. #See PR318"" ;; }) ;; }; ```. Everything is in SceneChecker.cpp/SceneChecker.h and APIVersion.* ...the other files in the changes are ; in fact the content of PR #314; ______________________________________________________; <!--- Please leave this at the end of your message --",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/329
https://github.com/sofa-framework/sofa/pull/329:2411,Integrability,message,message,2411," happen when loading a scene at level '17.06' on runSofa at level '17.12' (our master branch) with a BoxStiffSpringForceField (that could behave differently because of PR #290); ```; [INFO] [SceneChecker] The 'APIVersion' directive is missing in the current scene. ; Switching to the APIVersion level '17.06' ; [INFO] [SceneChecker] Validating a scene: ; - APIVersion checking: 1 ; - RequiredPlugin checking: 1; [WARNING] [BoxStiffSpringForceField(Spring)] BoxStiffSpringForceField have changed since 17.06. To use the old behavior you need to set parameter 'forceOldBehavior=true'; ```. The nice thing with the approach is that we can write custom condition to rise those messages. Here is a simple example (to handle PR315 & an imaginary deprecation of a component):; ```cpp; addHookInChangeSet(""17.06"", [](Base* o){; if(o->getClassName() == ""RestShapeSpringsForceField"" && o->findData(""external_rest_shape"")->isSet()); msg_warning(o) << ""RestShapeSpringsForceField have changed since 17.06. The parameter 'external_rest_shape' is now a Link. To fix your scene you need to add and '@' in front of the provided path. See PR#315"" ;; }) ;. addHookInChangeSet(""17.06"", [](Base* o){; if(o->getClassName() == ""TheComponentWeWantToRemove"" ); msg_warning(o) << ""TheComponentWewantToRemove is deprecated since sofa 17.06. It have been replaced by TheSuperComponent. #See PR318"" ;; }) ;; }; ```. Everything is in SceneChecker.cpp/SceneChecker.h and APIVersion.* ...the other files in the changes are ; in fact the content of PR #314; ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/329
https://github.com/sofa-framework/sofa/pull/329:620,Performance,load,loaded,620,"(THIS WAS PR 322). Currently in Sofa there is only rudimentary way to handle component evolution (change of implementation, change of parameters, deprecation) and report the change to our users. . In this PR I implemented a mecanism to do that. ; The basic idea is to have in scene a component that specify for which version of Sofa the scene have been tested. Here is how it looks in the scene:; ```xml; <APIVersion level='17.06'/>; ```; If the scene does not have this component the level is automatically set to 17.06 so existing scene will just work as they should. Now what happens if a scene with a given level is loaded in a sofa that have a different level (eg: '17.12'). In this case dedicated messages are printed to warn user things may go wrong. . Here is an example of what happen when loading a scene at level '17.06' on runSofa at level '17.12' (our master branch) with a BoxStiffSpringForceField (that could behave differently because of PR #290); ```; [INFO] [SceneChecker] The 'APIVersion' directive is missing in the current scene. ; Switching to the APIVersion level '17.06' ; [INFO] [SceneChecker] Validating a scene: ; - APIVersion checking: 1 ; - RequiredPlugin checking: 1; [WARNING] [BoxStiffSpringForceField(Spring)] BoxStiffSpringForceField have changed since 17.06. To use the old behavior you need to set parameter 'forceOldBehavior=true'; ```. The nice thing with the approach is that we can write custom condition to rise those messages. Here is a simple example (to handle PR315 & an imaginary deprecation of a component):; ```cpp; addHookInChangeSet(""17.06"", [](Base* o){; if(o->getClassName() == ""RestShapeSpringsForceField"" && o->findData(""external_rest_shape"")->isSet()); msg_warning(o) << ""RestShapeSpringsForceField have changed since 17.06. The parameter 'external_rest_shape' is now a Link. To fix your scene you need to add and '@' in front of the provided path. See PR#315"" ;; }) ;. addHookInChangeSet(""17.06"", [](Base* o){; if(o->getClassName() == ""TheCompon",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/329
https://github.com/sofa-framework/sofa/pull/329:799,Performance,load,loading,799,"(THIS WAS PR 322). Currently in Sofa there is only rudimentary way to handle component evolution (change of implementation, change of parameters, deprecation) and report the change to our users. . In this PR I implemented a mecanism to do that. ; The basic idea is to have in scene a component that specify for which version of Sofa the scene have been tested. Here is how it looks in the scene:; ```xml; <APIVersion level='17.06'/>; ```; If the scene does not have this component the level is automatically set to 17.06 so existing scene will just work as they should. Now what happens if a scene with a given level is loaded in a sofa that have a different level (eg: '17.12'). In this case dedicated messages are printed to warn user things may go wrong. . Here is an example of what happen when loading a scene at level '17.06' on runSofa at level '17.12' (our master branch) with a BoxStiffSpringForceField (that could behave differently because of PR #290); ```; [INFO] [SceneChecker] The 'APIVersion' directive is missing in the current scene. ; Switching to the APIVersion level '17.06' ; [INFO] [SceneChecker] Validating a scene: ; - APIVersion checking: 1 ; - RequiredPlugin checking: 1; [WARNING] [BoxStiffSpringForceField(Spring)] BoxStiffSpringForceField have changed since 17.06. To use the old behavior you need to set parameter 'forceOldBehavior=true'; ```. The nice thing with the approach is that we can write custom condition to rise those messages. Here is a simple example (to handle PR315 & an imaginary deprecation of a component):; ```cpp; addHookInChangeSet(""17.06"", [](Base* o){; if(o->getClassName() == ""RestShapeSpringsForceField"" && o->findData(""external_rest_shape"")->isSet()); msg_warning(o) << ""RestShapeSpringsForceField have changed since 17.06. The parameter 'external_rest_shape' is now a Link. To fix your scene you need to add and '@' in front of the provided path. See PR#315"" ;; }) ;. addHookInChangeSet(""17.06"", [](Base* o){; if(o->getClassName() == ""TheCompon",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/329
https://github.com/sofa-framework/sofa/pull/329:1119,Security,Validat,Validating,1119,"ers. . In this PR I implemented a mecanism to do that. ; The basic idea is to have in scene a component that specify for which version of Sofa the scene have been tested. Here is how it looks in the scene:; ```xml; <APIVersion level='17.06'/>; ```; If the scene does not have this component the level is automatically set to 17.06 so existing scene will just work as they should. Now what happens if a scene with a given level is loaded in a sofa that have a different level (eg: '17.12'). In this case dedicated messages are printed to warn user things may go wrong. . Here is an example of what happen when loading a scene at level '17.06' on runSofa at level '17.12' (our master branch) with a BoxStiffSpringForceField (that could behave differently because of PR #290); ```; [INFO] [SceneChecker] The 'APIVersion' directive is missing in the current scene. ; Switching to the APIVersion level '17.06' ; [INFO] [SceneChecker] Validating a scene: ; - APIVersion checking: 1 ; - RequiredPlugin checking: 1; [WARNING] [BoxStiffSpringForceField(Spring)] BoxStiffSpringForceField have changed since 17.06. To use the old behavior you need to set parameter 'forceOldBehavior=true'; ```. The nice thing with the approach is that we can write custom condition to rise those messages. Here is a simple example (to handle PR315 & an imaginary deprecation of a component):; ```cpp; addHookInChangeSet(""17.06"", [](Base* o){; if(o->getClassName() == ""RestShapeSpringsForceField"" && o->findData(""external_rest_shape"")->isSet()); msg_warning(o) << ""RestShapeSpringsForceField have changed since 17.06. The parameter 'external_rest_shape' is now a Link. To fix your scene you need to add and '@' in front of the provided path. See PR#315"" ;; }) ;. addHookInChangeSet(""17.06"", [](Base* o){; if(o->getClassName() == ""TheComponentWeWantToRemove"" ); msg_warning(o) << ""TheComponentWewantToRemove is deprecated since sofa 17.06. It have been replaced by TheSuperComponent. #See PR318"" ;; }) ;; }; ```. Everything is in ",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/329
https://github.com/sofa-framework/sofa/pull/329:353,Testability,test,tested,353,"(THIS WAS PR 322). Currently in Sofa there is only rudimentary way to handle component evolution (change of implementation, change of parameters, deprecation) and report the change to our users. . In this PR I implemented a mecanism to do that. ; The basic idea is to have in scene a component that specify for which version of Sofa the scene have been tested. Here is how it looks in the scene:; ```xml; <APIVersion level='17.06'/>; ```; If the scene does not have this component the level is automatically set to 17.06 so existing scene will just work as they should. Now what happens if a scene with a given level is loaded in a sofa that have a different level (eg: '17.12'). In this case dedicated messages are printed to warn user things may go wrong. . Here is an example of what happen when loading a scene at level '17.06' on runSofa at level '17.12' (our master branch) with a BoxStiffSpringForceField (that could behave differently because of PR #290); ```; [INFO] [SceneChecker] The 'APIVersion' directive is missing in the current scene. ; Switching to the APIVersion level '17.06' ; [INFO] [SceneChecker] Validating a scene: ; - APIVersion checking: 1 ; - RequiredPlugin checking: 1; [WARNING] [BoxStiffSpringForceField(Spring)] BoxStiffSpringForceField have changed since 17.06. To use the old behavior you need to set parameter 'forceOldBehavior=true'; ```. The nice thing with the approach is that we can write custom condition to rise those messages. Here is a simple example (to handle PR315 & an imaginary deprecation of a component):; ```cpp; addHookInChangeSet(""17.06"", [](Base* o){; if(o->getClassName() == ""RestShapeSpringsForceField"" && o->findData(""external_rest_shape"")->isSet()); msg_warning(o) << ""RestShapeSpringsForceField have changed since 17.06. The parameter 'external_rest_shape' is now a Link. To fix your scene you need to add and '@' in front of the provided path. See PR#315"" ;; }) ;. addHookInChangeSet(""17.06"", [](Base* o){; if(o->getClassName() == ""TheCompon",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/329
https://github.com/sofa-framework/sofa/pull/329:2563,Testability,test,test,2563," happen when loading a scene at level '17.06' on runSofa at level '17.12' (our master branch) with a BoxStiffSpringForceField (that could behave differently because of PR #290); ```; [INFO] [SceneChecker] The 'APIVersion' directive is missing in the current scene. ; Switching to the APIVersion level '17.06' ; [INFO] [SceneChecker] Validating a scene: ; - APIVersion checking: 1 ; - RequiredPlugin checking: 1; [WARNING] [BoxStiffSpringForceField(Spring)] BoxStiffSpringForceField have changed since 17.06. To use the old behavior you need to set parameter 'forceOldBehavior=true'; ```. The nice thing with the approach is that we can write custom condition to rise those messages. Here is a simple example (to handle PR315 & an imaginary deprecation of a component):; ```cpp; addHookInChangeSet(""17.06"", [](Base* o){; if(o->getClassName() == ""RestShapeSpringsForceField"" && o->findData(""external_rest_shape"")->isSet()); msg_warning(o) << ""RestShapeSpringsForceField have changed since 17.06. The parameter 'external_rest_shape' is now a Link. To fix your scene you need to add and '@' in front of the provided path. See PR#315"" ;; }) ;. addHookInChangeSet(""17.06"", [](Base* o){; if(o->getClassName() == ""TheComponentWeWantToRemove"" ); msg_warning(o) << ""TheComponentWewantToRemove is deprecated since sofa 17.06. It have been replaced by TheSuperComponent. #See PR318"" ;; }) ;; }; ```. Everything is in SceneChecker.cpp/SceneChecker.h and APIVersion.* ...the other files in the changes are ; in fact the content of PR #314; ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/329
https://github.com/sofa-framework/sofa/pull/329:2613,Testability,test,test,2613," happen when loading a scene at level '17.06' on runSofa at level '17.12' (our master branch) with a BoxStiffSpringForceField (that could behave differently because of PR #290); ```; [INFO] [SceneChecker] The 'APIVersion' directive is missing in the current scene. ; Switching to the APIVersion level '17.06' ; [INFO] [SceneChecker] Validating a scene: ; - APIVersion checking: 1 ; - RequiredPlugin checking: 1; [WARNING] [BoxStiffSpringForceField(Spring)] BoxStiffSpringForceField have changed since 17.06. To use the old behavior you need to set parameter 'forceOldBehavior=true'; ```. The nice thing with the approach is that we can write custom condition to rise those messages. Here is a simple example (to handle PR315 & an imaginary deprecation of a component):; ```cpp; addHookInChangeSet(""17.06"", [](Base* o){; if(o->getClassName() == ""RestShapeSpringsForceField"" && o->findData(""external_rest_shape"")->isSet()); msg_warning(o) << ""RestShapeSpringsForceField have changed since 17.06. The parameter 'external_rest_shape' is now a Link. To fix your scene you need to add and '@' in front of the provided path. See PR#315"" ;; }) ;. addHookInChangeSet(""17.06"", [](Base* o){; if(o->getClassName() == ""TheComponentWeWantToRemove"" ); msg_warning(o) << ""TheComponentWewantToRemove is deprecated since sofa 17.06. It have been replaced by TheSuperComponent. #See PR318"" ;; }) ;; }; ```. Everything is in SceneChecker.cpp/SceneChecker.h and APIVersion.* ...the other files in the changes are ; in fact the content of PR #314; ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/329
https://github.com/sofa-framework/sofa/pull/329:1479,Usability,simpl,simple,1479,"sting scene will just work as they should. Now what happens if a scene with a given level is loaded in a sofa that have a different level (eg: '17.12'). In this case dedicated messages are printed to warn user things may go wrong. . Here is an example of what happen when loading a scene at level '17.06' on runSofa at level '17.12' (our master branch) with a BoxStiffSpringForceField (that could behave differently because of PR #290); ```; [INFO] [SceneChecker] The 'APIVersion' directive is missing in the current scene. ; Switching to the APIVersion level '17.06' ; [INFO] [SceneChecker] Validating a scene: ; - APIVersion checking: 1 ; - RequiredPlugin checking: 1; [WARNING] [BoxStiffSpringForceField(Spring)] BoxStiffSpringForceField have changed since 17.06. To use the old behavior you need to set parameter 'forceOldBehavior=true'; ```. The nice thing with the approach is that we can write custom condition to rise those messages. Here is a simple example (to handle PR315 & an imaginary deprecation of a component):; ```cpp; addHookInChangeSet(""17.06"", [](Base* o){; if(o->getClassName() == ""RestShapeSpringsForceField"" && o->findData(""external_rest_shape"")->isSet()); msg_warning(o) << ""RestShapeSpringsForceField have changed since 17.06. The parameter 'external_rest_shape' is now a Link. To fix your scene you need to add and '@' in front of the provided path. See PR#315"" ;; }) ;. addHookInChangeSet(""17.06"", [](Base* o){; if(o->getClassName() == ""TheComponentWeWantToRemove"" ); msg_warning(o) << ""TheComponentWewantToRemove is deprecated since sofa 17.06. It have been replaced by TheSuperComponent. #See PR318"" ;; }) ;; }; ```. Everything is in SceneChecker.cpp/SceneChecker.h and APIVersion.* ...the other files in the changes are ; in fact the content of PR #314; ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/329
https://github.com/sofa-framework/sofa/pull/330:982,Availability,failure,failures,982,"This PR changes the behavior of helper::vector to make it closer to svector; - helper::vector can parse space separated values **and** [,] separated values; - helper::vector now serialize into [,] separated string; - helper::fixed_array (and so helper::Vec<Type>) can also parse space separated values **and** [,] separated values. As a consequence the serialization/deserialization on the python side (SofaPython plugin) is updated accordingly. Now the repr() of a python object is used to serialize it into a string in the Node.createObject() method if it is not a string already. Later on, code can be cleaned-up:; - no more cat/concat/listToStr() calls needed in python code; - no more helper::svector needed in c++ code. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/330
https://github.com/sofa-framework/sofa/pull/330:1032,Availability,failure,failures,1032,"This PR changes the behavior of helper::vector to make it closer to svector; - helper::vector can parse space separated values **and** [,] separated values; - helper::vector now serialize into [,] separated string; - helper::fixed_array (and so helper::Vec<Type>) can also parse space separated values **and** [,] separated values. As a consequence the serialization/deserialization on the python side (SofaPython plugin) is updated accordingly. Now the repr() of a python object is used to serialize it into a string in the Node.createObject() method if it is not a string already. Later on, code can be cleaned-up:; - no more cat/concat/listToStr() calls needed in python code; - no more helper::svector needed in c++ code. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/330
https://github.com/sofa-framework/sofa/pull/330:425,Deployability,update,updated,425,"This PR changes the behavior of helper::vector to make it closer to svector; - helper::vector can parse space separated values **and** [,] separated values; - helper::vector now serialize into [,] separated string; - helper::fixed_array (and so helper::Vec<Type>) can also parse space separated values **and** [,] separated values. As a consequence the serialization/deserialization on the python side (SofaPython plugin) is updated accordingly. Now the repr() of a python object is used to serialize it into a string in the Node.createObject() method if it is not a string already. Later on, code can be cleaned-up:; - no more cat/concat/listToStr() calls needed in python code; - no more helper::svector needed in c++ code. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/330
https://github.com/sofa-framework/sofa/pull/330:825,Integrability,message,message,825,"This PR changes the behavior of helper::vector to make it closer to svector; - helper::vector can parse space separated values **and** [,] separated values; - helper::vector now serialize into [,] separated string; - helper::fixed_array (and so helper::Vec<Type>) can also parse space separated values **and** [,] separated values. As a consequence the serialization/deserialization on the python side (SofaPython plugin) is updated accordingly. Now the repr() of a python object is used to serialize it into a string in the Node.createObject() method if it is not a string already. Later on, code can be cleaned-up:; - no more cat/concat/listToStr() calls needed in python code; - no more helper::svector needed in c++ code. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/330
https://github.com/sofa-framework/sofa/pull/330:414,Modifiability,plugin,plugin,414,"This PR changes the behavior of helper::vector to make it closer to svector; - helper::vector can parse space separated values **and** [,] separated values; - helper::vector now serialize into [,] separated string; - helper::fixed_array (and so helper::Vec<Type>) can also parse space separated values **and** [,] separated values. As a consequence the serialization/deserialization on the python side (SofaPython plugin) is updated accordingly. Now the repr() of a python object is used to serialize it into a string in the Node.createObject() method if it is not a string already. Later on, code can be cleaned-up:; - no more cat/concat/listToStr() calls needed in python code; - no more helper::svector needed in c++ code. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/330
https://github.com/sofa-framework/sofa/pull/330:977,Testability,test,test,977,"This PR changes the behavior of helper::vector to make it closer to svector; - helper::vector can parse space separated values **and** [,] separated values; - helper::vector now serialize into [,] separated string; - helper::fixed_array (and so helper::Vec<Type>) can also parse space separated values **and** [,] separated values. As a consequence the serialization/deserialization on the python side (SofaPython plugin) is updated accordingly. Now the repr() of a python object is used to serialize it into a string in the Node.createObject() method if it is not a string already. Later on, code can be cleaned-up:; - no more cat/concat/listToStr() calls needed in python code; - no more helper::svector needed in c++ code. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/330
https://github.com/sofa-framework/sofa/pull/330:1027,Testability,test,test,1027,"This PR changes the behavior of helper::vector to make it closer to svector; - helper::vector can parse space separated values **and** [,] separated values; - helper::vector now serialize into [,] separated string; - helper::fixed_array (and so helper::Vec<Type>) can also parse space separated values **and** [,] separated values. As a consequence the serialization/deserialization on the python side (SofaPython plugin) is updated accordingly. Now the repr() of a python object is used to serialize it into a string in the Node.createObject() method if it is not a string already. Later on, code can be cleaned-up:; - no more cat/concat/listToStr() calls needed in python code; - no more helper::svector needed in c++ code. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/330
https://github.com/sofa-framework/sofa/pull/331:470,Availability,failure,failures,470,This scene makes no sense since no ShapeMatchingForcefield is existing; in SOFA public. Another scene already shows ShapeMatching example; using the ShapeMatching engine:; ICPRegistration_ShapeMatching_Engine.scn. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/331
https://github.com/sofa-framework/sofa/pull/331:520,Availability,failure,failures,520,This scene makes no sense since no ShapeMatchingForcefield is existing; in SOFA public. Another scene already shows ShapeMatching example; using the ShapeMatching engine:; ICPRegistration_ShapeMatching_Engine.scn. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/331
https://github.com/sofa-framework/sofa/pull/331:313,Integrability,message,message,313,This scene makes no sense since no ShapeMatchingForcefield is existing; in SOFA public. Another scene already shows ShapeMatching example; using the ShapeMatching engine:; ICPRegistration_ShapeMatching_Engine.scn. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/331
https://github.com/sofa-framework/sofa/pull/331:465,Testability,test,test,465,This scene makes no sense since no ShapeMatchingForcefield is existing; in SOFA public. Another scene already shows ShapeMatching example; using the ShapeMatching engine:; ICPRegistration_ShapeMatching_Engine.scn. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/331
https://github.com/sofa-framework/sofa/pull/331:515,Testability,test,test,515,This scene makes no sense since no ShapeMatchingForcefield is existing; in SOFA public. Another scene already shows ShapeMatching example; using the ShapeMatching engine:; ICPRegistration_ShapeMatching_Engine.scn. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/331
https://github.com/sofa-framework/sofa/pull/332:287,Availability,failure,failures,287,[SofaKernel] re-open PR #330 . ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/332
https://github.com/sofa-framework/sofa/pull/332:337,Availability,failure,failures,337,[SofaKernel] re-open PR #330 . ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/332
https://github.com/sofa-framework/sofa/pull/332:130,Integrability,message,message,130,[SofaKernel] re-open PR #330 . ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/332
https://github.com/sofa-framework/sofa/pull/332:282,Testability,test,test,282,[SofaKernel] re-open PR #330 . ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/332
https://github.com/sofa-framework/sofa/pull/332:332,Testability,test,test,332,[SofaKernel] re-open PR #330 . ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/332
https://github.com/sofa-framework/sofa/issues/333:48,Availability,error,error,48,"Hi everybody, ; a couple of days ago I had this error : **TypeError: bad argument type for built-in operation**, referring to this line of code:; _tool.createObject('LinearMotionStateController', indices='0 1 2 3 4 5 6 7 8', keyTimes='0.0 200.0', keyDisplacements='0 0 0 0.0 0.04 0')_. Eventually, I found out that the plugin with the _LinearMotionStateController_ component was missing.; I think that a different error message would have been more helpful. Thank you everybody. Have a nice day.; Raffa. ______________________________________________________. Suggested labels: <!--- see https://github.com/sofa-framework/sofa/labels -->",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/333
https://github.com/sofa-framework/sofa/issues/333:414,Availability,error,error,414,"Hi everybody, ; a couple of days ago I had this error : **TypeError: bad argument type for built-in operation**, referring to this line of code:; _tool.createObject('LinearMotionStateController', indices='0 1 2 3 4 5 6 7 8', keyTimes='0.0 200.0', keyDisplacements='0 0 0 0.0 0.04 0')_. Eventually, I found out that the plugin with the _LinearMotionStateController_ component was missing.; I think that a different error message would have been more helpful. Thank you everybody. Have a nice day.; Raffa. ______________________________________________________. Suggested labels: <!--- see https://github.com/sofa-framework/sofa/labels -->",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/333
https://github.com/sofa-framework/sofa/issues/333:420,Integrability,message,message,420,"Hi everybody, ; a couple of days ago I had this error : **TypeError: bad argument type for built-in operation**, referring to this line of code:; _tool.createObject('LinearMotionStateController', indices='0 1 2 3 4 5 6 7 8', keyTimes='0.0 200.0', keyDisplacements='0 0 0 0.0 0.04 0')_. Eventually, I found out that the plugin with the _LinearMotionStateController_ component was missing.; I think that a different error message would have been more helpful. Thank you everybody. Have a nice day.; Raffa. ______________________________________________________. Suggested labels: <!--- see https://github.com/sofa-framework/sofa/labels -->",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/333
https://github.com/sofa-framework/sofa/issues/333:319,Modifiability,plugin,plugin,319,"Hi everybody, ; a couple of days ago I had this error : **TypeError: bad argument type for built-in operation**, referring to this line of code:; _tool.createObject('LinearMotionStateController', indices='0 1 2 3 4 5 6 7 8', keyTimes='0.0 200.0', keyDisplacements='0 0 0 0.0 0.04 0')_. Eventually, I found out that the plugin with the _LinearMotionStateController_ component was missing.; I think that a different error message would have been more helpful. Thank you everybody. Have a nice day.; Raffa. ______________________________________________________. Suggested labels: <!--- see https://github.com/sofa-framework/sofa/labels -->",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/333
https://github.com/sofa-framework/sofa/pull/334:321,Availability,failure,failures,321,Add a new force field for angular springs; Add an example scene. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/334
https://github.com/sofa-framework/sofa/pull/334:371,Availability,failure,failures,371,Add a new force field for angular springs; Add an example scene. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/334
https://github.com/sofa-framework/sofa/pull/334:164,Integrability,message,message,164,Add a new force field for angular springs; Add an example scene. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/334
https://github.com/sofa-framework/sofa/pull/334:316,Testability,test,test,316,Add a new force field for angular springs; Add an example scene. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/334
https://github.com/sofa-framework/sofa/pull/334:366,Testability,test,test,366,Add a new force field for angular springs; Add an example scene. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/334
https://github.com/sofa-framework/sofa/pull/335:212,Availability,error,error,212,The existing Binding does not cover the whole feature of the c++ API.; With this PR it does.This is not breaking anything...it only add new features with their associated tests. . This allows python messages and error to be routed to the right component and have it added to its backlog and displayed in the GUIs. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/335
https://github.com/sofa-framework/sofa/pull/335:570,Availability,failure,failures,570,The existing Binding does not cover the whole feature of the c++ API.; With this PR it does.This is not breaking anything...it only add new features with their associated tests. . This allows python messages and error to be routed to the right component and have it added to its backlog and displayed in the GUIs. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/335
https://github.com/sofa-framework/sofa/pull/335:620,Availability,failure,failures,620,The existing Binding does not cover the whole feature of the c++ API.; With this PR it does.This is not breaking anything...it only add new features with their associated tests. . This allows python messages and error to be routed to the right component and have it added to its backlog and displayed in the GUIs. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/335
https://github.com/sofa-framework/sofa/pull/335:199,Integrability,message,messages,199,The existing Binding does not cover the whole feature of the c++ API.; With this PR it does.This is not breaking anything...it only add new features with their associated tests. . This allows python messages and error to be routed to the right component and have it added to its backlog and displayed in the GUIs. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/335
https://github.com/sofa-framework/sofa/pull/335:224,Integrability,rout,routed,224,The existing Binding does not cover the whole feature of the c++ API.; With this PR it does.This is not breaking anything...it only add new features with their associated tests. . This allows python messages and error to be routed to the right component and have it added to its backlog and displayed in the GUIs. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/335
https://github.com/sofa-framework/sofa/pull/335:413,Integrability,message,message,413,The existing Binding does not cover the whole feature of the c++ API.; With this PR it does.This is not breaking anything...it only add new features with their associated tests. . This allows python messages and error to be routed to the right component and have it added to its backlog and displayed in the GUIs. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/335
https://github.com/sofa-framework/sofa/pull/335:171,Testability,test,tests,171,The existing Binding does not cover the whole feature of the c++ API.; With this PR it does.This is not breaking anything...it only add new features with their associated tests. . This allows python messages and error to be routed to the right component and have it added to its backlog and displayed in the GUIs. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/335
https://github.com/sofa-framework/sofa/pull/335:565,Testability,test,test,565,The existing Binding does not cover the whole feature of the c++ API.; With this PR it does.This is not breaking anything...it only add new features with their associated tests. . This allows python messages and error to be routed to the right component and have it added to its backlog and displayed in the GUIs. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/335
https://github.com/sofa-framework/sofa/pull/335:615,Testability,test,test,615,The existing Binding does not cover the whole feature of the c++ API.; With this PR it does.This is not breaking anything...it only add new features with their associated tests. . This allows python messages and error to be routed to the right component and have it added to its backlog and displayed in the GUIs. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/335
https://github.com/sofa-framework/sofa/pull/337:1610,Availability,failure,failures,1610,"It was agreed that runSofa is on its dying...but I see so much people that still use it so here is a set of patches to may make their live easier. I tried to spend as few time as possible so it is not super clean. . This PR contains: ; 1) Extend the live coding support. Before this PR only python script controller where concerned. Now any xml, pyscn and other is concerned when runSofa is started with the -i option. This is very usefull to make live demonstration, explaining scenes to an audiance or practice on small scene. It has no impact on user that don't start runSofa without -i. . 2) Currently Object that have messages in their logs exhibits small signs (green/yellow/red). This PR extends this behavior to the Node so it is more consistant and easy to locate the messages. . 3) Adds an openInEditor function in the pop menu in the scene graph to open the current scene in an external editor (It is nothing but I use that all the time in qtcreator and I wanted the same in sofa). Enjoy/. CHANGELOG for @hugtalbot & @guparan :; - [runSofa] ; - when using runSofa with the -i option adds live coding support for xml & pyscn scenes.; - adds icons (green, red, yellow) on nodes when their is message (before only the object have the icons). ; - in the scene graph pop-up menu adds an entry that open the current scene into an external editor. . ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/337
https://github.com/sofa-framework/sofa/pull/337:1660,Availability,failure,failures,1660,"It was agreed that runSofa is on its dying...but I see so much people that still use it so here is a set of patches to may make their live easier. I tried to spend as few time as possible so it is not super clean. . This PR contains: ; 1) Extend the live coding support. Before this PR only python script controller where concerned. Now any xml, pyscn and other is concerned when runSofa is started with the -i option. This is very usefull to make live demonstration, explaining scenes to an audiance or practice on small scene. It has no impact on user that don't start runSofa without -i. . 2) Currently Object that have messages in their logs exhibits small signs (green/yellow/red). This PR extends this behavior to the Node so it is more consistant and easy to locate the messages. . 3) Adds an openInEditor function in the pop menu in the scene graph to open the current scene in an external editor (It is nothing but I use that all the time in qtcreator and I wanted the same in sofa). Enjoy/. CHANGELOG for @hugtalbot & @guparan :; - [runSofa] ; - when using runSofa with the -i option adds live coding support for xml & pyscn scenes.; - adds icons (green, red, yellow) on nodes when their is message (before only the object have the icons). ; - in the scene graph pop-up menu adds an entry that open the current scene into an external editor. . ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/337
https://github.com/sofa-framework/sofa/pull/337:108,Deployability,patch,patches,108,"It was agreed that runSofa is on its dying...but I see so much people that still use it so here is a set of patches to may make their live easier. I tried to spend as few time as possible so it is not super clean. . This PR contains: ; 1) Extend the live coding support. Before this PR only python script controller where concerned. Now any xml, pyscn and other is concerned when runSofa is started with the -i option. This is very usefull to make live demonstration, explaining scenes to an audiance or practice on small scene. It has no impact on user that don't start runSofa without -i. . 2) Currently Object that have messages in their logs exhibits small signs (green/yellow/red). This PR extends this behavior to the Node so it is more consistant and easy to locate the messages. . 3) Adds an openInEditor function in the pop menu in the scene graph to open the current scene in an external editor (It is nothing but I use that all the time in qtcreator and I wanted the same in sofa). Enjoy/. CHANGELOG for @hugtalbot & @guparan :; - [runSofa] ; - when using runSofa with the -i option adds live coding support for xml & pyscn scenes.; - adds icons (green, red, yellow) on nodes when their is message (before only the object have the icons). ; - in the scene graph pop-up menu adds an entry that open the current scene into an external editor. . ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/337
https://github.com/sofa-framework/sofa/pull/337:668,Energy Efficiency,green,green,668,"It was agreed that runSofa is on its dying...but I see so much people that still use it so here is a set of patches to may make their live easier. I tried to spend as few time as possible so it is not super clean. . This PR contains: ; 1) Extend the live coding support. Before this PR only python script controller where concerned. Now any xml, pyscn and other is concerned when runSofa is started with the -i option. This is very usefull to make live demonstration, explaining scenes to an audiance or practice on small scene. It has no impact on user that don't start runSofa without -i. . 2) Currently Object that have messages in their logs exhibits small signs (green/yellow/red). This PR extends this behavior to the Node so it is more consistant and easy to locate the messages. . 3) Adds an openInEditor function in the pop menu in the scene graph to open the current scene in an external editor (It is nothing but I use that all the time in qtcreator and I wanted the same in sofa). Enjoy/. CHANGELOG for @hugtalbot & @guparan :; - [runSofa] ; - when using runSofa with the -i option adds live coding support for xml & pyscn scenes.; - adds icons (green, red, yellow) on nodes when their is message (before only the object have the icons). ; - in the scene graph pop-up menu adds an entry that open the current scene into an external editor. . ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/337
https://github.com/sofa-framework/sofa/pull/337:1158,Energy Efficiency,green,green,1158,"It was agreed that runSofa is on its dying...but I see so much people that still use it so here is a set of patches to may make their live easier. I tried to spend as few time as possible so it is not super clean. . This PR contains: ; 1) Extend the live coding support. Before this PR only python script controller where concerned. Now any xml, pyscn and other is concerned when runSofa is started with the -i option. This is very usefull to make live demonstration, explaining scenes to an audiance or practice on small scene. It has no impact on user that don't start runSofa without -i. . 2) Currently Object that have messages in their logs exhibits small signs (green/yellow/red). This PR extends this behavior to the Node so it is more consistant and easy to locate the messages. . 3) Adds an openInEditor function in the pop menu in the scene graph to open the current scene in an external editor (It is nothing but I use that all the time in qtcreator and I wanted the same in sofa). Enjoy/. CHANGELOG for @hugtalbot & @guparan :; - [runSofa] ; - when using runSofa with the -i option adds live coding support for xml & pyscn scenes.; - adds icons (green, red, yellow) on nodes when their is message (before only the object have the icons). ; - in the scene graph pop-up menu adds an entry that open the current scene into an external editor. . ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/337
https://github.com/sofa-framework/sofa/pull/337:623,Integrability,message,messages,623,"It was agreed that runSofa is on its dying...but I see so much people that still use it so here is a set of patches to may make their live easier. I tried to spend as few time as possible so it is not super clean. . This PR contains: ; 1) Extend the live coding support. Before this PR only python script controller where concerned. Now any xml, pyscn and other is concerned when runSofa is started with the -i option. This is very usefull to make live demonstration, explaining scenes to an audiance or practice on small scene. It has no impact on user that don't start runSofa without -i. . 2) Currently Object that have messages in their logs exhibits small signs (green/yellow/red). This PR extends this behavior to the Node so it is more consistant and easy to locate the messages. . 3) Adds an openInEditor function in the pop menu in the scene graph to open the current scene in an external editor (It is nothing but I use that all the time in qtcreator and I wanted the same in sofa). Enjoy/. CHANGELOG for @hugtalbot & @guparan :; - [runSofa] ; - when using runSofa with the -i option adds live coding support for xml & pyscn scenes.; - adds icons (green, red, yellow) on nodes when their is message (before only the object have the icons). ; - in the scene graph pop-up menu adds an entry that open the current scene into an external editor. . ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/337
https://github.com/sofa-framework/sofa/pull/337:777,Integrability,message,messages,777,"It was agreed that runSofa is on its dying...but I see so much people that still use it so here is a set of patches to may make their live easier. I tried to spend as few time as possible so it is not super clean. . This PR contains: ; 1) Extend the live coding support. Before this PR only python script controller where concerned. Now any xml, pyscn and other is concerned when runSofa is started with the -i option. This is very usefull to make live demonstration, explaining scenes to an audiance or practice on small scene. It has no impact on user that don't start runSofa without -i. . 2) Currently Object that have messages in their logs exhibits small signs (green/yellow/red). This PR extends this behavior to the Node so it is more consistant and easy to locate the messages. . 3) Adds an openInEditor function in the pop menu in the scene graph to open the current scene in an external editor (It is nothing but I use that all the time in qtcreator and I wanted the same in sofa). Enjoy/. CHANGELOG for @hugtalbot & @guparan :; - [runSofa] ; - when using runSofa with the -i option adds live coding support for xml & pyscn scenes.; - adds icons (green, red, yellow) on nodes when their is message (before only the object have the icons). ; - in the scene graph pop-up menu adds an entry that open the current scene into an external editor. . ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/337
https://github.com/sofa-framework/sofa/pull/337:1201,Integrability,message,message,1201,"It was agreed that runSofa is on its dying...but I see so much people that still use it so here is a set of patches to may make their live easier. I tried to spend as few time as possible so it is not super clean. . This PR contains: ; 1) Extend the live coding support. Before this PR only python script controller where concerned. Now any xml, pyscn and other is concerned when runSofa is started with the -i option. This is very usefull to make live demonstration, explaining scenes to an audiance or practice on small scene. It has no impact on user that don't start runSofa without -i. . 2) Currently Object that have messages in their logs exhibits small signs (green/yellow/red). This PR extends this behavior to the Node so it is more consistant and easy to locate the messages. . 3) Adds an openInEditor function in the pop menu in the scene graph to open the current scene in an external editor (It is nothing but I use that all the time in qtcreator and I wanted the same in sofa). Enjoy/. CHANGELOG for @hugtalbot & @guparan :; - [runSofa] ; - when using runSofa with the -i option adds live coding support for xml & pyscn scenes.; - adds icons (green, red, yellow) on nodes when their is message (before only the object have the icons). ; - in the scene graph pop-up menu adds an entry that open the current scene into an external editor. . ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/337
https://github.com/sofa-framework/sofa/pull/337:1453,Integrability,message,message,1453,"It was agreed that runSofa is on its dying...but I see so much people that still use it so here is a set of patches to may make their live easier. I tried to spend as few time as possible so it is not super clean. . This PR contains: ; 1) Extend the live coding support. Before this PR only python script controller where concerned. Now any xml, pyscn and other is concerned when runSofa is started with the -i option. This is very usefull to make live demonstration, explaining scenes to an audiance or practice on small scene. It has no impact on user that don't start runSofa without -i. . 2) Currently Object that have messages in their logs exhibits small signs (green/yellow/red). This PR extends this behavior to the Node so it is more consistant and easy to locate the messages. . 3) Adds an openInEditor function in the pop menu in the scene graph to open the current scene in an external editor (It is nothing but I use that all the time in qtcreator and I wanted the same in sofa). Enjoy/. CHANGELOG for @hugtalbot & @guparan :; - [runSofa] ; - when using runSofa with the -i option adds live coding support for xml & pyscn scenes.; - adds icons (green, red, yellow) on nodes when their is message (before only the object have the icons). ; - in the scene graph pop-up menu adds an entry that open the current scene into an external editor. . ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/337
https://github.com/sofa-framework/sofa/pull/337:239,Modifiability,Extend,Extend,239,"It was agreed that runSofa is on its dying...but I see so much people that still use it so here is a set of patches to may make their live easier. I tried to spend as few time as possible so it is not super clean. . This PR contains: ; 1) Extend the live coding support. Before this PR only python script controller where concerned. Now any xml, pyscn and other is concerned when runSofa is started with the -i option. This is very usefull to make live demonstration, explaining scenes to an audiance or practice on small scene. It has no impact on user that don't start runSofa without -i. . 2) Currently Object that have messages in their logs exhibits small signs (green/yellow/red). This PR extends this behavior to the Node so it is more consistant and easy to locate the messages. . 3) Adds an openInEditor function in the pop menu in the scene graph to open the current scene in an external editor (It is nothing but I use that all the time in qtcreator and I wanted the same in sofa). Enjoy/. CHANGELOG for @hugtalbot & @guparan :; - [runSofa] ; - when using runSofa with the -i option adds live coding support for xml & pyscn scenes.; - adds icons (green, red, yellow) on nodes when their is message (before only the object have the icons). ; - in the scene graph pop-up menu adds an entry that open the current scene into an external editor. . ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/337
https://github.com/sofa-framework/sofa/pull/337:695,Modifiability,extend,extends,695,"It was agreed that runSofa is on its dying...but I see so much people that still use it so here is a set of patches to may make their live easier. I tried to spend as few time as possible so it is not super clean. . This PR contains: ; 1) Extend the live coding support. Before this PR only python script controller where concerned. Now any xml, pyscn and other is concerned when runSofa is started with the -i option. This is very usefull to make live demonstration, explaining scenes to an audiance or practice on small scene. It has no impact on user that don't start runSofa without -i. . 2) Currently Object that have messages in their logs exhibits small signs (green/yellow/red). This PR extends this behavior to the Node so it is more consistant and easy to locate the messages. . 3) Adds an openInEditor function in the pop menu in the scene graph to open the current scene in an external editor (It is nothing but I use that all the time in qtcreator and I wanted the same in sofa). Enjoy/. CHANGELOG for @hugtalbot & @guparan :; - [runSofa] ; - when using runSofa with the -i option adds live coding support for xml & pyscn scenes.; - adds icons (green, red, yellow) on nodes when their is message (before only the object have the icons). ; - in the scene graph pop-up menu adds an entry that open the current scene into an external editor. . ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/337
https://github.com/sofa-framework/sofa/pull/337:641,Testability,log,logs,641,"It was agreed that runSofa is on its dying...but I see so much people that still use it so here is a set of patches to may make their live easier. I tried to spend as few time as possible so it is not super clean. . This PR contains: ; 1) Extend the live coding support. Before this PR only python script controller where concerned. Now any xml, pyscn and other is concerned when runSofa is started with the -i option. This is very usefull to make live demonstration, explaining scenes to an audiance or practice on small scene. It has no impact on user that don't start runSofa without -i. . 2) Currently Object that have messages in their logs exhibits small signs (green/yellow/red). This PR extends this behavior to the Node so it is more consistant and easy to locate the messages. . 3) Adds an openInEditor function in the pop menu in the scene graph to open the current scene in an external editor (It is nothing but I use that all the time in qtcreator and I wanted the same in sofa). Enjoy/. CHANGELOG for @hugtalbot & @guparan :; - [runSofa] ; - when using runSofa with the -i option adds live coding support for xml & pyscn scenes.; - adds icons (green, red, yellow) on nodes when their is message (before only the object have the icons). ; - in the scene graph pop-up menu adds an entry that open the current scene into an external editor. . ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/337
https://github.com/sofa-framework/sofa/pull/337:1605,Testability,test,test,1605,"It was agreed that runSofa is on its dying...but I see so much people that still use it so here is a set of patches to may make their live easier. I tried to spend as few time as possible so it is not super clean. . This PR contains: ; 1) Extend the live coding support. Before this PR only python script controller where concerned. Now any xml, pyscn and other is concerned when runSofa is started with the -i option. This is very usefull to make live demonstration, explaining scenes to an audiance or practice on small scene. It has no impact on user that don't start runSofa without -i. . 2) Currently Object that have messages in their logs exhibits small signs (green/yellow/red). This PR extends this behavior to the Node so it is more consistant and easy to locate the messages. . 3) Adds an openInEditor function in the pop menu in the scene graph to open the current scene in an external editor (It is nothing but I use that all the time in qtcreator and I wanted the same in sofa). Enjoy/. CHANGELOG for @hugtalbot & @guparan :; - [runSofa] ; - when using runSofa with the -i option adds live coding support for xml & pyscn scenes.; - adds icons (green, red, yellow) on nodes when their is message (before only the object have the icons). ; - in the scene graph pop-up menu adds an entry that open the current scene into an external editor. . ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/337
https://github.com/sofa-framework/sofa/pull/337:1655,Testability,test,test,1655,"It was agreed that runSofa is on its dying...but I see so much people that still use it so here is a set of patches to may make their live easier. I tried to spend as few time as possible so it is not super clean. . This PR contains: ; 1) Extend the live coding support. Before this PR only python script controller where concerned. Now any xml, pyscn and other is concerned when runSofa is started with the -i option. This is very usefull to make live demonstration, explaining scenes to an audiance or practice on small scene. It has no impact on user that don't start runSofa without -i. . 2) Currently Object that have messages in their logs exhibits small signs (green/yellow/red). This PR extends this behavior to the Node so it is more consistant and easy to locate the messages. . 3) Adds an openInEditor function in the pop menu in the scene graph to open the current scene in an external editor (It is nothing but I use that all the time in qtcreator and I wanted the same in sofa). Enjoy/. CHANGELOG for @hugtalbot & @guparan :; - [runSofa] ; - when using runSofa with the -i option adds live coding support for xml & pyscn scenes.; - adds icons (green, red, yellow) on nodes when their is message (before only the object have the icons). ; - in the scene graph pop-up menu adds an entry that open the current scene into an external editor. . ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/337
https://github.com/sofa-framework/sofa/issues/338:340,Usability,feedback,feedback,340,"Hi,. I am wondering if there is a reason why Data related to Rayleigh damping and mass in ODE solvers (e.g. see [EulerImplicitSolver](https://github.com/sofa-framework/sofa/blob/master/SofaKernel/modules/SofaImplicitOdeSolver/EulerImplicitSolver.cpp)) are not zero by default. Couldn't it be very confusing for new users ?. Thanks for your feedback; ______________________________________________________. Suggested labels: <!--- see https://github.com/sofa-framework/sofa/labels -->",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/338
https://github.com/sofa-framework/sofa/pull/339:543,Availability,failure,failures,543,"In this PR I do only cleaning:; - replace a bunch of std::cerr, std::cout, prinf to use msg_* instead. ; - remove commented code. If I didn't made mistake nothing should break. CHANGELOG:; [all]:; - remove a lot of commented code. ; - replace std:cerr, std::cout and printf with msg_* . ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/339
https://github.com/sofa-framework/sofa/pull/339:593,Availability,failure,failures,593,"In this PR I do only cleaning:; - replace a bunch of std::cerr, std::cout, prinf to use msg_* instead. ; - remove commented code. If I didn't made mistake nothing should break. CHANGELOG:; [all]:; - remove a lot of commented code. ; - replace std:cerr, std::cout and printf with msg_* . ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/339
https://github.com/sofa-framework/sofa/pull/339:386,Integrability,message,message,386,"In this PR I do only cleaning:; - replace a bunch of std::cerr, std::cout, prinf to use msg_* instead. ; - remove commented code. If I didn't made mistake nothing should break. CHANGELOG:; [all]:; - remove a lot of commented code. ; - replace std:cerr, std::cout and printf with msg_* . ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/339
https://github.com/sofa-framework/sofa/pull/339:538,Testability,test,test,538,"In this PR I do only cleaning:; - replace a bunch of std::cerr, std::cout, prinf to use msg_* instead. ; - remove commented code. If I didn't made mistake nothing should break. CHANGELOG:; [all]:; - remove a lot of commented code. ; - replace std:cerr, std::cout and printf with msg_* . ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/339
https://github.com/sofa-framework/sofa/pull/339:588,Testability,test,test,588,"In this PR I do only cleaning:; - replace a bunch of std::cerr, std::cout, prinf to use msg_* instead. ; - remove commented code. If I didn't made mistake nothing should break. CHANGELOG:; [all]:; - remove a lot of commented code. ; - replace std:cerr, std::cout and printf with msg_* . ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/339
https://github.com/sofa-framework/sofa/pull/340:256,Availability,failure,failures,256,______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/340
https://github.com/sofa-framework/sofa/pull/340:306,Availability,failure,failures,306,______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/340
https://github.com/sofa-framework/sofa/pull/340:99,Integrability,message,message,99,______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/340
https://github.com/sofa-framework/sofa/pull/340:251,Testability,test,test,251,______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/340
https://github.com/sofa-framework/sofa/pull/340:301,Testability,test,test,301,______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/340
https://github.com/sofa-framework/sofa/pull/341:434,Availability,failure,failures,434,"I think ""_rotationIdx"" should have the size of the number of points.; The problem occured when using subtopology, i.e when the number of points is greater than nbElements*4... . ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/341
https://github.com/sofa-framework/sofa/pull/341:484,Availability,failure,failures,484,"I think ""_rotationIdx"" should have the size of the number of points.; The problem occured when using subtopology, i.e when the number of points is greater than nbElements*4... . ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/341
https://github.com/sofa-framework/sofa/pull/341:277,Integrability,message,message,277,"I think ""_rotationIdx"" should have the size of the number of points.; The problem occured when using subtopology, i.e when the number of points is greater than nbElements*4... . ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/341
https://github.com/sofa-framework/sofa/pull/341:429,Testability,test,test,429,"I think ""_rotationIdx"" should have the size of the number of points.; The problem occured when using subtopology, i.e when the number of points is greater than nbElements*4... . ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/341
https://github.com/sofa-framework/sofa/pull/341:479,Testability,test,test,479,"I think ""_rotationIdx"" should have the size of the number of points.; The problem occured when using subtopology, i.e when the number of points is greater than nbElements*4... . ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/341
https://github.com/sofa-framework/sofa/pull/343:267,Availability,failure,failures,267,rapid fix. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/343
https://github.com/sofa-framework/sofa/pull/343:317,Availability,failure,failures,317,rapid fix. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/343
https://github.com/sofa-framework/sofa/pull/343:110,Integrability,message,message,110,rapid fix. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/343
https://github.com/sofa-framework/sofa/pull/343:262,Testability,test,test,262,rapid fix. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/343
https://github.com/sofa-framework/sofa/pull/343:312,Testability,test,test,312,rapid fix. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/343
https://github.com/sofa-framework/sofa/issues/344:169,Availability,error,error,169,"When sofa is compiled in debug mode, if the positions are initialized manually in the _position data attribute_ of the MechanicalObject, the later will always output an error stating that the position state vector contains a bad size. This message is called because the `MechanicalObject::init()` method calls `MechanicalObject::write(VecCoordId::position())` before setting the `vsize` member (with .`MechanicalObject::resize()`). One solution would be to first set the size accordingly to the _position data attribute_ of the MechanicalObject in the `MechanicalObject::init()` method before the `MechanicalObject::write()` is called. To reproduce the error, first compile Sofa in debug mode, and try with the following scene:; ```; <Node>; <MechanicalObject position=""0 0 -2.5 0 0 7.5 10 0 -2.5 10 0 7.5"" />; </Node>; ```; It should output something like:; `[WARNING] [MechanicalObject(mObject1)] Writing to State vector position(V_COORD) with incorrect size : 4 != 1`",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/344
https://github.com/sofa-framework/sofa/issues/344:653,Availability,error,error,653,"When sofa is compiled in debug mode, if the positions are initialized manually in the _position data attribute_ of the MechanicalObject, the later will always output an error stating that the position state vector contains a bad size. This message is called because the `MechanicalObject::init()` method calls `MechanicalObject::write(VecCoordId::position())` before setting the `vsize` member (with .`MechanicalObject::resize()`). One solution would be to first set the size accordingly to the _position data attribute_ of the MechanicalObject in the `MechanicalObject::init()` method before the `MechanicalObject::write()` is called. To reproduce the error, first compile Sofa in debug mode, and try with the following scene:; ```; <Node>; <MechanicalObject position=""0 0 -2.5 0 0 7.5 10 0 -2.5 10 0 7.5"" />; </Node>; ```; It should output something like:; `[WARNING] [MechanicalObject(mObject1)] Writing to State vector position(V_COORD) with incorrect size : 4 != 1`",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/344
https://github.com/sofa-framework/sofa/issues/344:240,Integrability,message,message,240,"When sofa is compiled in debug mode, if the positions are initialized manually in the _position data attribute_ of the MechanicalObject, the later will always output an error stating that the position state vector contains a bad size. This message is called because the `MechanicalObject::init()` method calls `MechanicalObject::write(VecCoordId::position())` before setting the `vsize` member (with .`MechanicalObject::resize()`). One solution would be to first set the size accordingly to the _position data attribute_ of the MechanicalObject in the `MechanicalObject::init()` method before the `MechanicalObject::write()` is called. To reproduce the error, first compile Sofa in debug mode, and try with the following scene:; ```; <Node>; <MechanicalObject position=""0 0 -2.5 0 0 7.5 10 0 -2.5 10 0 7.5"" />; </Node>; ```; It should output something like:; `[WARNING] [MechanicalObject(mObject1)] Writing to State vector position(V_COORD) with incorrect size : 4 != 1`",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/344
https://github.com/sofa-framework/sofa/pull/347:1394,Availability,failure,failures,1394,"This is a follow-up to #326, now with green tests. TL;DR: There should be no unprotected python code in sofa except in extension code. . Any code like this:. ```c++; void my_function(...) {; // ...; PySomething_Something(...);; }; ```. Should be GIL-protected as follows:; ```c++; void my_function(...) {; // ...; // the lock runs until the end of scope; sofa::simulation::PythonEnvironment::gil lock;; PySomething_Something(...);; }; ```. Or even better yet: don't use naked python calls and use the `PythonEnvironment` API instead. You may also temporarily release the GIL while doing a costly/blocking c++ operation as follows:. ```c++; void my_function_that_already_owns_the_gil(...) {; // ...; // unlocks the GIL until the end of scope; sofa::simulation::PythonEnvironment::no_gil unlock;; // ...; }; ``` . I tried looking for all python calls in the codebase, but I may have missed some. . # Changelog. - added `PythonEnvironment::gil` RAII for scoped acquisition of the GIL; - added `PythonEnvironment::no_gil` RAII for scoped release of the GIL; - GIL-protected most (all?) python calls with the above (except in extension code); ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/347
https://github.com/sofa-framework/sofa/pull/347:1444,Availability,failure,failures,1444,"This is a follow-up to #326, now with green tests. TL;DR: There should be no unprotected python code in sofa except in extension code. . Any code like this:. ```c++; void my_function(...) {; // ...; PySomething_Something(...);; }; ```. Should be GIL-protected as follows:; ```c++; void my_function(...) {; // ...; // the lock runs until the end of scope; sofa::simulation::PythonEnvironment::gil lock;; PySomething_Something(...);; }; ```. Or even better yet: don't use naked python calls and use the `PythonEnvironment` API instead. You may also temporarily release the GIL while doing a costly/blocking c++ operation as follows:. ```c++; void my_function_that_already_owns_the_gil(...) {; // ...; // unlocks the GIL until the end of scope; sofa::simulation::PythonEnvironment::no_gil unlock;; // ...; }; ``` . I tried looking for all python calls in the codebase, but I may have missed some. . # Changelog. - added `PythonEnvironment::gil` RAII for scoped acquisition of the GIL; - added `PythonEnvironment::no_gil` RAII for scoped release of the GIL; - GIL-protected most (all?) python calls with the above (except in extension code); ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/347
https://github.com/sofa-framework/sofa/pull/347:559,Deployability,release,release,559,"This is a follow-up to #326, now with green tests. TL;DR: There should be no unprotected python code in sofa except in extension code. . Any code like this:. ```c++; void my_function(...) {; // ...; PySomething_Something(...);; }; ```. Should be GIL-protected as follows:; ```c++; void my_function(...) {; // ...; // the lock runs until the end of scope; sofa::simulation::PythonEnvironment::gil lock;; PySomething_Something(...);; }; ```. Or even better yet: don't use naked python calls and use the `PythonEnvironment` API instead. You may also temporarily release the GIL while doing a costly/blocking c++ operation as follows:. ```c++; void my_function_that_already_owns_the_gil(...) {; // ...; // unlocks the GIL until the end of scope; sofa::simulation::PythonEnvironment::no_gil unlock;; // ...; }; ``` . I tried looking for all python calls in the codebase, but I may have missed some. . # Changelog. - added `PythonEnvironment::gil` RAII for scoped acquisition of the GIL; - added `PythonEnvironment::no_gil` RAII for scoped release of the GIL; - GIL-protected most (all?) python calls with the above (except in extension code); ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/347
https://github.com/sofa-framework/sofa/pull/347:1034,Deployability,release,release,1034,"This is a follow-up to #326, now with green tests. TL;DR: There should be no unprotected python code in sofa except in extension code. . Any code like this:. ```c++; void my_function(...) {; // ...; PySomething_Something(...);; }; ```. Should be GIL-protected as follows:; ```c++; void my_function(...) {; // ...; // the lock runs until the end of scope; sofa::simulation::PythonEnvironment::gil lock;; PySomething_Something(...);; }; ```. Or even better yet: don't use naked python calls and use the `PythonEnvironment` API instead. You may also temporarily release the GIL while doing a costly/blocking c++ operation as follows:. ```c++; void my_function_that_already_owns_the_gil(...) {; // ...; // unlocks the GIL until the end of scope; sofa::simulation::PythonEnvironment::no_gil unlock;; // ...; }; ``` . I tried looking for all python calls in the codebase, but I may have missed some. . # Changelog. - added `PythonEnvironment::gil` RAII for scoped acquisition of the GIL; - added `PythonEnvironment::no_gil` RAII for scoped release of the GIL; - GIL-protected most (all?) python calls with the above (except in extension code); ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/347
https://github.com/sofa-framework/sofa/pull/347:38,Energy Efficiency,green,green,38,"This is a follow-up to #326, now with green tests. TL;DR: There should be no unprotected python code in sofa except in extension code. . Any code like this:. ```c++; void my_function(...) {; // ...; PySomething_Something(...);; }; ```. Should be GIL-protected as follows:; ```c++; void my_function(...) {; // ...; // the lock runs until the end of scope; sofa::simulation::PythonEnvironment::gil lock;; PySomething_Something(...);; }; ```. Or even better yet: don't use naked python calls and use the `PythonEnvironment` API instead. You may also temporarily release the GIL while doing a costly/blocking c++ operation as follows:. ```c++; void my_function_that_already_owns_the_gil(...) {; // ...; // unlocks the GIL until the end of scope; sofa::simulation::PythonEnvironment::no_gil unlock;; // ...; }; ``` . I tried looking for all python calls in the codebase, but I may have missed some. . # Changelog. - added `PythonEnvironment::gil` RAII for scoped acquisition of the GIL; - added `PythonEnvironment::no_gil` RAII for scoped release of the GIL; - GIL-protected most (all?) python calls with the above (except in extension code); ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/347
https://github.com/sofa-framework/sofa/pull/347:1237,Integrability,message,message,1237,"This is a follow-up to #326, now with green tests. TL;DR: There should be no unprotected python code in sofa except in extension code. . Any code like this:. ```c++; void my_function(...) {; // ...; PySomething_Something(...);; }; ```. Should be GIL-protected as follows:; ```c++; void my_function(...) {; // ...; // the lock runs until the end of scope; sofa::simulation::PythonEnvironment::gil lock;; PySomething_Something(...);; }; ```. Or even better yet: don't use naked python calls and use the `PythonEnvironment` API instead. You may also temporarily release the GIL while doing a costly/blocking c++ operation as follows:. ```c++; void my_function_that_already_owns_the_gil(...) {; // ...; // unlocks the GIL until the end of scope; sofa::simulation::PythonEnvironment::no_gil unlock;; // ...; }; ``` . I tried looking for all python calls in the codebase, but I may have missed some. . # Changelog. - added `PythonEnvironment::gil` RAII for scoped acquisition of the GIL; - added `PythonEnvironment::no_gil` RAII for scoped release of the GIL; - GIL-protected most (all?) python calls with the above (except in extension code); ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/347
https://github.com/sofa-framework/sofa/pull/347:44,Testability,test,tests,44,"This is a follow-up to #326, now with green tests. TL;DR: There should be no unprotected python code in sofa except in extension code. . Any code like this:. ```c++; void my_function(...) {; // ...; PySomething_Something(...);; }; ```. Should be GIL-protected as follows:; ```c++; void my_function(...) {; // ...; // the lock runs until the end of scope; sofa::simulation::PythonEnvironment::gil lock;; PySomething_Something(...);; }; ```. Or even better yet: don't use naked python calls and use the `PythonEnvironment` API instead. You may also temporarily release the GIL while doing a costly/blocking c++ operation as follows:. ```c++; void my_function_that_already_owns_the_gil(...) {; // ...; // unlocks the GIL until the end of scope; sofa::simulation::PythonEnvironment::no_gil unlock;; // ...; }; ``` . I tried looking for all python calls in the codebase, but I may have missed some. . # Changelog. - added `PythonEnvironment::gil` RAII for scoped acquisition of the GIL; - added `PythonEnvironment::no_gil` RAII for scoped release of the GIL; - GIL-protected most (all?) python calls with the above (except in extension code); ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/347
https://github.com/sofa-framework/sofa/pull/347:1389,Testability,test,test,1389,"This is a follow-up to #326, now with green tests. TL;DR: There should be no unprotected python code in sofa except in extension code. . Any code like this:. ```c++; void my_function(...) {; // ...; PySomething_Something(...);; }; ```. Should be GIL-protected as follows:; ```c++; void my_function(...) {; // ...; // the lock runs until the end of scope; sofa::simulation::PythonEnvironment::gil lock;; PySomething_Something(...);; }; ```. Or even better yet: don't use naked python calls and use the `PythonEnvironment` API instead. You may also temporarily release the GIL while doing a costly/blocking c++ operation as follows:. ```c++; void my_function_that_already_owns_the_gil(...) {; // ...; // unlocks the GIL until the end of scope; sofa::simulation::PythonEnvironment::no_gil unlock;; // ...; }; ``` . I tried looking for all python calls in the codebase, but I may have missed some. . # Changelog. - added `PythonEnvironment::gil` RAII for scoped acquisition of the GIL; - added `PythonEnvironment::no_gil` RAII for scoped release of the GIL; - GIL-protected most (all?) python calls with the above (except in extension code); ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/347
https://github.com/sofa-framework/sofa/pull/347:1439,Testability,test,test,1439,"This is a follow-up to #326, now with green tests. TL;DR: There should be no unprotected python code in sofa except in extension code. . Any code like this:. ```c++; void my_function(...) {; // ...; PySomething_Something(...);; }; ```. Should be GIL-protected as follows:; ```c++; void my_function(...) {; // ...; // the lock runs until the end of scope; sofa::simulation::PythonEnvironment::gil lock;; PySomething_Something(...);; }; ```. Or even better yet: don't use naked python calls and use the `PythonEnvironment` API instead. You may also temporarily release the GIL while doing a costly/blocking c++ operation as follows:. ```c++; void my_function_that_already_owns_the_gil(...) {; // ...; // unlocks the GIL until the end of scope; sofa::simulation::PythonEnvironment::no_gil unlock;; // ...; }; ``` . I tried looking for all python calls in the codebase, but I may have missed some. . # Changelog. - added `PythonEnvironment::gil` RAII for scoped acquisition of the GIL; - added `PythonEnvironment::no_gil` RAII for scoped release of the GIL; - GIL-protected most (all?) python calls with the above (except in extension code); ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/347
https://github.com/sofa-framework/sofa/issues/348:138,Performance,perform,performance,138,"The AdvancedTimer output is difficult to read when the option -c is activated with runSofa. Moreover it is not possible to use it to make performance graphics from a given simulation. . The idea to solve this problem is to return an output in JSON. The benefits of the JSON output are the following : ; * The output can be get with any language used to define a scene in SOFA; * The output can be used in most languages; * It's easier to create graphics with JSON format. You can find an example output in this file.; [poutre_grid_sofa_timerLog.txt](https://github.com/sofa-framework/sofa/files/1179512/poutre_grid_sofa_timerLog.txt). Any opinion ? We are open to all propositions. If you would like to add or modify something, just tell us.",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/348
https://github.com/sofa-framework/sofa/pull/349:977,Availability,failure,failures,977,"This PR adds finally hyperelasticity code in SOFA! ; Related to issue : https://github.com/sofa-framework/sofa/issues/231. Based on the work of @hdeling with @IPeterlik six new hyperelastic models (linearized or non-linear constitutive law) can now be used:; - ArrudaBoyce; - StVenant; - Mooney-Rivlin; - VerondaWestman; - Costa; - Ogden. Note that a validation of such models was done in this [paper](https://hal.inria.fr/hal-01536406/).; More about this can be found on the[ SOFA website](https://www.sofa-framework.org/about/news/validation-of-a-non-linear-model-of-the-liver/). TODO next : ; - improve how parameters are given, stored; - allow for non-homogeneous model (definition per tetra); - add associated test. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/349
https://github.com/sofa-framework/sofa/pull/349:1027,Availability,failure,failures,1027,"This PR adds finally hyperelasticity code in SOFA! ; Related to issue : https://github.com/sofa-framework/sofa/issues/231. Based on the work of @hdeling with @IPeterlik six new hyperelastic models (linearized or non-linear constitutive law) can now be used:; - ArrudaBoyce; - StVenant; - Mooney-Rivlin; - VerondaWestman; - Costa; - Ogden. Note that a validation of such models was done in this [paper](https://hal.inria.fr/hal-01536406/).; More about this can be found on the[ SOFA website](https://www.sofa-framework.org/about/news/validation-of-a-non-linear-model-of-the-liver/). TODO next : ; - improve how parameters are given, stored; - allow for non-homogeneous model (definition per tetra); - add associated test. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/349
https://github.com/sofa-framework/sofa/pull/349:820,Integrability,message,message,820,"This PR adds finally hyperelasticity code in SOFA! ; Related to issue : https://github.com/sofa-framework/sofa/issues/231. Based on the work of @hdeling with @IPeterlik six new hyperelastic models (linearized or non-linear constitutive law) can now be used:; - ArrudaBoyce; - StVenant; - Mooney-Rivlin; - VerondaWestman; - Costa; - Ogden. Note that a validation of such models was done in this [paper](https://hal.inria.fr/hal-01536406/).; More about this can be found on the[ SOFA website](https://www.sofa-framework.org/about/news/validation-of-a-non-linear-model-of-the-liver/). TODO next : ; - improve how parameters are given, stored; - allow for non-homogeneous model (definition per tetra); - add associated test. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/349
https://github.com/sofa-framework/sofa/pull/349:351,Security,validat,validation,351,"This PR adds finally hyperelasticity code in SOFA! ; Related to issue : https://github.com/sofa-framework/sofa/issues/231. Based on the work of @hdeling with @IPeterlik six new hyperelastic models (linearized or non-linear constitutive law) can now be used:; - ArrudaBoyce; - StVenant; - Mooney-Rivlin; - VerondaWestman; - Costa; - Ogden. Note that a validation of such models was done in this [paper](https://hal.inria.fr/hal-01536406/).; More about this can be found on the[ SOFA website](https://www.sofa-framework.org/about/news/validation-of-a-non-linear-model-of-the-liver/). TODO next : ; - improve how parameters are given, stored; - allow for non-homogeneous model (definition per tetra); - add associated test. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/349
https://github.com/sofa-framework/sofa/pull/349:533,Security,validat,validation-of-a-non-linear-model-of-the-liver,533,"This PR adds finally hyperelasticity code in SOFA! ; Related to issue : https://github.com/sofa-framework/sofa/issues/231. Based on the work of @hdeling with @IPeterlik six new hyperelastic models (linearized or non-linear constitutive law) can now be used:; - ArrudaBoyce; - StVenant; - Mooney-Rivlin; - VerondaWestman; - Costa; - Ogden. Note that a validation of such models was done in this [paper](https://hal.inria.fr/hal-01536406/).; More about this can be found on the[ SOFA website](https://www.sofa-framework.org/about/news/validation-of-a-non-linear-model-of-the-liver/). TODO next : ; - improve how parameters are given, stored; - allow for non-homogeneous model (definition per tetra); - add associated test. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/349
https://github.com/sofa-framework/sofa/pull/349:715,Testability,test,test,715,"This PR adds finally hyperelasticity code in SOFA! ; Related to issue : https://github.com/sofa-framework/sofa/issues/231. Based on the work of @hdeling with @IPeterlik six new hyperelastic models (linearized or non-linear constitutive law) can now be used:; - ArrudaBoyce; - StVenant; - Mooney-Rivlin; - VerondaWestman; - Costa; - Ogden. Note that a validation of such models was done in this [paper](https://hal.inria.fr/hal-01536406/).; More about this can be found on the[ SOFA website](https://www.sofa-framework.org/about/news/validation-of-a-non-linear-model-of-the-liver/). TODO next : ; - improve how parameters are given, stored; - allow for non-homogeneous model (definition per tetra); - add associated test. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/349
https://github.com/sofa-framework/sofa/pull/349:972,Testability,test,test,972,"This PR adds finally hyperelasticity code in SOFA! ; Related to issue : https://github.com/sofa-framework/sofa/issues/231. Based on the work of @hdeling with @IPeterlik six new hyperelastic models (linearized or non-linear constitutive law) can now be used:; - ArrudaBoyce; - StVenant; - Mooney-Rivlin; - VerondaWestman; - Costa; - Ogden. Note that a validation of such models was done in this [paper](https://hal.inria.fr/hal-01536406/).; More about this can be found on the[ SOFA website](https://www.sofa-framework.org/about/news/validation-of-a-non-linear-model-of-the-liver/). TODO next : ; - improve how parameters are given, stored; - allow for non-homogeneous model (definition per tetra); - add associated test. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/349
https://github.com/sofa-framework/sofa/pull/349:1022,Testability,test,test,1022,"This PR adds finally hyperelasticity code in SOFA! ; Related to issue : https://github.com/sofa-framework/sofa/issues/231. Based on the work of @hdeling with @IPeterlik six new hyperelastic models (linearized or non-linear constitutive law) can now be used:; - ArrudaBoyce; - StVenant; - Mooney-Rivlin; - VerondaWestman; - Costa; - Ogden. Note that a validation of such models was done in this [paper](https://hal.inria.fr/hal-01536406/).; More about this can be found on the[ SOFA website](https://www.sofa-framework.org/about/news/validation-of-a-non-linear-model-of-the-liver/). TODO next : ; - improve how parameters are given, stored; - allow for non-homogeneous model (definition per tetra); - add associated test. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/349
https://github.com/sofa-framework/sofa/pull/350:572,Availability,avail,available,572,"See issue: https://github.com/sofa-framework/sofa/issues/338; The Rayleigh parameters (Rayleigh mass and stiffness) are used for numerical dumping in the simulation. However, most integration schemes (OdeSolvers) in SOFA use NON-ZERO default values. This commit fixes this.; The user must be aware of its dumping parameters, now : ; - default rayleighMass=0.0; - default rayleighStiffness=0.0. To avoid breaking all scenes, this PR also updates (where needed) the rayleighMass and; rayleighStiffness parameter (set to 0.1 like previous default values). NOTE : a script is available for updating all your own scenes if needed (script/update-scenes-rayleighcoeff.sh). ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/350
https://github.com/sofa-framework/sofa/pull/350:922,Availability,failure,failures,922,"See issue: https://github.com/sofa-framework/sofa/issues/338; The Rayleigh parameters (Rayleigh mass and stiffness) are used for numerical dumping in the simulation. However, most integration schemes (OdeSolvers) in SOFA use NON-ZERO default values. This commit fixes this.; The user must be aware of its dumping parameters, now : ; - default rayleighMass=0.0; - default rayleighStiffness=0.0. To avoid breaking all scenes, this PR also updates (where needed) the rayleighMass and; rayleighStiffness parameter (set to 0.1 like previous default values). NOTE : a script is available for updating all your own scenes if needed (script/update-scenes-rayleighcoeff.sh). ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/350
https://github.com/sofa-framework/sofa/pull/350:972,Availability,failure,failures,972,"See issue: https://github.com/sofa-framework/sofa/issues/338; The Rayleigh parameters (Rayleigh mass and stiffness) are used for numerical dumping in the simulation. However, most integration schemes (OdeSolvers) in SOFA use NON-ZERO default values. This commit fixes this.; The user must be aware of its dumping parameters, now : ; - default rayleighMass=0.0; - default rayleighStiffness=0.0. To avoid breaking all scenes, this PR also updates (where needed) the rayleighMass and; rayleighStiffness parameter (set to 0.1 like previous default values). NOTE : a script is available for updating all your own scenes if needed (script/update-scenes-rayleighcoeff.sh). ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/350
https://github.com/sofa-framework/sofa/pull/350:180,Deployability,integrat,integration,180,"See issue: https://github.com/sofa-framework/sofa/issues/338; The Rayleigh parameters (Rayleigh mass and stiffness) are used for numerical dumping in the simulation. However, most integration schemes (OdeSolvers) in SOFA use NON-ZERO default values. This commit fixes this.; The user must be aware of its dumping parameters, now : ; - default rayleighMass=0.0; - default rayleighStiffness=0.0. To avoid breaking all scenes, this PR also updates (where needed) the rayleighMass and; rayleighStiffness parameter (set to 0.1 like previous default values). NOTE : a script is available for updating all your own scenes if needed (script/update-scenes-rayleighcoeff.sh). ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/350
https://github.com/sofa-framework/sofa/pull/350:437,Deployability,update,updates,437,"See issue: https://github.com/sofa-framework/sofa/issues/338; The Rayleigh parameters (Rayleigh mass and stiffness) are used for numerical dumping in the simulation. However, most integration schemes (OdeSolvers) in SOFA use NON-ZERO default values. This commit fixes this.; The user must be aware of its dumping parameters, now : ; - default rayleighMass=0.0; - default rayleighStiffness=0.0. To avoid breaking all scenes, this PR also updates (where needed) the rayleighMass and; rayleighStiffness parameter (set to 0.1 like previous default values). NOTE : a script is available for updating all your own scenes if needed (script/update-scenes-rayleighcoeff.sh). ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/350
https://github.com/sofa-framework/sofa/pull/350:633,Deployability,update,update-scenes-rayleighcoeff,633,"See issue: https://github.com/sofa-framework/sofa/issues/338; The Rayleigh parameters (Rayleigh mass and stiffness) are used for numerical dumping in the simulation. However, most integration schemes (OdeSolvers) in SOFA use NON-ZERO default values. This commit fixes this.; The user must be aware of its dumping parameters, now : ; - default rayleighMass=0.0; - default rayleighStiffness=0.0. To avoid breaking all scenes, this PR also updates (where needed) the rayleighMass and; rayleighStiffness parameter (set to 0.1 like previous default values). NOTE : a script is available for updating all your own scenes if needed (script/update-scenes-rayleighcoeff.sh). ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/350
https://github.com/sofa-framework/sofa/pull/350:180,Integrability,integrat,integration,180,"See issue: https://github.com/sofa-framework/sofa/issues/338; The Rayleigh parameters (Rayleigh mass and stiffness) are used for numerical dumping in the simulation. However, most integration schemes (OdeSolvers) in SOFA use NON-ZERO default values. This commit fixes this.; The user must be aware of its dumping parameters, now : ; - default rayleighMass=0.0; - default rayleighStiffness=0.0. To avoid breaking all scenes, this PR also updates (where needed) the rayleighMass and; rayleighStiffness parameter (set to 0.1 like previous default values). NOTE : a script is available for updating all your own scenes if needed (script/update-scenes-rayleighcoeff.sh). ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/350
https://github.com/sofa-framework/sofa/pull/350:765,Integrability,message,message,765,"See issue: https://github.com/sofa-framework/sofa/issues/338; The Rayleigh parameters (Rayleigh mass and stiffness) are used for numerical dumping in the simulation. However, most integration schemes (OdeSolvers) in SOFA use NON-ZERO default values. This commit fixes this.; The user must be aware of its dumping parameters, now : ; - default rayleighMass=0.0; - default rayleighStiffness=0.0. To avoid breaking all scenes, this PR also updates (where needed) the rayleighMass and; rayleighStiffness parameter (set to 0.1 like previous default values). NOTE : a script is available for updating all your own scenes if needed (script/update-scenes-rayleighcoeff.sh). ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/350
https://github.com/sofa-framework/sofa/pull/350:397,Safety,avoid,avoid,397,"See issue: https://github.com/sofa-framework/sofa/issues/338; The Rayleigh parameters (Rayleigh mass and stiffness) are used for numerical dumping in the simulation. However, most integration schemes (OdeSolvers) in SOFA use NON-ZERO default values. This commit fixes this.; The user must be aware of its dumping parameters, now : ; - default rayleighMass=0.0; - default rayleighStiffness=0.0. To avoid breaking all scenes, this PR also updates (where needed) the rayleighMass and; rayleighStiffness parameter (set to 0.1 like previous default values). NOTE : a script is available for updating all your own scenes if needed (script/update-scenes-rayleighcoeff.sh). ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/350
https://github.com/sofa-framework/sofa/pull/350:917,Testability,test,test,917,"See issue: https://github.com/sofa-framework/sofa/issues/338; The Rayleigh parameters (Rayleigh mass and stiffness) are used for numerical dumping in the simulation. However, most integration schemes (OdeSolvers) in SOFA use NON-ZERO default values. This commit fixes this.; The user must be aware of its dumping parameters, now : ; - default rayleighMass=0.0; - default rayleighStiffness=0.0. To avoid breaking all scenes, this PR also updates (where needed) the rayleighMass and; rayleighStiffness parameter (set to 0.1 like previous default values). NOTE : a script is available for updating all your own scenes if needed (script/update-scenes-rayleighcoeff.sh). ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/350
https://github.com/sofa-framework/sofa/pull/350:967,Testability,test,test,967,"See issue: https://github.com/sofa-framework/sofa/issues/338; The Rayleigh parameters (Rayleigh mass and stiffness) are used for numerical dumping in the simulation. However, most integration schemes (OdeSolvers) in SOFA use NON-ZERO default values. This commit fixes this.; The user must be aware of its dumping parameters, now : ; - default rayleighMass=0.0; - default rayleighStiffness=0.0. To avoid breaking all scenes, this PR also updates (where needed) the rayleighMass and; rayleighStiffness parameter (set to 0.1 like previous default values). NOTE : a script is available for updating all your own scenes if needed (script/update-scenes-rayleighcoeff.sh). ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/350
https://github.com/sofa-framework/sofa/pull/351:90,Availability,error,error,90,"CGAL plugin has some build issues in some circumstances, this PR aims to fix it:. - build error if ""image"" plugin is deactivated; - BOOST_PARAMETER_MAX_ARITY too low by default (5 by default, where CGAL needs 12 at least). ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/351
https://github.com/sofa-framework/sofa/pull/351:479,Availability,failure,failures,479,"CGAL plugin has some build issues in some circumstances, this PR aims to fix it:. - build error if ""image"" plugin is deactivated; - BOOST_PARAMETER_MAX_ARITY too low by default (5 by default, where CGAL needs 12 at least). ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/351
https://github.com/sofa-framework/sofa/pull/351:529,Availability,failure,failures,529,"CGAL plugin has some build issues in some circumstances, this PR aims to fix it:. - build error if ""image"" plugin is deactivated; - BOOST_PARAMETER_MAX_ARITY too low by default (5 by default, where CGAL needs 12 at least). ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/351
https://github.com/sofa-framework/sofa/pull/351:322,Integrability,message,message,322,"CGAL plugin has some build issues in some circumstances, this PR aims to fix it:. - build error if ""image"" plugin is deactivated; - BOOST_PARAMETER_MAX_ARITY too low by default (5 by default, where CGAL needs 12 at least). ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/351
https://github.com/sofa-framework/sofa/pull/351:5,Modifiability,plugin,plugin,5,"CGAL plugin has some build issues in some circumstances, this PR aims to fix it:. - build error if ""image"" plugin is deactivated; - BOOST_PARAMETER_MAX_ARITY too low by default (5 by default, where CGAL needs 12 at least). ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/351
https://github.com/sofa-framework/sofa/pull/351:107,Modifiability,plugin,plugin,107,"CGAL plugin has some build issues in some circumstances, this PR aims to fix it:. - build error if ""image"" plugin is deactivated; - BOOST_PARAMETER_MAX_ARITY too low by default (5 by default, where CGAL needs 12 at least). ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/351
https://github.com/sofa-framework/sofa/pull/351:474,Testability,test,test,474,"CGAL plugin has some build issues in some circumstances, this PR aims to fix it:. - build error if ""image"" plugin is deactivated; - BOOST_PARAMETER_MAX_ARITY too low by default (5 by default, where CGAL needs 12 at least). ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/351
https://github.com/sofa-framework/sofa/pull/351:524,Testability,test,test,524,"CGAL plugin has some build issues in some circumstances, this PR aims to fix it:. - build error if ""image"" plugin is deactivated; - BOOST_PARAMETER_MAX_ARITY too low by default (5 by default, where CGAL needs 12 at least). ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/351
https://github.com/sofa-framework/sofa/issues/352:2280,Availability,error,error,2280,"FromImage.cpp.o; ""_readImage(char const*)"", referenced from:; cgal::MeshGenerationFromImage<sofa::defaulttype::StdVectorTypes<sofa::defaulttype::Vec<3, double>, sofa::defaulttype::Vec<3, double>, double>, sofa::defaulttype::Image<unsigned char> >::update() in MeshGenerationFromImage.cpp.o; cgal::MeshGenerationFromImage<sofa::defaulttype::StdVectorTypes<sofa::defaulttype::Vec<3, float>, sofa::defaulttype::Vec<3, float>, float>, sofa::defaulttype::Image<unsigned char> >::update() in MeshGenerationFromImage.cpp.o; ""ImageIO_alloc(unsigned long)"", referenced from:; cgal::MeshGenerationFromImage<sofa::defaulttype::StdVectorTypes<sofa::defaulttype::Vec<3, double>, sofa::defaulttype::Vec<3, double>, double>, sofa::defaulttype::Image<unsigned char> >::update() in MeshGenerationFromImage.cpp.o; cgal::MeshGenerationFromImage<sofa::defaulttype::StdVectorTypes<sofa::defaulttype::Vec<3, float>, sofa::defaulttype::Vec<3, float>, float>, sofa::defaulttype::Image<unsigned char> >::update() in MeshGenerationFromImage.cpp.o; ""CGAL::Image_3::private_read(point_image*)"", referenced from:; cgal::MeshGenerationFromImage<sofa::defaulttype::StdVectorTypes<sofa::defaulttype::Vec<3, double>, sofa::defaulttype::Vec<3, double>, double>, sofa::defaulttype::Image<unsigned char> >::update() in MeshGenerationFromImage.cpp.o; cgal::MeshGenerationFromImage<sofa::defaulttype::StdVectorTypes<sofa::defaulttype::Vec<3, float>, sofa::defaulttype::Vec<3, float>, float>, sofa::defaulttype::Image<unsigned char> >::update() in MeshGenerationFromImage.cpp.o; ld: symbol(s) not found for architecture x86_64; ```. This file is only included if the image plugin is activated, thus making this error appear only in specific cases. Moreover, since CGAL seems not tested on CI, this error might be quite old, as it has passed under the radar so far. It has been observed on OS X, and Linux. ______________________________________________________. Suggested labels: <!--- see https://github.com/sofa-framework/sofa/labels -->",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/352
https://github.com/sofa-framework/sofa/issues/352:2367,Availability,error,error,2367,"FromImage.cpp.o; ""_readImage(char const*)"", referenced from:; cgal::MeshGenerationFromImage<sofa::defaulttype::StdVectorTypes<sofa::defaulttype::Vec<3, double>, sofa::defaulttype::Vec<3, double>, double>, sofa::defaulttype::Image<unsigned char> >::update() in MeshGenerationFromImage.cpp.o; cgal::MeshGenerationFromImage<sofa::defaulttype::StdVectorTypes<sofa::defaulttype::Vec<3, float>, sofa::defaulttype::Vec<3, float>, float>, sofa::defaulttype::Image<unsigned char> >::update() in MeshGenerationFromImage.cpp.o; ""ImageIO_alloc(unsigned long)"", referenced from:; cgal::MeshGenerationFromImage<sofa::defaulttype::StdVectorTypes<sofa::defaulttype::Vec<3, double>, sofa::defaulttype::Vec<3, double>, double>, sofa::defaulttype::Image<unsigned char> >::update() in MeshGenerationFromImage.cpp.o; cgal::MeshGenerationFromImage<sofa::defaulttype::StdVectorTypes<sofa::defaulttype::Vec<3, float>, sofa::defaulttype::Vec<3, float>, float>, sofa::defaulttype::Image<unsigned char> >::update() in MeshGenerationFromImage.cpp.o; ""CGAL::Image_3::private_read(point_image*)"", referenced from:; cgal::MeshGenerationFromImage<sofa::defaulttype::StdVectorTypes<sofa::defaulttype::Vec<3, double>, sofa::defaulttype::Vec<3, double>, double>, sofa::defaulttype::Image<unsigned char> >::update() in MeshGenerationFromImage.cpp.o; cgal::MeshGenerationFromImage<sofa::defaulttype::StdVectorTypes<sofa::defaulttype::Vec<3, float>, sofa::defaulttype::Vec<3, float>, float>, sofa::defaulttype::Image<unsigned char> >::update() in MeshGenerationFromImage.cpp.o; ld: symbol(s) not found for architecture x86_64; ```. This file is only included if the image plugin is activated, thus making this error appear only in specific cases. Moreover, since CGAL seems not tested on CI, this error might be quite old, as it has passed under the radar so far. It has been observed on OS X, and Linux. ______________________________________________________. Suggested labels: <!--- see https://github.com/sofa-framework/sofa/labels -->",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/352
https://github.com/sofa-framework/sofa/issues/352:356,Deployability,update,update,356,"There are some unresolved externals in MeshGenerationFromImage.inl in the CGAL plugin. ; ```Undefined symbols for architecture x86_64:; ""_initImage()"", referenced from:; cgal::MeshGenerationFromImage<sofa::defaulttype::StdVectorTypes<sofa::defaulttype::Vec<3, double>, sofa::defaulttype::Vec<3, double>, double>, sofa::defaulttype::Image<unsigned char> >::update() in MeshGenerationFromImage.cpp.o; cgal::MeshGenerationFromImage<sofa::defaulttype::StdVectorTypes<sofa::defaulttype::Vec<3, float>, sofa::defaulttype::Vec<3, float>, float>, sofa::defaulttype::Image<unsigned char> >::update() in MeshGenerationFromImage.cpp.o; ""_readImage(char const*)"", referenced from:; cgal::MeshGenerationFromImage<sofa::defaulttype::StdVectorTypes<sofa::defaulttype::Vec<3, double>, sofa::defaulttype::Vec<3, double>, double>, sofa::defaulttype::Image<unsigned char> >::update() in MeshGenerationFromImage.cpp.o; cgal::MeshGenerationFromImage<sofa::defaulttype::StdVectorTypes<sofa::defaulttype::Vec<3, float>, sofa::defaulttype::Vec<3, float>, float>, sofa::defaulttype::Image<unsigned char> >::update() in MeshGenerationFromImage.cpp.o; ""ImageIO_alloc(unsigned long)"", referenced from:; cgal::MeshGenerationFromImage<sofa::defaulttype::StdVectorTypes<sofa::defaulttype::Vec<3, double>, sofa::defaulttype::Vec<3, double>, double>, sofa::defaulttype::Image<unsigned char> >::update() in MeshGenerationFromImage.cpp.o; cgal::MeshGenerationFromImage<sofa::defaulttype::StdVectorTypes<sofa::defaulttype::Vec<3, float>, sofa::defaulttype::Vec<3, float>, float>, sofa::defaulttype::Image<unsigned char> >::update() in MeshGenerationFromImage.cpp.o; ""CGAL::Image_3::private_read(point_image*)"", referenced from:; cgal::MeshGenerationFromImage<sofa::defaulttype::StdVectorTypes<sofa::defaulttype::Vec<3, double>, sofa::defaulttype::Vec<3, double>, double>, sofa::defaulttype::Image<unsigned char> >::update() in MeshGenerationFromImage.cpp.o; cgal::MeshGenerationFromImage<sofa::defaulttype::StdVectorTypes<sofa::defaultty",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/352
https://github.com/sofa-framework/sofa/issues/352:582,Deployability,update,update,582,"There are some unresolved externals in MeshGenerationFromImage.inl in the CGAL plugin. ; ```Undefined symbols for architecture x86_64:; ""_initImage()"", referenced from:; cgal::MeshGenerationFromImage<sofa::defaulttype::StdVectorTypes<sofa::defaulttype::Vec<3, double>, sofa::defaulttype::Vec<3, double>, double>, sofa::defaulttype::Image<unsigned char> >::update() in MeshGenerationFromImage.cpp.o; cgal::MeshGenerationFromImage<sofa::defaulttype::StdVectorTypes<sofa::defaulttype::Vec<3, float>, sofa::defaulttype::Vec<3, float>, float>, sofa::defaulttype::Image<unsigned char> >::update() in MeshGenerationFromImage.cpp.o; ""_readImage(char const*)"", referenced from:; cgal::MeshGenerationFromImage<sofa::defaulttype::StdVectorTypes<sofa::defaulttype::Vec<3, double>, sofa::defaulttype::Vec<3, double>, double>, sofa::defaulttype::Image<unsigned char> >::update() in MeshGenerationFromImage.cpp.o; cgal::MeshGenerationFromImage<sofa::defaulttype::StdVectorTypes<sofa::defaulttype::Vec<3, float>, sofa::defaulttype::Vec<3, float>, float>, sofa::defaulttype::Image<unsigned char> >::update() in MeshGenerationFromImage.cpp.o; ""ImageIO_alloc(unsigned long)"", referenced from:; cgal::MeshGenerationFromImage<sofa::defaulttype::StdVectorTypes<sofa::defaulttype::Vec<3, double>, sofa::defaulttype::Vec<3, double>, double>, sofa::defaulttype::Image<unsigned char> >::update() in MeshGenerationFromImage.cpp.o; cgal::MeshGenerationFromImage<sofa::defaulttype::StdVectorTypes<sofa::defaulttype::Vec<3, float>, sofa::defaulttype::Vec<3, float>, float>, sofa::defaulttype::Image<unsigned char> >::update() in MeshGenerationFromImage.cpp.o; ""CGAL::Image_3::private_read(point_image*)"", referenced from:; cgal::MeshGenerationFromImage<sofa::defaulttype::StdVectorTypes<sofa::defaulttype::Vec<3, double>, sofa::defaulttype::Vec<3, double>, double>, sofa::defaulttype::Image<unsigned char> >::update() in MeshGenerationFromImage.cpp.o; cgal::MeshGenerationFromImage<sofa::defaulttype::StdVectorTypes<sofa::defaultty",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/352
https://github.com/sofa-framework/sofa/issues/352:856,Deployability,update,update,856,"There are some unresolved externals in MeshGenerationFromImage.inl in the CGAL plugin. ; ```Undefined symbols for architecture x86_64:; ""_initImage()"", referenced from:; cgal::MeshGenerationFromImage<sofa::defaulttype::StdVectorTypes<sofa::defaulttype::Vec<3, double>, sofa::defaulttype::Vec<3, double>, double>, sofa::defaulttype::Image<unsigned char> >::update() in MeshGenerationFromImage.cpp.o; cgal::MeshGenerationFromImage<sofa::defaulttype::StdVectorTypes<sofa::defaulttype::Vec<3, float>, sofa::defaulttype::Vec<3, float>, float>, sofa::defaulttype::Image<unsigned char> >::update() in MeshGenerationFromImage.cpp.o; ""_readImage(char const*)"", referenced from:; cgal::MeshGenerationFromImage<sofa::defaulttype::StdVectorTypes<sofa::defaulttype::Vec<3, double>, sofa::defaulttype::Vec<3, double>, double>, sofa::defaulttype::Image<unsigned char> >::update() in MeshGenerationFromImage.cpp.o; cgal::MeshGenerationFromImage<sofa::defaulttype::StdVectorTypes<sofa::defaulttype::Vec<3, float>, sofa::defaulttype::Vec<3, float>, float>, sofa::defaulttype::Image<unsigned char> >::update() in MeshGenerationFromImage.cpp.o; ""ImageIO_alloc(unsigned long)"", referenced from:; cgal::MeshGenerationFromImage<sofa::defaulttype::StdVectorTypes<sofa::defaulttype::Vec<3, double>, sofa::defaulttype::Vec<3, double>, double>, sofa::defaulttype::Image<unsigned char> >::update() in MeshGenerationFromImage.cpp.o; cgal::MeshGenerationFromImage<sofa::defaulttype::StdVectorTypes<sofa::defaulttype::Vec<3, float>, sofa::defaulttype::Vec<3, float>, float>, sofa::defaulttype::Image<unsigned char> >::update() in MeshGenerationFromImage.cpp.o; ""CGAL::Image_3::private_read(point_image*)"", referenced from:; cgal::MeshGenerationFromImage<sofa::defaulttype::StdVectorTypes<sofa::defaulttype::Vec<3, double>, sofa::defaulttype::Vec<3, double>, double>, sofa::defaulttype::Image<unsigned char> >::update() in MeshGenerationFromImage.cpp.o; cgal::MeshGenerationFromImage<sofa::defaulttype::StdVectorTypes<sofa::defaultty",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/352
https://github.com/sofa-framework/sofa/issues/352:1082,Deployability,update,update,1082,"re some unresolved externals in MeshGenerationFromImage.inl in the CGAL plugin. ; ```Undefined symbols for architecture x86_64:; ""_initImage()"", referenced from:; cgal::MeshGenerationFromImage<sofa::defaulttype::StdVectorTypes<sofa::defaulttype::Vec<3, double>, sofa::defaulttype::Vec<3, double>, double>, sofa::defaulttype::Image<unsigned char> >::update() in MeshGenerationFromImage.cpp.o; cgal::MeshGenerationFromImage<sofa::defaulttype::StdVectorTypes<sofa::defaulttype::Vec<3, float>, sofa::defaulttype::Vec<3, float>, float>, sofa::defaulttype::Image<unsigned char> >::update() in MeshGenerationFromImage.cpp.o; ""_readImage(char const*)"", referenced from:; cgal::MeshGenerationFromImage<sofa::defaulttype::StdVectorTypes<sofa::defaulttype::Vec<3, double>, sofa::defaulttype::Vec<3, double>, double>, sofa::defaulttype::Image<unsigned char> >::update() in MeshGenerationFromImage.cpp.o; cgal::MeshGenerationFromImage<sofa::defaulttype::StdVectorTypes<sofa::defaulttype::Vec<3, float>, sofa::defaulttype::Vec<3, float>, float>, sofa::defaulttype::Image<unsigned char> >::update() in MeshGenerationFromImage.cpp.o; ""ImageIO_alloc(unsigned long)"", referenced from:; cgal::MeshGenerationFromImage<sofa::defaulttype::StdVectorTypes<sofa::defaulttype::Vec<3, double>, sofa::defaulttype::Vec<3, double>, double>, sofa::defaulttype::Image<unsigned char> >::update() in MeshGenerationFromImage.cpp.o; cgal::MeshGenerationFromImage<sofa::defaulttype::StdVectorTypes<sofa::defaulttype::Vec<3, float>, sofa::defaulttype::Vec<3, float>, float>, sofa::defaulttype::Image<unsigned char> >::update() in MeshGenerationFromImage.cpp.o; ""CGAL::Image_3::private_read(point_image*)"", referenced from:; cgal::MeshGenerationFromImage<sofa::defaulttype::StdVectorTypes<sofa::defaulttype::Vec<3, double>, sofa::defaulttype::Vec<3, double>, double>, sofa::defaulttype::Image<unsigned char> >::update() in MeshGenerationFromImage.cpp.o; cgal::MeshGenerationFromImage<sofa::defaulttype::StdVectorTypes<sofa::defaulttype::Ve",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/352
https://github.com/sofa-framework/sofa/issues/352:1361,Deployability,update,update,1361," double>, sofa::defaulttype::Vec<3, double>, double>, sofa::defaulttype::Image<unsigned char> >::update() in MeshGenerationFromImage.cpp.o; cgal::MeshGenerationFromImage<sofa::defaulttype::StdVectorTypes<sofa::defaulttype::Vec<3, float>, sofa::defaulttype::Vec<3, float>, float>, sofa::defaulttype::Image<unsigned char> >::update() in MeshGenerationFromImage.cpp.o; ""_readImage(char const*)"", referenced from:; cgal::MeshGenerationFromImage<sofa::defaulttype::StdVectorTypes<sofa::defaulttype::Vec<3, double>, sofa::defaulttype::Vec<3, double>, double>, sofa::defaulttype::Image<unsigned char> >::update() in MeshGenerationFromImage.cpp.o; cgal::MeshGenerationFromImage<sofa::defaulttype::StdVectorTypes<sofa::defaulttype::Vec<3, float>, sofa::defaulttype::Vec<3, float>, float>, sofa::defaulttype::Image<unsigned char> >::update() in MeshGenerationFromImage.cpp.o; ""ImageIO_alloc(unsigned long)"", referenced from:; cgal::MeshGenerationFromImage<sofa::defaulttype::StdVectorTypes<sofa::defaulttype::Vec<3, double>, sofa::defaulttype::Vec<3, double>, double>, sofa::defaulttype::Image<unsigned char> >::update() in MeshGenerationFromImage.cpp.o; cgal::MeshGenerationFromImage<sofa::defaulttype::StdVectorTypes<sofa::defaulttype::Vec<3, float>, sofa::defaulttype::Vec<3, float>, float>, sofa::defaulttype::Image<unsigned char> >::update() in MeshGenerationFromImage.cpp.o; ""CGAL::Image_3::private_read(point_image*)"", referenced from:; cgal::MeshGenerationFromImage<sofa::defaulttype::StdVectorTypes<sofa::defaulttype::Vec<3, double>, sofa::defaulttype::Vec<3, double>, double>, sofa::defaulttype::Image<unsigned char> >::update() in MeshGenerationFromImage.cpp.o; cgal::MeshGenerationFromImage<sofa::defaulttype::StdVectorTypes<sofa::defaulttype::Vec<3, float>, sofa::defaulttype::Vec<3, float>, float>, sofa::defaulttype::Image<unsigned char> >::update() in MeshGenerationFromImage.cpp.o; ld: symbol(s) not found for architecture x86_64; ```. This file is only included if the image plugin is activate",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/352
https://github.com/sofa-framework/sofa/issues/352:1587,Deployability,update,update,1587,"pe::Vec<3, float>, float>, sofa::defaulttype::Image<unsigned char> >::update() in MeshGenerationFromImage.cpp.o; ""_readImage(char const*)"", referenced from:; cgal::MeshGenerationFromImage<sofa::defaulttype::StdVectorTypes<sofa::defaulttype::Vec<3, double>, sofa::defaulttype::Vec<3, double>, double>, sofa::defaulttype::Image<unsigned char> >::update() in MeshGenerationFromImage.cpp.o; cgal::MeshGenerationFromImage<sofa::defaulttype::StdVectorTypes<sofa::defaulttype::Vec<3, float>, sofa::defaulttype::Vec<3, float>, float>, sofa::defaulttype::Image<unsigned char> >::update() in MeshGenerationFromImage.cpp.o; ""ImageIO_alloc(unsigned long)"", referenced from:; cgal::MeshGenerationFromImage<sofa::defaulttype::StdVectorTypes<sofa::defaulttype::Vec<3, double>, sofa::defaulttype::Vec<3, double>, double>, sofa::defaulttype::Image<unsigned char> >::update() in MeshGenerationFromImage.cpp.o; cgal::MeshGenerationFromImage<sofa::defaulttype::StdVectorTypes<sofa::defaulttype::Vec<3, float>, sofa::defaulttype::Vec<3, float>, float>, sofa::defaulttype::Image<unsigned char> >::update() in MeshGenerationFromImage.cpp.o; ""CGAL::Image_3::private_read(point_image*)"", referenced from:; cgal::MeshGenerationFromImage<sofa::defaulttype::StdVectorTypes<sofa::defaulttype::Vec<3, double>, sofa::defaulttype::Vec<3, double>, double>, sofa::defaulttype::Image<unsigned char> >::update() in MeshGenerationFromImage.cpp.o; cgal::MeshGenerationFromImage<sofa::defaulttype::StdVectorTypes<sofa::defaulttype::Vec<3, float>, sofa::defaulttype::Vec<3, float>, float>, sofa::defaulttype::Image<unsigned char> >::update() in MeshGenerationFromImage.cpp.o; ld: symbol(s) not found for architecture x86_64; ```. This file is only included if the image plugin is activated, thus making this error appear only in specific cases. Moreover, since CGAL seems not tested on CI, this error might be quite old, as it has passed under the radar so far. It has been observed on OS X, and Linux. _____________________________________",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/352
https://github.com/sofa-framework/sofa/issues/352:1879,Deployability,update,update,1879,"FromImage.cpp.o; ""_readImage(char const*)"", referenced from:; cgal::MeshGenerationFromImage<sofa::defaulttype::StdVectorTypes<sofa::defaulttype::Vec<3, double>, sofa::defaulttype::Vec<3, double>, double>, sofa::defaulttype::Image<unsigned char> >::update() in MeshGenerationFromImage.cpp.o; cgal::MeshGenerationFromImage<sofa::defaulttype::StdVectorTypes<sofa::defaulttype::Vec<3, float>, sofa::defaulttype::Vec<3, float>, float>, sofa::defaulttype::Image<unsigned char> >::update() in MeshGenerationFromImage.cpp.o; ""ImageIO_alloc(unsigned long)"", referenced from:; cgal::MeshGenerationFromImage<sofa::defaulttype::StdVectorTypes<sofa::defaulttype::Vec<3, double>, sofa::defaulttype::Vec<3, double>, double>, sofa::defaulttype::Image<unsigned char> >::update() in MeshGenerationFromImage.cpp.o; cgal::MeshGenerationFromImage<sofa::defaulttype::StdVectorTypes<sofa::defaulttype::Vec<3, float>, sofa::defaulttype::Vec<3, float>, float>, sofa::defaulttype::Image<unsigned char> >::update() in MeshGenerationFromImage.cpp.o; ""CGAL::Image_3::private_read(point_image*)"", referenced from:; cgal::MeshGenerationFromImage<sofa::defaulttype::StdVectorTypes<sofa::defaulttype::Vec<3, double>, sofa::defaulttype::Vec<3, double>, double>, sofa::defaulttype::Image<unsigned char> >::update() in MeshGenerationFromImage.cpp.o; cgal::MeshGenerationFromImage<sofa::defaulttype::StdVectorTypes<sofa::defaulttype::Vec<3, float>, sofa::defaulttype::Vec<3, float>, float>, sofa::defaulttype::Image<unsigned char> >::update() in MeshGenerationFromImage.cpp.o; ld: symbol(s) not found for architecture x86_64; ```. This file is only included if the image plugin is activated, thus making this error appear only in specific cases. Moreover, since CGAL seems not tested on CI, this error might be quite old, as it has passed under the radar so far. It has been observed on OS X, and Linux. ______________________________________________________. Suggested labels: <!--- see https://github.com/sofa-framework/sofa/labels -->",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/352
https://github.com/sofa-framework/sofa/issues/352:2105,Deployability,update,update,2105,"FromImage.cpp.o; ""_readImage(char const*)"", referenced from:; cgal::MeshGenerationFromImage<sofa::defaulttype::StdVectorTypes<sofa::defaulttype::Vec<3, double>, sofa::defaulttype::Vec<3, double>, double>, sofa::defaulttype::Image<unsigned char> >::update() in MeshGenerationFromImage.cpp.o; cgal::MeshGenerationFromImage<sofa::defaulttype::StdVectorTypes<sofa::defaulttype::Vec<3, float>, sofa::defaulttype::Vec<3, float>, float>, sofa::defaulttype::Image<unsigned char> >::update() in MeshGenerationFromImage.cpp.o; ""ImageIO_alloc(unsigned long)"", referenced from:; cgal::MeshGenerationFromImage<sofa::defaulttype::StdVectorTypes<sofa::defaulttype::Vec<3, double>, sofa::defaulttype::Vec<3, double>, double>, sofa::defaulttype::Image<unsigned char> >::update() in MeshGenerationFromImage.cpp.o; cgal::MeshGenerationFromImage<sofa::defaulttype::StdVectorTypes<sofa::defaulttype::Vec<3, float>, sofa::defaulttype::Vec<3, float>, float>, sofa::defaulttype::Image<unsigned char> >::update() in MeshGenerationFromImage.cpp.o; ""CGAL::Image_3::private_read(point_image*)"", referenced from:; cgal::MeshGenerationFromImage<sofa::defaulttype::StdVectorTypes<sofa::defaulttype::Vec<3, double>, sofa::defaulttype::Vec<3, double>, double>, sofa::defaulttype::Image<unsigned char> >::update() in MeshGenerationFromImage.cpp.o; cgal::MeshGenerationFromImage<sofa::defaulttype::StdVectorTypes<sofa::defaulttype::Vec<3, float>, sofa::defaulttype::Vec<3, float>, float>, sofa::defaulttype::Image<unsigned char> >::update() in MeshGenerationFromImage.cpp.o; ld: symbol(s) not found for architecture x86_64; ```. This file is only included if the image plugin is activated, thus making this error appear only in specific cases. Moreover, since CGAL seems not tested on CI, this error might be quite old, as it has passed under the radar so far. It has been observed on OS X, and Linux. ______________________________________________________. Suggested labels: <!--- see https://github.com/sofa-framework/sofa/labels -->",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/352
https://github.com/sofa-framework/sofa/issues/352:79,Modifiability,plugin,plugin,79,"There are some unresolved externals in MeshGenerationFromImage.inl in the CGAL plugin. ; ```Undefined symbols for architecture x86_64:; ""_initImage()"", referenced from:; cgal::MeshGenerationFromImage<sofa::defaulttype::StdVectorTypes<sofa::defaulttype::Vec<3, double>, sofa::defaulttype::Vec<3, double>, double>, sofa::defaulttype::Image<unsigned char> >::update() in MeshGenerationFromImage.cpp.o; cgal::MeshGenerationFromImage<sofa::defaulttype::StdVectorTypes<sofa::defaulttype::Vec<3, float>, sofa::defaulttype::Vec<3, float>, float>, sofa::defaulttype::Image<unsigned char> >::update() in MeshGenerationFromImage.cpp.o; ""_readImage(char const*)"", referenced from:; cgal::MeshGenerationFromImage<sofa::defaulttype::StdVectorTypes<sofa::defaulttype::Vec<3, double>, sofa::defaulttype::Vec<3, double>, double>, sofa::defaulttype::Image<unsigned char> >::update() in MeshGenerationFromImage.cpp.o; cgal::MeshGenerationFromImage<sofa::defaulttype::StdVectorTypes<sofa::defaulttype::Vec<3, float>, sofa::defaulttype::Vec<3, float>, float>, sofa::defaulttype::Image<unsigned char> >::update() in MeshGenerationFromImage.cpp.o; ""ImageIO_alloc(unsigned long)"", referenced from:; cgal::MeshGenerationFromImage<sofa::defaulttype::StdVectorTypes<sofa::defaulttype::Vec<3, double>, sofa::defaulttype::Vec<3, double>, double>, sofa::defaulttype::Image<unsigned char> >::update() in MeshGenerationFromImage.cpp.o; cgal::MeshGenerationFromImage<sofa::defaulttype::StdVectorTypes<sofa::defaulttype::Vec<3, float>, sofa::defaulttype::Vec<3, float>, float>, sofa::defaulttype::Image<unsigned char> >::update() in MeshGenerationFromImage.cpp.o; ""CGAL::Image_3::private_read(point_image*)"", referenced from:; cgal::MeshGenerationFromImage<sofa::defaulttype::StdVectorTypes<sofa::defaulttype::Vec<3, double>, sofa::defaulttype::Vec<3, double>, double>, sofa::defaulttype::Image<unsigned char> >::update() in MeshGenerationFromImage.cpp.o; cgal::MeshGenerationFromImage<sofa::defaulttype::StdVectorTypes<sofa::defaultty",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/352
https://github.com/sofa-framework/sofa/issues/352:2242,Modifiability,plugin,plugin,2242,"FromImage.cpp.o; ""_readImage(char const*)"", referenced from:; cgal::MeshGenerationFromImage<sofa::defaulttype::StdVectorTypes<sofa::defaulttype::Vec<3, double>, sofa::defaulttype::Vec<3, double>, double>, sofa::defaulttype::Image<unsigned char> >::update() in MeshGenerationFromImage.cpp.o; cgal::MeshGenerationFromImage<sofa::defaulttype::StdVectorTypes<sofa::defaulttype::Vec<3, float>, sofa::defaulttype::Vec<3, float>, float>, sofa::defaulttype::Image<unsigned char> >::update() in MeshGenerationFromImage.cpp.o; ""ImageIO_alloc(unsigned long)"", referenced from:; cgal::MeshGenerationFromImage<sofa::defaulttype::StdVectorTypes<sofa::defaulttype::Vec<3, double>, sofa::defaulttype::Vec<3, double>, double>, sofa::defaulttype::Image<unsigned char> >::update() in MeshGenerationFromImage.cpp.o; cgal::MeshGenerationFromImage<sofa::defaulttype::StdVectorTypes<sofa::defaulttype::Vec<3, float>, sofa::defaulttype::Vec<3, float>, float>, sofa::defaulttype::Image<unsigned char> >::update() in MeshGenerationFromImage.cpp.o; ""CGAL::Image_3::private_read(point_image*)"", referenced from:; cgal::MeshGenerationFromImage<sofa::defaulttype::StdVectorTypes<sofa::defaulttype::Vec<3, double>, sofa::defaulttype::Vec<3, double>, double>, sofa::defaulttype::Image<unsigned char> >::update() in MeshGenerationFromImage.cpp.o; cgal::MeshGenerationFromImage<sofa::defaulttype::StdVectorTypes<sofa::defaulttype::Vec<3, float>, sofa::defaulttype::Vec<3, float>, float>, sofa::defaulttype::Image<unsigned char> >::update() in MeshGenerationFromImage.cpp.o; ld: symbol(s) not found for architecture x86_64; ```. This file is only included if the image plugin is activated, thus making this error appear only in specific cases. Moreover, since CGAL seems not tested on CI, this error might be quite old, as it has passed under the radar so far. It has been observed on OS X, and Linux. ______________________________________________________. Suggested labels: <!--- see https://github.com/sofa-framework/sofa/labels -->",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/352
https://github.com/sofa-framework/sofa/issues/352:2348,Testability,test,tested,2348,"FromImage.cpp.o; ""_readImage(char const*)"", referenced from:; cgal::MeshGenerationFromImage<sofa::defaulttype::StdVectorTypes<sofa::defaulttype::Vec<3, double>, sofa::defaulttype::Vec<3, double>, double>, sofa::defaulttype::Image<unsigned char> >::update() in MeshGenerationFromImage.cpp.o; cgal::MeshGenerationFromImage<sofa::defaulttype::StdVectorTypes<sofa::defaulttype::Vec<3, float>, sofa::defaulttype::Vec<3, float>, float>, sofa::defaulttype::Image<unsigned char> >::update() in MeshGenerationFromImage.cpp.o; ""ImageIO_alloc(unsigned long)"", referenced from:; cgal::MeshGenerationFromImage<sofa::defaulttype::StdVectorTypes<sofa::defaulttype::Vec<3, double>, sofa::defaulttype::Vec<3, double>, double>, sofa::defaulttype::Image<unsigned char> >::update() in MeshGenerationFromImage.cpp.o; cgal::MeshGenerationFromImage<sofa::defaulttype::StdVectorTypes<sofa::defaulttype::Vec<3, float>, sofa::defaulttype::Vec<3, float>, float>, sofa::defaulttype::Image<unsigned char> >::update() in MeshGenerationFromImage.cpp.o; ""CGAL::Image_3::private_read(point_image*)"", referenced from:; cgal::MeshGenerationFromImage<sofa::defaulttype::StdVectorTypes<sofa::defaulttype::Vec<3, double>, sofa::defaulttype::Vec<3, double>, double>, sofa::defaulttype::Image<unsigned char> >::update() in MeshGenerationFromImage.cpp.o; cgal::MeshGenerationFromImage<sofa::defaulttype::StdVectorTypes<sofa::defaulttype::Vec<3, float>, sofa::defaulttype::Vec<3, float>, float>, sofa::defaulttype::Image<unsigned char> >::update() in MeshGenerationFromImage.cpp.o; ld: symbol(s) not found for architecture x86_64; ```. This file is only included if the image plugin is activated, thus making this error appear only in specific cases. Moreover, since CGAL seems not tested on CI, this error might be quite old, as it has passed under the radar so far. It has been observed on OS X, and Linux. ______________________________________________________. Suggested labels: <!--- see https://github.com/sofa-framework/sofa/labels -->",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/352
https://github.com/sofa-framework/sofa/pull/353:930,Availability,failure,failures,930,"This pull request aims at add a new extension file (.tmg) supported by DistanceGrid. This extension file is used to represent a shape : it's a list of values corresponding to the function evaluated at each point. All the data are placed one after the other in a single column. ; It's a minor add which does not disturb anything in SOFA, so it shouldn't raise any problems. (edit - 08/08/17) The file is now able to provide the size of the grid : these 3 values (nx, ny, nz) are placed at the top of the .tmg file and are used at the DistanceGrid instaciation.; Example : . **Shape.tmg**; *Header with the grid size*; >150; 150; 150. *Values of the grid*; > 0.015; 1; 1; ... ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/353
https://github.com/sofa-framework/sofa/pull/353:980,Availability,failure,failures,980,"This pull request aims at add a new extension file (.tmg) supported by DistanceGrid. This extension file is used to represent a shape : it's a list of values corresponding to the function evaluated at each point. All the data are placed one after the other in a single column. ; It's a minor add which does not disturb anything in SOFA, so it shouldn't raise any problems. (edit - 08/08/17) The file is now able to provide the size of the grid : these 3 values (nx, ny, nz) are placed at the top of the .tmg file and are used at the DistanceGrid instaciation.; Example : . **Shape.tmg**; *Header with the grid size*; >150; 150; 150. *Values of the grid*; > 0.015; 1; 1; ... ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/353
https://github.com/sofa-framework/sofa/pull/353:773,Integrability,message,message,773,"This pull request aims at add a new extension file (.tmg) supported by DistanceGrid. This extension file is used to represent a shape : it's a list of values corresponding to the function evaluated at each point. All the data are placed one after the other in a single column. ; It's a minor add which does not disturb anything in SOFA, so it shouldn't raise any problems. (edit - 08/08/17) The file is now able to provide the size of the grid : these 3 values (nx, ny, nz) are placed at the top of the .tmg file and are used at the DistanceGrid instaciation.; Example : . **Shape.tmg**; *Header with the grid size*; >150; 150; 150. *Values of the grid*; > 0.015; 1; 1; ... ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/353
https://github.com/sofa-framework/sofa/pull/353:925,Testability,test,test,925,"This pull request aims at add a new extension file (.tmg) supported by DistanceGrid. This extension file is used to represent a shape : it's a list of values corresponding to the function evaluated at each point. All the data are placed one after the other in a single column. ; It's a minor add which does not disturb anything in SOFA, so it shouldn't raise any problems. (edit - 08/08/17) The file is now able to provide the size of the grid : these 3 values (nx, ny, nz) are placed at the top of the .tmg file and are used at the DistanceGrid instaciation.; Example : . **Shape.tmg**; *Header with the grid size*; >150; 150; 150. *Values of the grid*; > 0.015; 1; 1; ... ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/353
https://github.com/sofa-framework/sofa/pull/353:975,Testability,test,test,975,"This pull request aims at add a new extension file (.tmg) supported by DistanceGrid. This extension file is used to represent a shape : it's a list of values corresponding to the function evaluated at each point. All the data are placed one after the other in a single column. ; It's a minor add which does not disturb anything in SOFA, so it shouldn't raise any problems. (edit - 08/08/17) The file is now able to provide the size of the grid : these 3 values (nx, ny, nz) are placed at the top of the .tmg file and are used at the DistanceGrid instaciation.; Example : . **Shape.tmg**; *Header with the grid size*; >150; 150; 150. *Values of the grid*; > 0.015; 1; 1; ... ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/353
https://github.com/sofa-framework/sofa/pull/354:2288,Availability,failure,failures,2288,"tory) and allows the user to choose the type of ImplicitShape he wants to mesh, and to change the values relating to the mesh (**facet_size**, **approximation** and **cell_size**). - Fill the scene with a shape :. `<DistanceGridComponent` ; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;`name=""grid_cmp""`; > .tmg is our extention file which is actually a simple list of values corresponding to the function evaluated at each point : see PR #353 ; `filename=""/path/file.tmg""` . &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;`nx=""243""` ; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;`ny=""243"" ` ; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;`nz=""243""` ; `/>` . or ; `<ImplicitSphere name=""sphere"" />`. or any class inhereting from ImplicitShape. - Modify the mesh component value's and use the correct component in the link. ` <MeshGenerationFromDG` ; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;`name=""mesh"" `; > The 3 following parameters can change the execution time (from a few seconds to much more) ; `facet_size=""0.7"" ` ; `approximation=""0.5""` ; `cell_size=""0.4"" ` . &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;`drawTetras=""false""` . > Then the link ; `function=""@sphere""` which is actually a torus ; or	 ; `grid=""@grid_cmp""`; ; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;`xmin_box=""0.0"" ` ; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;`ymin_box=""0.0"" ` ; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;`zmin_box=""-5.0"" ` ; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;`xmax_box=""27.0"" ` ; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;`ymax_box=""27.0"" ` ; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;`zmax_box=""5.0"" ` ; `/>`. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/354
https://github.com/sofa-framework/sofa/pull/354:2338,Availability,failure,failures,2338,"tory) and allows the user to choose the type of ImplicitShape he wants to mesh, and to change the values relating to the mesh (**facet_size**, **approximation** and **cell_size**). - Fill the scene with a shape :. `<DistanceGridComponent` ; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;`name=""grid_cmp""`; > .tmg is our extention file which is actually a simple list of values corresponding to the function evaluated at each point : see PR #353 ; `filename=""/path/file.tmg""` . &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;`nx=""243""` ; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;`ny=""243"" ` ; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;`nz=""243""` ; `/>` . or ; `<ImplicitSphere name=""sphere"" />`. or any class inhereting from ImplicitShape. - Modify the mesh component value's and use the correct component in the link. ` <MeshGenerationFromDG` ; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;`name=""mesh"" `; > The 3 following parameters can change the execution time (from a few seconds to much more) ; `facet_size=""0.7"" ` ; `approximation=""0.5""` ; `cell_size=""0.4"" ` . &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;`drawTetras=""false""` . > Then the link ; `function=""@sphere""` which is actually a torus ; or	 ; `grid=""@grid_cmp""`; ; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;`xmin_box=""0.0"" ` ; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;`ymin_box=""0.0"" ` ; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;`zmin_box=""-5.0"" ` ; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;`xmax_box=""27.0"" ` ; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;`ymax_box=""27.0"" ` ; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;`zmax_box=""5.0"" ` ; `/>`. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/354
https://github.com/sofa-framework/sofa/pull/354:2131,Integrability,message,message,2131,"tory) and allows the user to choose the type of ImplicitShape he wants to mesh, and to change the values relating to the mesh (**facet_size**, **approximation** and **cell_size**). - Fill the scene with a shape :. `<DistanceGridComponent` ; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;`name=""grid_cmp""`; > .tmg is our extention file which is actually a simple list of values corresponding to the function evaluated at each point : see PR #353 ; `filename=""/path/file.tmg""` . &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;`nx=""243""` ; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;`ny=""243"" ` ; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;`nz=""243""` ; `/>` . or ; `<ImplicitSphere name=""sphere"" />`. or any class inhereting from ImplicitShape. - Modify the mesh component value's and use the correct component in the link. ` <MeshGenerationFromDG` ; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;`name=""mesh"" `; > The 3 following parameters can change the execution time (from a few seconds to much more) ; `facet_size=""0.7"" ` ; `approximation=""0.5""` ; `cell_size=""0.4"" ` . &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;`drawTetras=""false""` . > Then the link ; `function=""@sphere""` which is actually a torus ; or	 ; `grid=""@grid_cmp""`; ; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;`xmin_box=""0.0"" ` ; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;`ymin_box=""0.0"" ` ; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;`zmin_box=""-5.0"" ` ; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;`xmax_box=""27.0"" ` ; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;`ymax_box=""27.0"" ` ; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;`zmax_box=""5.0"" ` ; `/>`. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/354
https://github.com/sofa-framework/sofa/pull/354:140,Modifiability,inherit,inheriting,140,"PR #351 should be merged before. ## Description. This PR aims at meshing an implicit shape with CGAL ; ImplicitShape is a concept of class (inheriting from BaseObject) defining any implicit shape by a common method `eval(Point p)` which returns the value of the function at this point.; Basically, it's possible to create a component inheriting from ImplicitShape, to describe a shape (torus, sphere etc.) by its literal equation. ## User Guide. A Sofa scene file is featured (in the CGALPlugin scene repertory) and allows the user to choose the type of ImplicitShape he wants to mesh, and to change the values relating to the mesh (**facet_size**, **approximation** and **cell_size**). - Fill the scene with a shape :. `<DistanceGridComponent` ; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;`name=""grid_cmp""`; > .tmg is our extention file which is actually a simple list of values corresponding to the function evaluated at each point : see PR #353 ; `filename=""/path/file.tmg""` . &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;`nx=""243""` ; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;`ny=""243"" ` ; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;`nz=""243""` ; `/>` . or ; `<ImplicitSphere name=""sphere"" />`. or any class inhereting from ImplicitShape. - Modify the mesh component value's and use the correct component in the link. ` <MeshGenerationFromDG` ; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;`name=""mesh"" `; > The 3 following parameters can change the execution time (from a few seconds to much more) ; `facet_size=""0.7"" ` ; `approximation=""0.5""` ; `cell_size=""0.4"" ` . &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;`drawTetras=""false""` . > Then the link ; `function=""@sphere""` which is actually a torus ; or	 ; `grid=""@grid_cmp""`; ; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;`xmin_box=""0.0"" ` ; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;`ymin_box=""0.0"" ` ; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;`zmin_box=""-5.0"" ` ; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;`xmax_box=""27.0"" ` ; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;`ymax_box=""27.0"" ` ; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/354
https://github.com/sofa-framework/sofa/pull/354:334,Modifiability,inherit,inheriting,334,"PR #351 should be merged before. ## Description. This PR aims at meshing an implicit shape with CGAL ; ImplicitShape is a concept of class (inheriting from BaseObject) defining any implicit shape by a common method `eval(Point p)` which returns the value of the function at this point.; Basically, it's possible to create a component inheriting from ImplicitShape, to describe a shape (torus, sphere etc.) by its literal equation. ## User Guide. A Sofa scene file is featured (in the CGALPlugin scene repertory) and allows the user to choose the type of ImplicitShape he wants to mesh, and to change the values relating to the mesh (**facet_size**, **approximation** and **cell_size**). - Fill the scene with a shape :. `<DistanceGridComponent` ; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;`name=""grid_cmp""`; > .tmg is our extention file which is actually a simple list of values corresponding to the function evaluated at each point : see PR #353 ; `filename=""/path/file.tmg""` . &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;`nx=""243""` ; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;`ny=""243"" ` ; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;`nz=""243""` ; `/>` . or ; `<ImplicitSphere name=""sphere"" />`. or any class inhereting from ImplicitShape. - Modify the mesh component value's and use the correct component in the link. ` <MeshGenerationFromDG` ; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;`name=""mesh"" `; > The 3 following parameters can change the execution time (from a few seconds to much more) ; `facet_size=""0.7"" ` ; `approximation=""0.5""` ; `cell_size=""0.4"" ` . &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;`drawTetras=""false""` . > Then the link ; `function=""@sphere""` which is actually a torus ; or	 ; `grid=""@grid_cmp""`; ; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;`xmin_box=""0.0"" ` ; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;`ymin_box=""0.0"" ` ; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;`zmin_box=""-5.0"" ` ; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;`xmax_box=""27.0"" ` ; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;`ymax_box=""27.0"" ` ; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/354
https://github.com/sofa-framework/sofa/pull/354:2283,Testability,test,test,2283,"tory) and allows the user to choose the type of ImplicitShape he wants to mesh, and to change the values relating to the mesh (**facet_size**, **approximation** and **cell_size**). - Fill the scene with a shape :. `<DistanceGridComponent` ; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;`name=""grid_cmp""`; > .tmg is our extention file which is actually a simple list of values corresponding to the function evaluated at each point : see PR #353 ; `filename=""/path/file.tmg""` . &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;`nx=""243""` ; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;`ny=""243"" ` ; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;`nz=""243""` ; `/>` . or ; `<ImplicitSphere name=""sphere"" />`. or any class inhereting from ImplicitShape. - Modify the mesh component value's and use the correct component in the link. ` <MeshGenerationFromDG` ; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;`name=""mesh"" `; > The 3 following parameters can change the execution time (from a few seconds to much more) ; `facet_size=""0.7"" ` ; `approximation=""0.5""` ; `cell_size=""0.4"" ` . &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;`drawTetras=""false""` . > Then the link ; `function=""@sphere""` which is actually a torus ; or	 ; `grid=""@grid_cmp""`; ; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;`xmin_box=""0.0"" ` ; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;`ymin_box=""0.0"" ` ; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;`zmin_box=""-5.0"" ` ; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;`xmax_box=""27.0"" ` ; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;`ymax_box=""27.0"" ` ; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;`zmax_box=""5.0"" ` ; `/>`. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/354
https://github.com/sofa-framework/sofa/pull/354:2333,Testability,test,test,2333,"tory) and allows the user to choose the type of ImplicitShape he wants to mesh, and to change the values relating to the mesh (**facet_size**, **approximation** and **cell_size**). - Fill the scene with a shape :. `<DistanceGridComponent` ; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;`name=""grid_cmp""`; > .tmg is our extention file which is actually a simple list of values corresponding to the function evaluated at each point : see PR #353 ; `filename=""/path/file.tmg""` . &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;`nx=""243""` ; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;`ny=""243"" ` ; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;`nz=""243""` ; `/>` . or ; `<ImplicitSphere name=""sphere"" />`. or any class inhereting from ImplicitShape. - Modify the mesh component value's and use the correct component in the link. ` <MeshGenerationFromDG` ; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;`name=""mesh"" `; > The 3 following parameters can change the execution time (from a few seconds to much more) ; `facet_size=""0.7"" ` ; `approximation=""0.5""` ; `cell_size=""0.4"" ` . &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;`drawTetras=""false""` . > Then the link ; `function=""@sphere""` which is actually a torus ; or	 ; `grid=""@grid_cmp""`; ; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;`xmin_box=""0.0"" ` ; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;`ymin_box=""0.0"" ` ; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;`zmin_box=""-5.0"" ` ; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;`xmax_box=""27.0"" ` ; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;`ymax_box=""27.0"" ` ; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;`zmax_box=""5.0"" ` ; `/>`. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/354
https://github.com/sofa-framework/sofa/pull/354:439,Usability,Guid,Guide,439,"PR #351 should be merged before. ## Description. This PR aims at meshing an implicit shape with CGAL ; ImplicitShape is a concept of class (inheriting from BaseObject) defining any implicit shape by a common method `eval(Point p)` which returns the value of the function at this point.; Basically, it's possible to create a component inheriting from ImplicitShape, to describe a shape (torus, sphere etc.) by its literal equation. ## User Guide. A Sofa scene file is featured (in the CGALPlugin scene repertory) and allows the user to choose the type of ImplicitShape he wants to mesh, and to change the values relating to the mesh (**facet_size**, **approximation** and **cell_size**). - Fill the scene with a shape :. `<DistanceGridComponent` ; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;`name=""grid_cmp""`; > .tmg is our extention file which is actually a simple list of values corresponding to the function evaluated at each point : see PR #353 ; `filename=""/path/file.tmg""` . &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;`nx=""243""` ; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;`ny=""243"" ` ; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;`nz=""243""` ; `/>` . or ; `<ImplicitSphere name=""sphere"" />`. or any class inhereting from ImplicitShape. - Modify the mesh component value's and use the correct component in the link. ` <MeshGenerationFromDG` ; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;`name=""mesh"" `; > The 3 following parameters can change the execution time (from a few seconds to much more) ; `facet_size=""0.7"" ` ; `approximation=""0.5""` ; `cell_size=""0.4"" ` . &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;`drawTetras=""false""` . > Then the link ; `function=""@sphere""` which is actually a torus ; or	 ; `grid=""@grid_cmp""`; ; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;`xmin_box=""0.0"" ` ; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;`ymin_box=""0.0"" ` ; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;`zmin_box=""-5.0"" ` ; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;`xmax_box=""27.0"" ` ; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;`ymax_box=""27.0"" ` ; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/354
https://github.com/sofa-framework/sofa/pull/354:851,Usability,simpl,simple,851,"PR #351 should be merged before. ## Description. This PR aims at meshing an implicit shape with CGAL ; ImplicitShape is a concept of class (inheriting from BaseObject) defining any implicit shape by a common method `eval(Point p)` which returns the value of the function at this point.; Basically, it's possible to create a component inheriting from ImplicitShape, to describe a shape (torus, sphere etc.) by its literal equation. ## User Guide. A Sofa scene file is featured (in the CGALPlugin scene repertory) and allows the user to choose the type of ImplicitShape he wants to mesh, and to change the values relating to the mesh (**facet_size**, **approximation** and **cell_size**). - Fill the scene with a shape :. `<DistanceGridComponent` ; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;`name=""grid_cmp""`; > .tmg is our extention file which is actually a simple list of values corresponding to the function evaluated at each point : see PR #353 ; `filename=""/path/file.tmg""` . &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;`nx=""243""` ; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;`ny=""243"" ` ; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;`nz=""243""` ; `/>` . or ; `<ImplicitSphere name=""sphere"" />`. or any class inhereting from ImplicitShape. - Modify the mesh component value's and use the correct component in the link. ` <MeshGenerationFromDG` ; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;`name=""mesh"" `; > The 3 following parameters can change the execution time (from a few seconds to much more) ; `facet_size=""0.7"" ` ; `approximation=""0.5""` ; `cell_size=""0.4"" ` . &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;`drawTetras=""false""` . > Then the link ; `function=""@sphere""` which is actually a torus ; or	 ; `grid=""@grid_cmp""`; ; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;`xmin_box=""0.0"" ` ; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;`ymin_box=""0.0"" ` ; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;`zmin_box=""-5.0"" ` ; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;`xmax_box=""27.0"" ` ; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;`ymax_box=""27.0"" ` ; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/354
https://github.com/sofa-framework/sofa/issues/355:272,Availability,error,error,272,When the parent folder of the output file of an OBJExporter does not exist : ; - a message is output like this one: [INFO] [OBJExporter(ObjExporter)] Exporting OBJ as: /path/to/my/mesh.obj; - no obj file is written. I think the user either expect : . 1. either to have an error/warning message instead of a success message; 2. or to have the parent folder(s) created properly (and silently or not) and the mesh file written as expected. I am in favor of 2. ______________________________________________________. Suggested labels: <!--- see https://github.com/sofa-framework/sofa/labels -->,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/355
https://github.com/sofa-framework/sofa/issues/355:83,Integrability,message,message,83,When the parent folder of the output file of an OBJExporter does not exist : ; - a message is output like this one: [INFO] [OBJExporter(ObjExporter)] Exporting OBJ as: /path/to/my/mesh.obj; - no obj file is written. I think the user either expect : . 1. either to have an error/warning message instead of a success message; 2. or to have the parent folder(s) created properly (and silently or not) and the mesh file written as expected. I am in favor of 2. ______________________________________________________. Suggested labels: <!--- see https://github.com/sofa-framework/sofa/labels -->,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/355
https://github.com/sofa-framework/sofa/issues/355:286,Integrability,message,message,286,When the parent folder of the output file of an OBJExporter does not exist : ; - a message is output like this one: [INFO] [OBJExporter(ObjExporter)] Exporting OBJ as: /path/to/my/mesh.obj; - no obj file is written. I think the user either expect : . 1. either to have an error/warning message instead of a success message; 2. or to have the parent folder(s) created properly (and silently or not) and the mesh file written as expected. I am in favor of 2. ______________________________________________________. Suggested labels: <!--- see https://github.com/sofa-framework/sofa/labels -->,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/355
https://github.com/sofa-framework/sofa/issues/355:315,Integrability,message,message,315,When the parent folder of the output file of an OBJExporter does not exist : ; - a message is output like this one: [INFO] [OBJExporter(ObjExporter)] Exporting OBJ as: /path/to/my/mesh.obj; - no obj file is written. I think the user either expect : . 1. either to have an error/warning message instead of a success message; 2. or to have the parent folder(s) created properly (and silently or not) and the mesh file written as expected. I am in favor of 2. ______________________________________________________. Suggested labels: <!--- see https://github.com/sofa-framework/sofa/labels -->,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/355
https://github.com/sofa-framework/sofa/issues/356:830,Availability,echo,echo,830,"I am currently running a convergence analysis using python scenes. Since the convergence analysis loads several settings from a .json file, it would be good to have a possibility to forward the filename of the file to the python scene via the command line. To my knowledge, this is not possible at the moment, please correct me if I am wrong and explain me your solution. My first work around was to load from the same file (I call it outputJson, see the function definition below). However, this becomes cumbersome, when the code is parallelized, since several threads would like to load from that same file. My approach for the parallelization is to write the filename (which is now adapted to every scene) first into the .scn using PHP and then to load it from the python scene. ; That means, in the .scn file we have:; `<?php echo '<PythonScriptController classname=""convergenceBeam_Template"" filename=""convergenceBeam_TemplatePython.py"" listening=""1"" name=""convergenceBeam_Template"" variables=""'.$argv[1].'"" />'; ?>`; which called from the convergence python script and deleted later; ```; os.system(""php convergenceBeam_TemplatePython.scn ""+sofaOutput+"".pyscndata > ""+curTime+"".scn""); ... call the scene; os.system(""rm ""+curTime+"".scn""); ```; In the .py file we load the data using; `self.defineDataFromJson(self.findData(""variables"").value[0][0])`; where; ```; def defineDataFromJson(self,jsonFilename=""outputJson"") :; f = open(jsonFilename,'r'); self.data = json.load(f); f.close(); def getValueOfData(self,keyOfData) :; if keyOfData in self.data.keys():; return self.data[keyOfData]; printStack(); sys.exit(""\nERROR\n the key ""+keyOfData+"" is not defined!\nERROR\n""); ```. Both of the solutions I consider as hacks, the first as it can not run in parallel and the second as the scene does not work without running php on the side, thus it does not work with one command line. Potential (final?) solutions would be:; - a command line argument or command line argument**s** for python scenes; -",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/356
https://github.com/sofa-framework/sofa/issues/356:685,Energy Efficiency,adapt,adapted,685,"I am currently running a convergence analysis using python scenes. Since the convergence analysis loads several settings from a .json file, it would be good to have a possibility to forward the filename of the file to the python scene via the command line. To my knowledge, this is not possible at the moment, please correct me if I am wrong and explain me your solution. My first work around was to load from the same file (I call it outputJson, see the function definition below). However, this becomes cumbersome, when the code is parallelized, since several threads would like to load from that same file. My approach for the parallelization is to write the filename (which is now adapted to every scene) first into the .scn using PHP and then to load it from the python scene. ; That means, in the .scn file we have:; `<?php echo '<PythonScriptController classname=""convergenceBeam_Template"" filename=""convergenceBeam_TemplatePython.py"" listening=""1"" name=""convergenceBeam_Template"" variables=""'.$argv[1].'"" />'; ?>`; which called from the convergence python script and deleted later; ```; os.system(""php convergenceBeam_TemplatePython.scn ""+sofaOutput+"".pyscndata > ""+curTime+"".scn""); ... call the scene; os.system(""rm ""+curTime+"".scn""); ```; In the .py file we load the data using; `self.defineDataFromJson(self.findData(""variables"").value[0][0])`; where; ```; def defineDataFromJson(self,jsonFilename=""outputJson"") :; f = open(jsonFilename,'r'); self.data = json.load(f); f.close(); def getValueOfData(self,keyOfData) :; if keyOfData in self.data.keys():; return self.data[keyOfData]; printStack(); sys.exit(""\nERROR\n the key ""+keyOfData+"" is not defined!\nERROR\n""); ```. Both of the solutions I consider as hacks, the first as it can not run in parallel and the second as the scene does not work without running php on the side, thus it does not work with one command line. Potential (final?) solutions would be:; - a command line argument or command line argument**s** for python scenes; -",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/356
https://github.com/sofa-framework/sofa/issues/356:685,Modifiability,adapt,adapted,685,"I am currently running a convergence analysis using python scenes. Since the convergence analysis loads several settings from a .json file, it would be good to have a possibility to forward the filename of the file to the python scene via the command line. To my knowledge, this is not possible at the moment, please correct me if I am wrong and explain me your solution. My first work around was to load from the same file (I call it outputJson, see the function definition below). However, this becomes cumbersome, when the code is parallelized, since several threads would like to load from that same file. My approach for the parallelization is to write the filename (which is now adapted to every scene) first into the .scn using PHP and then to load it from the python scene. ; That means, in the .scn file we have:; `<?php echo '<PythonScriptController classname=""convergenceBeam_Template"" filename=""convergenceBeam_TemplatePython.py"" listening=""1"" name=""convergenceBeam_Template"" variables=""'.$argv[1].'"" />'; ?>`; which called from the convergence python script and deleted later; ```; os.system(""php convergenceBeam_TemplatePython.scn ""+sofaOutput+"".pyscndata > ""+curTime+"".scn""); ... call the scene; os.system(""rm ""+curTime+"".scn""); ```; In the .py file we load the data using; `self.defineDataFromJson(self.findData(""variables"").value[0][0])`; where; ```; def defineDataFromJson(self,jsonFilename=""outputJson"") :; f = open(jsonFilename,'r'); self.data = json.load(f); f.close(); def getValueOfData(self,keyOfData) :; if keyOfData in self.data.keys():; return self.data[keyOfData]; printStack(); sys.exit(""\nERROR\n the key ""+keyOfData+"" is not defined!\nERROR\n""); ```. Both of the solutions I consider as hacks, the first as it can not run in parallel and the second as the scene does not work without running php on the side, thus it does not work with one command line. Potential (final?) solutions would be:; - a command line argument or command line argument**s** for python scenes; -",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/356
https://github.com/sofa-framework/sofa/issues/356:988,Modifiability,variab,variables,988,"I am currently running a convergence analysis using python scenes. Since the convergence analysis loads several settings from a .json file, it would be good to have a possibility to forward the filename of the file to the python scene via the command line. To my knowledge, this is not possible at the moment, please correct me if I am wrong and explain me your solution. My first work around was to load from the same file (I call it outputJson, see the function definition below). However, this becomes cumbersome, when the code is parallelized, since several threads would like to load from that same file. My approach for the parallelization is to write the filename (which is now adapted to every scene) first into the .scn using PHP and then to load it from the python scene. ; That means, in the .scn file we have:; `<?php echo '<PythonScriptController classname=""convergenceBeam_Template"" filename=""convergenceBeam_TemplatePython.py"" listening=""1"" name=""convergenceBeam_Template"" variables=""'.$argv[1].'"" />'; ?>`; which called from the convergence python script and deleted later; ```; os.system(""php convergenceBeam_TemplatePython.scn ""+sofaOutput+"".pyscndata > ""+curTime+"".scn""); ... call the scene; os.system(""rm ""+curTime+"".scn""); ```; In the .py file we load the data using; `self.defineDataFromJson(self.findData(""variables"").value[0][0])`; where; ```; def defineDataFromJson(self,jsonFilename=""outputJson"") :; f = open(jsonFilename,'r'); self.data = json.load(f); f.close(); def getValueOfData(self,keyOfData) :; if keyOfData in self.data.keys():; return self.data[keyOfData]; printStack(); sys.exit(""\nERROR\n the key ""+keyOfData+"" is not defined!\nERROR\n""); ```. Both of the solutions I consider as hacks, the first as it can not run in parallel and the second as the scene does not work without running php on the side, thus it does not work with one command line. Potential (final?) solutions would be:; - a command line argument or command line argument**s** for python scenes; -",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/356
https://github.com/sofa-framework/sofa/issues/356:1329,Modifiability,variab,variables,1329," I am wrong and explain me your solution. My first work around was to load from the same file (I call it outputJson, see the function definition below). However, this becomes cumbersome, when the code is parallelized, since several threads would like to load from that same file. My approach for the parallelization is to write the filename (which is now adapted to every scene) first into the .scn using PHP and then to load it from the python scene. ; That means, in the .scn file we have:; `<?php echo '<PythonScriptController classname=""convergenceBeam_Template"" filename=""convergenceBeam_TemplatePython.py"" listening=""1"" name=""convergenceBeam_Template"" variables=""'.$argv[1].'"" />'; ?>`; which called from the convergence python script and deleted later; ```; os.system(""php convergenceBeam_TemplatePython.scn ""+sofaOutput+"".pyscndata > ""+curTime+"".scn""); ... call the scene; os.system(""rm ""+curTime+"".scn""); ```; In the .py file we load the data using; `self.defineDataFromJson(self.findData(""variables"").value[0][0])`; where; ```; def defineDataFromJson(self,jsonFilename=""outputJson"") :; f = open(jsonFilename,'r'); self.data = json.load(f); f.close(); def getValueOfData(self,keyOfData) :; if keyOfData in self.data.keys():; return self.data[keyOfData]; printStack(); sys.exit(""\nERROR\n the key ""+keyOfData+"" is not defined!\nERROR\n""); ```. Both of the solutions I consider as hacks, the first as it can not run in parallel and the second as the scene does not work without running php on the side, thus it does not work with one command line. Potential (final?) solutions would be:; - a command line argument or command line argument**s** for python scenes; - a command line argument that can be used in all scenes, such as -d for data, which could be followed by strings; - php scenes (file ending .pscn) that work and could prevent calling php on the side (i.e. my second solution works without a script on the side). I am grateful for any ideas/other propositions of solutions!. Label ",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/356
https://github.com/sofa-framework/sofa/issues/356:98,Performance,load,loads,98,"I am currently running a convergence analysis using python scenes. Since the convergence analysis loads several settings from a .json file, it would be good to have a possibility to forward the filename of the file to the python scene via the command line. To my knowledge, this is not possible at the moment, please correct me if I am wrong and explain me your solution. My first work around was to load from the same file (I call it outputJson, see the function definition below). However, this becomes cumbersome, when the code is parallelized, since several threads would like to load from that same file. My approach for the parallelization is to write the filename (which is now adapted to every scene) first into the .scn using PHP and then to load it from the python scene. ; That means, in the .scn file we have:; `<?php echo '<PythonScriptController classname=""convergenceBeam_Template"" filename=""convergenceBeam_TemplatePython.py"" listening=""1"" name=""convergenceBeam_Template"" variables=""'.$argv[1].'"" />'; ?>`; which called from the convergence python script and deleted later; ```; os.system(""php convergenceBeam_TemplatePython.scn ""+sofaOutput+"".pyscndata > ""+curTime+"".scn""); ... call the scene; os.system(""rm ""+curTime+"".scn""); ```; In the .py file we load the data using; `self.defineDataFromJson(self.findData(""variables"").value[0][0])`; where; ```; def defineDataFromJson(self,jsonFilename=""outputJson"") :; f = open(jsonFilename,'r'); self.data = json.load(f); f.close(); def getValueOfData(self,keyOfData) :; if keyOfData in self.data.keys():; return self.data[keyOfData]; printStack(); sys.exit(""\nERROR\n the key ""+keyOfData+"" is not defined!\nERROR\n""); ```. Both of the solutions I consider as hacks, the first as it can not run in parallel and the second as the scene does not work without running php on the side, thus it does not work with one command line. Potential (final?) solutions would be:; - a command line argument or command line argument**s** for python scenes; -",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/356
https://github.com/sofa-framework/sofa/issues/356:400,Performance,load,load,400,"I am currently running a convergence analysis using python scenes. Since the convergence analysis loads several settings from a .json file, it would be good to have a possibility to forward the filename of the file to the python scene via the command line. To my knowledge, this is not possible at the moment, please correct me if I am wrong and explain me your solution. My first work around was to load from the same file (I call it outputJson, see the function definition below). However, this becomes cumbersome, when the code is parallelized, since several threads would like to load from that same file. My approach for the parallelization is to write the filename (which is now adapted to every scene) first into the .scn using PHP and then to load it from the python scene. ; That means, in the .scn file we have:; `<?php echo '<PythonScriptController classname=""convergenceBeam_Template"" filename=""convergenceBeam_TemplatePython.py"" listening=""1"" name=""convergenceBeam_Template"" variables=""'.$argv[1].'"" />'; ?>`; which called from the convergence python script and deleted later; ```; os.system(""php convergenceBeam_TemplatePython.scn ""+sofaOutput+"".pyscndata > ""+curTime+"".scn""); ... call the scene; os.system(""rm ""+curTime+"".scn""); ```; In the .py file we load the data using; `self.defineDataFromJson(self.findData(""variables"").value[0][0])`; where; ```; def defineDataFromJson(self,jsonFilename=""outputJson"") :; f = open(jsonFilename,'r'); self.data = json.load(f); f.close(); def getValueOfData(self,keyOfData) :; if keyOfData in self.data.keys():; return self.data[keyOfData]; printStack(); sys.exit(""\nERROR\n the key ""+keyOfData+"" is not defined!\nERROR\n""); ```. Both of the solutions I consider as hacks, the first as it can not run in parallel and the second as the scene does not work without running php on the side, thus it does not work with one command line. Potential (final?) solutions would be:; - a command line argument or command line argument**s** for python scenes; -",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/356
https://github.com/sofa-framework/sofa/issues/356:584,Performance,load,load,584,"I am currently running a convergence analysis using python scenes. Since the convergence analysis loads several settings from a .json file, it would be good to have a possibility to forward the filename of the file to the python scene via the command line. To my knowledge, this is not possible at the moment, please correct me if I am wrong and explain me your solution. My first work around was to load from the same file (I call it outputJson, see the function definition below). However, this becomes cumbersome, when the code is parallelized, since several threads would like to load from that same file. My approach for the parallelization is to write the filename (which is now adapted to every scene) first into the .scn using PHP and then to load it from the python scene. ; That means, in the .scn file we have:; `<?php echo '<PythonScriptController classname=""convergenceBeam_Template"" filename=""convergenceBeam_TemplatePython.py"" listening=""1"" name=""convergenceBeam_Template"" variables=""'.$argv[1].'"" />'; ?>`; which called from the convergence python script and deleted later; ```; os.system(""php convergenceBeam_TemplatePython.scn ""+sofaOutput+"".pyscndata > ""+curTime+"".scn""); ... call the scene; os.system(""rm ""+curTime+"".scn""); ```; In the .py file we load the data using; `self.defineDataFromJson(self.findData(""variables"").value[0][0])`; where; ```; def defineDataFromJson(self,jsonFilename=""outputJson"") :; f = open(jsonFilename,'r'); self.data = json.load(f); f.close(); def getValueOfData(self,keyOfData) :; if keyOfData in self.data.keys():; return self.data[keyOfData]; printStack(); sys.exit(""\nERROR\n the key ""+keyOfData+"" is not defined!\nERROR\n""); ```. Both of the solutions I consider as hacks, the first as it can not run in parallel and the second as the scene does not work without running php on the side, thus it does not work with one command line. Potential (final?) solutions would be:; - a command line argument or command line argument**s** for python scenes; -",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/356
https://github.com/sofa-framework/sofa/issues/356:751,Performance,load,load,751,"I am currently running a convergence analysis using python scenes. Since the convergence analysis loads several settings from a .json file, it would be good to have a possibility to forward the filename of the file to the python scene via the command line. To my knowledge, this is not possible at the moment, please correct me if I am wrong and explain me your solution. My first work around was to load from the same file (I call it outputJson, see the function definition below). However, this becomes cumbersome, when the code is parallelized, since several threads would like to load from that same file. My approach for the parallelization is to write the filename (which is now adapted to every scene) first into the .scn using PHP and then to load it from the python scene. ; That means, in the .scn file we have:; `<?php echo '<PythonScriptController classname=""convergenceBeam_Template"" filename=""convergenceBeam_TemplatePython.py"" listening=""1"" name=""convergenceBeam_Template"" variables=""'.$argv[1].'"" />'; ?>`; which called from the convergence python script and deleted later; ```; os.system(""php convergenceBeam_TemplatePython.scn ""+sofaOutput+"".pyscndata > ""+curTime+"".scn""); ... call the scene; os.system(""rm ""+curTime+"".scn""); ```; In the .py file we load the data using; `self.defineDataFromJson(self.findData(""variables"").value[0][0])`; where; ```; def defineDataFromJson(self,jsonFilename=""outputJson"") :; f = open(jsonFilename,'r'); self.data = json.load(f); f.close(); def getValueOfData(self,keyOfData) :; if keyOfData in self.data.keys():; return self.data[keyOfData]; printStack(); sys.exit(""\nERROR\n the key ""+keyOfData+"" is not defined!\nERROR\n""); ```. Both of the solutions I consider as hacks, the first as it can not run in parallel and the second as the scene does not work without running php on the side, thus it does not work with one command line. Potential (final?) solutions would be:; - a command line argument or command line argument**s** for python scenes; -",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/356
https://github.com/sofa-framework/sofa/issues/356:1268,Performance,load,load,1268,"is is not possible at the moment, please correct me if I am wrong and explain me your solution. My first work around was to load from the same file (I call it outputJson, see the function definition below). However, this becomes cumbersome, when the code is parallelized, since several threads would like to load from that same file. My approach for the parallelization is to write the filename (which is now adapted to every scene) first into the .scn using PHP and then to load it from the python scene. ; That means, in the .scn file we have:; `<?php echo '<PythonScriptController classname=""convergenceBeam_Template"" filename=""convergenceBeam_TemplatePython.py"" listening=""1"" name=""convergenceBeam_Template"" variables=""'.$argv[1].'"" />'; ?>`; which called from the convergence python script and deleted later; ```; os.system(""php convergenceBeam_TemplatePython.scn ""+sofaOutput+"".pyscndata > ""+curTime+"".scn""); ... call the scene; os.system(""rm ""+curTime+"".scn""); ```; In the .py file we load the data using; `self.defineDataFromJson(self.findData(""variables"").value[0][0])`; where; ```; def defineDataFromJson(self,jsonFilename=""outputJson"") :; f = open(jsonFilename,'r'); self.data = json.load(f); f.close(); def getValueOfData(self,keyOfData) :; if keyOfData in self.data.keys():; return self.data[keyOfData]; printStack(); sys.exit(""\nERROR\n the key ""+keyOfData+"" is not defined!\nERROR\n""); ```. Both of the solutions I consider as hacks, the first as it can not run in parallel and the second as the scene does not work without running php on the side, thus it does not work with one command line. Potential (final?) solutions would be:; - a command line argument or command line argument**s** for python scenes; - a command line argument that can be used in all scenes, such as -d for data, which could be followed by strings; - php scenes (file ending .pscn) that work and could prevent calling php on the side (i.e. my second solution works without a script on the side). I am grateful ",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/356
https://github.com/sofa-framework/sofa/issues/356:1471,Performance,load,load,1471,"first work around was to load from the same file (I call it outputJson, see the function definition below). However, this becomes cumbersome, when the code is parallelized, since several threads would like to load from that same file. My approach for the parallelization is to write the filename (which is now adapted to every scene) first into the .scn using PHP and then to load it from the python scene. ; That means, in the .scn file we have:; `<?php echo '<PythonScriptController classname=""convergenceBeam_Template"" filename=""convergenceBeam_TemplatePython.py"" listening=""1"" name=""convergenceBeam_Template"" variables=""'.$argv[1].'"" />'; ?>`; which called from the convergence python script and deleted later; ```; os.system(""php convergenceBeam_TemplatePython.scn ""+sofaOutput+"".pyscndata > ""+curTime+"".scn""); ... call the scene; os.system(""rm ""+curTime+"".scn""); ```; In the .py file we load the data using; `self.defineDataFromJson(self.findData(""variables"").value[0][0])`; where; ```; def defineDataFromJson(self,jsonFilename=""outputJson"") :; f = open(jsonFilename,'r'); self.data = json.load(f); f.close(); def getValueOfData(self,keyOfData) :; if keyOfData in self.data.keys():; return self.data[keyOfData]; printStack(); sys.exit(""\nERROR\n the key ""+keyOfData+"" is not defined!\nERROR\n""); ```. Both of the solutions I consider as hacks, the first as it can not run in parallel and the second as the scene does not work without running php on the side, thus it does not work with one command line. Potential (final?) solutions would be:; - a command line argument or command line argument**s** for python scenes; - a command line argument that can be used in all scenes, such as -d for data, which could be followed by strings; - php scenes (file ending .pscn) that work and could prevent calling php on the side (i.e. my second solution works without a script on the side). I am grateful for any ideas/other propositions of solutions!. Label propositions: project: SofaPython, discussion",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/356
https://github.com/sofa-framework/sofa/issues/357:623,Modifiability,variab,variable,623,"While there are some pretty nice ideas going on considering the improvement the output of the advanced timer #348, to my knowledge (please correct me if I am wrong!), the component has some shortcomings:; 1. The timing output does not show up when using the batch gui, i.e. when specifying -g batch over the command line. Together with @ggrosshenny, we already took care of this in the work related to #348, a pull request will follow soon.; 2. The advanced timer can not be used at the initialization, i.e. in methods like init and I believe as well the backward init. To resolve the second point, I propose to change the variable computationTimeSampling to an integer (see Main.cpp, line 182). When set at ; - a negative integer c, it does output the timings of the initialization, but at every time step -c; - 0, it only outputs the timings of the initialization; - a positive integer c, it does not output the timings of the initialization and at every time step c. Thus the persons having used the timer before will not have any impact on their potential scripts using the SOFA output.; An implementation already has been started with @ggrosshenny, but it is not clear where an insertion has the less impact and yields the results. @ggrosshenny, could you precise that please?. Has there been any work considering this point?; Do you have any propositions how to address it?. Label propositions: discussion, bug",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/357
https://github.com/sofa-framework/sofa/issues/357:1168,Usability,clear,clear,1168,"While there are some pretty nice ideas going on considering the improvement the output of the advanced timer #348, to my knowledge (please correct me if I am wrong!), the component has some shortcomings:; 1. The timing output does not show up when using the batch gui, i.e. when specifying -g batch over the command line. Together with @ggrosshenny, we already took care of this in the work related to #348, a pull request will follow soon.; 2. The advanced timer can not be used at the initialization, i.e. in methods like init and I believe as well the backward init. To resolve the second point, I propose to change the variable computationTimeSampling to an integer (see Main.cpp, line 182). When set at ; - a negative integer c, it does output the timings of the initialization, but at every time step -c; - 0, it only outputs the timings of the initialization; - a positive integer c, it does not output the timings of the initialization and at every time step c. Thus the persons having used the timer before will not have any impact on their potential scripts using the SOFA output.; An implementation already has been started with @ggrosshenny, but it is not clear where an insertion has the less impact and yields the results. @ggrosshenny, could you precise that please?. Has there been any work considering this point?; Do you have any propositions how to address it?. Label propositions: discussion, bug",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/357
https://github.com/sofa-framework/sofa/pull/358:510,Availability,failure,failures,510,meshconv needs miniflowVR in order to compile.; But the oblivious user is not supposed to know that.... So this fix:; - avoids building meshconv if SOFA_BUILD_MINIFLOWVR is not activated.; - warns the user he needs to activate the previous cmake option. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/358
https://github.com/sofa-framework/sofa/pull/358:560,Availability,failure,failures,560,meshconv needs miniflowVR in order to compile.; But the oblivious user is not supposed to know that.... So this fix:; - avoids building meshconv if SOFA_BUILD_MINIFLOWVR is not activated.; - warns the user he needs to activate the previous cmake option. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/358
https://github.com/sofa-framework/sofa/pull/358:353,Integrability,message,message,353,meshconv needs miniflowVR in order to compile.; But the oblivious user is not supposed to know that.... So this fix:; - avoids building meshconv if SOFA_BUILD_MINIFLOWVR is not activated.; - warns the user he needs to activate the previous cmake option. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/358
https://github.com/sofa-framework/sofa/pull/358:120,Safety,avoid,avoids,120,meshconv needs miniflowVR in order to compile.; But the oblivious user is not supposed to know that.... So this fix:; - avoids building meshconv if SOFA_BUILD_MINIFLOWVR is not activated.; - warns the user he needs to activate the previous cmake option. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/358
https://github.com/sofa-framework/sofa/pull/358:505,Testability,test,test,505,meshconv needs miniflowVR in order to compile.; But the oblivious user is not supposed to know that.... So this fix:; - avoids building meshconv if SOFA_BUILD_MINIFLOWVR is not activated.; - warns the user he needs to activate the previous cmake option. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/358
https://github.com/sofa-framework/sofa/pull/358:555,Testability,test,test,555,meshconv needs miniflowVR in order to compile.; But the oblivious user is not supposed to know that.... So this fix:; - avoids building meshconv if SOFA_BUILD_MINIFLOWVR is not activated.; - warns the user he needs to activate the previous cmake option. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/358
https://github.com/sofa-framework/sofa/pull/359:407,Availability,failure,failures,407,"This PR kind of fixes #316 ; Concerning Multithreading plugin, it still would be better to get rid of Boost dependency as stated by @fjourdes in #316. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/359
https://github.com/sofa-framework/sofa/pull/359:457,Availability,failure,failures,457,"This PR kind of fixes #316 ; Concerning Multithreading plugin, it still would be better to get rid of Boost dependency as stated by @fjourdes in #316. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/359
https://github.com/sofa-framework/sofa/pull/359:108,Integrability,depend,dependency,108,"This PR kind of fixes #316 ; Concerning Multithreading plugin, it still would be better to get rid of Boost dependency as stated by @fjourdes in #316. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/359
https://github.com/sofa-framework/sofa/pull/359:250,Integrability,message,message,250,"This PR kind of fixes #316 ; Concerning Multithreading plugin, it still would be better to get rid of Boost dependency as stated by @fjourdes in #316. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/359
https://github.com/sofa-framework/sofa/pull/359:55,Modifiability,plugin,plugin,55,"This PR kind of fixes #316 ; Concerning Multithreading plugin, it still would be better to get rid of Boost dependency as stated by @fjourdes in #316. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/359
https://github.com/sofa-framework/sofa/pull/359:402,Testability,test,test,402,"This PR kind of fixes #316 ; Concerning Multithreading plugin, it still would be better to get rid of Boost dependency as stated by @fjourdes in #316. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/359
https://github.com/sofa-framework/sofa/pull/359:452,Testability,test,test,452,"This PR kind of fixes #316 ; Concerning Multithreading plugin, it still would be better to get rid of Boost dependency as stated by @fjourdes in #316. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/359
https://github.com/sofa-framework/sofa/pull/360:1169,Availability,failure,failures,1169,"This PR is en enhancement of the AdvancedTimer. We have added the possibility to get two different JSON ouputs. The first one represent all informations without deep limitation and the other is easier to use but does not represent all the componants tree of the simulation. You can now use the timer in C++ and in python, change dynamically the output type of each timer separately and use the output of the AdvancedTimer to create graphs and/or compare datas from two different scene timers. You can find an exemple of JSON output here : [JSON_example.txt](https://github.com/sofa-framework/sofa/files/1200444/JSON_example.txt); And an exemple of Light JSON output here : [LJSON_example.txt](https://github.com/sofa-framework/sofa/files/1200439/LJSON_example.txt). This work was done with the help of @untereiner and @chpaulus. A documentation will come at the end of my internship. suggested tag : enhancement; ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/360
https://github.com/sofa-framework/sofa/pull/360:1219,Availability,failure,failures,1219,"This PR is en enhancement of the AdvancedTimer. We have added the possibility to get two different JSON ouputs. The first one represent all informations without deep limitation and the other is easier to use but does not represent all the componants tree of the simulation. You can now use the timer in C++ and in python, change dynamically the output type of each timer separately and use the output of the AdvancedTimer to create graphs and/or compare datas from two different scene timers. You can find an exemple of JSON output here : [JSON_example.txt](https://github.com/sofa-framework/sofa/files/1200444/JSON_example.txt); And an exemple of Light JSON output here : [LJSON_example.txt](https://github.com/sofa-framework/sofa/files/1200439/LJSON_example.txt). This work was done with the help of @untereiner and @chpaulus. A documentation will come at the end of my internship. suggested tag : enhancement; ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/360
https://github.com/sofa-framework/sofa/pull/360:1012,Integrability,message,message,1012,"This PR is en enhancement of the AdvancedTimer. We have added the possibility to get two different JSON ouputs. The first one represent all informations without deep limitation and the other is easier to use but does not represent all the componants tree of the simulation. You can now use the timer in C++ and in python, change dynamically the output type of each timer separately and use the output of the AdvancedTimer to create graphs and/or compare datas from two different scene timers. You can find an exemple of JSON output here : [JSON_example.txt](https://github.com/sofa-framework/sofa/files/1200444/JSON_example.txt); And an exemple of Light JSON output here : [LJSON_example.txt](https://github.com/sofa-framework/sofa/files/1200439/LJSON_example.txt). This work was done with the help of @untereiner and @chpaulus. A documentation will come at the end of my internship. suggested tag : enhancement; ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/360
https://github.com/sofa-framework/sofa/pull/360:14,Modifiability,enhance,enhancement,14,"This PR is en enhancement of the AdvancedTimer. We have added the possibility to get two different JSON ouputs. The first one represent all informations without deep limitation and the other is easier to use but does not represent all the componants tree of the simulation. You can now use the timer in C++ and in python, change dynamically the output type of each timer separately and use the output of the AdvancedTimer to create graphs and/or compare datas from two different scene timers. You can find an exemple of JSON output here : [JSON_example.txt](https://github.com/sofa-framework/sofa/files/1200444/JSON_example.txt); And an exemple of Light JSON output here : [LJSON_example.txt](https://github.com/sofa-framework/sofa/files/1200439/LJSON_example.txt). This work was done with the help of @untereiner and @chpaulus. A documentation will come at the end of my internship. suggested tag : enhancement; ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/360
https://github.com/sofa-framework/sofa/pull/360:900,Modifiability,enhance,enhancement,900,"This PR is en enhancement of the AdvancedTimer. We have added the possibility to get two different JSON ouputs. The first one represent all informations without deep limitation and the other is easier to use but does not represent all the componants tree of the simulation. You can now use the timer in C++ and in python, change dynamically the output type of each timer separately and use the output of the AdvancedTimer to create graphs and/or compare datas from two different scene timers. You can find an exemple of JSON output here : [JSON_example.txt](https://github.com/sofa-framework/sofa/files/1200444/JSON_example.txt); And an exemple of Light JSON output here : [LJSON_example.txt](https://github.com/sofa-framework/sofa/files/1200439/LJSON_example.txt). This work was done with the help of @untereiner and @chpaulus. A documentation will come at the end of my internship. suggested tag : enhancement; ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/360
https://github.com/sofa-framework/sofa/pull/360:1164,Testability,test,test,1164,"This PR is en enhancement of the AdvancedTimer. We have added the possibility to get two different JSON ouputs. The first one represent all informations without deep limitation and the other is easier to use but does not represent all the componants tree of the simulation. You can now use the timer in C++ and in python, change dynamically the output type of each timer separately and use the output of the AdvancedTimer to create graphs and/or compare datas from two different scene timers. You can find an exemple of JSON output here : [JSON_example.txt](https://github.com/sofa-framework/sofa/files/1200444/JSON_example.txt); And an exemple of Light JSON output here : [LJSON_example.txt](https://github.com/sofa-framework/sofa/files/1200439/LJSON_example.txt). This work was done with the help of @untereiner and @chpaulus. A documentation will come at the end of my internship. suggested tag : enhancement; ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/360
https://github.com/sofa-framework/sofa/pull/360:1214,Testability,test,test,1214,"This PR is en enhancement of the AdvancedTimer. We have added the possibility to get two different JSON ouputs. The first one represent all informations without deep limitation and the other is easier to use but does not represent all the componants tree of the simulation. You can now use the timer in C++ and in python, change dynamically the output type of each timer separately and use the output of the AdvancedTimer to create graphs and/or compare datas from two different scene timers. You can find an exemple of JSON output here : [JSON_example.txt](https://github.com/sofa-framework/sofa/files/1200444/JSON_example.txt); And an exemple of Light JSON output here : [LJSON_example.txt](https://github.com/sofa-framework/sofa/files/1200439/LJSON_example.txt). This work was done with the help of @untereiner and @chpaulus. A documentation will come at the end of my internship. suggested tag : enhancement; ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/360
https://github.com/sofa-framework/sofa/pull/361:316,Availability,failure,failures,316,@courtecuisse removed some compilation warnings from sofa . ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/361
https://github.com/sofa-framework/sofa/pull/361:366,Availability,failure,failures,366,@courtecuisse removed some compilation warnings from sofa . ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/361
https://github.com/sofa-framework/sofa/pull/361:159,Integrability,message,message,159,@courtecuisse removed some compilation warnings from sofa . ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/361
https://github.com/sofa-framework/sofa/pull/361:311,Testability,test,test,311,@courtecuisse removed some compilation warnings from sofa . ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/361
https://github.com/sofa-framework/sofa/pull/361:361,Testability,test,test,361,@courtecuisse removed some compilation warnings from sofa . ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/361
https://github.com/sofa-framework/sofa/issues/362:210,Availability,error,error,210,"When this is the case, it is impossible to access data of both components. - In the first place a warning could be issued when attempting to add two components with the same name; - In the end the should be an error, but this is a breaking change. I labeled it as a bug, it is rather a *design* issue. ______________________________________________________. Suggested labels: <!--- see https://github.com/sofa-framework/sofa/labels -->",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/362
https://github.com/sofa-framework/sofa/issues/362:43,Security,access,access,43,"When this is the case, it is impossible to access data of both components. - In the first place a warning could be issued when attempting to add two components with the same name; - In the end the should be an error, but this is a breaking change. I labeled it as a bug, it is rather a *design* issue. ______________________________________________________. Suggested labels: <!--- see https://github.com/sofa-framework/sofa/labels -->",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/362
https://github.com/sofa-framework/sofa/issues/363:739,Availability,error,error,739,"Hi!. OptionsGroup in Sofa are currently created in 2 steps:. - in ctor: every option are created, from strings, usually by calling ""setNames()"". A default value is set, usually to 0 by calling setSelectedItem(0); - during parsing of the scene file: user value is taken into account. This is working great, except in one case:; What if my OptionsGroup is supposed to contain a list of values retrieved from another sofa::Data (let's say a vector of strings..)?; - In the Ctor, the string data is not yet initialized, so setNames cannot be called; - in parse() I don't know about the other data so I cannot retrieve the list of values. This also means that when calling setSelectedItem with the value passed in the scene file, I will get an error message as the entry does not exist ; - at init(), my list of values is set, so I can finally call setNames, but I'll lose my default user value from the scene file. To fix this, I modified the OptionsGroup class to store the user value in readFromString(), and added a public method: setSelectedItemToDefault() that calls setSelectedItem() with that stored user value. This solved the issue, but only for OptionsGroup (any sofa::Data that relies on another data for its initialization will have the problem), and it's maybe not in the cleanest way..; Some would argue that listing the values to feed the OptionsGroup with is a task for SofaPython, before calling CreateObject, but I'd like to have this feature even when using XML scene files. Do you have suggestions on how to solve this problem in a better way, and for all data? Do you think my way is clean enough to be PRed in SOFA?. @damienmarchal, maybe you have good ideas on the topic ? . Looking forward to your feedback,; - Bruno Marques; ______________________________________________________. Suggested labels: <!--- see https://github.com/sofa-framework/sofa/labels -->",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/363
https://github.com/sofa-framework/sofa/issues/363:745,Integrability,message,message,745,"Hi!. OptionsGroup in Sofa are currently created in 2 steps:. - in ctor: every option are created, from strings, usually by calling ""setNames()"". A default value is set, usually to 0 by calling setSelectedItem(0); - during parsing of the scene file: user value is taken into account. This is working great, except in one case:; What if my OptionsGroup is supposed to contain a list of values retrieved from another sofa::Data (let's say a vector of strings..)?; - In the Ctor, the string data is not yet initialized, so setNames cannot be called; - in parse() I don't know about the other data so I cannot retrieve the list of values. This also means that when calling setSelectedItem with the value passed in the scene file, I will get an error message as the entry does not exist ; - at init(), my list of values is set, so I can finally call setNames, but I'll lose my default user value from the scene file. To fix this, I modified the OptionsGroup class to store the user value in readFromString(), and added a public method: setSelectedItemToDefault() that calls setSelectedItem() with that stored user value. This solved the issue, but only for OptionsGroup (any sofa::Data that relies on another data for its initialization will have the problem), and it's maybe not in the cleanest way..; Some would argue that listing the values to feed the OptionsGroup with is a task for SofaPython, before calling CreateObject, but I'd like to have this feature even when using XML scene files. Do you have suggestions on how to solve this problem in a better way, and for all data? Do you think my way is clean enough to be PRed in SOFA?. @damienmarchal, maybe you have good ideas on the topic ? . Looking forward to your feedback,; - Bruno Marques; ______________________________________________________. Suggested labels: <!--- see https://github.com/sofa-framework/sofa/labels -->",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/363
https://github.com/sofa-framework/sofa/issues/363:1718,Usability,feedback,feedback,1718,"Hi!. OptionsGroup in Sofa are currently created in 2 steps:. - in ctor: every option are created, from strings, usually by calling ""setNames()"". A default value is set, usually to 0 by calling setSelectedItem(0); - during parsing of the scene file: user value is taken into account. This is working great, except in one case:; What if my OptionsGroup is supposed to contain a list of values retrieved from another sofa::Data (let's say a vector of strings..)?; - In the Ctor, the string data is not yet initialized, so setNames cannot be called; - in parse() I don't know about the other data so I cannot retrieve the list of values. This also means that when calling setSelectedItem with the value passed in the scene file, I will get an error message as the entry does not exist ; - at init(), my list of values is set, so I can finally call setNames, but I'll lose my default user value from the scene file. To fix this, I modified the OptionsGroup class to store the user value in readFromString(), and added a public method: setSelectedItemToDefault() that calls setSelectedItem() with that stored user value. This solved the issue, but only for OptionsGroup (any sofa::Data that relies on another data for its initialization will have the problem), and it's maybe not in the cleanest way..; Some would argue that listing the values to feed the OptionsGroup with is a task for SofaPython, before calling CreateObject, but I'd like to have this feature even when using XML scene files. Do you have suggestions on how to solve this problem in a better way, and for all data? Do you think my way is clean enough to be PRed in SOFA?. @damienmarchal, maybe you have good ideas on the topic ? . Looking forward to your feedback,; - Bruno Marques; ______________________________________________________. Suggested labels: <!--- see https://github.com/sofa-framework/sofa/labels -->",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/363
https://github.com/sofa-framework/sofa/pull/364:428,Availability,failure,failures,428,Some minor warnings and ...; FIX strange double incrementation on iterator in DefaultMultiMatrixAccessor.cpp : @ChristianDuriez @courtecuisse your review would be great !. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/364
https://github.com/sofa-framework/sofa/pull/364:478,Availability,failure,failures,478,Some minor warnings and ...; FIX strange double incrementation on iterator in DefaultMultiMatrixAccessor.cpp : @ChristianDuriez @courtecuisse your review would be great !. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/364
https://github.com/sofa-framework/sofa/pull/364:271,Integrability,message,message,271,Some minor warnings and ...; FIX strange double incrementation on iterator in DefaultMultiMatrixAccessor.cpp : @ChristianDuriez @courtecuisse your review would be great !. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/364
https://github.com/sofa-framework/sofa/pull/364:423,Testability,test,test,423,Some minor warnings and ...; FIX strange double incrementation on iterator in DefaultMultiMatrixAccessor.cpp : @ChristianDuriez @courtecuisse your review would be great !. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/364
https://github.com/sofa-framework/sofa/pull/364:473,Testability,test,test,473,Some minor warnings and ...; FIX strange double incrementation on iterator in DefaultMultiMatrixAccessor.cpp : @ChristianDuriez @courtecuisse your review would be great !. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/364
https://github.com/sofa-framework/sofa/pull/365:653,Availability,failure,failures,653,Add some comments to help newcomer starting with the basic CGLinearSolver. I also set by default the option _warmStart_ to true in [CGLinearSolver.inl](https://github.com/sofa-framework/sofa/blob/124c52ad384ab8a2d33cfd5d8915054fd1128e2b/SofaKernel/modules/SofaBaseLinearSolver/CGLinearSolver.inl#L116). Is this ok @matthieu-nesme ? I did not get why it's not the default behavior? performances ?. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/365
https://github.com/sofa-framework/sofa/pull/365:703,Availability,failure,failures,703,Add some comments to help newcomer starting with the basic CGLinearSolver. I also set by default the option _warmStart_ to true in [CGLinearSolver.inl](https://github.com/sofa-framework/sofa/blob/124c52ad384ab8a2d33cfd5d8915054fd1128e2b/SofaKernel/modules/SofaBaseLinearSolver/CGLinearSolver.inl#L116). Is this ok @matthieu-nesme ? I did not get why it's not the default behavior? performances ?. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/365
https://github.com/sofa-framework/sofa/pull/365:496,Integrability,message,message,496,Add some comments to help newcomer starting with the basic CGLinearSolver. I also set by default the option _warmStart_ to true in [CGLinearSolver.inl](https://github.com/sofa-framework/sofa/blob/124c52ad384ab8a2d33cfd5d8915054fd1128e2b/SofaKernel/modules/SofaBaseLinearSolver/CGLinearSolver.inl#L116). Is this ok @matthieu-nesme ? I did not get why it's not the default behavior? performances ?. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/365
https://github.com/sofa-framework/sofa/pull/365:381,Performance,perform,performances,381,Add some comments to help newcomer starting with the basic CGLinearSolver. I also set by default the option _warmStart_ to true in [CGLinearSolver.inl](https://github.com/sofa-framework/sofa/blob/124c52ad384ab8a2d33cfd5d8915054fd1128e2b/SofaKernel/modules/SofaBaseLinearSolver/CGLinearSolver.inl#L116). Is this ok @matthieu-nesme ? I did not get why it's not the default behavior? performances ?. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/365
https://github.com/sofa-framework/sofa/pull/365:648,Testability,test,test,648,Add some comments to help newcomer starting with the basic CGLinearSolver. I also set by default the option _warmStart_ to true in [CGLinearSolver.inl](https://github.com/sofa-framework/sofa/blob/124c52ad384ab8a2d33cfd5d8915054fd1128e2b/SofaKernel/modules/SofaBaseLinearSolver/CGLinearSolver.inl#L116). Is this ok @matthieu-nesme ? I did not get why it's not the default behavior? performances ?. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/365
https://github.com/sofa-framework/sofa/pull/365:698,Testability,test,test,698,Add some comments to help newcomer starting with the basic CGLinearSolver. I also set by default the option _warmStart_ to true in [CGLinearSolver.inl](https://github.com/sofa-framework/sofa/blob/124c52ad384ab8a2d33cfd5d8915054fd1128e2b/SofaKernel/modules/SofaBaseLinearSolver/CGLinearSolver.inl#L116). Is this ok @matthieu-nesme ? I did not get why it's not the default behavior? performances ?. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/365
https://github.com/sofa-framework/sofa/pull/366:404,Availability,avail,available,404,"Following the issue #183 , this is a proposed solution since the issue is starting to date and is still present on OS X. Don't hesitate to refuse it if you prefer to go with another solution. At least now this fix will be publicly seen by people who wish to get a fast fix for the bug. This is a small change that forces the GUI to use the Qt menu instead of the native one for Mac OS X. This feature is available for other operating system by disabling a new cmake option named ""SOFAGUI_ENABLE_NATIVE_MENU"" (the name matches the other gui related cmake options). This cmake option is true by default on every OSes except Mac OS X (Darwin). . Since I think that many people execute runSofa directly in the build directory instead of a bundled mac application (.app), this should fix the unresponsive menu bug. Note that the menu will be displayed directly onto the GUI instead of the native menus of OS X GUI. Note also that I didn't test this feature on Windows since I don't own a license. It does work well on Gnome shell based linux distro last time I checked. But anyway, the feature is disabled on other OSes than OS X, so it shouldn't change anything for those who use Windows or Linux. If some people could help me by testing this feature on Windows and some Linux desktop environments, that would be great and bullet proofing the feature for people who wish to use the Qt menus even if they are not with OS X.; ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/366
https://github.com/sofa-framework/sofa/pull/366:1676,Availability,failure,failures,1676,"Following the issue #183 , this is a proposed solution since the issue is starting to date and is still present on OS X. Don't hesitate to refuse it if you prefer to go with another solution. At least now this fix will be publicly seen by people who wish to get a fast fix for the bug. This is a small change that forces the GUI to use the Qt menu instead of the native one for Mac OS X. This feature is available for other operating system by disabling a new cmake option named ""SOFAGUI_ENABLE_NATIVE_MENU"" (the name matches the other gui related cmake options). This cmake option is true by default on every OSes except Mac OS X (Darwin). . Since I think that many people execute runSofa directly in the build directory instead of a bundled mac application (.app), this should fix the unresponsive menu bug. Note that the menu will be displayed directly onto the GUI instead of the native menus of OS X GUI. Note also that I didn't test this feature on Windows since I don't own a license. It does work well on Gnome shell based linux distro last time I checked. But anyway, the feature is disabled on other OSes than OS X, so it shouldn't change anything for those who use Windows or Linux. If some people could help me by testing this feature on Windows and some Linux desktop environments, that would be great and bullet proofing the feature for people who wish to use the Qt menus even if they are not with OS X.; ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/366
https://github.com/sofa-framework/sofa/pull/366:1726,Availability,failure,failures,1726,"Following the issue #183 , this is a proposed solution since the issue is starting to date and is still present on OS X. Don't hesitate to refuse it if you prefer to go with another solution. At least now this fix will be publicly seen by people who wish to get a fast fix for the bug. This is a small change that forces the GUI to use the Qt menu instead of the native one for Mac OS X. This feature is available for other operating system by disabling a new cmake option named ""SOFAGUI_ENABLE_NATIVE_MENU"" (the name matches the other gui related cmake options). This cmake option is true by default on every OSes except Mac OS X (Darwin). . Since I think that many people execute runSofa directly in the build directory instead of a bundled mac application (.app), this should fix the unresponsive menu bug. Note that the menu will be displayed directly onto the GUI instead of the native menus of OS X GUI. Note also that I didn't test this feature on Windows since I don't own a license. It does work well on Gnome shell based linux distro last time I checked. But anyway, the feature is disabled on other OSes than OS X, so it shouldn't change anything for those who use Windows or Linux. If some people could help me by testing this feature on Windows and some Linux desktop environments, that would be great and bullet proofing the feature for people who wish to use the Qt menus even if they are not with OS X.; ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/366
https://github.com/sofa-framework/sofa/pull/366:1519,Integrability,message,message,1519,"Following the issue #183 , this is a proposed solution since the issue is starting to date and is still present on OS X. Don't hesitate to refuse it if you prefer to go with another solution. At least now this fix will be publicly seen by people who wish to get a fast fix for the bug. This is a small change that forces the GUI to use the Qt menu instead of the native one for Mac OS X. This feature is available for other operating system by disabling a new cmake option named ""SOFAGUI_ENABLE_NATIVE_MENU"" (the name matches the other gui related cmake options). This cmake option is true by default on every OSes except Mac OS X (Darwin). . Since I think that many people execute runSofa directly in the build directory instead of a bundled mac application (.app), this should fix the unresponsive menu bug. Note that the menu will be displayed directly onto the GUI instead of the native menus of OS X GUI. Note also that I didn't test this feature on Windows since I don't own a license. It does work well on Gnome shell based linux distro last time I checked. But anyway, the feature is disabled on other OSes than OS X, so it shouldn't change anything for those who use Windows or Linux. If some people could help me by testing this feature on Windows and some Linux desktop environments, that would be great and bullet proofing the feature for people who wish to use the Qt menus even if they are not with OS X.; ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/366
https://github.com/sofa-framework/sofa/pull/366:934,Testability,test,test,934,"Following the issue #183 , this is a proposed solution since the issue is starting to date and is still present on OS X. Don't hesitate to refuse it if you prefer to go with another solution. At least now this fix will be publicly seen by people who wish to get a fast fix for the bug. This is a small change that forces the GUI to use the Qt menu instead of the native one for Mac OS X. This feature is available for other operating system by disabling a new cmake option named ""SOFAGUI_ENABLE_NATIVE_MENU"" (the name matches the other gui related cmake options). This cmake option is true by default on every OSes except Mac OS X (Darwin). . Since I think that many people execute runSofa directly in the build directory instead of a bundled mac application (.app), this should fix the unresponsive menu bug. Note that the menu will be displayed directly onto the GUI instead of the native menus of OS X GUI. Note also that I didn't test this feature on Windows since I don't own a license. It does work well on Gnome shell based linux distro last time I checked. But anyway, the feature is disabled on other OSes than OS X, so it shouldn't change anything for those who use Windows or Linux. If some people could help me by testing this feature on Windows and some Linux desktop environments, that would be great and bullet proofing the feature for people who wish to use the Qt menus even if they are not with OS X.; ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/366
https://github.com/sofa-framework/sofa/pull/366:1226,Testability,test,testing,1226,"Following the issue #183 , this is a proposed solution since the issue is starting to date and is still present on OS X. Don't hesitate to refuse it if you prefer to go with another solution. At least now this fix will be publicly seen by people who wish to get a fast fix for the bug. This is a small change that forces the GUI to use the Qt menu instead of the native one for Mac OS X. This feature is available for other operating system by disabling a new cmake option named ""SOFAGUI_ENABLE_NATIVE_MENU"" (the name matches the other gui related cmake options). This cmake option is true by default on every OSes except Mac OS X (Darwin). . Since I think that many people execute runSofa directly in the build directory instead of a bundled mac application (.app), this should fix the unresponsive menu bug. Note that the menu will be displayed directly onto the GUI instead of the native menus of OS X GUI. Note also that I didn't test this feature on Windows since I don't own a license. It does work well on Gnome shell based linux distro last time I checked. But anyway, the feature is disabled on other OSes than OS X, so it shouldn't change anything for those who use Windows or Linux. If some people could help me by testing this feature on Windows and some Linux desktop environments, that would be great and bullet proofing the feature for people who wish to use the Qt menus even if they are not with OS X.; ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/366
https://github.com/sofa-framework/sofa/pull/366:1671,Testability,test,test,1671,"Following the issue #183 , this is a proposed solution since the issue is starting to date and is still present on OS X. Don't hesitate to refuse it if you prefer to go with another solution. At least now this fix will be publicly seen by people who wish to get a fast fix for the bug. This is a small change that forces the GUI to use the Qt menu instead of the native one for Mac OS X. This feature is available for other operating system by disabling a new cmake option named ""SOFAGUI_ENABLE_NATIVE_MENU"" (the name matches the other gui related cmake options). This cmake option is true by default on every OSes except Mac OS X (Darwin). . Since I think that many people execute runSofa directly in the build directory instead of a bundled mac application (.app), this should fix the unresponsive menu bug. Note that the menu will be displayed directly onto the GUI instead of the native menus of OS X GUI. Note also that I didn't test this feature on Windows since I don't own a license. It does work well on Gnome shell based linux distro last time I checked. But anyway, the feature is disabled on other OSes than OS X, so it shouldn't change anything for those who use Windows or Linux. If some people could help me by testing this feature on Windows and some Linux desktop environments, that would be great and bullet proofing the feature for people who wish to use the Qt menus even if they are not with OS X.; ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/366
https://github.com/sofa-framework/sofa/pull/366:1721,Testability,test,test,1721,"Following the issue #183 , this is a proposed solution since the issue is starting to date and is still present on OS X. Don't hesitate to refuse it if you prefer to go with another solution. At least now this fix will be publicly seen by people who wish to get a fast fix for the bug. This is a small change that forces the GUI to use the Qt menu instead of the native one for Mac OS X. This feature is available for other operating system by disabling a new cmake option named ""SOFAGUI_ENABLE_NATIVE_MENU"" (the name matches the other gui related cmake options). This cmake option is true by default on every OSes except Mac OS X (Darwin). . Since I think that many people execute runSofa directly in the build directory instead of a bundled mac application (.app), this should fix the unresponsive menu bug. Note that the menu will be displayed directly onto the GUI instead of the native menus of OS X GUI. Note also that I didn't test this feature on Windows since I don't own a license. It does work well on Gnome shell based linux distro last time I checked. But anyway, the feature is disabled on other OSes than OS X, so it shouldn't change anything for those who use Windows or Linux. If some people could help me by testing this feature on Windows and some Linux desktop environments, that would be great and bullet proofing the feature for people who wish to use the Qt menus even if they are not with OS X.; ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/366
https://github.com/sofa-framework/sofa/pull/367:278,Availability,error,error,278,"1- In SceneCheckerVisitor: ; Fixed segfault. Please review, I'm not sure about the fix. 2- In RestShapeSpringForceField:; Fixed segfault when using the component without external_rest_shape, by removing a ""return"" that was unintentionally introduced in #315. (line 95); And the error message should be print only if external_rest_shape is set by user. (line 93). And minor cleaning.; ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/367
https://github.com/sofa-framework/sofa/pull/367:640,Availability,failure,failures,640,"1- In SceneCheckerVisitor: ; Fixed segfault. Please review, I'm not sure about the fix. 2- In RestShapeSpringForceField:; Fixed segfault when using the component without external_rest_shape, by removing a ""return"" that was unintentionally introduced in #315. (line 95); And the error message should be print only if external_rest_shape is set by user. (line 93). And minor cleaning.; ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/367
https://github.com/sofa-framework/sofa/pull/367:690,Availability,failure,failures,690,"1- In SceneCheckerVisitor: ; Fixed segfault. Please review, I'm not sure about the fix. 2- In RestShapeSpringForceField:; Fixed segfault when using the component without external_rest_shape, by removing a ""return"" that was unintentionally introduced in #315. (line 95); And the error message should be print only if external_rest_shape is set by user. (line 93). And minor cleaning.; ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/367
https://github.com/sofa-framework/sofa/pull/367:284,Integrability,message,message,284,"1- In SceneCheckerVisitor: ; Fixed segfault. Please review, I'm not sure about the fix. 2- In RestShapeSpringForceField:; Fixed segfault when using the component without external_rest_shape, by removing a ""return"" that was unintentionally introduced in #315. (line 95); And the error message should be print only if external_rest_shape is set by user. (line 93). And minor cleaning.; ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/367
https://github.com/sofa-framework/sofa/pull/367:483,Integrability,message,message,483,"1- In SceneCheckerVisitor: ; Fixed segfault. Please review, I'm not sure about the fix. 2- In RestShapeSpringForceField:; Fixed segfault when using the component without external_rest_shape, by removing a ""return"" that was unintentionally introduced in #315. (line 95); And the error message should be print only if external_rest_shape is set by user. (line 93). And minor cleaning.; ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/367
https://github.com/sofa-framework/sofa/pull/367:635,Testability,test,test,635,"1- In SceneCheckerVisitor: ; Fixed segfault. Please review, I'm not sure about the fix. 2- In RestShapeSpringForceField:; Fixed segfault when using the component without external_rest_shape, by removing a ""return"" that was unintentionally introduced in #315. (line 95); And the error message should be print only if external_rest_shape is set by user. (line 93). And minor cleaning.; ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/367
https://github.com/sofa-framework/sofa/pull/367:685,Testability,test,test,685,"1- In SceneCheckerVisitor: ; Fixed segfault. Please review, I'm not sure about the fix. 2- In RestShapeSpringForceField:; Fixed segfault when using the component without external_rest_shape, by removing a ""return"" that was unintentionally introduced in #315. (line 95); And the error message should be print only if external_rest_shape is set by user. (line 93). And minor cleaning.; ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/367
https://github.com/sofa-framework/sofa/pull/368:600,Availability,failure,failures,600,"Changelog:; - added a mechanism to obtain extra args from command-line (everything following `--argv`); - forwarded extra args to python in `SceneLoaderPy`. Example:; ```python; # test.py; def createScene(node):; import sys; print(sys.argv); ```. ```sh; runSofa -a test.py --argv --spam --bacon eggs; # ['test', '--spam', '--bacon', 'eggs']; ```; ___________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/368
https://github.com/sofa-framework/sofa/pull/368:650,Availability,failure,failures,650,"Changelog:; - added a mechanism to obtain extra args from command-line (everything following `--argv`); - forwarded extra args to python in `SceneLoaderPy`. Example:; ```python; # test.py; def createScene(node):; import sys; print(sys.argv); ```. ```sh; runSofa -a test.py --argv --spam --bacon eggs; # ['test', '--spam', '--bacon', 'eggs']; ```; ___________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/368
https://github.com/sofa-framework/sofa/pull/368:443,Integrability,message,message,443,"Changelog:; - added a mechanism to obtain extra args from command-line (everything following `--argv`); - forwarded extra args to python in `SceneLoaderPy`. Example:; ```python; # test.py; def createScene(node):; import sys; print(sys.argv); ```. ```sh; runSofa -a test.py --argv --spam --bacon eggs; # ['test', '--spam', '--bacon', 'eggs']; ```; ___________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/368
https://github.com/sofa-framework/sofa/pull/368:180,Testability,test,test,180,"Changelog:; - added a mechanism to obtain extra args from command-line (everything following `--argv`); - forwarded extra args to python in `SceneLoaderPy`. Example:; ```python; # test.py; def createScene(node):; import sys; print(sys.argv); ```. ```sh; runSofa -a test.py --argv --spam --bacon eggs; # ['test', '--spam', '--bacon', 'eggs']; ```; ___________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/368
https://github.com/sofa-framework/sofa/pull/368:265,Testability,test,test,265,"Changelog:; - added a mechanism to obtain extra args from command-line (everything following `--argv`); - forwarded extra args to python in `SceneLoaderPy`. Example:; ```python; # test.py; def createScene(node):; import sys; print(sys.argv); ```. ```sh; runSofa -a test.py --argv --spam --bacon eggs; # ['test', '--spam', '--bacon', 'eggs']; ```; ___________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/368
https://github.com/sofa-framework/sofa/pull/368:305,Testability,test,test,305,"Changelog:; - added a mechanism to obtain extra args from command-line (everything following `--argv`); - forwarded extra args to python in `SceneLoaderPy`. Example:; ```python; # test.py; def createScene(node):; import sys; print(sys.argv); ```. ```sh; runSofa -a test.py --argv --spam --bacon eggs; # ['test', '--spam', '--bacon', 'eggs']; ```; ___________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/368
https://github.com/sofa-framework/sofa/pull/368:595,Testability,test,test,595,"Changelog:; - added a mechanism to obtain extra args from command-line (everything following `--argv`); - forwarded extra args to python in `SceneLoaderPy`. Example:; ```python; # test.py; def createScene(node):; import sys; print(sys.argv); ```. ```sh; runSofa -a test.py --argv --spam --bacon eggs; # ['test', '--spam', '--bacon', 'eggs']; ```; ___________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/368
https://github.com/sofa-framework/sofa/pull/368:645,Testability,test,test,645,"Changelog:; - added a mechanism to obtain extra args from command-line (everything following `--argv`); - forwarded extra args to python in `SceneLoaderPy`. Example:; ```python; # test.py; def createScene(node):; import sys; print(sys.argv); ```. ```sh; runSofa -a test.py --argv --spam --bacon eggs; # ['test', '--spam', '--bacon', 'eggs']; ```; ___________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/368
https://github.com/sofa-framework/sofa/pull/369:900,Availability,failure,failures,900,"This fix allows to select and copy parameters names in Sofa GUI interface, which is very useful when setting default values for elements in scene files. Instead of setting parameters names as titles of widgets I created QLabel objects and set them as the first row of the GridLayout manager. I know that current sofa GUI will be replaced with Qt quick GUI soon, but I guess this modification will still be useful for those who use this version of GUI. I also would to make this change for Qt quick GUI, but all parameters names in QML are covered with ""Mouse Area"" objects, which don't allow to handle mouse events for text objects under them. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/369
https://github.com/sofa-framework/sofa/pull/369:950,Availability,failure,failures,950,"This fix allows to select and copy parameters names in Sofa GUI interface, which is very useful when setting default values for elements in scene files. Instead of setting parameters names as titles of widgets I created QLabel objects and set them as the first row of the GridLayout manager. I know that current sofa GUI will be replaced with Qt quick GUI soon, but I guess this modification will still be useful for those who use this version of GUI. I also would to make this change for Qt quick GUI, but all parameters names in QML are covered with ""Mouse Area"" objects, which don't allow to handle mouse events for text objects under them. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/369
https://github.com/sofa-framework/sofa/pull/369:64,Integrability,interface,interface,64,"This fix allows to select and copy parameters names in Sofa GUI interface, which is very useful when setting default values for elements in scene files. Instead of setting parameters names as titles of widgets I created QLabel objects and set them as the first row of the GridLayout manager. I know that current sofa GUI will be replaced with Qt quick GUI soon, but I guess this modification will still be useful for those who use this version of GUI. I also would to make this change for Qt quick GUI, but all parameters names in QML are covered with ""Mouse Area"" objects, which don't allow to handle mouse events for text objects under them. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/369
https://github.com/sofa-framework/sofa/pull/369:743,Integrability,message,message,743,"This fix allows to select and copy parameters names in Sofa GUI interface, which is very useful when setting default values for elements in scene files. Instead of setting parameters names as titles of widgets I created QLabel objects and set them as the first row of the GridLayout manager. I know that current sofa GUI will be replaced with Qt quick GUI soon, but I guess this modification will still be useful for those who use this version of GUI. I also would to make this change for Qt quick GUI, but all parameters names in QML are covered with ""Mouse Area"" objects, which don't allow to handle mouse events for text objects under them. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/369
https://github.com/sofa-framework/sofa/pull/369:895,Testability,test,test,895,"This fix allows to select and copy parameters names in Sofa GUI interface, which is very useful when setting default values for elements in scene files. Instead of setting parameters names as titles of widgets I created QLabel objects and set them as the first row of the GridLayout manager. I know that current sofa GUI will be replaced with Qt quick GUI soon, but I guess this modification will still be useful for those who use this version of GUI. I also would to make this change for Qt quick GUI, but all parameters names in QML are covered with ""Mouse Area"" objects, which don't allow to handle mouse events for text objects under them. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/369
https://github.com/sofa-framework/sofa/pull/369:945,Testability,test,test,945,"This fix allows to select and copy parameters names in Sofa GUI interface, which is very useful when setting default values for elements in scene files. Instead of setting parameters names as titles of widgets I created QLabel objects and set them as the first row of the GridLayout manager. I know that current sofa GUI will be replaced with Qt quick GUI soon, but I guess this modification will still be useful for those who use this version of GUI. I also would to make this change for Qt quick GUI, but all parameters names in QML are covered with ""Mouse Area"" objects, which don't allow to handle mouse events for text objects under them. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/369
https://github.com/sofa-framework/sofa/pull/370:436,Availability,failure,failures,436,This is the Defrost cleaning week29 with...as usual a lot of std:cout and dead code removal. ; Shouldn't break anything. ; In case some component are too verbose please tell us. . ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/370
https://github.com/sofa-framework/sofa/pull/370:486,Availability,failure,failures,486,This is the Defrost cleaning week29 with...as usual a lot of std:cout and dead code removal. ; Shouldn't break anything. ; In case some component are too verbose please tell us. . ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/370
https://github.com/sofa-framework/sofa/pull/370:279,Integrability,message,message,279,This is the Defrost cleaning week29 with...as usual a lot of std:cout and dead code removal. ; Shouldn't break anything. ; In case some component are too verbose please tell us. . ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/370
https://github.com/sofa-framework/sofa/pull/370:431,Testability,test,test,431,This is the Defrost cleaning week29 with...as usual a lot of std:cout and dead code removal. ; Shouldn't break anything. ; In case some component are too verbose please tell us. . ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/370
https://github.com/sofa-framework/sofa/pull/370:481,Testability,test,test,481,This is the Defrost cleaning week29 with...as usual a lot of std:cout and dead code removal. ; Shouldn't break anything. ; In case some component are too verbose please tell us. . ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/370
https://github.com/sofa-framework/sofa/pull/371:311,Availability,failure,failures,311,This is a WIP to support discussion about issue #362 . ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/371
https://github.com/sofa-framework/sofa/pull/371:361,Availability,failure,failures,361,This is a WIP to support discussion about issue #362 . ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/371
https://github.com/sofa-framework/sofa/pull/371:154,Integrability,message,message,154,This is a WIP to support discussion about issue #362 . ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/371
https://github.com/sofa-framework/sofa/pull/371:306,Testability,test,test,306,This is a WIP to support discussion about issue #362 . ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/371
https://github.com/sofa-framework/sofa/pull/371:356,Testability,test,test,356,This is a WIP to support discussion about issue #362 . ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/371
https://github.com/sofa-framework/sofa/pull/372:523,Availability,failure,failure,523,"As pointed by @thomas-lemaire in #355 & #13 there are several issue on ObjExporter. ; In this PR I suggest to fix & unify the exporter (if you want to contribute...feel free to commit). . Currently it:; - factor & unify shared code between OBJExporter, STLExporter and MeshExporter by inheriting from ; BaseSimulationExporter; - adds a set of tests for OBJExporter, STLExporter and MeshExporter, the test coverage is not bad; - change of the API so that the ::write() function returns a boolean indicate the success or the failure; - add new possibility on the provided filename (to automatically create the missing path element)...; - report error & messages when the files cannot be created. ; - deprecation of the 'hard coded' interaction behavior... (I can explain if needed).; - fix crashes when missing topology. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/372
https://github.com/sofa-framework/sofa/pull/372:643,Availability,error,error,643,"As pointed by @thomas-lemaire in #355 & #13 there are several issue on ObjExporter. ; In this PR I suggest to fix & unify the exporter (if you want to contribute...feel free to commit). . Currently it:; - factor & unify shared code between OBJExporter, STLExporter and MeshExporter by inheriting from ; BaseSimulationExporter; - adds a set of tests for OBJExporter, STLExporter and MeshExporter, the test coverage is not bad; - change of the API so that the ::write() function returns a boolean indicate the success or the failure; - add new possibility on the provided filename (to automatically create the missing path element)...; - report error & messages when the files cannot be created. ; - deprecation of the 'hard coded' interaction behavior... (I can explain if needed).; - fix crashes when missing topology. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/372
https://github.com/sofa-framework/sofa/pull/372:1075,Availability,failure,failures,1075,"As pointed by @thomas-lemaire in #355 & #13 there are several issue on ObjExporter. ; In this PR I suggest to fix & unify the exporter (if you want to contribute...feel free to commit). . Currently it:; - factor & unify shared code between OBJExporter, STLExporter and MeshExporter by inheriting from ; BaseSimulationExporter; - adds a set of tests for OBJExporter, STLExporter and MeshExporter, the test coverage is not bad; - change of the API so that the ::write() function returns a boolean indicate the success or the failure; - add new possibility on the provided filename (to automatically create the missing path element)...; - report error & messages when the files cannot be created. ; - deprecation of the 'hard coded' interaction behavior... (I can explain if needed).; - fix crashes when missing topology. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/372
https://github.com/sofa-framework/sofa/pull/372:1125,Availability,failure,failures,1125,"As pointed by @thomas-lemaire in #355 & #13 there are several issue on ObjExporter. ; In this PR I suggest to fix & unify the exporter (if you want to contribute...feel free to commit). . Currently it:; - factor & unify shared code between OBJExporter, STLExporter and MeshExporter by inheriting from ; BaseSimulationExporter; - adds a set of tests for OBJExporter, STLExporter and MeshExporter, the test coverage is not bad; - change of the API so that the ::write() function returns a boolean indicate the success or the failure; - add new possibility on the provided filename (to automatically create the missing path element)...; - report error & messages when the files cannot be created. ; - deprecation of the 'hard coded' interaction behavior... (I can explain if needed).; - fix crashes when missing topology. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/372
https://github.com/sofa-framework/sofa/pull/372:651,Integrability,message,messages,651,"As pointed by @thomas-lemaire in #355 & #13 there are several issue on ObjExporter. ; In this PR I suggest to fix & unify the exporter (if you want to contribute...feel free to commit). . Currently it:; - factor & unify shared code between OBJExporter, STLExporter and MeshExporter by inheriting from ; BaseSimulationExporter; - adds a set of tests for OBJExporter, STLExporter and MeshExporter, the test coverage is not bad; - change of the API so that the ::write() function returns a boolean indicate the success or the failure; - add new possibility on the provided filename (to automatically create the missing path element)...; - report error & messages when the files cannot be created. ; - deprecation of the 'hard coded' interaction behavior... (I can explain if needed).; - fix crashes when missing topology. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/372
https://github.com/sofa-framework/sofa/pull/372:918,Integrability,message,message,918,"As pointed by @thomas-lemaire in #355 & #13 there are several issue on ObjExporter. ; In this PR I suggest to fix & unify the exporter (if you want to contribute...feel free to commit). . Currently it:; - factor & unify shared code between OBJExporter, STLExporter and MeshExporter by inheriting from ; BaseSimulationExporter; - adds a set of tests for OBJExporter, STLExporter and MeshExporter, the test coverage is not bad; - change of the API so that the ::write() function returns a boolean indicate the success or the failure; - add new possibility on the provided filename (to automatically create the missing path element)...; - report error & messages when the files cannot be created. ; - deprecation of the 'hard coded' interaction behavior... (I can explain if needed).; - fix crashes when missing topology. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/372
https://github.com/sofa-framework/sofa/pull/372:285,Modifiability,inherit,inheriting,285,"As pointed by @thomas-lemaire in #355 & #13 there are several issue on ObjExporter. ; In this PR I suggest to fix & unify the exporter (if you want to contribute...feel free to commit). . Currently it:; - factor & unify shared code between OBJExporter, STLExporter and MeshExporter by inheriting from ; BaseSimulationExporter; - adds a set of tests for OBJExporter, STLExporter and MeshExporter, the test coverage is not bad; - change of the API so that the ::write() function returns a boolean indicate the success or the failure; - add new possibility on the provided filename (to automatically create the missing path element)...; - report error & messages when the files cannot be created. ; - deprecation of the 'hard coded' interaction behavior... (I can explain if needed).; - fix crashes when missing topology. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/372
https://github.com/sofa-framework/sofa/pull/372:343,Testability,test,tests,343,"As pointed by @thomas-lemaire in #355 & #13 there are several issue on ObjExporter. ; In this PR I suggest to fix & unify the exporter (if you want to contribute...feel free to commit). . Currently it:; - factor & unify shared code between OBJExporter, STLExporter and MeshExporter by inheriting from ; BaseSimulationExporter; - adds a set of tests for OBJExporter, STLExporter and MeshExporter, the test coverage is not bad; - change of the API so that the ::write() function returns a boolean indicate the success or the failure; - add new possibility on the provided filename (to automatically create the missing path element)...; - report error & messages when the files cannot be created. ; - deprecation of the 'hard coded' interaction behavior... (I can explain if needed).; - fix crashes when missing topology. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/372
https://github.com/sofa-framework/sofa/pull/372:400,Testability,test,test,400,"As pointed by @thomas-lemaire in #355 & #13 there are several issue on ObjExporter. ; In this PR I suggest to fix & unify the exporter (if you want to contribute...feel free to commit). . Currently it:; - factor & unify shared code between OBJExporter, STLExporter and MeshExporter by inheriting from ; BaseSimulationExporter; - adds a set of tests for OBJExporter, STLExporter and MeshExporter, the test coverage is not bad; - change of the API so that the ::write() function returns a boolean indicate the success or the failure; - add new possibility on the provided filename (to automatically create the missing path element)...; - report error & messages when the files cannot be created. ; - deprecation of the 'hard coded' interaction behavior... (I can explain if needed).; - fix crashes when missing topology. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/372
https://github.com/sofa-framework/sofa/pull/372:1070,Testability,test,test,1070,"As pointed by @thomas-lemaire in #355 & #13 there are several issue on ObjExporter. ; In this PR I suggest to fix & unify the exporter (if you want to contribute...feel free to commit). . Currently it:; - factor & unify shared code between OBJExporter, STLExporter and MeshExporter by inheriting from ; BaseSimulationExporter; - adds a set of tests for OBJExporter, STLExporter and MeshExporter, the test coverage is not bad; - change of the API so that the ::write() function returns a boolean indicate the success or the failure; - add new possibility on the provided filename (to automatically create the missing path element)...; - report error & messages when the files cannot be created. ; - deprecation of the 'hard coded' interaction behavior... (I can explain if needed).; - fix crashes when missing topology. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/372
https://github.com/sofa-framework/sofa/pull/372:1120,Testability,test,test,1120,"As pointed by @thomas-lemaire in #355 & #13 there are several issue on ObjExporter. ; In this PR I suggest to fix & unify the exporter (if you want to contribute...feel free to commit). . Currently it:; - factor & unify shared code between OBJExporter, STLExporter and MeshExporter by inheriting from ; BaseSimulationExporter; - adds a set of tests for OBJExporter, STLExporter and MeshExporter, the test coverage is not bad; - change of the API so that the ::write() function returns a boolean indicate the success or the failure; - add new possibility on the provided filename (to automatically create the missing path element)...; - report error & messages when the files cannot be created. ; - deprecation of the 'hard coded' interaction behavior... (I can explain if needed).; - fix crashes when missing topology. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/372
https://github.com/sofa-framework/sofa/pull/373:720,Availability,failure,failures,720,"Hi all,. as earlier, I'm making PR on several 'simple' behavior that I implemented a long time ago but could make user of runSofa happier. Here is one that allows to drag & drop data or scene from the gui into and external text editor to have the data serialized. This feature is very useful if you like editing your scene in runSofa and need to transfer the results into sofa. . As GUI stuff are nicer with image... I will make a small video to show it in use. ; ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/373
https://github.com/sofa-framework/sofa/pull/373:770,Availability,failure,failures,770,"Hi all,. as earlier, I'm making PR on several 'simple' behavior that I implemented a long time ago but could make user of runSofa happier. Here is one that allows to drag & drop data or scene from the gui into and external text editor to have the data serialized. This feature is very useful if you like editing your scene in runSofa and need to transfer the results into sofa. . As GUI stuff are nicer with image... I will make a small video to show it in use. ; ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/373
https://github.com/sofa-framework/sofa/pull/373:563,Integrability,message,message,563,"Hi all,. as earlier, I'm making PR on several 'simple' behavior that I implemented a long time ago but could make user of runSofa happier. Here is one that allows to drag & drop data or scene from the gui into and external text editor to have the data serialized. This feature is very useful if you like editing your scene in runSofa and need to transfer the results into sofa. . As GUI stuff are nicer with image... I will make a small video to show it in use. ; ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/373
https://github.com/sofa-framework/sofa/pull/373:715,Testability,test,test,715,"Hi all,. as earlier, I'm making PR on several 'simple' behavior that I implemented a long time ago but could make user of runSofa happier. Here is one that allows to drag & drop data or scene from the gui into and external text editor to have the data serialized. This feature is very useful if you like editing your scene in runSofa and need to transfer the results into sofa. . As GUI stuff are nicer with image... I will make a small video to show it in use. ; ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/373
https://github.com/sofa-framework/sofa/pull/373:765,Testability,test,test,765,"Hi all,. as earlier, I'm making PR on several 'simple' behavior that I implemented a long time ago but could make user of runSofa happier. Here is one that allows to drag & drop data or scene from the gui into and external text editor to have the data serialized. This feature is very useful if you like editing your scene in runSofa and need to transfer the results into sofa. . As GUI stuff are nicer with image... I will make a small video to show it in use. ; ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/373
https://github.com/sofa-framework/sofa/pull/373:47,Usability,simpl,simple,47,"Hi all,. as earlier, I'm making PR on several 'simple' behavior that I implemented a long time ago but could make user of runSofa happier. Here is one that allows to drag & drop data or scene from the gui into and external text editor to have the data serialized. This feature is very useful if you like editing your scene in runSofa and need to transfer the results into sofa. . As GUI stuff are nicer with image... I will make a small video to show it in use. ; ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/373
https://github.com/sofa-framework/sofa/issues/374:154,Performance,load,load,154,"Hi all,. On my computer if I take the caduceus scene,; and I add something like parents=""@"" in for example the ""Snake"" node; runSofa crash when trying to load the scene.; ______________________________________________________. Suggested labels: <!--- see https://github.com/sofa-framework/sofa/labels -->",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/374
https://github.com/sofa-framework/sofa/issues/375:189,Testability,test,tested,189,"start runSofa (the caduceus scene); double click on the ""Snake"" Node in the scene graph to open its window properties.; go to the layer named ""Link"",; press ""Ok"".; It crash. This have been tested on two different linux from fresh checkout. ______________________________________________________. Suggested labels: <!--- see https://github.com/sofa-framework/sofa/labels -->",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/375
https://github.com/sofa-framework/sofa/pull/376:488,Availability,failure,failures,488,THIS PR HAS BEEN REPLACED WITH #377.; So i close it. . ===============; This is an attempt to fix the bug here: #375 . The only real change is in BaseLink all the other file is cosmetic cleaning. ; Currently it is breaking & a wip. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/376
https://github.com/sofa-framework/sofa/pull/376:538,Availability,failure,failures,538,THIS PR HAS BEEN REPLACED WITH #377.; So i close it. . ===============; This is an attempt to fix the bug here: #375 . The only real change is in BaseLink all the other file is cosmetic cleaning. ; Currently it is breaking & a wip. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/376
https://github.com/sofa-framework/sofa/pull/376:331,Integrability,message,message,331,THIS PR HAS BEEN REPLACED WITH #377.; So i close it. . ===============; This is an attempt to fix the bug here: #375 . The only real change is in BaseLink all the other file is cosmetic cleaning. ; Currently it is breaking & a wip. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/376
https://github.com/sofa-framework/sofa/pull/376:483,Testability,test,test,483,THIS PR HAS BEEN REPLACED WITH #377.; So i close it. . ===============; This is an attempt to fix the bug here: #375 . The only real change is in BaseLink all the other file is cosmetic cleaning. ; Currently it is breaking & a wip. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/376
https://github.com/sofa-framework/sofa/pull/376:533,Testability,test,test,533,THIS PR HAS BEEN REPLACED WITH #377.; So i close it. . ===============; This is an attempt to fix the bug here: #375 . The only real change is in BaseLink all the other file is cosmetic cleaning. ; Currently it is breaking & a wip. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/376
https://github.com/sofa-framework/sofa/pull/377:438,Availability,failure,failures,438,When the source path is from the root the path is empty.; This results in returning @ instead of @/; This fix it. This fix issue #375 ; This is a reviewer friendly version of #376 . ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/377
https://github.com/sofa-framework/sofa/pull/377:488,Availability,failure,failures,488,When the source path is from the root the path is empty.; This results in returning @ instead of @/; This fix it. This fix issue #375 ; This is a reviewer friendly version of #376 . ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/377
https://github.com/sofa-framework/sofa/pull/377:281,Integrability,message,message,281,When the source path is from the root the path is empty.; This results in returning @ instead of @/; This fix it. This fix issue #375 ; This is a reviewer friendly version of #376 . ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/377
https://github.com/sofa-framework/sofa/pull/377:433,Testability,test,test,433,When the source path is from the root the path is empty.; This results in returning @ instead of @/; This fix it. This fix issue #375 ; This is a reviewer friendly version of #376 . ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/377
https://github.com/sofa-framework/sofa/pull/377:483,Testability,test,test,483,When the source path is from the root the path is empty.; This results in returning @ instead of @/; This fix it. This fix issue #375 ; This is a reviewer friendly version of #376 . ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/377
https://github.com/sofa-framework/sofa/issues/378:163,Availability,error,error,163,"Let's try this small scene; ```xml; <?xml version=""1.0"" ?>; <Node name=""root"" >; <MergeVectors template=""tartempion"" name=""merge"" nbInputs=""2""/>; </Node>; ```; No error is triggered on the console, and obviously ""tartempion"" is not a valid template; However in debug, I can follow up to the line where a message is sent to object->serr in ObjectFactory.cpp around line 174; if (!usertemplatename.empty() && object->getTemplateName() != userresolved) {; object->serr << ""template <"" << usertemplatename << ""> incorrect, used <""; << object->getTemplateName() + "">"";; }. maybe s.t. related to logging not initialized in the object at that time ?. ______________________________________________________. Suggested labels: <!--- see https://github.com/sofa-framework/sofa/labels -->",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/378
https://github.com/sofa-framework/sofa/issues/378:304,Integrability,message,message,304,"Let's try this small scene; ```xml; <?xml version=""1.0"" ?>; <Node name=""root"" >; <MergeVectors template=""tartempion"" name=""merge"" nbInputs=""2""/>; </Node>; ```; No error is triggered on the console, and obviously ""tartempion"" is not a valid template; However in debug, I can follow up to the line where a message is sent to object->serr in ObjectFactory.cpp around line 174; if (!usertemplatename.empty() && object->getTemplateName() != userresolved) {; object->serr << ""template <"" << usertemplatename << ""> incorrect, used <""; << object->getTemplateName() + "">"";; }. maybe s.t. related to logging not initialized in the object at that time ?. ______________________________________________________. Suggested labels: <!--- see https://github.com/sofa-framework/sofa/labels -->",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/378
https://github.com/sofa-framework/sofa/issues/378:590,Testability,log,logging,590,"Let's try this small scene; ```xml; <?xml version=""1.0"" ?>; <Node name=""root"" >; <MergeVectors template=""tartempion"" name=""merge"" nbInputs=""2""/>; </Node>; ```; No error is triggered on the console, and obviously ""tartempion"" is not a valid template; However in debug, I can follow up to the line where a message is sent to object->serr in ObjectFactory.cpp around line 174; if (!usertemplatename.empty() && object->getTemplateName() != userresolved) {; object->serr << ""template <"" << usertemplatename << ""> incorrect, used <""; << object->getTemplateName() + "">"";; }. maybe s.t. related to logging not initialized in the object at that time ?. ______________________________________________________. Suggested labels: <!--- see https://github.com/sofa-framework/sofa/labels -->",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/378
https://github.com/sofa-framework/sofa/pull/379:342,Availability,failure,failures,342,"Unix timeout command is now accessible in Windows VMs (using ""Git for Windows"" Bash). ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/379
https://github.com/sofa-framework/sofa/pull/379:392,Availability,failure,failures,392,"Unix timeout command is now accessible in Windows VMs (using ""Git for Windows"" Bash). ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/379
https://github.com/sofa-framework/sofa/pull/379:185,Integrability,message,message,185,"Unix timeout command is now accessible in Windows VMs (using ""Git for Windows"" Bash). ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/379
https://github.com/sofa-framework/sofa/pull/379:5,Safety,timeout,timeout,5,"Unix timeout command is now accessible in Windows VMs (using ""Git for Windows"" Bash). ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/379
https://github.com/sofa-framework/sofa/pull/379:28,Security,access,accessible,28,"Unix timeout command is now accessible in Windows VMs (using ""Git for Windows"" Bash). ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/379
https://github.com/sofa-framework/sofa/pull/379:337,Testability,test,test,337,"Unix timeout command is now accessible in Windows VMs (using ""Git for Windows"" Bash). ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/379
https://github.com/sofa-framework/sofa/pull/379:387,Testability,test,test,387,"Unix timeout command is now accessible in Windows VMs (using ""Git for Windows"" Bash). ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/379
https://github.com/sofa-framework/sofa/pull/380:27,Availability,error,error,27,Quick commit to fix [build error](https://ci.inria.fr/sofa-ci/job/ubuntu_clang-3.8_options-debug/325/console) after #370 merge. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/380
https://github.com/sofa-framework/sofa/pull/380:384,Availability,failure,failures,384,Quick commit to fix [build error](https://ci.inria.fr/sofa-ci/job/ubuntu_clang-3.8_options-debug/325/console) after #370 merge. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/380
https://github.com/sofa-framework/sofa/pull/380:434,Availability,failure,failures,434,Quick commit to fix [build error](https://ci.inria.fr/sofa-ci/job/ubuntu_clang-3.8_options-debug/325/console) after #370 merge. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/380
https://github.com/sofa-framework/sofa/pull/380:227,Integrability,message,message,227,Quick commit to fix [build error](https://ci.inria.fr/sofa-ci/job/ubuntu_clang-3.8_options-debug/325/console) after #370 merge. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/380
https://github.com/sofa-framework/sofa/pull/380:379,Testability,test,test,379,Quick commit to fix [build error](https://ci.inria.fr/sofa-ci/job/ubuntu_clang-3.8_options-debug/325/console) after #370 merge. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/380
https://github.com/sofa-framework/sofa/pull/380:429,Testability,test,test,429,Quick commit to fix [build error](https://ci.inria.fr/sofa-ci/job/ubuntu_clang-3.8_options-debug/325/console) after #370 merge. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/380
https://github.com/sofa-framework/sofa/pull/382:388,Availability,failure,failures,388,"Ensure data_->getHelp() is not null.; If it's null an empty string will be used, instead of make runSofa crash. EDIT : fixes #381 . ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/382
https://github.com/sofa-framework/sofa/pull/382:438,Availability,failure,failures,438,"Ensure data_->getHelp() is not null.; If it's null an empty string will be used, instead of make runSofa crash. EDIT : fixes #381 . ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/382
https://github.com/sofa-framework/sofa/pull/382:231,Integrability,message,message,231,"Ensure data_->getHelp() is not null.; If it's null an empty string will be used, instead of make runSofa crash. EDIT : fixes #381 . ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/382
https://github.com/sofa-framework/sofa/pull/382:383,Testability,test,test,383,"Ensure data_->getHelp() is not null.; If it's null an empty string will be used, instead of make runSofa crash. EDIT : fixes #381 . ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/382
https://github.com/sofa-framework/sofa/pull/382:433,Testability,test,test,433,"Ensure data_->getHelp() is not null.; If it's null an empty string will be used, instead of make runSofa crash. EDIT : fixes #381 . ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/382
https://github.com/sofa-framework/sofa/pull/383:354,Availability,failure,failures,354,"This pull request does not change anything to the compilation, it only affects the install phase. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/383
https://github.com/sofa-framework/sofa/pull/383:404,Availability,failure,failures,404,"This pull request does not change anything to the compilation, it only affects the install phase. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/383
https://github.com/sofa-framework/sofa/pull/383:83,Deployability,install,install,83,"This pull request does not change anything to the compilation, it only affects the install phase. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/383
https://github.com/sofa-framework/sofa/pull/383:197,Integrability,message,message,197,"This pull request does not change anything to the compilation, it only affects the install phase. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/383
https://github.com/sofa-framework/sofa/pull/383:349,Testability,test,test,349,"This pull request does not change anything to the compilation, it only affects the install phase. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/383
https://github.com/sofa-framework/sofa/pull/383:399,Testability,test,test,399,"This pull request does not change anything to the compilation, it only affects the install phase. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/383
https://github.com/sofa-framework/sofa/pull/384:628,Availability,failure,failures,628,"The LinearForceField component does not contribute anything to the matrix when solving a system. Accordingly, the addKToMatrix function does nothing. However, since it is not implemented, it displays a warning when running a simulation. This PR simply adds an empty implementation of that function, which removes the warning displayed by the definition in the base class. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/384
https://github.com/sofa-framework/sofa/pull/384:678,Availability,failure,failures,678,"The LinearForceField component does not contribute anything to the matrix when solving a system. Accordingly, the addKToMatrix function does nothing. However, since it is not implemented, it displays a warning when running a simulation. This PR simply adds an empty implementation of that function, which removes the warning displayed by the definition in the base class. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/384
https://github.com/sofa-framework/sofa/pull/384:471,Integrability,message,message,471,"The LinearForceField component does not contribute anything to the matrix when solving a system. Accordingly, the addKToMatrix function does nothing. However, since it is not implemented, it displays a warning when running a simulation. This PR simply adds an empty implementation of that function, which removes the warning displayed by the definition in the base class. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/384
https://github.com/sofa-framework/sofa/pull/384:623,Testability,test,test,623,"The LinearForceField component does not contribute anything to the matrix when solving a system. Accordingly, the addKToMatrix function does nothing. However, since it is not implemented, it displays a warning when running a simulation. This PR simply adds an empty implementation of that function, which removes the warning displayed by the definition in the base class. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/384
https://github.com/sofa-framework/sofa/pull/384:673,Testability,test,test,673,"The LinearForceField component does not contribute anything to the matrix when solving a system. Accordingly, the addKToMatrix function does nothing. However, since it is not implemented, it displays a warning when running a simulation. This PR simply adds an empty implementation of that function, which removes the warning displayed by the definition in the base class. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/384
https://github.com/sofa-framework/sofa/pull/384:245,Usability,simpl,simply,245,"The LinearForceField component does not contribute anything to the matrix when solving a system. Accordingly, the addKToMatrix function does nothing. However, since it is not implemented, it displays a warning when running a simulation. This PR simply adds an empty implementation of that function, which removes the warning displayed by the definition in the base class. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/384
https://github.com/sofa-framework/sofa/pull/385:423,Availability,failure,failures,423,This PR simply add a default class named NoArgument in Factory.h.; NoArgument is usefull when you try to instantiate BaseCreator or Factory without passing arguments. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/385
https://github.com/sofa-framework/sofa/pull/385:473,Availability,failure,failures,473,This PR simply add a default class named NoArgument in Factory.h.; NoArgument is usefull when you try to instantiate BaseCreator or Factory without passing arguments. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/385
https://github.com/sofa-framework/sofa/pull/385:266,Integrability,message,message,266,This PR simply add a default class named NoArgument in Factory.h.; NoArgument is usefull when you try to instantiate BaseCreator or Factory without passing arguments. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/385
https://github.com/sofa-framework/sofa/pull/385:418,Testability,test,test,418,This PR simply add a default class named NoArgument in Factory.h.; NoArgument is usefull when you try to instantiate BaseCreator or Factory without passing arguments. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/385
https://github.com/sofa-framework/sofa/pull/385:468,Testability,test,test,468,This PR simply add a default class named NoArgument in Factory.h.; NoArgument is usefull when you try to instantiate BaseCreator or Factory without passing arguments. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/385
https://github.com/sofa-framework/sofa/pull/385:8,Usability,simpl,simply,8,This PR simply add a default class named NoArgument in Factory.h.; NoArgument is usefull when you try to instantiate BaseCreator or Factory without passing arguments. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/385
https://github.com/sofa-framework/sofa/pull/386:357,Availability,failure,failures,357,"There was an unused variable in a frequently included header, and a missing override in another one. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/386
https://github.com/sofa-framework/sofa/pull/386:407,Availability,failure,failures,407,"There was an unused variable in a frequently included header, and a missing override in another one. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/386
https://github.com/sofa-framework/sofa/pull/386:200,Integrability,message,message,200,"There was an unused variable in a frequently included header, and a missing override in another one. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/386
https://github.com/sofa-framework/sofa/pull/386:20,Modifiability,variab,variable,20,"There was an unused variable in a frequently included header, and a missing override in another one. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/386
https://github.com/sofa-framework/sofa/pull/386:352,Testability,test,test,352,"There was an unused variable in a frequently included header, and a missing override in another one. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/386
https://github.com/sofa-framework/sofa/pull/386:402,Testability,test,test,402,"There was an unused variable in a frequently included header, and a missing override in another one. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/386
https://github.com/sofa-framework/sofa/pull/387:1118,Availability,failure,failures,1118,"In this pull request I propose several improvements of the script scn2python.py: ; - Improved the structure of the output file, i.e. for both, the generation of .scn+.py and .py a class python script controller is introduced (before it was only the case for .scn+.py). For .py the function createScene then introduces an instance of the class. Moreover, the script now saves every node in self, s.t. it is not necessary to use getChild.; - In createScene, the command line arguments introduced in #356 are now forwarded to the class (not possible before); - If an xml scene includes another file, the script now locates this file and then introduces all its objects automatically; - In an insertion like the one mentioned in the last point, it can happen, that there are links like '@', are now dealt with the input of the user. I am open for any improvements!; ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/387
https://github.com/sofa-framework/sofa/pull/387:1168,Availability,failure,failures,1168,"In this pull request I propose several improvements of the script scn2python.py: ; - Improved the structure of the output file, i.e. for both, the generation of .scn+.py and .py a class python script controller is introduced (before it was only the case for .scn+.py). For .py the function createScene then introduces an instance of the class. Moreover, the script now saves every node in self, s.t. it is not necessary to use getChild.; - In createScene, the command line arguments introduced in #356 are now forwarded to the class (not possible before); - If an xml scene includes another file, the script now locates this file and then introduces all its objects automatically; - In an insertion like the one mentioned in the last point, it can happen, that there are links like '@', are now dealt with the input of the user. I am open for any improvements!; ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/387
https://github.com/sofa-framework/sofa/pull/387:961,Integrability,message,message,961,"In this pull request I propose several improvements of the script scn2python.py: ; - Improved the structure of the output file, i.e. for both, the generation of .scn+.py and .py a class python script controller is introduced (before it was only the case for .scn+.py). For .py the function createScene then introduces an instance of the class. Moreover, the script now saves every node in self, s.t. it is not necessary to use getChild.; - In createScene, the command line arguments introduced in #356 are now forwarded to the class (not possible before); - If an xml scene includes another file, the script now locates this file and then introduces all its objects automatically; - In an insertion like the one mentioned in the last point, it can happen, that there are links like '@', are now dealt with the input of the user. I am open for any improvements!; ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/387
https://github.com/sofa-framework/sofa/pull/387:1113,Testability,test,test,1113,"In this pull request I propose several improvements of the script scn2python.py: ; - Improved the structure of the output file, i.e. for both, the generation of .scn+.py and .py a class python script controller is introduced (before it was only the case for .scn+.py). For .py the function createScene then introduces an instance of the class. Moreover, the script now saves every node in self, s.t. it is not necessary to use getChild.; - In createScene, the command line arguments introduced in #356 are now forwarded to the class (not possible before); - If an xml scene includes another file, the script now locates this file and then introduces all its objects automatically; - In an insertion like the one mentioned in the last point, it can happen, that there are links like '@', are now dealt with the input of the user. I am open for any improvements!; ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/387
https://github.com/sofa-framework/sofa/pull/387:1163,Testability,test,test,1163,"In this pull request I propose several improvements of the script scn2python.py: ; - Improved the structure of the output file, i.e. for both, the generation of .scn+.py and .py a class python script controller is introduced (before it was only the case for .scn+.py). For .py the function createScene then introduces an instance of the class. Moreover, the script now saves every node in self, s.t. it is not necessary to use getChild.; - In createScene, the command line arguments introduced in #356 are now forwarded to the class (not possible before); - If an xml scene includes another file, the script now locates this file and then introduces all its objects automatically; - In an insertion like the one mentioned in the last point, it can happen, that there are links like '@', are now dealt with the input of the user. I am open for any improvements!; ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/387
https://github.com/sofa-framework/sofa/issues/388:1087,Integrability,message,message,1087,"Hi all,. At DEFROST we are working on adding new features to SofaVolumetricData & CGAL. . But currently SofaVolumetricData is not a plugin and is poorly organized so we are considering that it may be a good opportunity to clean it and tranform it into several plugins. If you are using it...please join the effort so that the end result match yours need & expectation. . Currently we have done the following:; - move SofaVolumetricData into a plugin named SofaVolumetricData ; - copy DistanceGrid specific elements from SofaVolumetricData into a new plugin named SofaDistanceGrid; - copy ImplicitField specific elements from SofaVolumetricData into a new plugin name SofaImplicitField; - remove *.cpp from SofaVolumetricData and forward the old *.h to the corresponding .h in SofaDistanceGrid & SofaImplicitField. (So that #include <SofaVolumetricData/> still work for a transitional period) ; - refactor & rename some classes but use 'using OldName = NewName' to provide API compatibility ; and use the Factory to continue exposing the same component names to the sofa users or warning message to indicate the something have changed. After a transitional period this should be removed. . The current WIP is in the following branch:; https://github.com/sofa-framework/sofa/compare/master...SofaDefrost:splitSofaVolumetricDataSquashed. The result is to have:; ```; plugins/SofaDistanceGrid/; - components/collision/BarycentricPenalty, DistanceGridCollision, FFDDistanceGrid, RigidDistanceGird; - components/forcefield/DistanceGridForceFIeld. plugins/SofaImplicitField/ ; - components/geometry/ScalarField (base class); - components/geometry/DiscreteGridField (inherit from ScalarField); - components/geometry/SphericalField (inherit from ScalarField); - components/geometry/otherToComeFromDefrost; - components/mapping/ImplictSurfaceMapping; - deprecated/ImplicitSurfaceContainer (override) components/geometry/DiscreteGridField ; - deprecated/InterpolatedImplicitSurface (override) components/geometry",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/388
https://github.com/sofa-framework/sofa/issues/388:132,Modifiability,plugin,plugin,132,"Hi all,. At DEFROST we are working on adding new features to SofaVolumetricData & CGAL. . But currently SofaVolumetricData is not a plugin and is poorly organized so we are considering that it may be a good opportunity to clean it and tranform it into several plugins. If you are using it...please join the effort so that the end result match yours need & expectation. . Currently we have done the following:; - move SofaVolumetricData into a plugin named SofaVolumetricData ; - copy DistanceGrid specific elements from SofaVolumetricData into a new plugin named SofaDistanceGrid; - copy ImplicitField specific elements from SofaVolumetricData into a new plugin name SofaImplicitField; - remove *.cpp from SofaVolumetricData and forward the old *.h to the corresponding .h in SofaDistanceGrid & SofaImplicitField. (So that #include <SofaVolumetricData/> still work for a transitional period) ; - refactor & rename some classes but use 'using OldName = NewName' to provide API compatibility ; and use the Factory to continue exposing the same component names to the sofa users or warning message to indicate the something have changed. After a transitional period this should be removed. . The current WIP is in the following branch:; https://github.com/sofa-framework/sofa/compare/master...SofaDefrost:splitSofaVolumetricDataSquashed. The result is to have:; ```; plugins/SofaDistanceGrid/; - components/collision/BarycentricPenalty, DistanceGridCollision, FFDDistanceGrid, RigidDistanceGird; - components/forcefield/DistanceGridForceFIeld. plugins/SofaImplicitField/ ; - components/geometry/ScalarField (base class); - components/geometry/DiscreteGridField (inherit from ScalarField); - components/geometry/SphericalField (inherit from ScalarField); - components/geometry/otherToComeFromDefrost; - components/mapping/ImplictSurfaceMapping; - deprecated/ImplicitSurfaceContainer (override) components/geometry/DiscreteGridField ; - deprecated/InterpolatedImplicitSurface (override) components/geometry",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/388
https://github.com/sofa-framework/sofa/issues/388:260,Modifiability,plugin,plugins,260,"Hi all,. At DEFROST we are working on adding new features to SofaVolumetricData & CGAL. . But currently SofaVolumetricData is not a plugin and is poorly organized so we are considering that it may be a good opportunity to clean it and tranform it into several plugins. If you are using it...please join the effort so that the end result match yours need & expectation. . Currently we have done the following:; - move SofaVolumetricData into a plugin named SofaVolumetricData ; - copy DistanceGrid specific elements from SofaVolumetricData into a new plugin named SofaDistanceGrid; - copy ImplicitField specific elements from SofaVolumetricData into a new plugin name SofaImplicitField; - remove *.cpp from SofaVolumetricData and forward the old *.h to the corresponding .h in SofaDistanceGrid & SofaImplicitField. (So that #include <SofaVolumetricData/> still work for a transitional period) ; - refactor & rename some classes but use 'using OldName = NewName' to provide API compatibility ; and use the Factory to continue exposing the same component names to the sofa users or warning message to indicate the something have changed. After a transitional period this should be removed. . The current WIP is in the following branch:; https://github.com/sofa-framework/sofa/compare/master...SofaDefrost:splitSofaVolumetricDataSquashed. The result is to have:; ```; plugins/SofaDistanceGrid/; - components/collision/BarycentricPenalty, DistanceGridCollision, FFDDistanceGrid, RigidDistanceGird; - components/forcefield/DistanceGridForceFIeld. plugins/SofaImplicitField/ ; - components/geometry/ScalarField (base class); - components/geometry/DiscreteGridField (inherit from ScalarField); - components/geometry/SphericalField (inherit from ScalarField); - components/geometry/otherToComeFromDefrost; - components/mapping/ImplictSurfaceMapping; - deprecated/ImplicitSurfaceContainer (override) components/geometry/DiscreteGridField ; - deprecated/InterpolatedImplicitSurface (override) components/geometry",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/388
https://github.com/sofa-framework/sofa/issues/388:443,Modifiability,plugin,plugin,443,"Hi all,. At DEFROST we are working on adding new features to SofaVolumetricData & CGAL. . But currently SofaVolumetricData is not a plugin and is poorly organized so we are considering that it may be a good opportunity to clean it and tranform it into several plugins. If you are using it...please join the effort so that the end result match yours need & expectation. . Currently we have done the following:; - move SofaVolumetricData into a plugin named SofaVolumetricData ; - copy DistanceGrid specific elements from SofaVolumetricData into a new plugin named SofaDistanceGrid; - copy ImplicitField specific elements from SofaVolumetricData into a new plugin name SofaImplicitField; - remove *.cpp from SofaVolumetricData and forward the old *.h to the corresponding .h in SofaDistanceGrid & SofaImplicitField. (So that #include <SofaVolumetricData/> still work for a transitional period) ; - refactor & rename some classes but use 'using OldName = NewName' to provide API compatibility ; and use the Factory to continue exposing the same component names to the sofa users or warning message to indicate the something have changed. After a transitional period this should be removed. . The current WIP is in the following branch:; https://github.com/sofa-framework/sofa/compare/master...SofaDefrost:splitSofaVolumetricDataSquashed. The result is to have:; ```; plugins/SofaDistanceGrid/; - components/collision/BarycentricPenalty, DistanceGridCollision, FFDDistanceGrid, RigidDistanceGird; - components/forcefield/DistanceGridForceFIeld. plugins/SofaImplicitField/ ; - components/geometry/ScalarField (base class); - components/geometry/DiscreteGridField (inherit from ScalarField); - components/geometry/SphericalField (inherit from ScalarField); - components/geometry/otherToComeFromDefrost; - components/mapping/ImplictSurfaceMapping; - deprecated/ImplicitSurfaceContainer (override) components/geometry/DiscreteGridField ; - deprecated/InterpolatedImplicitSurface (override) components/geometry",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/388
https://github.com/sofa-framework/sofa/issues/388:550,Modifiability,plugin,plugin,550,"Hi all,. At DEFROST we are working on adding new features to SofaVolumetricData & CGAL. . But currently SofaVolumetricData is not a plugin and is poorly organized so we are considering that it may be a good opportunity to clean it and tranform it into several plugins. If you are using it...please join the effort so that the end result match yours need & expectation. . Currently we have done the following:; - move SofaVolumetricData into a plugin named SofaVolumetricData ; - copy DistanceGrid specific elements from SofaVolumetricData into a new plugin named SofaDistanceGrid; - copy ImplicitField specific elements from SofaVolumetricData into a new plugin name SofaImplicitField; - remove *.cpp from SofaVolumetricData and forward the old *.h to the corresponding .h in SofaDistanceGrid & SofaImplicitField. (So that #include <SofaVolumetricData/> still work for a transitional period) ; - refactor & rename some classes but use 'using OldName = NewName' to provide API compatibility ; and use the Factory to continue exposing the same component names to the sofa users or warning message to indicate the something have changed. After a transitional period this should be removed. . The current WIP is in the following branch:; https://github.com/sofa-framework/sofa/compare/master...SofaDefrost:splitSofaVolumetricDataSquashed. The result is to have:; ```; plugins/SofaDistanceGrid/; - components/collision/BarycentricPenalty, DistanceGridCollision, FFDDistanceGrid, RigidDistanceGird; - components/forcefield/DistanceGridForceFIeld. plugins/SofaImplicitField/ ; - components/geometry/ScalarField (base class); - components/geometry/DiscreteGridField (inherit from ScalarField); - components/geometry/SphericalField (inherit from ScalarField); - components/geometry/otherToComeFromDefrost; - components/mapping/ImplictSurfaceMapping; - deprecated/ImplicitSurfaceContainer (override) components/geometry/DiscreteGridField ; - deprecated/InterpolatedImplicitSurface (override) components/geometry",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/388
https://github.com/sofa-framework/sofa/issues/388:655,Modifiability,plugin,plugin,655,"Hi all,. At DEFROST we are working on adding new features to SofaVolumetricData & CGAL. . But currently SofaVolumetricData is not a plugin and is poorly organized so we are considering that it may be a good opportunity to clean it and tranform it into several plugins. If you are using it...please join the effort so that the end result match yours need & expectation. . Currently we have done the following:; - move SofaVolumetricData into a plugin named SofaVolumetricData ; - copy DistanceGrid specific elements from SofaVolumetricData into a new plugin named SofaDistanceGrid; - copy ImplicitField specific elements from SofaVolumetricData into a new plugin name SofaImplicitField; - remove *.cpp from SofaVolumetricData and forward the old *.h to the corresponding .h in SofaDistanceGrid & SofaImplicitField. (So that #include <SofaVolumetricData/> still work for a transitional period) ; - refactor & rename some classes but use 'using OldName = NewName' to provide API compatibility ; and use the Factory to continue exposing the same component names to the sofa users or warning message to indicate the something have changed. After a transitional period this should be removed. . The current WIP is in the following branch:; https://github.com/sofa-framework/sofa/compare/master...SofaDefrost:splitSofaVolumetricDataSquashed. The result is to have:; ```; plugins/SofaDistanceGrid/; - components/collision/BarycentricPenalty, DistanceGridCollision, FFDDistanceGrid, RigidDistanceGird; - components/forcefield/DistanceGridForceFIeld. plugins/SofaImplicitField/ ; - components/geometry/ScalarField (base class); - components/geometry/DiscreteGridField (inherit from ScalarField); - components/geometry/SphericalField (inherit from ScalarField); - components/geometry/otherToComeFromDefrost; - components/mapping/ImplictSurfaceMapping; - deprecated/ImplicitSurfaceContainer (override) components/geometry/DiscreteGridField ; - deprecated/InterpolatedImplicitSurface (override) components/geometry",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/388
https://github.com/sofa-framework/sofa/issues/388:896,Modifiability,refactor,refactor,896,"Hi all,. At DEFROST we are working on adding new features to SofaVolumetricData & CGAL. . But currently SofaVolumetricData is not a plugin and is poorly organized so we are considering that it may be a good opportunity to clean it and tranform it into several plugins. If you are using it...please join the effort so that the end result match yours need & expectation. . Currently we have done the following:; - move SofaVolumetricData into a plugin named SofaVolumetricData ; - copy DistanceGrid specific elements from SofaVolumetricData into a new plugin named SofaDistanceGrid; - copy ImplicitField specific elements from SofaVolumetricData into a new plugin name SofaImplicitField; - remove *.cpp from SofaVolumetricData and forward the old *.h to the corresponding .h in SofaDistanceGrid & SofaImplicitField. (So that #include <SofaVolumetricData/> still work for a transitional period) ; - refactor & rename some classes but use 'using OldName = NewName' to provide API compatibility ; and use the Factory to continue exposing the same component names to the sofa users or warning message to indicate the something have changed. After a transitional period this should be removed. . The current WIP is in the following branch:; https://github.com/sofa-framework/sofa/compare/master...SofaDefrost:splitSofaVolumetricDataSquashed. The result is to have:; ```; plugins/SofaDistanceGrid/; - components/collision/BarycentricPenalty, DistanceGridCollision, FFDDistanceGrid, RigidDistanceGird; - components/forcefield/DistanceGridForceFIeld. plugins/SofaImplicitField/ ; - components/geometry/ScalarField (base class); - components/geometry/DiscreteGridField (inherit from ScalarField); - components/geometry/SphericalField (inherit from ScalarField); - components/geometry/otherToComeFromDefrost; - components/mapping/ImplictSurfaceMapping; - deprecated/ImplicitSurfaceContainer (override) components/geometry/DiscreteGridField ; - deprecated/InterpolatedImplicitSurface (override) components/geometry",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/388
https://github.com/sofa-framework/sofa/issues/388:1364,Modifiability,plugin,plugins,1364,"nto a plugin named SofaVolumetricData ; - copy DistanceGrid specific elements from SofaVolumetricData into a new plugin named SofaDistanceGrid; - copy ImplicitField specific elements from SofaVolumetricData into a new plugin name SofaImplicitField; - remove *.cpp from SofaVolumetricData and forward the old *.h to the corresponding .h in SofaDistanceGrid & SofaImplicitField. (So that #include <SofaVolumetricData/> still work for a transitional period) ; - refactor & rename some classes but use 'using OldName = NewName' to provide API compatibility ; and use the Factory to continue exposing the same component names to the sofa users or warning message to indicate the something have changed. After a transitional period this should be removed. . The current WIP is in the following branch:; https://github.com/sofa-framework/sofa/compare/master...SofaDefrost:splitSofaVolumetricDataSquashed. The result is to have:; ```; plugins/SofaDistanceGrid/; - components/collision/BarycentricPenalty, DistanceGridCollision, FFDDistanceGrid, RigidDistanceGird; - components/forcefield/DistanceGridForceFIeld. plugins/SofaImplicitField/ ; - components/geometry/ScalarField (base class); - components/geometry/DiscreteGridField (inherit from ScalarField); - components/geometry/SphericalField (inherit from ScalarField); - components/geometry/otherToComeFromDefrost; - components/mapping/ImplictSurfaceMapping; - deprecated/ImplicitSurfaceContainer (override) components/geometry/DiscreteGridField ; - deprecated/InterpolatedImplicitSurface (override) components/geometry/DiscreteGridField; - deprecated/SphereSurface (override) component/geometry/SphericalField; ```. ...of course we need to add test to all these classes & refactor the MHD loading parts....etc... . Please have a quick look at it and provide feedback on the general way to manage this kind of changes (eg do we really need to keep the SofaVolumetricData transitional plugin or do we allow a more breaking approach and directly remove the ",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/388
https://github.com/sofa-framework/sofa/issues/388:1541,Modifiability,plugin,plugins,1541,"hat #include <SofaVolumetricData/> still work for a transitional period) ; - refactor & rename some classes but use 'using OldName = NewName' to provide API compatibility ; and use the Factory to continue exposing the same component names to the sofa users or warning message to indicate the something have changed. After a transitional period this should be removed. . The current WIP is in the following branch:; https://github.com/sofa-framework/sofa/compare/master...SofaDefrost:splitSofaVolumetricDataSquashed. The result is to have:; ```; plugins/SofaDistanceGrid/; - components/collision/BarycentricPenalty, DistanceGridCollision, FFDDistanceGrid, RigidDistanceGird; - components/forcefield/DistanceGridForceFIeld. plugins/SofaImplicitField/ ; - components/geometry/ScalarField (base class); - components/geometry/DiscreteGridField (inherit from ScalarField); - components/geometry/SphericalField (inherit from ScalarField); - components/geometry/otherToComeFromDefrost; - components/mapping/ImplictSurfaceMapping; - deprecated/ImplicitSurfaceContainer (override) components/geometry/DiscreteGridField ; - deprecated/InterpolatedImplicitSurface (override) components/geometry/DiscreteGridField; - deprecated/SphereSurface (override) component/geometry/SphericalField; ```. ...of course we need to add test to all these classes & refactor the MHD loading parts....etc... . Please have a quick look at it and provide feedback on the general way to manage this kind of changes (eg do we really need to keep the SofaVolumetricData transitional plugin or do we allow a more breaking approach and directly remove the SofaVolumetricData with a ChangeLog entry ?). I would be very happy to have opinion & help to be sure to take the right direction resulting PR that match everyone's needs...@jeremieAllard, @fjourdes, @hugtalbot , @guparan , @thomas-lemaire , @matthieu-nesme, @maxime-tournier, @bruno-marques, @bcarrez, @EulalieCoevoet . DM. EDIT: If you are curious about the feature we are adding.",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/388
https://github.com/sofa-framework/sofa/issues/388:1659,Modifiability,inherit,inherit,1659,"hat #include <SofaVolumetricData/> still work for a transitional period) ; - refactor & rename some classes but use 'using OldName = NewName' to provide API compatibility ; and use the Factory to continue exposing the same component names to the sofa users or warning message to indicate the something have changed. After a transitional period this should be removed. . The current WIP is in the following branch:; https://github.com/sofa-framework/sofa/compare/master...SofaDefrost:splitSofaVolumetricDataSquashed. The result is to have:; ```; plugins/SofaDistanceGrid/; - components/collision/BarycentricPenalty, DistanceGridCollision, FFDDistanceGrid, RigidDistanceGird; - components/forcefield/DistanceGridForceFIeld. plugins/SofaImplicitField/ ; - components/geometry/ScalarField (base class); - components/geometry/DiscreteGridField (inherit from ScalarField); - components/geometry/SphericalField (inherit from ScalarField); - components/geometry/otherToComeFromDefrost; - components/mapping/ImplictSurfaceMapping; - deprecated/ImplicitSurfaceContainer (override) components/geometry/DiscreteGridField ; - deprecated/InterpolatedImplicitSurface (override) components/geometry/DiscreteGridField; - deprecated/SphereSurface (override) component/geometry/SphericalField; ```. ...of course we need to add test to all these classes & refactor the MHD loading parts....etc... . Please have a quick look at it and provide feedback on the general way to manage this kind of changes (eg do we really need to keep the SofaVolumetricData transitional plugin or do we allow a more breaking approach and directly remove the SofaVolumetricData with a ChangeLog entry ?). I would be very happy to have opinion & help to be sure to take the right direction resulting PR that match everyone's needs...@jeremieAllard, @fjourdes, @hugtalbot , @guparan , @thomas-lemaire , @matthieu-nesme, @maxime-tournier, @bruno-marques, @bcarrez, @EulalieCoevoet . DM. EDIT: If you are curious about the feature we are adding.",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/388
https://github.com/sofa-framework/sofa/issues/388:1724,Modifiability,inherit,inherit,1724,"hat #include <SofaVolumetricData/> still work for a transitional period) ; - refactor & rename some classes but use 'using OldName = NewName' to provide API compatibility ; and use the Factory to continue exposing the same component names to the sofa users or warning message to indicate the something have changed. After a transitional period this should be removed. . The current WIP is in the following branch:; https://github.com/sofa-framework/sofa/compare/master...SofaDefrost:splitSofaVolumetricDataSquashed. The result is to have:; ```; plugins/SofaDistanceGrid/; - components/collision/BarycentricPenalty, DistanceGridCollision, FFDDistanceGrid, RigidDistanceGird; - components/forcefield/DistanceGridForceFIeld. plugins/SofaImplicitField/ ; - components/geometry/ScalarField (base class); - components/geometry/DiscreteGridField (inherit from ScalarField); - components/geometry/SphericalField (inherit from ScalarField); - components/geometry/otherToComeFromDefrost; - components/mapping/ImplictSurfaceMapping; - deprecated/ImplicitSurfaceContainer (override) components/geometry/DiscreteGridField ; - deprecated/InterpolatedImplicitSurface (override) components/geometry/DiscreteGridField; - deprecated/SphereSurface (override) component/geometry/SphericalField; ```. ...of course we need to add test to all these classes & refactor the MHD loading parts....etc... . Please have a quick look at it and provide feedback on the general way to manage this kind of changes (eg do we really need to keep the SofaVolumetricData transitional plugin or do we allow a more breaking approach and directly remove the SofaVolumetricData with a ChangeLog entry ?). I would be very happy to have opinion & help to be sure to take the right direction resulting PR that match everyone's needs...@jeremieAllard, @fjourdes, @hugtalbot , @guparan , @thomas-lemaire , @matthieu-nesme, @maxime-tournier, @bruno-marques, @bcarrez, @EulalieCoevoet . DM. EDIT: If you are curious about the feature we are adding.",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/388
https://github.com/sofa-framework/sofa/issues/388:2155,Modifiability,refactor,refactor,2155,"ransitional period this should be removed. . The current WIP is in the following branch:; https://github.com/sofa-framework/sofa/compare/master...SofaDefrost:splitSofaVolumetricDataSquashed. The result is to have:; ```; plugins/SofaDistanceGrid/; - components/collision/BarycentricPenalty, DistanceGridCollision, FFDDistanceGrid, RigidDistanceGird; - components/forcefield/DistanceGridForceFIeld. plugins/SofaImplicitField/ ; - components/geometry/ScalarField (base class); - components/geometry/DiscreteGridField (inherit from ScalarField); - components/geometry/SphericalField (inherit from ScalarField); - components/geometry/otherToComeFromDefrost; - components/mapping/ImplictSurfaceMapping; - deprecated/ImplicitSurfaceContainer (override) components/geometry/DiscreteGridField ; - deprecated/InterpolatedImplicitSurface (override) components/geometry/DiscreteGridField; - deprecated/SphereSurface (override) component/geometry/SphericalField; ```. ...of course we need to add test to all these classes & refactor the MHD loading parts....etc... . Please have a quick look at it and provide feedback on the general way to manage this kind of changes (eg do we really need to keep the SofaVolumetricData transitional plugin or do we allow a more breaking approach and directly remove the SofaVolumetricData with a ChangeLog entry ?). I would be very happy to have opinion & help to be sure to take the right direction resulting PR that match everyone's needs...@jeremieAllard, @fjourdes, @hugtalbot , @guparan , @thomas-lemaire , @matthieu-nesme, @maxime-tournier, @bruno-marques, @bcarrez, @EulalieCoevoet . DM. EDIT: If you are curious about the feature we are adding... it is about having a tetrahedralMesh with CGAL straight out of an implicit function provided in python (and cython if you care about performances)...more on that later. . EDIT2: I changed the url of the branch; ______________________________________________________. Suggested labels: <!--- see https://github.com/sofa-fra",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/388
https://github.com/sofa-framework/sofa/issues/388:2366,Modifiability,plugin,plugin,2366,"s should be removed. . The current WIP is in the following branch:; https://github.com/sofa-framework/sofa/compare/master...SofaDefrost:splitSofaVolumetricDataSquashed. The result is to have:; ```; plugins/SofaDistanceGrid/; - components/collision/BarycentricPenalty, DistanceGridCollision, FFDDistanceGrid, RigidDistanceGird; - components/forcefield/DistanceGridForceFIeld. plugins/SofaImplicitField/ ; - components/geometry/ScalarField (base class); - components/geometry/DiscreteGridField (inherit from ScalarField); - components/geometry/SphericalField (inherit from ScalarField); - components/geometry/otherToComeFromDefrost; - components/mapping/ImplictSurfaceMapping; - deprecated/ImplicitSurfaceContainer (override) components/geometry/DiscreteGridField ; - deprecated/InterpolatedImplicitSurface (override) components/geometry/DiscreteGridField; - deprecated/SphereSurface (override) component/geometry/SphericalField; ```. ...of course we need to add test to all these classes & refactor the MHD loading parts....etc... . Please have a quick look at it and provide feedback on the general way to manage this kind of changes (eg do we really need to keep the SofaVolumetricData transitional plugin or do we allow a more breaking approach and directly remove the SofaVolumetricData with a ChangeLog entry ?). I would be very happy to have opinion & help to be sure to take the right direction resulting PR that match everyone's needs...@jeremieAllard, @fjourdes, @hugtalbot , @guparan , @thomas-lemaire , @matthieu-nesme, @maxime-tournier, @bruno-marques, @bcarrez, @EulalieCoevoet . DM. EDIT: If you are curious about the feature we are adding... it is about having a tetrahedralMesh with CGAL straight out of an implicit function provided in python (and cython if you care about performances)...more on that later. . EDIT2: I changed the url of the branch; ______________________________________________________. Suggested labels: <!--- see https://github.com/sofa-framework/sofa/labels -->",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/388
https://github.com/sofa-framework/sofa/issues/388:2172,Performance,load,loading,2172,"ransitional period this should be removed. . The current WIP is in the following branch:; https://github.com/sofa-framework/sofa/compare/master...SofaDefrost:splitSofaVolumetricDataSquashed. The result is to have:; ```; plugins/SofaDistanceGrid/; - components/collision/BarycentricPenalty, DistanceGridCollision, FFDDistanceGrid, RigidDistanceGird; - components/forcefield/DistanceGridForceFIeld. plugins/SofaImplicitField/ ; - components/geometry/ScalarField (base class); - components/geometry/DiscreteGridField (inherit from ScalarField); - components/geometry/SphericalField (inherit from ScalarField); - components/geometry/otherToComeFromDefrost; - components/mapping/ImplictSurfaceMapping; - deprecated/ImplicitSurfaceContainer (override) components/geometry/DiscreteGridField ; - deprecated/InterpolatedImplicitSurface (override) components/geometry/DiscreteGridField; - deprecated/SphereSurface (override) component/geometry/SphericalField; ```. ...of course we need to add test to all these classes & refactor the MHD loading parts....etc... . Please have a quick look at it and provide feedback on the general way to manage this kind of changes (eg do we really need to keep the SofaVolumetricData transitional plugin or do we allow a more breaking approach and directly remove the SofaVolumetricData with a ChangeLog entry ?). I would be very happy to have opinion & help to be sure to take the right direction resulting PR that match everyone's needs...@jeremieAllard, @fjourdes, @hugtalbot , @guparan , @thomas-lemaire , @matthieu-nesme, @maxime-tournier, @bruno-marques, @bcarrez, @EulalieCoevoet . DM. EDIT: If you are curious about the feature we are adding... it is about having a tetrahedralMesh with CGAL straight out of an implicit function provided in python (and cython if you care about performances)...more on that later. . EDIT2: I changed the url of the branch; ______________________________________________________. Suggested labels: <!--- see https://github.com/sofa-fra",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/388
https://github.com/sofa-framework/sofa/issues/388:2955,Performance,perform,performances,2955,"s should be removed. . The current WIP is in the following branch:; https://github.com/sofa-framework/sofa/compare/master...SofaDefrost:splitSofaVolumetricDataSquashed. The result is to have:; ```; plugins/SofaDistanceGrid/; - components/collision/BarycentricPenalty, DistanceGridCollision, FFDDistanceGrid, RigidDistanceGird; - components/forcefield/DistanceGridForceFIeld. plugins/SofaImplicitField/ ; - components/geometry/ScalarField (base class); - components/geometry/DiscreteGridField (inherit from ScalarField); - components/geometry/SphericalField (inherit from ScalarField); - components/geometry/otherToComeFromDefrost; - components/mapping/ImplictSurfaceMapping; - deprecated/ImplicitSurfaceContainer (override) components/geometry/DiscreteGridField ; - deprecated/InterpolatedImplicitSurface (override) components/geometry/DiscreteGridField; - deprecated/SphereSurface (override) component/geometry/SphericalField; ```. ...of course we need to add test to all these classes & refactor the MHD loading parts....etc... . Please have a quick look at it and provide feedback on the general way to manage this kind of changes (eg do we really need to keep the SofaVolumetricData transitional plugin or do we allow a more breaking approach and directly remove the SofaVolumetricData with a ChangeLog entry ?). I would be very happy to have opinion & help to be sure to take the right direction resulting PR that match everyone's needs...@jeremieAllard, @fjourdes, @hugtalbot , @guparan , @thomas-lemaire , @matthieu-nesme, @maxime-tournier, @bruno-marques, @bcarrez, @EulalieCoevoet . DM. EDIT: If you are curious about the feature we are adding... it is about having a tetrahedralMesh with CGAL straight out of an implicit function provided in python (and cython if you care about performances)...more on that later. . EDIT2: I changed the url of the branch; ______________________________________________________. Suggested labels: <!--- see https://github.com/sofa-framework/sofa/labels -->",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/388
https://github.com/sofa-framework/sofa/issues/388:2127,Testability,test,test,2127,"ransitional period this should be removed. . The current WIP is in the following branch:; https://github.com/sofa-framework/sofa/compare/master...SofaDefrost:splitSofaVolumetricDataSquashed. The result is to have:; ```; plugins/SofaDistanceGrid/; - components/collision/BarycentricPenalty, DistanceGridCollision, FFDDistanceGrid, RigidDistanceGird; - components/forcefield/DistanceGridForceFIeld. plugins/SofaImplicitField/ ; - components/geometry/ScalarField (base class); - components/geometry/DiscreteGridField (inherit from ScalarField); - components/geometry/SphericalField (inherit from ScalarField); - components/geometry/otherToComeFromDefrost; - components/mapping/ImplictSurfaceMapping; - deprecated/ImplicitSurfaceContainer (override) components/geometry/DiscreteGridField ; - deprecated/InterpolatedImplicitSurface (override) components/geometry/DiscreteGridField; - deprecated/SphereSurface (override) component/geometry/SphericalField; ```. ...of course we need to add test to all these classes & refactor the MHD loading parts....etc... . Please have a quick look at it and provide feedback on the general way to manage this kind of changes (eg do we really need to keep the SofaVolumetricData transitional plugin or do we allow a more breaking approach and directly remove the SofaVolumetricData with a ChangeLog entry ?). I would be very happy to have opinion & help to be sure to take the right direction resulting PR that match everyone's needs...@jeremieAllard, @fjourdes, @hugtalbot , @guparan , @thomas-lemaire , @matthieu-nesme, @maxime-tournier, @bruno-marques, @bcarrez, @EulalieCoevoet . DM. EDIT: If you are curious about the feature we are adding... it is about having a tetrahedralMesh with CGAL straight out of an implicit function provided in python (and cython if you care about performances)...more on that later. . EDIT2: I changed the url of the branch; ______________________________________________________. Suggested labels: <!--- see https://github.com/sofa-fra",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/388
https://github.com/sofa-framework/sofa/issues/388:2241,Usability,feedback,feedback,2241,"s should be removed. . The current WIP is in the following branch:; https://github.com/sofa-framework/sofa/compare/master...SofaDefrost:splitSofaVolumetricDataSquashed. The result is to have:; ```; plugins/SofaDistanceGrid/; - components/collision/BarycentricPenalty, DistanceGridCollision, FFDDistanceGrid, RigidDistanceGird; - components/forcefield/DistanceGridForceFIeld. plugins/SofaImplicitField/ ; - components/geometry/ScalarField (base class); - components/geometry/DiscreteGridField (inherit from ScalarField); - components/geometry/SphericalField (inherit from ScalarField); - components/geometry/otherToComeFromDefrost; - components/mapping/ImplictSurfaceMapping; - deprecated/ImplicitSurfaceContainer (override) components/geometry/DiscreteGridField ; - deprecated/InterpolatedImplicitSurface (override) components/geometry/DiscreteGridField; - deprecated/SphereSurface (override) component/geometry/SphericalField; ```. ...of course we need to add test to all these classes & refactor the MHD loading parts....etc... . Please have a quick look at it and provide feedback on the general way to manage this kind of changes (eg do we really need to keep the SofaVolumetricData transitional plugin or do we allow a more breaking approach and directly remove the SofaVolumetricData with a ChangeLog entry ?). I would be very happy to have opinion & help to be sure to take the right direction resulting PR that match everyone's needs...@jeremieAllard, @fjourdes, @hugtalbot , @guparan , @thomas-lemaire , @matthieu-nesme, @maxime-tournier, @bruno-marques, @bcarrez, @EulalieCoevoet . DM. EDIT: If you are curious about the feature we are adding... it is about having a tetrahedralMesh with CGAL straight out of an implicit function provided in python (and cython if you care about performances)...more on that later. . EDIT2: I changed the url of the branch; ______________________________________________________. Suggested labels: <!--- see https://github.com/sofa-framework/sofa/labels -->",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/388
https://github.com/sofa-framework/sofa/pull/389:876,Availability,failure,failures,876,This PR is here to support Issue #388 . This is the beginning of a work on cleaning and modularizing the; SofaVolumetricData.; The module is splitted in two Plugins.; - SofaDistanceGrid; - SofaImplicitField. A third plugin act as a transitional package SofaVolumetricData guiding; other developpers on the change they have to do in order to have their; code compiling again. CHANGELOG.txt:; - SofaVolumetricData was strongly refactored and splitted in two plugins SofaDistanceGrid and SofaImplicitField. Please report to sofa-dev any broken behavior. A transitional plugin SofaVolumetricData is provided for one year. . ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/389
https://github.com/sofa-framework/sofa/pull/389:926,Availability,failure,failures,926,This PR is here to support Issue #388 . This is the beginning of a work on cleaning and modularizing the; SofaVolumetricData.; The module is splitted in two Plugins.; - SofaDistanceGrid; - SofaImplicitField. A third plugin act as a transitional package SofaVolumetricData guiding; other developpers on the change they have to do in order to have their; code compiling again. CHANGELOG.txt:; - SofaVolumetricData was strongly refactored and splitted in two plugins SofaDistanceGrid and SofaImplicitField. Please report to sofa-dev any broken behavior. A transitional plugin SofaVolumetricData is provided for one year. . ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/389
https://github.com/sofa-framework/sofa/pull/389:719,Integrability,message,message,719,This PR is here to support Issue #388 . This is the beginning of a work on cleaning and modularizing the; SofaVolumetricData.; The module is splitted in two Plugins.; - SofaDistanceGrid; - SofaImplicitField. A third plugin act as a transitional package SofaVolumetricData guiding; other developpers on the change they have to do in order to have their; code compiling again. CHANGELOG.txt:; - SofaVolumetricData was strongly refactored and splitted in two plugins SofaDistanceGrid and SofaImplicitField. Please report to sofa-dev any broken behavior. A transitional plugin SofaVolumetricData is provided for one year. . ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/389
https://github.com/sofa-framework/sofa/pull/389:157,Modifiability,Plugin,Plugins,157,This PR is here to support Issue #388 . This is the beginning of a work on cleaning and modularizing the; SofaVolumetricData.; The module is splitted in two Plugins.; - SofaDistanceGrid; - SofaImplicitField. A third plugin act as a transitional package SofaVolumetricData guiding; other developpers on the change they have to do in order to have their; code compiling again. CHANGELOG.txt:; - SofaVolumetricData was strongly refactored and splitted in two plugins SofaDistanceGrid and SofaImplicitField. Please report to sofa-dev any broken behavior. A transitional plugin SofaVolumetricData is provided for one year. . ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/389
https://github.com/sofa-framework/sofa/pull/389:216,Modifiability,plugin,plugin,216,This PR is here to support Issue #388 . This is the beginning of a work on cleaning and modularizing the; SofaVolumetricData.; The module is splitted in two Plugins.; - SofaDistanceGrid; - SofaImplicitField. A third plugin act as a transitional package SofaVolumetricData guiding; other developpers on the change they have to do in order to have their; code compiling again. CHANGELOG.txt:; - SofaVolumetricData was strongly refactored and splitted in two plugins SofaDistanceGrid and SofaImplicitField. Please report to sofa-dev any broken behavior. A transitional plugin SofaVolumetricData is provided for one year. . ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/389
https://github.com/sofa-framework/sofa/pull/389:425,Modifiability,refactor,refactored,425,This PR is here to support Issue #388 . This is the beginning of a work on cleaning and modularizing the; SofaVolumetricData.; The module is splitted in two Plugins.; - SofaDistanceGrid; - SofaImplicitField. A third plugin act as a transitional package SofaVolumetricData guiding; other developpers on the change they have to do in order to have their; code compiling again. CHANGELOG.txt:; - SofaVolumetricData was strongly refactored and splitted in two plugins SofaDistanceGrid and SofaImplicitField. Please report to sofa-dev any broken behavior. A transitional plugin SofaVolumetricData is provided for one year. . ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/389
https://github.com/sofa-framework/sofa/pull/389:456,Modifiability,plugin,plugins,456,This PR is here to support Issue #388 . This is the beginning of a work on cleaning and modularizing the; SofaVolumetricData.; The module is splitted in two Plugins.; - SofaDistanceGrid; - SofaImplicitField. A third plugin act as a transitional package SofaVolumetricData guiding; other developpers on the change they have to do in order to have their; code compiling again. CHANGELOG.txt:; - SofaVolumetricData was strongly refactored and splitted in two plugins SofaDistanceGrid and SofaImplicitField. Please report to sofa-dev any broken behavior. A transitional plugin SofaVolumetricData is provided for one year. . ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/389
https://github.com/sofa-framework/sofa/pull/389:566,Modifiability,plugin,plugin,566,This PR is here to support Issue #388 . This is the beginning of a work on cleaning and modularizing the; SofaVolumetricData.; The module is splitted in two Plugins.; - SofaDistanceGrid; - SofaImplicitField. A third plugin act as a transitional package SofaVolumetricData guiding; other developpers on the change they have to do in order to have their; code compiling again. CHANGELOG.txt:; - SofaVolumetricData was strongly refactored and splitted in two plugins SofaDistanceGrid and SofaImplicitField. Please report to sofa-dev any broken behavior. A transitional plugin SofaVolumetricData is provided for one year. . ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/389
https://github.com/sofa-framework/sofa/pull/389:871,Testability,test,test,871,This PR is here to support Issue #388 . This is the beginning of a work on cleaning and modularizing the; SofaVolumetricData.; The module is splitted in two Plugins.; - SofaDistanceGrid; - SofaImplicitField. A third plugin act as a transitional package SofaVolumetricData guiding; other developpers on the change they have to do in order to have their; code compiling again. CHANGELOG.txt:; - SofaVolumetricData was strongly refactored and splitted in two plugins SofaDistanceGrid and SofaImplicitField. Please report to sofa-dev any broken behavior. A transitional plugin SofaVolumetricData is provided for one year. . ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/389
https://github.com/sofa-framework/sofa/pull/389:921,Testability,test,test,921,This PR is here to support Issue #388 . This is the beginning of a work on cleaning and modularizing the; SofaVolumetricData.; The module is splitted in two Plugins.; - SofaDistanceGrid; - SofaImplicitField. A third plugin act as a transitional package SofaVolumetricData guiding; other developpers on the change they have to do in order to have their; code compiling again. CHANGELOG.txt:; - SofaVolumetricData was strongly refactored and splitted in two plugins SofaDistanceGrid and SofaImplicitField. Please report to sofa-dev any broken behavior. A transitional plugin SofaVolumetricData is provided for one year. . ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/389
https://github.com/sofa-framework/sofa/pull/389:272,Usability,guid,guiding,272,This PR is here to support Issue #388 . This is the beginning of a work on cleaning and modularizing the; SofaVolumetricData.; The module is splitted in two Plugins.; - SofaDistanceGrid; - SofaImplicitField. A third plugin act as a transitional package SofaVolumetricData guiding; other developpers on the change they have to do in order to have their; code compiling again. CHANGELOG.txt:; - SofaVolumetricData was strongly refactored and splitted in two plugins SofaDistanceGrid and SofaImplicitField. Please report to sofa-dev any broken behavior. A transitional plugin SofaVolumetricData is provided for one year. . ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/389
https://github.com/sofa-framework/sofa/issues/390:53,Modifiability,plugin,plugin,53,"Hi all,. We are on our way to make a PR with our PSL plugin to simplify the writing of scene with SOFA.; If you never heard about it you can ; - read the ""in-progress"" documentation: https://github.com/SofaDefrost/sofa/tree/PSL/applications/plugins/PSL/README.md; - have a look at this video introduction:; https://www.youtube.com/watch?v=_lU6hJIXz1g&feature=youtu.be. If you have idea of extension we have a ""pep"" directory with open-suggestion there:; https://github.com/SofaDefrost/sofa/tree/PSL/applications/plugins/PSL/pep. This is a WIP so feedback or contribution is more than welcome. . ______________________________________________________. Suggested labels: <!--- see https://github.com/sofa-framework/sofa/labels -->",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/390
https://github.com/sofa-framework/sofa/issues/390:241,Modifiability,plugin,plugins,241,"Hi all,. We are on our way to make a PR with our PSL plugin to simplify the writing of scene with SOFA.; If you never heard about it you can ; - read the ""in-progress"" documentation: https://github.com/SofaDefrost/sofa/tree/PSL/applications/plugins/PSL/README.md; - have a look at this video introduction:; https://www.youtube.com/watch?v=_lU6hJIXz1g&feature=youtu.be. If you have idea of extension we have a ""pep"" directory with open-suggestion there:; https://github.com/SofaDefrost/sofa/tree/PSL/applications/plugins/PSL/pep. This is a WIP so feedback or contribution is more than welcome. . ______________________________________________________. Suggested labels: <!--- see https://github.com/sofa-framework/sofa/labels -->",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/390
https://github.com/sofa-framework/sofa/issues/390:512,Modifiability,plugin,plugins,512,"Hi all,. We are on our way to make a PR with our PSL plugin to simplify the writing of scene with SOFA.; If you never heard about it you can ; - read the ""in-progress"" documentation: https://github.com/SofaDefrost/sofa/tree/PSL/applications/plugins/PSL/README.md; - have a look at this video introduction:; https://www.youtube.com/watch?v=_lU6hJIXz1g&feature=youtu.be. If you have idea of extension we have a ""pep"" directory with open-suggestion there:; https://github.com/SofaDefrost/sofa/tree/PSL/applications/plugins/PSL/pep. This is a WIP so feedback or contribution is more than welcome. . ______________________________________________________. Suggested labels: <!--- see https://github.com/sofa-framework/sofa/labels -->",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/390
https://github.com/sofa-framework/sofa/issues/390:63,Usability,simpl,simplify,63,"Hi all,. We are on our way to make a PR with our PSL plugin to simplify the writing of scene with SOFA.; If you never heard about it you can ; - read the ""in-progress"" documentation: https://github.com/SofaDefrost/sofa/tree/PSL/applications/plugins/PSL/README.md; - have a look at this video introduction:; https://www.youtube.com/watch?v=_lU6hJIXz1g&feature=youtu.be. If you have idea of extension we have a ""pep"" directory with open-suggestion there:; https://github.com/SofaDefrost/sofa/tree/PSL/applications/plugins/PSL/pep. This is a WIP so feedback or contribution is more than welcome. . ______________________________________________________. Suggested labels: <!--- see https://github.com/sofa-framework/sofa/labels -->",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/390
https://github.com/sofa-framework/sofa/issues/390:546,Usability,feedback,feedback,546,"Hi all,. We are on our way to make a PR with our PSL plugin to simplify the writing of scene with SOFA.; If you never heard about it you can ; - read the ""in-progress"" documentation: https://github.com/SofaDefrost/sofa/tree/PSL/applications/plugins/PSL/README.md; - have a look at this video introduction:; https://www.youtube.com/watch?v=_lU6hJIXz1g&feature=youtu.be. If you have idea of extension we have a ""pep"" directory with open-suggestion there:; https://github.com/SofaDefrost/sofa/tree/PSL/applications/plugins/PSL/pep. This is a WIP so feedback or contribution is more than welcome. . ______________________________________________________. Suggested labels: <!--- see https://github.com/sofa-framework/sofa/labels -->",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/390
https://github.com/sofa-framework/sofa/pull/391:371,Availability,failure,failures,371,The title says it all. . I'm confused as the windows build used to terminate correctly when the PR was merged :-/. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/391
https://github.com/sofa-framework/sofa/pull/391:421,Availability,failure,failures,421,The title says it all. . I'm confused as the windows build used to terminate correctly when the PR was merged :-/. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/391
https://github.com/sofa-framework/sofa/pull/391:214,Integrability,message,message,214,The title says it all. . I'm confused as the windows build used to terminate correctly when the PR was merged :-/. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/391
https://github.com/sofa-framework/sofa/pull/391:366,Testability,test,test,366,The title says it all. . I'm confused as the windows build used to terminate correctly when the PR was merged :-/. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/391
https://github.com/sofa-framework/sofa/pull/391:416,Testability,test,test,416,The title says it all. . I'm confused as the windows build used to terminate correctly when the PR was merged :-/. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/391
https://github.com/sofa-framework/sofa/pull/392:586,Availability,failure,failures,586,"Hi all,. This PR is implementing what was discussed in in #362 . CHANGELOG:; - refactor the SceneChecker object for more modularity. Adding new checks should be easier. ; - add a SceneCheckDuplicateName that warns user if the scene contains duplicated names. ; - add the corresponding tests. ; - use the new version in runSofa. . ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/392
https://github.com/sofa-framework/sofa/pull/392:636,Availability,failure,failures,636,"Hi all,. This PR is implementing what was discussed in in #362 . CHANGELOG:; - refactor the SceneChecker object for more modularity. Adding new checks should be easier. ; - add a SceneCheckDuplicateName that warns user if the scene contains duplicated names. ; - add the corresponding tests. ; - use the new version in runSofa. . ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/392
https://github.com/sofa-framework/sofa/pull/392:429,Integrability,message,message,429,"Hi all,. This PR is implementing what was discussed in in #362 . CHANGELOG:; - refactor the SceneChecker object for more modularity. Adding new checks should be easier. ; - add a SceneCheckDuplicateName that warns user if the scene contains duplicated names. ; - add the corresponding tests. ; - use the new version in runSofa. . ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/392
https://github.com/sofa-framework/sofa/pull/392:79,Modifiability,refactor,refactor,79,"Hi all,. This PR is implementing what was discussed in in #362 . CHANGELOG:; - refactor the SceneChecker object for more modularity. Adding new checks should be easier. ; - add a SceneCheckDuplicateName that warns user if the scene contains duplicated names. ; - add the corresponding tests. ; - use the new version in runSofa. . ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/392
https://github.com/sofa-framework/sofa/pull/392:285,Testability,test,tests,285,"Hi all,. This PR is implementing what was discussed in in #362 . CHANGELOG:; - refactor the SceneChecker object for more modularity. Adding new checks should be easier. ; - add a SceneCheckDuplicateName that warns user if the scene contains duplicated names. ; - add the corresponding tests. ; - use the new version in runSofa. . ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/392
https://github.com/sofa-framework/sofa/pull/392:581,Testability,test,test,581,"Hi all,. This PR is implementing what was discussed in in #362 . CHANGELOG:; - refactor the SceneChecker object for more modularity. Adding new checks should be easier. ; - add a SceneCheckDuplicateName that warns user if the scene contains duplicated names. ; - add the corresponding tests. ; - use the new version in runSofa. . ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/392
https://github.com/sofa-framework/sofa/pull/392:631,Testability,test,test,631,"Hi all,. This PR is implementing what was discussed in in #362 . CHANGELOG:; - refactor the SceneChecker object for more modularity. Adding new checks should be easier. ; - add a SceneCheckDuplicateName that warns user if the scene contains duplicated names. ; - add the corresponding tests. ; - use the new version in runSofa. . ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/392
https://github.com/sofa-framework/sofa/pull/393:627,Availability,failure,failures,627,"Hi all, . BaseLoader was implemented in .h. ; This is bad so I splitted it into BaseLoader.cpp/h ; Then I removed the un-needed includes; Then I updated all the codebase that were missing specific includes. In case your code does not compile... after this PR then you need to add the include you are missing ; (probably fstream or sofa::helper::system::FileRepository) ; ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/393
https://github.com/sofa-framework/sofa/pull/393:677,Availability,failure,failures,677,"Hi all, . BaseLoader was implemented in .h. ; This is bad so I splitted it into BaseLoader.cpp/h ; Then I removed the un-needed includes; Then I updated all the codebase that were missing specific includes. In case your code does not compile... after this PR then you need to add the include you are missing ; (probably fstream or sofa::helper::system::FileRepository) ; ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/393
https://github.com/sofa-framework/sofa/pull/393:145,Deployability,update,updated,145,"Hi all, . BaseLoader was implemented in .h. ; This is bad so I splitted it into BaseLoader.cpp/h ; Then I removed the un-needed includes; Then I updated all the codebase that were missing specific includes. In case your code does not compile... after this PR then you need to add the include you are missing ; (probably fstream or sofa::helper::system::FileRepository) ; ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/393
https://github.com/sofa-framework/sofa/pull/393:470,Integrability,message,message,470,"Hi all, . BaseLoader was implemented in .h. ; This is bad so I splitted it into BaseLoader.cpp/h ; Then I removed the un-needed includes; Then I updated all the codebase that were missing specific includes. In case your code does not compile... after this PR then you need to add the include you are missing ; (probably fstream or sofa::helper::system::FileRepository) ; ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/393
https://github.com/sofa-framework/sofa/pull/393:622,Testability,test,test,622,"Hi all, . BaseLoader was implemented in .h. ; This is bad so I splitted it into BaseLoader.cpp/h ; Then I removed the un-needed includes; Then I updated all the codebase that were missing specific includes. In case your code does not compile... after this PR then you need to add the include you are missing ; (probably fstream or sofa::helper::system::FileRepository) ; ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/393
https://github.com/sofa-framework/sofa/pull/393:672,Testability,test,test,672,"Hi all, . BaseLoader was implemented in .h. ; This is bad so I splitted it into BaseLoader.cpp/h ; Then I removed the un-needed includes; Then I updated all the codebase that were missing specific includes. In case your code does not compile... after this PR then you need to add the include you are missing ; (probably fstream or sofa::helper::system::FileRepository) ; ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/393
https://github.com/sofa-framework/sofa/pull/394:707,Availability,failure,failures,707,"This is small feature addition. Currently, LinearMovementConstraint only takes trajectories relative to the rest position of the MechanicalState. Sometimes though, the trajectory is specified in world frame coordinates, and especially with Rigid3D (i.e. orientations), conversion is not trivial for the user . This patch introduces a switch ""relativeMovements"" (default true).; When disabled, trajectories can be specified in world frame coordinates. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/394
https://github.com/sofa-framework/sofa/pull/394:757,Availability,failure,failures,757,"This is small feature addition. Currently, LinearMovementConstraint only takes trajectories relative to the rest position of the MechanicalState. Sometimes though, the trajectory is specified in world frame coordinates, and especially with Rigid3D (i.e. orientations), conversion is not trivial for the user . This patch introduces a switch ""relativeMovements"" (default true).; When disabled, trajectories can be specified in world frame coordinates. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/394
https://github.com/sofa-framework/sofa/pull/394:315,Deployability,patch,patch,315,"This is small feature addition. Currently, LinearMovementConstraint only takes trajectories relative to the rest position of the MechanicalState. Sometimes though, the trajectory is specified in world frame coordinates, and especially with Rigid3D (i.e. orientations), conversion is not trivial for the user . This patch introduces a switch ""relativeMovements"" (default true).; When disabled, trajectories can be specified in world frame coordinates. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/394
https://github.com/sofa-framework/sofa/pull/394:550,Integrability,message,message,550,"This is small feature addition. Currently, LinearMovementConstraint only takes trajectories relative to the rest position of the MechanicalState. Sometimes though, the trajectory is specified in world frame coordinates, and especially with Rigid3D (i.e. orientations), conversion is not trivial for the user . This patch introduces a switch ""relativeMovements"" (default true).; When disabled, trajectories can be specified in world frame coordinates. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/394
https://github.com/sofa-framework/sofa/pull/394:702,Testability,test,test,702,"This is small feature addition. Currently, LinearMovementConstraint only takes trajectories relative to the rest position of the MechanicalState. Sometimes though, the trajectory is specified in world frame coordinates, and especially with Rigid3D (i.e. orientations), conversion is not trivial for the user . This patch introduces a switch ""relativeMovements"" (default true).; When disabled, trajectories can be specified in world frame coordinates. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/394
https://github.com/sofa-framework/sofa/pull/394:752,Testability,test,test,752,"This is small feature addition. Currently, LinearMovementConstraint only takes trajectories relative to the rest position of the MechanicalState. Sometimes though, the trajectory is specified in world frame coordinates, and especially with Rigid3D (i.e. orientations), conversion is not trivial for the user . This patch introduces a switch ""relativeMovements"" (default true).; When disabled, trajectories can be specified in world frame coordinates. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/394
https://github.com/sofa-framework/sofa/pull/395:1011,Availability,failure,failures,1011,"Hi,. In order to reduce compile time of sofa plugins, I decided to compile my plugins outside of Sofa (a build folder for each plugin, CMAKE_PREFIX_PATH and CMAKE_INSTALL_PREFIX to tell cmake where to find sofa); Compiling tests then doesn't work since the gtest headers, that are bundled in sofa, are not deployed on sofa's install dir. This PR rectifies that. @sofa-framework/consortium, I also believe that there should be clear guidelines in SOFA to determine what the ""normal"" way of compiling plugins should be.; I believe that outsourced builds should be the way to go, instead of adding plugins through ; `applications/plugins/CMakeLists.txt`; or cmake's; `EXTERNAL_DIRECTORIES`; since it allows people to isolate SOFA a bit more from their work. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/395
https://github.com/sofa-framework/sofa/pull/395:1061,Availability,failure,failures,1061,"Hi,. In order to reduce compile time of sofa plugins, I decided to compile my plugins outside of Sofa (a build folder for each plugin, CMAKE_PREFIX_PATH and CMAKE_INSTALL_PREFIX to tell cmake where to find sofa); Compiling tests then doesn't work since the gtest headers, that are bundled in sofa, are not deployed on sofa's install dir. This PR rectifies that. @sofa-framework/consortium, I also believe that there should be clear guidelines in SOFA to determine what the ""normal"" way of compiling plugins should be.; I believe that outsourced builds should be the way to go, instead of adding plugins through ; `applications/plugins/CMakeLists.txt`; or cmake's; `EXTERNAL_DIRECTORIES`; since it allows people to isolate SOFA a bit more from their work. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/395
https://github.com/sofa-framework/sofa/pull/395:306,Deployability,deploy,deployed,306,"Hi,. In order to reduce compile time of sofa plugins, I decided to compile my plugins outside of Sofa (a build folder for each plugin, CMAKE_PREFIX_PATH and CMAKE_INSTALL_PREFIX to tell cmake where to find sofa); Compiling tests then doesn't work since the gtest headers, that are bundled in sofa, are not deployed on sofa's install dir. This PR rectifies that. @sofa-framework/consortium, I also believe that there should be clear guidelines in SOFA to determine what the ""normal"" way of compiling plugins should be.; I believe that outsourced builds should be the way to go, instead of adding plugins through ; `applications/plugins/CMakeLists.txt`; or cmake's; `EXTERNAL_DIRECTORIES`; since it allows people to isolate SOFA a bit more from their work. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/395
https://github.com/sofa-framework/sofa/pull/395:325,Deployability,install,install,325,"Hi,. In order to reduce compile time of sofa plugins, I decided to compile my plugins outside of Sofa (a build folder for each plugin, CMAKE_PREFIX_PATH and CMAKE_INSTALL_PREFIX to tell cmake where to find sofa); Compiling tests then doesn't work since the gtest headers, that are bundled in sofa, are not deployed on sofa's install dir. This PR rectifies that. @sofa-framework/consortium, I also believe that there should be clear guidelines in SOFA to determine what the ""normal"" way of compiling plugins should be.; I believe that outsourced builds should be the way to go, instead of adding plugins through ; `applications/plugins/CMakeLists.txt`; or cmake's; `EXTERNAL_DIRECTORIES`; since it allows people to isolate SOFA a bit more from their work. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/395
https://github.com/sofa-framework/sofa/pull/395:17,Energy Efficiency,reduce,reduce,17,"Hi,. In order to reduce compile time of sofa plugins, I decided to compile my plugins outside of Sofa (a build folder for each plugin, CMAKE_PREFIX_PATH and CMAKE_INSTALL_PREFIX to tell cmake where to find sofa); Compiling tests then doesn't work since the gtest headers, that are bundled in sofa, are not deployed on sofa's install dir. This PR rectifies that. @sofa-framework/consortium, I also believe that there should be clear guidelines in SOFA to determine what the ""normal"" way of compiling plugins should be.; I believe that outsourced builds should be the way to go, instead of adding plugins through ; `applications/plugins/CMakeLists.txt`; or cmake's; `EXTERNAL_DIRECTORIES`; since it allows people to isolate SOFA a bit more from their work. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/395
https://github.com/sofa-framework/sofa/pull/395:854,Integrability,message,message,854,"Hi,. In order to reduce compile time of sofa plugins, I decided to compile my plugins outside of Sofa (a build folder for each plugin, CMAKE_PREFIX_PATH and CMAKE_INSTALL_PREFIX to tell cmake where to find sofa); Compiling tests then doesn't work since the gtest headers, that are bundled in sofa, are not deployed on sofa's install dir. This PR rectifies that. @sofa-framework/consortium, I also believe that there should be clear guidelines in SOFA to determine what the ""normal"" way of compiling plugins should be.; I believe that outsourced builds should be the way to go, instead of adding plugins through ; `applications/plugins/CMakeLists.txt`; or cmake's; `EXTERNAL_DIRECTORIES`; since it allows people to isolate SOFA a bit more from their work. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/395
https://github.com/sofa-framework/sofa/pull/395:45,Modifiability,plugin,plugins,45,"Hi,. In order to reduce compile time of sofa plugins, I decided to compile my plugins outside of Sofa (a build folder for each plugin, CMAKE_PREFIX_PATH and CMAKE_INSTALL_PREFIX to tell cmake where to find sofa); Compiling tests then doesn't work since the gtest headers, that are bundled in sofa, are not deployed on sofa's install dir. This PR rectifies that. @sofa-framework/consortium, I also believe that there should be clear guidelines in SOFA to determine what the ""normal"" way of compiling plugins should be.; I believe that outsourced builds should be the way to go, instead of adding plugins through ; `applications/plugins/CMakeLists.txt`; or cmake's; `EXTERNAL_DIRECTORIES`; since it allows people to isolate SOFA a bit more from their work. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/395
https://github.com/sofa-framework/sofa/pull/395:78,Modifiability,plugin,plugins,78,"Hi,. In order to reduce compile time of sofa plugins, I decided to compile my plugins outside of Sofa (a build folder for each plugin, CMAKE_PREFIX_PATH and CMAKE_INSTALL_PREFIX to tell cmake where to find sofa); Compiling tests then doesn't work since the gtest headers, that are bundled in sofa, are not deployed on sofa's install dir. This PR rectifies that. @sofa-framework/consortium, I also believe that there should be clear guidelines in SOFA to determine what the ""normal"" way of compiling plugins should be.; I believe that outsourced builds should be the way to go, instead of adding plugins through ; `applications/plugins/CMakeLists.txt`; or cmake's; `EXTERNAL_DIRECTORIES`; since it allows people to isolate SOFA a bit more from their work. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/395
https://github.com/sofa-framework/sofa/pull/395:127,Modifiability,plugin,plugin,127,"Hi,. In order to reduce compile time of sofa plugins, I decided to compile my plugins outside of Sofa (a build folder for each plugin, CMAKE_PREFIX_PATH and CMAKE_INSTALL_PREFIX to tell cmake where to find sofa); Compiling tests then doesn't work since the gtest headers, that are bundled in sofa, are not deployed on sofa's install dir. This PR rectifies that. @sofa-framework/consortium, I also believe that there should be clear guidelines in SOFA to determine what the ""normal"" way of compiling plugins should be.; I believe that outsourced builds should be the way to go, instead of adding plugins through ; `applications/plugins/CMakeLists.txt`; or cmake's; `EXTERNAL_DIRECTORIES`; since it allows people to isolate SOFA a bit more from their work. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/395
https://github.com/sofa-framework/sofa/pull/395:499,Modifiability,plugin,plugins,499,"Hi,. In order to reduce compile time of sofa plugins, I decided to compile my plugins outside of Sofa (a build folder for each plugin, CMAKE_PREFIX_PATH and CMAKE_INSTALL_PREFIX to tell cmake where to find sofa); Compiling tests then doesn't work since the gtest headers, that are bundled in sofa, are not deployed on sofa's install dir. This PR rectifies that. @sofa-framework/consortium, I also believe that there should be clear guidelines in SOFA to determine what the ""normal"" way of compiling plugins should be.; I believe that outsourced builds should be the way to go, instead of adding plugins through ; `applications/plugins/CMakeLists.txt`; or cmake's; `EXTERNAL_DIRECTORIES`; since it allows people to isolate SOFA a bit more from their work. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/395
https://github.com/sofa-framework/sofa/pull/395:595,Modifiability,plugin,plugins,595,"Hi,. In order to reduce compile time of sofa plugins, I decided to compile my plugins outside of Sofa (a build folder for each plugin, CMAKE_PREFIX_PATH and CMAKE_INSTALL_PREFIX to tell cmake where to find sofa); Compiling tests then doesn't work since the gtest headers, that are bundled in sofa, are not deployed on sofa's install dir. This PR rectifies that. @sofa-framework/consortium, I also believe that there should be clear guidelines in SOFA to determine what the ""normal"" way of compiling plugins should be.; I believe that outsourced builds should be the way to go, instead of adding plugins through ; `applications/plugins/CMakeLists.txt`; or cmake's; `EXTERNAL_DIRECTORIES`; since it allows people to isolate SOFA a bit more from their work. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/395
https://github.com/sofa-framework/sofa/pull/395:627,Modifiability,plugin,plugins,627,"Hi,. In order to reduce compile time of sofa plugins, I decided to compile my plugins outside of Sofa (a build folder for each plugin, CMAKE_PREFIX_PATH and CMAKE_INSTALL_PREFIX to tell cmake where to find sofa); Compiling tests then doesn't work since the gtest headers, that are bundled in sofa, are not deployed on sofa's install dir. This PR rectifies that. @sofa-framework/consortium, I also believe that there should be clear guidelines in SOFA to determine what the ""normal"" way of compiling plugins should be.; I believe that outsourced builds should be the way to go, instead of adding plugins through ; `applications/plugins/CMakeLists.txt`; or cmake's; `EXTERNAL_DIRECTORIES`; since it allows people to isolate SOFA a bit more from their work. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/395
https://github.com/sofa-framework/sofa/pull/395:223,Testability,test,tests,223,"Hi,. In order to reduce compile time of sofa plugins, I decided to compile my plugins outside of Sofa (a build folder for each plugin, CMAKE_PREFIX_PATH and CMAKE_INSTALL_PREFIX to tell cmake where to find sofa); Compiling tests then doesn't work since the gtest headers, that are bundled in sofa, are not deployed on sofa's install dir. This PR rectifies that. @sofa-framework/consortium, I also believe that there should be clear guidelines in SOFA to determine what the ""normal"" way of compiling plugins should be.; I believe that outsourced builds should be the way to go, instead of adding plugins through ; `applications/plugins/CMakeLists.txt`; or cmake's; `EXTERNAL_DIRECTORIES`; since it allows people to isolate SOFA a bit more from their work. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/395
https://github.com/sofa-framework/sofa/pull/395:1006,Testability,test,test,1006,"Hi,. In order to reduce compile time of sofa plugins, I decided to compile my plugins outside of Sofa (a build folder for each plugin, CMAKE_PREFIX_PATH and CMAKE_INSTALL_PREFIX to tell cmake where to find sofa); Compiling tests then doesn't work since the gtest headers, that are bundled in sofa, are not deployed on sofa's install dir. This PR rectifies that. @sofa-framework/consortium, I also believe that there should be clear guidelines in SOFA to determine what the ""normal"" way of compiling plugins should be.; I believe that outsourced builds should be the way to go, instead of adding plugins through ; `applications/plugins/CMakeLists.txt`; or cmake's; `EXTERNAL_DIRECTORIES`; since it allows people to isolate SOFA a bit more from their work. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/395
https://github.com/sofa-framework/sofa/pull/395:1056,Testability,test,test,1056,"Hi,. In order to reduce compile time of sofa plugins, I decided to compile my plugins outside of Sofa (a build folder for each plugin, CMAKE_PREFIX_PATH and CMAKE_INSTALL_PREFIX to tell cmake where to find sofa); Compiling tests then doesn't work since the gtest headers, that are bundled in sofa, are not deployed on sofa's install dir. This PR rectifies that. @sofa-framework/consortium, I also believe that there should be clear guidelines in SOFA to determine what the ""normal"" way of compiling plugins should be.; I believe that outsourced builds should be the way to go, instead of adding plugins through ; `applications/plugins/CMakeLists.txt`; or cmake's; `EXTERNAL_DIRECTORIES`; since it allows people to isolate SOFA a bit more from their work. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/395
https://github.com/sofa-framework/sofa/pull/395:426,Usability,clear,clear,426,"Hi,. In order to reduce compile time of sofa plugins, I decided to compile my plugins outside of Sofa (a build folder for each plugin, CMAKE_PREFIX_PATH and CMAKE_INSTALL_PREFIX to tell cmake where to find sofa); Compiling tests then doesn't work since the gtest headers, that are bundled in sofa, are not deployed on sofa's install dir. This PR rectifies that. @sofa-framework/consortium, I also believe that there should be clear guidelines in SOFA to determine what the ""normal"" way of compiling plugins should be.; I believe that outsourced builds should be the way to go, instead of adding plugins through ; `applications/plugins/CMakeLists.txt`; or cmake's; `EXTERNAL_DIRECTORIES`; since it allows people to isolate SOFA a bit more from their work. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/395
https://github.com/sofa-framework/sofa/pull/395:432,Usability,guid,guidelines,432,"Hi,. In order to reduce compile time of sofa plugins, I decided to compile my plugins outside of Sofa (a build folder for each plugin, CMAKE_PREFIX_PATH and CMAKE_INSTALL_PREFIX to tell cmake where to find sofa); Compiling tests then doesn't work since the gtest headers, that are bundled in sofa, are not deployed on sofa's install dir. This PR rectifies that. @sofa-framework/consortium, I also believe that there should be clear guidelines in SOFA to determine what the ""normal"" way of compiling plugins should be.; I believe that outsourced builds should be the way to go, instead of adding plugins through ; `applications/plugins/CMakeLists.txt`; or cmake's; `EXTERNAL_DIRECTORIES`; since it allows people to isolate SOFA a bit more from their work. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/395
https://github.com/sofa-framework/sofa/pull/396:557,Availability,failure,failures,557,There is not a lot of contribution to make plugin from the old sofa modules. ; Here is one. . The general idea is that it should decrease compilation time and memory footprint of sofa. . This is my contribution to the issue stated by @hugtalbot in ; https://github.com/sofa-framework/sofa/issues/346. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/396
https://github.com/sofa-framework/sofa/pull/396:607,Availability,failure,failures,607,There is not a lot of contribution to make plugin from the old sofa modules. ; Here is one. . The general idea is that it should decrease compilation time and memory footprint of sofa. . This is my contribution to the issue stated by @hugtalbot in ; https://github.com/sofa-framework/sofa/issues/346. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/396
https://github.com/sofa-framework/sofa/pull/396:400,Integrability,message,message,400,There is not a lot of contribution to make plugin from the old sofa modules. ; Here is one. . The general idea is that it should decrease compilation time and memory footprint of sofa. . This is my contribution to the issue stated by @hugtalbot in ; https://github.com/sofa-framework/sofa/issues/346. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/396
https://github.com/sofa-framework/sofa/pull/396:43,Modifiability,plugin,plugin,43,There is not a lot of contribution to make plugin from the old sofa modules. ; Here is one. . The general idea is that it should decrease compilation time and memory footprint of sofa. . This is my contribution to the issue stated by @hugtalbot in ; https://github.com/sofa-framework/sofa/issues/346. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/396
https://github.com/sofa-framework/sofa/pull/396:552,Testability,test,test,552,There is not a lot of contribution to make plugin from the old sofa modules. ; Here is one. . The general idea is that it should decrease compilation time and memory footprint of sofa. . This is my contribution to the issue stated by @hugtalbot in ; https://github.com/sofa-framework/sofa/issues/346. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/396
https://github.com/sofa-framework/sofa/pull/396:602,Testability,test,test,602,There is not a lot of contribution to make plugin from the old sofa modules. ; Here is one. . The general idea is that it should decrease compilation time and memory footprint of sofa. . This is my contribution to the issue stated by @hugtalbot in ; https://github.com/sofa-framework/sofa/issues/346. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/396
https://github.com/sofa-framework/sofa/pull/397:281,Availability,failure,failures,281,e.g. Eigen among others. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/397
https://github.com/sofa-framework/sofa/pull/397:331,Availability,failure,failures,331,e.g. Eigen among others. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/397
https://github.com/sofa-framework/sofa/pull/397:124,Integrability,message,message,124,e.g. Eigen among others. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/397
https://github.com/sofa-framework/sofa/pull/397:276,Testability,test,test,276,e.g. Eigen among others. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/397
https://github.com/sofa-framework/sofa/pull/397:326,Testability,test,test,326,e.g. Eigen among others. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/397
https://github.com/sofa-framework/sofa/pull/398:344,Availability,failure,failures,344,Fixed Vertex2Frame (deleted a _return_ which prevented the component to work properly). ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/398
https://github.com/sofa-framework/sofa/pull/398:394,Availability,failure,failures,394,Fixed Vertex2Frame (deleted a _return_ which prevented the component to work properly). ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/398
https://github.com/sofa-framework/sofa/pull/398:187,Integrability,message,message,187,Fixed Vertex2Frame (deleted a _return_ which prevented the component to work properly). ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/398
https://github.com/sofa-framework/sofa/pull/398:339,Testability,test,test,339,Fixed Vertex2Frame (deleted a _return_ which prevented the component to work properly). ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/398
https://github.com/sofa-framework/sofa/pull/398:389,Testability,test,test,389,Fixed Vertex2Frame (deleted a _return_ which prevented the component to work properly). ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/398
https://github.com/sofa-framework/sofa/pull/399:256,Availability,failure,failures,256,______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/399
https://github.com/sofa-framework/sofa/pull/399:306,Availability,failure,failures,306,______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/399
https://github.com/sofa-framework/sofa/pull/399:99,Integrability,message,message,99,______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/399
https://github.com/sofa-framework/sofa/pull/399:251,Testability,test,test,251,______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/399
https://github.com/sofa-framework/sofa/pull/399:301,Testability,test,test,301,______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/399
https://github.com/sofa-framework/sofa/issues/400:45,Testability,test,tests,45,Hello. ; Does anyone knows how to run python tests in SOFA framework?. @hugtalbot . Thank you for information. ______________________________________________________. Suggested labels: <!--- see https://github.com/sofa-framework/sofa/labels -->,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/400
https://github.com/sofa-framework/sofa/issues/401:288,Availability,error,error,288,"Inside the file defaulttype/CMakeLists.txt, the line; `target_include_directories(${PROJECT_NAME} PUBLIC ""$<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}>/../.."")`; should be; `target_include_directories(${PROJECT_NAME} PUBLIC ""$<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/../..>"")`. This error makes IDE based on cmake bleed the symbol indexing since a relative path ""../.."" is wrongly added in the sofa's CMake installed filed:. ```; $ grep -nr ""INTERFACE.*\.\.\/\.\."" build/install/lib/cmake; ./SofaFramework/SofaFrameworkTargets.cmake:66: INTERFACE_INCLUDE_DIRECTORIES ""${_IMPORT_PREFIX}/include;/../..""; ```. If, for exemple, you create an external projet that depends on Sofa, and that this external project is placed inside ~/source/project, than any IDE based on cmake for symbol indexing such as CLion will try to parse ~/source/project/../.. which is the home directory. This will end up take a lot of resources just for symbol indexing of a small project.; ______________________________________________________. Suggested labels: <!--- see https://github.com/sofa-framework/sofa/labels -->",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/401
https://github.com/sofa-framework/sofa/issues/401:412,Deployability,install,installed,412,"Inside the file defaulttype/CMakeLists.txt, the line; `target_include_directories(${PROJECT_NAME} PUBLIC ""$<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}>/../.."")`; should be; `target_include_directories(${PROJECT_NAME} PUBLIC ""$<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/../..>"")`. This error makes IDE based on cmake bleed the symbol indexing since a relative path ""../.."" is wrongly added in the sofa's CMake installed filed:. ```; $ grep -nr ""INTERFACE.*\.\.\/\.\."" build/install/lib/cmake; ./SofaFramework/SofaFrameworkTargets.cmake:66: INTERFACE_INCLUDE_DIRECTORIES ""${_IMPORT_PREFIX}/include;/../..""; ```. If, for exemple, you create an external projet that depends on Sofa, and that this external project is placed inside ~/source/project, than any IDE based on cmake for symbol indexing such as CLion will try to parse ~/source/project/../.. which is the home directory. This will end up take a lot of resources just for symbol indexing of a small project.; ______________________________________________________. Suggested labels: <!--- see https://github.com/sofa-framework/sofa/labels -->",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/401
https://github.com/sofa-framework/sofa/issues/401:476,Deployability,install,install,476,"Inside the file defaulttype/CMakeLists.txt, the line; `target_include_directories(${PROJECT_NAME} PUBLIC ""$<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}>/../.."")`; should be; `target_include_directories(${PROJECT_NAME} PUBLIC ""$<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/../..>"")`. This error makes IDE based on cmake bleed the symbol indexing since a relative path ""../.."" is wrongly added in the sofa's CMake installed filed:. ```; $ grep -nr ""INTERFACE.*\.\.\/\.\."" build/install/lib/cmake; ./SofaFramework/SofaFrameworkTargets.cmake:66: INTERFACE_INCLUDE_DIRECTORIES ""${_IMPORT_PREFIX}/include;/../..""; ```. If, for exemple, you create an external projet that depends on Sofa, and that this external project is placed inside ~/source/project, than any IDE based on cmake for symbol indexing such as CLion will try to parse ~/source/project/../.. which is the home directory. This will end up take a lot of resources just for symbol indexing of a small project.; ______________________________________________________. Suggested labels: <!--- see https://github.com/sofa-framework/sofa/labels -->",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/401
https://github.com/sofa-framework/sofa/issues/401:447,Integrability,INTERFACE,INTERFACE,447,"Inside the file defaulttype/CMakeLists.txt, the line; `target_include_directories(${PROJECT_NAME} PUBLIC ""$<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}>/../.."")`; should be; `target_include_directories(${PROJECT_NAME} PUBLIC ""$<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/../..>"")`. This error makes IDE based on cmake bleed the symbol indexing since a relative path ""../.."" is wrongly added in the sofa's CMake installed filed:. ```; $ grep -nr ""INTERFACE.*\.\.\/\.\."" build/install/lib/cmake; ./SofaFramework/SofaFrameworkTargets.cmake:66: INTERFACE_INCLUDE_DIRECTORIES ""${_IMPORT_PREFIX}/include;/../..""; ```. If, for exemple, you create an external projet that depends on Sofa, and that this external project is placed inside ~/source/project, than any IDE based on cmake for symbol indexing such as CLion will try to parse ~/source/project/../.. which is the home directory. This will end up take a lot of resources just for symbol indexing of a small project.; ______________________________________________________. Suggested labels: <!--- see https://github.com/sofa-framework/sofa/labels -->",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/401
https://github.com/sofa-framework/sofa/issues/401:665,Integrability,depend,depends,665,"Inside the file defaulttype/CMakeLists.txt, the line; `target_include_directories(${PROJECT_NAME} PUBLIC ""$<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}>/../.."")`; should be; `target_include_directories(${PROJECT_NAME} PUBLIC ""$<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/../..>"")`. This error makes IDE based on cmake bleed the symbol indexing since a relative path ""../.."" is wrongly added in the sofa's CMake installed filed:. ```; $ grep -nr ""INTERFACE.*\.\.\/\.\."" build/install/lib/cmake; ./SofaFramework/SofaFrameworkTargets.cmake:66: INTERFACE_INCLUDE_DIRECTORIES ""${_IMPORT_PREFIX}/include;/../..""; ```. If, for exemple, you create an external projet that depends on Sofa, and that this external project is placed inside ~/source/project, than any IDE based on cmake for symbol indexing such as CLion will try to parse ~/source/project/../.. which is the home directory. This will end up take a lot of resources just for symbol indexing of a small project.; ______________________________________________________. Suggested labels: <!--- see https://github.com/sofa-framework/sofa/labels -->",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/401
https://github.com/sofa-framework/sofa/pull/402:429,Availability,failure,failures,429,A small utility object to add a repo at runtime.; Check the example for getting an idea on how to use. I guess it would be mainly useful for people still using XML scene... ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/402
https://github.com/sofa-framework/sofa/pull/402:479,Availability,failure,failures,479,A small utility object to add a repo at runtime.; Check the example for getting an idea on how to use. I guess it would be mainly useful for people still using XML scene... ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/402
https://github.com/sofa-framework/sofa/pull/402:272,Integrability,message,message,272,A small utility object to add a repo at runtime.; Check the example for getting an idea on how to use. I guess it would be mainly useful for people still using XML scene... ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/402
https://github.com/sofa-framework/sofa/pull/402:424,Testability,test,test,424,A small utility object to add a repo at runtime.; Check the example for getting an idea on how to use. I guess it would be mainly useful for people still using XML scene... ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/402
https://github.com/sofa-framework/sofa/pull/402:474,Testability,test,test,474,A small utility object to add a repo at runtime.; Check the example for getting an idea on how to use. I guess it would be mainly useful for people still using XML scene... ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/402
https://github.com/sofa-framework/sofa/pull/403:285,Availability,failure,failures,285,This PR should fix #401 bug. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/403
https://github.com/sofa-framework/sofa/pull/403:335,Availability,failure,failures,335,This PR should fix #401 bug. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/403
https://github.com/sofa-framework/sofa/pull/403:128,Integrability,message,message,128,This PR should fix #401 bug. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/403
https://github.com/sofa-framework/sofa/pull/403:280,Testability,test,test,280,This PR should fix #401 bug. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/403
https://github.com/sofa-framework/sofa/pull/403:330,Testability,test,test,330,This PR should fix #401 bug. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/403
https://github.com/sofa-framework/sofa/pull/404:387,Availability,failure,failures,387,This pull request contains few cleaning cout/print/comments. @ChristianDuriez also added the dot poduct for SofaPython Quaternion; ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/404
https://github.com/sofa-framework/sofa/pull/404:437,Availability,failure,failures,437,This pull request contains few cleaning cout/print/comments. @ChristianDuriez also added the dot poduct for SofaPython Quaternion; ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/404
https://github.com/sofa-framework/sofa/pull/404:230,Integrability,message,message,230,This pull request contains few cleaning cout/print/comments. @ChristianDuriez also added the dot poduct for SofaPython Quaternion; ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/404
https://github.com/sofa-framework/sofa/pull/404:382,Testability,test,test,382,This pull request contains few cleaning cout/print/comments. @ChristianDuriez also added the dot poduct for SofaPython Quaternion; ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/404
https://github.com/sofa-framework/sofa/pull/404:432,Testability,test,test,432,This pull request contains few cleaning cout/print/comments. @ChristianDuriez also added the dot poduct for SofaPython Quaternion; ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/404
https://github.com/sofa-framework/sofa/pull/405:307,Availability,failure,failures,307,Everything is is in the title. The test was wrong. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/405
https://github.com/sofa-framework/sofa/pull/405:357,Availability,failure,failures,357,Everything is is in the title. The test was wrong. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/405
https://github.com/sofa-framework/sofa/pull/405:150,Integrability,message,message,150,Everything is is in the title. The test was wrong. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/405
https://github.com/sofa-framework/sofa/pull/405:35,Testability,test,test,35,Everything is is in the title. The test was wrong. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/405
https://github.com/sofa-framework/sofa/pull/405:302,Testability,test,test,302,Everything is is in the title. The test was wrong. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/405
https://github.com/sofa-framework/sofa/pull/405:352,Testability,test,test,352,Everything is is in the title. The test was wrong. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/405
https://github.com/sofa-framework/sofa/pull/406:2411,Availability,failure,failures,2411," <MechanicalObject name=""rp"" rest_position=""@p.position"" />; <MechanicalObject name=""rep"" reset_position=""@p.position"" />; <MechanicalObject name=""rev"" reset_velocity=""@p.position"" />; <MechanicalObject name=""dx"" derivX=""@p.position"" />; </Node>; ```; Before PR:; ```; [WARNING] [MechanicalObject(p)] Writing to State vector position(V_COORD) with incorrect size : 4 != 1; [WARNING] [MechanicalObject(v)] Writing to State vector velocity(V_DERIV) with incorrect size : 4 != 1; [WARNING] [MechanicalObject(f)] Writing to State vector position(V_COORD) with incorrect size : 4 != 1; [WARNING] [MechanicalObject(rp)] Accessing State vector restPosition(V_COORD) with incorrect size : 4 != 1; [WARNING] [MechanicalObject(rp)] Accessing State vector restPosition(V_COORD) with incorrect size : 4 != 1; [WARNING] [MechanicalObject(rep)] Writing to State vector resetPosition(V_COORD) with incorrect size : 4 != 1; [WARNING] [MechanicalObject(fp)] Writing to State vector freePosition(V_COORD) with incorrect size : 4 != 1; [WARNING] [MechanicalObject(fv)] Writing to State vector freeVelocity(V_DERIV) with incorrect size : 4 != 1; [WARNING] [MechanicalObject(rep)] Accessing State vector resetPosition(V_COORD) with incorrect size : 4 != 1; [WARNING] [MechanicalObject(rev)] Accessing State vector resetVelocity(V_DERIV) with incorrect size : 4 != 1; ```; After PR:; ```; [WARNING] [MechanicalObject(f)] One or more of the state vectors passed as argument don't match the size of the others : position(size 4) force(size 3) ; ```. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/406
https://github.com/sofa-framework/sofa/pull/406:2461,Availability,failure,failures,2461," <MechanicalObject name=""rp"" rest_position=""@p.position"" />; <MechanicalObject name=""rep"" reset_position=""@p.position"" />; <MechanicalObject name=""rev"" reset_velocity=""@p.position"" />; <MechanicalObject name=""dx"" derivX=""@p.position"" />; </Node>; ```; Before PR:; ```; [WARNING] [MechanicalObject(p)] Writing to State vector position(V_COORD) with incorrect size : 4 != 1; [WARNING] [MechanicalObject(v)] Writing to State vector velocity(V_DERIV) with incorrect size : 4 != 1; [WARNING] [MechanicalObject(f)] Writing to State vector position(V_COORD) with incorrect size : 4 != 1; [WARNING] [MechanicalObject(rp)] Accessing State vector restPosition(V_COORD) with incorrect size : 4 != 1; [WARNING] [MechanicalObject(rp)] Accessing State vector restPosition(V_COORD) with incorrect size : 4 != 1; [WARNING] [MechanicalObject(rep)] Writing to State vector resetPosition(V_COORD) with incorrect size : 4 != 1; [WARNING] [MechanicalObject(fp)] Writing to State vector freePosition(V_COORD) with incorrect size : 4 != 1; [WARNING] [MechanicalObject(fv)] Writing to State vector freeVelocity(V_DERIV) with incorrect size : 4 != 1; [WARNING] [MechanicalObject(rep)] Accessing State vector resetPosition(V_COORD) with incorrect size : 4 != 1; [WARNING] [MechanicalObject(rev)] Accessing State vector resetVelocity(V_DERIV) with incorrect size : 4 != 1; ```; After PR:; ```; [WARNING] [MechanicalObject(f)] One or more of the state vectors passed as argument don't match the size of the others : position(size 4) force(size 3) ; ```. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/406
https://github.com/sofa-framework/sofa/pull/406:2254,Integrability,message,message,2254," <MechanicalObject name=""rp"" rest_position=""@p.position"" />; <MechanicalObject name=""rep"" reset_position=""@p.position"" />; <MechanicalObject name=""rev"" reset_velocity=""@p.position"" />; <MechanicalObject name=""dx"" derivX=""@p.position"" />; </Node>; ```; Before PR:; ```; [WARNING] [MechanicalObject(p)] Writing to State vector position(V_COORD) with incorrect size : 4 != 1; [WARNING] [MechanicalObject(v)] Writing to State vector velocity(V_DERIV) with incorrect size : 4 != 1; [WARNING] [MechanicalObject(f)] Writing to State vector position(V_COORD) with incorrect size : 4 != 1; [WARNING] [MechanicalObject(rp)] Accessing State vector restPosition(V_COORD) with incorrect size : 4 != 1; [WARNING] [MechanicalObject(rp)] Accessing State vector restPosition(V_COORD) with incorrect size : 4 != 1; [WARNING] [MechanicalObject(rep)] Writing to State vector resetPosition(V_COORD) with incorrect size : 4 != 1; [WARNING] [MechanicalObject(fp)] Writing to State vector freePosition(V_COORD) with incorrect size : 4 != 1; [WARNING] [MechanicalObject(fv)] Writing to State vector freeVelocity(V_DERIV) with incorrect size : 4 != 1; [WARNING] [MechanicalObject(rep)] Accessing State vector resetPosition(V_COORD) with incorrect size : 4 != 1; [WARNING] [MechanicalObject(rev)] Accessing State vector resetVelocity(V_DERIV) with incorrect size : 4 != 1; ```; After PR:; ```; [WARNING] [MechanicalObject(f)] One or more of the state vectors passed as argument don't match the size of the others : position(size 4) force(size 3) ; ```. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/406
https://github.com/sofa-framework/sofa/pull/406:1243,Security,Access,Accessing,1243,"n"" />; <MechanicalObject name=""fp"" free_position=""@p.position"" />; <MechanicalObject name=""fv"" free_velocity=""@p.position"" />; <MechanicalObject name=""rp"" rest_position=""@p.position"" />; <MechanicalObject name=""rep"" reset_position=""@p.position"" />; <MechanicalObject name=""rev"" reset_velocity=""@p.position"" />; <MechanicalObject name=""dx"" derivX=""@p.position"" />; </Node>; ```; Before PR:; ```; [WARNING] [MechanicalObject(p)] Writing to State vector position(V_COORD) with incorrect size : 4 != 1; [WARNING] [MechanicalObject(v)] Writing to State vector velocity(V_DERIV) with incorrect size : 4 != 1; [WARNING] [MechanicalObject(f)] Writing to State vector position(V_COORD) with incorrect size : 4 != 1; [WARNING] [MechanicalObject(rp)] Accessing State vector restPosition(V_COORD) with incorrect size : 4 != 1; [WARNING] [MechanicalObject(rp)] Accessing State vector restPosition(V_COORD) with incorrect size : 4 != 1; [WARNING] [MechanicalObject(rep)] Writing to State vector resetPosition(V_COORD) with incorrect size : 4 != 1; [WARNING] [MechanicalObject(fp)] Writing to State vector freePosition(V_COORD) with incorrect size : 4 != 1; [WARNING] [MechanicalObject(fv)] Writing to State vector freeVelocity(V_DERIV) with incorrect size : 4 != 1; [WARNING] [MechanicalObject(rep)] Accessing State vector resetPosition(V_COORD) with incorrect size : 4 != 1; [WARNING] [MechanicalObject(rev)] Accessing State vector resetVelocity(V_DERIV) with incorrect size : 4 != 1; ```; After PR:; ```; [WARNING] [MechanicalObject(f)] One or more of the state vectors passed as argument don't match the size of the others : position(size 4) force(size 3) ; ```. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compati",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/406
https://github.com/sofa-framework/sofa/pull/406:1351,Security,Access,Accessing,1351,"n"" />; <MechanicalObject name=""fp"" free_position=""@p.position"" />; <MechanicalObject name=""fv"" free_velocity=""@p.position"" />; <MechanicalObject name=""rp"" rest_position=""@p.position"" />; <MechanicalObject name=""rep"" reset_position=""@p.position"" />; <MechanicalObject name=""rev"" reset_velocity=""@p.position"" />; <MechanicalObject name=""dx"" derivX=""@p.position"" />; </Node>; ```; Before PR:; ```; [WARNING] [MechanicalObject(p)] Writing to State vector position(V_COORD) with incorrect size : 4 != 1; [WARNING] [MechanicalObject(v)] Writing to State vector velocity(V_DERIV) with incorrect size : 4 != 1; [WARNING] [MechanicalObject(f)] Writing to State vector position(V_COORD) with incorrect size : 4 != 1; [WARNING] [MechanicalObject(rp)] Accessing State vector restPosition(V_COORD) with incorrect size : 4 != 1; [WARNING] [MechanicalObject(rp)] Accessing State vector restPosition(V_COORD) with incorrect size : 4 != 1; [WARNING] [MechanicalObject(rep)] Writing to State vector resetPosition(V_COORD) with incorrect size : 4 != 1; [WARNING] [MechanicalObject(fp)] Writing to State vector freePosition(V_COORD) with incorrect size : 4 != 1; [WARNING] [MechanicalObject(fv)] Writing to State vector freeVelocity(V_DERIV) with incorrect size : 4 != 1; [WARNING] [MechanicalObject(rep)] Accessing State vector resetPosition(V_COORD) with incorrect size : 4 != 1; [WARNING] [MechanicalObject(rev)] Accessing State vector resetVelocity(V_DERIV) with incorrect size : 4 != 1; ```; After PR:; ```; [WARNING] [MechanicalObject(f)] One or more of the state vectors passed as argument don't match the size of the others : position(size 4) force(size 3) ; ```. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compati",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/406
https://github.com/sofa-framework/sofa/pull/406:1789,Security,Access,Accessing,1789,"n"" />; <MechanicalObject name=""fp"" free_position=""@p.position"" />; <MechanicalObject name=""fv"" free_velocity=""@p.position"" />; <MechanicalObject name=""rp"" rest_position=""@p.position"" />; <MechanicalObject name=""rep"" reset_position=""@p.position"" />; <MechanicalObject name=""rev"" reset_velocity=""@p.position"" />; <MechanicalObject name=""dx"" derivX=""@p.position"" />; </Node>; ```; Before PR:; ```; [WARNING] [MechanicalObject(p)] Writing to State vector position(V_COORD) with incorrect size : 4 != 1; [WARNING] [MechanicalObject(v)] Writing to State vector velocity(V_DERIV) with incorrect size : 4 != 1; [WARNING] [MechanicalObject(f)] Writing to State vector position(V_COORD) with incorrect size : 4 != 1; [WARNING] [MechanicalObject(rp)] Accessing State vector restPosition(V_COORD) with incorrect size : 4 != 1; [WARNING] [MechanicalObject(rp)] Accessing State vector restPosition(V_COORD) with incorrect size : 4 != 1; [WARNING] [MechanicalObject(rep)] Writing to State vector resetPosition(V_COORD) with incorrect size : 4 != 1; [WARNING] [MechanicalObject(fp)] Writing to State vector freePosition(V_COORD) with incorrect size : 4 != 1; [WARNING] [MechanicalObject(fv)] Writing to State vector freeVelocity(V_DERIV) with incorrect size : 4 != 1; [WARNING] [MechanicalObject(rep)] Accessing State vector resetPosition(V_COORD) with incorrect size : 4 != 1; [WARNING] [MechanicalObject(rev)] Accessing State vector resetVelocity(V_DERIV) with incorrect size : 4 != 1; ```; After PR:; ```; [WARNING] [MechanicalObject(f)] One or more of the state vectors passed as argument don't match the size of the others : position(size 4) force(size 3) ; ```. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compati",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/406
https://github.com/sofa-framework/sofa/pull/406:1899,Security,Access,Accessing,1899,"n"" />; <MechanicalObject name=""fp"" free_position=""@p.position"" />; <MechanicalObject name=""fv"" free_velocity=""@p.position"" />; <MechanicalObject name=""rp"" rest_position=""@p.position"" />; <MechanicalObject name=""rep"" reset_position=""@p.position"" />; <MechanicalObject name=""rev"" reset_velocity=""@p.position"" />; <MechanicalObject name=""dx"" derivX=""@p.position"" />; </Node>; ```; Before PR:; ```; [WARNING] [MechanicalObject(p)] Writing to State vector position(V_COORD) with incorrect size : 4 != 1; [WARNING] [MechanicalObject(v)] Writing to State vector velocity(V_DERIV) with incorrect size : 4 != 1; [WARNING] [MechanicalObject(f)] Writing to State vector position(V_COORD) with incorrect size : 4 != 1; [WARNING] [MechanicalObject(rp)] Accessing State vector restPosition(V_COORD) with incorrect size : 4 != 1; [WARNING] [MechanicalObject(rp)] Accessing State vector restPosition(V_COORD) with incorrect size : 4 != 1; [WARNING] [MechanicalObject(rep)] Writing to State vector resetPosition(V_COORD) with incorrect size : 4 != 1; [WARNING] [MechanicalObject(fp)] Writing to State vector freePosition(V_COORD) with incorrect size : 4 != 1; [WARNING] [MechanicalObject(fv)] Writing to State vector freeVelocity(V_DERIV) with incorrect size : 4 != 1; [WARNING] [MechanicalObject(rep)] Accessing State vector resetPosition(V_COORD) with incorrect size : 4 != 1; [WARNING] [MechanicalObject(rev)] Accessing State vector resetVelocity(V_DERIV) with incorrect size : 4 != 1; ```; After PR:; ```; [WARNING] [MechanicalObject(f)] One or more of the state vectors passed as argument don't match the size of the others : position(size 4) force(size 3) ; ```. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compati",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/406
https://github.com/sofa-framework/sofa/pull/406:2406,Testability,test,test,2406," <MechanicalObject name=""rp"" rest_position=""@p.position"" />; <MechanicalObject name=""rep"" reset_position=""@p.position"" />; <MechanicalObject name=""rev"" reset_velocity=""@p.position"" />; <MechanicalObject name=""dx"" derivX=""@p.position"" />; </Node>; ```; Before PR:; ```; [WARNING] [MechanicalObject(p)] Writing to State vector position(V_COORD) with incorrect size : 4 != 1; [WARNING] [MechanicalObject(v)] Writing to State vector velocity(V_DERIV) with incorrect size : 4 != 1; [WARNING] [MechanicalObject(f)] Writing to State vector position(V_COORD) with incorrect size : 4 != 1; [WARNING] [MechanicalObject(rp)] Accessing State vector restPosition(V_COORD) with incorrect size : 4 != 1; [WARNING] [MechanicalObject(rp)] Accessing State vector restPosition(V_COORD) with incorrect size : 4 != 1; [WARNING] [MechanicalObject(rep)] Writing to State vector resetPosition(V_COORD) with incorrect size : 4 != 1; [WARNING] [MechanicalObject(fp)] Writing to State vector freePosition(V_COORD) with incorrect size : 4 != 1; [WARNING] [MechanicalObject(fv)] Writing to State vector freeVelocity(V_DERIV) with incorrect size : 4 != 1; [WARNING] [MechanicalObject(rep)] Accessing State vector resetPosition(V_COORD) with incorrect size : 4 != 1; [WARNING] [MechanicalObject(rev)] Accessing State vector resetVelocity(V_DERIV) with incorrect size : 4 != 1; ```; After PR:; ```; [WARNING] [MechanicalObject(f)] One or more of the state vectors passed as argument don't match the size of the others : position(size 4) force(size 3) ; ```. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/406
https://github.com/sofa-framework/sofa/pull/406:2456,Testability,test,test,2456," <MechanicalObject name=""rp"" rest_position=""@p.position"" />; <MechanicalObject name=""rep"" reset_position=""@p.position"" />; <MechanicalObject name=""rev"" reset_velocity=""@p.position"" />; <MechanicalObject name=""dx"" derivX=""@p.position"" />; </Node>; ```; Before PR:; ```; [WARNING] [MechanicalObject(p)] Writing to State vector position(V_COORD) with incorrect size : 4 != 1; [WARNING] [MechanicalObject(v)] Writing to State vector velocity(V_DERIV) with incorrect size : 4 != 1; [WARNING] [MechanicalObject(f)] Writing to State vector position(V_COORD) with incorrect size : 4 != 1; [WARNING] [MechanicalObject(rp)] Accessing State vector restPosition(V_COORD) with incorrect size : 4 != 1; [WARNING] [MechanicalObject(rp)] Accessing State vector restPosition(V_COORD) with incorrect size : 4 != 1; [WARNING] [MechanicalObject(rep)] Writing to State vector resetPosition(V_COORD) with incorrect size : 4 != 1; [WARNING] [MechanicalObject(fp)] Writing to State vector freePosition(V_COORD) with incorrect size : 4 != 1; [WARNING] [MechanicalObject(fv)] Writing to State vector freeVelocity(V_DERIV) with incorrect size : 4 != 1; [WARNING] [MechanicalObject(rep)] Accessing State vector resetPosition(V_COORD) with incorrect size : 4 != 1; [WARNING] [MechanicalObject(rev)] Accessing State vector resetVelocity(V_DERIV) with incorrect size : 4 != 1; ```; After PR:; ```; [WARNING] [MechanicalObject(f)] One or more of the state vectors passed as argument don't match the size of the others : position(size 4) force(size 3) ; ```. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/406
https://github.com/sofa-framework/sofa/pull/407:716,Availability,failure,failures,716,Module are systematically compiled which have a sensible impact to Sofa. ; I'm moving that into plugin to allow dev to conditionnally activate/deactivate the plugin they ; don't need. In this PR I'm moving SofaMiscCollision & SofaSphFluid. ; I made the two because there is a dependency between them. ; There should be no big problem with this PR. ; But in the main CMakeList.txt I change the order of subdirectories so that plugins are before scenecreator. . ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/407
https://github.com/sofa-framework/sofa/pull/407:766,Availability,failure,failures,766,Module are systematically compiled which have a sensible impact to Sofa. ; I'm moving that into plugin to allow dev to conditionnally activate/deactivate the plugin they ; don't need. In this PR I'm moving SofaMiscCollision & SofaSphFluid. ; I made the two because there is a dependency between them. ; There should be no big problem with this PR. ; But in the main CMakeList.txt I change the order of subdirectories so that plugins are before scenecreator. . ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/407
https://github.com/sofa-framework/sofa/pull/407:276,Integrability,depend,dependency,276,Module are systematically compiled which have a sensible impact to Sofa. ; I'm moving that into plugin to allow dev to conditionnally activate/deactivate the plugin they ; don't need. In this PR I'm moving SofaMiscCollision & SofaSphFluid. ; I made the two because there is a dependency between them. ; There should be no big problem with this PR. ; But in the main CMakeList.txt I change the order of subdirectories so that plugins are before scenecreator. . ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/407
https://github.com/sofa-framework/sofa/pull/407:559,Integrability,message,message,559,Module are systematically compiled which have a sensible impact to Sofa. ; I'm moving that into plugin to allow dev to conditionnally activate/deactivate the plugin they ; don't need. In this PR I'm moving SofaMiscCollision & SofaSphFluid. ; I made the two because there is a dependency between them. ; There should be no big problem with this PR. ; But in the main CMakeList.txt I change the order of subdirectories so that plugins are before scenecreator. . ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/407
https://github.com/sofa-framework/sofa/pull/407:96,Modifiability,plugin,plugin,96,Module are systematically compiled which have a sensible impact to Sofa. ; I'm moving that into plugin to allow dev to conditionnally activate/deactivate the plugin they ; don't need. In this PR I'm moving SofaMiscCollision & SofaSphFluid. ; I made the two because there is a dependency between them. ; There should be no big problem with this PR. ; But in the main CMakeList.txt I change the order of subdirectories so that plugins are before scenecreator. . ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/407
https://github.com/sofa-framework/sofa/pull/407:158,Modifiability,plugin,plugin,158,Module are systematically compiled which have a sensible impact to Sofa. ; I'm moving that into plugin to allow dev to conditionnally activate/deactivate the plugin they ; don't need. In this PR I'm moving SofaMiscCollision & SofaSphFluid. ; I made the two because there is a dependency between them. ; There should be no big problem with this PR. ; But in the main CMakeList.txt I change the order of subdirectories so that plugins are before scenecreator. . ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/407
https://github.com/sofa-framework/sofa/pull/407:425,Modifiability,plugin,plugins,425,Module are systematically compiled which have a sensible impact to Sofa. ; I'm moving that into plugin to allow dev to conditionnally activate/deactivate the plugin they ; don't need. In this PR I'm moving SofaMiscCollision & SofaSphFluid. ; I made the two because there is a dependency between them. ; There should be no big problem with this PR. ; But in the main CMakeList.txt I change the order of subdirectories so that plugins are before scenecreator. . ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/407
https://github.com/sofa-framework/sofa/pull/407:711,Testability,test,test,711,Module are systematically compiled which have a sensible impact to Sofa. ; I'm moving that into plugin to allow dev to conditionnally activate/deactivate the plugin they ; don't need. In this PR I'm moving SofaMiscCollision & SofaSphFluid. ; I made the two because there is a dependency between them. ; There should be no big problem with this PR. ; But in the main CMakeList.txt I change the order of subdirectories so that plugins are before scenecreator. . ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/407
https://github.com/sofa-framework/sofa/pull/407:761,Testability,test,test,761,Module are systematically compiled which have a sensible impact to Sofa. ; I'm moving that into plugin to allow dev to conditionnally activate/deactivate the plugin they ; don't need. In this PR I'm moving SofaMiscCollision & SofaSphFluid. ; I made the two because there is a dependency between them. ; There should be no big problem with this PR. ; But in the main CMakeList.txt I change the order of subdirectories so that plugins are before scenecreator. . ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/407
https://github.com/sofa-framework/sofa/pull/408:645,Availability,failure,failures,645,"as said by Damien the wise in PR #407 . ""Module are systematically compiled which have a sensible impact to Sofa.; I'm moving that into plugin to allow dev to conditionnally activate/deactivate the plugin they; don't need."". This PR is about putting SofaMiscForceField in a plugin.; It implied conditional activation of some unit tests to build properly when the plugin is switched off. . ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/408
https://github.com/sofa-framework/sofa/pull/408:695,Availability,failure,failures,695,"as said by Damien the wise in PR #407 . ""Module are systematically compiled which have a sensible impact to Sofa.; I'm moving that into plugin to allow dev to conditionnally activate/deactivate the plugin they; don't need."". This PR is about putting SofaMiscForceField in a plugin.; It implied conditional activation of some unit tests to build properly when the plugin is switched off. . ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/408
https://github.com/sofa-framework/sofa/pull/408:488,Integrability,message,message,488,"as said by Damien the wise in PR #407 . ""Module are systematically compiled which have a sensible impact to Sofa.; I'm moving that into plugin to allow dev to conditionnally activate/deactivate the plugin they; don't need."". This PR is about putting SofaMiscForceField in a plugin.; It implied conditional activation of some unit tests to build properly when the plugin is switched off. . ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/408
https://github.com/sofa-framework/sofa/pull/408:136,Modifiability,plugin,plugin,136,"as said by Damien the wise in PR #407 . ""Module are systematically compiled which have a sensible impact to Sofa.; I'm moving that into plugin to allow dev to conditionnally activate/deactivate the plugin they; don't need."". This PR is about putting SofaMiscForceField in a plugin.; It implied conditional activation of some unit tests to build properly when the plugin is switched off. . ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/408
https://github.com/sofa-framework/sofa/pull/408:198,Modifiability,plugin,plugin,198,"as said by Damien the wise in PR #407 . ""Module are systematically compiled which have a sensible impact to Sofa.; I'm moving that into plugin to allow dev to conditionnally activate/deactivate the plugin they; don't need."". This PR is about putting SofaMiscForceField in a plugin.; It implied conditional activation of some unit tests to build properly when the plugin is switched off. . ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/408
https://github.com/sofa-framework/sofa/pull/408:274,Modifiability,plugin,plugin,274,"as said by Damien the wise in PR #407 . ""Module are systematically compiled which have a sensible impact to Sofa.; I'm moving that into plugin to allow dev to conditionnally activate/deactivate the plugin they; don't need."". This PR is about putting SofaMiscForceField in a plugin.; It implied conditional activation of some unit tests to build properly when the plugin is switched off. . ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/408
https://github.com/sofa-framework/sofa/pull/408:363,Modifiability,plugin,plugin,363,"as said by Damien the wise in PR #407 . ""Module are systematically compiled which have a sensible impact to Sofa.; I'm moving that into plugin to allow dev to conditionnally activate/deactivate the plugin they; don't need."". This PR is about putting SofaMiscForceField in a plugin.; It implied conditional activation of some unit tests to build properly when the plugin is switched off. . ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/408
https://github.com/sofa-framework/sofa/pull/408:330,Testability,test,tests,330,"as said by Damien the wise in PR #407 . ""Module are systematically compiled which have a sensible impact to Sofa.; I'm moving that into plugin to allow dev to conditionnally activate/deactivate the plugin they; don't need."". This PR is about putting SofaMiscForceField in a plugin.; It implied conditional activation of some unit tests to build properly when the plugin is switched off. . ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/408
https://github.com/sofa-framework/sofa/pull/408:640,Testability,test,test,640,"as said by Damien the wise in PR #407 . ""Module are systematically compiled which have a sensible impact to Sofa.; I'm moving that into plugin to allow dev to conditionnally activate/deactivate the plugin they; don't need."". This PR is about putting SofaMiscForceField in a plugin.; It implied conditional activation of some unit tests to build properly when the plugin is switched off. . ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/408
https://github.com/sofa-framework/sofa/pull/408:690,Testability,test,test,690,"as said by Damien the wise in PR #407 . ""Module are systematically compiled which have a sensible impact to Sofa.; I'm moving that into plugin to allow dev to conditionnally activate/deactivate the plugin they; don't need."". This PR is about putting SofaMiscForceField in a plugin.; It implied conditional activation of some unit tests to build properly when the plugin is switched off. . ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/408
https://github.com/sofa-framework/sofa/pull/409:256,Availability,failure,failures,256,______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/409
https://github.com/sofa-framework/sofa/pull/409:306,Availability,failure,failures,306,______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/409
https://github.com/sofa-framework/sofa/pull/409:99,Integrability,message,message,99,______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/409
https://github.com/sofa-framework/sofa/pull/409:251,Testability,test,test,251,______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/409
https://github.com/sofa-framework/sofa/pull/409:301,Testability,test,test,301,______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/409
https://github.com/sofa-framework/sofa/pull/410:1472,Availability,failure,failure,1472,"his PR includes all changes and adds of the incoming [PSL] branch that can be merged directly. It includes some Python bindings, additional tests, and various cleanings.; Hopefully, it should not break anything. in BaseContext add variants of getObjects() which ease the syntax (eg: for(auto& i : getNodeObjects()){...} + corresponding tests. . - in Node add variants of getNodeObjects() and getTreeObjects that does not force to ease the syntax+ corresponding tests. . - in BaseLink add a setFlag method and a setPersistant...this makes things more consistent with BaseData. - in Binding_Base add the methods: addNewData, addData, getData, getLink, getListOfDataFields, getListOfLinks. The function are documented with docstring and tested in test_BindingBase.py. - in Binding_Data add methods: isSet, isPersistant, setPersistant, hasParent, getParentPath, setValueString. The function are documented with docstring and tested in test_BindingData.py; ; - in Binding_Link add methods: setValueString, isPersistant, setPersistant. The function are documented with docstring and tested in test_BindingLink.py. . - in Binding_SofaModule add methods: getAliasesFor. The function are documented with docstrings & tested in test_BindingSofa.py. - in SofaPython add functions: sendMessageFromException, getSofaFormattedStringFromException. - in SofaTest/_init_.py add ASSERT_* functions that generates real gtest failure. . - in runSofa in QDataSimpleEdit & QLinkSimpleEdit correctly prevent writing when the data field is readOnly; ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/410
https://github.com/sofa-framework/sofa/pull/410:1848,Availability,failure,failures,1848,"his PR includes all changes and adds of the incoming [PSL] branch that can be merged directly. It includes some Python bindings, additional tests, and various cleanings.; Hopefully, it should not break anything. in BaseContext add variants of getObjects() which ease the syntax (eg: for(auto& i : getNodeObjects()){...} + corresponding tests. . - in Node add variants of getNodeObjects() and getTreeObjects that does not force to ease the syntax+ corresponding tests. . - in BaseLink add a setFlag method and a setPersistant...this makes things more consistent with BaseData. - in Binding_Base add the methods: addNewData, addData, getData, getLink, getListOfDataFields, getListOfLinks. The function are documented with docstring and tested in test_BindingBase.py. - in Binding_Data add methods: isSet, isPersistant, setPersistant, hasParent, getParentPath, setValueString. The function are documented with docstring and tested in test_BindingData.py; ; - in Binding_Link add methods: setValueString, isPersistant, setPersistant. The function are documented with docstring and tested in test_BindingLink.py. . - in Binding_SofaModule add methods: getAliasesFor. The function are documented with docstrings & tested in test_BindingSofa.py. - in SofaPython add functions: sendMessageFromException, getSofaFormattedStringFromException. - in SofaTest/_init_.py add ASSERT_* functions that generates real gtest failure. . - in runSofa in QDataSimpleEdit & QLinkSimpleEdit correctly prevent writing when the data field is readOnly; ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/410
https://github.com/sofa-framework/sofa/pull/410:1898,Availability,failure,failures,1898,"his PR includes all changes and adds of the incoming [PSL] branch that can be merged directly. It includes some Python bindings, additional tests, and various cleanings.; Hopefully, it should not break anything. in BaseContext add variants of getObjects() which ease the syntax (eg: for(auto& i : getNodeObjects()){...} + corresponding tests. . - in Node add variants of getNodeObjects() and getTreeObjects that does not force to ease the syntax+ corresponding tests. . - in BaseLink add a setFlag method and a setPersistant...this makes things more consistent with BaseData. - in Binding_Base add the methods: addNewData, addData, getData, getLink, getListOfDataFields, getListOfLinks. The function are documented with docstring and tested in test_BindingBase.py. - in Binding_Data add methods: isSet, isPersistant, setPersistant, hasParent, getParentPath, setValueString. The function are documented with docstring and tested in test_BindingData.py; ; - in Binding_Link add methods: setValueString, isPersistant, setPersistant. The function are documented with docstring and tested in test_BindingLink.py. . - in Binding_SofaModule add methods: getAliasesFor. The function are documented with docstrings & tested in test_BindingSofa.py. - in SofaPython add functions: sendMessageFromException, getSofaFormattedStringFromException. - in SofaTest/_init_.py add ASSERT_* functions that generates real gtest failure. . - in runSofa in QDataSimpleEdit & QLinkSimpleEdit correctly prevent writing when the data field is readOnly; ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/410
https://github.com/sofa-framework/sofa/pull/410:1691,Integrability,message,message,1691,"his PR includes all changes and adds of the incoming [PSL] branch that can be merged directly. It includes some Python bindings, additional tests, and various cleanings.; Hopefully, it should not break anything. in BaseContext add variants of getObjects() which ease the syntax (eg: for(auto& i : getNodeObjects()){...} + corresponding tests. . - in Node add variants of getNodeObjects() and getTreeObjects that does not force to ease the syntax+ corresponding tests. . - in BaseLink add a setFlag method and a setPersistant...this makes things more consistent with BaseData. - in Binding_Base add the methods: addNewData, addData, getData, getLink, getListOfDataFields, getListOfLinks. The function are documented with docstring and tested in test_BindingBase.py. - in Binding_Data add methods: isSet, isPersistant, setPersistant, hasParent, getParentPath, setValueString. The function are documented with docstring and tested in test_BindingData.py; ; - in Binding_Link add methods: setValueString, isPersistant, setPersistant. The function are documented with docstring and tested in test_BindingLink.py. . - in Binding_SofaModule add methods: getAliasesFor. The function are documented with docstrings & tested in test_BindingSofa.py. - in SofaPython add functions: sendMessageFromException, getSofaFormattedStringFromException. - in SofaTest/_init_.py add ASSERT_* functions that generates real gtest failure. . - in runSofa in QDataSimpleEdit & QLinkSimpleEdit correctly prevent writing when the data field is readOnly; ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/410
https://github.com/sofa-framework/sofa/pull/410:206,Testability,test,tests,206,"To review after #471 is merged (DONE) You can now review it :) . This PR includes all changes and adds of the incoming [PSL] branch that can be merged directly. It includes some Python bindings, additional tests, and various cleanings.; Hopefully, it should not break anything. in BaseContext add variants of getObjects() which ease the syntax (eg: for(auto& i : getNodeObjects()){...} + corresponding tests. . - in Node add variants of getNodeObjects() and getTreeObjects that does not force to ease the syntax+ corresponding tests. . - in BaseLink add a setFlag method and a setPersistant...this makes things more consistent with BaseData. - in Binding_Base add the methods: addNewData, addData, getData, getLink, getListOfDataFields, getListOfLinks. The function are documented with docstring and tested in test_BindingBase.py. - in Binding_Data add methods: isSet, isPersistant, setPersistant, hasParent, getParentPath, setValueString. The function are documented with docstring and tested in test_BindingData.py; ; - in Binding_Link add methods: setValueString, isPersistant, setPersistant. The function are documented with docstring and tested in test_BindingLink.py. . - in Binding_SofaModule add methods: getAliasesFor. The function are documented with docstrings & tested in test_BindingSofa.py. - in SofaPython add functions: sendMessageFromException, getSofaFormattedStringFromException. - in SofaTest/_init_.py add ASSERT_* functions that generates real gtest failure. . - in runSofa in QDataSimpleEdit & QLinkSimpleEdit correctly prevent writing when the data field is readOnly; ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge la",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/410
https://github.com/sofa-framework/sofa/pull/410:402,Testability,test,tests,402,"To review after #471 is merged (DONE) You can now review it :) . This PR includes all changes and adds of the incoming [PSL] branch that can be merged directly. It includes some Python bindings, additional tests, and various cleanings.; Hopefully, it should not break anything. in BaseContext add variants of getObjects() which ease the syntax (eg: for(auto& i : getNodeObjects()){...} + corresponding tests. . - in Node add variants of getNodeObjects() and getTreeObjects that does not force to ease the syntax+ corresponding tests. . - in BaseLink add a setFlag method and a setPersistant...this makes things more consistent with BaseData. - in Binding_Base add the methods: addNewData, addData, getData, getLink, getListOfDataFields, getListOfLinks. The function are documented with docstring and tested in test_BindingBase.py. - in Binding_Data add methods: isSet, isPersistant, setPersistant, hasParent, getParentPath, setValueString. The function are documented with docstring and tested in test_BindingData.py; ; - in Binding_Link add methods: setValueString, isPersistant, setPersistant. The function are documented with docstring and tested in test_BindingLink.py. . - in Binding_SofaModule add methods: getAliasesFor. The function are documented with docstrings & tested in test_BindingSofa.py. - in SofaPython add functions: sendMessageFromException, getSofaFormattedStringFromException. - in SofaTest/_init_.py add ASSERT_* functions that generates real gtest failure. . - in runSofa in QDataSimpleEdit & QLinkSimpleEdit correctly prevent writing when the data field is readOnly; ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge la",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/410
https://github.com/sofa-framework/sofa/pull/410:527,Testability,test,tests,527,"To review after #471 is merged (DONE) You can now review it :) . This PR includes all changes and adds of the incoming [PSL] branch that can be merged directly. It includes some Python bindings, additional tests, and various cleanings.; Hopefully, it should not break anything. in BaseContext add variants of getObjects() which ease the syntax (eg: for(auto& i : getNodeObjects()){...} + corresponding tests. . - in Node add variants of getNodeObjects() and getTreeObjects that does not force to ease the syntax+ corresponding tests. . - in BaseLink add a setFlag method and a setPersistant...this makes things more consistent with BaseData. - in Binding_Base add the methods: addNewData, addData, getData, getLink, getListOfDataFields, getListOfLinks. The function are documented with docstring and tested in test_BindingBase.py. - in Binding_Data add methods: isSet, isPersistant, setPersistant, hasParent, getParentPath, setValueString. The function are documented with docstring and tested in test_BindingData.py; ; - in Binding_Link add methods: setValueString, isPersistant, setPersistant. The function are documented with docstring and tested in test_BindingLink.py. . - in Binding_SofaModule add methods: getAliasesFor. The function are documented with docstrings & tested in test_BindingSofa.py. - in SofaPython add functions: sendMessageFromException, getSofaFormattedStringFromException. - in SofaTest/_init_.py add ASSERT_* functions that generates real gtest failure. . - in runSofa in QDataSimpleEdit & QLinkSimpleEdit correctly prevent writing when the data field is readOnly; ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge la",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/410
https://github.com/sofa-framework/sofa/pull/410:800,Testability,test,tested,800,"To review after #471 is merged (DONE) You can now review it :) . This PR includes all changes and adds of the incoming [PSL] branch that can be merged directly. It includes some Python bindings, additional tests, and various cleanings.; Hopefully, it should not break anything. in BaseContext add variants of getObjects() which ease the syntax (eg: for(auto& i : getNodeObjects()){...} + corresponding tests. . - in Node add variants of getNodeObjects() and getTreeObjects that does not force to ease the syntax+ corresponding tests. . - in BaseLink add a setFlag method and a setPersistant...this makes things more consistent with BaseData. - in Binding_Base add the methods: addNewData, addData, getData, getLink, getListOfDataFields, getListOfLinks. The function are documented with docstring and tested in test_BindingBase.py. - in Binding_Data add methods: isSet, isPersistant, setPersistant, hasParent, getParentPath, setValueString. The function are documented with docstring and tested in test_BindingData.py; ; - in Binding_Link add methods: setValueString, isPersistant, setPersistant. The function are documented with docstring and tested in test_BindingLink.py. . - in Binding_SofaModule add methods: getAliasesFor. The function are documented with docstrings & tested in test_BindingSofa.py. - in SofaPython add functions: sendMessageFromException, getSofaFormattedStringFromException. - in SofaTest/_init_.py add ASSERT_* functions that generates real gtest failure. . - in runSofa in QDataSimpleEdit & QLinkSimpleEdit correctly prevent writing when the data field is readOnly; ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge la",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/410
https://github.com/sofa-framework/sofa/pull/410:987,Testability,test,tested,987,"To review after #471 is merged (DONE) You can now review it :) . This PR includes all changes and adds of the incoming [PSL] branch that can be merged directly. It includes some Python bindings, additional tests, and various cleanings.; Hopefully, it should not break anything. in BaseContext add variants of getObjects() which ease the syntax (eg: for(auto& i : getNodeObjects()){...} + corresponding tests. . - in Node add variants of getNodeObjects() and getTreeObjects that does not force to ease the syntax+ corresponding tests. . - in BaseLink add a setFlag method and a setPersistant...this makes things more consistent with BaseData. - in Binding_Base add the methods: addNewData, addData, getData, getLink, getListOfDataFields, getListOfLinks. The function are documented with docstring and tested in test_BindingBase.py. - in Binding_Data add methods: isSet, isPersistant, setPersistant, hasParent, getParentPath, setValueString. The function are documented with docstring and tested in test_BindingData.py; ; - in Binding_Link add methods: setValueString, isPersistant, setPersistant. The function are documented with docstring and tested in test_BindingLink.py. . - in Binding_SofaModule add methods: getAliasesFor. The function are documented with docstrings & tested in test_BindingSofa.py. - in SofaPython add functions: sendMessageFromException, getSofaFormattedStringFromException. - in SofaTest/_init_.py add ASSERT_* functions that generates real gtest failure. . - in runSofa in QDataSimpleEdit & QLinkSimpleEdit correctly prevent writing when the data field is readOnly; ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge la",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/410
https://github.com/sofa-framework/sofa/pull/410:1143,Testability,test,tested,1143,"his PR includes all changes and adds of the incoming [PSL] branch that can be merged directly. It includes some Python bindings, additional tests, and various cleanings.; Hopefully, it should not break anything. in BaseContext add variants of getObjects() which ease the syntax (eg: for(auto& i : getNodeObjects()){...} + corresponding tests. . - in Node add variants of getNodeObjects() and getTreeObjects that does not force to ease the syntax+ corresponding tests. . - in BaseLink add a setFlag method and a setPersistant...this makes things more consistent with BaseData. - in Binding_Base add the methods: addNewData, addData, getData, getLink, getListOfDataFields, getListOfLinks. The function are documented with docstring and tested in test_BindingBase.py. - in Binding_Data add methods: isSet, isPersistant, setPersistant, hasParent, getParentPath, setValueString. The function are documented with docstring and tested in test_BindingData.py; ; - in Binding_Link add methods: setValueString, isPersistant, setPersistant. The function are documented with docstring and tested in test_BindingLink.py. . - in Binding_SofaModule add methods: getAliasesFor. The function are documented with docstrings & tested in test_BindingSofa.py. - in SofaPython add functions: sendMessageFromException, getSofaFormattedStringFromException. - in SofaTest/_init_.py add ASSERT_* functions that generates real gtest failure. . - in runSofa in QDataSimpleEdit & QLinkSimpleEdit correctly prevent writing when the data field is readOnly; ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/410
https://github.com/sofa-framework/sofa/pull/410:1274,Testability,test,tested,1274,"his PR includes all changes and adds of the incoming [PSL] branch that can be merged directly. It includes some Python bindings, additional tests, and various cleanings.; Hopefully, it should not break anything. in BaseContext add variants of getObjects() which ease the syntax (eg: for(auto& i : getNodeObjects()){...} + corresponding tests. . - in Node add variants of getNodeObjects() and getTreeObjects that does not force to ease the syntax+ corresponding tests. . - in BaseLink add a setFlag method and a setPersistant...this makes things more consistent with BaseData. - in Binding_Base add the methods: addNewData, addData, getData, getLink, getListOfDataFields, getListOfLinks. The function are documented with docstring and tested in test_BindingBase.py. - in Binding_Data add methods: isSet, isPersistant, setPersistant, hasParent, getParentPath, setValueString. The function are documented with docstring and tested in test_BindingData.py; ; - in Binding_Link add methods: setValueString, isPersistant, setPersistant. The function are documented with docstring and tested in test_BindingLink.py. . - in Binding_SofaModule add methods: getAliasesFor. The function are documented with docstrings & tested in test_BindingSofa.py. - in SofaPython add functions: sendMessageFromException, getSofaFormattedStringFromException. - in SofaTest/_init_.py add ASSERT_* functions that generates real gtest failure. . - in runSofa in QDataSimpleEdit & QLinkSimpleEdit correctly prevent writing when the data field is readOnly; ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/410
https://github.com/sofa-framework/sofa/pull/410:1843,Testability,test,test,1843,"his PR includes all changes and adds of the incoming [PSL] branch that can be merged directly. It includes some Python bindings, additional tests, and various cleanings.; Hopefully, it should not break anything. in BaseContext add variants of getObjects() which ease the syntax (eg: for(auto& i : getNodeObjects()){...} + corresponding tests. . - in Node add variants of getNodeObjects() and getTreeObjects that does not force to ease the syntax+ corresponding tests. . - in BaseLink add a setFlag method and a setPersistant...this makes things more consistent with BaseData. - in Binding_Base add the methods: addNewData, addData, getData, getLink, getListOfDataFields, getListOfLinks. The function are documented with docstring and tested in test_BindingBase.py. - in Binding_Data add methods: isSet, isPersistant, setPersistant, hasParent, getParentPath, setValueString. The function are documented with docstring and tested in test_BindingData.py; ; - in Binding_Link add methods: setValueString, isPersistant, setPersistant. The function are documented with docstring and tested in test_BindingLink.py. . - in Binding_SofaModule add methods: getAliasesFor. The function are documented with docstrings & tested in test_BindingSofa.py. - in SofaPython add functions: sendMessageFromException, getSofaFormattedStringFromException. - in SofaTest/_init_.py add ASSERT_* functions that generates real gtest failure. . - in runSofa in QDataSimpleEdit & QLinkSimpleEdit correctly prevent writing when the data field is readOnly; ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/410
https://github.com/sofa-framework/sofa/pull/410:1893,Testability,test,test,1893,"his PR includes all changes and adds of the incoming [PSL] branch that can be merged directly. It includes some Python bindings, additional tests, and various cleanings.; Hopefully, it should not break anything. in BaseContext add variants of getObjects() which ease the syntax (eg: for(auto& i : getNodeObjects()){...} + corresponding tests. . - in Node add variants of getNodeObjects() and getTreeObjects that does not force to ease the syntax+ corresponding tests. . - in BaseLink add a setFlag method and a setPersistant...this makes things more consistent with BaseData. - in Binding_Base add the methods: addNewData, addData, getData, getLink, getListOfDataFields, getListOfLinks. The function are documented with docstring and tested in test_BindingBase.py. - in Binding_Data add methods: isSet, isPersistant, setPersistant, hasParent, getParentPath, setValueString. The function are documented with docstring and tested in test_BindingData.py; ; - in Binding_Link add methods: setValueString, isPersistant, setPersistant. The function are documented with docstring and tested in test_BindingLink.py. . - in Binding_SofaModule add methods: getAliasesFor. The function are documented with docstrings & tested in test_BindingSofa.py. - in SofaPython add functions: sendMessageFromException, getSofaFormattedStringFromException. - in SofaTest/_init_.py add ASSERT_* functions that generates real gtest failure. . - in runSofa in QDataSimpleEdit & QLinkSimpleEdit correctly prevent writing when the data field is readOnly; ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/410
https://github.com/sofa-framework/sofa/pull/411:2091,Availability,failure,failures,2091,"ontext manager is provided to commit modifications back, should the sparsity pattern change, as shown in the example below. The binding is somewhat unconventional as it uses `ctypes` for simplicity. Perhaps a cleaner version could be made using regular bindings + passing Eigen matrix pointers through python capsules if someone is motivated. # Example; ```python; from SofaPython import sparse; import numpy as np. import Sofa; Sofa.loadPlugin('Flexible'). def createScene(node):; template = 'Affine'. dofs = node.createObject('MechanicalObject', template = template, size = 1); dofs.init(); ; mass = node.createObject('AffineMass', template = template); mass.init(); mass.bwdInit(). ref = np.identity(12); ; with sparse.data_view(mass, 'massMatrix') as m:; assert (m == ref).all(). m[10, 10] = 14; ref[10, 10] = 14. # assert our in-place modifications are reflected; with sparse.data_view(mass, 'massMatrix') as mm:; assert (mm == ref).all(). m[0, 10] = 14; ref[0, 10] = 14. # sparsity change: scipy matrix reallocates, no longer aliases ; with sparse.data_view(mass, 'massMatrix') as mm:; assert not (mm == ref).all(); ; # modification commit happens here. with sparse.data_view(mass, 'massMatrix') as m:; assert (m == ref).all(); ```. # Changelog. - Added `DataTypeInfo` for `EigenBaseSparseMatrix` derived classes; - Added a bunch of C functions in `SofaPython/ctypes.cpp` for aliasing logic; - Added a ctypes binding for aliasing + contexts in `SofaPython.sparse`; - Added an example in `SofaPython/examples/sparse.py`; ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/411
https://github.com/sofa-framework/sofa/pull/411:2141,Availability,failure,failures,2141,"ontext manager is provided to commit modifications back, should the sparsity pattern change, as shown in the example below. The binding is somewhat unconventional as it uses `ctypes` for simplicity. Perhaps a cleaner version could be made using regular bindings + passing Eigen matrix pointers through python capsules if someone is motivated. # Example; ```python; from SofaPython import sparse; import numpy as np. import Sofa; Sofa.loadPlugin('Flexible'). def createScene(node):; template = 'Affine'. dofs = node.createObject('MechanicalObject', template = template, size = 1); dofs.init(); ; mass = node.createObject('AffineMass', template = template); mass.init(); mass.bwdInit(). ref = np.identity(12); ; with sparse.data_view(mass, 'massMatrix') as m:; assert (m == ref).all(). m[10, 10] = 14; ref[10, 10] = 14. # assert our in-place modifications are reflected; with sparse.data_view(mass, 'massMatrix') as mm:; assert (mm == ref).all(). m[0, 10] = 14; ref[0, 10] = 14. # sparsity change: scipy matrix reallocates, no longer aliases ; with sparse.data_view(mass, 'massMatrix') as mm:; assert not (mm == ref).all(); ; # modification commit happens here. with sparse.data_view(mass, 'massMatrix') as m:; assert (m == ref).all(); ```. # Changelog. - Added `DataTypeInfo` for `EigenBaseSparseMatrix` derived classes; - Added a bunch of C functions in `SofaPython/ctypes.cpp` for aliasing logic; - Added a ctypes binding for aliasing + contexts in `SofaPython.sparse`; - Added an example in `SofaPython/examples/sparse.py`; ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/411
https://github.com/sofa-framework/sofa/pull/411:1934,Integrability,message,message,1934,"ontext manager is provided to commit modifications back, should the sparsity pattern change, as shown in the example below. The binding is somewhat unconventional as it uses `ctypes` for simplicity. Perhaps a cleaner version could be made using regular bindings + passing Eigen matrix pointers through python capsules if someone is motivated. # Example; ```python; from SofaPython import sparse; import numpy as np. import Sofa; Sofa.loadPlugin('Flexible'). def createScene(node):; template = 'Affine'. dofs = node.createObject('MechanicalObject', template = template, size = 1); dofs.init(); ; mass = node.createObject('AffineMass', template = template); mass.init(); mass.bwdInit(). ref = np.identity(12); ; with sparse.data_view(mass, 'massMatrix') as m:; assert (m == ref).all(). m[10, 10] = 14; ref[10, 10] = 14. # assert our in-place modifications are reflected; with sparse.data_view(mass, 'massMatrix') as mm:; assert (mm == ref).all(). m[0, 10] = 14; ref[0, 10] = 14. # sparsity change: scipy matrix reallocates, no longer aliases ; with sparse.data_view(mass, 'massMatrix') as mm:; assert not (mm == ref).all(); ; # modification commit happens here. with sparse.data_view(mass, 'massMatrix') as m:; assert (m == ref).all(); ```. # Changelog. - Added `DataTypeInfo` for `EigenBaseSparseMatrix` derived classes; - Added a bunch of C functions in `SofaPython/ctypes.cpp` for aliasing logic; - Added a ctypes binding for aliasing + contexts in `SofaPython.sparse`; - Added an example in `SofaPython/examples/sparse.py`; ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/411
https://github.com/sofa-framework/sofa/pull/411:755,Modifiability,Flexible,Flexible,755,"This PR provides support for aliasing Eigen sparse matrices (classes derived from `EigenBaseSparseMatrix`) through scipy sparse matrices. The scipy matrix *aliases* the eigen matrix, so that any modification will reflect on both sides provided the sparsity pattern does not change (on either side). A python context manager is provided to commit modifications back, should the sparsity pattern change, as shown in the example below. The binding is somewhat unconventional as it uses `ctypes` for simplicity. Perhaps a cleaner version could be made using regular bindings + passing Eigen matrix pointers through python capsules if someone is motivated. # Example; ```python; from SofaPython import sparse; import numpy as np. import Sofa; Sofa.loadPlugin('Flexible'). def createScene(node):; template = 'Affine'. dofs = node.createObject('MechanicalObject', template = template, size = 1); dofs.init(); ; mass = node.createObject('AffineMass', template = template); mass.init(); mass.bwdInit(). ref = np.identity(12); ; with sparse.data_view(mass, 'massMatrix') as m:; assert (m == ref).all(). m[10, 10] = 14; ref[10, 10] = 14. # assert our in-place modifications are reflected; with sparse.data_view(mass, 'massMatrix') as mm:; assert (mm == ref).all(). m[0, 10] = 14; ref[0, 10] = 14. # sparsity change: scipy matrix reallocates, no longer aliases ; with sparse.data_view(mass, 'massMatrix') as mm:; assert not (mm == ref).all(); ; # modification commit happens here. with sparse.data_view(mass, 'massMatrix') as m:; assert (m == ref).all(); ```. # Changelog. - Added `DataTypeInfo` for `EigenBaseSparseMatrix` derived classes; - Added a bunch of C functions in `SofaPython/ctypes.cpp` for aliasing logic; - Added a ctypes binding for aliasing + contexts in `SofaPython.sparse`; - Added an example in `SofaPython/examples/sparse.py`; ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/411
https://github.com/sofa-framework/sofa/pull/411:743,Performance,load,loadPlugin,743,"This PR provides support for aliasing Eigen sparse matrices (classes derived from `EigenBaseSparseMatrix`) through scipy sparse matrices. The scipy matrix *aliases* the eigen matrix, so that any modification will reflect on both sides provided the sparsity pattern does not change (on either side). A python context manager is provided to commit modifications back, should the sparsity pattern change, as shown in the example below. The binding is somewhat unconventional as it uses `ctypes` for simplicity. Perhaps a cleaner version could be made using regular bindings + passing Eigen matrix pointers through python capsules if someone is motivated. # Example; ```python; from SofaPython import sparse; import numpy as np. import Sofa; Sofa.loadPlugin('Flexible'). def createScene(node):; template = 'Affine'. dofs = node.createObject('MechanicalObject', template = template, size = 1); dofs.init(); ; mass = node.createObject('AffineMass', template = template); mass.init(); mass.bwdInit(). ref = np.identity(12); ; with sparse.data_view(mass, 'massMatrix') as m:; assert (m == ref).all(). m[10, 10] = 14; ref[10, 10] = 14. # assert our in-place modifications are reflected; with sparse.data_view(mass, 'massMatrix') as mm:; assert (mm == ref).all(). m[0, 10] = 14; ref[0, 10] = 14. # sparsity change: scipy matrix reallocates, no longer aliases ; with sparse.data_view(mass, 'massMatrix') as mm:; assert not (mm == ref).all(); ; # modification commit happens here. with sparse.data_view(mass, 'massMatrix') as m:; assert (m == ref).all(); ```. # Changelog. - Added `DataTypeInfo` for `EigenBaseSparseMatrix` derived classes; - Added a bunch of C functions in `SofaPython/ctypes.cpp` for aliasing logic; - Added a ctypes binding for aliasing + contexts in `SofaPython.sparse`; - Added an example in `SofaPython/examples/sparse.py`; ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/411
https://github.com/sofa-framework/sofa/pull/411:1068,Testability,assert,assert,1068,"s (classes derived from `EigenBaseSparseMatrix`) through scipy sparse matrices. The scipy matrix *aliases* the eigen matrix, so that any modification will reflect on both sides provided the sparsity pattern does not change (on either side). A python context manager is provided to commit modifications back, should the sparsity pattern change, as shown in the example below. The binding is somewhat unconventional as it uses `ctypes` for simplicity. Perhaps a cleaner version could be made using regular bindings + passing Eigen matrix pointers through python capsules if someone is motivated. # Example; ```python; from SofaPython import sparse; import numpy as np. import Sofa; Sofa.loadPlugin('Flexible'). def createScene(node):; template = 'Affine'. dofs = node.createObject('MechanicalObject', template = template, size = 1); dofs.init(); ; mass = node.createObject('AffineMass', template = template); mass.init(); mass.bwdInit(). ref = np.identity(12); ; with sparse.data_view(mass, 'massMatrix') as m:; assert (m == ref).all(). m[10, 10] = 14; ref[10, 10] = 14. # assert our in-place modifications are reflected; with sparse.data_view(mass, 'massMatrix') as mm:; assert (mm == ref).all(). m[0, 10] = 14; ref[0, 10] = 14. # sparsity change: scipy matrix reallocates, no longer aliases ; with sparse.data_view(mass, 'massMatrix') as mm:; assert not (mm == ref).all(); ; # modification commit happens here. with sparse.data_view(mass, 'massMatrix') as m:; assert (m == ref).all(); ```. # Changelog. - Added `DataTypeInfo` for `EigenBaseSparseMatrix` derived classes; - Added a bunch of C functions in `SofaPython/ctypes.cpp` for aliasing logic; - Added a ctypes binding for aliasing + contexts in `SofaPython.sparse`; - Added an example in `SofaPython/examples/sparse.py`; ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] ",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/411
https://github.com/sofa-framework/sofa/pull/411:1129,Testability,assert,assert,1129,"iases* the eigen matrix, so that any modification will reflect on both sides provided the sparsity pattern does not change (on either side). A python context manager is provided to commit modifications back, should the sparsity pattern change, as shown in the example below. The binding is somewhat unconventional as it uses `ctypes` for simplicity. Perhaps a cleaner version could be made using regular bindings + passing Eigen matrix pointers through python capsules if someone is motivated. # Example; ```python; from SofaPython import sparse; import numpy as np. import Sofa; Sofa.loadPlugin('Flexible'). def createScene(node):; template = 'Affine'. dofs = node.createObject('MechanicalObject', template = template, size = 1); dofs.init(); ; mass = node.createObject('AffineMass', template = template); mass.init(); mass.bwdInit(). ref = np.identity(12); ; with sparse.data_view(mass, 'massMatrix') as m:; assert (m == ref).all(). m[10, 10] = 14; ref[10, 10] = 14. # assert our in-place modifications are reflected; with sparse.data_view(mass, 'massMatrix') as mm:; assert (mm == ref).all(). m[0, 10] = 14; ref[0, 10] = 14. # sparsity change: scipy matrix reallocates, no longer aliases ; with sparse.data_view(mass, 'massMatrix') as mm:; assert not (mm == ref).all(); ; # modification commit happens here. with sparse.data_view(mass, 'massMatrix') as m:; assert (m == ref).all(); ```. # Changelog. - Added `DataTypeInfo` for `EigenBaseSparseMatrix` derived classes; - Added a bunch of C functions in `SofaPython/ctypes.cpp` for aliasing logic; - Added a ctypes binding for aliasing + contexts in `SofaPython.sparse`; - Added an example in `SofaPython/examples/sparse.py`; ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] ",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/411
https://github.com/sofa-framework/sofa/pull/411:1228,Testability,assert,assert,1228,"ct on both sides provided the sparsity pattern does not change (on either side). A python context manager is provided to commit modifications back, should the sparsity pattern change, as shown in the example below. The binding is somewhat unconventional as it uses `ctypes` for simplicity. Perhaps a cleaner version could be made using regular bindings + passing Eigen matrix pointers through python capsules if someone is motivated. # Example; ```python; from SofaPython import sparse; import numpy as np. import Sofa; Sofa.loadPlugin('Flexible'). def createScene(node):; template = 'Affine'. dofs = node.createObject('MechanicalObject', template = template, size = 1); dofs.init(); ; mass = node.createObject('AffineMass', template = template); mass.init(); mass.bwdInit(). ref = np.identity(12); ; with sparse.data_view(mass, 'massMatrix') as m:; assert (m == ref).all(). m[10, 10] = 14; ref[10, 10] = 14. # assert our in-place modifications are reflected; with sparse.data_view(mass, 'massMatrix') as mm:; assert (mm == ref).all(). m[0, 10] = 14; ref[0, 10] = 14. # sparsity change: scipy matrix reallocates, no longer aliases ; with sparse.data_view(mass, 'massMatrix') as mm:; assert not (mm == ref).all(); ; # modification commit happens here. with sparse.data_view(mass, 'massMatrix') as m:; assert (m == ref).all(); ```. # Changelog. - Added `DataTypeInfo` for `EigenBaseSparseMatrix` derived classes; - Added a bunch of C functions in `SofaPython/ctypes.cpp` for aliasing logic; - Added a ctypes binding for aliasing + contexts in `SofaPython.sparse`; - Added an example in `SofaPython/examples/sparse.py`; ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week ",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/411
https://github.com/sofa-framework/sofa/pull/411:1401,Testability,assert,assert,1401,"ontext manager is provided to commit modifications back, should the sparsity pattern change, as shown in the example below. The binding is somewhat unconventional as it uses `ctypes` for simplicity. Perhaps a cleaner version could be made using regular bindings + passing Eigen matrix pointers through python capsules if someone is motivated. # Example; ```python; from SofaPython import sparse; import numpy as np. import Sofa; Sofa.loadPlugin('Flexible'). def createScene(node):; template = 'Affine'. dofs = node.createObject('MechanicalObject', template = template, size = 1); dofs.init(); ; mass = node.createObject('AffineMass', template = template); mass.init(); mass.bwdInit(). ref = np.identity(12); ; with sparse.data_view(mass, 'massMatrix') as m:; assert (m == ref).all(). m[10, 10] = 14; ref[10, 10] = 14. # assert our in-place modifications are reflected; with sparse.data_view(mass, 'massMatrix') as mm:; assert (mm == ref).all(). m[0, 10] = 14; ref[0, 10] = 14. # sparsity change: scipy matrix reallocates, no longer aliases ; with sparse.data_view(mass, 'massMatrix') as mm:; assert not (mm == ref).all(); ; # modification commit happens here. with sparse.data_view(mass, 'massMatrix') as m:; assert (m == ref).all(); ```. # Changelog. - Added `DataTypeInfo` for `EigenBaseSparseMatrix` derived classes; - Added a bunch of C functions in `SofaPython/ctypes.cpp` for aliasing logic; - Added a ctypes binding for aliasing + contexts in `SofaPython.sparse`; - Added an example in `SofaPython/examples/sparse.py`; ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/411
https://github.com/sofa-framework/sofa/pull/411:1518,Testability,assert,assert,1518,"ontext manager is provided to commit modifications back, should the sparsity pattern change, as shown in the example below. The binding is somewhat unconventional as it uses `ctypes` for simplicity. Perhaps a cleaner version could be made using regular bindings + passing Eigen matrix pointers through python capsules if someone is motivated. # Example; ```python; from SofaPython import sparse; import numpy as np. import Sofa; Sofa.loadPlugin('Flexible'). def createScene(node):; template = 'Affine'. dofs = node.createObject('MechanicalObject', template = template, size = 1); dofs.init(); ; mass = node.createObject('AffineMass', template = template); mass.init(); mass.bwdInit(). ref = np.identity(12); ; with sparse.data_view(mass, 'massMatrix') as m:; assert (m == ref).all(). m[10, 10] = 14; ref[10, 10] = 14. # assert our in-place modifications are reflected; with sparse.data_view(mass, 'massMatrix') as mm:; assert (mm == ref).all(). m[0, 10] = 14; ref[0, 10] = 14. # sparsity change: scipy matrix reallocates, no longer aliases ; with sparse.data_view(mass, 'massMatrix') as mm:; assert not (mm == ref).all(); ; # modification commit happens here. with sparse.data_view(mass, 'massMatrix') as m:; assert (m == ref).all(); ```. # Changelog. - Added `DataTypeInfo` for `EigenBaseSparseMatrix` derived classes; - Added a bunch of C functions in `SofaPython/ctypes.cpp` for aliasing logic; - Added a ctypes binding for aliasing + contexts in `SofaPython.sparse`; - Added an example in `SofaPython/examples/sparse.py`; ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/411
https://github.com/sofa-framework/sofa/pull/411:1700,Testability,log,logic,1700,"ontext manager is provided to commit modifications back, should the sparsity pattern change, as shown in the example below. The binding is somewhat unconventional as it uses `ctypes` for simplicity. Perhaps a cleaner version could be made using regular bindings + passing Eigen matrix pointers through python capsules if someone is motivated. # Example; ```python; from SofaPython import sparse; import numpy as np. import Sofa; Sofa.loadPlugin('Flexible'). def createScene(node):; template = 'Affine'. dofs = node.createObject('MechanicalObject', template = template, size = 1); dofs.init(); ; mass = node.createObject('AffineMass', template = template); mass.init(); mass.bwdInit(). ref = np.identity(12); ; with sparse.data_view(mass, 'massMatrix') as m:; assert (m == ref).all(). m[10, 10] = 14; ref[10, 10] = 14. # assert our in-place modifications are reflected; with sparse.data_view(mass, 'massMatrix') as mm:; assert (mm == ref).all(). m[0, 10] = 14; ref[0, 10] = 14. # sparsity change: scipy matrix reallocates, no longer aliases ; with sparse.data_view(mass, 'massMatrix') as mm:; assert not (mm == ref).all(); ; # modification commit happens here. with sparse.data_view(mass, 'massMatrix') as m:; assert (m == ref).all(); ```. # Changelog. - Added `DataTypeInfo` for `EigenBaseSparseMatrix` derived classes; - Added a bunch of C functions in `SofaPython/ctypes.cpp` for aliasing logic; - Added a ctypes binding for aliasing + contexts in `SofaPython.sparse`; - Added an example in `SofaPython/examples/sparse.py`; ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/411
https://github.com/sofa-framework/sofa/pull/411:2086,Testability,test,test,2086,"ontext manager is provided to commit modifications back, should the sparsity pattern change, as shown in the example below. The binding is somewhat unconventional as it uses `ctypes` for simplicity. Perhaps a cleaner version could be made using regular bindings + passing Eigen matrix pointers through python capsules if someone is motivated. # Example; ```python; from SofaPython import sparse; import numpy as np. import Sofa; Sofa.loadPlugin('Flexible'). def createScene(node):; template = 'Affine'. dofs = node.createObject('MechanicalObject', template = template, size = 1); dofs.init(); ; mass = node.createObject('AffineMass', template = template); mass.init(); mass.bwdInit(). ref = np.identity(12); ; with sparse.data_view(mass, 'massMatrix') as m:; assert (m == ref).all(). m[10, 10] = 14; ref[10, 10] = 14. # assert our in-place modifications are reflected; with sparse.data_view(mass, 'massMatrix') as mm:; assert (mm == ref).all(). m[0, 10] = 14; ref[0, 10] = 14. # sparsity change: scipy matrix reallocates, no longer aliases ; with sparse.data_view(mass, 'massMatrix') as mm:; assert not (mm == ref).all(); ; # modification commit happens here. with sparse.data_view(mass, 'massMatrix') as m:; assert (m == ref).all(); ```. # Changelog. - Added `DataTypeInfo` for `EigenBaseSparseMatrix` derived classes; - Added a bunch of C functions in `SofaPython/ctypes.cpp` for aliasing logic; - Added a ctypes binding for aliasing + contexts in `SofaPython.sparse`; - Added an example in `SofaPython/examples/sparse.py`; ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/411
https://github.com/sofa-framework/sofa/pull/411:2136,Testability,test,test,2136,"ontext manager is provided to commit modifications back, should the sparsity pattern change, as shown in the example below. The binding is somewhat unconventional as it uses `ctypes` for simplicity. Perhaps a cleaner version could be made using regular bindings + passing Eigen matrix pointers through python capsules if someone is motivated. # Example; ```python; from SofaPython import sparse; import numpy as np. import Sofa; Sofa.loadPlugin('Flexible'). def createScene(node):; template = 'Affine'. dofs = node.createObject('MechanicalObject', template = template, size = 1); dofs.init(); ; mass = node.createObject('AffineMass', template = template); mass.init(); mass.bwdInit(). ref = np.identity(12); ; with sparse.data_view(mass, 'massMatrix') as m:; assert (m == ref).all(). m[10, 10] = 14; ref[10, 10] = 14. # assert our in-place modifications are reflected; with sparse.data_view(mass, 'massMatrix') as mm:; assert (mm == ref).all(). m[0, 10] = 14; ref[0, 10] = 14. # sparsity change: scipy matrix reallocates, no longer aliases ; with sparse.data_view(mass, 'massMatrix') as mm:; assert not (mm == ref).all(); ; # modification commit happens here. with sparse.data_view(mass, 'massMatrix') as m:; assert (m == ref).all(); ```. # Changelog. - Added `DataTypeInfo` for `EigenBaseSparseMatrix` derived classes; - Added a bunch of C functions in `SofaPython/ctypes.cpp` for aliasing logic; - Added a ctypes binding for aliasing + contexts in `SofaPython.sparse`; - Added an example in `SofaPython/examples/sparse.py`; ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/411
https://github.com/sofa-framework/sofa/pull/411:496,Usability,simpl,simplicity,496,"This PR provides support for aliasing Eigen sparse matrices (classes derived from `EigenBaseSparseMatrix`) through scipy sparse matrices. The scipy matrix *aliases* the eigen matrix, so that any modification will reflect on both sides provided the sparsity pattern does not change (on either side). A python context manager is provided to commit modifications back, should the sparsity pattern change, as shown in the example below. The binding is somewhat unconventional as it uses `ctypes` for simplicity. Perhaps a cleaner version could be made using regular bindings + passing Eigen matrix pointers through python capsules if someone is motivated. # Example; ```python; from SofaPython import sparse; import numpy as np. import Sofa; Sofa.loadPlugin('Flexible'). def createScene(node):; template = 'Affine'. dofs = node.createObject('MechanicalObject', template = template, size = 1); dofs.init(); ; mass = node.createObject('AffineMass', template = template); mass.init(); mass.bwdInit(). ref = np.identity(12); ; with sparse.data_view(mass, 'massMatrix') as m:; assert (m == ref).all(). m[10, 10] = 14; ref[10, 10] = 14. # assert our in-place modifications are reflected; with sparse.data_view(mass, 'massMatrix') as mm:; assert (mm == ref).all(). m[0, 10] = 14; ref[0, 10] = 14. # sparsity change: scipy matrix reallocates, no longer aliases ; with sparse.data_view(mass, 'massMatrix') as mm:; assert not (mm == ref).all(); ; # modification commit happens here. with sparse.data_view(mass, 'massMatrix') as m:; assert (m == ref).all(); ```. # Changelog. - Added `DataTypeInfo` for `EigenBaseSparseMatrix` derived classes; - Added a bunch of C functions in `SofaPython/ctypes.cpp` for aliasing logic; - Added a ctypes binding for aliasing + contexts in `SofaPython.sparse`; - Added an example in `SofaPython/examples/sparse.py`; ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/411
https://github.com/sofa-framework/sofa/issues/412:49,Security,validat,validate,49,It would be nice to have a test in SofaTest that validate that all the element in the scene ; are correctly computing their BBox. . ______________________________________________________. Suggested labels: <!--- see https://github.com/sofa-framework/sofa/labels -->,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/412
https://github.com/sofa-framework/sofa/issues/412:27,Testability,test,test,27,It would be nice to have a test in SofaTest that validate that all the element in the scene ; are correctly computing their BBox. . ______________________________________________________. Suggested labels: <!--- see https://github.com/sofa-framework/sofa/labels -->,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/412
https://github.com/sofa-framework/sofa/issues/413:1140,Availability,ping,ping,1140,"Hi all,. For the next STC we are planning active coding sprint sessions to boost small tasks and have the pleasure to be working togther. . Feel free to propose any task in the comments!. Current task list (last update 2017-09-29):; - Deprecation: https://github.com/sofa-framework/sofa/issues/426; - Pluginization + SceneCreator dependencies (must be done AFTER deprecation): https://github.com/sofa-framework/sofa/issues/427; - `issofa_*` merges: https://github.com/sofa-framework/sofa/issues/428; - Code cleaning; - Doc. TODO List before the sprint:; - [x] finish to add the set management into the CMakeLists.txt (Damien & Bruno Carrez); - [x] make the list of component to deprecate (Fred, Stéphane, Guillaume); - [x] create a simple example of deprecation with the WashingMachineForceField (Damien); - [x] if needed make a list of ""advices"" we could add to the SceneChecker to warn user on how they can improve their scene (the StaticSolver thing) (Stéphane ?); - ~~add an attribute to BaseObjects to attach component quality info ?~~. Feel free to add whatever I mis-understood or forgot. ; ________________________________________; ping @sofa-framework/reviewers",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/413
https://github.com/sofa-framework/sofa/issues/413:212,Deployability,update,update,212,"Hi all,. For the next STC we are planning active coding sprint sessions to boost small tasks and have the pleasure to be working togther. . Feel free to propose any task in the comments!. Current task list (last update 2017-09-29):; - Deprecation: https://github.com/sofa-framework/sofa/issues/426; - Pluginization + SceneCreator dependencies (must be done AFTER deprecation): https://github.com/sofa-framework/sofa/issues/427; - `issofa_*` merges: https://github.com/sofa-framework/sofa/issues/428; - Code cleaning; - Doc. TODO List before the sprint:; - [x] finish to add the set management into the CMakeLists.txt (Damien & Bruno Carrez); - [x] make the list of component to deprecate (Fred, Stéphane, Guillaume); - [x] create a simple example of deprecation with the WashingMachineForceField (Damien); - [x] if needed make a list of ""advices"" we could add to the SceneChecker to warn user on how they can improve their scene (the StaticSolver thing) (Stéphane ?); - ~~add an attribute to BaseObjects to attach component quality info ?~~. Feel free to add whatever I mis-understood or forgot. ; ________________________________________; ping @sofa-framework/reviewers",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/413
https://github.com/sofa-framework/sofa/issues/413:330,Integrability,depend,dependencies,330,"Hi all,. For the next STC we are planning active coding sprint sessions to boost small tasks and have the pleasure to be working togther. . Feel free to propose any task in the comments!. Current task list (last update 2017-09-29):; - Deprecation: https://github.com/sofa-framework/sofa/issues/426; - Pluginization + SceneCreator dependencies (must be done AFTER deprecation): https://github.com/sofa-framework/sofa/issues/427; - `issofa_*` merges: https://github.com/sofa-framework/sofa/issues/428; - Code cleaning; - Doc. TODO List before the sprint:; - [x] finish to add the set management into the CMakeLists.txt (Damien & Bruno Carrez); - [x] make the list of component to deprecate (Fred, Stéphane, Guillaume); - [x] create a simple example of deprecation with the WashingMachineForceField (Damien); - [x] if needed make a list of ""advices"" we could add to the SceneChecker to warn user on how they can improve their scene (the StaticSolver thing) (Stéphane ?); - ~~add an attribute to BaseObjects to attach component quality info ?~~. Feel free to add whatever I mis-understood or forgot. ; ________________________________________; ping @sofa-framework/reviewers",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/413
https://github.com/sofa-framework/sofa/issues/413:301,Modifiability,Plugin,Pluginization,301,"Hi all,. For the next STC we are planning active coding sprint sessions to boost small tasks and have the pleasure to be working togther. . Feel free to propose any task in the comments!. Current task list (last update 2017-09-29):; - Deprecation: https://github.com/sofa-framework/sofa/issues/426; - Pluginization + SceneCreator dependencies (must be done AFTER deprecation): https://github.com/sofa-framework/sofa/issues/427; - `issofa_*` merges: https://github.com/sofa-framework/sofa/issues/428; - Code cleaning; - Doc. TODO List before the sprint:; - [x] finish to add the set management into the CMakeLists.txt (Damien & Bruno Carrez); - [x] make the list of component to deprecate (Fred, Stéphane, Guillaume); - [x] create a simple example of deprecation with the WashingMachineForceField (Damien); - [x] if needed make a list of ""advices"" we could add to the SceneChecker to warn user on how they can improve their scene (the StaticSolver thing) (Stéphane ?); - ~~add an attribute to BaseObjects to attach component quality info ?~~. Feel free to add whatever I mis-understood or forgot. ; ________________________________________; ping @sofa-framework/reviewers",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/413
https://github.com/sofa-framework/sofa/issues/413:732,Usability,simpl,simple,732,"Hi all,. For the next STC we are planning active coding sprint sessions to boost small tasks and have the pleasure to be working togther. . Feel free to propose any task in the comments!. Current task list (last update 2017-09-29):; - Deprecation: https://github.com/sofa-framework/sofa/issues/426; - Pluginization + SceneCreator dependencies (must be done AFTER deprecation): https://github.com/sofa-framework/sofa/issues/427; - `issofa_*` merges: https://github.com/sofa-framework/sofa/issues/428; - Code cleaning; - Doc. TODO List before the sprint:; - [x] finish to add the set management into the CMakeLists.txt (Damien & Bruno Carrez); - [x] make the list of component to deprecate (Fred, Stéphane, Guillaume); - [x] create a simple example of deprecation with the WashingMachineForceField (Damien); - [x] if needed make a list of ""advices"" we could add to the SceneChecker to warn user on how they can improve their scene (the StaticSolver thing) (Stéphane ?); - ~~add an attribute to BaseObjects to attach component quality info ?~~. Feel free to add whatever I mis-understood or forgot. ; ________________________________________; ping @sofa-framework/reviewers",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/413
https://github.com/sofa-framework/sofa/pull/414:1229,Availability,failure,failures,1229,"Hi,. This PR fix the live coding of python component. I found two problems. . One is a bug in the FileMonitor which prevent to monitor several files located in the same directory but given in a different manner as in: ; ```; ""./examples/Afile.txt""; ""/this/is/absolute/examples/Afile2.txt""; ```. The second problem is a missing PythonEnvironement::gil before calling python code. This PR fix the two. ; @guparan and @hugtalbot Could this PR be treated in fast-path please ? . @maxime-tournier I took me a while to understand that ; ```cpp; PythonEnvironment::gil lock(); ; ```; Is not doing anything useful. The problem is well known but in general it is quickly catched but here, as lock is a RAII, everything compile but just crash when calling python code. I'm quite sure this will happen to a lot of people so I wonder if we can make something more elegant that removing the default constructor and forcing to provide the *trace pointer (possibly nullptr). Any idea ? . ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/414
https://github.com/sofa-framework/sofa/pull/414:1279,Availability,failure,failures,1279,"Hi,. This PR fix the live coding of python component. I found two problems. . One is a bug in the FileMonitor which prevent to monitor several files located in the same directory but given in a different manner as in: ; ```; ""./examples/Afile.txt""; ""/this/is/absolute/examples/Afile2.txt""; ```. The second problem is a missing PythonEnvironement::gil before calling python code. This PR fix the two. ; @guparan and @hugtalbot Could this PR be treated in fast-path please ? . @maxime-tournier I took me a while to understand that ; ```cpp; PythonEnvironment::gil lock(); ; ```; Is not doing anything useful. The problem is well known but in general it is quickly catched but here, as lock is a RAII, everything compile but just crash when calling python code. I'm quite sure this will happen to a lot of people so I wonder if we can make something more elegant that removing the default constructor and forcing to provide the *trace pointer (possibly nullptr). Any idea ? . ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/414
https://github.com/sofa-framework/sofa/pull/414:127,Energy Efficiency,monitor,monitor,127,"Hi,. This PR fix the live coding of python component. I found two problems. . One is a bug in the FileMonitor which prevent to monitor several files located in the same directory but given in a different manner as in: ; ```; ""./examples/Afile.txt""; ""/this/is/absolute/examples/Afile2.txt""; ```. The second problem is a missing PythonEnvironement::gil before calling python code. This PR fix the two. ; @guparan and @hugtalbot Could this PR be treated in fast-path please ? . @maxime-tournier I took me a while to understand that ; ```cpp; PythonEnvironment::gil lock(); ; ```; Is not doing anything useful. The problem is well known but in general it is quickly catched but here, as lock is a RAII, everything compile but just crash when calling python code. I'm quite sure this will happen to a lot of people so I wonder if we can make something more elegant that removing the default constructor and forcing to provide the *trace pointer (possibly nullptr). Any idea ? . ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/414
https://github.com/sofa-framework/sofa/pull/414:1072,Integrability,message,message,1072,"Hi,. This PR fix the live coding of python component. I found two problems. . One is a bug in the FileMonitor which prevent to monitor several files located in the same directory but given in a different manner as in: ; ```; ""./examples/Afile.txt""; ""/this/is/absolute/examples/Afile2.txt""; ```. The second problem is a missing PythonEnvironement::gil before calling python code. This PR fix the two. ; @guparan and @hugtalbot Could this PR be treated in fast-path please ? . @maxime-tournier I took me a while to understand that ; ```cpp; PythonEnvironment::gil lock(); ; ```; Is not doing anything useful. The problem is well known but in general it is quickly catched but here, as lock is a RAII, everything compile but just crash when calling python code. I'm quite sure this will happen to a lot of people so I wonder if we can make something more elegant that removing the default constructor and forcing to provide the *trace pointer (possibly nullptr). Any idea ? . ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/414
https://github.com/sofa-framework/sofa/pull/414:1224,Testability,test,test,1224,"Hi,. This PR fix the live coding of python component. I found two problems. . One is a bug in the FileMonitor which prevent to monitor several files located in the same directory but given in a different manner as in: ; ```; ""./examples/Afile.txt""; ""/this/is/absolute/examples/Afile2.txt""; ```. The second problem is a missing PythonEnvironement::gil before calling python code. This PR fix the two. ; @guparan and @hugtalbot Could this PR be treated in fast-path please ? . @maxime-tournier I took me a while to understand that ; ```cpp; PythonEnvironment::gil lock(); ; ```; Is not doing anything useful. The problem is well known but in general it is quickly catched but here, as lock is a RAII, everything compile but just crash when calling python code. I'm quite sure this will happen to a lot of people so I wonder if we can make something more elegant that removing the default constructor and forcing to provide the *trace pointer (possibly nullptr). Any idea ? . ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/414
https://github.com/sofa-framework/sofa/pull/414:1274,Testability,test,test,1274,"Hi,. This PR fix the live coding of python component. I found two problems. . One is a bug in the FileMonitor which prevent to monitor several files located in the same directory but given in a different manner as in: ; ```; ""./examples/Afile.txt""; ""/this/is/absolute/examples/Afile2.txt""; ```. The second problem is a missing PythonEnvironement::gil before calling python code. This PR fix the two. ; @guparan and @hugtalbot Could this PR be treated in fast-path please ? . @maxime-tournier I took me a while to understand that ; ```cpp; PythonEnvironment::gil lock(); ; ```; Is not doing anything useful. The problem is well known but in general it is quickly catched but here, as lock is a RAII, everything compile but just crash when calling python code. I'm quite sure this will happen to a lot of people so I wonder if we can make something more elegant that removing the default constructor and forcing to provide the *trace pointer (possibly nullptr). Any idea ? . ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/414
https://github.com/sofa-framework/sofa/pull/415:385,Availability,failure,failures,385,PR #158 broke livecoding of shader. This PR restore it. @guparan and @hugtalbot Could this PR be treated in fast-path please ? . ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/415
https://github.com/sofa-framework/sofa/pull/415:435,Availability,failure,failures,435,PR #158 broke livecoding of shader. This PR restore it. @guparan and @hugtalbot Could this PR be treated in fast-path please ? . ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/415
https://github.com/sofa-framework/sofa/pull/415:228,Integrability,message,message,228,PR #158 broke livecoding of shader. This PR restore it. @guparan and @hugtalbot Could this PR be treated in fast-path please ? . ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/415
https://github.com/sofa-framework/sofa/pull/415:380,Testability,test,test,380,PR #158 broke livecoding of shader. This PR restore it. @guparan and @hugtalbot Could this PR be treated in fast-path please ? . ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/415
