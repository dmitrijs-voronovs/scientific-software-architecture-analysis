id,quality_attribute,keyword,matched_word,match_idx,sentence,source,author,repo,version,wiki,url
https://github.com/psi4/psi4/pull/470#issuecomment-249267903:18807,Testability,test,tests,18807,/470/files#diff-157 (0); > - _A_ tests/fsapt1/fsapt-ref/vis.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-158 (0); > - _A_ tests/fsapt1/input.dat; > https://github.com/psi4/psi4/pull/470/files#diff-159 (0); > - _A_ tests/fsapt1/output.ref; > https://github.com/psi4/psi4/pull/470/files#diff-160 (0); > - _A_ tests/fsapt2/CMakeLists.txt; > https://github.com/psi4/psi4/pull/470/files#diff-161 (0); > - _A_ tests/fsapt2/README; > https://github.com/psi4/psi4/pull/470/files#diff-162 (0); > - _A_ tests/fsapt2/fsapt-ref/Disp.dat; > https://github.com/psi4/psi4/pull/470/files#diff-163 (0); > - _A_ tests/fsapt2/fsapt-ref/Elst.dat; > https://github.com/psi4/psi4/pull/470/files#diff-164 (0); > - _A_ tests/fsapt2/fsapt-ref/Exch.dat; > https://github.com/psi4/psi4/pull/470/files#diff-165 (0); > - _A_ tests/fsapt2/fsapt-ref/IndAB.dat; > https://github.com/psi4/psi4/pull/470/files#diff-166 (0); > - _A_ tests/fsapt2/fsapt-ref/IndBA.dat; > https://github.com/psi4/psi4/pull/470/files#diff-167 (0); > - _A_ tests/fsapt2/fsapt-ref/QA.dat; > https://github.com/psi4/psi4/pull/470/files#diff-168 (0); > - _A_ tests/fsapt2/fsapt-ref/QB.dat; > https://github.com/psi4/psi4/pull/470/files#diff-169 (0); > - _A_ tests/fsapt2/fsapt-ref/ZA.dat; > https://github.com/psi4/psi4/pull/470/files#diff-170 (0); > - _A_ tests/fsapt2/fsapt-ref/ZB.dat; > https://github.com/psi4/psi4/pull/470/files#diff-171 (0); > - _A_ tests/fsapt2/fsapt-ref/geom.xyz; > https://github.com/psi4/psi4/pull/470/files#diff-172 (0); > - _A_ tests/fsapt2/input.dat; > https://github.com/psi4/psi4/pull/470/files#diff-173 (0); > - _A_ tests/fsapt2/output.ref; > https://github.com/psi4/psi4/pull/470/files#diff-174 (0); > - _A_ tests/isapt1/CMakeLists.txt; > https://github.com/psi4/psi4/pull/470/files#diff-175 (0); > - _A_ tests/isapt1/README; > https://github.com/psi4/psi4/pull/470/files#diff-176 (0); > - _A_ tests/isapt1/fsapt-ref/Disp.dat; > https://github.com/psi4/psi4/pull/470/files#diff-177 (0); > - _A_ tests/isapt1/fsapt-,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/470#issuecomment-249267903
https://github.com/psi4/psi4/pull/470#issuecomment-249267903:18906,Testability,test,tests,18906,ull/470/files#diff-158 (0); > - _A_ tests/fsapt1/input.dat; > https://github.com/psi4/psi4/pull/470/files#diff-159 (0); > - _A_ tests/fsapt1/output.ref; > https://github.com/psi4/psi4/pull/470/files#diff-160 (0); > - _A_ tests/fsapt2/CMakeLists.txt; > https://github.com/psi4/psi4/pull/470/files#diff-161 (0); > - _A_ tests/fsapt2/README; > https://github.com/psi4/psi4/pull/470/files#diff-162 (0); > - _A_ tests/fsapt2/fsapt-ref/Disp.dat; > https://github.com/psi4/psi4/pull/470/files#diff-163 (0); > - _A_ tests/fsapt2/fsapt-ref/Elst.dat; > https://github.com/psi4/psi4/pull/470/files#diff-164 (0); > - _A_ tests/fsapt2/fsapt-ref/Exch.dat; > https://github.com/psi4/psi4/pull/470/files#diff-165 (0); > - _A_ tests/fsapt2/fsapt-ref/IndAB.dat; > https://github.com/psi4/psi4/pull/470/files#diff-166 (0); > - _A_ tests/fsapt2/fsapt-ref/IndBA.dat; > https://github.com/psi4/psi4/pull/470/files#diff-167 (0); > - _A_ tests/fsapt2/fsapt-ref/QA.dat; > https://github.com/psi4/psi4/pull/470/files#diff-168 (0); > - _A_ tests/fsapt2/fsapt-ref/QB.dat; > https://github.com/psi4/psi4/pull/470/files#diff-169 (0); > - _A_ tests/fsapt2/fsapt-ref/ZA.dat; > https://github.com/psi4/psi4/pull/470/files#diff-170 (0); > - _A_ tests/fsapt2/fsapt-ref/ZB.dat; > https://github.com/psi4/psi4/pull/470/files#diff-171 (0); > - _A_ tests/fsapt2/fsapt-ref/geom.xyz; > https://github.com/psi4/psi4/pull/470/files#diff-172 (0); > - _A_ tests/fsapt2/input.dat; > https://github.com/psi4/psi4/pull/470/files#diff-173 (0); > - _A_ tests/fsapt2/output.ref; > https://github.com/psi4/psi4/pull/470/files#diff-174 (0); > - _A_ tests/isapt1/CMakeLists.txt; > https://github.com/psi4/psi4/pull/470/files#diff-175 (0); > - _A_ tests/isapt1/README; > https://github.com/psi4/psi4/pull/470/files#diff-176 (0); > - _A_ tests/isapt1/fsapt-ref/Disp.dat; > https://github.com/psi4/psi4/pull/470/files#diff-177 (0); > - _A_ tests/isapt1/fsapt-ref/Elst.dat; > https://github.com/psi4/psi4/pull/470/files#diff-178 (0); > - _A_ tests/isapt1/fsap,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/470#issuecomment-249267903
https://github.com/psi4/psi4/pull/470#issuecomment-249267903:19005,Testability,test,tests,19005,/files#diff-159 (0); > - _A_ tests/fsapt1/output.ref; > https://github.com/psi4/psi4/pull/470/files#diff-160 (0); > - _A_ tests/fsapt2/CMakeLists.txt; > https://github.com/psi4/psi4/pull/470/files#diff-161 (0); > - _A_ tests/fsapt2/README; > https://github.com/psi4/psi4/pull/470/files#diff-162 (0); > - _A_ tests/fsapt2/fsapt-ref/Disp.dat; > https://github.com/psi4/psi4/pull/470/files#diff-163 (0); > - _A_ tests/fsapt2/fsapt-ref/Elst.dat; > https://github.com/psi4/psi4/pull/470/files#diff-164 (0); > - _A_ tests/fsapt2/fsapt-ref/Exch.dat; > https://github.com/psi4/psi4/pull/470/files#diff-165 (0); > - _A_ tests/fsapt2/fsapt-ref/IndAB.dat; > https://github.com/psi4/psi4/pull/470/files#diff-166 (0); > - _A_ tests/fsapt2/fsapt-ref/IndBA.dat; > https://github.com/psi4/psi4/pull/470/files#diff-167 (0); > - _A_ tests/fsapt2/fsapt-ref/QA.dat; > https://github.com/psi4/psi4/pull/470/files#diff-168 (0); > - _A_ tests/fsapt2/fsapt-ref/QB.dat; > https://github.com/psi4/psi4/pull/470/files#diff-169 (0); > - _A_ tests/fsapt2/fsapt-ref/ZA.dat; > https://github.com/psi4/psi4/pull/470/files#diff-170 (0); > - _A_ tests/fsapt2/fsapt-ref/ZB.dat; > https://github.com/psi4/psi4/pull/470/files#diff-171 (0); > - _A_ tests/fsapt2/fsapt-ref/geom.xyz; > https://github.com/psi4/psi4/pull/470/files#diff-172 (0); > - _A_ tests/fsapt2/input.dat; > https://github.com/psi4/psi4/pull/470/files#diff-173 (0); > - _A_ tests/fsapt2/output.ref; > https://github.com/psi4/psi4/pull/470/files#diff-174 (0); > - _A_ tests/isapt1/CMakeLists.txt; > https://github.com/psi4/psi4/pull/470/files#diff-175 (0); > - _A_ tests/isapt1/README; > https://github.com/psi4/psi4/pull/470/files#diff-176 (0); > - _A_ tests/isapt1/fsapt-ref/Disp.dat; > https://github.com/psi4/psi4/pull/470/files#diff-177 (0); > - _A_ tests/isapt1/fsapt-ref/Elst.dat; > https://github.com/psi4/psi4/pull/470/files#diff-178 (0); > - _A_ tests/isapt1/fsapt-ref/Exch.dat; > https://github.com/psi4/psi4/pull/470/files#diff-179 (0); > - _A_ tests/isapt1/fs,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/470#issuecomment-249267903
https://github.com/psi4/psi4/pull/470#issuecomment-249267903:19104,Testability,test,tests,19104,#diff-160 (0); > - _A_ tests/fsapt2/CMakeLists.txt; > https://github.com/psi4/psi4/pull/470/files#diff-161 (0); > - _A_ tests/fsapt2/README; > https://github.com/psi4/psi4/pull/470/files#diff-162 (0); > - _A_ tests/fsapt2/fsapt-ref/Disp.dat; > https://github.com/psi4/psi4/pull/470/files#diff-163 (0); > - _A_ tests/fsapt2/fsapt-ref/Elst.dat; > https://github.com/psi4/psi4/pull/470/files#diff-164 (0); > - _A_ tests/fsapt2/fsapt-ref/Exch.dat; > https://github.com/psi4/psi4/pull/470/files#diff-165 (0); > - _A_ tests/fsapt2/fsapt-ref/IndAB.dat; > https://github.com/psi4/psi4/pull/470/files#diff-166 (0); > - _A_ tests/fsapt2/fsapt-ref/IndBA.dat; > https://github.com/psi4/psi4/pull/470/files#diff-167 (0); > - _A_ tests/fsapt2/fsapt-ref/QA.dat; > https://github.com/psi4/psi4/pull/470/files#diff-168 (0); > - _A_ tests/fsapt2/fsapt-ref/QB.dat; > https://github.com/psi4/psi4/pull/470/files#diff-169 (0); > - _A_ tests/fsapt2/fsapt-ref/ZA.dat; > https://github.com/psi4/psi4/pull/470/files#diff-170 (0); > - _A_ tests/fsapt2/fsapt-ref/ZB.dat; > https://github.com/psi4/psi4/pull/470/files#diff-171 (0); > - _A_ tests/fsapt2/fsapt-ref/geom.xyz; > https://github.com/psi4/psi4/pull/470/files#diff-172 (0); > - _A_ tests/fsapt2/input.dat; > https://github.com/psi4/psi4/pull/470/files#diff-173 (0); > - _A_ tests/fsapt2/output.ref; > https://github.com/psi4/psi4/pull/470/files#diff-174 (0); > - _A_ tests/isapt1/CMakeLists.txt; > https://github.com/psi4/psi4/pull/470/files#diff-175 (0); > - _A_ tests/isapt1/README; > https://github.com/psi4/psi4/pull/470/files#diff-176 (0); > - _A_ tests/isapt1/fsapt-ref/Disp.dat; > https://github.com/psi4/psi4/pull/470/files#diff-177 (0); > - _A_ tests/isapt1/fsapt-ref/Elst.dat; > https://github.com/psi4/psi4/pull/470/files#diff-178 (0); > - _A_ tests/isapt1/fsapt-ref/Exch.dat; > https://github.com/psi4/psi4/pull/470/files#diff-179 (0); > - _A_ tests/isapt1/fsapt-ref/IndAB.dat; > https://github.com/psi4/psi4/pull/470/files#diff-180 (0); > - _A_ tests/isapt1,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/470#issuecomment-249267903
https://github.com/psi4/psi4/pull/470#issuecomment-249267903:19203,Testability,test,tests,19203,ff-161 (0); > - _A_ tests/fsapt2/README; > https://github.com/psi4/psi4/pull/470/files#diff-162 (0); > - _A_ tests/fsapt2/fsapt-ref/Disp.dat; > https://github.com/psi4/psi4/pull/470/files#diff-163 (0); > - _A_ tests/fsapt2/fsapt-ref/Elst.dat; > https://github.com/psi4/psi4/pull/470/files#diff-164 (0); > - _A_ tests/fsapt2/fsapt-ref/Exch.dat; > https://github.com/psi4/psi4/pull/470/files#diff-165 (0); > - _A_ tests/fsapt2/fsapt-ref/IndAB.dat; > https://github.com/psi4/psi4/pull/470/files#diff-166 (0); > - _A_ tests/fsapt2/fsapt-ref/IndBA.dat; > https://github.com/psi4/psi4/pull/470/files#diff-167 (0); > - _A_ tests/fsapt2/fsapt-ref/QA.dat; > https://github.com/psi4/psi4/pull/470/files#diff-168 (0); > - _A_ tests/fsapt2/fsapt-ref/QB.dat; > https://github.com/psi4/psi4/pull/470/files#diff-169 (0); > - _A_ tests/fsapt2/fsapt-ref/ZA.dat; > https://github.com/psi4/psi4/pull/470/files#diff-170 (0); > - _A_ tests/fsapt2/fsapt-ref/ZB.dat; > https://github.com/psi4/psi4/pull/470/files#diff-171 (0); > - _A_ tests/fsapt2/fsapt-ref/geom.xyz; > https://github.com/psi4/psi4/pull/470/files#diff-172 (0); > - _A_ tests/fsapt2/input.dat; > https://github.com/psi4/psi4/pull/470/files#diff-173 (0); > - _A_ tests/fsapt2/output.ref; > https://github.com/psi4/psi4/pull/470/files#diff-174 (0); > - _A_ tests/isapt1/CMakeLists.txt; > https://github.com/psi4/psi4/pull/470/files#diff-175 (0); > - _A_ tests/isapt1/README; > https://github.com/psi4/psi4/pull/470/files#diff-176 (0); > - _A_ tests/isapt1/fsapt-ref/Disp.dat; > https://github.com/psi4/psi4/pull/470/files#diff-177 (0); > - _A_ tests/isapt1/fsapt-ref/Elst.dat; > https://github.com/psi4/psi4/pull/470/files#diff-178 (0); > - _A_ tests/isapt1/fsapt-ref/Exch.dat; > https://github.com/psi4/psi4/pull/470/files#diff-179 (0); > - _A_ tests/isapt1/fsapt-ref/IndAB.dat; > https://github.com/psi4/psi4/pull/470/files#diff-180 (0); > - _A_ tests/isapt1/fsapt-ref/IndBA.dat; > https://github.com/psi4/psi4/pull/470/files#diff-181 (0); > - _A_ tests/isap,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/470#issuecomment-249267903
https://github.com/psi4/psi4/pull/470#issuecomment-249267903:19304,Testability,test,tests,19304,0); > - _A_ tests/fsapt2/fsapt-ref/Disp.dat; > https://github.com/psi4/psi4/pull/470/files#diff-163 (0); > - _A_ tests/fsapt2/fsapt-ref/Elst.dat; > https://github.com/psi4/psi4/pull/470/files#diff-164 (0); > - _A_ tests/fsapt2/fsapt-ref/Exch.dat; > https://github.com/psi4/psi4/pull/470/files#diff-165 (0); > - _A_ tests/fsapt2/fsapt-ref/IndAB.dat; > https://github.com/psi4/psi4/pull/470/files#diff-166 (0); > - _A_ tests/fsapt2/fsapt-ref/IndBA.dat; > https://github.com/psi4/psi4/pull/470/files#diff-167 (0); > - _A_ tests/fsapt2/fsapt-ref/QA.dat; > https://github.com/psi4/psi4/pull/470/files#diff-168 (0); > - _A_ tests/fsapt2/fsapt-ref/QB.dat; > https://github.com/psi4/psi4/pull/470/files#diff-169 (0); > - _A_ tests/fsapt2/fsapt-ref/ZA.dat; > https://github.com/psi4/psi4/pull/470/files#diff-170 (0); > - _A_ tests/fsapt2/fsapt-ref/ZB.dat; > https://github.com/psi4/psi4/pull/470/files#diff-171 (0); > - _A_ tests/fsapt2/fsapt-ref/geom.xyz; > https://github.com/psi4/psi4/pull/470/files#diff-172 (0); > - _A_ tests/fsapt2/input.dat; > https://github.com/psi4/psi4/pull/470/files#diff-173 (0); > - _A_ tests/fsapt2/output.ref; > https://github.com/psi4/psi4/pull/470/files#diff-174 (0); > - _A_ tests/isapt1/CMakeLists.txt; > https://github.com/psi4/psi4/pull/470/files#diff-175 (0); > - _A_ tests/isapt1/README; > https://github.com/psi4/psi4/pull/470/files#diff-176 (0); > - _A_ tests/isapt1/fsapt-ref/Disp.dat; > https://github.com/psi4/psi4/pull/470/files#diff-177 (0); > - _A_ tests/isapt1/fsapt-ref/Elst.dat; > https://github.com/psi4/psi4/pull/470/files#diff-178 (0); > - _A_ tests/isapt1/fsapt-ref/Exch.dat; > https://github.com/psi4/psi4/pull/470/files#diff-179 (0); > - _A_ tests/isapt1/fsapt-ref/IndAB.dat; > https://github.com/psi4/psi4/pull/470/files#diff-180 (0); > - _A_ tests/isapt1/fsapt-ref/IndBA.dat; > https://github.com/psi4/psi4/pull/470/files#diff-181 (0); > - _A_ tests/isapt1/fsapt-ref/QA.dat; > https://github.com/psi4/psi4/pull/470/files#diff-182 (0); > - _A_ tests/i,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/470#issuecomment-249267903
https://github.com/psi4/psi4/pull/470#issuecomment-249267903:19396,Testability,test,tests,19396,iff-163 (0); > - _A_ tests/fsapt2/fsapt-ref/Elst.dat; > https://github.com/psi4/psi4/pull/470/files#diff-164 (0); > - _A_ tests/fsapt2/fsapt-ref/Exch.dat; > https://github.com/psi4/psi4/pull/470/files#diff-165 (0); > - _A_ tests/fsapt2/fsapt-ref/IndAB.dat; > https://github.com/psi4/psi4/pull/470/files#diff-166 (0); > - _A_ tests/fsapt2/fsapt-ref/IndBA.dat; > https://github.com/psi4/psi4/pull/470/files#diff-167 (0); > - _A_ tests/fsapt2/fsapt-ref/QA.dat; > https://github.com/psi4/psi4/pull/470/files#diff-168 (0); > - _A_ tests/fsapt2/fsapt-ref/QB.dat; > https://github.com/psi4/psi4/pull/470/files#diff-169 (0); > - _A_ tests/fsapt2/fsapt-ref/ZA.dat; > https://github.com/psi4/psi4/pull/470/files#diff-170 (0); > - _A_ tests/fsapt2/fsapt-ref/ZB.dat; > https://github.com/psi4/psi4/pull/470/files#diff-171 (0); > - _A_ tests/fsapt2/fsapt-ref/geom.xyz; > https://github.com/psi4/psi4/pull/470/files#diff-172 (0); > - _A_ tests/fsapt2/input.dat; > https://github.com/psi4/psi4/pull/470/files#diff-173 (0); > - _A_ tests/fsapt2/output.ref; > https://github.com/psi4/psi4/pull/470/files#diff-174 (0); > - _A_ tests/isapt1/CMakeLists.txt; > https://github.com/psi4/psi4/pull/470/files#diff-175 (0); > - _A_ tests/isapt1/README; > https://github.com/psi4/psi4/pull/470/files#diff-176 (0); > - _A_ tests/isapt1/fsapt-ref/Disp.dat; > https://github.com/psi4/psi4/pull/470/files#diff-177 (0); > - _A_ tests/isapt1/fsapt-ref/Elst.dat; > https://github.com/psi4/psi4/pull/470/files#diff-178 (0); > - _A_ tests/isapt1/fsapt-ref/Exch.dat; > https://github.com/psi4/psi4/pull/470/files#diff-179 (0); > - _A_ tests/isapt1/fsapt-ref/IndAB.dat; > https://github.com/psi4/psi4/pull/470/files#diff-180 (0); > - _A_ tests/isapt1/fsapt-ref/IndBA.dat; > https://github.com/psi4/psi4/pull/470/files#diff-181 (0); > - _A_ tests/isapt1/fsapt-ref/QA.dat; > https://github.com/psi4/psi4/pull/470/files#diff-182 (0); > - _A_ tests/isapt1/fsapt-ref/QB.dat; > https://github.com/psi4/psi4/pull/470/files#diff-183 (0); > - _A_ t,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/470#issuecomment-249267903
https://github.com/psi4/psi4/pull/470#issuecomment-249267903:19489,Testability,test,tests,19489,iles#diff-164 (0); > - _A_ tests/fsapt2/fsapt-ref/Exch.dat; > https://github.com/psi4/psi4/pull/470/files#diff-165 (0); > - _A_ tests/fsapt2/fsapt-ref/IndAB.dat; > https://github.com/psi4/psi4/pull/470/files#diff-166 (0); > - _A_ tests/fsapt2/fsapt-ref/IndBA.dat; > https://github.com/psi4/psi4/pull/470/files#diff-167 (0); > - _A_ tests/fsapt2/fsapt-ref/QA.dat; > https://github.com/psi4/psi4/pull/470/files#diff-168 (0); > - _A_ tests/fsapt2/fsapt-ref/QB.dat; > https://github.com/psi4/psi4/pull/470/files#diff-169 (0); > - _A_ tests/fsapt2/fsapt-ref/ZA.dat; > https://github.com/psi4/psi4/pull/470/files#diff-170 (0); > - _A_ tests/fsapt2/fsapt-ref/ZB.dat; > https://github.com/psi4/psi4/pull/470/files#diff-171 (0); > - _A_ tests/fsapt2/fsapt-ref/geom.xyz; > https://github.com/psi4/psi4/pull/470/files#diff-172 (0); > - _A_ tests/fsapt2/input.dat; > https://github.com/psi4/psi4/pull/470/files#diff-173 (0); > - _A_ tests/fsapt2/output.ref; > https://github.com/psi4/psi4/pull/470/files#diff-174 (0); > - _A_ tests/isapt1/CMakeLists.txt; > https://github.com/psi4/psi4/pull/470/files#diff-175 (0); > - _A_ tests/isapt1/README; > https://github.com/psi4/psi4/pull/470/files#diff-176 (0); > - _A_ tests/isapt1/fsapt-ref/Disp.dat; > https://github.com/psi4/psi4/pull/470/files#diff-177 (0); > - _A_ tests/isapt1/fsapt-ref/Elst.dat; > https://github.com/psi4/psi4/pull/470/files#diff-178 (0); > - _A_ tests/isapt1/fsapt-ref/Exch.dat; > https://github.com/psi4/psi4/pull/470/files#diff-179 (0); > - _A_ tests/isapt1/fsapt-ref/IndAB.dat; > https://github.com/psi4/psi4/pull/470/files#diff-180 (0); > - _A_ tests/isapt1/fsapt-ref/IndBA.dat; > https://github.com/psi4/psi4/pull/470/files#diff-181 (0); > - _A_ tests/isapt1/fsapt-ref/QA.dat; > https://github.com/psi4/psi4/pull/470/files#diff-182 (0); > - _A_ tests/isapt1/fsapt-ref/QB.dat; > https://github.com/psi4/psi4/pull/470/files#diff-183 (0); > - _A_ tests/isapt1/fsapt-ref/ZA.dat; > https://github.com/psi4/psi4/pull/470/files#diff-184 (0); > - _,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/470#issuecomment-249267903
https://github.com/psi4/psi4/pull/470#issuecomment-249267903:19586,Testability,test,tests,19586,s#diff-165 (0); > - _A_ tests/fsapt2/fsapt-ref/IndAB.dat; > https://github.com/psi4/psi4/pull/470/files#diff-166 (0); > - _A_ tests/fsapt2/fsapt-ref/IndBA.dat; > https://github.com/psi4/psi4/pull/470/files#diff-167 (0); > - _A_ tests/fsapt2/fsapt-ref/QA.dat; > https://github.com/psi4/psi4/pull/470/files#diff-168 (0); > - _A_ tests/fsapt2/fsapt-ref/QB.dat; > https://github.com/psi4/psi4/pull/470/files#diff-169 (0); > - _A_ tests/fsapt2/fsapt-ref/ZA.dat; > https://github.com/psi4/psi4/pull/470/files#diff-170 (0); > - _A_ tests/fsapt2/fsapt-ref/ZB.dat; > https://github.com/psi4/psi4/pull/470/files#diff-171 (0); > - _A_ tests/fsapt2/fsapt-ref/geom.xyz; > https://github.com/psi4/psi4/pull/470/files#diff-172 (0); > - _A_ tests/fsapt2/input.dat; > https://github.com/psi4/psi4/pull/470/files#diff-173 (0); > - _A_ tests/fsapt2/output.ref; > https://github.com/psi4/psi4/pull/470/files#diff-174 (0); > - _A_ tests/isapt1/CMakeLists.txt; > https://github.com/psi4/psi4/pull/470/files#diff-175 (0); > - _A_ tests/isapt1/README; > https://github.com/psi4/psi4/pull/470/files#diff-176 (0); > - _A_ tests/isapt1/fsapt-ref/Disp.dat; > https://github.com/psi4/psi4/pull/470/files#diff-177 (0); > - _A_ tests/isapt1/fsapt-ref/Elst.dat; > https://github.com/psi4/psi4/pull/470/files#diff-178 (0); > - _A_ tests/isapt1/fsapt-ref/Exch.dat; > https://github.com/psi4/psi4/pull/470/files#diff-179 (0); > - _A_ tests/isapt1/fsapt-ref/IndAB.dat; > https://github.com/psi4/psi4/pull/470/files#diff-180 (0); > - _A_ tests/isapt1/fsapt-ref/IndBA.dat; > https://github.com/psi4/psi4/pull/470/files#diff-181 (0); > - _A_ tests/isapt1/fsapt-ref/QA.dat; > https://github.com/psi4/psi4/pull/470/files#diff-182 (0); > - _A_ tests/isapt1/fsapt-ref/QB.dat; > https://github.com/psi4/psi4/pull/470/files#diff-183 (0); > - _A_ tests/isapt1/fsapt-ref/ZA.dat; > https://github.com/psi4/psi4/pull/470/files#diff-184 (0); > - _A_ tests/isapt1/fsapt-ref/ZB.dat; > https://github.com/psi4/psi4/pull/470/files#diff-185 (0); > - _A_ te,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/470#issuecomment-249267903
https://github.com/psi4/psi4/pull/470#issuecomment-249267903:19675,Testability,test,tests,19675,psi4/pull/470/files#diff-166 (0); > - _A_ tests/fsapt2/fsapt-ref/IndBA.dat; > https://github.com/psi4/psi4/pull/470/files#diff-167 (0); > - _A_ tests/fsapt2/fsapt-ref/QA.dat; > https://github.com/psi4/psi4/pull/470/files#diff-168 (0); > - _A_ tests/fsapt2/fsapt-ref/QB.dat; > https://github.com/psi4/psi4/pull/470/files#diff-169 (0); > - _A_ tests/fsapt2/fsapt-ref/ZA.dat; > https://github.com/psi4/psi4/pull/470/files#diff-170 (0); > - _A_ tests/fsapt2/fsapt-ref/ZB.dat; > https://github.com/psi4/psi4/pull/470/files#diff-171 (0); > - _A_ tests/fsapt2/fsapt-ref/geom.xyz; > https://github.com/psi4/psi4/pull/470/files#diff-172 (0); > - _A_ tests/fsapt2/input.dat; > https://github.com/psi4/psi4/pull/470/files#diff-173 (0); > - _A_ tests/fsapt2/output.ref; > https://github.com/psi4/psi4/pull/470/files#diff-174 (0); > - _A_ tests/isapt1/CMakeLists.txt; > https://github.com/psi4/psi4/pull/470/files#diff-175 (0); > - _A_ tests/isapt1/README; > https://github.com/psi4/psi4/pull/470/files#diff-176 (0); > - _A_ tests/isapt1/fsapt-ref/Disp.dat; > https://github.com/psi4/psi4/pull/470/files#diff-177 (0); > - _A_ tests/isapt1/fsapt-ref/Elst.dat; > https://github.com/psi4/psi4/pull/470/files#diff-178 (0); > - _A_ tests/isapt1/fsapt-ref/Exch.dat; > https://github.com/psi4/psi4/pull/470/files#diff-179 (0); > - _A_ tests/isapt1/fsapt-ref/IndAB.dat; > https://github.com/psi4/psi4/pull/470/files#diff-180 (0); > - _A_ tests/isapt1/fsapt-ref/IndBA.dat; > https://github.com/psi4/psi4/pull/470/files#diff-181 (0); > - _A_ tests/isapt1/fsapt-ref/QA.dat; > https://github.com/psi4/psi4/pull/470/files#diff-182 (0); > - _A_ tests/isapt1/fsapt-ref/QB.dat; > https://github.com/psi4/psi4/pull/470/files#diff-183 (0); > - _A_ tests/isapt1/fsapt-ref/ZA.dat; > https://github.com/psi4/psi4/pull/470/files#diff-184 (0); > - _A_ tests/isapt1/fsapt-ref/ZB.dat; > https://github.com/psi4/psi4/pull/470/files#diff-185 (0); > - _A_ tests/isapt1/fsapt-ref/geom.xyz; > https://github.com/psi4/psi4/pull/470/files#diff-18,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/470#issuecomment-249267903
https://github.com/psi4/psi4/pull/470#issuecomment-249267903:19776,Testability,test,tests,19776,/psi4/pull/470/files#diff-167 (0); > - _A_ tests/fsapt2/fsapt-ref/QA.dat; > https://github.com/psi4/psi4/pull/470/files#diff-168 (0); > - _A_ tests/fsapt2/fsapt-ref/QB.dat; > https://github.com/psi4/psi4/pull/470/files#diff-169 (0); > - _A_ tests/fsapt2/fsapt-ref/ZA.dat; > https://github.com/psi4/psi4/pull/470/files#diff-170 (0); > - _A_ tests/fsapt2/fsapt-ref/ZB.dat; > https://github.com/psi4/psi4/pull/470/files#diff-171 (0); > - _A_ tests/fsapt2/fsapt-ref/geom.xyz; > https://github.com/psi4/psi4/pull/470/files#diff-172 (0); > - _A_ tests/fsapt2/input.dat; > https://github.com/psi4/psi4/pull/470/files#diff-173 (0); > - _A_ tests/fsapt2/output.ref; > https://github.com/psi4/psi4/pull/470/files#diff-174 (0); > - _A_ tests/isapt1/CMakeLists.txt; > https://github.com/psi4/psi4/pull/470/files#diff-175 (0); > - _A_ tests/isapt1/README; > https://github.com/psi4/psi4/pull/470/files#diff-176 (0); > - _A_ tests/isapt1/fsapt-ref/Disp.dat; > https://github.com/psi4/psi4/pull/470/files#diff-177 (0); > - _A_ tests/isapt1/fsapt-ref/Elst.dat; > https://github.com/psi4/psi4/pull/470/files#diff-178 (0); > - _A_ tests/isapt1/fsapt-ref/Exch.dat; > https://github.com/psi4/psi4/pull/470/files#diff-179 (0); > - _A_ tests/isapt1/fsapt-ref/IndAB.dat; > https://github.com/psi4/psi4/pull/470/files#diff-180 (0); > - _A_ tests/isapt1/fsapt-ref/IndBA.dat; > https://github.com/psi4/psi4/pull/470/files#diff-181 (0); > - _A_ tests/isapt1/fsapt-ref/QA.dat; > https://github.com/psi4/psi4/pull/470/files#diff-182 (0); > - _A_ tests/isapt1/fsapt-ref/QB.dat; > https://github.com/psi4/psi4/pull/470/files#diff-183 (0); > - _A_ tests/isapt1/fsapt-ref/ZA.dat; > https://github.com/psi4/psi4/pull/470/files#diff-184 (0); > - _A_ tests/isapt1/fsapt-ref/ZB.dat; > https://github.com/psi4/psi4/pull/470/files#diff-185 (0); > - _A_ tests/isapt1/fsapt-ref/geom.xyz; > https://github.com/psi4/psi4/pull/470/files#diff-186 (0); > - _A_ tests/isapt1/input.dat; > https://github.com/psi4/psi4/pull/470/files#diff-187 (0); > ,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/470#issuecomment-249267903
https://github.com/psi4/psi4/pull/470#issuecomment-249267903:19877,Testability,test,tests,19877,si4/pull/470/files#diff-168 (0); > - _A_ tests/fsapt2/fsapt-ref/QB.dat; > https://github.com/psi4/psi4/pull/470/files#diff-169 (0); > - _A_ tests/fsapt2/fsapt-ref/ZA.dat; > https://github.com/psi4/psi4/pull/470/files#diff-170 (0); > - _A_ tests/fsapt2/fsapt-ref/ZB.dat; > https://github.com/psi4/psi4/pull/470/files#diff-171 (0); > - _A_ tests/fsapt2/fsapt-ref/geom.xyz; > https://github.com/psi4/psi4/pull/470/files#diff-172 (0); > - _A_ tests/fsapt2/input.dat; > https://github.com/psi4/psi4/pull/470/files#diff-173 (0); > - _A_ tests/fsapt2/output.ref; > https://github.com/psi4/psi4/pull/470/files#diff-174 (0); > - _A_ tests/isapt1/CMakeLists.txt; > https://github.com/psi4/psi4/pull/470/files#diff-175 (0); > - _A_ tests/isapt1/README; > https://github.com/psi4/psi4/pull/470/files#diff-176 (0); > - _A_ tests/isapt1/fsapt-ref/Disp.dat; > https://github.com/psi4/psi4/pull/470/files#diff-177 (0); > - _A_ tests/isapt1/fsapt-ref/Elst.dat; > https://github.com/psi4/psi4/pull/470/files#diff-178 (0); > - _A_ tests/isapt1/fsapt-ref/Exch.dat; > https://github.com/psi4/psi4/pull/470/files#diff-179 (0); > - _A_ tests/isapt1/fsapt-ref/IndAB.dat; > https://github.com/psi4/psi4/pull/470/files#diff-180 (0); > - _A_ tests/isapt1/fsapt-ref/IndBA.dat; > https://github.com/psi4/psi4/pull/470/files#diff-181 (0); > - _A_ tests/isapt1/fsapt-ref/QA.dat; > https://github.com/psi4/psi4/pull/470/files#diff-182 (0); > - _A_ tests/isapt1/fsapt-ref/QB.dat; > https://github.com/psi4/psi4/pull/470/files#diff-183 (0); > - _A_ tests/isapt1/fsapt-ref/ZA.dat; > https://github.com/psi4/psi4/pull/470/files#diff-184 (0); > - _A_ tests/isapt1/fsapt-ref/ZB.dat; > https://github.com/psi4/psi4/pull/470/files#diff-185 (0); > - _A_ tests/isapt1/fsapt-ref/geom.xyz; > https://github.com/psi4/psi4/pull/470/files#diff-186 (0); > - _A_ tests/isapt1/input.dat; > https://github.com/psi4/psi4/pull/470/files#diff-187 (0); > - _A_ tests/isapt1/output.ref; > https://github.com/psi4/psi4/pull/470/files#diff-188 (0); > - _A_ te,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/470#issuecomment-249267903
https://github.com/psi4/psi4/pull/470#issuecomment-249267903:19978,Testability,test,tests,19978,/pull/470/files#diff-169 (0); > - _A_ tests/fsapt2/fsapt-ref/ZA.dat; > https://github.com/psi4/psi4/pull/470/files#diff-170 (0); > - _A_ tests/fsapt2/fsapt-ref/ZB.dat; > https://github.com/psi4/psi4/pull/470/files#diff-171 (0); > - _A_ tests/fsapt2/fsapt-ref/geom.xyz; > https://github.com/psi4/psi4/pull/470/files#diff-172 (0); > - _A_ tests/fsapt2/input.dat; > https://github.com/psi4/psi4/pull/470/files#diff-173 (0); > - _A_ tests/fsapt2/output.ref; > https://github.com/psi4/psi4/pull/470/files#diff-174 (0); > - _A_ tests/isapt1/CMakeLists.txt; > https://github.com/psi4/psi4/pull/470/files#diff-175 (0); > - _A_ tests/isapt1/README; > https://github.com/psi4/psi4/pull/470/files#diff-176 (0); > - _A_ tests/isapt1/fsapt-ref/Disp.dat; > https://github.com/psi4/psi4/pull/470/files#diff-177 (0); > - _A_ tests/isapt1/fsapt-ref/Elst.dat; > https://github.com/psi4/psi4/pull/470/files#diff-178 (0); > - _A_ tests/isapt1/fsapt-ref/Exch.dat; > https://github.com/psi4/psi4/pull/470/files#diff-179 (0); > - _A_ tests/isapt1/fsapt-ref/IndAB.dat; > https://github.com/psi4/psi4/pull/470/files#diff-180 (0); > - _A_ tests/isapt1/fsapt-ref/IndBA.dat; > https://github.com/psi4/psi4/pull/470/files#diff-181 (0); > - _A_ tests/isapt1/fsapt-ref/QA.dat; > https://github.com/psi4/psi4/pull/470/files#diff-182 (0); > - _A_ tests/isapt1/fsapt-ref/QB.dat; > https://github.com/psi4/psi4/pull/470/files#diff-183 (0); > - _A_ tests/isapt1/fsapt-ref/ZA.dat; > https://github.com/psi4/psi4/pull/470/files#diff-184 (0); > - _A_ tests/isapt1/fsapt-ref/ZB.dat; > https://github.com/psi4/psi4/pull/470/files#diff-185 (0); > - _A_ tests/isapt1/fsapt-ref/geom.xyz; > https://github.com/psi4/psi4/pull/470/files#diff-186 (0); > - _A_ tests/isapt1/input.dat; > https://github.com/psi4/psi4/pull/470/files#diff-187 (0); > - _A_ tests/isapt1/output.ref; > https://github.com/psi4/psi4/pull/470/files#diff-188 (0); > - _A_ tests/isapt1/plot-ref/DA.png; > https://github.com/psi4/psi4/pull/470/files#diff-189 (0); > - _A_ tests,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/470#issuecomment-249267903
https://github.com/psi4/psi4/pull/470#issuecomment-249267903:20080,Testability,test,tests,20080,ll/470/files#diff-170 (0); > - _A_ tests/fsapt2/fsapt-ref/ZB.dat; > https://github.com/psi4/psi4/pull/470/files#diff-171 (0); > - _A_ tests/fsapt2/fsapt-ref/geom.xyz; > https://github.com/psi4/psi4/pull/470/files#diff-172 (0); > - _A_ tests/fsapt2/input.dat; > https://github.com/psi4/psi4/pull/470/files#diff-173 (0); > - _A_ tests/fsapt2/output.ref; > https://github.com/psi4/psi4/pull/470/files#diff-174 (0); > - _A_ tests/isapt1/CMakeLists.txt; > https://github.com/psi4/psi4/pull/470/files#diff-175 (0); > - _A_ tests/isapt1/README; > https://github.com/psi4/psi4/pull/470/files#diff-176 (0); > - _A_ tests/isapt1/fsapt-ref/Disp.dat; > https://github.com/psi4/psi4/pull/470/files#diff-177 (0); > - _A_ tests/isapt1/fsapt-ref/Elst.dat; > https://github.com/psi4/psi4/pull/470/files#diff-178 (0); > - _A_ tests/isapt1/fsapt-ref/Exch.dat; > https://github.com/psi4/psi4/pull/470/files#diff-179 (0); > - _A_ tests/isapt1/fsapt-ref/IndAB.dat; > https://github.com/psi4/psi4/pull/470/files#diff-180 (0); > - _A_ tests/isapt1/fsapt-ref/IndBA.dat; > https://github.com/psi4/psi4/pull/470/files#diff-181 (0); > - _A_ tests/isapt1/fsapt-ref/QA.dat; > https://github.com/psi4/psi4/pull/470/files#diff-182 (0); > - _A_ tests/isapt1/fsapt-ref/QB.dat; > https://github.com/psi4/psi4/pull/470/files#diff-183 (0); > - _A_ tests/isapt1/fsapt-ref/ZA.dat; > https://github.com/psi4/psi4/pull/470/files#diff-184 (0); > - _A_ tests/isapt1/fsapt-ref/ZB.dat; > https://github.com/psi4/psi4/pull/470/files#diff-185 (0); > - _A_ tests/isapt1/fsapt-ref/geom.xyz; > https://github.com/psi4/psi4/pull/470/files#diff-186 (0); > - _A_ tests/isapt1/input.dat; > https://github.com/psi4/psi4/pull/470/files#diff-187 (0); > - _A_ tests/isapt1/output.ref; > https://github.com/psi4/psi4/pull/470/files#diff-188 (0); > - _A_ tests/isapt1/plot-ref/DA.png; > https://github.com/psi4/psi4/pull/470/files#diff-189 (0); > - _A_ tests/isapt1/plot-ref/DA.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-190 (0); > - _A_ tests/i,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/470#issuecomment-249267903
https://github.com/psi4/psi4/pull/470#issuecomment-249267903:20182,Testability,test,tests,20182,l/470/files#diff-171 (0); > - _A_ tests/fsapt2/fsapt-ref/geom.xyz; > https://github.com/psi4/psi4/pull/470/files#diff-172 (0); > - _A_ tests/fsapt2/input.dat; > https://github.com/psi4/psi4/pull/470/files#diff-173 (0); > - _A_ tests/fsapt2/output.ref; > https://github.com/psi4/psi4/pull/470/files#diff-174 (0); > - _A_ tests/isapt1/CMakeLists.txt; > https://github.com/psi4/psi4/pull/470/files#diff-175 (0); > - _A_ tests/isapt1/README; > https://github.com/psi4/psi4/pull/470/files#diff-176 (0); > - _A_ tests/isapt1/fsapt-ref/Disp.dat; > https://github.com/psi4/psi4/pull/470/files#diff-177 (0); > - _A_ tests/isapt1/fsapt-ref/Elst.dat; > https://github.com/psi4/psi4/pull/470/files#diff-178 (0); > - _A_ tests/isapt1/fsapt-ref/Exch.dat; > https://github.com/psi4/psi4/pull/470/files#diff-179 (0); > - _A_ tests/isapt1/fsapt-ref/IndAB.dat; > https://github.com/psi4/psi4/pull/470/files#diff-180 (0); > - _A_ tests/isapt1/fsapt-ref/IndBA.dat; > https://github.com/psi4/psi4/pull/470/files#diff-181 (0); > - _A_ tests/isapt1/fsapt-ref/QA.dat; > https://github.com/psi4/psi4/pull/470/files#diff-182 (0); > - _A_ tests/isapt1/fsapt-ref/QB.dat; > https://github.com/psi4/psi4/pull/470/files#diff-183 (0); > - _A_ tests/isapt1/fsapt-ref/ZA.dat; > https://github.com/psi4/psi4/pull/470/files#diff-184 (0); > - _A_ tests/isapt1/fsapt-ref/ZB.dat; > https://github.com/psi4/psi4/pull/470/files#diff-185 (0); > - _A_ tests/isapt1/fsapt-ref/geom.xyz; > https://github.com/psi4/psi4/pull/470/files#diff-186 (0); > - _A_ tests/isapt1/input.dat; > https://github.com/psi4/psi4/pull/470/files#diff-187 (0); > - _A_ tests/isapt1/output.ref; > https://github.com/psi4/psi4/pull/470/files#diff-188 (0); > - _A_ tests/isapt1/plot-ref/DA.png; > https://github.com/psi4/psi4/pull/470/files#diff-189 (0); > - _A_ tests/isapt1/plot-ref/DA.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-190 (0); > - _A_ tests/isapt1/plot-ref/DB.png; > https://github.com/psi4/psi4/pull/470/files#diff-191 (0); > - _A_ tests/isap,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/470#issuecomment-249267903
https://github.com/psi4/psi4/pull/470#issuecomment-249267903:20281,Testability,test,tests,20281,ull/470/files#diff-172 (0); > - _A_ tests/fsapt2/input.dat; > https://github.com/psi4/psi4/pull/470/files#diff-173 (0); > - _A_ tests/fsapt2/output.ref; > https://github.com/psi4/psi4/pull/470/files#diff-174 (0); > - _A_ tests/isapt1/CMakeLists.txt; > https://github.com/psi4/psi4/pull/470/files#diff-175 (0); > - _A_ tests/isapt1/README; > https://github.com/psi4/psi4/pull/470/files#diff-176 (0); > - _A_ tests/isapt1/fsapt-ref/Disp.dat; > https://github.com/psi4/psi4/pull/470/files#diff-177 (0); > - _A_ tests/isapt1/fsapt-ref/Elst.dat; > https://github.com/psi4/psi4/pull/470/files#diff-178 (0); > - _A_ tests/isapt1/fsapt-ref/Exch.dat; > https://github.com/psi4/psi4/pull/470/files#diff-179 (0); > - _A_ tests/isapt1/fsapt-ref/IndAB.dat; > https://github.com/psi4/psi4/pull/470/files#diff-180 (0); > - _A_ tests/isapt1/fsapt-ref/IndBA.dat; > https://github.com/psi4/psi4/pull/470/files#diff-181 (0); > - _A_ tests/isapt1/fsapt-ref/QA.dat; > https://github.com/psi4/psi4/pull/470/files#diff-182 (0); > - _A_ tests/isapt1/fsapt-ref/QB.dat; > https://github.com/psi4/psi4/pull/470/files#diff-183 (0); > - _A_ tests/isapt1/fsapt-ref/ZA.dat; > https://github.com/psi4/psi4/pull/470/files#diff-184 (0); > - _A_ tests/isapt1/fsapt-ref/ZB.dat; > https://github.com/psi4/psi4/pull/470/files#diff-185 (0); > - _A_ tests/isapt1/fsapt-ref/geom.xyz; > https://github.com/psi4/psi4/pull/470/files#diff-186 (0); > - _A_ tests/isapt1/input.dat; > https://github.com/psi4/psi4/pull/470/files#diff-187 (0); > - _A_ tests/isapt1/output.ref; > https://github.com/psi4/psi4/pull/470/files#diff-188 (0); > - _A_ tests/isapt1/plot-ref/DA.png; > https://github.com/psi4/psi4/pull/470/files#diff-189 (0); > - _A_ tests/isapt1/plot-ref/DA.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-190 (0); > - _A_ tests/isapt1/plot-ref/DB.png; > https://github.com/psi4/psi4/pull/470/files#diff-191 (0); > - _A_ tests/isapt1/plot-ref/DB.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-192 (0); > - _A_ tests/isa,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/470#issuecomment-249267903
https://github.com/psi4/psi4/pull/470#issuecomment-249267903:20380,Testability,test,tests,20380,/files#diff-173 (0); > - _A_ tests/fsapt2/output.ref; > https://github.com/psi4/psi4/pull/470/files#diff-174 (0); > - _A_ tests/isapt1/CMakeLists.txt; > https://github.com/psi4/psi4/pull/470/files#diff-175 (0); > - _A_ tests/isapt1/README; > https://github.com/psi4/psi4/pull/470/files#diff-176 (0); > - _A_ tests/isapt1/fsapt-ref/Disp.dat; > https://github.com/psi4/psi4/pull/470/files#diff-177 (0); > - _A_ tests/isapt1/fsapt-ref/Elst.dat; > https://github.com/psi4/psi4/pull/470/files#diff-178 (0); > - _A_ tests/isapt1/fsapt-ref/Exch.dat; > https://github.com/psi4/psi4/pull/470/files#diff-179 (0); > - _A_ tests/isapt1/fsapt-ref/IndAB.dat; > https://github.com/psi4/psi4/pull/470/files#diff-180 (0); > - _A_ tests/isapt1/fsapt-ref/IndBA.dat; > https://github.com/psi4/psi4/pull/470/files#diff-181 (0); > - _A_ tests/isapt1/fsapt-ref/QA.dat; > https://github.com/psi4/psi4/pull/470/files#diff-182 (0); > - _A_ tests/isapt1/fsapt-ref/QB.dat; > https://github.com/psi4/psi4/pull/470/files#diff-183 (0); > - _A_ tests/isapt1/fsapt-ref/ZA.dat; > https://github.com/psi4/psi4/pull/470/files#diff-184 (0); > - _A_ tests/isapt1/fsapt-ref/ZB.dat; > https://github.com/psi4/psi4/pull/470/files#diff-185 (0); > - _A_ tests/isapt1/fsapt-ref/geom.xyz; > https://github.com/psi4/psi4/pull/470/files#diff-186 (0); > - _A_ tests/isapt1/input.dat; > https://github.com/psi4/psi4/pull/470/files#diff-187 (0); > - _A_ tests/isapt1/output.ref; > https://github.com/psi4/psi4/pull/470/files#diff-188 (0); > - _A_ tests/isapt1/plot-ref/DA.png; > https://github.com/psi4/psi4/pull/470/files#diff-189 (0); > - _A_ tests/isapt1/plot-ref/DA.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-190 (0); > - _A_ tests/isapt1/plot-ref/DB.png; > https://github.com/psi4/psi4/pull/470/files#diff-191 (0); > - _A_ tests/isapt1/plot-ref/DB.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-192 (0); > - _A_ tests/isapt1/plot-ref/DC.png; > https://github.com/psi4/psi4/pull/470/files#diff-193 (0); > - _A_ tests/isap,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/470#issuecomment-249267903
https://github.com/psi4/psi4/pull/470#issuecomment-249267903:20479,Testability,test,tests,20479,#diff-174 (0); > - _A_ tests/isapt1/CMakeLists.txt; > https://github.com/psi4/psi4/pull/470/files#diff-175 (0); > - _A_ tests/isapt1/README; > https://github.com/psi4/psi4/pull/470/files#diff-176 (0); > - _A_ tests/isapt1/fsapt-ref/Disp.dat; > https://github.com/psi4/psi4/pull/470/files#diff-177 (0); > - _A_ tests/isapt1/fsapt-ref/Elst.dat; > https://github.com/psi4/psi4/pull/470/files#diff-178 (0); > - _A_ tests/isapt1/fsapt-ref/Exch.dat; > https://github.com/psi4/psi4/pull/470/files#diff-179 (0); > - _A_ tests/isapt1/fsapt-ref/IndAB.dat; > https://github.com/psi4/psi4/pull/470/files#diff-180 (0); > - _A_ tests/isapt1/fsapt-ref/IndBA.dat; > https://github.com/psi4/psi4/pull/470/files#diff-181 (0); > - _A_ tests/isapt1/fsapt-ref/QA.dat; > https://github.com/psi4/psi4/pull/470/files#diff-182 (0); > - _A_ tests/isapt1/fsapt-ref/QB.dat; > https://github.com/psi4/psi4/pull/470/files#diff-183 (0); > - _A_ tests/isapt1/fsapt-ref/ZA.dat; > https://github.com/psi4/psi4/pull/470/files#diff-184 (0); > - _A_ tests/isapt1/fsapt-ref/ZB.dat; > https://github.com/psi4/psi4/pull/470/files#diff-185 (0); > - _A_ tests/isapt1/fsapt-ref/geom.xyz; > https://github.com/psi4/psi4/pull/470/files#diff-186 (0); > - _A_ tests/isapt1/input.dat; > https://github.com/psi4/psi4/pull/470/files#diff-187 (0); > - _A_ tests/isapt1/output.ref; > https://github.com/psi4/psi4/pull/470/files#diff-188 (0); > - _A_ tests/isapt1/plot-ref/DA.png; > https://github.com/psi4/psi4/pull/470/files#diff-189 (0); > - _A_ tests/isapt1/plot-ref/DA.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-190 (0); > - _A_ tests/isapt1/plot-ref/DB.png; > https://github.com/psi4/psi4/pull/470/files#diff-191 (0); > - _A_ tests/isapt1/plot-ref/DB.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-192 (0); > - _A_ tests/isapt1/plot-ref/DC.png; > https://github.com/psi4/psi4/pull/470/files#diff-193 (0); > - _A_ tests/isapt1/plot-ref/DC.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-194 (0); > - _A_ tests/isa,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/470#issuecomment-249267903
https://github.com/psi4/psi4/pull/470#issuecomment-249267903:20578,Testability,test,tests,20578,ff-175 (0); > - _A_ tests/isapt1/README; > https://github.com/psi4/psi4/pull/470/files#diff-176 (0); > - _A_ tests/isapt1/fsapt-ref/Disp.dat; > https://github.com/psi4/psi4/pull/470/files#diff-177 (0); > - _A_ tests/isapt1/fsapt-ref/Elst.dat; > https://github.com/psi4/psi4/pull/470/files#diff-178 (0); > - _A_ tests/isapt1/fsapt-ref/Exch.dat; > https://github.com/psi4/psi4/pull/470/files#diff-179 (0); > - _A_ tests/isapt1/fsapt-ref/IndAB.dat; > https://github.com/psi4/psi4/pull/470/files#diff-180 (0); > - _A_ tests/isapt1/fsapt-ref/IndBA.dat; > https://github.com/psi4/psi4/pull/470/files#diff-181 (0); > - _A_ tests/isapt1/fsapt-ref/QA.dat; > https://github.com/psi4/psi4/pull/470/files#diff-182 (0); > - _A_ tests/isapt1/fsapt-ref/QB.dat; > https://github.com/psi4/psi4/pull/470/files#diff-183 (0); > - _A_ tests/isapt1/fsapt-ref/ZA.dat; > https://github.com/psi4/psi4/pull/470/files#diff-184 (0); > - _A_ tests/isapt1/fsapt-ref/ZB.dat; > https://github.com/psi4/psi4/pull/470/files#diff-185 (0); > - _A_ tests/isapt1/fsapt-ref/geom.xyz; > https://github.com/psi4/psi4/pull/470/files#diff-186 (0); > - _A_ tests/isapt1/input.dat; > https://github.com/psi4/psi4/pull/470/files#diff-187 (0); > - _A_ tests/isapt1/output.ref; > https://github.com/psi4/psi4/pull/470/files#diff-188 (0); > - _A_ tests/isapt1/plot-ref/DA.png; > https://github.com/psi4/psi4/pull/470/files#diff-189 (0); > - _A_ tests/isapt1/plot-ref/DA.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-190 (0); > - _A_ tests/isapt1/plot-ref/DB.png; > https://github.com/psi4/psi4/pull/470/files#diff-191 (0); > - _A_ tests/isapt1/plot-ref/DB.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-192 (0); > - _A_ tests/isapt1/plot-ref/DC.png; > https://github.com/psi4/psi4/pull/470/files#diff-193 (0); > - _A_ tests/isapt1/plot-ref/DC.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-194 (0); > - _A_ tests/isapt1/plot-ref/DFA.png; > https://github.com/psi4/psi4/pull/470/files#diff-195 (0); > - _A_ tests/isap,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/470#issuecomment-249267903
https://github.com/psi4/psi4/pull/470#issuecomment-249267903:20679,Testability,test,tests,20679,0); > - _A_ tests/isapt1/fsapt-ref/Disp.dat; > https://github.com/psi4/psi4/pull/470/files#diff-177 (0); > - _A_ tests/isapt1/fsapt-ref/Elst.dat; > https://github.com/psi4/psi4/pull/470/files#diff-178 (0); > - _A_ tests/isapt1/fsapt-ref/Exch.dat; > https://github.com/psi4/psi4/pull/470/files#diff-179 (0); > - _A_ tests/isapt1/fsapt-ref/IndAB.dat; > https://github.com/psi4/psi4/pull/470/files#diff-180 (0); > - _A_ tests/isapt1/fsapt-ref/IndBA.dat; > https://github.com/psi4/psi4/pull/470/files#diff-181 (0); > - _A_ tests/isapt1/fsapt-ref/QA.dat; > https://github.com/psi4/psi4/pull/470/files#diff-182 (0); > - _A_ tests/isapt1/fsapt-ref/QB.dat; > https://github.com/psi4/psi4/pull/470/files#diff-183 (0); > - _A_ tests/isapt1/fsapt-ref/ZA.dat; > https://github.com/psi4/psi4/pull/470/files#diff-184 (0); > - _A_ tests/isapt1/fsapt-ref/ZB.dat; > https://github.com/psi4/psi4/pull/470/files#diff-185 (0); > - _A_ tests/isapt1/fsapt-ref/geom.xyz; > https://github.com/psi4/psi4/pull/470/files#diff-186 (0); > - _A_ tests/isapt1/input.dat; > https://github.com/psi4/psi4/pull/470/files#diff-187 (0); > - _A_ tests/isapt1/output.ref; > https://github.com/psi4/psi4/pull/470/files#diff-188 (0); > - _A_ tests/isapt1/plot-ref/DA.png; > https://github.com/psi4/psi4/pull/470/files#diff-189 (0); > - _A_ tests/isapt1/plot-ref/DA.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-190 (0); > - _A_ tests/isapt1/plot-ref/DB.png; > https://github.com/psi4/psi4/pull/470/files#diff-191 (0); > - _A_ tests/isapt1/plot-ref/DB.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-192 (0); > - _A_ tests/isapt1/plot-ref/DC.png; > https://github.com/psi4/psi4/pull/470/files#diff-193 (0); > - _A_ tests/isapt1/plot-ref/DC.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-194 (0); > - _A_ tests/isapt1/plot-ref/DFA.png; > https://github.com/psi4/psi4/pull/470/files#diff-195 (0); > - _A_ tests/isapt1/plot-ref/DFA.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-196 (0); > - _A_ tests,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/470#issuecomment-249267903
https://github.com/psi4/psi4/pull/470#issuecomment-249267903:20771,Testability,test,tests,20771,iff-177 (0); > - _A_ tests/isapt1/fsapt-ref/Elst.dat; > https://github.com/psi4/psi4/pull/470/files#diff-178 (0); > - _A_ tests/isapt1/fsapt-ref/Exch.dat; > https://github.com/psi4/psi4/pull/470/files#diff-179 (0); > - _A_ tests/isapt1/fsapt-ref/IndAB.dat; > https://github.com/psi4/psi4/pull/470/files#diff-180 (0); > - _A_ tests/isapt1/fsapt-ref/IndBA.dat; > https://github.com/psi4/psi4/pull/470/files#diff-181 (0); > - _A_ tests/isapt1/fsapt-ref/QA.dat; > https://github.com/psi4/psi4/pull/470/files#diff-182 (0); > - _A_ tests/isapt1/fsapt-ref/QB.dat; > https://github.com/psi4/psi4/pull/470/files#diff-183 (0); > - _A_ tests/isapt1/fsapt-ref/ZA.dat; > https://github.com/psi4/psi4/pull/470/files#diff-184 (0); > - _A_ tests/isapt1/fsapt-ref/ZB.dat; > https://github.com/psi4/psi4/pull/470/files#diff-185 (0); > - _A_ tests/isapt1/fsapt-ref/geom.xyz; > https://github.com/psi4/psi4/pull/470/files#diff-186 (0); > - _A_ tests/isapt1/input.dat; > https://github.com/psi4/psi4/pull/470/files#diff-187 (0); > - _A_ tests/isapt1/output.ref; > https://github.com/psi4/psi4/pull/470/files#diff-188 (0); > - _A_ tests/isapt1/plot-ref/DA.png; > https://github.com/psi4/psi4/pull/470/files#diff-189 (0); > - _A_ tests/isapt1/plot-ref/DA.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-190 (0); > - _A_ tests/isapt1/plot-ref/DB.png; > https://github.com/psi4/psi4/pull/470/files#diff-191 (0); > - _A_ tests/isapt1/plot-ref/DB.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-192 (0); > - _A_ tests/isapt1/plot-ref/DC.png; > https://github.com/psi4/psi4/pull/470/files#diff-193 (0); > - _A_ tests/isapt1/plot-ref/DC.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-194 (0); > - _A_ tests/isapt1/plot-ref/DFA.png; > https://github.com/psi4/psi4/pull/470/files#diff-195 (0); > - _A_ tests/isapt1/plot-ref/DFA.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-196 (0); > - _A_ tests/isapt1/plot-ref/DFB.png; > https://github.com/psi4/psi4/pull/470/files#diff-197 (0); > - _A_,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/470#issuecomment-249267903
https://github.com/psi4/psi4/pull/470#issuecomment-249267903:20864,Testability,test,tests,20864,les#diff-178 (0); > - _A_ tests/isapt1/fsapt-ref/Exch.dat; > https://github.com/psi4/psi4/pull/470/files#diff-179 (0); > - _A_ tests/isapt1/fsapt-ref/IndAB.dat; > https://github.com/psi4/psi4/pull/470/files#diff-180 (0); > - _A_ tests/isapt1/fsapt-ref/IndBA.dat; > https://github.com/psi4/psi4/pull/470/files#diff-181 (0); > - _A_ tests/isapt1/fsapt-ref/QA.dat; > https://github.com/psi4/psi4/pull/470/files#diff-182 (0); > - _A_ tests/isapt1/fsapt-ref/QB.dat; > https://github.com/psi4/psi4/pull/470/files#diff-183 (0); > - _A_ tests/isapt1/fsapt-ref/ZA.dat; > https://github.com/psi4/psi4/pull/470/files#diff-184 (0); > - _A_ tests/isapt1/fsapt-ref/ZB.dat; > https://github.com/psi4/psi4/pull/470/files#diff-185 (0); > - _A_ tests/isapt1/fsapt-ref/geom.xyz; > https://github.com/psi4/psi4/pull/470/files#diff-186 (0); > - _A_ tests/isapt1/input.dat; > https://github.com/psi4/psi4/pull/470/files#diff-187 (0); > - _A_ tests/isapt1/output.ref; > https://github.com/psi4/psi4/pull/470/files#diff-188 (0); > - _A_ tests/isapt1/plot-ref/DA.png; > https://github.com/psi4/psi4/pull/470/files#diff-189 (0); > - _A_ tests/isapt1/plot-ref/DA.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-190 (0); > - _A_ tests/isapt1/plot-ref/DB.png; > https://github.com/psi4/psi4/pull/470/files#diff-191 (0); > - _A_ tests/isapt1/plot-ref/DB.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-192 (0); > - _A_ tests/isapt1/plot-ref/DC.png; > https://github.com/psi4/psi4/pull/470/files#diff-193 (0); > - _A_ tests/isapt1/plot-ref/DC.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-194 (0); > - _A_ tests/isapt1/plot-ref/DFA.png; > https://github.com/psi4/psi4/pull/470/files#diff-195 (0); > - _A_ tests/isapt1/plot-ref/DFA.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-196 (0); > - _A_ tests/isapt1/plot-ref/DFB.png; > https://github.com/psi4/psi4/pull/470/files#diff-197 (0); > - _A_ tests/isapt1/plot-ref/DFB.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-198 (0); >,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/470#issuecomment-249267903
https://github.com/psi4/psi4/pull/470#issuecomment-249267903:20962,Testability,test,tests,20962,/files#diff-179 (0); > - _A_ tests/isapt1/fsapt-ref/IndAB.dat; > https://github.com/psi4/psi4/pull/470/files#diff-180 (0); > - _A_ tests/isapt1/fsapt-ref/IndBA.dat; > https://github.com/psi4/psi4/pull/470/files#diff-181 (0); > - _A_ tests/isapt1/fsapt-ref/QA.dat; > https://github.com/psi4/psi4/pull/470/files#diff-182 (0); > - _A_ tests/isapt1/fsapt-ref/QB.dat; > https://github.com/psi4/psi4/pull/470/files#diff-183 (0); > - _A_ tests/isapt1/fsapt-ref/ZA.dat; > https://github.com/psi4/psi4/pull/470/files#diff-184 (0); > - _A_ tests/isapt1/fsapt-ref/ZB.dat; > https://github.com/psi4/psi4/pull/470/files#diff-185 (0); > - _A_ tests/isapt1/fsapt-ref/geom.xyz; > https://github.com/psi4/psi4/pull/470/files#diff-186 (0); > - _A_ tests/isapt1/input.dat; > https://github.com/psi4/psi4/pull/470/files#diff-187 (0); > - _A_ tests/isapt1/output.ref; > https://github.com/psi4/psi4/pull/470/files#diff-188 (0); > - _A_ tests/isapt1/plot-ref/DA.png; > https://github.com/psi4/psi4/pull/470/files#diff-189 (0); > - _A_ tests/isapt1/plot-ref/DA.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-190 (0); > - _A_ tests/isapt1/plot-ref/DB.png; > https://github.com/psi4/psi4/pull/470/files#diff-191 (0); > - _A_ tests/isapt1/plot-ref/DB.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-192 (0); > - _A_ tests/isapt1/plot-ref/DC.png; > https://github.com/psi4/psi4/pull/470/files#diff-193 (0); > - _A_ tests/isapt1/plot-ref/DC.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-194 (0); > - _A_ tests/isapt1/plot-ref/DFA.png; > https://github.com/psi4/psi4/pull/470/files#diff-195 (0); > - _A_ tests/isapt1/plot-ref/DFA.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-196 (0); > - _A_ tests/isapt1/plot-ref/DFB.png; > https://github.com/psi4/psi4/pull/470/files#diff-197 (0); > - _A_ tests/isapt1/plot-ref/DFB.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-198 (0); > - _A_ tests/isapt1/plot-ref/Geom.png; > https://github.com/psi4/psi4/pull/470/files#diff-199 (0);,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/470#issuecomment-249267903
https://github.com/psi4/psi4/pull/470#issuecomment-249267903:21062,Testability,test,tests,21062,70/files#diff-180 (0); > - _A_ tests/isapt1/fsapt-ref/IndBA.dat; > https://github.com/psi4/psi4/pull/470/files#diff-181 (0); > - _A_ tests/isapt1/fsapt-ref/QA.dat; > https://github.com/psi4/psi4/pull/470/files#diff-182 (0); > - _A_ tests/isapt1/fsapt-ref/QB.dat; > https://github.com/psi4/psi4/pull/470/files#diff-183 (0); > - _A_ tests/isapt1/fsapt-ref/ZA.dat; > https://github.com/psi4/psi4/pull/470/files#diff-184 (0); > - _A_ tests/isapt1/fsapt-ref/ZB.dat; > https://github.com/psi4/psi4/pull/470/files#diff-185 (0); > - _A_ tests/isapt1/fsapt-ref/geom.xyz; > https://github.com/psi4/psi4/pull/470/files#diff-186 (0); > - _A_ tests/isapt1/input.dat; > https://github.com/psi4/psi4/pull/470/files#diff-187 (0); > - _A_ tests/isapt1/output.ref; > https://github.com/psi4/psi4/pull/470/files#diff-188 (0); > - _A_ tests/isapt1/plot-ref/DA.png; > https://github.com/psi4/psi4/pull/470/files#diff-189 (0); > - _A_ tests/isapt1/plot-ref/DA.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-190 (0); > - _A_ tests/isapt1/plot-ref/DB.png; > https://github.com/psi4/psi4/pull/470/files#diff-191 (0); > - _A_ tests/isapt1/plot-ref/DB.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-192 (0); > - _A_ tests/isapt1/plot-ref/DC.png; > https://github.com/psi4/psi4/pull/470/files#diff-193 (0); > - _A_ tests/isapt1/plot-ref/DC.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-194 (0); > - _A_ tests/isapt1/plot-ref/DFA.png; > https://github.com/psi4/psi4/pull/470/files#diff-195 (0); > - _A_ tests/isapt1/plot-ref/DFA.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-196 (0); > - _A_ tests/isapt1/plot-ref/DFB.png; > https://github.com/psi4/psi4/pull/470/files#diff-197 (0); > - _A_ tests/isapt1/plot-ref/DFB.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-198 (0); > - _A_ tests/isapt1/plot-ref/Geom.png; > https://github.com/psi4/psi4/pull/470/files#diff-199 (0); > - _A_ tests/isapt1/plot-ref/Geom.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-200 (0,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/470#issuecomment-249267903
https://github.com/psi4/psi4/pull/470#issuecomment-249267903:21160,Testability,test,tests,21160,ll/470/files#diff-181 (0); > - _A_ tests/isapt1/fsapt-ref/QA.dat; > https://github.com/psi4/psi4/pull/470/files#diff-182 (0); > - _A_ tests/isapt1/fsapt-ref/QB.dat; > https://github.com/psi4/psi4/pull/470/files#diff-183 (0); > - _A_ tests/isapt1/fsapt-ref/ZA.dat; > https://github.com/psi4/psi4/pull/470/files#diff-184 (0); > - _A_ tests/isapt1/fsapt-ref/ZB.dat; > https://github.com/psi4/psi4/pull/470/files#diff-185 (0); > - _A_ tests/isapt1/fsapt-ref/geom.xyz; > https://github.com/psi4/psi4/pull/470/files#diff-186 (0); > - _A_ tests/isapt1/input.dat; > https://github.com/psi4/psi4/pull/470/files#diff-187 (0); > - _A_ tests/isapt1/output.ref; > https://github.com/psi4/psi4/pull/470/files#diff-188 (0); > - _A_ tests/isapt1/plot-ref/DA.png; > https://github.com/psi4/psi4/pull/470/files#diff-189 (0); > - _A_ tests/isapt1/plot-ref/DA.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-190 (0); > - _A_ tests/isapt1/plot-ref/DB.png; > https://github.com/psi4/psi4/pull/470/files#diff-191 (0); > - _A_ tests/isapt1/plot-ref/DB.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-192 (0); > - _A_ tests/isapt1/plot-ref/DC.png; > https://github.com/psi4/psi4/pull/470/files#diff-193 (0); > - _A_ tests/isapt1/plot-ref/DC.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-194 (0); > - _A_ tests/isapt1/plot-ref/DFA.png; > https://github.com/psi4/psi4/pull/470/files#diff-195 (0); > - _A_ tests/isapt1/plot-ref/DFA.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-196 (0); > - _A_ tests/isapt1/plot-ref/DFB.png; > https://github.com/psi4/psi4/pull/470/files#diff-197 (0); > - _A_ tests/isapt1/plot-ref/DFB.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-198 (0); > - _A_ tests/isapt1/plot-ref/Geom.png; > https://github.com/psi4/psi4/pull/470/files#diff-199 (0); > - _A_ tests/isapt1/plot-ref/Geom.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-200 (0); > - _A_ tests/isapt1/plot-ref/VA.png; > https://github.com/psi4/psi4/pull/470/files#diff-201 (0,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/470#issuecomment-249267903
https://github.com/psi4/psi4/pull/470#issuecomment-249267903:21260,Testability,test,tests,21260,l/470/files#diff-182 (0); > - _A_ tests/isapt1/fsapt-ref/QB.dat; > https://github.com/psi4/psi4/pull/470/files#diff-183 (0); > - _A_ tests/isapt1/fsapt-ref/ZA.dat; > https://github.com/psi4/psi4/pull/470/files#diff-184 (0); > - _A_ tests/isapt1/fsapt-ref/ZB.dat; > https://github.com/psi4/psi4/pull/470/files#diff-185 (0); > - _A_ tests/isapt1/fsapt-ref/geom.xyz; > https://github.com/psi4/psi4/pull/470/files#diff-186 (0); > - _A_ tests/isapt1/input.dat; > https://github.com/psi4/psi4/pull/470/files#diff-187 (0); > - _A_ tests/isapt1/output.ref; > https://github.com/psi4/psi4/pull/470/files#diff-188 (0); > - _A_ tests/isapt1/plot-ref/DA.png; > https://github.com/psi4/psi4/pull/470/files#diff-189 (0); > - _A_ tests/isapt1/plot-ref/DA.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-190 (0); > - _A_ tests/isapt1/plot-ref/DB.png; > https://github.com/psi4/psi4/pull/470/files#diff-191 (0); > - _A_ tests/isapt1/plot-ref/DB.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-192 (0); > - _A_ tests/isapt1/plot-ref/DC.png; > https://github.com/psi4/psi4/pull/470/files#diff-193 (0); > - _A_ tests/isapt1/plot-ref/DC.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-194 (0); > - _A_ tests/isapt1/plot-ref/DFA.png; > https://github.com/psi4/psi4/pull/470/files#diff-195 (0); > - _A_ tests/isapt1/plot-ref/DFA.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-196 (0); > - _A_ tests/isapt1/plot-ref/DFB.png; > https://github.com/psi4/psi4/pull/470/files#diff-197 (0); > - _A_ tests/isapt1/plot-ref/DFB.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-198 (0); > - _A_ tests/isapt1/plot-ref/Geom.png; > https://github.com/psi4/psi4/pull/470/files#diff-199 (0); > - _A_ tests/isapt1/plot-ref/Geom.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-200 (0); > - _A_ tests/isapt1/plot-ref/VA.png; > https://github.com/psi4/psi4/pull/470/files#diff-201 (0); > - _A_ tests/isapt1/plot-ref/VA.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-202 (0,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/470#issuecomment-249267903
https://github.com/psi4/psi4/pull/470#issuecomment-249267903:21358,Testability,test,tests,21358,ll/470/files#diff-183 (0); > - _A_ tests/isapt1/fsapt-ref/ZA.dat; > https://github.com/psi4/psi4/pull/470/files#diff-184 (0); > - _A_ tests/isapt1/fsapt-ref/ZB.dat; > https://github.com/psi4/psi4/pull/470/files#diff-185 (0); > - _A_ tests/isapt1/fsapt-ref/geom.xyz; > https://github.com/psi4/psi4/pull/470/files#diff-186 (0); > - _A_ tests/isapt1/input.dat; > https://github.com/psi4/psi4/pull/470/files#diff-187 (0); > - _A_ tests/isapt1/output.ref; > https://github.com/psi4/psi4/pull/470/files#diff-188 (0); > - _A_ tests/isapt1/plot-ref/DA.png; > https://github.com/psi4/psi4/pull/470/files#diff-189 (0); > - _A_ tests/isapt1/plot-ref/DA.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-190 (0); > - _A_ tests/isapt1/plot-ref/DB.png; > https://github.com/psi4/psi4/pull/470/files#diff-191 (0); > - _A_ tests/isapt1/plot-ref/DB.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-192 (0); > - _A_ tests/isapt1/plot-ref/DC.png; > https://github.com/psi4/psi4/pull/470/files#diff-193 (0); > - _A_ tests/isapt1/plot-ref/DC.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-194 (0); > - _A_ tests/isapt1/plot-ref/DFA.png; > https://github.com/psi4/psi4/pull/470/files#diff-195 (0); > - _A_ tests/isapt1/plot-ref/DFA.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-196 (0); > - _A_ tests/isapt1/plot-ref/DFB.png; > https://github.com/psi4/psi4/pull/470/files#diff-197 (0); > - _A_ tests/isapt1/plot-ref/DFB.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-198 (0); > - _A_ tests/isapt1/plot-ref/Geom.png; > https://github.com/psi4/psi4/pull/470/files#diff-199 (0); > - _A_ tests/isapt1/plot-ref/Geom.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-200 (0); > - _A_ tests/isapt1/plot-ref/VA.png; > https://github.com/psi4/psi4/pull/470/files#diff-201 (0); > - _A_ tests/isapt1/plot-ref/VA.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-202 (0); > - _A_ tests/isapt1/plot-ref/VB.png; > https://github.com/psi4/psi4/pull/470/files#diff-203 (0,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/470#issuecomment-249267903
https://github.com/psi4/psi4/pull/470#issuecomment-249267903:21458,Testability,test,tests,21458,l/470/files#diff-184 (0); > - _A_ tests/isapt1/fsapt-ref/ZB.dat; > https://github.com/psi4/psi4/pull/470/files#diff-185 (0); > - _A_ tests/isapt1/fsapt-ref/geom.xyz; > https://github.com/psi4/psi4/pull/470/files#diff-186 (0); > - _A_ tests/isapt1/input.dat; > https://github.com/psi4/psi4/pull/470/files#diff-187 (0); > - _A_ tests/isapt1/output.ref; > https://github.com/psi4/psi4/pull/470/files#diff-188 (0); > - _A_ tests/isapt1/plot-ref/DA.png; > https://github.com/psi4/psi4/pull/470/files#diff-189 (0); > - _A_ tests/isapt1/plot-ref/DA.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-190 (0); > - _A_ tests/isapt1/plot-ref/DB.png; > https://github.com/psi4/psi4/pull/470/files#diff-191 (0); > - _A_ tests/isapt1/plot-ref/DB.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-192 (0); > - _A_ tests/isapt1/plot-ref/DC.png; > https://github.com/psi4/psi4/pull/470/files#diff-193 (0); > - _A_ tests/isapt1/plot-ref/DC.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-194 (0); > - _A_ tests/isapt1/plot-ref/DFA.png; > https://github.com/psi4/psi4/pull/470/files#diff-195 (0); > - _A_ tests/isapt1/plot-ref/DFA.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-196 (0); > - _A_ tests/isapt1/plot-ref/DFB.png; > https://github.com/psi4/psi4/pull/470/files#diff-197 (0); > - _A_ tests/isapt1/plot-ref/DFB.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-198 (0); > - _A_ tests/isapt1/plot-ref/Geom.png; > https://github.com/psi4/psi4/pull/470/files#diff-199 (0); > - _A_ tests/isapt1/plot-ref/Geom.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-200 (0); > - _A_ tests/isapt1/plot-ref/VA.png; > https://github.com/psi4/psi4/pull/470/files#diff-201 (0); > - _A_ tests/isapt1/plot-ref/VA.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-202 (0); > - _A_ tests/isapt1/plot-ref/VB.png; > https://github.com/psi4/psi4/pull/470/files#diff-203 (0); > - _A_ tests/isapt1/plot-ref/VB.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-204 (0),MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/470#issuecomment-249267903
https://github.com/psi4/psi4/pull/470#issuecomment-249267903:21557,Testability,test,tests,21557,l/470/files#diff-185 (0); > - _A_ tests/isapt1/fsapt-ref/geom.xyz; > https://github.com/psi4/psi4/pull/470/files#diff-186 (0); > - _A_ tests/isapt1/input.dat; > https://github.com/psi4/psi4/pull/470/files#diff-187 (0); > - _A_ tests/isapt1/output.ref; > https://github.com/psi4/psi4/pull/470/files#diff-188 (0); > - _A_ tests/isapt1/plot-ref/DA.png; > https://github.com/psi4/psi4/pull/470/files#diff-189 (0); > - _A_ tests/isapt1/plot-ref/DA.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-190 (0); > - _A_ tests/isapt1/plot-ref/DB.png; > https://github.com/psi4/psi4/pull/470/files#diff-191 (0); > - _A_ tests/isapt1/plot-ref/DB.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-192 (0); > - _A_ tests/isapt1/plot-ref/DC.png; > https://github.com/psi4/psi4/pull/470/files#diff-193 (0); > - _A_ tests/isapt1/plot-ref/DC.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-194 (0); > - _A_ tests/isapt1/plot-ref/DFA.png; > https://github.com/psi4/psi4/pull/470/files#diff-195 (0); > - _A_ tests/isapt1/plot-ref/DFA.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-196 (0); > - _A_ tests/isapt1/plot-ref/DFB.png; > https://github.com/psi4/psi4/pull/470/files#diff-197 (0); > - _A_ tests/isapt1/plot-ref/DFB.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-198 (0); > - _A_ tests/isapt1/plot-ref/Geom.png; > https://github.com/psi4/psi4/pull/470/files#diff-199 (0); > - _A_ tests/isapt1/plot-ref/Geom.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-200 (0); > - _A_ tests/isapt1/plot-ref/VA.png; > https://github.com/psi4/psi4/pull/470/files#diff-201 (0); > - _A_ tests/isapt1/plot-ref/VA.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-202 (0); > - _A_ tests/isapt1/plot-ref/VB.png; > https://github.com/psi4/psi4/pull/470/files#diff-203 (0); > - _A_ tests/isapt1/plot-ref/VB.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-204 (0); > - _A_ tests/isapt1/plot-ref/VC.png; > https://github.com/psi4/psi4/pull/470/files#diff-205 (0);,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/470#issuecomment-249267903
https://github.com/psi4/psi4/pull/470#issuecomment-249267903:21658,Testability,test,tests,21658,l/470/files#diff-186 (0); > - _A_ tests/isapt1/input.dat; > https://github.com/psi4/psi4/pull/470/files#diff-187 (0); > - _A_ tests/isapt1/output.ref; > https://github.com/psi4/psi4/pull/470/files#diff-188 (0); > - _A_ tests/isapt1/plot-ref/DA.png; > https://github.com/psi4/psi4/pull/470/files#diff-189 (0); > - _A_ tests/isapt1/plot-ref/DA.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-190 (0); > - _A_ tests/isapt1/plot-ref/DB.png; > https://github.com/psi4/psi4/pull/470/files#diff-191 (0); > - _A_ tests/isapt1/plot-ref/DB.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-192 (0); > - _A_ tests/isapt1/plot-ref/DC.png; > https://github.com/psi4/psi4/pull/470/files#diff-193 (0); > - _A_ tests/isapt1/plot-ref/DC.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-194 (0); > - _A_ tests/isapt1/plot-ref/DFA.png; > https://github.com/psi4/psi4/pull/470/files#diff-195 (0); > - _A_ tests/isapt1/plot-ref/DFA.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-196 (0); > - _A_ tests/isapt1/plot-ref/DFB.png; > https://github.com/psi4/psi4/pull/470/files#diff-197 (0); > - _A_ tests/isapt1/plot-ref/DFB.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-198 (0); > - _A_ tests/isapt1/plot-ref/Geom.png; > https://github.com/psi4/psi4/pull/470/files#diff-199 (0); > - _A_ tests/isapt1/plot-ref/Geom.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-200 (0); > - _A_ tests/isapt1/plot-ref/VA.png; > https://github.com/psi4/psi4/pull/470/files#diff-201 (0); > - _A_ tests/isapt1/plot-ref/VA.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-202 (0); > - _A_ tests/isapt1/plot-ref/VB.png; > https://github.com/psi4/psi4/pull/470/files#diff-203 (0); > - _A_ tests/isapt1/plot-ref/VB.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-204 (0); > - _A_ tests/isapt1/plot-ref/VC.png; > https://github.com/psi4/psi4/pull/470/files#diff-205 (0); > - _A_ tests/isapt1/plot-ref/VC.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-206 (0); ,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/470#issuecomment-249267903
https://github.com/psi4/psi4/pull/470#issuecomment-249267903:21757,Testability,test,tests,21757,iles#diff-187 (0); > - _A_ tests/isapt1/output.ref; > https://github.com/psi4/psi4/pull/470/files#diff-188 (0); > - _A_ tests/isapt1/plot-ref/DA.png; > https://github.com/psi4/psi4/pull/470/files#diff-189 (0); > - _A_ tests/isapt1/plot-ref/DA.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-190 (0); > - _A_ tests/isapt1/plot-ref/DB.png; > https://github.com/psi4/psi4/pull/470/files#diff-191 (0); > - _A_ tests/isapt1/plot-ref/DB.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-192 (0); > - _A_ tests/isapt1/plot-ref/DC.png; > https://github.com/psi4/psi4/pull/470/files#diff-193 (0); > - _A_ tests/isapt1/plot-ref/DC.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-194 (0); > - _A_ tests/isapt1/plot-ref/DFA.png; > https://github.com/psi4/psi4/pull/470/files#diff-195 (0); > - _A_ tests/isapt1/plot-ref/DFA.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-196 (0); > - _A_ tests/isapt1/plot-ref/DFB.png; > https://github.com/psi4/psi4/pull/470/files#diff-197 (0); > - _A_ tests/isapt1/plot-ref/DFB.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-198 (0); > - _A_ tests/isapt1/plot-ref/Geom.png; > https://github.com/psi4/psi4/pull/470/files#diff-199 (0); > - _A_ tests/isapt1/plot-ref/Geom.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-200 (0); > - _A_ tests/isapt1/plot-ref/VA.png; > https://github.com/psi4/psi4/pull/470/files#diff-201 (0); > - _A_ tests/isapt1/plot-ref/VA.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-202 (0); > - _A_ tests/isapt1/plot-ref/VB.png; > https://github.com/psi4/psi4/pull/470/files#diff-203 (0); > - _A_ tests/isapt1/plot-ref/VB.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-204 (0); > - _A_ tests/isapt1/plot-ref/VC.png; > https://github.com/psi4/psi4/pull/470/files#diff-205 (0); > - _A_ tests/isapt1/plot-ref/VC.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-206 (0); > - _A_ tests/isapt1/plot-ref/dDA.png; > https://github.com/psi4/psi4/pull/470/files#diff-207 (0); ,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/470#issuecomment-249267903
https://github.com/psi4/psi4/pull/470#issuecomment-249267903:21858,Testability,test,tests,21858,-188 (0); > - _A_ tests/isapt1/plot-ref/DA.png; > https://github.com/psi4/psi4/pull/470/files#diff-189 (0); > - _A_ tests/isapt1/plot-ref/DA.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-190 (0); > - _A_ tests/isapt1/plot-ref/DB.png; > https://github.com/psi4/psi4/pull/470/files#diff-191 (0); > - _A_ tests/isapt1/plot-ref/DB.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-192 (0); > - _A_ tests/isapt1/plot-ref/DC.png; > https://github.com/psi4/psi4/pull/470/files#diff-193 (0); > - _A_ tests/isapt1/plot-ref/DC.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-194 (0); > - _A_ tests/isapt1/plot-ref/DFA.png; > https://github.com/psi4/psi4/pull/470/files#diff-195 (0); > - _A_ tests/isapt1/plot-ref/DFA.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-196 (0); > - _A_ tests/isapt1/plot-ref/DFB.png; > https://github.com/psi4/psi4/pull/470/files#diff-197 (0); > - _A_ tests/isapt1/plot-ref/DFB.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-198 (0); > - _A_ tests/isapt1/plot-ref/Geom.png; > https://github.com/psi4/psi4/pull/470/files#diff-199 (0); > - _A_ tests/isapt1/plot-ref/Geom.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-200 (0); > - _A_ tests/isapt1/plot-ref/VA.png; > https://github.com/psi4/psi4/pull/470/files#diff-201 (0); > - _A_ tests/isapt1/plot-ref/VA.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-202 (0); > - _A_ tests/isapt1/plot-ref/VB.png; > https://github.com/psi4/psi4/pull/470/files#diff-203 (0); > - _A_ tests/isapt1/plot-ref/VB.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-204 (0); > - _A_ tests/isapt1/plot-ref/VC.png; > https://github.com/psi4/psi4/pull/470/files#diff-205 (0); > - _A_ tests/isapt1/plot-ref/VC.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-206 (0); > - _A_ tests/isapt1/plot-ref/dDA.png; > https://github.com/psi4/psi4/pull/470/files#diff-207 (0); > - _A_ tests/isapt1/plot-ref/dDA.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-208 (0); ,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/470#issuecomment-249267903
https://github.com/psi4/psi4/pull/470#issuecomment-249267903:21958,Testability,test,tests,21958,89 (0); > - _A_ tests/isapt1/plot-ref/DA.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-190 (0); > - _A_ tests/isapt1/plot-ref/DB.png; > https://github.com/psi4/psi4/pull/470/files#diff-191 (0); > - _A_ tests/isapt1/plot-ref/DB.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-192 (0); > - _A_ tests/isapt1/plot-ref/DC.png; > https://github.com/psi4/psi4/pull/470/files#diff-193 (0); > - _A_ tests/isapt1/plot-ref/DC.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-194 (0); > - _A_ tests/isapt1/plot-ref/DFA.png; > https://github.com/psi4/psi4/pull/470/files#diff-195 (0); > - _A_ tests/isapt1/plot-ref/DFA.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-196 (0); > - _A_ tests/isapt1/plot-ref/DFB.png; > https://github.com/psi4/psi4/pull/470/files#diff-197 (0); > - _A_ tests/isapt1/plot-ref/DFB.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-198 (0); > - _A_ tests/isapt1/plot-ref/Geom.png; > https://github.com/psi4/psi4/pull/470/files#diff-199 (0); > - _A_ tests/isapt1/plot-ref/Geom.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-200 (0); > - _A_ tests/isapt1/plot-ref/VA.png; > https://github.com/psi4/psi4/pull/470/files#diff-201 (0); > - _A_ tests/isapt1/plot-ref/VA.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-202 (0); > - _A_ tests/isapt1/plot-ref/VB.png; > https://github.com/psi4/psi4/pull/470/files#diff-203 (0); > - _A_ tests/isapt1/plot-ref/VB.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-204 (0); > - _A_ tests/isapt1/plot-ref/VC.png; > https://github.com/psi4/psi4/pull/470/files#diff-205 (0); > - _A_ tests/isapt1/plot-ref/VC.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-206 (0); > - _A_ tests/isapt1/plot-ref/dDA.png; > https://github.com/psi4/psi4/pull/470/files#diff-207 (0); > - _A_ tests/isapt1/plot-ref/dDA.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-208 (0); > - _A_ tests/isapt1/plot-ref/dDB.png; > https://github.com/psi4/psi4/pull/470/files#diff-209 (0); >,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/470#issuecomment-249267903
https://github.com/psi4/psi4/pull/470#issuecomment-249267903:22060,Testability,test,tests,22060,0 (0); > - _A_ tests/isapt1/plot-ref/DB.png; > https://github.com/psi4/psi4/pull/470/files#diff-191 (0); > - _A_ tests/isapt1/plot-ref/DB.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-192 (0); > - _A_ tests/isapt1/plot-ref/DC.png; > https://github.com/psi4/psi4/pull/470/files#diff-193 (0); > - _A_ tests/isapt1/plot-ref/DC.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-194 (0); > - _A_ tests/isapt1/plot-ref/DFA.png; > https://github.com/psi4/psi4/pull/470/files#diff-195 (0); > - _A_ tests/isapt1/plot-ref/DFA.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-196 (0); > - _A_ tests/isapt1/plot-ref/DFB.png; > https://github.com/psi4/psi4/pull/470/files#diff-197 (0); > - _A_ tests/isapt1/plot-ref/DFB.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-198 (0); > - _A_ tests/isapt1/plot-ref/Geom.png; > https://github.com/psi4/psi4/pull/470/files#diff-199 (0); > - _A_ tests/isapt1/plot-ref/Geom.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-200 (0); > - _A_ tests/isapt1/plot-ref/VA.png; > https://github.com/psi4/psi4/pull/470/files#diff-201 (0); > - _A_ tests/isapt1/plot-ref/VA.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-202 (0); > - _A_ tests/isapt1/plot-ref/VB.png; > https://github.com/psi4/psi4/pull/470/files#diff-203 (0); > - _A_ tests/isapt1/plot-ref/VB.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-204 (0); > - _A_ tests/isapt1/plot-ref/VC.png; > https://github.com/psi4/psi4/pull/470/files#diff-205 (0); > - _A_ tests/isapt1/plot-ref/VC.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-206 (0); > - _A_ tests/isapt1/plot-ref/dDA.png; > https://github.com/psi4/psi4/pull/470/files#diff-207 (0); > - _A_ tests/isapt1/plot-ref/dDA.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-208 (0); > - _A_ tests/isapt1/plot-ref/dDB.png; > https://github.com/psi4/psi4/pull/470/files#diff-209 (0); > - _A_ tests/isapt1/plot-ref/dDB.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-210 (0); >,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/470#issuecomment-249267903
https://github.com/psi4/psi4/pull/470#issuecomment-249267903:22158,Testability,test,tests,22158,1 (0); > - _A_ tests/isapt1/plot-ref/DB.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-192 (0); > - _A_ tests/isapt1/plot-ref/DC.png; > https://github.com/psi4/psi4/pull/470/files#diff-193 (0); > - _A_ tests/isapt1/plot-ref/DC.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-194 (0); > - _A_ tests/isapt1/plot-ref/DFA.png; > https://github.com/psi4/psi4/pull/470/files#diff-195 (0); > - _A_ tests/isapt1/plot-ref/DFA.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-196 (0); > - _A_ tests/isapt1/plot-ref/DFB.png; > https://github.com/psi4/psi4/pull/470/files#diff-197 (0); > - _A_ tests/isapt1/plot-ref/DFB.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-198 (0); > - _A_ tests/isapt1/plot-ref/Geom.png; > https://github.com/psi4/psi4/pull/470/files#diff-199 (0); > - _A_ tests/isapt1/plot-ref/Geom.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-200 (0); > - _A_ tests/isapt1/plot-ref/VA.png; > https://github.com/psi4/psi4/pull/470/files#diff-201 (0); > - _A_ tests/isapt1/plot-ref/VA.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-202 (0); > - _A_ tests/isapt1/plot-ref/VB.png; > https://github.com/psi4/psi4/pull/470/files#diff-203 (0); > - _A_ tests/isapt1/plot-ref/VB.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-204 (0); > - _A_ tests/isapt1/plot-ref/VC.png; > https://github.com/psi4/psi4/pull/470/files#diff-205 (0); > - _A_ tests/isapt1/plot-ref/VC.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-206 (0); > - _A_ tests/isapt1/plot-ref/dDA.png; > https://github.com/psi4/psi4/pull/470/files#diff-207 (0); > - _A_ tests/isapt1/plot-ref/dDA.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-208 (0); > - _A_ tests/isapt1/plot-ref/dDB.png; > https://github.com/psi4/psi4/pull/470/files#diff-209 (0); > - _A_ tests/isapt1/plot-ref/dDB.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-210 (0); > - _A_ tests/isapt1/plot-ref/geom.xyz; > https://github.com/psi4/psi4/pull/470/files#diff-211 (0);,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/470#issuecomment-249267903
https://github.com/psi4/psi4/pull/470#issuecomment-249267903:22258,Testability,test,tests,22258,2 (0); > - _A_ tests/isapt1/plot-ref/DC.png; > https://github.com/psi4/psi4/pull/470/files#diff-193 (0); > - _A_ tests/isapt1/plot-ref/DC.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-194 (0); > - _A_ tests/isapt1/plot-ref/DFA.png; > https://github.com/psi4/psi4/pull/470/files#diff-195 (0); > - _A_ tests/isapt1/plot-ref/DFA.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-196 (0); > - _A_ tests/isapt1/plot-ref/DFB.png; > https://github.com/psi4/psi4/pull/470/files#diff-197 (0); > - _A_ tests/isapt1/plot-ref/DFB.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-198 (0); > - _A_ tests/isapt1/plot-ref/Geom.png; > https://github.com/psi4/psi4/pull/470/files#diff-199 (0); > - _A_ tests/isapt1/plot-ref/Geom.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-200 (0); > - _A_ tests/isapt1/plot-ref/VA.png; > https://github.com/psi4/psi4/pull/470/files#diff-201 (0); > - _A_ tests/isapt1/plot-ref/VA.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-202 (0); > - _A_ tests/isapt1/plot-ref/VB.png; > https://github.com/psi4/psi4/pull/470/files#diff-203 (0); > - _A_ tests/isapt1/plot-ref/VB.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-204 (0); > - _A_ tests/isapt1/plot-ref/VC.png; > https://github.com/psi4/psi4/pull/470/files#diff-205 (0); > - _A_ tests/isapt1/plot-ref/VC.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-206 (0); > - _A_ tests/isapt1/plot-ref/dDA.png; > https://github.com/psi4/psi4/pull/470/files#diff-207 (0); > - _A_ tests/isapt1/plot-ref/dDA.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-208 (0); > - _A_ tests/isapt1/plot-ref/dDB.png; > https://github.com/psi4/psi4/pull/470/files#diff-209 (0); > - _A_ tests/isapt1/plot-ref/dDB.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-210 (0); > - _A_ tests/isapt1/plot-ref/geom.xyz; > https://github.com/psi4/psi4/pull/470/files#diff-211 (0); > - _A_ tests/isapt1/plot-ref/orient.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-212 ,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/470#issuecomment-249267903
https://github.com/psi4/psi4/pull/470#issuecomment-249267903:22356,Testability,test,tests,22356,3 (0); > - _A_ tests/isapt1/plot-ref/DC.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-194 (0); > - _A_ tests/isapt1/plot-ref/DFA.png; > https://github.com/psi4/psi4/pull/470/files#diff-195 (0); > - _A_ tests/isapt1/plot-ref/DFA.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-196 (0); > - _A_ tests/isapt1/plot-ref/DFB.png; > https://github.com/psi4/psi4/pull/470/files#diff-197 (0); > - _A_ tests/isapt1/plot-ref/DFB.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-198 (0); > - _A_ tests/isapt1/plot-ref/Geom.png; > https://github.com/psi4/psi4/pull/470/files#diff-199 (0); > - _A_ tests/isapt1/plot-ref/Geom.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-200 (0); > - _A_ tests/isapt1/plot-ref/VA.png; > https://github.com/psi4/psi4/pull/470/files#diff-201 (0); > - _A_ tests/isapt1/plot-ref/VA.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-202 (0); > - _A_ tests/isapt1/plot-ref/VB.png; > https://github.com/psi4/psi4/pull/470/files#diff-203 (0); > - _A_ tests/isapt1/plot-ref/VB.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-204 (0); > - _A_ tests/isapt1/plot-ref/VC.png; > https://github.com/psi4/psi4/pull/470/files#diff-205 (0); > - _A_ tests/isapt1/plot-ref/VC.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-206 (0); > - _A_ tests/isapt1/plot-ref/dDA.png; > https://github.com/psi4/psi4/pull/470/files#diff-207 (0); > - _A_ tests/isapt1/plot-ref/dDA.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-208 (0); > - _A_ tests/isapt1/plot-ref/dDB.png; > https://github.com/psi4/psi4/pull/470/files#diff-209 (0); > - _A_ tests/isapt1/plot-ref/dDB.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-210 (0); > - _A_ tests/isapt1/plot-ref/geom.xyz; > https://github.com/psi4/psi4/pull/470/files#diff-211 (0); > - _A_ tests/isapt1/plot-ref/orient.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-212 (0); > - _A_ tests/isapt1/plot-ref/run.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-2,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/470#issuecomment-249267903
https://github.com/psi4/psi4/pull/470#issuecomment-249267903:22456,Testability,test,tests,22456,4 (0); > - _A_ tests/isapt1/plot-ref/DFA.png; > https://github.com/psi4/psi4/pull/470/files#diff-195 (0); > - _A_ tests/isapt1/plot-ref/DFA.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-196 (0); > - _A_ tests/isapt1/plot-ref/DFB.png; > https://github.com/psi4/psi4/pull/470/files#diff-197 (0); > - _A_ tests/isapt1/plot-ref/DFB.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-198 (0); > - _A_ tests/isapt1/plot-ref/Geom.png; > https://github.com/psi4/psi4/pull/470/files#diff-199 (0); > - _A_ tests/isapt1/plot-ref/Geom.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-200 (0); > - _A_ tests/isapt1/plot-ref/VA.png; > https://github.com/psi4/psi4/pull/470/files#diff-201 (0); > - _A_ tests/isapt1/plot-ref/VA.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-202 (0); > - _A_ tests/isapt1/plot-ref/VB.png; > https://github.com/psi4/psi4/pull/470/files#diff-203 (0); > - _A_ tests/isapt1/plot-ref/VB.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-204 (0); > - _A_ tests/isapt1/plot-ref/VC.png; > https://github.com/psi4/psi4/pull/470/files#diff-205 (0); > - _A_ tests/isapt1/plot-ref/VC.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-206 (0); > - _A_ tests/isapt1/plot-ref/dDA.png; > https://github.com/psi4/psi4/pull/470/files#diff-207 (0); > - _A_ tests/isapt1/plot-ref/dDA.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-208 (0); > - _A_ tests/isapt1/plot-ref/dDB.png; > https://github.com/psi4/psi4/pull/470/files#diff-209 (0); > - _A_ tests/isapt1/plot-ref/dDB.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-210 (0); > - _A_ tests/isapt1/plot-ref/geom.xyz; > https://github.com/psi4/psi4/pull/470/files#diff-211 (0); > - _A_ tests/isapt1/plot-ref/orient.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-212 (0); > - _A_ tests/isapt1/plot-ref/run.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-213 (0); > - _A_ tests/isapt1/plot-ref/vis.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/470#issuecomment-249267903
https://github.com/psi4/psi4/pull/470#issuecomment-249267903:22554,Testability,test,tests,22554,95 (0); > - _A_ tests/isapt1/plot-ref/DFA.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-196 (0); > - _A_ tests/isapt1/plot-ref/DFB.png; > https://github.com/psi4/psi4/pull/470/files#diff-197 (0); > - _A_ tests/isapt1/plot-ref/DFB.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-198 (0); > - _A_ tests/isapt1/plot-ref/Geom.png; > https://github.com/psi4/psi4/pull/470/files#diff-199 (0); > - _A_ tests/isapt1/plot-ref/Geom.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-200 (0); > - _A_ tests/isapt1/plot-ref/VA.png; > https://github.com/psi4/psi4/pull/470/files#diff-201 (0); > - _A_ tests/isapt1/plot-ref/VA.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-202 (0); > - _A_ tests/isapt1/plot-ref/VB.png; > https://github.com/psi4/psi4/pull/470/files#diff-203 (0); > - _A_ tests/isapt1/plot-ref/VB.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-204 (0); > - _A_ tests/isapt1/plot-ref/VC.png; > https://github.com/psi4/psi4/pull/470/files#diff-205 (0); > - _A_ tests/isapt1/plot-ref/VC.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-206 (0); > - _A_ tests/isapt1/plot-ref/dDA.png; > https://github.com/psi4/psi4/pull/470/files#diff-207 (0); > - _A_ tests/isapt1/plot-ref/dDA.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-208 (0); > - _A_ tests/isapt1/plot-ref/dDB.png; > https://github.com/psi4/psi4/pull/470/files#diff-209 (0); > - _A_ tests/isapt1/plot-ref/dDB.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-210 (0); > - _A_ tests/isapt1/plot-ref/geom.xyz; > https://github.com/psi4/psi4/pull/470/files#diff-211 (0); > - _A_ tests/isapt1/plot-ref/orient.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-212 (0); > - _A_ tests/isapt1/plot-ref/run.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-213 (0); > - _A_ tests/isapt1/plot-ref/vis.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-214 (0); > - _A_ tests/isapt2/CMakeLists.txt; > https://github.com/psi4/psi4/pull/470/files#diff-2,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/470#issuecomment-249267903
https://github.com/psi4/psi4/pull/470#issuecomment-249267903:22654,Testability,test,tests,22654,196 (0); > - _A_ tests/isapt1/plot-ref/DFB.png; > https://github.com/psi4/psi4/pull/470/files#diff-197 (0); > - _A_ tests/isapt1/plot-ref/DFB.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-198 (0); > - _A_ tests/isapt1/plot-ref/Geom.png; > https://github.com/psi4/psi4/pull/470/files#diff-199 (0); > - _A_ tests/isapt1/plot-ref/Geom.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-200 (0); > - _A_ tests/isapt1/plot-ref/VA.png; > https://github.com/psi4/psi4/pull/470/files#diff-201 (0); > - _A_ tests/isapt1/plot-ref/VA.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-202 (0); > - _A_ tests/isapt1/plot-ref/VB.png; > https://github.com/psi4/psi4/pull/470/files#diff-203 (0); > - _A_ tests/isapt1/plot-ref/VB.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-204 (0); > - _A_ tests/isapt1/plot-ref/VC.png; > https://github.com/psi4/psi4/pull/470/files#diff-205 (0); > - _A_ tests/isapt1/plot-ref/VC.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-206 (0); > - _A_ tests/isapt1/plot-ref/dDA.png; > https://github.com/psi4/psi4/pull/470/files#diff-207 (0); > - _A_ tests/isapt1/plot-ref/dDA.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-208 (0); > - _A_ tests/isapt1/plot-ref/dDB.png; > https://github.com/psi4/psi4/pull/470/files#diff-209 (0); > - _A_ tests/isapt1/plot-ref/dDB.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-210 (0); > - _A_ tests/isapt1/plot-ref/geom.xyz; > https://github.com/psi4/psi4/pull/470/files#diff-211 (0); > - _A_ tests/isapt1/plot-ref/orient.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-212 (0); > - _A_ tests/isapt1/plot-ref/run.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-213 (0); > - _A_ tests/isapt1/plot-ref/vis.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-214 (0); > - _A_ tests/isapt2/CMakeLists.txt; > https://github.com/psi4/psi4/pull/470/files#diff-215 (0); > - _A_ tests/isapt2/README; > https://github.com/psi4/psi4/pull/470/files#diff-216 (0); > - ,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/470#issuecomment-249267903
https://github.com/psi4/psi4/pull/470#issuecomment-249267903:22753,Testability,test,tests,22753,197 (0); > - _A_ tests/isapt1/plot-ref/DFB.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-198 (0); > - _A_ tests/isapt1/plot-ref/Geom.png; > https://github.com/psi4/psi4/pull/470/files#diff-199 (0); > - _A_ tests/isapt1/plot-ref/Geom.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-200 (0); > - _A_ tests/isapt1/plot-ref/VA.png; > https://github.com/psi4/psi4/pull/470/files#diff-201 (0); > - _A_ tests/isapt1/plot-ref/VA.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-202 (0); > - _A_ tests/isapt1/plot-ref/VB.png; > https://github.com/psi4/psi4/pull/470/files#diff-203 (0); > - _A_ tests/isapt1/plot-ref/VB.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-204 (0); > - _A_ tests/isapt1/plot-ref/VC.png; > https://github.com/psi4/psi4/pull/470/files#diff-205 (0); > - _A_ tests/isapt1/plot-ref/VC.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-206 (0); > - _A_ tests/isapt1/plot-ref/dDA.png; > https://github.com/psi4/psi4/pull/470/files#diff-207 (0); > - _A_ tests/isapt1/plot-ref/dDA.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-208 (0); > - _A_ tests/isapt1/plot-ref/dDB.png; > https://github.com/psi4/psi4/pull/470/files#diff-209 (0); > - _A_ tests/isapt1/plot-ref/dDB.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-210 (0); > - _A_ tests/isapt1/plot-ref/geom.xyz; > https://github.com/psi4/psi4/pull/470/files#diff-211 (0); > - _A_ tests/isapt1/plot-ref/orient.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-212 (0); > - _A_ tests/isapt1/plot-ref/run.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-213 (0); > - _A_ tests/isapt1/plot-ref/vis.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-214 (0); > - _A_ tests/isapt2/CMakeLists.txt; > https://github.com/psi4/psi4/pull/470/files#diff-215 (0); > - _A_ tests/isapt2/README; > https://github.com/psi4/psi4/pull/470/files#diff-216 (0); > - _A_ tests/isapt2/fsapt-ref/Disp.dat; > https://github.com/psi4/psi4/pull/470/files#diff-217 (0); > ,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/470#issuecomment-249267903
https://github.com/psi4/psi4/pull/470#issuecomment-249267903:22854,Testability,test,tests,22854,198 (0); > - _A_ tests/isapt1/plot-ref/Geom.png; > https://github.com/psi4/psi4/pull/470/files#diff-199 (0); > - _A_ tests/isapt1/plot-ref/Geom.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-200 (0); > - _A_ tests/isapt1/plot-ref/VA.png; > https://github.com/psi4/psi4/pull/470/files#diff-201 (0); > - _A_ tests/isapt1/plot-ref/VA.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-202 (0); > - _A_ tests/isapt1/plot-ref/VB.png; > https://github.com/psi4/psi4/pull/470/files#diff-203 (0); > - _A_ tests/isapt1/plot-ref/VB.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-204 (0); > - _A_ tests/isapt1/plot-ref/VC.png; > https://github.com/psi4/psi4/pull/470/files#diff-205 (0); > - _A_ tests/isapt1/plot-ref/VC.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-206 (0); > - _A_ tests/isapt1/plot-ref/dDA.png; > https://github.com/psi4/psi4/pull/470/files#diff-207 (0); > - _A_ tests/isapt1/plot-ref/dDA.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-208 (0); > - _A_ tests/isapt1/plot-ref/dDB.png; > https://github.com/psi4/psi4/pull/470/files#diff-209 (0); > - _A_ tests/isapt1/plot-ref/dDB.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-210 (0); > - _A_ tests/isapt1/plot-ref/geom.xyz; > https://github.com/psi4/psi4/pull/470/files#diff-211 (0); > - _A_ tests/isapt1/plot-ref/orient.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-212 (0); > - _A_ tests/isapt1/plot-ref/run.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-213 (0); > - _A_ tests/isapt1/plot-ref/vis.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-214 (0); > - _A_ tests/isapt2/CMakeLists.txt; > https://github.com/psi4/psi4/pull/470/files#diff-215 (0); > - _A_ tests/isapt2/README; > https://github.com/psi4/psi4/pull/470/files#diff-216 (0); > - _A_ tests/isapt2/fsapt-ref/Disp.dat; > https://github.com/psi4/psi4/pull/470/files#diff-217 (0); > - _A_ tests/isapt2/fsapt-ref/Elst.dat; > https://github.com/psi4/psi4/pull/470/files#diff-218 (0); > ,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/470#issuecomment-249267903
https://github.com/psi4/psi4/pull/470#issuecomment-249267903:22953,Testability,test,tests,22953,-199 (0); > - _A_ tests/isapt1/plot-ref/Geom.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-200 (0); > - _A_ tests/isapt1/plot-ref/VA.png; > https://github.com/psi4/psi4/pull/470/files#diff-201 (0); > - _A_ tests/isapt1/plot-ref/VA.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-202 (0); > - _A_ tests/isapt1/plot-ref/VB.png; > https://github.com/psi4/psi4/pull/470/files#diff-203 (0); > - _A_ tests/isapt1/plot-ref/VB.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-204 (0); > - _A_ tests/isapt1/plot-ref/VC.png; > https://github.com/psi4/psi4/pull/470/files#diff-205 (0); > - _A_ tests/isapt1/plot-ref/VC.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-206 (0); > - _A_ tests/isapt1/plot-ref/dDA.png; > https://github.com/psi4/psi4/pull/470/files#diff-207 (0); > - _A_ tests/isapt1/plot-ref/dDA.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-208 (0); > - _A_ tests/isapt1/plot-ref/dDB.png; > https://github.com/psi4/psi4/pull/470/files#diff-209 (0); > - _A_ tests/isapt1/plot-ref/dDB.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-210 (0); > - _A_ tests/isapt1/plot-ref/geom.xyz; > https://github.com/psi4/psi4/pull/470/files#diff-211 (0); > - _A_ tests/isapt1/plot-ref/orient.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-212 (0); > - _A_ tests/isapt1/plot-ref/run.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-213 (0); > - _A_ tests/isapt1/plot-ref/vis.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-214 (0); > - _A_ tests/isapt2/CMakeLists.txt; > https://github.com/psi4/psi4/pull/470/files#diff-215 (0); > - _A_ tests/isapt2/README; > https://github.com/psi4/psi4/pull/470/files#diff-216 (0); > - _A_ tests/isapt2/fsapt-ref/Disp.dat; > https://github.com/psi4/psi4/pull/470/files#diff-217 (0); > - _A_ tests/isapt2/fsapt-ref/Elst.dat; > https://github.com/psi4/psi4/pull/470/files#diff-218 (0); > - _A_ tests/isapt2/fsapt-ref/Exch.dat; > https://github.com/psi4/psi4/pull/470/files#diff-219 (0); ,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/470#issuecomment-249267903
https://github.com/psi4/psi4/pull/470#issuecomment-249267903:23054,Testability,test,tests,23054,-200 (0); > - _A_ tests/isapt1/plot-ref/VA.png; > https://github.com/psi4/psi4/pull/470/files#diff-201 (0); > - _A_ tests/isapt1/plot-ref/VA.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-202 (0); > - _A_ tests/isapt1/plot-ref/VB.png; > https://github.com/psi4/psi4/pull/470/files#diff-203 (0); > - _A_ tests/isapt1/plot-ref/VB.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-204 (0); > - _A_ tests/isapt1/plot-ref/VC.png; > https://github.com/psi4/psi4/pull/470/files#diff-205 (0); > - _A_ tests/isapt1/plot-ref/VC.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-206 (0); > - _A_ tests/isapt1/plot-ref/dDA.png; > https://github.com/psi4/psi4/pull/470/files#diff-207 (0); > - _A_ tests/isapt1/plot-ref/dDA.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-208 (0); > - _A_ tests/isapt1/plot-ref/dDB.png; > https://github.com/psi4/psi4/pull/470/files#diff-209 (0); > - _A_ tests/isapt1/plot-ref/dDB.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-210 (0); > - _A_ tests/isapt1/plot-ref/geom.xyz; > https://github.com/psi4/psi4/pull/470/files#diff-211 (0); > - _A_ tests/isapt1/plot-ref/orient.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-212 (0); > - _A_ tests/isapt1/plot-ref/run.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-213 (0); > - _A_ tests/isapt1/plot-ref/vis.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-214 (0); > - _A_ tests/isapt2/CMakeLists.txt; > https://github.com/psi4/psi4/pull/470/files#diff-215 (0); > - _A_ tests/isapt2/README; > https://github.com/psi4/psi4/pull/470/files#diff-216 (0); > - _A_ tests/isapt2/fsapt-ref/Disp.dat; > https://github.com/psi4/psi4/pull/470/files#diff-217 (0); > - _A_ tests/isapt2/fsapt-ref/Elst.dat; > https://github.com/psi4/psi4/pull/470/files#diff-218 (0); > - _A_ tests/isapt2/fsapt-ref/Exch.dat; > https://github.com/psi4/psi4/pull/470/files#diff-219 (0); > - _A_ tests/isapt2/fsapt-ref/IndAB.dat; > https://github.com/psi4/psi4/pull/470/files#diff-220 (0);,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/470#issuecomment-249267903
https://github.com/psi4/psi4/pull/470#issuecomment-249267903:23154,Testability,test,tests,23154,1 (0); > - _A_ tests/isapt1/plot-ref/VA.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-202 (0); > - _A_ tests/isapt1/plot-ref/VB.png; > https://github.com/psi4/psi4/pull/470/files#diff-203 (0); > - _A_ tests/isapt1/plot-ref/VB.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-204 (0); > - _A_ tests/isapt1/plot-ref/VC.png; > https://github.com/psi4/psi4/pull/470/files#diff-205 (0); > - _A_ tests/isapt1/plot-ref/VC.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-206 (0); > - _A_ tests/isapt1/plot-ref/dDA.png; > https://github.com/psi4/psi4/pull/470/files#diff-207 (0); > - _A_ tests/isapt1/plot-ref/dDA.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-208 (0); > - _A_ tests/isapt1/plot-ref/dDB.png; > https://github.com/psi4/psi4/pull/470/files#diff-209 (0); > - _A_ tests/isapt1/plot-ref/dDB.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-210 (0); > - _A_ tests/isapt1/plot-ref/geom.xyz; > https://github.com/psi4/psi4/pull/470/files#diff-211 (0); > - _A_ tests/isapt1/plot-ref/orient.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-212 (0); > - _A_ tests/isapt1/plot-ref/run.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-213 (0); > - _A_ tests/isapt1/plot-ref/vis.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-214 (0); > - _A_ tests/isapt2/CMakeLists.txt; > https://github.com/psi4/psi4/pull/470/files#diff-215 (0); > - _A_ tests/isapt2/README; > https://github.com/psi4/psi4/pull/470/files#diff-216 (0); > - _A_ tests/isapt2/fsapt-ref/Disp.dat; > https://github.com/psi4/psi4/pull/470/files#diff-217 (0); > - _A_ tests/isapt2/fsapt-ref/Elst.dat; > https://github.com/psi4/psi4/pull/470/files#diff-218 (0); > - _A_ tests/isapt2/fsapt-ref/Exch.dat; > https://github.com/psi4/psi4/pull/470/files#diff-219 (0); > - _A_ tests/isapt2/fsapt-ref/IndAB.dat; > https://github.com/psi4/psi4/pull/470/files#diff-220 (0); > - _A_ tests/isapt2/fsapt-ref/IndBA.dat; > https://github.com/psi4/psi4/pull/470/files#diff-221 (0),MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/470#issuecomment-249267903
https://github.com/psi4/psi4/pull/470#issuecomment-249267903:23258,Testability,test,tests,23258,(0); > - _A_ tests/isapt1/plot-ref/VB.png; > https://github.com/psi4/psi4/pull/470/files#diff-203 (0); > - _A_ tests/isapt1/plot-ref/VB.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-204 (0); > - _A_ tests/isapt1/plot-ref/VC.png; > https://github.com/psi4/psi4/pull/470/files#diff-205 (0); > - _A_ tests/isapt1/plot-ref/VC.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-206 (0); > - _A_ tests/isapt1/plot-ref/dDA.png; > https://github.com/psi4/psi4/pull/470/files#diff-207 (0); > - _A_ tests/isapt1/plot-ref/dDA.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-208 (0); > - _A_ tests/isapt1/plot-ref/dDB.png; > https://github.com/psi4/psi4/pull/470/files#diff-209 (0); > - _A_ tests/isapt1/plot-ref/dDB.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-210 (0); > - _A_ tests/isapt1/plot-ref/geom.xyz; > https://github.com/psi4/psi4/pull/470/files#diff-211 (0); > - _A_ tests/isapt1/plot-ref/orient.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-212 (0); > - _A_ tests/isapt1/plot-ref/run.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-213 (0); > - _A_ tests/isapt1/plot-ref/vis.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-214 (0); > - _A_ tests/isapt2/CMakeLists.txt; > https://github.com/psi4/psi4/pull/470/files#diff-215 (0); > - _A_ tests/isapt2/README; > https://github.com/psi4/psi4/pull/470/files#diff-216 (0); > - _A_ tests/isapt2/fsapt-ref/Disp.dat; > https://github.com/psi4/psi4/pull/470/files#diff-217 (0); > - _A_ tests/isapt2/fsapt-ref/Elst.dat; > https://github.com/psi4/psi4/pull/470/files#diff-218 (0); > - _A_ tests/isapt2/fsapt-ref/Exch.dat; > https://github.com/psi4/psi4/pull/470/files#diff-219 (0); > - _A_ tests/isapt2/fsapt-ref/IndAB.dat; > https://github.com/psi4/psi4/pull/470/files#diff-220 (0); > - _A_ tests/isapt2/fsapt-ref/IndBA.dat; > https://github.com/psi4/psi4/pull/470/files#diff-221 (0); > - _A_ tests/isapt2/fsapt-ref/QA.dat; > https://github.com/psi4/psi4/pull/470/files#diff-222 (0); > ,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/470#issuecomment-249267903
https://github.com/psi4/psi4/pull/470#issuecomment-249267903:23359,Testability,test,tests,23359,; > - _A_ tests/isapt1/plot-ref/VB.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-204 (0); > - _A_ tests/isapt1/plot-ref/VC.png; > https://github.com/psi4/psi4/pull/470/files#diff-205 (0); > - _A_ tests/isapt1/plot-ref/VC.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-206 (0); > - _A_ tests/isapt1/plot-ref/dDA.png; > https://github.com/psi4/psi4/pull/470/files#diff-207 (0); > - _A_ tests/isapt1/plot-ref/dDA.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-208 (0); > - _A_ tests/isapt1/plot-ref/dDB.png; > https://github.com/psi4/psi4/pull/470/files#diff-209 (0); > - _A_ tests/isapt1/plot-ref/dDB.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-210 (0); > - _A_ tests/isapt1/plot-ref/geom.xyz; > https://github.com/psi4/psi4/pull/470/files#diff-211 (0); > - _A_ tests/isapt1/plot-ref/orient.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-212 (0); > - _A_ tests/isapt1/plot-ref/run.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-213 (0); > - _A_ tests/isapt1/plot-ref/vis.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-214 (0); > - _A_ tests/isapt2/CMakeLists.txt; > https://github.com/psi4/psi4/pull/470/files#diff-215 (0); > - _A_ tests/isapt2/README; > https://github.com/psi4/psi4/pull/470/files#diff-216 (0); > - _A_ tests/isapt2/fsapt-ref/Disp.dat; > https://github.com/psi4/psi4/pull/470/files#diff-217 (0); > - _A_ tests/isapt2/fsapt-ref/Elst.dat; > https://github.com/psi4/psi4/pull/470/files#diff-218 (0); > - _A_ tests/isapt2/fsapt-ref/Exch.dat; > https://github.com/psi4/psi4/pull/470/files#diff-219 (0); > - _A_ tests/isapt2/fsapt-ref/IndAB.dat; > https://github.com/psi4/psi4/pull/470/files#diff-220 (0); > - _A_ tests/isapt2/fsapt-ref/IndBA.dat; > https://github.com/psi4/psi4/pull/470/files#diff-221 (0); > - _A_ tests/isapt2/fsapt-ref/QA.dat; > https://github.com/psi4/psi4/pull/470/files#diff-222 (0); > - _A_ tests/isapt2/fsapt-ref/QB.dat; > https://github.com/psi4/psi4/pull/470/files#diff-223 (0); > - ,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/470#issuecomment-249267903
https://github.com/psi4/psi4/pull/470#issuecomment-249267903:23460,Testability,test,tests,23460,; > - _A_ tests/isapt1/plot-ref/VC.png; > https://github.com/psi4/psi4/pull/470/files#diff-205 (0); > - _A_ tests/isapt1/plot-ref/VC.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-206 (0); > - _A_ tests/isapt1/plot-ref/dDA.png; > https://github.com/psi4/psi4/pull/470/files#diff-207 (0); > - _A_ tests/isapt1/plot-ref/dDA.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-208 (0); > - _A_ tests/isapt1/plot-ref/dDB.png; > https://github.com/psi4/psi4/pull/470/files#diff-209 (0); > - _A_ tests/isapt1/plot-ref/dDB.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-210 (0); > - _A_ tests/isapt1/plot-ref/geom.xyz; > https://github.com/psi4/psi4/pull/470/files#diff-211 (0); > - _A_ tests/isapt1/plot-ref/orient.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-212 (0); > - _A_ tests/isapt1/plot-ref/run.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-213 (0); > - _A_ tests/isapt1/plot-ref/vis.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-214 (0); > - _A_ tests/isapt2/CMakeLists.txt; > https://github.com/psi4/psi4/pull/470/files#diff-215 (0); > - _A_ tests/isapt2/README; > https://github.com/psi4/psi4/pull/470/files#diff-216 (0); > - _A_ tests/isapt2/fsapt-ref/Disp.dat; > https://github.com/psi4/psi4/pull/470/files#diff-217 (0); > - _A_ tests/isapt2/fsapt-ref/Elst.dat; > https://github.com/psi4/psi4/pull/470/files#diff-218 (0); > - _A_ tests/isapt2/fsapt-ref/Exch.dat; > https://github.com/psi4/psi4/pull/470/files#diff-219 (0); > - _A_ tests/isapt2/fsapt-ref/IndAB.dat; > https://github.com/psi4/psi4/pull/470/files#diff-220 (0); > - _A_ tests/isapt2/fsapt-ref/IndBA.dat; > https://github.com/psi4/psi4/pull/470/files#diff-221 (0); > - _A_ tests/isapt2/fsapt-ref/QA.dat; > https://github.com/psi4/psi4/pull/470/files#diff-222 (0); > - _A_ tests/isapt2/fsapt-ref/QB.dat; > https://github.com/psi4/psi4/pull/470/files#diff-223 (0); > - _A_ tests/isapt2/fsapt-ref/ZA.dat; > https://github.com/psi4/psi4/pull/470/files#diff-224 (0); > - _,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/470#issuecomment-249267903
https://github.com/psi4/psi4/pull/470#issuecomment-249267903:23557,Testability,test,tests,23557,_A_ tests/isapt1/plot-ref/VC.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-206 (0); > - _A_ tests/isapt1/plot-ref/dDA.png; > https://github.com/psi4/psi4/pull/470/files#diff-207 (0); > - _A_ tests/isapt1/plot-ref/dDA.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-208 (0); > - _A_ tests/isapt1/plot-ref/dDB.png; > https://github.com/psi4/psi4/pull/470/files#diff-209 (0); > - _A_ tests/isapt1/plot-ref/dDB.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-210 (0); > - _A_ tests/isapt1/plot-ref/geom.xyz; > https://github.com/psi4/psi4/pull/470/files#diff-211 (0); > - _A_ tests/isapt1/plot-ref/orient.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-212 (0); > - _A_ tests/isapt1/plot-ref/run.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-213 (0); > - _A_ tests/isapt1/plot-ref/vis.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-214 (0); > - _A_ tests/isapt2/CMakeLists.txt; > https://github.com/psi4/psi4/pull/470/files#diff-215 (0); > - _A_ tests/isapt2/README; > https://github.com/psi4/psi4/pull/470/files#diff-216 (0); > - _A_ tests/isapt2/fsapt-ref/Disp.dat; > https://github.com/psi4/psi4/pull/470/files#diff-217 (0); > - _A_ tests/isapt2/fsapt-ref/Elst.dat; > https://github.com/psi4/psi4/pull/470/files#diff-218 (0); > - _A_ tests/isapt2/fsapt-ref/Exch.dat; > https://github.com/psi4/psi4/pull/470/files#diff-219 (0); > - _A_ tests/isapt2/fsapt-ref/IndAB.dat; > https://github.com/psi4/psi4/pull/470/files#diff-220 (0); > - _A_ tests/isapt2/fsapt-ref/IndBA.dat; > https://github.com/psi4/psi4/pull/470/files#diff-221 (0); > - _A_ tests/isapt2/fsapt-ref/QA.dat; > https://github.com/psi4/psi4/pull/470/files#diff-222 (0); > - _A_ tests/isapt2/fsapt-ref/QB.dat; > https://github.com/psi4/psi4/pull/470/files#diff-223 (0); > - _A_ tests/isapt2/fsapt-ref/ZA.dat; > https://github.com/psi4/psi4/pull/470/files#diff-224 (0); > - _A_ tests/isapt2/fsapt-ref/ZB.dat; > https://github.com/psi4/psi4/pull/470/files#diff-225 (0); > - _A_ te,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/470#issuecomment-249267903
https://github.com/psi4/psi4/pull/470#issuecomment-249267903:23646,Testability,test,tests,23646,ff-206 (0); > - _A_ tests/isapt1/plot-ref/dDA.png; > https://github.com/psi4/psi4/pull/470/files#diff-207 (0); > - _A_ tests/isapt1/plot-ref/dDA.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-208 (0); > - _A_ tests/isapt1/plot-ref/dDB.png; > https://github.com/psi4/psi4/pull/470/files#diff-209 (0); > - _A_ tests/isapt1/plot-ref/dDB.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-210 (0); > - _A_ tests/isapt1/plot-ref/geom.xyz; > https://github.com/psi4/psi4/pull/470/files#diff-211 (0); > - _A_ tests/isapt1/plot-ref/orient.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-212 (0); > - _A_ tests/isapt1/plot-ref/run.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-213 (0); > - _A_ tests/isapt1/plot-ref/vis.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-214 (0); > - _A_ tests/isapt2/CMakeLists.txt; > https://github.com/psi4/psi4/pull/470/files#diff-215 (0); > - _A_ tests/isapt2/README; > https://github.com/psi4/psi4/pull/470/files#diff-216 (0); > - _A_ tests/isapt2/fsapt-ref/Disp.dat; > https://github.com/psi4/psi4/pull/470/files#diff-217 (0); > - _A_ tests/isapt2/fsapt-ref/Elst.dat; > https://github.com/psi4/psi4/pull/470/files#diff-218 (0); > - _A_ tests/isapt2/fsapt-ref/Exch.dat; > https://github.com/psi4/psi4/pull/470/files#diff-219 (0); > - _A_ tests/isapt2/fsapt-ref/IndAB.dat; > https://github.com/psi4/psi4/pull/470/files#diff-220 (0); > - _A_ tests/isapt2/fsapt-ref/IndBA.dat; > https://github.com/psi4/psi4/pull/470/files#diff-221 (0); > - _A_ tests/isapt2/fsapt-ref/QA.dat; > https://github.com/psi4/psi4/pull/470/files#diff-222 (0); > - _A_ tests/isapt2/fsapt-ref/QB.dat; > https://github.com/psi4/psi4/pull/470/files#diff-223 (0); > - _A_ tests/isapt2/fsapt-ref/ZA.dat; > https://github.com/psi4/psi4/pull/470/files#diff-224 (0); > - _A_ tests/isapt2/fsapt-ref/ZB.dat; > https://github.com/psi4/psi4/pull/470/files#diff-225 (0); > - _A_ tests/isapt2/fsapt-ref/geom.xyz; > https://github.com/psi4/psi4/pull/470/files#diff-22,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/470#issuecomment-249267903
https://github.com/psi4/psi4/pull/470#issuecomment-249267903:23747,Testability,test,tests,23747,-207 (0); > - _A_ tests/isapt1/plot-ref/dDA.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-208 (0); > - _A_ tests/isapt1/plot-ref/dDB.png; > https://github.com/psi4/psi4/pull/470/files#diff-209 (0); > - _A_ tests/isapt1/plot-ref/dDB.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-210 (0); > - _A_ tests/isapt1/plot-ref/geom.xyz; > https://github.com/psi4/psi4/pull/470/files#diff-211 (0); > - _A_ tests/isapt1/plot-ref/orient.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-212 (0); > - _A_ tests/isapt1/plot-ref/run.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-213 (0); > - _A_ tests/isapt1/plot-ref/vis.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-214 (0); > - _A_ tests/isapt2/CMakeLists.txt; > https://github.com/psi4/psi4/pull/470/files#diff-215 (0); > - _A_ tests/isapt2/README; > https://github.com/psi4/psi4/pull/470/files#diff-216 (0); > - _A_ tests/isapt2/fsapt-ref/Disp.dat; > https://github.com/psi4/psi4/pull/470/files#diff-217 (0); > - _A_ tests/isapt2/fsapt-ref/Elst.dat; > https://github.com/psi4/psi4/pull/470/files#diff-218 (0); > - _A_ tests/isapt2/fsapt-ref/Exch.dat; > https://github.com/psi4/psi4/pull/470/files#diff-219 (0); > - _A_ tests/isapt2/fsapt-ref/IndAB.dat; > https://github.com/psi4/psi4/pull/470/files#diff-220 (0); > - _A_ tests/isapt2/fsapt-ref/IndBA.dat; > https://github.com/psi4/psi4/pull/470/files#diff-221 (0); > - _A_ tests/isapt2/fsapt-ref/QA.dat; > https://github.com/psi4/psi4/pull/470/files#diff-222 (0); > - _A_ tests/isapt2/fsapt-ref/QB.dat; > https://github.com/psi4/psi4/pull/470/files#diff-223 (0); > - _A_ tests/isapt2/fsapt-ref/ZA.dat; > https://github.com/psi4/psi4/pull/470/files#diff-224 (0); > - _A_ tests/isapt2/fsapt-ref/ZB.dat; > https://github.com/psi4/psi4/pull/470/files#diff-225 (0); > - _A_ tests/isapt2/fsapt-ref/geom.xyz; > https://github.com/psi4/psi4/pull/470/files#diff-226 (0); > - _A_ tests/isapt2/input.dat; > https://github.com/psi4/psi4/pull/470/files#diff-227 (0); > ,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/470#issuecomment-249267903
https://github.com/psi4/psi4/pull/470#issuecomment-249267903:23848,Testability,test,tests,23848,-208 (0); > - _A_ tests/isapt1/plot-ref/dDB.png; > https://github.com/psi4/psi4/pull/470/files#diff-209 (0); > - _A_ tests/isapt1/plot-ref/dDB.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-210 (0); > - _A_ tests/isapt1/plot-ref/geom.xyz; > https://github.com/psi4/psi4/pull/470/files#diff-211 (0); > - _A_ tests/isapt1/plot-ref/orient.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-212 (0); > - _A_ tests/isapt1/plot-ref/run.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-213 (0); > - _A_ tests/isapt1/plot-ref/vis.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-214 (0); > - _A_ tests/isapt2/CMakeLists.txt; > https://github.com/psi4/psi4/pull/470/files#diff-215 (0); > - _A_ tests/isapt2/README; > https://github.com/psi4/psi4/pull/470/files#diff-216 (0); > - _A_ tests/isapt2/fsapt-ref/Disp.dat; > https://github.com/psi4/psi4/pull/470/files#diff-217 (0); > - _A_ tests/isapt2/fsapt-ref/Elst.dat; > https://github.com/psi4/psi4/pull/470/files#diff-218 (0); > - _A_ tests/isapt2/fsapt-ref/Exch.dat; > https://github.com/psi4/psi4/pull/470/files#diff-219 (0); > - _A_ tests/isapt2/fsapt-ref/IndAB.dat; > https://github.com/psi4/psi4/pull/470/files#diff-220 (0); > - _A_ tests/isapt2/fsapt-ref/IndBA.dat; > https://github.com/psi4/psi4/pull/470/files#diff-221 (0); > - _A_ tests/isapt2/fsapt-ref/QA.dat; > https://github.com/psi4/psi4/pull/470/files#diff-222 (0); > - _A_ tests/isapt2/fsapt-ref/QB.dat; > https://github.com/psi4/psi4/pull/470/files#diff-223 (0); > - _A_ tests/isapt2/fsapt-ref/ZA.dat; > https://github.com/psi4/psi4/pull/470/files#diff-224 (0); > - _A_ tests/isapt2/fsapt-ref/ZB.dat; > https://github.com/psi4/psi4/pull/470/files#diff-225 (0); > - _A_ tests/isapt2/fsapt-ref/geom.xyz; > https://github.com/psi4/psi4/pull/470/files#diff-226 (0); > - _A_ tests/isapt2/input.dat; > https://github.com/psi4/psi4/pull/470/files#diff-227 (0); > - _A_ tests/isapt2/output.ref; > https://github.com/psi4/psi4/pull/470/files#diff-228 (0); > - _A_ te,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/470#issuecomment-249267903
https://github.com/psi4/psi4/pull/470#issuecomment-249267903:23949,Testability,test,tests,23949,9 (0); > - _A_ tests/isapt1/plot-ref/dDB.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-210 (0); > - _A_ tests/isapt1/plot-ref/geom.xyz; > https://github.com/psi4/psi4/pull/470/files#diff-211 (0); > - _A_ tests/isapt1/plot-ref/orient.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-212 (0); > - _A_ tests/isapt1/plot-ref/run.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-213 (0); > - _A_ tests/isapt1/plot-ref/vis.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-214 (0); > - _A_ tests/isapt2/CMakeLists.txt; > https://github.com/psi4/psi4/pull/470/files#diff-215 (0); > - _A_ tests/isapt2/README; > https://github.com/psi4/psi4/pull/470/files#diff-216 (0); > - _A_ tests/isapt2/fsapt-ref/Disp.dat; > https://github.com/psi4/psi4/pull/470/files#diff-217 (0); > - _A_ tests/isapt2/fsapt-ref/Elst.dat; > https://github.com/psi4/psi4/pull/470/files#diff-218 (0); > - _A_ tests/isapt2/fsapt-ref/Exch.dat; > https://github.com/psi4/psi4/pull/470/files#diff-219 (0); > - _A_ tests/isapt2/fsapt-ref/IndAB.dat; > https://github.com/psi4/psi4/pull/470/files#diff-220 (0); > - _A_ tests/isapt2/fsapt-ref/IndBA.dat; > https://github.com/psi4/psi4/pull/470/files#diff-221 (0); > - _A_ tests/isapt2/fsapt-ref/QA.dat; > https://github.com/psi4/psi4/pull/470/files#diff-222 (0); > - _A_ tests/isapt2/fsapt-ref/QB.dat; > https://github.com/psi4/psi4/pull/470/files#diff-223 (0); > - _A_ tests/isapt2/fsapt-ref/ZA.dat; > https://github.com/psi4/psi4/pull/470/files#diff-224 (0); > - _A_ tests/isapt2/fsapt-ref/ZB.dat; > https://github.com/psi4/psi4/pull/470/files#diff-225 (0); > - _A_ tests/isapt2/fsapt-ref/geom.xyz; > https://github.com/psi4/psi4/pull/470/files#diff-226 (0); > - _A_ tests/isapt2/input.dat; > https://github.com/psi4/psi4/pull/470/files#diff-227 (0); > - _A_ tests/isapt2/output.ref; > https://github.com/psi4/psi4/pull/470/files#diff-228 (0); > - _A_ tests/isapt2/plot-ref/DA.png; > https://github.com/psi4/psi4/pull/470/files#diff-229 (0); > - _A_ tests,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/470#issuecomment-249267903
https://github.com/psi4/psi4/pull/470#issuecomment-249267903:24051,Testability,test,tests,24051, (0); > - _A_ tests/isapt1/plot-ref/geom.xyz; > https://github.com/psi4/psi4/pull/470/files#diff-211 (0); > - _A_ tests/isapt1/plot-ref/orient.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-212 (0); > - _A_ tests/isapt1/plot-ref/run.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-213 (0); > - _A_ tests/isapt1/plot-ref/vis.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-214 (0); > - _A_ tests/isapt2/CMakeLists.txt; > https://github.com/psi4/psi4/pull/470/files#diff-215 (0); > - _A_ tests/isapt2/README; > https://github.com/psi4/psi4/pull/470/files#diff-216 (0); > - _A_ tests/isapt2/fsapt-ref/Disp.dat; > https://github.com/psi4/psi4/pull/470/files#diff-217 (0); > - _A_ tests/isapt2/fsapt-ref/Elst.dat; > https://github.com/psi4/psi4/pull/470/files#diff-218 (0); > - _A_ tests/isapt2/fsapt-ref/Exch.dat; > https://github.com/psi4/psi4/pull/470/files#diff-219 (0); > - _A_ tests/isapt2/fsapt-ref/IndAB.dat; > https://github.com/psi4/psi4/pull/470/files#diff-220 (0); > - _A_ tests/isapt2/fsapt-ref/IndBA.dat; > https://github.com/psi4/psi4/pull/470/files#diff-221 (0); > - _A_ tests/isapt2/fsapt-ref/QA.dat; > https://github.com/psi4/psi4/pull/470/files#diff-222 (0); > - _A_ tests/isapt2/fsapt-ref/QB.dat; > https://github.com/psi4/psi4/pull/470/files#diff-223 (0); > - _A_ tests/isapt2/fsapt-ref/ZA.dat; > https://github.com/psi4/psi4/pull/470/files#diff-224 (0); > - _A_ tests/isapt2/fsapt-ref/ZB.dat; > https://github.com/psi4/psi4/pull/470/files#diff-225 (0); > - _A_ tests/isapt2/fsapt-ref/geom.xyz; > https://github.com/psi4/psi4/pull/470/files#diff-226 (0); > - _A_ tests/isapt2/input.dat; > https://github.com/psi4/psi4/pull/470/files#diff-227 (0); > - _A_ tests/isapt2/output.ref; > https://github.com/psi4/psi4/pull/470/files#diff-228 (0); > - _A_ tests/isapt2/plot-ref/DA.png; > https://github.com/psi4/psi4/pull/470/files#diff-229 (0); > - _A_ tests/isapt2/plot-ref/DA.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-230 (0); > - _A_ tests/i,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/470#issuecomment-249267903
https://github.com/psi4/psi4/pull/470#issuecomment-249267903:24153,Testability,test,tests,24153, (0); > - _A_ tests/isapt1/plot-ref/orient.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-212 (0); > - _A_ tests/isapt1/plot-ref/run.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-213 (0); > - _A_ tests/isapt1/plot-ref/vis.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-214 (0); > - _A_ tests/isapt2/CMakeLists.txt; > https://github.com/psi4/psi4/pull/470/files#diff-215 (0); > - _A_ tests/isapt2/README; > https://github.com/psi4/psi4/pull/470/files#diff-216 (0); > - _A_ tests/isapt2/fsapt-ref/Disp.dat; > https://github.com/psi4/psi4/pull/470/files#diff-217 (0); > - _A_ tests/isapt2/fsapt-ref/Elst.dat; > https://github.com/psi4/psi4/pull/470/files#diff-218 (0); > - _A_ tests/isapt2/fsapt-ref/Exch.dat; > https://github.com/psi4/psi4/pull/470/files#diff-219 (0); > - _A_ tests/isapt2/fsapt-ref/IndAB.dat; > https://github.com/psi4/psi4/pull/470/files#diff-220 (0); > - _A_ tests/isapt2/fsapt-ref/IndBA.dat; > https://github.com/psi4/psi4/pull/470/files#diff-221 (0); > - _A_ tests/isapt2/fsapt-ref/QA.dat; > https://github.com/psi4/psi4/pull/470/files#diff-222 (0); > - _A_ tests/isapt2/fsapt-ref/QB.dat; > https://github.com/psi4/psi4/pull/470/files#diff-223 (0); > - _A_ tests/isapt2/fsapt-ref/ZA.dat; > https://github.com/psi4/psi4/pull/470/files#diff-224 (0); > - _A_ tests/isapt2/fsapt-ref/ZB.dat; > https://github.com/psi4/psi4/pull/470/files#diff-225 (0); > - _A_ tests/isapt2/fsapt-ref/geom.xyz; > https://github.com/psi4/psi4/pull/470/files#diff-226 (0); > - _A_ tests/isapt2/input.dat; > https://github.com/psi4/psi4/pull/470/files#diff-227 (0); > - _A_ tests/isapt2/output.ref; > https://github.com/psi4/psi4/pull/470/files#diff-228 (0); > - _A_ tests/isapt2/plot-ref/DA.png; > https://github.com/psi4/psi4/pull/470/files#diff-229 (0); > - _A_ tests/isapt2/plot-ref/DA.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-230 (0); > - _A_ tests/isapt2/plot-ref/DB.png; > https://github.com/psi4/psi4/pull/470/files#diff-231 (0); > - _A_ tests/isap,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/470#issuecomment-249267903
https://github.com/psi4/psi4/pull/470#issuecomment-249267903:24252,Testability,test,tests,24252,f-212 (0); > - _A_ tests/isapt1/plot-ref/run.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-213 (0); > - _A_ tests/isapt1/plot-ref/vis.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-214 (0); > - _A_ tests/isapt2/CMakeLists.txt; > https://github.com/psi4/psi4/pull/470/files#diff-215 (0); > - _A_ tests/isapt2/README; > https://github.com/psi4/psi4/pull/470/files#diff-216 (0); > - _A_ tests/isapt2/fsapt-ref/Disp.dat; > https://github.com/psi4/psi4/pull/470/files#diff-217 (0); > - _A_ tests/isapt2/fsapt-ref/Elst.dat; > https://github.com/psi4/psi4/pull/470/files#diff-218 (0); > - _A_ tests/isapt2/fsapt-ref/Exch.dat; > https://github.com/psi4/psi4/pull/470/files#diff-219 (0); > - _A_ tests/isapt2/fsapt-ref/IndAB.dat; > https://github.com/psi4/psi4/pull/470/files#diff-220 (0); > - _A_ tests/isapt2/fsapt-ref/IndBA.dat; > https://github.com/psi4/psi4/pull/470/files#diff-221 (0); > - _A_ tests/isapt2/fsapt-ref/QA.dat; > https://github.com/psi4/psi4/pull/470/files#diff-222 (0); > - _A_ tests/isapt2/fsapt-ref/QB.dat; > https://github.com/psi4/psi4/pull/470/files#diff-223 (0); > - _A_ tests/isapt2/fsapt-ref/ZA.dat; > https://github.com/psi4/psi4/pull/470/files#diff-224 (0); > - _A_ tests/isapt2/fsapt-ref/ZB.dat; > https://github.com/psi4/psi4/pull/470/files#diff-225 (0); > - _A_ tests/isapt2/fsapt-ref/geom.xyz; > https://github.com/psi4/psi4/pull/470/files#diff-226 (0); > - _A_ tests/isapt2/input.dat; > https://github.com/psi4/psi4/pull/470/files#diff-227 (0); > - _A_ tests/isapt2/output.ref; > https://github.com/psi4/psi4/pull/470/files#diff-228 (0); > - _A_ tests/isapt2/plot-ref/DA.png; > https://github.com/psi4/psi4/pull/470/files#diff-229 (0); > - _A_ tests/isapt2/plot-ref/DA.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-230 (0); > - _A_ tests/isapt2/plot-ref/DB.png; > https://github.com/psi4/psi4/pull/470/files#diff-231 (0); > - _A_ tests/isapt2/plot-ref/DB.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-232 (0); > - _A_ tests/isa,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/470#issuecomment-249267903
https://github.com/psi4/psi4/pull/470#issuecomment-249267903:24351,Testability,test,tests,24351,iff-213 (0); > - _A_ tests/isapt1/plot-ref/vis.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-214 (0); > - _A_ tests/isapt2/CMakeLists.txt; > https://github.com/psi4/psi4/pull/470/files#diff-215 (0); > - _A_ tests/isapt2/README; > https://github.com/psi4/psi4/pull/470/files#diff-216 (0); > - _A_ tests/isapt2/fsapt-ref/Disp.dat; > https://github.com/psi4/psi4/pull/470/files#diff-217 (0); > - _A_ tests/isapt2/fsapt-ref/Elst.dat; > https://github.com/psi4/psi4/pull/470/files#diff-218 (0); > - _A_ tests/isapt2/fsapt-ref/Exch.dat; > https://github.com/psi4/psi4/pull/470/files#diff-219 (0); > - _A_ tests/isapt2/fsapt-ref/IndAB.dat; > https://github.com/psi4/psi4/pull/470/files#diff-220 (0); > - _A_ tests/isapt2/fsapt-ref/IndBA.dat; > https://github.com/psi4/psi4/pull/470/files#diff-221 (0); > - _A_ tests/isapt2/fsapt-ref/QA.dat; > https://github.com/psi4/psi4/pull/470/files#diff-222 (0); > - _A_ tests/isapt2/fsapt-ref/QB.dat; > https://github.com/psi4/psi4/pull/470/files#diff-223 (0); > - _A_ tests/isapt2/fsapt-ref/ZA.dat; > https://github.com/psi4/psi4/pull/470/files#diff-224 (0); > - _A_ tests/isapt2/fsapt-ref/ZB.dat; > https://github.com/psi4/psi4/pull/470/files#diff-225 (0); > - _A_ tests/isapt2/fsapt-ref/geom.xyz; > https://github.com/psi4/psi4/pull/470/files#diff-226 (0); > - _A_ tests/isapt2/input.dat; > https://github.com/psi4/psi4/pull/470/files#diff-227 (0); > - _A_ tests/isapt2/output.ref; > https://github.com/psi4/psi4/pull/470/files#diff-228 (0); > - _A_ tests/isapt2/plot-ref/DA.png; > https://github.com/psi4/psi4/pull/470/files#diff-229 (0); > - _A_ tests/isapt2/plot-ref/DA.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-230 (0); > - _A_ tests/isapt2/plot-ref/DB.png; > https://github.com/psi4/psi4/pull/470/files#diff-231 (0); > - _A_ tests/isapt2/plot-ref/DB.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-232 (0); > - _A_ tests/isapt2/plot-ref/DC.png; > https://github.com/psi4/psi4/pull/470/files#diff-233 (0); > - _A_ tests/isap,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/470#issuecomment-249267903
https://github.com/psi4/psi4/pull/470#issuecomment-249267903:24450,Testability,test,tests,24450,#diff-214 (0); > - _A_ tests/isapt2/CMakeLists.txt; > https://github.com/psi4/psi4/pull/470/files#diff-215 (0); > - _A_ tests/isapt2/README; > https://github.com/psi4/psi4/pull/470/files#diff-216 (0); > - _A_ tests/isapt2/fsapt-ref/Disp.dat; > https://github.com/psi4/psi4/pull/470/files#diff-217 (0); > - _A_ tests/isapt2/fsapt-ref/Elst.dat; > https://github.com/psi4/psi4/pull/470/files#diff-218 (0); > - _A_ tests/isapt2/fsapt-ref/Exch.dat; > https://github.com/psi4/psi4/pull/470/files#diff-219 (0); > - _A_ tests/isapt2/fsapt-ref/IndAB.dat; > https://github.com/psi4/psi4/pull/470/files#diff-220 (0); > - _A_ tests/isapt2/fsapt-ref/IndBA.dat; > https://github.com/psi4/psi4/pull/470/files#diff-221 (0); > - _A_ tests/isapt2/fsapt-ref/QA.dat; > https://github.com/psi4/psi4/pull/470/files#diff-222 (0); > - _A_ tests/isapt2/fsapt-ref/QB.dat; > https://github.com/psi4/psi4/pull/470/files#diff-223 (0); > - _A_ tests/isapt2/fsapt-ref/ZA.dat; > https://github.com/psi4/psi4/pull/470/files#diff-224 (0); > - _A_ tests/isapt2/fsapt-ref/ZB.dat; > https://github.com/psi4/psi4/pull/470/files#diff-225 (0); > - _A_ tests/isapt2/fsapt-ref/geom.xyz; > https://github.com/psi4/psi4/pull/470/files#diff-226 (0); > - _A_ tests/isapt2/input.dat; > https://github.com/psi4/psi4/pull/470/files#diff-227 (0); > - _A_ tests/isapt2/output.ref; > https://github.com/psi4/psi4/pull/470/files#diff-228 (0); > - _A_ tests/isapt2/plot-ref/DA.png; > https://github.com/psi4/psi4/pull/470/files#diff-229 (0); > - _A_ tests/isapt2/plot-ref/DA.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-230 (0); > - _A_ tests/isapt2/plot-ref/DB.png; > https://github.com/psi4/psi4/pull/470/files#diff-231 (0); > - _A_ tests/isapt2/plot-ref/DB.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-232 (0); > - _A_ tests/isapt2/plot-ref/DC.png; > https://github.com/psi4/psi4/pull/470/files#diff-233 (0); > - _A_ tests/isapt2/plot-ref/DC.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-234 (0); > - _A_ tests/isa,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/470#issuecomment-249267903
https://github.com/psi4/psi4/pull/470#issuecomment-249267903:24549,Testability,test,tests,24549,ff-215 (0); > - _A_ tests/isapt2/README; > https://github.com/psi4/psi4/pull/470/files#diff-216 (0); > - _A_ tests/isapt2/fsapt-ref/Disp.dat; > https://github.com/psi4/psi4/pull/470/files#diff-217 (0); > - _A_ tests/isapt2/fsapt-ref/Elst.dat; > https://github.com/psi4/psi4/pull/470/files#diff-218 (0); > - _A_ tests/isapt2/fsapt-ref/Exch.dat; > https://github.com/psi4/psi4/pull/470/files#diff-219 (0); > - _A_ tests/isapt2/fsapt-ref/IndAB.dat; > https://github.com/psi4/psi4/pull/470/files#diff-220 (0); > - _A_ tests/isapt2/fsapt-ref/IndBA.dat; > https://github.com/psi4/psi4/pull/470/files#diff-221 (0); > - _A_ tests/isapt2/fsapt-ref/QA.dat; > https://github.com/psi4/psi4/pull/470/files#diff-222 (0); > - _A_ tests/isapt2/fsapt-ref/QB.dat; > https://github.com/psi4/psi4/pull/470/files#diff-223 (0); > - _A_ tests/isapt2/fsapt-ref/ZA.dat; > https://github.com/psi4/psi4/pull/470/files#diff-224 (0); > - _A_ tests/isapt2/fsapt-ref/ZB.dat; > https://github.com/psi4/psi4/pull/470/files#diff-225 (0); > - _A_ tests/isapt2/fsapt-ref/geom.xyz; > https://github.com/psi4/psi4/pull/470/files#diff-226 (0); > - _A_ tests/isapt2/input.dat; > https://github.com/psi4/psi4/pull/470/files#diff-227 (0); > - _A_ tests/isapt2/output.ref; > https://github.com/psi4/psi4/pull/470/files#diff-228 (0); > - _A_ tests/isapt2/plot-ref/DA.png; > https://github.com/psi4/psi4/pull/470/files#diff-229 (0); > - _A_ tests/isapt2/plot-ref/DA.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-230 (0); > - _A_ tests/isapt2/plot-ref/DB.png; > https://github.com/psi4/psi4/pull/470/files#diff-231 (0); > - _A_ tests/isapt2/plot-ref/DB.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-232 (0); > - _A_ tests/isapt2/plot-ref/DC.png; > https://github.com/psi4/psi4/pull/470/files#diff-233 (0); > - _A_ tests/isapt2/plot-ref/DC.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-234 (0); > - _A_ tests/isapt2/plot-ref/DFA.png; > https://github.com/psi4/psi4/pull/470/files#diff-235 (0); > - _A_ tests/isap,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/470#issuecomment-249267903
https://github.com/psi4/psi4/pull/470#issuecomment-249267903:24650,Testability,test,tests,24650,0); > - _A_ tests/isapt2/fsapt-ref/Disp.dat; > https://github.com/psi4/psi4/pull/470/files#diff-217 (0); > - _A_ tests/isapt2/fsapt-ref/Elst.dat; > https://github.com/psi4/psi4/pull/470/files#diff-218 (0); > - _A_ tests/isapt2/fsapt-ref/Exch.dat; > https://github.com/psi4/psi4/pull/470/files#diff-219 (0); > - _A_ tests/isapt2/fsapt-ref/IndAB.dat; > https://github.com/psi4/psi4/pull/470/files#diff-220 (0); > - _A_ tests/isapt2/fsapt-ref/IndBA.dat; > https://github.com/psi4/psi4/pull/470/files#diff-221 (0); > - _A_ tests/isapt2/fsapt-ref/QA.dat; > https://github.com/psi4/psi4/pull/470/files#diff-222 (0); > - _A_ tests/isapt2/fsapt-ref/QB.dat; > https://github.com/psi4/psi4/pull/470/files#diff-223 (0); > - _A_ tests/isapt2/fsapt-ref/ZA.dat; > https://github.com/psi4/psi4/pull/470/files#diff-224 (0); > - _A_ tests/isapt2/fsapt-ref/ZB.dat; > https://github.com/psi4/psi4/pull/470/files#diff-225 (0); > - _A_ tests/isapt2/fsapt-ref/geom.xyz; > https://github.com/psi4/psi4/pull/470/files#diff-226 (0); > - _A_ tests/isapt2/input.dat; > https://github.com/psi4/psi4/pull/470/files#diff-227 (0); > - _A_ tests/isapt2/output.ref; > https://github.com/psi4/psi4/pull/470/files#diff-228 (0); > - _A_ tests/isapt2/plot-ref/DA.png; > https://github.com/psi4/psi4/pull/470/files#diff-229 (0); > - _A_ tests/isapt2/plot-ref/DA.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-230 (0); > - _A_ tests/isapt2/plot-ref/DB.png; > https://github.com/psi4/psi4/pull/470/files#diff-231 (0); > - _A_ tests/isapt2/plot-ref/DB.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-232 (0); > - _A_ tests/isapt2/plot-ref/DC.png; > https://github.com/psi4/psi4/pull/470/files#diff-233 (0); > - _A_ tests/isapt2/plot-ref/DC.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-234 (0); > - _A_ tests/isapt2/plot-ref/DFA.png; > https://github.com/psi4/psi4/pull/470/files#diff-235 (0); > - _A_ tests/isapt2/plot-ref/DFA.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-236 (0); > - _A_ tests,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/470#issuecomment-249267903
https://github.com/psi4/psi4/pull/470#issuecomment-249267903:24742,Testability,test,tests,24742,iff-217 (0); > - _A_ tests/isapt2/fsapt-ref/Elst.dat; > https://github.com/psi4/psi4/pull/470/files#diff-218 (0); > - _A_ tests/isapt2/fsapt-ref/Exch.dat; > https://github.com/psi4/psi4/pull/470/files#diff-219 (0); > - _A_ tests/isapt2/fsapt-ref/IndAB.dat; > https://github.com/psi4/psi4/pull/470/files#diff-220 (0); > - _A_ tests/isapt2/fsapt-ref/IndBA.dat; > https://github.com/psi4/psi4/pull/470/files#diff-221 (0); > - _A_ tests/isapt2/fsapt-ref/QA.dat; > https://github.com/psi4/psi4/pull/470/files#diff-222 (0); > - _A_ tests/isapt2/fsapt-ref/QB.dat; > https://github.com/psi4/psi4/pull/470/files#diff-223 (0); > - _A_ tests/isapt2/fsapt-ref/ZA.dat; > https://github.com/psi4/psi4/pull/470/files#diff-224 (0); > - _A_ tests/isapt2/fsapt-ref/ZB.dat; > https://github.com/psi4/psi4/pull/470/files#diff-225 (0); > - _A_ tests/isapt2/fsapt-ref/geom.xyz; > https://github.com/psi4/psi4/pull/470/files#diff-226 (0); > - _A_ tests/isapt2/input.dat; > https://github.com/psi4/psi4/pull/470/files#diff-227 (0); > - _A_ tests/isapt2/output.ref; > https://github.com/psi4/psi4/pull/470/files#diff-228 (0); > - _A_ tests/isapt2/plot-ref/DA.png; > https://github.com/psi4/psi4/pull/470/files#diff-229 (0); > - _A_ tests/isapt2/plot-ref/DA.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-230 (0); > - _A_ tests/isapt2/plot-ref/DB.png; > https://github.com/psi4/psi4/pull/470/files#diff-231 (0); > - _A_ tests/isapt2/plot-ref/DB.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-232 (0); > - _A_ tests/isapt2/plot-ref/DC.png; > https://github.com/psi4/psi4/pull/470/files#diff-233 (0); > - _A_ tests/isapt2/plot-ref/DC.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-234 (0); > - _A_ tests/isapt2/plot-ref/DFA.png; > https://github.com/psi4/psi4/pull/470/files#diff-235 (0); > - _A_ tests/isapt2/plot-ref/DFA.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-236 (0); > - _A_ tests/isapt2/plot-ref/DFB.png; > https://github.com/psi4/psi4/pull/470/files#diff-237 (0); > - _A_,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/470#issuecomment-249267903
https://github.com/psi4/psi4/pull/470#issuecomment-249267903:24835,Testability,test,tests,24835,les#diff-218 (0); > - _A_ tests/isapt2/fsapt-ref/Exch.dat; > https://github.com/psi4/psi4/pull/470/files#diff-219 (0); > - _A_ tests/isapt2/fsapt-ref/IndAB.dat; > https://github.com/psi4/psi4/pull/470/files#diff-220 (0); > - _A_ tests/isapt2/fsapt-ref/IndBA.dat; > https://github.com/psi4/psi4/pull/470/files#diff-221 (0); > - _A_ tests/isapt2/fsapt-ref/QA.dat; > https://github.com/psi4/psi4/pull/470/files#diff-222 (0); > - _A_ tests/isapt2/fsapt-ref/QB.dat; > https://github.com/psi4/psi4/pull/470/files#diff-223 (0); > - _A_ tests/isapt2/fsapt-ref/ZA.dat; > https://github.com/psi4/psi4/pull/470/files#diff-224 (0); > - _A_ tests/isapt2/fsapt-ref/ZB.dat; > https://github.com/psi4/psi4/pull/470/files#diff-225 (0); > - _A_ tests/isapt2/fsapt-ref/geom.xyz; > https://github.com/psi4/psi4/pull/470/files#diff-226 (0); > - _A_ tests/isapt2/input.dat; > https://github.com/psi4/psi4/pull/470/files#diff-227 (0); > - _A_ tests/isapt2/output.ref; > https://github.com/psi4/psi4/pull/470/files#diff-228 (0); > - _A_ tests/isapt2/plot-ref/DA.png; > https://github.com/psi4/psi4/pull/470/files#diff-229 (0); > - _A_ tests/isapt2/plot-ref/DA.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-230 (0); > - _A_ tests/isapt2/plot-ref/DB.png; > https://github.com/psi4/psi4/pull/470/files#diff-231 (0); > - _A_ tests/isapt2/plot-ref/DB.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-232 (0); > - _A_ tests/isapt2/plot-ref/DC.png; > https://github.com/psi4/psi4/pull/470/files#diff-233 (0); > - _A_ tests/isapt2/plot-ref/DC.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-234 (0); > - _A_ tests/isapt2/plot-ref/DFA.png; > https://github.com/psi4/psi4/pull/470/files#diff-235 (0); > - _A_ tests/isapt2/plot-ref/DFA.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-236 (0); > - _A_ tests/isapt2/plot-ref/DFB.png; > https://github.com/psi4/psi4/pull/470/files#diff-237 (0); > - _A_ tests/isapt2/plot-ref/DFB.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-238 (0); >,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/470#issuecomment-249267903
https://github.com/psi4/psi4/pull/470#issuecomment-249267903:24933,Testability,test,tests,24933,/files#diff-219 (0); > - _A_ tests/isapt2/fsapt-ref/IndAB.dat; > https://github.com/psi4/psi4/pull/470/files#diff-220 (0); > - _A_ tests/isapt2/fsapt-ref/IndBA.dat; > https://github.com/psi4/psi4/pull/470/files#diff-221 (0); > - _A_ tests/isapt2/fsapt-ref/QA.dat; > https://github.com/psi4/psi4/pull/470/files#diff-222 (0); > - _A_ tests/isapt2/fsapt-ref/QB.dat; > https://github.com/psi4/psi4/pull/470/files#diff-223 (0); > - _A_ tests/isapt2/fsapt-ref/ZA.dat; > https://github.com/psi4/psi4/pull/470/files#diff-224 (0); > - _A_ tests/isapt2/fsapt-ref/ZB.dat; > https://github.com/psi4/psi4/pull/470/files#diff-225 (0); > - _A_ tests/isapt2/fsapt-ref/geom.xyz; > https://github.com/psi4/psi4/pull/470/files#diff-226 (0); > - _A_ tests/isapt2/input.dat; > https://github.com/psi4/psi4/pull/470/files#diff-227 (0); > - _A_ tests/isapt2/output.ref; > https://github.com/psi4/psi4/pull/470/files#diff-228 (0); > - _A_ tests/isapt2/plot-ref/DA.png; > https://github.com/psi4/psi4/pull/470/files#diff-229 (0); > - _A_ tests/isapt2/plot-ref/DA.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-230 (0); > - _A_ tests/isapt2/plot-ref/DB.png; > https://github.com/psi4/psi4/pull/470/files#diff-231 (0); > - _A_ tests/isapt2/plot-ref/DB.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-232 (0); > - _A_ tests/isapt2/plot-ref/DC.png; > https://github.com/psi4/psi4/pull/470/files#diff-233 (0); > - _A_ tests/isapt2/plot-ref/DC.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-234 (0); > - _A_ tests/isapt2/plot-ref/DFA.png; > https://github.com/psi4/psi4/pull/470/files#diff-235 (0); > - _A_ tests/isapt2/plot-ref/DFA.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-236 (0); > - _A_ tests/isapt2/plot-ref/DFB.png; > https://github.com/psi4/psi4/pull/470/files#diff-237 (0); > - _A_ tests/isapt2/plot-ref/DFB.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-238 (0); > - _A_ tests/isapt2/plot-ref/Geom.png; > https://github.com/psi4/psi4/pull/470/files#diff-239 (0);,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/470#issuecomment-249267903
https://github.com/psi4/psi4/pull/470#issuecomment-249267903:25033,Testability,test,tests,25033,70/files#diff-220 (0); > - _A_ tests/isapt2/fsapt-ref/IndBA.dat; > https://github.com/psi4/psi4/pull/470/files#diff-221 (0); > - _A_ tests/isapt2/fsapt-ref/QA.dat; > https://github.com/psi4/psi4/pull/470/files#diff-222 (0); > - _A_ tests/isapt2/fsapt-ref/QB.dat; > https://github.com/psi4/psi4/pull/470/files#diff-223 (0); > - _A_ tests/isapt2/fsapt-ref/ZA.dat; > https://github.com/psi4/psi4/pull/470/files#diff-224 (0); > - _A_ tests/isapt2/fsapt-ref/ZB.dat; > https://github.com/psi4/psi4/pull/470/files#diff-225 (0); > - _A_ tests/isapt2/fsapt-ref/geom.xyz; > https://github.com/psi4/psi4/pull/470/files#diff-226 (0); > - _A_ tests/isapt2/input.dat; > https://github.com/psi4/psi4/pull/470/files#diff-227 (0); > - _A_ tests/isapt2/output.ref; > https://github.com/psi4/psi4/pull/470/files#diff-228 (0); > - _A_ tests/isapt2/plot-ref/DA.png; > https://github.com/psi4/psi4/pull/470/files#diff-229 (0); > - _A_ tests/isapt2/plot-ref/DA.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-230 (0); > - _A_ tests/isapt2/plot-ref/DB.png; > https://github.com/psi4/psi4/pull/470/files#diff-231 (0); > - _A_ tests/isapt2/plot-ref/DB.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-232 (0); > - _A_ tests/isapt2/plot-ref/DC.png; > https://github.com/psi4/psi4/pull/470/files#diff-233 (0); > - _A_ tests/isapt2/plot-ref/DC.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-234 (0); > - _A_ tests/isapt2/plot-ref/DFA.png; > https://github.com/psi4/psi4/pull/470/files#diff-235 (0); > - _A_ tests/isapt2/plot-ref/DFA.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-236 (0); > - _A_ tests/isapt2/plot-ref/DFB.png; > https://github.com/psi4/psi4/pull/470/files#diff-237 (0); > - _A_ tests/isapt2/plot-ref/DFB.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-238 (0); > - _A_ tests/isapt2/plot-ref/Geom.png; > https://github.com/psi4/psi4/pull/470/files#diff-239 (0); > - _A_ tests/isapt2/plot-ref/Geom.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-240 (0,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/470#issuecomment-249267903
https://github.com/psi4/psi4/pull/470#issuecomment-249267903:25131,Testability,test,tests,25131,ll/470/files#diff-221 (0); > - _A_ tests/isapt2/fsapt-ref/QA.dat; > https://github.com/psi4/psi4/pull/470/files#diff-222 (0); > - _A_ tests/isapt2/fsapt-ref/QB.dat; > https://github.com/psi4/psi4/pull/470/files#diff-223 (0); > - _A_ tests/isapt2/fsapt-ref/ZA.dat; > https://github.com/psi4/psi4/pull/470/files#diff-224 (0); > - _A_ tests/isapt2/fsapt-ref/ZB.dat; > https://github.com/psi4/psi4/pull/470/files#diff-225 (0); > - _A_ tests/isapt2/fsapt-ref/geom.xyz; > https://github.com/psi4/psi4/pull/470/files#diff-226 (0); > - _A_ tests/isapt2/input.dat; > https://github.com/psi4/psi4/pull/470/files#diff-227 (0); > - _A_ tests/isapt2/output.ref; > https://github.com/psi4/psi4/pull/470/files#diff-228 (0); > - _A_ tests/isapt2/plot-ref/DA.png; > https://github.com/psi4/psi4/pull/470/files#diff-229 (0); > - _A_ tests/isapt2/plot-ref/DA.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-230 (0); > - _A_ tests/isapt2/plot-ref/DB.png; > https://github.com/psi4/psi4/pull/470/files#diff-231 (0); > - _A_ tests/isapt2/plot-ref/DB.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-232 (0); > - _A_ tests/isapt2/plot-ref/DC.png; > https://github.com/psi4/psi4/pull/470/files#diff-233 (0); > - _A_ tests/isapt2/plot-ref/DC.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-234 (0); > - _A_ tests/isapt2/plot-ref/DFA.png; > https://github.com/psi4/psi4/pull/470/files#diff-235 (0); > - _A_ tests/isapt2/plot-ref/DFA.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-236 (0); > - _A_ tests/isapt2/plot-ref/DFB.png; > https://github.com/psi4/psi4/pull/470/files#diff-237 (0); > - _A_ tests/isapt2/plot-ref/DFB.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-238 (0); > - _A_ tests/isapt2/plot-ref/Geom.png; > https://github.com/psi4/psi4/pull/470/files#diff-239 (0); > - _A_ tests/isapt2/plot-ref/Geom.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-240 (0); > - _A_ tests/isapt2/plot-ref/VA.png; > https://github.com/psi4/psi4/pull/470/files#diff-241 (0,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/470#issuecomment-249267903
https://github.com/psi4/psi4/pull/470#issuecomment-249267903:25231,Testability,test,tests,25231,l/470/files#diff-222 (0); > - _A_ tests/isapt2/fsapt-ref/QB.dat; > https://github.com/psi4/psi4/pull/470/files#diff-223 (0); > - _A_ tests/isapt2/fsapt-ref/ZA.dat; > https://github.com/psi4/psi4/pull/470/files#diff-224 (0); > - _A_ tests/isapt2/fsapt-ref/ZB.dat; > https://github.com/psi4/psi4/pull/470/files#diff-225 (0); > - _A_ tests/isapt2/fsapt-ref/geom.xyz; > https://github.com/psi4/psi4/pull/470/files#diff-226 (0); > - _A_ tests/isapt2/input.dat; > https://github.com/psi4/psi4/pull/470/files#diff-227 (0); > - _A_ tests/isapt2/output.ref; > https://github.com/psi4/psi4/pull/470/files#diff-228 (0); > - _A_ tests/isapt2/plot-ref/DA.png; > https://github.com/psi4/psi4/pull/470/files#diff-229 (0); > - _A_ tests/isapt2/plot-ref/DA.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-230 (0); > - _A_ tests/isapt2/plot-ref/DB.png; > https://github.com/psi4/psi4/pull/470/files#diff-231 (0); > - _A_ tests/isapt2/plot-ref/DB.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-232 (0); > - _A_ tests/isapt2/plot-ref/DC.png; > https://github.com/psi4/psi4/pull/470/files#diff-233 (0); > - _A_ tests/isapt2/plot-ref/DC.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-234 (0); > - _A_ tests/isapt2/plot-ref/DFA.png; > https://github.com/psi4/psi4/pull/470/files#diff-235 (0); > - _A_ tests/isapt2/plot-ref/DFA.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-236 (0); > - _A_ tests/isapt2/plot-ref/DFB.png; > https://github.com/psi4/psi4/pull/470/files#diff-237 (0); > - _A_ tests/isapt2/plot-ref/DFB.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-238 (0); > - _A_ tests/isapt2/plot-ref/Geom.png; > https://github.com/psi4/psi4/pull/470/files#diff-239 (0); > - _A_ tests/isapt2/plot-ref/Geom.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-240 (0); > - _A_ tests/isapt2/plot-ref/VA.png; > https://github.com/psi4/psi4/pull/470/files#diff-241 (0); > - _A_ tests/isapt2/plot-ref/VA.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-242 (0,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/470#issuecomment-249267903
https://github.com/psi4/psi4/pull/470#issuecomment-249267903:25329,Testability,test,tests,25329,ll/470/files#diff-223 (0); > - _A_ tests/isapt2/fsapt-ref/ZA.dat; > https://github.com/psi4/psi4/pull/470/files#diff-224 (0); > - _A_ tests/isapt2/fsapt-ref/ZB.dat; > https://github.com/psi4/psi4/pull/470/files#diff-225 (0); > - _A_ tests/isapt2/fsapt-ref/geom.xyz; > https://github.com/psi4/psi4/pull/470/files#diff-226 (0); > - _A_ tests/isapt2/input.dat; > https://github.com/psi4/psi4/pull/470/files#diff-227 (0); > - _A_ tests/isapt2/output.ref; > https://github.com/psi4/psi4/pull/470/files#diff-228 (0); > - _A_ tests/isapt2/plot-ref/DA.png; > https://github.com/psi4/psi4/pull/470/files#diff-229 (0); > - _A_ tests/isapt2/plot-ref/DA.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-230 (0); > - _A_ tests/isapt2/plot-ref/DB.png; > https://github.com/psi4/psi4/pull/470/files#diff-231 (0); > - _A_ tests/isapt2/plot-ref/DB.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-232 (0); > - _A_ tests/isapt2/plot-ref/DC.png; > https://github.com/psi4/psi4/pull/470/files#diff-233 (0); > - _A_ tests/isapt2/plot-ref/DC.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-234 (0); > - _A_ tests/isapt2/plot-ref/DFA.png; > https://github.com/psi4/psi4/pull/470/files#diff-235 (0); > - _A_ tests/isapt2/plot-ref/DFA.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-236 (0); > - _A_ tests/isapt2/plot-ref/DFB.png; > https://github.com/psi4/psi4/pull/470/files#diff-237 (0); > - _A_ tests/isapt2/plot-ref/DFB.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-238 (0); > - _A_ tests/isapt2/plot-ref/Geom.png; > https://github.com/psi4/psi4/pull/470/files#diff-239 (0); > - _A_ tests/isapt2/plot-ref/Geom.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-240 (0); > - _A_ tests/isapt2/plot-ref/VA.png; > https://github.com/psi4/psi4/pull/470/files#diff-241 (0); > - _A_ tests/isapt2/plot-ref/VA.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-242 (0); > - _A_ tests/isapt2/plot-ref/VB.png; > https://github.com/psi4/psi4/pull/470/files#diff-243 (0,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/470#issuecomment-249267903
https://github.com/psi4/psi4/pull/470#issuecomment-249267903:25429,Testability,test,tests,25429,l/470/files#diff-224 (0); > - _A_ tests/isapt2/fsapt-ref/ZB.dat; > https://github.com/psi4/psi4/pull/470/files#diff-225 (0); > - _A_ tests/isapt2/fsapt-ref/geom.xyz; > https://github.com/psi4/psi4/pull/470/files#diff-226 (0); > - _A_ tests/isapt2/input.dat; > https://github.com/psi4/psi4/pull/470/files#diff-227 (0); > - _A_ tests/isapt2/output.ref; > https://github.com/psi4/psi4/pull/470/files#diff-228 (0); > - _A_ tests/isapt2/plot-ref/DA.png; > https://github.com/psi4/psi4/pull/470/files#diff-229 (0); > - _A_ tests/isapt2/plot-ref/DA.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-230 (0); > - _A_ tests/isapt2/plot-ref/DB.png; > https://github.com/psi4/psi4/pull/470/files#diff-231 (0); > - _A_ tests/isapt2/plot-ref/DB.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-232 (0); > - _A_ tests/isapt2/plot-ref/DC.png; > https://github.com/psi4/psi4/pull/470/files#diff-233 (0); > - _A_ tests/isapt2/plot-ref/DC.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-234 (0); > - _A_ tests/isapt2/plot-ref/DFA.png; > https://github.com/psi4/psi4/pull/470/files#diff-235 (0); > - _A_ tests/isapt2/plot-ref/DFA.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-236 (0); > - _A_ tests/isapt2/plot-ref/DFB.png; > https://github.com/psi4/psi4/pull/470/files#diff-237 (0); > - _A_ tests/isapt2/plot-ref/DFB.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-238 (0); > - _A_ tests/isapt2/plot-ref/Geom.png; > https://github.com/psi4/psi4/pull/470/files#diff-239 (0); > - _A_ tests/isapt2/plot-ref/Geom.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-240 (0); > - _A_ tests/isapt2/plot-ref/VA.png; > https://github.com/psi4/psi4/pull/470/files#diff-241 (0); > - _A_ tests/isapt2/plot-ref/VA.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-242 (0); > - _A_ tests/isapt2/plot-ref/VB.png; > https://github.com/psi4/psi4/pull/470/files#diff-243 (0); > - _A_ tests/isapt2/plot-ref/VB.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-244 (0),MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/470#issuecomment-249267903
https://github.com/psi4/psi4/pull/470#issuecomment-249267903:25528,Testability,test,tests,25528,l/470/files#diff-225 (0); > - _A_ tests/isapt2/fsapt-ref/geom.xyz; > https://github.com/psi4/psi4/pull/470/files#diff-226 (0); > - _A_ tests/isapt2/input.dat; > https://github.com/psi4/psi4/pull/470/files#diff-227 (0); > - _A_ tests/isapt2/output.ref; > https://github.com/psi4/psi4/pull/470/files#diff-228 (0); > - _A_ tests/isapt2/plot-ref/DA.png; > https://github.com/psi4/psi4/pull/470/files#diff-229 (0); > - _A_ tests/isapt2/plot-ref/DA.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-230 (0); > - _A_ tests/isapt2/plot-ref/DB.png; > https://github.com/psi4/psi4/pull/470/files#diff-231 (0); > - _A_ tests/isapt2/plot-ref/DB.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-232 (0); > - _A_ tests/isapt2/plot-ref/DC.png; > https://github.com/psi4/psi4/pull/470/files#diff-233 (0); > - _A_ tests/isapt2/plot-ref/DC.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-234 (0); > - _A_ tests/isapt2/plot-ref/DFA.png; > https://github.com/psi4/psi4/pull/470/files#diff-235 (0); > - _A_ tests/isapt2/plot-ref/DFA.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-236 (0); > - _A_ tests/isapt2/plot-ref/DFB.png; > https://github.com/psi4/psi4/pull/470/files#diff-237 (0); > - _A_ tests/isapt2/plot-ref/DFB.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-238 (0); > - _A_ tests/isapt2/plot-ref/Geom.png; > https://github.com/psi4/psi4/pull/470/files#diff-239 (0); > - _A_ tests/isapt2/plot-ref/Geom.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-240 (0); > - _A_ tests/isapt2/plot-ref/VA.png; > https://github.com/psi4/psi4/pull/470/files#diff-241 (0); > - _A_ tests/isapt2/plot-ref/VA.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-242 (0); > - _A_ tests/isapt2/plot-ref/VB.png; > https://github.com/psi4/psi4/pull/470/files#diff-243 (0); > - _A_ tests/isapt2/plot-ref/VB.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-244 (0); > - _A_ tests/isapt2/plot-ref/VC.png; > https://github.com/psi4/psi4/pull/470/files#diff-245 (0);,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/470#issuecomment-249267903
https://github.com/psi4/psi4/pull/470#issuecomment-249267903:25629,Testability,test,tests,25629,l/470/files#diff-226 (0); > - _A_ tests/isapt2/input.dat; > https://github.com/psi4/psi4/pull/470/files#diff-227 (0); > - _A_ tests/isapt2/output.ref; > https://github.com/psi4/psi4/pull/470/files#diff-228 (0); > - _A_ tests/isapt2/plot-ref/DA.png; > https://github.com/psi4/psi4/pull/470/files#diff-229 (0); > - _A_ tests/isapt2/plot-ref/DA.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-230 (0); > - _A_ tests/isapt2/plot-ref/DB.png; > https://github.com/psi4/psi4/pull/470/files#diff-231 (0); > - _A_ tests/isapt2/plot-ref/DB.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-232 (0); > - _A_ tests/isapt2/plot-ref/DC.png; > https://github.com/psi4/psi4/pull/470/files#diff-233 (0); > - _A_ tests/isapt2/plot-ref/DC.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-234 (0); > - _A_ tests/isapt2/plot-ref/DFA.png; > https://github.com/psi4/psi4/pull/470/files#diff-235 (0); > - _A_ tests/isapt2/plot-ref/DFA.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-236 (0); > - _A_ tests/isapt2/plot-ref/DFB.png; > https://github.com/psi4/psi4/pull/470/files#diff-237 (0); > - _A_ tests/isapt2/plot-ref/DFB.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-238 (0); > - _A_ tests/isapt2/plot-ref/Geom.png; > https://github.com/psi4/psi4/pull/470/files#diff-239 (0); > - _A_ tests/isapt2/plot-ref/Geom.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-240 (0); > - _A_ tests/isapt2/plot-ref/VA.png; > https://github.com/psi4/psi4/pull/470/files#diff-241 (0); > - _A_ tests/isapt2/plot-ref/VA.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-242 (0); > - _A_ tests/isapt2/plot-ref/VB.png; > https://github.com/psi4/psi4/pull/470/files#diff-243 (0); > - _A_ tests/isapt2/plot-ref/VB.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-244 (0); > - _A_ tests/isapt2/plot-ref/VC.png; > https://github.com/psi4/psi4/pull/470/files#diff-245 (0); > - _A_ tests/isapt2/plot-ref/VC.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-246 (0); ,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/470#issuecomment-249267903
https://github.com/psi4/psi4/pull/470#issuecomment-249267903:25728,Testability,test,tests,25728,iles#diff-227 (0); > - _A_ tests/isapt2/output.ref; > https://github.com/psi4/psi4/pull/470/files#diff-228 (0); > - _A_ tests/isapt2/plot-ref/DA.png; > https://github.com/psi4/psi4/pull/470/files#diff-229 (0); > - _A_ tests/isapt2/plot-ref/DA.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-230 (0); > - _A_ tests/isapt2/plot-ref/DB.png; > https://github.com/psi4/psi4/pull/470/files#diff-231 (0); > - _A_ tests/isapt2/plot-ref/DB.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-232 (0); > - _A_ tests/isapt2/plot-ref/DC.png; > https://github.com/psi4/psi4/pull/470/files#diff-233 (0); > - _A_ tests/isapt2/plot-ref/DC.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-234 (0); > - _A_ tests/isapt2/plot-ref/DFA.png; > https://github.com/psi4/psi4/pull/470/files#diff-235 (0); > - _A_ tests/isapt2/plot-ref/DFA.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-236 (0); > - _A_ tests/isapt2/plot-ref/DFB.png; > https://github.com/psi4/psi4/pull/470/files#diff-237 (0); > - _A_ tests/isapt2/plot-ref/DFB.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-238 (0); > - _A_ tests/isapt2/plot-ref/Geom.png; > https://github.com/psi4/psi4/pull/470/files#diff-239 (0); > - _A_ tests/isapt2/plot-ref/Geom.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-240 (0); > - _A_ tests/isapt2/plot-ref/VA.png; > https://github.com/psi4/psi4/pull/470/files#diff-241 (0); > - _A_ tests/isapt2/plot-ref/VA.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-242 (0); > - _A_ tests/isapt2/plot-ref/VB.png; > https://github.com/psi4/psi4/pull/470/files#diff-243 (0); > - _A_ tests/isapt2/plot-ref/VB.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-244 (0); > - _A_ tests/isapt2/plot-ref/VC.png; > https://github.com/psi4/psi4/pull/470/files#diff-245 (0); > - _A_ tests/isapt2/plot-ref/VC.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-246 (0); > - _A_ tests/isapt2/plot-ref/dDA.png; > https://github.com/psi4/psi4/pull/470/files#diff-247 (0); ,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/470#issuecomment-249267903
https://github.com/psi4/psi4/pull/470#issuecomment-249267903:25829,Testability,test,tests,25829,-228 (0); > - _A_ tests/isapt2/plot-ref/DA.png; > https://github.com/psi4/psi4/pull/470/files#diff-229 (0); > - _A_ tests/isapt2/plot-ref/DA.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-230 (0); > - _A_ tests/isapt2/plot-ref/DB.png; > https://github.com/psi4/psi4/pull/470/files#diff-231 (0); > - _A_ tests/isapt2/plot-ref/DB.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-232 (0); > - _A_ tests/isapt2/plot-ref/DC.png; > https://github.com/psi4/psi4/pull/470/files#diff-233 (0); > - _A_ tests/isapt2/plot-ref/DC.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-234 (0); > - _A_ tests/isapt2/plot-ref/DFA.png; > https://github.com/psi4/psi4/pull/470/files#diff-235 (0); > - _A_ tests/isapt2/plot-ref/DFA.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-236 (0); > - _A_ tests/isapt2/plot-ref/DFB.png; > https://github.com/psi4/psi4/pull/470/files#diff-237 (0); > - _A_ tests/isapt2/plot-ref/DFB.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-238 (0); > - _A_ tests/isapt2/plot-ref/Geom.png; > https://github.com/psi4/psi4/pull/470/files#diff-239 (0); > - _A_ tests/isapt2/plot-ref/Geom.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-240 (0); > - _A_ tests/isapt2/plot-ref/VA.png; > https://github.com/psi4/psi4/pull/470/files#diff-241 (0); > - _A_ tests/isapt2/plot-ref/VA.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-242 (0); > - _A_ tests/isapt2/plot-ref/VB.png; > https://github.com/psi4/psi4/pull/470/files#diff-243 (0); > - _A_ tests/isapt2/plot-ref/VB.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-244 (0); > - _A_ tests/isapt2/plot-ref/VC.png; > https://github.com/psi4/psi4/pull/470/files#diff-245 (0); > - _A_ tests/isapt2/plot-ref/VC.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-246 (0); > - _A_ tests/isapt2/plot-ref/dDA.png; > https://github.com/psi4/psi4/pull/470/files#diff-247 (0); > - _A_ tests/isapt2/plot-ref/dDA.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-248 (0); ,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/470#issuecomment-249267903
https://github.com/psi4/psi4/pull/470#issuecomment-249267903:25929,Testability,test,tests,25929,29 (0); > - _A_ tests/isapt2/plot-ref/DA.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-230 (0); > - _A_ tests/isapt2/plot-ref/DB.png; > https://github.com/psi4/psi4/pull/470/files#diff-231 (0); > - _A_ tests/isapt2/plot-ref/DB.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-232 (0); > - _A_ tests/isapt2/plot-ref/DC.png; > https://github.com/psi4/psi4/pull/470/files#diff-233 (0); > - _A_ tests/isapt2/plot-ref/DC.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-234 (0); > - _A_ tests/isapt2/plot-ref/DFA.png; > https://github.com/psi4/psi4/pull/470/files#diff-235 (0); > - _A_ tests/isapt2/plot-ref/DFA.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-236 (0); > - _A_ tests/isapt2/plot-ref/DFB.png; > https://github.com/psi4/psi4/pull/470/files#diff-237 (0); > - _A_ tests/isapt2/plot-ref/DFB.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-238 (0); > - _A_ tests/isapt2/plot-ref/Geom.png; > https://github.com/psi4/psi4/pull/470/files#diff-239 (0); > - _A_ tests/isapt2/plot-ref/Geom.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-240 (0); > - _A_ tests/isapt2/plot-ref/VA.png; > https://github.com/psi4/psi4/pull/470/files#diff-241 (0); > - _A_ tests/isapt2/plot-ref/VA.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-242 (0); > - _A_ tests/isapt2/plot-ref/VB.png; > https://github.com/psi4/psi4/pull/470/files#diff-243 (0); > - _A_ tests/isapt2/plot-ref/VB.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-244 (0); > - _A_ tests/isapt2/plot-ref/VC.png; > https://github.com/psi4/psi4/pull/470/files#diff-245 (0); > - _A_ tests/isapt2/plot-ref/VC.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-246 (0); > - _A_ tests/isapt2/plot-ref/dDA.png; > https://github.com/psi4/psi4/pull/470/files#diff-247 (0); > - _A_ tests/isapt2/plot-ref/dDA.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-248 (0); > - _A_ tests/isapt2/plot-ref/dDB.png; > https://github.com/psi4/psi4/pull/470/files#diff-249 (0); >,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/470#issuecomment-249267903
https://github.com/psi4/psi4/pull/470#issuecomment-249267903:26031,Testability,test,tests,26031,0 (0); > - _A_ tests/isapt2/plot-ref/DB.png; > https://github.com/psi4/psi4/pull/470/files#diff-231 (0); > - _A_ tests/isapt2/plot-ref/DB.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-232 (0); > - _A_ tests/isapt2/plot-ref/DC.png; > https://github.com/psi4/psi4/pull/470/files#diff-233 (0); > - _A_ tests/isapt2/plot-ref/DC.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-234 (0); > - _A_ tests/isapt2/plot-ref/DFA.png; > https://github.com/psi4/psi4/pull/470/files#diff-235 (0); > - _A_ tests/isapt2/plot-ref/DFA.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-236 (0); > - _A_ tests/isapt2/plot-ref/DFB.png; > https://github.com/psi4/psi4/pull/470/files#diff-237 (0); > - _A_ tests/isapt2/plot-ref/DFB.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-238 (0); > - _A_ tests/isapt2/plot-ref/Geom.png; > https://github.com/psi4/psi4/pull/470/files#diff-239 (0); > - _A_ tests/isapt2/plot-ref/Geom.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-240 (0); > - _A_ tests/isapt2/plot-ref/VA.png; > https://github.com/psi4/psi4/pull/470/files#diff-241 (0); > - _A_ tests/isapt2/plot-ref/VA.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-242 (0); > - _A_ tests/isapt2/plot-ref/VB.png; > https://github.com/psi4/psi4/pull/470/files#diff-243 (0); > - _A_ tests/isapt2/plot-ref/VB.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-244 (0); > - _A_ tests/isapt2/plot-ref/VC.png; > https://github.com/psi4/psi4/pull/470/files#diff-245 (0); > - _A_ tests/isapt2/plot-ref/VC.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-246 (0); > - _A_ tests/isapt2/plot-ref/dDA.png; > https://github.com/psi4/psi4/pull/470/files#diff-247 (0); > - _A_ tests/isapt2/plot-ref/dDA.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-248 (0); > - _A_ tests/isapt2/plot-ref/dDB.png; > https://github.com/psi4/psi4/pull/470/files#diff-249 (0); > - _A_ tests/isapt2/plot-ref/dDB.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-250 (0); >,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/470#issuecomment-249267903
https://github.com/psi4/psi4/pull/470#issuecomment-249267903:26129,Testability,test,tests,26129,1 (0); > - _A_ tests/isapt2/plot-ref/DB.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-232 (0); > - _A_ tests/isapt2/plot-ref/DC.png; > https://github.com/psi4/psi4/pull/470/files#diff-233 (0); > - _A_ tests/isapt2/plot-ref/DC.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-234 (0); > - _A_ tests/isapt2/plot-ref/DFA.png; > https://github.com/psi4/psi4/pull/470/files#diff-235 (0); > - _A_ tests/isapt2/plot-ref/DFA.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-236 (0); > - _A_ tests/isapt2/plot-ref/DFB.png; > https://github.com/psi4/psi4/pull/470/files#diff-237 (0); > - _A_ tests/isapt2/plot-ref/DFB.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-238 (0); > - _A_ tests/isapt2/plot-ref/Geom.png; > https://github.com/psi4/psi4/pull/470/files#diff-239 (0); > - _A_ tests/isapt2/plot-ref/Geom.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-240 (0); > - _A_ tests/isapt2/plot-ref/VA.png; > https://github.com/psi4/psi4/pull/470/files#diff-241 (0); > - _A_ tests/isapt2/plot-ref/VA.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-242 (0); > - _A_ tests/isapt2/plot-ref/VB.png; > https://github.com/psi4/psi4/pull/470/files#diff-243 (0); > - _A_ tests/isapt2/plot-ref/VB.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-244 (0); > - _A_ tests/isapt2/plot-ref/VC.png; > https://github.com/psi4/psi4/pull/470/files#diff-245 (0); > - _A_ tests/isapt2/plot-ref/VC.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-246 (0); > - _A_ tests/isapt2/plot-ref/dDA.png; > https://github.com/psi4/psi4/pull/470/files#diff-247 (0); > - _A_ tests/isapt2/plot-ref/dDA.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-248 (0); > - _A_ tests/isapt2/plot-ref/dDB.png; > https://github.com/psi4/psi4/pull/470/files#diff-249 (0); > - _A_ tests/isapt2/plot-ref/dDB.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-250 (0); > - _A_ tests/isapt2/plot-ref/geom.xyz; > https://github.com/psi4/psi4/pull/470/files#diff-251 (0);,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/470#issuecomment-249267903
https://github.com/psi4/psi4/pull/470#issuecomment-249267903:26229,Testability,test,tests,26229,2 (0); > - _A_ tests/isapt2/plot-ref/DC.png; > https://github.com/psi4/psi4/pull/470/files#diff-233 (0); > - _A_ tests/isapt2/plot-ref/DC.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-234 (0); > - _A_ tests/isapt2/plot-ref/DFA.png; > https://github.com/psi4/psi4/pull/470/files#diff-235 (0); > - _A_ tests/isapt2/plot-ref/DFA.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-236 (0); > - _A_ tests/isapt2/plot-ref/DFB.png; > https://github.com/psi4/psi4/pull/470/files#diff-237 (0); > - _A_ tests/isapt2/plot-ref/DFB.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-238 (0); > - _A_ tests/isapt2/plot-ref/Geom.png; > https://github.com/psi4/psi4/pull/470/files#diff-239 (0); > - _A_ tests/isapt2/plot-ref/Geom.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-240 (0); > - _A_ tests/isapt2/plot-ref/VA.png; > https://github.com/psi4/psi4/pull/470/files#diff-241 (0); > - _A_ tests/isapt2/plot-ref/VA.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-242 (0); > - _A_ tests/isapt2/plot-ref/VB.png; > https://github.com/psi4/psi4/pull/470/files#diff-243 (0); > - _A_ tests/isapt2/plot-ref/VB.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-244 (0); > - _A_ tests/isapt2/plot-ref/VC.png; > https://github.com/psi4/psi4/pull/470/files#diff-245 (0); > - _A_ tests/isapt2/plot-ref/VC.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-246 (0); > - _A_ tests/isapt2/plot-ref/dDA.png; > https://github.com/psi4/psi4/pull/470/files#diff-247 (0); > - _A_ tests/isapt2/plot-ref/dDA.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-248 (0); > - _A_ tests/isapt2/plot-ref/dDB.png; > https://github.com/psi4/psi4/pull/470/files#diff-249 (0); > - _A_ tests/isapt2/plot-ref/dDB.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-250 (0); > - _A_ tests/isapt2/plot-ref/geom.xyz; > https://github.com/psi4/psi4/pull/470/files#diff-251 (0); > - _A_ tests/isapt2/plot-ref/orient.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-252 ,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/470#issuecomment-249267903
https://github.com/psi4/psi4/pull/470#issuecomment-249267903:26327,Testability,test,tests,26327,3 (0); > - _A_ tests/isapt2/plot-ref/DC.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-234 (0); > - _A_ tests/isapt2/plot-ref/DFA.png; > https://github.com/psi4/psi4/pull/470/files#diff-235 (0); > - _A_ tests/isapt2/plot-ref/DFA.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-236 (0); > - _A_ tests/isapt2/plot-ref/DFB.png; > https://github.com/psi4/psi4/pull/470/files#diff-237 (0); > - _A_ tests/isapt2/plot-ref/DFB.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-238 (0); > - _A_ tests/isapt2/plot-ref/Geom.png; > https://github.com/psi4/psi4/pull/470/files#diff-239 (0); > - _A_ tests/isapt2/plot-ref/Geom.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-240 (0); > - _A_ tests/isapt2/plot-ref/VA.png; > https://github.com/psi4/psi4/pull/470/files#diff-241 (0); > - _A_ tests/isapt2/plot-ref/VA.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-242 (0); > - _A_ tests/isapt2/plot-ref/VB.png; > https://github.com/psi4/psi4/pull/470/files#diff-243 (0); > - _A_ tests/isapt2/plot-ref/VB.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-244 (0); > - _A_ tests/isapt2/plot-ref/VC.png; > https://github.com/psi4/psi4/pull/470/files#diff-245 (0); > - _A_ tests/isapt2/plot-ref/VC.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-246 (0); > - _A_ tests/isapt2/plot-ref/dDA.png; > https://github.com/psi4/psi4/pull/470/files#diff-247 (0); > - _A_ tests/isapt2/plot-ref/dDA.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-248 (0); > - _A_ tests/isapt2/plot-ref/dDB.png; > https://github.com/psi4/psi4/pull/470/files#diff-249 (0); > - _A_ tests/isapt2/plot-ref/dDB.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-250 (0); > - _A_ tests/isapt2/plot-ref/geom.xyz; > https://github.com/psi4/psi4/pull/470/files#diff-251 (0); > - _A_ tests/isapt2/plot-ref/orient.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-252 (0); > - _A_ tests/isapt2/plot-ref/run.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-2,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/470#issuecomment-249267903
https://github.com/psi4/psi4/pull/470#issuecomment-249267903:26427,Testability,test,tests,26427,4 (0); > - _A_ tests/isapt2/plot-ref/DFA.png; > https://github.com/psi4/psi4/pull/470/files#diff-235 (0); > - _A_ tests/isapt2/plot-ref/DFA.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-236 (0); > - _A_ tests/isapt2/plot-ref/DFB.png; > https://github.com/psi4/psi4/pull/470/files#diff-237 (0); > - _A_ tests/isapt2/plot-ref/DFB.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-238 (0); > - _A_ tests/isapt2/plot-ref/Geom.png; > https://github.com/psi4/psi4/pull/470/files#diff-239 (0); > - _A_ tests/isapt2/plot-ref/Geom.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-240 (0); > - _A_ tests/isapt2/plot-ref/VA.png; > https://github.com/psi4/psi4/pull/470/files#diff-241 (0); > - _A_ tests/isapt2/plot-ref/VA.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-242 (0); > - _A_ tests/isapt2/plot-ref/VB.png; > https://github.com/psi4/psi4/pull/470/files#diff-243 (0); > - _A_ tests/isapt2/plot-ref/VB.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-244 (0); > - _A_ tests/isapt2/plot-ref/VC.png; > https://github.com/psi4/psi4/pull/470/files#diff-245 (0); > - _A_ tests/isapt2/plot-ref/VC.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-246 (0); > - _A_ tests/isapt2/plot-ref/dDA.png; > https://github.com/psi4/psi4/pull/470/files#diff-247 (0); > - _A_ tests/isapt2/plot-ref/dDA.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-248 (0); > - _A_ tests/isapt2/plot-ref/dDB.png; > https://github.com/psi4/psi4/pull/470/files#diff-249 (0); > - _A_ tests/isapt2/plot-ref/dDB.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-250 (0); > - _A_ tests/isapt2/plot-ref/geom.xyz; > https://github.com/psi4/psi4/pull/470/files#diff-251 (0); > - _A_ tests/isapt2/plot-ref/orient.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-252 (0); > - _A_ tests/isapt2/plot-ref/run.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-253 (0); > - _A_ tests/isapt2/plot-ref/vis.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/470#issuecomment-249267903
https://github.com/psi4/psi4/pull/470#issuecomment-249267903:26525,Testability,test,tests,26525,35 (0); > - _A_ tests/isapt2/plot-ref/DFA.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-236 (0); > - _A_ tests/isapt2/plot-ref/DFB.png; > https://github.com/psi4/psi4/pull/470/files#diff-237 (0); > - _A_ tests/isapt2/plot-ref/DFB.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-238 (0); > - _A_ tests/isapt2/plot-ref/Geom.png; > https://github.com/psi4/psi4/pull/470/files#diff-239 (0); > - _A_ tests/isapt2/plot-ref/Geom.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-240 (0); > - _A_ tests/isapt2/plot-ref/VA.png; > https://github.com/psi4/psi4/pull/470/files#diff-241 (0); > - _A_ tests/isapt2/plot-ref/VA.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-242 (0); > - _A_ tests/isapt2/plot-ref/VB.png; > https://github.com/psi4/psi4/pull/470/files#diff-243 (0); > - _A_ tests/isapt2/plot-ref/VB.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-244 (0); > - _A_ tests/isapt2/plot-ref/VC.png; > https://github.com/psi4/psi4/pull/470/files#diff-245 (0); > - _A_ tests/isapt2/plot-ref/VC.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-246 (0); > - _A_ tests/isapt2/plot-ref/dDA.png; > https://github.com/psi4/psi4/pull/470/files#diff-247 (0); > - _A_ tests/isapt2/plot-ref/dDA.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-248 (0); > - _A_ tests/isapt2/plot-ref/dDB.png; > https://github.com/psi4/psi4/pull/470/files#diff-249 (0); > - _A_ tests/isapt2/plot-ref/dDB.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-250 (0); > - _A_ tests/isapt2/plot-ref/geom.xyz; > https://github.com/psi4/psi4/pull/470/files#diff-251 (0); > - _A_ tests/isapt2/plot-ref/orient.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-252 (0); > - _A_ tests/isapt2/plot-ref/run.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-253 (0); > - _A_ tests/isapt2/plot-ref/vis.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-254 (0); > ; > Patch Links:; > - https://github.com/psi4/psi4/pull/470.patch; > - https://github.c,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/470#issuecomment-249267903
https://github.com/psi4/psi4/pull/470#issuecomment-249267903:26625,Testability,test,tests,26625,236 (0); > - _A_ tests/isapt2/plot-ref/DFB.png; > https://github.com/psi4/psi4/pull/470/files#diff-237 (0); > - _A_ tests/isapt2/plot-ref/DFB.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-238 (0); > - _A_ tests/isapt2/plot-ref/Geom.png; > https://github.com/psi4/psi4/pull/470/files#diff-239 (0); > - _A_ tests/isapt2/plot-ref/Geom.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-240 (0); > - _A_ tests/isapt2/plot-ref/VA.png; > https://github.com/psi4/psi4/pull/470/files#diff-241 (0); > - _A_ tests/isapt2/plot-ref/VA.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-242 (0); > - _A_ tests/isapt2/plot-ref/VB.png; > https://github.com/psi4/psi4/pull/470/files#diff-243 (0); > - _A_ tests/isapt2/plot-ref/VB.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-244 (0); > - _A_ tests/isapt2/plot-ref/VC.png; > https://github.com/psi4/psi4/pull/470/files#diff-245 (0); > - _A_ tests/isapt2/plot-ref/VC.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-246 (0); > - _A_ tests/isapt2/plot-ref/dDA.png; > https://github.com/psi4/psi4/pull/470/files#diff-247 (0); > - _A_ tests/isapt2/plot-ref/dDA.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-248 (0); > - _A_ tests/isapt2/plot-ref/dDB.png; > https://github.com/psi4/psi4/pull/470/files#diff-249 (0); > - _A_ tests/isapt2/plot-ref/dDB.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-250 (0); > - _A_ tests/isapt2/plot-ref/geom.xyz; > https://github.com/psi4/psi4/pull/470/files#diff-251 (0); > - _A_ tests/isapt2/plot-ref/orient.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-252 (0); > - _A_ tests/isapt2/plot-ref/run.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-253 (0); > - _A_ tests/isapt2/plot-ref/vis.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-254 (0); > ; > Patch Links:; > - https://github.com/psi4/psi4/pull/470.patch; > - https://github.com/psi4/psi4/pull/470.diff; > ; > —; > You are receiving this because you were mentioned.; > Reply to,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/470#issuecomment-249267903
https://github.com/psi4/psi4/pull/470#issuecomment-249267903:26724,Testability,test,tests,26724,"237 (0); > - _A_ tests/isapt2/plot-ref/DFB.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-238 (0); > - _A_ tests/isapt2/plot-ref/Geom.png; > https://github.com/psi4/psi4/pull/470/files#diff-239 (0); > - _A_ tests/isapt2/plot-ref/Geom.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-240 (0); > - _A_ tests/isapt2/plot-ref/VA.png; > https://github.com/psi4/psi4/pull/470/files#diff-241 (0); > - _A_ tests/isapt2/plot-ref/VA.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-242 (0); > - _A_ tests/isapt2/plot-ref/VB.png; > https://github.com/psi4/psi4/pull/470/files#diff-243 (0); > - _A_ tests/isapt2/plot-ref/VB.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-244 (0); > - _A_ tests/isapt2/plot-ref/VC.png; > https://github.com/psi4/psi4/pull/470/files#diff-245 (0); > - _A_ tests/isapt2/plot-ref/VC.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-246 (0); > - _A_ tests/isapt2/plot-ref/dDA.png; > https://github.com/psi4/psi4/pull/470/files#diff-247 (0); > - _A_ tests/isapt2/plot-ref/dDA.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-248 (0); > - _A_ tests/isapt2/plot-ref/dDB.png; > https://github.com/psi4/psi4/pull/470/files#diff-249 (0); > - _A_ tests/isapt2/plot-ref/dDB.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-250 (0); > - _A_ tests/isapt2/plot-ref/geom.xyz; > https://github.com/psi4/psi4/pull/470/files#diff-251 (0); > - _A_ tests/isapt2/plot-ref/orient.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-252 (0); > - _A_ tests/isapt2/plot-ref/run.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-253 (0); > - _A_ tests/isapt2/plot-ref/vis.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-254 (0); > ; > Patch Links:; > - https://github.com/psi4/psi4/pull/470.patch; > - https://github.com/psi4/psi4/pull/470.diff; > ; > —; > You are receiving this because you were mentioned.; > Reply to this email directly, view it on GitHub; > https://github.com/psi4/psi4/pull/470, or mute the threa",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/470#issuecomment-249267903
https://github.com/psi4/psi4/pull/470#issuecomment-249267903:26825,Testability,test,tests,26825,"238 (0); > - _A_ tests/isapt2/plot-ref/Geom.png; > https://github.com/psi4/psi4/pull/470/files#diff-239 (0); > - _A_ tests/isapt2/plot-ref/Geom.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-240 (0); > - _A_ tests/isapt2/plot-ref/VA.png; > https://github.com/psi4/psi4/pull/470/files#diff-241 (0); > - _A_ tests/isapt2/plot-ref/VA.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-242 (0); > - _A_ tests/isapt2/plot-ref/VB.png; > https://github.com/psi4/psi4/pull/470/files#diff-243 (0); > - _A_ tests/isapt2/plot-ref/VB.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-244 (0); > - _A_ tests/isapt2/plot-ref/VC.png; > https://github.com/psi4/psi4/pull/470/files#diff-245 (0); > - _A_ tests/isapt2/plot-ref/VC.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-246 (0); > - _A_ tests/isapt2/plot-ref/dDA.png; > https://github.com/psi4/psi4/pull/470/files#diff-247 (0); > - _A_ tests/isapt2/plot-ref/dDA.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-248 (0); > - _A_ tests/isapt2/plot-ref/dDB.png; > https://github.com/psi4/psi4/pull/470/files#diff-249 (0); > - _A_ tests/isapt2/plot-ref/dDB.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-250 (0); > - _A_ tests/isapt2/plot-ref/geom.xyz; > https://github.com/psi4/psi4/pull/470/files#diff-251 (0); > - _A_ tests/isapt2/plot-ref/orient.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-252 (0); > - _A_ tests/isapt2/plot-ref/run.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-253 (0); > - _A_ tests/isapt2/plot-ref/vis.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-254 (0); > ; > Patch Links:; > - https://github.com/psi4/psi4/pull/470.patch; > - https://github.com/psi4/psi4/pull/470.diff; > ; > —; > You are receiving this because you were mentioned.; > Reply to this email directly, view it on GitHub; > https://github.com/psi4/psi4/pull/470, or mute the thread; > https://github.com/notifications/unsubscribe-auth/ACizP-4KJoFubALyaZOx9fsbCOSSIV8Pks5qs0hXgaJpZM",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/470#issuecomment-249267903
https://github.com/psi4/psi4/pull/470#issuecomment-249267903:26924,Testability,test,tests,26924," _A_ tests/isapt2/plot-ref/Geom.png; > https://github.com/psi4/psi4/pull/470/files#diff-239 (0); > - _A_ tests/isapt2/plot-ref/Geom.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-240 (0); > - _A_ tests/isapt2/plot-ref/VA.png; > https://github.com/psi4/psi4/pull/470/files#diff-241 (0); > - _A_ tests/isapt2/plot-ref/VA.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-242 (0); > - _A_ tests/isapt2/plot-ref/VB.png; > https://github.com/psi4/psi4/pull/470/files#diff-243 (0); > - _A_ tests/isapt2/plot-ref/VB.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-244 (0); > - _A_ tests/isapt2/plot-ref/VC.png; > https://github.com/psi4/psi4/pull/470/files#diff-245 (0); > - _A_ tests/isapt2/plot-ref/VC.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-246 (0); > - _A_ tests/isapt2/plot-ref/dDA.png; > https://github.com/psi4/psi4/pull/470/files#diff-247 (0); > - _A_ tests/isapt2/plot-ref/dDA.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-248 (0); > - _A_ tests/isapt2/plot-ref/dDB.png; > https://github.com/psi4/psi4/pull/470/files#diff-249 (0); > - _A_ tests/isapt2/plot-ref/dDB.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-250 (0); > - _A_ tests/isapt2/plot-ref/geom.xyz; > https://github.com/psi4/psi4/pull/470/files#diff-251 (0); > - _A_ tests/isapt2/plot-ref/orient.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-252 (0); > - _A_ tests/isapt2/plot-ref/run.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-253 (0); > - _A_ tests/isapt2/plot-ref/vis.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-254 (0); > ; > Patch Links:; > - https://github.com/psi4/psi4/pull/470.patch; > - https://github.com/psi4/psi4/pull/470.diff; > ; > —; > You are receiving this because you were mentioned.; > Reply to this email directly, view it on GitHub; > https://github.com/psi4/psi4/pull/470, or mute the thread; > https://github.com/notifications/unsubscribe-auth/ACizP-4KJoFubALyaZOx9fsbCOSSIV8Pks5qs0hXgaJpZM4KElEp; > .",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/470#issuecomment-249267903
https://github.com/psi4/psi4/pull/470#issuecomment-249267903:27025,Testability,test,tests,27025," _A_ tests/isapt2/plot-ref/Geom.png; > https://github.com/psi4/psi4/pull/470/files#diff-239 (0); > - _A_ tests/isapt2/plot-ref/Geom.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-240 (0); > - _A_ tests/isapt2/plot-ref/VA.png; > https://github.com/psi4/psi4/pull/470/files#diff-241 (0); > - _A_ tests/isapt2/plot-ref/VA.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-242 (0); > - _A_ tests/isapt2/plot-ref/VB.png; > https://github.com/psi4/psi4/pull/470/files#diff-243 (0); > - _A_ tests/isapt2/plot-ref/VB.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-244 (0); > - _A_ tests/isapt2/plot-ref/VC.png; > https://github.com/psi4/psi4/pull/470/files#diff-245 (0); > - _A_ tests/isapt2/plot-ref/VC.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-246 (0); > - _A_ tests/isapt2/plot-ref/dDA.png; > https://github.com/psi4/psi4/pull/470/files#diff-247 (0); > - _A_ tests/isapt2/plot-ref/dDA.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-248 (0); > - _A_ tests/isapt2/plot-ref/dDB.png; > https://github.com/psi4/psi4/pull/470/files#diff-249 (0); > - _A_ tests/isapt2/plot-ref/dDB.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-250 (0); > - _A_ tests/isapt2/plot-ref/geom.xyz; > https://github.com/psi4/psi4/pull/470/files#diff-251 (0); > - _A_ tests/isapt2/plot-ref/orient.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-252 (0); > - _A_ tests/isapt2/plot-ref/run.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-253 (0); > - _A_ tests/isapt2/plot-ref/vis.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-254 (0); > ; > Patch Links:; > - https://github.com/psi4/psi4/pull/470.patch; > - https://github.com/psi4/psi4/pull/470.diff; > ; > —; > You are receiving this because you were mentioned.; > Reply to this email directly, view it on GitHub; > https://github.com/psi4/psi4/pull/470, or mute the thread; > https://github.com/notifications/unsubscribe-auth/ACizP-4KJoFubALyaZOx9fsbCOSSIV8Pks5qs0hXgaJpZM4KElEp; > .",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/470#issuecomment-249267903
https://github.com/psi4/psi4/pull/470#issuecomment-249267903:27125,Testability,test,tests,27125," _A_ tests/isapt2/plot-ref/Geom.png; > https://github.com/psi4/psi4/pull/470/files#diff-239 (0); > - _A_ tests/isapt2/plot-ref/Geom.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-240 (0); > - _A_ tests/isapt2/plot-ref/VA.png; > https://github.com/psi4/psi4/pull/470/files#diff-241 (0); > - _A_ tests/isapt2/plot-ref/VA.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-242 (0); > - _A_ tests/isapt2/plot-ref/VB.png; > https://github.com/psi4/psi4/pull/470/files#diff-243 (0); > - _A_ tests/isapt2/plot-ref/VB.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-244 (0); > - _A_ tests/isapt2/plot-ref/VC.png; > https://github.com/psi4/psi4/pull/470/files#diff-245 (0); > - _A_ tests/isapt2/plot-ref/VC.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-246 (0); > - _A_ tests/isapt2/plot-ref/dDA.png; > https://github.com/psi4/psi4/pull/470/files#diff-247 (0); > - _A_ tests/isapt2/plot-ref/dDA.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-248 (0); > - _A_ tests/isapt2/plot-ref/dDB.png; > https://github.com/psi4/psi4/pull/470/files#diff-249 (0); > - _A_ tests/isapt2/plot-ref/dDB.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-250 (0); > - _A_ tests/isapt2/plot-ref/geom.xyz; > https://github.com/psi4/psi4/pull/470/files#diff-251 (0); > - _A_ tests/isapt2/plot-ref/orient.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-252 (0); > - _A_ tests/isapt2/plot-ref/run.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-253 (0); > - _A_ tests/isapt2/plot-ref/vis.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-254 (0); > ; > Patch Links:; > - https://github.com/psi4/psi4/pull/470.patch; > - https://github.com/psi4/psi4/pull/470.diff; > ; > —; > You are receiving this because you were mentioned.; > Reply to this email directly, view it on GitHub; > https://github.com/psi4/psi4/pull/470, or mute the thread; > https://github.com/notifications/unsubscribe-auth/ACizP-4KJoFubALyaZOx9fsbCOSSIV8Pks5qs0hXgaJpZM4KElEp; > .",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/470#issuecomment-249267903
https://github.com/psi4/psi4/pull/470#issuecomment-249267903:27229,Testability,test,tests,27229," _A_ tests/isapt2/plot-ref/Geom.png; > https://github.com/psi4/psi4/pull/470/files#diff-239 (0); > - _A_ tests/isapt2/plot-ref/Geom.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-240 (0); > - _A_ tests/isapt2/plot-ref/VA.png; > https://github.com/psi4/psi4/pull/470/files#diff-241 (0); > - _A_ tests/isapt2/plot-ref/VA.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-242 (0); > - _A_ tests/isapt2/plot-ref/VB.png; > https://github.com/psi4/psi4/pull/470/files#diff-243 (0); > - _A_ tests/isapt2/plot-ref/VB.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-244 (0); > - _A_ tests/isapt2/plot-ref/VC.png; > https://github.com/psi4/psi4/pull/470/files#diff-245 (0); > - _A_ tests/isapt2/plot-ref/VC.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-246 (0); > - _A_ tests/isapt2/plot-ref/dDA.png; > https://github.com/psi4/psi4/pull/470/files#diff-247 (0); > - _A_ tests/isapt2/plot-ref/dDA.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-248 (0); > - _A_ tests/isapt2/plot-ref/dDB.png; > https://github.com/psi4/psi4/pull/470/files#diff-249 (0); > - _A_ tests/isapt2/plot-ref/dDB.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-250 (0); > - _A_ tests/isapt2/plot-ref/geom.xyz; > https://github.com/psi4/psi4/pull/470/files#diff-251 (0); > - _A_ tests/isapt2/plot-ref/orient.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-252 (0); > - _A_ tests/isapt2/plot-ref/run.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-253 (0); > - _A_ tests/isapt2/plot-ref/vis.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-254 (0); > ; > Patch Links:; > - https://github.com/psi4/psi4/pull/470.patch; > - https://github.com/psi4/psi4/pull/470.diff; > ; > —; > You are receiving this because you were mentioned.; > Reply to this email directly, view it on GitHub; > https://github.com/psi4/psi4/pull/470, or mute the thread; > https://github.com/notifications/unsubscribe-auth/ACizP-4KJoFubALyaZOx9fsbCOSSIV8Pks5qs0hXgaJpZM4KElEp; > .",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/470#issuecomment-249267903
https://github.com/psi4/psi4/pull/470#issuecomment-249267903:27330,Testability,test,tests,27330," _A_ tests/isapt2/plot-ref/Geom.png; > https://github.com/psi4/psi4/pull/470/files#diff-239 (0); > - _A_ tests/isapt2/plot-ref/Geom.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-240 (0); > - _A_ tests/isapt2/plot-ref/VA.png; > https://github.com/psi4/psi4/pull/470/files#diff-241 (0); > - _A_ tests/isapt2/plot-ref/VA.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-242 (0); > - _A_ tests/isapt2/plot-ref/VB.png; > https://github.com/psi4/psi4/pull/470/files#diff-243 (0); > - _A_ tests/isapt2/plot-ref/VB.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-244 (0); > - _A_ tests/isapt2/plot-ref/VC.png; > https://github.com/psi4/psi4/pull/470/files#diff-245 (0); > - _A_ tests/isapt2/plot-ref/VC.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-246 (0); > - _A_ tests/isapt2/plot-ref/dDA.png; > https://github.com/psi4/psi4/pull/470/files#diff-247 (0); > - _A_ tests/isapt2/plot-ref/dDA.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-248 (0); > - _A_ tests/isapt2/plot-ref/dDB.png; > https://github.com/psi4/psi4/pull/470/files#diff-249 (0); > - _A_ tests/isapt2/plot-ref/dDB.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-250 (0); > - _A_ tests/isapt2/plot-ref/geom.xyz; > https://github.com/psi4/psi4/pull/470/files#diff-251 (0); > - _A_ tests/isapt2/plot-ref/orient.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-252 (0); > - _A_ tests/isapt2/plot-ref/run.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-253 (0); > - _A_ tests/isapt2/plot-ref/vis.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-254 (0); > ; > Patch Links:; > - https://github.com/psi4/psi4/pull/470.patch; > - https://github.com/psi4/psi4/pull/470.diff; > ; > —; > You are receiving this because you were mentioned.; > Reply to this email directly, view it on GitHub; > https://github.com/psi4/psi4/pull/470, or mute the thread; > https://github.com/notifications/unsubscribe-auth/ACizP-4KJoFubALyaZOx9fsbCOSSIV8Pks5qs0hXgaJpZM4KElEp; > .",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/470#issuecomment-249267903
https://github.com/psi4/psi4/pull/472#issuecomment-249191367:83,Energy Efficiency,energy,energy,83,@loriab It looks like I forget to reimplement in driver. My plan was to move it to energy/gradient/etc so that it would be universal. I need to add MOWriter to `proc/scf_helper` and probably `proc/mcscf` as well. Should I just add it to this PR?. Also need to look into MCSCF failings on distelli. I dont understand why its both random and mac only.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/472#issuecomment-249191367
https://github.com/psi4/psi4/pull/472#issuecomment-249195924:369,Energy Efficiency,energy,energy,369,"Sure, go ahead and add to this PR. Branch is in my acct now so you can push to it. . Yeah, the distelli thing is weird. So fat, always fails first time, always passes second time. . Sent from my iPhone. > On Sep 23, 2016, at 9:23 AM, Daniel Smith notifications@github.com wrote:; > ; > @loriab It looks like I forget to reimplement in driver. My plan was to move it to energy/gradient/etc so that it would be universal. I need to add MOWriter to proc/scf_helper and probably proc/mcscf as well. Should I just add it to this PR?; > ; > —; > You are receiving this because you were mentioned.; > Reply to this email directly, view it on GitHub, or mute the thread.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/472#issuecomment-249195924
https://github.com/psi4/psi4/pull/473#issuecomment-249286005:17,Testability,test,test,17,LGTM. (I want to test lgtm counting),MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/473#issuecomment-249286005
https://github.com/psi4/psi4/issues/474#issuecomment-249292764:129,Testability,test,test,129,"Yes, `dmrg/caspt2-n2` is long compared to quicktests, but it's not in quicktests. Are you concerned about the length of the full test suite or about there being no caspt2 representative in quicktests?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/474#issuecomment-249292764
https://github.com/psi4/psi4/issues/474#issuecomment-249299134:254,Integrability,interface,interface,254,"Hrm, I was under the impression that none of the dmrg tests are being exercised by `quicktests`, so I run the dmrg tests in addition. Granted, this does not strictly have anything to do with `quicktests` I guess, but I think the dmrg tests should either interface with `quicktests` or at least be of the same order of magnitude.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/474#issuecomment-249299134
https://github.com/psi4/psi4/issues/474#issuecomment-249299134:54,Testability,test,tests,54,"Hrm, I was under the impression that none of the dmrg tests are being exercised by `quicktests`, so I run the dmrg tests in addition. Granted, this does not strictly have anything to do with `quicktests` I guess, but I think the dmrg tests should either interface with `quicktests` or at least be of the same order of magnitude.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/474#issuecomment-249299134
https://github.com/psi4/psi4/issues/474#issuecomment-249299134:115,Testability,test,tests,115,"Hrm, I was under the impression that none of the dmrg tests are being exercised by `quicktests`, so I run the dmrg tests in addition. Granted, this does not strictly have anything to do with `quicktests` I guess, but I think the dmrg tests should either interface with `quicktests` or at least be of the same order of magnitude.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/474#issuecomment-249299134
https://github.com/psi4/psi4/issues/474#issuecomment-249299134:234,Testability,test,tests,234,"Hrm, I was under the impression that none of the dmrg tests are being exercised by `quicktests`, so I run the dmrg tests in addition. Granted, this does not strictly have anything to do with `quicktests` I guess, but I think the dmrg tests should either interface with `quicktests` or at least be of the same order of magnitude.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/474#issuecomment-249299134
https://github.com/psi4/psi4/issues/474#issuecomment-249306912:444,Availability,failure,failure,444,"Ah, so what happens is _if_ CheMPS2 is enabled, then its four tests get added, and one of those (`scf-n2`) gets added to quicktests (https://github.com/psi4/psi4/blob/master/tests/CMakeLists.txt#L113-L118, https://github.com/psi4/psi4/blob/master/tests/dmrg/scf-n2/CMakeLists.txt#L3). So there's some coverage at both levels. Admittedly, I need to check if other add-ons follow that scheme. I certainly agree that if any add-on is enabled, its failure needs to be caught at the quicktest level of testing.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/474#issuecomment-249306912
https://github.com/psi4/psi4/issues/474#issuecomment-249306912:62,Testability,test,tests,62,"Ah, so what happens is _if_ CheMPS2 is enabled, then its four tests get added, and one of those (`scf-n2`) gets added to quicktests (https://github.com/psi4/psi4/blob/master/tests/CMakeLists.txt#L113-L118, https://github.com/psi4/psi4/blob/master/tests/dmrg/scf-n2/CMakeLists.txt#L3). So there's some coverage at both levels. Admittedly, I need to check if other add-ons follow that scheme. I certainly agree that if any add-on is enabled, its failure needs to be caught at the quicktest level of testing.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/474#issuecomment-249306912
https://github.com/psi4/psi4/issues/474#issuecomment-249306912:174,Testability,test,tests,174,"Ah, so what happens is _if_ CheMPS2 is enabled, then its four tests get added, and one of those (`scf-n2`) gets added to quicktests (https://github.com/psi4/psi4/blob/master/tests/CMakeLists.txt#L113-L118, https://github.com/psi4/psi4/blob/master/tests/dmrg/scf-n2/CMakeLists.txt#L3). So there's some coverage at both levels. Admittedly, I need to check if other add-ons follow that scheme. I certainly agree that if any add-on is enabled, its failure needs to be caught at the quicktest level of testing.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/474#issuecomment-249306912
https://github.com/psi4/psi4/issues/474#issuecomment-249306912:247,Testability,test,tests,247,"Ah, so what happens is _if_ CheMPS2 is enabled, then its four tests get added, and one of those (`scf-n2`) gets added to quicktests (https://github.com/psi4/psi4/blob/master/tests/CMakeLists.txt#L113-L118, https://github.com/psi4/psi4/blob/master/tests/dmrg/scf-n2/CMakeLists.txt#L3). So there's some coverage at both levels. Admittedly, I need to check if other add-ons follow that scheme. I certainly agree that if any add-on is enabled, its failure needs to be caught at the quicktest level of testing.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/474#issuecomment-249306912
https://github.com/psi4/psi4/issues/474#issuecomment-249306912:497,Testability,test,testing,497,"Ah, so what happens is _if_ CheMPS2 is enabled, then its four tests get added, and one of those (`scf-n2`) gets added to quicktests (https://github.com/psi4/psi4/blob/master/tests/CMakeLists.txt#L113-L118, https://github.com/psi4/psi4/blob/master/tests/dmrg/scf-n2/CMakeLists.txt#L3). So there's some coverage at both levels. Admittedly, I need to check if other add-ons follow that scheme. I certainly agree that if any add-on is enabled, its failure needs to be caught at the quicktest level of testing.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/474#issuecomment-249306912
https://github.com/psi4/psi4/issues/474#issuecomment-249312071:199,Testability,test,testing,199,"BTW, we design quicktests so that they pass with `MAX_AM_ERI=4`, so if you're building the integrals internally, that's a possible time savings. Just in case you hadn't noticed and were sensitive to testing time.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/474#issuecomment-249312071
https://github.com/psi4/psi4/issues/474#issuecomment-249428766:109,Deployability,patch,patch,109,"I'm glad to hear you're using an external libint; I hope everyone will be soon. If you've switched from the [patch](https://anonscm.debian.org/viewvc/debichem/unstable/psi4/debian/patches/system_libint.patch?view=markup) to the [new external repo](https://github.com/psi4/libint) and it gives you any problems, please let us know.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/474#issuecomment-249428766
https://github.com/psi4/psi4/issues/474#issuecomment-249428766:180,Deployability,patch,patches,180,"I'm glad to hear you're using an external libint; I hope everyone will be soon. If you've switched from the [patch](https://anonscm.debian.org/viewvc/debichem/unstable/psi4/debian/patches/system_libint.patch?view=markup) to the [new external repo](https://github.com/psi4/libint) and it gives you any problems, please let us know.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/474#issuecomment-249428766
https://github.com/psi4/psi4/issues/474#issuecomment-249428766:202,Deployability,patch,patch,202,"I'm glad to hear you're using an external libint; I hope everyone will be soon. If you've switched from the [patch](https://anonscm.debian.org/viewvc/debichem/unstable/psi4/debian/patches/system_libint.patch?view=markup) to the [new external repo](https://github.com/psi4/libint) and it gives you any problems, please let us know.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/474#issuecomment-249428766
https://github.com/psi4/psi4/issues/474#issuecomment-249515051:270,Deployability,release,releases,270,"I didn't know about the new external repo - we are using the upstream libint-1.1.5 package, as it is required by several other codes as well, most notably CP2K. Did you officially take over maintainership of the libint-1 branch from evaleev? Do you plan to make regular releases? Is there a big code-difference between the new repo and the last libint1 tarball from Sourceforge and/or https://github.com/evaleev/libint/releases/tag/release-1-1-6 ? . I'll take a look at that repo once I have time, thanks.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/474#issuecomment-249515051
https://github.com/psi4/psi4/issues/474#issuecomment-249515051:419,Deployability,release,releases,419,"I didn't know about the new external repo - we are using the upstream libint-1.1.5 package, as it is required by several other codes as well, most notably CP2K. Did you officially take over maintainership of the libint-1 branch from evaleev? Do you plan to make regular releases? Is there a big code-difference between the new repo and the last libint1 tarball from Sourceforge and/or https://github.com/evaleev/libint/releases/tag/release-1-1-6 ? . I'll take a look at that repo once I have time, thanks.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/474#issuecomment-249515051
https://github.com/psi4/psi4/issues/474#issuecomment-249515051:432,Deployability,release,release-,432,"I didn't know about the new external repo - we are using the upstream libint-1.1.5 package, as it is required by several other codes as well, most notably CP2K. Did you officially take over maintainership of the libint-1 branch from evaleev? Do you plan to make regular releases? Is there a big code-difference between the new repo and the last libint1 tarball from Sourceforge and/or https://github.com/evaleev/libint/releases/tag/release-1-1-6 ? . I'll take a look at that repo once I have time, thanks.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/474#issuecomment-249515051
https://github.com/psi4/psi4/issues/474#issuecomment-249616760:306,Deployability,release,releases,306,"No, we haven't taken over maintainership of libint-1 from Valeev. There's a bit of history at the README of https://github.com/psi4/libint . We'll probably mirror any bugfixes that Valeev implements. The new external repo is based on libint as extracted from Psi4, not on https://github.com/evaleev/libint/releases/tag/release-1-1-6 . I did a grand diff at one point, and there were very many little changes; so many that I did not examine them further, yet they were mostly line tweaks, not insertions/deletions. That's actually interesting that you've been using Valeev's libint-1 with Psi4, and it's presumably been working just fine. I don't think any of the Psi4 development people have tried that in years. The main purpose of the psi4/libint repo has been to get libint built with CMake and to get it switched over to exporting CMake targets through `libintConfig.cmake` rather than detecting the installation through `Findlibint.cmake`. In that, we may have broken your ability to use your upstream libint-1.1.5 package, as the Psi4 build system expects to link to a `libint::int` target. If there are things we can do to make your life easier in not dealing with two libint-1's, let us know. Our external repo does respect `GNUInstallDirs`. . Psi4 will probably switch over to libint-2 when we get the time. But once again, we'll want a CMake build and exported targets. Hopefully, we'll be able to contribute those changes upstream to evaleev/libint, as we have with other projects (e.g., CheMPS2).",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/474#issuecomment-249616760
https://github.com/psi4/psi4/issues/474#issuecomment-249616760:319,Deployability,release,release-,319,"No, we haven't taken over maintainership of libint-1 from Valeev. There's a bit of history at the README of https://github.com/psi4/libint . We'll probably mirror any bugfixes that Valeev implements. The new external repo is based on libint as extracted from Psi4, not on https://github.com/evaleev/libint/releases/tag/release-1-1-6 . I did a grand diff at one point, and there were very many little changes; so many that I did not examine them further, yet they were mostly line tweaks, not insertions/deletions. That's actually interesting that you've been using Valeev's libint-1 with Psi4, and it's presumably been working just fine. I don't think any of the Psi4 development people have tried that in years. The main purpose of the psi4/libint repo has been to get libint built with CMake and to get it switched over to exporting CMake targets through `libintConfig.cmake` rather than detecting the installation through `Findlibint.cmake`. In that, we may have broken your ability to use your upstream libint-1.1.5 package, as the Psi4 build system expects to link to a `libint::int` target. If there are things we can do to make your life easier in not dealing with two libint-1's, let us know. Our external repo does respect `GNUInstallDirs`. . Psi4 will probably switch over to libint-2 when we get the time. But once again, we'll want a CMake build and exported targets. Hopefully, we'll be able to contribute those changes upstream to evaleev/libint, as we have with other projects (e.g., CheMPS2).",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/474#issuecomment-249616760
https://github.com/psi4/psi4/issues/474#issuecomment-249616760:904,Deployability,install,installation,904,"No, we haven't taken over maintainership of libint-1 from Valeev. There's a bit of history at the README of https://github.com/psi4/libint . We'll probably mirror any bugfixes that Valeev implements. The new external repo is based on libint as extracted from Psi4, not on https://github.com/evaleev/libint/releases/tag/release-1-1-6 . I did a grand diff at one point, and there were very many little changes; so many that I did not examine them further, yet they were mostly line tweaks, not insertions/deletions. That's actually interesting that you've been using Valeev's libint-1 with Psi4, and it's presumably been working just fine. I don't think any of the Psi4 development people have tried that in years. The main purpose of the psi4/libint repo has been to get libint built with CMake and to get it switched over to exporting CMake targets through `libintConfig.cmake` rather than detecting the installation through `Findlibint.cmake`. In that, we may have broken your ability to use your upstream libint-1.1.5 package, as the Psi4 build system expects to link to a `libint::int` target. If there are things we can do to make your life easier in not dealing with two libint-1's, let us know. Our external repo does respect `GNUInstallDirs`. . Psi4 will probably switch over to libint-2 when we get the time. But once again, we'll want a CMake build and exported targets. Hopefully, we'll be able to contribute those changes upstream to evaleev/libint, as we have with other projects (e.g., CheMPS2).",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/474#issuecomment-249616760
https://github.com/psi4/psi4/issues/474#issuecomment-249616760:890,Safety,detect,detecting,890,"No, we haven't taken over maintainership of libint-1 from Valeev. There's a bit of history at the README of https://github.com/psi4/libint . We'll probably mirror any bugfixes that Valeev implements. The new external repo is based on libint as extracted from Psi4, not on https://github.com/evaleev/libint/releases/tag/release-1-1-6 . I did a grand diff at one point, and there were very many little changes; so many that I did not examine them further, yet they were mostly line tweaks, not insertions/deletions. That's actually interesting that you've been using Valeev's libint-1 with Psi4, and it's presumably been working just fine. I don't think any of the Psi4 development people have tried that in years. The main purpose of the psi4/libint repo has been to get libint built with CMake and to get it switched over to exporting CMake targets through `libintConfig.cmake` rather than detecting the installation through `Findlibint.cmake`. In that, we may have broken your ability to use your upstream libint-1.1.5 package, as the Psi4 build system expects to link to a `libint::int` target. If there are things we can do to make your life easier in not dealing with two libint-1's, let us know. Our external repo does respect `GNUInstallDirs`. . Psi4 will probably switch over to libint-2 when we get the time. But once again, we'll want a CMake build and exported targets. Hopefully, we'll be able to contribute those changes upstream to evaleev/libint, as we have with other projects (e.g., CheMPS2).",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/474#issuecomment-249616760
https://github.com/psi4/psi4/issues/477#issuecomment-251968634:51,Deployability,patch,patch,51,"Hmm, looks like I missed this option. Ill create a patch for it. For now you can do the following:. ``` python; e, wfn = energy('detci', return_wfn=True); wfn.get_opdm(-1, -1, ""SUM"", False).print_out(); wfn.get_tpdm(""SUM"", False).print_out(); ```. OPDM signature is as follows:. ```; /**!; * Obtains the OPDM <Iroot| Epq |Jroot> from the ciwave object. If Jroot is; * negative then Iroot == Jroot, if both roots are -1 then the ""special"" CI; * OPDM is returned.; * @param Iroot Left root; * @param Jroot Right root; * @param spin Selects which spin to return: A, B, or SUM; * @param full_space If false return only the active OPDM else return full OPDM; * @return OPDM or TDM shared matrix; **/; SharedMatrix get_opdm(int Iroot=-1, int Jroot=-1, const std::string& spin=""SUM"",; bool full_space=false);; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/477#issuecomment-251968634
https://github.com/psi4/psi4/issues/477#issuecomment-251968634:121,Energy Efficiency,energy,energy,121,"Hmm, looks like I missed this option. Ill create a patch for it. For now you can do the following:. ``` python; e, wfn = energy('detci', return_wfn=True); wfn.get_opdm(-1, -1, ""SUM"", False).print_out(); wfn.get_tpdm(""SUM"", False).print_out(); ```. OPDM signature is as follows:. ```; /**!; * Obtains the OPDM <Iroot| Epq |Jroot> from the ciwave object. If Jroot is; * negative then Iroot == Jroot, if both roots are -1 then the ""special"" CI; * OPDM is returned.; * @param Iroot Left root; * @param Jroot Right root; * @param spin Selects which spin to return: A, B, or SUM; * @param full_space If false return only the active OPDM else return full OPDM; * @return OPDM or TDM shared matrix; **/; SharedMatrix get_opdm(int Iroot=-1, int Jroot=-1, const std::string& spin=""SUM"",; bool full_space=false);; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/477#issuecomment-251968634
https://github.com/psi4/psi4/pull/479#issuecomment-253109899:390,Availability,error,errors,390,"Inversion branch got rebased to master today. It's going in Monday, so this'll be after inversion but before history re-write. I foresee a few minor conflicts, esp. with the docs, wrt inversion, but nothing big. It pains me to mislabel things, but I think you're right about the ROHF unrelaxed induction. Thanks for surrounding it with warnings. I think this is a first for warding against errors caused by bypassing the driver. Thanks for preparing the PR. LGTM",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/479#issuecomment-253109899
https://github.com/psi4/psi4/pull/479#issuecomment-254008157:17,Testability,test,tests,17,"LGTM, waiting on tests now. Not sure why distelli is not running on these PR's, but still going strong on Inversion.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/479#issuecomment-254008157
https://github.com/psi4/psi4/pull/480#issuecomment-253110825:71,Energy Efficiency,ENERGY,ENERGY,71,"Good idea, now you mention it. I think I would go ahead and spell out `ENERGY`, though. Haven't been sparing characters in psivars thus far. LGTM",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/480#issuecomment-253110825
https://github.com/psi4/psi4/pull/480#issuecomment-253120506:239,Energy Efficiency,ENERGY,ENERGY,239,"I understand, but my logic in that case was that the Psi vars would appear exactly like the associated quantity in the output file, just to decrease possible confusion arising form all these different quantities.; If you'd prefer to have `ENERGY` spelled out for homogeneity reasons in the Psi vars, just let me know and I'll make the change, though.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/480#issuecomment-253120506
https://github.com/psi4/psi4/pull/480#issuecomment-253120506:21,Testability,log,logic,21,"I understand, but my logic in that case was that the Psi vars would appear exactly like the associated quantity in the output file, just to decrease possible confusion arising form all these different quantities.; If you'd prefer to have `ENERGY` spelled out for homogeneity reasons in the Psi vars, just let me know and I'll make the change, though.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/480#issuecomment-253120506
https://github.com/psi4/psi4/pull/480#issuecomment-253958928:244,Deployability,patch,patch,244,"I appreciate the `E` vs. `ENERGY` reasoning, but I think I still favor the latter. Text in the output file shows that it was written by a dozen coders, while the psivars have some unifying properties, including spelling out energy. We can just patch it later, if you'd rather not bother.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/480#issuecomment-253958928
https://github.com/psi4/psi4/pull/480#issuecomment-253958928:26,Energy Efficiency,ENERGY,ENERGY,26,"I appreciate the `E` vs. `ENERGY` reasoning, but I think I still favor the latter. Text in the output file shows that it was written by a dozen coders, while the psivars have some unifying properties, including spelling out energy. We can just patch it later, if you'd rather not bother.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/480#issuecomment-253958928
https://github.com/psi4/psi4/pull/480#issuecomment-253958928:224,Energy Efficiency,energy,energy,224,"I appreciate the `E` vs. `ENERGY` reasoning, but I think I still favor the latter. Text in the output file shows that it was written by a dozen coders, while the psivars have some unifying properties, including spelling out energy. We can just patch it later, if you'd rather not bother.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/480#issuecomment-253958928
https://github.com/psi4/psi4/pull/480#issuecomment-253959008:112,Modifiability,variab,variables,112,"How about defining both, to catch typos/confusion, but only documenting those with syntax in line with existing variables?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/480#issuecomment-253959008
https://github.com/psi4/psi4/pull/480#issuecomment-253959628:61,Energy Efficiency,ENERGY,ENERGY,61,"Not so keen on extra psivars. Just detangling how `DFT TOTAL ENERGY`/`DFT FUNCTIONAL TOTAL ENERGY` or `SAPT EXCH-IND22 ENERGY`/`SAPT EXCH-IND20,R ENERGY` are different is enough without considering aliasing. And then we'd have to consider same for options. And they all have to fit through the [math](https://github.com/psi4/psi4/blob/master/psi4/share/psi4/python/qcdb/psivardefs.py). Not adamant, if everyone likes the idea, but not in favor.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/480#issuecomment-253959628
https://github.com/psi4/psi4/pull/480#issuecomment-253959628:91,Energy Efficiency,ENERGY,ENERGY,91,"Not so keen on extra psivars. Just detangling how `DFT TOTAL ENERGY`/`DFT FUNCTIONAL TOTAL ENERGY` or `SAPT EXCH-IND22 ENERGY`/`SAPT EXCH-IND20,R ENERGY` are different is enough without considering aliasing. And then we'd have to consider same for options. And they all have to fit through the [math](https://github.com/psi4/psi4/blob/master/psi4/share/psi4/python/qcdb/psivardefs.py). Not adamant, if everyone likes the idea, but not in favor.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/480#issuecomment-253959628
https://github.com/psi4/psi4/pull/480#issuecomment-253959628:119,Energy Efficiency,ENERGY,ENERGY,119,"Not so keen on extra psivars. Just detangling how `DFT TOTAL ENERGY`/`DFT FUNCTIONAL TOTAL ENERGY` or `SAPT EXCH-IND22 ENERGY`/`SAPT EXCH-IND20,R ENERGY` are different is enough without considering aliasing. And then we'd have to consider same for options. And they all have to fit through the [math](https://github.com/psi4/psi4/blob/master/psi4/share/psi4/python/qcdb/psivardefs.py). Not adamant, if everyone likes the idea, but not in favor.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/480#issuecomment-253959628
https://github.com/psi4/psi4/pull/480#issuecomment-253959628:146,Energy Efficiency,ENERGY,ENERGY,146,"Not so keen on extra psivars. Just detangling how `DFT TOTAL ENERGY`/`DFT FUNCTIONAL TOTAL ENERGY` or `SAPT EXCH-IND22 ENERGY`/`SAPT EXCH-IND20,R ENERGY` are different is enough without considering aliasing. And then we'd have to consider same for options. And they all have to fit through the [math](https://github.com/psi4/psi4/blob/master/psi4/share/psi4/python/qcdb/psivardefs.py). Not adamant, if everyone likes the idea, but not in favor.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/480#issuecomment-253959628
https://github.com/psi4/psi4/pull/480#issuecomment-253961421:141,Energy Efficiency,ENERGY,ENERGY,141,"Oh wow, I had no idea there were already so many moving parts or I wouldn't have suggested it. I don't have any strong opinion, but I think `ENERGY` seems like the more consistent label.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/480#issuecomment-253961421
https://github.com/psi4/psi4/pull/480#issuecomment-253992072:100,Deployability,patch,patch,100,"@loriab No problems, I just pushed the change. I'd rather have it done right now than forgetting to patch it later :D",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/480#issuecomment-253992072
https://github.com/psi4/psi4/pull/480#issuecomment-253992394:35,Testability,test,tests,35,"Great, LGTM. Ill merge it in after tests pass.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/480#issuecomment-253992394
https://github.com/psi4/psi4/pull/481#issuecomment-254326737:273,Availability,failure,failure,273,Getting pretty close to merging this in. Failing tests case should be limited to the following:. ```; 22 - cc14 (Failed); 155 - docs-psimod (Failed); 187 - mints9 (Failed); ```. Docs and mints both require changes to the test case. `cc14` remains the only undiagnosed test failure.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/481#issuecomment-254326737
https://github.com/psi4/psi4/pull/481#issuecomment-254326737:49,Testability,test,tests,49,Getting pretty close to merging this in. Failing tests case should be limited to the following:. ```; 22 - cc14 (Failed); 155 - docs-psimod (Failed); 187 - mints9 (Failed); ```. Docs and mints both require changes to the test case. `cc14` remains the only undiagnosed test failure.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/481#issuecomment-254326737
https://github.com/psi4/psi4/pull/481#issuecomment-254326737:221,Testability,test,test,221,Getting pretty close to merging this in. Failing tests case should be limited to the following:. ```; 22 - cc14 (Failed); 155 - docs-psimod (Failed); 187 - mints9 (Failed); ```. Docs and mints both require changes to the test case. `cc14` remains the only undiagnosed test failure.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/481#issuecomment-254326737
https://github.com/psi4/psi4/pull/481#issuecomment-254326737:268,Testability,test,test,268,Getting pretty close to merging this in. Failing tests case should be limited to the following:. ```; 22 - cc14 (Failed); 155 - docs-psimod (Failed); 187 - mints9 (Failed); ```. Docs and mints both require changes to the test case. `cc14` remains the only undiagnosed test failure.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/481#issuecomment-254326737
https://github.com/psi4/psi4/pull/481#issuecomment-254349150:63,Safety,risk,risk,63,"682 changed files! GitHub struggled with this one. I think the risk we introduce by delaying and making merges harder is far greater than the couple of failing tests, so I'm going to say LGTM. Fantastic work to make this happen; sorry I couldn't help out. Hopefully I'll be able to help the hunt for cc14's issue soon.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/481#issuecomment-254349150
https://github.com/psi4/psi4/pull/481#issuecomment-254349150:160,Testability,test,tests,160,"682 changed files! GitHub struggled with this one. I think the risk we introduce by delaying and making merges harder is far greater than the couple of failing tests, so I'm going to say LGTM. Fantastic work to make this happen; sorry I couldn't help out. Hopefully I'll be able to help the hunt for cc14's issue soon.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/481#issuecomment-254349150
https://github.com/psi4/psi4/issues/484#issuecomment-256802735:211,Deployability,patch,patch,211,Looks like a logic breakdown around `/psi4/driver/procedures/proc.py:1140`. For now if you simply comment out `/psi4/driver/procedures/proc.py:1164-1165` everything should work as expected. Ill fix this up in a patch and switch one of our `basis_guess` test cases to an explicit basis so we can catch this in the future.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/484#issuecomment-256802735
https://github.com/psi4/psi4/issues/484#issuecomment-256802735:13,Testability,log,logic,13,Looks like a logic breakdown around `/psi4/driver/procedures/proc.py:1140`. For now if you simply comment out `/psi4/driver/procedures/proc.py:1164-1165` everything should work as expected. Ill fix this up in a patch and switch one of our `basis_guess` test cases to an explicit basis so we can catch this in the future.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/484#issuecomment-256802735
https://github.com/psi4/psi4/issues/484#issuecomment-256802735:253,Testability,test,test,253,Looks like a logic breakdown around `/psi4/driver/procedures/proc.py:1140`. For now if you simply comment out `/psi4/driver/procedures/proc.py:1164-1165` everything should work as expected. Ill fix this up in a patch and switch one of our `basis_guess` test cases to an explicit basis so we can catch this in the future.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/484#issuecomment-256802735
https://github.com/psi4/psi4/issues/484#issuecomment-256802735:91,Usability,simpl,simply,91,Looks like a logic breakdown around `/psi4/driver/procedures/proc.py:1140`. For now if you simply comment out `/psi4/driver/procedures/proc.py:1164-1165` everything should work as expected. Ill fix this up in a patch and switch one of our `basis_guess` test cases to an explicit basis so we can catch this in the future.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/484#issuecomment-256802735
https://github.com/psi4/psi4/issues/485#issuecomment-258077480:144,Availability,avail,available,144,Should we have a section about new features/improvements for users ?. # Changes since Psi4 1.0. High-spin open-shell SAPT0 computations are now available,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/485#issuecomment-258077480
https://github.com/psi4/psi4/issues/485#issuecomment-305368061:6,Deployability,release,release,6,Final release notes at: https://github.com/psi4/psi4/releases/tag/v1.1,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/485#issuecomment-305368061
https://github.com/psi4/psi4/issues/485#issuecomment-305368061:53,Deployability,release,releases,53,Final release notes at: https://github.com/psi4/psi4/releases/tag/v1.1,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/485#issuecomment-305368061
https://github.com/psi4/psi4/pull/486#issuecomment-257614429:133,Testability,test,tested,133,"Yay for us not being Luddites! I see you used `from __future__ ...` throughout, so it should be Python 2 compatible, but has it been tested with an old version? I like the numpy version info; that will be really helpful for debugging.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/486#issuecomment-257614429
https://github.com/psi4/psi4/pull/486#issuecomment-257618031:24,Testability,test,test,24,"@andysim We compile and test with Python2 exclusively at the moment. Couldnt figure out Travis, debating if we want to switch the Distelli build to Python3.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/486#issuecomment-257618031
https://github.com/psi4/psi4/pull/486#issuecomment-258135820:15,Availability,failure,failure,15,"Looks like the failure is a Distelli issue, so LGTM.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/486#issuecomment-258135820
https://github.com/psi4/psi4/pull/486#issuecomment-258141679:32,Testability,test,tests,32,"It's a pure Distelli issue, all tests pass on Mac. LGTM.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/486#issuecomment-258141679
https://github.com/psi4/psi4/pull/488#issuecomment-258132017:15,Modifiability,plugin,plugin,15,I'll rebase my plugin work to this and open a new PR.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/488#issuecomment-258132017
https://github.com/psi4/psi4/issues/491#issuecomment-258441424:378,Availability,error,error,378,"I tried it, but I got the following:. Ugurs-MacBook-Pro:psijob ugur$ lldb python /Users/ugur/psi4/objdir/stage/Users/ugur/psi4install/psi4cmake/bin/psi4 input.dat ; (lldb) target create ""python""; Current executable set to 'python' (x86_64).; (lldb) settings set -- target.run-args ""/Users/ugur/psi4/objdir/stage/Users/ugur/psi4install/psi4cmake/bin/psi4"" ""input.dat""; (lldb) r; error: process exited with status -1 (cannot attach to process due to System Integrity Protection); (lldb) . However, I can debug my old psi4. @dgasmith",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/491#issuecomment-258441424
https://github.com/psi4/psi4/issues/491#issuecomment-258441424:455,Security,Integrity,Integrity,455,"I tried it, but I got the following:. Ugurs-MacBook-Pro:psijob ugur$ lldb python /Users/ugur/psi4/objdir/stage/Users/ugur/psi4install/psi4cmake/bin/psi4 input.dat ; (lldb) target create ""python""; Current executable set to 'python' (x86_64).; (lldb) settings set -- target.run-args ""/Users/ugur/psi4/objdir/stage/Users/ugur/psi4install/psi4cmake/bin/psi4"" ""input.dat""; (lldb) r; error: process exited with status -1 (cannot attach to process due to System Integrity Protection); (lldb) . However, I can debug my old psi4. @dgasmith",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/491#issuecomment-258441424
https://github.com/psi4/psi4/issues/491#issuecomment-258466734:28,Security,hash,hash,28,@bozkaya What is the commit hash for the version of Psi4 that you have?,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/491#issuecomment-258466734
https://github.com/psi4/psi4/issues/491#issuecomment-258535598:2,Availability,error,error,2,"> error: process exited with status -1 (cannot attach to process due to System Integrity Protection); > (lldb). Are you using the system python? I have SIP disabled but I would not be surprised if you can't attach the debugger to an executable that falls under that protection. . To disable SIP you need to reboot into recovery mode, then reboot again for it to take effect.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/491#issuecomment-258535598
https://github.com/psi4/psi4/issues/491#issuecomment-258535598:307,Availability,reboot,reboot,307,"> error: process exited with status -1 (cannot attach to process due to System Integrity Protection); > (lldb). Are you using the system python? I have SIP disabled but I would not be surprised if you can't attach the debugger to an executable that falls under that protection. . To disable SIP you need to reboot into recovery mode, then reboot again for it to take effect.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/491#issuecomment-258535598
https://github.com/psi4/psi4/issues/491#issuecomment-258535598:319,Availability,recover,recovery,319,"> error: process exited with status -1 (cannot attach to process due to System Integrity Protection); > (lldb). Are you using the system python? I have SIP disabled but I would not be surprised if you can't attach the debugger to an executable that falls under that protection. . To disable SIP you need to reboot into recovery mode, then reboot again for it to take effect.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/491#issuecomment-258535598
https://github.com/psi4/psi4/issues/491#issuecomment-258535598:339,Availability,reboot,reboot,339,"> error: process exited with status -1 (cannot attach to process due to System Integrity Protection); > (lldb). Are you using the system python? I have SIP disabled but I would not be surprised if you can't attach the debugger to an executable that falls under that protection. . To disable SIP you need to reboot into recovery mode, then reboot again for it to take effect.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/491#issuecomment-258535598
https://github.com/psi4/psi4/issues/491#issuecomment-258535598:319,Safety,recover,recovery,319,"> error: process exited with status -1 (cannot attach to process due to System Integrity Protection); > (lldb). Are you using the system python? I have SIP disabled but I would not be surprised if you can't attach the debugger to an executable that falls under that protection. . To disable SIP you need to reboot into recovery mode, then reboot again for it to take effect.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/491#issuecomment-258535598
https://github.com/psi4/psi4/issues/491#issuecomment-258535598:79,Security,Integrity,Integrity,79,"> error: process exited with status -1 (cannot attach to process due to System Integrity Protection); > (lldb). Are you using the system python? I have SIP disabled but I would not be surprised if you can't attach the debugger to an executable that falls under that protection. . To disable SIP you need to reboot into recovery mode, then reboot again for it to take effect.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/491#issuecomment-258535598
https://github.com/psi4/psi4/issues/491#issuecomment-258681033:47,Availability,recover,recovery,47,"Thanks for answers! After disabling SIP in the recovery mode, I can debug the code.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/491#issuecomment-258681033
https://github.com/psi4/psi4/issues/491#issuecomment-258681033:47,Safety,recover,recovery,47,"Thanks for answers! After disabling SIP in the recovery mode, I can debug the code.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/491#issuecomment-258681033
https://github.com/psi4/psi4/pull/492#issuecomment-258580399:250,Usability,simpl,simple,250,"Good catch on the first one. The second one is working w/o the fix, I think: http://psicode.org/psi4manual/master/fisapt.html#f-i-sapt-keywords. The preceding/trailing `_` are (comparatively primitive) ReStructuredText syntax and are mostly used for simple things like website links. The more advanced `:ref:`stuff`` is Sphinx syntax and can be programmed and link across documents.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/492#issuecomment-258580399
https://github.com/psi4/psi4/pull/493#issuecomment-258531474:7,Energy Efficiency,energy,energy,7,Change energy() function reference to be clickable,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/493#issuecomment-258531474
https://github.com/psi4/psi4/pull/498#issuecomment-258581778:91,Integrability,message,message,91,"Good, this one's taken care of. In future, you can put `fixes psi4/psi4#487` in the commit message so that that issue will close automatically when the correcting PR gets merged into master. LGTM",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/498#issuecomment-258581778
https://github.com/psi4/psi4/pull/500#issuecomment-258539160:80,Energy Efficiency,energy,energy,80,"Similar to pull request #497 but should fix all broken links, not only those to energy/optimize/frequency. Removed unnecessary line break.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/500#issuecomment-258539160
https://github.com/psi4/psi4/pull/500#issuecomment-258539160:87,Performance,optimiz,optimize,87,"Similar to pull request #497 but should fix all broken links, not only those to energy/optimize/frequency. Removed unnecessary line break.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/500#issuecomment-258539160
https://github.com/psi4/psi4/pull/500#issuecomment-258734207:26,Deployability,update,update,26,"@mhlechner Can you please update your fork with directions from [here](https://github.com/psi4/psi4/wiki/1_Obtaining#get-updates-3). Also, let us know if any of the directions are misleading!",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/500#issuecomment-258734207
https://github.com/psi4/psi4/pull/500#issuecomment-258734207:121,Deployability,update,updates-,121,"@mhlechner Can you please update your fork with directions from [here](https://github.com/psi4/psi4/wiki/1_Obtaining#get-updates-3). Also, let us know if any of the directions are misleading!",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/500#issuecomment-258734207
https://github.com/psi4/psi4/issues/502#issuecomment-437531306:517,Energy Efficiency,energy,energy,517,"oh, just encountered this for ethene. here is a test case. 2 different irreps not always fail. ; ```; molecule wat {; C 0.6669000000 0.0000000000 0.0000000000; C -0.6669000000 0.0000000000 0.0000000000; H 1.2295200000 0.9222900000 0.0000000000; H -1.2295200000 0.9222900000 0.0000000000; H 1.2295200000 -0.9222900000 0.0000000000; H -1.2295200000 -0.9222900000 0.0000000000; }. set {; basis 3-21G; freeze_core true; roots_per_irrep [0,1,0,0,0,0,0,1] # <-- fails; roots_per_irrep [0,1,0,0,0,1,0,0] # <-- works (?); }; energy('eom-cc3'); ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/502#issuecomment-437531306
https://github.com/psi4/psi4/issues/502#issuecomment-437531306:48,Testability,test,test,48,"oh, just encountered this for ethene. here is a test case. 2 different irreps not always fail. ; ```; molecule wat {; C 0.6669000000 0.0000000000 0.0000000000; C -0.6669000000 0.0000000000 0.0000000000; H 1.2295200000 0.9222900000 0.0000000000; H -1.2295200000 0.9222900000 0.0000000000; H 1.2295200000 -0.9222900000 0.0000000000; H -1.2295200000 -0.9222900000 0.0000000000; }. set {; basis 3-21G; freeze_core true; roots_per_irrep [0,1,0,0,0,0,0,1] # <-- fails; roots_per_irrep [0,1,0,0,0,1,0,0] # <-- works (?); }; energy('eom-cc3'); ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/502#issuecomment-437531306
https://github.com/psi4/psi4/issues/503#issuecomment-258681166:5,Availability,error,error,5,"That error triggers when psi is trying to run an input file. The plugin code isn't getting called. Can you confirm the correct psi is being called?. > On Nov 6, 2016, at 8:06 AM, T. Daniel Crawford notifications@github.com wrote:; > ; > [draco:~/src] crawdad% psi4 --new-plugin myplugin; > Traceback (most recent call last):; > File ""/Users/crawdad/psi4/bin/psi4"", line 110, in <module>; > raise KeyError(""The file %s does not exist."" % args[""input""]); > KeyError: 'The file input.dat does not exist.'; > ; > This suggests the input.dat template doesn't exist, but it's in the install area. I can't find where this is implemented in the new structure, however. Perhaps it's not implemented?; > ; > —; > You are receiving this because you are subscribed to this thread.; > Reply to this email directly, view it on GitHub, or mute the thread.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/503#issuecomment-258681166
https://github.com/psi4/psi4/issues/503#issuecomment-258681166:577,Deployability,install,install,577,"That error triggers when psi is trying to run an input file. The plugin code isn't getting called. Can you confirm the correct psi is being called?. > On Nov 6, 2016, at 8:06 AM, T. Daniel Crawford notifications@github.com wrote:; > ; > [draco:~/src] crawdad% psi4 --new-plugin myplugin; > Traceback (most recent call last):; > File ""/Users/crawdad/psi4/bin/psi4"", line 110, in <module>; > raise KeyError(""The file %s does not exist."" % args[""input""]); > KeyError: 'The file input.dat does not exist.'; > ; > This suggests the input.dat template doesn't exist, but it's in the install area. I can't find where this is implemented in the new structure, however. Perhaps it's not implemented?; > ; > —; > You are receiving this because you are subscribed to this thread.; > Reply to this email directly, view it on GitHub, or mute the thread.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/503#issuecomment-258681166
https://github.com/psi4/psi4/issues/503#issuecomment-258681166:65,Modifiability,plugin,plugin,65,"That error triggers when psi is trying to run an input file. The plugin code isn't getting called. Can you confirm the correct psi is being called?. > On Nov 6, 2016, at 8:06 AM, T. Daniel Crawford notifications@github.com wrote:; > ; > [draco:~/src] crawdad% psi4 --new-plugin myplugin; > Traceback (most recent call last):; > File ""/Users/crawdad/psi4/bin/psi4"", line 110, in <module>; > raise KeyError(""The file %s does not exist."" % args[""input""]); > KeyError: 'The file input.dat does not exist.'; > ; > This suggests the input.dat template doesn't exist, but it's in the install area. I can't find where this is implemented in the new structure, however. Perhaps it's not implemented?; > ; > —; > You are receiving this because you are subscribed to this thread.; > Reply to this email directly, view it on GitHub, or mute the thread.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/503#issuecomment-258681166
https://github.com/psi4/psi4/issues/503#issuecomment-258681166:271,Modifiability,plugin,plugin,271,"That error triggers when psi is trying to run an input file. The plugin code isn't getting called. Can you confirm the correct psi is being called?. > On Nov 6, 2016, at 8:06 AM, T. Daniel Crawford notifications@github.com wrote:; > ; > [draco:~/src] crawdad% psi4 --new-plugin myplugin; > Traceback (most recent call last):; > File ""/Users/crawdad/psi4/bin/psi4"", line 110, in <module>; > raise KeyError(""The file %s does not exist."" % args[""input""]); > KeyError: 'The file input.dat does not exist.'; > ; > This suggests the input.dat template doesn't exist, but it's in the install area. I can't find where this is implemented in the new structure, however. Perhaps it's not implemented?; > ; > —; > You are receiving this because you are subscribed to this thread.; > Reply to this email directly, view it on GitHub, or mute the thread.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/503#issuecomment-258681166
https://github.com/psi4/psi4/issues/503#issuecomment-258681365:235,Availability,error,error,235,"Yes, this is from my fork generated and built yesterday. All old versions, including the old installations were removed. TDC. Sent from my iPhone. > On Nov 6, 2016, at 8:34 AM, Justin Turney notifications@github.com wrote:; > ; > That error triggers when psi is trying to run an input file. The plugin code isn't getting called. Can you confirm the correct psi is being called?; > ; > > On Nov 6, 2016, at 8:06 AM, T. Daniel Crawford notifications@github.com wrote:; > > ; > > [draco:~/src] crawdad% psi4 --new-plugin myplugin; > > Traceback (most recent call last):; > > File ""/Users/crawdad/psi4/bin/psi4"", line 110, in <module>; > > raise KeyError(""The file %s does not exist."" % args[""input""]); > > KeyError: 'The file input.dat does not exist.'; > > ; > > This suggests the input.dat template doesn't exist, but it's in the install area. I can't find where this is implemented in the new structure, however. Perhaps it's not implemented?; > > ; > > —; > > You are receiving this because you are subscribed to this thread.; > > Reply to this email directly, view it on GitHub, or mute the thread.; > > ; > > —; > > You are receiving this because you authored the thread.; > > Reply to this email directly, view it on GitHub, or mute the thread.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/503#issuecomment-258681365
https://github.com/psi4/psi4/issues/503#issuecomment-258681365:93,Deployability,install,installations,93,"Yes, this is from my fork generated and built yesterday. All old versions, including the old installations were removed. TDC. Sent from my iPhone. > On Nov 6, 2016, at 8:34 AM, Justin Turney notifications@github.com wrote:; > ; > That error triggers when psi is trying to run an input file. The plugin code isn't getting called. Can you confirm the correct psi is being called?; > ; > > On Nov 6, 2016, at 8:06 AM, T. Daniel Crawford notifications@github.com wrote:; > > ; > > [draco:~/src] crawdad% psi4 --new-plugin myplugin; > > Traceback (most recent call last):; > > File ""/Users/crawdad/psi4/bin/psi4"", line 110, in <module>; > > raise KeyError(""The file %s does not exist."" % args[""input""]); > > KeyError: 'The file input.dat does not exist.'; > > ; > > This suggests the input.dat template doesn't exist, but it's in the install area. I can't find where this is implemented in the new structure, however. Perhaps it's not implemented?; > > ; > > —; > > You are receiving this because you are subscribed to this thread.; > > Reply to this email directly, view it on GitHub, or mute the thread.; > > ; > > —; > > You are receiving this because you authored the thread.; > > Reply to this email directly, view it on GitHub, or mute the thread.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/503#issuecomment-258681365
https://github.com/psi4/psi4/issues/503#issuecomment-258681365:829,Deployability,install,install,829,"Yes, this is from my fork generated and built yesterday. All old versions, including the old installations were removed. TDC. Sent from my iPhone. > On Nov 6, 2016, at 8:34 AM, Justin Turney notifications@github.com wrote:; > ; > That error triggers when psi is trying to run an input file. The plugin code isn't getting called. Can you confirm the correct psi is being called?; > ; > > On Nov 6, 2016, at 8:06 AM, T. Daniel Crawford notifications@github.com wrote:; > > ; > > [draco:~/src] crawdad% psi4 --new-plugin myplugin; > > Traceback (most recent call last):; > > File ""/Users/crawdad/psi4/bin/psi4"", line 110, in <module>; > > raise KeyError(""The file %s does not exist."" % args[""input""]); > > KeyError: 'The file input.dat does not exist.'; > > ; > > This suggests the input.dat template doesn't exist, but it's in the install area. I can't find where this is implemented in the new structure, however. Perhaps it's not implemented?; > > ; > > —; > > You are receiving this because you are subscribed to this thread.; > > Reply to this email directly, view it on GitHub, or mute the thread.; > > ; > > —; > > You are receiving this because you authored the thread.; > > Reply to this email directly, view it on GitHub, or mute the thread.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/503#issuecomment-258681365
https://github.com/psi4/psi4/issues/503#issuecomment-258681365:295,Modifiability,plugin,plugin,295,"Yes, this is from my fork generated and built yesterday. All old versions, including the old installations were removed. TDC. Sent from my iPhone. > On Nov 6, 2016, at 8:34 AM, Justin Turney notifications@github.com wrote:; > ; > That error triggers when psi is trying to run an input file. The plugin code isn't getting called. Can you confirm the correct psi is being called?; > ; > > On Nov 6, 2016, at 8:06 AM, T. Daniel Crawford notifications@github.com wrote:; > > ; > > [draco:~/src] crawdad% psi4 --new-plugin myplugin; > > Traceback (most recent call last):; > > File ""/Users/crawdad/psi4/bin/psi4"", line 110, in <module>; > > raise KeyError(""The file %s does not exist."" % args[""input""]); > > KeyError: 'The file input.dat does not exist.'; > > ; > > This suggests the input.dat template doesn't exist, but it's in the install area. I can't find where this is implemented in the new structure, however. Perhaps it's not implemented?; > > ; > > —; > > You are receiving this because you are subscribed to this thread.; > > Reply to this email directly, view it on GitHub, or mute the thread.; > > ; > > —; > > You are receiving this because you authored the thread.; > > Reply to this email directly, view it on GitHub, or mute the thread.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/503#issuecomment-258681365
https://github.com/psi4/psi4/issues/503#issuecomment-258681365:511,Modifiability,plugin,plugin,511,"Yes, this is from my fork generated and built yesterday. All old versions, including the old installations were removed. TDC. Sent from my iPhone. > On Nov 6, 2016, at 8:34 AM, Justin Turney notifications@github.com wrote:; > ; > That error triggers when psi is trying to run an input file. The plugin code isn't getting called. Can you confirm the correct psi is being called?; > ; > > On Nov 6, 2016, at 8:06 AM, T. Daniel Crawford notifications@github.com wrote:; > > ; > > [draco:~/src] crawdad% psi4 --new-plugin myplugin; > > Traceback (most recent call last):; > > File ""/Users/crawdad/psi4/bin/psi4"", line 110, in <module>; > > raise KeyError(""The file %s does not exist."" % args[""input""]); > > KeyError: 'The file input.dat does not exist.'; > > ; > > This suggests the input.dat template doesn't exist, but it's in the install area. I can't find where this is implemented in the new structure, however. Perhaps it's not implemented?; > > ; > > —; > > You are receiving this because you are subscribed to this thread.; > > Reply to this email directly, view it on GitHub, or mute the thread.; > > ; > > —; > > You are receiving this because you authored the thread.; > > Reply to this email directly, view it on GitHub, or mute the thread.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/503#issuecomment-258681365
https://github.com/psi4/psi4/issues/503#issuecomment-258684467:282,Availability,error,error,282,Not sure what's going on. In your `/Users/crawdad/psi4/bin/psi4` do you have lines like https://github.com/psi4/psi4/blob/master/psi4/run_psi4.py#L142-L144 in there? The `KeyError` that's being raised is handled in the lines following. Could you also add a `print(args)` before the error and paste the results in (from your error message above the KeyError is raised near line 110)?,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/503#issuecomment-258684467
https://github.com/psi4/psi4/issues/503#issuecomment-258684467:324,Availability,error,error,324,Not sure what's going on. In your `/Users/crawdad/psi4/bin/psi4` do you have lines like https://github.com/psi4/psi4/blob/master/psi4/run_psi4.py#L142-L144 in there? The `KeyError` that's being raised is handled in the lines following. Could you also add a `print(args)` before the error and paste the results in (from your error message above the KeyError is raised near line 110)?,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/503#issuecomment-258684467
https://github.com/psi4/psi4/issues/503#issuecomment-258684467:330,Integrability,message,message,330,Not sure what's going on. In your `/Users/crawdad/psi4/bin/psi4` do you have lines like https://github.com/psi4/psi4/blob/master/psi4/run_psi4.py#L142-L144 in there? The `KeyError` that's being raised is handled in the lines following. Could you also add a `print(args)` before the error and paste the results in (from your error message above the KeyError is raised near line 110)?,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/503#issuecomment-258684467
https://github.com/psi4/psi4/issues/503#issuecomment-258732954:372,Modifiability,Plugin,Plugin,372,"Apparently I'd failed to run a ""git merge upstream/master"" after ""git fetch upstream"" when I created my local fork last week, so my most recent commit on master was by @dgasmith 18 days ago. As a result, none of the work between the Big Inversion appeared in my new fork, including the new_plugin code section in run_psi4.py. @jturney's question revealed the discrepancy. Plugin templates work now. Thanks, all!. -TDC",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/503#issuecomment-258732954
https://github.com/psi4/psi4/issues/504#issuecomment-258831635:306,Energy Efficiency,energy,energy,306,"`density_a` must be the MO density while all quantities on the Wavefunction itself are in the AO basis. I can see how this could be confusing and have edited several parts of the documentation. In addition, most post-SCF methods do not build the density by default as this can be much more costly than the energy itself. Perhaps @amjames can give hints on extracting CC densities.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/504#issuecomment-258831635
https://github.com/psi4/psi4/issues/504#issuecomment-258839784:118,Availability,avail,available,118,"Thank you for all the insights! With this info, I should be able to get it working (at least if the density matrix is available in some form.)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/504#issuecomment-258839784
https://github.com/psi4/psi4/issues/504#issuecomment-258840834:352,Deployability,update,update,352,"The `wfn.Da()` will not hold the ccsd density and in fact in this calculation it will not be computed. . To get the density would require a property calculation, and then to request the natural orbitals be printed to file. . ```; set { ; uhf_noons all; write_nos true ; } . property(""ccsd"", properties=['dipole']); ```. The `ccdensity` module does not update the wavefunction after it has computed the density. The `wfn.Da()` method will get you the AO/SO basis SCF density even after the coupled cluster density has been constructed. . I hope this is helpful",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/504#issuecomment-258840834
https://github.com/psi4/psi4/issues/504#issuecomment-258843529:288,Deployability,update,updated,288,"@amjames Could you modify `ccdensity` so that it writes the AO density to `ref_wfn`'s Da/Db?. @tovrstra Creation of the OPDM is not standardized across the different modules at the moment. Typically, setting `set opdm true` will build the OPDM; however, it is not always clear if `Da` is updated. If @amjames can update the Da/Db attributes for the `cc` modules we may be able guarantee that all Wavefunctions coming from a `property` call have a Da/Db that is associated with the called method. This should be guaranteed for all valid `property` modules besides `cc` at the moment.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/504#issuecomment-258843529
https://github.com/psi4/psi4/issues/504#issuecomment-258843529:313,Deployability,update,update,313,"@amjames Could you modify `ccdensity` so that it writes the AO density to `ref_wfn`'s Da/Db?. @tovrstra Creation of the OPDM is not standardized across the different modules at the moment. Typically, setting `set opdm true` will build the OPDM; however, it is not always clear if `Da` is updated. If @amjames can update the Da/Db attributes for the `cc` modules we may be able guarantee that all Wavefunctions coming from a `property` call have a Da/Db that is associated with the called method. This should be guaranteed for all valid `property` modules besides `cc` at the moment.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/504#issuecomment-258843529
https://github.com/psi4/psi4/issues/504#issuecomment-258843529:271,Usability,clear,clear,271,"@amjames Could you modify `ccdensity` so that it writes the AO density to `ref_wfn`'s Da/Db?. @tovrstra Creation of the OPDM is not standardized across the different modules at the moment. Typically, setting `set opdm true` will build the OPDM; however, it is not always clear if `Da` is updated. If @amjames can update the Da/Db attributes for the `cc` modules we may be able guarantee that all Wavefunctions coming from a `property` call have a Da/Db that is associated with the called method. This should be guaranteed for all valid `property` modules besides `cc` at the moment.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/504#issuecomment-258843529
https://github.com/psi4/psi4/issues/504#issuecomment-258862824:77,Security,access,accessors,77,"I think anytime the unrelaxed density is built we should set it to the Da/Db accessors. It would be nice to compute the density based properties using OEProp at the python level as well. Example:. https://github.com/psi4/psi4/blob/master/psi4/driver/procedures/proc.py#L2476. Perhaps a bit ambitious for this pass, but it would be nice for consistency.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/504#issuecomment-258862824
https://github.com/psi4/psi4/issues/504#issuecomment-258885888:286,Modifiability,inherit,inherits,286,"I completely agree. Right now CC properties go through OEProp, but from within the module. Moving that to python has been on my list for a while. . Setting the `ref_wfn` Da/Db in ccdensity is complicated because the `Psi::ccdensity::onepdm()` function is not a member of any class that inherits from `wavefunction`. . So, in order to do this there needs to be some hook opened up in the base class (ie `set_postscf_Da`). . A cleaner solution would be to re-organize the various cc\* modules into one module with the ccwavefunction playing the role the ""MOinfo"" and ""params"" structs. Though, that would be a much larger project.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/504#issuecomment-258885888
https://github.com/psi4/psi4/issues/504#issuecomment-258902901:216,Security,access,accessed,216,"@amjames You can probably get around the constness of the `Da` attribute. Or easier, if slightly annoying, you can use the Wavefunction `set_array(""OPDM"", opdm_)` function which will set the Matrix which can then be accessed Python side through `get_array(""OPDM"")` and then use numpy functions to to set it back to Da. ``` python; opdm = ...; ref_wfn = ..; for h in range(nirrep):; ref_wfn.Da().nph[h][:] = opdm.nph[h][:]; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/504#issuecomment-258902901
https://github.com/psi4/psi4/issues/504#issuecomment-260131540:153,Availability,avail,available,153,"One of the comments in this chain referred to unrelaxed densities. We should check with @lothian, but I think typically we want relaxed densities (where available) for the purposes of computing properties.... dipole moments, for example, should be more accurate when computed using relaxed densities. (There's an old Bartlett paper that does this comparison for CCSD, as I recall). On the other hand, I do not know that relaxed densities are the appropriate ones if we want to compute natural orbitals (which is more the context of the current discussion). For example, I'm not sure if relaxed densities satisfy Tr(\gamma) = N. Will we wind up needing to keep both relaxed and unrelaxed densities in wfn?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/504#issuecomment-260131540
https://github.com/psi4/psi4/issues/504#issuecomment-260369576:350,Availability,avail,available,350,"Eventually, I would need it in the AO basis. If it is possible to access all information (contractions, etc.) of the basis set and the matrix elements, I should be able to extract the required data, which would be great. I would already be happy to try this with the unrelaxed dm, to get things working, and then switch to the relaxed on, once it is available.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/504#issuecomment-260369576
https://github.com/psi4/psi4/issues/504#issuecomment-260369576:90,Integrability,contract,contractions,90,"Eventually, I would need it in the AO basis. If it is possible to access all information (contractions, etc.) of the basis set and the matrix elements, I should be able to extract the required data, which would be great. I would already be happy to try this with the unrelaxed dm, to get things working, and then switch to the relaxed on, once it is available.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/504#issuecomment-260369576
https://github.com/psi4/psi4/issues/504#issuecomment-260369576:66,Security,access,access,66,"Eventually, I would need it in the AO basis. If it is possible to access all information (contractions, etc.) of the basis set and the matrix elements, I should be able to extract the required data, which would be great. I would already be happy to try this with the unrelaxed dm, to get things working, and then switch to the relaxed on, once it is available.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/504#issuecomment-260369576
https://github.com/psi4/psi4/issues/504#issuecomment-260372655:99,Energy Efficiency,energy,energy,99,"Try out the following:. ``` python; molecule mol {; He; He 1 3.0; symmetry c1; }. scf_e, scf_wfn = energy('SCF/sto-3g', return_wfn=True). scf_wfn.Da().print_out(); scf_wfn.basisset().print_detail_out(). # Accessors for Da; print scf_wfn.Da().get(0, 0) # Python to C++ accessor; print scf_wfn.Da().np # Numpy accessor; ```. Using `C1` so that we get the AO basis set, SO->AO transformations are pretty simple as well. You can also run python-based help on a BasisSet object (`help(scf_wfn.basisset())`) to get a better idea of how to access it. The docs are pretty limited, but hopefully the function names are somewhat self explanatory.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/504#issuecomment-260372655
https://github.com/psi4/psi4/issues/504#issuecomment-260372655:205,Security,Access,Accessors,205,"Try out the following:. ``` python; molecule mol {; He; He 1 3.0; symmetry c1; }. scf_e, scf_wfn = energy('SCF/sto-3g', return_wfn=True). scf_wfn.Da().print_out(); scf_wfn.basisset().print_detail_out(). # Accessors for Da; print scf_wfn.Da().get(0, 0) # Python to C++ accessor; print scf_wfn.Da().np # Numpy accessor; ```. Using `C1` so that we get the AO basis set, SO->AO transformations are pretty simple as well. You can also run python-based help on a BasisSet object (`help(scf_wfn.basisset())`) to get a better idea of how to access it. The docs are pretty limited, but hopefully the function names are somewhat self explanatory.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/504#issuecomment-260372655
https://github.com/psi4/psi4/issues/504#issuecomment-260372655:268,Security,access,accessor,268,"Try out the following:. ``` python; molecule mol {; He; He 1 3.0; symmetry c1; }. scf_e, scf_wfn = energy('SCF/sto-3g', return_wfn=True). scf_wfn.Da().print_out(); scf_wfn.basisset().print_detail_out(). # Accessors for Da; print scf_wfn.Da().get(0, 0) # Python to C++ accessor; print scf_wfn.Da().np # Numpy accessor; ```. Using `C1` so that we get the AO basis set, SO->AO transformations are pretty simple as well. You can also run python-based help on a BasisSet object (`help(scf_wfn.basisset())`) to get a better idea of how to access it. The docs are pretty limited, but hopefully the function names are somewhat self explanatory.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/504#issuecomment-260372655
https://github.com/psi4/psi4/issues/504#issuecomment-260372655:308,Security,access,accessor,308,"Try out the following:. ``` python; molecule mol {; He; He 1 3.0; symmetry c1; }. scf_e, scf_wfn = energy('SCF/sto-3g', return_wfn=True). scf_wfn.Da().print_out(); scf_wfn.basisset().print_detail_out(). # Accessors for Da; print scf_wfn.Da().get(0, 0) # Python to C++ accessor; print scf_wfn.Da().np # Numpy accessor; ```. Using `C1` so that we get the AO basis set, SO->AO transformations are pretty simple as well. You can also run python-based help on a BasisSet object (`help(scf_wfn.basisset())`) to get a better idea of how to access it. The docs are pretty limited, but hopefully the function names are somewhat self explanatory.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/504#issuecomment-260372655
https://github.com/psi4/psi4/issues/504#issuecomment-260372655:533,Security,access,access,533,"Try out the following:. ``` python; molecule mol {; He; He 1 3.0; symmetry c1; }. scf_e, scf_wfn = energy('SCF/sto-3g', return_wfn=True). scf_wfn.Da().print_out(); scf_wfn.basisset().print_detail_out(). # Accessors for Da; print scf_wfn.Da().get(0, 0) # Python to C++ accessor; print scf_wfn.Da().np # Numpy accessor; ```. Using `C1` so that we get the AO basis set, SO->AO transformations are pretty simple as well. You can also run python-based help on a BasisSet object (`help(scf_wfn.basisset())`) to get a better idea of how to access it. The docs are pretty limited, but hopefully the function names are somewhat self explanatory.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/504#issuecomment-260372655
https://github.com/psi4/psi4/issues/504#issuecomment-260372655:401,Usability,simpl,simple,401,"Try out the following:. ``` python; molecule mol {; He; He 1 3.0; symmetry c1; }. scf_e, scf_wfn = energy('SCF/sto-3g', return_wfn=True). scf_wfn.Da().print_out(); scf_wfn.basisset().print_detail_out(). # Accessors for Da; print scf_wfn.Da().get(0, 0) # Python to C++ accessor; print scf_wfn.Da().np # Numpy accessor; ```. Using `C1` so that we get the AO basis set, SO->AO transformations are pretty simple as well. You can also run python-based help on a BasisSet object (`help(scf_wfn.basisset())`) to get a better idea of how to access it. The docs are pretty limited, but hopefully the function names are somewhat self explanatory.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/504#issuecomment-260372655
https://github.com/psi4/psi4/issues/504#issuecomment-260397625:734,Availability,avail,available,734,"I can see how the Molden format is perhaps a good fit for this, as it; presents not only the desired quantity (AO basis density matrix) but also; the associated data required to interpret it (basis set ordering,; exponents, contractions). Of course, even then, some assumptions/standards; have to be in place, like normalization conventions for the basis; functions, etc. Indeed, we already had a discussion about normalization; conventions in https://github.com/psi4/psi4/issues/60 . One would also in; principle have to assume some standard for how to define the pure angular; momentum functions from the Cartesian functions, etc. Still, with some; choices made and documented to set a convention for all this (which is; presumably available), Molden format could be ok to pass along; self-contained one-electron properties between programs that might have; different conventions. On the other hand, I think it remains useful to be able to get at; this/similar info without having to literally write out a Molden file.; Perhaps the example from @dgasmith will work or could be built upon. On Mon, Nov 14, 2016 at 10:49 AM, Daniel Smith notifications@github.com; wrote:. > Try out the following:; > ; > molecule mol {; > He; > He 1 3.0; > symmetry c1; > }; > ; > scf_e, scf_wfn = energy('SCF/sto-3g', return_wfn=True); > ; > scf_wfn.Da().print_out(); > scf_wfn.basisset().print_detail_out(); > ; > # Accessors for Daprint scf_wfn.Da().get(0, 0) # Python to C++ accessorprint scf_wfn.Da().np # Numpy accessor; > ; > Using C1 so that we get the AO basis set, SO->AO transformations are; > pretty simple as well. You can also run python-based help on a BasisSet; > object (help(scf_wfn.basisset())) to get a better idea of how to access; > it. The docs are pretty limited, but hopefully that function names are; > somewhat self explanatory.; > ; > —; > You are receiving this because you commented.; > Reply to this email directly, view it on GitHub; > https://github.com/psi4/psi4/issues/504#issuecomme",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/504#issuecomment-260397625
https://github.com/psi4/psi4/issues/504#issuecomment-260397625:1281,Energy Efficiency,energy,energy,1281,"he associated data required to interpret it (basis set ordering,; exponents, contractions). Of course, even then, some assumptions/standards; have to be in place, like normalization conventions for the basis; functions, etc. Indeed, we already had a discussion about normalization; conventions in https://github.com/psi4/psi4/issues/60 . One would also in; principle have to assume some standard for how to define the pure angular; momentum functions from the Cartesian functions, etc. Still, with some; choices made and documented to set a convention for all this (which is; presumably available), Molden format could be ok to pass along; self-contained one-electron properties between programs that might have; different conventions. On the other hand, I think it remains useful to be able to get at; this/similar info without having to literally write out a Molden file.; Perhaps the example from @dgasmith will work or could be built upon. On Mon, Nov 14, 2016 at 10:49 AM, Daniel Smith notifications@github.com; wrote:. > Try out the following:; > ; > molecule mol {; > He; > He 1 3.0; > symmetry c1; > }; > ; > scf_e, scf_wfn = energy('SCF/sto-3g', return_wfn=True); > ; > scf_wfn.Da().print_out(); > scf_wfn.basisset().print_detail_out(); > ; > # Accessors for Daprint scf_wfn.Da().get(0, 0) # Python to C++ accessorprint scf_wfn.Da().np # Numpy accessor; > ; > Using C1 so that we get the AO basis set, SO->AO transformations are; > pretty simple as well. You can also run python-based help on a BasisSet; > object (help(scf_wfn.basisset())) to get a better idea of how to access; > it. The docs are pretty limited, but hopefully that function names are; > somewhat self explanatory.; > ; > —; > You are receiving this because you commented.; > Reply to this email directly, view it on GitHub; > https://github.com/psi4/psi4/issues/504#issuecomment-260372655, or mute; > the thread; > https://github.com/notifications/unsubscribe-auth/AC9QdrifPw4c7cEJjFh2lsYONTY7LiR6ks5q-IMngaJpZM4KrBng; > .",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/504#issuecomment-260397625
https://github.com/psi4/psi4/issues/504#issuecomment-260397625:224,Integrability,contract,contractions,224,"I can see how the Molden format is perhaps a good fit for this, as it; presents not only the desired quantity (AO basis density matrix) but also; the associated data required to interpret it (basis set ordering,; exponents, contractions). Of course, even then, some assumptions/standards; have to be in place, like normalization conventions for the basis; functions, etc. Indeed, we already had a discussion about normalization; conventions in https://github.com/psi4/psi4/issues/60 . One would also in; principle have to assume some standard for how to define the pure angular; momentum functions from the Cartesian functions, etc. Still, with some; choices made and documented to set a convention for all this (which is; presumably available), Molden format could be ok to pass along; self-contained one-electron properties between programs that might have; different conventions. On the other hand, I think it remains useful to be able to get at; this/similar info without having to literally write out a Molden file.; Perhaps the example from @dgasmith will work or could be built upon. On Mon, Nov 14, 2016 at 10:49 AM, Daniel Smith notifications@github.com; wrote:. > Try out the following:; > ; > molecule mol {; > He; > He 1 3.0; > symmetry c1; > }; > ; > scf_e, scf_wfn = energy('SCF/sto-3g', return_wfn=True); > ; > scf_wfn.Da().print_out(); > scf_wfn.basisset().print_detail_out(); > ; > # Accessors for Daprint scf_wfn.Da().get(0, 0) # Python to C++ accessorprint scf_wfn.Da().np # Numpy accessor; > ; > Using C1 so that we get the AO basis set, SO->AO transformations are; > pretty simple as well. You can also run python-based help on a BasisSet; > object (help(scf_wfn.basisset())) to get a better idea of how to access; > it. The docs are pretty limited, but hopefully that function names are; > somewhat self explanatory.; > ; > —; > You are receiving this because you commented.; > Reply to this email directly, view it on GitHub; > https://github.com/psi4/psi4/issues/504#issuecomme",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/504#issuecomment-260397625
https://github.com/psi4/psi4/issues/504#issuecomment-260397625:1401,Security,Access,Accessors,1401,"he associated data required to interpret it (basis set ordering,; exponents, contractions). Of course, even then, some assumptions/standards; have to be in place, like normalization conventions for the basis; functions, etc. Indeed, we already had a discussion about normalization; conventions in https://github.com/psi4/psi4/issues/60 . One would also in; principle have to assume some standard for how to define the pure angular; momentum functions from the Cartesian functions, etc. Still, with some; choices made and documented to set a convention for all this (which is; presumably available), Molden format could be ok to pass along; self-contained one-electron properties between programs that might have; different conventions. On the other hand, I think it remains useful to be able to get at; this/similar info without having to literally write out a Molden file.; Perhaps the example from @dgasmith will work or could be built upon. On Mon, Nov 14, 2016 at 10:49 AM, Daniel Smith notifications@github.com; wrote:. > Try out the following:; > ; > molecule mol {; > He; > He 1 3.0; > symmetry c1; > }; > ; > scf_e, scf_wfn = energy('SCF/sto-3g', return_wfn=True); > ; > scf_wfn.Da().print_out(); > scf_wfn.basisset().print_detail_out(); > ; > # Accessors for Daprint scf_wfn.Da().get(0, 0) # Python to C++ accessorprint scf_wfn.Da().np # Numpy accessor; > ; > Using C1 so that we get the AO basis set, SO->AO transformations are; > pretty simple as well. You can also run python-based help on a BasisSet; > object (help(scf_wfn.basisset())) to get a better idea of how to access; > it. The docs are pretty limited, but hopefully that function names are; > somewhat self explanatory.; > ; > —; > You are receiving this because you commented.; > Reply to this email directly, view it on GitHub; > https://github.com/psi4/psi4/issues/504#issuecomment-260372655, or mute; > the thread; > https://github.com/notifications/unsubscribe-auth/AC9QdrifPw4c7cEJjFh2lsYONTY7LiR6ks5q-IMngaJpZM4KrBng; > .",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/504#issuecomment-260397625
https://github.com/psi4/psi4/issues/504#issuecomment-260397625:1462,Security,access,accessorprint,1462,"he associated data required to interpret it (basis set ordering,; exponents, contractions). Of course, even then, some assumptions/standards; have to be in place, like normalization conventions for the basis; functions, etc. Indeed, we already had a discussion about normalization; conventions in https://github.com/psi4/psi4/issues/60 . One would also in; principle have to assume some standard for how to define the pure angular; momentum functions from the Cartesian functions, etc. Still, with some; choices made and documented to set a convention for all this (which is; presumably available), Molden format could be ok to pass along; self-contained one-electron properties between programs that might have; different conventions. On the other hand, I think it remains useful to be able to get at; this/similar info without having to literally write out a Molden file.; Perhaps the example from @dgasmith will work or could be built upon. On Mon, Nov 14, 2016 at 10:49 AM, Daniel Smith notifications@github.com; wrote:. > Try out the following:; > ; > molecule mol {; > He; > He 1 3.0; > symmetry c1; > }; > ; > scf_e, scf_wfn = energy('SCF/sto-3g', return_wfn=True); > ; > scf_wfn.Da().print_out(); > scf_wfn.basisset().print_detail_out(); > ; > # Accessors for Daprint scf_wfn.Da().get(0, 0) # Python to C++ accessorprint scf_wfn.Da().np # Numpy accessor; > ; > Using C1 so that we get the AO basis set, SO->AO transformations are; > pretty simple as well. You can also run python-based help on a BasisSet; > object (help(scf_wfn.basisset())) to get a better idea of how to access; > it. The docs are pretty limited, but hopefully that function names are; > somewhat self explanatory.; > ; > —; > You are receiving this because you commented.; > Reply to this email directly, view it on GitHub; > https://github.com/psi4/psi4/issues/504#issuecomment-260372655, or mute; > the thread; > https://github.com/notifications/unsubscribe-auth/AC9QdrifPw4c7cEJjFh2lsYONTY7LiR6ks5q-IMngaJpZM4KrBng; > .",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/504#issuecomment-260397625
https://github.com/psi4/psi4/issues/504#issuecomment-260397625:1500,Security,access,accessor,1500,"he associated data required to interpret it (basis set ordering,; exponents, contractions). Of course, even then, some assumptions/standards; have to be in place, like normalization conventions for the basis; functions, etc. Indeed, we already had a discussion about normalization; conventions in https://github.com/psi4/psi4/issues/60 . One would also in; principle have to assume some standard for how to define the pure angular; momentum functions from the Cartesian functions, etc. Still, with some; choices made and documented to set a convention for all this (which is; presumably available), Molden format could be ok to pass along; self-contained one-electron properties between programs that might have; different conventions. On the other hand, I think it remains useful to be able to get at; this/similar info without having to literally write out a Molden file.; Perhaps the example from @dgasmith will work or could be built upon. On Mon, Nov 14, 2016 at 10:49 AM, Daniel Smith notifications@github.com; wrote:. > Try out the following:; > ; > molecule mol {; > He; > He 1 3.0; > symmetry c1; > }; > ; > scf_e, scf_wfn = energy('SCF/sto-3g', return_wfn=True); > ; > scf_wfn.Da().print_out(); > scf_wfn.basisset().print_detail_out(); > ; > # Accessors for Daprint scf_wfn.Da().get(0, 0) # Python to C++ accessorprint scf_wfn.Da().np # Numpy accessor; > ; > Using C1 so that we get the AO basis set, SO->AO transformations are; > pretty simple as well. You can also run python-based help on a BasisSet; > object (help(scf_wfn.basisset())) to get a better idea of how to access; > it. The docs are pretty limited, but hopefully that function names are; > somewhat self explanatory.; > ; > —; > You are receiving this because you commented.; > Reply to this email directly, view it on GitHub; > https://github.com/psi4/psi4/issues/504#issuecomment-260372655, or mute; > the thread; > https://github.com/notifications/unsubscribe-auth/AC9QdrifPw4c7cEJjFh2lsYONTY7LiR6ks5q-IMngaJpZM4KrBng; > .",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/504#issuecomment-260397625
https://github.com/psi4/psi4/issues/504#issuecomment-260397625:1728,Security,access,access,1728,"he associated data required to interpret it (basis set ordering,; exponents, contractions). Of course, even then, some assumptions/standards; have to be in place, like normalization conventions for the basis; functions, etc. Indeed, we already had a discussion about normalization; conventions in https://github.com/psi4/psi4/issues/60 . One would also in; principle have to assume some standard for how to define the pure angular; momentum functions from the Cartesian functions, etc. Still, with some; choices made and documented to set a convention for all this (which is; presumably available), Molden format could be ok to pass along; self-contained one-electron properties between programs that might have; different conventions. On the other hand, I think it remains useful to be able to get at; this/similar info without having to literally write out a Molden file.; Perhaps the example from @dgasmith will work or could be built upon. On Mon, Nov 14, 2016 at 10:49 AM, Daniel Smith notifications@github.com; wrote:. > Try out the following:; > ; > molecule mol {; > He; > He 1 3.0; > symmetry c1; > }; > ; > scf_e, scf_wfn = energy('SCF/sto-3g', return_wfn=True); > ; > scf_wfn.Da().print_out(); > scf_wfn.basisset().print_detail_out(); > ; > # Accessors for Daprint scf_wfn.Da().get(0, 0) # Python to C++ accessorprint scf_wfn.Da().np # Numpy accessor; > ; > Using C1 so that we get the AO basis set, SO->AO transformations are; > pretty simple as well. You can also run python-based help on a BasisSet; > object (help(scf_wfn.basisset())) to get a better idea of how to access; > it. The docs are pretty limited, but hopefully that function names are; > somewhat self explanatory.; > ; > —; > You are receiving this because you commented.; > Reply to this email directly, view it on GitHub; > https://github.com/psi4/psi4/issues/504#issuecomment-260372655, or mute; > the thread; > https://github.com/notifications/unsubscribe-auth/AC9QdrifPw4c7cEJjFh2lsYONTY7LiR6ks5q-IMngaJpZM4KrBng; > .",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/504#issuecomment-260397625
https://github.com/psi4/psi4/issues/504#issuecomment-260397625:1595,Usability,simpl,simple,1595,"he associated data required to interpret it (basis set ordering,; exponents, contractions). Of course, even then, some assumptions/standards; have to be in place, like normalization conventions for the basis; functions, etc. Indeed, we already had a discussion about normalization; conventions in https://github.com/psi4/psi4/issues/60 . One would also in; principle have to assume some standard for how to define the pure angular; momentum functions from the Cartesian functions, etc. Still, with some; choices made and documented to set a convention for all this (which is; presumably available), Molden format could be ok to pass along; self-contained one-electron properties between programs that might have; different conventions. On the other hand, I think it remains useful to be able to get at; this/similar info without having to literally write out a Molden file.; Perhaps the example from @dgasmith will work or could be built upon. On Mon, Nov 14, 2016 at 10:49 AM, Daniel Smith notifications@github.com; wrote:. > Try out the following:; > ; > molecule mol {; > He; > He 1 3.0; > symmetry c1; > }; > ; > scf_e, scf_wfn = energy('SCF/sto-3g', return_wfn=True); > ; > scf_wfn.Da().print_out(); > scf_wfn.basisset().print_detail_out(); > ; > # Accessors for Daprint scf_wfn.Da().get(0, 0) # Python to C++ accessorprint scf_wfn.Da().np # Numpy accessor; > ; > Using C1 so that we get the AO basis set, SO->AO transformations are; > pretty simple as well. You can also run python-based help on a BasisSet; > object (help(scf_wfn.basisset())) to get a better idea of how to access; > it. The docs are pretty limited, but hopefully that function names are; > somewhat self explanatory.; > ; > —; > You are receiving this because you commented.; > Reply to this email directly, view it on GitHub; > https://github.com/psi4/psi4/issues/504#issuecomment-260372655, or mute; > the thread; > https://github.com/notifications/unsubscribe-auth/AC9QdrifPw4c7cEJjFh2lsYONTY7LiR6ks5q-IMngaJpZM4KrBng; > .",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/504#issuecomment-260397625
https://github.com/psi4/psi4/issues/504#issuecomment-271110193:37,Availability,checkpoint,checkpoints,37,"@kannon92 yes, I'd suggest formatted checkpoints, which is an OK format for passing around data, and which is supported by a number of different visualization programs.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/504#issuecomment-271110193
https://github.com/psi4/psi4/issues/504#issuecomment-271233727:199,Testability,test,test,199,"Sorry that I did not have much time to look into this yet. (Teaching, exams, grrr.). My original questions is probably solved but the rest of the discussion on container formats is not. (I'll try to test soon.); I'm opening a new issue for the data format discussion (#562), so we can close this one soon(er).",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/504#issuecomment-271233727
https://github.com/psi4/psi4/issues/504#issuecomment-455882484:20,Energy Efficiency,charge,charges,20,"The sum of Mulliken charges should not be positive or negative, it should be zero for a charge neutral system.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/504#issuecomment-455882484
https://github.com/psi4/psi4/issues/504#issuecomment-455882484:88,Energy Efficiency,charge,charge,88,"The sum of Mulliken charges should not be positive or negative, it should be zero for a charge neutral system.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/504#issuecomment-455882484
https://github.com/psi4/psi4/pull/506#issuecomment-258952783:34,Integrability,rout,route,34,"@dgasmith thats probably a better route to go, and by AO i take it you mean I should transform the opdm to the SO basis first?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/506#issuecomment-258952783
https://github.com/psi4/psi4/pull/506#issuecomment-259024437:22,Deployability,update,update,22,LGTM. Did you want to update OEProp Python side or wait for another update?,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/506#issuecomment-259024437
https://github.com/psi4/psi4/pull/506#issuecomment-259024437:68,Deployability,update,update,68,LGTM. Did you want to update OEProp Python side or wait for another update?,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/506#issuecomment-259024437
https://github.com/psi4/psi4/pull/506#issuecomment-259133221:73,Deployability,update,update,73,"@dgasmith To bring OEProp out to python should probably wait for another update. This one was to address problems related to #504 and I think that is satisfied. The OEProp code is being called for (possibly) multiple states, and in order to move the OEProp stuff out to python would mean storing the OPDM for each state. I would rather move the OEProp stuff out to python at a point where the loop over states can be dealt with in python as well. . So yes, I am going to wait for another update to move the OEProp Python side.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/506#issuecomment-259133221
https://github.com/psi4/psi4/pull/506#issuecomment-259133221:488,Deployability,update,update,488,"@dgasmith To bring OEProp out to python should probably wait for another update. This one was to address problems related to #504 and I think that is satisfied. The OEProp code is being called for (possibly) multiple states, and in order to move the OEProp stuff out to python would mean storing the OPDM for each state. I would rather move the OEProp stuff out to python at a point where the loop over states can be dealt with in python as well. . So yes, I am going to wait for another update to move the OEProp Python side.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/506#issuecomment-259133221
https://github.com/psi4/psi4/pull/506#issuecomment-259443499:23,Testability,test,test,23,@amjames Can you add a test case to ensure the coupled cluster OPDM is used in properties?,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/506#issuecomment-259443499
https://github.com/psi4/psi4/pull/506#issuecomment-259561352:23,Modifiability,extend,extending,23,"It may be as simple as extending a test like:. ``` python; props, wfn = psi4.properties('CCSD/cc-pVDZ"", return_wfn=True); prop = psi4.core.OEProp(wfn); ...; prop.compute(). compare_value(…) # TEST; ```. Just to ensure that the OPDM remains valid during changes. Good examples could be scf-properties or ci-properties test cases. Cheers,; Daniel Smith. > On Nov 9, 2016, at 18:45, Andrew James notifications@github.com wrote:; > ; > @jturney https://github.com/jturney do you mean if you use OEprop from python side?; > ; > —; > You are receiving this because you were mentioned.; > Reply to this email directly, view it on GitHub https://github.com/psi4/psi4/pull/506#issuecomment-259559771, or mute the thread https://github.com/notifications/unsubscribe-auth/ABsBcdANRkkc09DCv2AR8vkQDiiFfWCmks5q8lsAgaJpZM4Krp5j.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/506#issuecomment-259561352
https://github.com/psi4/psi4/pull/506#issuecomment-259561352:35,Testability,test,test,35,"It may be as simple as extending a test like:. ``` python; props, wfn = psi4.properties('CCSD/cc-pVDZ"", return_wfn=True); prop = psi4.core.OEProp(wfn); ...; prop.compute(). compare_value(…) # TEST; ```. Just to ensure that the OPDM remains valid during changes. Good examples could be scf-properties or ci-properties test cases. Cheers,; Daniel Smith. > On Nov 9, 2016, at 18:45, Andrew James notifications@github.com wrote:; > ; > @jturney https://github.com/jturney do you mean if you use OEprop from python side?; > ; > —; > You are receiving this because you were mentioned.; > Reply to this email directly, view it on GitHub https://github.com/psi4/psi4/pull/506#issuecomment-259559771, or mute the thread https://github.com/notifications/unsubscribe-auth/ABsBcdANRkkc09DCv2AR8vkQDiiFfWCmks5q8lsAgaJpZM4Krp5j.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/506#issuecomment-259561352
https://github.com/psi4/psi4/pull/506#issuecomment-259561352:192,Testability,TEST,TEST,192,"It may be as simple as extending a test like:. ``` python; props, wfn = psi4.properties('CCSD/cc-pVDZ"", return_wfn=True); prop = psi4.core.OEProp(wfn); ...; prop.compute(). compare_value(…) # TEST; ```. Just to ensure that the OPDM remains valid during changes. Good examples could be scf-properties or ci-properties test cases. Cheers,; Daniel Smith. > On Nov 9, 2016, at 18:45, Andrew James notifications@github.com wrote:; > ; > @jturney https://github.com/jturney do you mean if you use OEprop from python side?; > ; > —; > You are receiving this because you were mentioned.; > Reply to this email directly, view it on GitHub https://github.com/psi4/psi4/pull/506#issuecomment-259559771, or mute the thread https://github.com/notifications/unsubscribe-auth/ABsBcdANRkkc09DCv2AR8vkQDiiFfWCmks5q8lsAgaJpZM4Krp5j.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/506#issuecomment-259561352
https://github.com/psi4/psi4/pull/506#issuecomment-259561352:317,Testability,test,test,317,"It may be as simple as extending a test like:. ``` python; props, wfn = psi4.properties('CCSD/cc-pVDZ"", return_wfn=True); prop = psi4.core.OEProp(wfn); ...; prop.compute(). compare_value(…) # TEST; ```. Just to ensure that the OPDM remains valid during changes. Good examples could be scf-properties or ci-properties test cases. Cheers,; Daniel Smith. > On Nov 9, 2016, at 18:45, Andrew James notifications@github.com wrote:; > ; > @jturney https://github.com/jturney do you mean if you use OEprop from python side?; > ; > —; > You are receiving this because you were mentioned.; > Reply to this email directly, view it on GitHub https://github.com/psi4/psi4/pull/506#issuecomment-259559771, or mute the thread https://github.com/notifications/unsubscribe-auth/ABsBcdANRkkc09DCv2AR8vkQDiiFfWCmks5q8lsAgaJpZM4Krp5j.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/506#issuecomment-259561352
https://github.com/psi4/psi4/pull/506#issuecomment-259561352:13,Usability,simpl,simple,13,"It may be as simple as extending a test like:. ``` python; props, wfn = psi4.properties('CCSD/cc-pVDZ"", return_wfn=True); prop = psi4.core.OEProp(wfn); ...; prop.compute(). compare_value(…) # TEST; ```. Just to ensure that the OPDM remains valid during changes. Good examples could be scf-properties or ci-properties test cases. Cheers,; Daniel Smith. > On Nov 9, 2016, at 18:45, Andrew James notifications@github.com wrote:; > ; > @jturney https://github.com/jturney do you mean if you use OEprop from python side?; > ; > —; > You are receiving this because you were mentioned.; > Reply to this email directly, view it on GitHub https://github.com/psi4/psi4/pull/506#issuecomment-259559771, or mute the thread https://github.com/notifications/unsubscribe-auth/ABsBcdANRkkc09DCv2AR8vkQDiiFfWCmks5q8lsAgaJpZM4Krp5j.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/506#issuecomment-259561352
https://github.com/psi4/psi4/pull/506#issuecomment-259597050:1817,Modifiability,variab,variables,1817,"e really getting what you would expect should be listed as `psi4.get_variable(""EOM-CC ROOT {last_root} DIPOLE X"")`. In addition to that you can't get the ground state dipole components at all since they were overwritten in the psivars dict with subsequent calls to the `psi4.core.ccdensity->psi::ccdensity::dipole->OEprop` chain.; - see [psi::ccdensity::dipole](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/ccdensity/dipole.cc#L61) code and follow into [OEProp](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/libmints/oeprop.cc#L1184) to see what I mean if you didn't follow the explanation above. . I think this very confusing when you look at how the dipole components for different roots can be grabbed with `psi4.get_variable` in the [ci-property tests](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/libmints/oeprop.cc#L1184) for example. . I propose ( and volunteer to make) the following changes in order to implement the test here, and avoid confusion in the future:; - For the 0th root (only one for non EOM-CC calculations) ccdensity will behave as is. ; - For any root after that it will pass `EOM-CC ROOT {root #}` into `oe->set_title()` [here](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/ccdensity/dipole.cc#L107) so that the confusing behavior with the variables dict is no longer as strange. ; - To test the original modification that this PR introduced I will: ; 1. extend `tests/cc54` to return the wfn which should now have Da/Db set to the CCSD OPDM. Get the `CC DIPOLE/QUADRUPOLE` components from the first pass. Run OEProp again (python side) with the wfn holding the CCSD OPDM, and make sure it gives the same `DIPOLE/QUADRUPOLE` components. ; 2. extend `tests/cc49` to do the same thing as before but just to be sure that the ground-state density is the only one being put back in ref_wfn, and at the same time confirm that the other roots are not over-writing the `CC DIPOLE/QUADRUPOLE` entries in the variables dict anymore. . Objections?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/506#issuecomment-259597050
https://github.com/psi4/psi4/pull/506#issuecomment-259597050:1932,Modifiability,extend,extend,1932,"e really getting what you would expect should be listed as `psi4.get_variable(""EOM-CC ROOT {last_root} DIPOLE X"")`. In addition to that you can't get the ground state dipole components at all since they were overwritten in the psivars dict with subsequent calls to the `psi4.core.ccdensity->psi::ccdensity::dipole->OEprop` chain.; - see [psi::ccdensity::dipole](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/ccdensity/dipole.cc#L61) code and follow into [OEProp](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/libmints/oeprop.cc#L1184) to see what I mean if you didn't follow the explanation above. . I think this very confusing when you look at how the dipole components for different roots can be grabbed with `psi4.get_variable` in the [ci-property tests](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/libmints/oeprop.cc#L1184) for example. . I propose ( and volunteer to make) the following changes in order to implement the test here, and avoid confusion in the future:; - For the 0th root (only one for non EOM-CC calculations) ccdensity will behave as is. ; - For any root after that it will pass `EOM-CC ROOT {root #}` into `oe->set_title()` [here](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/ccdensity/dipole.cc#L107) so that the confusing behavior with the variables dict is no longer as strange. ; - To test the original modification that this PR introduced I will: ; 1. extend `tests/cc54` to return the wfn which should now have Da/Db set to the CCSD OPDM. Get the `CC DIPOLE/QUADRUPOLE` components from the first pass. Run OEProp again (python side) with the wfn holding the CCSD OPDM, and make sure it gives the same `DIPOLE/QUADRUPOLE` components. ; 2. extend `tests/cc49` to do the same thing as before but just to be sure that the ground-state density is the only one being put back in ref_wfn, and at the same time confirm that the other roots are not over-writing the `CC DIPOLE/QUADRUPOLE` entries in the variables dict anymore. . Objections?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/506#issuecomment-259597050
https://github.com/psi4/psi4/pull/506#issuecomment-259597050:2219,Modifiability,extend,extend,2219,"e really getting what you would expect should be listed as `psi4.get_variable(""EOM-CC ROOT {last_root} DIPOLE X"")`. In addition to that you can't get the ground state dipole components at all since they were overwritten in the psivars dict with subsequent calls to the `psi4.core.ccdensity->psi::ccdensity::dipole->OEprop` chain.; - see [psi::ccdensity::dipole](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/ccdensity/dipole.cc#L61) code and follow into [OEProp](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/libmints/oeprop.cc#L1184) to see what I mean if you didn't follow the explanation above. . I think this very confusing when you look at how the dipole components for different roots can be grabbed with `psi4.get_variable` in the [ci-property tests](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/libmints/oeprop.cc#L1184) for example. . I propose ( and volunteer to make) the following changes in order to implement the test here, and avoid confusion in the future:; - For the 0th root (only one for non EOM-CC calculations) ccdensity will behave as is. ; - For any root after that it will pass `EOM-CC ROOT {root #}` into `oe->set_title()` [here](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/ccdensity/dipole.cc#L107) so that the confusing behavior with the variables dict is no longer as strange. ; - To test the original modification that this PR introduced I will: ; 1. extend `tests/cc54` to return the wfn which should now have Da/Db set to the CCSD OPDM. Get the `CC DIPOLE/QUADRUPOLE` components from the first pass. Run OEProp again (python side) with the wfn holding the CCSD OPDM, and make sure it gives the same `DIPOLE/QUADRUPOLE` components. ; 2. extend `tests/cc49` to do the same thing as before but just to be sure that the ground-state density is the only one being put back in ref_wfn, and at the same time confirm that the other roots are not over-writing the `CC DIPOLE/QUADRUPOLE` entries in the variables dict anymore. . Objections?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/506#issuecomment-259597050
https://github.com/psi4/psi4/pull/506#issuecomment-259597050:2476,Modifiability,variab,variables,2476,"e really getting what you would expect should be listed as `psi4.get_variable(""EOM-CC ROOT {last_root} DIPOLE X"")`. In addition to that you can't get the ground state dipole components at all since they were overwritten in the psivars dict with subsequent calls to the `psi4.core.ccdensity->psi::ccdensity::dipole->OEprop` chain.; - see [psi::ccdensity::dipole](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/ccdensity/dipole.cc#L61) code and follow into [OEProp](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/libmints/oeprop.cc#L1184) to see what I mean if you didn't follow the explanation above. . I think this very confusing when you look at how the dipole components for different roots can be grabbed with `psi4.get_variable` in the [ci-property tests](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/libmints/oeprop.cc#L1184) for example. . I propose ( and volunteer to make) the following changes in order to implement the test here, and avoid confusion in the future:; - For the 0th root (only one for non EOM-CC calculations) ccdensity will behave as is. ; - For any root after that it will pass `EOM-CC ROOT {root #}` into `oe->set_title()` [here](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/ccdensity/dipole.cc#L107) so that the confusing behavior with the variables dict is no longer as strange. ; - To test the original modification that this PR introduced I will: ; 1. extend `tests/cc54` to return the wfn which should now have Da/Db set to the CCSD OPDM. Get the `CC DIPOLE/QUADRUPOLE` components from the first pass. Run OEProp again (python side) with the wfn holding the CCSD OPDM, and make sure it gives the same `DIPOLE/QUADRUPOLE` components. ; 2. extend `tests/cc49` to do the same thing as before but just to be sure that the ground-state density is the only one being put back in ref_wfn, and at the same time confirm that the other roots are not over-writing the `CC DIPOLE/QUADRUPOLE` entries in the variables dict anymore. . Objections?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/506#issuecomment-259597050
https://github.com/psi4/psi4/pull/506#issuecomment-259597050:1483,Safety,avoid,avoid,1483,"CC DIPOLE X"")` you are really getting what you would expect should be listed as `psi4.get_variable(""EOM-CC ROOT {last_root} DIPOLE X"")`. In addition to that you can't get the ground state dipole components at all since they were overwritten in the psivars dict with subsequent calls to the `psi4.core.ccdensity->psi::ccdensity::dipole->OEprop` chain.; - see [psi::ccdensity::dipole](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/ccdensity/dipole.cc#L61) code and follow into [OEProp](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/libmints/oeprop.cc#L1184) to see what I mean if you didn't follow the explanation above. . I think this very confusing when you look at how the dipole components for different roots can be grabbed with `psi4.get_variable` in the [ci-property tests](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/libmints/oeprop.cc#L1184) for example. . I propose ( and volunteer to make) the following changes in order to implement the test here, and avoid confusion in the future:; - For the 0th root (only one for non EOM-CC calculations) ccdensity will behave as is. ; - For any root after that it will pass `EOM-CC ROOT {root #}` into `oe->set_title()` [here](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/ccdensity/dipole.cc#L107) so that the confusing behavior with the variables dict is no longer as strange. ; - To test the original modification that this PR introduced I will: ; 1. extend `tests/cc54` to return the wfn which should now have Da/Db set to the CCSD OPDM. Get the `CC DIPOLE/QUADRUPOLE` components from the first pass. Run OEProp again (python side) with the wfn holding the CCSD OPDM, and make sure it gives the same `DIPOLE/QUADRUPOLE` components. ; 2. extend `tests/cc49` to do the same thing as before but just to be sure that the ground-state density is the only one being put back in ref_wfn, and at the same time confirm that the other roots are not over-writing the `CC DIPOLE/QUADRUPOLE` entries in the variables dict an",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/506#issuecomment-259597050
https://github.com/psi4/psi4/pull/506#issuecomment-259597050:19,Testability,test,test,19,"While setting up a test I have noticed a couple of things. ; - None of the `CCxx` tests are actually checking `DIPOLE [x|y|z]` against a reference value.; - When doing an EOM calculation `psi4.core.ccdensity` is (internally c++ side) calling `psi4::ccdensity::dipole()` once per state. Inside `psi4::ccdensity::dipole()` the OPDM is sent into OEProp with the title set to ""CC"". That means at the end of this calculation if you try to grab one of the dipole components via `psi4.get_variable(""CC DIPOLE X"")` you are really getting what you would expect should be listed as `psi4.get_variable(""EOM-CC ROOT {last_root} DIPOLE X"")`. In addition to that you can't get the ground state dipole components at all since they were overwritten in the psivars dict with subsequent calls to the `psi4.core.ccdensity->psi::ccdensity::dipole->OEprop` chain.; - see [psi::ccdensity::dipole](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/ccdensity/dipole.cc#L61) code and follow into [OEProp](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/libmints/oeprop.cc#L1184) to see what I mean if you didn't follow the explanation above. . I think this very confusing when you look at how the dipole components for different roots can be grabbed with `psi4.get_variable` in the [ci-property tests](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/libmints/oeprop.cc#L1184) for example. . I propose ( and volunteer to make) the following changes in order to implement the test here, and avoid confusion in the future:; - For the 0th root (only one for non EOM-CC calculations) ccdensity will behave as is. ; - For any root after that it will pass `EOM-CC ROOT {root #}` into `oe->set_title()` [here](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/ccdensity/dipole.cc#L107) so that the confusing behavior with the variables dict is no longer as strange. ; - To test the original modification that this PR introduced I will: ; 1. extend `tests/cc54` to return the wfn which should now have Da/Db set",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/506#issuecomment-259597050
https://github.com/psi4/psi4/pull/506#issuecomment-259597050:82,Testability,test,tests,82,"While setting up a test I have noticed a couple of things. ; - None of the `CCxx` tests are actually checking `DIPOLE [x|y|z]` against a reference value.; - When doing an EOM calculation `psi4.core.ccdensity` is (internally c++ side) calling `psi4::ccdensity::dipole()` once per state. Inside `psi4::ccdensity::dipole()` the OPDM is sent into OEProp with the title set to ""CC"". That means at the end of this calculation if you try to grab one of the dipole components via `psi4.get_variable(""CC DIPOLE X"")` you are really getting what you would expect should be listed as `psi4.get_variable(""EOM-CC ROOT {last_root} DIPOLE X"")`. In addition to that you can't get the ground state dipole components at all since they were overwritten in the psivars dict with subsequent calls to the `psi4.core.ccdensity->psi::ccdensity::dipole->OEprop` chain.; - see [psi::ccdensity::dipole](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/ccdensity/dipole.cc#L61) code and follow into [OEProp](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/libmints/oeprop.cc#L1184) to see what I mean if you didn't follow the explanation above. . I think this very confusing when you look at how the dipole components for different roots can be grabbed with `psi4.get_variable` in the [ci-property tests](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/libmints/oeprop.cc#L1184) for example. . I propose ( and volunteer to make) the following changes in order to implement the test here, and avoid confusion in the future:; - For the 0th root (only one for non EOM-CC calculations) ccdensity will behave as is. ; - For any root after that it will pass `EOM-CC ROOT {root #}` into `oe->set_title()` [here](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/ccdensity/dipole.cc#L107) so that the confusing behavior with the variables dict is no longer as strange. ; - To test the original modification that this PR introduced I will: ; 1. extend `tests/cc54` to return the wfn which should now have Da/Db set",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/506#issuecomment-259597050
https://github.com/psi4/psi4/pull/506#issuecomment-259597050:1282,Testability,test,tests,1282,"er state. Inside `psi4::ccdensity::dipole()` the OPDM is sent into OEProp with the title set to ""CC"". That means at the end of this calculation if you try to grab one of the dipole components via `psi4.get_variable(""CC DIPOLE X"")` you are really getting what you would expect should be listed as `psi4.get_variable(""EOM-CC ROOT {last_root} DIPOLE X"")`. In addition to that you can't get the ground state dipole components at all since they were overwritten in the psivars dict with subsequent calls to the `psi4.core.ccdensity->psi::ccdensity::dipole->OEprop` chain.; - see [psi::ccdensity::dipole](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/ccdensity/dipole.cc#L61) code and follow into [OEProp](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/libmints/oeprop.cc#L1184) to see what I mean if you didn't follow the explanation above. . I think this very confusing when you look at how the dipole components for different roots can be grabbed with `psi4.get_variable` in the [ci-property tests](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/libmints/oeprop.cc#L1184) for example. . I propose ( and volunteer to make) the following changes in order to implement the test here, and avoid confusion in the future:; - For the 0th root (only one for non EOM-CC calculations) ccdensity will behave as is. ; - For any root after that it will pass `EOM-CC ROOT {root #}` into `oe->set_title()` [here](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/ccdensity/dipole.cc#L107) so that the confusing behavior with the variables dict is no longer as strange. ; - To test the original modification that this PR introduced I will: ; 1. extend `tests/cc54` to return the wfn which should now have Da/Db set to the CCSD OPDM. Get the `CC DIPOLE/QUADRUPOLE` components from the first pass. Run OEProp again (python side) with the wfn holding the CCSD OPDM, and make sure it gives the same `DIPOLE/QUADRUPOLE` components. ; 2. extend `tests/cc49` to do the same thing as before but ju",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/506#issuecomment-259597050
https://github.com/psi4/psi4/pull/506#issuecomment-259597050:1468,Testability,test,test,1468,"CC DIPOLE X"")` you are really getting what you would expect should be listed as `psi4.get_variable(""EOM-CC ROOT {last_root} DIPOLE X"")`. In addition to that you can't get the ground state dipole components at all since they were overwritten in the psivars dict with subsequent calls to the `psi4.core.ccdensity->psi::ccdensity::dipole->OEprop` chain.; - see [psi::ccdensity::dipole](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/ccdensity/dipole.cc#L61) code and follow into [OEProp](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/libmints/oeprop.cc#L1184) to see what I mean if you didn't follow the explanation above. . I think this very confusing when you look at how the dipole components for different roots can be grabbed with `psi4.get_variable` in the [ci-property tests](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/libmints/oeprop.cc#L1184) for example. . I propose ( and volunteer to make) the following changes in order to implement the test here, and avoid confusion in the future:; - For the 0th root (only one for non EOM-CC calculations) ccdensity will behave as is. ; - For any root after that it will pass `EOM-CC ROOT {root #}` into `oe->set_title()` [here](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/ccdensity/dipole.cc#L107) so that the confusing behavior with the variables dict is no longer as strange. ; - To test the original modification that this PR introduced I will: ; 1. extend `tests/cc54` to return the wfn which should now have Da/Db set to the CCSD OPDM. Get the `CC DIPOLE/QUADRUPOLE` components from the first pass. Run OEProp again (python side) with the wfn holding the CCSD OPDM, and make sure it gives the same `DIPOLE/QUADRUPOLE` components. ; 2. extend `tests/cc49` to do the same thing as before but just to be sure that the ground-state density is the only one being put back in ref_wfn, and at the same time confirm that the other roots are not over-writing the `CC DIPOLE/QUADRUPOLE` entries in the variables dict an",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/506#issuecomment-259597050
https://github.com/psi4/psi4/pull/506#issuecomment-259597050:1864,Testability,test,test,1864,"e really getting what you would expect should be listed as `psi4.get_variable(""EOM-CC ROOT {last_root} DIPOLE X"")`. In addition to that you can't get the ground state dipole components at all since they were overwritten in the psivars dict with subsequent calls to the `psi4.core.ccdensity->psi::ccdensity::dipole->OEprop` chain.; - see [psi::ccdensity::dipole](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/ccdensity/dipole.cc#L61) code and follow into [OEProp](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/libmints/oeprop.cc#L1184) to see what I mean if you didn't follow the explanation above. . I think this very confusing when you look at how the dipole components for different roots can be grabbed with `psi4.get_variable` in the [ci-property tests](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/libmints/oeprop.cc#L1184) for example. . I propose ( and volunteer to make) the following changes in order to implement the test here, and avoid confusion in the future:; - For the 0th root (only one for non EOM-CC calculations) ccdensity will behave as is. ; - For any root after that it will pass `EOM-CC ROOT {root #}` into `oe->set_title()` [here](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/ccdensity/dipole.cc#L107) so that the confusing behavior with the variables dict is no longer as strange. ; - To test the original modification that this PR introduced I will: ; 1. extend `tests/cc54` to return the wfn which should now have Da/Db set to the CCSD OPDM. Get the `CC DIPOLE/QUADRUPOLE` components from the first pass. Run OEProp again (python side) with the wfn holding the CCSD OPDM, and make sure it gives the same `DIPOLE/QUADRUPOLE` components. ; 2. extend `tests/cc49` to do the same thing as before but just to be sure that the ground-state density is the only one being put back in ref_wfn, and at the same time confirm that the other roots are not over-writing the `CC DIPOLE/QUADRUPOLE` entries in the variables dict anymore. . Objections?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/506#issuecomment-259597050
https://github.com/psi4/psi4/pull/506#issuecomment-259597050:1940,Testability,test,tests,1940,"e really getting what you would expect should be listed as `psi4.get_variable(""EOM-CC ROOT {last_root} DIPOLE X"")`. In addition to that you can't get the ground state dipole components at all since they were overwritten in the psivars dict with subsequent calls to the `psi4.core.ccdensity->psi::ccdensity::dipole->OEprop` chain.; - see [psi::ccdensity::dipole](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/ccdensity/dipole.cc#L61) code and follow into [OEProp](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/libmints/oeprop.cc#L1184) to see what I mean if you didn't follow the explanation above. . I think this very confusing when you look at how the dipole components for different roots can be grabbed with `psi4.get_variable` in the [ci-property tests](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/libmints/oeprop.cc#L1184) for example. . I propose ( and volunteer to make) the following changes in order to implement the test here, and avoid confusion in the future:; - For the 0th root (only one for non EOM-CC calculations) ccdensity will behave as is. ; - For any root after that it will pass `EOM-CC ROOT {root #}` into `oe->set_title()` [here](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/ccdensity/dipole.cc#L107) so that the confusing behavior with the variables dict is no longer as strange. ; - To test the original modification that this PR introduced I will: ; 1. extend `tests/cc54` to return the wfn which should now have Da/Db set to the CCSD OPDM. Get the `CC DIPOLE/QUADRUPOLE` components from the first pass. Run OEProp again (python side) with the wfn holding the CCSD OPDM, and make sure it gives the same `DIPOLE/QUADRUPOLE` components. ; 2. extend `tests/cc49` to do the same thing as before but just to be sure that the ground-state density is the only one being put back in ref_wfn, and at the same time confirm that the other roots are not over-writing the `CC DIPOLE/QUADRUPOLE` entries in the variables dict anymore. . Objections?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/506#issuecomment-259597050
https://github.com/psi4/psi4/pull/506#issuecomment-259597050:2227,Testability,test,tests,2227,"e really getting what you would expect should be listed as `psi4.get_variable(""EOM-CC ROOT {last_root} DIPOLE X"")`. In addition to that you can't get the ground state dipole components at all since they were overwritten in the psivars dict with subsequent calls to the `psi4.core.ccdensity->psi::ccdensity::dipole->OEprop` chain.; - see [psi::ccdensity::dipole](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/ccdensity/dipole.cc#L61) code and follow into [OEProp](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/libmints/oeprop.cc#L1184) to see what I mean if you didn't follow the explanation above. . I think this very confusing when you look at how the dipole components for different roots can be grabbed with `psi4.get_variable` in the [ci-property tests](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/libmints/oeprop.cc#L1184) for example. . I propose ( and volunteer to make) the following changes in order to implement the test here, and avoid confusion in the future:; - For the 0th root (only one for non EOM-CC calculations) ccdensity will behave as is. ; - For any root after that it will pass `EOM-CC ROOT {root #}` into `oe->set_title()` [here](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/ccdensity/dipole.cc#L107) so that the confusing behavior with the variables dict is no longer as strange. ; - To test the original modification that this PR introduced I will: ; 1. extend `tests/cc54` to return the wfn which should now have Da/Db set to the CCSD OPDM. Get the `CC DIPOLE/QUADRUPOLE` components from the first pass. Run OEProp again (python side) with the wfn holding the CCSD OPDM, and make sure it gives the same `DIPOLE/QUADRUPOLE` components. ; 2. extend `tests/cc49` to do the same thing as before but just to be sure that the ground-state density is the only one being put back in ref_wfn, and at the same time confirm that the other roots are not over-writing the `CC DIPOLE/QUADRUPOLE` entries in the variables dict anymore. . Objections?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/506#issuecomment-259597050
https://github.com/psi4/psi4/pull/506#issuecomment-259603617:240,Testability,test,testing,240,"If you're willing to take on properly assigning root psivars in cc*, that'd be splendid, @amjames. It's very true that CC psivars are pretty much ground state only and that not much has been done in the way of CC property psivars since the testing has been through `output.ref` comparison rather than `compare_values()`. One thing that will have to be resolved is indexing, as CI starts from 1. I can't even remember what position I took at the Last Great Debate on this, but I think I favor 0-indexed now, as it make the GS distinctive from ESs. Will query detci ppl tomorrow. But, yes, if you see your way clear toward fixing this up, go for it.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/506#issuecomment-259603617
https://github.com/psi4/psi4/pull/506#issuecomment-259603617:608,Usability,clear,clear,608,"If you're willing to take on properly assigning root psivars in cc*, that'd be splendid, @amjames. It's very true that CC psivars are pretty much ground state only and that not much has been done in the way of CC property psivars since the testing has been through `output.ref` comparison rather than `compare_values()`. One thing that will have to be resolved is indexing, as CI starts from 1. I can't even remember what position I took at the Last Great Debate on this, but I think I favor 0-indexed now, as it make the GS distinctive from ESs. Will query detci ppl tomorrow. But, yes, if you see your way clear toward fixing this up, go for it.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/506#issuecomment-259603617
https://github.com/psi4/psi4/pull/506#issuecomment-259607756:204,Testability,test,tests,204,@loriab that is the only part Im not sure on. Feedback on indexing would be appreciated. I will open an issue for the lack of proper `compare_values` checking in the cc property codes. We also don't have tests for UHF properties I can ask @lothian about references and reference values.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/506#issuecomment-259607756
https://github.com/psi4/psi4/pull/506#issuecomment-259607756:46,Usability,Feedback,Feedback,46,@loriab that is the only part Im not sure on. Feedback on indexing would be appreciated. I will open an issue for the lack of proper `compare_values` checking in the cc property codes. We also don't have tests for UHF properties I can ask @lothian about references and reference values.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/506#issuecomment-259607756
https://github.com/psi4/psi4/pull/506#issuecomment-260009547:15,Modifiability,extend,extended,15,"Alright I have extended two tests none of the quicktests run through ccdensity but I ran both of these and the passed. The changes don't seem to mess up comparison to output.ref so I didn't change them. . Pending feedback about how to index the roots I have followed what is in place for eom-cc ES energies. . `CC DIPOLE X` is the ground state. `CC ROOT 1 DIPOLE X` is first ES, and so on.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/506#issuecomment-260009547
https://github.com/psi4/psi4/pull/506#issuecomment-260009547:28,Testability,test,tests,28,"Alright I have extended two tests none of the quicktests run through ccdensity but I ran both of these and the passed. The changes don't seem to mess up comparison to output.ref so I didn't change them. . Pending feedback about how to index the roots I have followed what is in place for eom-cc ES energies. . `CC DIPOLE X` is the ground state. `CC ROOT 1 DIPOLE X` is first ES, and so on.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/506#issuecomment-260009547
https://github.com/psi4/psi4/pull/506#issuecomment-260009547:213,Usability,feedback,feedback,213,"Alright I have extended two tests none of the quicktests run through ccdensity but I ran both of these and the passed. The changes don't seem to mess up comparison to output.ref so I didn't change them. . Pending feedback about how to index the roots I have followed what is in place for eom-cc ES energies. . `CC DIPOLE X` is the ground state. `CC ROOT 1 DIPOLE X` is first ES, and so on.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/506#issuecomment-260009547
https://github.com/psi4/psi4/pull/506#issuecomment-260098726:349,Availability,error,error,349,"This is great; I really like that you've addressed the inconsistency between CI and CC, which I didn't notice before. The scheme in your last message looks good to me. I think that numbering the first excited state `1`, and the second `2`, _etc._ makes the most sense, for obvious reasons. Zero basing the excited states would lead to an off-by-one error in the cardinal and ordinal notation. LGTM.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/506#issuecomment-260098726
https://github.com/psi4/psi4/pull/506#issuecomment-260098726:142,Integrability,message,message,142,"This is great; I really like that you've addressed the inconsistency between CI and CC, which I didn't notice before. The scheme in your last message looks good to me. I think that numbering the first excited state `1`, and the second `2`, _etc._ makes the most sense, for obvious reasons. Zero basing the excited states would lead to an off-by-one error in the cardinal and ordinal notation. LGTM.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/506#issuecomment-260098726
https://github.com/psi4/psi4/pull/506#issuecomment-260126337:2791,Availability,error,error,2791,"n easily loop over things, I favor any lists of energies or; dipoles as also including the ground state (state 0). So, we can have. CI/CC ROOT 0 ENERGY [or whatever it's called, I forget]; CI/CC ROOT 1 ENERGY; etc. as well as. CI/CC ROOT 0 DIPOLE x; CI/CC ROOT 1 DIPOLE x. Including ROOT 0 in the lists above will remove unnecessary annoying logic; when looping over roots for processing/printing output. For CI use cases,; we will always want to loop over all roots including ROOT 0. For the ground state only, we can also duplicate the ROOT 0 information; into variable names without the ""ROOT n"" designation, which is what people; will want to grab if they just want g.s. info. CI/CC DIPOLE x. (Actually, strictly speaking, the root number that should go here should; probably be FOLLOW_ROOT, which defaults to ROOT1 (now should be ->; ROOT0)... FOLLOW_ROOT is supposed to allow you to optimize an excited state; instead of the ground state in an MCSCF or geometry opt). The CI code has always assumed numbering starts with 1 in the user; interface, so any input options regarding roots will need to have -1 added; (except the total number of roots, obviously). Best,; David. On Fri, Nov 11, 2016 at 10:27 PM, Andy Simmonett notifications@github.com; wrote:. > This is great; I really like that you've addressed the inconsistency; > between CI and CC, which I didn't notice before. The scheme in your last; > message looks good to me. I think that numbering the first excited state 1,; > and the second 2, _etc._ makes the most sense, for obvious reasons. Zero; > basing the excited states would lead to an off-by-one error in the cardinal; > and ordinal notation. LGTM.; > ; > —; > You are receiving this because you are subscribed to this thread.; > Reply to this email directly, view it on GitHub; > https://github.com/psi4/psi4/pull/506#issuecomment-260098726, or mute; > the thread; > https://github.com/notifications/unsubscribe-auth/AC9QdlnHpEnsW3uYECUYCgCd3NnmYLimks5q9TIfgaJpZM4Krp5j; > .",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/506#issuecomment-260126337
https://github.com/psi4/psi4/pull/506#issuecomment-260126337:1315,Energy Efficiency,ENERGY,ENERGY,1315,"mmetry. Do I understand; correctly that OPDMs are stored all the way back in the AO (not SO) basis?; 2. I looked through the CI and CC output with Lori yesterday. Both outputs; are totally logical for what they are doing, yet they are inconsistent with; each other in terms of numbering roots. For the case of CCEOM, because; excited states are all treated together, it is very logical to number the; EOM states 1, 2, 3, etc. That then means the ground state, if it is in; this same numbering scheme, has to be labeled root 0. For the CI outputs,; everything is lumped together, so it is logical to number the ground state; as 1. If we make things consistent, it is easier to change the CI; numbering to match the CC numbering. This also has the advantage that the; CC numbering will work well for CIS, TDDFT, etc. So that we can easily loop over things, I favor any lists of energies or; dipoles as also including the ground state (state 0). So, we can have. CI/CC ROOT 0 ENERGY [or whatever it's called, I forget]; CI/CC ROOT 1 ENERGY; etc. as well as. CI/CC ROOT 0 DIPOLE x; CI/CC ROOT 1 DIPOLE x. Including ROOT 0 in the lists above will remove unnecessary annoying logic; when looping over roots for processing/printing output. For CI use cases,; we will always want to loop over all roots including ROOT 0. For the ground state only, we can also duplicate the ROOT 0 information; into variable names without the ""ROOT n"" designation, which is what people; will want to grab if they just want g.s. info. CI/CC DIPOLE x. (Actually, strictly speaking, the root number that should go here should; probably be FOLLOW_ROOT, which defaults to ROOT1 (now should be ->; ROOT0)... FOLLOW_ROOT is supposed to allow you to optimize an excited state; instead of the ground state in an MCSCF or geometry opt). The CI code has always assumed numbering starts with 1 in the user; interface, so any input options regarding roots will need to have -1 added; (except the total number of roots, obviously). Best,; D",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/506#issuecomment-260126337
https://github.com/psi4/psi4/pull/506#issuecomment-260126337:1372,Energy Efficiency,ENERGY,ENERGY,1372,"mmetry. Do I understand; correctly that OPDMs are stored all the way back in the AO (not SO) basis?; 2. I looked through the CI and CC output with Lori yesterday. Both outputs; are totally logical for what they are doing, yet they are inconsistent with; each other in terms of numbering roots. For the case of CCEOM, because; excited states are all treated together, it is very logical to number the; EOM states 1, 2, 3, etc. That then means the ground state, if it is in; this same numbering scheme, has to be labeled root 0. For the CI outputs,; everything is lumped together, so it is logical to number the ground state; as 1. If we make things consistent, it is easier to change the CI; numbering to match the CC numbering. This also has the advantage that the; CC numbering will work well for CIS, TDDFT, etc. So that we can easily loop over things, I favor any lists of energies or; dipoles as also including the ground state (state 0). So, we can have. CI/CC ROOT 0 ENERGY [or whatever it's called, I forget]; CI/CC ROOT 1 ENERGY; etc. as well as. CI/CC ROOT 0 DIPOLE x; CI/CC ROOT 1 DIPOLE x. Including ROOT 0 in the lists above will remove unnecessary annoying logic; when looping over roots for processing/printing output. For CI use cases,; we will always want to loop over all roots including ROOT 0. For the ground state only, we can also duplicate the ROOT 0 information; into variable names without the ""ROOT n"" designation, which is what people; will want to grab if they just want g.s. info. CI/CC DIPOLE x. (Actually, strictly speaking, the root number that should go here should; probably be FOLLOW_ROOT, which defaults to ROOT1 (now should be ->; ROOT0)... FOLLOW_ROOT is supposed to allow you to optimize an excited state; instead of the ground state in an MCSCF or geometry opt). The CI code has always assumed numbering starts with 1 in the user; interface, so any input options regarding roots will need to have -1 added; (except the total number of roots, obviously). Best,; D",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/506#issuecomment-260126337
https://github.com/psi4/psi4/pull/506#issuecomment-260126337:2212,Integrability,interface,interface,2212,"n easily loop over things, I favor any lists of energies or; dipoles as also including the ground state (state 0). So, we can have. CI/CC ROOT 0 ENERGY [or whatever it's called, I forget]; CI/CC ROOT 1 ENERGY; etc. as well as. CI/CC ROOT 0 DIPOLE x; CI/CC ROOT 1 DIPOLE x. Including ROOT 0 in the lists above will remove unnecessary annoying logic; when looping over roots for processing/printing output. For CI use cases,; we will always want to loop over all roots including ROOT 0. For the ground state only, we can also duplicate the ROOT 0 information; into variable names without the ""ROOT n"" designation, which is what people; will want to grab if they just want g.s. info. CI/CC DIPOLE x. (Actually, strictly speaking, the root number that should go here should; probably be FOLLOW_ROOT, which defaults to ROOT1 (now should be ->; ROOT0)... FOLLOW_ROOT is supposed to allow you to optimize an excited state; instead of the ground state in an MCSCF or geometry opt). The CI code has always assumed numbering starts with 1 in the user; interface, so any input options regarding roots will need to have -1 added; (except the total number of roots, obviously). Best,; David. On Fri, Nov 11, 2016 at 10:27 PM, Andy Simmonett notifications@github.com; wrote:. > This is great; I really like that you've addressed the inconsistency; > between CI and CC, which I didn't notice before. The scheme in your last; > message looks good to me. I think that numbering the first excited state 1,; > and the second 2, _etc._ makes the most sense, for obvious reasons. Zero; > basing the excited states would lead to an off-by-one error in the cardinal; > and ordinal notation. LGTM.; > ; > —; > You are receiving this because you are subscribed to this thread.; > Reply to this email directly, view it on GitHub; > https://github.com/psi4/psi4/pull/506#issuecomment-260098726, or mute; > the thread; > https://github.com/notifications/unsubscribe-auth/AC9QdlnHpEnsW3uYECUYCgCd3NnmYLimks5q9TIfgaJpZM4Krp5j; > .",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/506#issuecomment-260126337
https://github.com/psi4/psi4/pull/506#issuecomment-260126337:2582,Integrability,message,message,2582,"n easily loop over things, I favor any lists of energies or; dipoles as also including the ground state (state 0). So, we can have. CI/CC ROOT 0 ENERGY [or whatever it's called, I forget]; CI/CC ROOT 1 ENERGY; etc. as well as. CI/CC ROOT 0 DIPOLE x; CI/CC ROOT 1 DIPOLE x. Including ROOT 0 in the lists above will remove unnecessary annoying logic; when looping over roots for processing/printing output. For CI use cases,; we will always want to loop over all roots including ROOT 0. For the ground state only, we can also duplicate the ROOT 0 information; into variable names without the ""ROOT n"" designation, which is what people; will want to grab if they just want g.s. info. CI/CC DIPOLE x. (Actually, strictly speaking, the root number that should go here should; probably be FOLLOW_ROOT, which defaults to ROOT1 (now should be ->; ROOT0)... FOLLOW_ROOT is supposed to allow you to optimize an excited state; instead of the ground state in an MCSCF or geometry opt). The CI code has always assumed numbering starts with 1 in the user; interface, so any input options regarding roots will need to have -1 added; (except the total number of roots, obviously). Best,; David. On Fri, Nov 11, 2016 at 10:27 PM, Andy Simmonett notifications@github.com; wrote:. > This is great; I really like that you've addressed the inconsistency; > between CI and CC, which I didn't notice before. The scheme in your last; > message looks good to me. I think that numbering the first excited state 1,; > and the second 2, _etc._ makes the most sense, for obvious reasons. Zero; > basing the excited states would lead to an off-by-one error in the cardinal; > and ordinal notation. LGTM.; > ; > —; > You are receiving this because you are subscribed to this thread.; > Reply to this email directly, view it on GitHub; > https://github.com/psi4/psi4/pull/506#issuecomment-260098726, or mute; > the thread; > https://github.com/notifications/unsubscribe-auth/AC9QdlnHpEnsW3uYECUYCgCd3NnmYLimks5q9TIfgaJpZM4Krp5j; > .",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/506#issuecomment-260126337
https://github.com/psi4/psi4/pull/506#issuecomment-260126337:1733,Modifiability,variab,variable,1733,"tates 1, 2, 3, etc. That then means the ground state, if it is in; this same numbering scheme, has to be labeled root 0. For the CI outputs,; everything is lumped together, so it is logical to number the ground state; as 1. If we make things consistent, it is easier to change the CI; numbering to match the CC numbering. This also has the advantage that the; CC numbering will work well for CIS, TDDFT, etc. So that we can easily loop over things, I favor any lists of energies or; dipoles as also including the ground state (state 0). So, we can have. CI/CC ROOT 0 ENERGY [or whatever it's called, I forget]; CI/CC ROOT 1 ENERGY; etc. as well as. CI/CC ROOT 0 DIPOLE x; CI/CC ROOT 1 DIPOLE x. Including ROOT 0 in the lists above will remove unnecessary annoying logic; when looping over roots for processing/printing output. For CI use cases,; we will always want to loop over all roots including ROOT 0. For the ground state only, we can also duplicate the ROOT 0 information; into variable names without the ""ROOT n"" designation, which is what people; will want to grab if they just want g.s. info. CI/CC DIPOLE x. (Actually, strictly speaking, the root number that should go here should; probably be FOLLOW_ROOT, which defaults to ROOT1 (now should be ->; ROOT0)... FOLLOW_ROOT is supposed to allow you to optimize an excited state; instead of the ground state in an MCSCF or geometry opt). The CI code has always assumed numbering starts with 1 in the user; interface, so any input options regarding roots will need to have -1 added; (except the total number of roots, obviously). Best,; David. On Fri, Nov 11, 2016 at 10:27 PM, Andy Simmonett notifications@github.com; wrote:. > This is great; I really like that you've addressed the inconsistency; > between CI and CC, which I didn't notice before. The scheme in your last; > message looks good to me. I think that numbering the first excited state 1,; > and the second 2, _etc._ makes the most sense, for obvious reasons. Zero; > basing the ",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/506#issuecomment-260126337
https://github.com/psi4/psi4/pull/506#issuecomment-260126337:2059,Performance,optimiz,optimize,2059,"has the advantage that the; CC numbering will work well for CIS, TDDFT, etc. So that we can easily loop over things, I favor any lists of energies or; dipoles as also including the ground state (state 0). So, we can have. CI/CC ROOT 0 ENERGY [or whatever it's called, I forget]; CI/CC ROOT 1 ENERGY; etc. as well as. CI/CC ROOT 0 DIPOLE x; CI/CC ROOT 1 DIPOLE x. Including ROOT 0 in the lists above will remove unnecessary annoying logic; when looping over roots for processing/printing output. For CI use cases,; we will always want to loop over all roots including ROOT 0. For the ground state only, we can also duplicate the ROOT 0 information; into variable names without the ""ROOT n"" designation, which is what people; will want to grab if they just want g.s. info. CI/CC DIPOLE x. (Actually, strictly speaking, the root number that should go here should; probably be FOLLOW_ROOT, which defaults to ROOT1 (now should be ->; ROOT0)... FOLLOW_ROOT is supposed to allow you to optimize an excited state; instead of the ground state in an MCSCF or geometry opt). The CI code has always assumed numbering starts with 1 in the user; interface, so any input options regarding roots will need to have -1 added; (except the total number of roots, obviously). Best,; David. On Fri, Nov 11, 2016 at 10:27 PM, Andy Simmonett notifications@github.com; wrote:. > This is great; I really like that you've addressed the inconsistency; > between CI and CC, which I didn't notice before. The scheme in your last; > message looks good to me. I think that numbering the first excited state 1,; > and the second 2, _etc._ makes the most sense, for obvious reasons. Zero; > basing the excited states would lead to an off-by-one error in the cardinal; > and ordinal notation. LGTM.; > ; > —; > You are receiving this because you are subscribed to this thread.; > Reply to this email directly, view it on GitHub; > https://github.com/psi4/psi4/pull/506#issuecomment-260098726, or mute; > the thread; > https://github.com",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/506#issuecomment-260126337
https://github.com/psi4/psi4/pull/506#issuecomment-260126337:531,Testability,log,logical,531,"I have not followed this thread closely, but I have a couple of comments.; 1. Someone mentioned that the OPDM is supposed to be stored in wfn in the; AO basis. AJ then asked if this meant he should backtransform it to the SO; basis. I'm not sure that question got answered....and AO and SO are not; equivalent in molecules with point group symmetry. Do I understand; correctly that OPDMs are stored all the way back in the AO (not SO) basis?; 2. I looked through the CI and CC output with Lori yesterday. Both outputs; are totally logical for what they are doing, yet they are inconsistent with; each other in terms of numbering roots. For the case of CCEOM, because; excited states are all treated together, it is very logical to number the; EOM states 1, 2, 3, etc. That then means the ground state, if it is in; this same numbering scheme, has to be labeled root 0. For the CI outputs,; everything is lumped together, so it is logical to number the ground state; as 1. If we make things consistent, it is easier to change the CI; numbering to match the CC numbering. This also has the advantage that the; CC numbering will work well for CIS, TDDFT, etc. So that we can easily loop over things, I favor any lists of energies or; dipoles as also including the ground state (state 0). So, we can have. CI/CC ROOT 0 ENERGY [or whatever it's called, I forget]; CI/CC ROOT 1 ENERGY; etc. as well as. CI/CC ROOT 0 DIPOLE x; CI/CC ROOT 1 DIPOLE x. Including ROOT 0 in the lists above will remove unnecessary annoying logic; when looping over roots for processing/printing output. For CI use cases,; we will always want to loop over all roots including ROOT 0. For the ground state only, we can also duplicate the ROOT 0 information; into variable names without the ""ROOT n"" designation, which is what people; will want to grab if they just want g.s. info. CI/CC DIPOLE x. (Actually, strictly speaking, the root number that should go here should; probably be FOLLOW_ROOT, which defaults to ROOT1 (now should",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/506#issuecomment-260126337
https://github.com/psi4/psi4/pull/506#issuecomment-260126337:720,Testability,log,logical,720,"I have not followed this thread closely, but I have a couple of comments.; 1. Someone mentioned that the OPDM is supposed to be stored in wfn in the; AO basis. AJ then asked if this meant he should backtransform it to the SO; basis. I'm not sure that question got answered....and AO and SO are not; equivalent in molecules with point group symmetry. Do I understand; correctly that OPDMs are stored all the way back in the AO (not SO) basis?; 2. I looked through the CI and CC output with Lori yesterday. Both outputs; are totally logical for what they are doing, yet they are inconsistent with; each other in terms of numbering roots. For the case of CCEOM, because; excited states are all treated together, it is very logical to number the; EOM states 1, 2, 3, etc. That then means the ground state, if it is in; this same numbering scheme, has to be labeled root 0. For the CI outputs,; everything is lumped together, so it is logical to number the ground state; as 1. If we make things consistent, it is easier to change the CI; numbering to match the CC numbering. This also has the advantage that the; CC numbering will work well for CIS, TDDFT, etc. So that we can easily loop over things, I favor any lists of energies or; dipoles as also including the ground state (state 0). So, we can have. CI/CC ROOT 0 ENERGY [or whatever it's called, I forget]; CI/CC ROOT 1 ENERGY; etc. as well as. CI/CC ROOT 0 DIPOLE x; CI/CC ROOT 1 DIPOLE x. Including ROOT 0 in the lists above will remove unnecessary annoying logic; when looping over roots for processing/printing output. For CI use cases,; we will always want to loop over all roots including ROOT 0. For the ground state only, we can also duplicate the ROOT 0 information; into variable names without the ""ROOT n"" designation, which is what people; will want to grab if they just want g.s. info. CI/CC DIPOLE x. (Actually, strictly speaking, the root number that should go here should; probably be FOLLOW_ROOT, which defaults to ROOT1 (now should",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/506#issuecomment-260126337
https://github.com/psi4/psi4/pull/506#issuecomment-260126337:930,Testability,log,logical,930,"I have not followed this thread closely, but I have a couple of comments.; 1. Someone mentioned that the OPDM is supposed to be stored in wfn in the; AO basis. AJ then asked if this meant he should backtransform it to the SO; basis. I'm not sure that question got answered....and AO and SO are not; equivalent in molecules with point group symmetry. Do I understand; correctly that OPDMs are stored all the way back in the AO (not SO) basis?; 2. I looked through the CI and CC output with Lori yesterday. Both outputs; are totally logical for what they are doing, yet they are inconsistent with; each other in terms of numbering roots. For the case of CCEOM, because; excited states are all treated together, it is very logical to number the; EOM states 1, 2, 3, etc. That then means the ground state, if it is in; this same numbering scheme, has to be labeled root 0. For the CI outputs,; everything is lumped together, so it is logical to number the ground state; as 1. If we make things consistent, it is easier to change the CI; numbering to match the CC numbering. This also has the advantage that the; CC numbering will work well for CIS, TDDFT, etc. So that we can easily loop over things, I favor any lists of energies or; dipoles as also including the ground state (state 0). So, we can have. CI/CC ROOT 0 ENERGY [or whatever it's called, I forget]; CI/CC ROOT 1 ENERGY; etc. as well as. CI/CC ROOT 0 DIPOLE x; CI/CC ROOT 1 DIPOLE x. Including ROOT 0 in the lists above will remove unnecessary annoying logic; when looping over roots for processing/printing output. For CI use cases,; we will always want to loop over all roots including ROOT 0. For the ground state only, we can also duplicate the ROOT 0 information; into variable names without the ""ROOT n"" designation, which is what people; will want to grab if they just want g.s. info. CI/CC DIPOLE x. (Actually, strictly speaking, the root number that should go here should; probably be FOLLOW_ROOT, which defaults to ROOT1 (now should",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/506#issuecomment-260126337
https://github.com/psi4/psi4/pull/506#issuecomment-260126337:1512,Testability,log,logic,1512,"h outputs; are totally logical for what they are doing, yet they are inconsistent with; each other in terms of numbering roots. For the case of CCEOM, because; excited states are all treated together, it is very logical to number the; EOM states 1, 2, 3, etc. That then means the ground state, if it is in; this same numbering scheme, has to be labeled root 0. For the CI outputs,; everything is lumped together, so it is logical to number the ground state; as 1. If we make things consistent, it is easier to change the CI; numbering to match the CC numbering. This also has the advantage that the; CC numbering will work well for CIS, TDDFT, etc. So that we can easily loop over things, I favor any lists of energies or; dipoles as also including the ground state (state 0). So, we can have. CI/CC ROOT 0 ENERGY [or whatever it's called, I forget]; CI/CC ROOT 1 ENERGY; etc. as well as. CI/CC ROOT 0 DIPOLE x; CI/CC ROOT 1 DIPOLE x. Including ROOT 0 in the lists above will remove unnecessary annoying logic; when looping over roots for processing/printing output. For CI use cases,; we will always want to loop over all roots including ROOT 0. For the ground state only, we can also duplicate the ROOT 0 information; into variable names without the ""ROOT n"" designation, which is what people; will want to grab if they just want g.s. info. CI/CC DIPOLE x. (Actually, strictly speaking, the root number that should go here should; probably be FOLLOW_ROOT, which defaults to ROOT1 (now should be ->; ROOT0)... FOLLOW_ROOT is supposed to allow you to optimize an excited state; instead of the ground state in an MCSCF or geometry opt). The CI code has always assumed numbering starts with 1 in the user; interface, so any input options regarding roots will need to have -1 added; (except the total number of roots, obviously). Best,; David. On Fri, Nov 11, 2016 at 10:27 PM, Andy Simmonett notifications@github.com; wrote:. > This is great; I really like that you've addressed the inconsistency; > be",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/506#issuecomment-260126337
https://github.com/psi4/psi4/pull/506#issuecomment-260128691:127,Deployability,patch,patch,127,"@CDSherrill ; 1) It should always be in the SO basis. Apologies this was answered elsewhere. 2) If we are set on this on I can patch up the CI code and add patch notes. The ""CI DIPOLE X"" is the followed root or the dipole from the state averaged density depending on user specifications. We also need to think about the `psi4/driver/driver.py:molden` function and #504. `properties` is now guaranteed to return an updated SO basis density; however, the current molden function requires a MO density. We could have a simple switch on that function that indices if the incoming density is in the AO or MO basis and transform accordingly.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/506#issuecomment-260128691
https://github.com/psi4/psi4/pull/506#issuecomment-260128691:156,Deployability,patch,patch,156,"@CDSherrill ; 1) It should always be in the SO basis. Apologies this was answered elsewhere. 2) If we are set on this on I can patch up the CI code and add patch notes. The ""CI DIPOLE X"" is the followed root or the dipole from the state averaged density depending on user specifications. We also need to think about the `psi4/driver/driver.py:molden` function and #504. `properties` is now guaranteed to return an updated SO basis density; however, the current molden function requires a MO density. We could have a simple switch on that function that indices if the incoming density is in the AO or MO basis and transform accordingly.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/506#issuecomment-260128691
https://github.com/psi4/psi4/pull/506#issuecomment-260128691:414,Deployability,update,updated,414,"@CDSherrill ; 1) It should always be in the SO basis. Apologies this was answered elsewhere. 2) If we are set on this on I can patch up the CI code and add patch notes. The ""CI DIPOLE X"" is the followed root or the dipole from the state averaged density depending on user specifications. We also need to think about the `psi4/driver/driver.py:molden` function and #504. `properties` is now guaranteed to return an updated SO basis density; however, the current molden function requires a MO density. We could have a simple switch on that function that indices if the incoming density is in the AO or MO basis and transform accordingly.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/506#issuecomment-260128691
https://github.com/psi4/psi4/pull/506#issuecomment-260128691:254,Integrability,depend,depending,254,"@CDSherrill ; 1) It should always be in the SO basis. Apologies this was answered elsewhere. 2) If we are set on this on I can patch up the CI code and add patch notes. The ""CI DIPOLE X"" is the followed root or the dipole from the state averaged density depending on user specifications. We also need to think about the `psi4/driver/driver.py:molden` function and #504. `properties` is now guaranteed to return an updated SO basis density; however, the current molden function requires a MO density. We could have a simple switch on that function that indices if the incoming density is in the AO or MO basis and transform accordingly.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/506#issuecomment-260128691
https://github.com/psi4/psi4/pull/506#issuecomment-260128691:516,Usability,simpl,simple,516,"@CDSherrill ; 1) It should always be in the SO basis. Apologies this was answered elsewhere. 2) If we are set on this on I can patch up the CI code and add patch notes. The ""CI DIPOLE X"" is the followed root or the dipole from the state averaged density depending on user specifications. We also need to think about the `psi4/driver/driver.py:molden` function and #504. `properties` is now guaranteed to return an updated SO basis density; however, the current molden function requires a MO density. We could have a simple switch on that function that indices if the incoming density is in the AO or MO basis and transform accordingly.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/506#issuecomment-260128691
https://github.com/psi4/psi4/pull/506#issuecomment-260131914:675,Deployability,patch,patch,675,"1) Cool. 2) I discussed this with @lothian, who seemed fine with it (it involves no; changes to his code :) So, I think we're settled unless anyone else has; objections. I agree there needs to be some thought about returning SO vs MO densities; --- different quantities will be needed in different circumstances. Your; proposed solution seems reasonable. Probably we should review all the; cases where densities are wanted. On Sat, Nov 12, 2016 at 10:34 AM, Daniel Smith notifications@github.com; wrote:. > @CDSherrill https://github.com/CDSherrill; > 1) It should always be in the SO basis. Apologies this was answered; > elsewhere.; > ; > 2) If we are set on this on I can patch up the CI code and add patch; > notes. The ""CI DIPOLE X"" is the followed root or the dipole from the state; > averaged density depending on user specifications.; > ; > We also need to think about the psi4/driver/driver.py:molden function and; > #504 https://github.com/psi4/psi4/issues/504. properties is now; > guaranteed to return an updated SO basis density; however, the current; > molden function requires a MO density. We could have a simple switch on; > that function that indices if the incoming density is in the AO or MO basis; > and transform accordingly.; > ; > —; > You are receiving this because you were mentioned.; > Reply to this email directly, view it on GitHub; > https://github.com/psi4/psi4/pull/506#issuecomment-260128691, or mute; > the thread; > https://github.com/notifications/unsubscribe-auth/AC9QdnGO262FwLyE6w4D5rdgQvLpsDC3ks5q9dxpgaJpZM4Krp5j; > .",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/506#issuecomment-260131914
https://github.com/psi4/psi4/pull/506#issuecomment-260131914:704,Deployability,patch,patch,704,"1) Cool. 2) I discussed this with @lothian, who seemed fine with it (it involves no; changes to his code :) So, I think we're settled unless anyone else has; objections. I agree there needs to be some thought about returning SO vs MO densities; --- different quantities will be needed in different circumstances. Your; proposed solution seems reasonable. Probably we should review all the; cases where densities are wanted. On Sat, Nov 12, 2016 at 10:34 AM, Daniel Smith notifications@github.com; wrote:. > @CDSherrill https://github.com/CDSherrill; > 1) It should always be in the SO basis. Apologies this was answered; > elsewhere.; > ; > 2) If we are set on this on I can patch up the CI code and add patch; > notes. The ""CI DIPOLE X"" is the followed root or the dipole from the state; > averaged density depending on user specifications.; > ; > We also need to think about the psi4/driver/driver.py:molden function and; > #504 https://github.com/psi4/psi4/issues/504. properties is now; > guaranteed to return an updated SO basis density; however, the current; > molden function requires a MO density. We could have a simple switch on; > that function that indices if the incoming density is in the AO or MO basis; > and transform accordingly.; > ; > —; > You are receiving this because you were mentioned.; > Reply to this email directly, view it on GitHub; > https://github.com/psi4/psi4/pull/506#issuecomment-260128691, or mute; > the thread; > https://github.com/notifications/unsubscribe-auth/AC9QdnGO262FwLyE6w4D5rdgQvLpsDC3ks5q9dxpgaJpZM4Krp5j; > .",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/506#issuecomment-260131914
https://github.com/psi4/psi4/pull/506#issuecomment-260131914:1017,Deployability,update,updated,1017,"1) Cool. 2) I discussed this with @lothian, who seemed fine with it (it involves no; changes to his code :) So, I think we're settled unless anyone else has; objections. I agree there needs to be some thought about returning SO vs MO densities; --- different quantities will be needed in different circumstances. Your; proposed solution seems reasonable. Probably we should review all the; cases where densities are wanted. On Sat, Nov 12, 2016 at 10:34 AM, Daniel Smith notifications@github.com; wrote:. > @CDSherrill https://github.com/CDSherrill; > 1) It should always be in the SO basis. Apologies this was answered; > elsewhere.; > ; > 2) If we are set on this on I can patch up the CI code and add patch; > notes. The ""CI DIPOLE X"" is the followed root or the dipole from the state; > averaged density depending on user specifications.; > ; > We also need to think about the psi4/driver/driver.py:molden function and; > #504 https://github.com/psi4/psi4/issues/504. properties is now; > guaranteed to return an updated SO basis density; however, the current; > molden function requires a MO density. We could have a simple switch on; > that function that indices if the incoming density is in the AO or MO basis; > and transform accordingly.; > ; > —; > You are receiving this because you were mentioned.; > Reply to this email directly, view it on GitHub; > https://github.com/psi4/psi4/pull/506#issuecomment-260128691, or mute; > the thread; > https://github.com/notifications/unsubscribe-auth/AC9QdnGO262FwLyE6w4D5rdgQvLpsDC3ks5q9dxpgaJpZM4Krp5j; > .",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/506#issuecomment-260131914
https://github.com/psi4/psi4/pull/506#issuecomment-260131914:808,Integrability,depend,depending,808,"1) Cool. 2) I discussed this with @lothian, who seemed fine with it (it involves no; changes to his code :) So, I think we're settled unless anyone else has; objections. I agree there needs to be some thought about returning SO vs MO densities; --- different quantities will be needed in different circumstances. Your; proposed solution seems reasonable. Probably we should review all the; cases where densities are wanted. On Sat, Nov 12, 2016 at 10:34 AM, Daniel Smith notifications@github.com; wrote:. > @CDSherrill https://github.com/CDSherrill; > 1) It should always be in the SO basis. Apologies this was answered; > elsewhere.; > ; > 2) If we are set on this on I can patch up the CI code and add patch; > notes. The ""CI DIPOLE X"" is the followed root or the dipole from the state; > averaged density depending on user specifications.; > ; > We also need to think about the psi4/driver/driver.py:molden function and; > #504 https://github.com/psi4/psi4/issues/504. properties is now; > guaranteed to return an updated SO basis density; however, the current; > molden function requires a MO density. We could have a simple switch on; > that function that indices if the incoming density is in the AO or MO basis; > and transform accordingly.; > ; > —; > You are receiving this because you were mentioned.; > Reply to this email directly, view it on GitHub; > https://github.com/psi4/psi4/pull/506#issuecomment-260128691, or mute; > the thread; > https://github.com/notifications/unsubscribe-auth/AC9QdnGO262FwLyE6w4D5rdgQvLpsDC3ks5q9dxpgaJpZM4Krp5j; > .",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/506#issuecomment-260131914
https://github.com/psi4/psi4/pull/506#issuecomment-260131914:1122,Usability,simpl,simple,1122,"1) Cool. 2) I discussed this with @lothian, who seemed fine with it (it involves no; changes to his code :) So, I think we're settled unless anyone else has; objections. I agree there needs to be some thought about returning SO vs MO densities; --- different quantities will be needed in different circumstances. Your; proposed solution seems reasonable. Probably we should review all the; cases where densities are wanted. On Sat, Nov 12, 2016 at 10:34 AM, Daniel Smith notifications@github.com; wrote:. > @CDSherrill https://github.com/CDSherrill; > 1) It should always be in the SO basis. Apologies this was answered; > elsewhere.; > ; > 2) If we are set on this on I can patch up the CI code and add patch; > notes. The ""CI DIPOLE X"" is the followed root or the dipole from the state; > averaged density depending on user specifications.; > ; > We also need to think about the psi4/driver/driver.py:molden function and; > #504 https://github.com/psi4/psi4/issues/504. properties is now; > guaranteed to return an updated SO basis density; however, the current; > molden function requires a MO density. We could have a simple switch on; > that function that indices if the incoming density is in the AO or MO basis; > and transform accordingly.; > ; > —; > You are receiving this because you were mentioned.; > Reply to this email directly, view it on GitHub; > https://github.com/psi4/psi4/pull/506#issuecomment-260128691, or mute; > the thread; > https://github.com/notifications/unsubscribe-auth/AC9QdnGO262FwLyE6w4D5rdgQvLpsDC3ks5q9dxpgaJpZM4Krp5j; > .",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/506#issuecomment-260131914
https://github.com/psi4/psi4/pull/506#issuecomment-260402196:30,Usability,simpl,simple,30,I agree keeping the functions simple is favorable. Adding documentation that demonstrates things like this is useful since the user can go and apply it elsewhere. I will add that now. Thanks!,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/506#issuecomment-260402196
https://github.com/psi4/psi4/pull/507#issuecomment-258978742:21,Usability,simpl,simplifications,21,+1 for REST and JSON simplifications!,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/507#issuecomment-258978742
https://github.com/psi4/psi4/pull/507#issuecomment-258979110:156,Availability,avail,available,156,"Yay, nesting levels reduced from 10 to 5 :-) . And I'm reassured to see ""3d"" in there. Looks like we're not doing wait-and-repeat anymore, but `MaxSeconds` available if travis habitually times out. LGTM",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/507#issuecomment-258979110
https://github.com/psi4/psi4/pull/507#issuecomment-258979110:20,Energy Efficiency,reduce,reduced,20,"Yay, nesting levels reduced from 10 to 5 :-) . And I'm reassured to see ""3d"" in there. Looks like we're not doing wait-and-repeat anymore, but `MaxSeconds` available if travis habitually times out. LGTM",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/507#issuecomment-258979110
https://github.com/psi4/psi4/pull/507#issuecomment-258979667:36,Integrability,interface,interface,36,"Yeah, it seems like the simple REST interface doesn't require a queue for simple tasks; substructure searches and conformer stuff seems to generate a ticket, as before. I learned all I know from scanning the document linked above, so I'm far from an expert. I did a little testing with both Python versions and it _seems_ to be ok.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/507#issuecomment-258979667
https://github.com/psi4/psi4/pull/507#issuecomment-258979667:64,Performance,queue,queue,64,"Yeah, it seems like the simple REST interface doesn't require a queue for simple tasks; substructure searches and conformer stuff seems to generate a ticket, as before. I learned all I know from scanning the document linked above, so I'm far from an expert. I did a little testing with both Python versions and it _seems_ to be ok.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/507#issuecomment-258979667
https://github.com/psi4/psi4/pull/507#issuecomment-258979667:273,Testability,test,testing,273,"Yeah, it seems like the simple REST interface doesn't require a queue for simple tasks; substructure searches and conformer stuff seems to generate a ticket, as before. I learned all I know from scanning the document linked above, so I'm far from an expert. I did a little testing with both Python versions and it _seems_ to be ok.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/507#issuecomment-258979667
https://github.com/psi4/psi4/pull/507#issuecomment-258979667:24,Usability,simpl,simple,24,"Yeah, it seems like the simple REST interface doesn't require a queue for simple tasks; substructure searches and conformer stuff seems to generate a ticket, as before. I learned all I know from scanning the document linked above, so I'm far from an expert. I did a little testing with both Python versions and it _seems_ to be ok.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/507#issuecomment-258979667
https://github.com/psi4/psi4/pull/507#issuecomment-258979667:74,Usability,simpl,simple,74,"Yeah, it seems like the simple REST interface doesn't require a queue for simple tasks; substructure searches and conformer stuff seems to generate a ticket, as before. I learned all I know from scanning the document linked above, so I'm far from an expert. I did a little testing with both Python versions and it _seems_ to be ok.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/507#issuecomment-258979667
https://github.com/psi4/psi4/pull/507#issuecomment-258979667:171,Usability,learn,learned,171,"Yeah, it seems like the simple REST interface doesn't require a queue for simple tasks; substructure searches and conformer stuff seems to generate a ticket, as before. I learned all I know from scanning the document linked above, so I'm far from an expert. I did a little testing with both Python versions and it _seems_ to be ok.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/507#issuecomment-258979667
https://github.com/psi4/psi4/issues/508#issuecomment-259291901:62,Modifiability,plugin,plugin,62,esp. 16 & 20 seemed close enough (docs & test McGibbon's resp plugin) to be tickets in their own right. but feel free to edit.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/508#issuecomment-259291901
https://github.com/psi4/psi4/issues/508#issuecomment-259291901:41,Testability,test,test,41,esp. 16 & 20 seemed close enough (docs & test McGibbon's resp plugin) to be tickets in their own right. but feel free to edit.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/508#issuecomment-259291901
https://github.com/psi4/psi4/issues/508#issuecomment-305370267:58,Availability,down,down,58,"It doesnt look like there is a huge impetus to close this down so were just going to leave `psi4/psi4private` up. However, note that these branches are no longer valid due to the many changes and history rewriting since they have been edited. All history `psi4private` history (but not the dev branches) will be public [here](https://github.com/psi4/psi4archive).",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/508#issuecomment-305370267
https://github.com/psi4/psi4/pull/510#issuecomment-259564736:79,Testability,test,testing,79,"The timing differences are pretty negligible, maybe 25s in total. Real Python3 testing and we can boost the AM in CBS testing, I like it! LGTM. As a note can we pull clang3.9 from conda?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/510#issuecomment-259564736
https://github.com/psi4/psi4/pull/510#issuecomment-259564736:118,Testability,test,testing,118,"The timing differences are pretty negligible, maybe 25s in total. Real Python3 testing and we can boost the AM in CBS testing, I like it! LGTM. As a note can we pull clang3.9 from conda?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/510#issuecomment-259564736
https://github.com/psi4/psi4/pull/510#issuecomment-259565547:231,Availability,down,downloading,231,"I don't know why clang was so slow here. When I was testing on a working branch, the clangs finished in 42 min or so (27 & 35). [This](https://anaconda.org/conda-forge/llvmdev/files) might be a 3.9 clang. It's hard to tell without downloading the packages. On the whole, I expect travis to have a more diverse compiler selection. Should we ultimately aim for:; - clang 3.6, python 2.7; - clang 3.9, python 3.5; - gcc 4.9, python 2.7; - gcc 6, python 3.5",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/510#issuecomment-259565547
https://github.com/psi4/psi4/pull/510#issuecomment-259565547:52,Testability,test,testing,52,"I don't know why clang was so slow here. When I was testing on a working branch, the clangs finished in 42 min or so (27 & 35). [This](https://anaconda.org/conda-forge/llvmdev/files) might be a 3.9 clang. It's hard to tell without downloading the packages. On the whole, I expect travis to have a more diverse compiler selection. Should we ultimately aim for:; - clang 3.6, python 2.7; - clang 3.9, python 3.5; - gcc 4.9, python 2.7; - gcc 6, python 3.5",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/510#issuecomment-259565547
https://github.com/psi4/psi4/pull/510#issuecomment-259569411:235,Availability,error,errors,235,"Just watching Travis it looks like we get a mix of old and new nodes with a variety of computational loads. I kind of would like to do Python 3.5 across the board and then say gcc 4.9, Python 2.7. So that we can isolate between Python errors and compiler errors.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/510#issuecomment-259569411
https://github.com/psi4/psi4/pull/510#issuecomment-259569411:255,Availability,error,errors,255,"Just watching Travis it looks like we get a mix of old and new nodes with a variety of computational loads. I kind of would like to do Python 3.5 across the board and then say gcc 4.9, Python 2.7. So that we can isolate between Python errors and compiler errors.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/510#issuecomment-259569411
https://github.com/psi4/psi4/pull/510#issuecomment-259569411:101,Performance,load,loads,101,"Just watching Travis it looks like we get a mix of old and new nodes with a variety of computational loads. I kind of would like to do Python 3.5 across the board and then say gcc 4.9, Python 2.7. So that we can isolate between Python errors and compiler errors.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/510#issuecomment-259569411
https://github.com/psi4/psi4/pull/510#issuecomment-259983401:21,Testability,test,testing,21,"This is great; we're testing essentially the same workflow we recommend for end users. Great stuff, @loriab. lgtm",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/510#issuecomment-259983401
https://github.com/psi4/psi4/pull/510#issuecomment-260035077:77,Performance,concurren,concurrent,77,"@loriab Travis is running on a few branches, so we have topped our 5 (free!) concurrent tasks.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/510#issuecomment-260035077
https://github.com/psi4/psi4/pull/511#issuecomment-259730447:51,Usability,simpl,simpler,51,"Agreed that something needs to happen to make this simpler. I like the syntax for the global option given. Of the three schemes given for local options, I'd prefer scheme 1.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/511#issuecomment-259730447
https://github.com/psi4/psi4/pull/511#issuecomment-259732711:79,Usability,simpl,simple,79,"I'm less keen on scheme 2. Prefer scheme 1. At this point reconciliation looks simple because kwargs trump anything previously set. But by the time it gets complicated, I've got code for that.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/511#issuecomment-259732711
https://github.com/psi4/psi4/pull/511#issuecomment-259776780:392,Energy Efficiency,energy,energy,392,"I also like scheme 1, and `module_options` over `local_options` is a great idea. . > As a note we are looking into ways to override global options. For example, the following could be a scheme that would accomplish this. Don't module level options already override global options? In a standard input file doing this:. ``` python; # molecule stuff; set ccenergy print 1; set globals print 3; energy('ccsd'); ```. Would have print=2 for the scf and print=1 for ccsd. Is that not the case when you do it with python? Like:. ``` python; # molecule stuff; psi4.core.set_local_option(""ccenergy"", ""print"", 1); psi4.core.set_global_option(""print"",3); ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/511#issuecomment-259776780
https://github.com/psi4/psi4/pull/511#issuecomment-259857520:124,Energy Efficiency,energy,energy,124,"I really like @dgasmith's proposal for dictionary passing of options, i.e.,. ``` python; opt = {'SCF_TYPE':'DF', ...}; psi4.energy('scf', molecule=mol, options=opt); ```. I think this really supports the interactive Psi4 that has only been possible post-inversion, which folks (including myself) will be excited about. I like scheme 1 for the same reason -- conceivably, you could have . ``` python; scf_opt1 = {'SCF_TYPE':'DF'}; scf_opt2 = {'SCF_TYPE':'DF','DIIS_MAX_VECS':8}. psi4.energy('scf', molecule=mol, options=scf_opt, module_options={'SCF':scf_opt1}); ```. where even the `module_options` could be interchanged.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/511#issuecomment-259857520
https://github.com/psi4/psi4/pull/511#issuecomment-259857520:483,Energy Efficiency,energy,energy,483,"I really like @dgasmith's proposal for dictionary passing of options, i.e.,. ``` python; opt = {'SCF_TYPE':'DF', ...}; psi4.energy('scf', molecule=mol, options=opt); ```. I think this really supports the interactive Psi4 that has only been possible post-inversion, which folks (including myself) will be excited about. I like scheme 1 for the same reason -- conceivably, you could have . ``` python; scf_opt1 = {'SCF_TYPE':'DF'}; scf_opt2 = {'SCF_TYPE':'DF','DIIS_MAX_VECS':8}. psi4.energy('scf', molecule=mol, options=scf_opt, module_options={'SCF':scf_opt1}); ```. where even the `module_options` could be interchanged.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/511#issuecomment-259857520
https://github.com/psi4/psi4/pull/511#issuecomment-259860494:39,Energy Efficiency,energy,energy,39,"Regarding over-riding, as long as the `energy(..., options={'BASIS', 'STO-3G'})` are executed as actual `psi4.core.set_global_option(...)` commands, there shouldn't be any special treatment needed for overriding options. This is still the global options object that's being set, though, yes? So those `options` are going to need to be reset and revoked in an `OptionsState` before return. Sorry if this is out of place – with all the ""overriding"", I'm not quite following if it's the user-facing or programming process that's under discussion.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/511#issuecomment-259860494
https://github.com/psi4/psi4/pull/511#issuecomment-259862684:100,Energy Efficiency,reduce,reduce,100,I was thinking a head a bit where we would be able to kill off globals or at least provide a way to reduce them. I was hopeful that this scheme would be able to fill that roll as well to prevent duplication.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/511#issuecomment-259862684
https://github.com/psi4/psi4/pull/511#issuecomment-259863279:386,Energy Efficiency,reduce,reduce,386,"I agree with others that scheme 1 is preferable (fewer brackets than scheme; 2), and that ""module"" is clearer than ""local"". Also agree we need to plan ahead to simplifying options handling in general. On Thu, Nov 10, 2016 at 9:07 PM, Daniel Smith notifications@github.com; wrote:. > I was thinking a head a bit where we would be able to kill off globals or; > at least provide a way to reduce them. I was hopeful that this scheme would; > be able to fill that roll as well to prevent duplication.; > ; > —; > You are receiving this because you are subscribed to this thread.; > Reply to this email directly, view it on GitHub; > https://github.com/psi4/psi4/pull/511#issuecomment-259862684, or mute; > the thread; > https://github.com/notifications/unsubscribe-auth/AC9Qdho874ynQJnwqQU-HSnHhpY_hwN5ks5q883MgaJpZM4Ku0ap; > .",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/511#issuecomment-259863279
https://github.com/psi4/psi4/pull/511#issuecomment-259863279:102,Usability,clear,clearer,102,"I agree with others that scheme 1 is preferable (fewer brackets than scheme; 2), and that ""module"" is clearer than ""local"". Also agree we need to plan ahead to simplifying options handling in general. On Thu, Nov 10, 2016 at 9:07 PM, Daniel Smith notifications@github.com; wrote:. > I was thinking a head a bit where we would be able to kill off globals or; > at least provide a way to reduce them. I was hopeful that this scheme would; > be able to fill that roll as well to prevent duplication.; > ; > —; > You are receiving this because you are subscribed to this thread.; > Reply to this email directly, view it on GitHub; > https://github.com/psi4/psi4/pull/511#issuecomment-259862684, or mute; > the thread; > https://github.com/notifications/unsubscribe-auth/AC9Qdho874ynQJnwqQU-HSnHhpY_hwN5ks5q883MgaJpZM4Ku0ap; > .",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/511#issuecomment-259863279
https://github.com/psi4/psi4/pull/511#issuecomment-259863279:160,Usability,simpl,simplifying,160,"I agree with others that scheme 1 is preferable (fewer brackets than scheme; 2), and that ""module"" is clearer than ""local"". Also agree we need to plan ahead to simplifying options handling in general. On Thu, Nov 10, 2016 at 9:07 PM, Daniel Smith notifications@github.com; wrote:. > I was thinking a head a bit where we would be able to kill off globals or; > at least provide a way to reduce them. I was hopeful that this scheme would; > be able to fill that roll as well to prevent duplication.; > ; > —; > You are receiving this because you are subscribed to this thread.; > Reply to this email directly, view it on GitHub; > https://github.com/psi4/psi4/pull/511#issuecomment-259862684, or mute; > the thread; > https://github.com/notifications/unsubscribe-auth/AC9Qdho874ynQJnwqQU-HSnHhpY_hwN5ks5q883MgaJpZM4Ku0ap; > .",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/511#issuecomment-259863279
https://github.com/psi4/psi4/pull/511#issuecomment-260098923:77,Security,sanitiz,sanitized,77,"Sorry, I wasn't specific enough before. I have no objection to strings being sanitized at this level, but we should check with the options parser what the `type()` is first. If we get `istring`, it shouldn't be uppercased, but `string` should.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/511#issuecomment-260098923
https://github.com/psi4/psi4/pull/514#issuecomment-260339449:35,Availability,fault,fault,35,"Sorry about that, Brandon, it's my fault for closing out some of these PRs without paying attention to the order.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/514#issuecomment-260339449
https://github.com/psi4/psi4/pull/515#issuecomment-260078097:1550,Deployability,Patch,Patch,1550,"This is diatomic subroutine is a neat feature to have, especially for; pedagogical purposes. On Fri, Nov 11, 2016 at 5:54 PM, Andy Simmonett notifications@github.com; wrote:. > Description; > ; > Completely changes the algorithm used for fitting diatomic potentials from; > Lagrange interpolations (was tens of thousands of lines of Python) to using weighted; > least squares http://dx.doi.org/10.1063/1.4862157, which can be; > implemented with a couple of lines of Python.; > Todos; > ; > Notable points that this PR has either accomplished or will accomplish.; > - Remove the old interpolation code.; > - Add weighted least squares routine.; > - Add exception to handle non-convergent cases.; > - Document changes.; > - New function to plot the fit to screen/file using matplotlib.; > ; > Status; > - Ready to go; > ; > ---; > ; > You can view, comment on, or merge this pull request online at:; > ; > https://github.com/psi4/psi4/pull/515; > Commit Summary; > - Completely overhauls the diatomic code to use weighted least squares; > fitting, instead of Lagrange interpolation. Optionally generates plots of; > the results.; > ; > File Changes; > - _M_ doc/sphinxman/source/diatomic.rst; > https://github.com/psi4/psi4/pull/515/files#diff-0 (2); > - _M_ psi4/driver/diatomic.py; > https://github.com/psi4/psi4/pull/515/files#diff-1 (170); > - _D_ psi4/driver/diatomic_fits.py; > https://github.com/psi4/psi4/pull/515/files#diff-2 (49060); > - _M_ psi4/driver/p4util/exceptions.py; > https://github.com/psi4/psi4/pull/515/files#diff-3 (12); > ; > Patch Links:; > - https://github.com/psi4/psi4/pull/515.patch; > - https://github.com/psi4/psi4/pull/515.diff; > ; > —; > You are receiving this because you are subscribed to this thread.; > Reply to this email directly, view it on GitHub; > https://github.com/psi4/psi4/pull/515, or mute the thread; > https://github.com/notifications/unsubscribe-auth/AC9QdkAhbXRujKqYMI0ebQRkBB4FdOHOks5q9PILgaJpZM4KwN-5; > .",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/515#issuecomment-260078097
https://github.com/psi4/psi4/pull/515#issuecomment-260078097:1606,Deployability,patch,patch,1606,"This is diatomic subroutine is a neat feature to have, especially for; pedagogical purposes. On Fri, Nov 11, 2016 at 5:54 PM, Andy Simmonett notifications@github.com; wrote:. > Description; > ; > Completely changes the algorithm used for fitting diatomic potentials from; > Lagrange interpolations (was tens of thousands of lines of Python) to using weighted; > least squares http://dx.doi.org/10.1063/1.4862157, which can be; > implemented with a couple of lines of Python.; > Todos; > ; > Notable points that this PR has either accomplished or will accomplish.; > - Remove the old interpolation code.; > - Add weighted least squares routine.; > - Add exception to handle non-convergent cases.; > - Document changes.; > - New function to plot the fit to screen/file using matplotlib.; > ; > Status; > - Ready to go; > ; > ---; > ; > You can view, comment on, or merge this pull request online at:; > ; > https://github.com/psi4/psi4/pull/515; > Commit Summary; > - Completely overhauls the diatomic code to use weighted least squares; > fitting, instead of Lagrange interpolation. Optionally generates plots of; > the results.; > ; > File Changes; > - _M_ doc/sphinxman/source/diatomic.rst; > https://github.com/psi4/psi4/pull/515/files#diff-0 (2); > - _M_ psi4/driver/diatomic.py; > https://github.com/psi4/psi4/pull/515/files#diff-1 (170); > - _D_ psi4/driver/diatomic_fits.py; > https://github.com/psi4/psi4/pull/515/files#diff-2 (49060); > - _M_ psi4/driver/p4util/exceptions.py; > https://github.com/psi4/psi4/pull/515/files#diff-3 (12); > ; > Patch Links:; > - https://github.com/psi4/psi4/pull/515.patch; > - https://github.com/psi4/psi4/pull/515.diff; > ; > —; > You are receiving this because you are subscribed to this thread.; > Reply to this email directly, view it on GitHub; > https://github.com/psi4/psi4/pull/515, or mute the thread; > https://github.com/notifications/unsubscribe-auth/AC9QdkAhbXRujKqYMI0ebQRkBB4FdOHOks5q9PILgaJpZM4KwN-5; > .",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/515#issuecomment-260078097
https://github.com/psi4/psi4/pull/515#issuecomment-260078097:635,Integrability,rout,routine,635,"This is diatomic subroutine is a neat feature to have, especially for; pedagogical purposes. On Fri, Nov 11, 2016 at 5:54 PM, Andy Simmonett notifications@github.com; wrote:. > Description; > ; > Completely changes the algorithm used for fitting diatomic potentials from; > Lagrange interpolations (was tens of thousands of lines of Python) to using weighted; > least squares http://dx.doi.org/10.1063/1.4862157, which can be; > implemented with a couple of lines of Python.; > Todos; > ; > Notable points that this PR has either accomplished or will accomplish.; > - Remove the old interpolation code.; > - Add weighted least squares routine.; > - Add exception to handle non-convergent cases.; > - Document changes.; > - New function to plot the fit to screen/file using matplotlib.; > ; > Status; > - Ready to go; > ; > ---; > ; > You can view, comment on, or merge this pull request online at:; > ; > https://github.com/psi4/psi4/pull/515; > Commit Summary; > - Completely overhauls the diatomic code to use weighted least squares; > fitting, instead of Lagrange interpolation. Optionally generates plots of; > the results.; > ; > File Changes; > - _M_ doc/sphinxman/source/diatomic.rst; > https://github.com/psi4/psi4/pull/515/files#diff-0 (2); > - _M_ psi4/driver/diatomic.py; > https://github.com/psi4/psi4/pull/515/files#diff-1 (170); > - _D_ psi4/driver/diatomic_fits.py; > https://github.com/psi4/psi4/pull/515/files#diff-2 (49060); > - _M_ psi4/driver/p4util/exceptions.py; > https://github.com/psi4/psi4/pull/515/files#diff-3 (12); > ; > Patch Links:; > - https://github.com/psi4/psi4/pull/515.patch; > - https://github.com/psi4/psi4/pull/515.diff; > ; > —; > You are receiving this because you are subscribed to this thread.; > Reply to this email directly, view it on GitHub; > https://github.com/psi4/psi4/pull/515, or mute the thread; > https://github.com/notifications/unsubscribe-auth/AC9QdkAhbXRujKqYMI0ebQRkBB4FdOHOks5q9PILgaJpZM4KwN-5; > .",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/515#issuecomment-260078097
https://github.com/psi4/psi4/pull/515#issuecomment-260096464:197,Energy Efficiency,energy,energy,197,"Inspired by @CDSherrill's comment, I modified the plots to be a little more educational. The code now plots the harmonic and anharmonic (quartic) fits on top of each other, and shows the first few energy levels as well as a comparison of r_e and r_0. ![example plot](http://imgur.com/UPklaZW.png). The two commits have been squashed and rebased to the current master, so should be ready to go.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/515#issuecomment-260096464
https://github.com/psi4/psi4/pull/518#issuecomment-260985650:75,Availability,avail,available,75,"Right, @jturney, this is just making the `save_natom`-enabled `save_xyz()` available.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/518#issuecomment-260985650
https://github.com/psi4/psi4/pull/519#issuecomment-260985515:650,Energy Efficiency,Reduce,Reduced,650,"I couldn't pull up the old psi4/psi4private#14 that @loriab mentioned, but; does CC have a follow_root equivalent? Can you optimize the 3rd EOM-CCSD; root? There seems to be a CC3_FOLLOW_ROOT (CCEOM) option, that is not; really documented (documentation doesn't explain what this does). Maybe; @lothian can shed some light on this. David. On Wed, Nov 16, 2016 at 10:58 AM, Lori A. Burns notifications@github.com; wrote:. > ## _@loriab_ commented on this pull request.; > ; > In psi4/share/psi4/fsapt/fsaptdiff.py; > https://github.com/psi4/psi4/pull/519:; > ; > > ```; > > printOrder2(stuffA['order2'], stuffA['fragkeys']); > > ```; > > - print ' => Reduced Analysis <=\n'; > > - print(' => Reduced Analysis <=\n'); > > printOrder2(stuffA['order2r'], stuffA['fragkeysr']); > ; > @amjames https://github.com/amjames , yeah, specifying the trio of; > INTERP, LIBS, and HEADERS is the only surefire way I know to get fully; > consistent python.; > ; > —; > You are receiving this because you are subscribed to this thread.; > Reply to this email directly, view it on GitHub; > https://github.com/psi4/psi4/pull/519, or mute the thread; > https://github.com/notifications/unsubscribe-auth/AC9QdsQnxkGJc8o-ke-GfW4Qg-6yWExXks5q-ygKgaJpZM4KzjCV; > .",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/519#issuecomment-260985515
https://github.com/psi4/psi4/pull/519#issuecomment-260985515:691,Energy Efficiency,Reduce,Reduced,691,"I couldn't pull up the old psi4/psi4private#14 that @loriab mentioned, but; does CC have a follow_root equivalent? Can you optimize the 3rd EOM-CCSD; root? There seems to be a CC3_FOLLOW_ROOT (CCEOM) option, that is not; really documented (documentation doesn't explain what this does). Maybe; @lothian can shed some light on this. David. On Wed, Nov 16, 2016 at 10:58 AM, Lori A. Burns notifications@github.com; wrote:. > ## _@loriab_ commented on this pull request.; > ; > In psi4/share/psi4/fsapt/fsaptdiff.py; > https://github.com/psi4/psi4/pull/519:; > ; > > ```; > > printOrder2(stuffA['order2'], stuffA['fragkeys']); > > ```; > > - print ' => Reduced Analysis <=\n'; > > - print(' => Reduced Analysis <=\n'); > > printOrder2(stuffA['order2r'], stuffA['fragkeysr']); > ; > @amjames https://github.com/amjames , yeah, specifying the trio of; > INTERP, LIBS, and HEADERS is the only surefire way I know to get fully; > consistent python.; > ; > —; > You are receiving this because you are subscribed to this thread.; > Reply to this email directly, view it on GitHub; > https://github.com/psi4/psi4/pull/519, or mute the thread; > https://github.com/notifications/unsubscribe-auth/AC9QdsQnxkGJc8o-ke-GfW4Qg-6yWExXks5q-ygKgaJpZM4KzjCV; > .",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/519#issuecomment-260985515
https://github.com/psi4/psi4/pull/519#issuecomment-260985515:123,Performance,optimiz,optimize,123,"I couldn't pull up the old psi4/psi4private#14 that @loriab mentioned, but; does CC have a follow_root equivalent? Can you optimize the 3rd EOM-CCSD; root? There seems to be a CC3_FOLLOW_ROOT (CCEOM) option, that is not; really documented (documentation doesn't explain what this does). Maybe; @lothian can shed some light on this. David. On Wed, Nov 16, 2016 at 10:58 AM, Lori A. Burns notifications@github.com; wrote:. > ## _@loriab_ commented on this pull request.; > ; > In psi4/share/psi4/fsapt/fsaptdiff.py; > https://github.com/psi4/psi4/pull/519:; > ; > > ```; > > printOrder2(stuffA['order2'], stuffA['fragkeys']); > > ```; > > - print ' => Reduced Analysis <=\n'; > > - print(' => Reduced Analysis <=\n'); > > printOrder2(stuffA['order2r'], stuffA['fragkeysr']); > ; > @amjames https://github.com/amjames , yeah, specifying the trio of; > INTERP, LIBS, and HEADERS is the only surefire way I know to get fully; > consistent python.; > ; > —; > You are receiving this because you are subscribed to this thread.; > Reply to this email directly, view it on GitHub; > https://github.com/psi4/psi4/pull/519, or mute the thread; > https://github.com/notifications/unsubscribe-auth/AC9QdsQnxkGJc8o-ke-GfW4Qg-6yWExXks5q-ygKgaJpZM4KzjCV; > .",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/519#issuecomment-260985515
https://github.com/psi4/psi4/pull/519#issuecomment-261632977:127,Deployability,update,update,127,"This PR is good to go, in my opinion. I rolled back the removal of libpython linking because that got tangled up in a pybind11 update, which broke us sometime between nov 15 & 16. Working on that. But the PR that's remaining is uncontroversial.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/519#issuecomment-261632977
https://github.com/psi4/psi4/pull/520#issuecomment-261061814:0,Testability,Test,Test,0,"Test case addition looks fine. You can just add new cases to the end of the big list– order doesn't matter. May want to add the SCF in as a compare_values check so that if case should break, it's easier to tell at what stage.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/520#issuecomment-261061814
https://github.com/psi4/psi4/pull/520#issuecomment-261257394:1005,Availability,Error,Error,1005,"It seems that I am having some trouble with PSIO. . ```; Traceback (most recent call last):; File ""/Users/kevinhannon/Programs/psi4_test_cmake/Build/stage/Users/kevinhannon/Programs/psi4_test_cmake/Install/bin/psi4"", line 210, in <module>; exec(content); File ""<string>"", line 34, in <module>; File ""/Users/kevinhannon/Programs/psi4_test_cmake/Build/stage/Users/kevinhannon/Programs/psi4_test_cmake/Install/bin/../lib//psi4/driver/driver.py"", line 447, in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); File; ""/Users/kevinhannon/Programs/psi4_test_cmake/Build/stage/Users/kevinhannon/Programs/psi4_test_cmake/Install/bin/../lib//psi4/driver/procedures/proc.py"", line 4005, in run_detcas; ref_wfn = scf_helper(name, **kwargs); File ""/Users/kevinhannon/Programs/psi4_test_cmake/Build/stage/Users/kevinhannon/Programs/psi4_test_cmake/Install/bin/../lib//psi4/driver/procedures/proc.py"", line 1306, in scf_helper; e_scf = scf_wfn.compute_energy(). RuntimeError:; Fatal Error: PSIO Error; ```. This error is happening randomly. I had to run the ctest -R ""ao"" a few times to get this error. . @dgasmith, what should I change in proc.py for detcas if I want the JK object to handle the initialization of the integrals?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/520#issuecomment-261257394
https://github.com/psi4/psi4/pull/520#issuecomment-261257394:1017,Availability,Error,Error,1017,"It seems that I am having some trouble with PSIO. . ```; Traceback (most recent call last):; File ""/Users/kevinhannon/Programs/psi4_test_cmake/Build/stage/Users/kevinhannon/Programs/psi4_test_cmake/Install/bin/psi4"", line 210, in <module>; exec(content); File ""<string>"", line 34, in <module>; File ""/Users/kevinhannon/Programs/psi4_test_cmake/Build/stage/Users/kevinhannon/Programs/psi4_test_cmake/Install/bin/../lib//psi4/driver/driver.py"", line 447, in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); File; ""/Users/kevinhannon/Programs/psi4_test_cmake/Build/stage/Users/kevinhannon/Programs/psi4_test_cmake/Install/bin/../lib//psi4/driver/procedures/proc.py"", line 4005, in run_detcas; ref_wfn = scf_helper(name, **kwargs); File ""/Users/kevinhannon/Programs/psi4_test_cmake/Build/stage/Users/kevinhannon/Programs/psi4_test_cmake/Install/bin/../lib//psi4/driver/procedures/proc.py"", line 1306, in scf_helper; e_scf = scf_wfn.compute_energy(). RuntimeError:; Fatal Error: PSIO Error; ```. This error is happening randomly. I had to run the ctest -R ""ao"" a few times to get this error. . @dgasmith, what should I change in proc.py for detcas if I want the JK object to handle the initialization of the integrals?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/520#issuecomment-261257394
https://github.com/psi4/psi4/pull/520#issuecomment-261257394:1034,Availability,error,error,1034,"It seems that I am having some trouble with PSIO. . ```; Traceback (most recent call last):; File ""/Users/kevinhannon/Programs/psi4_test_cmake/Build/stage/Users/kevinhannon/Programs/psi4_test_cmake/Install/bin/psi4"", line 210, in <module>; exec(content); File ""<string>"", line 34, in <module>; File ""/Users/kevinhannon/Programs/psi4_test_cmake/Build/stage/Users/kevinhannon/Programs/psi4_test_cmake/Install/bin/../lib//psi4/driver/driver.py"", line 447, in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); File; ""/Users/kevinhannon/Programs/psi4_test_cmake/Build/stage/Users/kevinhannon/Programs/psi4_test_cmake/Install/bin/../lib//psi4/driver/procedures/proc.py"", line 4005, in run_detcas; ref_wfn = scf_helper(name, **kwargs); File ""/Users/kevinhannon/Programs/psi4_test_cmake/Build/stage/Users/kevinhannon/Programs/psi4_test_cmake/Install/bin/../lib//psi4/driver/procedures/proc.py"", line 1306, in scf_helper; e_scf = scf_wfn.compute_energy(). RuntimeError:; Fatal Error: PSIO Error; ```. This error is happening randomly. I had to run the ctest -R ""ao"" a few times to get this error. . @dgasmith, what should I change in proc.py for detcas if I want the JK object to handle the initialization of the integrals?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/520#issuecomment-261257394
https://github.com/psi4/psi4/pull/520#issuecomment-261257394:1118,Availability,error,error,1118,"It seems that I am having some trouble with PSIO. . ```; Traceback (most recent call last):; File ""/Users/kevinhannon/Programs/psi4_test_cmake/Build/stage/Users/kevinhannon/Programs/psi4_test_cmake/Install/bin/psi4"", line 210, in <module>; exec(content); File ""<string>"", line 34, in <module>; File ""/Users/kevinhannon/Programs/psi4_test_cmake/Build/stage/Users/kevinhannon/Programs/psi4_test_cmake/Install/bin/../lib//psi4/driver/driver.py"", line 447, in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); File; ""/Users/kevinhannon/Programs/psi4_test_cmake/Build/stage/Users/kevinhannon/Programs/psi4_test_cmake/Install/bin/../lib//psi4/driver/procedures/proc.py"", line 4005, in run_detcas; ref_wfn = scf_helper(name, **kwargs); File ""/Users/kevinhannon/Programs/psi4_test_cmake/Build/stage/Users/kevinhannon/Programs/psi4_test_cmake/Install/bin/../lib//psi4/driver/procedures/proc.py"", line 1306, in scf_helper; e_scf = scf_wfn.compute_energy(). RuntimeError:; Fatal Error: PSIO Error; ```. This error is happening randomly. I had to run the ctest -R ""ao"" a few times to get this error. . @dgasmith, what should I change in proc.py for detcas if I want the JK object to handle the initialization of the integrals?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/520#issuecomment-261257394
https://github.com/psi4/psi4/pull/520#issuecomment-261257394:198,Deployability,Install,Install,198,"It seems that I am having some trouble with PSIO. . ```; Traceback (most recent call last):; File ""/Users/kevinhannon/Programs/psi4_test_cmake/Build/stage/Users/kevinhannon/Programs/psi4_test_cmake/Install/bin/psi4"", line 210, in <module>; exec(content); File ""<string>"", line 34, in <module>; File ""/Users/kevinhannon/Programs/psi4_test_cmake/Build/stage/Users/kevinhannon/Programs/psi4_test_cmake/Install/bin/../lib//psi4/driver/driver.py"", line 447, in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); File; ""/Users/kevinhannon/Programs/psi4_test_cmake/Build/stage/Users/kevinhannon/Programs/psi4_test_cmake/Install/bin/../lib//psi4/driver/procedures/proc.py"", line 4005, in run_detcas; ref_wfn = scf_helper(name, **kwargs); File ""/Users/kevinhannon/Programs/psi4_test_cmake/Build/stage/Users/kevinhannon/Programs/psi4_test_cmake/Install/bin/../lib//psi4/driver/procedures/proc.py"", line 1306, in scf_helper; e_scf = scf_wfn.compute_energy(). RuntimeError:; Fatal Error: PSIO Error; ```. This error is happening randomly. I had to run the ctest -R ""ao"" a few times to get this error. . @dgasmith, what should I change in proc.py for detcas if I want the JK object to handle the initialization of the integrals?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/520#issuecomment-261257394
https://github.com/psi4/psi4/pull/520#issuecomment-261257394:399,Deployability,Install,Install,399,"It seems that I am having some trouble with PSIO. . ```; Traceback (most recent call last):; File ""/Users/kevinhannon/Programs/psi4_test_cmake/Build/stage/Users/kevinhannon/Programs/psi4_test_cmake/Install/bin/psi4"", line 210, in <module>; exec(content); File ""<string>"", line 34, in <module>; File ""/Users/kevinhannon/Programs/psi4_test_cmake/Build/stage/Users/kevinhannon/Programs/psi4_test_cmake/Install/bin/../lib//psi4/driver/driver.py"", line 447, in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); File; ""/Users/kevinhannon/Programs/psi4_test_cmake/Build/stage/Users/kevinhannon/Programs/psi4_test_cmake/Install/bin/../lib//psi4/driver/procedures/proc.py"", line 4005, in run_detcas; ref_wfn = scf_helper(name, **kwargs); File ""/Users/kevinhannon/Programs/psi4_test_cmake/Build/stage/Users/kevinhannon/Programs/psi4_test_cmake/Install/bin/../lib//psi4/driver/procedures/proc.py"", line 1306, in scf_helper; e_scf = scf_wfn.compute_energy(). RuntimeError:; Fatal Error: PSIO Error; ```. This error is happening randomly. I had to run the ctest -R ""ao"" a few times to get this error. . @dgasmith, what should I change in proc.py for detcas if I want the JK object to handle the initialization of the integrals?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/520#issuecomment-261257394
https://github.com/psi4/psi4/pull/520#issuecomment-261257394:649,Deployability,Install,Install,649,"It seems that I am having some trouble with PSIO. . ```; Traceback (most recent call last):; File ""/Users/kevinhannon/Programs/psi4_test_cmake/Build/stage/Users/kevinhannon/Programs/psi4_test_cmake/Install/bin/psi4"", line 210, in <module>; exec(content); File ""<string>"", line 34, in <module>; File ""/Users/kevinhannon/Programs/psi4_test_cmake/Build/stage/Users/kevinhannon/Programs/psi4_test_cmake/Install/bin/../lib//psi4/driver/driver.py"", line 447, in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); File; ""/Users/kevinhannon/Programs/psi4_test_cmake/Build/stage/Users/kevinhannon/Programs/psi4_test_cmake/Install/bin/../lib//psi4/driver/procedures/proc.py"", line 4005, in run_detcas; ref_wfn = scf_helper(name, **kwargs); File ""/Users/kevinhannon/Programs/psi4_test_cmake/Build/stage/Users/kevinhannon/Programs/psi4_test_cmake/Install/bin/../lib//psi4/driver/procedures/proc.py"", line 1306, in scf_helper; e_scf = scf_wfn.compute_energy(). RuntimeError:; Fatal Error: PSIO Error; ```. This error is happening randomly. I had to run the ctest -R ""ao"" a few times to get this error. . @dgasmith, what should I change in proc.py for detcas if I want the JK object to handle the initialization of the integrals?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/520#issuecomment-261257394
https://github.com/psi4/psi4/pull/520#issuecomment-261257394:871,Deployability,Install,Install,871,"It seems that I am having some trouble with PSIO. . ```; Traceback (most recent call last):; File ""/Users/kevinhannon/Programs/psi4_test_cmake/Build/stage/Users/kevinhannon/Programs/psi4_test_cmake/Install/bin/psi4"", line 210, in <module>; exec(content); File ""<string>"", line 34, in <module>; File ""/Users/kevinhannon/Programs/psi4_test_cmake/Build/stage/Users/kevinhannon/Programs/psi4_test_cmake/Install/bin/../lib//psi4/driver/driver.py"", line 447, in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); File; ""/Users/kevinhannon/Programs/psi4_test_cmake/Build/stage/Users/kevinhannon/Programs/psi4_test_cmake/Install/bin/../lib//psi4/driver/procedures/proc.py"", line 4005, in run_detcas; ref_wfn = scf_helper(name, **kwargs); File ""/Users/kevinhannon/Programs/psi4_test_cmake/Build/stage/Users/kevinhannon/Programs/psi4_test_cmake/Install/bin/../lib//psi4/driver/procedures/proc.py"", line 1306, in scf_helper; e_scf = scf_wfn.compute_energy(). RuntimeError:; Fatal Error: PSIO Error; ```. This error is happening randomly. I had to run the ctest -R ""ao"" a few times to get this error. . @dgasmith, what should I change in proc.py for detcas if I want the JK object to handle the initialization of the integrals?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/520#issuecomment-261257394
https://github.com/psi4/psi4/pull/520#issuecomment-261257394:456,Energy Efficiency,energy,energy,456,"It seems that I am having some trouble with PSIO. . ```; Traceback (most recent call last):; File ""/Users/kevinhannon/Programs/psi4_test_cmake/Build/stage/Users/kevinhannon/Programs/psi4_test_cmake/Install/bin/psi4"", line 210, in <module>; exec(content); File ""<string>"", line 34, in <module>; File ""/Users/kevinhannon/Programs/psi4_test_cmake/Build/stage/Users/kevinhannon/Programs/psi4_test_cmake/Install/bin/../lib//psi4/driver/driver.py"", line 447, in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); File; ""/Users/kevinhannon/Programs/psi4_test_cmake/Build/stage/Users/kevinhannon/Programs/psi4_test_cmake/Install/bin/../lib//psi4/driver/procedures/proc.py"", line 4005, in run_detcas; ref_wfn = scf_helper(name, **kwargs); File ""/Users/kevinhannon/Programs/psi4_test_cmake/Build/stage/Users/kevinhannon/Programs/psi4_test_cmake/Install/bin/../lib//psi4/driver/procedures/proc.py"", line 1306, in scf_helper; e_scf = scf_wfn.compute_energy(). RuntimeError:; Fatal Error: PSIO Error; ```. This error is happening randomly. I had to run the ctest -R ""ao"" a few times to get this error. . @dgasmith, what should I change in proc.py for detcas if I want the JK object to handle the initialization of the integrals?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/520#issuecomment-261257394
https://github.com/psi4/psi4/pull/520#issuecomment-261257394:482,Energy Efficiency,energy,energy,482,"It seems that I am having some trouble with PSIO. . ```; Traceback (most recent call last):; File ""/Users/kevinhannon/Programs/psi4_test_cmake/Build/stage/Users/kevinhannon/Programs/psi4_test_cmake/Install/bin/psi4"", line 210, in <module>; exec(content); File ""<string>"", line 34, in <module>; File ""/Users/kevinhannon/Programs/psi4_test_cmake/Build/stage/Users/kevinhannon/Programs/psi4_test_cmake/Install/bin/../lib//psi4/driver/driver.py"", line 447, in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); File; ""/Users/kevinhannon/Programs/psi4_test_cmake/Build/stage/Users/kevinhannon/Programs/psi4_test_cmake/Install/bin/../lib//psi4/driver/procedures/proc.py"", line 4005, in run_detcas; ref_wfn = scf_helper(name, **kwargs); File ""/Users/kevinhannon/Programs/psi4_test_cmake/Build/stage/Users/kevinhannon/Programs/psi4_test_cmake/Install/bin/../lib//psi4/driver/procedures/proc.py"", line 1306, in scf_helper; e_scf = scf_wfn.compute_energy(). RuntimeError:; Fatal Error: PSIO Error; ```. This error is happening randomly. I had to run the ctest -R ""ao"" a few times to get this error. . @dgasmith, what should I change in proc.py for detcas if I want the JK object to handle the initialization of the integrals?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/520#issuecomment-261257394
https://github.com/psi4/psi4/pull/520#issuecomment-261274886:196,Availability,error,error,196,"The frozen orbitals are computed once by helper functions and then saved. You should never have to touch these. As far as I can tell, if you simply set frozen orbitals your code should work. Your error shows a SCF issue, which I cannot reproduce in the current master. Ill probably need a backtrace to figure it out. Also, please label all timers with the CIWave prefix.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/520#issuecomment-261274886
https://github.com/psi4/psi4/pull/520#issuecomment-261274886:141,Usability,simpl,simply,141,"The frozen orbitals are computed once by helper functions and then saved. You should never have to touch these. As far as I can tell, if you simply set frozen orbitals your code should work. Your error shows a SCF issue, which I cannot reproduce in the current master. Ill probably need a backtrace to figure it out. Also, please label all timers with the CIWave prefix.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/520#issuecomment-261274886
https://github.com/psi4/psi4/pull/520#issuecomment-264881934:26,Security,access,access,26,@kannon92 Can you give me access to your repository so I can clean up the last few details?,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/520#issuecomment-264881934
https://github.com/psi4/psi4/pull/520#issuecomment-264890664:26,Security,access,access,26,"@dgasmith I just gave you access. Sorry, I was on vacation for the last two weeks without laptop access.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/520#issuecomment-264890664
https://github.com/psi4/psi4/pull/520#issuecomment-264890664:97,Security,access,access,97,"@dgasmith I just gave you access. Sorry, I was on vacation for the last two weeks without laptop access.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/520#issuecomment-264890664
https://github.com/psi4/psi4/pull/520#issuecomment-264982081:12,Deployability,patch,patched,12,"@kannon92 I patched up the changes I suggested and fixed the frozen orbital issue. . Instead of building densities I switched back to the standard Cl/Cr mechanics as this will save you from computing the densities as `D = D I` and instead compute them as `D = Cl * Cr.T`. This will lower the density building step from `nact^2N^3` to `nact^2N^2` as `Cl/Cr` isnt really a Matrix, but a simple column vector. Please review the changes and make sure they look ok.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/520#issuecomment-264982081
https://github.com/psi4/psi4/pull/520#issuecomment-264982081:385,Usability,simpl,simple,385,"@kannon92 I patched up the changes I suggested and fixed the frozen orbital issue. . Instead of building densities I switched back to the standard Cl/Cr mechanics as this will save you from computing the densities as `D = D I` and instead compute them as `D = Cl * Cr.T`. This will lower the density building step from `nact^2N^3` to `nact^2N^2` as `Cl/Cr` isnt really a Matrix, but a simple column vector. Please review the changes and make sure they look ok.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/520#issuecomment-264982081
https://github.com/psi4/psi4/pull/520#issuecomment-265223311:107,Availability,error,errors,107,"I am having trouble compiling these changes, @dgasmith. . I did not modify core.cc, but I am getting these errors due to PyBind11. Any idea what went wrong? . /Users/kevinhannon/Programs/psi4_cmake/psi4/src/core.cc:786:17: error: no member named; 'isinstance' in namespace 'pybind11'; if (py::isinstance<py::list>(values[n])) {; ~~~~^; /Users/kevinhannon/Programs/psi4_cmake/psi4/src/core.cc:786:36: error: expected '(' for; function-style cast or type construction; if (py::isinstance<py::list>(values[n])) {; ~~~~~~~~^; /Users/kevinhannon/Programs/psi4_cmake/psi4/src/core.cc:834:17: error: no member named; 'isinstance' in namespace 'pybind11'; if (py::isinstance<py::list>(values[n])) {; ~~~~^; /Users/kevinhannon/Programs/psi4_cmake/psi4/src/core.cc:834:36: error: expected '(' for; function-style cast or type construction; if (py::isinstance<py::list>(values[n])) {",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/520#issuecomment-265223311
https://github.com/psi4/psi4/pull/520#issuecomment-265223311:223,Availability,error,error,223,"I am having trouble compiling these changes, @dgasmith. . I did not modify core.cc, but I am getting these errors due to PyBind11. Any idea what went wrong? . /Users/kevinhannon/Programs/psi4_cmake/psi4/src/core.cc:786:17: error: no member named; 'isinstance' in namespace 'pybind11'; if (py::isinstance<py::list>(values[n])) {; ~~~~^; /Users/kevinhannon/Programs/psi4_cmake/psi4/src/core.cc:786:36: error: expected '(' for; function-style cast or type construction; if (py::isinstance<py::list>(values[n])) {; ~~~~~~~~^; /Users/kevinhannon/Programs/psi4_cmake/psi4/src/core.cc:834:17: error: no member named; 'isinstance' in namespace 'pybind11'; if (py::isinstance<py::list>(values[n])) {; ~~~~^; /Users/kevinhannon/Programs/psi4_cmake/psi4/src/core.cc:834:36: error: expected '(' for; function-style cast or type construction; if (py::isinstance<py::list>(values[n])) {",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/520#issuecomment-265223311
https://github.com/psi4/psi4/pull/520#issuecomment-265223311:400,Availability,error,error,400,"I am having trouble compiling these changes, @dgasmith. . I did not modify core.cc, but I am getting these errors due to PyBind11. Any idea what went wrong? . /Users/kevinhannon/Programs/psi4_cmake/psi4/src/core.cc:786:17: error: no member named; 'isinstance' in namespace 'pybind11'; if (py::isinstance<py::list>(values[n])) {; ~~~~^; /Users/kevinhannon/Programs/psi4_cmake/psi4/src/core.cc:786:36: error: expected '(' for; function-style cast or type construction; if (py::isinstance<py::list>(values[n])) {; ~~~~~~~~^; /Users/kevinhannon/Programs/psi4_cmake/psi4/src/core.cc:834:17: error: no member named; 'isinstance' in namespace 'pybind11'; if (py::isinstance<py::list>(values[n])) {; ~~~~^; /Users/kevinhannon/Programs/psi4_cmake/psi4/src/core.cc:834:36: error: expected '(' for; function-style cast or type construction; if (py::isinstance<py::list>(values[n])) {",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/520#issuecomment-265223311
https://github.com/psi4/psi4/pull/520#issuecomment-265223311:586,Availability,error,error,586,"I am having trouble compiling these changes, @dgasmith. . I did not modify core.cc, but I am getting these errors due to PyBind11. Any idea what went wrong? . /Users/kevinhannon/Programs/psi4_cmake/psi4/src/core.cc:786:17: error: no member named; 'isinstance' in namespace 'pybind11'; if (py::isinstance<py::list>(values[n])) {; ~~~~^; /Users/kevinhannon/Programs/psi4_cmake/psi4/src/core.cc:786:36: error: expected '(' for; function-style cast or type construction; if (py::isinstance<py::list>(values[n])) {; ~~~~~~~~^; /Users/kevinhannon/Programs/psi4_cmake/psi4/src/core.cc:834:17: error: no member named; 'isinstance' in namespace 'pybind11'; if (py::isinstance<py::list>(values[n])) {; ~~~~^; /Users/kevinhannon/Programs/psi4_cmake/psi4/src/core.cc:834:36: error: expected '(' for; function-style cast or type construction; if (py::isinstance<py::list>(values[n])) {",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/520#issuecomment-265223311
https://github.com/psi4/psi4/pull/520#issuecomment-265223311:763,Availability,error,error,763,"I am having trouble compiling these changes, @dgasmith. . I did not modify core.cc, but I am getting these errors due to PyBind11. Any idea what went wrong? . /Users/kevinhannon/Programs/psi4_cmake/psi4/src/core.cc:786:17: error: no member named; 'isinstance' in namespace 'pybind11'; if (py::isinstance<py::list>(values[n])) {; ~~~~^; /Users/kevinhannon/Programs/psi4_cmake/psi4/src/core.cc:786:36: error: expected '(' for; function-style cast or type construction; if (py::isinstance<py::list>(values[n])) {; ~~~~~~~~^; /Users/kevinhannon/Programs/psi4_cmake/psi4/src/core.cc:834:17: error: no member named; 'isinstance' in namespace 'pybind11'; if (py::isinstance<py::list>(values[n])) {; ~~~~^; /Users/kevinhannon/Programs/psi4_cmake/psi4/src/core.cc:834:36: error: expected '(' for; function-style cast or type construction; if (py::isinstance<py::list>(values[n])) {",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/520#issuecomment-265223311
https://github.com/psi4/psi4/pull/520#issuecomment-265224163:46,Modifiability,config,configure,46,"@kannon92 , just blow away your build dir and configure from scratch. That should fix it.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/520#issuecomment-265224163
https://github.com/psi4/psi4/pull/520#issuecomment-265250487:28,Testability,log,log,28,"That should work. Run a git log to make sure all the changes are there properly, then do a `git push --force origin ao_casscf`.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/520#issuecomment-265250487
https://github.com/psi4/psi4/pull/520#issuecomment-265362937:22,Testability,test,test,22,LGTM. +🍺 for adding a test case,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/520#issuecomment-265362937
https://github.com/psi4/psi4/pull/520#issuecomment-265447202:59,Energy Efficiency,energy,energy,59,"I threw a +1 behind lori's comments about checking the SCF energy in the test, but otherwise. LGTM",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/520#issuecomment-265447202
https://github.com/psi4/psi4/pull/520#issuecomment-265447202:73,Testability,test,test,73,"I threw a +1 behind lori's comments about checking the SCF energy in the test, but otherwise. LGTM",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/520#issuecomment-265447202
https://github.com/psi4/psi4/pull/520#issuecomment-265476336:0,Testability,Test,Testing,0,Testing out GH reviews over LGTM's.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/520#issuecomment-265476336
https://github.com/psi4/psi4/pull/520#issuecomment-265476766:15,Testability,test,test,15,"I think the GH test was a success, but we'll have to remove the (blocking) lgtm approval",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/520#issuecomment-265476766
https://github.com/psi4/psi4/pull/520#issuecomment-265479245:42,Availability,down,down,42,"As pointed out by others, LGTM is already down. Switching LGTM as a required check off.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/520#issuecomment-265479245
https://github.com/psi4/psi4/issues/521#issuecomment-261612983:218,Energy Efficiency,Energy,Energy,218,"What version of psi4 that you are using? The version info should be printed in the heading of the output file. . I ran your input using a build from the current master and I got the following results:. ```; Excitation Energy OS RS RS Einstein A ; State (eV) (cm^-1) (nm) (au) (l,au) (v,au) (s^-1); 1 Ag 12.964 104563.5 95.6 0.476427 0.0000 0.0000 0.0000 0.000000E+00; 2 Ag 16.771 135268.1 73.9 0.616327 0.0000 0.0000 0.0000 0.000000E+00; 3 Ag 18.773 151417.7 66.0 0.689910 0.0000 0.0000 0.0000 0.000000E+00; 4 Ag 25.910 208978.9 47.9 0.952178 0.0000 0.0000 0.0000 0.000000E+00; 1B1g 16.855 135946.1 73.6 0.619416 0.0000 0.0000 0.0000 0.000000E+00; 2B1g 26.177 211129.5 47.4 0.961977 0.0000 0.0000 0.0000 0.000000E+00; 3B1g 30.589 246713.1 40.5 1.124108 0.0000 0.0000 0.0000 0.000000E+00; 4B1g 36.015 290484.5 34.4 1.323545 0.0000 0.0000 0.0000 0.000000E+00; 1B2g 16.855 135946.1 73.6 0.619416 0.0000 0.0000 0.0000 0.000000E+00; 2B2g 26.177 211129.5 47.4 0.961977 0.0000 0.0000 0.0000 0.000000E+00; 3B2g 30.589 246713.1 40.5 1.124108 0.0000 0.0000 0.0000 0.000000E+00; 4B2g 36.015 290484.5 34.4 1.323545 0.0000 0.0000 0.0000 0.000000E+00; 1B3g 19.495 157235.3 63.6 0.716417 0.0000 0.0000 0.0000 0.000000E+00; 2B3g 19.585 157966.1 63.3 0.719747 0.0000 0.0000 0.0000 0.000000E+00; 3B3g 19.612 158178.3 63.2 0.720713 0.0000 0.0000 0.0000 0.000000E+00; 4B3g 19.626 158297.8 63.2 0.721258 0.0000 0.0000 0.0000 0.000000E+00; 1 Au 28.127 226859.8 44.1 1.033649 0.0000 0.0000 0.0000 0.000000E+00; 2 Au 38.607 311383.0 32.1 1.418765 0.0000 0.0000 0.0000 0.000000E+00; 3 Au 40.680 328106.5 30.5 1.494963 0.0000 0.0000 0.0000 0.000000E+00; 4 Au 46.518 375194.6 26.7 1.709513 0.0000 0.0000 0.0000 0.000000E+00; 1B1u 13.809 111376.2 89.8 0.507467 0.3270 0.0000 0.0000 2.705606E+09; 2B1u 26.345 212486.8 47.1 0.968161 0.2787 0.0000 0.0000 8.394111E+09; 3B1u 28.418 229205.6 43.6 1.044338 0.0041 0.0000 0.0000 1.426430E+08; 4B1u 34.059 274701.9 36.4 1.251634 0.0003 0.0000 0.0000 1.670003E+07; 1B2u 13.809 111376.2 89",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/521#issuecomment-261612983
https://github.com/psi4/psi4/issues/521#issuecomment-261612983:2817,Safety,detect,detect,2817,; 2B2g 26.177 211129.5 47.4 0.961977 0.0000 0.0000 0.0000 0.000000E+00; 3B2g 30.589 246713.1 40.5 1.124108 0.0000 0.0000 0.0000 0.000000E+00; 4B2g 36.015 290484.5 34.4 1.323545 0.0000 0.0000 0.0000 0.000000E+00; 1B3g 19.495 157235.3 63.6 0.716417 0.0000 0.0000 0.0000 0.000000E+00; 2B3g 19.585 157966.1 63.3 0.719747 0.0000 0.0000 0.0000 0.000000E+00; 3B3g 19.612 158178.3 63.2 0.720713 0.0000 0.0000 0.0000 0.000000E+00; 4B3g 19.626 158297.8 63.2 0.721258 0.0000 0.0000 0.0000 0.000000E+00; 1 Au 28.127 226859.8 44.1 1.033649 0.0000 0.0000 0.0000 0.000000E+00; 2 Au 38.607 311383.0 32.1 1.418765 0.0000 0.0000 0.0000 0.000000E+00; 3 Au 40.680 328106.5 30.5 1.494963 0.0000 0.0000 0.0000 0.000000E+00; 4 Au 46.518 375194.6 26.7 1.709513 0.0000 0.0000 0.0000 0.000000E+00; 1B1u 13.809 111376.2 89.8 0.507467 0.3270 0.0000 0.0000 2.705606E+09; 2B1u 26.345 212486.8 47.1 0.968161 0.2787 0.0000 0.0000 8.394111E+09; 3B1u 28.418 229205.6 43.6 1.044338 0.0041 0.0000 0.0000 1.426430E+08; 4B1u 34.059 274701.9 36.4 1.251634 0.0003 0.0000 0.0000 1.670003E+07; 1B2u 13.809 111376.2 89.8 0.507467 0.3270 0.0000 0.0000 2.705606E+09; 2B2u 26.345 212486.8 47.1 0.968161 0.2787 0.0000 0.0000 8.394111E+09; 3B2u 28.418 229205.6 43.6 1.044338 0.0041 0.0000 0.0000 1.426430E+08; 4B2u 34.059 274701.9 36.4 1.251634 0.0003 0.0000 0.0000 1.670003E+07; 1B3u 12.527 101040.6 99.0 0.460375 0.3114 0.0000 0.0000 2.120269E+09; 2B3u 15.263 123102.2 81.2 0.560895 0.1514 0.0000 0.0000 1.530130E+09; 3B3u 20.039 161623.1 61.9 0.736409 0.1214 0.0000 0.0000 2.114615E+09; 4B3u 25.716 207413.4 48.2 0.945045 0.0341 0.0000 0.0000 9.774464E+08; ```. I do notice some nonsense is being printed in the `Excited State -> Excited State Transitions` section. Looks similar to what you have above:. ```; 1B1g->1B2g 0.000 0.0 86055398391528.6 0.000000 0.0000 0.0000 0.0000 0.000000E+00; ```. We should probably put something in to detect degeneracy and print something that indicates that or at least gracefully handle the conversion to nm.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/521#issuecomment-261612983
https://github.com/psi4/psi4/issues/521#issuecomment-261643092:158,Energy Efficiency,Energy,Energy,158,"I was using psi4.0 version. However i just compiled the newest version of psi4 from github and obtain now just for one symmetry non-sense : . ```; Excitation Energy OS RS RS Einstein A; State (eV) (cm^-1) (nm) (au) (l,au) (v,au) (s^-1); 1 Ag 12.964 104563.5 95.6 0.476427 0.0000 0.0000 0.0000 0.000000E+00; 2 Ag 16.771 135268.1 73.9 0.616327 0.0000 0.0000 0.0000 0.000000E+00; 3 Ag 18.773 151417.7 66.0 0.689910 0.0000 0.0000 0.0000 0.000000E+00; 4 Ag 25.910 208978.9 47.9 0.952178 0.0000 0.0000 0.0000 0.000000E+00; 1B1g 16.855 135946.1 73.6 0.619416 0.0000 0.0000 0.0000 0.000000E+00; 2B1g 26.177 211129.5 47.4 0.961977 0.0000 0.0000 0.0000 0.000000E+00; 3B1g 30.589 246713.1 40.5 1.124108 0.0000 0.0000 0.0000 0.000000E+00; 4B1g 36.015 290484.5 34.4 1.323545 0.0000 0.0000 0.0000 0.000000E+00; 1B2g 16.855 135946.1 73.6 0.619416 0.0000 0.0000 0.0000 0.000000E+00; 2B2g 26.177 211129.5 47.4 0.961977 0.0000 0.0000 0.0000 0.000000E+00; 3B2g 30.589 246713.1 40.5 1.124108 0.0000 0.0000 0.0000 0.000000E+00; 4B2g 36.015 290484.5 34.4 1.323545 0.0000 0.0000 0.0000 0.000000E+00; 1B3g 0.000 0.0 30667796364.5 0.000000 0.0000 0.0000 0.0000 0.000000E+00; 2B3g 0.000 0.0 20136140996.1 0.000000 0.0000 0.0000 0.0000 0.000000E+00; 3B3g 0.000 0.0 18363592897.3 0.000000 0.0000 0.0000 0.0000 0.000000E+00; 4B3g 0.000 0.0 9232632432.8 0.000000 0.0000 0.0000 0.0000 0.000000E+00; 1 Au 28.127 226859.8 44.1 1.033649 0.0000 0.0000 0.0000 0.000000E+00; 2 Au 38.607 311383.0 32.1 1.418765 0.0000 0.0000 0.0000 0.000000E+00; 3 Au 40.680 328106.5 30.5 1.494963 0.0000 0.0000 0.0000 0.000000E+00; 4 Au 46.518 375194.6 26.7 1.709513 0.0000 0.0000 0.0000 0.000000E+00; 1B1u 13.809 111376.2 89.8 0.507467 0.3270 0.0000 0.0000 2.705606E+09; 2B1u 26.345 212486.8 47.1 0.968161 0.2787 0.0000 0.0000 8.394111E+09; 3B1u 28.418 229205.6 43.6 1.044338 0.0041 0.0000 0.0000 1.426430E+08; 4B1u 34.059 274701.9 36.4 1.251634 0.0003 0.0000 0.0000 1.670004E+07; 1B2u 13.809 111376.2 89.8 0.507467 0.3270 0.0000 0.0000 2.705606E+09; 2B2",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/521#issuecomment-261643092
https://github.com/psi4/psi4/issues/522#issuecomment-261727164:92,Deployability,update,update,92,"Are you using a detected pre-build pybind11? Pybind11 changes so often just now (we usually update to their HEAD once a month and need to adapt the Psi4 code) that we can't guarantee that any but the [tag](https://github.com/psi4/psi4/blob/master/external/pybind11/CMakeLists.txt#L11) works. In case you're alarmed by the fork, the alterations are just changes to the build, not to pybind.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/522#issuecomment-261727164
https://github.com/psi4/psi4/issues/522#issuecomment-261727164:138,Energy Efficiency,adapt,adapt,138,"Are you using a detected pre-build pybind11? Pybind11 changes so often just now (we usually update to their HEAD once a month and need to adapt the Psi4 code) that we can't guarantee that any but the [tag](https://github.com/psi4/psi4/blob/master/external/pybind11/CMakeLists.txt#L11) works. In case you're alarmed by the fork, the alterations are just changes to the build, not to pybind.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/522#issuecomment-261727164
https://github.com/psi4/psi4/issues/522#issuecomment-261727164:138,Modifiability,adapt,adapt,138,"Are you using a detected pre-build pybind11? Pybind11 changes so often just now (we usually update to their HEAD once a month and need to adapt the Psi4 code) that we can't guarantee that any but the [tag](https://github.com/psi4/psi4/blob/master/external/pybind11/CMakeLists.txt#L11) works. In case you're alarmed by the fork, the alterations are just changes to the build, not to pybind.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/522#issuecomment-261727164
https://github.com/psi4/psi4/issues/522#issuecomment-261727164:16,Safety,detect,detected,16,"Are you using a detected pre-build pybind11? Pybind11 changes so often just now (we usually update to their HEAD once a month and need to adapt the Psi4 code) that we can't guarantee that any but the [tag](https://github.com/psi4/psi4/blob/master/external/pybind11/CMakeLists.txt#L11) works. In case you're alarmed by the fork, the alterations are just changes to the build, not to pybind.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/522#issuecomment-261727164
https://github.com/psi4/psi4/issues/522#issuecomment-261729566:1241,Deployability,install,install,1241,"No, the content of my CMakeLists.txt is identical to the given tag. I further add that i can compile the code with gcc_4.9.2 without any problems on my lap top,; but i need to compile it on the cluster, and there we have the older version of gcc, therefore; the compilation with intel 2017. find_package(pybind11 CONFIG QUIET). if(${pybind11_FOUND}); message(STATUS ""Found pybind11: ${pybind11_INCLUDE_DIR} (found version ${pybind11_VERSION})""); add_library(pybind11_external INTERFACE) # dummy; else(); include(ExternalProject); message(STATUS ""Suitable pybind11 could not be located, building one instead.""); ExternalProject_Add(pybind11_external; GIT_REPOSITORY https://github.com/psi4/pybind11; GIT_TAG oct18ud; UPDATE_COMMAND """"; CMAKE_ARGS -DCMAKE_INSTALL_PREFIX=${CMAKE_INSTALL_PREFIX}/external; -DCMAKE_BUILD_TYPE=${CMAKE_BUILD_TYPE}; -DCMAKE_C_COMPILER=${CMAKE_C_COMPILER}; -DCMAKE_CXX_COMPILER=${CMAKE_CXX_COMPILER}; -DCMAKE_INSTALL_INCLUDEDIR=${CMAKE_INSTALL_INCLUDEDIR}; -DPYBIND11_CPP_STANDARD=-std=c++${PSI4_CXX_STANDARD}; -DPYBIND11_TEST=OFF; -DPYTHON_EXECUTABLE=${PYTHON_EXECUTABLE}; CMAKE_CACHE_ARGS -DCMAKE_C_FLAGS:STRING=${CMAKE_C_FLAGS}; -DCMAKE_CXX_FLAGS:STRING=${CMAKE_CXX_FLAGS}; INSTALL_COMMAND ${CMAKE_MAKE_PROGRAM} install; DESTDIR=${CMAKE_BINARY_DIR}/stage); endif()",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/522#issuecomment-261729566
https://github.com/psi4/psi4/issues/522#issuecomment-261729566:351,Integrability,message,message,351,"No, the content of my CMakeLists.txt is identical to the given tag. I further add that i can compile the code with gcc_4.9.2 without any problems on my lap top,; but i need to compile it on the cluster, and there we have the older version of gcc, therefore; the compilation with intel 2017. find_package(pybind11 CONFIG QUIET). if(${pybind11_FOUND}); message(STATUS ""Found pybind11: ${pybind11_INCLUDE_DIR} (found version ${pybind11_VERSION})""); add_library(pybind11_external INTERFACE) # dummy; else(); include(ExternalProject); message(STATUS ""Suitable pybind11 could not be located, building one instead.""); ExternalProject_Add(pybind11_external; GIT_REPOSITORY https://github.com/psi4/pybind11; GIT_TAG oct18ud; UPDATE_COMMAND """"; CMAKE_ARGS -DCMAKE_INSTALL_PREFIX=${CMAKE_INSTALL_PREFIX}/external; -DCMAKE_BUILD_TYPE=${CMAKE_BUILD_TYPE}; -DCMAKE_C_COMPILER=${CMAKE_C_COMPILER}; -DCMAKE_CXX_COMPILER=${CMAKE_CXX_COMPILER}; -DCMAKE_INSTALL_INCLUDEDIR=${CMAKE_INSTALL_INCLUDEDIR}; -DPYBIND11_CPP_STANDARD=-std=c++${PSI4_CXX_STANDARD}; -DPYBIND11_TEST=OFF; -DPYTHON_EXECUTABLE=${PYTHON_EXECUTABLE}; CMAKE_CACHE_ARGS -DCMAKE_C_FLAGS:STRING=${CMAKE_C_FLAGS}; -DCMAKE_CXX_FLAGS:STRING=${CMAKE_CXX_FLAGS}; INSTALL_COMMAND ${CMAKE_MAKE_PROGRAM} install; DESTDIR=${CMAKE_BINARY_DIR}/stage); endif()",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/522#issuecomment-261729566
https://github.com/psi4/psi4/issues/522#issuecomment-261729566:476,Integrability,INTERFACE,INTERFACE,476,"No, the content of my CMakeLists.txt is identical to the given tag. I further add that i can compile the code with gcc_4.9.2 without any problems on my lap top,; but i need to compile it on the cluster, and there we have the older version of gcc, therefore; the compilation with intel 2017. find_package(pybind11 CONFIG QUIET). if(${pybind11_FOUND}); message(STATUS ""Found pybind11: ${pybind11_INCLUDE_DIR} (found version ${pybind11_VERSION})""); add_library(pybind11_external INTERFACE) # dummy; else(); include(ExternalProject); message(STATUS ""Suitable pybind11 could not be located, building one instead.""); ExternalProject_Add(pybind11_external; GIT_REPOSITORY https://github.com/psi4/pybind11; GIT_TAG oct18ud; UPDATE_COMMAND """"; CMAKE_ARGS -DCMAKE_INSTALL_PREFIX=${CMAKE_INSTALL_PREFIX}/external; -DCMAKE_BUILD_TYPE=${CMAKE_BUILD_TYPE}; -DCMAKE_C_COMPILER=${CMAKE_C_COMPILER}; -DCMAKE_CXX_COMPILER=${CMAKE_CXX_COMPILER}; -DCMAKE_INSTALL_INCLUDEDIR=${CMAKE_INSTALL_INCLUDEDIR}; -DPYBIND11_CPP_STANDARD=-std=c++${PSI4_CXX_STANDARD}; -DPYBIND11_TEST=OFF; -DPYTHON_EXECUTABLE=${PYTHON_EXECUTABLE}; CMAKE_CACHE_ARGS -DCMAKE_C_FLAGS:STRING=${CMAKE_C_FLAGS}; -DCMAKE_CXX_FLAGS:STRING=${CMAKE_CXX_FLAGS}; INSTALL_COMMAND ${CMAKE_MAKE_PROGRAM} install; DESTDIR=${CMAKE_BINARY_DIR}/stage); endif()",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/522#issuecomment-261729566
https://github.com/psi4/psi4/issues/522#issuecomment-261729566:530,Integrability,message,message,530,"No, the content of my CMakeLists.txt is identical to the given tag. I further add that i can compile the code with gcc_4.9.2 without any problems on my lap top,; but i need to compile it on the cluster, and there we have the older version of gcc, therefore; the compilation with intel 2017. find_package(pybind11 CONFIG QUIET). if(${pybind11_FOUND}); message(STATUS ""Found pybind11: ${pybind11_INCLUDE_DIR} (found version ${pybind11_VERSION})""); add_library(pybind11_external INTERFACE) # dummy; else(); include(ExternalProject); message(STATUS ""Suitable pybind11 could not be located, building one instead.""); ExternalProject_Add(pybind11_external; GIT_REPOSITORY https://github.com/psi4/pybind11; GIT_TAG oct18ud; UPDATE_COMMAND """"; CMAKE_ARGS -DCMAKE_INSTALL_PREFIX=${CMAKE_INSTALL_PREFIX}/external; -DCMAKE_BUILD_TYPE=${CMAKE_BUILD_TYPE}; -DCMAKE_C_COMPILER=${CMAKE_C_COMPILER}; -DCMAKE_CXX_COMPILER=${CMAKE_CXX_COMPILER}; -DCMAKE_INSTALL_INCLUDEDIR=${CMAKE_INSTALL_INCLUDEDIR}; -DPYBIND11_CPP_STANDARD=-std=c++${PSI4_CXX_STANDARD}; -DPYBIND11_TEST=OFF; -DPYTHON_EXECUTABLE=${PYTHON_EXECUTABLE}; CMAKE_CACHE_ARGS -DCMAKE_C_FLAGS:STRING=${CMAKE_C_FLAGS}; -DCMAKE_CXX_FLAGS:STRING=${CMAKE_CXX_FLAGS}; INSTALL_COMMAND ${CMAKE_MAKE_PROGRAM} install; DESTDIR=${CMAKE_BINARY_DIR}/stage); endif()",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/522#issuecomment-261729566
https://github.com/psi4/psi4/issues/522#issuecomment-261729566:313,Modifiability,CONFIG,CONFIG,313,"No, the content of my CMakeLists.txt is identical to the given tag. I further add that i can compile the code with gcc_4.9.2 without any problems on my lap top,; but i need to compile it on the cluster, and there we have the older version of gcc, therefore; the compilation with intel 2017. find_package(pybind11 CONFIG QUIET). if(${pybind11_FOUND}); message(STATUS ""Found pybind11: ${pybind11_INCLUDE_DIR} (found version ${pybind11_VERSION})""); add_library(pybind11_external INTERFACE) # dummy; else(); include(ExternalProject); message(STATUS ""Suitable pybind11 could not be located, building one instead.""); ExternalProject_Add(pybind11_external; GIT_REPOSITORY https://github.com/psi4/pybind11; GIT_TAG oct18ud; UPDATE_COMMAND """"; CMAKE_ARGS -DCMAKE_INSTALL_PREFIX=${CMAKE_INSTALL_PREFIX}/external; -DCMAKE_BUILD_TYPE=${CMAKE_BUILD_TYPE}; -DCMAKE_C_COMPILER=${CMAKE_C_COMPILER}; -DCMAKE_CXX_COMPILER=${CMAKE_CXX_COMPILER}; -DCMAKE_INSTALL_INCLUDEDIR=${CMAKE_INSTALL_INCLUDEDIR}; -DPYBIND11_CPP_STANDARD=-std=c++${PSI4_CXX_STANDARD}; -DPYBIND11_TEST=OFF; -DPYTHON_EXECUTABLE=${PYTHON_EXECUTABLE}; CMAKE_CACHE_ARGS -DCMAKE_C_FLAGS:STRING=${CMAKE_C_FLAGS}; -DCMAKE_CXX_FLAGS:STRING=${CMAKE_CXX_FLAGS}; INSTALL_COMMAND ${CMAKE_MAKE_PROGRAM} install; DESTDIR=${CMAKE_BINARY_DIR}/stage); endif()",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/522#issuecomment-261729566
https://github.com/psi4/psi4/issues/522#issuecomment-261730911:352,Safety,detect,detects,352,"That actually looks like a C++11 issue. ICC uses GCC for a lot of operations, so even with ICC you need GCC 4.9+. In your CMake compile flags you need to give ICC a link a newer GCC as follows:. ```; -DCMAKE_C_FLAGS=""../gcc5/bin/gcc""; -DCMAKE_CXX_FLAGS=""-gcc-name=../gcc5/bin/gcc -gxx-name=../gcc5/bin/g++""; ```. `cmake` should throw a warning when it detects an older GCC when using ICC. Can you please check the output when `cmake` is first called to confirm its there?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/522#issuecomment-261730911
https://github.com/psi4/psi4/issues/522#issuecomment-261733153:4218,Availability,avail,available,4218,"FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Success; -- Try OpenMP CXX flag = [-qopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Success; -- Found OpenMP: -qopenmp ; CMake Warning at cmake/custom_cxxstandard.cmake:22 (message):; Intel ICPC makes use of GCC (detected: 4.7; required for C++11: 4.9) so; this build won't work without GCC intervention:; https://github.com/psi4/psi4/wiki/8_FAQ_Contents#modgcc; Call Stack (most recent call first):; CMakeLists.txt:119 (include). -- Math lib search order is MKL;ESSL;ATLAS;ACML;SYSTEM_NATIVE; -- You can select a specific type by defining for instance -D BLAS_TYPE=ATLAS or -D LAPACK_TYPE=ACML; -- or by redefining MATH_LIB_SEARCH_ORDER; -- BLAS will be searched for based on MKLROOT=/software/intel/parallel_studio_xe_2017/compilers_and_libraries_2017.0.098/linux/mkl; -- Found BLAS: MKL (/software/intel/parallel_studio_xe_2017/compilers_and_libraries_2017.0.098/linux/mkl/lib/intel64/libmkl_intel_lp64.so;/software/intel/parallel_studio_xe_2017/compilers_and_libraries_2017.0.098/linux/mkl/lib/intel64/libmkl_intel_thread.so;/software/intel/parallel_studio_xe_2017/compilers_and_libraries_2017.0.098/linux/mkl/lib/intel64/libmkl_core.so;/usr/lib64/libpthread.so;/usr/lib64/libm.so); -- LAPACK will be searched for based on MKLROOT=/software/intel/parallel_studio_xe_2017/compilers_and_libraries_2017.0.098/linux/mkl; -- Found LAPACK: MKL (/software/intel/parallel_studio_xe_2017/compilers_and_libraries_2017.0.098/linux/mkl/lib/intel64/libmkl_lapack95_lp64.a;/software/intel/parallel_studio_xe_2017/compilers_and_libraries_2017.0.098/linux/mkl/lib/intel64/libmkl_intel_lp64.so); -- No Doxygen, no docs.; -- Documentation targets available: sphinxman (html), sphinxmini (quick html), sphinxpdf (LaTeX --> PDF); -- Adding test cases: Psi4; -- Adding test cases: Psi4 + libefp; -- Configuring done; -- Generating done; -- Build files have been written to: /home/LUCA/psi-master_18_11_2016/psi4/bii",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/522#issuecomment-261733153
https://github.com/psi4/psi4/issues/522#issuecomment-261733153:1667,Deployability,Release,Release,1667,"n/intel64/icc -- works; -- Detecting C compiler ABI info; -- Detecting C compiler ABI info - done; -- Check for working CXX compiler: /software/intel/parallel_studio_xe_2017/compilers_and_libraries_2017.0.098/linux/bin/intel64/icpc; -- Check for working CXX compiler: /software/intel/parallel_studio_xe_2017/compilers_and_libraries_2017.0.098/linux/bin/intel64/icpc -- works; -- Detecting CXX compiler ABI info; -- Detecting CXX compiler ABI info - done; -- Setting (unspecified) option BUILD_SHARED_LIBS: OFF; -- Setting (unspecified) option ENABLE_OPENMP: ON; -- Setting (unspecified) option ENABLE_AUTO_BLAS: ON; -- Setting (unspecified) option ENABLE_AUTO_LAPACK: ON; -- Setting (unspecified) option ENABLE_XHOST: ON; -- Performing Test CMAKE_C_FLAGS [-xHost] - Success, Appending; -- Performing Test CMAKE_CXX_FLAGS [-xHost] - Success, Appending; -- Setting (unspecified) option ENABLE_CODE_COVERAGE: OFF; -- Setting (unspecified) option ENABLE_BOUNDS_CHECK: OFF; -- Setting (unspecified) option ENABLE_ASAN: OFF; -- Setting (unspecified) option ENABLE_TSAN: OFF; -- Setting (unspecified) option ENABLE_UBSAN: OFF; -- Setting (unspecified) option MAX_AM_ERI: 5; -- Setting (unspecified) option CMAKE_BUILD_TYPE: Release; -- Setting (unspecified) option FC_SYMBOL: 2; -- Setting (unspecified) option BUILD_FPIC: ON; -- Setting (unspecified) option CMAKE_INSTALL_LIBDIR: lib; -- Setting (unspecified) option PYMOD_INSTALL_LIBDIR: /; -- Setting (unspecified) option ENABLE_GENERIC: OFF; -- Setting (unspecified) option CMAKE_INSTALL_MESSAGE: LAZY; -- Setting (unspecified) option PSI4_CXX_STANDARD: 11; -- Found PythonInterp: /usr/bin/python (found version ""2.7.3"") ; -- Found PythonLibs: /usr/lib64/libpython2.7.so (found suitable version ""2.7.3"", minimum required is ""2"") ; -- Suitable pybind11 could not be located, building one instead.; -- Suitable libint could not be located, building one instead.; -- Suitable libefp could not be located, building one instead.; -- Try OpenMP C flag = [-qope",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/522#issuecomment-261733153
https://github.com/psi4/psi4/issues/522#issuecomment-261733153:2758,Integrability,message,message,2758,"g (unspecified) option CMAKE_INSTALL_LIBDIR: lib; -- Setting (unspecified) option PYMOD_INSTALL_LIBDIR: /; -- Setting (unspecified) option ENABLE_GENERIC: OFF; -- Setting (unspecified) option CMAKE_INSTALL_MESSAGE: LAZY; -- Setting (unspecified) option PSI4_CXX_STANDARD: 11; -- Found PythonInterp: /usr/bin/python (found version ""2.7.3"") ; -- Found PythonLibs: /usr/lib64/libpython2.7.so (found suitable version ""2.7.3"", minimum required is ""2"") ; -- Suitable pybind11 could not be located, building one instead.; -- Suitable libint could not be located, building one instead.; -- Suitable libefp could not be located, building one instead.; -- Try OpenMP C flag = [-qopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Success; -- Try OpenMP CXX flag = [-qopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Success; -- Found OpenMP: -qopenmp ; CMake Warning at cmake/custom_cxxstandard.cmake:22 (message):; Intel ICPC makes use of GCC (detected: 4.7; required for C++11: 4.9) so; this build won't work without GCC intervention:; https://github.com/psi4/psi4/wiki/8_FAQ_Contents#modgcc; Call Stack (most recent call first):; CMakeLists.txt:119 (include). -- Math lib search order is MKL;ESSL;ATLAS;ACML;SYSTEM_NATIVE; -- You can select a specific type by defining for instance -D BLAS_TYPE=ATLAS or -D LAPACK_TYPE=ACML; -- or by redefining MATH_LIB_SEARCH_ORDER; -- BLAS will be searched for based on MKLROOT=/software/intel/parallel_studio_xe_2017/compilers_and_libraries_2017.0.098/linux/mkl; -- Found BLAS: MKL (/software/intel/parallel_studio_xe_2017/compilers_and_libraries_2017.0.098/linux/mkl/lib/intel64/libmkl_intel_lp64.so;/software/intel/parallel_studio_xe_2017/compilers_and_libraries_2017.0.098/linux/mkl/lib/intel64/libmkl_intel_thread.so;/software/intel/parallel_studio_xe_2017/compilers_and_libraries_2017.0.098/linux/mkl/lib/intel64/libmkl_core.so;/usr/lib64/libpthread.so;/usr/lib64/libm.so); -- LAPA",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/522#issuecomment-261733153
https://github.com/psi4/psi4/issues/522#issuecomment-261733153:4367,Modifiability,Config,Configuring,4367,"FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Success; -- Try OpenMP CXX flag = [-qopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Success; -- Found OpenMP: -qopenmp ; CMake Warning at cmake/custom_cxxstandard.cmake:22 (message):; Intel ICPC makes use of GCC (detected: 4.7; required for C++11: 4.9) so; this build won't work without GCC intervention:; https://github.com/psi4/psi4/wiki/8_FAQ_Contents#modgcc; Call Stack (most recent call first):; CMakeLists.txt:119 (include). -- Math lib search order is MKL;ESSL;ATLAS;ACML;SYSTEM_NATIVE; -- You can select a specific type by defining for instance -D BLAS_TYPE=ATLAS or -D LAPACK_TYPE=ACML; -- or by redefining MATH_LIB_SEARCH_ORDER; -- BLAS will be searched for based on MKLROOT=/software/intel/parallel_studio_xe_2017/compilers_and_libraries_2017.0.098/linux/mkl; -- Found BLAS: MKL (/software/intel/parallel_studio_xe_2017/compilers_and_libraries_2017.0.098/linux/mkl/lib/intel64/libmkl_intel_lp64.so;/software/intel/parallel_studio_xe_2017/compilers_and_libraries_2017.0.098/linux/mkl/lib/intel64/libmkl_intel_thread.so;/software/intel/parallel_studio_xe_2017/compilers_and_libraries_2017.0.098/linux/mkl/lib/intel64/libmkl_core.so;/usr/lib64/libpthread.so;/usr/lib64/libm.so); -- LAPACK will be searched for based on MKLROOT=/software/intel/parallel_studio_xe_2017/compilers_and_libraries_2017.0.098/linux/mkl; -- Found LAPACK: MKL (/software/intel/parallel_studio_xe_2017/compilers_and_libraries_2017.0.098/linux/mkl/lib/intel64/libmkl_lapack95_lp64.a;/software/intel/parallel_studio_xe_2017/compilers_and_libraries_2017.0.098/linux/mkl/lib/intel64/libmkl_intel_lp64.so); -- No Doxygen, no docs.; -- Documentation targets available: sphinxman (html), sphinxmini (quick html), sphinxpdf (LaTeX --> PDF); -- Adding test cases: Psi4; -- Adding test cases: Psi4 + libefp; -- Configuring done; -- Generating done; -- Build files have been written to: /home/LUCA/psi-master_18_11_2016/psi4/bii",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/522#issuecomment-261733153
https://github.com/psi4/psi4/issues/522#issuecomment-261733153:1175,Performance,Perform,Performing,1175,"n/intel64/icc -- works; -- Detecting C compiler ABI info; -- Detecting C compiler ABI info - done; -- Check for working CXX compiler: /software/intel/parallel_studio_xe_2017/compilers_and_libraries_2017.0.098/linux/bin/intel64/icpc; -- Check for working CXX compiler: /software/intel/parallel_studio_xe_2017/compilers_and_libraries_2017.0.098/linux/bin/intel64/icpc -- works; -- Detecting CXX compiler ABI info; -- Detecting CXX compiler ABI info - done; -- Setting (unspecified) option BUILD_SHARED_LIBS: OFF; -- Setting (unspecified) option ENABLE_OPENMP: ON; -- Setting (unspecified) option ENABLE_AUTO_BLAS: ON; -- Setting (unspecified) option ENABLE_AUTO_LAPACK: ON; -- Setting (unspecified) option ENABLE_XHOST: ON; -- Performing Test CMAKE_C_FLAGS [-xHost] - Success, Appending; -- Performing Test CMAKE_CXX_FLAGS [-xHost] - Success, Appending; -- Setting (unspecified) option ENABLE_CODE_COVERAGE: OFF; -- Setting (unspecified) option ENABLE_BOUNDS_CHECK: OFF; -- Setting (unspecified) option ENABLE_ASAN: OFF; -- Setting (unspecified) option ENABLE_TSAN: OFF; -- Setting (unspecified) option ENABLE_UBSAN: OFF; -- Setting (unspecified) option MAX_AM_ERI: 5; -- Setting (unspecified) option CMAKE_BUILD_TYPE: Release; -- Setting (unspecified) option FC_SYMBOL: 2; -- Setting (unspecified) option BUILD_FPIC: ON; -- Setting (unspecified) option CMAKE_INSTALL_LIBDIR: lib; -- Setting (unspecified) option PYMOD_INSTALL_LIBDIR: /; -- Setting (unspecified) option ENABLE_GENERIC: OFF; -- Setting (unspecified) option CMAKE_INSTALL_MESSAGE: LAZY; -- Setting (unspecified) option PSI4_CXX_STANDARD: 11; -- Found PythonInterp: /usr/bin/python (found version ""2.7.3"") ; -- Found PythonLibs: /usr/lib64/libpython2.7.so (found suitable version ""2.7.3"", minimum required is ""2"") ; -- Suitable pybind11 could not be located, building one instead.; -- Suitable libint could not be located, building one instead.; -- Suitable libefp could not be located, building one instead.; -- Try OpenMP C flag = [-qope",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/522#issuecomment-261733153
https://github.com/psi4/psi4/issues/522#issuecomment-261733153:1239,Performance,Perform,Performing,1239,"n/intel64/icc -- works; -- Detecting C compiler ABI info; -- Detecting C compiler ABI info - done; -- Check for working CXX compiler: /software/intel/parallel_studio_xe_2017/compilers_and_libraries_2017.0.098/linux/bin/intel64/icpc; -- Check for working CXX compiler: /software/intel/parallel_studio_xe_2017/compilers_and_libraries_2017.0.098/linux/bin/intel64/icpc -- works; -- Detecting CXX compiler ABI info; -- Detecting CXX compiler ABI info - done; -- Setting (unspecified) option BUILD_SHARED_LIBS: OFF; -- Setting (unspecified) option ENABLE_OPENMP: ON; -- Setting (unspecified) option ENABLE_AUTO_BLAS: ON; -- Setting (unspecified) option ENABLE_AUTO_LAPACK: ON; -- Setting (unspecified) option ENABLE_XHOST: ON; -- Performing Test CMAKE_C_FLAGS [-xHost] - Success, Appending; -- Performing Test CMAKE_CXX_FLAGS [-xHost] - Success, Appending; -- Setting (unspecified) option ENABLE_CODE_COVERAGE: OFF; -- Setting (unspecified) option ENABLE_BOUNDS_CHECK: OFF; -- Setting (unspecified) option ENABLE_ASAN: OFF; -- Setting (unspecified) option ENABLE_TSAN: OFF; -- Setting (unspecified) option ENABLE_UBSAN: OFF; -- Setting (unspecified) option MAX_AM_ERI: 5; -- Setting (unspecified) option CMAKE_BUILD_TYPE: Release; -- Setting (unspecified) option FC_SYMBOL: 2; -- Setting (unspecified) option BUILD_FPIC: ON; -- Setting (unspecified) option CMAKE_INSTALL_LIBDIR: lib; -- Setting (unspecified) option PYMOD_INSTALL_LIBDIR: /; -- Setting (unspecified) option ENABLE_GENERIC: OFF; -- Setting (unspecified) option CMAKE_INSTALL_MESSAGE: LAZY; -- Setting (unspecified) option PSI4_CXX_STANDARD: 11; -- Found PythonInterp: /usr/bin/python (found version ""2.7.3"") ; -- Found PythonLibs: /usr/lib64/libpython2.7.so (found suitable version ""2.7.3"", minimum required is ""2"") ; -- Suitable pybind11 could not be located, building one instead.; -- Suitable libint could not be located, building one instead.; -- Suitable libefp could not be located, building one instead.; -- Try OpenMP C flag = [-qope",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/522#issuecomment-261733153
https://github.com/psi4/psi4/issues/522#issuecomment-261733153:2460,Performance,Perform,Performing,2460,"specified) option MAX_AM_ERI: 5; -- Setting (unspecified) option CMAKE_BUILD_TYPE: Release; -- Setting (unspecified) option FC_SYMBOL: 2; -- Setting (unspecified) option BUILD_FPIC: ON; -- Setting (unspecified) option CMAKE_INSTALL_LIBDIR: lib; -- Setting (unspecified) option PYMOD_INSTALL_LIBDIR: /; -- Setting (unspecified) option ENABLE_GENERIC: OFF; -- Setting (unspecified) option CMAKE_INSTALL_MESSAGE: LAZY; -- Setting (unspecified) option PSI4_CXX_STANDARD: 11; -- Found PythonInterp: /usr/bin/python (found version ""2.7.3"") ; -- Found PythonLibs: /usr/lib64/libpython2.7.so (found suitable version ""2.7.3"", minimum required is ""2"") ; -- Suitable pybind11 could not be located, building one instead.; -- Suitable libint could not be located, building one instead.; -- Suitable libefp could not be located, building one instead.; -- Try OpenMP C flag = [-qopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Success; -- Try OpenMP CXX flag = [-qopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Success; -- Found OpenMP: -qopenmp ; CMake Warning at cmake/custom_cxxstandard.cmake:22 (message):; Intel ICPC makes use of GCC (detected: 4.7; required for C++11: 4.9) so; this build won't work without GCC intervention:; https://github.com/psi4/psi4/wiki/8_FAQ_Contents#modgcc; Call Stack (most recent call first):; CMakeLists.txt:119 (include). -- Math lib search order is MKL;ESSL;ATLAS;ACML;SYSTEM_NATIVE; -- You can select a specific type by defining for instance -D BLAS_TYPE=ATLAS or -D LAPACK_TYPE=ACML; -- or by redefining MATH_LIB_SEARCH_ORDER; -- BLAS will be searched for based on MKLROOT=/software/intel/parallel_studio_xe_2017/compilers_and_libraries_2017.0.098/linux/mkl; -- Found BLAS: MKL (/software/intel/parallel_studio_xe_2017/compilers_and_libraries_2017.0.098/linux/mkl/lib/intel64/libmkl_intel_lp64.so;/software/intel/parallel_studio_xe_2017/compilers_and_libraries_2017.0.098/linux/mkl/lib/i",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/522#issuecomment-261733153
https://github.com/psi4/psi4/issues/522#issuecomment-261733153:2501,Performance,Perform,Performing,2501,"specified) option MAX_AM_ERI: 5; -- Setting (unspecified) option CMAKE_BUILD_TYPE: Release; -- Setting (unspecified) option FC_SYMBOL: 2; -- Setting (unspecified) option BUILD_FPIC: ON; -- Setting (unspecified) option CMAKE_INSTALL_LIBDIR: lib; -- Setting (unspecified) option PYMOD_INSTALL_LIBDIR: /; -- Setting (unspecified) option ENABLE_GENERIC: OFF; -- Setting (unspecified) option CMAKE_INSTALL_MESSAGE: LAZY; -- Setting (unspecified) option PSI4_CXX_STANDARD: 11; -- Found PythonInterp: /usr/bin/python (found version ""2.7.3"") ; -- Found PythonLibs: /usr/lib64/libpython2.7.so (found suitable version ""2.7.3"", minimum required is ""2"") ; -- Suitable pybind11 could not be located, building one instead.; -- Suitable libint could not be located, building one instead.; -- Suitable libefp could not be located, building one instead.; -- Try OpenMP C flag = [-qopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Success; -- Try OpenMP CXX flag = [-qopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Success; -- Found OpenMP: -qopenmp ; CMake Warning at cmake/custom_cxxstandard.cmake:22 (message):; Intel ICPC makes use of GCC (detected: 4.7; required for C++11: 4.9) so; this build won't work without GCC intervention:; https://github.com/psi4/psi4/wiki/8_FAQ_Contents#modgcc; Call Stack (most recent call first):; CMakeLists.txt:119 (include). -- Math lib search order is MKL;ESSL;ATLAS;ACML;SYSTEM_NATIVE; -- You can select a specific type by defining for instance -D BLAS_TYPE=ATLAS or -D LAPACK_TYPE=ACML; -- or by redefining MATH_LIB_SEARCH_ORDER; -- BLAS will be searched for based on MKLROOT=/software/intel/parallel_studio_xe_2017/compilers_and_libraries_2017.0.098/linux/mkl; -- Found BLAS: MKL (/software/intel/parallel_studio_xe_2017/compilers_and_libraries_2017.0.098/linux/mkl/lib/intel64/libmkl_intel_lp64.so;/software/intel/parallel_studio_xe_2017/compilers_and_libraries_2017.0.098/linux/mkl/lib/i",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/522#issuecomment-261733153
https://github.com/psi4/psi4/issues/522#issuecomment-261733153:2589,Performance,Perform,Performing,2589,"specified) option MAX_AM_ERI: 5; -- Setting (unspecified) option CMAKE_BUILD_TYPE: Release; -- Setting (unspecified) option FC_SYMBOL: 2; -- Setting (unspecified) option BUILD_FPIC: ON; -- Setting (unspecified) option CMAKE_INSTALL_LIBDIR: lib; -- Setting (unspecified) option PYMOD_INSTALL_LIBDIR: /; -- Setting (unspecified) option ENABLE_GENERIC: OFF; -- Setting (unspecified) option CMAKE_INSTALL_MESSAGE: LAZY; -- Setting (unspecified) option PSI4_CXX_STANDARD: 11; -- Found PythonInterp: /usr/bin/python (found version ""2.7.3"") ; -- Found PythonLibs: /usr/lib64/libpython2.7.so (found suitable version ""2.7.3"", minimum required is ""2"") ; -- Suitable pybind11 could not be located, building one instead.; -- Suitable libint could not be located, building one instead.; -- Suitable libefp could not be located, building one instead.; -- Try OpenMP C flag = [-qopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Success; -- Try OpenMP CXX flag = [-qopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Success; -- Found OpenMP: -qopenmp ; CMake Warning at cmake/custom_cxxstandard.cmake:22 (message):; Intel ICPC makes use of GCC (detected: 4.7; required for C++11: 4.9) so; this build won't work without GCC intervention:; https://github.com/psi4/psi4/wiki/8_FAQ_Contents#modgcc; Call Stack (most recent call first):; CMakeLists.txt:119 (include). -- Math lib search order is MKL;ESSL;ATLAS;ACML;SYSTEM_NATIVE; -- You can select a specific type by defining for instance -D BLAS_TYPE=ATLAS or -D LAPACK_TYPE=ACML; -- or by redefining MATH_LIB_SEARCH_ORDER; -- BLAS will be searched for based on MKLROOT=/software/intel/parallel_studio_xe_2017/compilers_and_libraries_2017.0.098/linux/mkl; -- Found BLAS: MKL (/software/intel/parallel_studio_xe_2017/compilers_and_libraries_2017.0.098/linux/mkl/lib/intel64/libmkl_intel_lp64.so;/software/intel/parallel_studio_xe_2017/compilers_and_libraries_2017.0.098/linux/mkl/lib/i",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/522#issuecomment-261733153
https://github.com/psi4/psi4/issues/522#issuecomment-261733153:2630,Performance,Perform,Performing,2630,"specified) option MAX_AM_ERI: 5; -- Setting (unspecified) option CMAKE_BUILD_TYPE: Release; -- Setting (unspecified) option FC_SYMBOL: 2; -- Setting (unspecified) option BUILD_FPIC: ON; -- Setting (unspecified) option CMAKE_INSTALL_LIBDIR: lib; -- Setting (unspecified) option PYMOD_INSTALL_LIBDIR: /; -- Setting (unspecified) option ENABLE_GENERIC: OFF; -- Setting (unspecified) option CMAKE_INSTALL_MESSAGE: LAZY; -- Setting (unspecified) option PSI4_CXX_STANDARD: 11; -- Found PythonInterp: /usr/bin/python (found version ""2.7.3"") ; -- Found PythonLibs: /usr/lib64/libpython2.7.so (found suitable version ""2.7.3"", minimum required is ""2"") ; -- Suitable pybind11 could not be located, building one instead.; -- Suitable libint could not be located, building one instead.; -- Suitable libefp could not be located, building one instead.; -- Try OpenMP C flag = [-qopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Success; -- Try OpenMP CXX flag = [-qopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Success; -- Found OpenMP: -qopenmp ; CMake Warning at cmake/custom_cxxstandard.cmake:22 (message):; Intel ICPC makes use of GCC (detected: 4.7; required for C++11: 4.9) so; this build won't work without GCC intervention:; https://github.com/psi4/psi4/wiki/8_FAQ_Contents#modgcc; Call Stack (most recent call first):; CMakeLists.txt:119 (include). -- Math lib search order is MKL;ESSL;ATLAS;ACML;SYSTEM_NATIVE; -- You can select a specific type by defining for instance -D BLAS_TYPE=ATLAS or -D LAPACK_TYPE=ACML; -- or by redefining MATH_LIB_SEARCH_ORDER; -- BLAS will be searched for based on MKLROOT=/software/intel/parallel_studio_xe_2017/compilers_and_libraries_2017.0.098/linux/mkl; -- Found BLAS: MKL (/software/intel/parallel_studio_xe_2017/compilers_and_libraries_2017.0.098/linux/mkl/lib/intel64/libmkl_intel_lp64.so;/software/intel/parallel_studio_xe_2017/compilers_and_libraries_2017.0.098/linux/mkl/lib/i",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/522#issuecomment-261733153
https://github.com/psi4/psi4/issues/522#issuecomment-261733153:477,Safety,Detect,Detecting,477,"This is the output of my cmake : ; It seems to be fine. CXX=icpc CC=icc cmake .. ; -- The C compiler identification is Intel 17.0.0.20160721; -- The CXX compiler identification is Intel 17.0.0.20160721; -- Check for working C compiler: /software/intel/parallel_studio_xe_2017/compilers_and_libraries_2017.0.098/linux/bin/intel64/icc; -- Check for working C compiler: /software/intel/parallel_studio_xe_2017/compilers_and_libraries_2017.0.098/linux/bin/intel64/icc -- works; -- Detecting C compiler ABI info; -- Detecting C compiler ABI info - done; -- Check for working CXX compiler: /software/intel/parallel_studio_xe_2017/compilers_and_libraries_2017.0.098/linux/bin/intel64/icpc; -- Check for working CXX compiler: /software/intel/parallel_studio_xe_2017/compilers_and_libraries_2017.0.098/linux/bin/intel64/icpc -- works; -- Detecting CXX compiler ABI info; -- Detecting CXX compiler ABI info - done; -- Setting (unspecified) option BUILD_SHARED_LIBS: OFF; -- Setting (unspecified) option ENABLE_OPENMP: ON; -- Setting (unspecified) option ENABLE_AUTO_BLAS: ON; -- Setting (unspecified) option ENABLE_AUTO_LAPACK: ON; -- Setting (unspecified) option ENABLE_XHOST: ON; -- Performing Test CMAKE_C_FLAGS [-xHost] - Success, Appending; -- Performing Test CMAKE_CXX_FLAGS [-xHost] - Success, Appending; -- Setting (unspecified) option ENABLE_CODE_COVERAGE: OFF; -- Setting (unspecified) option ENABLE_BOUNDS_CHECK: OFF; -- Setting (unspecified) option ENABLE_ASAN: OFF; -- Setting (unspecified) option ENABLE_TSAN: OFF; -- Setting (unspecified) option ENABLE_UBSAN: OFF; -- Setting (unspecified) option MAX_AM_ERI: 5; -- Setting (unspecified) option CMAKE_BUILD_TYPE: Release; -- Setting (unspecified) option FC_SYMBOL: 2; -- Setting (unspecified) option BUILD_FPIC: ON; -- Setting (unspecified) option CMAKE_INSTALL_LIBDIR: lib; -- Setting (unspecified) option PYMOD_INSTALL_LIBDIR: /; -- Setting (unspecified) option ENABLE_GENERIC: OFF; -- Setting (unspecified) option CMAKE_INSTALL_MESSAGE: LAZY; -",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/522#issuecomment-261733153
https://github.com/psi4/psi4/issues/522#issuecomment-261733153:511,Safety,Detect,Detecting,511,"This is the output of my cmake : ; It seems to be fine. CXX=icpc CC=icc cmake .. ; -- The C compiler identification is Intel 17.0.0.20160721; -- The CXX compiler identification is Intel 17.0.0.20160721; -- Check for working C compiler: /software/intel/parallel_studio_xe_2017/compilers_and_libraries_2017.0.098/linux/bin/intel64/icc; -- Check for working C compiler: /software/intel/parallel_studio_xe_2017/compilers_and_libraries_2017.0.098/linux/bin/intel64/icc -- works; -- Detecting C compiler ABI info; -- Detecting C compiler ABI info - done; -- Check for working CXX compiler: /software/intel/parallel_studio_xe_2017/compilers_and_libraries_2017.0.098/linux/bin/intel64/icpc; -- Check for working CXX compiler: /software/intel/parallel_studio_xe_2017/compilers_and_libraries_2017.0.098/linux/bin/intel64/icpc -- works; -- Detecting CXX compiler ABI info; -- Detecting CXX compiler ABI info - done; -- Setting (unspecified) option BUILD_SHARED_LIBS: OFF; -- Setting (unspecified) option ENABLE_OPENMP: ON; -- Setting (unspecified) option ENABLE_AUTO_BLAS: ON; -- Setting (unspecified) option ENABLE_AUTO_LAPACK: ON; -- Setting (unspecified) option ENABLE_XHOST: ON; -- Performing Test CMAKE_C_FLAGS [-xHost] - Success, Appending; -- Performing Test CMAKE_CXX_FLAGS [-xHost] - Success, Appending; -- Setting (unspecified) option ENABLE_CODE_COVERAGE: OFF; -- Setting (unspecified) option ENABLE_BOUNDS_CHECK: OFF; -- Setting (unspecified) option ENABLE_ASAN: OFF; -- Setting (unspecified) option ENABLE_TSAN: OFF; -- Setting (unspecified) option ENABLE_UBSAN: OFF; -- Setting (unspecified) option MAX_AM_ERI: 5; -- Setting (unspecified) option CMAKE_BUILD_TYPE: Release; -- Setting (unspecified) option FC_SYMBOL: 2; -- Setting (unspecified) option BUILD_FPIC: ON; -- Setting (unspecified) option CMAKE_INSTALL_LIBDIR: lib; -- Setting (unspecified) option PYMOD_INSTALL_LIBDIR: /; -- Setting (unspecified) option ENABLE_GENERIC: OFF; -- Setting (unspecified) option CMAKE_INSTALL_MESSAGE: LAZY; -",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/522#issuecomment-261733153
https://github.com/psi4/psi4/issues/522#issuecomment-261733153:829,Safety,Detect,Detecting,829,"n/intel64/icc -- works; -- Detecting C compiler ABI info; -- Detecting C compiler ABI info - done; -- Check for working CXX compiler: /software/intel/parallel_studio_xe_2017/compilers_and_libraries_2017.0.098/linux/bin/intel64/icpc; -- Check for working CXX compiler: /software/intel/parallel_studio_xe_2017/compilers_and_libraries_2017.0.098/linux/bin/intel64/icpc -- works; -- Detecting CXX compiler ABI info; -- Detecting CXX compiler ABI info - done; -- Setting (unspecified) option BUILD_SHARED_LIBS: OFF; -- Setting (unspecified) option ENABLE_OPENMP: ON; -- Setting (unspecified) option ENABLE_AUTO_BLAS: ON; -- Setting (unspecified) option ENABLE_AUTO_LAPACK: ON; -- Setting (unspecified) option ENABLE_XHOST: ON; -- Performing Test CMAKE_C_FLAGS [-xHost] - Success, Appending; -- Performing Test CMAKE_CXX_FLAGS [-xHost] - Success, Appending; -- Setting (unspecified) option ENABLE_CODE_COVERAGE: OFF; -- Setting (unspecified) option ENABLE_BOUNDS_CHECK: OFF; -- Setting (unspecified) option ENABLE_ASAN: OFF; -- Setting (unspecified) option ENABLE_TSAN: OFF; -- Setting (unspecified) option ENABLE_UBSAN: OFF; -- Setting (unspecified) option MAX_AM_ERI: 5; -- Setting (unspecified) option CMAKE_BUILD_TYPE: Release; -- Setting (unspecified) option FC_SYMBOL: 2; -- Setting (unspecified) option BUILD_FPIC: ON; -- Setting (unspecified) option CMAKE_INSTALL_LIBDIR: lib; -- Setting (unspecified) option PYMOD_INSTALL_LIBDIR: /; -- Setting (unspecified) option ENABLE_GENERIC: OFF; -- Setting (unspecified) option CMAKE_INSTALL_MESSAGE: LAZY; -- Setting (unspecified) option PSI4_CXX_STANDARD: 11; -- Found PythonInterp: /usr/bin/python (found version ""2.7.3"") ; -- Found PythonLibs: /usr/lib64/libpython2.7.so (found suitable version ""2.7.3"", minimum required is ""2"") ; -- Suitable pybind11 could not be located, building one instead.; -- Suitable libint could not be located, building one instead.; -- Suitable libefp could not be located, building one instead.; -- Try OpenMP C flag = [-qope",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/522#issuecomment-261733153
https://github.com/psi4/psi4/issues/522#issuecomment-261733153:865,Safety,Detect,Detecting,865,"n/intel64/icc -- works; -- Detecting C compiler ABI info; -- Detecting C compiler ABI info - done; -- Check for working CXX compiler: /software/intel/parallel_studio_xe_2017/compilers_and_libraries_2017.0.098/linux/bin/intel64/icpc; -- Check for working CXX compiler: /software/intel/parallel_studio_xe_2017/compilers_and_libraries_2017.0.098/linux/bin/intel64/icpc -- works; -- Detecting CXX compiler ABI info; -- Detecting CXX compiler ABI info - done; -- Setting (unspecified) option BUILD_SHARED_LIBS: OFF; -- Setting (unspecified) option ENABLE_OPENMP: ON; -- Setting (unspecified) option ENABLE_AUTO_BLAS: ON; -- Setting (unspecified) option ENABLE_AUTO_LAPACK: ON; -- Setting (unspecified) option ENABLE_XHOST: ON; -- Performing Test CMAKE_C_FLAGS [-xHost] - Success, Appending; -- Performing Test CMAKE_CXX_FLAGS [-xHost] - Success, Appending; -- Setting (unspecified) option ENABLE_CODE_COVERAGE: OFF; -- Setting (unspecified) option ENABLE_BOUNDS_CHECK: OFF; -- Setting (unspecified) option ENABLE_ASAN: OFF; -- Setting (unspecified) option ENABLE_TSAN: OFF; -- Setting (unspecified) option ENABLE_UBSAN: OFF; -- Setting (unspecified) option MAX_AM_ERI: 5; -- Setting (unspecified) option CMAKE_BUILD_TYPE: Release; -- Setting (unspecified) option FC_SYMBOL: 2; -- Setting (unspecified) option BUILD_FPIC: ON; -- Setting (unspecified) option CMAKE_INSTALL_LIBDIR: lib; -- Setting (unspecified) option PYMOD_INSTALL_LIBDIR: /; -- Setting (unspecified) option ENABLE_GENERIC: OFF; -- Setting (unspecified) option CMAKE_INSTALL_MESSAGE: LAZY; -- Setting (unspecified) option PSI4_CXX_STANDARD: 11; -- Found PythonInterp: /usr/bin/python (found version ""2.7.3"") ; -- Found PythonLibs: /usr/lib64/libpython2.7.so (found suitable version ""2.7.3"", minimum required is ""2"") ; -- Suitable pybind11 could not be located, building one instead.; -- Suitable libint could not be located, building one instead.; -- Suitable libefp could not be located, building one instead.; -- Try OpenMP C flag = [-qope",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/522#issuecomment-261733153
https://github.com/psi4/psi4/issues/522#issuecomment-261733153:2798,Safety,detect,detected,2798,"g (unspecified) option CMAKE_INSTALL_LIBDIR: lib; -- Setting (unspecified) option PYMOD_INSTALL_LIBDIR: /; -- Setting (unspecified) option ENABLE_GENERIC: OFF; -- Setting (unspecified) option CMAKE_INSTALL_MESSAGE: LAZY; -- Setting (unspecified) option PSI4_CXX_STANDARD: 11; -- Found PythonInterp: /usr/bin/python (found version ""2.7.3"") ; -- Found PythonLibs: /usr/lib64/libpython2.7.so (found suitable version ""2.7.3"", minimum required is ""2"") ; -- Suitable pybind11 could not be located, building one instead.; -- Suitable libint could not be located, building one instead.; -- Suitable libefp could not be located, building one instead.; -- Try OpenMP C flag = [-qopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Success; -- Try OpenMP CXX flag = [-qopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Success; -- Found OpenMP: -qopenmp ; CMake Warning at cmake/custom_cxxstandard.cmake:22 (message):; Intel ICPC makes use of GCC (detected: 4.7; required for C++11: 4.9) so; this build won't work without GCC intervention:; https://github.com/psi4/psi4/wiki/8_FAQ_Contents#modgcc; Call Stack (most recent call first):; CMakeLists.txt:119 (include). -- Math lib search order is MKL;ESSL;ATLAS;ACML;SYSTEM_NATIVE; -- You can select a specific type by defining for instance -D BLAS_TYPE=ATLAS or -D LAPACK_TYPE=ACML; -- or by redefining MATH_LIB_SEARCH_ORDER; -- BLAS will be searched for based on MKLROOT=/software/intel/parallel_studio_xe_2017/compilers_and_libraries_2017.0.098/linux/mkl; -- Found BLAS: MKL (/software/intel/parallel_studio_xe_2017/compilers_and_libraries_2017.0.098/linux/mkl/lib/intel64/libmkl_intel_lp64.so;/software/intel/parallel_studio_xe_2017/compilers_and_libraries_2017.0.098/linux/mkl/lib/intel64/libmkl_intel_thread.so;/software/intel/parallel_studio_xe_2017/compilers_and_libraries_2017.0.098/linux/mkl/lib/intel64/libmkl_core.so;/usr/lib64/libpthread.so;/usr/lib64/libm.so); -- LAPA",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/522#issuecomment-261733153
https://github.com/psi4/psi4/issues/522#issuecomment-261733153:1186,Testability,Test,Test,1186,"n/intel64/icc -- works; -- Detecting C compiler ABI info; -- Detecting C compiler ABI info - done; -- Check for working CXX compiler: /software/intel/parallel_studio_xe_2017/compilers_and_libraries_2017.0.098/linux/bin/intel64/icpc; -- Check for working CXX compiler: /software/intel/parallel_studio_xe_2017/compilers_and_libraries_2017.0.098/linux/bin/intel64/icpc -- works; -- Detecting CXX compiler ABI info; -- Detecting CXX compiler ABI info - done; -- Setting (unspecified) option BUILD_SHARED_LIBS: OFF; -- Setting (unspecified) option ENABLE_OPENMP: ON; -- Setting (unspecified) option ENABLE_AUTO_BLAS: ON; -- Setting (unspecified) option ENABLE_AUTO_LAPACK: ON; -- Setting (unspecified) option ENABLE_XHOST: ON; -- Performing Test CMAKE_C_FLAGS [-xHost] - Success, Appending; -- Performing Test CMAKE_CXX_FLAGS [-xHost] - Success, Appending; -- Setting (unspecified) option ENABLE_CODE_COVERAGE: OFF; -- Setting (unspecified) option ENABLE_BOUNDS_CHECK: OFF; -- Setting (unspecified) option ENABLE_ASAN: OFF; -- Setting (unspecified) option ENABLE_TSAN: OFF; -- Setting (unspecified) option ENABLE_UBSAN: OFF; -- Setting (unspecified) option MAX_AM_ERI: 5; -- Setting (unspecified) option CMAKE_BUILD_TYPE: Release; -- Setting (unspecified) option FC_SYMBOL: 2; -- Setting (unspecified) option BUILD_FPIC: ON; -- Setting (unspecified) option CMAKE_INSTALL_LIBDIR: lib; -- Setting (unspecified) option PYMOD_INSTALL_LIBDIR: /; -- Setting (unspecified) option ENABLE_GENERIC: OFF; -- Setting (unspecified) option CMAKE_INSTALL_MESSAGE: LAZY; -- Setting (unspecified) option PSI4_CXX_STANDARD: 11; -- Found PythonInterp: /usr/bin/python (found version ""2.7.3"") ; -- Found PythonLibs: /usr/lib64/libpython2.7.so (found suitable version ""2.7.3"", minimum required is ""2"") ; -- Suitable pybind11 could not be located, building one instead.; -- Suitable libint could not be located, building one instead.; -- Suitable libefp could not be located, building one instead.; -- Try OpenMP C flag = [-qope",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/522#issuecomment-261733153
https://github.com/psi4/psi4/issues/522#issuecomment-261733153:1250,Testability,Test,Test,1250,"n/intel64/icc -- works; -- Detecting C compiler ABI info; -- Detecting C compiler ABI info - done; -- Check for working CXX compiler: /software/intel/parallel_studio_xe_2017/compilers_and_libraries_2017.0.098/linux/bin/intel64/icpc; -- Check for working CXX compiler: /software/intel/parallel_studio_xe_2017/compilers_and_libraries_2017.0.098/linux/bin/intel64/icpc -- works; -- Detecting CXX compiler ABI info; -- Detecting CXX compiler ABI info - done; -- Setting (unspecified) option BUILD_SHARED_LIBS: OFF; -- Setting (unspecified) option ENABLE_OPENMP: ON; -- Setting (unspecified) option ENABLE_AUTO_BLAS: ON; -- Setting (unspecified) option ENABLE_AUTO_LAPACK: ON; -- Setting (unspecified) option ENABLE_XHOST: ON; -- Performing Test CMAKE_C_FLAGS [-xHost] - Success, Appending; -- Performing Test CMAKE_CXX_FLAGS [-xHost] - Success, Appending; -- Setting (unspecified) option ENABLE_CODE_COVERAGE: OFF; -- Setting (unspecified) option ENABLE_BOUNDS_CHECK: OFF; -- Setting (unspecified) option ENABLE_ASAN: OFF; -- Setting (unspecified) option ENABLE_TSAN: OFF; -- Setting (unspecified) option ENABLE_UBSAN: OFF; -- Setting (unspecified) option MAX_AM_ERI: 5; -- Setting (unspecified) option CMAKE_BUILD_TYPE: Release; -- Setting (unspecified) option FC_SYMBOL: 2; -- Setting (unspecified) option BUILD_FPIC: ON; -- Setting (unspecified) option CMAKE_INSTALL_LIBDIR: lib; -- Setting (unspecified) option PYMOD_INSTALL_LIBDIR: /; -- Setting (unspecified) option ENABLE_GENERIC: OFF; -- Setting (unspecified) option CMAKE_INSTALL_MESSAGE: LAZY; -- Setting (unspecified) option PSI4_CXX_STANDARD: 11; -- Found PythonInterp: /usr/bin/python (found version ""2.7.3"") ; -- Found PythonLibs: /usr/lib64/libpython2.7.so (found suitable version ""2.7.3"", minimum required is ""2"") ; -- Suitable pybind11 could not be located, building one instead.; -- Suitable libint could not be located, building one instead.; -- Suitable libefp could not be located, building one instead.; -- Try OpenMP C flag = [-qope",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/522#issuecomment-261733153
https://github.com/psi4/psi4/issues/522#issuecomment-261733153:2471,Testability,Test,Test,2471,"specified) option MAX_AM_ERI: 5; -- Setting (unspecified) option CMAKE_BUILD_TYPE: Release; -- Setting (unspecified) option FC_SYMBOL: 2; -- Setting (unspecified) option BUILD_FPIC: ON; -- Setting (unspecified) option CMAKE_INSTALL_LIBDIR: lib; -- Setting (unspecified) option PYMOD_INSTALL_LIBDIR: /; -- Setting (unspecified) option ENABLE_GENERIC: OFF; -- Setting (unspecified) option CMAKE_INSTALL_MESSAGE: LAZY; -- Setting (unspecified) option PSI4_CXX_STANDARD: 11; -- Found PythonInterp: /usr/bin/python (found version ""2.7.3"") ; -- Found PythonLibs: /usr/lib64/libpython2.7.so (found suitable version ""2.7.3"", minimum required is ""2"") ; -- Suitable pybind11 could not be located, building one instead.; -- Suitable libint could not be located, building one instead.; -- Suitable libefp could not be located, building one instead.; -- Try OpenMP C flag = [-qopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Success; -- Try OpenMP CXX flag = [-qopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Success; -- Found OpenMP: -qopenmp ; CMake Warning at cmake/custom_cxxstandard.cmake:22 (message):; Intel ICPC makes use of GCC (detected: 4.7; required for C++11: 4.9) so; this build won't work without GCC intervention:; https://github.com/psi4/psi4/wiki/8_FAQ_Contents#modgcc; Call Stack (most recent call first):; CMakeLists.txt:119 (include). -- Math lib search order is MKL;ESSL;ATLAS;ACML;SYSTEM_NATIVE; -- You can select a specific type by defining for instance -D BLAS_TYPE=ATLAS or -D LAPACK_TYPE=ACML; -- or by redefining MATH_LIB_SEARCH_ORDER; -- BLAS will be searched for based on MKLROOT=/software/intel/parallel_studio_xe_2017/compilers_and_libraries_2017.0.098/linux/mkl; -- Found BLAS: MKL (/software/intel/parallel_studio_xe_2017/compilers_and_libraries_2017.0.098/linux/mkl/lib/intel64/libmkl_intel_lp64.so;/software/intel/parallel_studio_xe_2017/compilers_and_libraries_2017.0.098/linux/mkl/lib/i",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/522#issuecomment-261733153
https://github.com/psi4/psi4/issues/522#issuecomment-261733153:2512,Testability,Test,Test,2512,"specified) option MAX_AM_ERI: 5; -- Setting (unspecified) option CMAKE_BUILD_TYPE: Release; -- Setting (unspecified) option FC_SYMBOL: 2; -- Setting (unspecified) option BUILD_FPIC: ON; -- Setting (unspecified) option CMAKE_INSTALL_LIBDIR: lib; -- Setting (unspecified) option PYMOD_INSTALL_LIBDIR: /; -- Setting (unspecified) option ENABLE_GENERIC: OFF; -- Setting (unspecified) option CMAKE_INSTALL_MESSAGE: LAZY; -- Setting (unspecified) option PSI4_CXX_STANDARD: 11; -- Found PythonInterp: /usr/bin/python (found version ""2.7.3"") ; -- Found PythonLibs: /usr/lib64/libpython2.7.so (found suitable version ""2.7.3"", minimum required is ""2"") ; -- Suitable pybind11 could not be located, building one instead.; -- Suitable libint could not be located, building one instead.; -- Suitable libefp could not be located, building one instead.; -- Try OpenMP C flag = [-qopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Success; -- Try OpenMP CXX flag = [-qopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Success; -- Found OpenMP: -qopenmp ; CMake Warning at cmake/custom_cxxstandard.cmake:22 (message):; Intel ICPC makes use of GCC (detected: 4.7; required for C++11: 4.9) so; this build won't work without GCC intervention:; https://github.com/psi4/psi4/wiki/8_FAQ_Contents#modgcc; Call Stack (most recent call first):; CMakeLists.txt:119 (include). -- Math lib search order is MKL;ESSL;ATLAS;ACML;SYSTEM_NATIVE; -- You can select a specific type by defining for instance -D BLAS_TYPE=ATLAS or -D LAPACK_TYPE=ACML; -- or by redefining MATH_LIB_SEARCH_ORDER; -- BLAS will be searched for based on MKLROOT=/software/intel/parallel_studio_xe_2017/compilers_and_libraries_2017.0.098/linux/mkl; -- Found BLAS: MKL (/software/intel/parallel_studio_xe_2017/compilers_and_libraries_2017.0.098/linux/mkl/lib/intel64/libmkl_intel_lp64.so;/software/intel/parallel_studio_xe_2017/compilers_and_libraries_2017.0.098/linux/mkl/lib/i",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/522#issuecomment-261733153
https://github.com/psi4/psi4/issues/522#issuecomment-261733153:2600,Testability,Test,Test,2600,"specified) option MAX_AM_ERI: 5; -- Setting (unspecified) option CMAKE_BUILD_TYPE: Release; -- Setting (unspecified) option FC_SYMBOL: 2; -- Setting (unspecified) option BUILD_FPIC: ON; -- Setting (unspecified) option CMAKE_INSTALL_LIBDIR: lib; -- Setting (unspecified) option PYMOD_INSTALL_LIBDIR: /; -- Setting (unspecified) option ENABLE_GENERIC: OFF; -- Setting (unspecified) option CMAKE_INSTALL_MESSAGE: LAZY; -- Setting (unspecified) option PSI4_CXX_STANDARD: 11; -- Found PythonInterp: /usr/bin/python (found version ""2.7.3"") ; -- Found PythonLibs: /usr/lib64/libpython2.7.so (found suitable version ""2.7.3"", minimum required is ""2"") ; -- Suitable pybind11 could not be located, building one instead.; -- Suitable libint could not be located, building one instead.; -- Suitable libefp could not be located, building one instead.; -- Try OpenMP C flag = [-qopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Success; -- Try OpenMP CXX flag = [-qopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Success; -- Found OpenMP: -qopenmp ; CMake Warning at cmake/custom_cxxstandard.cmake:22 (message):; Intel ICPC makes use of GCC (detected: 4.7; required for C++11: 4.9) so; this build won't work without GCC intervention:; https://github.com/psi4/psi4/wiki/8_FAQ_Contents#modgcc; Call Stack (most recent call first):; CMakeLists.txt:119 (include). -- Math lib search order is MKL;ESSL;ATLAS;ACML;SYSTEM_NATIVE; -- You can select a specific type by defining for instance -D BLAS_TYPE=ATLAS or -D LAPACK_TYPE=ACML; -- or by redefining MATH_LIB_SEARCH_ORDER; -- BLAS will be searched for based on MKLROOT=/software/intel/parallel_studio_xe_2017/compilers_and_libraries_2017.0.098/linux/mkl; -- Found BLAS: MKL (/software/intel/parallel_studio_xe_2017/compilers_and_libraries_2017.0.098/linux/mkl/lib/intel64/libmkl_intel_lp64.so;/software/intel/parallel_studio_xe_2017/compilers_and_libraries_2017.0.098/linux/mkl/lib/i",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/522#issuecomment-261733153
https://github.com/psi4/psi4/issues/522#issuecomment-261733153:2641,Testability,Test,Test,2641,"specified) option MAX_AM_ERI: 5; -- Setting (unspecified) option CMAKE_BUILD_TYPE: Release; -- Setting (unspecified) option FC_SYMBOL: 2; -- Setting (unspecified) option BUILD_FPIC: ON; -- Setting (unspecified) option CMAKE_INSTALL_LIBDIR: lib; -- Setting (unspecified) option PYMOD_INSTALL_LIBDIR: /; -- Setting (unspecified) option ENABLE_GENERIC: OFF; -- Setting (unspecified) option CMAKE_INSTALL_MESSAGE: LAZY; -- Setting (unspecified) option PSI4_CXX_STANDARD: 11; -- Found PythonInterp: /usr/bin/python (found version ""2.7.3"") ; -- Found PythonLibs: /usr/lib64/libpython2.7.so (found suitable version ""2.7.3"", minimum required is ""2"") ; -- Suitable pybind11 could not be located, building one instead.; -- Suitable libint could not be located, building one instead.; -- Suitable libefp could not be located, building one instead.; -- Try OpenMP C flag = [-qopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Success; -- Try OpenMP CXX flag = [-qopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Success; -- Found OpenMP: -qopenmp ; CMake Warning at cmake/custom_cxxstandard.cmake:22 (message):; Intel ICPC makes use of GCC (detected: 4.7; required for C++11: 4.9) so; this build won't work without GCC intervention:; https://github.com/psi4/psi4/wiki/8_FAQ_Contents#modgcc; Call Stack (most recent call first):; CMakeLists.txt:119 (include). -- Math lib search order is MKL;ESSL;ATLAS;ACML;SYSTEM_NATIVE; -- You can select a specific type by defining for instance -D BLAS_TYPE=ATLAS or -D LAPACK_TYPE=ACML; -- or by redefining MATH_LIB_SEARCH_ORDER; -- BLAS will be searched for based on MKLROOT=/software/intel/parallel_studio_xe_2017/compilers_and_libraries_2017.0.098/linux/mkl; -- Found BLAS: MKL (/software/intel/parallel_studio_xe_2017/compilers_and_libraries_2017.0.098/linux/mkl/lib/intel64/libmkl_intel_lp64.so;/software/intel/parallel_studio_xe_2017/compilers_and_libraries_2017.0.098/linux/mkl/lib/i",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/522#issuecomment-261733153
https://github.com/psi4/psi4/issues/522#issuecomment-261733153:4309,Testability,test,test,4309,"FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Success; -- Try OpenMP CXX flag = [-qopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Success; -- Found OpenMP: -qopenmp ; CMake Warning at cmake/custom_cxxstandard.cmake:22 (message):; Intel ICPC makes use of GCC (detected: 4.7; required for C++11: 4.9) so; this build won't work without GCC intervention:; https://github.com/psi4/psi4/wiki/8_FAQ_Contents#modgcc; Call Stack (most recent call first):; CMakeLists.txt:119 (include). -- Math lib search order is MKL;ESSL;ATLAS;ACML;SYSTEM_NATIVE; -- You can select a specific type by defining for instance -D BLAS_TYPE=ATLAS or -D LAPACK_TYPE=ACML; -- or by redefining MATH_LIB_SEARCH_ORDER; -- BLAS will be searched for based on MKLROOT=/software/intel/parallel_studio_xe_2017/compilers_and_libraries_2017.0.098/linux/mkl; -- Found BLAS: MKL (/software/intel/parallel_studio_xe_2017/compilers_and_libraries_2017.0.098/linux/mkl/lib/intel64/libmkl_intel_lp64.so;/software/intel/parallel_studio_xe_2017/compilers_and_libraries_2017.0.098/linux/mkl/lib/intel64/libmkl_intel_thread.so;/software/intel/parallel_studio_xe_2017/compilers_and_libraries_2017.0.098/linux/mkl/lib/intel64/libmkl_core.so;/usr/lib64/libpthread.so;/usr/lib64/libm.so); -- LAPACK will be searched for based on MKLROOT=/software/intel/parallel_studio_xe_2017/compilers_and_libraries_2017.0.098/linux/mkl; -- Found LAPACK: MKL (/software/intel/parallel_studio_xe_2017/compilers_and_libraries_2017.0.098/linux/mkl/lib/intel64/libmkl_lapack95_lp64.a;/software/intel/parallel_studio_xe_2017/compilers_and_libraries_2017.0.098/linux/mkl/lib/intel64/libmkl_intel_lp64.so); -- No Doxygen, no docs.; -- Documentation targets available: sphinxman (html), sphinxmini (quick html), sphinxpdf (LaTeX --> PDF); -- Adding test cases: Psi4; -- Adding test cases: Psi4 + libefp; -- Configuring done; -- Generating done; -- Build files have been written to: /home/LUCA/psi-master_18_11_2016/psi4/bii",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/522#issuecomment-261733153
https://github.com/psi4/psi4/issues/522#issuecomment-261733153:4337,Testability,test,test,4337,"FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Success; -- Try OpenMP CXX flag = [-qopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Success; -- Found OpenMP: -qopenmp ; CMake Warning at cmake/custom_cxxstandard.cmake:22 (message):; Intel ICPC makes use of GCC (detected: 4.7; required for C++11: 4.9) so; this build won't work without GCC intervention:; https://github.com/psi4/psi4/wiki/8_FAQ_Contents#modgcc; Call Stack (most recent call first):; CMakeLists.txt:119 (include). -- Math lib search order is MKL;ESSL;ATLAS;ACML;SYSTEM_NATIVE; -- You can select a specific type by defining for instance -D BLAS_TYPE=ATLAS or -D LAPACK_TYPE=ACML; -- or by redefining MATH_LIB_SEARCH_ORDER; -- BLAS will be searched for based on MKLROOT=/software/intel/parallel_studio_xe_2017/compilers_and_libraries_2017.0.098/linux/mkl; -- Found BLAS: MKL (/software/intel/parallel_studio_xe_2017/compilers_and_libraries_2017.0.098/linux/mkl/lib/intel64/libmkl_intel_lp64.so;/software/intel/parallel_studio_xe_2017/compilers_and_libraries_2017.0.098/linux/mkl/lib/intel64/libmkl_intel_thread.so;/software/intel/parallel_studio_xe_2017/compilers_and_libraries_2017.0.098/linux/mkl/lib/intel64/libmkl_core.so;/usr/lib64/libpthread.so;/usr/lib64/libm.so); -- LAPACK will be searched for based on MKLROOT=/software/intel/parallel_studio_xe_2017/compilers_and_libraries_2017.0.098/linux/mkl; -- Found LAPACK: MKL (/software/intel/parallel_studio_xe_2017/compilers_and_libraries_2017.0.098/linux/mkl/lib/intel64/libmkl_lapack95_lp64.a;/software/intel/parallel_studio_xe_2017/compilers_and_libraries_2017.0.098/linux/mkl/lib/intel64/libmkl_intel_lp64.so); -- No Doxygen, no docs.; -- Documentation targets available: sphinxman (html), sphinxmini (quick html), sphinxpdf (LaTeX --> PDF); -- Adding test cases: Psi4; -- Adding test cases: Psi4 + libefp; -- Configuring done; -- Generating done; -- Build files have been written to: /home/LUCA/psi-master_18_11_2016/psi4/bii",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/522#issuecomment-261733153
https://github.com/psi4/psi4/issues/522#issuecomment-261733493:626,Availability,error,error,626,"Yep, gcc version is your problem. Note this part of the cmake output:. > CMake Warning at cmake/custom_cxxstandard.cmake:22 (message):; > Intel ICPC makes use of GCC (detected: 4.7; required for C++11: 4.9) so; > this build won't work without GCC intervention:; > https://github.com/psi4/psi4/wiki/8_FAQ_Contents#modgcc; > Call Stack (most recent call first):; > CMakeLists.txt:119 (include). Acquire a >=4.9 gcc according to that link (or any way you care to) and pass `gcc-name` and `gxx-name` to icc/icpc as Daniel and that link advised. After that, the cmake warning won't go away (which is why I couldn't make it a fatal error), but it will compile.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/522#issuecomment-261733493
https://github.com/psi4/psi4/issues/522#issuecomment-261733493:125,Integrability,message,message,125,"Yep, gcc version is your problem. Note this part of the cmake output:. > CMake Warning at cmake/custom_cxxstandard.cmake:22 (message):; > Intel ICPC makes use of GCC (detected: 4.7; required for C++11: 4.9) so; > this build won't work without GCC intervention:; > https://github.com/psi4/psi4/wiki/8_FAQ_Contents#modgcc; > Call Stack (most recent call first):; > CMakeLists.txt:119 (include). Acquire a >=4.9 gcc according to that link (or any way you care to) and pass `gcc-name` and `gxx-name` to icc/icpc as Daniel and that link advised. After that, the cmake warning won't go away (which is why I couldn't make it a fatal error), but it will compile.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/522#issuecomment-261733493
https://github.com/psi4/psi4/issues/522#issuecomment-261733493:167,Safety,detect,detected,167,"Yep, gcc version is your problem. Note this part of the cmake output:. > CMake Warning at cmake/custom_cxxstandard.cmake:22 (message):; > Intel ICPC makes use of GCC (detected: 4.7; required for C++11: 4.9) so; > this build won't work without GCC intervention:; > https://github.com/psi4/psi4/wiki/8_FAQ_Contents#modgcc; > Call Stack (most recent call first):; > CMakeLists.txt:119 (include). Acquire a >=4.9 gcc according to that link (or any way you care to) and pass `gcc-name` and `gxx-name` to icc/icpc as Daniel and that link advised. After that, the cmake warning won't go away (which is why I couldn't make it a fatal error), but it will compile.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/522#issuecomment-261733493
https://github.com/psi4/psi4/issues/522#issuecomment-261733525:63,Integrability,message,message,63,"Can we either move the warning to the end or make it red with `message(""${Red}This is Red${ColourReset}"")`?. Where red is `""${Esc}[31m""` or bold red `${Esc}[1;31m""`.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/522#issuecomment-261733525
https://github.com/psi4/psi4/issues/522#issuecomment-261747759:78,Availability,error,error,78,"ok, i updated to gcc_5.1.0, however when running ./psi4 : i get the following error : . Traceback (most recent call last):; File ""./psi4"", line 126, in <module>; import psi4; File ""/home/LUCA/psi-master_18_11_2016/psi4/TS/stage/usr/local/bin/../lib//psi4/**init**.py"", line 59, in <module>; raise ImportError(""{0}"".format(err)); ImportError: /home/LUCA/psi-master_18_11_2016/psi4/TS/stage/usr/local/bin/../lib//psi4/core.so: undefined symbol: __intel_avx_rep_memset. Any idea how to get rid of this ?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/522#issuecomment-261747759
https://github.com/psi4/psi4/issues/522#issuecomment-261747759:6,Deployability,update,updated,6,"ok, i updated to gcc_5.1.0, however when running ./psi4 : i get the following error : . Traceback (most recent call last):; File ""./psi4"", line 126, in <module>; import psi4; File ""/home/LUCA/psi-master_18_11_2016/psi4/TS/stage/usr/local/bin/../lib//psi4/**init**.py"", line 59, in <module>; raise ImportError(""{0}"".format(err)); ImportError: /home/LUCA/psi-master_18_11_2016/psi4/TS/stage/usr/local/bin/../lib//psi4/core.so: undefined symbol: __intel_avx_rep_memset. Any idea how to get rid of this ?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/522#issuecomment-261747759
https://github.com/psi4/psi4/issues/522#issuecomment-261748009:32,Usability,simpl,simply,32,"all libraries are present : ; I simply compiled gcc_5.1.0 on the cluster, and not used conda. ```; linux-vdso.so.1 (0x00007fff025ff000); libpython2.7.so.1.0 => /usr/lib64/libpython2.7.so.1.0 (0x00007f847b3c0000); libdl.so.2 => /lib64/libdl.so.2 (0x00007f847b19b000); liblapack.so.3 => /usr/lib64/liblapack.so.3 (0x00007f847a936000); libblas.so.3 => /usr/lib64/libblas.so.3 (0x00007f847a6dd000); libmkl_intel_lp64.so => /home/LUCA/intel_lib/libmkl_intel_lp64.so (0x00007f8479f95000); libmkl_intel_thread.so => /home/LUCA/intel_lib/libmkl_intel_thread.so (0x00007f8478fab000); libmkl_core.so => /home/LUCA/intel_lib/libmkl_core.so (0x00007f84778cd000); libpthread.so.0 => /lib64/libpthread.so.0 (0x00007f84776b0000); libm.so.6 => /lib64/libm.so.6 (0x00007f84773b2000); libimf.so => /home/LUCA/intel_lib/libimf.so (0x00007f8476eef000); libsvml.so => /home/LUCA/intel_lib/libsvml.so (0x00007f84762f3000); libirng.so => /home/LUCA/intel_lib/libirng.so (0x00007f84760ec000); libstdc++.so.6 => /home/LUCA/intel_lib/gcc_5.1.0/lib64/libstdc++.so.6 (0x00007f8475d69000); libiomp5.so => /home/LUCA/intel_lib/libiomp5.so (0x00007f8475a50000); libgcc_s.so.1 => /home/LUCA/intel_lib/gcc_5.1.0/lib64/libgcc_s.so.1 (0x00007f8475839000); libintlc.so.5 => /home/LUCA/intel_lib/libintlc.so.5 (0x00007f84755e3000); libc.so.6 => /lib64/libc.so.6 (0x00007f8475234000); libutil.so.1 => /lib64/libutil.so.1 (0x00007f8475031000); /lib64/ld-linux-x86-64.so.2 (0x00007f847e96c000); libgfortran.so.3 => /home/LUCA/intel_lib/gcc_5.1.0/lib64/libgfortran.so.3 (0x00007f8474d0e000); libquadmath.so.0 => /home/LUCA/intel_lib/gcc_5.1.0/lib64/libquadmath.so.0 (0x00007f8474ace000); ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/522#issuecomment-261748009
https://github.com/psi4/psi4/issues/523#issuecomment-261793389:313,Availability,avail,available,313,"The code is probably attempting to use an out-of-core algorithm for one of the contractions, because it thinks it only has the default of 500 Mb; increasing the number of frozen virtuals probably allows it to run in core, which is why that trick is successful. If you add `memory 10 Gb` (or however much you have available) to the top of your input, it should help.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/523#issuecomment-261793389
https://github.com/psi4/psi4/issues/523#issuecomment-261793389:79,Integrability,contract,contractions,79,"The code is probably attempting to use an out-of-core algorithm for one of the contractions, because it thinks it only has the default of 500 Mb; increasing the number of frozen virtuals probably allows it to run in core, which is why that trick is successful. If you add `memory 10 Gb` (or however much you have available) to the top of your input, it should help.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/523#issuecomment-261793389
https://github.com/psi4/psi4/issues/523#issuecomment-261831203:38,Energy Efficiency,adapt,adapted,38,"We have not coded explicitly the spin-adapted triplet states arising from; the EOM-CC equations starting from a singlet ground state. However, you; might be able to obtain the desired states by changing your reference to; UHF and still selecting a multiplicity of 1. The Hartree-Fock reference; should still be the same singlet state as you get from the corresponding; RHF calculation, and the EOM-CC _should_ yield both singlets and triplets.; You'll be able to sort out which is which (and make sure that everything is; running correctly) by comparing the results to the corresponding RHF-EOM-CC; calculation. -TDC. ## . Prof. T. Daniel Crawford; crawdad@vt.edu. On Sun, Nov 20, 2016 at 8:51 PM, lucamontana notifications@github.com; wrote:. > one further question :; > ; > i like to calculate the eom-ccsd triplet states starting from the; > Hartree-Fock singlet ground state.; > However i do not manage to set up an input file for such calculation.; > ; > with multiplicity 3, PSI4 starts from a triplet ground state that i do not; > want.; > Any idea how to start from the HF singlet state but calculate triplet; > excited state energies in eom-CCSD?; > ; > —; > You are receiving this because you are subscribed to this thread.; > Reply to this email directly, view it on GitHub; > https://github.com/psi4/psi4/issues/523#issuecomment-261824508, or mute; > the thread; > https://github.com/notifications/unsubscribe-auth/ACtz7VgMGDHWFRa604RIVjYHaS0a3kseks5rAPk-gaJpZM4K3iYW; > .",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/523#issuecomment-261831203
https://github.com/psi4/psi4/issues/523#issuecomment-261831203:38,Modifiability,adapt,adapted,38,"We have not coded explicitly the spin-adapted triplet states arising from; the EOM-CC equations starting from a singlet ground state. However, you; might be able to obtain the desired states by changing your reference to; UHF and still selecting a multiplicity of 1. The Hartree-Fock reference; should still be the same singlet state as you get from the corresponding; RHF calculation, and the EOM-CC _should_ yield both singlets and triplets.; You'll be able to sort out which is which (and make sure that everything is; running correctly) by comparing the results to the corresponding RHF-EOM-CC; calculation. -TDC. ## . Prof. T. Daniel Crawford; crawdad@vt.edu. On Sun, Nov 20, 2016 at 8:51 PM, lucamontana notifications@github.com; wrote:. > one further question :; > ; > i like to calculate the eom-ccsd triplet states starting from the; > Hartree-Fock singlet ground state.; > However i do not manage to set up an input file for such calculation.; > ; > with multiplicity 3, PSI4 starts from a triplet ground state that i do not; > want.; > Any idea how to start from the HF singlet state but calculate triplet; > excited state energies in eom-CCSD?; > ; > —; > You are receiving this because you are subscribed to this thread.; > Reply to this email directly, view it on GitHub; > https://github.com/psi4/psi4/issues/523#issuecomment-261824508, or mute; > the thread; > https://github.com/notifications/unsubscribe-auth/ACtz7VgMGDHWFRa604RIVjYHaS0a3kseks5rAPk-gaJpZM4K3iYW; > .",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/523#issuecomment-261831203
https://github.com/psi4/psi4/pull/524#issuecomment-261970297:170,Testability,test,tested,170,"This lgtm, but it does remind me that one fine day we should clarify/unify the role of quicktests and shorttests. There were a few, such as psithon1, that were not being tested by Travis even though they run in seconds.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/524#issuecomment-261970297
https://github.com/psi4/psi4/pull/524#issuecomment-262012104:112,Testability,test,tests,112,"I may not be impartial, but I like the CMake colors a lot. LGTM. We have been tossing around the idea of moving tests around to make a bit more sense. - quicktests - Does psi work? tu1/scf-property/dfmp2-1/sapt1/cc1/casscf-sp only; - normaltests - Best coverage possible in a 20 minute envelope. (10 minutes on 2-thread travis); - longtests - Anything that runs in 15 minutes; - no modifier - All psi tests (including the 30 minutes - 1.5 hour tests). Obviously not in this PR, but something to ponder. @robertodr I found the colors on Stackoverflow, so I would say yes :)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/524#issuecomment-262012104
https://github.com/psi4/psi4/pull/524#issuecomment-262012104:401,Testability,test,tests,401,"I may not be impartial, but I like the CMake colors a lot. LGTM. We have been tossing around the idea of moving tests around to make a bit more sense. - quicktests - Does psi work? tu1/scf-property/dfmp2-1/sapt1/cc1/casscf-sp only; - normaltests - Best coverage possible in a 20 minute envelope. (10 minutes on 2-thread travis); - longtests - Anything that runs in 15 minutes; - no modifier - All psi tests (including the 30 minutes - 1.5 hour tests). Obviously not in this PR, but something to ponder. @robertodr I found the colors on Stackoverflow, so I would say yes :)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/524#issuecomment-262012104
https://github.com/psi4/psi4/pull/524#issuecomment-262012104:444,Testability,test,tests,444,"I may not be impartial, but I like the CMake colors a lot. LGTM. We have been tossing around the idea of moving tests around to make a bit more sense. - quicktests - Does psi work? tu1/scf-property/dfmp2-1/sapt1/cc1/casscf-sp only; - normaltests - Best coverage possible in a 20 minute envelope. (10 minutes on 2-thread travis); - longtests - Anything that runs in 15 minutes; - no modifier - All psi tests (including the 30 minutes - 1.5 hour tests). Obviously not in this PR, but something to ponder. @robertodr I found the colors on Stackoverflow, so I would say yes :)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/524#issuecomment-262012104
https://github.com/psi4/psi4/pull/524#issuecomment-262017070:751,Availability,mainten,maintenance,751,"@robertodr, go for it. I put the SO link at the top of the file. I really like the colors, too. Just have to restrain myself from using them too liberally. On the test labels front, I'd suggest. #### Labels; * `optests` - ""Does psi work? tu1/scf-property/dfmp2-1/sapt1/cc1/casscf-sp only"" plus one test from each add-on and python, json, psi4numpy (""add-in""?). name definitely up for discussion.; * `quicktests` - tests that contribute to ""Best coverage possible in a 20 min envelope. (10 minutes on 2-thread travis)"" just because everyone's trained up to type ""quicktests""; * `longtests` - tests that run in 15 min or more; * in particular, if a test doesn't belong to any of the three above, it shouldn't get _any_ length label. that will help with maintenance. #### Runs; * `ctest -L optests` - runs the operational tests; * `ctest -L quicktests` - runs the decent coverage tests; * `ctest -LE longtests` - runs everything but the indiv tests that require >15 min; * `ctest` - runs ""All psi tests (including the 30 minutes - 1.5 hour tests)""",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/524#issuecomment-262017070
https://github.com/psi4/psi4/pull/524#issuecomment-262017070:163,Testability,test,test,163,"@robertodr, go for it. I put the SO link at the top of the file. I really like the colors, too. Just have to restrain myself from using them too liberally. On the test labels front, I'd suggest. #### Labels; * `optests` - ""Does psi work? tu1/scf-property/dfmp2-1/sapt1/cc1/casscf-sp only"" plus one test from each add-on and python, json, psi4numpy (""add-in""?). name definitely up for discussion.; * `quicktests` - tests that contribute to ""Best coverage possible in a 20 min envelope. (10 minutes on 2-thread travis)"" just because everyone's trained up to type ""quicktests""; * `longtests` - tests that run in 15 min or more; * in particular, if a test doesn't belong to any of the three above, it shouldn't get _any_ length label. that will help with maintenance. #### Runs; * `ctest -L optests` - runs the operational tests; * `ctest -L quicktests` - runs the decent coverage tests; * `ctest -LE longtests` - runs everything but the indiv tests that require >15 min; * `ctest` - runs ""All psi tests (including the 30 minutes - 1.5 hour tests)""",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/524#issuecomment-262017070
https://github.com/psi4/psi4/pull/524#issuecomment-262017070:298,Testability,test,test,298,"@robertodr, go for it. I put the SO link at the top of the file. I really like the colors, too. Just have to restrain myself from using them too liberally. On the test labels front, I'd suggest. #### Labels; * `optests` - ""Does psi work? tu1/scf-property/dfmp2-1/sapt1/cc1/casscf-sp only"" plus one test from each add-on and python, json, psi4numpy (""add-in""?). name definitely up for discussion.; * `quicktests` - tests that contribute to ""Best coverage possible in a 20 min envelope. (10 minutes on 2-thread travis)"" just because everyone's trained up to type ""quicktests""; * `longtests` - tests that run in 15 min or more; * in particular, if a test doesn't belong to any of the three above, it shouldn't get _any_ length label. that will help with maintenance. #### Runs; * `ctest -L optests` - runs the operational tests; * `ctest -L quicktests` - runs the decent coverage tests; * `ctest -LE longtests` - runs everything but the indiv tests that require >15 min; * `ctest` - runs ""All psi tests (including the 30 minutes - 1.5 hour tests)""",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/524#issuecomment-262017070
https://github.com/psi4/psi4/pull/524#issuecomment-262017070:414,Testability,test,tests,414,"@robertodr, go for it. I put the SO link at the top of the file. I really like the colors, too. Just have to restrain myself from using them too liberally. On the test labels front, I'd suggest. #### Labels; * `optests` - ""Does psi work? tu1/scf-property/dfmp2-1/sapt1/cc1/casscf-sp only"" plus one test from each add-on and python, json, psi4numpy (""add-in""?). name definitely up for discussion.; * `quicktests` - tests that contribute to ""Best coverage possible in a 20 min envelope. (10 minutes on 2-thread travis)"" just because everyone's trained up to type ""quicktests""; * `longtests` - tests that run in 15 min or more; * in particular, if a test doesn't belong to any of the three above, it shouldn't get _any_ length label. that will help with maintenance. #### Runs; * `ctest -L optests` - runs the operational tests; * `ctest -L quicktests` - runs the decent coverage tests; * `ctest -LE longtests` - runs everything but the indiv tests that require >15 min; * `ctest` - runs ""All psi tests (including the 30 minutes - 1.5 hour tests)""",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/524#issuecomment-262017070
https://github.com/psi4/psi4/pull/524#issuecomment-262017070:591,Testability,test,tests,591,"@robertodr, go for it. I put the SO link at the top of the file. I really like the colors, too. Just have to restrain myself from using them too liberally. On the test labels front, I'd suggest. #### Labels; * `optests` - ""Does psi work? tu1/scf-property/dfmp2-1/sapt1/cc1/casscf-sp only"" plus one test from each add-on and python, json, psi4numpy (""add-in""?). name definitely up for discussion.; * `quicktests` - tests that contribute to ""Best coverage possible in a 20 min envelope. (10 minutes on 2-thread travis)"" just because everyone's trained up to type ""quicktests""; * `longtests` - tests that run in 15 min or more; * in particular, if a test doesn't belong to any of the three above, it shouldn't get _any_ length label. that will help with maintenance. #### Runs; * `ctest -L optests` - runs the operational tests; * `ctest -L quicktests` - runs the decent coverage tests; * `ctest -LE longtests` - runs everything but the indiv tests that require >15 min; * `ctest` - runs ""All psi tests (including the 30 minutes - 1.5 hour tests)""",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/524#issuecomment-262017070
https://github.com/psi4/psi4/pull/524#issuecomment-262017070:647,Testability,test,test,647,"@robertodr, go for it. I put the SO link at the top of the file. I really like the colors, too. Just have to restrain myself from using them too liberally. On the test labels front, I'd suggest. #### Labels; * `optests` - ""Does psi work? tu1/scf-property/dfmp2-1/sapt1/cc1/casscf-sp only"" plus one test from each add-on and python, json, psi4numpy (""add-in""?). name definitely up for discussion.; * `quicktests` - tests that contribute to ""Best coverage possible in a 20 min envelope. (10 minutes on 2-thread travis)"" just because everyone's trained up to type ""quicktests""; * `longtests` - tests that run in 15 min or more; * in particular, if a test doesn't belong to any of the three above, it shouldn't get _any_ length label. that will help with maintenance. #### Runs; * `ctest -L optests` - runs the operational tests; * `ctest -L quicktests` - runs the decent coverage tests; * `ctest -LE longtests` - runs everything but the indiv tests that require >15 min; * `ctest` - runs ""All psi tests (including the 30 minutes - 1.5 hour tests)""",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/524#issuecomment-262017070
https://github.com/psi4/psi4/pull/524#issuecomment-262017070:819,Testability,test,tests,819,"@robertodr, go for it. I put the SO link at the top of the file. I really like the colors, too. Just have to restrain myself from using them too liberally. On the test labels front, I'd suggest. #### Labels; * `optests` - ""Does psi work? tu1/scf-property/dfmp2-1/sapt1/cc1/casscf-sp only"" plus one test from each add-on and python, json, psi4numpy (""add-in""?). name definitely up for discussion.; * `quicktests` - tests that contribute to ""Best coverage possible in a 20 min envelope. (10 minutes on 2-thread travis)"" just because everyone's trained up to type ""quicktests""; * `longtests` - tests that run in 15 min or more; * in particular, if a test doesn't belong to any of the three above, it shouldn't get _any_ length label. that will help with maintenance. #### Runs; * `ctest -L optests` - runs the operational tests; * `ctest -L quicktests` - runs the decent coverage tests; * `ctest -LE longtests` - runs everything but the indiv tests that require >15 min; * `ctest` - runs ""All psi tests (including the 30 minutes - 1.5 hour tests)""",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/524#issuecomment-262017070
https://github.com/psi4/psi4/pull/524#issuecomment-262017070:877,Testability,test,tests,877,"@robertodr, go for it. I put the SO link at the top of the file. I really like the colors, too. Just have to restrain myself from using them too liberally. On the test labels front, I'd suggest. #### Labels; * `optests` - ""Does psi work? tu1/scf-property/dfmp2-1/sapt1/cc1/casscf-sp only"" plus one test from each add-on and python, json, psi4numpy (""add-in""?). name definitely up for discussion.; * `quicktests` - tests that contribute to ""Best coverage possible in a 20 min envelope. (10 minutes on 2-thread travis)"" just because everyone's trained up to type ""quicktests""; * `longtests` - tests that run in 15 min or more; * in particular, if a test doesn't belong to any of the three above, it shouldn't get _any_ length label. that will help with maintenance. #### Runs; * `ctest -L optests` - runs the operational tests; * `ctest -L quicktests` - runs the decent coverage tests; * `ctest -LE longtests` - runs everything but the indiv tests that require >15 min; * `ctest` - runs ""All psi tests (including the 30 minutes - 1.5 hour tests)""",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/524#issuecomment-262017070
https://github.com/psi4/psi4/pull/524#issuecomment-262017070:940,Testability,test,tests,940,"@robertodr, go for it. I put the SO link at the top of the file. I really like the colors, too. Just have to restrain myself from using them too liberally. On the test labels front, I'd suggest. #### Labels; * `optests` - ""Does psi work? tu1/scf-property/dfmp2-1/sapt1/cc1/casscf-sp only"" plus one test from each add-on and python, json, psi4numpy (""add-in""?). name definitely up for discussion.; * `quicktests` - tests that contribute to ""Best coverage possible in a 20 min envelope. (10 minutes on 2-thread travis)"" just because everyone's trained up to type ""quicktests""; * `longtests` - tests that run in 15 min or more; * in particular, if a test doesn't belong to any of the three above, it shouldn't get _any_ length label. that will help with maintenance. #### Runs; * `ctest -L optests` - runs the operational tests; * `ctest -L quicktests` - runs the decent coverage tests; * `ctest -LE longtests` - runs everything but the indiv tests that require >15 min; * `ctest` - runs ""All psi tests (including the 30 minutes - 1.5 hour tests)""",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/524#issuecomment-262017070
https://github.com/psi4/psi4/pull/524#issuecomment-262017070:994,Testability,test,tests,994,"@robertodr, go for it. I put the SO link at the top of the file. I really like the colors, too. Just have to restrain myself from using them too liberally. On the test labels front, I'd suggest. #### Labels; * `optests` - ""Does psi work? tu1/scf-property/dfmp2-1/sapt1/cc1/casscf-sp only"" plus one test from each add-on and python, json, psi4numpy (""add-in""?). name definitely up for discussion.; * `quicktests` - tests that contribute to ""Best coverage possible in a 20 min envelope. (10 minutes on 2-thread travis)"" just because everyone's trained up to type ""quicktests""; * `longtests` - tests that run in 15 min or more; * in particular, if a test doesn't belong to any of the three above, it shouldn't get _any_ length label. that will help with maintenance. #### Runs; * `ctest -L optests` - runs the operational tests; * `ctest -L quicktests` - runs the decent coverage tests; * `ctest -LE longtests` - runs everything but the indiv tests that require >15 min; * `ctest` - runs ""All psi tests (including the 30 minutes - 1.5 hour tests)""",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/524#issuecomment-262017070
https://github.com/psi4/psi4/pull/524#issuecomment-262017070:1037,Testability,test,tests,1037,"@robertodr, go for it. I put the SO link at the top of the file. I really like the colors, too. Just have to restrain myself from using them too liberally. On the test labels front, I'd suggest. #### Labels; * `optests` - ""Does psi work? tu1/scf-property/dfmp2-1/sapt1/cc1/casscf-sp only"" plus one test from each add-on and python, json, psi4numpy (""add-in""?). name definitely up for discussion.; * `quicktests` - tests that contribute to ""Best coverage possible in a 20 min envelope. (10 minutes on 2-thread travis)"" just because everyone's trained up to type ""quicktests""; * `longtests` - tests that run in 15 min or more; * in particular, if a test doesn't belong to any of the three above, it shouldn't get _any_ length label. that will help with maintenance. #### Runs; * `ctest -L optests` - runs the operational tests; * `ctest -L quicktests` - runs the decent coverage tests; * `ctest -LE longtests` - runs everything but the indiv tests that require >15 min; * `ctest` - runs ""All psi tests (including the 30 minutes - 1.5 hour tests)""",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/524#issuecomment-262017070
https://github.com/psi4/psi4/pull/524#issuecomment-262017312:980,Performance,perform,performance,980,"Yes, I think the original idea of ""quicktests"" was that the developer could; quickly tell whether or not Psi4 was plausibly working correctly (so, a few; tests of major functionality, rather than the idea that all tests that are; quick would go here). Eventually we crammed in quite a few small tests; here because people started getting lazy and only ever ran quicktests, so; coverage started to become a more major issue. If we are now running most; of the tests nightly, this is less of an issue than it was, so the coverage; could be scaled back. With regard to Daniel's suggested breakdown, we might try that but with; different names that might be even clearer:; - mintests - Minimal checking of psi; small number of tests, all of which; are short; - shorttests - Best coverage possible in a 20 minute envelope; - normaltests - Tests that would run automatically each night (could also; be nightlytests); - longtests - Any extra-long tests that were useful in debugging or; performance evaluation, but that are too long to reasonably run every night; (my understanding is that's what we mean now by this label). On Mon, Nov 21, 2016 at 12:44 PM, Daniel Smith notifications@github.com; wrote:. > I may not be impartial, but I like the CMake colors a lot. LGTM; > ; > We have been tossing around the idea of moving tests around to make a bit; > more sense.; > - quicktests - Does psi work? tu1/scf-property/dfmp2-1/sapt1/cc1/casscf-sp; > only; > - normaltests - Best coverage possible in a 20 minute envelope. (10; > minutes on 2-thread travis); > - longtests - Anything that runs in 15 minutes; > - no modifier - All psi tests; > ; > Obviously not in this PR, but something to ponder.; > ; > @robertodr https://github.com/robertodr I found the colors on; > Stackoverflow, so I would say yes :); > ; > —; > You are receiving this because you are subscribed to this thread.; > Reply to this email directly, view it on GitHub; > https://github.com/psi4/psi4/pull/524#issuecomment-262012104, or mute;",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/524#issuecomment-262017312
https://github.com/psi4/psi4/pull/524#issuecomment-262017312:154,Testability,test,tests,154,"Yes, I think the original idea of ""quicktests"" was that the developer could; quickly tell whether or not Psi4 was plausibly working correctly (so, a few; tests of major functionality, rather than the idea that all tests that are; quick would go here). Eventually we crammed in quite a few small tests; here because people started getting lazy and only ever ran quicktests, so; coverage started to become a more major issue. If we are now running most; of the tests nightly, this is less of an issue than it was, so the coverage; could be scaled back. With regard to Daniel's suggested breakdown, we might try that but with; different names that might be even clearer:; - mintests - Minimal checking of psi; small number of tests, all of which; are short; - shorttests - Best coverage possible in a 20 minute envelope; - normaltests - Tests that would run automatically each night (could also; be nightlytests); - longtests - Any extra-long tests that were useful in debugging or; performance evaluation, but that are too long to reasonably run every night; (my understanding is that's what we mean now by this label). On Mon, Nov 21, 2016 at 12:44 PM, Daniel Smith notifications@github.com; wrote:. > I may not be impartial, but I like the CMake colors a lot. LGTM; > ; > We have been tossing around the idea of moving tests around to make a bit; > more sense.; > - quicktests - Does psi work? tu1/scf-property/dfmp2-1/sapt1/cc1/casscf-sp; > only; > - normaltests - Best coverage possible in a 20 minute envelope. (10; > minutes on 2-thread travis); > - longtests - Anything that runs in 15 minutes; > - no modifier - All psi tests; > ; > Obviously not in this PR, but something to ponder.; > ; > @robertodr https://github.com/robertodr I found the colors on; > Stackoverflow, so I would say yes :); > ; > —; > You are receiving this because you are subscribed to this thread.; > Reply to this email directly, view it on GitHub; > https://github.com/psi4/psi4/pull/524#issuecomment-262012104, or mute;",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/524#issuecomment-262017312
https://github.com/psi4/psi4/pull/524#issuecomment-262017312:214,Testability,test,tests,214,"Yes, I think the original idea of ""quicktests"" was that the developer could; quickly tell whether or not Psi4 was plausibly working correctly (so, a few; tests of major functionality, rather than the idea that all tests that are; quick would go here). Eventually we crammed in quite a few small tests; here because people started getting lazy and only ever ran quicktests, so; coverage started to become a more major issue. If we are now running most; of the tests nightly, this is less of an issue than it was, so the coverage; could be scaled back. With regard to Daniel's suggested breakdown, we might try that but with; different names that might be even clearer:; - mintests - Minimal checking of psi; small number of tests, all of which; are short; - shorttests - Best coverage possible in a 20 minute envelope; - normaltests - Tests that would run automatically each night (could also; be nightlytests); - longtests - Any extra-long tests that were useful in debugging or; performance evaluation, but that are too long to reasonably run every night; (my understanding is that's what we mean now by this label). On Mon, Nov 21, 2016 at 12:44 PM, Daniel Smith notifications@github.com; wrote:. > I may not be impartial, but I like the CMake colors a lot. LGTM; > ; > We have been tossing around the idea of moving tests around to make a bit; > more sense.; > - quicktests - Does psi work? tu1/scf-property/dfmp2-1/sapt1/cc1/casscf-sp; > only; > - normaltests - Best coverage possible in a 20 minute envelope. (10; > minutes on 2-thread travis); > - longtests - Anything that runs in 15 minutes; > - no modifier - All psi tests; > ; > Obviously not in this PR, but something to ponder.; > ; > @robertodr https://github.com/robertodr I found the colors on; > Stackoverflow, so I would say yes :); > ; > —; > You are receiving this because you are subscribed to this thread.; > Reply to this email directly, view it on GitHub; > https://github.com/psi4/psi4/pull/524#issuecomment-262012104, or mute;",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/524#issuecomment-262017312
https://github.com/psi4/psi4/pull/524#issuecomment-262017312:295,Testability,test,tests,295,"Yes, I think the original idea of ""quicktests"" was that the developer could; quickly tell whether or not Psi4 was plausibly working correctly (so, a few; tests of major functionality, rather than the idea that all tests that are; quick would go here). Eventually we crammed in quite a few small tests; here because people started getting lazy and only ever ran quicktests, so; coverage started to become a more major issue. If we are now running most; of the tests nightly, this is less of an issue than it was, so the coverage; could be scaled back. With regard to Daniel's suggested breakdown, we might try that but with; different names that might be even clearer:; - mintests - Minimal checking of psi; small number of tests, all of which; are short; - shorttests - Best coverage possible in a 20 minute envelope; - normaltests - Tests that would run automatically each night (could also; be nightlytests); - longtests - Any extra-long tests that were useful in debugging or; performance evaluation, but that are too long to reasonably run every night; (my understanding is that's what we mean now by this label). On Mon, Nov 21, 2016 at 12:44 PM, Daniel Smith notifications@github.com; wrote:. > I may not be impartial, but I like the CMake colors a lot. LGTM; > ; > We have been tossing around the idea of moving tests around to make a bit; > more sense.; > - quicktests - Does psi work? tu1/scf-property/dfmp2-1/sapt1/cc1/casscf-sp; > only; > - normaltests - Best coverage possible in a 20 minute envelope. (10; > minutes on 2-thread travis); > - longtests - Anything that runs in 15 minutes; > - no modifier - All psi tests; > ; > Obviously not in this PR, but something to ponder.; > ; > @robertodr https://github.com/robertodr I found the colors on; > Stackoverflow, so I would say yes :); > ; > —; > You are receiving this because you are subscribed to this thread.; > Reply to this email directly, view it on GitHub; > https://github.com/psi4/psi4/pull/524#issuecomment-262012104, or mute;",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/524#issuecomment-262017312
https://github.com/psi4/psi4/pull/524#issuecomment-262017312:459,Testability,test,tests,459,"Yes, I think the original idea of ""quicktests"" was that the developer could; quickly tell whether or not Psi4 was plausibly working correctly (so, a few; tests of major functionality, rather than the idea that all tests that are; quick would go here). Eventually we crammed in quite a few small tests; here because people started getting lazy and only ever ran quicktests, so; coverage started to become a more major issue. If we are now running most; of the tests nightly, this is less of an issue than it was, so the coverage; could be scaled back. With regard to Daniel's suggested breakdown, we might try that but with; different names that might be even clearer:; - mintests - Minimal checking of psi; small number of tests, all of which; are short; - shorttests - Best coverage possible in a 20 minute envelope; - normaltests - Tests that would run automatically each night (could also; be nightlytests); - longtests - Any extra-long tests that were useful in debugging or; performance evaluation, but that are too long to reasonably run every night; (my understanding is that's what we mean now by this label). On Mon, Nov 21, 2016 at 12:44 PM, Daniel Smith notifications@github.com; wrote:. > I may not be impartial, but I like the CMake colors a lot. LGTM; > ; > We have been tossing around the idea of moving tests around to make a bit; > more sense.; > - quicktests - Does psi work? tu1/scf-property/dfmp2-1/sapt1/cc1/casscf-sp; > only; > - normaltests - Best coverage possible in a 20 minute envelope. (10; > minutes on 2-thread travis); > - longtests - Anything that runs in 15 minutes; > - no modifier - All psi tests; > ; > Obviously not in this PR, but something to ponder.; > ; > @robertodr https://github.com/robertodr I found the colors on; > Stackoverflow, so I would say yes :); > ; > —; > You are receiving this because you are subscribed to this thread.; > Reply to this email directly, view it on GitHub; > https://github.com/psi4/psi4/pull/524#issuecomment-262012104, or mute;",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/524#issuecomment-262017312
https://github.com/psi4/psi4/pull/524#issuecomment-262017312:723,Testability,test,tests,723,"Yes, I think the original idea of ""quicktests"" was that the developer could; quickly tell whether or not Psi4 was plausibly working correctly (so, a few; tests of major functionality, rather than the idea that all tests that are; quick would go here). Eventually we crammed in quite a few small tests; here because people started getting lazy and only ever ran quicktests, so; coverage started to become a more major issue. If we are now running most; of the tests nightly, this is less of an issue than it was, so the coverage; could be scaled back. With regard to Daniel's suggested breakdown, we might try that but with; different names that might be even clearer:; - mintests - Minimal checking of psi; small number of tests, all of which; are short; - shorttests - Best coverage possible in a 20 minute envelope; - normaltests - Tests that would run automatically each night (could also; be nightlytests); - longtests - Any extra-long tests that were useful in debugging or; performance evaluation, but that are too long to reasonably run every night; (my understanding is that's what we mean now by this label). On Mon, Nov 21, 2016 at 12:44 PM, Daniel Smith notifications@github.com; wrote:. > I may not be impartial, but I like the CMake colors a lot. LGTM; > ; > We have been tossing around the idea of moving tests around to make a bit; > more sense.; > - quicktests - Does psi work? tu1/scf-property/dfmp2-1/sapt1/cc1/casscf-sp; > only; > - normaltests - Best coverage possible in a 20 minute envelope. (10; > minutes on 2-thread travis); > - longtests - Anything that runs in 15 minutes; > - no modifier - All psi tests; > ; > Obviously not in this PR, but something to ponder.; > ; > @robertodr https://github.com/robertodr I found the colors on; > Stackoverflow, so I would say yes :); > ; > —; > You are receiving this because you are subscribed to this thread.; > Reply to this email directly, view it on GitHub; > https://github.com/psi4/psi4/pull/524#issuecomment-262012104, or mute;",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/524#issuecomment-262017312
https://github.com/psi4/psi4/pull/524#issuecomment-262017312:834,Testability,Test,Tests,834,"Yes, I think the original idea of ""quicktests"" was that the developer could; quickly tell whether or not Psi4 was plausibly working correctly (so, a few; tests of major functionality, rather than the idea that all tests that are; quick would go here). Eventually we crammed in quite a few small tests; here because people started getting lazy and only ever ran quicktests, so; coverage started to become a more major issue. If we are now running most; of the tests nightly, this is less of an issue than it was, so the coverage; could be scaled back. With regard to Daniel's suggested breakdown, we might try that but with; different names that might be even clearer:; - mintests - Minimal checking of psi; small number of tests, all of which; are short; - shorttests - Best coverage possible in a 20 minute envelope; - normaltests - Tests that would run automatically each night (could also; be nightlytests); - longtests - Any extra-long tests that were useful in debugging or; performance evaluation, but that are too long to reasonably run every night; (my understanding is that's what we mean now by this label). On Mon, Nov 21, 2016 at 12:44 PM, Daniel Smith notifications@github.com; wrote:. > I may not be impartial, but I like the CMake colors a lot. LGTM; > ; > We have been tossing around the idea of moving tests around to make a bit; > more sense.; > - quicktests - Does psi work? tu1/scf-property/dfmp2-1/sapt1/cc1/casscf-sp; > only; > - normaltests - Best coverage possible in a 20 minute envelope. (10; > minutes on 2-thread travis); > - longtests - Anything that runs in 15 minutes; > - no modifier - All psi tests; > ; > Obviously not in this PR, but something to ponder.; > ; > @robertodr https://github.com/robertodr I found the colors on; > Stackoverflow, so I would say yes :); > ; > —; > You are receiving this because you are subscribed to this thread.; > Reply to this email directly, view it on GitHub; > https://github.com/psi4/psi4/pull/524#issuecomment-262012104, or mute;",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/524#issuecomment-262017312
https://github.com/psi4/psi4/pull/524#issuecomment-262017312:940,Testability,test,tests,940,"Yes, I think the original idea of ""quicktests"" was that the developer could; quickly tell whether or not Psi4 was plausibly working correctly (so, a few; tests of major functionality, rather than the idea that all tests that are; quick would go here). Eventually we crammed in quite a few small tests; here because people started getting lazy and only ever ran quicktests, so; coverage started to become a more major issue. If we are now running most; of the tests nightly, this is less of an issue than it was, so the coverage; could be scaled back. With regard to Daniel's suggested breakdown, we might try that but with; different names that might be even clearer:; - mintests - Minimal checking of psi; small number of tests, all of which; are short; - shorttests - Best coverage possible in a 20 minute envelope; - normaltests - Tests that would run automatically each night (could also; be nightlytests); - longtests - Any extra-long tests that were useful in debugging or; performance evaluation, but that are too long to reasonably run every night; (my understanding is that's what we mean now by this label). On Mon, Nov 21, 2016 at 12:44 PM, Daniel Smith notifications@github.com; wrote:. > I may not be impartial, but I like the CMake colors a lot. LGTM; > ; > We have been tossing around the idea of moving tests around to make a bit; > more sense.; > - quicktests - Does psi work? tu1/scf-property/dfmp2-1/sapt1/cc1/casscf-sp; > only; > - normaltests - Best coverage possible in a 20 minute envelope. (10; > minutes on 2-thread travis); > - longtests - Anything that runs in 15 minutes; > - no modifier - All psi tests; > ; > Obviously not in this PR, but something to ponder.; > ; > @robertodr https://github.com/robertodr I found the colors on; > Stackoverflow, so I would say yes :); > ; > —; > You are receiving this because you are subscribed to this thread.; > Reply to this email directly, view it on GitHub; > https://github.com/psi4/psi4/pull/524#issuecomment-262012104, or mute;",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/524#issuecomment-262017312
https://github.com/psi4/psi4/pull/524#issuecomment-262017312:1319,Testability,test,tests,1319,"orking correctly (so, a few; tests of major functionality, rather than the idea that all tests that are; quick would go here). Eventually we crammed in quite a few small tests; here because people started getting lazy and only ever ran quicktests, so; coverage started to become a more major issue. If we are now running most; of the tests nightly, this is less of an issue than it was, so the coverage; could be scaled back. With regard to Daniel's suggested breakdown, we might try that but with; different names that might be even clearer:; - mintests - Minimal checking of psi; small number of tests, all of which; are short; - shorttests - Best coverage possible in a 20 minute envelope; - normaltests - Tests that would run automatically each night (could also; be nightlytests); - longtests - Any extra-long tests that were useful in debugging or; performance evaluation, but that are too long to reasonably run every night; (my understanding is that's what we mean now by this label). On Mon, Nov 21, 2016 at 12:44 PM, Daniel Smith notifications@github.com; wrote:. > I may not be impartial, but I like the CMake colors a lot. LGTM; > ; > We have been tossing around the idea of moving tests around to make a bit; > more sense.; > - quicktests - Does psi work? tu1/scf-property/dfmp2-1/sapt1/cc1/casscf-sp; > only; > - normaltests - Best coverage possible in a 20 minute envelope. (10; > minutes on 2-thread travis); > - longtests - Anything that runs in 15 minutes; > - no modifier - All psi tests; > ; > Obviously not in this PR, but something to ponder.; > ; > @robertodr https://github.com/robertodr I found the colors on; > Stackoverflow, so I would say yes :); > ; > —; > You are receiving this because you are subscribed to this thread.; > Reply to this email directly, view it on GitHub; > https://github.com/psi4/psi4/pull/524#issuecomment-262012104, or mute; > the thread; > https://github.com/notifications/unsubscribe-auth/AC9QdnJCXyqb0XwUz2FowVQizhCHrKmuks5rAdh8gaJpZM4K4Unt; > .",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/524#issuecomment-262017312
https://github.com/psi4/psi4/pull/524#issuecomment-262017312:1626,Testability,test,tests,1626,"orking correctly (so, a few; tests of major functionality, rather than the idea that all tests that are; quick would go here). Eventually we crammed in quite a few small tests; here because people started getting lazy and only ever ran quicktests, so; coverage started to become a more major issue. If we are now running most; of the tests nightly, this is less of an issue than it was, so the coverage; could be scaled back. With regard to Daniel's suggested breakdown, we might try that but with; different names that might be even clearer:; - mintests - Minimal checking of psi; small number of tests, all of which; are short; - shorttests - Best coverage possible in a 20 minute envelope; - normaltests - Tests that would run automatically each night (could also; be nightlytests); - longtests - Any extra-long tests that were useful in debugging or; performance evaluation, but that are too long to reasonably run every night; (my understanding is that's what we mean now by this label). On Mon, Nov 21, 2016 at 12:44 PM, Daniel Smith notifications@github.com; wrote:. > I may not be impartial, but I like the CMake colors a lot. LGTM; > ; > We have been tossing around the idea of moving tests around to make a bit; > more sense.; > - quicktests - Does psi work? tu1/scf-property/dfmp2-1/sapt1/cc1/casscf-sp; > only; > - normaltests - Best coverage possible in a 20 minute envelope. (10; > minutes on 2-thread travis); > - longtests - Anything that runs in 15 minutes; > - no modifier - All psi tests; > ; > Obviously not in this PR, but something to ponder.; > ; > @robertodr https://github.com/robertodr I found the colors on; > Stackoverflow, so I would say yes :); > ; > —; > You are receiving this because you are subscribed to this thread.; > Reply to this email directly, view it on GitHub; > https://github.com/psi4/psi4/pull/524#issuecomment-262012104, or mute; > the thread; > https://github.com/notifications/unsubscribe-auth/AC9QdnJCXyqb0XwUz2FowVQizhCHrKmuks5rAdh8gaJpZM4K4Unt; > .",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/524#issuecomment-262017312
https://github.com/psi4/psi4/pull/524#issuecomment-262017312:659,Usability,clear,clearer,659,"Yes, I think the original idea of ""quicktests"" was that the developer could; quickly tell whether or not Psi4 was plausibly working correctly (so, a few; tests of major functionality, rather than the idea that all tests that are; quick would go here). Eventually we crammed in quite a few small tests; here because people started getting lazy and only ever ran quicktests, so; coverage started to become a more major issue. If we are now running most; of the tests nightly, this is less of an issue than it was, so the coverage; could be scaled back. With regard to Daniel's suggested breakdown, we might try that but with; different names that might be even clearer:; - mintests - Minimal checking of psi; small number of tests, all of which; are short; - shorttests - Best coverage possible in a 20 minute envelope; - normaltests - Tests that would run automatically each night (could also; be nightlytests); - longtests - Any extra-long tests that were useful in debugging or; performance evaluation, but that are too long to reasonably run every night; (my understanding is that's what we mean now by this label). On Mon, Nov 21, 2016 at 12:44 PM, Daniel Smith notifications@github.com; wrote:. > I may not be impartial, but I like the CMake colors a lot. LGTM; > ; > We have been tossing around the idea of moving tests around to make a bit; > more sense.; > - quicktests - Does psi work? tu1/scf-property/dfmp2-1/sapt1/cc1/casscf-sp; > only; > - normaltests - Best coverage possible in a 20 minute envelope. (10; > minutes on 2-thread travis); > - longtests - Anything that runs in 15 minutes; > - no modifier - All psi tests; > ; > Obviously not in this PR, but something to ponder.; > ; > @robertodr https://github.com/robertodr I found the colors on; > Stackoverflow, so I would say yes :); > ; > —; > You are receiving this because you are subscribed to this thread.; > Reply to this email directly, view it on GitHub; > https://github.com/psi4/psi4/pull/524#issuecomment-262012104, or mute;",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/524#issuecomment-262017312
https://github.com/psi4/psi4/pull/524#issuecomment-262018053:865,Availability,mainten,maintenance,865,"Yeah, could also use ""quicktests"" for the ""coverage within 20 mins"". On Mon, Nov 21, 2016 at 1:01 PM, Lori A. Burns notifications@github.com; wrote:. > @robertodr https://github.com/robertodr, go for it. I put the SO link; > at the top of the file.; > ; > On the test labels front, I'd suggest; > Labels; > - optests - ""Does psi work? tu1/scf-property/dfmp2-1/sapt1/cc1/casscf-sp; > only"" plus one test from each add-on and python, json, psi4numpy; > (""add-in""?). name definitely up for discussion.; > - quicktests - tests that contribute to ""Best coverage possible in a; > 20 min envelope. (10 minutes on 2-thread travis)"" just because everyone's; > trained up to type ""quicktests""; > - longtests - tests that run in 15 min or more; > - in particular, if a test doesn't belong to any of the three above,; > it shouldn't get _any_ length label. that will help with maintenance.; > ; > Runs; > - ctest -L optests - runs the operational tests; > - ctest -L quicktests - runs the decent coverage tests; > - ctest -LE longtests - runs everything but the indiv tests that; > require >15 min; > - ctest - runs ""All psi tests (including the 30 minutes - 1.5 hour; > tests)""; > ; > —; > You are receiving this because you are subscribed to this thread.; > Reply to this email directly, view it on GitHub; > https://github.com/psi4/psi4/pull/524#issuecomment-262017070, or mute; > the thread; > https://github.com/notifications/unsubscribe-auth/AC9QdpVwWhuFdd1f7Oi21g3R3H_T4T8uks5rAdx5gaJpZM4K4Unt; > .",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/524#issuecomment-262018053
https://github.com/psi4/psi4/pull/524#issuecomment-262018053:263,Testability,test,test,263,"Yeah, could also use ""quicktests"" for the ""coverage within 20 mins"". On Mon, Nov 21, 2016 at 1:01 PM, Lori A. Burns notifications@github.com; wrote:. > @robertodr https://github.com/robertodr, go for it. I put the SO link; > at the top of the file.; > ; > On the test labels front, I'd suggest; > Labels; > - optests - ""Does psi work? tu1/scf-property/dfmp2-1/sapt1/cc1/casscf-sp; > only"" plus one test from each add-on and python, json, psi4numpy; > (""add-in""?). name definitely up for discussion.; > - quicktests - tests that contribute to ""Best coverage possible in a; > 20 min envelope. (10 minutes on 2-thread travis)"" just because everyone's; > trained up to type ""quicktests""; > - longtests - tests that run in 15 min or more; > - in particular, if a test doesn't belong to any of the three above,; > it shouldn't get _any_ length label. that will help with maintenance.; > ; > Runs; > - ctest -L optests - runs the operational tests; > - ctest -L quicktests - runs the decent coverage tests; > - ctest -LE longtests - runs everything but the indiv tests that; > require >15 min; > - ctest - runs ""All psi tests (including the 30 minutes - 1.5 hour; > tests)""; > ; > —; > You are receiving this because you are subscribed to this thread.; > Reply to this email directly, view it on GitHub; > https://github.com/psi4/psi4/pull/524#issuecomment-262017070, or mute; > the thread; > https://github.com/notifications/unsubscribe-auth/AC9QdpVwWhuFdd1f7Oi21g3R3H_T4T8uks5rAdx5gaJpZM4K4Unt; > .",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/524#issuecomment-262018053
https://github.com/psi4/psi4/pull/524#issuecomment-262018053:398,Testability,test,test,398,"Yeah, could also use ""quicktests"" for the ""coverage within 20 mins"". On Mon, Nov 21, 2016 at 1:01 PM, Lori A. Burns notifications@github.com; wrote:. > @robertodr https://github.com/robertodr, go for it. I put the SO link; > at the top of the file.; > ; > On the test labels front, I'd suggest; > Labels; > - optests - ""Does psi work? tu1/scf-property/dfmp2-1/sapt1/cc1/casscf-sp; > only"" plus one test from each add-on and python, json, psi4numpy; > (""add-in""?). name definitely up for discussion.; > - quicktests - tests that contribute to ""Best coverage possible in a; > 20 min envelope. (10 minutes on 2-thread travis)"" just because everyone's; > trained up to type ""quicktests""; > - longtests - tests that run in 15 min or more; > - in particular, if a test doesn't belong to any of the three above,; > it shouldn't get _any_ length label. that will help with maintenance.; > ; > Runs; > - ctest -L optests - runs the operational tests; > - ctest -L quicktests - runs the decent coverage tests; > - ctest -LE longtests - runs everything but the indiv tests that; > require >15 min; > - ctest - runs ""All psi tests (including the 30 minutes - 1.5 hour; > tests)""; > ; > —; > You are receiving this because you are subscribed to this thread.; > Reply to this email directly, view it on GitHub; > https://github.com/psi4/psi4/pull/524#issuecomment-262017070, or mute; > the thread; > https://github.com/notifications/unsubscribe-auth/AC9QdpVwWhuFdd1f7Oi21g3R3H_T4T8uks5rAdx5gaJpZM4K4Unt; > .",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/524#issuecomment-262018053
https://github.com/psi4/psi4/pull/524#issuecomment-262018053:517,Testability,test,tests,517,"Yeah, could also use ""quicktests"" for the ""coverage within 20 mins"". On Mon, Nov 21, 2016 at 1:01 PM, Lori A. Burns notifications@github.com; wrote:. > @robertodr https://github.com/robertodr, go for it. I put the SO link; > at the top of the file.; > ; > On the test labels front, I'd suggest; > Labels; > - optests - ""Does psi work? tu1/scf-property/dfmp2-1/sapt1/cc1/casscf-sp; > only"" plus one test from each add-on and python, json, psi4numpy; > (""add-in""?). name definitely up for discussion.; > - quicktests - tests that contribute to ""Best coverage possible in a; > 20 min envelope. (10 minutes on 2-thread travis)"" just because everyone's; > trained up to type ""quicktests""; > - longtests - tests that run in 15 min or more; > - in particular, if a test doesn't belong to any of the three above,; > it shouldn't get _any_ length label. that will help with maintenance.; > ; > Runs; > - ctest -L optests - runs the operational tests; > - ctest -L quicktests - runs the decent coverage tests; > - ctest -LE longtests - runs everything but the indiv tests that; > require >15 min; > - ctest - runs ""All psi tests (including the 30 minutes - 1.5 hour; > tests)""; > ; > —; > You are receiving this because you are subscribed to this thread.; > Reply to this email directly, view it on GitHub; > https://github.com/psi4/psi4/pull/524#issuecomment-262017070, or mute; > the thread; > https://github.com/notifications/unsubscribe-auth/AC9QdpVwWhuFdd1f7Oi21g3R3H_T4T8uks5rAdx5gaJpZM4K4Unt; > .",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/524#issuecomment-262018053
https://github.com/psi4/psi4/pull/524#issuecomment-262018053:700,Testability,test,tests,700,"Yeah, could also use ""quicktests"" for the ""coverage within 20 mins"". On Mon, Nov 21, 2016 at 1:01 PM, Lori A. Burns notifications@github.com; wrote:. > @robertodr https://github.com/robertodr, go for it. I put the SO link; > at the top of the file.; > ; > On the test labels front, I'd suggest; > Labels; > - optests - ""Does psi work? tu1/scf-property/dfmp2-1/sapt1/cc1/casscf-sp; > only"" plus one test from each add-on and python, json, psi4numpy; > (""add-in""?). name definitely up for discussion.; > - quicktests - tests that contribute to ""Best coverage possible in a; > 20 min envelope. (10 minutes on 2-thread travis)"" just because everyone's; > trained up to type ""quicktests""; > - longtests - tests that run in 15 min or more; > - in particular, if a test doesn't belong to any of the three above,; > it shouldn't get _any_ length label. that will help with maintenance.; > ; > Runs; > - ctest -L optests - runs the operational tests; > - ctest -L quicktests - runs the decent coverage tests; > - ctest -LE longtests - runs everything but the indiv tests that; > require >15 min; > - ctest - runs ""All psi tests (including the 30 minutes - 1.5 hour; > tests)""; > ; > —; > You are receiving this because you are subscribed to this thread.; > Reply to this email directly, view it on GitHub; > https://github.com/psi4/psi4/pull/524#issuecomment-262017070, or mute; > the thread; > https://github.com/notifications/unsubscribe-auth/AC9QdpVwWhuFdd1f7Oi21g3R3H_T4T8uks5rAdx5gaJpZM4K4Unt; > .",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/524#issuecomment-262018053
https://github.com/psi4/psi4/pull/524#issuecomment-262018053:758,Testability,test,test,758,"Yeah, could also use ""quicktests"" for the ""coverage within 20 mins"". On Mon, Nov 21, 2016 at 1:01 PM, Lori A. Burns notifications@github.com; wrote:. > @robertodr https://github.com/robertodr, go for it. I put the SO link; > at the top of the file.; > ; > On the test labels front, I'd suggest; > Labels; > - optests - ""Does psi work? tu1/scf-property/dfmp2-1/sapt1/cc1/casscf-sp; > only"" plus one test from each add-on and python, json, psi4numpy; > (""add-in""?). name definitely up for discussion.; > - quicktests - tests that contribute to ""Best coverage possible in a; > 20 min envelope. (10 minutes on 2-thread travis)"" just because everyone's; > trained up to type ""quicktests""; > - longtests - tests that run in 15 min or more; > - in particular, if a test doesn't belong to any of the three above,; > it shouldn't get _any_ length label. that will help with maintenance.; > ; > Runs; > - ctest -L optests - runs the operational tests; > - ctest -L quicktests - runs the decent coverage tests; > - ctest -LE longtests - runs everything but the indiv tests that; > require >15 min; > - ctest - runs ""All psi tests (including the 30 minutes - 1.5 hour; > tests)""; > ; > —; > You are receiving this because you are subscribed to this thread.; > Reply to this email directly, view it on GitHub; > https://github.com/psi4/psi4/pull/524#issuecomment-262017070, or mute; > the thread; > https://github.com/notifications/unsubscribe-auth/AC9QdpVwWhuFdd1f7Oi21g3R3H_T4T8uks5rAdx5gaJpZM4K4Unt; > .",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/524#issuecomment-262018053
https://github.com/psi4/psi4/pull/524#issuecomment-262018053:935,Testability,test,tests,935,"Yeah, could also use ""quicktests"" for the ""coverage within 20 mins"". On Mon, Nov 21, 2016 at 1:01 PM, Lori A. Burns notifications@github.com; wrote:. > @robertodr https://github.com/robertodr, go for it. I put the SO link; > at the top of the file.; > ; > On the test labels front, I'd suggest; > Labels; > - optests - ""Does psi work? tu1/scf-property/dfmp2-1/sapt1/cc1/casscf-sp; > only"" plus one test from each add-on and python, json, psi4numpy; > (""add-in""?). name definitely up for discussion.; > - quicktests - tests that contribute to ""Best coverage possible in a; > 20 min envelope. (10 minutes on 2-thread travis)"" just because everyone's; > trained up to type ""quicktests""; > - longtests - tests that run in 15 min or more; > - in particular, if a test doesn't belong to any of the three above,; > it shouldn't get _any_ length label. that will help with maintenance.; > ; > Runs; > - ctest -L optests - runs the operational tests; > - ctest -L quicktests - runs the decent coverage tests; > - ctest -LE longtests - runs everything but the indiv tests that; > require >15 min; > - ctest - runs ""All psi tests (including the 30 minutes - 1.5 hour; > tests)""; > ; > —; > You are receiving this because you are subscribed to this thread.; > Reply to this email directly, view it on GitHub; > https://github.com/psi4/psi4/pull/524#issuecomment-262017070, or mute; > the thread; > https://github.com/notifications/unsubscribe-auth/AC9QdpVwWhuFdd1f7Oi21g3R3H_T4T8uks5rAdx5gaJpZM4K4Unt; > .",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/524#issuecomment-262018053
https://github.com/psi4/psi4/pull/524#issuecomment-262018053:993,Testability,test,tests,993,"Yeah, could also use ""quicktests"" for the ""coverage within 20 mins"". On Mon, Nov 21, 2016 at 1:01 PM, Lori A. Burns notifications@github.com; wrote:. > @robertodr https://github.com/robertodr, go for it. I put the SO link; > at the top of the file.; > ; > On the test labels front, I'd suggest; > Labels; > - optests - ""Does psi work? tu1/scf-property/dfmp2-1/sapt1/cc1/casscf-sp; > only"" plus one test from each add-on and python, json, psi4numpy; > (""add-in""?). name definitely up for discussion.; > - quicktests - tests that contribute to ""Best coverage possible in a; > 20 min envelope. (10 minutes on 2-thread travis)"" just because everyone's; > trained up to type ""quicktests""; > - longtests - tests that run in 15 min or more; > - in particular, if a test doesn't belong to any of the three above,; > it shouldn't get _any_ length label. that will help with maintenance.; > ; > Runs; > - ctest -L optests - runs the operational tests; > - ctest -L quicktests - runs the decent coverage tests; > - ctest -LE longtests - runs everything but the indiv tests that; > require >15 min; > - ctest - runs ""All psi tests (including the 30 minutes - 1.5 hour; > tests)""; > ; > —; > You are receiving this because you are subscribed to this thread.; > Reply to this email directly, view it on GitHub; > https://github.com/psi4/psi4/pull/524#issuecomment-262017070, or mute; > the thread; > https://github.com/notifications/unsubscribe-auth/AC9QdpVwWhuFdd1f7Oi21g3R3H_T4T8uks5rAdx5gaJpZM4K4Unt; > .",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/524#issuecomment-262018053
https://github.com/psi4/psi4/pull/524#issuecomment-262018053:1056,Testability,test,tests,1056,"Yeah, could also use ""quicktests"" for the ""coverage within 20 mins"". On Mon, Nov 21, 2016 at 1:01 PM, Lori A. Burns notifications@github.com; wrote:. > @robertodr https://github.com/robertodr, go for it. I put the SO link; > at the top of the file.; > ; > On the test labels front, I'd suggest; > Labels; > - optests - ""Does psi work? tu1/scf-property/dfmp2-1/sapt1/cc1/casscf-sp; > only"" plus one test from each add-on and python, json, psi4numpy; > (""add-in""?). name definitely up for discussion.; > - quicktests - tests that contribute to ""Best coverage possible in a; > 20 min envelope. (10 minutes on 2-thread travis)"" just because everyone's; > trained up to type ""quicktests""; > - longtests - tests that run in 15 min or more; > - in particular, if a test doesn't belong to any of the three above,; > it shouldn't get _any_ length label. that will help with maintenance.; > ; > Runs; > - ctest -L optests - runs the operational tests; > - ctest -L quicktests - runs the decent coverage tests; > - ctest -LE longtests - runs everything but the indiv tests that; > require >15 min; > - ctest - runs ""All psi tests (including the 30 minutes - 1.5 hour; > tests)""; > ; > —; > You are receiving this because you are subscribed to this thread.; > Reply to this email directly, view it on GitHub; > https://github.com/psi4/psi4/pull/524#issuecomment-262017070, or mute; > the thread; > https://github.com/notifications/unsubscribe-auth/AC9QdpVwWhuFdd1f7Oi21g3R3H_T4T8uks5rAdx5gaJpZM4K4Unt; > .",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/524#issuecomment-262018053
https://github.com/psi4/psi4/pull/524#issuecomment-262018053:1113,Testability,test,tests,1113,"Yeah, could also use ""quicktests"" for the ""coverage within 20 mins"". On Mon, Nov 21, 2016 at 1:01 PM, Lori A. Burns notifications@github.com; wrote:. > @robertodr https://github.com/robertodr, go for it. I put the SO link; > at the top of the file.; > ; > On the test labels front, I'd suggest; > Labels; > - optests - ""Does psi work? tu1/scf-property/dfmp2-1/sapt1/cc1/casscf-sp; > only"" plus one test from each add-on and python, json, psi4numpy; > (""add-in""?). name definitely up for discussion.; > - quicktests - tests that contribute to ""Best coverage possible in a; > 20 min envelope. (10 minutes on 2-thread travis)"" just because everyone's; > trained up to type ""quicktests""; > - longtests - tests that run in 15 min or more; > - in particular, if a test doesn't belong to any of the three above,; > it shouldn't get _any_ length label. that will help with maintenance.; > ; > Runs; > - ctest -L optests - runs the operational tests; > - ctest -L quicktests - runs the decent coverage tests; > - ctest -LE longtests - runs everything but the indiv tests that; > require >15 min; > - ctest - runs ""All psi tests (including the 30 minutes - 1.5 hour; > tests)""; > ; > —; > You are receiving this because you are subscribed to this thread.; > Reply to this email directly, view it on GitHub; > https://github.com/psi4/psi4/pull/524#issuecomment-262017070, or mute; > the thread; > https://github.com/notifications/unsubscribe-auth/AC9QdpVwWhuFdd1f7Oi21g3R3H_T4T8uks5rAdx5gaJpZM4K4Unt; > .",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/524#issuecomment-262018053
https://github.com/psi4/psi4/pull/524#issuecomment-262018053:1159,Testability,test,tests,1159,"Yeah, could also use ""quicktests"" for the ""coverage within 20 mins"". On Mon, Nov 21, 2016 at 1:01 PM, Lori A. Burns notifications@github.com; wrote:. > @robertodr https://github.com/robertodr, go for it. I put the SO link; > at the top of the file.; > ; > On the test labels front, I'd suggest; > Labels; > - optests - ""Does psi work? tu1/scf-property/dfmp2-1/sapt1/cc1/casscf-sp; > only"" plus one test from each add-on and python, json, psi4numpy; > (""add-in""?). name definitely up for discussion.; > - quicktests - tests that contribute to ""Best coverage possible in a; > 20 min envelope. (10 minutes on 2-thread travis)"" just because everyone's; > trained up to type ""quicktests""; > - longtests - tests that run in 15 min or more; > - in particular, if a test doesn't belong to any of the three above,; > it shouldn't get _any_ length label. that will help with maintenance.; > ; > Runs; > - ctest -L optests - runs the operational tests; > - ctest -L quicktests - runs the decent coverage tests; > - ctest -LE longtests - runs everything but the indiv tests that; > require >15 min; > - ctest - runs ""All psi tests (including the 30 minutes - 1.5 hour; > tests)""; > ; > —; > You are receiving this because you are subscribed to this thread.; > Reply to this email directly, view it on GitHub; > https://github.com/psi4/psi4/pull/524#issuecomment-262017070, or mute; > the thread; > https://github.com/notifications/unsubscribe-auth/AC9QdpVwWhuFdd1f7Oi21g3R3H_T4T8uks5rAdx5gaJpZM4K4Unt; > .",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/524#issuecomment-262018053
https://github.com/psi4/psi4/pull/524#issuecomment-262031166:54,Modifiability,refactor,refactoring,54,"@psi4/editors, if consensus builds on the ctest label refactoring, I'm willing to do it now and be done with it.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/524#issuecomment-262031166
https://github.com/psi4/psi4/pull/524#issuecomment-262358481:102,Availability,fault,fault,102,"At the moment, just quicktests (~118) because `cc14` and `mints9` are still failing. The latter is my fault, the former is a mystery. Failures make the conda build fail, so the test suite needs to be clean before go back to running all.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/524#issuecomment-262358481
https://github.com/psi4/psi4/pull/524#issuecomment-262358481:134,Availability,Failure,Failures,134,"At the moment, just quicktests (~118) because `cc14` and `mints9` are still failing. The latter is my fault, the former is a mystery. Failures make the conda build fail, so the test suite needs to be clean before go back to running all.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/524#issuecomment-262358481
https://github.com/psi4/psi4/pull/524#issuecomment-262358481:177,Testability,test,test,177,"At the moment, just quicktests (~118) because `cc14` and `mints9` are still failing. The latter is my fault, the former is a mystery. Failures make the conda build fail, so the test suite needs to be clean before go back to running all.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/524#issuecomment-262358481
https://github.com/psi4/psi4/pull/524#issuecomment-262370710:406,Availability,fault,fault,406,"If the tests can be fixed and we can go back to testing all test cases; soon, that's fine. If there are persistent problems then the troublesome; tests could be removed from the list temporarily while they get patched up. On Tue, Nov 22, 2016 at 3:37 PM, Lori A. Burns notifications@github.com; wrote:. > At the moment, just quicktests (~118) because cc14 and mints9 are still; > failing. The latter is my fault, the former is a mystery. Failures make the; > conda build fail, so the test suite needs to be clean before go back to; > running all.; > ; > —; > You are receiving this because you commented.; > Reply to this email directly, view it on GitHub; > https://github.com/psi4/psi4/pull/524#issuecomment-262358481, or mute; > the thread; > https://github.com/notifications/unsubscribe-auth/AC9Qdm1_eSI8ptMLf1jUlyVER46R1xZpks5rA1J3gaJpZM4K4Unt; > .",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/524#issuecomment-262370710
https://github.com/psi4/psi4/pull/524#issuecomment-262370710:438,Availability,Failure,Failures,438,"If the tests can be fixed and we can go back to testing all test cases; soon, that's fine. If there are persistent problems then the troublesome; tests could be removed from the list temporarily while they get patched up. On Tue, Nov 22, 2016 at 3:37 PM, Lori A. Burns notifications@github.com; wrote:. > At the moment, just quicktests (~118) because cc14 and mints9 are still; > failing. The latter is my fault, the former is a mystery. Failures make the; > conda build fail, so the test suite needs to be clean before go back to; > running all.; > ; > —; > You are receiving this because you commented.; > Reply to this email directly, view it on GitHub; > https://github.com/psi4/psi4/pull/524#issuecomment-262358481, or mute; > the thread; > https://github.com/notifications/unsubscribe-auth/AC9Qdm1_eSI8ptMLf1jUlyVER46R1xZpks5rA1J3gaJpZM4K4Unt; > .",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/524#issuecomment-262370710
https://github.com/psi4/psi4/pull/524#issuecomment-262370710:210,Deployability,patch,patched,210,"If the tests can be fixed and we can go back to testing all test cases; soon, that's fine. If there are persistent problems then the troublesome; tests could be removed from the list temporarily while they get patched up. On Tue, Nov 22, 2016 at 3:37 PM, Lori A. Burns notifications@github.com; wrote:. > At the moment, just quicktests (~118) because cc14 and mints9 are still; > failing. The latter is my fault, the former is a mystery. Failures make the; > conda build fail, so the test suite needs to be clean before go back to; > running all.; > ; > —; > You are receiving this because you commented.; > Reply to this email directly, view it on GitHub; > https://github.com/psi4/psi4/pull/524#issuecomment-262358481, or mute; > the thread; > https://github.com/notifications/unsubscribe-auth/AC9Qdm1_eSI8ptMLf1jUlyVER46R1xZpks5rA1J3gaJpZM4K4Unt; > .",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/524#issuecomment-262370710
https://github.com/psi4/psi4/pull/524#issuecomment-262370710:7,Testability,test,tests,7,"If the tests can be fixed and we can go back to testing all test cases; soon, that's fine. If there are persistent problems then the troublesome; tests could be removed from the list temporarily while they get patched up. On Tue, Nov 22, 2016 at 3:37 PM, Lori A. Burns notifications@github.com; wrote:. > At the moment, just quicktests (~118) because cc14 and mints9 are still; > failing. The latter is my fault, the former is a mystery. Failures make the; > conda build fail, so the test suite needs to be clean before go back to; > running all.; > ; > —; > You are receiving this because you commented.; > Reply to this email directly, view it on GitHub; > https://github.com/psi4/psi4/pull/524#issuecomment-262358481, or mute; > the thread; > https://github.com/notifications/unsubscribe-auth/AC9Qdm1_eSI8ptMLf1jUlyVER46R1xZpks5rA1J3gaJpZM4K4Unt; > .",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/524#issuecomment-262370710
https://github.com/psi4/psi4/pull/524#issuecomment-262370710:48,Testability,test,testing,48,"If the tests can be fixed and we can go back to testing all test cases; soon, that's fine. If there are persistent problems then the troublesome; tests could be removed from the list temporarily while they get patched up. On Tue, Nov 22, 2016 at 3:37 PM, Lori A. Burns notifications@github.com; wrote:. > At the moment, just quicktests (~118) because cc14 and mints9 are still; > failing. The latter is my fault, the former is a mystery. Failures make the; > conda build fail, so the test suite needs to be clean before go back to; > running all.; > ; > —; > You are receiving this because you commented.; > Reply to this email directly, view it on GitHub; > https://github.com/psi4/psi4/pull/524#issuecomment-262358481, or mute; > the thread; > https://github.com/notifications/unsubscribe-auth/AC9Qdm1_eSI8ptMLf1jUlyVER46R1xZpks5rA1J3gaJpZM4K4Unt; > .",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/524#issuecomment-262370710
https://github.com/psi4/psi4/pull/524#issuecomment-262370710:60,Testability,test,test,60,"If the tests can be fixed and we can go back to testing all test cases; soon, that's fine. If there are persistent problems then the troublesome; tests could be removed from the list temporarily while they get patched up. On Tue, Nov 22, 2016 at 3:37 PM, Lori A. Burns notifications@github.com; wrote:. > At the moment, just quicktests (~118) because cc14 and mints9 are still; > failing. The latter is my fault, the former is a mystery. Failures make the; > conda build fail, so the test suite needs to be clean before go back to; > running all.; > ; > —; > You are receiving this because you commented.; > Reply to this email directly, view it on GitHub; > https://github.com/psi4/psi4/pull/524#issuecomment-262358481, or mute; > the thread; > https://github.com/notifications/unsubscribe-auth/AC9Qdm1_eSI8ptMLf1jUlyVER46R1xZpks5rA1J3gaJpZM4K4Unt; > .",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/524#issuecomment-262370710
https://github.com/psi4/psi4/pull/524#issuecomment-262370710:146,Testability,test,tests,146,"If the tests can be fixed and we can go back to testing all test cases; soon, that's fine. If there are persistent problems then the troublesome; tests could be removed from the list temporarily while they get patched up. On Tue, Nov 22, 2016 at 3:37 PM, Lori A. Burns notifications@github.com; wrote:. > At the moment, just quicktests (~118) because cc14 and mints9 are still; > failing. The latter is my fault, the former is a mystery. Failures make the; > conda build fail, so the test suite needs to be clean before go back to; > running all.; > ; > —; > You are receiving this because you commented.; > Reply to this email directly, view it on GitHub; > https://github.com/psi4/psi4/pull/524#issuecomment-262358481, or mute; > the thread; > https://github.com/notifications/unsubscribe-auth/AC9Qdm1_eSI8ptMLf1jUlyVER46R1xZpks5rA1J3gaJpZM4K4Unt; > .",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/524#issuecomment-262370710
https://github.com/psi4/psi4/pull/524#issuecomment-262370710:484,Testability,test,test,484,"If the tests can be fixed and we can go back to testing all test cases; soon, that's fine. If there are persistent problems then the troublesome; tests could be removed from the list temporarily while they get patched up. On Tue, Nov 22, 2016 at 3:37 PM, Lori A. Burns notifications@github.com; wrote:. > At the moment, just quicktests (~118) because cc14 and mints9 are still; > failing. The latter is my fault, the former is a mystery. Failures make the; > conda build fail, so the test suite needs to be clean before go back to; > running all.; > ; > —; > You are receiving this because you commented.; > Reply to this email directly, view it on GitHub; > https://github.com/psi4/psi4/pull/524#issuecomment-262358481, or mute; > the thread; > https://github.com/notifications/unsubscribe-auth/AC9Qdm1_eSI8ptMLf1jUlyVER46R1xZpks5rA1J3gaJpZM4K4Unt; > .",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/524#issuecomment-262370710
https://github.com/psi4/psi4/issues/525#issuecomment-262108439:209,Availability,failure,failures,209,"I took a quick look at dfocc, and removing these lines; ```cpp; #include ""psi4/libciomr/libciomr.h""; #include ""psi4/libiwl/iwl.h""; #include ""psi4/libpsio/psio.hpp""; ```; from `array.h` doesn't cause any build failures. This was the only file I looked at, but reducing dependencies in that code should help to bring down the long build time.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/525#issuecomment-262108439
https://github.com/psi4/psi4/issues/525#issuecomment-262108439:315,Availability,down,down,315,"I took a quick look at dfocc, and removing these lines; ```cpp; #include ""psi4/libciomr/libciomr.h""; #include ""psi4/libiwl/iwl.h""; #include ""psi4/libpsio/psio.hpp""; ```; from `array.h` doesn't cause any build failures. This was the only file I looked at, but reducing dependencies in that code should help to bring down the long build time.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/525#issuecomment-262108439
https://github.com/psi4/psi4/issues/525#issuecomment-262108439:268,Integrability,depend,dependencies,268,"I took a quick look at dfocc, and removing these lines; ```cpp; #include ""psi4/libciomr/libciomr.h""; #include ""psi4/libiwl/iwl.h""; #include ""psi4/libpsio/psio.hpp""; ```; from `array.h` doesn't cause any build failures. This was the only file I looked at, but reducing dependencies in that code should help to bring down the long build time.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/525#issuecomment-262108439
https://github.com/psi4/psi4/issues/525#issuecomment-262124158:2985,Modifiability,plugin,plugins,2985,"lassify.cc; src/psi4/ccdensity/densgrid_RHF.cc; src/psi4/ccdensity/distribute.cc; src/psi4/ccdensity/file_build.cc; src/psi4/ccdensity/get_frozen.cc; src/psi4/ccdensity/idx_error.cc; src/psi4/ccdensity/idx_permute.cc; src/psi4/ccdensity/resort_gamma.cc; src/psi4/ccdensity/resort_tei.cc; src/psi4/ccdensity/x_xi_check.cc; src/psi4/ccenergy/cc2_WabijT2.cc; src/psi4/cceom/check_sum.cc; src/psi4/cceom/hbar_norms.cc; src/psi4/cceom/norm_HC1.cc; src/psi4/cceom/sigmaCC3_RHF.cc; src/psi4/cceom/sort_amps.cc; src/psi4/cchbar/Wabei_RHF_FT2_a.cc; src/psi4/cclambda/overlap_LAMPS.cc; src/psi4/cclambda/BL2_AO.cc; src/psi4/cclambda/Lmag.cc; src/psi4/cclambda/WabeiL1.cc; src/psi4/cclambda/check_sum.cc; src/psi4/cclambda/halftrans.cc; src/psi4/cclambda/spinad_amps.cc; src/psi4/ccresponse/print_X.cc; src/psi4/cctriples/ET_AAA.cc; src/psi4/cctriples/ET_AAB.cc; src/psi4/cctriples/ET_ABB.cc; src/psi4/cctriples/ET_BBB.cc; src/psi4/cctriples/test_abc_loops.cc; src/psi4/detci/import_vector.cc; src/psi4/dfocc/arrays.cc; src/psi4/dfocc/combine_ref_sep_tpdm.cc; src/psi4/dfocc/conv_mo_tei.cc; src/psi4/dfocc/conv_mo_tei_ref.cc; src/psi4/dfocc/fock_so.cc; src/psi4/dfocc/olddf.cc; src/psi4/dfocc/ref_grad.cc; src/psi4/dfocc/t2_1st_scs_gen.cc; src/psi4/dfocc/t2_1st_scs_sc.cc; src/psi4/dfocc/z_vector_cg.cc; src/psi4/mcscf/algebra_interface.cc; src/psi4/psimrcc/blas_resorting.cc; src/psi4/psimrcc/matrix_iterator.cc; src/psi4/psimrcc/mrcc_mkccsd.cc; src/psi4/psimrcc/mrcc_mp3.cc; src/psi4/psimrcc/sort_in_core.cc; src/psi4/psimrcc/updater_sr.cc; ```. This list is already cleaned of IWL, Transqt2, and CCSort. It may be worth cleaning out some of the deprecated libciomr/libqt things. It could probably be argued that they shouldnt be called anymore. There is a good bit of lib3index/libfock that Rob wrote as toy code which may be better to live in plugins as well. We may be able to clean up some of the other files as well. Overall I agree with @andysim, another pass through the headers is probably worthwhile.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/525#issuecomment-262124158
https://github.com/psi4/psi4/issues/525#issuecomment-262124158:68,Testability,test,test,68,"Here are a list of files that are compiled, but never called in any test in Psi's library. Generated by the inverse of a coverage report:. ```; src/psi4/libciomr/add_arr.cc; src/psi4/libciomr/add_mat.cc; src/psi4/libciomr/eigout.cc; src/psi4/libciomr/ffile.cc; src/psi4/libciomr/mxmb.cc; src/psi4/libpsio/get_length.cc; src/psi4/libpsio/tocdel.cc; src/psi4/libpsio/zero_disk.cc; src/psi4/libqt/mat_in.cc; src/psi4/libqt/orient_fragment.cc; src/psi4/libqt/rootfind.cc; src/psi4/libqt/rotate_vecs.cc; src/psi4/libqt/slaterdset.cc; src/psi4/libqt/sort.cc; src/psi4/libqt/strncpy.cc; src/psi4/libqt/v_3.cc; src/psi4/libqt/zmat_point.cc; src/psi4/libdpd/file4_print.cc; src/psi4/libdpd/memfree.cc; src/psi4/libmints/mints/orthog.cc; src/psi4/libmints/mints/svd.cc; src/psi4/libthce/thce/laplace.cc; src/psi4/libthce/thce/thcew.cc; src/psi4/libfock/fock/PSJK.cc; src/psi4/lib3index/3index/dealias.cc; src/psi4/lib3index/3index/pstensor.cc; src/psi4/lib3index/3index/qr.cc; src/psi4/lib3index/3index/schwarz.cc; src/psi4/ccdensity/G_norm.cc; src/psi4/ccdensity/add_core_UHF.cc; src/psi4/ccdensity/add_ref.cc; src/psi4/ccdensity/ael.cc; src/psi4/ccdensity/classify.cc; src/psi4/ccdensity/densgrid_RHF.cc; src/psi4/ccdensity/distribute.cc; src/psi4/ccdensity/file_build.cc; src/psi4/ccdensity/get_frozen.cc; src/psi4/ccdensity/idx_error.cc; src/psi4/ccdensity/idx_permute.cc; src/psi4/ccdensity/resort_gamma.cc; src/psi4/ccdensity/resort_tei.cc; src/psi4/ccdensity/x_xi_check.cc; src/psi4/ccenergy/cc2_WabijT2.cc; src/psi4/cceom/check_sum.cc; src/psi4/cceom/hbar_norms.cc; src/psi4/cceom/norm_HC1.cc; src/psi4/cceom/sigmaCC3_RHF.cc; src/psi4/cceom/sort_amps.cc; src/psi4/cchbar/Wabei_RHF_FT2_a.cc; src/psi4/cclambda/overlap_LAMPS.cc; src/psi4/cclambda/BL2_AO.cc; src/psi4/cclambda/Lmag.cc; src/psi4/cclambda/WabeiL1.cc; src/psi4/cclambda/check_sum.cc; src/psi4/cclambda/halftrans.cc; src/psi4/cclambda/spinad_amps.cc; src/psi4/ccresponse/print_X.cc; src/psi4/cctriples/ET_AAA.cc; src/psi4/cctriples/ET_AAB.cc; ",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/525#issuecomment-262124158
https://github.com/psi4/psi4/issues/525#issuecomment-262125941:20,Usability,clear,cleared,20,"Once upon a time, I cleared dozens of headers out of occ or dfocc, to no appreciable compile-time effect, as they're just included elsewhere. Agree that headers could use a substantial pass. I think @ryanmrichard did some at time of CMakeRewrite, but not complete.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/525#issuecomment-262125941
https://github.com/psi4/psi4/issues/525#issuecomment-262127128:175,Availability,redundant,redundant,175,"I'm going over DFOCC now. It may not help, but certainly won't hurt. The reduced dependencies will improve parallelization, which may not help on Travis but will locally. The redundant files list is super useful, @dgasmith. We should certainly make sure that any functions contained therein are either tested (DFOCC, PSIMRCC, CC*, etc.) or removed (libqt, libciomr).",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/525#issuecomment-262127128
https://github.com/psi4/psi4/issues/525#issuecomment-262127128:73,Energy Efficiency,reduce,reduced,73,"I'm going over DFOCC now. It may not help, but certainly won't hurt. The reduced dependencies will improve parallelization, which may not help on Travis but will locally. The redundant files list is super useful, @dgasmith. We should certainly make sure that any functions contained therein are either tested (DFOCC, PSIMRCC, CC*, etc.) or removed (libqt, libciomr).",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/525#issuecomment-262127128
https://github.com/psi4/psi4/issues/525#issuecomment-262127128:81,Integrability,depend,dependencies,81,"I'm going over DFOCC now. It may not help, but certainly won't hurt. The reduced dependencies will improve parallelization, which may not help on Travis but will locally. The redundant files list is super useful, @dgasmith. We should certainly make sure that any functions contained therein are either tested (DFOCC, PSIMRCC, CC*, etc.) or removed (libqt, libciomr).",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/525#issuecomment-262127128
https://github.com/psi4/psi4/issues/525#issuecomment-262127128:175,Safety,redund,redundant,175,"I'm going over DFOCC now. It may not help, but certainly won't hurt. The reduced dependencies will improve parallelization, which may not help on Travis but will locally. The redundant files list is super useful, @dgasmith. We should certainly make sure that any functions contained therein are either tested (DFOCC, PSIMRCC, CC*, etc.) or removed (libqt, libciomr).",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/525#issuecomment-262127128
https://github.com/psi4/psi4/issues/525#issuecomment-262127128:302,Testability,test,tested,302,"I'm going over DFOCC now. It may not help, but certainly won't hurt. The reduced dependencies will improve parallelization, which may not help on Travis but will locally. The redundant files list is super useful, @dgasmith. We should certainly make sure that any functions contained therein are either tested (DFOCC, PSIMRCC, CC*, etc.) or removed (libqt, libciomr).",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/525#issuecomment-262127128
https://github.com/psi4/psi4/issues/525#issuecomment-262139161:94,Testability,test,testsuite,94,"I cleared out all the library files on the list, and they didn't put up a fight. Doing a full testsuite now.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/525#issuecomment-262139161
https://github.com/psi4/psi4/issues/525#issuecomment-262139161:2,Usability,clear,cleared,2,"I cleared out all the library files on the list, and they didn't put up a fight. Doing a full testsuite now.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/525#issuecomment-262139161
https://github.com/psi4/psi4/issues/525#issuecomment-262319020:119,Testability,test,test,119,"Hmmm, people should double check this list.... it may be that we have a; useful feature and nobody bothered to write a test case for it (development; of the test cases was not done in a systematic fashion...). In particular; @lothian and @fevangelista should check that these bits really are; extra/obsolete. On Mon, Nov 21, 2016 at 10:37 PM, Lori A. Burns notifications@github.com; wrote:. > I cleared out all the library files on the list, and they didn't put up a; > fight. Doing a full testsuite now.; > ; > —; > You are receiving this because you are subscribed to this thread.; > Reply to this email directly, view it on GitHub; > https://github.com/psi4/psi4/issues/525#issuecomment-262139161, or mute; > the thread; > https://github.com/notifications/unsubscribe-auth/AC9Qdk9MUAdFAT5TwLyNOX22XiVbROAWks5rAmNtgaJpZM4K40wH; > .",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/525#issuecomment-262319020
https://github.com/psi4/psi4/issues/525#issuecomment-262319020:157,Testability,test,test,157,"Hmmm, people should double check this list.... it may be that we have a; useful feature and nobody bothered to write a test case for it (development; of the test cases was not done in a systematic fashion...). In particular; @lothian and @fevangelista should check that these bits really are; extra/obsolete. On Mon, Nov 21, 2016 at 10:37 PM, Lori A. Burns notifications@github.com; wrote:. > I cleared out all the library files on the list, and they didn't put up a; > fight. Doing a full testsuite now.; > ; > —; > You are receiving this because you are subscribed to this thread.; > Reply to this email directly, view it on GitHub; > https://github.com/psi4/psi4/issues/525#issuecomment-262139161, or mute; > the thread; > https://github.com/notifications/unsubscribe-auth/AC9Qdk9MUAdFAT5TwLyNOX22XiVbROAWks5rAmNtgaJpZM4K40wH; > .",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/525#issuecomment-262319020
https://github.com/psi4/psi4/issues/525#issuecomment-262319020:490,Testability,test,testsuite,490,"Hmmm, people should double check this list.... it may be that we have a; useful feature and nobody bothered to write a test case for it (development; of the test cases was not done in a systematic fashion...). In particular; @lothian and @fevangelista should check that these bits really are; extra/obsolete. On Mon, Nov 21, 2016 at 10:37 PM, Lori A. Burns notifications@github.com; wrote:. > I cleared out all the library files on the list, and they didn't put up a; > fight. Doing a full testsuite now.; > ; > —; > You are receiving this because you are subscribed to this thread.; > Reply to this email directly, view it on GitHub; > https://github.com/psi4/psi4/issues/525#issuecomment-262139161, or mute; > the thread; > https://github.com/notifications/unsubscribe-auth/AC9Qdk9MUAdFAT5TwLyNOX22XiVbROAWks5rAmNtgaJpZM4K40wH; > .",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/525#issuecomment-262319020
https://github.com/psi4/psi4/issues/525#issuecomment-262319020:395,Usability,clear,cleared,395,"Hmmm, people should double check this list.... it may be that we have a; useful feature and nobody bothered to write a test case for it (development; of the test cases was not done in a systematic fashion...). In particular; @lothian and @fevangelista should check that these bits really are; extra/obsolete. On Mon, Nov 21, 2016 at 10:37 PM, Lori A. Burns notifications@github.com; wrote:. > I cleared out all the library files on the list, and they didn't put up a; > fight. Doing a full testsuite now.; > ; > —; > You are receiving this because you are subscribed to this thread.; > Reply to this email directly, view it on GitHub; > https://github.com/psi4/psi4/issues/525#issuecomment-262139161, or mute; > the thread; > https://github.com/notifications/unsubscribe-auth/AC9Qdk9MUAdFAT5TwLyNOX22XiVbROAWks5rAmNtgaJpZM4K40wH; > .",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/525#issuecomment-262319020
https://github.com/psi4/psi4/issues/525#issuecomment-262321324:209,Deployability,toggle,toggle,209,"Yes, I left libdpd alone, since FAE had needed a function that psi4 didn't embed because unused. For the libraries, ""clearing out"" means simply not compiling. If any function is found to be needed, it's a `#` toggle in the CMakeLists.txt away. (Except possibly for ccsort and transqt2, for which there's another scheme afoot.) Could keep the ""unneeded"" lib files toggled off for months and then reevaluate, to be cautious.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/525#issuecomment-262321324
https://github.com/psi4/psi4/issues/525#issuecomment-262321324:363,Deployability,toggle,toggled,363,"Yes, I left libdpd alone, since FAE had needed a function that psi4 didn't embed because unused. For the libraries, ""clearing out"" means simply not compiling. If any function is found to be needed, it's a `#` toggle in the CMakeLists.txt away. (Except possibly for ccsort and transqt2, for which there's another scheme afoot.) Could keep the ""unneeded"" lib files toggled off for months and then reevaluate, to be cautious.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/525#issuecomment-262321324
https://github.com/psi4/psi4/issues/525#issuecomment-262321324:117,Usability,clear,clearing,117,"Yes, I left libdpd alone, since FAE had needed a function that psi4 didn't embed because unused. For the libraries, ""clearing out"" means simply not compiling. If any function is found to be needed, it's a `#` toggle in the CMakeLists.txt away. (Except possibly for ccsort and transqt2, for which there's another scheme afoot.) Could keep the ""unneeded"" lib files toggled off for months and then reevaluate, to be cautious.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/525#issuecomment-262321324
https://github.com/psi4/psi4/issues/525#issuecomment-262321324:137,Usability,simpl,simply,137,"Yes, I left libdpd alone, since FAE had needed a function that psi4 didn't embed because unused. For the libraries, ""clearing out"" means simply not compiling. If any function is found to be needed, it's a `#` toggle in the CMakeLists.txt away. (Except possibly for ccsort and transqt2, for which there's another scheme afoot.) Could keep the ""unneeded"" lib files toggled off for months and then reevaluate, to be cautious.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/525#issuecomment-262321324
https://github.com/psi4/psi4/issues/525#issuecomment-266143805:814,Modifiability,plugin,plugin,814,"New compilation breakdown:. ```; psi4 3874.3 100.0%; ---------------------------------------; dfocc 356.2 9.2%; ccdensity 319.7 8.3%; core 295.5 7.6%; mints 260.3 6.7%; dpd 241.1 6.2%; psimrcc 233.7 6.0%; occ 183.1 4.7%; ccenergy 182.1 4.7%; cclambda 129.3 3.3%; dcft 122.7 3.2%; cceom 121.1 3.1%; fock 116.9 3.0%; optking 108.0 2.8%; sapt_solver 104.7 2.7%; ccresponse 102.0 2.6%; detci 92.6 2.4%; cchbar 75.1 1.9%; mcscf 72.9 1.9%; cctriples 70.1 1.8%; iwl 64.9 1.7%; fnocc 53.3 1.4%; functional 52.1 1.3%; scf_solver 48.8 1.3%; trans 42.1 1.1%; cctransort 39.5 1.0%; psio 39.4 1.0%; qt 38.0 1.0%; fisapt 33.0 0.9%; ciomr 28.5 0.7%; adc 28.1 0.7%; 3index 26.7 0.7%; scfgrad 26.1 0.7%; findif 23.5 0.6%; moinfo 20.3 0.5%; parallel 18.0 0.5%; thce 17.0 0.4%; dfmp2 15.9 0.4%; options 12.1 0.3%; psi4util 8.7 0.2%; plugin 8.6 0.2%; cubeprop 8.2 0.2%; efp_solver 8.2 0.2%; diis 5.8 0.2%; mrcc 5.4 0.1%; disp 3.3 0.1%; sapt 3.1 0.1%; thermo 2.9 0.1%; efp_interface 2.4 0.1%; filesystem 2.2 0.1%; dmrg 0.0 0.0%; gdma_interface 0.0 0.0%; ```. Script to analyze the `time-icpc` output; ```; import re; import operator. timeicpc = 'timeresults.txt'. with open(timeicpc, 'r') as handle:; lines = handle.readlines(). target = re.compile(""""""CMakeFiles/(\w+).dir""""""); timeit = re.compile(""""""real\s+(\d+)m(\d.+)s""""""); bigdict = {}. module = ''; for ln in lines:; lln = ln.strip(); mobj = target.search(lln); if mobj:; module = mobj.group(1); if module not in bigdict:; bigdict[module] = []. mobj = timeit.search(lln); if mobj:; seconds = 60.0 * float(mobj.group(1)) + float(mobj.group(2)); bigdict[module].append(seconds). total = 0.0; for mod in bigdict:; modtotal = sum(bigdict[mod]); bigdict[mod] = modtotal; total += modtotal. sorted_x = sorted(bigdict.items(), key=operator.itemgetter(1), reverse=True). print """"""{:20} {:8.1f} {:8.1f}%"""""".format('psi4', total, 100.0); print """"""---------------------------------------""""""; for mod in sorted_x:; print """"""{:20} {:8.1f} {:8.1f}%"""""".format(mod[0], mod[1], 100 * ",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/525#issuecomment-266143805
https://github.com/psi4/psi4/issues/525#issuecomment-305371303:15,Availability,down,down,15,"I trimmed this down as much as I could and played with the headers to kill off the files that took an extremely long time (30-50 seconds). Each file now takes 2-8 seconds to compile, but we simply have a lot of them. Without moving more into separate modules the compile time is not likely not going to come down much.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/525#issuecomment-305371303
https://github.com/psi4/psi4/issues/525#issuecomment-305371303:308,Availability,down,down,308,"I trimmed this down as much as I could and played with the headers to kill off the files that took an extremely long time (30-50 seconds). Each file now takes 2-8 seconds to compile, but we simply have a lot of them. Without moving more into separate modules the compile time is not likely not going to come down much.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/525#issuecomment-305371303
https://github.com/psi4/psi4/issues/525#issuecomment-305371303:190,Usability,simpl,simply,190,"I trimmed this down as much as I could and played with the headers to kill off the files that took an extremely long time (30-50 seconds). Each file now takes 2-8 seconds to compile, but we simply have a lot of them. Without moving more into separate modules the compile time is not likely not going to come down much.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/525#issuecomment-305371303
https://github.com/psi4/psi4/pull/527#issuecomment-262287350:445,Safety,safe,safe,445,"@lothain commented via email and it seems to have been lost in cyberspace:. >I know that Rollin's calculation ran with both codes, but I do not believe we have confirmed that the disk space requirements of cctranssort are reasonable. I was able to run the calculations that his comment refers to, both using cctransort and using ccsort/transqt2. The disk requirements for the transformation/sorting integrals were identical, so I believe we are safe in moving ccsort/transqt2 to the attic.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/527#issuecomment-262287350
https://github.com/psi4/psi4/pull/527#issuecomment-263865276:125,Availability,down,downsides,125,Just a general git point: This one and #534 are tied to the same branch history so neither should be rebased. Its one of the downsides of a rebase team policy. Merges are fine.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/527#issuecomment-263865276
https://github.com/psi4/psi4/issues/528#issuecomment-263048284:15,Availability,error,error,15,"For the ""print error"" line, I get the below on a recent version. ```; ---------------------------------------------------------------------------------------------------------; Stage Method / Basis Energy [Eh] Scheme; ---------------------------------------------------------------------------------------------------------; scf hf / jun-cc-pvqz -152.13112737 xtpl_highest_1; corl mp2 / jun-cc-pv[tq]z -0.59785921 corl_xtpl_helgaker_2; delta fno-ccsd(t) - mp2 / jun-cc-pvtz -0.02698189 xtpl_highest_1; total CBS -152.75596848 ; ---------------------------------------------------------------------------------------------------------; ```. The above looks ok to me, so I suspect you've hit #455 . You can easily patch your installation by doing https://github.com/psi4/psi4/commit/2e6b373102294cd59faf47d68044ff2402376e73 , no recompile required. Let me know if you think yours is a different issue.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/528#issuecomment-263048284
https://github.com/psi4/psi4/issues/528#issuecomment-263048284:712,Deployability,patch,patch,712,"For the ""print error"" line, I get the below on a recent version. ```; ---------------------------------------------------------------------------------------------------------; Stage Method / Basis Energy [Eh] Scheme; ---------------------------------------------------------------------------------------------------------; scf hf / jun-cc-pvqz -152.13112737 xtpl_highest_1; corl mp2 / jun-cc-pv[tq]z -0.59785921 corl_xtpl_helgaker_2; delta fno-ccsd(t) - mp2 / jun-cc-pvtz -0.02698189 xtpl_highest_1; total CBS -152.75596848 ; ---------------------------------------------------------------------------------------------------------; ```. The above looks ok to me, so I suspect you've hit #455 . You can easily patch your installation by doing https://github.com/psi4/psi4/commit/2e6b373102294cd59faf47d68044ff2402376e73 , no recompile required. Let me know if you think yours is a different issue.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/528#issuecomment-263048284
https://github.com/psi4/psi4/issues/528#issuecomment-263048284:723,Deployability,install,installation,723,"For the ""print error"" line, I get the below on a recent version. ```; ---------------------------------------------------------------------------------------------------------; Stage Method / Basis Energy [Eh] Scheme; ---------------------------------------------------------------------------------------------------------; scf hf / jun-cc-pvqz -152.13112737 xtpl_highest_1; corl mp2 / jun-cc-pv[tq]z -0.59785921 corl_xtpl_helgaker_2; delta fno-ccsd(t) - mp2 / jun-cc-pvtz -0.02698189 xtpl_highest_1; total CBS -152.75596848 ; ---------------------------------------------------------------------------------------------------------; ```. The above looks ok to me, so I suspect you've hit #455 . You can easily patch your installation by doing https://github.com/psi4/psi4/commit/2e6b373102294cd59faf47d68044ff2402376e73 , no recompile required. Let me know if you think yours is a different issue.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/528#issuecomment-263048284
https://github.com/psi4/psi4/issues/528#issuecomment-263048284:198,Energy Efficiency,Energy,Energy,198,"For the ""print error"" line, I get the below on a recent version. ```; ---------------------------------------------------------------------------------------------------------; Stage Method / Basis Energy [Eh] Scheme; ---------------------------------------------------------------------------------------------------------; scf hf / jun-cc-pvqz -152.13112737 xtpl_highest_1; corl mp2 / jun-cc-pv[tq]z -0.59785921 corl_xtpl_helgaker_2; delta fno-ccsd(t) - mp2 / jun-cc-pvtz -0.02698189 xtpl_highest_1; total CBS -152.75596848 ; ---------------------------------------------------------------------------------------------------------; ```. The above looks ok to me, so I suspect you've hit #455 . You can easily patch your installation by doing https://github.com/psi4/psi4/commit/2e6b373102294cd59faf47d68044ff2402376e73 , no recompile required. Let me know if you think yours is a different issue.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/528#issuecomment-263048284
https://github.com/psi4/psi4/issues/528#issuecomment-263098427:104,Deployability,release,release,104,"Glad to hear it’s fixed. Yes, 1.0.54 is a few hundred commits ago. Currently we’re building up to a 1.1 release, but unless you need pcmsolver, ambit, or advanced plugin technology, the current development head should be perfectly useable. There is a later conda binary, but we’re keeping development snapshots under a different label, so that only releases are pulled with “conda update psi4 -c psi4”. You can get the development snapshots via “conda update psi4 -c psi4 -c psi4/label/test”. That will pull packages additionally from the “test” (name may change) label. The 1.0.54 to pre-1.1 changes are sufficiently drastic that you should probably do a fresh conda install of psi4, rather than just a conda update. > On Nov 26, 2016, at 5:45 PM, Holger Kruse <notifications@github.com> wrote:; > ; > Thanks! That fixes it.; > I wasn't aware the conda binary is so far behind the git version.; > ; > —; > You are receiving this because you commented.; > Reply to this email directly, view it on GitHub <https://github.com/psi4/psi4/issues/528#issuecomment-263090503>, or mute the thread <https://github.com/notifications/unsubscribe-auth/ACNR6kYmnjd_KUOlMjljX6_8G0XiaKIcks5rCLaRgaJpZM4K8kr4>.; >",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/528#issuecomment-263098427
https://github.com/psi4/psi4/issues/528#issuecomment-263098427:349,Deployability,release,releases,349,"Glad to hear it’s fixed. Yes, 1.0.54 is a few hundred commits ago. Currently we’re building up to a 1.1 release, but unless you need pcmsolver, ambit, or advanced plugin technology, the current development head should be perfectly useable. There is a later conda binary, but we’re keeping development snapshots under a different label, so that only releases are pulled with “conda update psi4 -c psi4”. You can get the development snapshots via “conda update psi4 -c psi4 -c psi4/label/test”. That will pull packages additionally from the “test” (name may change) label. The 1.0.54 to pre-1.1 changes are sufficiently drastic that you should probably do a fresh conda install of psi4, rather than just a conda update. > On Nov 26, 2016, at 5:45 PM, Holger Kruse <notifications@github.com> wrote:; > ; > Thanks! That fixes it.; > I wasn't aware the conda binary is so far behind the git version.; > ; > —; > You are receiving this because you commented.; > Reply to this email directly, view it on GitHub <https://github.com/psi4/psi4/issues/528#issuecomment-263090503>, or mute the thread <https://github.com/notifications/unsubscribe-auth/ACNR6kYmnjd_KUOlMjljX6_8G0XiaKIcks5rCLaRgaJpZM4K8kr4>.; >",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/528#issuecomment-263098427
https://github.com/psi4/psi4/issues/528#issuecomment-263098427:381,Deployability,update,update,381,"Glad to hear it’s fixed. Yes, 1.0.54 is a few hundred commits ago. Currently we’re building up to a 1.1 release, but unless you need pcmsolver, ambit, or advanced plugin technology, the current development head should be perfectly useable. There is a later conda binary, but we’re keeping development snapshots under a different label, so that only releases are pulled with “conda update psi4 -c psi4”. You can get the development snapshots via “conda update psi4 -c psi4 -c psi4/label/test”. That will pull packages additionally from the “test” (name may change) label. The 1.0.54 to pre-1.1 changes are sufficiently drastic that you should probably do a fresh conda install of psi4, rather than just a conda update. > On Nov 26, 2016, at 5:45 PM, Holger Kruse <notifications@github.com> wrote:; > ; > Thanks! That fixes it.; > I wasn't aware the conda binary is so far behind the git version.; > ; > —; > You are receiving this because you commented.; > Reply to this email directly, view it on GitHub <https://github.com/psi4/psi4/issues/528#issuecomment-263090503>, or mute the thread <https://github.com/notifications/unsubscribe-auth/ACNR6kYmnjd_KUOlMjljX6_8G0XiaKIcks5rCLaRgaJpZM4K8kr4>.; >",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/528#issuecomment-263098427
https://github.com/psi4/psi4/issues/528#issuecomment-263098427:452,Deployability,update,update,452,"Glad to hear it’s fixed. Yes, 1.0.54 is a few hundred commits ago. Currently we’re building up to a 1.1 release, but unless you need pcmsolver, ambit, or advanced plugin technology, the current development head should be perfectly useable. There is a later conda binary, but we’re keeping development snapshots under a different label, so that only releases are pulled with “conda update psi4 -c psi4”. You can get the development snapshots via “conda update psi4 -c psi4 -c psi4/label/test”. That will pull packages additionally from the “test” (name may change) label. The 1.0.54 to pre-1.1 changes are sufficiently drastic that you should probably do a fresh conda install of psi4, rather than just a conda update. > On Nov 26, 2016, at 5:45 PM, Holger Kruse <notifications@github.com> wrote:; > ; > Thanks! That fixes it.; > I wasn't aware the conda binary is so far behind the git version.; > ; > —; > You are receiving this because you commented.; > Reply to this email directly, view it on GitHub <https://github.com/psi4/psi4/issues/528#issuecomment-263090503>, or mute the thread <https://github.com/notifications/unsubscribe-auth/ACNR6kYmnjd_KUOlMjljX6_8G0XiaKIcks5rCLaRgaJpZM4K8kr4>.; >",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/528#issuecomment-263098427
https://github.com/psi4/psi4/issues/528#issuecomment-263098427:668,Deployability,install,install,668,"Glad to hear it’s fixed. Yes, 1.0.54 is a few hundred commits ago. Currently we’re building up to a 1.1 release, but unless you need pcmsolver, ambit, or advanced plugin technology, the current development head should be perfectly useable. There is a later conda binary, but we’re keeping development snapshots under a different label, so that only releases are pulled with “conda update psi4 -c psi4”. You can get the development snapshots via “conda update psi4 -c psi4 -c psi4/label/test”. That will pull packages additionally from the “test” (name may change) label. The 1.0.54 to pre-1.1 changes are sufficiently drastic that you should probably do a fresh conda install of psi4, rather than just a conda update. > On Nov 26, 2016, at 5:45 PM, Holger Kruse <notifications@github.com> wrote:; > ; > Thanks! That fixes it.; > I wasn't aware the conda binary is so far behind the git version.; > ; > —; > You are receiving this because you commented.; > Reply to this email directly, view it on GitHub <https://github.com/psi4/psi4/issues/528#issuecomment-263090503>, or mute the thread <https://github.com/notifications/unsubscribe-auth/ACNR6kYmnjd_KUOlMjljX6_8G0XiaKIcks5rCLaRgaJpZM4K8kr4>.; >",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/528#issuecomment-263098427
https://github.com/psi4/psi4/issues/528#issuecomment-263098427:710,Deployability,update,update,710,"Glad to hear it’s fixed. Yes, 1.0.54 is a few hundred commits ago. Currently we’re building up to a 1.1 release, but unless you need pcmsolver, ambit, or advanced plugin technology, the current development head should be perfectly useable. There is a later conda binary, but we’re keeping development snapshots under a different label, so that only releases are pulled with “conda update psi4 -c psi4”. You can get the development snapshots via “conda update psi4 -c psi4 -c psi4/label/test”. That will pull packages additionally from the “test” (name may change) label. The 1.0.54 to pre-1.1 changes are sufficiently drastic that you should probably do a fresh conda install of psi4, rather than just a conda update. > On Nov 26, 2016, at 5:45 PM, Holger Kruse <notifications@github.com> wrote:; > ; > Thanks! That fixes it.; > I wasn't aware the conda binary is so far behind the git version.; > ; > —; > You are receiving this because you commented.; > Reply to this email directly, view it on GitHub <https://github.com/psi4/psi4/issues/528#issuecomment-263090503>, or mute the thread <https://github.com/notifications/unsubscribe-auth/ACNR6kYmnjd_KUOlMjljX6_8G0XiaKIcks5rCLaRgaJpZM4K8kr4>.; >",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/528#issuecomment-263098427
https://github.com/psi4/psi4/issues/528#issuecomment-263098427:163,Modifiability,plugin,plugin,163,"Glad to hear it’s fixed. Yes, 1.0.54 is a few hundred commits ago. Currently we’re building up to a 1.1 release, but unless you need pcmsolver, ambit, or advanced plugin technology, the current development head should be perfectly useable. There is a later conda binary, but we’re keeping development snapshots under a different label, so that only releases are pulled with “conda update psi4 -c psi4”. You can get the development snapshots via “conda update psi4 -c psi4 -c psi4/label/test”. That will pull packages additionally from the “test” (name may change) label. The 1.0.54 to pre-1.1 changes are sufficiently drastic that you should probably do a fresh conda install of psi4, rather than just a conda update. > On Nov 26, 2016, at 5:45 PM, Holger Kruse <notifications@github.com> wrote:; > ; > Thanks! That fixes it.; > I wasn't aware the conda binary is so far behind the git version.; > ; > —; > You are receiving this because you commented.; > Reply to this email directly, view it on GitHub <https://github.com/psi4/psi4/issues/528#issuecomment-263090503>, or mute the thread <https://github.com/notifications/unsubscribe-auth/ACNR6kYmnjd_KUOlMjljX6_8G0XiaKIcks5rCLaRgaJpZM4K8kr4>.; >",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/528#issuecomment-263098427
https://github.com/psi4/psi4/issues/528#issuecomment-263098427:486,Testability,test,test,486,"Glad to hear it’s fixed. Yes, 1.0.54 is a few hundred commits ago. Currently we’re building up to a 1.1 release, but unless you need pcmsolver, ambit, or advanced plugin technology, the current development head should be perfectly useable. There is a later conda binary, but we’re keeping development snapshots under a different label, so that only releases are pulled with “conda update psi4 -c psi4”. You can get the development snapshots via “conda update psi4 -c psi4 -c psi4/label/test”. That will pull packages additionally from the “test” (name may change) label. The 1.0.54 to pre-1.1 changes are sufficiently drastic that you should probably do a fresh conda install of psi4, rather than just a conda update. > On Nov 26, 2016, at 5:45 PM, Holger Kruse <notifications@github.com> wrote:; > ; > Thanks! That fixes it.; > I wasn't aware the conda binary is so far behind the git version.; > ; > —; > You are receiving this because you commented.; > Reply to this email directly, view it on GitHub <https://github.com/psi4/psi4/issues/528#issuecomment-263090503>, or mute the thread <https://github.com/notifications/unsubscribe-auth/ACNR6kYmnjd_KUOlMjljX6_8G0XiaKIcks5rCLaRgaJpZM4K8kr4>.; >",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/528#issuecomment-263098427
https://github.com/psi4/psi4/issues/528#issuecomment-263098427:540,Testability,test,test,540,"Glad to hear it’s fixed. Yes, 1.0.54 is a few hundred commits ago. Currently we’re building up to a 1.1 release, but unless you need pcmsolver, ambit, or advanced plugin technology, the current development head should be perfectly useable. There is a later conda binary, but we’re keeping development snapshots under a different label, so that only releases are pulled with “conda update psi4 -c psi4”. You can get the development snapshots via “conda update psi4 -c psi4 -c psi4/label/test”. That will pull packages additionally from the “test” (name may change) label. The 1.0.54 to pre-1.1 changes are sufficiently drastic that you should probably do a fresh conda install of psi4, rather than just a conda update. > On Nov 26, 2016, at 5:45 PM, Holger Kruse <notifications@github.com> wrote:; > ; > Thanks! That fixes it.; > I wasn't aware the conda binary is so far behind the git version.; > ; > —; > You are receiving this because you commented.; > Reply to this email directly, view it on GitHub <https://github.com/psi4/psi4/issues/528#issuecomment-263090503>, or mute the thread <https://github.com/notifications/unsubscribe-auth/ACNR6kYmnjd_KUOlMjljX6_8G0XiaKIcks5rCLaRgaJpZM4K8kr4>.; >",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/528#issuecomment-263098427
https://github.com/psi4/psi4/pull/529#issuecomment-263151298:87,Usability,clear,clearly,87,"Splendid, you found it; I kept getting that basis_relativistic was set, even though it clearly wasn't. LGTM",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/529#issuecomment-263151298
https://github.com/psi4/psi4/pull/530#issuecomment-263272403:275,Availability,error,errors,275,"Git-hooks is probably a non-starter, so +1 for avoiding that. Another +1 for clang-format, I use it internally quite a bit with Google style and 4 spaces. Im kind of on the fence about this. A few notes:. Pros:; - Completely uniform style. Cons:; - We are constantly avoided errors, the `# pyflakes` and `# noqa` messages are messier than most of our python errors IMO.; - Plenty of times when we want something other than pep8 formatting (e.g. `VARH`).; - Completely uniform style (see previous point).; - If we override a single error in pyflakes, pyflakes will continue to fail for all further commits. It would become very easy just to ignore this test. Dont get me wrong, we should do periodic style cleanups. This is needed.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/530#issuecomment-263272403
https://github.com/psi4/psi4/pull/530#issuecomment-263272403:358,Availability,error,errors,358,"Git-hooks is probably a non-starter, so +1 for avoiding that. Another +1 for clang-format, I use it internally quite a bit with Google style and 4 spaces. Im kind of on the fence about this. A few notes:. Pros:; - Completely uniform style. Cons:; - We are constantly avoided errors, the `# pyflakes` and `# noqa` messages are messier than most of our python errors IMO.; - Plenty of times when we want something other than pep8 formatting (e.g. `VARH`).; - Completely uniform style (see previous point).; - If we override a single error in pyflakes, pyflakes will continue to fail for all further commits. It would become very easy just to ignore this test. Dont get me wrong, we should do periodic style cleanups. This is needed.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/530#issuecomment-263272403
https://github.com/psi4/psi4/pull/530#issuecomment-263272403:531,Availability,error,error,531,"Git-hooks is probably a non-starter, so +1 for avoiding that. Another +1 for clang-format, I use it internally quite a bit with Google style and 4 spaces. Im kind of on the fence about this. A few notes:. Pros:; - Completely uniform style. Cons:; - We are constantly avoided errors, the `# pyflakes` and `# noqa` messages are messier than most of our python errors IMO.; - Plenty of times when we want something other than pep8 formatting (e.g. `VARH`).; - Completely uniform style (see previous point).; - If we override a single error in pyflakes, pyflakes will continue to fail for all further commits. It would become very easy just to ignore this test. Dont get me wrong, we should do periodic style cleanups. This is needed.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/530#issuecomment-263272403
https://github.com/psi4/psi4/pull/530#issuecomment-263272403:313,Integrability,message,messages,313,"Git-hooks is probably a non-starter, so +1 for avoiding that. Another +1 for clang-format, I use it internally quite a bit with Google style and 4 spaces. Im kind of on the fence about this. A few notes:. Pros:; - Completely uniform style. Cons:; - We are constantly avoided errors, the `# pyflakes` and `# noqa` messages are messier than most of our python errors IMO.; - Plenty of times when we want something other than pep8 formatting (e.g. `VARH`).; - Completely uniform style (see previous point).; - If we override a single error in pyflakes, pyflakes will continue to fail for all further commits. It would become very easy just to ignore this test. Dont get me wrong, we should do periodic style cleanups. This is needed.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/530#issuecomment-263272403
https://github.com/psi4/psi4/pull/530#issuecomment-263272403:47,Safety,avoid,avoiding,47,"Git-hooks is probably a non-starter, so +1 for avoiding that. Another +1 for clang-format, I use it internally quite a bit with Google style and 4 spaces. Im kind of on the fence about this. A few notes:. Pros:; - Completely uniform style. Cons:; - We are constantly avoided errors, the `# pyflakes` and `# noqa` messages are messier than most of our python errors IMO.; - Plenty of times when we want something other than pep8 formatting (e.g. `VARH`).; - Completely uniform style (see previous point).; - If we override a single error in pyflakes, pyflakes will continue to fail for all further commits. It would become very easy just to ignore this test. Dont get me wrong, we should do periodic style cleanups. This is needed.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/530#issuecomment-263272403
https://github.com/psi4/psi4/pull/530#issuecomment-263272403:267,Safety,avoid,avoided,267,"Git-hooks is probably a non-starter, so +1 for avoiding that. Another +1 for clang-format, I use it internally quite a bit with Google style and 4 spaces. Im kind of on the fence about this. A few notes:. Pros:; - Completely uniform style. Cons:; - We are constantly avoided errors, the `# pyflakes` and `# noqa` messages are messier than most of our python errors IMO.; - Plenty of times when we want something other than pep8 formatting (e.g. `VARH`).; - Completely uniform style (see previous point).; - If we override a single error in pyflakes, pyflakes will continue to fail for all further commits. It would become very easy just to ignore this test. Dont get me wrong, we should do periodic style cleanups. This is needed.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/530#issuecomment-263272403
https://github.com/psi4/psi4/pull/530#issuecomment-263272403:652,Testability,test,test,652,"Git-hooks is probably a non-starter, so +1 for avoiding that. Another +1 for clang-format, I use it internally quite a bit with Google style and 4 spaces. Im kind of on the fence about this. A few notes:. Pros:; - Completely uniform style. Cons:; - We are constantly avoided errors, the `# pyflakes` and `# noqa` messages are messier than most of our python errors IMO.; - Plenty of times when we want something other than pep8 formatting (e.g. `VARH`).; - Completely uniform style (see previous point).; - If we override a single error in pyflakes, pyflakes will continue to fail for all further commits. It would become very easy just to ignore this test. Dont get me wrong, we should do periodic style cleanups. This is needed.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/530#issuecomment-263272403
https://github.com/psi4/psi4/pull/530#issuecomment-263290760:294,Availability,error,errors,294,"On the `exception.message`, change https://github.com/psi4/psi4/blob/master/psi4/driver/procedures/proc.py#L3934 from `== False` to `is False`, then run cepa2. You should get an exception that doesn't have a message, so it throws another exception. On the Cons, yes, there are rather more kept errors than I would have expected. We can ignore them more broadly in `.flake8` if we choose, including all line lengths and imports not used. The noqa for things like VARH don't bother me too much. On the overriding a single error, yes, would have to insert to ignore code fairly promptly to keep getting good results. I've had the driver to within a few chosen exceptions of pep8 compliant, so maintaining it as such I don't think is too onerous.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/530#issuecomment-263290760
https://github.com/psi4/psi4/pull/530#issuecomment-263290760:520,Availability,error,error,520,"On the `exception.message`, change https://github.com/psi4/psi4/blob/master/psi4/driver/procedures/proc.py#L3934 from `== False` to `is False`, then run cepa2. You should get an exception that doesn't have a message, so it throws another exception. On the Cons, yes, there are rather more kept errors than I would have expected. We can ignore them more broadly in `.flake8` if we choose, including all line lengths and imports not used. The noqa for things like VARH don't bother me too much. On the overriding a single error, yes, would have to insert to ignore code fairly promptly to keep getting good results. I've had the driver to within a few chosen exceptions of pep8 compliant, so maintaining it as such I don't think is too onerous.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/530#issuecomment-263290760
https://github.com/psi4/psi4/pull/530#issuecomment-263290760:18,Integrability,message,message,18,"On the `exception.message`, change https://github.com/psi4/psi4/blob/master/psi4/driver/procedures/proc.py#L3934 from `== False` to `is False`, then run cepa2. You should get an exception that doesn't have a message, so it throws another exception. On the Cons, yes, there are rather more kept errors than I would have expected. We can ignore them more broadly in `.flake8` if we choose, including all line lengths and imports not used. The noqa for things like VARH don't bother me too much. On the overriding a single error, yes, would have to insert to ignore code fairly promptly to keep getting good results. I've had the driver to within a few chosen exceptions of pep8 compliant, so maintaining it as such I don't think is too onerous.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/530#issuecomment-263290760
https://github.com/psi4/psi4/pull/530#issuecomment-263290760:208,Integrability,message,message,208,"On the `exception.message`, change https://github.com/psi4/psi4/blob/master/psi4/driver/procedures/proc.py#L3934 from `== False` to `is False`, then run cepa2. You should get an exception that doesn't have a message, so it throws another exception. On the Cons, yes, there are rather more kept errors than I would have expected. We can ignore them more broadly in `.flake8` if we choose, including all line lengths and imports not used. The noqa for things like VARH don't bother me too much. On the overriding a single error, yes, would have to insert to ignore code fairly promptly to keep getting good results. I've had the driver to within a few chosen exceptions of pep8 compliant, so maintaining it as such I don't think is too onerous.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/530#issuecomment-263290760
https://github.com/psi4/psi4/pull/530#issuecomment-263296772:70,Availability,error,error,70,@loriab This works fine for me in Python 2 and 3. Can you provide the error message? This should be fine as the base Exception class always inits a blank `message`. We may be doing something wrong somewhere.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/530#issuecomment-263296772
https://github.com/psi4/psi4/pull/530#issuecomment-263296772:76,Integrability,message,message,76,@loriab This works fine for me in Python 2 and 3. Can you provide the error message? This should be fine as the base Exception class always inits a blank `message`. We may be doing something wrong somewhere.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/530#issuecomment-263296772
https://github.com/psi4/psi4/pull/530#issuecomment-263296772:155,Integrability,message,message,155,@loriab This works fine for me in Python 2 and 3. Can you provide the error message? This should be fine as the base Exception class always inits a blank `message`. We may be doing something wrong somewhere.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/530#issuecomment-263296772
https://github.com/psi4/psi4/pull/530#issuecomment-263304143:26,Availability,error,error,26,Apparently the `str(mess` error I was getting last night was from a combination of errors. Can't recreate at present. So that part will have to be reverted until I hit the problem again and fully note its circumstances.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/530#issuecomment-263304143
https://github.com/psi4/psi4/pull/530#issuecomment-263304143:83,Availability,error,errors,83,Apparently the `str(mess` error I was getting last night was from a combination of errors. Can't recreate at present. So that part will have to be reverted until I hit the problem again and fully note its circumstances.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/530#issuecomment-263304143
https://github.com/psi4/psi4/issues/531#issuecomment-263449298:303,Deployability,release,release,303,"For future reference: since this is a bug in the Psi4 Fedora package, you should file the bug in the Fedora bug tracker. But yes, I can reproduce this on Fedora 24 and Fedora 25, although I'm not sure why this happens: I have been able to run jobs with the Fedora package before. I'm waiting on the 1.1 release to update the Fedora packages.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/531#issuecomment-263449298
https://github.com/psi4/psi4/issues/531#issuecomment-263449298:314,Deployability,update,update,314,"For future reference: since this is a bug in the Psi4 Fedora package, you should file the bug in the Fedora bug tracker. But yes, I can reproduce this on Fedora 24 and Fedora 25, although I'm not sure why this happens: I have been able to run jobs with the Fedora package before. I'm waiting on the 1.1 release to update the Fedora packages.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/531#issuecomment-263449298
https://github.com/psi4/psi4/issues/531#issuecomment-263452883:243,Integrability,depend,dependency,243,"> For future reference: since this is a bug in the Psi4 Fedora package, you should file the bug in the Fedora bug tracker. Yeah, @susilehtola, I'm opening the bug here and in Fedora too, of course.; @loriab if I remember correctly, Boost is a dependency in Fedora ('s psi4), so it may be the case..",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/531#issuecomment-263452883
https://github.com/psi4/psi4/issues/531#issuecomment-263455822:76,Integrability,depend,dependencies,76,"Yes, the Fedora packages use shared Boost libs, but since they're versioned dependencies there shouldn't be any problem as the dependency breaks when the Boost soname changes. Anyway, this should be solved with 1.1 since there's no Boost anymore. Because the Fedora packaging guidelines have changed, I'll also be able to compile in more functionality such as CheMPS2.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/531#issuecomment-263455822
https://github.com/psi4/psi4/issues/531#issuecomment-263455822:127,Integrability,depend,dependency,127,"Yes, the Fedora packages use shared Boost libs, but since they're versioned dependencies there shouldn't be any problem as the dependency breaks when the Boost soname changes. Anyway, this should be solved with 1.1 since there's no Boost anymore. Because the Fedora packaging guidelines have changed, I'll also be able to compile in more functionality such as CheMPS2.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/531#issuecomment-263455822
https://github.com/psi4/psi4/issues/531#issuecomment-263455822:276,Usability,guid,guidelines,276,"Yes, the Fedora packages use shared Boost libs, but since they're versioned dependencies there shouldn't be any problem as the dependency breaks when the Boost soname changes. Anyway, this should be solved with 1.1 since there's no Boost anymore. Because the Fedora packaging guidelines have changed, I'll also be able to compile in more functionality such as CheMPS2.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/531#issuecomment-263455822
https://github.com/psi4/psi4/issues/531#issuecomment-272725891:111,Deployability,update,updated,111,"Closing this as there's nothing to be done on Psi4's side, and this will resolve naturally when Fedora package updated.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/531#issuecomment-272725891
https://github.com/psi4/psi4/pull/532#issuecomment-263686733:68,Modifiability,variab,variable,68,While im thinking of it could you replace all the `type` and `file` variable names to something else so they are not Python reserved objects/types? LGTM,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/532#issuecomment-263686733
https://github.com/psi4/psi4/pull/532#issuecomment-263862379:55,Modifiability,variab,variables,55,"Hold off merging this, please. I'm going to rename the variables that @dgasmith mentioned today when I get a chance.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/532#issuecomment-263862379
https://github.com/psi4/psi4/pull/532#issuecomment-265630868:32,Deployability,update,updated,32,@jturney Switched the names and updated the branch. Is there anything else needed here?,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/532#issuecomment-265630868
https://github.com/psi4/psi4/pull/533#issuecomment-263735026:117,Performance,tune,tuned,117,"If it's generated code, would something like the libint ExternalProject w/i ExternalProject work? Or is it processor-tuned generated code? But we should probably just talk in person someday.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/533#issuecomment-263735026
https://github.com/psi4/psi4/pull/533#issuecomment-275186110:159,Modifiability,variab,variable,159,"For consistency's sake regarding Psi4 AddOns, I'd really like to keep `ENABLE_simint` as a boolean and have something like `SIMINT_TARGET_ARCH` as an optional variable. Would something like [this](https://github.com/tunabrain/tungsten/blob/master/cmake/OptimizeForArchitecture.cmake) allow selecting a good default for `SIMINT_TARGET_ARCH`?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/533#issuecomment-275186110
https://github.com/psi4/psi4/pull/533#issuecomment-275186110:253,Performance,Optimiz,OptimizeForArchitecture,253,"For consistency's sake regarding Psi4 AddOns, I'd really like to keep `ENABLE_simint` as a boolean and have something like `SIMINT_TARGET_ARCH` as an optional variable. Would something like [this](https://github.com/tunabrain/tungsten/blob/master/cmake/OptimizeForArchitecture.cmake) allow selecting a good default for `SIMINT_TARGET_ARCH`?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/533#issuecomment-275186110
https://github.com/psi4/psi4/pull/534#issuecomment-265466569:96,Deployability,install,installed,96,"I added tests that check ccsort/transqt2 give the same results as other tests provided they are installed. These tests will not fiddle with the `run_cctransort` option if pasture is not installed. I also cleaned up some of my fixup commits since the twin PR has been closed. . The last things I need to do is finalize the pasture install instructions to go in the PastureNotFoundError message, and then this is ready to go.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/534#issuecomment-265466569
https://github.com/psi4/psi4/pull/534#issuecomment-265466569:186,Deployability,install,installed,186,"I added tests that check ccsort/transqt2 give the same results as other tests provided they are installed. These tests will not fiddle with the `run_cctransort` option if pasture is not installed. I also cleaned up some of my fixup commits since the twin PR has been closed. . The last things I need to do is finalize the pasture install instructions to go in the PastureNotFoundError message, and then this is ready to go.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/534#issuecomment-265466569
https://github.com/psi4/psi4/pull/534#issuecomment-265466569:330,Deployability,install,install,330,"I added tests that check ccsort/transqt2 give the same results as other tests provided they are installed. These tests will not fiddle with the `run_cctransort` option if pasture is not installed. I also cleaned up some of my fixup commits since the twin PR has been closed. . The last things I need to do is finalize the pasture install instructions to go in the PastureNotFoundError message, and then this is ready to go.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/534#issuecomment-265466569
https://github.com/psi4/psi4/pull/534#issuecomment-265466569:385,Integrability,message,message,385,"I added tests that check ccsort/transqt2 give the same results as other tests provided they are installed. These tests will not fiddle with the `run_cctransort` option if pasture is not installed. I also cleaned up some of my fixup commits since the twin PR has been closed. . The last things I need to do is finalize the pasture install instructions to go in the PastureNotFoundError message, and then this is ready to go.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/534#issuecomment-265466569
https://github.com/psi4/psi4/pull/534#issuecomment-265466569:8,Testability,test,tests,8,"I added tests that check ccsort/transqt2 give the same results as other tests provided they are installed. These tests will not fiddle with the `run_cctransort` option if pasture is not installed. I also cleaned up some of my fixup commits since the twin PR has been closed. . The last things I need to do is finalize the pasture install instructions to go in the PastureNotFoundError message, and then this is ready to go.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/534#issuecomment-265466569
https://github.com/psi4/psi4/pull/534#issuecomment-265466569:72,Testability,test,tests,72,"I added tests that check ccsort/transqt2 give the same results as other tests provided they are installed. These tests will not fiddle with the `run_cctransort` option if pasture is not installed. I also cleaned up some of my fixup commits since the twin PR has been closed. . The last things I need to do is finalize the pasture install instructions to go in the PastureNotFoundError message, and then this is ready to go.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/534#issuecomment-265466569
https://github.com/psi4/psi4/pull/534#issuecomment-265466569:113,Testability,test,tests,113,"I added tests that check ccsort/transqt2 give the same results as other tests provided they are installed. These tests will not fiddle with the `run_cctransort` option if pasture is not installed. I also cleaned up some of my fixup commits since the twin PR has been closed. . The last things I need to do is finalize the pasture install instructions to go in the PastureNotFoundError message, and then this is ready to go.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/534#issuecomment-265466569
https://github.com/psi4/psi4/pull/534#issuecomment-265476228:15,Testability,test,tests,15,"Thanks for the tests. The `tests/pasture/modules/testdirs` layout is just fine on the face of it. But it's going to trouble those scripts and services that expect input.dat's at either `tests/purepsi4testdirs/` _or_ `tests/addon/integrationpsi4testdirs/`. Could you collapse a dir level, perhaps `add_subdirectory(pasture-transqt2ccsort` in `tests/CM`, then the two driver tests beneath?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/534#issuecomment-265476228
https://github.com/psi4/psi4/pull/534#issuecomment-265476228:27,Testability,test,tests,27,"Thanks for the tests. The `tests/pasture/modules/testdirs` layout is just fine on the face of it. But it's going to trouble those scripts and services that expect input.dat's at either `tests/purepsi4testdirs/` _or_ `tests/addon/integrationpsi4testdirs/`. Could you collapse a dir level, perhaps `add_subdirectory(pasture-transqt2ccsort` in `tests/CM`, then the two driver tests beneath?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/534#issuecomment-265476228
https://github.com/psi4/psi4/pull/534#issuecomment-265476228:49,Testability,test,testdirs,49,"Thanks for the tests. The `tests/pasture/modules/testdirs` layout is just fine on the face of it. But it's going to trouble those scripts and services that expect input.dat's at either `tests/purepsi4testdirs/` _or_ `tests/addon/integrationpsi4testdirs/`. Could you collapse a dir level, perhaps `add_subdirectory(pasture-transqt2ccsort` in `tests/CM`, then the two driver tests beneath?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/534#issuecomment-265476228
https://github.com/psi4/psi4/pull/534#issuecomment-265476228:186,Testability,test,tests,186,"Thanks for the tests. The `tests/pasture/modules/testdirs` layout is just fine on the face of it. But it's going to trouble those scripts and services that expect input.dat's at either `tests/purepsi4testdirs/` _or_ `tests/addon/integrationpsi4testdirs/`. Could you collapse a dir level, perhaps `add_subdirectory(pasture-transqt2ccsort` in `tests/CM`, then the two driver tests beneath?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/534#issuecomment-265476228
https://github.com/psi4/psi4/pull/534#issuecomment-265476228:217,Testability,test,tests,217,"Thanks for the tests. The `tests/pasture/modules/testdirs` layout is just fine on the face of it. But it's going to trouble those scripts and services that expect input.dat's at either `tests/purepsi4testdirs/` _or_ `tests/addon/integrationpsi4testdirs/`. Could you collapse a dir level, perhaps `add_subdirectory(pasture-transqt2ccsort` in `tests/CM`, then the two driver tests beneath?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/534#issuecomment-265476228
https://github.com/psi4/psi4/pull/534#issuecomment-265476228:342,Testability,test,tests,342,"Thanks for the tests. The `tests/pasture/modules/testdirs` layout is just fine on the face of it. But it's going to trouble those scripts and services that expect input.dat's at either `tests/purepsi4testdirs/` _or_ `tests/addon/integrationpsi4testdirs/`. Could you collapse a dir level, perhaps `add_subdirectory(pasture-transqt2ccsort` in `tests/CM`, then the two driver tests beneath?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/534#issuecomment-265476228
https://github.com/psi4/psi4/pull/534#issuecomment-265476228:373,Testability,test,tests,373,"Thanks for the tests. The `tests/pasture/modules/testdirs` layout is just fine on the face of it. But it's going to trouble those scripts and services that expect input.dat's at either `tests/purepsi4testdirs/` _or_ `tests/addon/integrationpsi4testdirs/`. Could you collapse a dir level, perhaps `add_subdirectory(pasture-transqt2ccsort` in `tests/CM`, then the two driver tests beneath?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/534#issuecomment-265476228
https://github.com/psi4/psi4/pull/534#issuecomment-265484472:36,Testability,test,tests,36,I moved everything up one level so `tests/pasture/ccsorttransqt2/*` —> `pasture-ccsortrransqt2/*`,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/534#issuecomment-265484472
https://github.com/psi4/psi4/pull/534#issuecomment-265801248:57,Availability,fault,fault,57,"Ok, I checked the wrong repo. Sorry, miscommunication my fault.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/534#issuecomment-265801248
https://github.com/psi4/psi4/pull/535#issuecomment-263942358:128,Integrability,interface,interface,128,"Could `std::string` operations serve the purpose here? We had some `char *` issues with pybind11 and although there's no direct interface in optking, there was talk of moving from `char *`s to `std::string`s for readability.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/535#issuecomment-263942358
https://github.com/psi4/psi4/pull/535#issuecomment-264558498:75,Testability,test,tests,75,"I incorporated Francesco's suggestion of std::stod(). It worked fine in my tests. Only for a hand-edited intco.dat would these checks ever matter. (I discovered that if the user tries a string like ""hello"" for the value, it doesn't even pass through our initial psithon syntax code for some reason.) The important thing is that we allow zero values. BTW, I wonder why I can't see Francesco's comment on github's website (https://github.com/psi4/psi4/pull/535). Are there private comments?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/535#issuecomment-264558498
https://github.com/psi4/psi4/issues/536#issuecomment-264074419:36,Availability,error,error,36,"This is actually a PyBind11 version error. It doesn't appear that our CMake is detecting the discrepancy. Please blow away your objdir and recompile from scratch. . -Daniel Smith; Sent from my iPhone. . > On Nov 30, 2016, at 23:06, nmayhall <notifications@github.com> wrote:; > ; > After a recent git pull, psi4 failed to compile. It seems that the error was likely introduced in commit 0d0d1f9 ""Reworked exception printing in Psi so all Python Exceptions raise to stdout and psi out"". If I revert to the commit just before this I'm able to compile.; > ; > If it helps, I'm running Ubuntu, with gnu compilers.; > ; > Here's the error message:; > ; > /home/nmayhall/qcSoftware/psi4/psi4.inv.git/psi4/src/core.cc: In function ‘bool py_psi_set_local_option_array(const string&, const string&, const pybind11::list&, psi::DataType*)’: /home/nmayhall/qcSoftware/psi4/psi4.inv.git/psi4/src/core.cc:786:13: error: ‘isinstance’ is not a member of ‘py’ if (py::isinstance<py::list>(values[n])) { ^ /home/nmayhall/qcSoftware/psi4/psi4.inv.git/psi4/src/core.cc:786:36: error: expected primary-expression before ‘>’ token if (py::isinstance<py::list>(values[n])) { ^ /home/nmayhall/qcSoftware/psi4/psi4.inv.git/psi4/src/core.cc: In function ‘bool py_psi_set_global_option_array(const string&, pybind11::list, psi::DataType*)’: /home/nmayhall/qcSoftware/psi4/psi4.inv.git/psi4/src/core.cc:834:13: error: ‘isinstance’ is not a member of ‘py’ if (py::isinstance<py::list>(values[n])) { ^ /home/nmayhall/qcSoftware/psi4/psi4.inv.git/psi4/src/core.cc:834:36: error: expected primary-expression before ‘>’ token if (py::isinstance<py::list>(values[n])) { ^ src/CMakeFiles/core.dir/build.make:374: recipe for target 'src/CMakeFiles/core.dir/core.cc.o' failed make[5]: *** [src/CMakeFiles/core.dir/core.cc.o] Error 1 make[5]: *** Waiting for unfinished jobs.... ^Csrc/CMakeFiles/core.dir/build.make:86: recipe for target 'src/CMakeFiles/core.dir/export_mints.cc.o' failed make[5]: *** [src/CMakeFiles/core.dir/export_mint",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/536#issuecomment-264074419
https://github.com/psi4/psi4/issues/536#issuecomment-264074419:349,Availability,error,error,349,"This is actually a PyBind11 version error. It doesn't appear that our CMake is detecting the discrepancy. Please blow away your objdir and recompile from scratch. . -Daniel Smith; Sent from my iPhone. . > On Nov 30, 2016, at 23:06, nmayhall <notifications@github.com> wrote:; > ; > After a recent git pull, psi4 failed to compile. It seems that the error was likely introduced in commit 0d0d1f9 ""Reworked exception printing in Psi so all Python Exceptions raise to stdout and psi out"". If I revert to the commit just before this I'm able to compile.; > ; > If it helps, I'm running Ubuntu, with gnu compilers.; > ; > Here's the error message:; > ; > /home/nmayhall/qcSoftware/psi4/psi4.inv.git/psi4/src/core.cc: In function ‘bool py_psi_set_local_option_array(const string&, const string&, const pybind11::list&, psi::DataType*)’: /home/nmayhall/qcSoftware/psi4/psi4.inv.git/psi4/src/core.cc:786:13: error: ‘isinstance’ is not a member of ‘py’ if (py::isinstance<py::list>(values[n])) { ^ /home/nmayhall/qcSoftware/psi4/psi4.inv.git/psi4/src/core.cc:786:36: error: expected primary-expression before ‘>’ token if (py::isinstance<py::list>(values[n])) { ^ /home/nmayhall/qcSoftware/psi4/psi4.inv.git/psi4/src/core.cc: In function ‘bool py_psi_set_global_option_array(const string&, pybind11::list, psi::DataType*)’: /home/nmayhall/qcSoftware/psi4/psi4.inv.git/psi4/src/core.cc:834:13: error: ‘isinstance’ is not a member of ‘py’ if (py::isinstance<py::list>(values[n])) { ^ /home/nmayhall/qcSoftware/psi4/psi4.inv.git/psi4/src/core.cc:834:36: error: expected primary-expression before ‘>’ token if (py::isinstance<py::list>(values[n])) { ^ src/CMakeFiles/core.dir/build.make:374: recipe for target 'src/CMakeFiles/core.dir/core.cc.o' failed make[5]: *** [src/CMakeFiles/core.dir/core.cc.o] Error 1 make[5]: *** Waiting for unfinished jobs.... ^Csrc/CMakeFiles/core.dir/build.make:86: recipe for target 'src/CMakeFiles/core.dir/export_mints.cc.o' failed make[5]: *** [src/CMakeFiles/core.dir/export_mint",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/536#issuecomment-264074419
https://github.com/psi4/psi4/issues/536#issuecomment-264074419:628,Availability,error,error,628,"This is actually a PyBind11 version error. It doesn't appear that our CMake is detecting the discrepancy. Please blow away your objdir and recompile from scratch. . -Daniel Smith; Sent from my iPhone. . > On Nov 30, 2016, at 23:06, nmayhall <notifications@github.com> wrote:; > ; > After a recent git pull, psi4 failed to compile. It seems that the error was likely introduced in commit 0d0d1f9 ""Reworked exception printing in Psi so all Python Exceptions raise to stdout and psi out"". If I revert to the commit just before this I'm able to compile.; > ; > If it helps, I'm running Ubuntu, with gnu compilers.; > ; > Here's the error message:; > ; > /home/nmayhall/qcSoftware/psi4/psi4.inv.git/psi4/src/core.cc: In function ‘bool py_psi_set_local_option_array(const string&, const string&, const pybind11::list&, psi::DataType*)’: /home/nmayhall/qcSoftware/psi4/psi4.inv.git/psi4/src/core.cc:786:13: error: ‘isinstance’ is not a member of ‘py’ if (py::isinstance<py::list>(values[n])) { ^ /home/nmayhall/qcSoftware/psi4/psi4.inv.git/psi4/src/core.cc:786:36: error: expected primary-expression before ‘>’ token if (py::isinstance<py::list>(values[n])) { ^ /home/nmayhall/qcSoftware/psi4/psi4.inv.git/psi4/src/core.cc: In function ‘bool py_psi_set_global_option_array(const string&, pybind11::list, psi::DataType*)’: /home/nmayhall/qcSoftware/psi4/psi4.inv.git/psi4/src/core.cc:834:13: error: ‘isinstance’ is not a member of ‘py’ if (py::isinstance<py::list>(values[n])) { ^ /home/nmayhall/qcSoftware/psi4/psi4.inv.git/psi4/src/core.cc:834:36: error: expected primary-expression before ‘>’ token if (py::isinstance<py::list>(values[n])) { ^ src/CMakeFiles/core.dir/build.make:374: recipe for target 'src/CMakeFiles/core.dir/core.cc.o' failed make[5]: *** [src/CMakeFiles/core.dir/core.cc.o] Error 1 make[5]: *** Waiting for unfinished jobs.... ^Csrc/CMakeFiles/core.dir/build.make:86: recipe for target 'src/CMakeFiles/core.dir/export_mints.cc.o' failed make[5]: *** [src/CMakeFiles/core.dir/export_mint",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/536#issuecomment-264074419
https://github.com/psi4/psi4/issues/536#issuecomment-264074419:900,Availability,error,error,900,"This is actually a PyBind11 version error. It doesn't appear that our CMake is detecting the discrepancy. Please blow away your objdir and recompile from scratch. . -Daniel Smith; Sent from my iPhone. . > On Nov 30, 2016, at 23:06, nmayhall <notifications@github.com> wrote:; > ; > After a recent git pull, psi4 failed to compile. It seems that the error was likely introduced in commit 0d0d1f9 ""Reworked exception printing in Psi so all Python Exceptions raise to stdout and psi out"". If I revert to the commit just before this I'm able to compile.; > ; > If it helps, I'm running Ubuntu, with gnu compilers.; > ; > Here's the error message:; > ; > /home/nmayhall/qcSoftware/psi4/psi4.inv.git/psi4/src/core.cc: In function ‘bool py_psi_set_local_option_array(const string&, const string&, const pybind11::list&, psi::DataType*)’: /home/nmayhall/qcSoftware/psi4/psi4.inv.git/psi4/src/core.cc:786:13: error: ‘isinstance’ is not a member of ‘py’ if (py::isinstance<py::list>(values[n])) { ^ /home/nmayhall/qcSoftware/psi4/psi4.inv.git/psi4/src/core.cc:786:36: error: expected primary-expression before ‘>’ token if (py::isinstance<py::list>(values[n])) { ^ /home/nmayhall/qcSoftware/psi4/psi4.inv.git/psi4/src/core.cc: In function ‘bool py_psi_set_global_option_array(const string&, pybind11::list, psi::DataType*)’: /home/nmayhall/qcSoftware/psi4/psi4.inv.git/psi4/src/core.cc:834:13: error: ‘isinstance’ is not a member of ‘py’ if (py::isinstance<py::list>(values[n])) { ^ /home/nmayhall/qcSoftware/psi4/psi4.inv.git/psi4/src/core.cc:834:36: error: expected primary-expression before ‘>’ token if (py::isinstance<py::list>(values[n])) { ^ src/CMakeFiles/core.dir/build.make:374: recipe for target 'src/CMakeFiles/core.dir/core.cc.o' failed make[5]: *** [src/CMakeFiles/core.dir/core.cc.o] Error 1 make[5]: *** Waiting for unfinished jobs.... ^Csrc/CMakeFiles/core.dir/build.make:86: recipe for target 'src/CMakeFiles/core.dir/export_mints.cc.o' failed make[5]: *** [src/CMakeFiles/core.dir/export_mint",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/536#issuecomment-264074419
https://github.com/psi4/psi4/issues/536#issuecomment-264074419:1058,Availability,error,error,1058,"way your objdir and recompile from scratch. . -Daniel Smith; Sent from my iPhone. . > On Nov 30, 2016, at 23:06, nmayhall <notifications@github.com> wrote:; > ; > After a recent git pull, psi4 failed to compile. It seems that the error was likely introduced in commit 0d0d1f9 ""Reworked exception printing in Psi so all Python Exceptions raise to stdout and psi out"". If I revert to the commit just before this I'm able to compile.; > ; > If it helps, I'm running Ubuntu, with gnu compilers.; > ; > Here's the error message:; > ; > /home/nmayhall/qcSoftware/psi4/psi4.inv.git/psi4/src/core.cc: In function ‘bool py_psi_set_local_option_array(const string&, const string&, const pybind11::list&, psi::DataType*)’: /home/nmayhall/qcSoftware/psi4/psi4.inv.git/psi4/src/core.cc:786:13: error: ‘isinstance’ is not a member of ‘py’ if (py::isinstance<py::list>(values[n])) { ^ /home/nmayhall/qcSoftware/psi4/psi4.inv.git/psi4/src/core.cc:786:36: error: expected primary-expression before ‘>’ token if (py::isinstance<py::list>(values[n])) { ^ /home/nmayhall/qcSoftware/psi4/psi4.inv.git/psi4/src/core.cc: In function ‘bool py_psi_set_global_option_array(const string&, pybind11::list, psi::DataType*)’: /home/nmayhall/qcSoftware/psi4/psi4.inv.git/psi4/src/core.cc:834:13: error: ‘isinstance’ is not a member of ‘py’ if (py::isinstance<py::list>(values[n])) { ^ /home/nmayhall/qcSoftware/psi4/psi4.inv.git/psi4/src/core.cc:834:36: error: expected primary-expression before ‘>’ token if (py::isinstance<py::list>(values[n])) { ^ src/CMakeFiles/core.dir/build.make:374: recipe for target 'src/CMakeFiles/core.dir/core.cc.o' failed make[5]: *** [src/CMakeFiles/core.dir/core.cc.o] Error 1 make[5]: *** Waiting for unfinished jobs.... ^Csrc/CMakeFiles/core.dir/build.make:86: recipe for target 'src/CMakeFiles/core.dir/export_mints.cc.o' failed make[5]: *** [src/CMakeFiles/core.dir/export_mints.cc.o] Interrupt CMakeFiles/Makefile2:208: recipe for target 'src/CMakeFiles/core.dir/all' failed make[4]: *** [src/C",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/536#issuecomment-264074419
https://github.com/psi4/psi4/issues/536#issuecomment-264074419:1384,Availability,error,error,1384,"hon Exceptions raise to stdout and psi out"". If I revert to the commit just before this I'm able to compile.; > ; > If it helps, I'm running Ubuntu, with gnu compilers.; > ; > Here's the error message:; > ; > /home/nmayhall/qcSoftware/psi4/psi4.inv.git/psi4/src/core.cc: In function ‘bool py_psi_set_local_option_array(const string&, const string&, const pybind11::list&, psi::DataType*)’: /home/nmayhall/qcSoftware/psi4/psi4.inv.git/psi4/src/core.cc:786:13: error: ‘isinstance’ is not a member of ‘py’ if (py::isinstance<py::list>(values[n])) { ^ /home/nmayhall/qcSoftware/psi4/psi4.inv.git/psi4/src/core.cc:786:36: error: expected primary-expression before ‘>’ token if (py::isinstance<py::list>(values[n])) { ^ /home/nmayhall/qcSoftware/psi4/psi4.inv.git/psi4/src/core.cc: In function ‘bool py_psi_set_global_option_array(const string&, pybind11::list, psi::DataType*)’: /home/nmayhall/qcSoftware/psi4/psi4.inv.git/psi4/src/core.cc:834:13: error: ‘isinstance’ is not a member of ‘py’ if (py::isinstance<py::list>(values[n])) { ^ /home/nmayhall/qcSoftware/psi4/psi4.inv.git/psi4/src/core.cc:834:36: error: expected primary-expression before ‘>’ token if (py::isinstance<py::list>(values[n])) { ^ src/CMakeFiles/core.dir/build.make:374: recipe for target 'src/CMakeFiles/core.dir/core.cc.o' failed make[5]: *** [src/CMakeFiles/core.dir/core.cc.o] Error 1 make[5]: *** Waiting for unfinished jobs.... ^Csrc/CMakeFiles/core.dir/build.make:86: recipe for target 'src/CMakeFiles/core.dir/export_mints.cc.o' failed make[5]: *** [src/CMakeFiles/core.dir/export_mints.cc.o] Interrupt CMakeFiles/Makefile2:208: recipe for target 'src/CMakeFiles/core.dir/all' failed make[4]: *** [src/CMakeFiles/core.dir/all] Interrupt Makefile:127: recipe for target 'all' failed make[3]: *** [all] Interrupt CMakeFiles/psi4_core.dir/build.make:111: recipe for target 'psi4_core-prefix/src/psi4_core-stamp/psi4_core-build' failed make[2]: *** [psi4_core-prefix/src/psi4_core-stamp/psi4_core-build] Interrupt CMakeFiles/Make",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/536#issuecomment-264074419
https://github.com/psi4/psi4/issues/536#issuecomment-264074419:1542,Availability,error,error,1542,"gnu compilers.; > ; > Here's the error message:; > ; > /home/nmayhall/qcSoftware/psi4/psi4.inv.git/psi4/src/core.cc: In function ‘bool py_psi_set_local_option_array(const string&, const string&, const pybind11::list&, psi::DataType*)’: /home/nmayhall/qcSoftware/psi4/psi4.inv.git/psi4/src/core.cc:786:13: error: ‘isinstance’ is not a member of ‘py’ if (py::isinstance<py::list>(values[n])) { ^ /home/nmayhall/qcSoftware/psi4/psi4.inv.git/psi4/src/core.cc:786:36: error: expected primary-expression before ‘>’ token if (py::isinstance<py::list>(values[n])) { ^ /home/nmayhall/qcSoftware/psi4/psi4.inv.git/psi4/src/core.cc: In function ‘bool py_psi_set_global_option_array(const string&, pybind11::list, psi::DataType*)’: /home/nmayhall/qcSoftware/psi4/psi4.inv.git/psi4/src/core.cc:834:13: error: ‘isinstance’ is not a member of ‘py’ if (py::isinstance<py::list>(values[n])) { ^ /home/nmayhall/qcSoftware/psi4/psi4.inv.git/psi4/src/core.cc:834:36: error: expected primary-expression before ‘>’ token if (py::isinstance<py::list>(values[n])) { ^ src/CMakeFiles/core.dir/build.make:374: recipe for target 'src/CMakeFiles/core.dir/core.cc.o' failed make[5]: *** [src/CMakeFiles/core.dir/core.cc.o] Error 1 make[5]: *** Waiting for unfinished jobs.... ^Csrc/CMakeFiles/core.dir/build.make:86: recipe for target 'src/CMakeFiles/core.dir/export_mints.cc.o' failed make[5]: *** [src/CMakeFiles/core.dir/export_mints.cc.o] Interrupt CMakeFiles/Makefile2:208: recipe for target 'src/CMakeFiles/core.dir/all' failed make[4]: *** [src/CMakeFiles/core.dir/all] Interrupt Makefile:127: recipe for target 'all' failed make[3]: *** [all] Interrupt CMakeFiles/psi4_core.dir/build.make:111: recipe for target 'psi4_core-prefix/src/psi4_core-stamp/psi4_core-build' failed make[2]: *** [psi4_core-prefix/src/psi4_core-stamp/psi4_core-build] Interrupt CMakeFiles/Makefile2:355: recipe for target 'CMakeFiles/psi4_core.dir/all' failed make[1]: *** [CMakeFiles/psi4_core.dir/all] Interrupt Makefile:138: recipe for target '",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/536#issuecomment-264074419
https://github.com/psi4/psi4/issues/536#issuecomment-264074419:1789,Availability,Error,Error,1789,"ng&, const pybind11::list&, psi::DataType*)’: /home/nmayhall/qcSoftware/psi4/psi4.inv.git/psi4/src/core.cc:786:13: error: ‘isinstance’ is not a member of ‘py’ if (py::isinstance<py::list>(values[n])) { ^ /home/nmayhall/qcSoftware/psi4/psi4.inv.git/psi4/src/core.cc:786:36: error: expected primary-expression before ‘>’ token if (py::isinstance<py::list>(values[n])) { ^ /home/nmayhall/qcSoftware/psi4/psi4.inv.git/psi4/src/core.cc: In function ‘bool py_psi_set_global_option_array(const string&, pybind11::list, psi::DataType*)’: /home/nmayhall/qcSoftware/psi4/psi4.inv.git/psi4/src/core.cc:834:13: error: ‘isinstance’ is not a member of ‘py’ if (py::isinstance<py::list>(values[n])) { ^ /home/nmayhall/qcSoftware/psi4/psi4.inv.git/psi4/src/core.cc:834:36: error: expected primary-expression before ‘>’ token if (py::isinstance<py::list>(values[n])) { ^ src/CMakeFiles/core.dir/build.make:374: recipe for target 'src/CMakeFiles/core.dir/core.cc.o' failed make[5]: *** [src/CMakeFiles/core.dir/core.cc.o] Error 1 make[5]: *** Waiting for unfinished jobs.... ^Csrc/CMakeFiles/core.dir/build.make:86: recipe for target 'src/CMakeFiles/core.dir/export_mints.cc.o' failed make[5]: *** [src/CMakeFiles/core.dir/export_mints.cc.o] Interrupt CMakeFiles/Makefile2:208: recipe for target 'src/CMakeFiles/core.dir/all' failed make[4]: *** [src/CMakeFiles/core.dir/all] Interrupt Makefile:127: recipe for target 'all' failed make[3]: *** [all] Interrupt CMakeFiles/psi4_core.dir/build.make:111: recipe for target 'psi4_core-prefix/src/psi4_core-stamp/psi4_core-build' failed make[2]: *** [psi4_core-prefix/src/psi4_core-stamp/psi4_core-build] Interrupt CMakeFiles/Makefile2:355: recipe for target 'CMakeFiles/psi4_core.dir/all' failed make[1]: *** [CMakeFiles/psi4_core.dir/all] Interrupt Makefile:138: recipe for target 'all' failed make: *** [all] Interrupt; > ; > —; > You are receiving this because you are subscribed to this thread.; > Reply to this email directly, view it on GitHub, or mute the thread.; >",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/536#issuecomment-264074419
https://github.com/psi4/psi4/issues/536#issuecomment-264074419:634,Integrability,message,message,634,"This is actually a PyBind11 version error. It doesn't appear that our CMake is detecting the discrepancy. Please blow away your objdir and recompile from scratch. . -Daniel Smith; Sent from my iPhone. . > On Nov 30, 2016, at 23:06, nmayhall <notifications@github.com> wrote:; > ; > After a recent git pull, psi4 failed to compile. It seems that the error was likely introduced in commit 0d0d1f9 ""Reworked exception printing in Psi so all Python Exceptions raise to stdout and psi out"". If I revert to the commit just before this I'm able to compile.; > ; > If it helps, I'm running Ubuntu, with gnu compilers.; > ; > Here's the error message:; > ; > /home/nmayhall/qcSoftware/psi4/psi4.inv.git/psi4/src/core.cc: In function ‘bool py_psi_set_local_option_array(const string&, const string&, const pybind11::list&, psi::DataType*)’: /home/nmayhall/qcSoftware/psi4/psi4.inv.git/psi4/src/core.cc:786:13: error: ‘isinstance’ is not a member of ‘py’ if (py::isinstance<py::list>(values[n])) { ^ /home/nmayhall/qcSoftware/psi4/psi4.inv.git/psi4/src/core.cc:786:36: error: expected primary-expression before ‘>’ token if (py::isinstance<py::list>(values[n])) { ^ /home/nmayhall/qcSoftware/psi4/psi4.inv.git/psi4/src/core.cc: In function ‘bool py_psi_set_global_option_array(const string&, pybind11::list, psi::DataType*)’: /home/nmayhall/qcSoftware/psi4/psi4.inv.git/psi4/src/core.cc:834:13: error: ‘isinstance’ is not a member of ‘py’ if (py::isinstance<py::list>(values[n])) { ^ /home/nmayhall/qcSoftware/psi4/psi4.inv.git/psi4/src/core.cc:834:36: error: expected primary-expression before ‘>’ token if (py::isinstance<py::list>(values[n])) { ^ src/CMakeFiles/core.dir/build.make:374: recipe for target 'src/CMakeFiles/core.dir/core.cc.o' failed make[5]: *** [src/CMakeFiles/core.dir/core.cc.o] Error 1 make[5]: *** Waiting for unfinished jobs.... ^Csrc/CMakeFiles/core.dir/build.make:86: recipe for target 'src/CMakeFiles/core.dir/export_mints.cc.o' failed make[5]: *** [src/CMakeFiles/core.dir/export_mint",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/536#issuecomment-264074419
https://github.com/psi4/psi4/issues/536#issuecomment-264074419:79,Safety,detect,detecting,79,"This is actually a PyBind11 version error. It doesn't appear that our CMake is detecting the discrepancy. Please blow away your objdir and recompile from scratch. . -Daniel Smith; Sent from my iPhone. . > On Nov 30, 2016, at 23:06, nmayhall <notifications@github.com> wrote:; > ; > After a recent git pull, psi4 failed to compile. It seems that the error was likely introduced in commit 0d0d1f9 ""Reworked exception printing in Psi so all Python Exceptions raise to stdout and psi out"". If I revert to the commit just before this I'm able to compile.; > ; > If it helps, I'm running Ubuntu, with gnu compilers.; > ; > Here's the error message:; > ; > /home/nmayhall/qcSoftware/psi4/psi4.inv.git/psi4/src/core.cc: In function ‘bool py_psi_set_local_option_array(const string&, const string&, const pybind11::list&, psi::DataType*)’: /home/nmayhall/qcSoftware/psi4/psi4.inv.git/psi4/src/core.cc:786:13: error: ‘isinstance’ is not a member of ‘py’ if (py::isinstance<py::list>(values[n])) { ^ /home/nmayhall/qcSoftware/psi4/psi4.inv.git/psi4/src/core.cc:786:36: error: expected primary-expression before ‘>’ token if (py::isinstance<py::list>(values[n])) { ^ /home/nmayhall/qcSoftware/psi4/psi4.inv.git/psi4/src/core.cc: In function ‘bool py_psi_set_global_option_array(const string&, pybind11::list, psi::DataType*)’: /home/nmayhall/qcSoftware/psi4/psi4.inv.git/psi4/src/core.cc:834:13: error: ‘isinstance’ is not a member of ‘py’ if (py::isinstance<py::list>(values[n])) { ^ /home/nmayhall/qcSoftware/psi4/psi4.inv.git/psi4/src/core.cc:834:36: error: expected primary-expression before ‘>’ token if (py::isinstance<py::list>(values[n])) { ^ src/CMakeFiles/core.dir/build.make:374: recipe for target 'src/CMakeFiles/core.dir/core.cc.o' failed make[5]: *** [src/CMakeFiles/core.dir/core.cc.o] Error 1 make[5]: *** Waiting for unfinished jobs.... ^Csrc/CMakeFiles/core.dir/build.make:86: recipe for target 'src/CMakeFiles/core.dir/export_mints.cc.o' failed make[5]: *** [src/CMakeFiles/core.dir/export_mint",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/536#issuecomment-264074419
https://github.com/psi4/psi4/issues/536#issuecomment-264074858:247,Availability,error,error,247,"Thanks Daniel! I looked at the changes and couldn't imagine what was; causing this. I'll follow your suggestion. Best,; Nick. On Wed, Nov 30, 2016 at 11:13 PM, Daniel Smith <notifications@github.com>; wrote:. > This is actually a PyBind11 version error. It doesn't appear that our; > CMake is detecting the discrepancy. Please blow away your objdir and; > recompile from scratch.; >; > -Daniel Smith; > Sent from my iPhone.; >; > > On Nov 30, 2016, at 23:06, nmayhall <notifications@github.com> wrote:; > >; > > After a recent git pull, psi4 failed to compile. It seems that the error; > was likely introduced in commit 0d0d1f9 ""Reworked exception printing in Psi; > so all Python Exceptions raise to stdout and psi out"". If I revert to the; > commit just before this I'm able to compile.; > >; > > If it helps, I'm running Ubuntu, with gnu compilers.; > >; > > Here's the error message:; > >; > > /home/nmayhall/qcSoftware/psi4/psi4.inv.git/psi4/src/core.cc: In; > function ‘bool py_psi_set_local_option_array(const string&, const; > string&, const pybind11::list&, psi::DataType*)’: /home/nmayhall/qcSoftware/; > psi4/psi4.inv.git/psi4/src/core.cc:786:13: error: ‘isinstance’ is not a; > member of ‘py’ if (py::isinstance<py::list>(values[n])) { ^; > /home/nmayhall/qcSoftware/psi4/psi4.inv.git/psi4/src/core.cc:786:36:; > error: expected primary-expression before ‘>’ token if; > (py::isinstance<py::list>(values[n])) { ^ /home/nmayhall/qcSoftware/; > psi4/psi4.inv.git/psi4/src/core.cc: In function ‘bool; > py_psi_set_global_option_array(const string&, pybind11::list,; > psi::DataType*)’: /home/nmayhall/qcSoftware/psi4/psi4.inv.git/psi4/src/core.cc:834:13:; > error: ‘isinstance’ is not a member of ‘py’ if (py::isinstance<py::list>(values[n])); > { ^ /home/nmayhall/qcSoftware/psi4/psi4.inv.git/psi4/src/core.cc:834:36:; > error: expected primary-expression before ‘>’ token if; > (py::isinstance<py::list>(values[n])) { ^ src/CMakeFiles/core.dir/build.make:374:; > recipe for target 'src/CMak",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/536#issuecomment-264074858
https://github.com/psi4/psi4/issues/536#issuecomment-264074858:579,Availability,error,error,579,"Thanks Daniel! I looked at the changes and couldn't imagine what was; causing this. I'll follow your suggestion. Best,; Nick. On Wed, Nov 30, 2016 at 11:13 PM, Daniel Smith <notifications@github.com>; wrote:. > This is actually a PyBind11 version error. It doesn't appear that our; > CMake is detecting the discrepancy. Please blow away your objdir and; > recompile from scratch.; >; > -Daniel Smith; > Sent from my iPhone.; >; > > On Nov 30, 2016, at 23:06, nmayhall <notifications@github.com> wrote:; > >; > > After a recent git pull, psi4 failed to compile. It seems that the error; > was likely introduced in commit 0d0d1f9 ""Reworked exception printing in Psi; > so all Python Exceptions raise to stdout and psi out"". If I revert to the; > commit just before this I'm able to compile.; > >; > > If it helps, I'm running Ubuntu, with gnu compilers.; > >; > > Here's the error message:; > >; > > /home/nmayhall/qcSoftware/psi4/psi4.inv.git/psi4/src/core.cc: In; > function ‘bool py_psi_set_local_option_array(const string&, const; > string&, const pybind11::list&, psi::DataType*)’: /home/nmayhall/qcSoftware/; > psi4/psi4.inv.git/psi4/src/core.cc:786:13: error: ‘isinstance’ is not a; > member of ‘py’ if (py::isinstance<py::list>(values[n])) { ^; > /home/nmayhall/qcSoftware/psi4/psi4.inv.git/psi4/src/core.cc:786:36:; > error: expected primary-expression before ‘>’ token if; > (py::isinstance<py::list>(values[n])) { ^ /home/nmayhall/qcSoftware/; > psi4/psi4.inv.git/psi4/src/core.cc: In function ‘bool; > py_psi_set_global_option_array(const string&, pybind11::list,; > psi::DataType*)’: /home/nmayhall/qcSoftware/psi4/psi4.inv.git/psi4/src/core.cc:834:13:; > error: ‘isinstance’ is not a member of ‘py’ if (py::isinstance<py::list>(values[n])); > { ^ /home/nmayhall/qcSoftware/psi4/psi4.inv.git/psi4/src/core.cc:834:36:; > error: expected primary-expression before ‘>’ token if; > (py::isinstance<py::list>(values[n])) { ^ src/CMakeFiles/core.dir/build.make:374:; > recipe for target 'src/CMak",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/536#issuecomment-264074858
https://github.com/psi4/psi4/issues/536#issuecomment-264074858:873,Availability,error,error,873,"Thanks Daniel! I looked at the changes and couldn't imagine what was; causing this. I'll follow your suggestion. Best,; Nick. On Wed, Nov 30, 2016 at 11:13 PM, Daniel Smith <notifications@github.com>; wrote:. > This is actually a PyBind11 version error. It doesn't appear that our; > CMake is detecting the discrepancy. Please blow away your objdir and; > recompile from scratch.; >; > -Daniel Smith; > Sent from my iPhone.; >; > > On Nov 30, 2016, at 23:06, nmayhall <notifications@github.com> wrote:; > >; > > After a recent git pull, psi4 failed to compile. It seems that the error; > was likely introduced in commit 0d0d1f9 ""Reworked exception printing in Psi; > so all Python Exceptions raise to stdout and psi out"". If I revert to the; > commit just before this I'm able to compile.; > >; > > If it helps, I'm running Ubuntu, with gnu compilers.; > >; > > Here's the error message:; > >; > > /home/nmayhall/qcSoftware/psi4/psi4.inv.git/psi4/src/core.cc: In; > function ‘bool py_psi_set_local_option_array(const string&, const; > string&, const pybind11::list&, psi::DataType*)’: /home/nmayhall/qcSoftware/; > psi4/psi4.inv.git/psi4/src/core.cc:786:13: error: ‘isinstance’ is not a; > member of ‘py’ if (py::isinstance<py::list>(values[n])) { ^; > /home/nmayhall/qcSoftware/psi4/psi4.inv.git/psi4/src/core.cc:786:36:; > error: expected primary-expression before ‘>’ token if; > (py::isinstance<py::list>(values[n])) { ^ /home/nmayhall/qcSoftware/; > psi4/psi4.inv.git/psi4/src/core.cc: In function ‘bool; > py_psi_set_global_option_array(const string&, pybind11::list,; > psi::DataType*)’: /home/nmayhall/qcSoftware/psi4/psi4.inv.git/psi4/src/core.cc:834:13:; > error: ‘isinstance’ is not a member of ‘py’ if (py::isinstance<py::list>(values[n])); > { ^ /home/nmayhall/qcSoftware/psi4/psi4.inv.git/psi4/src/core.cc:834:36:; > error: expected primary-expression before ‘>’ token if; > (py::isinstance<py::list>(values[n])) { ^ src/CMakeFiles/core.dir/build.make:374:; > recipe for target 'src/CMak",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/536#issuecomment-264074858
https://github.com/psi4/psi4/issues/536#issuecomment-264074858:1158,Availability,error,error,1158," actually a PyBind11 version error. It doesn't appear that our; > CMake is detecting the discrepancy. Please blow away your objdir and; > recompile from scratch.; >; > -Daniel Smith; > Sent from my iPhone.; >; > > On Nov 30, 2016, at 23:06, nmayhall <notifications@github.com> wrote:; > >; > > After a recent git pull, psi4 failed to compile. It seems that the error; > was likely introduced in commit 0d0d1f9 ""Reworked exception printing in Psi; > so all Python Exceptions raise to stdout and psi out"". If I revert to the; > commit just before this I'm able to compile.; > >; > > If it helps, I'm running Ubuntu, with gnu compilers.; > >; > > Here's the error message:; > >; > > /home/nmayhall/qcSoftware/psi4/psi4.inv.git/psi4/src/core.cc: In; > function ‘bool py_psi_set_local_option_array(const string&, const; > string&, const pybind11::list&, psi::DataType*)’: /home/nmayhall/qcSoftware/; > psi4/psi4.inv.git/psi4/src/core.cc:786:13: error: ‘isinstance’ is not a; > member of ‘py’ if (py::isinstance<py::list>(values[n])) { ^; > /home/nmayhall/qcSoftware/psi4/psi4.inv.git/psi4/src/core.cc:786:36:; > error: expected primary-expression before ‘>’ token if; > (py::isinstance<py::list>(values[n])) { ^ /home/nmayhall/qcSoftware/; > psi4/psi4.inv.git/psi4/src/core.cc: In function ‘bool; > py_psi_set_global_option_array(const string&, pybind11::list,; > psi::DataType*)’: /home/nmayhall/qcSoftware/psi4/psi4.inv.git/psi4/src/core.cc:834:13:; > error: ‘isinstance’ is not a member of ‘py’ if (py::isinstance<py::list>(values[n])); > { ^ /home/nmayhall/qcSoftware/psi4/psi4.inv.git/psi4/src/core.cc:834:36:; > error: expected primary-expression before ‘>’ token if; > (py::isinstance<py::list>(values[n])) { ^ src/CMakeFiles/core.dir/build.make:374:; > recipe for target 'src/CMakeFiles/core.dir/core.cc.o' failed make[5]: ***; > [src/CMakeFiles/core.dir/core.cc.o] Error 1 make[5]: *** Waiting for; > unfinished jobs.... ^Csrc/CMakeFiles/core.dir/build.make:86: recipe for; > target 'src/CMakeFil",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/536#issuecomment-264074858
https://github.com/psi4/psi4/issues/536#issuecomment-264074858:1325,Availability,error,error,1325,"aniel Smith; > Sent from my iPhone.; >; > > On Nov 30, 2016, at 23:06, nmayhall <notifications@github.com> wrote:; > >; > > After a recent git pull, psi4 failed to compile. It seems that the error; > was likely introduced in commit 0d0d1f9 ""Reworked exception printing in Psi; > so all Python Exceptions raise to stdout and psi out"". If I revert to the; > commit just before this I'm able to compile.; > >; > > If it helps, I'm running Ubuntu, with gnu compilers.; > >; > > Here's the error message:; > >; > > /home/nmayhall/qcSoftware/psi4/psi4.inv.git/psi4/src/core.cc: In; > function ‘bool py_psi_set_local_option_array(const string&, const; > string&, const pybind11::list&, psi::DataType*)’: /home/nmayhall/qcSoftware/; > psi4/psi4.inv.git/psi4/src/core.cc:786:13: error: ‘isinstance’ is not a; > member of ‘py’ if (py::isinstance<py::list>(values[n])) { ^; > /home/nmayhall/qcSoftware/psi4/psi4.inv.git/psi4/src/core.cc:786:36:; > error: expected primary-expression before ‘>’ token if; > (py::isinstance<py::list>(values[n])) { ^ /home/nmayhall/qcSoftware/; > psi4/psi4.inv.git/psi4/src/core.cc: In function ‘bool; > py_psi_set_global_option_array(const string&, pybind11::list,; > psi::DataType*)’: /home/nmayhall/qcSoftware/psi4/psi4.inv.git/psi4/src/core.cc:834:13:; > error: ‘isinstance’ is not a member of ‘py’ if (py::isinstance<py::list>(values[n])); > { ^ /home/nmayhall/qcSoftware/psi4/psi4.inv.git/psi4/src/core.cc:834:36:; > error: expected primary-expression before ‘>’ token if; > (py::isinstance<py::list>(values[n])) { ^ src/CMakeFiles/core.dir/build.make:374:; > recipe for target 'src/CMakeFiles/core.dir/core.cc.o' failed make[5]: ***; > [src/CMakeFiles/core.dir/core.cc.o] Error 1 make[5]: *** Waiting for; > unfinished jobs.... ^Csrc/CMakeFiles/core.dir/build.make:86: recipe for; > target 'src/CMakeFiles/core.dir/export_mints.cc.o' failed make[5]: ***; > [src/CMakeFiles/core.dir/export_mints.cc.o] Interrupt; > CMakeFiles/Makefile2:208: recipe for target 'src/CMakeFiles",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/536#issuecomment-264074858
https://github.com/psi4/psi4/issues/536#issuecomment-264074858:1667,Availability,error,error,1667," I revert to the; > commit just before this I'm able to compile.; > >; > > If it helps, I'm running Ubuntu, with gnu compilers.; > >; > > Here's the error message:; > >; > > /home/nmayhall/qcSoftware/psi4/psi4.inv.git/psi4/src/core.cc: In; > function ‘bool py_psi_set_local_option_array(const string&, const; > string&, const pybind11::list&, psi::DataType*)’: /home/nmayhall/qcSoftware/; > psi4/psi4.inv.git/psi4/src/core.cc:786:13: error: ‘isinstance’ is not a; > member of ‘py’ if (py::isinstance<py::list>(values[n])) { ^; > /home/nmayhall/qcSoftware/psi4/psi4.inv.git/psi4/src/core.cc:786:36:; > error: expected primary-expression before ‘>’ token if; > (py::isinstance<py::list>(values[n])) { ^ /home/nmayhall/qcSoftware/; > psi4/psi4.inv.git/psi4/src/core.cc: In function ‘bool; > py_psi_set_global_option_array(const string&, pybind11::list,; > psi::DataType*)’: /home/nmayhall/qcSoftware/psi4/psi4.inv.git/psi4/src/core.cc:834:13:; > error: ‘isinstance’ is not a member of ‘py’ if (py::isinstance<py::list>(values[n])); > { ^ /home/nmayhall/qcSoftware/psi4/psi4.inv.git/psi4/src/core.cc:834:36:; > error: expected primary-expression before ‘>’ token if; > (py::isinstance<py::list>(values[n])) { ^ src/CMakeFiles/core.dir/build.make:374:; > recipe for target 'src/CMakeFiles/core.dir/core.cc.o' failed make[5]: ***; > [src/CMakeFiles/core.dir/core.cc.o] Error 1 make[5]: *** Waiting for; > unfinished jobs.... ^Csrc/CMakeFiles/core.dir/build.make:86: recipe for; > target 'src/CMakeFiles/core.dir/export_mints.cc.o' failed make[5]: ***; > [src/CMakeFiles/core.dir/export_mints.cc.o] Interrupt; > CMakeFiles/Makefile2:208: recipe for target 'src/CMakeFiles/core.dir/all'; > failed make[4]: *** [src/CMakeFiles/core.dir/all] Interrupt Makefile:127:; > recipe for target 'all' failed make[3]: *** [all] Interrupt; > CMakeFiles/psi4_core.dir/build.make:111: recipe for target; > 'psi4_core-prefix/src/psi4_core-stamp/psi4_core-build' failed make[2]:; > *** [psi4_core-prefix/src/psi4_core-stamp/",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/536#issuecomment-264074858
https://github.com/psi4/psi4/issues/536#issuecomment-264074858:1831,Availability,error,error,1831,"ge:; > >; > > /home/nmayhall/qcSoftware/psi4/psi4.inv.git/psi4/src/core.cc: In; > function ‘bool py_psi_set_local_option_array(const string&, const; > string&, const pybind11::list&, psi::DataType*)’: /home/nmayhall/qcSoftware/; > psi4/psi4.inv.git/psi4/src/core.cc:786:13: error: ‘isinstance’ is not a; > member of ‘py’ if (py::isinstance<py::list>(values[n])) { ^; > /home/nmayhall/qcSoftware/psi4/psi4.inv.git/psi4/src/core.cc:786:36:; > error: expected primary-expression before ‘>’ token if; > (py::isinstance<py::list>(values[n])) { ^ /home/nmayhall/qcSoftware/; > psi4/psi4.inv.git/psi4/src/core.cc: In function ‘bool; > py_psi_set_global_option_array(const string&, pybind11::list,; > psi::DataType*)’: /home/nmayhall/qcSoftware/psi4/psi4.inv.git/psi4/src/core.cc:834:13:; > error: ‘isinstance’ is not a member of ‘py’ if (py::isinstance<py::list>(values[n])); > { ^ /home/nmayhall/qcSoftware/psi4/psi4.inv.git/psi4/src/core.cc:834:36:; > error: expected primary-expression before ‘>’ token if; > (py::isinstance<py::list>(values[n])) { ^ src/CMakeFiles/core.dir/build.make:374:; > recipe for target 'src/CMakeFiles/core.dir/core.cc.o' failed make[5]: ***; > [src/CMakeFiles/core.dir/core.cc.o] Error 1 make[5]: *** Waiting for; > unfinished jobs.... ^Csrc/CMakeFiles/core.dir/build.make:86: recipe for; > target 'src/CMakeFiles/core.dir/export_mints.cc.o' failed make[5]: ***; > [src/CMakeFiles/core.dir/export_mints.cc.o] Interrupt; > CMakeFiles/Makefile2:208: recipe for target 'src/CMakeFiles/core.dir/all'; > failed make[4]: *** [src/CMakeFiles/core.dir/all] Interrupt Makefile:127:; > recipe for target 'all' failed make[3]: *** [all] Interrupt; > CMakeFiles/psi4_core.dir/build.make:111: recipe for target; > 'psi4_core-prefix/src/psi4_core-stamp/psi4_core-build' failed make[2]:; > *** [psi4_core-prefix/src/psi4_core-stamp/psi4_core-build] Interrupt; > CMakeFiles/Makefile2:355: recipe for target 'CMakeFiles/psi4_core.dir/all'; > failed make[1]: *** [CMakeFiles/psi4_core.dir/all] I",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/536#issuecomment-264074858
https://github.com/psi4/psi4/issues/536#issuecomment-264074858:2087,Availability,Error,Error,2087,"; > psi4/psi4.inv.git/psi4/src/core.cc:786:13: error: ‘isinstance’ is not a; > member of ‘py’ if (py::isinstance<py::list>(values[n])) { ^; > /home/nmayhall/qcSoftware/psi4/psi4.inv.git/psi4/src/core.cc:786:36:; > error: expected primary-expression before ‘>’ token if; > (py::isinstance<py::list>(values[n])) { ^ /home/nmayhall/qcSoftware/; > psi4/psi4.inv.git/psi4/src/core.cc: In function ‘bool; > py_psi_set_global_option_array(const string&, pybind11::list,; > psi::DataType*)’: /home/nmayhall/qcSoftware/psi4/psi4.inv.git/psi4/src/core.cc:834:13:; > error: ‘isinstance’ is not a member of ‘py’ if (py::isinstance<py::list>(values[n])); > { ^ /home/nmayhall/qcSoftware/psi4/psi4.inv.git/psi4/src/core.cc:834:36:; > error: expected primary-expression before ‘>’ token if; > (py::isinstance<py::list>(values[n])) { ^ src/CMakeFiles/core.dir/build.make:374:; > recipe for target 'src/CMakeFiles/core.dir/core.cc.o' failed make[5]: ***; > [src/CMakeFiles/core.dir/core.cc.o] Error 1 make[5]: *** Waiting for; > unfinished jobs.... ^Csrc/CMakeFiles/core.dir/build.make:86: recipe for; > target 'src/CMakeFiles/core.dir/export_mints.cc.o' failed make[5]: ***; > [src/CMakeFiles/core.dir/export_mints.cc.o] Interrupt; > CMakeFiles/Makefile2:208: recipe for target 'src/CMakeFiles/core.dir/all'; > failed make[4]: *** [src/CMakeFiles/core.dir/all] Interrupt Makefile:127:; > recipe for target 'all' failed make[3]: *** [all] Interrupt; > CMakeFiles/psi4_core.dir/build.make:111: recipe for target; > 'psi4_core-prefix/src/psi4_core-stamp/psi4_core-build' failed make[2]:; > *** [psi4_core-prefix/src/psi4_core-stamp/psi4_core-build] Interrupt; > CMakeFiles/Makefile2:355: recipe for target 'CMakeFiles/psi4_core.dir/all'; > failed make[1]: *** [CMakeFiles/psi4_core.dir/all] Interrupt Makefile:138:; > recipe for target 'all' failed make: *** [all] Interrupt; > >; > > —; > > You are receiving this because you are subscribed to this thread.; > > Reply to this email directly, view it on GitHub, or mute ",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/536#issuecomment-264074858
https://github.com/psi4/psi4/issues/536#issuecomment-264074858:879,Integrability,message,message,879,"Thanks Daniel! I looked at the changes and couldn't imagine what was; causing this. I'll follow your suggestion. Best,; Nick. On Wed, Nov 30, 2016 at 11:13 PM, Daniel Smith <notifications@github.com>; wrote:. > This is actually a PyBind11 version error. It doesn't appear that our; > CMake is detecting the discrepancy. Please blow away your objdir and; > recompile from scratch.; >; > -Daniel Smith; > Sent from my iPhone.; >; > > On Nov 30, 2016, at 23:06, nmayhall <notifications@github.com> wrote:; > >; > > After a recent git pull, psi4 failed to compile. It seems that the error; > was likely introduced in commit 0d0d1f9 ""Reworked exception printing in Psi; > so all Python Exceptions raise to stdout and psi out"". If I revert to the; > commit just before this I'm able to compile.; > >; > > If it helps, I'm running Ubuntu, with gnu compilers.; > >; > > Here's the error message:; > >; > > /home/nmayhall/qcSoftware/psi4/psi4.inv.git/psi4/src/core.cc: In; > function ‘bool py_psi_set_local_option_array(const string&, const; > string&, const pybind11::list&, psi::DataType*)’: /home/nmayhall/qcSoftware/; > psi4/psi4.inv.git/psi4/src/core.cc:786:13: error: ‘isinstance’ is not a; > member of ‘py’ if (py::isinstance<py::list>(values[n])) { ^; > /home/nmayhall/qcSoftware/psi4/psi4.inv.git/psi4/src/core.cc:786:36:; > error: expected primary-expression before ‘>’ token if; > (py::isinstance<py::list>(values[n])) { ^ /home/nmayhall/qcSoftware/; > psi4/psi4.inv.git/psi4/src/core.cc: In function ‘bool; > py_psi_set_global_option_array(const string&, pybind11::list,; > psi::DataType*)’: /home/nmayhall/qcSoftware/psi4/psi4.inv.git/psi4/src/core.cc:834:13:; > error: ‘isinstance’ is not a member of ‘py’ if (py::isinstance<py::list>(values[n])); > { ^ /home/nmayhall/qcSoftware/psi4/psi4.inv.git/psi4/src/core.cc:834:36:; > error: expected primary-expression before ‘>’ token if; > (py::isinstance<py::list>(values[n])) { ^ src/CMakeFiles/core.dir/build.make:374:; > recipe for target 'src/CMak",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/536#issuecomment-264074858
https://github.com/psi4/psi4/issues/536#issuecomment-264074858:293,Safety,detect,detecting,293,"Thanks Daniel! I looked at the changes and couldn't imagine what was; causing this. I'll follow your suggestion. Best,; Nick. On Wed, Nov 30, 2016 at 11:13 PM, Daniel Smith <notifications@github.com>; wrote:. > This is actually a PyBind11 version error. It doesn't appear that our; > CMake is detecting the discrepancy. Please blow away your objdir and; > recompile from scratch.; >; > -Daniel Smith; > Sent from my iPhone.; >; > > On Nov 30, 2016, at 23:06, nmayhall <notifications@github.com> wrote:; > >; > > After a recent git pull, psi4 failed to compile. It seems that the error; > was likely introduced in commit 0d0d1f9 ""Reworked exception printing in Psi; > so all Python Exceptions raise to stdout and psi out"". If I revert to the; > commit just before this I'm able to compile.; > >; > > If it helps, I'm running Ubuntu, with gnu compilers.; > >; > > Here's the error message:; > >; > > /home/nmayhall/qcSoftware/psi4/psi4.inv.git/psi4/src/core.cc: In; > function ‘bool py_psi_set_local_option_array(const string&, const; > string&, const pybind11::list&, psi::DataType*)’: /home/nmayhall/qcSoftware/; > psi4/psi4.inv.git/psi4/src/core.cc:786:13: error: ‘isinstance’ is not a; > member of ‘py’ if (py::isinstance<py::list>(values[n])) { ^; > /home/nmayhall/qcSoftware/psi4/psi4.inv.git/psi4/src/core.cc:786:36:; > error: expected primary-expression before ‘>’ token if; > (py::isinstance<py::list>(values[n])) { ^ /home/nmayhall/qcSoftware/; > psi4/psi4.inv.git/psi4/src/core.cc: In function ‘bool; > py_psi_set_global_option_array(const string&, pybind11::list,; > psi::DataType*)’: /home/nmayhall/qcSoftware/psi4/psi4.inv.git/psi4/src/core.cc:834:13:; > error: ‘isinstance’ is not a member of ‘py’ if (py::isinstance<py::list>(values[n])); > { ^ /home/nmayhall/qcSoftware/psi4/psi4.inv.git/psi4/src/core.cc:834:36:; > error: expected primary-expression before ‘>’ token if; > (py::isinstance<py::list>(values[n])) { ^ src/CMakeFiles/core.dir/build.make:374:; > recipe for target 'src/CMak",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/536#issuecomment-264074858
https://github.com/psi4/psi4/issues/537#issuecomment-264418892:537,Energy Efficiency,power,powerful,537,"To give you the status: The traditional math detection libs that we have on the Autocmake [1] side are monolithic [2] and complex - for historical reasons and I am not happy with the code because it is hard to understand and modify and combine. My plan is to split those up into independent units which can be selected by the user (the user can be a programmer in another code). This effort has started [3] but is slow. So what I want to achieve is explicit over implicit, and simple and ""stupid"" and predictable rather than complex and powerful. My plan is to have one module for MKL, one for OpenBLAS, one for ACML, etc. Instead of a clever detection code which attempts a series of math library combinations, I want to delegate the choice to the user and split the code up. Ideas and contributions are always very welcome. [1] https://github.com/coderefinery/autocmake; [2] https://github.com/coderefinery/autocmake/blob/master/modules/math_libs.cmake; [3] https://github.com/coderefinery/autocmake/tree/master/modules/math",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/537#issuecomment-264418892
https://github.com/psi4/psi4/issues/537#issuecomment-264418892:45,Safety,detect,detection,45,"To give you the status: The traditional math detection libs that we have on the Autocmake [1] side are monolithic [2] and complex - for historical reasons and I am not happy with the code because it is hard to understand and modify and combine. My plan is to split those up into independent units which can be selected by the user (the user can be a programmer in another code). This effort has started [3] but is slow. So what I want to achieve is explicit over implicit, and simple and ""stupid"" and predictable rather than complex and powerful. My plan is to have one module for MKL, one for OpenBLAS, one for ACML, etc. Instead of a clever detection code which attempts a series of math library combinations, I want to delegate the choice to the user and split the code up. Ideas and contributions are always very welcome. [1] https://github.com/coderefinery/autocmake; [2] https://github.com/coderefinery/autocmake/blob/master/modules/math_libs.cmake; [3] https://github.com/coderefinery/autocmake/tree/master/modules/math",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/537#issuecomment-264418892
https://github.com/psi4/psi4/issues/537#issuecomment-264418892:501,Safety,predict,predictable,501,"To give you the status: The traditional math detection libs that we have on the Autocmake [1] side are monolithic [2] and complex - for historical reasons and I am not happy with the code because it is hard to understand and modify and combine. My plan is to split those up into independent units which can be selected by the user (the user can be a programmer in another code). This effort has started [3] but is slow. So what I want to achieve is explicit over implicit, and simple and ""stupid"" and predictable rather than complex and powerful. My plan is to have one module for MKL, one for OpenBLAS, one for ACML, etc. Instead of a clever detection code which attempts a series of math library combinations, I want to delegate the choice to the user and split the code up. Ideas and contributions are always very welcome. [1] https://github.com/coderefinery/autocmake; [2] https://github.com/coderefinery/autocmake/blob/master/modules/math_libs.cmake; [3] https://github.com/coderefinery/autocmake/tree/master/modules/math",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/537#issuecomment-264418892
https://github.com/psi4/psi4/issues/537#issuecomment-264418892:643,Safety,detect,detection,643,"To give you the status: The traditional math detection libs that we have on the Autocmake [1] side are monolithic [2] and complex - for historical reasons and I am not happy with the code because it is hard to understand and modify and combine. My plan is to split those up into independent units which can be selected by the user (the user can be a programmer in another code). This effort has started [3] but is slow. So what I want to achieve is explicit over implicit, and simple and ""stupid"" and predictable rather than complex and powerful. My plan is to have one module for MKL, one for OpenBLAS, one for ACML, etc. Instead of a clever detection code which attempts a series of math library combinations, I want to delegate the choice to the user and split the code up. Ideas and contributions are always very welcome. [1] https://github.com/coderefinery/autocmake; [2] https://github.com/coderefinery/autocmake/blob/master/modules/math_libs.cmake; [3] https://github.com/coderefinery/autocmake/tree/master/modules/math",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/537#issuecomment-264418892
https://github.com/psi4/psi4/issues/537#issuecomment-264418892:477,Usability,simpl,simple,477,"To give you the status: The traditional math detection libs that we have on the Autocmake [1] side are monolithic [2] and complex - for historical reasons and I am not happy with the code because it is hard to understand and modify and combine. My plan is to split those up into independent units which can be selected by the user (the user can be a programmer in another code). This effort has started [3] but is slow. So what I want to achieve is explicit over implicit, and simple and ""stupid"" and predictable rather than complex and powerful. My plan is to have one module for MKL, one for OpenBLAS, one for ACML, etc. Instead of a clever detection code which attempts a series of math library combinations, I want to delegate the choice to the user and split the code up. Ideas and contributions are always very welcome. [1] https://github.com/coderefinery/autocmake; [2] https://github.com/coderefinery/autocmake/blob/master/modules/math_libs.cmake; [3] https://github.com/coderefinery/autocmake/tree/master/modules/math",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/537#issuecomment-264418892
https://github.com/psi4/psi4/issues/537#issuecomment-264420312:54,Safety,detect,detection,54,"I think it would be great if we team up on this. Math detection issue is an issue in almost every code I know and if we find a good solution, we make many people happy.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/537#issuecomment-264420312
https://github.com/psi4/psi4/issues/537#issuecomment-264468397:346,Deployability,install,installed,346,"I'd like to team up on this, but Psi4 is trying to get back into the science business from having been in the infrastructure business for much of the past year, so our rewriting energies are depleted. On the monolithic vs. modular, on the whole I agree with preferring the latter, but I'm thinking that math detection is also going to have to be installed alongside packages so system dependencies can be detected from installed projects, and a single alternate file like [FindPythonLibsNew](https://github.com/pybind/pybind11/blob/master/tools/FindPythonLibsNew.cmake) (originally from numpy, i think) is more palatable than installing half-a-dozen+ files. So I'm guessing that on the core math, we'll probably keep applying bandaids but will be glad to serve as a test bed in developing needed specs and solutions.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/537#issuecomment-264468397
https://github.com/psi4/psi4/issues/537#issuecomment-264468397:419,Deployability,install,installed,419,"I'd like to team up on this, but Psi4 is trying to get back into the science business from having been in the infrastructure business for much of the past year, so our rewriting energies are depleted. On the monolithic vs. modular, on the whole I agree with preferring the latter, but I'm thinking that math detection is also going to have to be installed alongside packages so system dependencies can be detected from installed projects, and a single alternate file like [FindPythonLibsNew](https://github.com/pybind/pybind11/blob/master/tools/FindPythonLibsNew.cmake) (originally from numpy, i think) is more palatable than installing half-a-dozen+ files. So I'm guessing that on the core math, we'll probably keep applying bandaids but will be glad to serve as a test bed in developing needed specs and solutions.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/537#issuecomment-264468397
https://github.com/psi4/psi4/issues/537#issuecomment-264468397:626,Deployability,install,installing,626,"I'd like to team up on this, but Psi4 is trying to get back into the science business from having been in the infrastructure business for much of the past year, so our rewriting energies are depleted. On the monolithic vs. modular, on the whole I agree with preferring the latter, but I'm thinking that math detection is also going to have to be installed alongside packages so system dependencies can be detected from installed projects, and a single alternate file like [FindPythonLibsNew](https://github.com/pybind/pybind11/blob/master/tools/FindPythonLibsNew.cmake) (originally from numpy, i think) is more palatable than installing half-a-dozen+ files. So I'm guessing that on the core math, we'll probably keep applying bandaids but will be glad to serve as a test bed in developing needed specs and solutions.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/537#issuecomment-264468397
https://github.com/psi4/psi4/issues/537#issuecomment-264468397:385,Integrability,depend,dependencies,385,"I'd like to team up on this, but Psi4 is trying to get back into the science business from having been in the infrastructure business for much of the past year, so our rewriting energies are depleted. On the monolithic vs. modular, on the whole I agree with preferring the latter, but I'm thinking that math detection is also going to have to be installed alongside packages so system dependencies can be detected from installed projects, and a single alternate file like [FindPythonLibsNew](https://github.com/pybind/pybind11/blob/master/tools/FindPythonLibsNew.cmake) (originally from numpy, i think) is more palatable than installing half-a-dozen+ files. So I'm guessing that on the core math, we'll probably keep applying bandaids but will be glad to serve as a test bed in developing needed specs and solutions.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/537#issuecomment-264468397
https://github.com/psi4/psi4/issues/537#issuecomment-264468397:308,Safety,detect,detection,308,"I'd like to team up on this, but Psi4 is trying to get back into the science business from having been in the infrastructure business for much of the past year, so our rewriting energies are depleted. On the monolithic vs. modular, on the whole I agree with preferring the latter, but I'm thinking that math detection is also going to have to be installed alongside packages so system dependencies can be detected from installed projects, and a single alternate file like [FindPythonLibsNew](https://github.com/pybind/pybind11/blob/master/tools/FindPythonLibsNew.cmake) (originally from numpy, i think) is more palatable than installing half-a-dozen+ files. So I'm guessing that on the core math, we'll probably keep applying bandaids but will be glad to serve as a test bed in developing needed specs and solutions.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/537#issuecomment-264468397
https://github.com/psi4/psi4/issues/537#issuecomment-264468397:405,Safety,detect,detected,405,"I'd like to team up on this, but Psi4 is trying to get back into the science business from having been in the infrastructure business for much of the past year, so our rewriting energies are depleted. On the monolithic vs. modular, on the whole I agree with preferring the latter, but I'm thinking that math detection is also going to have to be installed alongside packages so system dependencies can be detected from installed projects, and a single alternate file like [FindPythonLibsNew](https://github.com/pybind/pybind11/blob/master/tools/FindPythonLibsNew.cmake) (originally from numpy, i think) is more palatable than installing half-a-dozen+ files. So I'm guessing that on the core math, we'll probably keep applying bandaids but will be glad to serve as a test bed in developing needed specs and solutions.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/537#issuecomment-264468397
https://github.com/psi4/psi4/issues/537#issuecomment-264468397:766,Testability,test,test,766,"I'd like to team up on this, but Psi4 is trying to get back into the science business from having been in the infrastructure business for much of the past year, so our rewriting energies are depleted. On the monolithic vs. modular, on the whole I agree with preferring the latter, but I'm thinking that math detection is also going to have to be installed alongside packages so system dependencies can be detected from installed projects, and a single alternate file like [FindPythonLibsNew](https://github.com/pybind/pybind11/blob/master/tools/FindPythonLibsNew.cmake) (originally from numpy, i think) is more palatable than installing half-a-dozen+ files. So I'm guessing that on the core math, we'll probably keep applying bandaids but will be glad to serve as a test bed in developing needed specs and solutions.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/537#issuecomment-264468397
https://github.com/psi4/psi4/pull/538#issuecomment-265318359:85,Performance,optimiz,optimization,85,"I guess it's an issue with the occupation code, but I think it gets corrected as the optimization proceeds (which changes dimensioning, which causes the psio problems we were observing). In the long term we should do a check for the occupation within the optimizer, and issue a `psiclean()` if it changes, so that DPD doesn't choke, but that's beyond the scope of what I have time for right now sadly.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/538#issuecomment-265318359
https://github.com/psi4/psi4/pull/538#issuecomment-265318359:255,Performance,optimiz,optimizer,255,"I guess it's an issue with the occupation code, but I think it gets corrected as the optimization proceeds (which changes dimensioning, which causes the psio problems we were observing). In the long term we should do a check for the occupation within the optimizer, and issue a `psiclean()` if it changes, so that DPD doesn't choke, but that's beyond the scope of what I have time for right now sadly.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/538#issuecomment-265318359
https://github.com/psi4/psi4/pull/543#issuecomment-270960957:58,Integrability,rout,route,58,The primary goal of this PR was completed through another route with #554 and the remaining bits added in 759e83e.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/543#issuecomment-270960957
https://github.com/psi4/psi4/issues/546#issuecomment-266516539:47,Availability,Error,Error,47,"It gives the diagnosis semi-gracefully, `Fatal Error: ndocc must be less than nvirt`. If you're wanting to run detci, add `set qc_module detci`. What behaviour are you looking for?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/546#issuecomment-266516539
https://github.com/psi4/psi4/issues/546#issuecomment-266559167:328,Availability,error,error,328,"That's going to be logic on values not readily accessible at ""select-function"" time when scf is not yet run. If someone was running a slew of molecules with cisd/sto-3g and wanted a single serial calc of them all to continue, then I can see the benefit, but sto-3g is so tentative a calc that I'm inclined to think the existing error msg suffices. Glad to do it if the consensus is it's wanted.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/546#issuecomment-266559167
https://github.com/psi4/psi4/issues/546#issuecomment-266559167:47,Security,access,accessible,47,"That's going to be logic on values not readily accessible at ""select-function"" time when scf is not yet run. If someone was running a slew of molecules with cisd/sto-3g and wanted a single serial calc of them all to continue, then I can see the benefit, but sto-3g is so tentative a calc that I'm inclined to think the existing error msg suffices. Glad to do it if the consensus is it's wanted.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/546#issuecomment-266559167
https://github.com/psi4/psi4/issues/546#issuecomment-266559167:19,Testability,log,logic,19,"That's going to be logic on values not readily accessible at ""select-function"" time when scf is not yet run. If someone was running a slew of molecules with cisd/sto-3g and wanted a single serial calc of them all to continue, then I can see the benefit, but sto-3g is so tentative a calc that I'm inclined to think the existing error msg suffices. Glad to do it if the consensus is it's wanted.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/546#issuecomment-266559167
https://github.com/psi4/psi4/pull/547#issuecomment-266828985:596,Testability,test,tests,596,"Sure, will do. Thanks for the feedback !!. On Tue, Dec 13, 2016 at 1:55 PM, Lori A. Burns <notifications@github.com>; wrote:. > *@loriab* commented on this pull request.; > ------------------------------; >; > In psi4/driver/procedures/proc.py; > <https://github.com/psi4/psi4/pull/547#pullrequestreview-12747170>:; >; > > @@ -870,7 +870,7 @@ def select_ccsd_t__gradient(name, **kwargs):; > # Considering only ccenergy; >; > func = None; > - if reference == 'UHF':; > + if reference == 'RHF' or reference == 'UHF':; >; > if reference in ['RHF', 'UHF']:; > ------------------------------; >; > In tests/cc13b/input.dat; > <https://github.com/psi4/psi4/pull/547#pullrequestreview-12747170>:; >; > > +}; > +; > +set {; > + reference rhf; > + basis cc-pvdz; > + r_convergence 13; > + e_convergence 13; > + d_convergence 13; > +}; > +; > +analytic, wfn = gradient('ccsd(t)', return_wfn=True); > +; > +set findif points 5; > +fin_diff, wfn = gradient('ccsd(t)', dertype=0, return_wfn=True); > +; > +compare_matrices(analytic, fin_diff, 10, ""RHF-CCSD(T) gradient test"") #TEST; >; > Concur with @amjames <https://github.com/amjames> that it would be good; > to have a quick rhf-ccsd(t) grad in quicktests. In the cfour tests, you'll; > find some gradients; > <https://github.com/psi4/psi4/blob/master/tests/cfour/opt-rhf-ccsd_t_/output.ref#L1024-L1034>; > if you'd like to compare with that.; >; > —; > You are receiving this because you authored the thread.; > Reply to this email directly, view it on GitHub; > <https://github.com/psi4/psi4/pull/547#pullrequestreview-12747170>, or mute; > the thread; > <https://github.com/notifications/unsubscribe-auth/AFIK8FiN7uGia0qIAoxKEjtzNtRE1cv9ks5rHuoTgaJpZM4LMEuA>; > .; >",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/547#issuecomment-266828985
https://github.com/psi4/psi4/pull/547#issuecomment-266828985:1056,Testability,test,test,1056,"Sure, will do. Thanks for the feedback !!. On Tue, Dec 13, 2016 at 1:55 PM, Lori A. Burns <notifications@github.com>; wrote:. > *@loriab* commented on this pull request.; > ------------------------------; >; > In psi4/driver/procedures/proc.py; > <https://github.com/psi4/psi4/pull/547#pullrequestreview-12747170>:; >; > > @@ -870,7 +870,7 @@ def select_ccsd_t__gradient(name, **kwargs):; > # Considering only ccenergy; >; > func = None; > - if reference == 'UHF':; > + if reference == 'RHF' or reference == 'UHF':; >; > if reference in ['RHF', 'UHF']:; > ------------------------------; >; > In tests/cc13b/input.dat; > <https://github.com/psi4/psi4/pull/547#pullrequestreview-12747170>:; >; > > +}; > +; > +set {; > + reference rhf; > + basis cc-pvdz; > + r_convergence 13; > + e_convergence 13; > + d_convergence 13; > +}; > +; > +analytic, wfn = gradient('ccsd(t)', return_wfn=True); > +; > +set findif points 5; > +fin_diff, wfn = gradient('ccsd(t)', dertype=0, return_wfn=True); > +; > +compare_matrices(analytic, fin_diff, 10, ""RHF-CCSD(T) gradient test"") #TEST; >; > Concur with @amjames <https://github.com/amjames> that it would be good; > to have a quick rhf-ccsd(t) grad in quicktests. In the cfour tests, you'll; > find some gradients; > <https://github.com/psi4/psi4/blob/master/tests/cfour/opt-rhf-ccsd_t_/output.ref#L1024-L1034>; > if you'd like to compare with that.; >; > —; > You are receiving this because you authored the thread.; > Reply to this email directly, view it on GitHub; > <https://github.com/psi4/psi4/pull/547#pullrequestreview-12747170>, or mute; > the thread; > <https://github.com/notifications/unsubscribe-auth/AFIK8FiN7uGia0qIAoxKEjtzNtRE1cv9ks5rHuoTgaJpZM4LMEuA>; > .; >",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/547#issuecomment-266828985
https://github.com/psi4/psi4/pull/547#issuecomment-266828985:1064,Testability,TEST,TEST,1064,"Sure, will do. Thanks for the feedback !!. On Tue, Dec 13, 2016 at 1:55 PM, Lori A. Burns <notifications@github.com>; wrote:. > *@loriab* commented on this pull request.; > ------------------------------; >; > In psi4/driver/procedures/proc.py; > <https://github.com/psi4/psi4/pull/547#pullrequestreview-12747170>:; >; > > @@ -870,7 +870,7 @@ def select_ccsd_t__gradient(name, **kwargs):; > # Considering only ccenergy; >; > func = None; > - if reference == 'UHF':; > + if reference == 'RHF' or reference == 'UHF':; >; > if reference in ['RHF', 'UHF']:; > ------------------------------; >; > In tests/cc13b/input.dat; > <https://github.com/psi4/psi4/pull/547#pullrequestreview-12747170>:; >; > > +}; > +; > +set {; > + reference rhf; > + basis cc-pvdz; > + r_convergence 13; > + e_convergence 13; > + d_convergence 13; > +}; > +; > +analytic, wfn = gradient('ccsd(t)', return_wfn=True); > +; > +set findif points 5; > +fin_diff, wfn = gradient('ccsd(t)', dertype=0, return_wfn=True); > +; > +compare_matrices(analytic, fin_diff, 10, ""RHF-CCSD(T) gradient test"") #TEST; >; > Concur with @amjames <https://github.com/amjames> that it would be good; > to have a quick rhf-ccsd(t) grad in quicktests. In the cfour tests, you'll; > find some gradients; > <https://github.com/psi4/psi4/blob/master/tests/cfour/opt-rhf-ccsd_t_/output.ref#L1024-L1034>; > if you'd like to compare with that.; >; > —; > You are receiving this because you authored the thread.; > Reply to this email directly, view it on GitHub; > <https://github.com/psi4/psi4/pull/547#pullrequestreview-12747170>, or mute; > the thread; > <https://github.com/notifications/unsubscribe-auth/AFIK8FiN7uGia0qIAoxKEjtzNtRE1cv9ks5rHuoTgaJpZM4LMEuA>; > .; >",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/547#issuecomment-266828985
https://github.com/psi4/psi4/pull/547#issuecomment-266828985:1211,Testability,test,tests,1211,"Sure, will do. Thanks for the feedback !!. On Tue, Dec 13, 2016 at 1:55 PM, Lori A. Burns <notifications@github.com>; wrote:. > *@loriab* commented on this pull request.; > ------------------------------; >; > In psi4/driver/procedures/proc.py; > <https://github.com/psi4/psi4/pull/547#pullrequestreview-12747170>:; >; > > @@ -870,7 +870,7 @@ def select_ccsd_t__gradient(name, **kwargs):; > # Considering only ccenergy; >; > func = None; > - if reference == 'UHF':; > + if reference == 'RHF' or reference == 'UHF':; >; > if reference in ['RHF', 'UHF']:; > ------------------------------; >; > In tests/cc13b/input.dat; > <https://github.com/psi4/psi4/pull/547#pullrequestreview-12747170>:; >; > > +}; > +; > +set {; > + reference rhf; > + basis cc-pvdz; > + r_convergence 13; > + e_convergence 13; > + d_convergence 13; > +}; > +; > +analytic, wfn = gradient('ccsd(t)', return_wfn=True); > +; > +set findif points 5; > +fin_diff, wfn = gradient('ccsd(t)', dertype=0, return_wfn=True); > +; > +compare_matrices(analytic, fin_diff, 10, ""RHF-CCSD(T) gradient test"") #TEST; >; > Concur with @amjames <https://github.com/amjames> that it would be good; > to have a quick rhf-ccsd(t) grad in quicktests. In the cfour tests, you'll; > find some gradients; > <https://github.com/psi4/psi4/blob/master/tests/cfour/opt-rhf-ccsd_t_/output.ref#L1024-L1034>; > if you'd like to compare with that.; >; > —; > You are receiving this because you authored the thread.; > Reply to this email directly, view it on GitHub; > <https://github.com/psi4/psi4/pull/547#pullrequestreview-12747170>, or mute; > the thread; > <https://github.com/notifications/unsubscribe-auth/AFIK8FiN7uGia0qIAoxKEjtzNtRE1cv9ks5rHuoTgaJpZM4LMEuA>; > .; >",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/547#issuecomment-266828985
https://github.com/psi4/psi4/pull/547#issuecomment-266828985:1293,Testability,test,tests,1293,"Sure, will do. Thanks for the feedback !!. On Tue, Dec 13, 2016 at 1:55 PM, Lori A. Burns <notifications@github.com>; wrote:. > *@loriab* commented on this pull request.; > ------------------------------; >; > In psi4/driver/procedures/proc.py; > <https://github.com/psi4/psi4/pull/547#pullrequestreview-12747170>:; >; > > @@ -870,7 +870,7 @@ def select_ccsd_t__gradient(name, **kwargs):; > # Considering only ccenergy; >; > func = None; > - if reference == 'UHF':; > + if reference == 'RHF' or reference == 'UHF':; >; > if reference in ['RHF', 'UHF']:; > ------------------------------; >; > In tests/cc13b/input.dat; > <https://github.com/psi4/psi4/pull/547#pullrequestreview-12747170>:; >; > > +}; > +; > +set {; > + reference rhf; > + basis cc-pvdz; > + r_convergence 13; > + e_convergence 13; > + d_convergence 13; > +}; > +; > +analytic, wfn = gradient('ccsd(t)', return_wfn=True); > +; > +set findif points 5; > +fin_diff, wfn = gradient('ccsd(t)', dertype=0, return_wfn=True); > +; > +compare_matrices(analytic, fin_diff, 10, ""RHF-CCSD(T) gradient test"") #TEST; >; > Concur with @amjames <https://github.com/amjames> that it would be good; > to have a quick rhf-ccsd(t) grad in quicktests. In the cfour tests, you'll; > find some gradients; > <https://github.com/psi4/psi4/blob/master/tests/cfour/opt-rhf-ccsd_t_/output.ref#L1024-L1034>; > if you'd like to compare with that.; >; > —; > You are receiving this because you authored the thread.; > Reply to this email directly, view it on GitHub; > <https://github.com/psi4/psi4/pull/547#pullrequestreview-12747170>, or mute; > the thread; > <https://github.com/notifications/unsubscribe-auth/AFIK8FiN7uGia0qIAoxKEjtzNtRE1cv9ks5rHuoTgaJpZM4LMEuA>; > .; >",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/547#issuecomment-266828985
https://github.com/psi4/psi4/pull/547#issuecomment-266828985:30,Usability,feedback,feedback,30,"Sure, will do. Thanks for the feedback !!. On Tue, Dec 13, 2016 at 1:55 PM, Lori A. Burns <notifications@github.com>; wrote:. > *@loriab* commented on this pull request.; > ------------------------------; >; > In psi4/driver/procedures/proc.py; > <https://github.com/psi4/psi4/pull/547#pullrequestreview-12747170>:; >; > > @@ -870,7 +870,7 @@ def select_ccsd_t__gradient(name, **kwargs):; > # Considering only ccenergy; >; > func = None; > - if reference == 'UHF':; > + if reference == 'RHF' or reference == 'UHF':; >; > if reference in ['RHF', 'UHF']:; > ------------------------------; >; > In tests/cc13b/input.dat; > <https://github.com/psi4/psi4/pull/547#pullrequestreview-12747170>:; >; > > +}; > +; > +set {; > + reference rhf; > + basis cc-pvdz; > + r_convergence 13; > + e_convergence 13; > + d_convergence 13; > +}; > +; > +analytic, wfn = gradient('ccsd(t)', return_wfn=True); > +; > +set findif points 5; > +fin_diff, wfn = gradient('ccsd(t)', dertype=0, return_wfn=True); > +; > +compare_matrices(analytic, fin_diff, 10, ""RHF-CCSD(T) gradient test"") #TEST; >; > Concur with @amjames <https://github.com/amjames> that it would be good; > to have a quick rhf-ccsd(t) grad in quicktests. In the cfour tests, you'll; > find some gradients; > <https://github.com/psi4/psi4/blob/master/tests/cfour/opt-rhf-ccsd_t_/output.ref#L1024-L1034>; > if you'd like to compare with that.; >; > —; > You are receiving this because you authored the thread.; > Reply to this email directly, view it on GitHub; > <https://github.com/psi4/psi4/pull/547#pullrequestreview-12747170>, or mute; > the thread; > <https://github.com/notifications/unsubscribe-auth/AFIK8FiN7uGia0qIAoxKEjtzNtRE1cv9ks5rHuoTgaJpZM4LMEuA>; > .; >",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/547#issuecomment-266828985
https://github.com/psi4/psi4/issues/548#issuecomment-266883432:147,Testability,test,tested,147,"I think its this way so that people can use the `READ` keyword for failed jobs without a PID. We do have a PID restart mechanism; however, its not tested or used AFAIK. . There are quite a few read/writes coming from Python libraries these days so a pure Psi4 C++ module would not work. You could have a unified namespace that includes the PID. This is what `core.get_writer_file_prefix(scf_molecule.name())` tries to do; however, without a PID.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/548#issuecomment-266883432
https://github.com/psi4/psi4/issues/548#issuecomment-266885278:29,Integrability,interface,interface,29,"We'll also need to consider [interface codes](https://github.com/psi4/psi4/blob/master/psi4/driver/qcdb/interface_dftd3.py#L152-L157) that do file writing, too. Is it wanted to keep only mpi process == 1 writing the files or to keep the filenames unique so it doesn't matter if N mpi processes are writing the files? Or either, depending on the situation?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/548#issuecomment-266885278
https://github.com/psi4/psi4/issues/548#issuecomment-266885278:328,Integrability,depend,depending,328,"We'll also need to consider [interface codes](https://github.com/psi4/psi4/blob/master/psi4/driver/qcdb/interface_dftd3.py#L152-L157) that do file writing, too. Is it wanted to keep only mpi process == 1 writing the files or to keep the filenames unique so it doesn't matter if N mpi processes are writing the files? Or either, depending on the situation?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/548#issuecomment-266885278
https://github.com/psi4/psi4/issues/548#issuecomment-266893399:363,Integrability,wrap,wrapped,363,"@dgasmith ; - I don't understand what difference the PID makes in terms of a read command; ~~~~.py; set{; READ ""some_file_with_no_PID.input""; READ ""some_file_generated_from_process.1234""; }; #later...; file2open=options.get_str(""READ""); f=open(file2open,'r'); ~~~~; - I think the key point is that any solution has to be accessible both in C++ and in Python thus wrapped one way or the other in Pybind11. I personally think the common API for streams in C++ makes it easier, but it makes no difference if it's written in Python just as long as all calls go through it. ; - If the Python libraries you speak of are outside of Psi4 then in an ideal world they would allow you to specify the file they are going to write to. If they don't provide such services, Psi4 needs to intervene or ensure that the library isn't called under MPI. If these libraries aren't providing core features then it is unlikely that they will interfere with MPI operation and they can be ignored.; - I'm currently running the test suite to ensure my changes to `get_writer_file_prefix` didn't break anything. It now appends the PID to the string it was going to return anyways. Once it passes I'll make a new PR for that change and submit it. @loriab ensuring only one MPI process writes is probably a loosing battle unless you rework the infrastructure to be more like Pulsar. People likely bypass you. It think the best bet is to keep the files unique and to do it with a function like `get_writer_file_prefix` or a similar class/library. For the situation you highlighted I think `get_writer_file_prefix` will suffice. I think `get_writer_file_prefix` will work in practice as long as everyone uses it. Moving towards HPC applications I think files really should only be used for long term storage or when something doesn't fit in RAM, not for interfacing.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/548#issuecomment-266893399
https://github.com/psi4/psi4/issues/548#issuecomment-266893399:321,Security,access,accessible,321,"@dgasmith ; - I don't understand what difference the PID makes in terms of a read command; ~~~~.py; set{; READ ""some_file_with_no_PID.input""; READ ""some_file_generated_from_process.1234""; }; #later...; file2open=options.get_str(""READ""); f=open(file2open,'r'); ~~~~; - I think the key point is that any solution has to be accessible both in C++ and in Python thus wrapped one way or the other in Pybind11. I personally think the common API for streams in C++ makes it easier, but it makes no difference if it's written in Python just as long as all calls go through it. ; - If the Python libraries you speak of are outside of Psi4 then in an ideal world they would allow you to specify the file they are going to write to. If they don't provide such services, Psi4 needs to intervene or ensure that the library isn't called under MPI. If these libraries aren't providing core features then it is unlikely that they will interfere with MPI operation and they can be ignored.; - I'm currently running the test suite to ensure my changes to `get_writer_file_prefix` didn't break anything. It now appends the PID to the string it was going to return anyways. Once it passes I'll make a new PR for that change and submit it. @loriab ensuring only one MPI process writes is probably a loosing battle unless you rework the infrastructure to be more like Pulsar. People likely bypass you. It think the best bet is to keep the files unique and to do it with a function like `get_writer_file_prefix` or a similar class/library. For the situation you highlighted I think `get_writer_file_prefix` will suffice. I think `get_writer_file_prefix` will work in practice as long as everyone uses it. Moving towards HPC applications I think files really should only be used for long term storage or when something doesn't fit in RAM, not for interfacing.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/548#issuecomment-266893399
https://github.com/psi4/psi4/issues/548#issuecomment-266893399:1002,Testability,test,test,1002,"@dgasmith ; - I don't understand what difference the PID makes in terms of a read command; ~~~~.py; set{; READ ""some_file_with_no_PID.input""; READ ""some_file_generated_from_process.1234""; }; #later...; file2open=options.get_str(""READ""); f=open(file2open,'r'); ~~~~; - I think the key point is that any solution has to be accessible both in C++ and in Python thus wrapped one way or the other in Pybind11. I personally think the common API for streams in C++ makes it easier, but it makes no difference if it's written in Python just as long as all calls go through it. ; - If the Python libraries you speak of are outside of Psi4 then in an ideal world they would allow you to specify the file they are going to write to. If they don't provide such services, Psi4 needs to intervene or ensure that the library isn't called under MPI. If these libraries aren't providing core features then it is unlikely that they will interfere with MPI operation and they can be ignored.; - I'm currently running the test suite to ensure my changes to `get_writer_file_prefix` didn't break anything. It now appends the PID to the string it was going to return anyways. Once it passes I'll make a new PR for that change and submit it. @loriab ensuring only one MPI process writes is probably a loosing battle unless you rework the infrastructure to be more like Pulsar. People likely bypass you. It think the best bet is to keep the files unique and to do it with a function like `get_writer_file_prefix` or a similar class/library. For the situation you highlighted I think `get_writer_file_prefix` will suffice. I think `get_writer_file_prefix` will work in practice as long as everyone uses it. Moving towards HPC applications I think files really should only be used for long term storage or when something doesn't fit in RAM, not for interfacing.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/548#issuecomment-266893399
https://github.com/psi4/psi4/issues/548#issuecomment-266895690:323,Usability,simpl,simply,323,"The command is `set guess READ`, so nothing is passed in. You would need to change the command to accept a file line. Also, be careful as I believe other areas manually append the PID, you will have to check those as well. You might want to check with others before changing this functionality. The trivial quick fix is to simply name your molecules something unique.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/548#issuecomment-266895690
https://github.com/psi4/psi4/issues/548#issuecomment-267088926:6,Testability,test,testing,6,So my testing indicates that appending the PID to the name breaks full-CI (presumably in the TDM code as fci-TDM and fci-TDM-2 are failing) as well as the SAPT code (sapt2 is failing). Any insight from those familiar with those codes would be greatly appreciated.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/548#issuecomment-267088926
https://github.com/psi4/psi4/pull/549#issuecomment-267625682:145,Usability,feedback,feedback,145,"Before this gets merged, do we want to also do the `set guess file` change in it? It's sort of in the spirit of this PR. That of course requires feedback from the community.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/549#issuecomment-267625682
https://github.com/psi4/psi4/pull/550#issuecomment-267189874:120,Energy Efficiency,allocate,allocate,120,"Can you clarify what was giving you trouble? A buf4_init() call shouldn't yield any data, because it doesn't attempt to allocate memory for the tensor data itself, just meta-data like row/column lookups. The underlying file4_init() call *can* be associated with data that's already in cache (in which case I wouldn't describe it as ""loading"", just assigning a pointer to data in memory). Sorry to be picky; I just want to the docs to match what's happening in the code.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/550#issuecomment-267189874
https://github.com/psi4/psi4/pull/550#issuecomment-267189874:285,Performance,cache,cache,285,"Can you clarify what was giving you trouble? A buf4_init() call shouldn't yield any data, because it doesn't attempt to allocate memory for the tensor data itself, just meta-data like row/column lookups. The underlying file4_init() call *can* be associated with data that's already in cache (in which case I wouldn't describe it as ""loading"", just assigning a pointer to data in memory). Sorry to be picky; I just want to the docs to match what's happening in the code.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/550#issuecomment-267189874
https://github.com/psi4/psi4/pull/550#issuecomment-267189874:333,Performance,load,loading,333,"Can you clarify what was giving you trouble? A buf4_init() call shouldn't yield any data, because it doesn't attempt to allocate memory for the tensor data itself, just meta-data like row/column lookups. The underlying file4_init() call *can* be associated with data that's already in cache (in which case I wouldn't describe it as ""loading"", just assigning a pointer to data in memory). Sorry to be picky; I just want to the docs to match what's happening in the code.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/550#issuecomment-267189874
https://github.com/psi4/psi4/pull/550#issuecomment-267204006:1230,Integrability,contract,contractXXX,1230,"I believe I know exactly what you have experienced, please correct me if I am wrong. . It is easy to come to the conclusion that buf4_init is like a constructor. Leading to the conclusion that when you pass a `dpdbuf4` to the `buf4_init` function you get a brand new instance of a class with data initialized to zero. However these are not objects in a proper OOP sense, and for that reason the when/why of data moving into `buffer->matrix` can be confusing. The comments here should have some warning that the data that *will be* pointed to by`buffer->matrix`, will only be ""blank"" if the tensor that this (`filenumber`, `label`) combination refers to does not exist. Exist here has a very broad scope since you may be referring to an entry in a file which was written by some other module, and often it is up to the programmer to know ""This quantity was written by module A, and it is safe for me to assume that it will be on disk when the code I am writing in module B will run because I made sure that module A runs before module B in the driver"". If you expect/want a tensor to be zero-ed out you should always do that explicitly when manipulating the data. This detail is easy to overlook since common operations using the `contractXXX` methods may be doing that without you realizing it. For example by setting the pre-factor on the target to zero. . There are plans in the works for a fairly major overhaul of libDPD to address various problems, one being that the interface is very cumbersome. Hopefully those efforts will make it much easier to get comfortable writing code that uses DPD.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/550#issuecomment-267204006
https://github.com/psi4/psi4/pull/550#issuecomment-267204006:1473,Integrability,interface,interface,1473,"I believe I know exactly what you have experienced, please correct me if I am wrong. . It is easy to come to the conclusion that buf4_init is like a constructor. Leading to the conclusion that when you pass a `dpdbuf4` to the `buf4_init` function you get a brand new instance of a class with data initialized to zero. However these are not objects in a proper OOP sense, and for that reason the when/why of data moving into `buffer->matrix` can be confusing. The comments here should have some warning that the data that *will be* pointed to by`buffer->matrix`, will only be ""blank"" if the tensor that this (`filenumber`, `label`) combination refers to does not exist. Exist here has a very broad scope since you may be referring to an entry in a file which was written by some other module, and often it is up to the programmer to know ""This quantity was written by module A, and it is safe for me to assume that it will be on disk when the code I am writing in module B will run because I made sure that module A runs before module B in the driver"". If you expect/want a tensor to be zero-ed out you should always do that explicitly when manipulating the data. This detail is easy to overlook since common operations using the `contractXXX` methods may be doing that without you realizing it. For example by setting the pre-factor on the target to zero. . There are plans in the works for a fairly major overhaul of libDPD to address various problems, one being that the interface is very cumbersome. Hopefully those efforts will make it much easier to get comfortable writing code that uses DPD.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/550#issuecomment-267204006
https://github.com/psi4/psi4/pull/550#issuecomment-267204006:887,Safety,safe,safe,887,"I believe I know exactly what you have experienced, please correct me if I am wrong. . It is easy to come to the conclusion that buf4_init is like a constructor. Leading to the conclusion that when you pass a `dpdbuf4` to the `buf4_init` function you get a brand new instance of a class with data initialized to zero. However these are not objects in a proper OOP sense, and for that reason the when/why of data moving into `buffer->matrix` can be confusing. The comments here should have some warning that the data that *will be* pointed to by`buffer->matrix`, will only be ""blank"" if the tensor that this (`filenumber`, `label`) combination refers to does not exist. Exist here has a very broad scope since you may be referring to an entry in a file which was written by some other module, and often it is up to the programmer to know ""This quantity was written by module A, and it is safe for me to assume that it will be on disk when the code I am writing in module B will run because I made sure that module A runs before module B in the driver"". If you expect/want a tensor to be zero-ed out you should always do that explicitly when manipulating the data. This detail is easy to overlook since common operations using the `contractXXX` methods may be doing that without you realizing it. For example by setting the pre-factor on the target to zero. . There are plans in the works for a fairly major overhaul of libDPD to address various problems, one being that the interface is very cumbersome. Hopefully those efforts will make it much easier to get comfortable writing code that uses DPD.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/550#issuecomment-267204006
https://github.com/psi4/psi4/pull/550#issuecomment-267205350:377,Integrability,depend,depending,377,"To expand on my request for changes a little more, the wording is problematic since the problem I believe you are getting at has nothing to do with the file being in cache, it has to do with the file-entry existing on disk. . Yes if the quantity is held in cache, the data is accessible right away, but if it is not held in cache you may still be modifying a non-zero quantity depending on how you manipulate the buffer later.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/550#issuecomment-267205350
https://github.com/psi4/psi4/pull/550#issuecomment-267205350:166,Performance,cache,cache,166,"To expand on my request for changes a little more, the wording is problematic since the problem I believe you are getting at has nothing to do with the file being in cache, it has to do with the file-entry existing on disk. . Yes if the quantity is held in cache, the data is accessible right away, but if it is not held in cache you may still be modifying a non-zero quantity depending on how you manipulate the buffer later.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/550#issuecomment-267205350
https://github.com/psi4/psi4/pull/550#issuecomment-267205350:257,Performance,cache,cache,257,"To expand on my request for changes a little more, the wording is problematic since the problem I believe you are getting at has nothing to do with the file being in cache, it has to do with the file-entry existing on disk. . Yes if the quantity is held in cache, the data is accessible right away, but if it is not held in cache you may still be modifying a non-zero quantity depending on how you manipulate the buffer later.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/550#issuecomment-267205350
https://github.com/psi4/psi4/pull/550#issuecomment-267205350:324,Performance,cache,cache,324,"To expand on my request for changes a little more, the wording is problematic since the problem I believe you are getting at has nothing to do with the file being in cache, it has to do with the file-entry existing on disk. . Yes if the quantity is held in cache, the data is accessible right away, but if it is not held in cache you may still be modifying a non-zero quantity depending on how you manipulate the buffer later.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/550#issuecomment-267205350
https://github.com/psi4/psi4/pull/550#issuecomment-267205350:276,Security,access,accessible,276,"To expand on my request for changes a little more, the wording is problematic since the problem I believe you are getting at has nothing to do with the file being in cache, it has to do with the file-entry existing on disk. . Yes if the quantity is held in cache, the data is accessible right away, but if it is not held in cache you may still be modifying a non-zero quantity depending on how you manipulate the buffer later.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/550#issuecomment-267205350
https://github.com/psi4/psi4/pull/550#issuecomment-267212631:55,Usability,clear,clearly,55,"Yep, @amjames described my confusion exactly (and very clearly too!). So the wording should be modified to indicate that if the (filenum, label) combination was called at an earlier point, then it will return non-zero data?. One other small thing that would be nice to clarify (but I don't know how to do it clearly) is that filenum or label alone is not enough to determine which data is returned by buf4_init and friends. I didn't have a clear concept of how filenum and label related to each other from reading the original docstring. I ended up realizing later on there was a contradiction in the CCENERGY code if I assumed filenum or label alone were enough.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/550#issuecomment-267212631
https://github.com/psi4/psi4/pull/550#issuecomment-267212631:308,Usability,clear,clearly,308,"Yep, @amjames described my confusion exactly (and very clearly too!). So the wording should be modified to indicate that if the (filenum, label) combination was called at an earlier point, then it will return non-zero data?. One other small thing that would be nice to clarify (but I don't know how to do it clearly) is that filenum or label alone is not enough to determine which data is returned by buf4_init and friends. I didn't have a clear concept of how filenum and label related to each other from reading the original docstring. I ended up realizing later on there was a contradiction in the CCENERGY code if I assumed filenum or label alone were enough.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/550#issuecomment-267212631
https://github.com/psi4/psi4/pull/550#issuecomment-267212631:440,Usability,clear,clear,440,"Yep, @amjames described my confusion exactly (and very clearly too!). So the wording should be modified to indicate that if the (filenum, label) combination was called at an earlier point, then it will return non-zero data?. One other small thing that would be nice to clarify (but I don't know how to do it clearly) is that filenum or label alone is not enough to determine which data is returned by buf4_init and friends. I didn't have a clear concept of how filenum and label related to each other from reading the original docstring. I ended up realizing later on there was a contradiction in the CCENERGY code if I assumed filenum or label alone were enough.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/550#issuecomment-267212631
https://github.com/psi4/psi4/pull/550#issuecomment-267239879:1690,Integrability,contract,contractXYZ,1690,"@matt-chan Regarding the note in the documentation, I think it would be best to leave the comments on the arguments alone, and in the general description of file4/file2 init we can add a line to the end. . `Note: if label is found in the TOC for FILENUM the data in that file-entry read in/overwritten by subsequent functions using this buffer. If label is not found in the TOC for FILENUM . If @lothian is fine with that, and you think it would help, I think that is enough to help people out. I wouldn't want to confuse the issue further by putting notes about files in `buf4_init`, or suggesting that the cache system is somehow involved. Regarding your question: First, could you show me where that contradiction is in CCENERGY?; Second, to clarify the file-number, label combination is enough to specify the quantity you want to retrieve, with the important caveat that you (the programmer) also know *everything* that has been done with that file-entry up to the point where your code is using it. Which may include the file it lives in being having been wiped clean (if it was a temporary file, for example). Also a side note:; > … which data is returned by buf4_init and friends .. I will reiterate that `buf4_init()` does not return any data. It may be if the quantity is stored in cache, and after you `buf4_init()` you can access the data in `dpdbuf4->matrix` but that is not something you can rely on since setting `cachelevel = 0` in the input file would mean code relying on something staying in cache will break. You need to have calls to the appropriate matrix initialization/reading functions as well. This is not obvious at first glance at libdpd since the commonly used `contractXYZ` and other similar functions are doing a lot on the inside inside.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/550#issuecomment-267239879
https://github.com/psi4/psi4/pull/550#issuecomment-267239879:608,Performance,cache,cache,608,"@matt-chan Regarding the note in the documentation, I think it would be best to leave the comments on the arguments alone, and in the general description of file4/file2 init we can add a line to the end. . `Note: if label is found in the TOC for FILENUM the data in that file-entry read in/overwritten by subsequent functions using this buffer. If label is not found in the TOC for FILENUM . If @lothian is fine with that, and you think it would help, I think that is enough to help people out. I wouldn't want to confuse the issue further by putting notes about files in `buf4_init`, or suggesting that the cache system is somehow involved. Regarding your question: First, could you show me where that contradiction is in CCENERGY?; Second, to clarify the file-number, label combination is enough to specify the quantity you want to retrieve, with the important caveat that you (the programmer) also know *everything* that has been done with that file-entry up to the point where your code is using it. Which may include the file it lives in being having been wiped clean (if it was a temporary file, for example). Also a side note:; > … which data is returned by buf4_init and friends .. I will reiterate that `buf4_init()` does not return any data. It may be if the quantity is stored in cache, and after you `buf4_init()` you can access the data in `dpdbuf4->matrix` but that is not something you can rely on since setting `cachelevel = 0` in the input file would mean code relying on something staying in cache will break. You need to have calls to the appropriate matrix initialization/reading functions as well. This is not obvious at first glance at libdpd since the commonly used `contractXYZ` and other similar functions are doing a lot on the inside inside.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/550#issuecomment-267239879
https://github.com/psi4/psi4/pull/550#issuecomment-267239879:1291,Performance,cache,cache,1291,"@matt-chan Regarding the note in the documentation, I think it would be best to leave the comments on the arguments alone, and in the general description of file4/file2 init we can add a line to the end. . `Note: if label is found in the TOC for FILENUM the data in that file-entry read in/overwritten by subsequent functions using this buffer. If label is not found in the TOC for FILENUM . If @lothian is fine with that, and you think it would help, I think that is enough to help people out. I wouldn't want to confuse the issue further by putting notes about files in `buf4_init`, or suggesting that the cache system is somehow involved. Regarding your question: First, could you show me where that contradiction is in CCENERGY?; Second, to clarify the file-number, label combination is enough to specify the quantity you want to retrieve, with the important caveat that you (the programmer) also know *everything* that has been done with that file-entry up to the point where your code is using it. Which may include the file it lives in being having been wiped clean (if it was a temporary file, for example). Also a side note:; > … which data is returned by buf4_init and friends .. I will reiterate that `buf4_init()` does not return any data. It may be if the quantity is stored in cache, and after you `buf4_init()` you can access the data in `dpdbuf4->matrix` but that is not something you can rely on since setting `cachelevel = 0` in the input file would mean code relying on something staying in cache will break. You need to have calls to the appropriate matrix initialization/reading functions as well. This is not obvious at first glance at libdpd since the commonly used `contractXYZ` and other similar functions are doing a lot on the inside inside.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/550#issuecomment-267239879
https://github.com/psi4/psi4/pull/550#issuecomment-267239879:1428,Performance,cache,cachelevel,1428,"@matt-chan Regarding the note in the documentation, I think it would be best to leave the comments on the arguments alone, and in the general description of file4/file2 init we can add a line to the end. . `Note: if label is found in the TOC for FILENUM the data in that file-entry read in/overwritten by subsequent functions using this buffer. If label is not found in the TOC for FILENUM . If @lothian is fine with that, and you think it would help, I think that is enough to help people out. I wouldn't want to confuse the issue further by putting notes about files in `buf4_init`, or suggesting that the cache system is somehow involved. Regarding your question: First, could you show me where that contradiction is in CCENERGY?; Second, to clarify the file-number, label combination is enough to specify the quantity you want to retrieve, with the important caveat that you (the programmer) also know *everything* that has been done with that file-entry up to the point where your code is using it. Which may include the file it lives in being having been wiped clean (if it was a temporary file, for example). Also a side note:; > … which data is returned by buf4_init and friends .. I will reiterate that `buf4_init()` does not return any data. It may be if the quantity is stored in cache, and after you `buf4_init()` you can access the data in `dpdbuf4->matrix` but that is not something you can rely on since setting `cachelevel = 0` in the input file would mean code relying on something staying in cache will break. You need to have calls to the appropriate matrix initialization/reading functions as well. This is not obvious at first glance at libdpd since the commonly used `contractXYZ` and other similar functions are doing a lot on the inside inside.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/550#issuecomment-267239879
https://github.com/psi4/psi4/pull/550#issuecomment-267239879:1510,Performance,cache,cache,1510,"@matt-chan Regarding the note in the documentation, I think it would be best to leave the comments on the arguments alone, and in the general description of file4/file2 init we can add a line to the end. . `Note: if label is found in the TOC for FILENUM the data in that file-entry read in/overwritten by subsequent functions using this buffer. If label is not found in the TOC for FILENUM . If @lothian is fine with that, and you think it would help, I think that is enough to help people out. I wouldn't want to confuse the issue further by putting notes about files in `buf4_init`, or suggesting that the cache system is somehow involved. Regarding your question: First, could you show me where that contradiction is in CCENERGY?; Second, to clarify the file-number, label combination is enough to specify the quantity you want to retrieve, with the important caveat that you (the programmer) also know *everything* that has been done with that file-entry up to the point where your code is using it. Which may include the file it lives in being having been wiped clean (if it was a temporary file, for example). Also a side note:; > … which data is returned by buf4_init and friends .. I will reiterate that `buf4_init()` does not return any data. It may be if the quantity is stored in cache, and after you `buf4_init()` you can access the data in `dpdbuf4->matrix` but that is not something you can rely on since setting `cachelevel = 0` in the input file would mean code relying on something staying in cache will break. You need to have calls to the appropriate matrix initialization/reading functions as well. This is not obvious at first glance at libdpd since the commonly used `contractXYZ` and other similar functions are doing a lot on the inside inside.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/550#issuecomment-267239879
https://github.com/psi4/psi4/pull/550#issuecomment-267239879:1334,Security,access,access,1334,"@matt-chan Regarding the note in the documentation, I think it would be best to leave the comments on the arguments alone, and in the general description of file4/file2 init we can add a line to the end. . `Note: if label is found in the TOC for FILENUM the data in that file-entry read in/overwritten by subsequent functions using this buffer. If label is not found in the TOC for FILENUM . If @lothian is fine with that, and you think it would help, I think that is enough to help people out. I wouldn't want to confuse the issue further by putting notes about files in `buf4_init`, or suggesting that the cache system is somehow involved. Regarding your question: First, could you show me where that contradiction is in CCENERGY?; Second, to clarify the file-number, label combination is enough to specify the quantity you want to retrieve, with the important caveat that you (the programmer) also know *everything* that has been done with that file-entry up to the point where your code is using it. Which may include the file it lives in being having been wiped clean (if it was a temporary file, for example). Also a side note:; > … which data is returned by buf4_init and friends .. I will reiterate that `buf4_init()` does not return any data. It may be if the quantity is stored in cache, and after you `buf4_init()` you can access the data in `dpdbuf4->matrix` but that is not something you can rely on since setting `cachelevel = 0` in the input file would mean code relying on something staying in cache will break. You need to have calls to the appropriate matrix initialization/reading functions as well. This is not obvious at first glance at libdpd since the commonly used `contractXYZ` and other similar functions are doing a lot on the inside inside.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/550#issuecomment-267239879
https://github.com/psi4/psi4/pull/550#issuecomment-267468232:421,Performance,cache,cachelevel,421,"Thanks for the clarification @amjames. I think the line at the docstring as you suggested might be better, but it would be even clearer if it explicitly mentions the possibility of non-zero data residing in the file/buffer?. The code I was looking at is here at [line 79-90](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/ccenergy/mp2_energy.cc). If I understand you though, this code would break if someone set `cachelevel = 0`? It makes no sense to take the dot product or direct product of zero arrays.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/550#issuecomment-267468232
https://github.com/psi4/psi4/pull/550#issuecomment-267468232:128,Usability,clear,clearer,128,"Thanks for the clarification @amjames. I think the line at the docstring as you suggested might be better, but it would be even clearer if it explicitly mentions the possibility of non-zero data residing in the file/buffer?. The code I was looking at is here at [line 79-90](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/ccenergy/mp2_energy.cc). If I understand you though, this code would break if someone set `cachelevel = 0`? It makes no sense to take the dot product or direct product of zero arrays.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/550#issuecomment-267468232
https://github.com/psi4/psi4/pull/550#issuecomment-267512911:1997,Availability,error,errors,1997,"e buffer holds the information necessary to get that data, *when it is explicitly told to*. . I am sorry for not being clear, but this stuff is very easy to get lost in. I meant that trying to access tensor elements directly after calling `buf4_init`. Getting back to the subject of this PR: . 1. Lets leave the comments in `file4_init` alone, since the `buf4/file2_init` functions are the ones being used externally, `file4_init`s are usually only found w/in DPD itself as far as I know.. ; 2. In `buf4_init()` and `file2_init()` We can put note/warning separate from the description of `label`, something to the tune of ; > Make sure that you use the correct `label` and `inputfile` if you *intend* to read from or write to an existing quantity on disk. If you *intend* to populate a new quantity on disk, ensure that the `label` is not already used in `inputfile`. PSIO::tocprint(int filenum) can be used to display the current list of labels in use in the outputfile. . BTW: That last hint is particularly useful for debugging I/O related errors. Also, If you intend … better than it will be loaded… since it indicates this may or may not be done, and it does **not** happen now. . The case where an tensor is held in core via the cache system does not need to be mentioned since it does not change any of this behavior. To go on to your question about the inputfile, label relationship. The file is one of those defined in [psifiles.h](https://github.com/psi4/psi4/blob/master/psi4/include/psi4/psifiles.h), and these macros provide an easy way to know which number file a quantity belongs in. Thinking of the file as a dictionary is not so far from reality, and will serve for the purpose of explaining. The label is going to be used to lookup the offset into the file (number of bytes from the beginning) where some numbers (the elements of the tensor) are found. If writing it will replace these, if reading they used in any operations involving the buffer we are using to manage all of this.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/550#issuecomment-267512911
https://github.com/psi4/psi4/pull/550#issuecomment-267512911:231,Energy Efficiency,allocate,allocated,231,"The lines you highlighted are completely valid since within [`dirprod`](https://github.com/psi4/psi4/blob/9618f2716c4ff16a6c48276bcd8e4b96adc29fec/psi4/src/psi4/libdpd/buf4_dirprd.cc#L55) for example:; - **lines 55+56**: memory is allocated for the elements of each tensor (one irrep at a time) , ; - **lines 57+58**: The elements are read from the file and used to populate the memory we just allocated ; - ** line 60**: the operation is performed for the block (irrep) we are working with.; - **line 63**: The modified elements are written back to disk, replacing the data that was read in on line 56; - **lines 64 + 65**: The memory for this irrep is freed. This is why I want to move away from talking about data at all in the comment string, `buf4_init` is not responsible for initializing the ""data"" you are talking about. That is by *design* so that operations can be performed over the tensors in chunks like I have outlined in the part above. The buffer holds the information necessary to get that data, *when it is explicitly told to*. . I am sorry for not being clear, but this stuff is very easy to get lost in. I meant that trying to access tensor elements directly after calling `buf4_init`. Getting back to the subject of this PR: . 1. Lets leave the comments in `file4_init` alone, since the `buf4/file2_init` functions are the ones being used externally, `file4_init`s are usually only found w/in DPD itself as far as I know.. ; 2. In `buf4_init()` and `file2_init()` We can put note/warning separate from the description of `label`, something to the tune of ; > Make sure that you use the correct `label` and `inputfile` if you *intend* to read from or write to an existing quantity on disk. If you *intend* to populate a new quantity on disk, ensure that the `label` is not already used in `inputfile`. PSIO::tocprint(int filenum) can be used to display the current list of labels in use in the outputfile. . BTW: That last hint is particularly useful for debugging I/O related erro",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/550#issuecomment-267512911
https://github.com/psi4/psi4/pull/550#issuecomment-267512911:394,Energy Efficiency,allocate,allocated,394,"The lines you highlighted are completely valid since within [`dirprod`](https://github.com/psi4/psi4/blob/9618f2716c4ff16a6c48276bcd8e4b96adc29fec/psi4/src/psi4/libdpd/buf4_dirprd.cc#L55) for example:; - **lines 55+56**: memory is allocated for the elements of each tensor (one irrep at a time) , ; - **lines 57+58**: The elements are read from the file and used to populate the memory we just allocated ; - ** line 60**: the operation is performed for the block (irrep) we are working with.; - **line 63**: The modified elements are written back to disk, replacing the data that was read in on line 56; - **lines 64 + 65**: The memory for this irrep is freed. This is why I want to move away from talking about data at all in the comment string, `buf4_init` is not responsible for initializing the ""data"" you are talking about. That is by *design* so that operations can be performed over the tensors in chunks like I have outlined in the part above. The buffer holds the information necessary to get that data, *when it is explicitly told to*. . I am sorry for not being clear, but this stuff is very easy to get lost in. I meant that trying to access tensor elements directly after calling `buf4_init`. Getting back to the subject of this PR: . 1. Lets leave the comments in `file4_init` alone, since the `buf4/file2_init` functions are the ones being used externally, `file4_init`s are usually only found w/in DPD itself as far as I know.. ; 2. In `buf4_init()` and `file2_init()` We can put note/warning separate from the description of `label`, something to the tune of ; > Make sure that you use the correct `label` and `inputfile` if you *intend* to read from or write to an existing quantity on disk. If you *intend* to populate a new quantity on disk, ensure that the `label` is not already used in `inputfile`. PSIO::tocprint(int filenum) can be used to display the current list of labels in use in the outputfile. . BTW: That last hint is particularly useful for debugging I/O related erro",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/550#issuecomment-267512911
https://github.com/psi4/psi4/pull/550#issuecomment-267512911:439,Performance,perform,performed,439,"The lines you highlighted are completely valid since within [`dirprod`](https://github.com/psi4/psi4/blob/9618f2716c4ff16a6c48276bcd8e4b96adc29fec/psi4/src/psi4/libdpd/buf4_dirprd.cc#L55) for example:; - **lines 55+56**: memory is allocated for the elements of each tensor (one irrep at a time) , ; - **lines 57+58**: The elements are read from the file and used to populate the memory we just allocated ; - ** line 60**: the operation is performed for the block (irrep) we are working with.; - **line 63**: The modified elements are written back to disk, replacing the data that was read in on line 56; - **lines 64 + 65**: The memory for this irrep is freed. This is why I want to move away from talking about data at all in the comment string, `buf4_init` is not responsible for initializing the ""data"" you are talking about. That is by *design* so that operations can be performed over the tensors in chunks like I have outlined in the part above. The buffer holds the information necessary to get that data, *when it is explicitly told to*. . I am sorry for not being clear, but this stuff is very easy to get lost in. I meant that trying to access tensor elements directly after calling `buf4_init`. Getting back to the subject of this PR: . 1. Lets leave the comments in `file4_init` alone, since the `buf4/file2_init` functions are the ones being used externally, `file4_init`s are usually only found w/in DPD itself as far as I know.. ; 2. In `buf4_init()` and `file2_init()` We can put note/warning separate from the description of `label`, something to the tune of ; > Make sure that you use the correct `label` and `inputfile` if you *intend* to read from or write to an existing quantity on disk. If you *intend* to populate a new quantity on disk, ensure that the `label` is not already used in `inputfile`. PSIO::tocprint(int filenum) can be used to display the current list of labels in use in the outputfile. . BTW: That last hint is particularly useful for debugging I/O related erro",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/550#issuecomment-267512911
https://github.com/psi4/psi4/pull/550#issuecomment-267512911:875,Performance,perform,performed,875,"The lines you highlighted are completely valid since within [`dirprod`](https://github.com/psi4/psi4/blob/9618f2716c4ff16a6c48276bcd8e4b96adc29fec/psi4/src/psi4/libdpd/buf4_dirprd.cc#L55) for example:; - **lines 55+56**: memory is allocated for the elements of each tensor (one irrep at a time) , ; - **lines 57+58**: The elements are read from the file and used to populate the memory we just allocated ; - ** line 60**: the operation is performed for the block (irrep) we are working with.; - **line 63**: The modified elements are written back to disk, replacing the data that was read in on line 56; - **lines 64 + 65**: The memory for this irrep is freed. This is why I want to move away from talking about data at all in the comment string, `buf4_init` is not responsible for initializing the ""data"" you are talking about. That is by *design* so that operations can be performed over the tensors in chunks like I have outlined in the part above. The buffer holds the information necessary to get that data, *when it is explicitly told to*. . I am sorry for not being clear, but this stuff is very easy to get lost in. I meant that trying to access tensor elements directly after calling `buf4_init`. Getting back to the subject of this PR: . 1. Lets leave the comments in `file4_init` alone, since the `buf4/file2_init` functions are the ones being used externally, `file4_init`s are usually only found w/in DPD itself as far as I know.. ; 2. In `buf4_init()` and `file2_init()` We can put note/warning separate from the description of `label`, something to the tune of ; > Make sure that you use the correct `label` and `inputfile` if you *intend* to read from or write to an existing quantity on disk. If you *intend* to populate a new quantity on disk, ensure that the `label` is not already used in `inputfile`. PSIO::tocprint(int filenum) can be used to display the current list of labels in use in the outputfile. . BTW: That last hint is particularly useful for debugging I/O related erro",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/550#issuecomment-267512911
https://github.com/psi4/psi4/pull/550#issuecomment-267512911:1568,Performance,tune,tune,1568,"t was read in on line 56; - **lines 64 + 65**: The memory for this irrep is freed. This is why I want to move away from talking about data at all in the comment string, `buf4_init` is not responsible for initializing the ""data"" you are talking about. That is by *design* so that operations can be performed over the tensors in chunks like I have outlined in the part above. The buffer holds the information necessary to get that data, *when it is explicitly told to*. . I am sorry for not being clear, but this stuff is very easy to get lost in. I meant that trying to access tensor elements directly after calling `buf4_init`. Getting back to the subject of this PR: . 1. Lets leave the comments in `file4_init` alone, since the `buf4/file2_init` functions are the ones being used externally, `file4_init`s are usually only found w/in DPD itself as far as I know.. ; 2. In `buf4_init()` and `file2_init()` We can put note/warning separate from the description of `label`, something to the tune of ; > Make sure that you use the correct `label` and `inputfile` if you *intend* to read from or write to an existing quantity on disk. If you *intend* to populate a new quantity on disk, ensure that the `label` is not already used in `inputfile`. PSIO::tocprint(int filenum) can be used to display the current list of labels in use in the outputfile. . BTW: That last hint is particularly useful for debugging I/O related errors. Also, If you intend … better than it will be loaded… since it indicates this may or may not be done, and it does **not** happen now. . The case where an tensor is held in core via the cache system does not need to be mentioned since it does not change any of this behavior. To go on to your question about the inputfile, label relationship. The file is one of those defined in [psifiles.h](https://github.com/psi4/psi4/blob/master/psi4/include/psi4/psifiles.h), and these macros provide an easy way to know which number file a quantity belongs in. Thinking of the file as a ",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/550#issuecomment-267512911
https://github.com/psi4/psi4/pull/550#issuecomment-267512911:2050,Performance,load,loaded,2050,"e buffer holds the information necessary to get that data, *when it is explicitly told to*. . I am sorry for not being clear, but this stuff is very easy to get lost in. I meant that trying to access tensor elements directly after calling `buf4_init`. Getting back to the subject of this PR: . 1. Lets leave the comments in `file4_init` alone, since the `buf4/file2_init` functions are the ones being used externally, `file4_init`s are usually only found w/in DPD itself as far as I know.. ; 2. In `buf4_init()` and `file2_init()` We can put note/warning separate from the description of `label`, something to the tune of ; > Make sure that you use the correct `label` and `inputfile` if you *intend* to read from or write to an existing quantity on disk. If you *intend* to populate a new quantity on disk, ensure that the `label` is not already used in `inputfile`. PSIO::tocprint(int filenum) can be used to display the current list of labels in use in the outputfile. . BTW: That last hint is particularly useful for debugging I/O related errors. Also, If you intend … better than it will be loaded… since it indicates this may or may not be done, and it does **not** happen now. . The case where an tensor is held in core via the cache system does not need to be mentioned since it does not change any of this behavior. To go on to your question about the inputfile, label relationship. The file is one of those defined in [psifiles.h](https://github.com/psi4/psi4/blob/master/psi4/include/psi4/psifiles.h), and these macros provide an easy way to know which number file a quantity belongs in. Thinking of the file as a dictionary is not so far from reality, and will serve for the purpose of explaining. The label is going to be used to lookup the offset into the file (number of bytes from the beginning) where some numbers (the elements of the tensor) are found. If writing it will replace these, if reading they used in any operations involving the buffer we are using to manage all of this.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/550#issuecomment-267512911
https://github.com/psi4/psi4/pull/550#issuecomment-267512911:2189,Performance,cache,cache,2189,"e buffer holds the information necessary to get that data, *when it is explicitly told to*. . I am sorry for not being clear, but this stuff is very easy to get lost in. I meant that trying to access tensor elements directly after calling `buf4_init`. Getting back to the subject of this PR: . 1. Lets leave the comments in `file4_init` alone, since the `buf4/file2_init` functions are the ones being used externally, `file4_init`s are usually only found w/in DPD itself as far as I know.. ; 2. In `buf4_init()` and `file2_init()` We can put note/warning separate from the description of `label`, something to the tune of ; > Make sure that you use the correct `label` and `inputfile` if you *intend* to read from or write to an existing quantity on disk. If you *intend* to populate a new quantity on disk, ensure that the `label` is not already used in `inputfile`. PSIO::tocprint(int filenum) can be used to display the current list of labels in use in the outputfile. . BTW: That last hint is particularly useful for debugging I/O related errors. Also, If you intend … better than it will be loaded… since it indicates this may or may not be done, and it does **not** happen now. . The case where an tensor is held in core via the cache system does not need to be mentioned since it does not change any of this behavior. To go on to your question about the inputfile, label relationship. The file is one of those defined in [psifiles.h](https://github.com/psi4/psi4/blob/master/psi4/include/psi4/psifiles.h), and these macros provide an easy way to know which number file a quantity belongs in. Thinking of the file as a dictionary is not so far from reality, and will serve for the purpose of explaining. The label is going to be used to lookup the offset into the file (number of bytes from the beginning) where some numbers (the elements of the tensor) are found. If writing it will replace these, if reading they used in any operations involving the buffer we are using to manage all of this.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/550#issuecomment-267512911
https://github.com/psi4/psi4/pull/550#issuecomment-267512911:1147,Security,access,access,1147,"dpd/buf4_dirprd.cc#L55) for example:; - **lines 55+56**: memory is allocated for the elements of each tensor (one irrep at a time) , ; - **lines 57+58**: The elements are read from the file and used to populate the memory we just allocated ; - ** line 60**: the operation is performed for the block (irrep) we are working with.; - **line 63**: The modified elements are written back to disk, replacing the data that was read in on line 56; - **lines 64 + 65**: The memory for this irrep is freed. This is why I want to move away from talking about data at all in the comment string, `buf4_init` is not responsible for initializing the ""data"" you are talking about. That is by *design* so that operations can be performed over the tensors in chunks like I have outlined in the part above. The buffer holds the information necessary to get that data, *when it is explicitly told to*. . I am sorry for not being clear, but this stuff is very easy to get lost in. I meant that trying to access tensor elements directly after calling `buf4_init`. Getting back to the subject of this PR: . 1. Lets leave the comments in `file4_init` alone, since the `buf4/file2_init` functions are the ones being used externally, `file4_init`s are usually only found w/in DPD itself as far as I know.. ; 2. In `buf4_init()` and `file2_init()` We can put note/warning separate from the description of `label`, something to the tune of ; > Make sure that you use the correct `label` and `inputfile` if you *intend* to read from or write to an existing quantity on disk. If you *intend* to populate a new quantity on disk, ensure that the `label` is not already used in `inputfile`. PSIO::tocprint(int filenum) can be used to display the current list of labels in use in the outputfile. . BTW: That last hint is particularly useful for debugging I/O related errors. Also, If you intend … better than it will be loaded… since it indicates this may or may not be done, and it does **not** happen now. . The case where an tensor",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/550#issuecomment-267512911
https://github.com/psi4/psi4/pull/550#issuecomment-267512911:1073,Usability,clear,clear,1073,"b.com/psi4/psi4/blob/9618f2716c4ff16a6c48276bcd8e4b96adc29fec/psi4/src/psi4/libdpd/buf4_dirprd.cc#L55) for example:; - **lines 55+56**: memory is allocated for the elements of each tensor (one irrep at a time) , ; - **lines 57+58**: The elements are read from the file and used to populate the memory we just allocated ; - ** line 60**: the operation is performed for the block (irrep) we are working with.; - **line 63**: The modified elements are written back to disk, replacing the data that was read in on line 56; - **lines 64 + 65**: The memory for this irrep is freed. This is why I want to move away from talking about data at all in the comment string, `buf4_init` is not responsible for initializing the ""data"" you are talking about. That is by *design* so that operations can be performed over the tensors in chunks like I have outlined in the part above. The buffer holds the information necessary to get that data, *when it is explicitly told to*. . I am sorry for not being clear, but this stuff is very easy to get lost in. I meant that trying to access tensor elements directly after calling `buf4_init`. Getting back to the subject of this PR: . 1. Lets leave the comments in `file4_init` alone, since the `buf4/file2_init` functions are the ones being used externally, `file4_init`s are usually only found w/in DPD itself as far as I know.. ; 2. In `buf4_init()` and `file2_init()` We can put note/warning separate from the description of `label`, something to the tune of ; > Make sure that you use the correct `label` and `inputfile` if you *intend* to read from or write to an existing quantity on disk. If you *intend* to populate a new quantity on disk, ensure that the `label` is not already used in `inputfile`. PSIO::tocprint(int filenum) can be used to display the current list of labels in use in the outputfile. . BTW: That last hint is particularly useful for debugging I/O related errors. Also, If you intend … better than it will be loaded… since it indicates this may",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/550#issuecomment-267512911
https://github.com/psi4/psi4/pull/550#issuecomment-272717731:24,Deployability,update,updated,24,"Since this has not been updated I added the clarification to the comments and opened a new PR #573 , this will be closed. . Thanks for bringing this up @matt-chan. If you have any questions about libdpd or the rest of psi4, I'm always watching our [forums](http://forum.psicode.org/) and would be happy to help!",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/550#issuecomment-272717731
https://github.com/psi4/psi4/issues/552#issuecomment-267762083:418,Availability,error,error,418,"A simple hack around this problem is to preload libkml_rt.so. If you are; using bash,; export LD_PRELOAD = libmkl_rt.so should fix it. The problem comes due to; conflict between; the mkl routines with which psi4 was installed with the numpy's mkl; routines. On Sat, Dec 17, 2016 at 6:57 AM, Ugur Bozkaya <notifications@github.com>; wrote:. > I have compiled psi4 on Linux (Centos) then I got the following run time; > error; >; > ""Intel MKL FATAL ERROR: Cannot load libmkl_avx2.so or libmkl_def.so.""; >; > I have already sourced MKL and intel compilers as usual, with the; > following lines; >; > ""source /opt/intel/parallel_studio_xe_2016.3.067/compilers_and_; > libraries_2016/linux/bin/compilervars.sh intel64; > source /opt/intel/parallel_studio_xe_2016.3.067/compilers_and_; > libraries_2016/linux/mkl/bin/mklvars.sh intel64""; >; > In old versions of psi4 I never encounter such a problem with the same; > intel package.; >; > Thanks,; >; > @loriab <https://github.com/loriab> @dgasmith; > <https://github.com/dgasmith>; >; > —; > You are receiving this because you are subscribed to this thread.; > Reply to this email directly, view it on GitHub; > <https://github.com/psi4/psi4/issues/552>, or mute the thread; > <https://github.com/notifications/unsubscribe-auth/AFIK8BfN0TXGNudgDdYo90E43zTWgjgcks5rI849gaJpZM4LP3p6>; > .; >",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/552#issuecomment-267762083
https://github.com/psi4/psi4/issues/552#issuecomment-267762083:447,Availability,ERROR,ERROR,447,"A simple hack around this problem is to preload libkml_rt.so. If you are; using bash,; export LD_PRELOAD = libmkl_rt.so should fix it. The problem comes due to; conflict between; the mkl routines with which psi4 was installed with the numpy's mkl; routines. On Sat, Dec 17, 2016 at 6:57 AM, Ugur Bozkaya <notifications@github.com>; wrote:. > I have compiled psi4 on Linux (Centos) then I got the following run time; > error; >; > ""Intel MKL FATAL ERROR: Cannot load libmkl_avx2.so or libmkl_def.so.""; >; > I have already sourced MKL and intel compilers as usual, with the; > following lines; >; > ""source /opt/intel/parallel_studio_xe_2016.3.067/compilers_and_; > libraries_2016/linux/bin/compilervars.sh intel64; > source /opt/intel/parallel_studio_xe_2016.3.067/compilers_and_; > libraries_2016/linux/mkl/bin/mklvars.sh intel64""; >; > In old versions of psi4 I never encounter such a problem with the same; > intel package.; >; > Thanks,; >; > @loriab <https://github.com/loriab> @dgasmith; > <https://github.com/dgasmith>; >; > —; > You are receiving this because you are subscribed to this thread.; > Reply to this email directly, view it on GitHub; > <https://github.com/psi4/psi4/issues/552>, or mute the thread; > <https://github.com/notifications/unsubscribe-auth/AFIK8BfN0TXGNudgDdYo90E43zTWgjgcks5rI849gaJpZM4LP3p6>; > .; >",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/552#issuecomment-267762083
https://github.com/psi4/psi4/issues/552#issuecomment-267762083:216,Deployability,install,installed,216,"A simple hack around this problem is to preload libkml_rt.so. If you are; using bash,; export LD_PRELOAD = libmkl_rt.so should fix it. The problem comes due to; conflict between; the mkl routines with which psi4 was installed with the numpy's mkl; routines. On Sat, Dec 17, 2016 at 6:57 AM, Ugur Bozkaya <notifications@github.com>; wrote:. > I have compiled psi4 on Linux (Centos) then I got the following run time; > error; >; > ""Intel MKL FATAL ERROR: Cannot load libmkl_avx2.so or libmkl_def.so.""; >; > I have already sourced MKL and intel compilers as usual, with the; > following lines; >; > ""source /opt/intel/parallel_studio_xe_2016.3.067/compilers_and_; > libraries_2016/linux/bin/compilervars.sh intel64; > source /opt/intel/parallel_studio_xe_2016.3.067/compilers_and_; > libraries_2016/linux/mkl/bin/mklvars.sh intel64""; >; > In old versions of psi4 I never encounter such a problem with the same; > intel package.; >; > Thanks,; >; > @loriab <https://github.com/loriab> @dgasmith; > <https://github.com/dgasmith>; >; > —; > You are receiving this because you are subscribed to this thread.; > Reply to this email directly, view it on GitHub; > <https://github.com/psi4/psi4/issues/552>, or mute the thread; > <https://github.com/notifications/unsubscribe-auth/AFIK8BfN0TXGNudgDdYo90E43zTWgjgcks5rI849gaJpZM4LP3p6>; > .; >",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/552#issuecomment-267762083
https://github.com/psi4/psi4/issues/552#issuecomment-267762083:187,Integrability,rout,routines,187,"A simple hack around this problem is to preload libkml_rt.so. If you are; using bash,; export LD_PRELOAD = libmkl_rt.so should fix it. The problem comes due to; conflict between; the mkl routines with which psi4 was installed with the numpy's mkl; routines. On Sat, Dec 17, 2016 at 6:57 AM, Ugur Bozkaya <notifications@github.com>; wrote:. > I have compiled psi4 on Linux (Centos) then I got the following run time; > error; >; > ""Intel MKL FATAL ERROR: Cannot load libmkl_avx2.so or libmkl_def.so.""; >; > I have already sourced MKL and intel compilers as usual, with the; > following lines; >; > ""source /opt/intel/parallel_studio_xe_2016.3.067/compilers_and_; > libraries_2016/linux/bin/compilervars.sh intel64; > source /opt/intel/parallel_studio_xe_2016.3.067/compilers_and_; > libraries_2016/linux/mkl/bin/mklvars.sh intel64""; >; > In old versions of psi4 I never encounter such a problem with the same; > intel package.; >; > Thanks,; >; > @loriab <https://github.com/loriab> @dgasmith; > <https://github.com/dgasmith>; >; > —; > You are receiving this because you are subscribed to this thread.; > Reply to this email directly, view it on GitHub; > <https://github.com/psi4/psi4/issues/552>, or mute the thread; > <https://github.com/notifications/unsubscribe-auth/AFIK8BfN0TXGNudgDdYo90E43zTWgjgcks5rI849gaJpZM4LP3p6>; > .; >",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/552#issuecomment-267762083
https://github.com/psi4/psi4/issues/552#issuecomment-267762083:248,Integrability,rout,routines,248,"A simple hack around this problem is to preload libkml_rt.so. If you are; using bash,; export LD_PRELOAD = libmkl_rt.so should fix it. The problem comes due to; conflict between; the mkl routines with which psi4 was installed with the numpy's mkl; routines. On Sat, Dec 17, 2016 at 6:57 AM, Ugur Bozkaya <notifications@github.com>; wrote:. > I have compiled psi4 on Linux (Centos) then I got the following run time; > error; >; > ""Intel MKL FATAL ERROR: Cannot load libmkl_avx2.so or libmkl_def.so.""; >; > I have already sourced MKL and intel compilers as usual, with the; > following lines; >; > ""source /opt/intel/parallel_studio_xe_2016.3.067/compilers_and_; > libraries_2016/linux/bin/compilervars.sh intel64; > source /opt/intel/parallel_studio_xe_2016.3.067/compilers_and_; > libraries_2016/linux/mkl/bin/mklvars.sh intel64""; >; > In old versions of psi4 I never encounter such a problem with the same; > intel package.; >; > Thanks,; >; > @loriab <https://github.com/loriab> @dgasmith; > <https://github.com/dgasmith>; >; > —; > You are receiving this because you are subscribed to this thread.; > Reply to this email directly, view it on GitHub; > <https://github.com/psi4/psi4/issues/552>, or mute the thread; > <https://github.com/notifications/unsubscribe-auth/AFIK8BfN0TXGNudgDdYo90E43zTWgjgcks5rI849gaJpZM4LP3p6>; > .; >",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/552#issuecomment-267762083
https://github.com/psi4/psi4/issues/552#issuecomment-267762083:461,Performance,load,load,461,"A simple hack around this problem is to preload libkml_rt.so. If you are; using bash,; export LD_PRELOAD = libmkl_rt.so should fix it. The problem comes due to; conflict between; the mkl routines with which psi4 was installed with the numpy's mkl; routines. On Sat, Dec 17, 2016 at 6:57 AM, Ugur Bozkaya <notifications@github.com>; wrote:. > I have compiled psi4 on Linux (Centos) then I got the following run time; > error; >; > ""Intel MKL FATAL ERROR: Cannot load libmkl_avx2.so or libmkl_def.so.""; >; > I have already sourced MKL and intel compilers as usual, with the; > following lines; >; > ""source /opt/intel/parallel_studio_xe_2016.3.067/compilers_and_; > libraries_2016/linux/bin/compilervars.sh intel64; > source /opt/intel/parallel_studio_xe_2016.3.067/compilers_and_; > libraries_2016/linux/mkl/bin/mklvars.sh intel64""; >; > In old versions of psi4 I never encounter such a problem with the same; > intel package.; >; > Thanks,; >; > @loriab <https://github.com/loriab> @dgasmith; > <https://github.com/dgasmith>; >; > —; > You are receiving this because you are subscribed to this thread.; > Reply to this email directly, view it on GitHub; > <https://github.com/psi4/psi4/issues/552>, or mute the thread; > <https://github.com/notifications/unsubscribe-auth/AFIK8BfN0TXGNudgDdYo90E43zTWgjgcks5rI849gaJpZM4LP3p6>; > .; >",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/552#issuecomment-267762083
https://github.com/psi4/psi4/issues/552#issuecomment-267762083:2,Usability,simpl,simple,2,"A simple hack around this problem is to preload libkml_rt.so. If you are; using bash,; export LD_PRELOAD = libmkl_rt.so should fix it. The problem comes due to; conflict between; the mkl routines with which psi4 was installed with the numpy's mkl; routines. On Sat, Dec 17, 2016 at 6:57 AM, Ugur Bozkaya <notifications@github.com>; wrote:. > I have compiled psi4 on Linux (Centos) then I got the following run time; > error; >; > ""Intel MKL FATAL ERROR: Cannot load libmkl_avx2.so or libmkl_def.so.""; >; > I have already sourced MKL and intel compilers as usual, with the; > following lines; >; > ""source /opt/intel/parallel_studio_xe_2016.3.067/compilers_and_; > libraries_2016/linux/bin/compilervars.sh intel64; > source /opt/intel/parallel_studio_xe_2016.3.067/compilers_and_; > libraries_2016/linux/mkl/bin/mklvars.sh intel64""; >; > In old versions of psi4 I never encounter such a problem with the same; > intel package.; >; > Thanks,; >; > @loriab <https://github.com/loriab> @dgasmith; > <https://github.com/dgasmith>; >; > —; > You are receiving this because you are subscribed to this thread.; > Reply to this email directly, view it on GitHub; > <https://github.com/psi4/psi4/issues/552>, or mute the thread; > <https://github.com/notifications/unsubscribe-auth/AFIK8BfN0TXGNudgDdYo90E43zTWgjgcks5rI849gaJpZM4LP3p6>; > .; >",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/552#issuecomment-267762083
https://github.com/psi4/psi4/pull/553#issuecomment-267800015:18,Deployability,patch,patching,18,"Great, thanks for patching this up!",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/553#issuecomment-267800015
https://github.com/psi4/psi4/issues/556#issuecomment-271011656:281,Energy Efficiency,energy,energy,281,"Hi Susi,. Yes, SCF will always complete at least one iteration. This is mostly due to the fact that `guess read` may pass in junk orbitals and it is not considered a ""real"" iteration, hence `iteration 0`. You can accomplish what you want with the following:. ```; scf_e, scf_wfn = energy('bp86', return_wfn=True); energy('casscf', ref_wfn=scf_wfn); ```. Here, we completely bypass SCF and go directly into the `CASSCF` procedure with the `BP86` orbitals. This will work with any reference, including smaller CAS spaces or a MP2 natural orbital procedure.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/556#issuecomment-271011656
https://github.com/psi4/psi4/issues/556#issuecomment-271011656:314,Energy Efficiency,energy,energy,314,"Hi Susi,. Yes, SCF will always complete at least one iteration. This is mostly due to the fact that `guess read` may pass in junk orbitals and it is not considered a ""real"" iteration, hence `iteration 0`. You can accomplish what you want with the following:. ```; scf_e, scf_wfn = energy('bp86', return_wfn=True); energy('casscf', ref_wfn=scf_wfn); ```. Here, we completely bypass SCF and go directly into the `CASSCF` procedure with the `BP86` orbitals. This will work with any reference, including smaller CAS spaces or a MP2 natural orbital procedure.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/556#issuecomment-271011656
https://github.com/psi4/psi4/issues/556#issuecomment-271442227:61,Energy Efficiency,energy,energy,61,"For CI you can do:. ```; set NAT_ORBS true; cas_wfn, cas_e = energy('CASSCF', return_wfn =True). # Set new active space; energy('CASSCF', ref_wfn=True); ```. MP2 is a bit of a toss up as its difficult to get MP2 densities out of Psi4 at the moment. With the current version of Psi4, DF-MP2 Natural Orbitals are the default guess. A stop gap would be to use OMP2 guess orbitals.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/556#issuecomment-271442227
https://github.com/psi4/psi4/issues/556#issuecomment-271442227:121,Energy Efficiency,energy,energy,121,"For CI you can do:. ```; set NAT_ORBS true; cas_wfn, cas_e = energy('CASSCF', return_wfn =True). # Set new active space; energy('CASSCF', ref_wfn=True); ```. MP2 is a bit of a toss up as its difficult to get MP2 densities out of Psi4 at the moment. With the current version of Psi4, DF-MP2 Natural Orbitals are the default guess. A stop gap would be to use OMP2 guess orbitals.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/556#issuecomment-271442227
https://github.com/psi4/psi4/issues/556#issuecomment-275616670:372,Energy Efficiency,energy,energy,372,"I'm a bit puzzled by CAS. The following input; ```; molecule {; 0 1; symmetry c1; C; C 1 1.0; }. set basis cc-pVDZ; set scf_type pk; set restricted_docc [2]; set restricted_uocc [16]; set active [10]; set wfn detci; set NUM_DETS_PRINT 40000; set e_convergence 1e-10; set r_convergence 1e-10; set ci_maxiter 1000; set mcscf_maxiter 100; set nat_orbs true. cas_e, cas_wfn = energy('casscf', return_wfn=True). energy('casscf', ref_wfn=cas_wfn); ```; should do what you suggest, but when I look at the determinants output; ```; * 1 0.817064 ( 1, 1) 3AX 4AX 5AX 7AX ; * 2 -0.477071 ( 2, 2) 3AX 4AX 6AX 7AX ; * 3 -0.081234 ( 15, 15) 3AX 4AX 5AX 9AX ; * 4 -0.079478 ( 10, 10) 3AX 5AX 7AX 8AX ; * 5 0.075356 ( 3, 9) 3AX 4AB 5AA 6AA 7AX 8AB ; ```; the Aufbau determinant has a tiny weight: -5.602591646315e-03. If it's really using NOs, the Aufbau determinant should have significant weight, right?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/556#issuecomment-275616670
https://github.com/psi4/psi4/issues/556#issuecomment-275616670:407,Energy Efficiency,energy,energy,407,"I'm a bit puzzled by CAS. The following input; ```; molecule {; 0 1; symmetry c1; C; C 1 1.0; }. set basis cc-pVDZ; set scf_type pk; set restricted_docc [2]; set restricted_uocc [16]; set active [10]; set wfn detci; set NUM_DETS_PRINT 40000; set e_convergence 1e-10; set r_convergence 1e-10; set ci_maxiter 1000; set mcscf_maxiter 100; set nat_orbs true. cas_e, cas_wfn = energy('casscf', return_wfn=True). energy('casscf', ref_wfn=cas_wfn); ```; should do what you suggest, but when I look at the determinants output; ```; * 1 0.817064 ( 1, 1) 3AX 4AX 5AX 7AX ; * 2 -0.477071 ( 2, 2) 3AX 4AX 6AX 7AX ; * 3 -0.081234 ( 15, 15) 3AX 4AX 5AX 9AX ; * 4 -0.079478 ( 10, 10) 3AX 5AX 7AX 8AX ; * 5 0.075356 ( 3, 9) 3AX 4AB 5AA 6AA 7AX 8AB ; ```; the Aufbau determinant has a tiny weight: -5.602591646315e-03. If it's really using NOs, the Aufbau determinant should have significant weight, right?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/556#issuecomment-275616670
https://github.com/psi4/psi4/issues/556#issuecomment-275696618:297,Energy Efficiency,energy,energy,297,"I'm not sure why the Aufbau determinant has such a small weight, so that's; a bit of a mystery. But I'm a little surprised you would want to run this; particular procedure. If you ran a CASSCF and got its natural orbitals, and then fed those; orbitals to a CASSCF, you should get exactly the same energy, because the; natural orbitals of a CAS just rotate the active space orbitals amongst; themselves, and the CAS energy is (by definition) invariant to rotations; within the active space. I suppose you could do this if you just wanted to; see how the CI coefficients changed if you used natural orbitals as the; one-particle basis. More typical, if you had trouble converging the CASSCF, would be to run an; initial MP2 or CISD (with no frozen virtuals) and get natural orbitals out; of that, and then do a CAS with those starting orbitals. As Daniel says, we may not have a great mechanism right now to do this with; MP2 NO's (we'll have to work on that). But, if it's a small molecule,; running a CISD initially and getting NO's from that should work. Although,; again, you'd need to be sure to change the keywords ... something like this:. set restricted_uocc [0]; ci_e, ci_wfn = energy('cisd', return_wfn=True). set restricted_uocc [16]; energy('casscf', ref_wfn=ci_wfn). Regarding the original question, though, do you get the same energy out of; the 2nd CASSCF (within convergence criteria)?. On Fri, Jan 27, 2017 at 3:51 AM, Susi Lehtola <notifications@github.com>; wrote:. > I'm a bit puzzled by CAS. The following input; >; > molecule {; > 0 1; > symmetry c1; > C; > C 1 1.0; > }; >; > set basis cc-pVDZ; > set scf_type pk; > set restricted_docc [2]; > set restricted_uocc [16]; > set active [10]; > set wfn detci; > set NUM_DETS_PRINT 40000; > set e_convergence 1e-10; > set r_convergence 1e-10; > set ci_maxiter 1000; > set mcscf_maxiter 100; > set nat_orbs true; >; > cas_e, cas_wfn = energy('casscf', return_wfn=True); >; > energy('casscf', ref_wfn=cas_wfn); >; > should do what you sug",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/556#issuecomment-275696618
https://github.com/psi4/psi4/issues/556#issuecomment-275696618:415,Energy Efficiency,energy,energy,415,"I'm not sure why the Aufbau determinant has such a small weight, so that's; a bit of a mystery. But I'm a little surprised you would want to run this; particular procedure. If you ran a CASSCF and got its natural orbitals, and then fed those; orbitals to a CASSCF, you should get exactly the same energy, because the; natural orbitals of a CAS just rotate the active space orbitals amongst; themselves, and the CAS energy is (by definition) invariant to rotations; within the active space. I suppose you could do this if you just wanted to; see how the CI coefficients changed if you used natural orbitals as the; one-particle basis. More typical, if you had trouble converging the CASSCF, would be to run an; initial MP2 or CISD (with no frozen virtuals) and get natural orbitals out; of that, and then do a CAS with those starting orbitals. As Daniel says, we may not have a great mechanism right now to do this with; MP2 NO's (we'll have to work on that). But, if it's a small molecule,; running a CISD initially and getting NO's from that should work. Although,; again, you'd need to be sure to change the keywords ... something like this:. set restricted_uocc [0]; ci_e, ci_wfn = energy('cisd', return_wfn=True). set restricted_uocc [16]; energy('casscf', ref_wfn=ci_wfn). Regarding the original question, though, do you get the same energy out of; the 2nd CASSCF (within convergence criteria)?. On Fri, Jan 27, 2017 at 3:51 AM, Susi Lehtola <notifications@github.com>; wrote:. > I'm a bit puzzled by CAS. The following input; >; > molecule {; > 0 1; > symmetry c1; > C; > C 1 1.0; > }; >; > set basis cc-pVDZ; > set scf_type pk; > set restricted_docc [2]; > set restricted_uocc [16]; > set active [10]; > set wfn detci; > set NUM_DETS_PRINT 40000; > set e_convergence 1e-10; > set r_convergence 1e-10; > set ci_maxiter 1000; > set mcscf_maxiter 100; > set nat_orbs true; >; > cas_e, cas_wfn = energy('casscf', return_wfn=True); >; > energy('casscf', ref_wfn=cas_wfn); >; > should do what you sug",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/556#issuecomment-275696618
https://github.com/psi4/psi4/issues/556#issuecomment-275696618:1185,Energy Efficiency,energy,energy,1185,"ran a CASSCF and got its natural orbitals, and then fed those; orbitals to a CASSCF, you should get exactly the same energy, because the; natural orbitals of a CAS just rotate the active space orbitals amongst; themselves, and the CAS energy is (by definition) invariant to rotations; within the active space. I suppose you could do this if you just wanted to; see how the CI coefficients changed if you used natural orbitals as the; one-particle basis. More typical, if you had trouble converging the CASSCF, would be to run an; initial MP2 or CISD (with no frozen virtuals) and get natural orbitals out; of that, and then do a CAS with those starting orbitals. As Daniel says, we may not have a great mechanism right now to do this with; MP2 NO's (we'll have to work on that). But, if it's a small molecule,; running a CISD initially and getting NO's from that should work. Although,; again, you'd need to be sure to change the keywords ... something like this:. set restricted_uocc [0]; ci_e, ci_wfn = energy('cisd', return_wfn=True). set restricted_uocc [16]; energy('casscf', ref_wfn=ci_wfn). Regarding the original question, though, do you get the same energy out of; the 2nd CASSCF (within convergence criteria)?. On Fri, Jan 27, 2017 at 3:51 AM, Susi Lehtola <notifications@github.com>; wrote:. > I'm a bit puzzled by CAS. The following input; >; > molecule {; > 0 1; > symmetry c1; > C; > C 1 1.0; > }; >; > set basis cc-pVDZ; > set scf_type pk; > set restricted_docc [2]; > set restricted_uocc [16]; > set active [10]; > set wfn detci; > set NUM_DETS_PRINT 40000; > set e_convergence 1e-10; > set r_convergence 1e-10; > set ci_maxiter 1000; > set mcscf_maxiter 100; > set nat_orbs true; >; > cas_e, cas_wfn = energy('casscf', return_wfn=True); >; > energy('casscf', ref_wfn=cas_wfn); >; > should do what you suggest, but when I look at the determinants output; >; > * 1 0.817064 ( 1, 1) 3AX 4AX 5AX 7AX; > * 2 -0.477071 ( 2, 2) 3AX 4AX 6AX 7AX; > * 3 -0.081234 ( 15, 15) 3AX 4AX 5AX 9AX; > *",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/556#issuecomment-275696618
https://github.com/psi4/psi4/issues/556#issuecomment-275696618:1244,Energy Efficiency,energy,energy,1244,"tals to a CASSCF, you should get exactly the same energy, because the; natural orbitals of a CAS just rotate the active space orbitals amongst; themselves, and the CAS energy is (by definition) invariant to rotations; within the active space. I suppose you could do this if you just wanted to; see how the CI coefficients changed if you used natural orbitals as the; one-particle basis. More typical, if you had trouble converging the CASSCF, would be to run an; initial MP2 or CISD (with no frozen virtuals) and get natural orbitals out; of that, and then do a CAS with those starting orbitals. As Daniel says, we may not have a great mechanism right now to do this with; MP2 NO's (we'll have to work on that). But, if it's a small molecule,; running a CISD initially and getting NO's from that should work. Although,; again, you'd need to be sure to change the keywords ... something like this:. set restricted_uocc [0]; ci_e, ci_wfn = energy('cisd', return_wfn=True). set restricted_uocc [16]; energy('casscf', ref_wfn=ci_wfn). Regarding the original question, though, do you get the same energy out of; the 2nd CASSCF (within convergence criteria)?. On Fri, Jan 27, 2017 at 3:51 AM, Susi Lehtola <notifications@github.com>; wrote:. > I'm a bit puzzled by CAS. The following input; >; > molecule {; > 0 1; > symmetry c1; > C; > C 1 1.0; > }; >; > set basis cc-pVDZ; > set scf_type pk; > set restricted_docc [2]; > set restricted_uocc [16]; > set active [10]; > set wfn detci; > set NUM_DETS_PRINT 40000; > set e_convergence 1e-10; > set r_convergence 1e-10; > set ci_maxiter 1000; > set mcscf_maxiter 100; > set nat_orbs true; >; > cas_e, cas_wfn = energy('casscf', return_wfn=True); >; > energy('casscf', ref_wfn=cas_wfn); >; > should do what you suggest, but when I look at the determinants output; >; > * 1 0.817064 ( 1, 1) 3AX 4AX 5AX 7AX; > * 2 -0.477071 ( 2, 2) 3AX 4AX 6AX 7AX; > * 3 -0.081234 ( 15, 15) 3AX 4AX 5AX 9AX; > * 4 -0.079478 ( 10, 10) 3AX 5AX 7AX 8AX; > * 5 0.075356 ( 3, 9) 3AX",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/556#issuecomment-275696618
https://github.com/psi4/psi4/issues/556#issuecomment-275696618:1339,Energy Efficiency,energy,energy,1339,"a CAS just rotate the active space orbitals amongst; themselves, and the CAS energy is (by definition) invariant to rotations; within the active space. I suppose you could do this if you just wanted to; see how the CI coefficients changed if you used natural orbitals as the; one-particle basis. More typical, if you had trouble converging the CASSCF, would be to run an; initial MP2 or CISD (with no frozen virtuals) and get natural orbitals out; of that, and then do a CAS with those starting orbitals. As Daniel says, we may not have a great mechanism right now to do this with; MP2 NO's (we'll have to work on that). But, if it's a small molecule,; running a CISD initially and getting NO's from that should work. Although,; again, you'd need to be sure to change the keywords ... something like this:. set restricted_uocc [0]; ci_e, ci_wfn = energy('cisd', return_wfn=True). set restricted_uocc [16]; energy('casscf', ref_wfn=ci_wfn). Regarding the original question, though, do you get the same energy out of; the 2nd CASSCF (within convergence criteria)?. On Fri, Jan 27, 2017 at 3:51 AM, Susi Lehtola <notifications@github.com>; wrote:. > I'm a bit puzzled by CAS. The following input; >; > molecule {; > 0 1; > symmetry c1; > C; > C 1 1.0; > }; >; > set basis cc-pVDZ; > set scf_type pk; > set restricted_docc [2]; > set restricted_uocc [16]; > set active [10]; > set wfn detci; > set NUM_DETS_PRINT 40000; > set e_convergence 1e-10; > set r_convergence 1e-10; > set ci_maxiter 1000; > set mcscf_maxiter 100; > set nat_orbs true; >; > cas_e, cas_wfn = energy('casscf', return_wfn=True); >; > energy('casscf', ref_wfn=cas_wfn); >; > should do what you suggest, but when I look at the determinants output; >; > * 1 0.817064 ( 1, 1) 3AX 4AX 5AX 7AX; > * 2 -0.477071 ( 2, 2) 3AX 4AX 6AX 7AX; > * 3 -0.081234 ( 15, 15) 3AX 4AX 5AX 9AX; > * 4 -0.079478 ( 10, 10) 3AX 5AX 7AX 8AX; > * 5 0.075356 ( 3, 9) 3AX 4AB 5AA 6AA 7AX 8AB; >; > the Aufbau determinant has a tiny weight: -5.602591646315e-03. If",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/556#issuecomment-275696618
https://github.com/psi4/psi4/issues/556#issuecomment-275696618:1899,Energy Efficiency,energy,energy,1899,"atural orbitals out; of that, and then do a CAS with those starting orbitals. As Daniel says, we may not have a great mechanism right now to do this with; MP2 NO's (we'll have to work on that). But, if it's a small molecule,; running a CISD initially and getting NO's from that should work. Although,; again, you'd need to be sure to change the keywords ... something like this:. set restricted_uocc [0]; ci_e, ci_wfn = energy('cisd', return_wfn=True). set restricted_uocc [16]; energy('casscf', ref_wfn=ci_wfn). Regarding the original question, though, do you get the same energy out of; the 2nd CASSCF (within convergence criteria)?. On Fri, Jan 27, 2017 at 3:51 AM, Susi Lehtola <notifications@github.com>; wrote:. > I'm a bit puzzled by CAS. The following input; >; > molecule {; > 0 1; > symmetry c1; > C; > C 1 1.0; > }; >; > set basis cc-pVDZ; > set scf_type pk; > set restricted_docc [2]; > set restricted_uocc [16]; > set active [10]; > set wfn detci; > set NUM_DETS_PRINT 40000; > set e_convergence 1e-10; > set r_convergence 1e-10; > set ci_maxiter 1000; > set mcscf_maxiter 100; > set nat_orbs true; >; > cas_e, cas_wfn = energy('casscf', return_wfn=True); >; > energy('casscf', ref_wfn=cas_wfn); >; > should do what you suggest, but when I look at the determinants output; >; > * 1 0.817064 ( 1, 1) 3AX 4AX 5AX 7AX; > * 2 -0.477071 ( 2, 2) 3AX 4AX 6AX 7AX; > * 3 -0.081234 ( 15, 15) 3AX 4AX 5AX 9AX; > * 4 -0.079478 ( 10, 10) 3AX 5AX 7AX 8AX; > * 5 0.075356 ( 3, 9) 3AX 4AB 5AA 6AA 7AX 8AB; >; > the Aufbau determinant has a tiny weight: -5.602591646315e-03. If it's; > really using NOs, the Aufbau determinant should have significant weight,; > right?; >; > —; > You are receiving this because you are subscribed to this thread.; > Reply to this email directly, view it on GitHub; > <https://github.com/psi4/psi4/issues/556#issuecomment-275616670>, or mute; > the thread; > <https://github.com/notifications/unsubscribe-auth/AC9QdrXQXwFMnyc3v9cHAYN_Mscy_dnmks5rWbAGgaJpZM4LdHsQ>; > .; >",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/556#issuecomment-275696618
https://github.com/psi4/psi4/issues/556#issuecomment-275696618:1939,Energy Efficiency,energy,energy,1939,"atural orbitals out; of that, and then do a CAS with those starting orbitals. As Daniel says, we may not have a great mechanism right now to do this with; MP2 NO's (we'll have to work on that). But, if it's a small molecule,; running a CISD initially and getting NO's from that should work. Although,; again, you'd need to be sure to change the keywords ... something like this:. set restricted_uocc [0]; ci_e, ci_wfn = energy('cisd', return_wfn=True). set restricted_uocc [16]; energy('casscf', ref_wfn=ci_wfn). Regarding the original question, though, do you get the same energy out of; the 2nd CASSCF (within convergence criteria)?. On Fri, Jan 27, 2017 at 3:51 AM, Susi Lehtola <notifications@github.com>; wrote:. > I'm a bit puzzled by CAS. The following input; >; > molecule {; > 0 1; > symmetry c1; > C; > C 1 1.0; > }; >; > set basis cc-pVDZ; > set scf_type pk; > set restricted_docc [2]; > set restricted_uocc [16]; > set active [10]; > set wfn detci; > set NUM_DETS_PRINT 40000; > set e_convergence 1e-10; > set r_convergence 1e-10; > set ci_maxiter 1000; > set mcscf_maxiter 100; > set nat_orbs true; >; > cas_e, cas_wfn = energy('casscf', return_wfn=True); >; > energy('casscf', ref_wfn=cas_wfn); >; > should do what you suggest, but when I look at the determinants output; >; > * 1 0.817064 ( 1, 1) 3AX 4AX 5AX 7AX; > * 2 -0.477071 ( 2, 2) 3AX 4AX 6AX 7AX; > * 3 -0.081234 ( 15, 15) 3AX 4AX 5AX 9AX; > * 4 -0.079478 ( 10, 10) 3AX 5AX 7AX 8AX; > * 5 0.075356 ( 3, 9) 3AX 4AB 5AA 6AA 7AX 8AB; >; > the Aufbau determinant has a tiny weight: -5.602591646315e-03. If it's; > really using NOs, the Aufbau determinant should have significant weight,; > right?; >; > —; > You are receiving this because you are subscribed to this thread.; > Reply to this email directly, view it on GitHub; > <https://github.com/psi4/psi4/issues/556#issuecomment-275616670>, or mute; > the thread; > <https://github.com/notifications/unsubscribe-auth/AC9QdrXQXwFMnyc3v9cHAYN_Mscy_dnmks5rWbAGgaJpZM4LdHsQ>; > .; >",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/556#issuecomment-275696618
https://github.com/psi4/psi4/pull/557#issuecomment-271014184:169,Deployability,patch,patch,169,"Kinda surprised they went with PyPy over C IR support since the latter is much more useful for JITs in general. This could break a few Python-side GC things, but we can patch those up if they occur. Still, will be great to have a stable PyBind11 version.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/557#issuecomment-271014184
https://github.com/psi4/psi4/issues/558#issuecomment-271454361:21,Availability,error,error,21,"This is a pretty odd error. Examining the Hamiltonian built by RSP is fine; however, if you diagonalize it with Mac Accelerate I get your `RSP` result while using MKL DSYEV I get the `SEM` result. The eigenvalues are fine, just looks like something is going wrong with the eigenvectors.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/558#issuecomment-271454361
https://github.com/psi4/psi4/issues/558#issuecomment-271923039:28,Testability,test,tests,28,Looks like I was getting my tests confused when running your issues. The eigenvectors are indeed wrong. Fixed in #566. As a note the diagonalization is a bit unstable and you will get slightly different results between programs.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/558#issuecomment-271923039
https://github.com/psi4/psi4/issues/559#issuecomment-271455005:221,Availability,error,error,221,"Also fails with `set diag_method mitrushenkov`. Not completely surprised as the `olsen` and `mitrushenkov` methods have not been tested since this was integrated into Psi4 from Psi3 as far as I know. Its a bit of strange error in debugging as it looks like the H0 block was not initialized even though it was. Ill look into when I have time, but thats not likely to be soon. Do you really want something besides Davidson iterations or is this just a report that it doesn't work?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/559#issuecomment-271455005
https://github.com/psi4/psi4/issues/559#issuecomment-271455005:151,Deployability,integrat,integrated,151,"Also fails with `set diag_method mitrushenkov`. Not completely surprised as the `olsen` and `mitrushenkov` methods have not been tested since this was integrated into Psi4 from Psi3 as far as I know. Its a bit of strange error in debugging as it looks like the H0 block was not initialized even though it was. Ill look into when I have time, but thats not likely to be soon. Do you really want something besides Davidson iterations or is this just a report that it doesn't work?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/559#issuecomment-271455005
https://github.com/psi4/psi4/issues/559#issuecomment-271455005:151,Integrability,integrat,integrated,151,"Also fails with `set diag_method mitrushenkov`. Not completely surprised as the `olsen` and `mitrushenkov` methods have not been tested since this was integrated into Psi4 from Psi3 as far as I know. Its a bit of strange error in debugging as it looks like the H0 block was not initialized even though it was. Ill look into when I have time, but thats not likely to be soon. Do you really want something besides Davidson iterations or is this just a report that it doesn't work?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/559#issuecomment-271455005
https://github.com/psi4/psi4/issues/559#issuecomment-271455005:129,Testability,test,tested,129,"Also fails with `set diag_method mitrushenkov`. Not completely surprised as the `olsen` and `mitrushenkov` methods have not been tested since this was integrated into Psi4 from Psi3 as far as I know. Its a bit of strange error in debugging as it looks like the H0 block was not initialized even though it was. Ill look into when I have time, but thats not likely to be soon. Do you really want something besides Davidson iterations or is this just a report that it doesn't work?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/559#issuecomment-271455005
https://github.com/psi4/psi4/issues/561#issuecomment-271457794:164,Deployability,patch,patch,164,"Sure, we get a NaN because an occupied and a virtual eigenvalue have the exact same energy. Its an unphysical reference that we didn't anticipate. We probably wont patch this as its an extreme edge case.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/561#issuecomment-271457794
https://github.com/psi4/psi4/issues/561#issuecomment-271457794:84,Energy Efficiency,energy,energy,84,"Sure, we get a NaN because an occupied and a virtual eigenvalue have the exact same energy. Its an unphysical reference that we didn't anticipate. We probably wont patch this as its an extreme edge case.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/561#issuecomment-271457794
https://github.com/psi4/psi4/issues/561#issuecomment-271910877:443,Modifiability,coupling,coupling,443,"Yea, I realized that `HD_KAVE` only delays this result to about 50 angstroms, so I had removed that suggestion. The FCI Hamiltonian of your supplied geometry is diagonal so your eigenvectors are unit vectors (hence the `1`'s). The warnings are, in perhaps an obscure way, telling you that the wrong symmetry is found in the H0 block eigenvectors. The overlap between the Gaussian basis functions is a hard zero after about 45 angstroms, so no coupling can occur. For what its worth MOLPRO returns the same result.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/561#issuecomment-271910877
https://github.com/psi4/psi4/issues/562#issuecomment-271298945:42,Integrability,depend,dependency,42,"I do like HDF5, but it would add an extra dependency to Psi4 for something relatively simple. We use NumPy to write arrays [here](https://github.com/psi4/psi4/blob/master/psi4/driver/p4util/numpy_helper.py#L445), it should be noted the resulting data is in binary form and readable by anyone. Our Wavefunctions are written as `npz` objects for the SCF `GUESS READ` machinery [here](https://github.com/psi4/psi4/blob/master/psi4/driver/procedures/proc.py#L1340) using the above machinery. A JSON write would be equivalent and probably much more general. The above snippet is specific to Psi4's SCF Wavefunction, but I have been wanting to generalize this function for some time so that a user could read/write a general Wavefunction on command. We would be happy to work on the underlying data structures to make them more general.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/562#issuecomment-271298945
https://github.com/psi4/psi4/issues/562#issuecomment-271298945:86,Usability,simpl,simple,86,"I do like HDF5, but it would add an extra dependency to Psi4 for something relatively simple. We use NumPy to write arrays [here](https://github.com/psi4/psi4/blob/master/psi4/driver/p4util/numpy_helper.py#L445), it should be noted the resulting data is in binary form and readable by anyone. Our Wavefunctions are written as `npz` objects for the SCF `GUESS READ` machinery [here](https://github.com/psi4/psi4/blob/master/psi4/driver/procedures/proc.py#L1340) using the above machinery. A JSON write would be equivalent and probably much more general. The above snippet is specific to Psi4's SCF Wavefunction, but I have been wanting to generalize this function for some time so that a user could read/write a general Wavefunction on command. We would be happy to work on the underlying data structures to make them more general.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/562#issuecomment-271298945
https://github.com/psi4/psi4/pull/563#issuecomment-272895474:107,Modifiability,variab,variables,107,"1. Intel says so. No idea why, I am just following directions.; 2. I believe something was still using the variables. Either way this; mimics the behavior of the original script.; 3. That behavior makes no sense with modern Psi4, i.e. it won't work why; have it?; 4. Again bypass it and do what? Unless you plan on going back to an; executable this is how to link to MKL.; 5. There's lapack problems otherwise.; 6. Thanks, I usually don't put the end stuff, but I was following; established syntax in the file.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/563#issuecomment-272895474
https://github.com/psi4/psi4/pull/563#issuecomment-274514729:72,Testability,test,test,72,@psi4/admins this is ready to go barring any requested changes (failing test case is a time out).,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/563#issuecomment-274514729
https://github.com/psi4/psi4/pull/563#issuecomment-274517219:389,Modifiability,plugin,plugin,389,"Thanks. It honestly _isn't_ my intention to scupper all your PRs, @ryanmrichard. It's just that the `mkl_rt.so` or nothing approach doesn't work with the binary build (and that libefp ref is very far behind). I've been working on a replacement scheme that gets the valuable mkl_rt for most and works with libefp and CheMPS2, too. If you wanted to do a separate or modified PR with all the plugin stuff, that'd be great. Also, it looks like the pybind 2.0 commit is still caught in this PR, so may need a rebase. Sorry for the trouble.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/563#issuecomment-274517219
https://github.com/psi4/psi4/pull/563#issuecomment-274523303:203,Modifiability,plugin,plugins,203,So if I'm understanding you correctly basically the only thing you want from this PR is the `CMakeLists.txt` factorization and the (then) one-line change of ensuring `CMAKE_PREFIX_PATH` is passed to the plugins?,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/563#issuecomment-274523303
https://github.com/psi4/psi4/issues/565#issuecomment-271911191:49,Modifiability,plugin,plugins,49,"Please supply the git hash of your Psi4 version, plugins have changed a lot lately.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/565#issuecomment-271911191
https://github.com/psi4/psi4/issues/565#issuecomment-271911191:22,Security,hash,hash,22,"Please supply the git hash of your Psi4 version, plugins have changed a lot lately.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/565#issuecomment-271911191
https://github.com/psi4/psi4/issues/565#issuecomment-271911488:73,Deployability,update,updated,73,"146fbbc437223786b7c970b50ddd2969be80d3fd.; Sorry, this should be a fully updated psi4. Last commit was 1/6/2017.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/565#issuecomment-271911488
https://github.com/psi4/psi4/issues/565#issuecomment-271921477:87,Deployability,install,installed,87,are all the test plugins building ok upon first compilation? What does your (staged or installed) [plugin cache](https://github.com/psi4/psi4/blob/master/psi4/psi4PluginCache.cmake.in) look like?,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/565#issuecomment-271921477
https://github.com/psi4/psi4/issues/565#issuecomment-271921477:17,Modifiability,plugin,plugins,17,are all the test plugins building ok upon first compilation? What does your (staged or installed) [plugin cache](https://github.com/psi4/psi4/blob/master/psi4/psi4PluginCache.cmake.in) look like?,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/565#issuecomment-271921477
https://github.com/psi4/psi4/issues/565#issuecomment-271921477:99,Modifiability,plugin,plugin,99,are all the test plugins building ok upon first compilation? What does your (staged or installed) [plugin cache](https://github.com/psi4/psi4/blob/master/psi4/psi4PluginCache.cmake.in) look like?,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/565#issuecomment-271921477
https://github.com/psi4/psi4/issues/565#issuecomment-271921477:106,Performance,cache,cache,106,are all the test plugins building ok upon first compilation? What does your (staged or installed) [plugin cache](https://github.com/psi4/psi4/blob/master/psi4/psi4PluginCache.cmake.in) look like?,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/565#issuecomment-271921477
https://github.com/psi4/psi4/issues/565#issuecomment-271921477:12,Testability,test,test,12,are all the test plugins building ok upon first compilation? What does your (staged or installed) [plugin cache](https://github.com/psi4/psi4/blob/master/psi4/psi4PluginCache.cmake.in) look like?,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/565#issuecomment-271921477
https://github.com/psi4/psi4/issues/565#issuecomment-271928177:21,Modifiability,plugin,plugin,21,Where can I find the plugin cache?,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/565#issuecomment-271928177
https://github.com/psi4/psi4/issues/565#issuecomment-271928177:28,Performance,cache,cache,28,Where can I find the plugin cache?,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/565#issuecomment-271928177
https://github.com/psi4/psi4/issues/565#issuecomment-271932154:21,Modifiability,plugin,plugins,21,"NVM. I found it. The plugins are not compiling. I think there is something wrong with creating cmake files for the plugins. This is the CMakeLists.txt for skeleton plugin:. set(CMAKE_C_COMPILER @C@); set(CMAKE_CXX_COMPILER @CXX@); set(CMAKE_Fortran_COMPILER @Fortran@); project(skeleton CXX); find_package(psi4 1.0 REQUIRED); ; But, my CMakeCache.txt says that it finds the correct compiler. ; Here is my plugin cache:. set(CMAKE_C_COMPILER ""/usr/bin/gcc"" CACHE STRING """"); set(CMAKE_C_FLAGS "" -march=native -fopenmp"" CACHE STRING """"); set(CMAKE_CXX_COMPILER ""/usr/bin/g++"" CACHE STRING """"); set(CMAKE_CXX_FLAGS "" -march=native -fopenmp"" CACHE STRING """"); set(CMAKE_Fortran_COMPILER """" CACHE STRING """"); set(CMAKE_Fortran_FLAGS """" CACHE STRING """"). #set(CMAKE_INSTALL_PREFIX ""/home/kannon/src/psi4_cmake/Install_Debug"" CACHE PATH """"); set(CMAKE_INSTALL_LIBDIR ""lib"" CACHE STRING """"); set(CMAKE_INSTALL_BINDIR ""bin"" CACHE STRING """"); set(CMAKE_INSTALL_DATADIR ""share"" CACHE STRING """"); set(CMAKE_INSTALL_INCLUDEDIR ""include"" CACHE STRING """"); set(PYMOD_INSTALL_LIBDIR ""/"" CACHE STRING """"). set(CMAKE_INSTALL_MESSAGE ""LAZY"" CACHE STRING """"). set(PYTHON_VERSION_MAJORMINOR ""2.7"" CACHE STRING """"); set(PYTHON_EXECUTABLE ""/usr/bin/python"" CACHE STRING """")",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/565#issuecomment-271932154
https://github.com/psi4/psi4/issues/565#issuecomment-271932154:115,Modifiability,plugin,plugins,115,"NVM. I found it. The plugins are not compiling. I think there is something wrong with creating cmake files for the plugins. This is the CMakeLists.txt for skeleton plugin:. set(CMAKE_C_COMPILER @C@); set(CMAKE_CXX_COMPILER @CXX@); set(CMAKE_Fortran_COMPILER @Fortran@); project(skeleton CXX); find_package(psi4 1.0 REQUIRED); ; But, my CMakeCache.txt says that it finds the correct compiler. ; Here is my plugin cache:. set(CMAKE_C_COMPILER ""/usr/bin/gcc"" CACHE STRING """"); set(CMAKE_C_FLAGS "" -march=native -fopenmp"" CACHE STRING """"); set(CMAKE_CXX_COMPILER ""/usr/bin/g++"" CACHE STRING """"); set(CMAKE_CXX_FLAGS "" -march=native -fopenmp"" CACHE STRING """"); set(CMAKE_Fortran_COMPILER """" CACHE STRING """"); set(CMAKE_Fortran_FLAGS """" CACHE STRING """"). #set(CMAKE_INSTALL_PREFIX ""/home/kannon/src/psi4_cmake/Install_Debug"" CACHE PATH """"); set(CMAKE_INSTALL_LIBDIR ""lib"" CACHE STRING """"); set(CMAKE_INSTALL_BINDIR ""bin"" CACHE STRING """"); set(CMAKE_INSTALL_DATADIR ""share"" CACHE STRING """"); set(CMAKE_INSTALL_INCLUDEDIR ""include"" CACHE STRING """"); set(PYMOD_INSTALL_LIBDIR ""/"" CACHE STRING """"). set(CMAKE_INSTALL_MESSAGE ""LAZY"" CACHE STRING """"). set(PYTHON_VERSION_MAJORMINOR ""2.7"" CACHE STRING """"); set(PYTHON_EXECUTABLE ""/usr/bin/python"" CACHE STRING """")",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/565#issuecomment-271932154
https://github.com/psi4/psi4/issues/565#issuecomment-271932154:164,Modifiability,plugin,plugin,164,"NVM. I found it. The plugins are not compiling. I think there is something wrong with creating cmake files for the plugins. This is the CMakeLists.txt for skeleton plugin:. set(CMAKE_C_COMPILER @C@); set(CMAKE_CXX_COMPILER @CXX@); set(CMAKE_Fortran_COMPILER @Fortran@); project(skeleton CXX); find_package(psi4 1.0 REQUIRED); ; But, my CMakeCache.txt says that it finds the correct compiler. ; Here is my plugin cache:. set(CMAKE_C_COMPILER ""/usr/bin/gcc"" CACHE STRING """"); set(CMAKE_C_FLAGS "" -march=native -fopenmp"" CACHE STRING """"); set(CMAKE_CXX_COMPILER ""/usr/bin/g++"" CACHE STRING """"); set(CMAKE_CXX_FLAGS "" -march=native -fopenmp"" CACHE STRING """"); set(CMAKE_Fortran_COMPILER """" CACHE STRING """"); set(CMAKE_Fortran_FLAGS """" CACHE STRING """"). #set(CMAKE_INSTALL_PREFIX ""/home/kannon/src/psi4_cmake/Install_Debug"" CACHE PATH """"); set(CMAKE_INSTALL_LIBDIR ""lib"" CACHE STRING """"); set(CMAKE_INSTALL_BINDIR ""bin"" CACHE STRING """"); set(CMAKE_INSTALL_DATADIR ""share"" CACHE STRING """"); set(CMAKE_INSTALL_INCLUDEDIR ""include"" CACHE STRING """"); set(PYMOD_INSTALL_LIBDIR ""/"" CACHE STRING """"). set(CMAKE_INSTALL_MESSAGE ""LAZY"" CACHE STRING """"). set(PYTHON_VERSION_MAJORMINOR ""2.7"" CACHE STRING """"); set(PYTHON_EXECUTABLE ""/usr/bin/python"" CACHE STRING """")",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/565#issuecomment-271932154
https://github.com/psi4/psi4/issues/565#issuecomment-271932154:405,Modifiability,plugin,plugin,405,"NVM. I found it. The plugins are not compiling. I think there is something wrong with creating cmake files for the plugins. This is the CMakeLists.txt for skeleton plugin:. set(CMAKE_C_COMPILER @C@); set(CMAKE_CXX_COMPILER @CXX@); set(CMAKE_Fortran_COMPILER @Fortran@); project(skeleton CXX); find_package(psi4 1.0 REQUIRED); ; But, my CMakeCache.txt says that it finds the correct compiler. ; Here is my plugin cache:. set(CMAKE_C_COMPILER ""/usr/bin/gcc"" CACHE STRING """"); set(CMAKE_C_FLAGS "" -march=native -fopenmp"" CACHE STRING """"); set(CMAKE_CXX_COMPILER ""/usr/bin/g++"" CACHE STRING """"); set(CMAKE_CXX_FLAGS "" -march=native -fopenmp"" CACHE STRING """"); set(CMAKE_Fortran_COMPILER """" CACHE STRING """"); set(CMAKE_Fortran_FLAGS """" CACHE STRING """"). #set(CMAKE_INSTALL_PREFIX ""/home/kannon/src/psi4_cmake/Install_Debug"" CACHE PATH """"); set(CMAKE_INSTALL_LIBDIR ""lib"" CACHE STRING """"); set(CMAKE_INSTALL_BINDIR ""bin"" CACHE STRING """"); set(CMAKE_INSTALL_DATADIR ""share"" CACHE STRING """"); set(CMAKE_INSTALL_INCLUDEDIR ""include"" CACHE STRING """"); set(PYMOD_INSTALL_LIBDIR ""/"" CACHE STRING """"). set(CMAKE_INSTALL_MESSAGE ""LAZY"" CACHE STRING """"). set(PYTHON_VERSION_MAJORMINOR ""2.7"" CACHE STRING """"); set(PYTHON_EXECUTABLE ""/usr/bin/python"" CACHE STRING """")",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/565#issuecomment-271932154
https://github.com/psi4/psi4/issues/565#issuecomment-271932154:412,Performance,cache,cache,412,"NVM. I found it. The plugins are not compiling. I think there is something wrong with creating cmake files for the plugins. This is the CMakeLists.txt for skeleton plugin:. set(CMAKE_C_COMPILER @C@); set(CMAKE_CXX_COMPILER @CXX@); set(CMAKE_Fortran_COMPILER @Fortran@); project(skeleton CXX); find_package(psi4 1.0 REQUIRED); ; But, my CMakeCache.txt says that it finds the correct compiler. ; Here is my plugin cache:. set(CMAKE_C_COMPILER ""/usr/bin/gcc"" CACHE STRING """"); set(CMAKE_C_FLAGS "" -march=native -fopenmp"" CACHE STRING """"); set(CMAKE_CXX_COMPILER ""/usr/bin/g++"" CACHE STRING """"); set(CMAKE_CXX_FLAGS "" -march=native -fopenmp"" CACHE STRING """"); set(CMAKE_Fortran_COMPILER """" CACHE STRING """"); set(CMAKE_Fortran_FLAGS """" CACHE STRING """"). #set(CMAKE_INSTALL_PREFIX ""/home/kannon/src/psi4_cmake/Install_Debug"" CACHE PATH """"); set(CMAKE_INSTALL_LIBDIR ""lib"" CACHE STRING """"); set(CMAKE_INSTALL_BINDIR ""bin"" CACHE STRING """"); set(CMAKE_INSTALL_DATADIR ""share"" CACHE STRING """"); set(CMAKE_INSTALL_INCLUDEDIR ""include"" CACHE STRING """"); set(PYMOD_INSTALL_LIBDIR ""/"" CACHE STRING """"). set(CMAKE_INSTALL_MESSAGE ""LAZY"" CACHE STRING """"). set(PYTHON_VERSION_MAJORMINOR ""2.7"" CACHE STRING """"); set(PYTHON_EXECUTABLE ""/usr/bin/python"" CACHE STRING """")",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/565#issuecomment-271932154
https://github.com/psi4/psi4/issues/565#issuecomment-271932154:456,Performance,CACHE,CACHE,456,"NVM. I found it. The plugins are not compiling. I think there is something wrong with creating cmake files for the plugins. This is the CMakeLists.txt for skeleton plugin:. set(CMAKE_C_COMPILER @C@); set(CMAKE_CXX_COMPILER @CXX@); set(CMAKE_Fortran_COMPILER @Fortran@); project(skeleton CXX); find_package(psi4 1.0 REQUIRED); ; But, my CMakeCache.txt says that it finds the correct compiler. ; Here is my plugin cache:. set(CMAKE_C_COMPILER ""/usr/bin/gcc"" CACHE STRING """"); set(CMAKE_C_FLAGS "" -march=native -fopenmp"" CACHE STRING """"); set(CMAKE_CXX_COMPILER ""/usr/bin/g++"" CACHE STRING """"); set(CMAKE_CXX_FLAGS "" -march=native -fopenmp"" CACHE STRING """"); set(CMAKE_Fortran_COMPILER """" CACHE STRING """"); set(CMAKE_Fortran_FLAGS """" CACHE STRING """"). #set(CMAKE_INSTALL_PREFIX ""/home/kannon/src/psi4_cmake/Install_Debug"" CACHE PATH """"); set(CMAKE_INSTALL_LIBDIR ""lib"" CACHE STRING """"); set(CMAKE_INSTALL_BINDIR ""bin"" CACHE STRING """"); set(CMAKE_INSTALL_DATADIR ""share"" CACHE STRING """"); set(CMAKE_INSTALL_INCLUDEDIR ""include"" CACHE STRING """"); set(PYMOD_INSTALL_LIBDIR ""/"" CACHE STRING """"). set(CMAKE_INSTALL_MESSAGE ""LAZY"" CACHE STRING """"). set(PYTHON_VERSION_MAJORMINOR ""2.7"" CACHE STRING """"); set(PYTHON_EXECUTABLE ""/usr/bin/python"" CACHE STRING """")",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/565#issuecomment-271932154
https://github.com/psi4/psi4/issues/565#issuecomment-271932154:518,Performance,CACHE,CACHE,518,"NVM. I found it. The plugins are not compiling. I think there is something wrong with creating cmake files for the plugins. This is the CMakeLists.txt for skeleton plugin:. set(CMAKE_C_COMPILER @C@); set(CMAKE_CXX_COMPILER @CXX@); set(CMAKE_Fortran_COMPILER @Fortran@); project(skeleton CXX); find_package(psi4 1.0 REQUIRED); ; But, my CMakeCache.txt says that it finds the correct compiler. ; Here is my plugin cache:. set(CMAKE_C_COMPILER ""/usr/bin/gcc"" CACHE STRING """"); set(CMAKE_C_FLAGS "" -march=native -fopenmp"" CACHE STRING """"); set(CMAKE_CXX_COMPILER ""/usr/bin/g++"" CACHE STRING """"); set(CMAKE_CXX_FLAGS "" -march=native -fopenmp"" CACHE STRING """"); set(CMAKE_Fortran_COMPILER """" CACHE STRING """"); set(CMAKE_Fortran_FLAGS """" CACHE STRING """"). #set(CMAKE_INSTALL_PREFIX ""/home/kannon/src/psi4_cmake/Install_Debug"" CACHE PATH """"); set(CMAKE_INSTALL_LIBDIR ""lib"" CACHE STRING """"); set(CMAKE_INSTALL_BINDIR ""bin"" CACHE STRING """"); set(CMAKE_INSTALL_DATADIR ""share"" CACHE STRING """"); set(CMAKE_INSTALL_INCLUDEDIR ""include"" CACHE STRING """"); set(PYMOD_INSTALL_LIBDIR ""/"" CACHE STRING """"). set(CMAKE_INSTALL_MESSAGE ""LAZY"" CACHE STRING """"). set(PYTHON_VERSION_MAJORMINOR ""2.7"" CACHE STRING """"); set(PYTHON_EXECUTABLE ""/usr/bin/python"" CACHE STRING """")",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/565#issuecomment-271932154
https://github.com/psi4/psi4/issues/565#issuecomment-271932154:574,Performance,CACHE,CACHE,574,"NVM. I found it. The plugins are not compiling. I think there is something wrong with creating cmake files for the plugins. This is the CMakeLists.txt for skeleton plugin:. set(CMAKE_C_COMPILER @C@); set(CMAKE_CXX_COMPILER @CXX@); set(CMAKE_Fortran_COMPILER @Fortran@); project(skeleton CXX); find_package(psi4 1.0 REQUIRED); ; But, my CMakeCache.txt says that it finds the correct compiler. ; Here is my plugin cache:. set(CMAKE_C_COMPILER ""/usr/bin/gcc"" CACHE STRING """"); set(CMAKE_C_FLAGS "" -march=native -fopenmp"" CACHE STRING """"); set(CMAKE_CXX_COMPILER ""/usr/bin/g++"" CACHE STRING """"); set(CMAKE_CXX_FLAGS "" -march=native -fopenmp"" CACHE STRING """"); set(CMAKE_Fortran_COMPILER """" CACHE STRING """"); set(CMAKE_Fortran_FLAGS """" CACHE STRING """"). #set(CMAKE_INSTALL_PREFIX ""/home/kannon/src/psi4_cmake/Install_Debug"" CACHE PATH """"); set(CMAKE_INSTALL_LIBDIR ""lib"" CACHE STRING """"); set(CMAKE_INSTALL_BINDIR ""bin"" CACHE STRING """"); set(CMAKE_INSTALL_DATADIR ""share"" CACHE STRING """"); set(CMAKE_INSTALL_INCLUDEDIR ""include"" CACHE STRING """"); set(PYMOD_INSTALL_LIBDIR ""/"" CACHE STRING """"). set(CMAKE_INSTALL_MESSAGE ""LAZY"" CACHE STRING """"). set(PYTHON_VERSION_MAJORMINOR ""2.7"" CACHE STRING """"); set(PYTHON_EXECUTABLE ""/usr/bin/python"" CACHE STRING """")",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/565#issuecomment-271932154
https://github.com/psi4/psi4/issues/565#issuecomment-271932154:638,Performance,CACHE,CACHE,638,"NVM. I found it. The plugins are not compiling. I think there is something wrong with creating cmake files for the plugins. This is the CMakeLists.txt for skeleton plugin:. set(CMAKE_C_COMPILER @C@); set(CMAKE_CXX_COMPILER @CXX@); set(CMAKE_Fortran_COMPILER @Fortran@); project(skeleton CXX); find_package(psi4 1.0 REQUIRED); ; But, my CMakeCache.txt says that it finds the correct compiler. ; Here is my plugin cache:. set(CMAKE_C_COMPILER ""/usr/bin/gcc"" CACHE STRING """"); set(CMAKE_C_FLAGS "" -march=native -fopenmp"" CACHE STRING """"); set(CMAKE_CXX_COMPILER ""/usr/bin/g++"" CACHE STRING """"); set(CMAKE_CXX_FLAGS "" -march=native -fopenmp"" CACHE STRING """"); set(CMAKE_Fortran_COMPILER """" CACHE STRING """"); set(CMAKE_Fortran_FLAGS """" CACHE STRING """"). #set(CMAKE_INSTALL_PREFIX ""/home/kannon/src/psi4_cmake/Install_Debug"" CACHE PATH """"); set(CMAKE_INSTALL_LIBDIR ""lib"" CACHE STRING """"); set(CMAKE_INSTALL_BINDIR ""bin"" CACHE STRING """"); set(CMAKE_INSTALL_DATADIR ""share"" CACHE STRING """"); set(CMAKE_INSTALL_INCLUDEDIR ""include"" CACHE STRING """"); set(PYMOD_INSTALL_LIBDIR ""/"" CACHE STRING """"). set(CMAKE_INSTALL_MESSAGE ""LAZY"" CACHE STRING """"). set(PYTHON_VERSION_MAJORMINOR ""2.7"" CACHE STRING """"); set(PYTHON_EXECUTABLE ""/usr/bin/python"" CACHE STRING """")",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/565#issuecomment-271932154
https://github.com/psi4/psi4/issues/565#issuecomment-271932154:686,Performance,CACHE,CACHE,686,"NVM. I found it. The plugins are not compiling. I think there is something wrong with creating cmake files for the plugins. This is the CMakeLists.txt for skeleton plugin:. set(CMAKE_C_COMPILER @C@); set(CMAKE_CXX_COMPILER @CXX@); set(CMAKE_Fortran_COMPILER @Fortran@); project(skeleton CXX); find_package(psi4 1.0 REQUIRED); ; But, my CMakeCache.txt says that it finds the correct compiler. ; Here is my plugin cache:. set(CMAKE_C_COMPILER ""/usr/bin/gcc"" CACHE STRING """"); set(CMAKE_C_FLAGS "" -march=native -fopenmp"" CACHE STRING """"); set(CMAKE_CXX_COMPILER ""/usr/bin/g++"" CACHE STRING """"); set(CMAKE_CXX_FLAGS "" -march=native -fopenmp"" CACHE STRING """"); set(CMAKE_Fortran_COMPILER """" CACHE STRING """"); set(CMAKE_Fortran_FLAGS """" CACHE STRING """"). #set(CMAKE_INSTALL_PREFIX ""/home/kannon/src/psi4_cmake/Install_Debug"" CACHE PATH """"); set(CMAKE_INSTALL_LIBDIR ""lib"" CACHE STRING """"); set(CMAKE_INSTALL_BINDIR ""bin"" CACHE STRING """"); set(CMAKE_INSTALL_DATADIR ""share"" CACHE STRING """"); set(CMAKE_INSTALL_INCLUDEDIR ""include"" CACHE STRING """"); set(PYMOD_INSTALL_LIBDIR ""/"" CACHE STRING """"). set(CMAKE_INSTALL_MESSAGE ""LAZY"" CACHE STRING """"). set(PYTHON_VERSION_MAJORMINOR ""2.7"" CACHE STRING """"); set(PYTHON_EXECUTABLE ""/usr/bin/python"" CACHE STRING """")",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/565#issuecomment-271932154
https://github.com/psi4/psi4/issues/565#issuecomment-271932154:731,Performance,CACHE,CACHE,731,"NVM. I found it. The plugins are not compiling. I think there is something wrong with creating cmake files for the plugins. This is the CMakeLists.txt for skeleton plugin:. set(CMAKE_C_COMPILER @C@); set(CMAKE_CXX_COMPILER @CXX@); set(CMAKE_Fortran_COMPILER @Fortran@); project(skeleton CXX); find_package(psi4 1.0 REQUIRED); ; But, my CMakeCache.txt says that it finds the correct compiler. ; Here is my plugin cache:. set(CMAKE_C_COMPILER ""/usr/bin/gcc"" CACHE STRING """"); set(CMAKE_C_FLAGS "" -march=native -fopenmp"" CACHE STRING """"); set(CMAKE_CXX_COMPILER ""/usr/bin/g++"" CACHE STRING """"); set(CMAKE_CXX_FLAGS "" -march=native -fopenmp"" CACHE STRING """"); set(CMAKE_Fortran_COMPILER """" CACHE STRING """"); set(CMAKE_Fortran_FLAGS """" CACHE STRING """"). #set(CMAKE_INSTALL_PREFIX ""/home/kannon/src/psi4_cmake/Install_Debug"" CACHE PATH """"); set(CMAKE_INSTALL_LIBDIR ""lib"" CACHE STRING """"); set(CMAKE_INSTALL_BINDIR ""bin"" CACHE STRING """"); set(CMAKE_INSTALL_DATADIR ""share"" CACHE STRING """"); set(CMAKE_INSTALL_INCLUDEDIR ""include"" CACHE STRING """"); set(PYMOD_INSTALL_LIBDIR ""/"" CACHE STRING """"). set(CMAKE_INSTALL_MESSAGE ""LAZY"" CACHE STRING """"). set(PYTHON_VERSION_MAJORMINOR ""2.7"" CACHE STRING """"); set(PYTHON_EXECUTABLE ""/usr/bin/python"" CACHE STRING """")",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/565#issuecomment-271932154
https://github.com/psi4/psi4/issues/565#issuecomment-271932154:819,Performance,CACHE,CACHE,819,"NVM. I found it. The plugins are not compiling. I think there is something wrong with creating cmake files for the plugins. This is the CMakeLists.txt for skeleton plugin:. set(CMAKE_C_COMPILER @C@); set(CMAKE_CXX_COMPILER @CXX@); set(CMAKE_Fortran_COMPILER @Fortran@); project(skeleton CXX); find_package(psi4 1.0 REQUIRED); ; But, my CMakeCache.txt says that it finds the correct compiler. ; Here is my plugin cache:. set(CMAKE_C_COMPILER ""/usr/bin/gcc"" CACHE STRING """"); set(CMAKE_C_FLAGS "" -march=native -fopenmp"" CACHE STRING """"); set(CMAKE_CXX_COMPILER ""/usr/bin/g++"" CACHE STRING """"); set(CMAKE_CXX_FLAGS "" -march=native -fopenmp"" CACHE STRING """"); set(CMAKE_Fortran_COMPILER """" CACHE STRING """"); set(CMAKE_Fortran_FLAGS """" CACHE STRING """"). #set(CMAKE_INSTALL_PREFIX ""/home/kannon/src/psi4_cmake/Install_Debug"" CACHE PATH """"); set(CMAKE_INSTALL_LIBDIR ""lib"" CACHE STRING """"); set(CMAKE_INSTALL_BINDIR ""bin"" CACHE STRING """"); set(CMAKE_INSTALL_DATADIR ""share"" CACHE STRING """"); set(CMAKE_INSTALL_INCLUDEDIR ""include"" CACHE STRING """"); set(PYMOD_INSTALL_LIBDIR ""/"" CACHE STRING """"). set(CMAKE_INSTALL_MESSAGE ""LAZY"" CACHE STRING """"). set(PYTHON_VERSION_MAJORMINOR ""2.7"" CACHE STRING """"); set(PYTHON_EXECUTABLE ""/usr/bin/python"" CACHE STRING """")",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/565#issuecomment-271932154
https://github.com/psi4/psi4/issues/565#issuecomment-271932154:866,Performance,CACHE,CACHE,866,"NVM. I found it. The plugins are not compiling. I think there is something wrong with creating cmake files for the plugins. This is the CMakeLists.txt for skeleton plugin:. set(CMAKE_C_COMPILER @C@); set(CMAKE_CXX_COMPILER @CXX@); set(CMAKE_Fortran_COMPILER @Fortran@); project(skeleton CXX); find_package(psi4 1.0 REQUIRED); ; But, my CMakeCache.txt says that it finds the correct compiler. ; Here is my plugin cache:. set(CMAKE_C_COMPILER ""/usr/bin/gcc"" CACHE STRING """"); set(CMAKE_C_FLAGS "" -march=native -fopenmp"" CACHE STRING """"); set(CMAKE_CXX_COMPILER ""/usr/bin/g++"" CACHE STRING """"); set(CMAKE_CXX_FLAGS "" -march=native -fopenmp"" CACHE STRING """"); set(CMAKE_Fortran_COMPILER """" CACHE STRING """"); set(CMAKE_Fortran_FLAGS """" CACHE STRING """"). #set(CMAKE_INSTALL_PREFIX ""/home/kannon/src/psi4_cmake/Install_Debug"" CACHE PATH """"); set(CMAKE_INSTALL_LIBDIR ""lib"" CACHE STRING """"); set(CMAKE_INSTALL_BINDIR ""bin"" CACHE STRING """"); set(CMAKE_INSTALL_DATADIR ""share"" CACHE STRING """"); set(CMAKE_INSTALL_INCLUDEDIR ""include"" CACHE STRING """"); set(PYMOD_INSTALL_LIBDIR ""/"" CACHE STRING """"). set(CMAKE_INSTALL_MESSAGE ""LAZY"" CACHE STRING """"). set(PYTHON_VERSION_MAJORMINOR ""2.7"" CACHE STRING """"); set(PYTHON_EXECUTABLE ""/usr/bin/python"" CACHE STRING """")",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/565#issuecomment-271932154
https://github.com/psi4/psi4/issues/565#issuecomment-271932154:915,Performance,CACHE,CACHE,915,"NVM. I found it. The plugins are not compiling. I think there is something wrong with creating cmake files for the plugins. This is the CMakeLists.txt for skeleton plugin:. set(CMAKE_C_COMPILER @C@); set(CMAKE_CXX_COMPILER @CXX@); set(CMAKE_Fortran_COMPILER @Fortran@); project(skeleton CXX); find_package(psi4 1.0 REQUIRED); ; But, my CMakeCache.txt says that it finds the correct compiler. ; Here is my plugin cache:. set(CMAKE_C_COMPILER ""/usr/bin/gcc"" CACHE STRING """"); set(CMAKE_C_FLAGS "" -march=native -fopenmp"" CACHE STRING """"); set(CMAKE_CXX_COMPILER ""/usr/bin/g++"" CACHE STRING """"); set(CMAKE_CXX_FLAGS "" -march=native -fopenmp"" CACHE STRING """"); set(CMAKE_Fortran_COMPILER """" CACHE STRING """"); set(CMAKE_Fortran_FLAGS """" CACHE STRING """"). #set(CMAKE_INSTALL_PREFIX ""/home/kannon/src/psi4_cmake/Install_Debug"" CACHE PATH """"); set(CMAKE_INSTALL_LIBDIR ""lib"" CACHE STRING """"); set(CMAKE_INSTALL_BINDIR ""bin"" CACHE STRING """"); set(CMAKE_INSTALL_DATADIR ""share"" CACHE STRING """"); set(CMAKE_INSTALL_INCLUDEDIR ""include"" CACHE STRING """"); set(PYMOD_INSTALL_LIBDIR ""/"" CACHE STRING """"). set(CMAKE_INSTALL_MESSAGE ""LAZY"" CACHE STRING """"). set(PYTHON_VERSION_MAJORMINOR ""2.7"" CACHE STRING """"); set(PYTHON_EXECUTABLE ""/usr/bin/python"" CACHE STRING """")",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/565#issuecomment-271932154
https://github.com/psi4/psi4/issues/565#issuecomment-271932154:967,Performance,CACHE,CACHE,967,"NVM. I found it. The plugins are not compiling. I think there is something wrong with creating cmake files for the plugins. This is the CMakeLists.txt for skeleton plugin:. set(CMAKE_C_COMPILER @C@); set(CMAKE_CXX_COMPILER @CXX@); set(CMAKE_Fortran_COMPILER @Fortran@); project(skeleton CXX); find_package(psi4 1.0 REQUIRED); ; But, my CMakeCache.txt says that it finds the correct compiler. ; Here is my plugin cache:. set(CMAKE_C_COMPILER ""/usr/bin/gcc"" CACHE STRING """"); set(CMAKE_C_FLAGS "" -march=native -fopenmp"" CACHE STRING """"); set(CMAKE_CXX_COMPILER ""/usr/bin/g++"" CACHE STRING """"); set(CMAKE_CXX_FLAGS "" -march=native -fopenmp"" CACHE STRING """"); set(CMAKE_Fortran_COMPILER """" CACHE STRING """"); set(CMAKE_Fortran_FLAGS """" CACHE STRING """"). #set(CMAKE_INSTALL_PREFIX ""/home/kannon/src/psi4_cmake/Install_Debug"" CACHE PATH """"); set(CMAKE_INSTALL_LIBDIR ""lib"" CACHE STRING """"); set(CMAKE_INSTALL_BINDIR ""bin"" CACHE STRING """"); set(CMAKE_INSTALL_DATADIR ""share"" CACHE STRING """"); set(CMAKE_INSTALL_INCLUDEDIR ""include"" CACHE STRING """"); set(PYMOD_INSTALL_LIBDIR ""/"" CACHE STRING """"). set(CMAKE_INSTALL_MESSAGE ""LAZY"" CACHE STRING """"). set(PYTHON_VERSION_MAJORMINOR ""2.7"" CACHE STRING """"); set(PYTHON_EXECUTABLE ""/usr/bin/python"" CACHE STRING """")",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/565#issuecomment-271932154
https://github.com/psi4/psi4/issues/565#issuecomment-271932154:1024,Performance,CACHE,CACHE,1024,"NVM. I found it. The plugins are not compiling. I think there is something wrong with creating cmake files for the plugins. This is the CMakeLists.txt for skeleton plugin:. set(CMAKE_C_COMPILER @C@); set(CMAKE_CXX_COMPILER @CXX@); set(CMAKE_Fortran_COMPILER @Fortran@); project(skeleton CXX); find_package(psi4 1.0 REQUIRED); ; But, my CMakeCache.txt says that it finds the correct compiler. ; Here is my plugin cache:. set(CMAKE_C_COMPILER ""/usr/bin/gcc"" CACHE STRING """"); set(CMAKE_C_FLAGS "" -march=native -fopenmp"" CACHE STRING """"); set(CMAKE_CXX_COMPILER ""/usr/bin/g++"" CACHE STRING """"); set(CMAKE_CXX_FLAGS "" -march=native -fopenmp"" CACHE STRING """"); set(CMAKE_Fortran_COMPILER """" CACHE STRING """"); set(CMAKE_Fortran_FLAGS """" CACHE STRING """"). #set(CMAKE_INSTALL_PREFIX ""/home/kannon/src/psi4_cmake/Install_Debug"" CACHE PATH """"); set(CMAKE_INSTALL_LIBDIR ""lib"" CACHE STRING """"); set(CMAKE_INSTALL_BINDIR ""bin"" CACHE STRING """"); set(CMAKE_INSTALL_DATADIR ""share"" CACHE STRING """"); set(CMAKE_INSTALL_INCLUDEDIR ""include"" CACHE STRING """"); set(PYMOD_INSTALL_LIBDIR ""/"" CACHE STRING """"). set(CMAKE_INSTALL_MESSAGE ""LAZY"" CACHE STRING """"). set(PYTHON_VERSION_MAJORMINOR ""2.7"" CACHE STRING """"); set(PYTHON_EXECUTABLE ""/usr/bin/python"" CACHE STRING """")",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/565#issuecomment-271932154
https://github.com/psi4/psi4/issues/565#issuecomment-271932154:1071,Performance,CACHE,CACHE,1071,"NVM. I found it. The plugins are not compiling. I think there is something wrong with creating cmake files for the plugins. This is the CMakeLists.txt for skeleton plugin:. set(CMAKE_C_COMPILER @C@); set(CMAKE_CXX_COMPILER @CXX@); set(CMAKE_Fortran_COMPILER @Fortran@); project(skeleton CXX); find_package(psi4 1.0 REQUIRED); ; But, my CMakeCache.txt says that it finds the correct compiler. ; Here is my plugin cache:. set(CMAKE_C_COMPILER ""/usr/bin/gcc"" CACHE STRING """"); set(CMAKE_C_FLAGS "" -march=native -fopenmp"" CACHE STRING """"); set(CMAKE_CXX_COMPILER ""/usr/bin/g++"" CACHE STRING """"); set(CMAKE_CXX_FLAGS "" -march=native -fopenmp"" CACHE STRING """"); set(CMAKE_Fortran_COMPILER """" CACHE STRING """"); set(CMAKE_Fortran_FLAGS """" CACHE STRING """"). #set(CMAKE_INSTALL_PREFIX ""/home/kannon/src/psi4_cmake/Install_Debug"" CACHE PATH """"); set(CMAKE_INSTALL_LIBDIR ""lib"" CACHE STRING """"); set(CMAKE_INSTALL_BINDIR ""bin"" CACHE STRING """"); set(CMAKE_INSTALL_DATADIR ""share"" CACHE STRING """"); set(CMAKE_INSTALL_INCLUDEDIR ""include"" CACHE STRING """"); set(PYMOD_INSTALL_LIBDIR ""/"" CACHE STRING """"). set(CMAKE_INSTALL_MESSAGE ""LAZY"" CACHE STRING """"). set(PYTHON_VERSION_MAJORMINOR ""2.7"" CACHE STRING """"); set(PYTHON_EXECUTABLE ""/usr/bin/python"" CACHE STRING """")",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/565#issuecomment-271932154
https://github.com/psi4/psi4/issues/565#issuecomment-271932154:1122,Performance,CACHE,CACHE,1122,"NVM. I found it. The plugins are not compiling. I think there is something wrong with creating cmake files for the plugins. This is the CMakeLists.txt for skeleton plugin:. set(CMAKE_C_COMPILER @C@); set(CMAKE_CXX_COMPILER @CXX@); set(CMAKE_Fortran_COMPILER @Fortran@); project(skeleton CXX); find_package(psi4 1.0 REQUIRED); ; But, my CMakeCache.txt says that it finds the correct compiler. ; Here is my plugin cache:. set(CMAKE_C_COMPILER ""/usr/bin/gcc"" CACHE STRING """"); set(CMAKE_C_FLAGS "" -march=native -fopenmp"" CACHE STRING """"); set(CMAKE_CXX_COMPILER ""/usr/bin/g++"" CACHE STRING """"); set(CMAKE_CXX_FLAGS "" -march=native -fopenmp"" CACHE STRING """"); set(CMAKE_Fortran_COMPILER """" CACHE STRING """"); set(CMAKE_Fortran_FLAGS """" CACHE STRING """"). #set(CMAKE_INSTALL_PREFIX ""/home/kannon/src/psi4_cmake/Install_Debug"" CACHE PATH """"); set(CMAKE_INSTALL_LIBDIR ""lib"" CACHE STRING """"); set(CMAKE_INSTALL_BINDIR ""bin"" CACHE STRING """"); set(CMAKE_INSTALL_DATADIR ""share"" CACHE STRING """"); set(CMAKE_INSTALL_INCLUDEDIR ""include"" CACHE STRING """"); set(PYMOD_INSTALL_LIBDIR ""/"" CACHE STRING """"). set(CMAKE_INSTALL_MESSAGE ""LAZY"" CACHE STRING """"). set(PYTHON_VERSION_MAJORMINOR ""2.7"" CACHE STRING """"); set(PYTHON_EXECUTABLE ""/usr/bin/python"" CACHE STRING """")",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/565#issuecomment-271932154
https://github.com/psi4/psi4/issues/565#issuecomment-271932154:1176,Performance,CACHE,CACHE,1176,"NVM. I found it. The plugins are not compiling. I think there is something wrong with creating cmake files for the plugins. This is the CMakeLists.txt for skeleton plugin:. set(CMAKE_C_COMPILER @C@); set(CMAKE_CXX_COMPILER @CXX@); set(CMAKE_Fortran_COMPILER @Fortran@); project(skeleton CXX); find_package(psi4 1.0 REQUIRED); ; But, my CMakeCache.txt says that it finds the correct compiler. ; Here is my plugin cache:. set(CMAKE_C_COMPILER ""/usr/bin/gcc"" CACHE STRING """"); set(CMAKE_C_FLAGS "" -march=native -fopenmp"" CACHE STRING """"); set(CMAKE_CXX_COMPILER ""/usr/bin/g++"" CACHE STRING """"); set(CMAKE_CXX_FLAGS "" -march=native -fopenmp"" CACHE STRING """"); set(CMAKE_Fortran_COMPILER """" CACHE STRING """"); set(CMAKE_Fortran_FLAGS """" CACHE STRING """"). #set(CMAKE_INSTALL_PREFIX ""/home/kannon/src/psi4_cmake/Install_Debug"" CACHE PATH """"); set(CMAKE_INSTALL_LIBDIR ""lib"" CACHE STRING """"); set(CMAKE_INSTALL_BINDIR ""bin"" CACHE STRING """"); set(CMAKE_INSTALL_DATADIR ""share"" CACHE STRING """"); set(CMAKE_INSTALL_INCLUDEDIR ""include"" CACHE STRING """"); set(PYMOD_INSTALL_LIBDIR ""/"" CACHE STRING """"). set(CMAKE_INSTALL_MESSAGE ""LAZY"" CACHE STRING """"). set(PYTHON_VERSION_MAJORMINOR ""2.7"" CACHE STRING """"); set(PYTHON_EXECUTABLE ""/usr/bin/python"" CACHE STRING """")",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/565#issuecomment-271932154
https://github.com/psi4/psi4/issues/565#issuecomment-271932154:1234,Performance,CACHE,CACHE,1234,"NVM. I found it. The plugins are not compiling. I think there is something wrong with creating cmake files for the plugins. This is the CMakeLists.txt for skeleton plugin:. set(CMAKE_C_COMPILER @C@); set(CMAKE_CXX_COMPILER @CXX@); set(CMAKE_Fortran_COMPILER @Fortran@); project(skeleton CXX); find_package(psi4 1.0 REQUIRED); ; But, my CMakeCache.txt says that it finds the correct compiler. ; Here is my plugin cache:. set(CMAKE_C_COMPILER ""/usr/bin/gcc"" CACHE STRING """"); set(CMAKE_C_FLAGS "" -march=native -fopenmp"" CACHE STRING """"); set(CMAKE_CXX_COMPILER ""/usr/bin/g++"" CACHE STRING """"); set(CMAKE_CXX_FLAGS "" -march=native -fopenmp"" CACHE STRING """"); set(CMAKE_Fortran_COMPILER """" CACHE STRING """"); set(CMAKE_Fortran_FLAGS """" CACHE STRING """"). #set(CMAKE_INSTALL_PREFIX ""/home/kannon/src/psi4_cmake/Install_Debug"" CACHE PATH """"); set(CMAKE_INSTALL_LIBDIR ""lib"" CACHE STRING """"); set(CMAKE_INSTALL_BINDIR ""bin"" CACHE STRING """"); set(CMAKE_INSTALL_DATADIR ""share"" CACHE STRING """"); set(CMAKE_INSTALL_INCLUDEDIR ""include"" CACHE STRING """"); set(PYMOD_INSTALL_LIBDIR ""/"" CACHE STRING """"). set(CMAKE_INSTALL_MESSAGE ""LAZY"" CACHE STRING """"). set(PYTHON_VERSION_MAJORMINOR ""2.7"" CACHE STRING """"); set(PYTHON_EXECUTABLE ""/usr/bin/python"" CACHE STRING """")",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/565#issuecomment-271932154
https://github.com/psi4/psi4/issues/565#issuecomment-271947159:16,Modifiability,plugin,plugin,16,And search your plugin for `@CXX@`. I don't know where that's coming from.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/565#issuecomment-271947159
https://github.com/psi4/psi4/issues/565#issuecomment-271956386:129,Deployability,install,install,129,"Yes, that is exactly the contents of the above location. This plugin is just the basic psi4 plugins. All of them fail to compile/install. If I search for @CXX, this shows up in every CMakeLists.txt in the Build/psi4 plugins directory. . No, I have never used `--inplace`.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/565#issuecomment-271956386
https://github.com/psi4/psi4/issues/565#issuecomment-271956386:62,Modifiability,plugin,plugin,62,"Yes, that is exactly the contents of the above location. This plugin is just the basic psi4 plugins. All of them fail to compile/install. If I search for @CXX, this shows up in every CMakeLists.txt in the Build/psi4 plugins directory. . No, I have never used `--inplace`.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/565#issuecomment-271956386
https://github.com/psi4/psi4/issues/565#issuecomment-271956386:92,Modifiability,plugin,plugins,92,"Yes, that is exactly the contents of the above location. This plugin is just the basic psi4 plugins. All of them fail to compile/install. If I search for @CXX, this shows up in every CMakeLists.txt in the Build/psi4 plugins directory. . No, I have never used `--inplace`.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/565#issuecomment-271956386
https://github.com/psi4/psi4/issues/565#issuecomment-271956386:216,Modifiability,plugin,plugins,216,"Yes, that is exactly the contents of the above location. This plugin is just the basic psi4 plugins. All of them fail to compile/install. If I search for @CXX, this shows up in every CMakeLists.txt in the Build/psi4 plugins directory. . No, I have never used `--inplace`.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/565#issuecomment-271956386
https://github.com/psi4/psi4/issues/565#issuecomment-271964672:273,Modifiability,plugin,plugin,273,"I've got no `@CXX@` anywhere, so I'd check your versions again. Maybe a fresh clone-and-build in case something lingered. Actually, now I'm seeing your edited skeleton/CM* post and that's all wrong. Should look like https://github.com/psi4/psi4/blob/master/psi4/share/psi4/plugin/basic/CMakeLists.txt.template",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/565#issuecomment-271964672
https://github.com/psi4/psi4/issues/565#issuecomment-271969458:719,Modifiability,plugin,plugin,719,"Yea, I really need to learn that you guys do a lot of work in a few weeks and that usually requires me to clone-and-build rather than just do git pull. I do have a small problem now. I am not able to call psi4. This happens if I just run psi4 in the stage/bin directory. . File ""../../stage/home/kannon/src/psi4_cmake/Install_Debug/bin/psi4"", line 140, in <module>; import psi4; File ""/home/kannon/src/psi4_cmake/Build_Debug/stage/home/kannon/src/psi4_cmake/Install_Debug/lib//psi4/__init__.py"", line 72, in <module>; from .driver import endorsed_plugins; File ""/home/kannon/src/psi4_cmake/Build_Debug/stage/home/kannon/src/psi4_cmake/Install_Debug/lib//psi4/driver/__init__.py"", line 35, in <module>; from psi4.driver.plugin import *; File ""/home/kannon/src/psi4_cmake/Build_Debug/stage/home/kannon/src/psi4_cmake/Install_Debug/lib//psi4/driver/plugin.py"", line 91, in <module>; for dir in os.listdir(plugin_path):; OSError: [Errno 2] No such file or directory: '/home/kannon/src/psi4_cmake/Build_Debug/plugins/skeleton/plugin'`",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/565#issuecomment-271969458
https://github.com/psi4/psi4/issues/565#issuecomment-271969458:846,Modifiability,plugin,plugin,846,"Yea, I really need to learn that you guys do a lot of work in a few weeks and that usually requires me to clone-and-build rather than just do git pull. I do have a small problem now. I am not able to call psi4. This happens if I just run psi4 in the stage/bin directory. . File ""../../stage/home/kannon/src/psi4_cmake/Install_Debug/bin/psi4"", line 140, in <module>; import psi4; File ""/home/kannon/src/psi4_cmake/Build_Debug/stage/home/kannon/src/psi4_cmake/Install_Debug/lib//psi4/__init__.py"", line 72, in <module>; from .driver import endorsed_plugins; File ""/home/kannon/src/psi4_cmake/Build_Debug/stage/home/kannon/src/psi4_cmake/Install_Debug/lib//psi4/driver/__init__.py"", line 35, in <module>; from psi4.driver.plugin import *; File ""/home/kannon/src/psi4_cmake/Build_Debug/stage/home/kannon/src/psi4_cmake/Install_Debug/lib//psi4/driver/plugin.py"", line 91, in <module>; for dir in os.listdir(plugin_path):; OSError: [Errno 2] No such file or directory: '/home/kannon/src/psi4_cmake/Build_Debug/plugins/skeleton/plugin'`",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/565#issuecomment-271969458
https://github.com/psi4/psi4/issues/565#issuecomment-271969458:1004,Modifiability,plugin,plugins,1004,"Yea, I really need to learn that you guys do a lot of work in a few weeks and that usually requires me to clone-and-build rather than just do git pull. I do have a small problem now. I am not able to call psi4. This happens if I just run psi4 in the stage/bin directory. . File ""../../stage/home/kannon/src/psi4_cmake/Install_Debug/bin/psi4"", line 140, in <module>; import psi4; File ""/home/kannon/src/psi4_cmake/Build_Debug/stage/home/kannon/src/psi4_cmake/Install_Debug/lib//psi4/__init__.py"", line 72, in <module>; from .driver import endorsed_plugins; File ""/home/kannon/src/psi4_cmake/Build_Debug/stage/home/kannon/src/psi4_cmake/Install_Debug/lib//psi4/driver/__init__.py"", line 35, in <module>; from psi4.driver.plugin import *; File ""/home/kannon/src/psi4_cmake/Build_Debug/stage/home/kannon/src/psi4_cmake/Install_Debug/lib//psi4/driver/plugin.py"", line 91, in <module>; for dir in os.listdir(plugin_path):; OSError: [Errno 2] No such file or directory: '/home/kannon/src/psi4_cmake/Build_Debug/plugins/skeleton/plugin'`",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/565#issuecomment-271969458
https://github.com/psi4/psi4/issues/565#issuecomment-271969458:1021,Modifiability,plugin,plugin,1021,"Yea, I really need to learn that you guys do a lot of work in a few weeks and that usually requires me to clone-and-build rather than just do git pull. I do have a small problem now. I am not able to call psi4. This happens if I just run psi4 in the stage/bin directory. . File ""../../stage/home/kannon/src/psi4_cmake/Install_Debug/bin/psi4"", line 140, in <module>; import psi4; File ""/home/kannon/src/psi4_cmake/Build_Debug/stage/home/kannon/src/psi4_cmake/Install_Debug/lib//psi4/__init__.py"", line 72, in <module>; from .driver import endorsed_plugins; File ""/home/kannon/src/psi4_cmake/Build_Debug/stage/home/kannon/src/psi4_cmake/Install_Debug/lib//psi4/driver/__init__.py"", line 35, in <module>; from psi4.driver.plugin import *; File ""/home/kannon/src/psi4_cmake/Build_Debug/stage/home/kannon/src/psi4_cmake/Install_Debug/lib//psi4/driver/plugin.py"", line 91, in <module>; for dir in os.listdir(plugin_path):; OSError: [Errno 2] No such file or directory: '/home/kannon/src/psi4_cmake/Build_Debug/plugins/skeleton/plugin'`",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/565#issuecomment-271969458
https://github.com/psi4/psi4/issues/565#issuecomment-271969458:22,Usability,learn,learn,22,"Yea, I really need to learn that you guys do a lot of work in a few weeks and that usually requires me to clone-and-build rather than just do git pull. I do have a small problem now. I am not able to call psi4. This happens if I just run psi4 in the stage/bin directory. . File ""../../stage/home/kannon/src/psi4_cmake/Install_Debug/bin/psi4"", line 140, in <module>; import psi4; File ""/home/kannon/src/psi4_cmake/Build_Debug/stage/home/kannon/src/psi4_cmake/Install_Debug/lib//psi4/__init__.py"", line 72, in <module>; from .driver import endorsed_plugins; File ""/home/kannon/src/psi4_cmake/Build_Debug/stage/home/kannon/src/psi4_cmake/Install_Debug/lib//psi4/driver/__init__.py"", line 35, in <module>; from psi4.driver.plugin import *; File ""/home/kannon/src/psi4_cmake/Build_Debug/stage/home/kannon/src/psi4_cmake/Install_Debug/lib//psi4/driver/plugin.py"", line 91, in <module>; for dir in os.listdir(plugin_path):; OSError: [Errno 2] No such file or directory: '/home/kannon/src/psi4_cmake/Build_Debug/plugins/skeleton/plugin'`",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/565#issuecomment-271969458
https://github.com/psi4/psi4/issues/565#issuecomment-271974463:115,Modifiability,plugin,plugins,115,"Are you setting `PSIDATADIR`? To what? I don't agree with it searching in ""/home/kannon/src/psi4_cmake/Build_Debug/plugins/skeleton/plugin"". Often, just a new objdir suffices.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/565#issuecomment-271974463
https://github.com/psi4/psi4/issues/565#issuecomment-271974463:132,Modifiability,plugin,plugin,132,"Are you setting `PSIDATADIR`? To what? I don't agree with it searching in ""/home/kannon/src/psi4_cmake/Build_Debug/plugins/skeleton/plugin"". Often, just a new objdir suffices.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/565#issuecomment-271974463
https://github.com/psi4/psi4/issues/565#issuecomment-271978256:57,Availability,error,error,57,"I realized that having PSI4DATADIR set to """" causes this error. Instead, I had to make sure that PSI4DATADIR was not set at all.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/565#issuecomment-271978256
https://github.com/psi4/psi4/issues/565#issuecomment-271978963:74,Deployability,install,installdirs,74,"Ok, good, I was still trying to untangle what were your srcdirs, objdirs, installdirs, etc. Yes, in ~1.1 and beyond you really shouldn't ever have to set PSIDATADIR. But having it set can definitely confuse everything, which you've found.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/565#issuecomment-271978963
https://github.com/psi4/psi4/issues/565#issuecomment-271979443:55,Deployability,Release,Release,55,"If I have different compilations such as a Debug and a Release version, how do I make sure the correct PSIDATADIR is being found?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/565#issuecomment-271979443
https://github.com/psi4/psi4/pull/571#issuecomment-272752089:138,Testability,test,test,138,Thanks for the help with git. I am afraid I still made a little mess with merging the commits. I addressed the issues you raised and once test pass this should be ready to go.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/571#issuecomment-272752089
https://github.com/psi4/psi4/pull/571#issuecomment-272906298:89,Usability,feedback,feedback,89,"Thanks @loriab for the duplicating the PR and @dgasmith @jturney thanks for the positive feedback! In general I think that Matrix/Vector and other infrastructure in libmints could be made leaner and cleaner if we focused on passing only Dimension objects, moved to use stl containers, and modernized the code to take advantage of C++11 features. I'll be interested in discussing more about this with you when we have a chance. BTW: I went ahead and resolved a conflict both in #571 and #574. Should I go ahead and close this PR so we may merge @loriab's version?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/571#issuecomment-272906298
https://github.com/psi4/psi4/pull/573#issuecomment-272873624:32,Safety,timeout,timeouts,32,Looks like we are still hitting timeouts occasionally.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/573#issuecomment-272873624
https://github.com/psi4/psi4/issues/577#issuecomment-273460491:33,Deployability,update,update,33,"My guess is that pybind11 didn't update in your build directory. Were you reusing a build directory from pre ```git pull```? If so, that's the issue, create a new build directory, configure, and make and it should work. I just built psi4 in a clean build directory with gcc 5.4. If not, then we'll look into it more.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/577#issuecomment-273460491
https://github.com/psi4/psi4/issues/577#issuecomment-273460491:180,Modifiability,config,configure,180,"My guess is that pybind11 didn't update in your build directory. Were you reusing a build directory from pre ```git pull```? If so, that's the issue, create a new build directory, configure, and make and it should work. I just built psi4 in a clean build directory with gcc 5.4. If not, then we'll look into it more.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/577#issuecomment-273460491
https://github.com/psi4/psi4/issues/577#issuecomment-273472426:169,Deployability,install,installed,169,"I always use a fresh build directory. I found 2 cmake related issues. 1) I noticed 'pybind11_external' is build with the gcc 4.8( system default) instead of the locally installed gcc 5.4. So I added . ```; -DCMAKE_C_COMPILER=${CMAKE_C_COMPILER} ; -DCMAKE_CXX_COMPILER=${CMAKE_CXX_COMPILER} . ```. to [CMakeLists.txt](https://github.com/psi4/psi4/blob/master/external/upstream/pybind11/CMakeLists.txt) like it is done for the libint cmake file. 2) The second issue is that pybind11 auto-detects python3.4 and psi4 detected python2.7 on my workstation. I fixed it by changing the python version in the CMakeCache.txt file for pybind11 by hand, since I don't know how to tell cmake that. After rebuilding pybind11 the compilation of psi4 finishes normally.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/577#issuecomment-273472426
https://github.com/psi4/psi4/issues/577#issuecomment-273472426:486,Safety,detect,detects,486,"I always use a fresh build directory. I found 2 cmake related issues. 1) I noticed 'pybind11_external' is build with the gcc 4.8( system default) instead of the locally installed gcc 5.4. So I added . ```; -DCMAKE_C_COMPILER=${CMAKE_C_COMPILER} ; -DCMAKE_CXX_COMPILER=${CMAKE_CXX_COMPILER} . ```. to [CMakeLists.txt](https://github.com/psi4/psi4/blob/master/external/upstream/pybind11/CMakeLists.txt) like it is done for the libint cmake file. 2) The second issue is that pybind11 auto-detects python3.4 and psi4 detected python2.7 on my workstation. I fixed it by changing the python version in the CMakeCache.txt file for pybind11 by hand, since I don't know how to tell cmake that. After rebuilding pybind11 the compilation of psi4 finishes normally.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/577#issuecomment-273472426
https://github.com/psi4/psi4/issues/577#issuecomment-273472426:513,Safety,detect,detected,513,"I always use a fresh build directory. I found 2 cmake related issues. 1) I noticed 'pybind11_external' is build with the gcc 4.8( system default) instead of the locally installed gcc 5.4. So I added . ```; -DCMAKE_C_COMPILER=${CMAKE_C_COMPILER} ; -DCMAKE_CXX_COMPILER=${CMAKE_CXX_COMPILER} . ```. to [CMakeLists.txt](https://github.com/psi4/psi4/blob/master/external/upstream/pybind11/CMakeLists.txt) like it is done for the libint cmake file. 2) The second issue is that pybind11 auto-detects python3.4 and psi4 detected python2.7 on my workstation. I fixed it by changing the python version in the CMakeCache.txt file for pybind11 by hand, since I don't know how to tell cmake that. After rebuilding pybind11 the compilation of psi4 finishes normally.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/577#issuecomment-273472426
https://github.com/psi4/psi4/issues/577#issuecomment-273485753:80,Availability,error,error,80,"Unclear if it is a related, but running `make test` then leads to the following error:. > Traceback (most recent call last):; File ""/usr/qc/psi4.git/objdir/stage/usr/qc/psi4.bin/bin/psi4"", line 140, in <module>; import psi4; File ""/usr/qc/psi4.git/objdir/stage/usr/qc/psi4.bin/lib//psi4/__init__.py"", line 59, in <module>; raise ImportError(""{0}"".format(err)); ImportError: To be able to register buffer protocol support for the type 'psi4.core.CIVector' the associated class<>(..) invocation must include the pybind11::buffer_protocol() annotation!. Maybe I manually rebuild pybind11 incorrectly in my attempts to get psi4 compiled.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/577#issuecomment-273485753
https://github.com/psi4/psi4/issues/577#issuecomment-273485753:404,Integrability,protocol,protocol,404,"Unclear if it is a related, but running `make test` then leads to the following error:. > Traceback (most recent call last):; File ""/usr/qc/psi4.git/objdir/stage/usr/qc/psi4.bin/bin/psi4"", line 140, in <module>; import psi4; File ""/usr/qc/psi4.git/objdir/stage/usr/qc/psi4.bin/lib//psi4/__init__.py"", line 59, in <module>; raise ImportError(""{0}"".format(err)); ImportError: To be able to register buffer protocol support for the type 'psi4.core.CIVector' the associated class<>(..) invocation must include the pybind11::buffer_protocol() annotation!. Maybe I manually rebuild pybind11 incorrectly in my attempts to get psi4 compiled.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/577#issuecomment-273485753
https://github.com/psi4/psi4/issues/577#issuecomment-273485753:46,Testability,test,test,46,"Unclear if it is a related, but running `make test` then leads to the following error:. > Traceback (most recent call last):; File ""/usr/qc/psi4.git/objdir/stage/usr/qc/psi4.bin/bin/psi4"", line 140, in <module>; import psi4; File ""/usr/qc/psi4.git/objdir/stage/usr/qc/psi4.bin/lib//psi4/__init__.py"", line 59, in <module>; raise ImportError(""{0}"".format(err)); ImportError: To be able to register buffer protocol support for the type 'psi4.core.CIVector' the associated class<>(..) invocation must include the pybind11::buffer_protocol() annotation!. Maybe I manually rebuild pybind11 incorrectly in my attempts to get psi4 compiled.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/577#issuecomment-273485753
https://github.com/psi4/psi4/issues/577#issuecomment-273512333:35,Deployability,update,update,35,"* Yes, this sounds like a pybind11 update issue. Any pybind11 update requires a _full_ recompile. But it sounds like you've got that taken care of with the fresh objdir. Fortunately, now that pybind has hit 2.0, we plan to stick with that version, so these problems will be fewer.; * Very observant on the compilers detected for pybind. But it really doesn't matter because ""compilation"" and installation of pybind is just copying a dozen files into place.; * On the python detection, there's two places this could be happening, and one, like the above is irrelevant. It's the second one (in the psi4-core target) that really matters. Could you send me your analogs of the CMake output snippets below? Or send me the whole thing, but it'll have to be both the initial CMake configuration and the psi4-core configuration that runs during the course of the compilation. Psi4 and pybind11 use exactly the same Python detection scheme, so I'm surprised and would like to understand what's happening in your setup.; * As far as actually telling psi4 and cmake what Python to use w/o editing CMakeCache's, I'd recc setting one (EXE) or all of https://github.com/psi4/psi4/blob/master/CMakeLists.txt#L39-L41 . But my impression is that you shouldn't have to. Main CMake configuration; ```; -- Setting (unspecified) option CMAKE_INSTALL_MESSAGE: LAZY; -- Setting (unspecified) option psi4_CXX_STANDARD: 11; -- Found PythonInterp: /theoryfs2/ds/cdsgroup/miniconda/envs/texternals35/bin/python3.5 (found version ""3.5.2"") ; -- Found PythonLibs: /theoryfs2/ds/cdsgroup/miniconda/envs/texternals35/lib/libpython3.5m.so; -- Found Python 3.5: /theoryfs2/ds/cdsgroup/miniconda/envs/texternals35/bin/python3.5; -- Suitable CheMPS2 could not be located, Building CheMPS2 instead.; -- Suitable dkh could not be located, Building dkh instead.; -- Found libefp: /theoryfs2/ds/cdsgroup/miniconda/envs/texternals35/lib/libefp.so (found version 1.3.0); -- Found gdma: /theoryfs2/ds/cdsgroup/miniconda/envs/texternals35/lib/li",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/577#issuecomment-273512333
https://github.com/psi4/psi4/issues/577#issuecomment-273512333:62,Deployability,update,update,62,"* Yes, this sounds like a pybind11 update issue. Any pybind11 update requires a _full_ recompile. But it sounds like you've got that taken care of with the fresh objdir. Fortunately, now that pybind has hit 2.0, we plan to stick with that version, so these problems will be fewer.; * Very observant on the compilers detected for pybind. But it really doesn't matter because ""compilation"" and installation of pybind is just copying a dozen files into place.; * On the python detection, there's two places this could be happening, and one, like the above is irrelevant. It's the second one (in the psi4-core target) that really matters. Could you send me your analogs of the CMake output snippets below? Or send me the whole thing, but it'll have to be both the initial CMake configuration and the psi4-core configuration that runs during the course of the compilation. Psi4 and pybind11 use exactly the same Python detection scheme, so I'm surprised and would like to understand what's happening in your setup.; * As far as actually telling psi4 and cmake what Python to use w/o editing CMakeCache's, I'd recc setting one (EXE) or all of https://github.com/psi4/psi4/blob/master/CMakeLists.txt#L39-L41 . But my impression is that you shouldn't have to. Main CMake configuration; ```; -- Setting (unspecified) option CMAKE_INSTALL_MESSAGE: LAZY; -- Setting (unspecified) option psi4_CXX_STANDARD: 11; -- Found PythonInterp: /theoryfs2/ds/cdsgroup/miniconda/envs/texternals35/bin/python3.5 (found version ""3.5.2"") ; -- Found PythonLibs: /theoryfs2/ds/cdsgroup/miniconda/envs/texternals35/lib/libpython3.5m.so; -- Found Python 3.5: /theoryfs2/ds/cdsgroup/miniconda/envs/texternals35/bin/python3.5; -- Suitable CheMPS2 could not be located, Building CheMPS2 instead.; -- Suitable dkh could not be located, Building dkh instead.; -- Found libefp: /theoryfs2/ds/cdsgroup/miniconda/envs/texternals35/lib/libefp.so (found version 1.3.0); -- Found gdma: /theoryfs2/ds/cdsgroup/miniconda/envs/texternals35/lib/li",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/577#issuecomment-273512333
https://github.com/psi4/psi4/issues/577#issuecomment-273512333:392,Deployability,install,installation,392,"* Yes, this sounds like a pybind11 update issue. Any pybind11 update requires a _full_ recompile. But it sounds like you've got that taken care of with the fresh objdir. Fortunately, now that pybind has hit 2.0, we plan to stick with that version, so these problems will be fewer.; * Very observant on the compilers detected for pybind. But it really doesn't matter because ""compilation"" and installation of pybind is just copying a dozen files into place.; * On the python detection, there's two places this could be happening, and one, like the above is irrelevant. It's the second one (in the psi4-core target) that really matters. Could you send me your analogs of the CMake output snippets below? Or send me the whole thing, but it'll have to be both the initial CMake configuration and the psi4-core configuration that runs during the course of the compilation. Psi4 and pybind11 use exactly the same Python detection scheme, so I'm surprised and would like to understand what's happening in your setup.; * As far as actually telling psi4 and cmake what Python to use w/o editing CMakeCache's, I'd recc setting one (EXE) or all of https://github.com/psi4/psi4/blob/master/CMakeLists.txt#L39-L41 . But my impression is that you shouldn't have to. Main CMake configuration; ```; -- Setting (unspecified) option CMAKE_INSTALL_MESSAGE: LAZY; -- Setting (unspecified) option psi4_CXX_STANDARD: 11; -- Found PythonInterp: /theoryfs2/ds/cdsgroup/miniconda/envs/texternals35/bin/python3.5 (found version ""3.5.2"") ; -- Found PythonLibs: /theoryfs2/ds/cdsgroup/miniconda/envs/texternals35/lib/libpython3.5m.so; -- Found Python 3.5: /theoryfs2/ds/cdsgroup/miniconda/envs/texternals35/bin/python3.5; -- Suitable CheMPS2 could not be located, Building CheMPS2 instead.; -- Suitable dkh could not be located, Building dkh instead.; -- Found libefp: /theoryfs2/ds/cdsgroup/miniconda/envs/texternals35/lib/libefp.so (found version 1.3.0); -- Found gdma: /theoryfs2/ds/cdsgroup/miniconda/envs/texternals35/lib/li",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/577#issuecomment-273512333
https://github.com/psi4/psi4/issues/577#issuecomment-273512333:774,Deployability,configurat,configuration,774,"* Yes, this sounds like a pybind11 update issue. Any pybind11 update requires a _full_ recompile. But it sounds like you've got that taken care of with the fresh objdir. Fortunately, now that pybind has hit 2.0, we plan to stick with that version, so these problems will be fewer.; * Very observant on the compilers detected for pybind. But it really doesn't matter because ""compilation"" and installation of pybind is just copying a dozen files into place.; * On the python detection, there's two places this could be happening, and one, like the above is irrelevant. It's the second one (in the psi4-core target) that really matters. Could you send me your analogs of the CMake output snippets below? Or send me the whole thing, but it'll have to be both the initial CMake configuration and the psi4-core configuration that runs during the course of the compilation. Psi4 and pybind11 use exactly the same Python detection scheme, so I'm surprised and would like to understand what's happening in your setup.; * As far as actually telling psi4 and cmake what Python to use w/o editing CMakeCache's, I'd recc setting one (EXE) or all of https://github.com/psi4/psi4/blob/master/CMakeLists.txt#L39-L41 . But my impression is that you shouldn't have to. Main CMake configuration; ```; -- Setting (unspecified) option CMAKE_INSTALL_MESSAGE: LAZY; -- Setting (unspecified) option psi4_CXX_STANDARD: 11; -- Found PythonInterp: /theoryfs2/ds/cdsgroup/miniconda/envs/texternals35/bin/python3.5 (found version ""3.5.2"") ; -- Found PythonLibs: /theoryfs2/ds/cdsgroup/miniconda/envs/texternals35/lib/libpython3.5m.so; -- Found Python 3.5: /theoryfs2/ds/cdsgroup/miniconda/envs/texternals35/bin/python3.5; -- Suitable CheMPS2 could not be located, Building CheMPS2 instead.; -- Suitable dkh could not be located, Building dkh instead.; -- Found libefp: /theoryfs2/ds/cdsgroup/miniconda/envs/texternals35/lib/libefp.so (found version 1.3.0); -- Found gdma: /theoryfs2/ds/cdsgroup/miniconda/envs/texternals35/lib/li",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/577#issuecomment-273512333
https://github.com/psi4/psi4/issues/577#issuecomment-273512333:806,Deployability,configurat,configuration,806,"* Yes, this sounds like a pybind11 update issue. Any pybind11 update requires a _full_ recompile. But it sounds like you've got that taken care of with the fresh objdir. Fortunately, now that pybind has hit 2.0, we plan to stick with that version, so these problems will be fewer.; * Very observant on the compilers detected for pybind. But it really doesn't matter because ""compilation"" and installation of pybind is just copying a dozen files into place.; * On the python detection, there's two places this could be happening, and one, like the above is irrelevant. It's the second one (in the psi4-core target) that really matters. Could you send me your analogs of the CMake output snippets below? Or send me the whole thing, but it'll have to be both the initial CMake configuration and the psi4-core configuration that runs during the course of the compilation. Psi4 and pybind11 use exactly the same Python detection scheme, so I'm surprised and would like to understand what's happening in your setup.; * As far as actually telling psi4 and cmake what Python to use w/o editing CMakeCache's, I'd recc setting one (EXE) or all of https://github.com/psi4/psi4/blob/master/CMakeLists.txt#L39-L41 . But my impression is that you shouldn't have to. Main CMake configuration; ```; -- Setting (unspecified) option CMAKE_INSTALL_MESSAGE: LAZY; -- Setting (unspecified) option psi4_CXX_STANDARD: 11; -- Found PythonInterp: /theoryfs2/ds/cdsgroup/miniconda/envs/texternals35/bin/python3.5 (found version ""3.5.2"") ; -- Found PythonLibs: /theoryfs2/ds/cdsgroup/miniconda/envs/texternals35/lib/libpython3.5m.so; -- Found Python 3.5: /theoryfs2/ds/cdsgroup/miniconda/envs/texternals35/bin/python3.5; -- Suitable CheMPS2 could not be located, Building CheMPS2 instead.; -- Suitable dkh could not be located, Building dkh instead.; -- Found libefp: /theoryfs2/ds/cdsgroup/miniconda/envs/texternals35/lib/libefp.so (found version 1.3.0); -- Found gdma: /theoryfs2/ds/cdsgroup/miniconda/envs/texternals35/lib/li",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/577#issuecomment-273512333
https://github.com/psi4/psi4/issues/577#issuecomment-273512333:1263,Deployability,configurat,configuration,1263,"cause ""compilation"" and installation of pybind is just copying a dozen files into place.; * On the python detection, there's two places this could be happening, and one, like the above is irrelevant. It's the second one (in the psi4-core target) that really matters. Could you send me your analogs of the CMake output snippets below? Or send me the whole thing, but it'll have to be both the initial CMake configuration and the psi4-core configuration that runs during the course of the compilation. Psi4 and pybind11 use exactly the same Python detection scheme, so I'm surprised and would like to understand what's happening in your setup.; * As far as actually telling psi4 and cmake what Python to use w/o editing CMakeCache's, I'd recc setting one (EXE) or all of https://github.com/psi4/psi4/blob/master/CMakeLists.txt#L39-L41 . But my impression is that you shouldn't have to. Main CMake configuration; ```; -- Setting (unspecified) option CMAKE_INSTALL_MESSAGE: LAZY; -- Setting (unspecified) option psi4_CXX_STANDARD: 11; -- Found PythonInterp: /theoryfs2/ds/cdsgroup/miniconda/envs/texternals35/bin/python3.5 (found version ""3.5.2"") ; -- Found PythonLibs: /theoryfs2/ds/cdsgroup/miniconda/envs/texternals35/lib/libpython3.5m.so; -- Found Python 3.5: /theoryfs2/ds/cdsgroup/miniconda/envs/texternals35/bin/python3.5; -- Suitable CheMPS2 could not be located, Building CheMPS2 instead.; -- Suitable dkh could not be located, Building dkh instead.; -- Found libefp: /theoryfs2/ds/cdsgroup/miniconda/envs/texternals35/lib/libefp.so (found version 1.3.0); -- Found gdma: /theoryfs2/ds/cdsgroup/miniconda/envs/texternals35/lib/libgdma.so (found version 2.2.06); -- Found libint: /theoryfs2/ds/cdsgroup/miniconda/envs/texternals35/lib/libint.so (found version 1.1.6); -- Suitable pybind11 could not be located, Building pybind11 instead.; -- Found GCC 5.2.0; ```; Then you change into your objdir and pybind11 and other dependencies compile. Finally you get to:; ```; Scanning dependencies of targ",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/577#issuecomment-273512333
https://github.com/psi4/psi4/issues/577#issuecomment-273512333:2291,Integrability,depend,dependencies,2291,"uration; ```; -- Setting (unspecified) option CMAKE_INSTALL_MESSAGE: LAZY; -- Setting (unspecified) option psi4_CXX_STANDARD: 11; -- Found PythonInterp: /theoryfs2/ds/cdsgroup/miniconda/envs/texternals35/bin/python3.5 (found version ""3.5.2"") ; -- Found PythonLibs: /theoryfs2/ds/cdsgroup/miniconda/envs/texternals35/lib/libpython3.5m.so; -- Found Python 3.5: /theoryfs2/ds/cdsgroup/miniconda/envs/texternals35/bin/python3.5; -- Suitable CheMPS2 could not be located, Building CheMPS2 instead.; -- Suitable dkh could not be located, Building dkh instead.; -- Found libefp: /theoryfs2/ds/cdsgroup/miniconda/envs/texternals35/lib/libefp.so (found version 1.3.0); -- Found gdma: /theoryfs2/ds/cdsgroup/miniconda/envs/texternals35/lib/libgdma.so (found version 2.2.06); -- Found libint: /theoryfs2/ds/cdsgroup/miniconda/envs/texternals35/lib/libint.so (found version 1.1.6); -- Suitable pybind11 could not be located, Building pybind11 instead.; -- Found GCC 5.2.0; ```; Then you change into your objdir and pybind11 and other dependencies compile. Finally you get to:; ```; Scanning dependencies of target psi4-core; ...; -- The CXX compiler identification is Intel 16.0.3.20160415; -- Check for working CXX compiler: /theoryfs2/common/software/intel2016/compilers_and_libraries_2016.3.210/linux/bin/intel64/icpc; -- Check for working CXX compiler: /theoryfs2/common/software/intel2016/compilers_and_libraries_2016.3.210/linux/bin/intel64/icpc -- works; -- Detecting CXX compiler ABI info; -- Detecting CXX compiler ABI info - done; -- Checking for restrict keyword; -- keyword found : __restrict__; -- Found PythonInterp: /theoryfs2/ds/cdsgroup/miniconda/envs/texternals35/bin/python3.5 (found version ""3.5.2"") ; -- Found PythonLibs: /theoryfs2/ds/cdsgroup/miniconda/envs/texternals35/lib/libpython3.5m.so; -- Using pybind11: /theoryfs2/ds/cdsgroup/psi4-compile/hrw-dgasfork3/objdir1/stage/usr/local/psi4/include (version 2.0.0 for Py3.5.2 and -std=c++11); -- Using Python 3.5: /theoryfs2/ds/cdsgroup/min",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/577#issuecomment-273512333
https://github.com/psi4/psi4/issues/577#issuecomment-273512333:2348,Integrability,depend,dependencies,2348,"Setting (unspecified) option psi4_CXX_STANDARD: 11; -- Found PythonInterp: /theoryfs2/ds/cdsgroup/miniconda/envs/texternals35/bin/python3.5 (found version ""3.5.2"") ; -- Found PythonLibs: /theoryfs2/ds/cdsgroup/miniconda/envs/texternals35/lib/libpython3.5m.so; -- Found Python 3.5: /theoryfs2/ds/cdsgroup/miniconda/envs/texternals35/bin/python3.5; -- Suitable CheMPS2 could not be located, Building CheMPS2 instead.; -- Suitable dkh could not be located, Building dkh instead.; -- Found libefp: /theoryfs2/ds/cdsgroup/miniconda/envs/texternals35/lib/libefp.so (found version 1.3.0); -- Found gdma: /theoryfs2/ds/cdsgroup/miniconda/envs/texternals35/lib/libgdma.so (found version 2.2.06); -- Found libint: /theoryfs2/ds/cdsgroup/miniconda/envs/texternals35/lib/libint.so (found version 1.1.6); -- Suitable pybind11 could not be located, Building pybind11 instead.; -- Found GCC 5.2.0; ```; Then you change into your objdir and pybind11 and other dependencies compile. Finally you get to:; ```; Scanning dependencies of target psi4-core; ...; -- The CXX compiler identification is Intel 16.0.3.20160415; -- Check for working CXX compiler: /theoryfs2/common/software/intel2016/compilers_and_libraries_2016.3.210/linux/bin/intel64/icpc; -- Check for working CXX compiler: /theoryfs2/common/software/intel2016/compilers_and_libraries_2016.3.210/linux/bin/intel64/icpc -- works; -- Detecting CXX compiler ABI info; -- Detecting CXX compiler ABI info - done; -- Checking for restrict keyword; -- keyword found : __restrict__; -- Found PythonInterp: /theoryfs2/ds/cdsgroup/miniconda/envs/texternals35/bin/python3.5 (found version ""3.5.2"") ; -- Found PythonLibs: /theoryfs2/ds/cdsgroup/miniconda/envs/texternals35/lib/libpython3.5m.so; -- Using pybind11: /theoryfs2/ds/cdsgroup/psi4-compile/hrw-dgasfork3/objdir1/stage/usr/local/psi4/include (version 2.0.0 for Py3.5.2 and -std=c++11); -- Using Python 3.5: /theoryfs2/ds/cdsgroup/miniconda/envs/texternals35/bin/python3.5; ...; -- Using CheMPS2: /theoryfs2/ds/c",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/577#issuecomment-273512333
https://github.com/psi4/psi4/issues/577#issuecomment-273512333:774,Modifiability,config,configuration,774,"* Yes, this sounds like a pybind11 update issue. Any pybind11 update requires a _full_ recompile. But it sounds like you've got that taken care of with the fresh objdir. Fortunately, now that pybind has hit 2.0, we plan to stick with that version, so these problems will be fewer.; * Very observant on the compilers detected for pybind. But it really doesn't matter because ""compilation"" and installation of pybind is just copying a dozen files into place.; * On the python detection, there's two places this could be happening, and one, like the above is irrelevant. It's the second one (in the psi4-core target) that really matters. Could you send me your analogs of the CMake output snippets below? Or send me the whole thing, but it'll have to be both the initial CMake configuration and the psi4-core configuration that runs during the course of the compilation. Psi4 and pybind11 use exactly the same Python detection scheme, so I'm surprised and would like to understand what's happening in your setup.; * As far as actually telling psi4 and cmake what Python to use w/o editing CMakeCache's, I'd recc setting one (EXE) or all of https://github.com/psi4/psi4/blob/master/CMakeLists.txt#L39-L41 . But my impression is that you shouldn't have to. Main CMake configuration; ```; -- Setting (unspecified) option CMAKE_INSTALL_MESSAGE: LAZY; -- Setting (unspecified) option psi4_CXX_STANDARD: 11; -- Found PythonInterp: /theoryfs2/ds/cdsgroup/miniconda/envs/texternals35/bin/python3.5 (found version ""3.5.2"") ; -- Found PythonLibs: /theoryfs2/ds/cdsgroup/miniconda/envs/texternals35/lib/libpython3.5m.so; -- Found Python 3.5: /theoryfs2/ds/cdsgroup/miniconda/envs/texternals35/bin/python3.5; -- Suitable CheMPS2 could not be located, Building CheMPS2 instead.; -- Suitable dkh could not be located, Building dkh instead.; -- Found libefp: /theoryfs2/ds/cdsgroup/miniconda/envs/texternals35/lib/libefp.so (found version 1.3.0); -- Found gdma: /theoryfs2/ds/cdsgroup/miniconda/envs/texternals35/lib/li",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/577#issuecomment-273512333
https://github.com/psi4/psi4/issues/577#issuecomment-273512333:806,Modifiability,config,configuration,806,"* Yes, this sounds like a pybind11 update issue. Any pybind11 update requires a _full_ recompile. But it sounds like you've got that taken care of with the fresh objdir. Fortunately, now that pybind has hit 2.0, we plan to stick with that version, so these problems will be fewer.; * Very observant on the compilers detected for pybind. But it really doesn't matter because ""compilation"" and installation of pybind is just copying a dozen files into place.; * On the python detection, there's two places this could be happening, and one, like the above is irrelevant. It's the second one (in the psi4-core target) that really matters. Could you send me your analogs of the CMake output snippets below? Or send me the whole thing, but it'll have to be both the initial CMake configuration and the psi4-core configuration that runs during the course of the compilation. Psi4 and pybind11 use exactly the same Python detection scheme, so I'm surprised and would like to understand what's happening in your setup.; * As far as actually telling psi4 and cmake what Python to use w/o editing CMakeCache's, I'd recc setting one (EXE) or all of https://github.com/psi4/psi4/blob/master/CMakeLists.txt#L39-L41 . But my impression is that you shouldn't have to. Main CMake configuration; ```; -- Setting (unspecified) option CMAKE_INSTALL_MESSAGE: LAZY; -- Setting (unspecified) option psi4_CXX_STANDARD: 11; -- Found PythonInterp: /theoryfs2/ds/cdsgroup/miniconda/envs/texternals35/bin/python3.5 (found version ""3.5.2"") ; -- Found PythonLibs: /theoryfs2/ds/cdsgroup/miniconda/envs/texternals35/lib/libpython3.5m.so; -- Found Python 3.5: /theoryfs2/ds/cdsgroup/miniconda/envs/texternals35/bin/python3.5; -- Suitable CheMPS2 could not be located, Building CheMPS2 instead.; -- Suitable dkh could not be located, Building dkh instead.; -- Found libefp: /theoryfs2/ds/cdsgroup/miniconda/envs/texternals35/lib/libefp.so (found version 1.3.0); -- Found gdma: /theoryfs2/ds/cdsgroup/miniconda/envs/texternals35/lib/li",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/577#issuecomment-273512333
https://github.com/psi4/psi4/issues/577#issuecomment-273512333:1263,Modifiability,config,configuration,1263,"cause ""compilation"" and installation of pybind is just copying a dozen files into place.; * On the python detection, there's two places this could be happening, and one, like the above is irrelevant. It's the second one (in the psi4-core target) that really matters. Could you send me your analogs of the CMake output snippets below? Or send me the whole thing, but it'll have to be both the initial CMake configuration and the psi4-core configuration that runs during the course of the compilation. Psi4 and pybind11 use exactly the same Python detection scheme, so I'm surprised and would like to understand what's happening in your setup.; * As far as actually telling psi4 and cmake what Python to use w/o editing CMakeCache's, I'd recc setting one (EXE) or all of https://github.com/psi4/psi4/blob/master/CMakeLists.txt#L39-L41 . But my impression is that you shouldn't have to. Main CMake configuration; ```; -- Setting (unspecified) option CMAKE_INSTALL_MESSAGE: LAZY; -- Setting (unspecified) option psi4_CXX_STANDARD: 11; -- Found PythonInterp: /theoryfs2/ds/cdsgroup/miniconda/envs/texternals35/bin/python3.5 (found version ""3.5.2"") ; -- Found PythonLibs: /theoryfs2/ds/cdsgroup/miniconda/envs/texternals35/lib/libpython3.5m.so; -- Found Python 3.5: /theoryfs2/ds/cdsgroup/miniconda/envs/texternals35/bin/python3.5; -- Suitable CheMPS2 could not be located, Building CheMPS2 instead.; -- Suitable dkh could not be located, Building dkh instead.; -- Found libefp: /theoryfs2/ds/cdsgroup/miniconda/envs/texternals35/lib/libefp.so (found version 1.3.0); -- Found gdma: /theoryfs2/ds/cdsgroup/miniconda/envs/texternals35/lib/libgdma.so (found version 2.2.06); -- Found libint: /theoryfs2/ds/cdsgroup/miniconda/envs/texternals35/lib/libint.so (found version 1.1.6); -- Suitable pybind11 could not be located, Building pybind11 instead.; -- Found GCC 5.2.0; ```; Then you change into your objdir and pybind11 and other dependencies compile. Finally you get to:; ```; Scanning dependencies of targ",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/577#issuecomment-273512333
https://github.com/psi4/psi4/issues/577#issuecomment-273512333:316,Safety,detect,detected,316,"* Yes, this sounds like a pybind11 update issue. Any pybind11 update requires a _full_ recompile. But it sounds like you've got that taken care of with the fresh objdir. Fortunately, now that pybind has hit 2.0, we plan to stick with that version, so these problems will be fewer.; * Very observant on the compilers detected for pybind. But it really doesn't matter because ""compilation"" and installation of pybind is just copying a dozen files into place.; * On the python detection, there's two places this could be happening, and one, like the above is irrelevant. It's the second one (in the psi4-core target) that really matters. Could you send me your analogs of the CMake output snippets below? Or send me the whole thing, but it'll have to be both the initial CMake configuration and the psi4-core configuration that runs during the course of the compilation. Psi4 and pybind11 use exactly the same Python detection scheme, so I'm surprised and would like to understand what's happening in your setup.; * As far as actually telling psi4 and cmake what Python to use w/o editing CMakeCache's, I'd recc setting one (EXE) or all of https://github.com/psi4/psi4/blob/master/CMakeLists.txt#L39-L41 . But my impression is that you shouldn't have to. Main CMake configuration; ```; -- Setting (unspecified) option CMAKE_INSTALL_MESSAGE: LAZY; -- Setting (unspecified) option psi4_CXX_STANDARD: 11; -- Found PythonInterp: /theoryfs2/ds/cdsgroup/miniconda/envs/texternals35/bin/python3.5 (found version ""3.5.2"") ; -- Found PythonLibs: /theoryfs2/ds/cdsgroup/miniconda/envs/texternals35/lib/libpython3.5m.so; -- Found Python 3.5: /theoryfs2/ds/cdsgroup/miniconda/envs/texternals35/bin/python3.5; -- Suitable CheMPS2 could not be located, Building CheMPS2 instead.; -- Suitable dkh could not be located, Building dkh instead.; -- Found libefp: /theoryfs2/ds/cdsgroup/miniconda/envs/texternals35/lib/libefp.so (found version 1.3.0); -- Found gdma: /theoryfs2/ds/cdsgroup/miniconda/envs/texternals35/lib/li",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/577#issuecomment-273512333
https://github.com/psi4/psi4/issues/577#issuecomment-273512333:474,Safety,detect,detection,474,"* Yes, this sounds like a pybind11 update issue. Any pybind11 update requires a _full_ recompile. But it sounds like you've got that taken care of with the fresh objdir. Fortunately, now that pybind has hit 2.0, we plan to stick with that version, so these problems will be fewer.; * Very observant on the compilers detected for pybind. But it really doesn't matter because ""compilation"" and installation of pybind is just copying a dozen files into place.; * On the python detection, there's two places this could be happening, and one, like the above is irrelevant. It's the second one (in the psi4-core target) that really matters. Could you send me your analogs of the CMake output snippets below? Or send me the whole thing, but it'll have to be both the initial CMake configuration and the psi4-core configuration that runs during the course of the compilation. Psi4 and pybind11 use exactly the same Python detection scheme, so I'm surprised and would like to understand what's happening in your setup.; * As far as actually telling psi4 and cmake what Python to use w/o editing CMakeCache's, I'd recc setting one (EXE) or all of https://github.com/psi4/psi4/blob/master/CMakeLists.txt#L39-L41 . But my impression is that you shouldn't have to. Main CMake configuration; ```; -- Setting (unspecified) option CMAKE_INSTALL_MESSAGE: LAZY; -- Setting (unspecified) option psi4_CXX_STANDARD: 11; -- Found PythonInterp: /theoryfs2/ds/cdsgroup/miniconda/envs/texternals35/bin/python3.5 (found version ""3.5.2"") ; -- Found PythonLibs: /theoryfs2/ds/cdsgroup/miniconda/envs/texternals35/lib/libpython3.5m.so; -- Found Python 3.5: /theoryfs2/ds/cdsgroup/miniconda/envs/texternals35/bin/python3.5; -- Suitable CheMPS2 could not be located, Building CheMPS2 instead.; -- Suitable dkh could not be located, Building dkh instead.; -- Found libefp: /theoryfs2/ds/cdsgroup/miniconda/envs/texternals35/lib/libefp.so (found version 1.3.0); -- Found gdma: /theoryfs2/ds/cdsgroup/miniconda/envs/texternals35/lib/li",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/577#issuecomment-273512333
https://github.com/psi4/psi4/issues/577#issuecomment-273512333:914,Safety,detect,detection,914,"* Yes, this sounds like a pybind11 update issue. Any pybind11 update requires a _full_ recompile. But it sounds like you've got that taken care of with the fresh objdir. Fortunately, now that pybind has hit 2.0, we plan to stick with that version, so these problems will be fewer.; * Very observant on the compilers detected for pybind. But it really doesn't matter because ""compilation"" and installation of pybind is just copying a dozen files into place.; * On the python detection, there's two places this could be happening, and one, like the above is irrelevant. It's the second one (in the psi4-core target) that really matters. Could you send me your analogs of the CMake output snippets below? Or send me the whole thing, but it'll have to be both the initial CMake configuration and the psi4-core configuration that runs during the course of the compilation. Psi4 and pybind11 use exactly the same Python detection scheme, so I'm surprised and would like to understand what's happening in your setup.; * As far as actually telling psi4 and cmake what Python to use w/o editing CMakeCache's, I'd recc setting one (EXE) or all of https://github.com/psi4/psi4/blob/master/CMakeLists.txt#L39-L41 . But my impression is that you shouldn't have to. Main CMake configuration; ```; -- Setting (unspecified) option CMAKE_INSTALL_MESSAGE: LAZY; -- Setting (unspecified) option psi4_CXX_STANDARD: 11; -- Found PythonInterp: /theoryfs2/ds/cdsgroup/miniconda/envs/texternals35/bin/python3.5 (found version ""3.5.2"") ; -- Found PythonLibs: /theoryfs2/ds/cdsgroup/miniconda/envs/texternals35/lib/libpython3.5m.so; -- Found Python 3.5: /theoryfs2/ds/cdsgroup/miniconda/envs/texternals35/bin/python3.5; -- Suitable CheMPS2 could not be located, Building CheMPS2 instead.; -- Suitable dkh could not be located, Building dkh instead.; -- Found libefp: /theoryfs2/ds/cdsgroup/miniconda/envs/texternals35/lib/libefp.so (found version 1.3.0); -- Found gdma: /theoryfs2/ds/cdsgroup/miniconda/envs/texternals35/lib/li",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/577#issuecomment-273512333
https://github.com/psi4/psi4/issues/577#issuecomment-273512333:2722,Safety,Detect,Detecting,2722,"stead.; -- Found libefp: /theoryfs2/ds/cdsgroup/miniconda/envs/texternals35/lib/libefp.so (found version 1.3.0); -- Found gdma: /theoryfs2/ds/cdsgroup/miniconda/envs/texternals35/lib/libgdma.so (found version 2.2.06); -- Found libint: /theoryfs2/ds/cdsgroup/miniconda/envs/texternals35/lib/libint.so (found version 1.1.6); -- Suitable pybind11 could not be located, Building pybind11 instead.; -- Found GCC 5.2.0; ```; Then you change into your objdir and pybind11 and other dependencies compile. Finally you get to:; ```; Scanning dependencies of target psi4-core; ...; -- The CXX compiler identification is Intel 16.0.3.20160415; -- Check for working CXX compiler: /theoryfs2/common/software/intel2016/compilers_and_libraries_2016.3.210/linux/bin/intel64/icpc; -- Check for working CXX compiler: /theoryfs2/common/software/intel2016/compilers_and_libraries_2016.3.210/linux/bin/intel64/icpc -- works; -- Detecting CXX compiler ABI info; -- Detecting CXX compiler ABI info - done; -- Checking for restrict keyword; -- keyword found : __restrict__; -- Found PythonInterp: /theoryfs2/ds/cdsgroup/miniconda/envs/texternals35/bin/python3.5 (found version ""3.5.2"") ; -- Found PythonLibs: /theoryfs2/ds/cdsgroup/miniconda/envs/texternals35/lib/libpython3.5m.so; -- Using pybind11: /theoryfs2/ds/cdsgroup/psi4-compile/hrw-dgasfork3/objdir1/stage/usr/local/psi4/include (version 2.0.0 for Py3.5.2 and -std=c++11); -- Using Python 3.5: /theoryfs2/ds/cdsgroup/miniconda/envs/texternals35/bin/python3.5; ...; -- Using CheMPS2: /theoryfs2/ds/cdsgroup/psi4-compile/hrw-dgasfork3/objdir1/stage/usr/local/psi4/lib/libchemps2.so.2 (version 1.8.3); -- Using dkh: /theoryfs2/ds/cdsgroup/psi4-compile/hrw-dgasfork3/objdir1/stage/usr/local/psi4/lib/libdkh.so (version 1.2); -- Using libefp: /theoryfs2/ds/cdsgroup/miniconda/envs/texternals35/lib/libefp.so (version 1.3.0); -- Using Libxc: /theoryfs2/ds/cdsgroup/psi4-compile/hrw-dgasfork3/objdir1/stage/usr/local/psi4/lib/libxc.so (version 3.0.0); -- Disabled erd; -- Us",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/577#issuecomment-273512333
https://github.com/psi4/psi4/issues/577#issuecomment-273512333:2758,Safety,Detect,Detecting,2758,"stead.; -- Found libefp: /theoryfs2/ds/cdsgroup/miniconda/envs/texternals35/lib/libefp.so (found version 1.3.0); -- Found gdma: /theoryfs2/ds/cdsgroup/miniconda/envs/texternals35/lib/libgdma.so (found version 2.2.06); -- Found libint: /theoryfs2/ds/cdsgroup/miniconda/envs/texternals35/lib/libint.so (found version 1.1.6); -- Suitable pybind11 could not be located, Building pybind11 instead.; -- Found GCC 5.2.0; ```; Then you change into your objdir and pybind11 and other dependencies compile. Finally you get to:; ```; Scanning dependencies of target psi4-core; ...; -- The CXX compiler identification is Intel 16.0.3.20160415; -- Check for working CXX compiler: /theoryfs2/common/software/intel2016/compilers_and_libraries_2016.3.210/linux/bin/intel64/icpc; -- Check for working CXX compiler: /theoryfs2/common/software/intel2016/compilers_and_libraries_2016.3.210/linux/bin/intel64/icpc -- works; -- Detecting CXX compiler ABI info; -- Detecting CXX compiler ABI info - done; -- Checking for restrict keyword; -- keyword found : __restrict__; -- Found PythonInterp: /theoryfs2/ds/cdsgroup/miniconda/envs/texternals35/bin/python3.5 (found version ""3.5.2"") ; -- Found PythonLibs: /theoryfs2/ds/cdsgroup/miniconda/envs/texternals35/lib/libpython3.5m.so; -- Using pybind11: /theoryfs2/ds/cdsgroup/psi4-compile/hrw-dgasfork3/objdir1/stage/usr/local/psi4/include (version 2.0.0 for Py3.5.2 and -std=c++11); -- Using Python 3.5: /theoryfs2/ds/cdsgroup/miniconda/envs/texternals35/bin/python3.5; ...; -- Using CheMPS2: /theoryfs2/ds/cdsgroup/psi4-compile/hrw-dgasfork3/objdir1/stage/usr/local/psi4/lib/libchemps2.so.2 (version 1.8.3); -- Using dkh: /theoryfs2/ds/cdsgroup/psi4-compile/hrw-dgasfork3/objdir1/stage/usr/local/psi4/lib/libdkh.so (version 1.2); -- Using libefp: /theoryfs2/ds/cdsgroup/miniconda/envs/texternals35/lib/libefp.so (version 1.3.0); -- Using Libxc: /theoryfs2/ds/cdsgroup/psi4-compile/hrw-dgasfork3/objdir1/stage/usr/local/psi4/lib/libxc.so (version 3.0.0); -- Disabled erd; -- Us",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/577#issuecomment-273512333
https://github.com/psi4/psi4/issues/577#issuecomment-273732640:2361,Availability,down,download,2361,"ne; -- Detecting CXX compile features; -- Detecting CXX compile features - done; -- Checking for restrict keyword; -- keyword found : __restrict__; -- Found PythonInterp: /usr/bin/python (found version ""2.7.12"") ; -- Found PythonLibs: /usr/lib64/libpython2.7.so ; -- Using pybind11: /usr/qc/psi4.git/objdir/stage/usr/qc/psi4.bin/include (version 2.0.0 for Py2.7.12 and -std=c++11) ; -- Using Python 2.7: /usr/bin/python ; -- Looking for include file pthread.h ; -- Looking for include file pthread.h - found ; -- Looking for pthread_create ; -- Looking for pthread_create - found ; -- Found Threads: TRUE ; -- Found libdl: /usr/lib64/libdl.so ; -- Disabled CheMPS2 ; -- Disabled dkh ; -- Using libefp: /usr/qc/psi4.bin/lib/libefp.a (version 1.3.0) ; -- Disabled erd ; -- Disabled gdma ; -- Using libint: /usr/qc/psi4.bin/lib/libint.a (version 1.1.6) ; -- Configuring done ; -- Generating done ; ``` . And just for completeness the pybind11 part:. ```; [ 12%] Performing download step (git clone) for 'pybind11_external'; Cloning into 'pybind11_external'...; Note: checking out 'v2.0.0'. You are in 'detached HEAD' state. You can look around, make experimental; changes and commit them, and you can discard any commits you make in this; state without impacting any branches by performing another checkout. If you want to create a new branch to retain commits you create, you may; do so (now or later) by using -b with the checkout command again. Example:. git checkout -b <new-branch-name>. HEAD is now at e33ef9c... v2.0.0 release; Submodule 'tools/clang' (https://github.com/wjakob/clang-cindex-python3) registered for path 'tools/clang'; Cloning into 'tools/clang'...; Submodule path 'tools/clang': checked out '254c7a91e3c6aa254e113197604dafb443f4d429'; [ 25%] No update step for 'pybind11_external'; [ 25%] No patch step for 'pybind11_external'; [ 31%] Performing configure step for 'pybind11_external'; -- The C compiler identification is GNU 5.4.0; -- The CXX compiler identification is GNU 5.4",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/577#issuecomment-273732640
https://github.com/psi4/psi4/issues/577#issuecomment-273732640:4340,Availability,error,error,4340," v2.0.0 release; Submodule 'tools/clang' (https://github.com/wjakob/clang-cindex-python3) registered for path 'tools/clang'; Cloning into 'tools/clang'...; Submodule path 'tools/clang': checked out '254c7a91e3c6aa254e113197604dafb443f4d429'; [ 25%] No update step for 'pybind11_external'; [ 25%] No patch step for 'pybind11_external'; [ 31%] Performing configure step for 'pybind11_external'; -- The C compiler identification is GNU 5.4.0; -- The CXX compiler identification is GNU 5.4.0; -- Check for working C compiler: /usr/qc/gcc54/bin/gcc; -- Check for working C compiler: /usr/qc/gcc54/bin/gcc -- works; -- Detecting C compiler ABI info; -- Detecting C compiler ABI info - done; -- Detecting C compile features; -- Detecting C compile features - done; -- Check for working CXX compiler: /usr/qc/gcc54/bin/g++; -- Check for working CXX compiler: /usr/qc/gcc54/bin/g++ -- works; -- Detecting CXX compiler ABI info; -- Detecting CXX compiler ABI info - done; -- Detecting CXX compile features; -- Detecting CXX compile features - done; -- Found PythonInterp: /usr/bin/python3.4 (found version ""3.4.5"") ; -- Found PythonLibs: /usr/lib64/libpython3.4m.so; -- pybind11 v2.0.0; -- Configuring done; -- Generating done; -- Build files have been written to: /usr/qc/psi4.git/objdir/external/upstream/pybind11/pybind11_external-prefix/src/pybind11_external-build. ```. For reasons unknown to me I cannot reproduce my previous compilation error. Previously I could reproduce it even when cloning a brand new copy of psi4. Now it finishes the compilation normally.; Maybe the old psi4 installation directory interfered somehow? Just guessing at this point. However, I still cannot execute psi4. If I use a symlink to the installed binary I get a python error:; ```; import psi4; ImportError: No module named psi4; ```; If I use the full path i get `Intel MKL FATAL ERROR: Cannot load libmkl_avx.so or libmkl_def.so.` instead. But maybe PR https://github.com/psi4/psi4/pull/563 will fix these things for me.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/577#issuecomment-273732640
https://github.com/psi4/psi4/issues/577#issuecomment-273732640:4653,Availability,error,error,4653," v2.0.0 release; Submodule 'tools/clang' (https://github.com/wjakob/clang-cindex-python3) registered for path 'tools/clang'; Cloning into 'tools/clang'...; Submodule path 'tools/clang': checked out '254c7a91e3c6aa254e113197604dafb443f4d429'; [ 25%] No update step for 'pybind11_external'; [ 25%] No patch step for 'pybind11_external'; [ 31%] Performing configure step for 'pybind11_external'; -- The C compiler identification is GNU 5.4.0; -- The CXX compiler identification is GNU 5.4.0; -- Check for working C compiler: /usr/qc/gcc54/bin/gcc; -- Check for working C compiler: /usr/qc/gcc54/bin/gcc -- works; -- Detecting C compiler ABI info; -- Detecting C compiler ABI info - done; -- Detecting C compile features; -- Detecting C compile features - done; -- Check for working CXX compiler: /usr/qc/gcc54/bin/g++; -- Check for working CXX compiler: /usr/qc/gcc54/bin/g++ -- works; -- Detecting CXX compiler ABI info; -- Detecting CXX compiler ABI info - done; -- Detecting CXX compile features; -- Detecting CXX compile features - done; -- Found PythonInterp: /usr/bin/python3.4 (found version ""3.4.5"") ; -- Found PythonLibs: /usr/lib64/libpython3.4m.so; -- pybind11 v2.0.0; -- Configuring done; -- Generating done; -- Build files have been written to: /usr/qc/psi4.git/objdir/external/upstream/pybind11/pybind11_external-prefix/src/pybind11_external-build. ```. For reasons unknown to me I cannot reproduce my previous compilation error. Previously I could reproduce it even when cloning a brand new copy of psi4. Now it finishes the compilation normally.; Maybe the old psi4 installation directory interfered somehow? Just guessing at this point. However, I still cannot execute psi4. If I use a symlink to the installed binary I get a python error:; ```; import psi4; ImportError: No module named psi4; ```; If I use the full path i get `Intel MKL FATAL ERROR: Cannot load libmkl_avx.so or libmkl_def.so.` instead. But maybe PR https://github.com/psi4/psi4/pull/563 will fix these things for me.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/577#issuecomment-273732640
https://github.com/psi4/psi4/issues/577#issuecomment-273732640:4765,Availability,ERROR,ERROR,4765," v2.0.0 release; Submodule 'tools/clang' (https://github.com/wjakob/clang-cindex-python3) registered for path 'tools/clang'; Cloning into 'tools/clang'...; Submodule path 'tools/clang': checked out '254c7a91e3c6aa254e113197604dafb443f4d429'; [ 25%] No update step for 'pybind11_external'; [ 25%] No patch step for 'pybind11_external'; [ 31%] Performing configure step for 'pybind11_external'; -- The C compiler identification is GNU 5.4.0; -- The CXX compiler identification is GNU 5.4.0; -- Check for working C compiler: /usr/qc/gcc54/bin/gcc; -- Check for working C compiler: /usr/qc/gcc54/bin/gcc -- works; -- Detecting C compiler ABI info; -- Detecting C compiler ABI info - done; -- Detecting C compile features; -- Detecting C compile features - done; -- Check for working CXX compiler: /usr/qc/gcc54/bin/g++; -- Check for working CXX compiler: /usr/qc/gcc54/bin/g++ -- works; -- Detecting CXX compiler ABI info; -- Detecting CXX compiler ABI info - done; -- Detecting CXX compile features; -- Detecting CXX compile features - done; -- Found PythonInterp: /usr/bin/python3.4 (found version ""3.4.5"") ; -- Found PythonLibs: /usr/lib64/libpython3.4m.so; -- pybind11 v2.0.0; -- Configuring done; -- Generating done; -- Build files have been written to: /usr/qc/psi4.git/objdir/external/upstream/pybind11/pybind11_external-prefix/src/pybind11_external-build. ```. For reasons unknown to me I cannot reproduce my previous compilation error. Previously I could reproduce it even when cloning a brand new copy of psi4. Now it finishes the compilation normally.; Maybe the old psi4 installation directory interfered somehow? Just guessing at this point. However, I still cannot execute psi4. If I use a symlink to the installed binary I get a python error:; ```; import psi4; ImportError: No module named psi4; ```; If I use the full path i get `Intel MKL FATAL ERROR: Cannot load libmkl_avx.so or libmkl_def.so.` instead. But maybe PR https://github.com/psi4/psi4/pull/563 will fix these things for me.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/577#issuecomment-273732640
https://github.com/psi4/psi4/issues/577#issuecomment-273732640:2914,Deployability,release,release,2914,"ooking for pthread_create - found ; -- Found Threads: TRUE ; -- Found libdl: /usr/lib64/libdl.so ; -- Disabled CheMPS2 ; -- Disabled dkh ; -- Using libefp: /usr/qc/psi4.bin/lib/libefp.a (version 1.3.0) ; -- Disabled erd ; -- Disabled gdma ; -- Using libint: /usr/qc/psi4.bin/lib/libint.a (version 1.1.6) ; -- Configuring done ; -- Generating done ; ``` . And just for completeness the pybind11 part:. ```; [ 12%] Performing download step (git clone) for 'pybind11_external'; Cloning into 'pybind11_external'...; Note: checking out 'v2.0.0'. You are in 'detached HEAD' state. You can look around, make experimental; changes and commit them, and you can discard any commits you make in this; state without impacting any branches by performing another checkout. If you want to create a new branch to retain commits you create, you may; do so (now or later) by using -b with the checkout command again. Example:. git checkout -b <new-branch-name>. HEAD is now at e33ef9c... v2.0.0 release; Submodule 'tools/clang' (https://github.com/wjakob/clang-cindex-python3) registered for path 'tools/clang'; Cloning into 'tools/clang'...; Submodule path 'tools/clang': checked out '254c7a91e3c6aa254e113197604dafb443f4d429'; [ 25%] No update step for 'pybind11_external'; [ 25%] No patch step for 'pybind11_external'; [ 31%] Performing configure step for 'pybind11_external'; -- The C compiler identification is GNU 5.4.0; -- The CXX compiler identification is GNU 5.4.0; -- Check for working C compiler: /usr/qc/gcc54/bin/gcc; -- Check for working C compiler: /usr/qc/gcc54/bin/gcc -- works; -- Detecting C compiler ABI info; -- Detecting C compiler ABI info - done; -- Detecting C compile features; -- Detecting C compile features - done; -- Check for working CXX compiler: /usr/qc/gcc54/bin/g++; -- Check for working CXX compiler: /usr/qc/gcc54/bin/g++ -- works; -- Detecting CXX compiler ABI info; -- Detecting CXX compiler ABI info - done; -- Detecting CXX compile features; -- Detecting CXX compile features -",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/577#issuecomment-273732640
https://github.com/psi4/psi4/issues/577#issuecomment-273732640:3158,Deployability,update,update,3158,"qc/psi4.bin/lib/libint.a (version 1.1.6) ; -- Configuring done ; -- Generating done ; ``` . And just for completeness the pybind11 part:. ```; [ 12%] Performing download step (git clone) for 'pybind11_external'; Cloning into 'pybind11_external'...; Note: checking out 'v2.0.0'. You are in 'detached HEAD' state. You can look around, make experimental; changes and commit them, and you can discard any commits you make in this; state without impacting any branches by performing another checkout. If you want to create a new branch to retain commits you create, you may; do so (now or later) by using -b with the checkout command again. Example:. git checkout -b <new-branch-name>. HEAD is now at e33ef9c... v2.0.0 release; Submodule 'tools/clang' (https://github.com/wjakob/clang-cindex-python3) registered for path 'tools/clang'; Cloning into 'tools/clang'...; Submodule path 'tools/clang': checked out '254c7a91e3c6aa254e113197604dafb443f4d429'; [ 25%] No update step for 'pybind11_external'; [ 25%] No patch step for 'pybind11_external'; [ 31%] Performing configure step for 'pybind11_external'; -- The C compiler identification is GNU 5.4.0; -- The CXX compiler identification is GNU 5.4.0; -- Check for working C compiler: /usr/qc/gcc54/bin/gcc; -- Check for working C compiler: /usr/qc/gcc54/bin/gcc -- works; -- Detecting C compiler ABI info; -- Detecting C compiler ABI info - done; -- Detecting C compile features; -- Detecting C compile features - done; -- Check for working CXX compiler: /usr/qc/gcc54/bin/g++; -- Check for working CXX compiler: /usr/qc/gcc54/bin/g++ -- works; -- Detecting CXX compiler ABI info; -- Detecting CXX compiler ABI info - done; -- Detecting CXX compile features; -- Detecting CXX compile features - done; -- Found PythonInterp: /usr/bin/python3.4 (found version ""3.4.5"") ; -- Found PythonLibs: /usr/lib64/libpython3.4m.so; -- pybind11 v2.0.0; -- Configuring done; -- Generating done; -- Build files have been written to: /usr/qc/psi4.git/objdir/external/upstrea",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/577#issuecomment-273732640
https://github.com/psi4/psi4/issues/577#issuecomment-273732640:3205,Deployability,patch,patch,3205,"qc/psi4.bin/lib/libint.a (version 1.1.6) ; -- Configuring done ; -- Generating done ; ``` . And just for completeness the pybind11 part:. ```; [ 12%] Performing download step (git clone) for 'pybind11_external'; Cloning into 'pybind11_external'...; Note: checking out 'v2.0.0'. You are in 'detached HEAD' state. You can look around, make experimental; changes and commit them, and you can discard any commits you make in this; state without impacting any branches by performing another checkout. If you want to create a new branch to retain commits you create, you may; do so (now or later) by using -b with the checkout command again. Example:. git checkout -b <new-branch-name>. HEAD is now at e33ef9c... v2.0.0 release; Submodule 'tools/clang' (https://github.com/wjakob/clang-cindex-python3) registered for path 'tools/clang'; Cloning into 'tools/clang'...; Submodule path 'tools/clang': checked out '254c7a91e3c6aa254e113197604dafb443f4d429'; [ 25%] No update step for 'pybind11_external'; [ 25%] No patch step for 'pybind11_external'; [ 31%] Performing configure step for 'pybind11_external'; -- The C compiler identification is GNU 5.4.0; -- The CXX compiler identification is GNU 5.4.0; -- Check for working C compiler: /usr/qc/gcc54/bin/gcc; -- Check for working C compiler: /usr/qc/gcc54/bin/gcc -- works; -- Detecting C compiler ABI info; -- Detecting C compiler ABI info - done; -- Detecting C compile features; -- Detecting C compile features - done; -- Check for working CXX compiler: /usr/qc/gcc54/bin/g++; -- Check for working CXX compiler: /usr/qc/gcc54/bin/g++ -- works; -- Detecting CXX compiler ABI info; -- Detecting CXX compiler ABI info - done; -- Detecting CXX compile features; -- Detecting CXX compile features - done; -- Found PythonInterp: /usr/bin/python3.4 (found version ""3.4.5"") ; -- Found PythonLibs: /usr/lib64/libpython3.4m.so; -- pybind11 v2.0.0; -- Configuring done; -- Generating done; -- Build files have been written to: /usr/qc/psi4.git/objdir/external/upstrea",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/577#issuecomment-273732640
https://github.com/psi4/psi4/issues/577#issuecomment-273732640:4485,Deployability,install,installation,4485," v2.0.0 release; Submodule 'tools/clang' (https://github.com/wjakob/clang-cindex-python3) registered for path 'tools/clang'; Cloning into 'tools/clang'...; Submodule path 'tools/clang': checked out '254c7a91e3c6aa254e113197604dafb443f4d429'; [ 25%] No update step for 'pybind11_external'; [ 25%] No patch step for 'pybind11_external'; [ 31%] Performing configure step for 'pybind11_external'; -- The C compiler identification is GNU 5.4.0; -- The CXX compiler identification is GNU 5.4.0; -- Check for working C compiler: /usr/qc/gcc54/bin/gcc; -- Check for working C compiler: /usr/qc/gcc54/bin/gcc -- works; -- Detecting C compiler ABI info; -- Detecting C compiler ABI info - done; -- Detecting C compile features; -- Detecting C compile features - done; -- Check for working CXX compiler: /usr/qc/gcc54/bin/g++; -- Check for working CXX compiler: /usr/qc/gcc54/bin/g++ -- works; -- Detecting CXX compiler ABI info; -- Detecting CXX compiler ABI info - done; -- Detecting CXX compile features; -- Detecting CXX compile features - done; -- Found PythonInterp: /usr/bin/python3.4 (found version ""3.4.5"") ; -- Found PythonLibs: /usr/lib64/libpython3.4m.so; -- pybind11 v2.0.0; -- Configuring done; -- Generating done; -- Build files have been written to: /usr/qc/psi4.git/objdir/external/upstream/pybind11/pybind11_external-prefix/src/pybind11_external-build. ```. For reasons unknown to me I cannot reproduce my previous compilation error. Previously I could reproduce it even when cloning a brand new copy of psi4. Now it finishes the compilation normally.; Maybe the old psi4 installation directory interfered somehow? Just guessing at this point. However, I still cannot execute psi4. If I use a symlink to the installed binary I get a python error:; ```; import psi4; ImportError: No module named psi4; ```; If I use the full path i get `Intel MKL FATAL ERROR: Cannot load libmkl_avx.so or libmkl_def.so.` instead. But maybe PR https://github.com/psi4/psi4/pull/563 will fix these things for me.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/577#issuecomment-273732640
https://github.com/psi4/psi4/issues/577#issuecomment-273732640:4621,Deployability,install,installed,4621," v2.0.0 release; Submodule 'tools/clang' (https://github.com/wjakob/clang-cindex-python3) registered for path 'tools/clang'; Cloning into 'tools/clang'...; Submodule path 'tools/clang': checked out '254c7a91e3c6aa254e113197604dafb443f4d429'; [ 25%] No update step for 'pybind11_external'; [ 25%] No patch step for 'pybind11_external'; [ 31%] Performing configure step for 'pybind11_external'; -- The C compiler identification is GNU 5.4.0; -- The CXX compiler identification is GNU 5.4.0; -- Check for working C compiler: /usr/qc/gcc54/bin/gcc; -- Check for working C compiler: /usr/qc/gcc54/bin/gcc -- works; -- Detecting C compiler ABI info; -- Detecting C compiler ABI info - done; -- Detecting C compile features; -- Detecting C compile features - done; -- Check for working CXX compiler: /usr/qc/gcc54/bin/g++; -- Check for working CXX compiler: /usr/qc/gcc54/bin/g++ -- works; -- Detecting CXX compiler ABI info; -- Detecting CXX compiler ABI info - done; -- Detecting CXX compile features; -- Detecting CXX compile features - done; -- Found PythonInterp: /usr/bin/python3.4 (found version ""3.4.5"") ; -- Found PythonLibs: /usr/lib64/libpython3.4m.so; -- pybind11 v2.0.0; -- Configuring done; -- Generating done; -- Build files have been written to: /usr/qc/psi4.git/objdir/external/upstream/pybind11/pybind11_external-prefix/src/pybind11_external-build. ```. For reasons unknown to me I cannot reproduce my previous compilation error. Previously I could reproduce it even when cloning a brand new copy of psi4. Now it finishes the compilation normally.; Maybe the old psi4 installation directory interfered somehow? Just guessing at this point. However, I still cannot execute psi4. If I use a symlink to the installed binary I get a python error:; ```; import psi4; ImportError: No module named psi4; ```; If I use the full path i get `Intel MKL FATAL ERROR: Cannot load libmkl_avx.so or libmkl_def.so.` instead. But maybe PR https://github.com/psi4/psi4/pull/563 will fix these things for me.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/577#issuecomment-273732640
https://github.com/psi4/psi4/issues/577#issuecomment-273732640:2246,Modifiability,Config,Configuring,2246,"rking CXX compiler: /usr/qc/gcc54/bin/g++ -- works; -- Detecting CXX compiler ABI info; -- Detecting CXX compiler ABI info - done; -- Detecting CXX compile features; -- Detecting CXX compile features - done; -- Checking for restrict keyword; -- keyword found : __restrict__; -- Found PythonInterp: /usr/bin/python (found version ""2.7.12"") ; -- Found PythonLibs: /usr/lib64/libpython2.7.so ; -- Using pybind11: /usr/qc/psi4.git/objdir/stage/usr/qc/psi4.bin/include (version 2.0.0 for Py2.7.12 and -std=c++11) ; -- Using Python 2.7: /usr/bin/python ; -- Looking for include file pthread.h ; -- Looking for include file pthread.h - found ; -- Looking for pthread_create ; -- Looking for pthread_create - found ; -- Found Threads: TRUE ; -- Found libdl: /usr/lib64/libdl.so ; -- Disabled CheMPS2 ; -- Disabled dkh ; -- Using libefp: /usr/qc/psi4.bin/lib/libefp.a (version 1.3.0) ; -- Disabled erd ; -- Disabled gdma ; -- Using libint: /usr/qc/psi4.bin/lib/libint.a (version 1.1.6) ; -- Configuring done ; -- Generating done ; ``` . And just for completeness the pybind11 part:. ```; [ 12%] Performing download step (git clone) for 'pybind11_external'; Cloning into 'pybind11_external'...; Note: checking out 'v2.0.0'. You are in 'detached HEAD' state. You can look around, make experimental; changes and commit them, and you can discard any commits you make in this; state without impacting any branches by performing another checkout. If you want to create a new branch to retain commits you create, you may; do so (now or later) by using -b with the checkout command again. Example:. git checkout -b <new-branch-name>. HEAD is now at e33ef9c... v2.0.0 release; Submodule 'tools/clang' (https://github.com/wjakob/clang-cindex-python3) registered for path 'tools/clang'; Cloning into 'tools/clang'...; Submodule path 'tools/clang': checked out '254c7a91e3c6aa254e113197604dafb443f4d429'; [ 25%] No update step for 'pybind11_external'; [ 25%] No patch step for 'pybind11_external'; [ 31%] Performing config",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/577#issuecomment-273732640
https://github.com/psi4/psi4/issues/577#issuecomment-273732640:3259,Modifiability,config,configure,3259,"qc/psi4.bin/lib/libint.a (version 1.1.6) ; -- Configuring done ; -- Generating done ; ``` . And just for completeness the pybind11 part:. ```; [ 12%] Performing download step (git clone) for 'pybind11_external'; Cloning into 'pybind11_external'...; Note: checking out 'v2.0.0'. You are in 'detached HEAD' state. You can look around, make experimental; changes and commit them, and you can discard any commits you make in this; state without impacting any branches by performing another checkout. If you want to create a new branch to retain commits you create, you may; do so (now or later) by using -b with the checkout command again. Example:. git checkout -b <new-branch-name>. HEAD is now at e33ef9c... v2.0.0 release; Submodule 'tools/clang' (https://github.com/wjakob/clang-cindex-python3) registered for path 'tools/clang'; Cloning into 'tools/clang'...; Submodule path 'tools/clang': checked out '254c7a91e3c6aa254e113197604dafb443f4d429'; [ 25%] No update step for 'pybind11_external'; [ 25%] No patch step for 'pybind11_external'; [ 31%] Performing configure step for 'pybind11_external'; -- The C compiler identification is GNU 5.4.0; -- The CXX compiler identification is GNU 5.4.0; -- Check for working C compiler: /usr/qc/gcc54/bin/gcc; -- Check for working C compiler: /usr/qc/gcc54/bin/gcc -- works; -- Detecting C compiler ABI info; -- Detecting C compiler ABI info - done; -- Detecting C compile features; -- Detecting C compile features - done; -- Check for working CXX compiler: /usr/qc/gcc54/bin/g++; -- Check for working CXX compiler: /usr/qc/gcc54/bin/g++ -- works; -- Detecting CXX compiler ABI info; -- Detecting CXX compiler ABI info - done; -- Detecting CXX compile features; -- Detecting CXX compile features - done; -- Found PythonInterp: /usr/bin/python3.4 (found version ""3.4.5"") ; -- Found PythonLibs: /usr/lib64/libpython3.4m.so; -- pybind11 v2.0.0; -- Configuring done; -- Generating done; -- Build files have been written to: /usr/qc/psi4.git/objdir/external/upstrea",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/577#issuecomment-273732640
https://github.com/psi4/psi4/issues/577#issuecomment-273732640:4086,Modifiability,Config,Configuring,4086," v2.0.0 release; Submodule 'tools/clang' (https://github.com/wjakob/clang-cindex-python3) registered for path 'tools/clang'; Cloning into 'tools/clang'...; Submodule path 'tools/clang': checked out '254c7a91e3c6aa254e113197604dafb443f4d429'; [ 25%] No update step for 'pybind11_external'; [ 25%] No patch step for 'pybind11_external'; [ 31%] Performing configure step for 'pybind11_external'; -- The C compiler identification is GNU 5.4.0; -- The CXX compiler identification is GNU 5.4.0; -- Check for working C compiler: /usr/qc/gcc54/bin/gcc; -- Check for working C compiler: /usr/qc/gcc54/bin/gcc -- works; -- Detecting C compiler ABI info; -- Detecting C compiler ABI info - done; -- Detecting C compile features; -- Detecting C compile features - done; -- Check for working CXX compiler: /usr/qc/gcc54/bin/g++; -- Check for working CXX compiler: /usr/qc/gcc54/bin/g++ -- works; -- Detecting CXX compiler ABI info; -- Detecting CXX compiler ABI info - done; -- Detecting CXX compile features; -- Detecting CXX compile features - done; -- Found PythonInterp: /usr/bin/python3.4 (found version ""3.4.5"") ; -- Found PythonLibs: /usr/lib64/libpython3.4m.so; -- pybind11 v2.0.0; -- Configuring done; -- Generating done; -- Build files have been written to: /usr/qc/psi4.git/objdir/external/upstream/pybind11/pybind11_external-prefix/src/pybind11_external-build. ```. For reasons unknown to me I cannot reproduce my previous compilation error. Previously I could reproduce it even when cloning a brand new copy of psi4. Now it finishes the compilation normally.; Maybe the old psi4 installation directory interfered somehow? Just guessing at this point. However, I still cannot execute psi4. If I use a symlink to the installed binary I get a python error:; ```; import psi4; ImportError: No module named psi4; ```; If I use the full path i get `Intel MKL FATAL ERROR: Cannot load libmkl_avx.so or libmkl_def.so.` instead. But maybe PR https://github.com/psi4/psi4/pull/563 will fix these things for me.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/577#issuecomment-273732640
https://github.com/psi4/psi4/issues/577#issuecomment-273732640:761,Performance,Perform,Performing,761,"It seems that were it counts the correct python is used. Main CMake; ```; -- Setting (unspecified) option CMAKE_INSTALL_LIBDIR: lib; -- Setting (unspecified) option PYMOD_INSTALL_LIBDIR: /; -- Setting (unspecified) option ENABLE_GENERIC: OFF; -- Setting (unspecified) option CMAKE_INSTALL_MESSAGE: LAZY; -- Setting (unspecified) option psi4_CXX_STANDARD: 11; -- Found PythonInterp: /usr/bin/python (found version ""2.7.12"") ; -- Found PythonLibs: /usr/lib64/libpython2.7.so; -- Found Python 2.7: /usr/bin/python; -- Found libefp: /usr/qc/psi4.bin/lib/libefp.a (found version 1.3.0); -- Found libint: /usr/qc/psi4.bin/lib/libint.a (found version 1.1.6); -- Suitable pybind11 could not be located, Building pybind11 instead.; -- Try OpenMP C flag = [-fopenmp]; -- Performing Test OpenMP_FLAG_DETECTED. ```. psi4-core cmake:; ```; - The C compiler identification is GNU 5.4.0; -- The CXX compiler identification is GNU 5.4.0; -- Check for working C compiler: /usr/qc/gcc54/bin/gcc; -- Check for working C compiler: /usr/qc/gcc54/bin/gcc -- works; -- Detecting C compiler ABI info; -- Detecting C compiler ABI info - done; -- Detecting C compile features; -- Detecting C compile features - done; -- Check for working CXX compiler: /usr/qc/gcc54/bin/g++; -- Check for working CXX compiler: /usr/qc/gcc54/bin/g++ -- works; -- Detecting CXX compiler ABI info; -- Detecting CXX compiler ABI info - done; -- Detecting CXX compile features; -- Detecting CXX compile features - done; -- Checking for restrict keyword; -- keyword found : __restrict__; -- Found PythonInterp: /usr/bin/python (found version ""2.7.12"") ; -- Found PythonLibs: /usr/lib64/libpython2.7.so ; -- Using pybind11: /usr/qc/psi4.git/objdir/stage/usr/qc/psi4.bin/include (version 2.0.0 for Py2.7.12 and -std=c++11) ; -- Using Python 2.7: /usr/bin/python ; -- Looking for include file pthread.h ; -- Looking for include file pthread.h - found ; -- Looking for pthread_create ; -- Looking for pthread_create - found ; -- Found Threads: TRUE ; -- ",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/577#issuecomment-273732640
https://github.com/psi4/psi4/issues/577#issuecomment-273732640:2350,Performance,Perform,Performing,2350,"ne; -- Detecting CXX compile features; -- Detecting CXX compile features - done; -- Checking for restrict keyword; -- keyword found : __restrict__; -- Found PythonInterp: /usr/bin/python (found version ""2.7.12"") ; -- Found PythonLibs: /usr/lib64/libpython2.7.so ; -- Using pybind11: /usr/qc/psi4.git/objdir/stage/usr/qc/psi4.bin/include (version 2.0.0 for Py2.7.12 and -std=c++11) ; -- Using Python 2.7: /usr/bin/python ; -- Looking for include file pthread.h ; -- Looking for include file pthread.h - found ; -- Looking for pthread_create ; -- Looking for pthread_create - found ; -- Found Threads: TRUE ; -- Found libdl: /usr/lib64/libdl.so ; -- Disabled CheMPS2 ; -- Disabled dkh ; -- Using libefp: /usr/qc/psi4.bin/lib/libefp.a (version 1.3.0) ; -- Disabled erd ; -- Disabled gdma ; -- Using libint: /usr/qc/psi4.bin/lib/libint.a (version 1.1.6) ; -- Configuring done ; -- Generating done ; ``` . And just for completeness the pybind11 part:. ```; [ 12%] Performing download step (git clone) for 'pybind11_external'; Cloning into 'pybind11_external'...; Note: checking out 'v2.0.0'. You are in 'detached HEAD' state. You can look around, make experimental; changes and commit them, and you can discard any commits you make in this; state without impacting any branches by performing another checkout. If you want to create a new branch to retain commits you create, you may; do so (now or later) by using -b with the checkout command again. Example:. git checkout -b <new-branch-name>. HEAD is now at e33ef9c... v2.0.0 release; Submodule 'tools/clang' (https://github.com/wjakob/clang-cindex-python3) registered for path 'tools/clang'; Cloning into 'tools/clang'...; Submodule path 'tools/clang': checked out '254c7a91e3c6aa254e113197604dafb443f4d429'; [ 25%] No update step for 'pybind11_external'; [ 25%] No patch step for 'pybind11_external'; [ 31%] Performing configure step for 'pybind11_external'; -- The C compiler identification is GNU 5.4.0; -- The CXX compiler identification is GNU 5.4",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/577#issuecomment-273732640
https://github.com/psi4/psi4/issues/577#issuecomment-273732640:2667,Performance,perform,performing,2667,"; -- Found PythonLibs: /usr/lib64/libpython2.7.so ; -- Using pybind11: /usr/qc/psi4.git/objdir/stage/usr/qc/psi4.bin/include (version 2.0.0 for Py2.7.12 and -std=c++11) ; -- Using Python 2.7: /usr/bin/python ; -- Looking for include file pthread.h ; -- Looking for include file pthread.h - found ; -- Looking for pthread_create ; -- Looking for pthread_create - found ; -- Found Threads: TRUE ; -- Found libdl: /usr/lib64/libdl.so ; -- Disabled CheMPS2 ; -- Disabled dkh ; -- Using libefp: /usr/qc/psi4.bin/lib/libefp.a (version 1.3.0) ; -- Disabled erd ; -- Disabled gdma ; -- Using libint: /usr/qc/psi4.bin/lib/libint.a (version 1.1.6) ; -- Configuring done ; -- Generating done ; ``` . And just for completeness the pybind11 part:. ```; [ 12%] Performing download step (git clone) for 'pybind11_external'; Cloning into 'pybind11_external'...; Note: checking out 'v2.0.0'. You are in 'detached HEAD' state. You can look around, make experimental; changes and commit them, and you can discard any commits you make in this; state without impacting any branches by performing another checkout. If you want to create a new branch to retain commits you create, you may; do so (now or later) by using -b with the checkout command again. Example:. git checkout -b <new-branch-name>. HEAD is now at e33ef9c... v2.0.0 release; Submodule 'tools/clang' (https://github.com/wjakob/clang-cindex-python3) registered for path 'tools/clang'; Cloning into 'tools/clang'...; Submodule path 'tools/clang': checked out '254c7a91e3c6aa254e113197604dafb443f4d429'; [ 25%] No update step for 'pybind11_external'; [ 25%] No patch step for 'pybind11_external'; [ 31%] Performing configure step for 'pybind11_external'; -- The C compiler identification is GNU 5.4.0; -- The CXX compiler identification is GNU 5.4.0; -- Check for working C compiler: /usr/qc/gcc54/bin/gcc; -- Check for working C compiler: /usr/qc/gcc54/bin/gcc -- works; -- Detecting C compiler ABI info; -- Detecting C compiler ABI info - done; -- Detecting",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/577#issuecomment-273732640
https://github.com/psi4/psi4/issues/577#issuecomment-273732640:3248,Performance,Perform,Performing,3248,"qc/psi4.bin/lib/libint.a (version 1.1.6) ; -- Configuring done ; -- Generating done ; ``` . And just for completeness the pybind11 part:. ```; [ 12%] Performing download step (git clone) for 'pybind11_external'; Cloning into 'pybind11_external'...; Note: checking out 'v2.0.0'. You are in 'detached HEAD' state. You can look around, make experimental; changes and commit them, and you can discard any commits you make in this; state without impacting any branches by performing another checkout. If you want to create a new branch to retain commits you create, you may; do so (now or later) by using -b with the checkout command again. Example:. git checkout -b <new-branch-name>. HEAD is now at e33ef9c... v2.0.0 release; Submodule 'tools/clang' (https://github.com/wjakob/clang-cindex-python3) registered for path 'tools/clang'; Cloning into 'tools/clang'...; Submodule path 'tools/clang': checked out '254c7a91e3c6aa254e113197604dafb443f4d429'; [ 25%] No update step for 'pybind11_external'; [ 25%] No patch step for 'pybind11_external'; [ 31%] Performing configure step for 'pybind11_external'; -- The C compiler identification is GNU 5.4.0; -- The CXX compiler identification is GNU 5.4.0; -- Check for working C compiler: /usr/qc/gcc54/bin/gcc; -- Check for working C compiler: /usr/qc/gcc54/bin/gcc -- works; -- Detecting C compiler ABI info; -- Detecting C compiler ABI info - done; -- Detecting C compile features; -- Detecting C compile features - done; -- Check for working CXX compiler: /usr/qc/gcc54/bin/g++; -- Check for working CXX compiler: /usr/qc/gcc54/bin/g++ -- works; -- Detecting CXX compiler ABI info; -- Detecting CXX compiler ABI info - done; -- Detecting CXX compile features; -- Detecting CXX compile features - done; -- Found PythonInterp: /usr/bin/python3.4 (found version ""3.4.5"") ; -- Found PythonLibs: /usr/lib64/libpython3.4m.so; -- pybind11 v2.0.0; -- Configuring done; -- Generating done; -- Build files have been written to: /usr/qc/psi4.git/objdir/external/upstrea",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/577#issuecomment-273732640
https://github.com/psi4/psi4/issues/577#issuecomment-273732640:4779,Performance,load,load,4779," v2.0.0 release; Submodule 'tools/clang' (https://github.com/wjakob/clang-cindex-python3) registered for path 'tools/clang'; Cloning into 'tools/clang'...; Submodule path 'tools/clang': checked out '254c7a91e3c6aa254e113197604dafb443f4d429'; [ 25%] No update step for 'pybind11_external'; [ 25%] No patch step for 'pybind11_external'; [ 31%] Performing configure step for 'pybind11_external'; -- The C compiler identification is GNU 5.4.0; -- The CXX compiler identification is GNU 5.4.0; -- Check for working C compiler: /usr/qc/gcc54/bin/gcc; -- Check for working C compiler: /usr/qc/gcc54/bin/gcc -- works; -- Detecting C compiler ABI info; -- Detecting C compiler ABI info - done; -- Detecting C compile features; -- Detecting C compile features - done; -- Check for working CXX compiler: /usr/qc/gcc54/bin/g++; -- Check for working CXX compiler: /usr/qc/gcc54/bin/g++ -- works; -- Detecting CXX compiler ABI info; -- Detecting CXX compiler ABI info - done; -- Detecting CXX compile features; -- Detecting CXX compile features - done; -- Found PythonInterp: /usr/bin/python3.4 (found version ""3.4.5"") ; -- Found PythonLibs: /usr/lib64/libpython3.4m.so; -- pybind11 v2.0.0; -- Configuring done; -- Generating done; -- Build files have been written to: /usr/qc/psi4.git/objdir/external/upstream/pybind11/pybind11_external-prefix/src/pybind11_external-build. ```. For reasons unknown to me I cannot reproduce my previous compilation error. Previously I could reproduce it even when cloning a brand new copy of psi4. Now it finishes the compilation normally.; Maybe the old psi4 installation directory interfered somehow? Just guessing at this point. However, I still cannot execute psi4. If I use a symlink to the installed binary I get a python error:; ```; import psi4; ImportError: No module named psi4; ```; If I use the full path i get `Intel MKL FATAL ERROR: Cannot load libmkl_avx.so or libmkl_def.so.` instead. But maybe PR https://github.com/psi4/psi4/pull/563 will fix these things for me.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/577#issuecomment-273732640
https://github.com/psi4/psi4/issues/577#issuecomment-273732640:1046,Safety,Detect,Detecting,1046,"specified) option CMAKE_INSTALL_MESSAGE: LAZY; -- Setting (unspecified) option psi4_CXX_STANDARD: 11; -- Found PythonInterp: /usr/bin/python (found version ""2.7.12"") ; -- Found PythonLibs: /usr/lib64/libpython2.7.so; -- Found Python 2.7: /usr/bin/python; -- Found libefp: /usr/qc/psi4.bin/lib/libefp.a (found version 1.3.0); -- Found libint: /usr/qc/psi4.bin/lib/libint.a (found version 1.1.6); -- Suitable pybind11 could not be located, Building pybind11 instead.; -- Try OpenMP C flag = [-fopenmp]; -- Performing Test OpenMP_FLAG_DETECTED. ```. psi4-core cmake:; ```; - The C compiler identification is GNU 5.4.0; -- The CXX compiler identification is GNU 5.4.0; -- Check for working C compiler: /usr/qc/gcc54/bin/gcc; -- Check for working C compiler: /usr/qc/gcc54/bin/gcc -- works; -- Detecting C compiler ABI info; -- Detecting C compiler ABI info - done; -- Detecting C compile features; -- Detecting C compile features - done; -- Check for working CXX compiler: /usr/qc/gcc54/bin/g++; -- Check for working CXX compiler: /usr/qc/gcc54/bin/g++ -- works; -- Detecting CXX compiler ABI info; -- Detecting CXX compiler ABI info - done; -- Detecting CXX compile features; -- Detecting CXX compile features - done; -- Checking for restrict keyword; -- keyword found : __restrict__; -- Found PythonInterp: /usr/bin/python (found version ""2.7.12"") ; -- Found PythonLibs: /usr/lib64/libpython2.7.so ; -- Using pybind11: /usr/qc/psi4.git/objdir/stage/usr/qc/psi4.bin/include (version 2.0.0 for Py2.7.12 and -std=c++11) ; -- Using Python 2.7: /usr/bin/python ; -- Looking for include file pthread.h ; -- Looking for include file pthread.h - found ; -- Looking for pthread_create ; -- Looking for pthread_create - found ; -- Found Threads: TRUE ; -- Found libdl: /usr/lib64/libdl.so ; -- Disabled CheMPS2 ; -- Disabled dkh ; -- Using libefp: /usr/qc/psi4.bin/lib/libefp.a (version 1.3.0) ; -- Disabled erd ; -- Disabled gdma ; -- Using libint: /usr/qc/psi4.bin/lib/libint.a (version 1.1.6) ; -- Configuring ",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/577#issuecomment-273732640
https://github.com/psi4/psi4/issues/577#issuecomment-273732640:1080,Safety,Detect,Detecting,1080,"specified) option CMAKE_INSTALL_MESSAGE: LAZY; -- Setting (unspecified) option psi4_CXX_STANDARD: 11; -- Found PythonInterp: /usr/bin/python (found version ""2.7.12"") ; -- Found PythonLibs: /usr/lib64/libpython2.7.so; -- Found Python 2.7: /usr/bin/python; -- Found libefp: /usr/qc/psi4.bin/lib/libefp.a (found version 1.3.0); -- Found libint: /usr/qc/psi4.bin/lib/libint.a (found version 1.1.6); -- Suitable pybind11 could not be located, Building pybind11 instead.; -- Try OpenMP C flag = [-fopenmp]; -- Performing Test OpenMP_FLAG_DETECTED. ```. psi4-core cmake:; ```; - The C compiler identification is GNU 5.4.0; -- The CXX compiler identification is GNU 5.4.0; -- Check for working C compiler: /usr/qc/gcc54/bin/gcc; -- Check for working C compiler: /usr/qc/gcc54/bin/gcc -- works; -- Detecting C compiler ABI info; -- Detecting C compiler ABI info - done; -- Detecting C compile features; -- Detecting C compile features - done; -- Check for working CXX compiler: /usr/qc/gcc54/bin/g++; -- Check for working CXX compiler: /usr/qc/gcc54/bin/g++ -- works; -- Detecting CXX compiler ABI info; -- Detecting CXX compiler ABI info - done; -- Detecting CXX compile features; -- Detecting CXX compile features - done; -- Checking for restrict keyword; -- keyword found : __restrict__; -- Found PythonInterp: /usr/bin/python (found version ""2.7.12"") ; -- Found PythonLibs: /usr/lib64/libpython2.7.so ; -- Using pybind11: /usr/qc/psi4.git/objdir/stage/usr/qc/psi4.bin/include (version 2.0.0 for Py2.7.12 and -std=c++11) ; -- Using Python 2.7: /usr/bin/python ; -- Looking for include file pthread.h ; -- Looking for include file pthread.h - found ; -- Looking for pthread_create ; -- Looking for pthread_create - found ; -- Found Threads: TRUE ; -- Found libdl: /usr/lib64/libdl.so ; -- Disabled CheMPS2 ; -- Disabled dkh ; -- Using libefp: /usr/qc/psi4.bin/lib/libefp.a (version 1.3.0) ; -- Disabled erd ; -- Disabled gdma ; -- Using libint: /usr/qc/psi4.bin/lib/libint.a (version 1.1.6) ; -- Configuring ",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/577#issuecomment-273732640
https://github.com/psi4/psi4/issues/577#issuecomment-273732640:1121,Safety,Detect,Detecting,1121,"specified) option CMAKE_INSTALL_MESSAGE: LAZY; -- Setting (unspecified) option psi4_CXX_STANDARD: 11; -- Found PythonInterp: /usr/bin/python (found version ""2.7.12"") ; -- Found PythonLibs: /usr/lib64/libpython2.7.so; -- Found Python 2.7: /usr/bin/python; -- Found libefp: /usr/qc/psi4.bin/lib/libefp.a (found version 1.3.0); -- Found libint: /usr/qc/psi4.bin/lib/libint.a (found version 1.1.6); -- Suitable pybind11 could not be located, Building pybind11 instead.; -- Try OpenMP C flag = [-fopenmp]; -- Performing Test OpenMP_FLAG_DETECTED. ```. psi4-core cmake:; ```; - The C compiler identification is GNU 5.4.0; -- The CXX compiler identification is GNU 5.4.0; -- Check for working C compiler: /usr/qc/gcc54/bin/gcc; -- Check for working C compiler: /usr/qc/gcc54/bin/gcc -- works; -- Detecting C compiler ABI info; -- Detecting C compiler ABI info - done; -- Detecting C compile features; -- Detecting C compile features - done; -- Check for working CXX compiler: /usr/qc/gcc54/bin/g++; -- Check for working CXX compiler: /usr/qc/gcc54/bin/g++ -- works; -- Detecting CXX compiler ABI info; -- Detecting CXX compiler ABI info - done; -- Detecting CXX compile features; -- Detecting CXX compile features - done; -- Checking for restrict keyword; -- keyword found : __restrict__; -- Found PythonInterp: /usr/bin/python (found version ""2.7.12"") ; -- Found PythonLibs: /usr/lib64/libpython2.7.so ; -- Using pybind11: /usr/qc/psi4.git/objdir/stage/usr/qc/psi4.bin/include (version 2.0.0 for Py2.7.12 and -std=c++11) ; -- Using Python 2.7: /usr/bin/python ; -- Looking for include file pthread.h ; -- Looking for include file pthread.h - found ; -- Looking for pthread_create ; -- Looking for pthread_create - found ; -- Found Threads: TRUE ; -- Found libdl: /usr/lib64/libdl.so ; -- Disabled CheMPS2 ; -- Disabled dkh ; -- Using libefp: /usr/qc/psi4.bin/lib/libefp.a (version 1.3.0) ; -- Disabled erd ; -- Disabled gdma ; -- Using libint: /usr/qc/psi4.bin/lib/libint.a (version 1.1.6) ; -- Configuring ",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/577#issuecomment-273732640
https://github.com/psi4/psi4/issues/577#issuecomment-273732640:1154,Safety,Detect,Detecting,1154,"specified) option CMAKE_INSTALL_MESSAGE: LAZY; -- Setting (unspecified) option psi4_CXX_STANDARD: 11; -- Found PythonInterp: /usr/bin/python (found version ""2.7.12"") ; -- Found PythonLibs: /usr/lib64/libpython2.7.so; -- Found Python 2.7: /usr/bin/python; -- Found libefp: /usr/qc/psi4.bin/lib/libefp.a (found version 1.3.0); -- Found libint: /usr/qc/psi4.bin/lib/libint.a (found version 1.1.6); -- Suitable pybind11 could not be located, Building pybind11 instead.; -- Try OpenMP C flag = [-fopenmp]; -- Performing Test OpenMP_FLAG_DETECTED. ```. psi4-core cmake:; ```; - The C compiler identification is GNU 5.4.0; -- The CXX compiler identification is GNU 5.4.0; -- Check for working C compiler: /usr/qc/gcc54/bin/gcc; -- Check for working C compiler: /usr/qc/gcc54/bin/gcc -- works; -- Detecting C compiler ABI info; -- Detecting C compiler ABI info - done; -- Detecting C compile features; -- Detecting C compile features - done; -- Check for working CXX compiler: /usr/qc/gcc54/bin/g++; -- Check for working CXX compiler: /usr/qc/gcc54/bin/g++ -- works; -- Detecting CXX compiler ABI info; -- Detecting CXX compiler ABI info - done; -- Detecting CXX compile features; -- Detecting CXX compile features - done; -- Checking for restrict keyword; -- keyword found : __restrict__; -- Found PythonInterp: /usr/bin/python (found version ""2.7.12"") ; -- Found PythonLibs: /usr/lib64/libpython2.7.so ; -- Using pybind11: /usr/qc/psi4.git/objdir/stage/usr/qc/psi4.bin/include (version 2.0.0 for Py2.7.12 and -std=c++11) ; -- Using Python 2.7: /usr/bin/python ; -- Looking for include file pthread.h ; -- Looking for include file pthread.h - found ; -- Looking for pthread_create ; -- Looking for pthread_create - found ; -- Found Threads: TRUE ; -- Found libdl: /usr/lib64/libdl.so ; -- Disabled CheMPS2 ; -- Disabled dkh ; -- Using libefp: /usr/qc/psi4.bin/lib/libefp.a (version 1.3.0) ; -- Disabled erd ; -- Disabled gdma ; -- Using libint: /usr/qc/psi4.bin/lib/libint.a (version 1.1.6) ; -- Configuring ",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/577#issuecomment-273732640
https://github.com/psi4/psi4/issues/577#issuecomment-273732640:1319,Safety,Detect,Detecting,1319,"specified) option CMAKE_INSTALL_MESSAGE: LAZY; -- Setting (unspecified) option psi4_CXX_STANDARD: 11; -- Found PythonInterp: /usr/bin/python (found version ""2.7.12"") ; -- Found PythonLibs: /usr/lib64/libpython2.7.so; -- Found Python 2.7: /usr/bin/python; -- Found libefp: /usr/qc/psi4.bin/lib/libefp.a (found version 1.3.0); -- Found libint: /usr/qc/psi4.bin/lib/libint.a (found version 1.1.6); -- Suitable pybind11 could not be located, Building pybind11 instead.; -- Try OpenMP C flag = [-fopenmp]; -- Performing Test OpenMP_FLAG_DETECTED. ```. psi4-core cmake:; ```; - The C compiler identification is GNU 5.4.0; -- The CXX compiler identification is GNU 5.4.0; -- Check for working C compiler: /usr/qc/gcc54/bin/gcc; -- Check for working C compiler: /usr/qc/gcc54/bin/gcc -- works; -- Detecting C compiler ABI info; -- Detecting C compiler ABI info - done; -- Detecting C compile features; -- Detecting C compile features - done; -- Check for working CXX compiler: /usr/qc/gcc54/bin/g++; -- Check for working CXX compiler: /usr/qc/gcc54/bin/g++ -- works; -- Detecting CXX compiler ABI info; -- Detecting CXX compiler ABI info - done; -- Detecting CXX compile features; -- Detecting CXX compile features - done; -- Checking for restrict keyword; -- keyword found : __restrict__; -- Found PythonInterp: /usr/bin/python (found version ""2.7.12"") ; -- Found PythonLibs: /usr/lib64/libpython2.7.so ; -- Using pybind11: /usr/qc/psi4.git/objdir/stage/usr/qc/psi4.bin/include (version 2.0.0 for Py2.7.12 and -std=c++11) ; -- Using Python 2.7: /usr/bin/python ; -- Looking for include file pthread.h ; -- Looking for include file pthread.h - found ; -- Looking for pthread_create ; -- Looking for pthread_create - found ; -- Found Threads: TRUE ; -- Found libdl: /usr/lib64/libdl.so ; -- Disabled CheMPS2 ; -- Disabled dkh ; -- Using libefp: /usr/qc/psi4.bin/lib/libefp.a (version 1.3.0) ; -- Disabled erd ; -- Disabled gdma ; -- Using libint: /usr/qc/psi4.bin/lib/libint.a (version 1.1.6) ; -- Configuring ",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/577#issuecomment-273732640
https://github.com/psi4/psi4/issues/577#issuecomment-273732640:1355,Safety,Detect,Detecting,1355,"specified) option CMAKE_INSTALL_MESSAGE: LAZY; -- Setting (unspecified) option psi4_CXX_STANDARD: 11; -- Found PythonInterp: /usr/bin/python (found version ""2.7.12"") ; -- Found PythonLibs: /usr/lib64/libpython2.7.so; -- Found Python 2.7: /usr/bin/python; -- Found libefp: /usr/qc/psi4.bin/lib/libefp.a (found version 1.3.0); -- Found libint: /usr/qc/psi4.bin/lib/libint.a (found version 1.1.6); -- Suitable pybind11 could not be located, Building pybind11 instead.; -- Try OpenMP C flag = [-fopenmp]; -- Performing Test OpenMP_FLAG_DETECTED. ```. psi4-core cmake:; ```; - The C compiler identification is GNU 5.4.0; -- The CXX compiler identification is GNU 5.4.0; -- Check for working C compiler: /usr/qc/gcc54/bin/gcc; -- Check for working C compiler: /usr/qc/gcc54/bin/gcc -- works; -- Detecting C compiler ABI info; -- Detecting C compiler ABI info - done; -- Detecting C compile features; -- Detecting C compile features - done; -- Check for working CXX compiler: /usr/qc/gcc54/bin/g++; -- Check for working CXX compiler: /usr/qc/gcc54/bin/g++ -- works; -- Detecting CXX compiler ABI info; -- Detecting CXX compiler ABI info - done; -- Detecting CXX compile features; -- Detecting CXX compile features - done; -- Checking for restrict keyword; -- keyword found : __restrict__; -- Found PythonInterp: /usr/bin/python (found version ""2.7.12"") ; -- Found PythonLibs: /usr/lib64/libpython2.7.so ; -- Using pybind11: /usr/qc/psi4.git/objdir/stage/usr/qc/psi4.bin/include (version 2.0.0 for Py2.7.12 and -std=c++11) ; -- Using Python 2.7: /usr/bin/python ; -- Looking for include file pthread.h ; -- Looking for include file pthread.h - found ; -- Looking for pthread_create ; -- Looking for pthread_create - found ; -- Found Threads: TRUE ; -- Found libdl: /usr/lib64/libdl.so ; -- Disabled CheMPS2 ; -- Disabled dkh ; -- Using libefp: /usr/qc/psi4.bin/lib/libefp.a (version 1.3.0) ; -- Disabled erd ; -- Disabled gdma ; -- Using libint: /usr/qc/psi4.bin/lib/libint.a (version 1.1.6) ; -- Configuring ",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/577#issuecomment-273732640
https://github.com/psi4/psi4/issues/577#issuecomment-273732640:1398,Safety,Detect,Detecting,1398,"specified) option CMAKE_INSTALL_MESSAGE: LAZY; -- Setting (unspecified) option psi4_CXX_STANDARD: 11; -- Found PythonInterp: /usr/bin/python (found version ""2.7.12"") ; -- Found PythonLibs: /usr/lib64/libpython2.7.so; -- Found Python 2.7: /usr/bin/python; -- Found libefp: /usr/qc/psi4.bin/lib/libefp.a (found version 1.3.0); -- Found libint: /usr/qc/psi4.bin/lib/libint.a (found version 1.1.6); -- Suitable pybind11 could not be located, Building pybind11 instead.; -- Try OpenMP C flag = [-fopenmp]; -- Performing Test OpenMP_FLAG_DETECTED. ```. psi4-core cmake:; ```; - The C compiler identification is GNU 5.4.0; -- The CXX compiler identification is GNU 5.4.0; -- Check for working C compiler: /usr/qc/gcc54/bin/gcc; -- Check for working C compiler: /usr/qc/gcc54/bin/gcc -- works; -- Detecting C compiler ABI info; -- Detecting C compiler ABI info - done; -- Detecting C compile features; -- Detecting C compile features - done; -- Check for working CXX compiler: /usr/qc/gcc54/bin/g++; -- Check for working CXX compiler: /usr/qc/gcc54/bin/g++ -- works; -- Detecting CXX compiler ABI info; -- Detecting CXX compiler ABI info - done; -- Detecting CXX compile features; -- Detecting CXX compile features - done; -- Checking for restrict keyword; -- keyword found : __restrict__; -- Found PythonInterp: /usr/bin/python (found version ""2.7.12"") ; -- Found PythonLibs: /usr/lib64/libpython2.7.so ; -- Using pybind11: /usr/qc/psi4.git/objdir/stage/usr/qc/psi4.bin/include (version 2.0.0 for Py2.7.12 and -std=c++11) ; -- Using Python 2.7: /usr/bin/python ; -- Looking for include file pthread.h ; -- Looking for include file pthread.h - found ; -- Looking for pthread_create ; -- Looking for pthread_create - found ; -- Found Threads: TRUE ; -- Found libdl: /usr/lib64/libdl.so ; -- Disabled CheMPS2 ; -- Disabled dkh ; -- Using libefp: /usr/qc/psi4.bin/lib/libefp.a (version 1.3.0) ; -- Disabled erd ; -- Disabled gdma ; -- Using libint: /usr/qc/psi4.bin/lib/libint.a (version 1.1.6) ; -- Configuring ",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/577#issuecomment-273732640
https://github.com/psi4/psi4/issues/577#issuecomment-273732640:1433,Safety,Detect,Detecting,1433,"specified) option CMAKE_INSTALL_MESSAGE: LAZY; -- Setting (unspecified) option psi4_CXX_STANDARD: 11; -- Found PythonInterp: /usr/bin/python (found version ""2.7.12"") ; -- Found PythonLibs: /usr/lib64/libpython2.7.so; -- Found Python 2.7: /usr/bin/python; -- Found libefp: /usr/qc/psi4.bin/lib/libefp.a (found version 1.3.0); -- Found libint: /usr/qc/psi4.bin/lib/libint.a (found version 1.1.6); -- Suitable pybind11 could not be located, Building pybind11 instead.; -- Try OpenMP C flag = [-fopenmp]; -- Performing Test OpenMP_FLAG_DETECTED. ```. psi4-core cmake:; ```; - The C compiler identification is GNU 5.4.0; -- The CXX compiler identification is GNU 5.4.0; -- Check for working C compiler: /usr/qc/gcc54/bin/gcc; -- Check for working C compiler: /usr/qc/gcc54/bin/gcc -- works; -- Detecting C compiler ABI info; -- Detecting C compiler ABI info - done; -- Detecting C compile features; -- Detecting C compile features - done; -- Check for working CXX compiler: /usr/qc/gcc54/bin/g++; -- Check for working CXX compiler: /usr/qc/gcc54/bin/g++ -- works; -- Detecting CXX compiler ABI info; -- Detecting CXX compiler ABI info - done; -- Detecting CXX compile features; -- Detecting CXX compile features - done; -- Checking for restrict keyword; -- keyword found : __restrict__; -- Found PythonInterp: /usr/bin/python (found version ""2.7.12"") ; -- Found PythonLibs: /usr/lib64/libpython2.7.so ; -- Using pybind11: /usr/qc/psi4.git/objdir/stage/usr/qc/psi4.bin/include (version 2.0.0 for Py2.7.12 and -std=c++11) ; -- Using Python 2.7: /usr/bin/python ; -- Looking for include file pthread.h ; -- Looking for include file pthread.h - found ; -- Looking for pthread_create ; -- Looking for pthread_create - found ; -- Found Threads: TRUE ; -- Found libdl: /usr/lib64/libdl.so ; -- Disabled CheMPS2 ; -- Disabled dkh ; -- Using libefp: /usr/qc/psi4.bin/lib/libefp.a (version 1.3.0) ; -- Disabled erd ; -- Disabled gdma ; -- Using libint: /usr/qc/psi4.bin/lib/libint.a (version 1.1.6) ; -- Configuring ",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/577#issuecomment-273732640
https://github.com/psi4/psi4/issues/577#issuecomment-273732640:3519,Safety,Detect,Detecting,3519,"eckout. If you want to create a new branch to retain commits you create, you may; do so (now or later) by using -b with the checkout command again. Example:. git checkout -b <new-branch-name>. HEAD is now at e33ef9c... v2.0.0 release; Submodule 'tools/clang' (https://github.com/wjakob/clang-cindex-python3) registered for path 'tools/clang'; Cloning into 'tools/clang'...; Submodule path 'tools/clang': checked out '254c7a91e3c6aa254e113197604dafb443f4d429'; [ 25%] No update step for 'pybind11_external'; [ 25%] No patch step for 'pybind11_external'; [ 31%] Performing configure step for 'pybind11_external'; -- The C compiler identification is GNU 5.4.0; -- The CXX compiler identification is GNU 5.4.0; -- Check for working C compiler: /usr/qc/gcc54/bin/gcc; -- Check for working C compiler: /usr/qc/gcc54/bin/gcc -- works; -- Detecting C compiler ABI info; -- Detecting C compiler ABI info - done; -- Detecting C compile features; -- Detecting C compile features - done; -- Check for working CXX compiler: /usr/qc/gcc54/bin/g++; -- Check for working CXX compiler: /usr/qc/gcc54/bin/g++ -- works; -- Detecting CXX compiler ABI info; -- Detecting CXX compiler ABI info - done; -- Detecting CXX compile features; -- Detecting CXX compile features - done; -- Found PythonInterp: /usr/bin/python3.4 (found version ""3.4.5"") ; -- Found PythonLibs: /usr/lib64/libpython3.4m.so; -- pybind11 v2.0.0; -- Configuring done; -- Generating done; -- Build files have been written to: /usr/qc/psi4.git/objdir/external/upstream/pybind11/pybind11_external-prefix/src/pybind11_external-build. ```. For reasons unknown to me I cannot reproduce my previous compilation error. Previously I could reproduce it even when cloning a brand new copy of psi4. Now it finishes the compilation normally.; Maybe the old psi4 installation directory interfered somehow? Just guessing at this point. However, I still cannot execute psi4. If I use a symlink to the installed binary I get a python error:; ```; import psi4; ImportErro",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/577#issuecomment-273732640
https://github.com/psi4/psi4/issues/577#issuecomment-273732640:3553,Safety,Detect,Detecting,3553,"eckout. If you want to create a new branch to retain commits you create, you may; do so (now or later) by using -b with the checkout command again. Example:. git checkout -b <new-branch-name>. HEAD is now at e33ef9c... v2.0.0 release; Submodule 'tools/clang' (https://github.com/wjakob/clang-cindex-python3) registered for path 'tools/clang'; Cloning into 'tools/clang'...; Submodule path 'tools/clang': checked out '254c7a91e3c6aa254e113197604dafb443f4d429'; [ 25%] No update step for 'pybind11_external'; [ 25%] No patch step for 'pybind11_external'; [ 31%] Performing configure step for 'pybind11_external'; -- The C compiler identification is GNU 5.4.0; -- The CXX compiler identification is GNU 5.4.0; -- Check for working C compiler: /usr/qc/gcc54/bin/gcc; -- Check for working C compiler: /usr/qc/gcc54/bin/gcc -- works; -- Detecting C compiler ABI info; -- Detecting C compiler ABI info - done; -- Detecting C compile features; -- Detecting C compile features - done; -- Check for working CXX compiler: /usr/qc/gcc54/bin/g++; -- Check for working CXX compiler: /usr/qc/gcc54/bin/g++ -- works; -- Detecting CXX compiler ABI info; -- Detecting CXX compiler ABI info - done; -- Detecting CXX compile features; -- Detecting CXX compile features - done; -- Found PythonInterp: /usr/bin/python3.4 (found version ""3.4.5"") ; -- Found PythonLibs: /usr/lib64/libpython3.4m.so; -- pybind11 v2.0.0; -- Configuring done; -- Generating done; -- Build files have been written to: /usr/qc/psi4.git/objdir/external/upstream/pybind11/pybind11_external-prefix/src/pybind11_external-build. ```. For reasons unknown to me I cannot reproduce my previous compilation error. Previously I could reproduce it even when cloning a brand new copy of psi4. Now it finishes the compilation normally.; Maybe the old psi4 installation directory interfered somehow? Just guessing at this point. However, I still cannot execute psi4. If I use a symlink to the installed binary I get a python error:; ```; import psi4; ImportErro",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/577#issuecomment-273732640
https://github.com/psi4/psi4/issues/577#issuecomment-273732640:3594,Safety,Detect,Detecting,3594,"eckout. If you want to create a new branch to retain commits you create, you may; do so (now or later) by using -b with the checkout command again. Example:. git checkout -b <new-branch-name>. HEAD is now at e33ef9c... v2.0.0 release; Submodule 'tools/clang' (https://github.com/wjakob/clang-cindex-python3) registered for path 'tools/clang'; Cloning into 'tools/clang'...; Submodule path 'tools/clang': checked out '254c7a91e3c6aa254e113197604dafb443f4d429'; [ 25%] No update step for 'pybind11_external'; [ 25%] No patch step for 'pybind11_external'; [ 31%] Performing configure step for 'pybind11_external'; -- The C compiler identification is GNU 5.4.0; -- The CXX compiler identification is GNU 5.4.0; -- Check for working C compiler: /usr/qc/gcc54/bin/gcc; -- Check for working C compiler: /usr/qc/gcc54/bin/gcc -- works; -- Detecting C compiler ABI info; -- Detecting C compiler ABI info - done; -- Detecting C compile features; -- Detecting C compile features - done; -- Check for working CXX compiler: /usr/qc/gcc54/bin/g++; -- Check for working CXX compiler: /usr/qc/gcc54/bin/g++ -- works; -- Detecting CXX compiler ABI info; -- Detecting CXX compiler ABI info - done; -- Detecting CXX compile features; -- Detecting CXX compile features - done; -- Found PythonInterp: /usr/bin/python3.4 (found version ""3.4.5"") ; -- Found PythonLibs: /usr/lib64/libpython3.4m.so; -- pybind11 v2.0.0; -- Configuring done; -- Generating done; -- Build files have been written to: /usr/qc/psi4.git/objdir/external/upstream/pybind11/pybind11_external-prefix/src/pybind11_external-build. ```. For reasons unknown to me I cannot reproduce my previous compilation error. Previously I could reproduce it even when cloning a brand new copy of psi4. Now it finishes the compilation normally.; Maybe the old psi4 installation directory interfered somehow? Just guessing at this point. However, I still cannot execute psi4. If I use a symlink to the installed binary I get a python error:; ```; import psi4; ImportErro",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/577#issuecomment-273732640
https://github.com/psi4/psi4/issues/577#issuecomment-273732640:3627,Safety,Detect,Detecting,3627,"eckout. If you want to create a new branch to retain commits you create, you may; do so (now or later) by using -b with the checkout command again. Example:. git checkout -b <new-branch-name>. HEAD is now at e33ef9c... v2.0.0 release; Submodule 'tools/clang' (https://github.com/wjakob/clang-cindex-python3) registered for path 'tools/clang'; Cloning into 'tools/clang'...; Submodule path 'tools/clang': checked out '254c7a91e3c6aa254e113197604dafb443f4d429'; [ 25%] No update step for 'pybind11_external'; [ 25%] No patch step for 'pybind11_external'; [ 31%] Performing configure step for 'pybind11_external'; -- The C compiler identification is GNU 5.4.0; -- The CXX compiler identification is GNU 5.4.0; -- Check for working C compiler: /usr/qc/gcc54/bin/gcc; -- Check for working C compiler: /usr/qc/gcc54/bin/gcc -- works; -- Detecting C compiler ABI info; -- Detecting C compiler ABI info - done; -- Detecting C compile features; -- Detecting C compile features - done; -- Check for working CXX compiler: /usr/qc/gcc54/bin/g++; -- Check for working CXX compiler: /usr/qc/gcc54/bin/g++ -- works; -- Detecting CXX compiler ABI info; -- Detecting CXX compiler ABI info - done; -- Detecting CXX compile features; -- Detecting CXX compile features - done; -- Found PythonInterp: /usr/bin/python3.4 (found version ""3.4.5"") ; -- Found PythonLibs: /usr/lib64/libpython3.4m.so; -- pybind11 v2.0.0; -- Configuring done; -- Generating done; -- Build files have been written to: /usr/qc/psi4.git/objdir/external/upstream/pybind11/pybind11_external-prefix/src/pybind11_external-build. ```. For reasons unknown to me I cannot reproduce my previous compilation error. Previously I could reproduce it even when cloning a brand new copy of psi4. Now it finishes the compilation normally.; Maybe the old psi4 installation directory interfered somehow? Just guessing at this point. However, I still cannot execute psi4. If I use a symlink to the installed binary I get a python error:; ```; import psi4; ImportErro",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/577#issuecomment-273732640
https://github.com/psi4/psi4/issues/577#issuecomment-273732640:3792,Safety,Detect,Detecting,3792,"eckout. If you want to create a new branch to retain commits you create, you may; do so (now or later) by using -b with the checkout command again. Example:. git checkout -b <new-branch-name>. HEAD is now at e33ef9c... v2.0.0 release; Submodule 'tools/clang' (https://github.com/wjakob/clang-cindex-python3) registered for path 'tools/clang'; Cloning into 'tools/clang'...; Submodule path 'tools/clang': checked out '254c7a91e3c6aa254e113197604dafb443f4d429'; [ 25%] No update step for 'pybind11_external'; [ 25%] No patch step for 'pybind11_external'; [ 31%] Performing configure step for 'pybind11_external'; -- The C compiler identification is GNU 5.4.0; -- The CXX compiler identification is GNU 5.4.0; -- Check for working C compiler: /usr/qc/gcc54/bin/gcc; -- Check for working C compiler: /usr/qc/gcc54/bin/gcc -- works; -- Detecting C compiler ABI info; -- Detecting C compiler ABI info - done; -- Detecting C compile features; -- Detecting C compile features - done; -- Check for working CXX compiler: /usr/qc/gcc54/bin/g++; -- Check for working CXX compiler: /usr/qc/gcc54/bin/g++ -- works; -- Detecting CXX compiler ABI info; -- Detecting CXX compiler ABI info - done; -- Detecting CXX compile features; -- Detecting CXX compile features - done; -- Found PythonInterp: /usr/bin/python3.4 (found version ""3.4.5"") ; -- Found PythonLibs: /usr/lib64/libpython3.4m.so; -- pybind11 v2.0.0; -- Configuring done; -- Generating done; -- Build files have been written to: /usr/qc/psi4.git/objdir/external/upstream/pybind11/pybind11_external-prefix/src/pybind11_external-build. ```. For reasons unknown to me I cannot reproduce my previous compilation error. Previously I could reproduce it even when cloning a brand new copy of psi4. Now it finishes the compilation normally.; Maybe the old psi4 installation directory interfered somehow? Just guessing at this point. However, I still cannot execute psi4. If I use a symlink to the installed binary I get a python error:; ```; import psi4; ImportErro",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/577#issuecomment-273732640
https://github.com/psi4/psi4/issues/577#issuecomment-273732640:3828,Safety,Detect,Detecting,3828,"eckout. If you want to create a new branch to retain commits you create, you may; do so (now or later) by using -b with the checkout command again. Example:. git checkout -b <new-branch-name>. HEAD is now at e33ef9c... v2.0.0 release; Submodule 'tools/clang' (https://github.com/wjakob/clang-cindex-python3) registered for path 'tools/clang'; Cloning into 'tools/clang'...; Submodule path 'tools/clang': checked out '254c7a91e3c6aa254e113197604dafb443f4d429'; [ 25%] No update step for 'pybind11_external'; [ 25%] No patch step for 'pybind11_external'; [ 31%] Performing configure step for 'pybind11_external'; -- The C compiler identification is GNU 5.4.0; -- The CXX compiler identification is GNU 5.4.0; -- Check for working C compiler: /usr/qc/gcc54/bin/gcc; -- Check for working C compiler: /usr/qc/gcc54/bin/gcc -- works; -- Detecting C compiler ABI info; -- Detecting C compiler ABI info - done; -- Detecting C compile features; -- Detecting C compile features - done; -- Check for working CXX compiler: /usr/qc/gcc54/bin/g++; -- Check for working CXX compiler: /usr/qc/gcc54/bin/g++ -- works; -- Detecting CXX compiler ABI info; -- Detecting CXX compiler ABI info - done; -- Detecting CXX compile features; -- Detecting CXX compile features - done; -- Found PythonInterp: /usr/bin/python3.4 (found version ""3.4.5"") ; -- Found PythonLibs: /usr/lib64/libpython3.4m.so; -- pybind11 v2.0.0; -- Configuring done; -- Generating done; -- Build files have been written to: /usr/qc/psi4.git/objdir/external/upstream/pybind11/pybind11_external-prefix/src/pybind11_external-build. ```. For reasons unknown to me I cannot reproduce my previous compilation error. Previously I could reproduce it even when cloning a brand new copy of psi4. Now it finishes the compilation normally.; Maybe the old psi4 installation directory interfered somehow? Just guessing at this point. However, I still cannot execute psi4. If I use a symlink to the installed binary I get a python error:; ```; import psi4; ImportErro",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/577#issuecomment-273732640
https://github.com/psi4/psi4/issues/577#issuecomment-273732640:3871,Safety,Detect,Detecting,3871,"eckout. If you want to create a new branch to retain commits you create, you may; do so (now or later) by using -b with the checkout command again. Example:. git checkout -b <new-branch-name>. HEAD is now at e33ef9c... v2.0.0 release; Submodule 'tools/clang' (https://github.com/wjakob/clang-cindex-python3) registered for path 'tools/clang'; Cloning into 'tools/clang'...; Submodule path 'tools/clang': checked out '254c7a91e3c6aa254e113197604dafb443f4d429'; [ 25%] No update step for 'pybind11_external'; [ 25%] No patch step for 'pybind11_external'; [ 31%] Performing configure step for 'pybind11_external'; -- The C compiler identification is GNU 5.4.0; -- The CXX compiler identification is GNU 5.4.0; -- Check for working C compiler: /usr/qc/gcc54/bin/gcc; -- Check for working C compiler: /usr/qc/gcc54/bin/gcc -- works; -- Detecting C compiler ABI info; -- Detecting C compiler ABI info - done; -- Detecting C compile features; -- Detecting C compile features - done; -- Check for working CXX compiler: /usr/qc/gcc54/bin/g++; -- Check for working CXX compiler: /usr/qc/gcc54/bin/g++ -- works; -- Detecting CXX compiler ABI info; -- Detecting CXX compiler ABI info - done; -- Detecting CXX compile features; -- Detecting CXX compile features - done; -- Found PythonInterp: /usr/bin/python3.4 (found version ""3.4.5"") ; -- Found PythonLibs: /usr/lib64/libpython3.4m.so; -- pybind11 v2.0.0; -- Configuring done; -- Generating done; -- Build files have been written to: /usr/qc/psi4.git/objdir/external/upstream/pybind11/pybind11_external-prefix/src/pybind11_external-build. ```. For reasons unknown to me I cannot reproduce my previous compilation error. Previously I could reproduce it even when cloning a brand new copy of psi4. Now it finishes the compilation normally.; Maybe the old psi4 installation directory interfered somehow? Just guessing at this point. However, I still cannot execute psi4. If I use a symlink to the installed binary I get a python error:; ```; import psi4; ImportErro",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/577#issuecomment-273732640
https://github.com/psi4/psi4/issues/577#issuecomment-273732640:3906,Safety,Detect,Detecting,3906,"eckout. If you want to create a new branch to retain commits you create, you may; do so (now or later) by using -b with the checkout command again. Example:. git checkout -b <new-branch-name>. HEAD is now at e33ef9c... v2.0.0 release; Submodule 'tools/clang' (https://github.com/wjakob/clang-cindex-python3) registered for path 'tools/clang'; Cloning into 'tools/clang'...; Submodule path 'tools/clang': checked out '254c7a91e3c6aa254e113197604dafb443f4d429'; [ 25%] No update step for 'pybind11_external'; [ 25%] No patch step for 'pybind11_external'; [ 31%] Performing configure step for 'pybind11_external'; -- The C compiler identification is GNU 5.4.0; -- The CXX compiler identification is GNU 5.4.0; -- Check for working C compiler: /usr/qc/gcc54/bin/gcc; -- Check for working C compiler: /usr/qc/gcc54/bin/gcc -- works; -- Detecting C compiler ABI info; -- Detecting C compiler ABI info - done; -- Detecting C compile features; -- Detecting C compile features - done; -- Check for working CXX compiler: /usr/qc/gcc54/bin/g++; -- Check for working CXX compiler: /usr/qc/gcc54/bin/g++ -- works; -- Detecting CXX compiler ABI info; -- Detecting CXX compiler ABI info - done; -- Detecting CXX compile features; -- Detecting CXX compile features - done; -- Found PythonInterp: /usr/bin/python3.4 (found version ""3.4.5"") ; -- Found PythonLibs: /usr/lib64/libpython3.4m.so; -- pybind11 v2.0.0; -- Configuring done; -- Generating done; -- Build files have been written to: /usr/qc/psi4.git/objdir/external/upstream/pybind11/pybind11_external-prefix/src/pybind11_external-build. ```. For reasons unknown to me I cannot reproduce my previous compilation error. Previously I could reproduce it even when cloning a brand new copy of psi4. Now it finishes the compilation normally.; Maybe the old psi4 installation directory interfered somehow? Just guessing at this point. However, I still cannot execute psi4. If I use a symlink to the installed binary I get a python error:; ```; import psi4; ImportErro",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/577#issuecomment-273732640
https://github.com/psi4/psi4/issues/577#issuecomment-273732640:772,Testability,Test,Test,772,"It seems that were it counts the correct python is used. Main CMake; ```; -- Setting (unspecified) option CMAKE_INSTALL_LIBDIR: lib; -- Setting (unspecified) option PYMOD_INSTALL_LIBDIR: /; -- Setting (unspecified) option ENABLE_GENERIC: OFF; -- Setting (unspecified) option CMAKE_INSTALL_MESSAGE: LAZY; -- Setting (unspecified) option psi4_CXX_STANDARD: 11; -- Found PythonInterp: /usr/bin/python (found version ""2.7.12"") ; -- Found PythonLibs: /usr/lib64/libpython2.7.so; -- Found Python 2.7: /usr/bin/python; -- Found libefp: /usr/qc/psi4.bin/lib/libefp.a (found version 1.3.0); -- Found libint: /usr/qc/psi4.bin/lib/libint.a (found version 1.1.6); -- Suitable pybind11 could not be located, Building pybind11 instead.; -- Try OpenMP C flag = [-fopenmp]; -- Performing Test OpenMP_FLAG_DETECTED. ```. psi4-core cmake:; ```; - The C compiler identification is GNU 5.4.0; -- The CXX compiler identification is GNU 5.4.0; -- Check for working C compiler: /usr/qc/gcc54/bin/gcc; -- Check for working C compiler: /usr/qc/gcc54/bin/gcc -- works; -- Detecting C compiler ABI info; -- Detecting C compiler ABI info - done; -- Detecting C compile features; -- Detecting C compile features - done; -- Check for working CXX compiler: /usr/qc/gcc54/bin/g++; -- Check for working CXX compiler: /usr/qc/gcc54/bin/g++ -- works; -- Detecting CXX compiler ABI info; -- Detecting CXX compiler ABI info - done; -- Detecting CXX compile features; -- Detecting CXX compile features - done; -- Checking for restrict keyword; -- keyword found : __restrict__; -- Found PythonInterp: /usr/bin/python (found version ""2.7.12"") ; -- Found PythonLibs: /usr/lib64/libpython2.7.so ; -- Using pybind11: /usr/qc/psi4.git/objdir/stage/usr/qc/psi4.bin/include (version 2.0.0 for Py2.7.12 and -std=c++11) ; -- Using Python 2.7: /usr/bin/python ; -- Looking for include file pthread.h ; -- Looking for include file pthread.h - found ; -- Looking for pthread_create ; -- Looking for pthread_create - found ; -- Found Threads: TRUE ; -- ",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/577#issuecomment-273732640
https://github.com/psi4/psi4/issues/577#issuecomment-273738266:27,Availability,ERROR,ERROR,27,"You can fix the `MKL FATAL ERROR` by `LD_PRELOAD=/path/to/libmkl_rt.so psi4`. Yes, #563 or a near relative will fix that properly w/o the preload. When you run the `bin/psi4` ""executable"", it hunts down its `lib/psi4/__init__.py` to load psi4 as a python module. I wouldn't have expected it to be confused by a symlink, but I suppose it's possible. I'll have to try it out. Glad the python detection seems to be working consistently now. Your CMake logs look good (the unnerving ""detached HEAD"" is just because we pin to tags or commits for dependencies). The odd python3.4 detection in the pybind11 CMake config is to be expected, since none of the environment was passed over to pybind11 because it doesn't matter at that stage. On the now-healed compilation, I was just warned today (@bennybp) that CMake _does_ search your install (not stage, install) dir for dependencies, so perhaps your hunch was right.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/577#issuecomment-273738266
https://github.com/psi4/psi4/issues/577#issuecomment-273738266:198,Availability,down,down,198,"You can fix the `MKL FATAL ERROR` by `LD_PRELOAD=/path/to/libmkl_rt.so psi4`. Yes, #563 or a near relative will fix that properly w/o the preload. When you run the `bin/psi4` ""executable"", it hunts down its `lib/psi4/__init__.py` to load psi4 as a python module. I wouldn't have expected it to be confused by a symlink, but I suppose it's possible. I'll have to try it out. Glad the python detection seems to be working consistently now. Your CMake logs look good (the unnerving ""detached HEAD"" is just because we pin to tags or commits for dependencies). The odd python3.4 detection in the pybind11 CMake config is to be expected, since none of the environment was passed over to pybind11 because it doesn't matter at that stage. On the now-healed compilation, I was just warned today (@bennybp) that CMake _does_ search your install (not stage, install) dir for dependencies, so perhaps your hunch was right.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/577#issuecomment-273738266
https://github.com/psi4/psi4/issues/577#issuecomment-273738266:827,Deployability,install,install,827,"You can fix the `MKL FATAL ERROR` by `LD_PRELOAD=/path/to/libmkl_rt.so psi4`. Yes, #563 or a near relative will fix that properly w/o the preload. When you run the `bin/psi4` ""executable"", it hunts down its `lib/psi4/__init__.py` to load psi4 as a python module. I wouldn't have expected it to be confused by a symlink, but I suppose it's possible. I'll have to try it out. Glad the python detection seems to be working consistently now. Your CMake logs look good (the unnerving ""detached HEAD"" is just because we pin to tags or commits for dependencies). The odd python3.4 detection in the pybind11 CMake config is to be expected, since none of the environment was passed over to pybind11 because it doesn't matter at that stage. On the now-healed compilation, I was just warned today (@bennybp) that CMake _does_ search your install (not stage, install) dir for dependencies, so perhaps your hunch was right.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/577#issuecomment-273738266
https://github.com/psi4/psi4/issues/577#issuecomment-273738266:847,Deployability,install,install,847,"You can fix the `MKL FATAL ERROR` by `LD_PRELOAD=/path/to/libmkl_rt.so psi4`. Yes, #563 or a near relative will fix that properly w/o the preload. When you run the `bin/psi4` ""executable"", it hunts down its `lib/psi4/__init__.py` to load psi4 as a python module. I wouldn't have expected it to be confused by a symlink, but I suppose it's possible. I'll have to try it out. Glad the python detection seems to be working consistently now. Your CMake logs look good (the unnerving ""detached HEAD"" is just because we pin to tags or commits for dependencies). The odd python3.4 detection in the pybind11 CMake config is to be expected, since none of the environment was passed over to pybind11 because it doesn't matter at that stage. On the now-healed compilation, I was just warned today (@bennybp) that CMake _does_ search your install (not stage, install) dir for dependencies, so perhaps your hunch was right.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/577#issuecomment-273738266
https://github.com/psi4/psi4/issues/577#issuecomment-273738266:541,Integrability,depend,dependencies,541,"You can fix the `MKL FATAL ERROR` by `LD_PRELOAD=/path/to/libmkl_rt.so psi4`. Yes, #563 or a near relative will fix that properly w/o the preload. When you run the `bin/psi4` ""executable"", it hunts down its `lib/psi4/__init__.py` to load psi4 as a python module. I wouldn't have expected it to be confused by a symlink, but I suppose it's possible. I'll have to try it out. Glad the python detection seems to be working consistently now. Your CMake logs look good (the unnerving ""detached HEAD"" is just because we pin to tags or commits for dependencies). The odd python3.4 detection in the pybind11 CMake config is to be expected, since none of the environment was passed over to pybind11 because it doesn't matter at that stage. On the now-healed compilation, I was just warned today (@bennybp) that CMake _does_ search your install (not stage, install) dir for dependencies, so perhaps your hunch was right.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/577#issuecomment-273738266
https://github.com/psi4/psi4/issues/577#issuecomment-273738266:864,Integrability,depend,dependencies,864,"You can fix the `MKL FATAL ERROR` by `LD_PRELOAD=/path/to/libmkl_rt.so psi4`. Yes, #563 or a near relative will fix that properly w/o the preload. When you run the `bin/psi4` ""executable"", it hunts down its `lib/psi4/__init__.py` to load psi4 as a python module. I wouldn't have expected it to be confused by a symlink, but I suppose it's possible. I'll have to try it out. Glad the python detection seems to be working consistently now. Your CMake logs look good (the unnerving ""detached HEAD"" is just because we pin to tags or commits for dependencies). The odd python3.4 detection in the pybind11 CMake config is to be expected, since none of the environment was passed over to pybind11 because it doesn't matter at that stage. On the now-healed compilation, I was just warned today (@bennybp) that CMake _does_ search your install (not stage, install) dir for dependencies, so perhaps your hunch was right.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/577#issuecomment-273738266
https://github.com/psi4/psi4/issues/577#issuecomment-273738266:606,Modifiability,config,config,606,"You can fix the `MKL FATAL ERROR` by `LD_PRELOAD=/path/to/libmkl_rt.so psi4`. Yes, #563 or a near relative will fix that properly w/o the preload. When you run the `bin/psi4` ""executable"", it hunts down its `lib/psi4/__init__.py` to load psi4 as a python module. I wouldn't have expected it to be confused by a symlink, but I suppose it's possible. I'll have to try it out. Glad the python detection seems to be working consistently now. Your CMake logs look good (the unnerving ""detached HEAD"" is just because we pin to tags or commits for dependencies). The odd python3.4 detection in the pybind11 CMake config is to be expected, since none of the environment was passed over to pybind11 because it doesn't matter at that stage. On the now-healed compilation, I was just warned today (@bennybp) that CMake _does_ search your install (not stage, install) dir for dependencies, so perhaps your hunch was right.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/577#issuecomment-273738266
https://github.com/psi4/psi4/issues/577#issuecomment-273738266:233,Performance,load,load,233,"You can fix the `MKL FATAL ERROR` by `LD_PRELOAD=/path/to/libmkl_rt.so psi4`. Yes, #563 or a near relative will fix that properly w/o the preload. When you run the `bin/psi4` ""executable"", it hunts down its `lib/psi4/__init__.py` to load psi4 as a python module. I wouldn't have expected it to be confused by a symlink, but I suppose it's possible. I'll have to try it out. Glad the python detection seems to be working consistently now. Your CMake logs look good (the unnerving ""detached HEAD"" is just because we pin to tags or commits for dependencies). The odd python3.4 detection in the pybind11 CMake config is to be expected, since none of the environment was passed over to pybind11 because it doesn't matter at that stage. On the now-healed compilation, I was just warned today (@bennybp) that CMake _does_ search your install (not stage, install) dir for dependencies, so perhaps your hunch was right.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/577#issuecomment-273738266
https://github.com/psi4/psi4/issues/577#issuecomment-273738266:390,Safety,detect,detection,390,"You can fix the `MKL FATAL ERROR` by `LD_PRELOAD=/path/to/libmkl_rt.so psi4`. Yes, #563 or a near relative will fix that properly w/o the preload. When you run the `bin/psi4` ""executable"", it hunts down its `lib/psi4/__init__.py` to load psi4 as a python module. I wouldn't have expected it to be confused by a symlink, but I suppose it's possible. I'll have to try it out. Glad the python detection seems to be working consistently now. Your CMake logs look good (the unnerving ""detached HEAD"" is just because we pin to tags or commits for dependencies). The odd python3.4 detection in the pybind11 CMake config is to be expected, since none of the environment was passed over to pybind11 because it doesn't matter at that stage. On the now-healed compilation, I was just warned today (@bennybp) that CMake _does_ search your install (not stage, install) dir for dependencies, so perhaps your hunch was right.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/577#issuecomment-273738266
https://github.com/psi4/psi4/issues/577#issuecomment-273738266:574,Safety,detect,detection,574,"You can fix the `MKL FATAL ERROR` by `LD_PRELOAD=/path/to/libmkl_rt.so psi4`. Yes, #563 or a near relative will fix that properly w/o the preload. When you run the `bin/psi4` ""executable"", it hunts down its `lib/psi4/__init__.py` to load psi4 as a python module. I wouldn't have expected it to be confused by a symlink, but I suppose it's possible. I'll have to try it out. Glad the python detection seems to be working consistently now. Your CMake logs look good (the unnerving ""detached HEAD"" is just because we pin to tags or commits for dependencies). The odd python3.4 detection in the pybind11 CMake config is to be expected, since none of the environment was passed over to pybind11 because it doesn't matter at that stage. On the now-healed compilation, I was just warned today (@bennybp) that CMake _does_ search your install (not stage, install) dir for dependencies, so perhaps your hunch was right.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/577#issuecomment-273738266
https://github.com/psi4/psi4/issues/577#issuecomment-273738266:449,Testability,log,logs,449,"You can fix the `MKL FATAL ERROR` by `LD_PRELOAD=/path/to/libmkl_rt.so psi4`. Yes, #563 or a near relative will fix that properly w/o the preload. When you run the `bin/psi4` ""executable"", it hunts down its `lib/psi4/__init__.py` to load psi4 as a python module. I wouldn't have expected it to be confused by a symlink, but I suppose it's possible. I'll have to try it out. Glad the python detection seems to be working consistently now. Your CMake logs look good (the unnerving ""detached HEAD"" is just because we pin to tags or commits for dependencies). The odd python3.4 detection in the pybind11 CMake config is to be expected, since none of the environment was passed over to pybind11 because it doesn't matter at that stage. On the now-healed compilation, I was just warned today (@bennybp) that CMake _does_ search your install (not stage, install) dir for dependencies, so perhaps your hunch was right.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/577#issuecomment-273738266
https://github.com/psi4/psi4/issues/580#issuecomment-273774074:62,Deployability,release,releases,62,Guess you are looking for these: https://github.com/psi4/psi4/releases,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/580#issuecomment-273774074
https://github.com/psi4/psi4/issues/580#issuecomment-273778973:184,Deployability,release,release,184,"Hi hokru,. Thank you very much, this is exactly what I am looking for. Is this documented anywhere ? Or is there a link on the main page of the psi4 github repository pointing to this release page ?. Best regards. Sam",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/580#issuecomment-273778973
https://github.com/psi4/psi4/issues/580#issuecomment-273780555:100,Deployability,release,releases,100,"yeah, you see the pink & blue line at top of the psi4 main page? Above it says commits, branches, **releases**, contributors, etc.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/580#issuecomment-273780555
https://github.com/psi4/psi4/issues/580#issuecomment-273803591:68,Deployability,release,release,68,"@hokru is quite right. You can get a tarball of any commit, tag, or release of any repository through GitHub. I'd strongly recommend doing a clone, rather than a tarball, so that you can update easily and do partial rebuilds. Even more strongly, I'd recommend you do something in the 1.1 release series, like 1.1a1 (if you really want a tag) https://github.com/psi4/psi4/tags because Psi4 has had its build system rewritten, has dumped boost, has switch from an executable to a library, and has had its git history rewritten after the 1.0 release (for all that, running it is exactly the same). Because of the history rewrite, I'm not even sure a 1.0 can be extracted from this repo (we've a plan to put up a separate 1.0 repo; Yes, there probably should be a big warning sign against trying to build 1.0 from existing repo). So, please clone and build HEAD, or clone and build 1.1a1 (if you prefer tags), or tarball and build 1.1a1 (if you must). The wiki for building is out of date. New instructions have been moved into the main documentation. That should get posted today, it was only committed yesterday. Even if you did just have a random git tag like e0a3ab, that gets translated into a sortable version (you can see yourself after cloning by running `python psi4/versioner.py`). So you'd still have a version like `1.1a1.dev100` to label the installation.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/580#issuecomment-273803591
https://github.com/psi4/psi4/issues/580#issuecomment-273803591:187,Deployability,update,update,187,"@hokru is quite right. You can get a tarball of any commit, tag, or release of any repository through GitHub. I'd strongly recommend doing a clone, rather than a tarball, so that you can update easily and do partial rebuilds. Even more strongly, I'd recommend you do something in the 1.1 release series, like 1.1a1 (if you really want a tag) https://github.com/psi4/psi4/tags because Psi4 has had its build system rewritten, has dumped boost, has switch from an executable to a library, and has had its git history rewritten after the 1.0 release (for all that, running it is exactly the same). Because of the history rewrite, I'm not even sure a 1.0 can be extracted from this repo (we've a plan to put up a separate 1.0 repo; Yes, there probably should be a big warning sign against trying to build 1.0 from existing repo). So, please clone and build HEAD, or clone and build 1.1a1 (if you prefer tags), or tarball and build 1.1a1 (if you must). The wiki for building is out of date. New instructions have been moved into the main documentation. That should get posted today, it was only committed yesterday. Even if you did just have a random git tag like e0a3ab, that gets translated into a sortable version (you can see yourself after cloning by running `python psi4/versioner.py`). So you'd still have a version like `1.1a1.dev100` to label the installation.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/580#issuecomment-273803591
https://github.com/psi4/psi4/issues/580#issuecomment-273803591:288,Deployability,release,release,288,"@hokru is quite right. You can get a tarball of any commit, tag, or release of any repository through GitHub. I'd strongly recommend doing a clone, rather than a tarball, so that you can update easily and do partial rebuilds. Even more strongly, I'd recommend you do something in the 1.1 release series, like 1.1a1 (if you really want a tag) https://github.com/psi4/psi4/tags because Psi4 has had its build system rewritten, has dumped boost, has switch from an executable to a library, and has had its git history rewritten after the 1.0 release (for all that, running it is exactly the same). Because of the history rewrite, I'm not even sure a 1.0 can be extracted from this repo (we've a plan to put up a separate 1.0 repo; Yes, there probably should be a big warning sign against trying to build 1.0 from existing repo). So, please clone and build HEAD, or clone and build 1.1a1 (if you prefer tags), or tarball and build 1.1a1 (if you must). The wiki for building is out of date. New instructions have been moved into the main documentation. That should get posted today, it was only committed yesterday. Even if you did just have a random git tag like e0a3ab, that gets translated into a sortable version (you can see yourself after cloning by running `python psi4/versioner.py`). So you'd still have a version like `1.1a1.dev100` to label the installation.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/580#issuecomment-273803591
https://github.com/psi4/psi4/issues/580#issuecomment-273803591:539,Deployability,release,release,539,"@hokru is quite right. You can get a tarball of any commit, tag, or release of any repository through GitHub. I'd strongly recommend doing a clone, rather than a tarball, so that you can update easily and do partial rebuilds. Even more strongly, I'd recommend you do something in the 1.1 release series, like 1.1a1 (if you really want a tag) https://github.com/psi4/psi4/tags because Psi4 has had its build system rewritten, has dumped boost, has switch from an executable to a library, and has had its git history rewritten after the 1.0 release (for all that, running it is exactly the same). Because of the history rewrite, I'm not even sure a 1.0 can be extracted from this repo (we've a plan to put up a separate 1.0 repo; Yes, there probably should be a big warning sign against trying to build 1.0 from existing repo). So, please clone and build HEAD, or clone and build 1.1a1 (if you prefer tags), or tarball and build 1.1a1 (if you must). The wiki for building is out of date. New instructions have been moved into the main documentation. That should get posted today, it was only committed yesterday. Even if you did just have a random git tag like e0a3ab, that gets translated into a sortable version (you can see yourself after cloning by running `python psi4/versioner.py`). So you'd still have a version like `1.1a1.dev100` to label the installation.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/580#issuecomment-273803591
https://github.com/psi4/psi4/issues/580#issuecomment-273803591:1351,Deployability,install,installation,1351,"@hokru is quite right. You can get a tarball of any commit, tag, or release of any repository through GitHub. I'd strongly recommend doing a clone, rather than a tarball, so that you can update easily and do partial rebuilds. Even more strongly, I'd recommend you do something in the 1.1 release series, like 1.1a1 (if you really want a tag) https://github.com/psi4/psi4/tags because Psi4 has had its build system rewritten, has dumped boost, has switch from an executable to a library, and has had its git history rewritten after the 1.0 release (for all that, running it is exactly the same). Because of the history rewrite, I'm not even sure a 1.0 can be extracted from this repo (we've a plan to put up a separate 1.0 repo; Yes, there probably should be a big warning sign against trying to build 1.0 from existing repo). So, please clone and build HEAD, or clone and build 1.1a1 (if you prefer tags), or tarball and build 1.1a1 (if you must). The wiki for building is out of date. New instructions have been moved into the main documentation. That should get posted today, it was only committed yesterday. Even if you did just have a random git tag like e0a3ab, that gets translated into a sortable version (you can see yourself after cloning by running `python psi4/versioner.py`). So you'd still have a version like `1.1a1.dev100` to label the installation.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/580#issuecomment-273803591
https://github.com/psi4/psi4/issues/580#issuecomment-273803591:618,Modifiability,rewrite,rewrite,618,"@hokru is quite right. You can get a tarball of any commit, tag, or release of any repository through GitHub. I'd strongly recommend doing a clone, rather than a tarball, so that you can update easily and do partial rebuilds. Even more strongly, I'd recommend you do something in the 1.1 release series, like 1.1a1 (if you really want a tag) https://github.com/psi4/psi4/tags because Psi4 has had its build system rewritten, has dumped boost, has switch from an executable to a library, and has had its git history rewritten after the 1.0 release (for all that, running it is exactly the same). Because of the history rewrite, I'm not even sure a 1.0 can be extracted from this repo (we've a plan to put up a separate 1.0 repo; Yes, there probably should be a big warning sign against trying to build 1.0 from existing repo). So, please clone and build HEAD, or clone and build 1.1a1 (if you prefer tags), or tarball and build 1.1a1 (if you must). The wiki for building is out of date. New instructions have been moved into the main documentation. That should get posted today, it was only committed yesterday. Even if you did just have a random git tag like e0a3ab, that gets translated into a sortable version (you can see yourself after cloning by running `python psi4/versioner.py`). So you'd still have a version like `1.1a1.dev100` to label the installation.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/580#issuecomment-273803591
https://github.com/psi4/psi4/issues/580#issuecomment-273809137:68,Deployability,update,update,68,"Hi loriab,. Thank you for your reply. On our HPC cluster, we do not update software. If there is a newer version of a software, we do an additional installation next to the existing version. For us it is important to provide continuity to the researchers. If data is published and a year or two later a researcher for some reason needs to reproduce a calculation, we would like to provide exactly the same software version that was used for the first run. Since that means that we have a lot of versions installed for a certain softwares, there needs to be a transparent way to distinguish the versions (and it should be obvious to the user, which version he is using). Tags sounds like a good solution for the installations that I am doing. I just tried to build release 1.0 from the release tarball and encountered some problems (half a year ago I have built 1.0 rc1 and this worked well). I just need to build a version that is newer than 1.0 rc1, because of a SAPT bug in rc1. Are tagged versions static or do they also change ?. I will try to clone and build 1.1a1. Thank you very much for replying to my questions. Best regards. Sam",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/580#issuecomment-273809137
https://github.com/psi4/psi4/issues/580#issuecomment-273809137:148,Deployability,install,installation,148,"Hi loriab,. Thank you for your reply. On our HPC cluster, we do not update software. If there is a newer version of a software, we do an additional installation next to the existing version. For us it is important to provide continuity to the researchers. If data is published and a year or two later a researcher for some reason needs to reproduce a calculation, we would like to provide exactly the same software version that was used for the first run. Since that means that we have a lot of versions installed for a certain softwares, there needs to be a transparent way to distinguish the versions (and it should be obvious to the user, which version he is using). Tags sounds like a good solution for the installations that I am doing. I just tried to build release 1.0 from the release tarball and encountered some problems (half a year ago I have built 1.0 rc1 and this worked well). I just need to build a version that is newer than 1.0 rc1, because of a SAPT bug in rc1. Are tagged versions static or do they also change ?. I will try to clone and build 1.1a1. Thank you very much for replying to my questions. Best regards. Sam",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/580#issuecomment-273809137
https://github.com/psi4/psi4/issues/580#issuecomment-273809137:504,Deployability,install,installed,504,"Hi loriab,. Thank you for your reply. On our HPC cluster, we do not update software. If there is a newer version of a software, we do an additional installation next to the existing version. For us it is important to provide continuity to the researchers. If data is published and a year or two later a researcher for some reason needs to reproduce a calculation, we would like to provide exactly the same software version that was used for the first run. Since that means that we have a lot of versions installed for a certain softwares, there needs to be a transparent way to distinguish the versions (and it should be obvious to the user, which version he is using). Tags sounds like a good solution for the installations that I am doing. I just tried to build release 1.0 from the release tarball and encountered some problems (half a year ago I have built 1.0 rc1 and this worked well). I just need to build a version that is newer than 1.0 rc1, because of a SAPT bug in rc1. Are tagged versions static or do they also change ?. I will try to clone and build 1.1a1. Thank you very much for replying to my questions. Best regards. Sam",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/580#issuecomment-273809137
https://github.com/psi4/psi4/issues/580#issuecomment-273809137:711,Deployability,install,installations,711,"Hi loriab,. Thank you for your reply. On our HPC cluster, we do not update software. If there is a newer version of a software, we do an additional installation next to the existing version. For us it is important to provide continuity to the researchers. If data is published and a year or two later a researcher for some reason needs to reproduce a calculation, we would like to provide exactly the same software version that was used for the first run. Since that means that we have a lot of versions installed for a certain softwares, there needs to be a transparent way to distinguish the versions (and it should be obvious to the user, which version he is using). Tags sounds like a good solution for the installations that I am doing. I just tried to build release 1.0 from the release tarball and encountered some problems (half a year ago I have built 1.0 rc1 and this worked well). I just need to build a version that is newer than 1.0 rc1, because of a SAPT bug in rc1. Are tagged versions static or do they also change ?. I will try to clone and build 1.1a1. Thank you very much for replying to my questions. Best regards. Sam",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/580#issuecomment-273809137
https://github.com/psi4/psi4/issues/580#issuecomment-273809137:764,Deployability,release,release,764,"Hi loriab,. Thank you for your reply. On our HPC cluster, we do not update software. If there is a newer version of a software, we do an additional installation next to the existing version. For us it is important to provide continuity to the researchers. If data is published and a year or two later a researcher for some reason needs to reproduce a calculation, we would like to provide exactly the same software version that was used for the first run. Since that means that we have a lot of versions installed for a certain softwares, there needs to be a transparent way to distinguish the versions (and it should be obvious to the user, which version he is using). Tags sounds like a good solution for the installations that I am doing. I just tried to build release 1.0 from the release tarball and encountered some problems (half a year ago I have built 1.0 rc1 and this worked well). I just need to build a version that is newer than 1.0 rc1, because of a SAPT bug in rc1. Are tagged versions static or do they also change ?. I will try to clone and build 1.1a1. Thank you very much for replying to my questions. Best regards. Sam",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/580#issuecomment-273809137
https://github.com/psi4/psi4/issues/580#issuecomment-273809137:785,Deployability,release,release,785,"Hi loriab,. Thank you for your reply. On our HPC cluster, we do not update software. If there is a newer version of a software, we do an additional installation next to the existing version. For us it is important to provide continuity to the researchers. If data is published and a year or two later a researcher for some reason needs to reproduce a calculation, we would like to provide exactly the same software version that was used for the first run. Since that means that we have a lot of versions installed for a certain softwares, there needs to be a transparent way to distinguish the versions (and it should be obvious to the user, which version he is using). Tags sounds like a good solution for the installations that I am doing. I just tried to build release 1.0 from the release tarball and encountered some problems (half a year ago I have built 1.0 rc1 and this worked well). I just need to build a version that is newer than 1.0 rc1, because of a SAPT bug in rc1. Are tagged versions static or do they also change ?. I will try to clone and build 1.1a1. Thank you very much for replying to my questions. Best regards. Sam",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/580#issuecomment-273809137
https://github.com/psi4/psi4/issues/580#issuecomment-273811816:306,Availability,down,download,306,"Ok, I see. 1.1a1 should do nicely for you. Tagged versions _are_ static once pushed to the repo. On the main repo, we'll probably change `1.0 to 1.0approx` and clear out the old ones, since the history re-write has rendered them defunct. But the history rewrite was a once-in-many-years event that cut our download size by 90%, so tags hereafter should be stable.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/580#issuecomment-273811816
https://github.com/psi4/psi4/issues/580#issuecomment-273811816:254,Modifiability,rewrite,rewrite,254,"Ok, I see. 1.1a1 should do nicely for you. Tagged versions _are_ static once pushed to the repo. On the main repo, we'll probably change `1.0 to 1.0approx` and clear out the old ones, since the history re-write has rendered them defunct. But the history rewrite was a once-in-many-years event that cut our download size by 90%, so tags hereafter should be stable.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/580#issuecomment-273811816
https://github.com/psi4/psi4/issues/580#issuecomment-273811816:160,Usability,clear,clear,160,"Ok, I see. 1.1a1 should do nicely for you. Tagged versions _are_ static once pushed to the repo. On the main repo, we'll probably change `1.0 to 1.0approx` and clear out the old ones, since the history re-write has rendered them defunct. But the history rewrite was a once-in-many-years event that cut our download size by 90%, so tags hereafter should be stable.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/580#issuecomment-273811816
https://github.com/psi4/psi4/issues/580#issuecomment-274027886:675,Deployability,update,update,675,"Hi loriab,. Sorry for asking that many questions. v1.1a1 requires GCC 4.9 or newer. Most software on our cluster is compiled with GCC 4.8.2 and I would like to avoid recompiling Python, HDF5, GSL etc. with a newer compiler version. The reason for compiling a newer version of psi4 is the the following post from Robert (SAPT bug in 1.0 rc1):. http://forum.psicode.org/t/problem-in-sapt2-3-dmp2-calculation/395. In your reply to the post you mentioned that there was a clean up of the SAPT code in july:. ""Your input worked just fine on my current Psi4. There've been a lot of changes to Psi4 since 1.0rc, and there was a clean-up of SAPT printing in July, so I recommend you update to current Psi4 which is ~700 commits ahead of where you're at. Especially since you're running SAPT. Did you build your own or do you want to try the conda binary?"". Is there are psi4 version with the new SAPT code, which builds with GCC 4.8.2 ?. Best regards. Sam",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/580#issuecomment-274027886
https://github.com/psi4/psi4/issues/580#issuecomment-274027886:160,Safety,avoid,avoid,160,"Hi loriab,. Sorry for asking that many questions. v1.1a1 requires GCC 4.9 or newer. Most software on our cluster is compiled with GCC 4.8.2 and I would like to avoid recompiling Python, HDF5, GSL etc. with a newer compiler version. The reason for compiling a newer version of psi4 is the the following post from Robert (SAPT bug in 1.0 rc1):. http://forum.psicode.org/t/problem-in-sapt2-3-dmp2-calculation/395. In your reply to the post you mentioned that there was a clean up of the SAPT code in july:. ""Your input worked just fine on my current Psi4. There've been a lot of changes to Psi4 since 1.0rc, and there was a clean-up of SAPT printing in July, so I recommend you update to current Psi4 which is ~700 commits ahead of where you're at. Especially since you're running SAPT. Did you build your own or do you want to try the conda binary?"". Is there are psi4 version with the new SAPT code, which builds with GCC 4.8.2 ?. Best regards. Sam",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/580#issuecomment-274027886
https://github.com/psi4/psi4/issues/580#issuecomment-274087513:39,Deployability,release,release,39,"Psi4 1.0 and its successors in the 1.0 release series have the new SAPT code _and_ build with GCC 4.8. But for all the aforementioned reasons I advise building a 1.1a1 series Psi4 (and the fact that I tested the sapt2+3dmp2 forum post on a 1.1a1 series). We can get around your problem 4.8.2 problem. You don't have to compile _everything_ with >=4.9 GCC, just Psi4. (HDF5 isn't a dependency unless you `ENABLE_CheMPS2=ON`; GSL no longer a dependency at all; Python only an interpreter and header dependency, not library). You can get a gcc 5.2 from conda vis [these instructions](https://github.com/psi4/psi4/blob/master/doc/sphinxman/source/build_planning.rst#how-to-satisfy-the-gcc--49-requirement-on-linux-without-updating-the-os) and use that to compile Psi4, without ever interfering with your system gcc.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/580#issuecomment-274087513
https://github.com/psi4/psi4/issues/580#issuecomment-274087513:381,Integrability,depend,dependency,381,"Psi4 1.0 and its successors in the 1.0 release series have the new SAPT code _and_ build with GCC 4.8. But for all the aforementioned reasons I advise building a 1.1a1 series Psi4 (and the fact that I tested the sapt2+3dmp2 forum post on a 1.1a1 series). We can get around your problem 4.8.2 problem. You don't have to compile _everything_ with >=4.9 GCC, just Psi4. (HDF5 isn't a dependency unless you `ENABLE_CheMPS2=ON`; GSL no longer a dependency at all; Python only an interpreter and header dependency, not library). You can get a gcc 5.2 from conda vis [these instructions](https://github.com/psi4/psi4/blob/master/doc/sphinxman/source/build_planning.rst#how-to-satisfy-the-gcc--49-requirement-on-linux-without-updating-the-os) and use that to compile Psi4, without ever interfering with your system gcc.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/580#issuecomment-274087513
https://github.com/psi4/psi4/issues/580#issuecomment-274087513:440,Integrability,depend,dependency,440,"Psi4 1.0 and its successors in the 1.0 release series have the new SAPT code _and_ build with GCC 4.8. But for all the aforementioned reasons I advise building a 1.1a1 series Psi4 (and the fact that I tested the sapt2+3dmp2 forum post on a 1.1a1 series). We can get around your problem 4.8.2 problem. You don't have to compile _everything_ with >=4.9 GCC, just Psi4. (HDF5 isn't a dependency unless you `ENABLE_CheMPS2=ON`; GSL no longer a dependency at all; Python only an interpreter and header dependency, not library). You can get a gcc 5.2 from conda vis [these instructions](https://github.com/psi4/psi4/blob/master/doc/sphinxman/source/build_planning.rst#how-to-satisfy-the-gcc--49-requirement-on-linux-without-updating-the-os) and use that to compile Psi4, without ever interfering with your system gcc.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/580#issuecomment-274087513
https://github.com/psi4/psi4/issues/580#issuecomment-274087513:497,Integrability,depend,dependency,497,"Psi4 1.0 and its successors in the 1.0 release series have the new SAPT code _and_ build with GCC 4.8. But for all the aforementioned reasons I advise building a 1.1a1 series Psi4 (and the fact that I tested the sapt2+3dmp2 forum post on a 1.1a1 series). We can get around your problem 4.8.2 problem. You don't have to compile _everything_ with >=4.9 GCC, just Psi4. (HDF5 isn't a dependency unless you `ENABLE_CheMPS2=ON`; GSL no longer a dependency at all; Python only an interpreter and header dependency, not library). You can get a gcc 5.2 from conda vis [these instructions](https://github.com/psi4/psi4/blob/master/doc/sphinxman/source/build_planning.rst#how-to-satisfy-the-gcc--49-requirement-on-linux-without-updating-the-os) and use that to compile Psi4, without ever interfering with your system gcc.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/580#issuecomment-274087513
https://github.com/psi4/psi4/issues/580#issuecomment-274087513:201,Testability,test,tested,201,"Psi4 1.0 and its successors in the 1.0 release series have the new SAPT code _and_ build with GCC 4.8. But for all the aforementioned reasons I advise building a 1.1a1 series Psi4 (and the fact that I tested the sapt2+3dmp2 forum post on a 1.1a1 series). We can get around your problem 4.8.2 problem. You don't have to compile _everything_ with >=4.9 GCC, just Psi4. (HDF5 isn't a dependency unless you `ENABLE_CheMPS2=ON`; GSL no longer a dependency at all; Python only an interpreter and header dependency, not library). You can get a gcc 5.2 from conda vis [these instructions](https://github.com/psi4/psi4/blob/master/doc/sphinxman/source/build_planning.rst#how-to-satisfy-the-gcc--49-requirement-on-linux-without-updating-the-os) and use that to compile Psi4, without ever interfering with your system gcc.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/580#issuecomment-274087513
https://github.com/psi4/psi4/issues/580#issuecomment-274478774:292,Safety,detect,detecting,292,"Hi loriab,. Thank you for your reply. I already have access to GCC 5.2.0 and 6.2.0 on the cluster. I currently try to compile psi4 with GCC 5.2.0. I am currently struggling with specifying the BLAS library. I would like to use OpenBLAS 0.2.13, but somehow cmake has problems to automatically detecting it and I also don't know how I can specify the explicit path to the library (/cluster/apps/openblas/0.2.13_seq/x86_64/gcc_5.2.0/lib/libopenblas.so). I already tried setting. export MATH_ROOT=/cluster/apps/openblas/0.2.13_seq/x86_64/gcc_5.2.0/lib. and. export MATH_ROOT=/cluster/apps/openblas/0.2.13_seq/x86_64/gcc_5.2.0. but in both cases OpenBLAS is not detected. If I disable the ENABLE_AUTO_BLAS and the ENABLE_AUTO_LAPACK settings, how can I specify the absolute path to the library ?. Thank you for your help. @andysim:; According to https://gcc.gnu.org/projects/cxx-status.html#cxx11:. ""GCC 4.8.1 was the first feature-complete implementation of the 2011 C++ standard, previously known as C++0x."". Best regards. Sam",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/580#issuecomment-274478774
https://github.com/psi4/psi4/issues/580#issuecomment-274478774:657,Safety,detect,detected,657,"Hi loriab,. Thank you for your reply. I already have access to GCC 5.2.0 and 6.2.0 on the cluster. I currently try to compile psi4 with GCC 5.2.0. I am currently struggling with specifying the BLAS library. I would like to use OpenBLAS 0.2.13, but somehow cmake has problems to automatically detecting it and I also don't know how I can specify the explicit path to the library (/cluster/apps/openblas/0.2.13_seq/x86_64/gcc_5.2.0/lib/libopenblas.so). I already tried setting. export MATH_ROOT=/cluster/apps/openblas/0.2.13_seq/x86_64/gcc_5.2.0/lib. and. export MATH_ROOT=/cluster/apps/openblas/0.2.13_seq/x86_64/gcc_5.2.0. but in both cases OpenBLAS is not detected. If I disable the ENABLE_AUTO_BLAS and the ENABLE_AUTO_LAPACK settings, how can I specify the absolute path to the library ?. Thank you for your help. @andysim:; According to https://gcc.gnu.org/projects/cxx-status.html#cxx11:. ""GCC 4.8.1 was the first feature-complete implementation of the 2011 C++ standard, previously known as C++0x."". Best regards. Sam",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/580#issuecomment-274478774
https://github.com/psi4/psi4/issues/580#issuecomment-274478774:53,Security,access,access,53,"Hi loriab,. Thank you for your reply. I already have access to GCC 5.2.0 and 6.2.0 on the cluster. I currently try to compile psi4 with GCC 5.2.0. I am currently struggling with specifying the BLAS library. I would like to use OpenBLAS 0.2.13, but somehow cmake has problems to automatically detecting it and I also don't know how I can specify the explicit path to the library (/cluster/apps/openblas/0.2.13_seq/x86_64/gcc_5.2.0/lib/libopenblas.so). I already tried setting. export MATH_ROOT=/cluster/apps/openblas/0.2.13_seq/x86_64/gcc_5.2.0/lib. and. export MATH_ROOT=/cluster/apps/openblas/0.2.13_seq/x86_64/gcc_5.2.0. but in both cases OpenBLAS is not detected. If I disable the ENABLE_AUTO_BLAS and the ENABLE_AUTO_LAPACK settings, how can I specify the absolute path to the library ?. Thank you for your help. @andysim:; According to https://gcc.gnu.org/projects/cxx-status.html#cxx11:. ""GCC 4.8.1 was the first feature-complete implementation of the 2011 C++ standard, previously known as C++0x."". Best regards. Sam",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/580#issuecomment-274478774
https://github.com/psi4/psi4/issues/580#issuecomment-274524821:235,Safety,detect,detection,235,"I [understand](http://stackoverflow.com/a/12665408) the GCC folks selected a limited definition of ""feature-complete"" when they wrote that sentence about 4.8. I use MKL so exclusively that I can only offer tentative advice on the Math detection. Check [this bit](https://github.com/psi4/psi4/blob/master/cmake/math/MathLibs.cmake#L18-L28) of code and make sure OpenBlas's headers are matching up. Then maybe change the libs from `blas` to `openblas` and try again with MATH_ROOT. Even if it detects properly for Psi4, you may still hit a block with math libs for libefp. Been working on solving that problem this weekend. I've no experience with the quality of OpenBLAS. But if it's not better than a system native distribution, you may prefer the binary that has high-quality math libs baked in.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/580#issuecomment-274524821
https://github.com/psi4/psi4/issues/580#issuecomment-274524821:491,Safety,detect,detects,491,"I [understand](http://stackoverflow.com/a/12665408) the GCC folks selected a limited definition of ""feature-complete"" when they wrote that sentence about 4.8. I use MKL so exclusively that I can only offer tentative advice on the Math detection. Check [this bit](https://github.com/psi4/psi4/blob/master/cmake/math/MathLibs.cmake#L18-L28) of code and make sure OpenBlas's headers are matching up. Then maybe change the libs from `blas` to `openblas` and try again with MATH_ROOT. Even if it detects properly for Psi4, you may still hit a block with math libs for libefp. Been working on solving that problem this weekend. I've no experience with the quality of OpenBLAS. But if it's not better than a system native distribution, you may prefer the binary that has high-quality math libs baked in.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/580#issuecomment-274524821
https://github.com/psi4/psi4/issues/580#issuecomment-274762486:3426,Availability,error,error,3426,BLAS.patch ; Hmm... Looks like a new-style context diff to me...; The text leading up to this was:; --------------------------; |diff -crB psi4_/cmake/math/ConfigMath.cmake psi4/cmake/math/ConfigMath.cmake; |*** psi4_/cmake/math/ConfigMath.cmake 2017-01-20 09:35:51.000000000 +0100; |--- psi4/cmake/math/ConfigMath.cmake 2017-01-24 09:52:50.074349042 +0100; --------------------------; Patching file cmake/math/ConfigMath.cmake using Plan A...; Hunk #1 succeeded at 14.; Hmm... The next patch looks like a new-style context diff to me...; The text leading up to this was:; --------------------------; |diff -crB psi4_/cmake/math/MathLibs.cmake psi4/cmake/math/MathLibs.cmake; |*** psi4_/cmake/math/MathLibs.cmake 2017-01-20 09:35:51.000000000 +0100; |--- psi4/cmake/math/MathLibs.cmake 2017-01-24 09:28:13.812117187 +0100; --------------------------; Patching file cmake/math/MathLibs.cmake using Plan A...; Hunk #1 succeeded at 73.; done; [sfux@develop01 psi4]$; ```; The code (using OpenBLAS instead of MKL) compiles without error but fails in an installation step:. ```; -- Installing: /scratch/appssf/psi4/build/stage/cluster/apps/psi4/1.1a1/x86_64/lib//psi4/driver/util/__init__.py; -- Installing: /scratch/appssf/psi4/build/stage/cluster/apps/psi4/1.1a1/x86_64/lib//psi4/driver/util/filesystem.py; -- Installing: /scratch/appssf/psi4/build/stage/cluster/apps/psi4/1.1a1/x86_64/lib//psi4/driver/util/tty; -- Installing: /scratch/appssf/psi4/build/stage/cluster/apps/psi4/1.1a1/x86_64/lib//psi4/driver/util/tty/__init__.py; -- Installing: /scratch/appssf/psi4/build/stage/cluster/apps/psi4/1.1a1/x86_64/lib//psi4/driver/util/tty/color.py; -- Installing: /scratch/appssf/psi4/build/stage/cluster/apps/psi4/1.1a1/x86_64/lib//psi4/driver/wrapper_autofrag.py; -- Installing: /scratch/appssf/psi4/build/stage/cluster/apps/psi4/1.1a1/x86_64/lib//psi4/driver/wrapper_database.py; -- Installing: /scratch/appssf/psi4/build/stage/cluster/apps/psi4/1.1a1/x86_64/lib/psi4/header.py; -- Installing: /scratch/,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/580#issuecomment-274762486
https://github.com/psi4/psi4/issues/580#issuecomment-274762486:5012,Availability,Error,Error,5012,"t__.py; -- Installing: /scratch/appssf/psi4/build/stage/cluster/apps/psi4/1.1a1/x86_64/lib//psi4/driver/util/tty/color.py; -- Installing: /scratch/appssf/psi4/build/stage/cluster/apps/psi4/1.1a1/x86_64/lib//psi4/driver/wrapper_autofrag.py; -- Installing: /scratch/appssf/psi4/build/stage/cluster/apps/psi4/1.1a1/x86_64/lib//psi4/driver/wrapper_database.py; -- Installing: /scratch/appssf/psi4/build/stage/cluster/apps/psi4/1.1a1/x86_64/lib/psi4/header.py; -- Installing: /scratch/appssf/psi4/build/stage/cluster/apps/psi4/1.1a1/x86_64/lib/psi4/extras.py; -- Installing: /scratch/appssf/psi4/build/stage/cluster/apps/psi4/1.1a1/x86_64/lib/psi4/__init__.py; -- Installing: /scratch/appssf/psi4/build/stage/cluster/apps/psi4/1.1a1/x86_64/lib/psi4/config.py; -- Installing: /scratch/appssf/psi4/build/stage/cluster/apps/psi4/1.1a1/x86_64/share/cmake/psi4/psi4Config.cmake; -- Installing: /scratch/appssf/psi4/build/stage/cluster/apps/psi4/1.1a1/x86_64/share/cmake/psi4/psi4ConfigVersion.cmake; -- Installing: /scratch/appssf/psi4/build/stage/cluster/apps/psi4/1.1a1/x86_64/lib/psi4/core.so; CMake Error at src/cmake_install.cmake:44 (file):; file INSTALL cannot copy file; ""/scratch/appssf/psi4/build/psi4_core-prefix/src/psi4_core-build/src/core.so""; to; ""/scratch/appssf/psi4/build/stage/cluster/apps/psi4/1.1a1/x86_64/lib/psi4/core.so"".; Call Stack (most recent call first):; cmake_install.cmake:167 (include). gmake[3]: *** [install] Error 1; gmake[3]: Leaving directory `/scratch/appssf/psi4/build/psi4_core-prefix/src/psi4_core-build'; make[2]: *** [psi4_core-prefix/src/psi4_core-stamp/psi4_core-install] Error 2; make[2]: Leaving directory `/scratch/appssf/psi4/build'; make[1]: *** [CMakeFiles/psi4_core.dir/all] Error 2; make[1]: Leaving directory `/scratch/appssf/psi4/build'; make: *** [all] Error 2; ```; For compiling, I was using ""make -j 8"". I will try to compile serially and see if that was the cause for the installation problem. Best regards and thank you very much for your help. Sam",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/580#issuecomment-274762486
https://github.com/psi4/psi4/issues/580#issuecomment-274762486:5353,Availability,Error,Error,5353,"t__.py; -- Installing: /scratch/appssf/psi4/build/stage/cluster/apps/psi4/1.1a1/x86_64/lib//psi4/driver/util/tty/color.py; -- Installing: /scratch/appssf/psi4/build/stage/cluster/apps/psi4/1.1a1/x86_64/lib//psi4/driver/wrapper_autofrag.py; -- Installing: /scratch/appssf/psi4/build/stage/cluster/apps/psi4/1.1a1/x86_64/lib//psi4/driver/wrapper_database.py; -- Installing: /scratch/appssf/psi4/build/stage/cluster/apps/psi4/1.1a1/x86_64/lib/psi4/header.py; -- Installing: /scratch/appssf/psi4/build/stage/cluster/apps/psi4/1.1a1/x86_64/lib/psi4/extras.py; -- Installing: /scratch/appssf/psi4/build/stage/cluster/apps/psi4/1.1a1/x86_64/lib/psi4/__init__.py; -- Installing: /scratch/appssf/psi4/build/stage/cluster/apps/psi4/1.1a1/x86_64/lib/psi4/config.py; -- Installing: /scratch/appssf/psi4/build/stage/cluster/apps/psi4/1.1a1/x86_64/share/cmake/psi4/psi4Config.cmake; -- Installing: /scratch/appssf/psi4/build/stage/cluster/apps/psi4/1.1a1/x86_64/share/cmake/psi4/psi4ConfigVersion.cmake; -- Installing: /scratch/appssf/psi4/build/stage/cluster/apps/psi4/1.1a1/x86_64/lib/psi4/core.so; CMake Error at src/cmake_install.cmake:44 (file):; file INSTALL cannot copy file; ""/scratch/appssf/psi4/build/psi4_core-prefix/src/psi4_core-build/src/core.so""; to; ""/scratch/appssf/psi4/build/stage/cluster/apps/psi4/1.1a1/x86_64/lib/psi4/core.so"".; Call Stack (most recent call first):; cmake_install.cmake:167 (include). gmake[3]: *** [install] Error 1; gmake[3]: Leaving directory `/scratch/appssf/psi4/build/psi4_core-prefix/src/psi4_core-build'; make[2]: *** [psi4_core-prefix/src/psi4_core-stamp/psi4_core-install] Error 2; make[2]: Leaving directory `/scratch/appssf/psi4/build'; make[1]: *** [CMakeFiles/psi4_core.dir/all] Error 2; make[1]: Leaving directory `/scratch/appssf/psi4/build'; make: *** [all] Error 2; ```; For compiling, I was using ""make -j 8"". I will try to compile serially and see if that was the cause for the installation problem. Best regards and thank you very much for your help. Sam",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/580#issuecomment-274762486
https://github.com/psi4/psi4/issues/580#issuecomment-274762486:5527,Availability,Error,Error,5527,"t__.py; -- Installing: /scratch/appssf/psi4/build/stage/cluster/apps/psi4/1.1a1/x86_64/lib//psi4/driver/util/tty/color.py; -- Installing: /scratch/appssf/psi4/build/stage/cluster/apps/psi4/1.1a1/x86_64/lib//psi4/driver/wrapper_autofrag.py; -- Installing: /scratch/appssf/psi4/build/stage/cluster/apps/psi4/1.1a1/x86_64/lib//psi4/driver/wrapper_database.py; -- Installing: /scratch/appssf/psi4/build/stage/cluster/apps/psi4/1.1a1/x86_64/lib/psi4/header.py; -- Installing: /scratch/appssf/psi4/build/stage/cluster/apps/psi4/1.1a1/x86_64/lib/psi4/extras.py; -- Installing: /scratch/appssf/psi4/build/stage/cluster/apps/psi4/1.1a1/x86_64/lib/psi4/__init__.py; -- Installing: /scratch/appssf/psi4/build/stage/cluster/apps/psi4/1.1a1/x86_64/lib/psi4/config.py; -- Installing: /scratch/appssf/psi4/build/stage/cluster/apps/psi4/1.1a1/x86_64/share/cmake/psi4/psi4Config.cmake; -- Installing: /scratch/appssf/psi4/build/stage/cluster/apps/psi4/1.1a1/x86_64/share/cmake/psi4/psi4ConfigVersion.cmake; -- Installing: /scratch/appssf/psi4/build/stage/cluster/apps/psi4/1.1a1/x86_64/lib/psi4/core.so; CMake Error at src/cmake_install.cmake:44 (file):; file INSTALL cannot copy file; ""/scratch/appssf/psi4/build/psi4_core-prefix/src/psi4_core-build/src/core.so""; to; ""/scratch/appssf/psi4/build/stage/cluster/apps/psi4/1.1a1/x86_64/lib/psi4/core.so"".; Call Stack (most recent call first):; cmake_install.cmake:167 (include). gmake[3]: *** [install] Error 1; gmake[3]: Leaving directory `/scratch/appssf/psi4/build/psi4_core-prefix/src/psi4_core-build'; make[2]: *** [psi4_core-prefix/src/psi4_core-stamp/psi4_core-install] Error 2; make[2]: Leaving directory `/scratch/appssf/psi4/build'; make[1]: *** [CMakeFiles/psi4_core.dir/all] Error 2; make[1]: Leaving directory `/scratch/appssf/psi4/build'; make: *** [all] Error 2; ```; For compiling, I was using ""make -j 8"". I will try to compile serially and see if that was the cause for the installation problem. Best regards and thank you very much for your help. Sam",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/580#issuecomment-274762486
https://github.com/psi4/psi4/issues/580#issuecomment-274762486:5637,Availability,Error,Error,5637,"t__.py; -- Installing: /scratch/appssf/psi4/build/stage/cluster/apps/psi4/1.1a1/x86_64/lib//psi4/driver/util/tty/color.py; -- Installing: /scratch/appssf/psi4/build/stage/cluster/apps/psi4/1.1a1/x86_64/lib//psi4/driver/wrapper_autofrag.py; -- Installing: /scratch/appssf/psi4/build/stage/cluster/apps/psi4/1.1a1/x86_64/lib//psi4/driver/wrapper_database.py; -- Installing: /scratch/appssf/psi4/build/stage/cluster/apps/psi4/1.1a1/x86_64/lib/psi4/header.py; -- Installing: /scratch/appssf/psi4/build/stage/cluster/apps/psi4/1.1a1/x86_64/lib/psi4/extras.py; -- Installing: /scratch/appssf/psi4/build/stage/cluster/apps/psi4/1.1a1/x86_64/lib/psi4/__init__.py; -- Installing: /scratch/appssf/psi4/build/stage/cluster/apps/psi4/1.1a1/x86_64/lib/psi4/config.py; -- Installing: /scratch/appssf/psi4/build/stage/cluster/apps/psi4/1.1a1/x86_64/share/cmake/psi4/psi4Config.cmake; -- Installing: /scratch/appssf/psi4/build/stage/cluster/apps/psi4/1.1a1/x86_64/share/cmake/psi4/psi4ConfigVersion.cmake; -- Installing: /scratch/appssf/psi4/build/stage/cluster/apps/psi4/1.1a1/x86_64/lib/psi4/core.so; CMake Error at src/cmake_install.cmake:44 (file):; file INSTALL cannot copy file; ""/scratch/appssf/psi4/build/psi4_core-prefix/src/psi4_core-build/src/core.so""; to; ""/scratch/appssf/psi4/build/stage/cluster/apps/psi4/1.1a1/x86_64/lib/psi4/core.so"".; Call Stack (most recent call first):; cmake_install.cmake:167 (include). gmake[3]: *** [install] Error 1; gmake[3]: Leaving directory `/scratch/appssf/psi4/build/psi4_core-prefix/src/psi4_core-build'; make[2]: *** [psi4_core-prefix/src/psi4_core-stamp/psi4_core-install] Error 2; make[2]: Leaving directory `/scratch/appssf/psi4/build'; make[1]: *** [CMakeFiles/psi4_core.dir/all] Error 2; make[1]: Leaving directory `/scratch/appssf/psi4/build'; make: *** [all] Error 2; ```; For compiling, I was using ""make -j 8"". I will try to compile serially and see if that was the cause for the installation problem. Best regards and thank you very much for your help. Sam",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/580#issuecomment-274762486
https://github.com/psi4/psi4/issues/580#issuecomment-274762486:5719,Availability,Error,Error,5719,"t__.py; -- Installing: /scratch/appssf/psi4/build/stage/cluster/apps/psi4/1.1a1/x86_64/lib//psi4/driver/util/tty/color.py; -- Installing: /scratch/appssf/psi4/build/stage/cluster/apps/psi4/1.1a1/x86_64/lib//psi4/driver/wrapper_autofrag.py; -- Installing: /scratch/appssf/psi4/build/stage/cluster/apps/psi4/1.1a1/x86_64/lib//psi4/driver/wrapper_database.py; -- Installing: /scratch/appssf/psi4/build/stage/cluster/apps/psi4/1.1a1/x86_64/lib/psi4/header.py; -- Installing: /scratch/appssf/psi4/build/stage/cluster/apps/psi4/1.1a1/x86_64/lib/psi4/extras.py; -- Installing: /scratch/appssf/psi4/build/stage/cluster/apps/psi4/1.1a1/x86_64/lib/psi4/__init__.py; -- Installing: /scratch/appssf/psi4/build/stage/cluster/apps/psi4/1.1a1/x86_64/lib/psi4/config.py; -- Installing: /scratch/appssf/psi4/build/stage/cluster/apps/psi4/1.1a1/x86_64/share/cmake/psi4/psi4Config.cmake; -- Installing: /scratch/appssf/psi4/build/stage/cluster/apps/psi4/1.1a1/x86_64/share/cmake/psi4/psi4ConfigVersion.cmake; -- Installing: /scratch/appssf/psi4/build/stage/cluster/apps/psi4/1.1a1/x86_64/lib/psi4/core.so; CMake Error at src/cmake_install.cmake:44 (file):; file INSTALL cannot copy file; ""/scratch/appssf/psi4/build/psi4_core-prefix/src/psi4_core-build/src/core.so""; to; ""/scratch/appssf/psi4/build/stage/cluster/apps/psi4/1.1a1/x86_64/lib/psi4/core.so"".; Call Stack (most recent call first):; cmake_install.cmake:167 (include). gmake[3]: *** [install] Error 1; gmake[3]: Leaving directory `/scratch/appssf/psi4/build/psi4_core-prefix/src/psi4_core-build'; make[2]: *** [psi4_core-prefix/src/psi4_core-stamp/psi4_core-install] Error 2; make[2]: Leaving directory `/scratch/appssf/psi4/build'; make[1]: *** [CMakeFiles/psi4_core.dir/all] Error 2; make[1]: Leaving directory `/scratch/appssf/psi4/build'; make: *** [all] Error 2; ```; For compiling, I was using ""make -j 8"". I will try to compile serially and see if that was the cause for the installation problem. Best regards and thank you very much for your help. Sam",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/580#issuecomment-274762486
https://github.com/psi4/psi4/issues/580#issuecomment-274762486:535,Deployability,patch,patch,535,"The quality of OpenBLAS (https://github.com/xianyi/OpenBLAS) should be fine. It is based on GotoBLAS that used to outperform ATLAS and in some cases even MKL. Kazushige Goto, the developer of GotoBLAS was then hired by Intel. . Thank you for the hint about MathLibs.cmake. Based on https://github.com/coderefinery/autocmake/blob/master/modules/math_libs.cmake (lines 127-141) I have added support for detecting OpenBLAS (with the changes it is detected even without setting MATH_ROOT). ```; [sfux@develop01 psi4]$ cat CMakeAddOpenBLAS.patch ; diff -crB psi4_/cmake/math/ConfigMath.cmake psi4/cmake/math/ConfigMath.cmake; *** psi4_/cmake/math/ConfigMath.cmake 2017-01-20 09:35:51.000000000 +0100; --- psi4/cmake/math/ConfigMath.cmake 2017-01-24 09:52:50.074349042 +0100; ***************; *** 14,20 ****; if(ENABLE_64BIT_INTEGERS); set(MATH_LIB_SEARCH_ORDER MKL ACML); else(); ! set(MATH_LIB_SEARCH_ORDER MKL ESSL ATLAS ACML SYSTEM_NATIVE); endif(). if(NOT DEFINED MKL_FLAG); --- 14,20 ----; if(ENABLE_64BIT_INTEGERS); set(MATH_LIB_SEARCH_ORDER MKL ACML); else(); ! set(MATH_LIB_SEARCH_ORDER MKL OPENBLAS ESSL ATLAS ACML SYSTEM_NATIVE); endif(). if(NOT DEFINED MKL_FLAG); diff -crB psi4_/cmake/math/MathLibs.cmake psi4/cmake/math/MathLibs.cmake; *** psi4_/cmake/math/MathLibs.cmake 2017-01-20 09:35:51.000000000 +0100; --- psi4/cmake/math/MathLibs.cmake 2017-01-24 09:28:13.812117187 +0100; ***************; *** 73,78 ****; --- 73,93 ----; set(ATLAS_LAPACK_LIBS atlas lapack); ; #-------------------------------------------------------------------------------; + # OPENBLAS; + ; + set(OPENBLAS_BLAS_INCLUDE_PATH_SUFFIXES); + set(OPENBLAS_LAPACK_INCLUDE_PATH_SUFFIXES); + ; + set(OPENBLAS_BLAS_HEADERS cblas.h openblas_config.h f77blas.h); + set(OPENBLAS_LAPACK_HEADERS lapacke.h lapacke_config.h lapacke_mangling.h lapacke_utils.h); + ; + set(OPENBLAS_BLAS_LIBRARY_PATH_SUFFIXES openblas); + set(OPENBLAS_LAPACK_LIBRARY_PATH_SUFFIXES openblas); + ; + set(OPENBLAS_BLAS_LIBS openblas); + set(OPENBLAS_LAP",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/580#issuecomment-274762486
https://github.com/psi4/psi4/issues/580#issuecomment-274762486:2205,Deployability,patch,patch,2205,"i4/cmake/math/MathLibs.cmake; *** psi4_/cmake/math/MathLibs.cmake 2017-01-20 09:35:51.000000000 +0100; --- psi4/cmake/math/MathLibs.cmake 2017-01-24 09:28:13.812117187 +0100; ***************; *** 73,78 ****; --- 73,93 ----; set(ATLAS_LAPACK_LIBS atlas lapack); ; #-------------------------------------------------------------------------------; + # OPENBLAS; + ; + set(OPENBLAS_BLAS_INCLUDE_PATH_SUFFIXES); + set(OPENBLAS_LAPACK_INCLUDE_PATH_SUFFIXES); + ; + set(OPENBLAS_BLAS_HEADERS cblas.h openblas_config.h f77blas.h); + set(OPENBLAS_LAPACK_HEADERS lapacke.h lapacke_config.h lapacke_mangling.h lapacke_utils.h); + ; + set(OPENBLAS_BLAS_LIBRARY_PATH_SUFFIXES openblas); + set(OPENBLAS_LAPACK_LIBRARY_PATH_SUFFIXES openblas); + ; + set(OPENBLAS_BLAS_LIBS openblas); + set(OPENBLAS_LAPACK_LIBS openblas); + ; + #-------------------------------------------------------------------------------; # MKL; ; set(MKL_BLAS_INCLUDE_PATH_SUFFIXES); [sfux@develop01 psi4]$ ls; cdash CMakeAddOpenBLAS.patch _conda_vers.py doc LICENSE plugins README.md _setup.py; cmake CMakeLists.txt CTestConfig.cmake external media psi4 samples tests; [sfux@develop01 psi4_]$ patch -p1 --verbose < CMakeAddOpenBLAS.patch ; Hmm... Looks like a new-style context diff to me...; The text leading up to this was:; --------------------------; |diff -crB psi4_/cmake/math/ConfigMath.cmake psi4/cmake/math/ConfigMath.cmake; |*** psi4_/cmake/math/ConfigMath.cmake 2017-01-20 09:35:51.000000000 +0100; |--- psi4/cmake/math/ConfigMath.cmake 2017-01-24 09:52:50.074349042 +0100; --------------------------; Patching file cmake/math/ConfigMath.cmake using Plan A...; Hunk #1 succeeded at 14.; Hmm... The next patch looks like a new-style context diff to me...; The text leading up to this was:; --------------------------; |diff -crB psi4_/cmake/math/MathLibs.cmake psi4/cmake/math/MathLibs.cmake; |*** psi4_/cmake/math/MathLibs.cmake 2017-01-20 09:35:51.000000000 +0100; |--- psi4/cmake/math/MathLibs.cmake 2017-01-24 09:28:13.812117187",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/580#issuecomment-274762486
https://github.com/psi4/psi4/issues/580#issuecomment-274762486:2365,Deployability,patch,patch,2365,"2017-01-24 09:28:13.812117187 +0100; ***************; *** 73,78 ****; --- 73,93 ----; set(ATLAS_LAPACK_LIBS atlas lapack); ; #-------------------------------------------------------------------------------; + # OPENBLAS; + ; + set(OPENBLAS_BLAS_INCLUDE_PATH_SUFFIXES); + set(OPENBLAS_LAPACK_INCLUDE_PATH_SUFFIXES); + ; + set(OPENBLAS_BLAS_HEADERS cblas.h openblas_config.h f77blas.h); + set(OPENBLAS_LAPACK_HEADERS lapacke.h lapacke_config.h lapacke_mangling.h lapacke_utils.h); + ; + set(OPENBLAS_BLAS_LIBRARY_PATH_SUFFIXES openblas); + set(OPENBLAS_LAPACK_LIBRARY_PATH_SUFFIXES openblas); + ; + set(OPENBLAS_BLAS_LIBS openblas); + set(OPENBLAS_LAPACK_LIBS openblas); + ; + #-------------------------------------------------------------------------------; # MKL; ; set(MKL_BLAS_INCLUDE_PATH_SUFFIXES); [sfux@develop01 psi4]$ ls; cdash CMakeAddOpenBLAS.patch _conda_vers.py doc LICENSE plugins README.md _setup.py; cmake CMakeLists.txt CTestConfig.cmake external media psi4 samples tests; [sfux@develop01 psi4_]$ patch -p1 --verbose < CMakeAddOpenBLAS.patch ; Hmm... Looks like a new-style context diff to me...; The text leading up to this was:; --------------------------; |diff -crB psi4_/cmake/math/ConfigMath.cmake psi4/cmake/math/ConfigMath.cmake; |*** psi4_/cmake/math/ConfigMath.cmake 2017-01-20 09:35:51.000000000 +0100; |--- psi4/cmake/math/ConfigMath.cmake 2017-01-24 09:52:50.074349042 +0100; --------------------------; Patching file cmake/math/ConfigMath.cmake using Plan A...; Hunk #1 succeeded at 14.; Hmm... The next patch looks like a new-style context diff to me...; The text leading up to this was:; --------------------------; |diff -crB psi4_/cmake/math/MathLibs.cmake psi4/cmake/math/MathLibs.cmake; |*** psi4_/cmake/math/MathLibs.cmake 2017-01-20 09:35:51.000000000 +0100; |--- psi4/cmake/math/MathLibs.cmake 2017-01-24 09:28:13.812117187 +0100; --------------------------; Patching file cmake/math/MathLibs.cmake using Plan A...; Hunk #1 succeeded at 73.; done; [sfux@develop",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/580#issuecomment-274762486
https://github.com/psi4/psi4/issues/580#issuecomment-274762486:2404,Deployability,patch,patch,2404,"73,78 ****; --- 73,93 ----; set(ATLAS_LAPACK_LIBS atlas lapack); ; #-------------------------------------------------------------------------------; + # OPENBLAS; + ; + set(OPENBLAS_BLAS_INCLUDE_PATH_SUFFIXES); + set(OPENBLAS_LAPACK_INCLUDE_PATH_SUFFIXES); + ; + set(OPENBLAS_BLAS_HEADERS cblas.h openblas_config.h f77blas.h); + set(OPENBLAS_LAPACK_HEADERS lapacke.h lapacke_config.h lapacke_mangling.h lapacke_utils.h); + ; + set(OPENBLAS_BLAS_LIBRARY_PATH_SUFFIXES openblas); + set(OPENBLAS_LAPACK_LIBRARY_PATH_SUFFIXES openblas); + ; + set(OPENBLAS_BLAS_LIBS openblas); + set(OPENBLAS_LAPACK_LIBS openblas); + ; + #-------------------------------------------------------------------------------; # MKL; ; set(MKL_BLAS_INCLUDE_PATH_SUFFIXES); [sfux@develop01 psi4]$ ls; cdash CMakeAddOpenBLAS.patch _conda_vers.py doc LICENSE plugins README.md _setup.py; cmake CMakeLists.txt CTestConfig.cmake external media psi4 samples tests; [sfux@develop01 psi4_]$ patch -p1 --verbose < CMakeAddOpenBLAS.patch ; Hmm... Looks like a new-style context diff to me...; The text leading up to this was:; --------------------------; |diff -crB psi4_/cmake/math/ConfigMath.cmake psi4/cmake/math/ConfigMath.cmake; |*** psi4_/cmake/math/ConfigMath.cmake 2017-01-20 09:35:51.000000000 +0100; |--- psi4/cmake/math/ConfigMath.cmake 2017-01-24 09:52:50.074349042 +0100; --------------------------; Patching file cmake/math/ConfigMath.cmake using Plan A...; Hunk #1 succeeded at 14.; Hmm... The next patch looks like a new-style context diff to me...; The text leading up to this was:; --------------------------; |diff -crB psi4_/cmake/math/MathLibs.cmake psi4/cmake/math/MathLibs.cmake; |*** psi4_/cmake/math/MathLibs.cmake 2017-01-20 09:35:51.000000000 +0100; |--- psi4/cmake/math/MathLibs.cmake 2017-01-24 09:28:13.812117187 +0100; --------------------------; Patching file cmake/math/MathLibs.cmake using Plan A...; Hunk #1 succeeded at 73.; done; [sfux@develop01 psi4]$; ```; The code (using OpenBLAS instead of MKL) c",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/580#issuecomment-274762486
https://github.com/psi4/psi4/issues/580#issuecomment-274762486:2785,Deployability,Patch,Patching,2785,acke_config.h lapacke_mangling.h lapacke_utils.h); + ; + set(OPENBLAS_BLAS_LIBRARY_PATH_SUFFIXES openblas); + set(OPENBLAS_LAPACK_LIBRARY_PATH_SUFFIXES openblas); + ; + set(OPENBLAS_BLAS_LIBS openblas); + set(OPENBLAS_LAPACK_LIBS openblas); + ; + #-------------------------------------------------------------------------------; # MKL; ; set(MKL_BLAS_INCLUDE_PATH_SUFFIXES); [sfux@develop01 psi4]$ ls; cdash CMakeAddOpenBLAS.patch _conda_vers.py doc LICENSE plugins README.md _setup.py; cmake CMakeLists.txt CTestConfig.cmake external media psi4 samples tests; [sfux@develop01 psi4_]$ patch -p1 --verbose < CMakeAddOpenBLAS.patch ; Hmm... Looks like a new-style context diff to me...; The text leading up to this was:; --------------------------; |diff -crB psi4_/cmake/math/ConfigMath.cmake psi4/cmake/math/ConfigMath.cmake; |*** psi4_/cmake/math/ConfigMath.cmake 2017-01-20 09:35:51.000000000 +0100; |--- psi4/cmake/math/ConfigMath.cmake 2017-01-24 09:52:50.074349042 +0100; --------------------------; Patching file cmake/math/ConfigMath.cmake using Plan A...; Hunk #1 succeeded at 14.; Hmm... The next patch looks like a new-style context diff to me...; The text leading up to this was:; --------------------------; |diff -crB psi4_/cmake/math/MathLibs.cmake psi4/cmake/math/MathLibs.cmake; |*** psi4_/cmake/math/MathLibs.cmake 2017-01-20 09:35:51.000000000 +0100; |--- psi4/cmake/math/MathLibs.cmake 2017-01-24 09:28:13.812117187 +0100; --------------------------; Patching file cmake/math/MathLibs.cmake using Plan A...; Hunk #1 succeeded at 73.; done; [sfux@develop01 psi4]$; ```; The code (using OpenBLAS instead of MKL) compiles without error but fails in an installation step:. ```; -- Installing: /scratch/appssf/psi4/build/stage/cluster/apps/psi4/1.1a1/x86_64/lib//psi4/driver/util/__init__.py; -- Installing: /scratch/appssf/psi4/build/stage/cluster/apps/psi4/1.1a1/x86_64/lib//psi4/driver/util/filesystem.py; -- Installing: /scratch/appssf/psi4/build/stage/cluster/apps/psi4/1.1a1/x86_64,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/580#issuecomment-274762486
https://github.com/psi4/psi4/issues/580#issuecomment-274762486:2886,Deployability,patch,patch,2886,PACK_LIBRARY_PATH_SUFFIXES openblas); + ; + set(OPENBLAS_BLAS_LIBS openblas); + set(OPENBLAS_LAPACK_LIBS openblas); + ; + #-------------------------------------------------------------------------------; # MKL; ; set(MKL_BLAS_INCLUDE_PATH_SUFFIXES); [sfux@develop01 psi4]$ ls; cdash CMakeAddOpenBLAS.patch _conda_vers.py doc LICENSE plugins README.md _setup.py; cmake CMakeLists.txt CTestConfig.cmake external media psi4 samples tests; [sfux@develop01 psi4_]$ patch -p1 --verbose < CMakeAddOpenBLAS.patch ; Hmm... Looks like a new-style context diff to me...; The text leading up to this was:; --------------------------; |diff -crB psi4_/cmake/math/ConfigMath.cmake psi4/cmake/math/ConfigMath.cmake; |*** psi4_/cmake/math/ConfigMath.cmake 2017-01-20 09:35:51.000000000 +0100; |--- psi4/cmake/math/ConfigMath.cmake 2017-01-24 09:52:50.074349042 +0100; --------------------------; Patching file cmake/math/ConfigMath.cmake using Plan A...; Hunk #1 succeeded at 14.; Hmm... The next patch looks like a new-style context diff to me...; The text leading up to this was:; --------------------------; |diff -crB psi4_/cmake/math/MathLibs.cmake psi4/cmake/math/MathLibs.cmake; |*** psi4_/cmake/math/MathLibs.cmake 2017-01-20 09:35:51.000000000 +0100; |--- psi4/cmake/math/MathLibs.cmake 2017-01-24 09:28:13.812117187 +0100; --------------------------; Patching file cmake/math/MathLibs.cmake using Plan A...; Hunk #1 succeeded at 73.; done; [sfux@develop01 psi4]$; ```; The code (using OpenBLAS instead of MKL) compiles without error but fails in an installation step:. ```; -- Installing: /scratch/appssf/psi4/build/stage/cluster/apps/psi4/1.1a1/x86_64/lib//psi4/driver/util/__init__.py; -- Installing: /scratch/appssf/psi4/build/stage/cluster/apps/psi4/1.1a1/x86_64/lib//psi4/driver/util/filesystem.py; -- Installing: /scratch/appssf/psi4/build/stage/cluster/apps/psi4/1.1a1/x86_64/lib//psi4/driver/util/tty; -- Installing: /scratch/appssf/psi4/build/stage/cluster/apps/psi4/1.1a1/x86_64/lib//psi4/driver/,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/580#issuecomment-274762486
https://github.com/psi4/psi4/issues/580#issuecomment-274762486:3250,Deployability,Patch,Patching,3250,s README.md _setup.py; cmake CMakeLists.txt CTestConfig.cmake external media psi4 samples tests; [sfux@develop01 psi4_]$ patch -p1 --verbose < CMakeAddOpenBLAS.patch ; Hmm... Looks like a new-style context diff to me...; The text leading up to this was:; --------------------------; |diff -crB psi4_/cmake/math/ConfigMath.cmake psi4/cmake/math/ConfigMath.cmake; |*** psi4_/cmake/math/ConfigMath.cmake 2017-01-20 09:35:51.000000000 +0100; |--- psi4/cmake/math/ConfigMath.cmake 2017-01-24 09:52:50.074349042 +0100; --------------------------; Patching file cmake/math/ConfigMath.cmake using Plan A...; Hunk #1 succeeded at 14.; Hmm... The next patch looks like a new-style context diff to me...; The text leading up to this was:; --------------------------; |diff -crB psi4_/cmake/math/MathLibs.cmake psi4/cmake/math/MathLibs.cmake; |*** psi4_/cmake/math/MathLibs.cmake 2017-01-20 09:35:51.000000000 +0100; |--- psi4/cmake/math/MathLibs.cmake 2017-01-24 09:28:13.812117187 +0100; --------------------------; Patching file cmake/math/MathLibs.cmake using Plan A...; Hunk #1 succeeded at 73.; done; [sfux@develop01 psi4]$; ```; The code (using OpenBLAS instead of MKL) compiles without error but fails in an installation step:. ```; -- Installing: /scratch/appssf/psi4/build/stage/cluster/apps/psi4/1.1a1/x86_64/lib//psi4/driver/util/__init__.py; -- Installing: /scratch/appssf/psi4/build/stage/cluster/apps/psi4/1.1a1/x86_64/lib//psi4/driver/util/filesystem.py; -- Installing: /scratch/appssf/psi4/build/stage/cluster/apps/psi4/1.1a1/x86_64/lib//psi4/driver/util/tty; -- Installing: /scratch/appssf/psi4/build/stage/cluster/apps/psi4/1.1a1/x86_64/lib//psi4/driver/util/tty/__init__.py; -- Installing: /scratch/appssf/psi4/build/stage/cluster/apps/psi4/1.1a1/x86_64/lib//psi4/driver/util/tty/color.py; -- Installing: /scratch/appssf/psi4/build/stage/cluster/apps/psi4/1.1a1/x86_64/lib//psi4/driver/wrapper_autofrag.py; -- Installing: /scratch/appssf/psi4/build/stage/cluster/apps/psi4/1.1a1/x86_64/lib//ps,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/580#issuecomment-274762486
https://github.com/psi4/psi4/issues/580#issuecomment-274762486:3448,Deployability,install,installation,3448,BLAS.patch ; Hmm... Looks like a new-style context diff to me...; The text leading up to this was:; --------------------------; |diff -crB psi4_/cmake/math/ConfigMath.cmake psi4/cmake/math/ConfigMath.cmake; |*** psi4_/cmake/math/ConfigMath.cmake 2017-01-20 09:35:51.000000000 +0100; |--- psi4/cmake/math/ConfigMath.cmake 2017-01-24 09:52:50.074349042 +0100; --------------------------; Patching file cmake/math/ConfigMath.cmake using Plan A...; Hunk #1 succeeded at 14.; Hmm... The next patch looks like a new-style context diff to me...; The text leading up to this was:; --------------------------; |diff -crB psi4_/cmake/math/MathLibs.cmake psi4/cmake/math/MathLibs.cmake; |*** psi4_/cmake/math/MathLibs.cmake 2017-01-20 09:35:51.000000000 +0100; |--- psi4/cmake/math/MathLibs.cmake 2017-01-24 09:28:13.812117187 +0100; --------------------------; Patching file cmake/math/MathLibs.cmake using Plan A...; Hunk #1 succeeded at 73.; done; [sfux@develop01 psi4]$; ```; The code (using OpenBLAS instead of MKL) compiles without error but fails in an installation step:. ```; -- Installing: /scratch/appssf/psi4/build/stage/cluster/apps/psi4/1.1a1/x86_64/lib//psi4/driver/util/__init__.py; -- Installing: /scratch/appssf/psi4/build/stage/cluster/apps/psi4/1.1a1/x86_64/lib//psi4/driver/util/filesystem.py; -- Installing: /scratch/appssf/psi4/build/stage/cluster/apps/psi4/1.1a1/x86_64/lib//psi4/driver/util/tty; -- Installing: /scratch/appssf/psi4/build/stage/cluster/apps/psi4/1.1a1/x86_64/lib//psi4/driver/util/tty/__init__.py; -- Installing: /scratch/appssf/psi4/build/stage/cluster/apps/psi4/1.1a1/x86_64/lib//psi4/driver/util/tty/color.py; -- Installing: /scratch/appssf/psi4/build/stage/cluster/apps/psi4/1.1a1/x86_64/lib//psi4/driver/wrapper_autofrag.py; -- Installing: /scratch/appssf/psi4/build/stage/cluster/apps/psi4/1.1a1/x86_64/lib//psi4/driver/wrapper_database.py; -- Installing: /scratch/appssf/psi4/build/stage/cluster/apps/psi4/1.1a1/x86_64/lib/psi4/header.py; -- Installing: /scratch/,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/580#issuecomment-274762486
https://github.com/psi4/psi4/issues/580#issuecomment-274762486:3476,Deployability,Install,Installing,3476,---------------------; |diff -crB psi4_/cmake/math/ConfigMath.cmake psi4/cmake/math/ConfigMath.cmake; |*** psi4_/cmake/math/ConfigMath.cmake 2017-01-20 09:35:51.000000000 +0100; |--- psi4/cmake/math/ConfigMath.cmake 2017-01-24 09:52:50.074349042 +0100; --------------------------; Patching file cmake/math/ConfigMath.cmake using Plan A...; Hunk #1 succeeded at 14.; Hmm... The next patch looks like a new-style context diff to me...; The text leading up to this was:; --------------------------; |diff -crB psi4_/cmake/math/MathLibs.cmake psi4/cmake/math/MathLibs.cmake; |*** psi4_/cmake/math/MathLibs.cmake 2017-01-20 09:35:51.000000000 +0100; |--- psi4/cmake/math/MathLibs.cmake 2017-01-24 09:28:13.812117187 +0100; --------------------------; Patching file cmake/math/MathLibs.cmake using Plan A...; Hunk #1 succeeded at 73.; done; [sfux@develop01 psi4]$; ```; The code (using OpenBLAS instead of MKL) compiles without error but fails in an installation step:. ```; -- Installing: /scratch/appssf/psi4/build/stage/cluster/apps/psi4/1.1a1/x86_64/lib//psi4/driver/util/__init__.py; -- Installing: /scratch/appssf/psi4/build/stage/cluster/apps/psi4/1.1a1/x86_64/lib//psi4/driver/util/filesystem.py; -- Installing: /scratch/appssf/psi4/build/stage/cluster/apps/psi4/1.1a1/x86_64/lib//psi4/driver/util/tty; -- Installing: /scratch/appssf/psi4/build/stage/cluster/apps/psi4/1.1a1/x86_64/lib//psi4/driver/util/tty/__init__.py; -- Installing: /scratch/appssf/psi4/build/stage/cluster/apps/psi4/1.1a1/x86_64/lib//psi4/driver/util/tty/color.py; -- Installing: /scratch/appssf/psi4/build/stage/cluster/apps/psi4/1.1a1/x86_64/lib//psi4/driver/wrapper_autofrag.py; -- Installing: /scratch/appssf/psi4/build/stage/cluster/apps/psi4/1.1a1/x86_64/lib//psi4/driver/wrapper_database.py; -- Installing: /scratch/appssf/psi4/build/stage/cluster/apps/psi4/1.1a1/x86_64/lib/psi4/header.py; -- Installing: /scratch/appssf/psi4/build/stage/cluster/apps/psi4/1.1a1/x86_64/lib/psi4/extras.py; -- Installing: /scratch/appssf,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/580#issuecomment-274762486
https://github.com/psi4/psi4/issues/580#issuecomment-274762486:3590,Deployability,Install,Installing,3590,ake/math/ConfigMath.cmake 2017-01-20 09:35:51.000000000 +0100; |--- psi4/cmake/math/ConfigMath.cmake 2017-01-24 09:52:50.074349042 +0100; --------------------------; Patching file cmake/math/ConfigMath.cmake using Plan A...; Hunk #1 succeeded at 14.; Hmm... The next patch looks like a new-style context diff to me...; The text leading up to this was:; --------------------------; |diff -crB psi4_/cmake/math/MathLibs.cmake psi4/cmake/math/MathLibs.cmake; |*** psi4_/cmake/math/MathLibs.cmake 2017-01-20 09:35:51.000000000 +0100; |--- psi4/cmake/math/MathLibs.cmake 2017-01-24 09:28:13.812117187 +0100; --------------------------; Patching file cmake/math/MathLibs.cmake using Plan A...; Hunk #1 succeeded at 73.; done; [sfux@develop01 psi4]$; ```; The code (using OpenBLAS instead of MKL) compiles without error but fails in an installation step:. ```; -- Installing: /scratch/appssf/psi4/build/stage/cluster/apps/psi4/1.1a1/x86_64/lib//psi4/driver/util/__init__.py; -- Installing: /scratch/appssf/psi4/build/stage/cluster/apps/psi4/1.1a1/x86_64/lib//psi4/driver/util/filesystem.py; -- Installing: /scratch/appssf/psi4/build/stage/cluster/apps/psi4/1.1a1/x86_64/lib//psi4/driver/util/tty; -- Installing: /scratch/appssf/psi4/build/stage/cluster/apps/psi4/1.1a1/x86_64/lib//psi4/driver/util/tty/__init__.py; -- Installing: /scratch/appssf/psi4/build/stage/cluster/apps/psi4/1.1a1/x86_64/lib//psi4/driver/util/tty/color.py; -- Installing: /scratch/appssf/psi4/build/stage/cluster/apps/psi4/1.1a1/x86_64/lib//psi4/driver/wrapper_autofrag.py; -- Installing: /scratch/appssf/psi4/build/stage/cluster/apps/psi4/1.1a1/x86_64/lib//psi4/driver/wrapper_database.py; -- Installing: /scratch/appssf/psi4/build/stage/cluster/apps/psi4/1.1a1/x86_64/lib/psi4/header.py; -- Installing: /scratch/appssf/psi4/build/stage/cluster/apps/psi4/1.1a1/x86_64/lib/psi4/extras.py; -- Installing: /scratch/appssf/psi4/build/stage/cluster/apps/psi4/1.1a1/x86_64/lib/psi4/__init__.py; -- Installing: /scratch/appssf/psi4/build/st,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/580#issuecomment-274762486
https://github.com/psi4/psi4/issues/580#issuecomment-274762486:3706,Deployability,Install,Installing,3706,2:50.074349042 +0100; --------------------------; Patching file cmake/math/ConfigMath.cmake using Plan A...; Hunk #1 succeeded at 14.; Hmm... The next patch looks like a new-style context diff to me...; The text leading up to this was:; --------------------------; |diff -crB psi4_/cmake/math/MathLibs.cmake psi4/cmake/math/MathLibs.cmake; |*** psi4_/cmake/math/MathLibs.cmake 2017-01-20 09:35:51.000000000 +0100; |--- psi4/cmake/math/MathLibs.cmake 2017-01-24 09:28:13.812117187 +0100; --------------------------; Patching file cmake/math/MathLibs.cmake using Plan A...; Hunk #1 succeeded at 73.; done; [sfux@develop01 psi4]$; ```; The code (using OpenBLAS instead of MKL) compiles without error but fails in an installation step:. ```; -- Installing: /scratch/appssf/psi4/build/stage/cluster/apps/psi4/1.1a1/x86_64/lib//psi4/driver/util/__init__.py; -- Installing: /scratch/appssf/psi4/build/stage/cluster/apps/psi4/1.1a1/x86_64/lib//psi4/driver/util/filesystem.py; -- Installing: /scratch/appssf/psi4/build/stage/cluster/apps/psi4/1.1a1/x86_64/lib//psi4/driver/util/tty; -- Installing: /scratch/appssf/psi4/build/stage/cluster/apps/psi4/1.1a1/x86_64/lib//psi4/driver/util/tty/__init__.py; -- Installing: /scratch/appssf/psi4/build/stage/cluster/apps/psi4/1.1a1/x86_64/lib//psi4/driver/util/tty/color.py; -- Installing: /scratch/appssf/psi4/build/stage/cluster/apps/psi4/1.1a1/x86_64/lib//psi4/driver/wrapper_autofrag.py; -- Installing: /scratch/appssf/psi4/build/stage/cluster/apps/psi4/1.1a1/x86_64/lib//psi4/driver/wrapper_database.py; -- Installing: /scratch/appssf/psi4/build/stage/cluster/apps/psi4/1.1a1/x86_64/lib/psi4/header.py; -- Installing: /scratch/appssf/psi4/build/stage/cluster/apps/psi4/1.1a1/x86_64/lib/psi4/extras.py; -- Installing: /scratch/appssf/psi4/build/stage/cluster/apps/psi4/1.1a1/x86_64/lib/psi4/__init__.py; -- Installing: /scratch/appssf/psi4/build/stage/cluster/apps/psi4/1.1a1/x86_64/lib/psi4/config.py; -- Installing: /scratch/appssf/psi4/build/stage/cluster/apps/,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/580#issuecomment-274762486
https://github.com/psi4/psi4/issues/580#issuecomment-274762486:3812,Deployability,Install,Installing,3812,ke using Plan A...; Hunk #1 succeeded at 14.; Hmm... The next patch looks like a new-style context diff to me...; The text leading up to this was:; --------------------------; |diff -crB psi4_/cmake/math/MathLibs.cmake psi4/cmake/math/MathLibs.cmake; |*** psi4_/cmake/math/MathLibs.cmake 2017-01-20 09:35:51.000000000 +0100; |--- psi4/cmake/math/MathLibs.cmake 2017-01-24 09:28:13.812117187 +0100; --------------------------; Patching file cmake/math/MathLibs.cmake using Plan A...; Hunk #1 succeeded at 73.; done; [sfux@develop01 psi4]$; ```; The code (using OpenBLAS instead of MKL) compiles without error but fails in an installation step:. ```; -- Installing: /scratch/appssf/psi4/build/stage/cluster/apps/psi4/1.1a1/x86_64/lib//psi4/driver/util/__init__.py; -- Installing: /scratch/appssf/psi4/build/stage/cluster/apps/psi4/1.1a1/x86_64/lib//psi4/driver/util/filesystem.py; -- Installing: /scratch/appssf/psi4/build/stage/cluster/apps/psi4/1.1a1/x86_64/lib//psi4/driver/util/tty; -- Installing: /scratch/appssf/psi4/build/stage/cluster/apps/psi4/1.1a1/x86_64/lib//psi4/driver/util/tty/__init__.py; -- Installing: /scratch/appssf/psi4/build/stage/cluster/apps/psi4/1.1a1/x86_64/lib//psi4/driver/util/tty/color.py; -- Installing: /scratch/appssf/psi4/build/stage/cluster/apps/psi4/1.1a1/x86_64/lib//psi4/driver/wrapper_autofrag.py; -- Installing: /scratch/appssf/psi4/build/stage/cluster/apps/psi4/1.1a1/x86_64/lib//psi4/driver/wrapper_database.py; -- Installing: /scratch/appssf/psi4/build/stage/cluster/apps/psi4/1.1a1/x86_64/lib/psi4/header.py; -- Installing: /scratch/appssf/psi4/build/stage/cluster/apps/psi4/1.1a1/x86_64/lib/psi4/extras.py; -- Installing: /scratch/appssf/psi4/build/stage/cluster/apps/psi4/1.1a1/x86_64/lib/psi4/__init__.py; -- Installing: /scratch/appssf/psi4/build/stage/cluster/apps/psi4/1.1a1/x86_64/lib/psi4/config.py; -- Installing: /scratch/appssf/psi4/build/stage/cluster/apps/psi4/1.1a1/x86_64/share/cmake/psi4/psi4Config.cmake; -- Installing: /scratch/appssf/psi4/,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/580#issuecomment-274762486
https://github.com/psi4/psi4/issues/580#issuecomment-274762486:3930,Deployability,Install,Installing,3930,o this was:; --------------------------; |diff -crB psi4_/cmake/math/MathLibs.cmake psi4/cmake/math/MathLibs.cmake; |*** psi4_/cmake/math/MathLibs.cmake 2017-01-20 09:35:51.000000000 +0100; |--- psi4/cmake/math/MathLibs.cmake 2017-01-24 09:28:13.812117187 +0100; --------------------------; Patching file cmake/math/MathLibs.cmake using Plan A...; Hunk #1 succeeded at 73.; done; [sfux@develop01 psi4]$; ```; The code (using OpenBLAS instead of MKL) compiles without error but fails in an installation step:. ```; -- Installing: /scratch/appssf/psi4/build/stage/cluster/apps/psi4/1.1a1/x86_64/lib//psi4/driver/util/__init__.py; -- Installing: /scratch/appssf/psi4/build/stage/cluster/apps/psi4/1.1a1/x86_64/lib//psi4/driver/util/filesystem.py; -- Installing: /scratch/appssf/psi4/build/stage/cluster/apps/psi4/1.1a1/x86_64/lib//psi4/driver/util/tty; -- Installing: /scratch/appssf/psi4/build/stage/cluster/apps/psi4/1.1a1/x86_64/lib//psi4/driver/util/tty/__init__.py; -- Installing: /scratch/appssf/psi4/build/stage/cluster/apps/psi4/1.1a1/x86_64/lib//psi4/driver/util/tty/color.py; -- Installing: /scratch/appssf/psi4/build/stage/cluster/apps/psi4/1.1a1/x86_64/lib//psi4/driver/wrapper_autofrag.py; -- Installing: /scratch/appssf/psi4/build/stage/cluster/apps/psi4/1.1a1/x86_64/lib//psi4/driver/wrapper_database.py; -- Installing: /scratch/appssf/psi4/build/stage/cluster/apps/psi4/1.1a1/x86_64/lib/psi4/header.py; -- Installing: /scratch/appssf/psi4/build/stage/cluster/apps/psi4/1.1a1/x86_64/lib/psi4/extras.py; -- Installing: /scratch/appssf/psi4/build/stage/cluster/apps/psi4/1.1a1/x86_64/lib/psi4/__init__.py; -- Installing: /scratch/appssf/psi4/build/stage/cluster/apps/psi4/1.1a1/x86_64/lib/psi4/config.py; -- Installing: /scratch/appssf/psi4/build/stage/cluster/apps/psi4/1.1a1/x86_64/share/cmake/psi4/psi4Config.cmake; -- Installing: /scratch/appssf/psi4/build/stage/cluster/apps/psi4/1.1a1/x86_64/share/cmake/psi4/psi4ConfigVersion.cmake; -- Installing: /scratch/appssf/psi4/build/stage/cl,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/580#issuecomment-274762486
https://github.com/psi4/psi4/issues/580#issuecomment-274762486:4045,Deployability,Install,Installing,4045, |*** psi4_/cmake/math/MathLibs.cmake 2017-01-20 09:35:51.000000000 +0100; |--- psi4/cmake/math/MathLibs.cmake 2017-01-24 09:28:13.812117187 +0100; --------------------------; Patching file cmake/math/MathLibs.cmake using Plan A...; Hunk #1 succeeded at 73.; done; [sfux@develop01 psi4]$; ```; The code (using OpenBLAS instead of MKL) compiles without error but fails in an installation step:. ```; -- Installing: /scratch/appssf/psi4/build/stage/cluster/apps/psi4/1.1a1/x86_64/lib//psi4/driver/util/__init__.py; -- Installing: /scratch/appssf/psi4/build/stage/cluster/apps/psi4/1.1a1/x86_64/lib//psi4/driver/util/filesystem.py; -- Installing: /scratch/appssf/psi4/build/stage/cluster/apps/psi4/1.1a1/x86_64/lib//psi4/driver/util/tty; -- Installing: /scratch/appssf/psi4/build/stage/cluster/apps/psi4/1.1a1/x86_64/lib//psi4/driver/util/tty/__init__.py; -- Installing: /scratch/appssf/psi4/build/stage/cluster/apps/psi4/1.1a1/x86_64/lib//psi4/driver/util/tty/color.py; -- Installing: /scratch/appssf/psi4/build/stage/cluster/apps/psi4/1.1a1/x86_64/lib//psi4/driver/wrapper_autofrag.py; -- Installing: /scratch/appssf/psi4/build/stage/cluster/apps/psi4/1.1a1/x86_64/lib//psi4/driver/wrapper_database.py; -- Installing: /scratch/appssf/psi4/build/stage/cluster/apps/psi4/1.1a1/x86_64/lib/psi4/header.py; -- Installing: /scratch/appssf/psi4/build/stage/cluster/apps/psi4/1.1a1/x86_64/lib/psi4/extras.py; -- Installing: /scratch/appssf/psi4/build/stage/cluster/apps/psi4/1.1a1/x86_64/lib/psi4/__init__.py; -- Installing: /scratch/appssf/psi4/build/stage/cluster/apps/psi4/1.1a1/x86_64/lib/psi4/config.py; -- Installing: /scratch/appssf/psi4/build/stage/cluster/apps/psi4/1.1a1/x86_64/share/cmake/psi4/psi4Config.cmake; -- Installing: /scratch/appssf/psi4/build/stage/cluster/apps/psi4/1.1a1/x86_64/share/cmake/psi4/psi4ConfigVersion.cmake; -- Installing: /scratch/appssf/psi4/build/stage/cluster/apps/psi4/1.1a1/x86_64/lib/psi4/core.so; CMake Error at src/cmake_install.cmake:44 (file):; file INSTALL cann,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/580#issuecomment-274762486
https://github.com/psi4/psi4/issues/580#issuecomment-274762486:4162,Deployability,Install,Installing,4162,"1-24 09:28:13.812117187 +0100; --------------------------; Patching file cmake/math/MathLibs.cmake using Plan A...; Hunk #1 succeeded at 73.; done; [sfux@develop01 psi4]$; ```; The code (using OpenBLAS instead of MKL) compiles without error but fails in an installation step:. ```; -- Installing: /scratch/appssf/psi4/build/stage/cluster/apps/psi4/1.1a1/x86_64/lib//psi4/driver/util/__init__.py; -- Installing: /scratch/appssf/psi4/build/stage/cluster/apps/psi4/1.1a1/x86_64/lib//psi4/driver/util/filesystem.py; -- Installing: /scratch/appssf/psi4/build/stage/cluster/apps/psi4/1.1a1/x86_64/lib//psi4/driver/util/tty; -- Installing: /scratch/appssf/psi4/build/stage/cluster/apps/psi4/1.1a1/x86_64/lib//psi4/driver/util/tty/__init__.py; -- Installing: /scratch/appssf/psi4/build/stage/cluster/apps/psi4/1.1a1/x86_64/lib//psi4/driver/util/tty/color.py; -- Installing: /scratch/appssf/psi4/build/stage/cluster/apps/psi4/1.1a1/x86_64/lib//psi4/driver/wrapper_autofrag.py; -- Installing: /scratch/appssf/psi4/build/stage/cluster/apps/psi4/1.1a1/x86_64/lib//psi4/driver/wrapper_database.py; -- Installing: /scratch/appssf/psi4/build/stage/cluster/apps/psi4/1.1a1/x86_64/lib/psi4/header.py; -- Installing: /scratch/appssf/psi4/build/stage/cluster/apps/psi4/1.1a1/x86_64/lib/psi4/extras.py; -- Installing: /scratch/appssf/psi4/build/stage/cluster/apps/psi4/1.1a1/x86_64/lib/psi4/__init__.py; -- Installing: /scratch/appssf/psi4/build/stage/cluster/apps/psi4/1.1a1/x86_64/lib/psi4/config.py; -- Installing: /scratch/appssf/psi4/build/stage/cluster/apps/psi4/1.1a1/x86_64/share/cmake/psi4/psi4Config.cmake; -- Installing: /scratch/appssf/psi4/build/stage/cluster/apps/psi4/1.1a1/x86_64/share/cmake/psi4/psi4ConfigVersion.cmake; -- Installing: /scratch/appssf/psi4/build/stage/cluster/apps/psi4/1.1a1/x86_64/lib/psi4/core.so; CMake Error at src/cmake_install.cmake:44 (file):; file INSTALL cannot copy file; ""/scratch/appssf/psi4/build/psi4_core-prefix/src/psi4_core-build/src/core.so""; to; ""/scratch/appssf/psi",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/580#issuecomment-274762486
https://github.com/psi4/psi4/issues/580#issuecomment-274762486:4279,Deployability,Install,Installing,4279,"unk #1 succeeded at 73.; done; [sfux@develop01 psi4]$; ```; The code (using OpenBLAS instead of MKL) compiles without error but fails in an installation step:. ```; -- Installing: /scratch/appssf/psi4/build/stage/cluster/apps/psi4/1.1a1/x86_64/lib//psi4/driver/util/__init__.py; -- Installing: /scratch/appssf/psi4/build/stage/cluster/apps/psi4/1.1a1/x86_64/lib//psi4/driver/util/filesystem.py; -- Installing: /scratch/appssf/psi4/build/stage/cluster/apps/psi4/1.1a1/x86_64/lib//psi4/driver/util/tty; -- Installing: /scratch/appssf/psi4/build/stage/cluster/apps/psi4/1.1a1/x86_64/lib//psi4/driver/util/tty/__init__.py; -- Installing: /scratch/appssf/psi4/build/stage/cluster/apps/psi4/1.1a1/x86_64/lib//psi4/driver/util/tty/color.py; -- Installing: /scratch/appssf/psi4/build/stage/cluster/apps/psi4/1.1a1/x86_64/lib//psi4/driver/wrapper_autofrag.py; -- Installing: /scratch/appssf/psi4/build/stage/cluster/apps/psi4/1.1a1/x86_64/lib//psi4/driver/wrapper_database.py; -- Installing: /scratch/appssf/psi4/build/stage/cluster/apps/psi4/1.1a1/x86_64/lib/psi4/header.py; -- Installing: /scratch/appssf/psi4/build/stage/cluster/apps/psi4/1.1a1/x86_64/lib/psi4/extras.py; -- Installing: /scratch/appssf/psi4/build/stage/cluster/apps/psi4/1.1a1/x86_64/lib/psi4/__init__.py; -- Installing: /scratch/appssf/psi4/build/stage/cluster/apps/psi4/1.1a1/x86_64/lib/psi4/config.py; -- Installing: /scratch/appssf/psi4/build/stage/cluster/apps/psi4/1.1a1/x86_64/share/cmake/psi4/psi4Config.cmake; -- Installing: /scratch/appssf/psi4/build/stage/cluster/apps/psi4/1.1a1/x86_64/share/cmake/psi4/psi4ConfigVersion.cmake; -- Installing: /scratch/appssf/psi4/build/stage/cluster/apps/psi4/1.1a1/x86_64/lib/psi4/core.so; CMake Error at src/cmake_install.cmake:44 (file):; file INSTALL cannot copy file; ""/scratch/appssf/psi4/build/psi4_core-prefix/src/psi4_core-build/src/core.so""; to; ""/scratch/appssf/psi4/build/stage/cluster/apps/psi4/1.1a1/x86_64/lib/psi4/core.so"".; Call Stack (most recent call first):; cmake_install.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/580#issuecomment-274762486
https://github.com/psi4/psi4/issues/580#issuecomment-274762486:4378,Deployability,Install,Installing,4378,") compiles without error but fails in an installation step:. ```; -- Installing: /scratch/appssf/psi4/build/stage/cluster/apps/psi4/1.1a1/x86_64/lib//psi4/driver/util/__init__.py; -- Installing: /scratch/appssf/psi4/build/stage/cluster/apps/psi4/1.1a1/x86_64/lib//psi4/driver/util/filesystem.py; -- Installing: /scratch/appssf/psi4/build/stage/cluster/apps/psi4/1.1a1/x86_64/lib//psi4/driver/util/tty; -- Installing: /scratch/appssf/psi4/build/stage/cluster/apps/psi4/1.1a1/x86_64/lib//psi4/driver/util/tty/__init__.py; -- Installing: /scratch/appssf/psi4/build/stage/cluster/apps/psi4/1.1a1/x86_64/lib//psi4/driver/util/tty/color.py; -- Installing: /scratch/appssf/psi4/build/stage/cluster/apps/psi4/1.1a1/x86_64/lib//psi4/driver/wrapper_autofrag.py; -- Installing: /scratch/appssf/psi4/build/stage/cluster/apps/psi4/1.1a1/x86_64/lib//psi4/driver/wrapper_database.py; -- Installing: /scratch/appssf/psi4/build/stage/cluster/apps/psi4/1.1a1/x86_64/lib/psi4/header.py; -- Installing: /scratch/appssf/psi4/build/stage/cluster/apps/psi4/1.1a1/x86_64/lib/psi4/extras.py; -- Installing: /scratch/appssf/psi4/build/stage/cluster/apps/psi4/1.1a1/x86_64/lib/psi4/__init__.py; -- Installing: /scratch/appssf/psi4/build/stage/cluster/apps/psi4/1.1a1/x86_64/lib/psi4/config.py; -- Installing: /scratch/appssf/psi4/build/stage/cluster/apps/psi4/1.1a1/x86_64/share/cmake/psi4/psi4Config.cmake; -- Installing: /scratch/appssf/psi4/build/stage/cluster/apps/psi4/1.1a1/x86_64/share/cmake/psi4/psi4ConfigVersion.cmake; -- Installing: /scratch/appssf/psi4/build/stage/cluster/apps/psi4/1.1a1/x86_64/lib/psi4/core.so; CMake Error at src/cmake_install.cmake:44 (file):; file INSTALL cannot copy file; ""/scratch/appssf/psi4/build/psi4_core-prefix/src/psi4_core-build/src/core.so""; to; ""/scratch/appssf/psi4/build/stage/cluster/apps/psi4/1.1a1/x86_64/lib/psi4/core.so"".; Call Stack (most recent call first):; cmake_install.cmake:167 (include). gmake[3]: *** [install] Error 1; gmake[3]: Leaving directory `/scratch/appssf/",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/580#issuecomment-274762486
https://github.com/psi4/psi4/issues/580#issuecomment-274762486:4477,Deployability,Install,Installing,4477,"i4/build/stage/cluster/apps/psi4/1.1a1/x86_64/lib//psi4/driver/util/__init__.py; -- Installing: /scratch/appssf/psi4/build/stage/cluster/apps/psi4/1.1a1/x86_64/lib//psi4/driver/util/filesystem.py; -- Installing: /scratch/appssf/psi4/build/stage/cluster/apps/psi4/1.1a1/x86_64/lib//psi4/driver/util/tty; -- Installing: /scratch/appssf/psi4/build/stage/cluster/apps/psi4/1.1a1/x86_64/lib//psi4/driver/util/tty/__init__.py; -- Installing: /scratch/appssf/psi4/build/stage/cluster/apps/psi4/1.1a1/x86_64/lib//psi4/driver/util/tty/color.py; -- Installing: /scratch/appssf/psi4/build/stage/cluster/apps/psi4/1.1a1/x86_64/lib//psi4/driver/wrapper_autofrag.py; -- Installing: /scratch/appssf/psi4/build/stage/cluster/apps/psi4/1.1a1/x86_64/lib//psi4/driver/wrapper_database.py; -- Installing: /scratch/appssf/psi4/build/stage/cluster/apps/psi4/1.1a1/x86_64/lib/psi4/header.py; -- Installing: /scratch/appssf/psi4/build/stage/cluster/apps/psi4/1.1a1/x86_64/lib/psi4/extras.py; -- Installing: /scratch/appssf/psi4/build/stage/cluster/apps/psi4/1.1a1/x86_64/lib/psi4/__init__.py; -- Installing: /scratch/appssf/psi4/build/stage/cluster/apps/psi4/1.1a1/x86_64/lib/psi4/config.py; -- Installing: /scratch/appssf/psi4/build/stage/cluster/apps/psi4/1.1a1/x86_64/share/cmake/psi4/psi4Config.cmake; -- Installing: /scratch/appssf/psi4/build/stage/cluster/apps/psi4/1.1a1/x86_64/share/cmake/psi4/psi4ConfigVersion.cmake; -- Installing: /scratch/appssf/psi4/build/stage/cluster/apps/psi4/1.1a1/x86_64/lib/psi4/core.so; CMake Error at src/cmake_install.cmake:44 (file):; file INSTALL cannot copy file; ""/scratch/appssf/psi4/build/psi4_core-prefix/src/psi4_core-build/src/core.so""; to; ""/scratch/appssf/psi4/build/stage/cluster/apps/psi4/1.1a1/x86_64/lib/psi4/core.so"".; Call Stack (most recent call first):; cmake_install.cmake:167 (include). gmake[3]: *** [install] Error 1; gmake[3]: Leaving directory `/scratch/appssf/psi4/build/psi4_core-prefix/src/psi4_core-build'; make[2]: *** [psi4_core-prefix/src/psi4_core-stam",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/580#issuecomment-274762486
https://github.com/psi4/psi4/issues/580#issuecomment-274762486:4578,Deployability,Install,Installing,4578,"tch/appssf/psi4/build/stage/cluster/apps/psi4/1.1a1/x86_64/lib//psi4/driver/util/filesystem.py; -- Installing: /scratch/appssf/psi4/build/stage/cluster/apps/psi4/1.1a1/x86_64/lib//psi4/driver/util/tty; -- Installing: /scratch/appssf/psi4/build/stage/cluster/apps/psi4/1.1a1/x86_64/lib//psi4/driver/util/tty/__init__.py; -- Installing: /scratch/appssf/psi4/build/stage/cluster/apps/psi4/1.1a1/x86_64/lib//psi4/driver/util/tty/color.py; -- Installing: /scratch/appssf/psi4/build/stage/cluster/apps/psi4/1.1a1/x86_64/lib//psi4/driver/wrapper_autofrag.py; -- Installing: /scratch/appssf/psi4/build/stage/cluster/apps/psi4/1.1a1/x86_64/lib//psi4/driver/wrapper_database.py; -- Installing: /scratch/appssf/psi4/build/stage/cluster/apps/psi4/1.1a1/x86_64/lib/psi4/header.py; -- Installing: /scratch/appssf/psi4/build/stage/cluster/apps/psi4/1.1a1/x86_64/lib/psi4/extras.py; -- Installing: /scratch/appssf/psi4/build/stage/cluster/apps/psi4/1.1a1/x86_64/lib/psi4/__init__.py; -- Installing: /scratch/appssf/psi4/build/stage/cluster/apps/psi4/1.1a1/x86_64/lib/psi4/config.py; -- Installing: /scratch/appssf/psi4/build/stage/cluster/apps/psi4/1.1a1/x86_64/share/cmake/psi4/psi4Config.cmake; -- Installing: /scratch/appssf/psi4/build/stage/cluster/apps/psi4/1.1a1/x86_64/share/cmake/psi4/psi4ConfigVersion.cmake; -- Installing: /scratch/appssf/psi4/build/stage/cluster/apps/psi4/1.1a1/x86_64/lib/psi4/core.so; CMake Error at src/cmake_install.cmake:44 (file):; file INSTALL cannot copy file; ""/scratch/appssf/psi4/build/psi4_core-prefix/src/psi4_core-build/src/core.so""; to; ""/scratch/appssf/psi4/build/stage/cluster/apps/psi4/1.1a1/x86_64/lib/psi4/core.so"".; Call Stack (most recent call first):; cmake_install.cmake:167 (include). gmake[3]: *** [install] Error 1; gmake[3]: Leaving directory `/scratch/appssf/psi4/build/psi4_core-prefix/src/psi4_core-build'; make[2]: *** [psi4_core-prefix/src/psi4_core-stamp/psi4_core-install] Error 2; make[2]: Leaving directory `/scratch/appssf/psi4/build'; make[1]: *** [",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/580#issuecomment-274762486
https://github.com/psi4/psi4/issues/580#issuecomment-274762486:4677,Deployability,Install,Installing,4677,"Installing: /scratch/appssf/psi4/build/stage/cluster/apps/psi4/1.1a1/x86_64/lib//psi4/driver/util/tty; -- Installing: /scratch/appssf/psi4/build/stage/cluster/apps/psi4/1.1a1/x86_64/lib//psi4/driver/util/tty/__init__.py; -- Installing: /scratch/appssf/psi4/build/stage/cluster/apps/psi4/1.1a1/x86_64/lib//psi4/driver/util/tty/color.py; -- Installing: /scratch/appssf/psi4/build/stage/cluster/apps/psi4/1.1a1/x86_64/lib//psi4/driver/wrapper_autofrag.py; -- Installing: /scratch/appssf/psi4/build/stage/cluster/apps/psi4/1.1a1/x86_64/lib//psi4/driver/wrapper_database.py; -- Installing: /scratch/appssf/psi4/build/stage/cluster/apps/psi4/1.1a1/x86_64/lib/psi4/header.py; -- Installing: /scratch/appssf/psi4/build/stage/cluster/apps/psi4/1.1a1/x86_64/lib/psi4/extras.py; -- Installing: /scratch/appssf/psi4/build/stage/cluster/apps/psi4/1.1a1/x86_64/lib/psi4/__init__.py; -- Installing: /scratch/appssf/psi4/build/stage/cluster/apps/psi4/1.1a1/x86_64/lib/psi4/config.py; -- Installing: /scratch/appssf/psi4/build/stage/cluster/apps/psi4/1.1a1/x86_64/share/cmake/psi4/psi4Config.cmake; -- Installing: /scratch/appssf/psi4/build/stage/cluster/apps/psi4/1.1a1/x86_64/share/cmake/psi4/psi4ConfigVersion.cmake; -- Installing: /scratch/appssf/psi4/build/stage/cluster/apps/psi4/1.1a1/x86_64/lib/psi4/core.so; CMake Error at src/cmake_install.cmake:44 (file):; file INSTALL cannot copy file; ""/scratch/appssf/psi4/build/psi4_core-prefix/src/psi4_core-build/src/core.so""; to; ""/scratch/appssf/psi4/build/stage/cluster/apps/psi4/1.1a1/x86_64/lib/psi4/core.so"".; Call Stack (most recent call first):; cmake_install.cmake:167 (include). gmake[3]: *** [install] Error 1; gmake[3]: Leaving directory `/scratch/appssf/psi4/build/psi4_core-prefix/src/psi4_core-build'; make[2]: *** [psi4_core-prefix/src/psi4_core-stamp/psi4_core-install] Error 2; make[2]: Leaving directory `/scratch/appssf/psi4/build'; make[1]: *** [CMakeFiles/psi4_core.dir/all] Error 2; make[1]: Leaving directory `/scratch/appssf/psi4/build'; mak",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/580#issuecomment-274762486
https://github.com/psi4/psi4/issues/580#issuecomment-274762486:4791,Deployability,Install,Installing,4791,"ling: /scratch/appssf/psi4/build/stage/cluster/apps/psi4/1.1a1/x86_64/lib//psi4/driver/util/tty/__init__.py; -- Installing: /scratch/appssf/psi4/build/stage/cluster/apps/psi4/1.1a1/x86_64/lib//psi4/driver/util/tty/color.py; -- Installing: /scratch/appssf/psi4/build/stage/cluster/apps/psi4/1.1a1/x86_64/lib//psi4/driver/wrapper_autofrag.py; -- Installing: /scratch/appssf/psi4/build/stage/cluster/apps/psi4/1.1a1/x86_64/lib//psi4/driver/wrapper_database.py; -- Installing: /scratch/appssf/psi4/build/stage/cluster/apps/psi4/1.1a1/x86_64/lib/psi4/header.py; -- Installing: /scratch/appssf/psi4/build/stage/cluster/apps/psi4/1.1a1/x86_64/lib/psi4/extras.py; -- Installing: /scratch/appssf/psi4/build/stage/cluster/apps/psi4/1.1a1/x86_64/lib/psi4/__init__.py; -- Installing: /scratch/appssf/psi4/build/stage/cluster/apps/psi4/1.1a1/x86_64/lib/psi4/config.py; -- Installing: /scratch/appssf/psi4/build/stage/cluster/apps/psi4/1.1a1/x86_64/share/cmake/psi4/psi4Config.cmake; -- Installing: /scratch/appssf/psi4/build/stage/cluster/apps/psi4/1.1a1/x86_64/share/cmake/psi4/psi4ConfigVersion.cmake; -- Installing: /scratch/appssf/psi4/build/stage/cluster/apps/psi4/1.1a1/x86_64/lib/psi4/core.so; CMake Error at src/cmake_install.cmake:44 (file):; file INSTALL cannot copy file; ""/scratch/appssf/psi4/build/psi4_core-prefix/src/psi4_core-build/src/core.so""; to; ""/scratch/appssf/psi4/build/stage/cluster/apps/psi4/1.1a1/x86_64/lib/psi4/core.so"".; Call Stack (most recent call first):; cmake_install.cmake:167 (include). gmake[3]: *** [install] Error 1; gmake[3]: Leaving directory `/scratch/appssf/psi4/build/psi4_core-prefix/src/psi4_core-build'; make[2]: *** [psi4_core-prefix/src/psi4_core-stamp/psi4_core-install] Error 2; make[2]: Leaving directory `/scratch/appssf/psi4/build'; make[1]: *** [CMakeFiles/psi4_core.dir/all] Error 2; make[1]: Leaving directory `/scratch/appssf/psi4/build'; make: *** [all] Error 2; ```; For compiling, I was using ""make -j 8"". I will try to compile serially and see if that",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/580#issuecomment-274762486
https://github.com/psi4/psi4/issues/580#issuecomment-274762486:4912,Deployability,Install,Installing,4912,"t__.py; -- Installing: /scratch/appssf/psi4/build/stage/cluster/apps/psi4/1.1a1/x86_64/lib//psi4/driver/util/tty/color.py; -- Installing: /scratch/appssf/psi4/build/stage/cluster/apps/psi4/1.1a1/x86_64/lib//psi4/driver/wrapper_autofrag.py; -- Installing: /scratch/appssf/psi4/build/stage/cluster/apps/psi4/1.1a1/x86_64/lib//psi4/driver/wrapper_database.py; -- Installing: /scratch/appssf/psi4/build/stage/cluster/apps/psi4/1.1a1/x86_64/lib/psi4/header.py; -- Installing: /scratch/appssf/psi4/build/stage/cluster/apps/psi4/1.1a1/x86_64/lib/psi4/extras.py; -- Installing: /scratch/appssf/psi4/build/stage/cluster/apps/psi4/1.1a1/x86_64/lib/psi4/__init__.py; -- Installing: /scratch/appssf/psi4/build/stage/cluster/apps/psi4/1.1a1/x86_64/lib/psi4/config.py; -- Installing: /scratch/appssf/psi4/build/stage/cluster/apps/psi4/1.1a1/x86_64/share/cmake/psi4/psi4Config.cmake; -- Installing: /scratch/appssf/psi4/build/stage/cluster/apps/psi4/1.1a1/x86_64/share/cmake/psi4/psi4ConfigVersion.cmake; -- Installing: /scratch/appssf/psi4/build/stage/cluster/apps/psi4/1.1a1/x86_64/lib/psi4/core.so; CMake Error at src/cmake_install.cmake:44 (file):; file INSTALL cannot copy file; ""/scratch/appssf/psi4/build/psi4_core-prefix/src/psi4_core-build/src/core.so""; to; ""/scratch/appssf/psi4/build/stage/cluster/apps/psi4/1.1a1/x86_64/lib/psi4/core.so"".; Call Stack (most recent call first):; cmake_install.cmake:167 (include). gmake[3]: *** [install] Error 1; gmake[3]: Leaving directory `/scratch/appssf/psi4/build/psi4_core-prefix/src/psi4_core-build'; make[2]: *** [psi4_core-prefix/src/psi4_core-stamp/psi4_core-install] Error 2; make[2]: Leaving directory `/scratch/appssf/psi4/build'; make[1]: *** [CMakeFiles/psi4_core.dir/all] Error 2; make[1]: Leaving directory `/scratch/appssf/psi4/build'; make: *** [all] Error 2; ```; For compiling, I was using ""make -j 8"". I will try to compile serially and see if that was the cause for the installation problem. Best regards and thank you very much for your help. Sam",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/580#issuecomment-274762486
https://github.com/psi4/psi4/issues/580#issuecomment-274762486:5062,Deployability,INSTALL,INSTALL,5062,"t__.py; -- Installing: /scratch/appssf/psi4/build/stage/cluster/apps/psi4/1.1a1/x86_64/lib//psi4/driver/util/tty/color.py; -- Installing: /scratch/appssf/psi4/build/stage/cluster/apps/psi4/1.1a1/x86_64/lib//psi4/driver/wrapper_autofrag.py; -- Installing: /scratch/appssf/psi4/build/stage/cluster/apps/psi4/1.1a1/x86_64/lib//psi4/driver/wrapper_database.py; -- Installing: /scratch/appssf/psi4/build/stage/cluster/apps/psi4/1.1a1/x86_64/lib/psi4/header.py; -- Installing: /scratch/appssf/psi4/build/stage/cluster/apps/psi4/1.1a1/x86_64/lib/psi4/extras.py; -- Installing: /scratch/appssf/psi4/build/stage/cluster/apps/psi4/1.1a1/x86_64/lib/psi4/__init__.py; -- Installing: /scratch/appssf/psi4/build/stage/cluster/apps/psi4/1.1a1/x86_64/lib/psi4/config.py; -- Installing: /scratch/appssf/psi4/build/stage/cluster/apps/psi4/1.1a1/x86_64/share/cmake/psi4/psi4Config.cmake; -- Installing: /scratch/appssf/psi4/build/stage/cluster/apps/psi4/1.1a1/x86_64/share/cmake/psi4/psi4ConfigVersion.cmake; -- Installing: /scratch/appssf/psi4/build/stage/cluster/apps/psi4/1.1a1/x86_64/lib/psi4/core.so; CMake Error at src/cmake_install.cmake:44 (file):; file INSTALL cannot copy file; ""/scratch/appssf/psi4/build/psi4_core-prefix/src/psi4_core-build/src/core.so""; to; ""/scratch/appssf/psi4/build/stage/cluster/apps/psi4/1.1a1/x86_64/lib/psi4/core.so"".; Call Stack (most recent call first):; cmake_install.cmake:167 (include). gmake[3]: *** [install] Error 1; gmake[3]: Leaving directory `/scratch/appssf/psi4/build/psi4_core-prefix/src/psi4_core-build'; make[2]: *** [psi4_core-prefix/src/psi4_core-stamp/psi4_core-install] Error 2; make[2]: Leaving directory `/scratch/appssf/psi4/build'; make[1]: *** [CMakeFiles/psi4_core.dir/all] Error 2; make[1]: Leaving directory `/scratch/appssf/psi4/build'; make: *** [all] Error 2; ```; For compiling, I was using ""make -j 8"". I will try to compile serially and see if that was the cause for the installation problem. Best regards and thank you very much for your help. Sam",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/580#issuecomment-274762486
https://github.com/psi4/psi4/issues/580#issuecomment-274762486:5344,Deployability,install,install,5344,"t__.py; -- Installing: /scratch/appssf/psi4/build/stage/cluster/apps/psi4/1.1a1/x86_64/lib//psi4/driver/util/tty/color.py; -- Installing: /scratch/appssf/psi4/build/stage/cluster/apps/psi4/1.1a1/x86_64/lib//psi4/driver/wrapper_autofrag.py; -- Installing: /scratch/appssf/psi4/build/stage/cluster/apps/psi4/1.1a1/x86_64/lib//psi4/driver/wrapper_database.py; -- Installing: /scratch/appssf/psi4/build/stage/cluster/apps/psi4/1.1a1/x86_64/lib/psi4/header.py; -- Installing: /scratch/appssf/psi4/build/stage/cluster/apps/psi4/1.1a1/x86_64/lib/psi4/extras.py; -- Installing: /scratch/appssf/psi4/build/stage/cluster/apps/psi4/1.1a1/x86_64/lib/psi4/__init__.py; -- Installing: /scratch/appssf/psi4/build/stage/cluster/apps/psi4/1.1a1/x86_64/lib/psi4/config.py; -- Installing: /scratch/appssf/psi4/build/stage/cluster/apps/psi4/1.1a1/x86_64/share/cmake/psi4/psi4Config.cmake; -- Installing: /scratch/appssf/psi4/build/stage/cluster/apps/psi4/1.1a1/x86_64/share/cmake/psi4/psi4ConfigVersion.cmake; -- Installing: /scratch/appssf/psi4/build/stage/cluster/apps/psi4/1.1a1/x86_64/lib/psi4/core.so; CMake Error at src/cmake_install.cmake:44 (file):; file INSTALL cannot copy file; ""/scratch/appssf/psi4/build/psi4_core-prefix/src/psi4_core-build/src/core.so""; to; ""/scratch/appssf/psi4/build/stage/cluster/apps/psi4/1.1a1/x86_64/lib/psi4/core.so"".; Call Stack (most recent call first):; cmake_install.cmake:167 (include). gmake[3]: *** [install] Error 1; gmake[3]: Leaving directory `/scratch/appssf/psi4/build/psi4_core-prefix/src/psi4_core-build'; make[2]: *** [psi4_core-prefix/src/psi4_core-stamp/psi4_core-install] Error 2; make[2]: Leaving directory `/scratch/appssf/psi4/build'; make[1]: *** [CMakeFiles/psi4_core.dir/all] Error 2; make[1]: Leaving directory `/scratch/appssf/psi4/build'; make: *** [all] Error 2; ```; For compiling, I was using ""make -j 8"". I will try to compile serially and see if that was the cause for the installation problem. Best regards and thank you very much for your help. Sam",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/580#issuecomment-274762486
https://github.com/psi4/psi4/issues/580#issuecomment-274762486:5518,Deployability,install,install,5518,"t__.py; -- Installing: /scratch/appssf/psi4/build/stage/cluster/apps/psi4/1.1a1/x86_64/lib//psi4/driver/util/tty/color.py; -- Installing: /scratch/appssf/psi4/build/stage/cluster/apps/psi4/1.1a1/x86_64/lib//psi4/driver/wrapper_autofrag.py; -- Installing: /scratch/appssf/psi4/build/stage/cluster/apps/psi4/1.1a1/x86_64/lib//psi4/driver/wrapper_database.py; -- Installing: /scratch/appssf/psi4/build/stage/cluster/apps/psi4/1.1a1/x86_64/lib/psi4/header.py; -- Installing: /scratch/appssf/psi4/build/stage/cluster/apps/psi4/1.1a1/x86_64/lib/psi4/extras.py; -- Installing: /scratch/appssf/psi4/build/stage/cluster/apps/psi4/1.1a1/x86_64/lib/psi4/__init__.py; -- Installing: /scratch/appssf/psi4/build/stage/cluster/apps/psi4/1.1a1/x86_64/lib/psi4/config.py; -- Installing: /scratch/appssf/psi4/build/stage/cluster/apps/psi4/1.1a1/x86_64/share/cmake/psi4/psi4Config.cmake; -- Installing: /scratch/appssf/psi4/build/stage/cluster/apps/psi4/1.1a1/x86_64/share/cmake/psi4/psi4ConfigVersion.cmake; -- Installing: /scratch/appssf/psi4/build/stage/cluster/apps/psi4/1.1a1/x86_64/lib/psi4/core.so; CMake Error at src/cmake_install.cmake:44 (file):; file INSTALL cannot copy file; ""/scratch/appssf/psi4/build/psi4_core-prefix/src/psi4_core-build/src/core.so""; to; ""/scratch/appssf/psi4/build/stage/cluster/apps/psi4/1.1a1/x86_64/lib/psi4/core.so"".; Call Stack (most recent call first):; cmake_install.cmake:167 (include). gmake[3]: *** [install] Error 1; gmake[3]: Leaving directory `/scratch/appssf/psi4/build/psi4_core-prefix/src/psi4_core-build'; make[2]: *** [psi4_core-prefix/src/psi4_core-stamp/psi4_core-install] Error 2; make[2]: Leaving directory `/scratch/appssf/psi4/build'; make[1]: *** [CMakeFiles/psi4_core.dir/all] Error 2; make[1]: Leaving directory `/scratch/appssf/psi4/build'; make: *** [all] Error 2; ```; For compiling, I was using ""make -j 8"". I will try to compile serially and see if that was the cause for the installation problem. Best regards and thank you very much for your help. Sam",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/580#issuecomment-274762486
https://github.com/psi4/psi4/issues/580#issuecomment-274762486:5842,Deployability,install,installation,5842,"t__.py; -- Installing: /scratch/appssf/psi4/build/stage/cluster/apps/psi4/1.1a1/x86_64/lib//psi4/driver/util/tty/color.py; -- Installing: /scratch/appssf/psi4/build/stage/cluster/apps/psi4/1.1a1/x86_64/lib//psi4/driver/wrapper_autofrag.py; -- Installing: /scratch/appssf/psi4/build/stage/cluster/apps/psi4/1.1a1/x86_64/lib//psi4/driver/wrapper_database.py; -- Installing: /scratch/appssf/psi4/build/stage/cluster/apps/psi4/1.1a1/x86_64/lib/psi4/header.py; -- Installing: /scratch/appssf/psi4/build/stage/cluster/apps/psi4/1.1a1/x86_64/lib/psi4/extras.py; -- Installing: /scratch/appssf/psi4/build/stage/cluster/apps/psi4/1.1a1/x86_64/lib/psi4/__init__.py; -- Installing: /scratch/appssf/psi4/build/stage/cluster/apps/psi4/1.1a1/x86_64/lib/psi4/config.py; -- Installing: /scratch/appssf/psi4/build/stage/cluster/apps/psi4/1.1a1/x86_64/share/cmake/psi4/psi4Config.cmake; -- Installing: /scratch/appssf/psi4/build/stage/cluster/apps/psi4/1.1a1/x86_64/share/cmake/psi4/psi4ConfigVersion.cmake; -- Installing: /scratch/appssf/psi4/build/stage/cluster/apps/psi4/1.1a1/x86_64/lib/psi4/core.so; CMake Error at src/cmake_install.cmake:44 (file):; file INSTALL cannot copy file; ""/scratch/appssf/psi4/build/psi4_core-prefix/src/psi4_core-build/src/core.so""; to; ""/scratch/appssf/psi4/build/stage/cluster/apps/psi4/1.1a1/x86_64/lib/psi4/core.so"".; Call Stack (most recent call first):; cmake_install.cmake:167 (include). gmake[3]: *** [install] Error 1; gmake[3]: Leaving directory `/scratch/appssf/psi4/build/psi4_core-prefix/src/psi4_core-build'; make[2]: *** [psi4_core-prefix/src/psi4_core-stamp/psi4_core-install] Error 2; make[2]: Leaving directory `/scratch/appssf/psi4/build'; make[1]: *** [CMakeFiles/psi4_core.dir/all] Error 2; make[1]: Leaving directory `/scratch/appssf/psi4/build'; make: *** [all] Error 2; ```; For compiling, I was using ""make -j 8"". I will try to compile serially and see if that was the cause for the installation problem. Best regards and thank you very much for your help. Sam",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/580#issuecomment-274762486
https://github.com/psi4/psi4/issues/580#issuecomment-274762486:570,Modifiability,Config,ConfigMath,570,"The quality of OpenBLAS (https://github.com/xianyi/OpenBLAS) should be fine. It is based on GotoBLAS that used to outperform ATLAS and in some cases even MKL. Kazushige Goto, the developer of GotoBLAS was then hired by Intel. . Thank you for the hint about MathLibs.cmake. Based on https://github.com/coderefinery/autocmake/blob/master/modules/math_libs.cmake (lines 127-141) I have added support for detecting OpenBLAS (with the changes it is detected even without setting MATH_ROOT). ```; [sfux@develop01 psi4]$ cat CMakeAddOpenBLAS.patch ; diff -crB psi4_/cmake/math/ConfigMath.cmake psi4/cmake/math/ConfigMath.cmake; *** psi4_/cmake/math/ConfigMath.cmake 2017-01-20 09:35:51.000000000 +0100; --- psi4/cmake/math/ConfigMath.cmake 2017-01-24 09:52:50.074349042 +0100; ***************; *** 14,20 ****; if(ENABLE_64BIT_INTEGERS); set(MATH_LIB_SEARCH_ORDER MKL ACML); else(); ! set(MATH_LIB_SEARCH_ORDER MKL ESSL ATLAS ACML SYSTEM_NATIVE); endif(). if(NOT DEFINED MKL_FLAG); --- 14,20 ----; if(ENABLE_64BIT_INTEGERS); set(MATH_LIB_SEARCH_ORDER MKL ACML); else(); ! set(MATH_LIB_SEARCH_ORDER MKL OPENBLAS ESSL ATLAS ACML SYSTEM_NATIVE); endif(). if(NOT DEFINED MKL_FLAG); diff -crB psi4_/cmake/math/MathLibs.cmake psi4/cmake/math/MathLibs.cmake; *** psi4_/cmake/math/MathLibs.cmake 2017-01-20 09:35:51.000000000 +0100; --- psi4/cmake/math/MathLibs.cmake 2017-01-24 09:28:13.812117187 +0100; ***************; *** 73,78 ****; --- 73,93 ----; set(ATLAS_LAPACK_LIBS atlas lapack); ; #-------------------------------------------------------------------------------; + # OPENBLAS; + ; + set(OPENBLAS_BLAS_INCLUDE_PATH_SUFFIXES); + set(OPENBLAS_LAPACK_INCLUDE_PATH_SUFFIXES); + ; + set(OPENBLAS_BLAS_HEADERS cblas.h openblas_config.h f77blas.h); + set(OPENBLAS_LAPACK_HEADERS lapacke.h lapacke_config.h lapacke_mangling.h lapacke_utils.h); + ; + set(OPENBLAS_BLAS_LIBRARY_PATH_SUFFIXES openblas); + set(OPENBLAS_LAPACK_LIBRARY_PATH_SUFFIXES openblas); + ; + set(OPENBLAS_BLAS_LIBS openblas); + set(OPENBLAS_LAP",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/580#issuecomment-274762486
https://github.com/psi4/psi4/issues/580#issuecomment-274762486:603,Modifiability,Config,ConfigMath,603,"The quality of OpenBLAS (https://github.com/xianyi/OpenBLAS) should be fine. It is based on GotoBLAS that used to outperform ATLAS and in some cases even MKL. Kazushige Goto, the developer of GotoBLAS was then hired by Intel. . Thank you for the hint about MathLibs.cmake. Based on https://github.com/coderefinery/autocmake/blob/master/modules/math_libs.cmake (lines 127-141) I have added support for detecting OpenBLAS (with the changes it is detected even without setting MATH_ROOT). ```; [sfux@develop01 psi4]$ cat CMakeAddOpenBLAS.patch ; diff -crB psi4_/cmake/math/ConfigMath.cmake psi4/cmake/math/ConfigMath.cmake; *** psi4_/cmake/math/ConfigMath.cmake 2017-01-20 09:35:51.000000000 +0100; --- psi4/cmake/math/ConfigMath.cmake 2017-01-24 09:52:50.074349042 +0100; ***************; *** 14,20 ****; if(ENABLE_64BIT_INTEGERS); set(MATH_LIB_SEARCH_ORDER MKL ACML); else(); ! set(MATH_LIB_SEARCH_ORDER MKL ESSL ATLAS ACML SYSTEM_NATIVE); endif(). if(NOT DEFINED MKL_FLAG); --- 14,20 ----; if(ENABLE_64BIT_INTEGERS); set(MATH_LIB_SEARCH_ORDER MKL ACML); else(); ! set(MATH_LIB_SEARCH_ORDER MKL OPENBLAS ESSL ATLAS ACML SYSTEM_NATIVE); endif(). if(NOT DEFINED MKL_FLAG); diff -crB psi4_/cmake/math/MathLibs.cmake psi4/cmake/math/MathLibs.cmake; *** psi4_/cmake/math/MathLibs.cmake 2017-01-20 09:35:51.000000000 +0100; --- psi4/cmake/math/MathLibs.cmake 2017-01-24 09:28:13.812117187 +0100; ***************; *** 73,78 ****; --- 73,93 ----; set(ATLAS_LAPACK_LIBS atlas lapack); ; #-------------------------------------------------------------------------------; + # OPENBLAS; + ; + set(OPENBLAS_BLAS_INCLUDE_PATH_SUFFIXES); + set(OPENBLAS_LAPACK_INCLUDE_PATH_SUFFIXES); + ; + set(OPENBLAS_BLAS_HEADERS cblas.h openblas_config.h f77blas.h); + set(OPENBLAS_LAPACK_HEADERS lapacke.h lapacke_config.h lapacke_mangling.h lapacke_utils.h); + ; + set(OPENBLAS_BLAS_LIBRARY_PATH_SUFFIXES openblas); + set(OPENBLAS_LAPACK_LIBRARY_PATH_SUFFIXES openblas); + ; + set(OPENBLAS_BLAS_LIBS openblas); + set(OPENBLAS_LAP",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/580#issuecomment-274762486
https://github.com/psi4/psi4/issues/580#issuecomment-274762486:642,Modifiability,Config,ConfigMath,642,"The quality of OpenBLAS (https://github.com/xianyi/OpenBLAS) should be fine. It is based on GotoBLAS that used to outperform ATLAS and in some cases even MKL. Kazushige Goto, the developer of GotoBLAS was then hired by Intel. . Thank you for the hint about MathLibs.cmake. Based on https://github.com/coderefinery/autocmake/blob/master/modules/math_libs.cmake (lines 127-141) I have added support for detecting OpenBLAS (with the changes it is detected even without setting MATH_ROOT). ```; [sfux@develop01 psi4]$ cat CMakeAddOpenBLAS.patch ; diff -crB psi4_/cmake/math/ConfigMath.cmake psi4/cmake/math/ConfigMath.cmake; *** psi4_/cmake/math/ConfigMath.cmake 2017-01-20 09:35:51.000000000 +0100; --- psi4/cmake/math/ConfigMath.cmake 2017-01-24 09:52:50.074349042 +0100; ***************; *** 14,20 ****; if(ENABLE_64BIT_INTEGERS); set(MATH_LIB_SEARCH_ORDER MKL ACML); else(); ! set(MATH_LIB_SEARCH_ORDER MKL ESSL ATLAS ACML SYSTEM_NATIVE); endif(). if(NOT DEFINED MKL_FLAG); --- 14,20 ----; if(ENABLE_64BIT_INTEGERS); set(MATH_LIB_SEARCH_ORDER MKL ACML); else(); ! set(MATH_LIB_SEARCH_ORDER MKL OPENBLAS ESSL ATLAS ACML SYSTEM_NATIVE); endif(). if(NOT DEFINED MKL_FLAG); diff -crB psi4_/cmake/math/MathLibs.cmake psi4/cmake/math/MathLibs.cmake; *** psi4_/cmake/math/MathLibs.cmake 2017-01-20 09:35:51.000000000 +0100; --- psi4/cmake/math/MathLibs.cmake 2017-01-24 09:28:13.812117187 +0100; ***************; *** 73,78 ****; --- 73,93 ----; set(ATLAS_LAPACK_LIBS atlas lapack); ; #-------------------------------------------------------------------------------; + # OPENBLAS; + ; + set(OPENBLAS_BLAS_INCLUDE_PATH_SUFFIXES); + set(OPENBLAS_LAPACK_INCLUDE_PATH_SUFFIXES); + ; + set(OPENBLAS_BLAS_HEADERS cblas.h openblas_config.h f77blas.h); + set(OPENBLAS_LAPACK_HEADERS lapacke.h lapacke_config.h lapacke_mangling.h lapacke_utils.h); + ; + set(OPENBLAS_BLAS_LIBRARY_PATH_SUFFIXES openblas); + set(OPENBLAS_LAPACK_LIBRARY_PATH_SUFFIXES openblas); + ; + set(OPENBLAS_BLAS_LIBS openblas); + set(OPENBLAS_LAP",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/580#issuecomment-274762486
https://github.com/psi4/psi4/issues/580#issuecomment-274762486:716,Modifiability,Config,ConfigMath,716,"The quality of OpenBLAS (https://github.com/xianyi/OpenBLAS) should be fine. It is based on GotoBLAS that used to outperform ATLAS and in some cases even MKL. Kazushige Goto, the developer of GotoBLAS was then hired by Intel. . Thank you for the hint about MathLibs.cmake. Based on https://github.com/coderefinery/autocmake/blob/master/modules/math_libs.cmake (lines 127-141) I have added support for detecting OpenBLAS (with the changes it is detected even without setting MATH_ROOT). ```; [sfux@develop01 psi4]$ cat CMakeAddOpenBLAS.patch ; diff -crB psi4_/cmake/math/ConfigMath.cmake psi4/cmake/math/ConfigMath.cmake; *** psi4_/cmake/math/ConfigMath.cmake 2017-01-20 09:35:51.000000000 +0100; --- psi4/cmake/math/ConfigMath.cmake 2017-01-24 09:52:50.074349042 +0100; ***************; *** 14,20 ****; if(ENABLE_64BIT_INTEGERS); set(MATH_LIB_SEARCH_ORDER MKL ACML); else(); ! set(MATH_LIB_SEARCH_ORDER MKL ESSL ATLAS ACML SYSTEM_NATIVE); endif(). if(NOT DEFINED MKL_FLAG); --- 14,20 ----; if(ENABLE_64BIT_INTEGERS); set(MATH_LIB_SEARCH_ORDER MKL ACML); else(); ! set(MATH_LIB_SEARCH_ORDER MKL OPENBLAS ESSL ATLAS ACML SYSTEM_NATIVE); endif(). if(NOT DEFINED MKL_FLAG); diff -crB psi4_/cmake/math/MathLibs.cmake psi4/cmake/math/MathLibs.cmake; *** psi4_/cmake/math/MathLibs.cmake 2017-01-20 09:35:51.000000000 +0100; --- psi4/cmake/math/MathLibs.cmake 2017-01-24 09:28:13.812117187 +0100; ***************; *** 73,78 ****; --- 73,93 ----; set(ATLAS_LAPACK_LIBS atlas lapack); ; #-------------------------------------------------------------------------------; + # OPENBLAS; + ; + set(OPENBLAS_BLAS_INCLUDE_PATH_SUFFIXES); + set(OPENBLAS_LAPACK_INCLUDE_PATH_SUFFIXES); + ; + set(OPENBLAS_BLAS_HEADERS cblas.h openblas_config.h f77blas.h); + set(OPENBLAS_LAPACK_HEADERS lapacke.h lapacke_config.h lapacke_mangling.h lapacke_utils.h); + ; + set(OPENBLAS_BLAS_LIBRARY_PATH_SUFFIXES openblas); + set(OPENBLAS_LAPACK_LIBRARY_PATH_SUFFIXES openblas); + ; + set(OPENBLAS_BLAS_LIBS openblas); + set(OPENBLAS_LAP",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/580#issuecomment-274762486
https://github.com/psi4/psi4/issues/580#issuecomment-274762486:2238,Modifiability,plugin,plugins,2238,"make; *** psi4_/cmake/math/MathLibs.cmake 2017-01-20 09:35:51.000000000 +0100; --- psi4/cmake/math/MathLibs.cmake 2017-01-24 09:28:13.812117187 +0100; ***************; *** 73,78 ****; --- 73,93 ----; set(ATLAS_LAPACK_LIBS atlas lapack); ; #-------------------------------------------------------------------------------; + # OPENBLAS; + ; + set(OPENBLAS_BLAS_INCLUDE_PATH_SUFFIXES); + set(OPENBLAS_LAPACK_INCLUDE_PATH_SUFFIXES); + ; + set(OPENBLAS_BLAS_HEADERS cblas.h openblas_config.h f77blas.h); + set(OPENBLAS_LAPACK_HEADERS lapacke.h lapacke_config.h lapacke_mangling.h lapacke_utils.h); + ; + set(OPENBLAS_BLAS_LIBRARY_PATH_SUFFIXES openblas); + set(OPENBLAS_LAPACK_LIBRARY_PATH_SUFFIXES openblas); + ; + set(OPENBLAS_BLAS_LIBS openblas); + set(OPENBLAS_LAPACK_LIBS openblas); + ; + #-------------------------------------------------------------------------------; # MKL; ; set(MKL_BLAS_INCLUDE_PATH_SUFFIXES); [sfux@develop01 psi4]$ ls; cdash CMakeAddOpenBLAS.patch _conda_vers.py doc LICENSE plugins README.md _setup.py; cmake CMakeLists.txt CTestConfig.cmake external media psi4 samples tests; [sfux@develop01 psi4_]$ patch -p1 --verbose < CMakeAddOpenBLAS.patch ; Hmm... Looks like a new-style context diff to me...; The text leading up to this was:; --------------------------; |diff -crB psi4_/cmake/math/ConfigMath.cmake psi4/cmake/math/ConfigMath.cmake; |*** psi4_/cmake/math/ConfigMath.cmake 2017-01-20 09:35:51.000000000 +0100; |--- psi4/cmake/math/ConfigMath.cmake 2017-01-24 09:52:50.074349042 +0100; --------------------------; Patching file cmake/math/ConfigMath.cmake using Plan A...; Hunk #1 succeeded at 14.; Hmm... The next patch looks like a new-style context diff to me...; The text leading up to this was:; --------------------------; |diff -crB psi4_/cmake/math/MathLibs.cmake psi4/cmake/math/MathLibs.cmake; |*** psi4_/cmake/math/MathLibs.cmake 2017-01-20 09:35:51.000000000 +0100; |--- psi4/cmake/math/MathLibs.cmake 2017-01-24 09:28:13.812117187 +0100; ----------------",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/580#issuecomment-274762486
https://github.com/psi4/psi4/issues/580#issuecomment-274762486:2555,Modifiability,Config,ConfigMath,2555,-------------------------------------------; + # OPENBLAS; + ; + set(OPENBLAS_BLAS_INCLUDE_PATH_SUFFIXES); + set(OPENBLAS_LAPACK_INCLUDE_PATH_SUFFIXES); + ; + set(OPENBLAS_BLAS_HEADERS cblas.h openblas_config.h f77blas.h); + set(OPENBLAS_LAPACK_HEADERS lapacke.h lapacke_config.h lapacke_mangling.h lapacke_utils.h); + ; + set(OPENBLAS_BLAS_LIBRARY_PATH_SUFFIXES openblas); + set(OPENBLAS_LAPACK_LIBRARY_PATH_SUFFIXES openblas); + ; + set(OPENBLAS_BLAS_LIBS openblas); + set(OPENBLAS_LAPACK_LIBS openblas); + ; + #-------------------------------------------------------------------------------; # MKL; ; set(MKL_BLAS_INCLUDE_PATH_SUFFIXES); [sfux@develop01 psi4]$ ls; cdash CMakeAddOpenBLAS.patch _conda_vers.py doc LICENSE plugins README.md _setup.py; cmake CMakeLists.txt CTestConfig.cmake external media psi4 samples tests; [sfux@develop01 psi4_]$ patch -p1 --verbose < CMakeAddOpenBLAS.patch ; Hmm... Looks like a new-style context diff to me...; The text leading up to this was:; --------------------------; |diff -crB psi4_/cmake/math/ConfigMath.cmake psi4/cmake/math/ConfigMath.cmake; |*** psi4_/cmake/math/ConfigMath.cmake 2017-01-20 09:35:51.000000000 +0100; |--- psi4/cmake/math/ConfigMath.cmake 2017-01-24 09:52:50.074349042 +0100; --------------------------; Patching file cmake/math/ConfigMath.cmake using Plan A...; Hunk #1 succeeded at 14.; Hmm... The next patch looks like a new-style context diff to me...; The text leading up to this was:; --------------------------; |diff -crB psi4_/cmake/math/MathLibs.cmake psi4/cmake/math/MathLibs.cmake; |*** psi4_/cmake/math/MathLibs.cmake 2017-01-20 09:35:51.000000000 +0100; |--- psi4/cmake/math/MathLibs.cmake 2017-01-24 09:28:13.812117187 +0100; --------------------------; Patching file cmake/math/MathLibs.cmake using Plan A...; Hunk #1 succeeded at 73.; done; [sfux@develop01 psi4]$; ```; The code (using OpenBLAS instead of MKL) compiles without error but fails in an installation step:. ```; -- Installing: /scratch/appssf/psi4/build/,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/580#issuecomment-274762486
https://github.com/psi4/psi4/issues/580#issuecomment-274762486:2588,Modifiability,Config,ConfigMath,2588,(OPENBLAS_BLAS_INCLUDE_PATH_SUFFIXES); + set(OPENBLAS_LAPACK_INCLUDE_PATH_SUFFIXES); + ; + set(OPENBLAS_BLAS_HEADERS cblas.h openblas_config.h f77blas.h); + set(OPENBLAS_LAPACK_HEADERS lapacke.h lapacke_config.h lapacke_mangling.h lapacke_utils.h); + ; + set(OPENBLAS_BLAS_LIBRARY_PATH_SUFFIXES openblas); + set(OPENBLAS_LAPACK_LIBRARY_PATH_SUFFIXES openblas); + ; + set(OPENBLAS_BLAS_LIBS openblas); + set(OPENBLAS_LAPACK_LIBS openblas); + ; + #-------------------------------------------------------------------------------; # MKL; ; set(MKL_BLAS_INCLUDE_PATH_SUFFIXES); [sfux@develop01 psi4]$ ls; cdash CMakeAddOpenBLAS.patch _conda_vers.py doc LICENSE plugins README.md _setup.py; cmake CMakeLists.txt CTestConfig.cmake external media psi4 samples tests; [sfux@develop01 psi4_]$ patch -p1 --verbose < CMakeAddOpenBLAS.patch ; Hmm... Looks like a new-style context diff to me...; The text leading up to this was:; --------------------------; |diff -crB psi4_/cmake/math/ConfigMath.cmake psi4/cmake/math/ConfigMath.cmake; |*** psi4_/cmake/math/ConfigMath.cmake 2017-01-20 09:35:51.000000000 +0100; |--- psi4/cmake/math/ConfigMath.cmake 2017-01-24 09:52:50.074349042 +0100; --------------------------; Patching file cmake/math/ConfigMath.cmake using Plan A...; Hunk #1 succeeded at 14.; Hmm... The next patch looks like a new-style context diff to me...; The text leading up to this was:; --------------------------; |diff -crB psi4_/cmake/math/MathLibs.cmake psi4/cmake/math/MathLibs.cmake; |*** psi4_/cmake/math/MathLibs.cmake 2017-01-20 09:35:51.000000000 +0100; |--- psi4/cmake/math/MathLibs.cmake 2017-01-24 09:28:13.812117187 +0100; --------------------------; Patching file cmake/math/MathLibs.cmake using Plan A...; Hunk #1 succeeded at 73.; done; [sfux@develop01 psi4]$; ```; The code (using OpenBLAS instead of MKL) compiles without error but fails in an installation step:. ```; -- Installing: /scratch/appssf/psi4/build/stage/cluster/apps/psi4/1.1a1/x86_64/lib//psi4/driver/util/__init__.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/580#issuecomment-274762486
https://github.com/psi4/psi4/issues/580#issuecomment-274762486:2628,Modifiability,Config,ConfigMath,2628,; + set(OPENBLAS_LAPACK_INCLUDE_PATH_SUFFIXES); + ; + set(OPENBLAS_BLAS_HEADERS cblas.h openblas_config.h f77blas.h); + set(OPENBLAS_LAPACK_HEADERS lapacke.h lapacke_config.h lapacke_mangling.h lapacke_utils.h); + ; + set(OPENBLAS_BLAS_LIBRARY_PATH_SUFFIXES openblas); + set(OPENBLAS_LAPACK_LIBRARY_PATH_SUFFIXES openblas); + ; + set(OPENBLAS_BLAS_LIBS openblas); + set(OPENBLAS_LAPACK_LIBS openblas); + ; + #-------------------------------------------------------------------------------; # MKL; ; set(MKL_BLAS_INCLUDE_PATH_SUFFIXES); [sfux@develop01 psi4]$ ls; cdash CMakeAddOpenBLAS.patch _conda_vers.py doc LICENSE plugins README.md _setup.py; cmake CMakeLists.txt CTestConfig.cmake external media psi4 samples tests; [sfux@develop01 psi4_]$ patch -p1 --verbose < CMakeAddOpenBLAS.patch ; Hmm... Looks like a new-style context diff to me...; The text leading up to this was:; --------------------------; |diff -crB psi4_/cmake/math/ConfigMath.cmake psi4/cmake/math/ConfigMath.cmake; |*** psi4_/cmake/math/ConfigMath.cmake 2017-01-20 09:35:51.000000000 +0100; |--- psi4/cmake/math/ConfigMath.cmake 2017-01-24 09:52:50.074349042 +0100; --------------------------; Patching file cmake/math/ConfigMath.cmake using Plan A...; Hunk #1 succeeded at 14.; Hmm... The next patch looks like a new-style context diff to me...; The text leading up to this was:; --------------------------; |diff -crB psi4_/cmake/math/MathLibs.cmake psi4/cmake/math/MathLibs.cmake; |*** psi4_/cmake/math/MathLibs.cmake 2017-01-20 09:35:51.000000000 +0100; |--- psi4/cmake/math/MathLibs.cmake 2017-01-24 09:28:13.812117187 +0100; --------------------------; Patching file cmake/math/MathLibs.cmake using Plan A...; Hunk #1 succeeded at 73.; done; [sfux@develop01 psi4]$; ```; The code (using OpenBLAS instead of MKL) compiles without error but fails in an installation step:. ```; -- Installing: /scratch/appssf/psi4/build/stage/cluster/apps/psi4/1.1a1/x86_64/lib//psi4/driver/util/__init__.py; -- Installing: /scratch/appssf/p,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/580#issuecomment-274762486
https://github.com/psi4/psi4/issues/580#issuecomment-274762486:2703,Modifiability,Config,ConfigMath,2703,S_HEADERS cblas.h openblas_config.h f77blas.h); + set(OPENBLAS_LAPACK_HEADERS lapacke.h lapacke_config.h lapacke_mangling.h lapacke_utils.h); + ; + set(OPENBLAS_BLAS_LIBRARY_PATH_SUFFIXES openblas); + set(OPENBLAS_LAPACK_LIBRARY_PATH_SUFFIXES openblas); + ; + set(OPENBLAS_BLAS_LIBS openblas); + set(OPENBLAS_LAPACK_LIBS openblas); + ; + #-------------------------------------------------------------------------------; # MKL; ; set(MKL_BLAS_INCLUDE_PATH_SUFFIXES); [sfux@develop01 psi4]$ ls; cdash CMakeAddOpenBLAS.patch _conda_vers.py doc LICENSE plugins README.md _setup.py; cmake CMakeLists.txt CTestConfig.cmake external media psi4 samples tests; [sfux@develop01 psi4_]$ patch -p1 --verbose < CMakeAddOpenBLAS.patch ; Hmm... Looks like a new-style context diff to me...; The text leading up to this was:; --------------------------; |diff -crB psi4_/cmake/math/ConfigMath.cmake psi4/cmake/math/ConfigMath.cmake; |*** psi4_/cmake/math/ConfigMath.cmake 2017-01-20 09:35:51.000000000 +0100; |--- psi4/cmake/math/ConfigMath.cmake 2017-01-24 09:52:50.074349042 +0100; --------------------------; Patching file cmake/math/ConfigMath.cmake using Plan A...; Hunk #1 succeeded at 14.; Hmm... The next patch looks like a new-style context diff to me...; The text leading up to this was:; --------------------------; |diff -crB psi4_/cmake/math/MathLibs.cmake psi4/cmake/math/MathLibs.cmake; |*** psi4_/cmake/math/MathLibs.cmake 2017-01-20 09:35:51.000000000 +0100; |--- psi4/cmake/math/MathLibs.cmake 2017-01-24 09:28:13.812117187 +0100; --------------------------; Patching file cmake/math/MathLibs.cmake using Plan A...; Hunk #1 succeeded at 73.; done; [sfux@develop01 psi4]$; ```; The code (using OpenBLAS instead of MKL) compiles without error but fails in an installation step:. ```; -- Installing: /scratch/appssf/psi4/build/stage/cluster/apps/psi4/1.1a1/x86_64/lib//psi4/driver/util/__init__.py; -- Installing: /scratch/appssf/psi4/build/stage/cluster/apps/psi4/1.1a1/x86_64/lib//psi4/driver/util/fi,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/580#issuecomment-274762486
https://github.com/psi4/psi4/issues/580#issuecomment-274762486:2810,Modifiability,Config,ConfigMath,2810,acke_config.h lapacke_mangling.h lapacke_utils.h); + ; + set(OPENBLAS_BLAS_LIBRARY_PATH_SUFFIXES openblas); + set(OPENBLAS_LAPACK_LIBRARY_PATH_SUFFIXES openblas); + ; + set(OPENBLAS_BLAS_LIBS openblas); + set(OPENBLAS_LAPACK_LIBS openblas); + ; + #-------------------------------------------------------------------------------; # MKL; ; set(MKL_BLAS_INCLUDE_PATH_SUFFIXES); [sfux@develop01 psi4]$ ls; cdash CMakeAddOpenBLAS.patch _conda_vers.py doc LICENSE plugins README.md _setup.py; cmake CMakeLists.txt CTestConfig.cmake external media psi4 samples tests; [sfux@develop01 psi4_]$ patch -p1 --verbose < CMakeAddOpenBLAS.patch ; Hmm... Looks like a new-style context diff to me...; The text leading up to this was:; --------------------------; |diff -crB psi4_/cmake/math/ConfigMath.cmake psi4/cmake/math/ConfigMath.cmake; |*** psi4_/cmake/math/ConfigMath.cmake 2017-01-20 09:35:51.000000000 +0100; |--- psi4/cmake/math/ConfigMath.cmake 2017-01-24 09:52:50.074349042 +0100; --------------------------; Patching file cmake/math/ConfigMath.cmake using Plan A...; Hunk #1 succeeded at 14.; Hmm... The next patch looks like a new-style context diff to me...; The text leading up to this was:; --------------------------; |diff -crB psi4_/cmake/math/MathLibs.cmake psi4/cmake/math/MathLibs.cmake; |*** psi4_/cmake/math/MathLibs.cmake 2017-01-20 09:35:51.000000000 +0100; |--- psi4/cmake/math/MathLibs.cmake 2017-01-24 09:28:13.812117187 +0100; --------------------------; Patching file cmake/math/MathLibs.cmake using Plan A...; Hunk #1 succeeded at 73.; done; [sfux@develop01 psi4]$; ```; The code (using OpenBLAS instead of MKL) compiles without error but fails in an installation step:. ```; -- Installing: /scratch/appssf/psi4/build/stage/cluster/apps/psi4/1.1a1/x86_64/lib//psi4/driver/util/__init__.py; -- Installing: /scratch/appssf/psi4/build/stage/cluster/apps/psi4/1.1a1/x86_64/lib//psi4/driver/util/filesystem.py; -- Installing: /scratch/appssf/psi4/build/stage/cluster/apps/psi4/1.1a1/x86_64,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/580#issuecomment-274762486
https://github.com/psi4/psi4/issues/580#issuecomment-274762486:4663,Modifiability,config,config,4663,"a1/x86_64/lib//psi4/driver/util/filesystem.py; -- Installing: /scratch/appssf/psi4/build/stage/cluster/apps/psi4/1.1a1/x86_64/lib//psi4/driver/util/tty; -- Installing: /scratch/appssf/psi4/build/stage/cluster/apps/psi4/1.1a1/x86_64/lib//psi4/driver/util/tty/__init__.py; -- Installing: /scratch/appssf/psi4/build/stage/cluster/apps/psi4/1.1a1/x86_64/lib//psi4/driver/util/tty/color.py; -- Installing: /scratch/appssf/psi4/build/stage/cluster/apps/psi4/1.1a1/x86_64/lib//psi4/driver/wrapper_autofrag.py; -- Installing: /scratch/appssf/psi4/build/stage/cluster/apps/psi4/1.1a1/x86_64/lib//psi4/driver/wrapper_database.py; -- Installing: /scratch/appssf/psi4/build/stage/cluster/apps/psi4/1.1a1/x86_64/lib/psi4/header.py; -- Installing: /scratch/appssf/psi4/build/stage/cluster/apps/psi4/1.1a1/x86_64/lib/psi4/extras.py; -- Installing: /scratch/appssf/psi4/build/stage/cluster/apps/psi4/1.1a1/x86_64/lib/psi4/__init__.py; -- Installing: /scratch/appssf/psi4/build/stage/cluster/apps/psi4/1.1a1/x86_64/lib/psi4/config.py; -- Installing: /scratch/appssf/psi4/build/stage/cluster/apps/psi4/1.1a1/x86_64/share/cmake/psi4/psi4Config.cmake; -- Installing: /scratch/appssf/psi4/build/stage/cluster/apps/psi4/1.1a1/x86_64/share/cmake/psi4/psi4ConfigVersion.cmake; -- Installing: /scratch/appssf/psi4/build/stage/cluster/apps/psi4/1.1a1/x86_64/lib/psi4/core.so; CMake Error at src/cmake_install.cmake:44 (file):; file INSTALL cannot copy file; ""/scratch/appssf/psi4/build/psi4_core-prefix/src/psi4_core-build/src/core.so""; to; ""/scratch/appssf/psi4/build/stage/cluster/apps/psi4/1.1a1/x86_64/lib/psi4/core.so"".; Call Stack (most recent call first):; cmake_install.cmake:167 (include). gmake[3]: *** [install] Error 1; gmake[3]: Leaving directory `/scratch/appssf/psi4/build/psi4_core-prefix/src/psi4_core-build'; make[2]: *** [psi4_core-prefix/src/psi4_core-stamp/psi4_core-install] Error 2; make[2]: Leaving directory `/scratch/appssf/psi4/build'; make[1]: *** [CMakeFiles/psi4_core.dir/all] Error 2; make[1]: Le",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/580#issuecomment-274762486
https://github.com/psi4/psi4/issues/580#issuecomment-274762486:401,Safety,detect,detecting,401,"The quality of OpenBLAS (https://github.com/xianyi/OpenBLAS) should be fine. It is based on GotoBLAS that used to outperform ATLAS and in some cases even MKL. Kazushige Goto, the developer of GotoBLAS was then hired by Intel. . Thank you for the hint about MathLibs.cmake. Based on https://github.com/coderefinery/autocmake/blob/master/modules/math_libs.cmake (lines 127-141) I have added support for detecting OpenBLAS (with the changes it is detected even without setting MATH_ROOT). ```; [sfux@develop01 psi4]$ cat CMakeAddOpenBLAS.patch ; diff -crB psi4_/cmake/math/ConfigMath.cmake psi4/cmake/math/ConfigMath.cmake; *** psi4_/cmake/math/ConfigMath.cmake 2017-01-20 09:35:51.000000000 +0100; --- psi4/cmake/math/ConfigMath.cmake 2017-01-24 09:52:50.074349042 +0100; ***************; *** 14,20 ****; if(ENABLE_64BIT_INTEGERS); set(MATH_LIB_SEARCH_ORDER MKL ACML); else(); ! set(MATH_LIB_SEARCH_ORDER MKL ESSL ATLAS ACML SYSTEM_NATIVE); endif(). if(NOT DEFINED MKL_FLAG); --- 14,20 ----; if(ENABLE_64BIT_INTEGERS); set(MATH_LIB_SEARCH_ORDER MKL ACML); else(); ! set(MATH_LIB_SEARCH_ORDER MKL OPENBLAS ESSL ATLAS ACML SYSTEM_NATIVE); endif(). if(NOT DEFINED MKL_FLAG); diff -crB psi4_/cmake/math/MathLibs.cmake psi4/cmake/math/MathLibs.cmake; *** psi4_/cmake/math/MathLibs.cmake 2017-01-20 09:35:51.000000000 +0100; --- psi4/cmake/math/MathLibs.cmake 2017-01-24 09:28:13.812117187 +0100; ***************; *** 73,78 ****; --- 73,93 ----; set(ATLAS_LAPACK_LIBS atlas lapack); ; #-------------------------------------------------------------------------------; + # OPENBLAS; + ; + set(OPENBLAS_BLAS_INCLUDE_PATH_SUFFIXES); + set(OPENBLAS_LAPACK_INCLUDE_PATH_SUFFIXES); + ; + set(OPENBLAS_BLAS_HEADERS cblas.h openblas_config.h f77blas.h); + set(OPENBLAS_LAPACK_HEADERS lapacke.h lapacke_config.h lapacke_mangling.h lapacke_utils.h); + ; + set(OPENBLAS_BLAS_LIBRARY_PATH_SUFFIXES openblas); + set(OPENBLAS_LAPACK_LIBRARY_PATH_SUFFIXES openblas); + ; + set(OPENBLAS_BLAS_LIBS openblas); + set(OPENBLAS_LAP",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/580#issuecomment-274762486
https://github.com/psi4/psi4/issues/580#issuecomment-274762486:444,Safety,detect,detected,444,"The quality of OpenBLAS (https://github.com/xianyi/OpenBLAS) should be fine. It is based on GotoBLAS that used to outperform ATLAS and in some cases even MKL. Kazushige Goto, the developer of GotoBLAS was then hired by Intel. . Thank you for the hint about MathLibs.cmake. Based on https://github.com/coderefinery/autocmake/blob/master/modules/math_libs.cmake (lines 127-141) I have added support for detecting OpenBLAS (with the changes it is detected even without setting MATH_ROOT). ```; [sfux@develop01 psi4]$ cat CMakeAddOpenBLAS.patch ; diff -crB psi4_/cmake/math/ConfigMath.cmake psi4/cmake/math/ConfigMath.cmake; *** psi4_/cmake/math/ConfigMath.cmake 2017-01-20 09:35:51.000000000 +0100; --- psi4/cmake/math/ConfigMath.cmake 2017-01-24 09:52:50.074349042 +0100; ***************; *** 14,20 ****; if(ENABLE_64BIT_INTEGERS); set(MATH_LIB_SEARCH_ORDER MKL ACML); else(); ! set(MATH_LIB_SEARCH_ORDER MKL ESSL ATLAS ACML SYSTEM_NATIVE); endif(). if(NOT DEFINED MKL_FLAG); --- 14,20 ----; if(ENABLE_64BIT_INTEGERS); set(MATH_LIB_SEARCH_ORDER MKL ACML); else(); ! set(MATH_LIB_SEARCH_ORDER MKL OPENBLAS ESSL ATLAS ACML SYSTEM_NATIVE); endif(). if(NOT DEFINED MKL_FLAG); diff -crB psi4_/cmake/math/MathLibs.cmake psi4/cmake/math/MathLibs.cmake; *** psi4_/cmake/math/MathLibs.cmake 2017-01-20 09:35:51.000000000 +0100; --- psi4/cmake/math/MathLibs.cmake 2017-01-24 09:28:13.812117187 +0100; ***************; *** 73,78 ****; --- 73,93 ----; set(ATLAS_LAPACK_LIBS atlas lapack); ; #-------------------------------------------------------------------------------; + # OPENBLAS; + ; + set(OPENBLAS_BLAS_INCLUDE_PATH_SUFFIXES); + set(OPENBLAS_LAPACK_INCLUDE_PATH_SUFFIXES); + ; + set(OPENBLAS_BLAS_HEADERS cblas.h openblas_config.h f77blas.h); + set(OPENBLAS_LAPACK_HEADERS lapacke.h lapacke_config.h lapacke_mangling.h lapacke_utils.h); + ; + set(OPENBLAS_BLAS_LIBRARY_PATH_SUFFIXES openblas); + set(OPENBLAS_LAPACK_LIBRARY_PATH_SUFFIXES openblas); + ; + set(OPENBLAS_BLAS_LIBS openblas); + set(OPENBLAS_LAP",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/580#issuecomment-274762486
https://github.com/psi4/psi4/issues/580#issuecomment-274762486:2334,Testability,test,tests,2334,"2017-01-24 09:28:13.812117187 +0100; ***************; *** 73,78 ****; --- 73,93 ----; set(ATLAS_LAPACK_LIBS atlas lapack); ; #-------------------------------------------------------------------------------; + # OPENBLAS; + ; + set(OPENBLAS_BLAS_INCLUDE_PATH_SUFFIXES); + set(OPENBLAS_LAPACK_INCLUDE_PATH_SUFFIXES); + ; + set(OPENBLAS_BLAS_HEADERS cblas.h openblas_config.h f77blas.h); + set(OPENBLAS_LAPACK_HEADERS lapacke.h lapacke_config.h lapacke_mangling.h lapacke_utils.h); + ; + set(OPENBLAS_BLAS_LIBRARY_PATH_SUFFIXES openblas); + set(OPENBLAS_LAPACK_LIBRARY_PATH_SUFFIXES openblas); + ; + set(OPENBLAS_BLAS_LIBS openblas); + set(OPENBLAS_LAPACK_LIBS openblas); + ; + #-------------------------------------------------------------------------------; # MKL; ; set(MKL_BLAS_INCLUDE_PATH_SUFFIXES); [sfux@develop01 psi4]$ ls; cdash CMakeAddOpenBLAS.patch _conda_vers.py doc LICENSE plugins README.md _setup.py; cmake CMakeLists.txt CTestConfig.cmake external media psi4 samples tests; [sfux@develop01 psi4_]$ patch -p1 --verbose < CMakeAddOpenBLAS.patch ; Hmm... Looks like a new-style context diff to me...; The text leading up to this was:; --------------------------; |diff -crB psi4_/cmake/math/ConfigMath.cmake psi4/cmake/math/ConfigMath.cmake; |*** psi4_/cmake/math/ConfigMath.cmake 2017-01-20 09:35:51.000000000 +0100; |--- psi4/cmake/math/ConfigMath.cmake 2017-01-24 09:52:50.074349042 +0100; --------------------------; Patching file cmake/math/ConfigMath.cmake using Plan A...; Hunk #1 succeeded at 14.; Hmm... The next patch looks like a new-style context diff to me...; The text leading up to this was:; --------------------------; |diff -crB psi4_/cmake/math/MathLibs.cmake psi4/cmake/math/MathLibs.cmake; |*** psi4_/cmake/math/MathLibs.cmake 2017-01-20 09:35:51.000000000 +0100; |--- psi4/cmake/math/MathLibs.cmake 2017-01-24 09:28:13.812117187 +0100; --------------------------; Patching file cmake/math/MathLibs.cmake using Plan A...; Hunk #1 succeeded at 73.; done; [sfux@develop",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/580#issuecomment-274762486
https://github.com/psi4/psi4/issues/580#issuecomment-274822045:180,Availability,error,error,180,"Thanks very much for the OpenBLAS patch. Do you want to submit it as a Pull Request so you show up as a contributor, or would you rather I just added it to the code?. That install error is bizarre. Make double sure of your permissions and disk space perhaps? We regularly build in parallel (up to `-j12`), so that shouldn't be a problem.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/580#issuecomment-274822045
https://github.com/psi4/psi4/issues/580#issuecomment-274822045:34,Deployability,patch,patch,34,"Thanks very much for the OpenBLAS patch. Do you want to submit it as a Pull Request so you show up as a contributor, or would you rather I just added it to the code?. That install error is bizarre. Make double sure of your permissions and disk space perhaps? We regularly build in parallel (up to `-j12`), so that shouldn't be a problem.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/580#issuecomment-274822045
https://github.com/psi4/psi4/issues/580#issuecomment-274822045:172,Deployability,install,install,172,"Thanks very much for the OpenBLAS patch. Do you want to submit it as a Pull Request so you show up as a contributor, or would you rather I just added it to the code?. That install error is bizarre. Make double sure of your permissions and disk space perhaps? We regularly build in parallel (up to `-j12`), so that shouldn't be a problem.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/580#issuecomment-274822045
https://github.com/psi4/psi4/issues/580#issuecomment-274828765:280,Availability,error,error,280,"It would be nice if you could add the code. I don't need to show up as a contributor (as the changes are based on code in the autocmake github repo). But can you please wait before adding the code, until we could verify that the compilation with OpenBLAS works. After getting the error, I have run make a second time and then I did not get the error any more. I have therefore deleted the installation and redid it from scratch. This time, I am running make serially. The compilation is still ongoing. I will provide you an update once it finished and after having verified that the code is properly linked against OpenBLAS. Best regards. Sam",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/580#issuecomment-274828765
https://github.com/psi4/psi4/issues/580#issuecomment-274828765:344,Availability,error,error,344,"It would be nice if you could add the code. I don't need to show up as a contributor (as the changes are based on code in the autocmake github repo). But can you please wait before adding the code, until we could verify that the compilation with OpenBLAS works. After getting the error, I have run make a second time and then I did not get the error any more. I have therefore deleted the installation and redid it from scratch. This time, I am running make serially. The compilation is still ongoing. I will provide you an update once it finished and after having verified that the code is properly linked against OpenBLAS. Best regards. Sam",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/580#issuecomment-274828765
https://github.com/psi4/psi4/issues/580#issuecomment-274828765:389,Deployability,install,installation,389,"It would be nice if you could add the code. I don't need to show up as a contributor (as the changes are based on code in the autocmake github repo). But can you please wait before adding the code, until we could verify that the compilation with OpenBLAS works. After getting the error, I have run make a second time and then I did not get the error any more. I have therefore deleted the installation and redid it from scratch. This time, I am running make serially. The compilation is still ongoing. I will provide you an update once it finished and after having verified that the code is properly linked against OpenBLAS. Best regards. Sam",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/580#issuecomment-274828765
https://github.com/psi4/psi4/issues/580#issuecomment-274828765:524,Deployability,update,update,524,"It would be nice if you could add the code. I don't need to show up as a contributor (as the changes are based on code in the autocmake github repo). But can you please wait before adding the code, until we could verify that the compilation with OpenBLAS works. After getting the error, I have run make a second time and then I did not get the error any more. I have therefore deleted the installation and redid it from scratch. This time, I am running make serially. The compilation is still ongoing. I will provide you an update once it finished and after having verified that the code is properly linked against OpenBLAS. Best regards. Sam",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/580#issuecomment-274828765
https://github.com/psi4/psi4/issues/580#issuecomment-275104849:181,Deployability,install,installation,181,"I have changed some CMake variable and now the compilation works fine (I think it was related to having CMAKE_OLDINCLUDEDIR set to /usr/include, causing a permission problem in the installation step). Linking with OpenBLAS also seems to have worked fine:. ```; [sfux@develop01 x86_64]$ ldd lib/psi4/core.so ; linux-vdso.so.1 => (0x00007ffc83bea000); libpython2.7.so.1.0 => /cluster/apps/python/2.7.12/x86_64/lib64/libpython2.7.so.1.0 (0x00007f1a75aa0000); libdl.so.2 => /lib64/libdl.so.2 (0x00007f1a7588b000); libopenblas.so.0 => /cluster/apps/openblas/0.2.13_seq/x86_64/gcc_5.2.0/lib/libopenblas.so.0 (0x00007f1a736f5000); libstdc++.so.6 => /cluster/apps/gcc/5.2.0/lib64/libstdc++.so.6 (0x00007f1a73366000); libm.so.6 => /lib64/libm.so.6 (0x00007f1a730e1000); libgomp.so.1 => /cluster/apps/gcc/5.2.0/lib64/libgomp.so.1 (0x00007f1a72ec0000); libgcc_s.so.1 => /cluster/apps/gcc/5.2.0/lib64/libgcc_s.so.1 (0x00007f1a72caa000); libpthread.so.0 => /lib64/libpthread.so.0 (0x00007f1a72a8c000); libc.so.6 => /lib64/libc.so.6 (0x00007f1a726f8000); libutil.so.1 => /lib64/libutil.so.1 (0x00007f1a724f5000); /lib64/ld-linux-x86-64.so.2 (0x00007f1a78d6a000); libgfortran.so.3 => /cluster/apps/gcc/5.2.0/lib64/libgfortran.so.3 (0x00007f1a721d5000); librt.so.1 => /lib64/librt.so.1 (0x00007f1a71fcd000); libquadmath.so.0 => /cluster/apps/gcc/5.2.0/lib/../lib64/libquadmath.so.0 (0x00007f1a71d8d000); [sfux@develop01 x86_64]$ ; ```. I did a quick test with. ```; #! Sample UHF/6-31G** CH2 computation. memory 250 mb. molecule ch2 {; 0 3; C; H 1 R; H 1 R 2 A. R = 1.075; A = 133.93; }. set basis 6-31G**; set reference uhf; energy ('scf'); ```; to verify that the installation does not crash on startup. So far everything looks fine. I have a comment about the shebang line in the psi4 python script. After the installation it was set to an absolute path:. #!/cluster/apps/python/2.7.12/x86_64/bin/python. On larger clusters, there are usually multiple python versions installed in non-standard locations. Therefore",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/580#issuecomment-275104849
https://github.com/psi4/psi4/issues/580#issuecomment-275104849:1650,Deployability,install,installation,1650,"c++.so.6 => /cluster/apps/gcc/5.2.0/lib64/libstdc++.so.6 (0x00007f1a73366000); libm.so.6 => /lib64/libm.so.6 (0x00007f1a730e1000); libgomp.so.1 => /cluster/apps/gcc/5.2.0/lib64/libgomp.so.1 (0x00007f1a72ec0000); libgcc_s.so.1 => /cluster/apps/gcc/5.2.0/lib64/libgcc_s.so.1 (0x00007f1a72caa000); libpthread.so.0 => /lib64/libpthread.so.0 (0x00007f1a72a8c000); libc.so.6 => /lib64/libc.so.6 (0x00007f1a726f8000); libutil.so.1 => /lib64/libutil.so.1 (0x00007f1a724f5000); /lib64/ld-linux-x86-64.so.2 (0x00007f1a78d6a000); libgfortran.so.3 => /cluster/apps/gcc/5.2.0/lib64/libgfortran.so.3 (0x00007f1a721d5000); librt.so.1 => /lib64/librt.so.1 (0x00007f1a71fcd000); libquadmath.so.0 => /cluster/apps/gcc/5.2.0/lib/../lib64/libquadmath.so.0 (0x00007f1a71d8d000); [sfux@develop01 x86_64]$ ; ```. I did a quick test with. ```; #! Sample UHF/6-31G** CH2 computation. memory 250 mb. molecule ch2 {; 0 3; C; H 1 R; H 1 R 2 A. R = 1.075; A = 133.93; }. set basis 6-31G**; set reference uhf; energy ('scf'); ```; to verify that the installation does not crash on startup. So far everything looks fine. I have a comment about the shebang line in the psi4 python script. After the installation it was set to an absolute path:. #!/cluster/apps/python/2.7.12/x86_64/bin/python. On larger clusters, there are usually multiple python versions installed in non-standard locations. Therefore when I install executable python scripts on our cluster, I usually change the shebang line to. #!/usr/bin/env python. This way, it takes the first python interpreter that is found in $PATH. This can be convenient for systems with multiple python versions. On our cluster, we use environment modules to manage different versions of the same software. If I have a python script with the generic shebang line, I can choose the Python interpreter by loading the corresponding module; ```. [sfux@euler04 ~]$ module load python/2.7.6; Autoloading openblas/0.2.13_seq; [sfux@euler04 ~]$ /usr/bin/env python -V; Python 2.7.6; [sfux@eule",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/580#issuecomment-275104849
https://github.com/psi4/psi4/issues/580#issuecomment-275104849:1797,Deployability,install,installation,1797,".so.1 (0x00007f1a72ec0000); libgcc_s.so.1 => /cluster/apps/gcc/5.2.0/lib64/libgcc_s.so.1 (0x00007f1a72caa000); libpthread.so.0 => /lib64/libpthread.so.0 (0x00007f1a72a8c000); libc.so.6 => /lib64/libc.so.6 (0x00007f1a726f8000); libutil.so.1 => /lib64/libutil.so.1 (0x00007f1a724f5000); /lib64/ld-linux-x86-64.so.2 (0x00007f1a78d6a000); libgfortran.so.3 => /cluster/apps/gcc/5.2.0/lib64/libgfortran.so.3 (0x00007f1a721d5000); librt.so.1 => /lib64/librt.so.1 (0x00007f1a71fcd000); libquadmath.so.0 => /cluster/apps/gcc/5.2.0/lib/../lib64/libquadmath.so.0 (0x00007f1a71d8d000); [sfux@develop01 x86_64]$ ; ```. I did a quick test with. ```; #! Sample UHF/6-31G** CH2 computation. memory 250 mb. molecule ch2 {; 0 3; C; H 1 R; H 1 R 2 A. R = 1.075; A = 133.93; }. set basis 6-31G**; set reference uhf; energy ('scf'); ```; to verify that the installation does not crash on startup. So far everything looks fine. I have a comment about the shebang line in the psi4 python script. After the installation it was set to an absolute path:. #!/cluster/apps/python/2.7.12/x86_64/bin/python. On larger clusters, there are usually multiple python versions installed in non-standard locations. Therefore when I install executable python scripts on our cluster, I usually change the shebang line to. #!/usr/bin/env python. This way, it takes the first python interpreter that is found in $PATH. This can be convenient for systems with multiple python versions. On our cluster, we use environment modules to manage different versions of the same software. If I have a python script with the generic shebang line, I can choose the Python interpreter by loading the corresponding module; ```. [sfux@euler04 ~]$ module load python/2.7.6; Autoloading openblas/0.2.13_seq; [sfux@euler04 ~]$ /usr/bin/env python -V; Python 2.7.6; [sfux@euler04 ~]$ module purge; [sfux@euler04 ~]$ module load new python/2.7.9; Autoloading openblas/0.2.13_seq; [sfux@euler04 ~]$ /usr/bin/env python -V; Python 2.7.9; [sfux@euler04 ~]$ module ",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/580#issuecomment-275104849
https://github.com/psi4/psi4/issues/580#issuecomment-275104849:1955,Deployability,install,installed,1955,"=> /lib64/libpthread.so.0 (0x00007f1a72a8c000); libc.so.6 => /lib64/libc.so.6 (0x00007f1a726f8000); libutil.so.1 => /lib64/libutil.so.1 (0x00007f1a724f5000); /lib64/ld-linux-x86-64.so.2 (0x00007f1a78d6a000); libgfortran.so.3 => /cluster/apps/gcc/5.2.0/lib64/libgfortran.so.3 (0x00007f1a721d5000); librt.so.1 => /lib64/librt.so.1 (0x00007f1a71fcd000); libquadmath.so.0 => /cluster/apps/gcc/5.2.0/lib/../lib64/libquadmath.so.0 (0x00007f1a71d8d000); [sfux@develop01 x86_64]$ ; ```. I did a quick test with. ```; #! Sample UHF/6-31G** CH2 computation. memory 250 mb. molecule ch2 {; 0 3; C; H 1 R; H 1 R 2 A. R = 1.075; A = 133.93; }. set basis 6-31G**; set reference uhf; energy ('scf'); ```; to verify that the installation does not crash on startup. So far everything looks fine. I have a comment about the shebang line in the psi4 python script. After the installation it was set to an absolute path:. #!/cluster/apps/python/2.7.12/x86_64/bin/python. On larger clusters, there are usually multiple python versions installed in non-standard locations. Therefore when I install executable python scripts on our cluster, I usually change the shebang line to. #!/usr/bin/env python. This way, it takes the first python interpreter that is found in $PATH. This can be convenient for systems with multiple python versions. On our cluster, we use environment modules to manage different versions of the same software. If I have a python script with the generic shebang line, I can choose the Python interpreter by loading the corresponding module; ```. [sfux@euler04 ~]$ module load python/2.7.6; Autoloading openblas/0.2.13_seq; [sfux@euler04 ~]$ /usr/bin/env python -V; Python 2.7.6; [sfux@euler04 ~]$ module purge; [sfux@euler04 ~]$ module load new python/2.7.9; Autoloading openblas/0.2.13_seq; [sfux@euler04 ~]$ /usr/bin/env python -V; Python 2.7.9; [sfux@euler04 ~]$ module purge; [sfux@euler04 ~]$ module load new python/2.7.12; Autoloading openblas/0.2.13_seq; [sfux@euler04 ~]$ /usr/bin/env python ",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/580#issuecomment-275104849
https://github.com/psi4/psi4/issues/580#issuecomment-275104849:2009,Deployability,install,install,2009,"726f8000); libutil.so.1 => /lib64/libutil.so.1 (0x00007f1a724f5000); /lib64/ld-linux-x86-64.so.2 (0x00007f1a78d6a000); libgfortran.so.3 => /cluster/apps/gcc/5.2.0/lib64/libgfortran.so.3 (0x00007f1a721d5000); librt.so.1 => /lib64/librt.so.1 (0x00007f1a71fcd000); libquadmath.so.0 => /cluster/apps/gcc/5.2.0/lib/../lib64/libquadmath.so.0 (0x00007f1a71d8d000); [sfux@develop01 x86_64]$ ; ```. I did a quick test with. ```; #! Sample UHF/6-31G** CH2 computation. memory 250 mb. molecule ch2 {; 0 3; C; H 1 R; H 1 R 2 A. R = 1.075; A = 133.93; }. set basis 6-31G**; set reference uhf; energy ('scf'); ```; to verify that the installation does not crash on startup. So far everything looks fine. I have a comment about the shebang line in the psi4 python script. After the installation it was set to an absolute path:. #!/cluster/apps/python/2.7.12/x86_64/bin/python. On larger clusters, there are usually multiple python versions installed in non-standard locations. Therefore when I install executable python scripts on our cluster, I usually change the shebang line to. #!/usr/bin/env python. This way, it takes the first python interpreter that is found in $PATH. This can be convenient for systems with multiple python versions. On our cluster, we use environment modules to manage different versions of the same software. If I have a python script with the generic shebang line, I can choose the Python interpreter by loading the corresponding module; ```. [sfux@euler04 ~]$ module load python/2.7.6; Autoloading openblas/0.2.13_seq; [sfux@euler04 ~]$ /usr/bin/env python -V; Python 2.7.6; [sfux@euler04 ~]$ module purge; [sfux@euler04 ~]$ module load new python/2.7.9; Autoloading openblas/0.2.13_seq; [sfux@euler04 ~]$ /usr/bin/env python -V; Python 2.7.9; [sfux@euler04 ~]$ module purge; [sfux@euler04 ~]$ module load new python/2.7.12; Autoloading openblas/0.2.13_seq; [sfux@euler04 ~]$ /usr/bin/env python -V; Python 2.7.12; [sfux@euler04 ~]$; ```. Best regards and thank you again for your help",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/580#issuecomment-275104849
https://github.com/psi4/psi4/issues/580#issuecomment-275104849:1610,Energy Efficiency,energy,energy,1610,"c++.so.6 => /cluster/apps/gcc/5.2.0/lib64/libstdc++.so.6 (0x00007f1a73366000); libm.so.6 => /lib64/libm.so.6 (0x00007f1a730e1000); libgomp.so.1 => /cluster/apps/gcc/5.2.0/lib64/libgomp.so.1 (0x00007f1a72ec0000); libgcc_s.so.1 => /cluster/apps/gcc/5.2.0/lib64/libgcc_s.so.1 (0x00007f1a72caa000); libpthread.so.0 => /lib64/libpthread.so.0 (0x00007f1a72a8c000); libc.so.6 => /lib64/libc.so.6 (0x00007f1a726f8000); libutil.so.1 => /lib64/libutil.so.1 (0x00007f1a724f5000); /lib64/ld-linux-x86-64.so.2 (0x00007f1a78d6a000); libgfortran.so.3 => /cluster/apps/gcc/5.2.0/lib64/libgfortran.so.3 (0x00007f1a721d5000); librt.so.1 => /lib64/librt.so.1 (0x00007f1a71fcd000); libquadmath.so.0 => /cluster/apps/gcc/5.2.0/lib/../lib64/libquadmath.so.0 (0x00007f1a71d8d000); [sfux@develop01 x86_64]$ ; ```. I did a quick test with. ```; #! Sample UHF/6-31G** CH2 computation. memory 250 mb. molecule ch2 {; 0 3; C; H 1 R; H 1 R 2 A. R = 1.075; A = 133.93; }. set basis 6-31G**; set reference uhf; energy ('scf'); ```; to verify that the installation does not crash on startup. So far everything looks fine. I have a comment about the shebang line in the psi4 python script. After the installation it was set to an absolute path:. #!/cluster/apps/python/2.7.12/x86_64/bin/python. On larger clusters, there are usually multiple python versions installed in non-standard locations. Therefore when I install executable python scripts on our cluster, I usually change the shebang line to. #!/usr/bin/env python. This way, it takes the first python interpreter that is found in $PATH. This can be convenient for systems with multiple python versions. On our cluster, we use environment modules to manage different versions of the same software. If I have a python script with the generic shebang line, I can choose the Python interpreter by loading the corresponding module; ```. [sfux@euler04 ~]$ module load python/2.7.6; Autoloading openblas/0.2.13_seq; [sfux@euler04 ~]$ /usr/bin/env python -V; Python 2.7.6; [sfux@eule",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/580#issuecomment-275104849
https://github.com/psi4/psi4/issues/580#issuecomment-275104849:26,Modifiability,variab,variable,26,"I have changed some CMake variable and now the compilation works fine (I think it was related to having CMAKE_OLDINCLUDEDIR set to /usr/include, causing a permission problem in the installation step). Linking with OpenBLAS also seems to have worked fine:. ```; [sfux@develop01 x86_64]$ ldd lib/psi4/core.so ; linux-vdso.so.1 => (0x00007ffc83bea000); libpython2.7.so.1.0 => /cluster/apps/python/2.7.12/x86_64/lib64/libpython2.7.so.1.0 (0x00007f1a75aa0000); libdl.so.2 => /lib64/libdl.so.2 (0x00007f1a7588b000); libopenblas.so.0 => /cluster/apps/openblas/0.2.13_seq/x86_64/gcc_5.2.0/lib/libopenblas.so.0 (0x00007f1a736f5000); libstdc++.so.6 => /cluster/apps/gcc/5.2.0/lib64/libstdc++.so.6 (0x00007f1a73366000); libm.so.6 => /lib64/libm.so.6 (0x00007f1a730e1000); libgomp.so.1 => /cluster/apps/gcc/5.2.0/lib64/libgomp.so.1 (0x00007f1a72ec0000); libgcc_s.so.1 => /cluster/apps/gcc/5.2.0/lib64/libgcc_s.so.1 (0x00007f1a72caa000); libpthread.so.0 => /lib64/libpthread.so.0 (0x00007f1a72a8c000); libc.so.6 => /lib64/libc.so.6 (0x00007f1a726f8000); libutil.so.1 => /lib64/libutil.so.1 (0x00007f1a724f5000); /lib64/ld-linux-x86-64.so.2 (0x00007f1a78d6a000); libgfortran.so.3 => /cluster/apps/gcc/5.2.0/lib64/libgfortran.so.3 (0x00007f1a721d5000); librt.so.1 => /lib64/librt.so.1 (0x00007f1a71fcd000); libquadmath.so.0 => /cluster/apps/gcc/5.2.0/lib/../lib64/libquadmath.so.0 (0x00007f1a71d8d000); [sfux@develop01 x86_64]$ ; ```. I did a quick test with. ```; #! Sample UHF/6-31G** CH2 computation. memory 250 mb. molecule ch2 {; 0 3; C; H 1 R; H 1 R 2 A. R = 1.075; A = 133.93; }. set basis 6-31G**; set reference uhf; energy ('scf'); ```; to verify that the installation does not crash on startup. So far everything looks fine. I have a comment about the shebang line in the psi4 python script. After the installation it was set to an absolute path:. #!/cluster/apps/python/2.7.12/x86_64/bin/python. On larger clusters, there are usually multiple python versions installed in non-standard locations. Therefore",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/580#issuecomment-275104849
https://github.com/psi4/psi4/issues/580#issuecomment-275104849:2448,Performance,load,loading,2448,"726f8000); libutil.so.1 => /lib64/libutil.so.1 (0x00007f1a724f5000); /lib64/ld-linux-x86-64.so.2 (0x00007f1a78d6a000); libgfortran.so.3 => /cluster/apps/gcc/5.2.0/lib64/libgfortran.so.3 (0x00007f1a721d5000); librt.so.1 => /lib64/librt.so.1 (0x00007f1a71fcd000); libquadmath.so.0 => /cluster/apps/gcc/5.2.0/lib/../lib64/libquadmath.so.0 (0x00007f1a71d8d000); [sfux@develop01 x86_64]$ ; ```. I did a quick test with. ```; #! Sample UHF/6-31G** CH2 computation. memory 250 mb. molecule ch2 {; 0 3; C; H 1 R; H 1 R 2 A. R = 1.075; A = 133.93; }. set basis 6-31G**; set reference uhf; energy ('scf'); ```; to verify that the installation does not crash on startup. So far everything looks fine. I have a comment about the shebang line in the psi4 python script. After the installation it was set to an absolute path:. #!/cluster/apps/python/2.7.12/x86_64/bin/python. On larger clusters, there are usually multiple python versions installed in non-standard locations. Therefore when I install executable python scripts on our cluster, I usually change the shebang line to. #!/usr/bin/env python. This way, it takes the first python interpreter that is found in $PATH. This can be convenient for systems with multiple python versions. On our cluster, we use environment modules to manage different versions of the same software. If I have a python script with the generic shebang line, I can choose the Python interpreter by loading the corresponding module; ```. [sfux@euler04 ~]$ module load python/2.7.6; Autoloading openblas/0.2.13_seq; [sfux@euler04 ~]$ /usr/bin/env python -V; Python 2.7.6; [sfux@euler04 ~]$ module purge; [sfux@euler04 ~]$ module load new python/2.7.9; Autoloading openblas/0.2.13_seq; [sfux@euler04 ~]$ /usr/bin/env python -V; Python 2.7.9; [sfux@euler04 ~]$ module purge; [sfux@euler04 ~]$ module load new python/2.7.12; Autoloading openblas/0.2.13_seq; [sfux@euler04 ~]$ /usr/bin/env python -V; Python 2.7.12; [sfux@euler04 ~]$; ```. Best regards and thank you again for your help",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/580#issuecomment-275104849
https://github.com/psi4/psi4/issues/580#issuecomment-275104849:2512,Performance,load,load,2512,"726f8000); libutil.so.1 => /lib64/libutil.so.1 (0x00007f1a724f5000); /lib64/ld-linux-x86-64.so.2 (0x00007f1a78d6a000); libgfortran.so.3 => /cluster/apps/gcc/5.2.0/lib64/libgfortran.so.3 (0x00007f1a721d5000); librt.so.1 => /lib64/librt.so.1 (0x00007f1a71fcd000); libquadmath.so.0 => /cluster/apps/gcc/5.2.0/lib/../lib64/libquadmath.so.0 (0x00007f1a71d8d000); [sfux@develop01 x86_64]$ ; ```. I did a quick test with. ```; #! Sample UHF/6-31G** CH2 computation. memory 250 mb. molecule ch2 {; 0 3; C; H 1 R; H 1 R 2 A. R = 1.075; A = 133.93; }. set basis 6-31G**; set reference uhf; energy ('scf'); ```; to verify that the installation does not crash on startup. So far everything looks fine. I have a comment about the shebang line in the psi4 python script. After the installation it was set to an absolute path:. #!/cluster/apps/python/2.7.12/x86_64/bin/python. On larger clusters, there are usually multiple python versions installed in non-standard locations. Therefore when I install executable python scripts on our cluster, I usually change the shebang line to. #!/usr/bin/env python. This way, it takes the first python interpreter that is found in $PATH. This can be convenient for systems with multiple python versions. On our cluster, we use environment modules to manage different versions of the same software. If I have a python script with the generic shebang line, I can choose the Python interpreter by loading the corresponding module; ```. [sfux@euler04 ~]$ module load python/2.7.6; Autoloading openblas/0.2.13_seq; [sfux@euler04 ~]$ /usr/bin/env python -V; Python 2.7.6; [sfux@euler04 ~]$ module purge; [sfux@euler04 ~]$ module load new python/2.7.9; Autoloading openblas/0.2.13_seq; [sfux@euler04 ~]$ /usr/bin/env python -V; Python 2.7.9; [sfux@euler04 ~]$ module purge; [sfux@euler04 ~]$ module load new python/2.7.12; Autoloading openblas/0.2.13_seq; [sfux@euler04 ~]$ /usr/bin/env python -V; Python 2.7.12; [sfux@euler04 ~]$; ```. Best regards and thank you again for your help",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/580#issuecomment-275104849
https://github.com/psi4/psi4/issues/580#issuecomment-275104849:2677,Performance,load,load,2677,"726f8000); libutil.so.1 => /lib64/libutil.so.1 (0x00007f1a724f5000); /lib64/ld-linux-x86-64.so.2 (0x00007f1a78d6a000); libgfortran.so.3 => /cluster/apps/gcc/5.2.0/lib64/libgfortran.so.3 (0x00007f1a721d5000); librt.so.1 => /lib64/librt.so.1 (0x00007f1a71fcd000); libquadmath.so.0 => /cluster/apps/gcc/5.2.0/lib/../lib64/libquadmath.so.0 (0x00007f1a71d8d000); [sfux@develop01 x86_64]$ ; ```. I did a quick test with. ```; #! Sample UHF/6-31G** CH2 computation. memory 250 mb. molecule ch2 {; 0 3; C; H 1 R; H 1 R 2 A. R = 1.075; A = 133.93; }. set basis 6-31G**; set reference uhf; energy ('scf'); ```; to verify that the installation does not crash on startup. So far everything looks fine. I have a comment about the shebang line in the psi4 python script. After the installation it was set to an absolute path:. #!/cluster/apps/python/2.7.12/x86_64/bin/python. On larger clusters, there are usually multiple python versions installed in non-standard locations. Therefore when I install executable python scripts on our cluster, I usually change the shebang line to. #!/usr/bin/env python. This way, it takes the first python interpreter that is found in $PATH. This can be convenient for systems with multiple python versions. On our cluster, we use environment modules to manage different versions of the same software. If I have a python script with the generic shebang line, I can choose the Python interpreter by loading the corresponding module; ```. [sfux@euler04 ~]$ module load python/2.7.6; Autoloading openblas/0.2.13_seq; [sfux@euler04 ~]$ /usr/bin/env python -V; Python 2.7.6; [sfux@euler04 ~]$ module purge; [sfux@euler04 ~]$ module load new python/2.7.9; Autoloading openblas/0.2.13_seq; [sfux@euler04 ~]$ /usr/bin/env python -V; Python 2.7.9; [sfux@euler04 ~]$ module purge; [sfux@euler04 ~]$ module load new python/2.7.12; Autoloading openblas/0.2.13_seq; [sfux@euler04 ~]$ /usr/bin/env python -V; Python 2.7.12; [sfux@euler04 ~]$; ```. Best regards and thank you again for your help",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/580#issuecomment-275104849
https://github.com/psi4/psi4/issues/580#issuecomment-275104849:2846,Performance,load,load,2846,"726f8000); libutil.so.1 => /lib64/libutil.so.1 (0x00007f1a724f5000); /lib64/ld-linux-x86-64.so.2 (0x00007f1a78d6a000); libgfortran.so.3 => /cluster/apps/gcc/5.2.0/lib64/libgfortran.so.3 (0x00007f1a721d5000); librt.so.1 => /lib64/librt.so.1 (0x00007f1a71fcd000); libquadmath.so.0 => /cluster/apps/gcc/5.2.0/lib/../lib64/libquadmath.so.0 (0x00007f1a71d8d000); [sfux@develop01 x86_64]$ ; ```. I did a quick test with. ```; #! Sample UHF/6-31G** CH2 computation. memory 250 mb. molecule ch2 {; 0 3; C; H 1 R; H 1 R 2 A. R = 1.075; A = 133.93; }. set basis 6-31G**; set reference uhf; energy ('scf'); ```; to verify that the installation does not crash on startup. So far everything looks fine. I have a comment about the shebang line in the psi4 python script. After the installation it was set to an absolute path:. #!/cluster/apps/python/2.7.12/x86_64/bin/python. On larger clusters, there are usually multiple python versions installed in non-standard locations. Therefore when I install executable python scripts on our cluster, I usually change the shebang line to. #!/usr/bin/env python. This way, it takes the first python interpreter that is found in $PATH. This can be convenient for systems with multiple python versions. On our cluster, we use environment modules to manage different versions of the same software. If I have a python script with the generic shebang line, I can choose the Python interpreter by loading the corresponding module; ```. [sfux@euler04 ~]$ module load python/2.7.6; Autoloading openblas/0.2.13_seq; [sfux@euler04 ~]$ /usr/bin/env python -V; Python 2.7.6; [sfux@euler04 ~]$ module purge; [sfux@euler04 ~]$ module load new python/2.7.9; Autoloading openblas/0.2.13_seq; [sfux@euler04 ~]$ /usr/bin/env python -V; Python 2.7.9; [sfux@euler04 ~]$ module purge; [sfux@euler04 ~]$ module load new python/2.7.12; Autoloading openblas/0.2.13_seq; [sfux@euler04 ~]$ /usr/bin/env python -V; Python 2.7.12; [sfux@euler04 ~]$; ```. Best regards and thank you again for your help",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/580#issuecomment-275104849
https://github.com/psi4/psi4/issues/580#issuecomment-275104849:1434,Testability,test,test,1434,".0 (0x00007f1a75aa0000); libdl.so.2 => /lib64/libdl.so.2 (0x00007f1a7588b000); libopenblas.so.0 => /cluster/apps/openblas/0.2.13_seq/x86_64/gcc_5.2.0/lib/libopenblas.so.0 (0x00007f1a736f5000); libstdc++.so.6 => /cluster/apps/gcc/5.2.0/lib64/libstdc++.so.6 (0x00007f1a73366000); libm.so.6 => /lib64/libm.so.6 (0x00007f1a730e1000); libgomp.so.1 => /cluster/apps/gcc/5.2.0/lib64/libgomp.so.1 (0x00007f1a72ec0000); libgcc_s.so.1 => /cluster/apps/gcc/5.2.0/lib64/libgcc_s.so.1 (0x00007f1a72caa000); libpthread.so.0 => /lib64/libpthread.so.0 (0x00007f1a72a8c000); libc.so.6 => /lib64/libc.so.6 (0x00007f1a726f8000); libutil.so.1 => /lib64/libutil.so.1 (0x00007f1a724f5000); /lib64/ld-linux-x86-64.so.2 (0x00007f1a78d6a000); libgfortran.so.3 => /cluster/apps/gcc/5.2.0/lib64/libgfortran.so.3 (0x00007f1a721d5000); librt.so.1 => /lib64/librt.so.1 (0x00007f1a71fcd000); libquadmath.so.0 => /cluster/apps/gcc/5.2.0/lib/../lib64/libquadmath.so.0 (0x00007f1a71d8d000); [sfux@develop01 x86_64]$ ; ```. I did a quick test with. ```; #! Sample UHF/6-31G** CH2 computation. memory 250 mb. molecule ch2 {; 0 3; C; H 1 R; H 1 R 2 A. R = 1.075; A = 133.93; }. set basis 6-31G**; set reference uhf; energy ('scf'); ```; to verify that the installation does not crash on startup. So far everything looks fine. I have a comment about the shebang line in the psi4 python script. After the installation it was set to an absolute path:. #!/cluster/apps/python/2.7.12/x86_64/bin/python. On larger clusters, there are usually multiple python versions installed in non-standard locations. Therefore when I install executable python scripts on our cluster, I usually change the shebang line to. #!/usr/bin/env python. This way, it takes the first python interpreter that is found in $PATH. This can be convenient for systems with multiple python versions. On our cluster, we use environment modules to manage different versions of the same software. If I have a python script with the generic shebang line, I can choose the Python",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/580#issuecomment-275104849
https://github.com/psi4/psi4/issues/580#issuecomment-275136191:49,Deployability,patch,patch,49,"Great, glad it's working. I'll get your OpenBLAS patch added in, and it'll make its way back upstream to autocmake one day. Your `ldd` looks good. Only thing strikes me as odd is `libpython.so`. We stopped actually linking to this and now only require the interpreter, not the library. But maybe you're compiling 1.1a1 and the change happened afterward. In any case, when you update someday, don't be alarmed if that goes away. On the `#!/cluster/apps/python/2.7.12/x86_64/bin/python`, we go back and forth on whether to embed the specific compile-time version or a more generic `/usr/bin/env python2` or `usr/bin/env python3`. Advantages of the former: (a) user can be oblivious to what or if python in path at all, (b) conda does it this way. Advantages of the latter: (a) it's what Linux users expect to be happening, (b) avoids trouble of psi4 still using compile environment if you have separate compile and run-time environments. We've stuck with the former since it's friendlier to the inexperienced. Go right ahead and edit that line to a `/usr/bin/env` if it's more suited to your cluster, but I do recommend doing `python2` since the python2/3 headers are used during the build. By the way, on testing, there's `share/psi4/samples/*/test.in` files that'll print `SUCCESS`/`FAILED` to the screen and are handy for testing (or run `ctest -L quick -j4`)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/580#issuecomment-275136191
https://github.com/psi4/psi4/issues/580#issuecomment-275136191:376,Deployability,update,update,376,"Great, glad it's working. I'll get your OpenBLAS patch added in, and it'll make its way back upstream to autocmake one day. Your `ldd` looks good. Only thing strikes me as odd is `libpython.so`. We stopped actually linking to this and now only require the interpreter, not the library. But maybe you're compiling 1.1a1 and the change happened afterward. In any case, when you update someday, don't be alarmed if that goes away. On the `#!/cluster/apps/python/2.7.12/x86_64/bin/python`, we go back and forth on whether to embed the specific compile-time version or a more generic `/usr/bin/env python2` or `usr/bin/env python3`. Advantages of the former: (a) user can be oblivious to what or if python in path at all, (b) conda does it this way. Advantages of the latter: (a) it's what Linux users expect to be happening, (b) avoids trouble of psi4 still using compile environment if you have separate compile and run-time environments. We've stuck with the former since it's friendlier to the inexperienced. Go right ahead and edit that line to a `/usr/bin/env` if it's more suited to your cluster, but I do recommend doing `python2` since the python2/3 headers are used during the build. By the way, on testing, there's `share/psi4/samples/*/test.in` files that'll print `SUCCESS`/`FAILED` to the screen and are handy for testing (or run `ctest -L quick -j4`)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/580#issuecomment-275136191
https://github.com/psi4/psi4/issues/580#issuecomment-275136191:825,Safety,avoid,avoids,825,"Great, glad it's working. I'll get your OpenBLAS patch added in, and it'll make its way back upstream to autocmake one day. Your `ldd` looks good. Only thing strikes me as odd is `libpython.so`. We stopped actually linking to this and now only require the interpreter, not the library. But maybe you're compiling 1.1a1 and the change happened afterward. In any case, when you update someday, don't be alarmed if that goes away. On the `#!/cluster/apps/python/2.7.12/x86_64/bin/python`, we go back and forth on whether to embed the specific compile-time version or a more generic `/usr/bin/env python2` or `usr/bin/env python3`. Advantages of the former: (a) user can be oblivious to what or if python in path at all, (b) conda does it this way. Advantages of the latter: (a) it's what Linux users expect to be happening, (b) avoids trouble of psi4 still using compile environment if you have separate compile and run-time environments. We've stuck with the former since it's friendlier to the inexperienced. Go right ahead and edit that line to a `/usr/bin/env` if it's more suited to your cluster, but I do recommend doing `python2` since the python2/3 headers are used during the build. By the way, on testing, there's `share/psi4/samples/*/test.in` files that'll print `SUCCESS`/`FAILED` to the screen and are handy for testing (or run `ctest -L quick -j4`)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/580#issuecomment-275136191
https://github.com/psi4/psi4/issues/580#issuecomment-275136191:1204,Testability,test,testing,1204,"Great, glad it's working. I'll get your OpenBLAS patch added in, and it'll make its way back upstream to autocmake one day. Your `ldd` looks good. Only thing strikes me as odd is `libpython.so`. We stopped actually linking to this and now only require the interpreter, not the library. But maybe you're compiling 1.1a1 and the change happened afterward. In any case, when you update someday, don't be alarmed if that goes away. On the `#!/cluster/apps/python/2.7.12/x86_64/bin/python`, we go back and forth on whether to embed the specific compile-time version or a more generic `/usr/bin/env python2` or `usr/bin/env python3`. Advantages of the former: (a) user can be oblivious to what or if python in path at all, (b) conda does it this way. Advantages of the latter: (a) it's what Linux users expect to be happening, (b) avoids trouble of psi4 still using compile environment if you have separate compile and run-time environments. We've stuck with the former since it's friendlier to the inexperienced. Go right ahead and edit that line to a `/usr/bin/env` if it's more suited to your cluster, but I do recommend doing `python2` since the python2/3 headers are used during the build. By the way, on testing, there's `share/psi4/samples/*/test.in` files that'll print `SUCCESS`/`FAILED` to the screen and are handy for testing (or run `ctest -L quick -j4`)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/580#issuecomment-275136191
https://github.com/psi4/psi4/issues/580#issuecomment-275136191:1243,Testability,test,test,1243,"Great, glad it's working. I'll get your OpenBLAS patch added in, and it'll make its way back upstream to autocmake one day. Your `ldd` looks good. Only thing strikes me as odd is `libpython.so`. We stopped actually linking to this and now only require the interpreter, not the library. But maybe you're compiling 1.1a1 and the change happened afterward. In any case, when you update someday, don't be alarmed if that goes away. On the `#!/cluster/apps/python/2.7.12/x86_64/bin/python`, we go back and forth on whether to embed the specific compile-time version or a more generic `/usr/bin/env python2` or `usr/bin/env python3`. Advantages of the former: (a) user can be oblivious to what or if python in path at all, (b) conda does it this way. Advantages of the latter: (a) it's what Linux users expect to be happening, (b) avoids trouble of psi4 still using compile environment if you have separate compile and run-time environments. We've stuck with the former since it's friendlier to the inexperienced. Go right ahead and edit that line to a `/usr/bin/env` if it's more suited to your cluster, but I do recommend doing `python2` since the python2/3 headers are used during the build. By the way, on testing, there's `share/psi4/samples/*/test.in` files that'll print `SUCCESS`/`FAILED` to the screen and are handy for testing (or run `ctest -L quick -j4`)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/580#issuecomment-275136191
https://github.com/psi4/psi4/issues/580#issuecomment-275136191:1323,Testability,test,testing,1323,"Great, glad it's working. I'll get your OpenBLAS patch added in, and it'll make its way back upstream to autocmake one day. Your `ldd` looks good. Only thing strikes me as odd is `libpython.so`. We stopped actually linking to this and now only require the interpreter, not the library. But maybe you're compiling 1.1a1 and the change happened afterward. In any case, when you update someday, don't be alarmed if that goes away. On the `#!/cluster/apps/python/2.7.12/x86_64/bin/python`, we go back and forth on whether to embed the specific compile-time version or a more generic `/usr/bin/env python2` or `usr/bin/env python3`. Advantages of the former: (a) user can be oblivious to what or if python in path at all, (b) conda does it this way. Advantages of the latter: (a) it's what Linux users expect to be happening, (b) avoids trouble of psi4 still using compile environment if you have separate compile and run-time environments. We've stuck with the former since it's friendlier to the inexperienced. Go right ahead and edit that line to a `/usr/bin/env` if it's more suited to your cluster, but I do recommend doing `python2` since the python2/3 headers are used during the build. By the way, on testing, there's `share/psi4/samples/*/test.in` files that'll print `SUCCESS`/`FAILED` to the screen and are handy for testing (or run `ctest -L quick -j4`)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/580#issuecomment-275136191
https://github.com/psi4/psi4/issues/580#issuecomment-275138618:185,Availability,avail,available,185,"I think that I know where the linking against the Python library comes from. Usually when using CMake to build software, I am using the ccmake GUI and use the toggle option to show all available variables (as I usually also add compiler flags etc.). I noticed that cmake detected the correct Python interpreter (2.7.12), but it also had a variable for the Python library, which was pointing to /usr/lib64/libpython2.6.so (system Python that was installed with the operating system). In order to avoid mixing between different Python versions, I have set the CMake variable to the 2.7.12 version of the library. Maybe CMake picked it up this way and added it to the libraries that are linked. Thank you for pointing me to the tests in the samples directory. Best regards",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/580#issuecomment-275138618
https://github.com/psi4/psi4/issues/580#issuecomment-275138618:159,Deployability,toggle,toggle,159,"I think that I know where the linking against the Python library comes from. Usually when using CMake to build software, I am using the ccmake GUI and use the toggle option to show all available variables (as I usually also add compiler flags etc.). I noticed that cmake detected the correct Python interpreter (2.7.12), but it also had a variable for the Python library, which was pointing to /usr/lib64/libpython2.6.so (system Python that was installed with the operating system). In order to avoid mixing between different Python versions, I have set the CMake variable to the 2.7.12 version of the library. Maybe CMake picked it up this way and added it to the libraries that are linked. Thank you for pointing me to the tests in the samples directory. Best regards",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/580#issuecomment-275138618
https://github.com/psi4/psi4/issues/580#issuecomment-275138618:445,Deployability,install,installed,445,"I think that I know where the linking against the Python library comes from. Usually when using CMake to build software, I am using the ccmake GUI and use the toggle option to show all available variables (as I usually also add compiler flags etc.). I noticed that cmake detected the correct Python interpreter (2.7.12), but it also had a variable for the Python library, which was pointing to /usr/lib64/libpython2.6.so (system Python that was installed with the operating system). In order to avoid mixing between different Python versions, I have set the CMake variable to the 2.7.12 version of the library. Maybe CMake picked it up this way and added it to the libraries that are linked. Thank you for pointing me to the tests in the samples directory. Best regards",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/580#issuecomment-275138618
https://github.com/psi4/psi4/issues/580#issuecomment-275138618:195,Modifiability,variab,variables,195,"I think that I know where the linking against the Python library comes from. Usually when using CMake to build software, I am using the ccmake GUI and use the toggle option to show all available variables (as I usually also add compiler flags etc.). I noticed that cmake detected the correct Python interpreter (2.7.12), but it also had a variable for the Python library, which was pointing to /usr/lib64/libpython2.6.so (system Python that was installed with the operating system). In order to avoid mixing between different Python versions, I have set the CMake variable to the 2.7.12 version of the library. Maybe CMake picked it up this way and added it to the libraries that are linked. Thank you for pointing me to the tests in the samples directory. Best regards",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/580#issuecomment-275138618
https://github.com/psi4/psi4/issues/580#issuecomment-275138618:339,Modifiability,variab,variable,339,"I think that I know where the linking against the Python library comes from. Usually when using CMake to build software, I am using the ccmake GUI and use the toggle option to show all available variables (as I usually also add compiler flags etc.). I noticed that cmake detected the correct Python interpreter (2.7.12), but it also had a variable for the Python library, which was pointing to /usr/lib64/libpython2.6.so (system Python that was installed with the operating system). In order to avoid mixing between different Python versions, I have set the CMake variable to the 2.7.12 version of the library. Maybe CMake picked it up this way and added it to the libraries that are linked. Thank you for pointing me to the tests in the samples directory. Best regards",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/580#issuecomment-275138618
https://github.com/psi4/psi4/issues/580#issuecomment-275138618:564,Modifiability,variab,variable,564,"I think that I know where the linking against the Python library comes from. Usually when using CMake to build software, I am using the ccmake GUI and use the toggle option to show all available variables (as I usually also add compiler flags etc.). I noticed that cmake detected the correct Python interpreter (2.7.12), but it also had a variable for the Python library, which was pointing to /usr/lib64/libpython2.6.so (system Python that was installed with the operating system). In order to avoid mixing between different Python versions, I have set the CMake variable to the 2.7.12 version of the library. Maybe CMake picked it up this way and added it to the libraries that are linked. Thank you for pointing me to the tests in the samples directory. Best regards",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/580#issuecomment-275138618
https://github.com/psi4/psi4/issues/580#issuecomment-275138618:271,Safety,detect,detected,271,"I think that I know where the linking against the Python library comes from. Usually when using CMake to build software, I am using the ccmake GUI and use the toggle option to show all available variables (as I usually also add compiler flags etc.). I noticed that cmake detected the correct Python interpreter (2.7.12), but it also had a variable for the Python library, which was pointing to /usr/lib64/libpython2.6.so (system Python that was installed with the operating system). In order to avoid mixing between different Python versions, I have set the CMake variable to the 2.7.12 version of the library. Maybe CMake picked it up this way and added it to the libraries that are linked. Thank you for pointing me to the tests in the samples directory. Best regards",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/580#issuecomment-275138618
https://github.com/psi4/psi4/issues/580#issuecomment-275138618:495,Safety,avoid,avoid,495,"I think that I know where the linking against the Python library comes from. Usually when using CMake to build software, I am using the ccmake GUI and use the toggle option to show all available variables (as I usually also add compiler flags etc.). I noticed that cmake detected the correct Python interpreter (2.7.12), but it also had a variable for the Python library, which was pointing to /usr/lib64/libpython2.6.so (system Python that was installed with the operating system). In order to avoid mixing between different Python versions, I have set the CMake variable to the 2.7.12 version of the library. Maybe CMake picked it up this way and added it to the libraries that are linked. Thank you for pointing me to the tests in the samples directory. Best regards",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/580#issuecomment-275138618
https://github.com/psi4/psi4/issues/580#issuecomment-275138618:725,Testability,test,tests,725,"I think that I know where the linking against the Python library comes from. Usually when using CMake to build software, I am using the ccmake GUI and use the toggle option to show all available variables (as I usually also add compiler flags etc.). I noticed that cmake detected the correct Python interpreter (2.7.12), but it also had a variable for the Python library, which was pointing to /usr/lib64/libpython2.6.so (system Python that was installed with the operating system). In order to avoid mixing between different Python versions, I have set the CMake variable to the 2.7.12 version of the library. Maybe CMake picked it up this way and added it to the libraries that are linked. Thank you for pointing me to the tests in the samples directory. Best regards",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/580#issuecomment-275138618
https://github.com/psi4/psi4/issues/580#issuecomment-275141079:44,Modifiability,variab,variable,44,Good move fixing the `PYTHON_LIBRARY` CMake variable; mixed detection of Python interpreter/library/headers is definitely a scourge of Psi4 compilation. But I set that variable all the time and don't get an actual link to `libpython`. So I think it is just the version you're building is before we stopped linking explicitly.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/580#issuecomment-275141079
https://github.com/psi4/psi4/issues/580#issuecomment-275141079:168,Modifiability,variab,variable,168,Good move fixing the `PYTHON_LIBRARY` CMake variable; mixed detection of Python interpreter/library/headers is definitely a scourge of Psi4 compilation. But I set that variable all the time and don't get an actual link to `libpython`. So I think it is just the version you're building is before we stopped linking explicitly.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/580#issuecomment-275141079
https://github.com/psi4/psi4/issues/580#issuecomment-275141079:60,Safety,detect,detection,60,Good move fixing the `PYTHON_LIBRARY` CMake variable; mixed detection of Python interpreter/library/headers is definitely a scourge of Psi4 compilation. But I set that variable all the time and don't get an actual link to `libpython`. So I think it is just the version you're building is before we stopped linking explicitly.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/580#issuecomment-275141079
https://github.com/psi4/psi4/issues/581#issuecomment-273805880:202,Modifiability,rewrite,rewrite,202,"Yes, see [comment](https://github.com/psi4/psi4/issues/580#issuecomment-273803591). If you absolutely must build 1.0, I can see about getting you access to a proper codebase. But because of the history rewrite, building 1.0 from main repo is impossible. Because of all the other changes, you don't even want 1.0 because you can't move forward from it.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/581#issuecomment-273805880
https://github.com/psi4/psi4/issues/581#issuecomment-273805880:146,Security,access,access,146,"Yes, see [comment](https://github.com/psi4/psi4/issues/580#issuecomment-273803591). If you absolutely must build 1.0, I can see about getting you access to a proper codebase. But because of the history rewrite, building 1.0 from main repo is impossible. Because of all the other changes, you don't even want 1.0 because you can't move forward from it.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/581#issuecomment-273805880
https://github.com/psi4/psi4/pull/584#issuecomment-275674287:65,Availability,error,error,65,Is the second block missing occupation numbers or is that a copy error?,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/584#issuecomment-275674287
https://github.com/psi4/psi4/pull/584#issuecomment-275691833:28,Availability,error,error,28,@dgasmith That is a copying error. Thanks for catching that. It is fixed now.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/584#issuecomment-275691833
https://github.com/psi4/psi4/pull/585#issuecomment-286612538:28,Integrability,message,message,28,Please take a look at [this message](https://github.com/psi4/psi4/pull/644#issuecomment-286609790). I think you've got the same problem.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/585#issuecomment-286612538
https://github.com/psi4/psi4/pull/585#issuecomment-286619723:60,Safety,avoid,avoid,60,"@loriab Shoot, nooooo. This is exactly what I was trying to avoid. After I'm done recompiling, I'll try your fix on #644.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/585#issuecomment-286619723
https://github.com/psi4/psi4/issues/586#issuecomment-275673604:176,Energy Efficiency,charge,charge,176,"Hi Susi, I made a new PR to fix the underlying SAD issue. However, READ casting between symmetries will need to wait for Psi4 1.2 as its fixed there. Changing the multiplicity/charge is trickier as its not clear the priority order for occupations (read/guess/eigenvalue ordering). Please note that [this](https://github.com/psi4/psi4/issues/483) ticket attempts to address these issues.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/586#issuecomment-275673604
https://github.com/psi4/psi4/issues/586#issuecomment-275673604:206,Usability,clear,clear,206,"Hi Susi, I made a new PR to fix the underlying SAD issue. However, READ casting between symmetries will need to wait for Psi4 1.2 as its fixed there. Changing the multiplicity/charge is trickier as its not clear the priority order for occupations (read/guess/eigenvalue ordering). Please note that [this](https://github.com/psi4/psi4/issues/483) ticket attempts to address these issues.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/586#issuecomment-275673604
https://github.com/psi4/psi4/pull/587#issuecomment-275543488:173,Availability,error,error,173,"Was gdma1 one of the tests you expected to fail with erd, Ben? I just saw an oddity with it myself where it runs fine explicitly but through ctest issues a string truncated error and gives up (but does not fail).",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/587#issuecomment-275543488
https://github.com/psi4/psi4/pull/587#issuecomment-275543488:21,Testability,test,tests,21,"Was gdma1 one of the tests you expected to fail with erd, Ben? I just saw an oddity with it myself where it runs fine explicitly but through ctest issues a string truncated error and gives up (but does not fail).",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/587#issuecomment-275543488
https://github.com/psi4/psi4/pull/587#issuecomment-275581979:10,Testability,test,tested,10,"I haven't tested with gdma. You mean you see this behavior with this PR?. I wouldn't ""expect"" any of the tests to fail (erd should more or less be a drop-in replacement for libint). But, at least for me, but many tests still fail.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/587#issuecomment-275581979
https://github.com/psi4/psi4/pull/587#issuecomment-275581979:105,Testability,test,tests,105,"I haven't tested with gdma. You mean you see this behavior with this PR?. I wouldn't ""expect"" any of the tests to fail (erd should more or less be a drop-in replacement for libint). But, at least for me, but many tests still fail.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/587#issuecomment-275581979
https://github.com/psi4/psi4/pull/587#issuecomment-275581979:213,Testability,test,tests,213,"I haven't tested with gdma. You mean you see this behavior with this PR?. I wouldn't ""expect"" any of the tests to fail (erd should more or less be a drop-in replacement for libint). But, at least for me, but many tests still fail.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/587#issuecomment-275581979
https://github.com/psi4/psi4/pull/587#issuecomment-275582318:73,Availability,fault,fault,73,"gdma1 is the test that's failing on Travis. (For once, timeout is not at fault.)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/587#issuecomment-275582318
https://github.com/psi4/psi4/pull/587#issuecomment-275582318:55,Safety,timeout,timeout,55,"gdma1 is the test that's failing on Travis. (For once, timeout is not at fault.)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/587#issuecomment-275582318
https://github.com/psi4/psi4/pull/587#issuecomment-275582318:13,Testability,test,test,13,"gdma1 is the test that's failing on Travis. (For once, timeout is not at fault.)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/587#issuecomment-275582318
https://github.com/psi4/psi4/pull/587#issuecomment-275585286:49,Testability,test,tests,49,I just pushed some changes that make most of the tests pass for me (at least the ones that have run so far). I will run a more complete set and let you know how it goes,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/587#issuecomment-275585286
https://github.com/psi4/psi4/pull/587#issuecomment-275696746:708,Energy Efficiency,energy,energy-large,708,"These tests are still failing with erd. Maybe I wasn't too clear before, but these are what fail when I set integral_package to erd in my psi4rc file. . 12 - cbs-xtpl-freq (Failed); 114 - dfccd-grad1 (Failed); 117 - dfccsd-grad1 (Failed); 122 - dfmp2-3 (Failed); 124 - dfmp2-grad1 (Failed); 125 - dfmp2-grad2 (Failed); 126 - dfmp2-grad3 (Failed); 127 - dfmp2-grad4 (Failed); 132 - dfomp2-grad1 (Failed); 133 - dfomp2-grad2 (Failed); 136 - dfomp3-grad1 (Failed); 137 - dfomp3-grad2 (Failed); 140 - dfomp2p5-grad1 (Failed); 141 - dfomp2p5-grad2 (Failed); 146 - dft-freq (Failed); 147 - dft-grad (Failed); 151 - dft1 (Failed); 152 - dft1-alt (Failed); 154 - dft3 (Failed); 157 - extern1 (Failed); 165 - fd-freq-energy-large (Failed); 168 - fd-gradient (Failed); 188 - mints9 (Failed); 196 - mp2-module (Failed); 229 - opt-lindep-change (Failed); 237 - opt6 (Failed); 238 - opt7 (Failed); 239 - opt8 (Failed); 240 - opt9 (Failed); 241 - opt11 (Failed); 242 - opt12 (Failed); 243 - opt13 (Timeout); 245 - opt-irc-1 (Failed); 246 - opt-irc-2 (Failed); 247 - opt_freeze_coords (Failed); 261 - pubchem1 (Failed); 268 - pywrap-checkrun-rhf (Failed); 269 - pywrap-checkrun-rohf (Failed); 270 - pywrap-checkrun-uhf (Failed); 272 - pywrap-db2 (Failed); 309 - tu3-h2o-opt (Failed); 310 - tu4-h2o-freq (Failed); 322 - cubeprop-esp (Failed)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/587#issuecomment-275696746
https://github.com/psi4/psi4/pull/587#issuecomment-275696746:984,Safety,Timeout,Timeout,984,"These tests are still failing with erd. Maybe I wasn't too clear before, but these are what fail when I set integral_package to erd in my psi4rc file. . 12 - cbs-xtpl-freq (Failed); 114 - dfccd-grad1 (Failed); 117 - dfccsd-grad1 (Failed); 122 - dfmp2-3 (Failed); 124 - dfmp2-grad1 (Failed); 125 - dfmp2-grad2 (Failed); 126 - dfmp2-grad3 (Failed); 127 - dfmp2-grad4 (Failed); 132 - dfomp2-grad1 (Failed); 133 - dfomp2-grad2 (Failed); 136 - dfomp3-grad1 (Failed); 137 - dfomp3-grad2 (Failed); 140 - dfomp2p5-grad1 (Failed); 141 - dfomp2p5-grad2 (Failed); 146 - dft-freq (Failed); 147 - dft-grad (Failed); 151 - dft1 (Failed); 152 - dft1-alt (Failed); 154 - dft3 (Failed); 157 - extern1 (Failed); 165 - fd-freq-energy-large (Failed); 168 - fd-gradient (Failed); 188 - mints9 (Failed); 196 - mp2-module (Failed); 229 - opt-lindep-change (Failed); 237 - opt6 (Failed); 238 - opt7 (Failed); 239 - opt8 (Failed); 240 - opt9 (Failed); 241 - opt11 (Failed); 242 - opt12 (Failed); 243 - opt13 (Timeout); 245 - opt-irc-1 (Failed); 246 - opt-irc-2 (Failed); 247 - opt_freeze_coords (Failed); 261 - pubchem1 (Failed); 268 - pywrap-checkrun-rhf (Failed); 269 - pywrap-checkrun-rohf (Failed); 270 - pywrap-checkrun-uhf (Failed); 272 - pywrap-db2 (Failed); 309 - tu3-h2o-opt (Failed); 310 - tu4-h2o-freq (Failed); 322 - cubeprop-esp (Failed)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/587#issuecomment-275696746
https://github.com/psi4/psi4/pull/587#issuecomment-275696746:6,Testability,test,tests,6,"These tests are still failing with erd. Maybe I wasn't too clear before, but these are what fail when I set integral_package to erd in my psi4rc file. . 12 - cbs-xtpl-freq (Failed); 114 - dfccd-grad1 (Failed); 117 - dfccsd-grad1 (Failed); 122 - dfmp2-3 (Failed); 124 - dfmp2-grad1 (Failed); 125 - dfmp2-grad2 (Failed); 126 - dfmp2-grad3 (Failed); 127 - dfmp2-grad4 (Failed); 132 - dfomp2-grad1 (Failed); 133 - dfomp2-grad2 (Failed); 136 - dfomp3-grad1 (Failed); 137 - dfomp3-grad2 (Failed); 140 - dfomp2p5-grad1 (Failed); 141 - dfomp2p5-grad2 (Failed); 146 - dft-freq (Failed); 147 - dft-grad (Failed); 151 - dft1 (Failed); 152 - dft1-alt (Failed); 154 - dft3 (Failed); 157 - extern1 (Failed); 165 - fd-freq-energy-large (Failed); 168 - fd-gradient (Failed); 188 - mints9 (Failed); 196 - mp2-module (Failed); 229 - opt-lindep-change (Failed); 237 - opt6 (Failed); 238 - opt7 (Failed); 239 - opt8 (Failed); 240 - opt9 (Failed); 241 - opt11 (Failed); 242 - opt12 (Failed); 243 - opt13 (Timeout); 245 - opt-irc-1 (Failed); 246 - opt-irc-2 (Failed); 247 - opt_freeze_coords (Failed); 261 - pubchem1 (Failed); 268 - pywrap-checkrun-rhf (Failed); 269 - pywrap-checkrun-rohf (Failed); 270 - pywrap-checkrun-uhf (Failed); 272 - pywrap-db2 (Failed); 309 - tu3-h2o-opt (Failed); 310 - tu4-h2o-freq (Failed); 322 - cubeprop-esp (Failed)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/587#issuecomment-275696746
https://github.com/psi4/psi4/pull/587#issuecomment-275696746:59,Usability,clear,clear,59,"These tests are still failing with erd. Maybe I wasn't too clear before, but these are what fail when I set integral_package to erd in my psi4rc file. . 12 - cbs-xtpl-freq (Failed); 114 - dfccd-grad1 (Failed); 117 - dfccsd-grad1 (Failed); 122 - dfmp2-3 (Failed); 124 - dfmp2-grad1 (Failed); 125 - dfmp2-grad2 (Failed); 126 - dfmp2-grad3 (Failed); 127 - dfmp2-grad4 (Failed); 132 - dfomp2-grad1 (Failed); 133 - dfomp2-grad2 (Failed); 136 - dfomp3-grad1 (Failed); 137 - dfomp3-grad2 (Failed); 140 - dfomp2p5-grad1 (Failed); 141 - dfomp2p5-grad2 (Failed); 146 - dft-freq (Failed); 147 - dft-grad (Failed); 151 - dft1 (Failed); 152 - dft1-alt (Failed); 154 - dft3 (Failed); 157 - extern1 (Failed); 165 - fd-freq-energy-large (Failed); 168 - fd-gradient (Failed); 188 - mints9 (Failed); 196 - mp2-module (Failed); 229 - opt-lindep-change (Failed); 237 - opt6 (Failed); 238 - opt7 (Failed); 239 - opt8 (Failed); 240 - opt9 (Failed); 241 - opt11 (Failed); 242 - opt12 (Failed); 243 - opt13 (Timeout); 245 - opt-irc-1 (Failed); 246 - opt-irc-2 (Failed); 247 - opt_freeze_coords (Failed); 261 - pubchem1 (Failed); 268 - pywrap-checkrun-rhf (Failed); 269 - pywrap-checkrun-rohf (Failed); 270 - pywrap-checkrun-uhf (Failed); 272 - pywrap-db2 (Failed); 309 - tu3-h2o-opt (Failed); 310 - tu4-h2o-freq (Failed); 322 - cubeprop-esp (Failed)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/587#issuecomment-275696746
https://github.com/psi4/psi4/pull/587#issuecomment-276218358:2682,Performance,Perform,Performing,2682,v nfc: 1 occ*.....................................PASSED; 	mp2 grad rhf conv nfc: 1 occ*.....................................PASSED; 	mp2 grad rhf df fc: 2 occ.........................................PASSED; 	mp2 grad rhf df fc: 2 occ.........................................PASSED; 	mp2 grad rhf df fc: 2 occ.........................................PASSED; 	mp2 grad rhf df fc: 2 dfmp2*......................................PASSED; 	mp2 grad rhf df fc: 2 dfmp2*......................................PASSED; 	mp2 grad rhf df fc: 2 dfmp2*......................................PASSED; 	mp2 grad rhf df nfc: 2 occ........................................PASSED; 	mp2 grad rhf df nfc: 2 occ........................................PASSED; 	mp2 grad rhf df nfc: 2 occ........................................PASSED; 	mp2 grad rhf df nfc: 2 dfmp2*.....................................PASSED; 	mp2 grad rhf df nfc: 2 dfmp2*.....................................PASSED; 	mp2 grad rhf df nfc: 2 dfmp2*.....................................PASSED; 	mp2 grad uhf conv nfc: 1 occ*.....................................PASSED; 	mp2 grad uhf conv nfc: 1 occ*.....................................PASSED; 	mp2 grad uhf conv nfc: 1 occ*.....................................PASSED; 	mp2 grad uhf conv nfc: 1 occ*.....................................PASSED; 	mp2 grad uhf df fc: 1 occ*........................................PASSED; 	mp2 grad uhf df fc: 1 occ*........................................PASSED; 	mp2 grad uhf df fc: 1 occ*........................................PASSED; 	mp2 grad uhf df nfc: 1 occ*.......................................PASSED; 	mp2 grad uhf df nfc: 1 occ*.......................................PASSED; 	mp2 grad uhf df nfc: 1 occ*.......................................PASSED; Performing finite difference calculations; 13 displacements needed ... 1 2 3 4 5 6 7 8 9 10 11 12 13; 	mp2 grad rohf df nfc: findif......................................PASSED; ...; *** findif gradient passes ***; ```,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/587#issuecomment-276218358
https://github.com/psi4/psi4/pull/587#issuecomment-276218358:110,Testability,test,tests,110,"You've noticed that gradients or omega/long-range-corrected functionals are a common thread among the failing tests? The mp2-module test might be helpful for debugging as it's running mp2 variations in all the different mp2-capable modules. When I comment out the failing compare_matrices statements so that it all passes, you'll see that the conventional (4-lines pass blocks below) gradients are working while the df (3-lines pass (1-line commented out) blocks below) are failing in both dfocc and dfmp2 modules. Does that help any?. ```; 	mp2 rhf conv: 3 occ*..............................................PASSED; 	mp2 rhf conv: 3 occ*..............................................PASSED; ...; *** mp2 energies all pass ***; ...; 	mp2 grad rhf conv nfc: 1 occ*.....................................PASSED; 	mp2 grad rhf conv nfc: 1 occ*.....................................PASSED; 	mp2 grad rhf conv nfc: 1 occ*.....................................PASSED; 	mp2 grad rhf conv nfc: 1 occ*.....................................PASSED; 	mp2 grad rhf df fc: 2 occ.........................................PASSED; 	mp2 grad rhf df fc: 2 occ.........................................PASSED; 	mp2 grad rhf df fc: 2 occ.........................................PASSED; 	mp2 grad rhf df fc: 2 dfmp2*......................................PASSED; 	mp2 grad rhf df fc: 2 dfmp2*......................................PASSED; 	mp2 grad rhf df fc: 2 dfmp2*......................................PASSED; 	mp2 grad rhf df nfc: 2 occ........................................PASSED; 	mp2 grad rhf df nfc: 2 occ........................................PASSED; 	mp2 grad rhf df nfc: 2 occ........................................PASSED; 	mp2 grad rhf df nfc: 2 dfmp2*.....................................PASSED; 	mp2 grad rhf df nfc: 2 dfmp2*.....................................PASSED; 	mp2 grad rhf df nfc: 2 dfmp2*.....................................PASSED; 	mp2 grad uhf conv nfc: 1 occ*.....................................PA",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/587#issuecomment-276218358
https://github.com/psi4/psi4/pull/587#issuecomment-276218358:132,Testability,test,test,132,"You've noticed that gradients or omega/long-range-corrected functionals are a common thread among the failing tests? The mp2-module test might be helpful for debugging as it's running mp2 variations in all the different mp2-capable modules. When I comment out the failing compare_matrices statements so that it all passes, you'll see that the conventional (4-lines pass blocks below) gradients are working while the df (3-lines pass (1-line commented out) blocks below) are failing in both dfocc and dfmp2 modules. Does that help any?. ```; 	mp2 rhf conv: 3 occ*..............................................PASSED; 	mp2 rhf conv: 3 occ*..............................................PASSED; ...; *** mp2 energies all pass ***; ...; 	mp2 grad rhf conv nfc: 1 occ*.....................................PASSED; 	mp2 grad rhf conv nfc: 1 occ*.....................................PASSED; 	mp2 grad rhf conv nfc: 1 occ*.....................................PASSED; 	mp2 grad rhf conv nfc: 1 occ*.....................................PASSED; 	mp2 grad rhf df fc: 2 occ.........................................PASSED; 	mp2 grad rhf df fc: 2 occ.........................................PASSED; 	mp2 grad rhf df fc: 2 occ.........................................PASSED; 	mp2 grad rhf df fc: 2 dfmp2*......................................PASSED; 	mp2 grad rhf df fc: 2 dfmp2*......................................PASSED; 	mp2 grad rhf df fc: 2 dfmp2*......................................PASSED; 	mp2 grad rhf df nfc: 2 occ........................................PASSED; 	mp2 grad rhf df nfc: 2 occ........................................PASSED; 	mp2 grad rhf df nfc: 2 occ........................................PASSED; 	mp2 grad rhf df nfc: 2 dfmp2*.....................................PASSED; 	mp2 grad rhf df nfc: 2 dfmp2*.....................................PASSED; 	mp2 grad rhf df nfc: 2 dfmp2*.....................................PASSED; 	mp2 grad uhf conv nfc: 1 occ*.....................................PA",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/587#issuecomment-276218358
https://github.com/psi4/psi4/pull/587#issuecomment-276884648:428,Availability,failure,failures,428,"##### Summary. With a couple changes, as below, I think this can be ready to go. ##### Testing Setup. * in `~/.psi4rc`: `psi4.set_global_option(""INTEGRAL_PACKAGE"", ""ERD"")`; * in `psi4/driver/driver.py`: the catch from the section below, only with `sys.exit(0)` to force smooth exit from test, rather than the ValidationError; * Under these conditions, only the below fail from full tests. Ignoring the can't-find-exe, the known-failures, and the sow/reap, the ailing test cases involved either LRC functionals or ESP.; ```; The following tests FAILED:; 	151 - dft1 (Failed); 	152 - dft1-alt (Failed); 	154 - dft3 (Failed); 	188 - mints9 (Failed); 	272 - pywrap-db2 (Failed); 	275 - pywrap-freq-g-sowreap (Failed); 	322 - cubeprop-esp (Failed); 	333 - dftd3-version (Failed); 	341 - mrcc-ccsdt (Failed); 	342 - mrcc-ccsd_t_ (Failed); 	343 - mrcc-ccsdt_q_ (Failed); 	344 - mrcc-optfreq (Failed); Errors while running CTest; ```. ##### Recc. TODO. * In main CM, change erd warning to ` message(WARNING ""ERD will build, link, and run in Psi4 just fine. However, it has not been hooked into Psi4 in all roles, notably gradients, LRC DFT energies, and ESP. So upon activating through ``set integral_package erd``, gradients will be caught and halted, but LRC DFT, ESP, and perhaps other types not tested and identified will give *wrong* answers. Consider this your warning."")`. * In `psi4/driver/driver.py`, apply patch below. ```; --- a/psi4/driver/driver.py; +++ b/psi4/driver/driver.py; @@ -82,6 +82,9 @@ def _find_derivative_type(ptype, method_name, user_dertype):; raise ValidationError(""_find_derivative_type: user_dertype should only be None or int!""); dertype = user_dertype; ; + if (core.get_global_option('INTEGRAL_PACKAGE') == 'ERD') and (dertype != 0):; + raise ValidationError(""INTEGRAL_PACKAGE ERD does not play nicely with gradients, so stopping.""); +; # Summary validation; if (dertype == 2) and (method_name in procedures['hessian']):; pass; ```. * Running this yield the following list (30",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/587#issuecomment-276884648
https://github.com/psi4/psi4/pull/587#issuecomment-276884648:894,Availability,Error,Errors,894,"##### Summary. With a couple changes, as below, I think this can be ready to go. ##### Testing Setup. * in `~/.psi4rc`: `psi4.set_global_option(""INTEGRAL_PACKAGE"", ""ERD"")`; * in `psi4/driver/driver.py`: the catch from the section below, only with `sys.exit(0)` to force smooth exit from test, rather than the ValidationError; * Under these conditions, only the below fail from full tests. Ignoring the can't-find-exe, the known-failures, and the sow/reap, the ailing test cases involved either LRC functionals or ESP.; ```; The following tests FAILED:; 	151 - dft1 (Failed); 	152 - dft1-alt (Failed); 	154 - dft3 (Failed); 	188 - mints9 (Failed); 	272 - pywrap-db2 (Failed); 	275 - pywrap-freq-g-sowreap (Failed); 	322 - cubeprop-esp (Failed); 	333 - dftd3-version (Failed); 	341 - mrcc-ccsdt (Failed); 	342 - mrcc-ccsd_t_ (Failed); 	343 - mrcc-ccsdt_q_ (Failed); 	344 - mrcc-optfreq (Failed); Errors while running CTest; ```. ##### Recc. TODO. * In main CM, change erd warning to ` message(WARNING ""ERD will build, link, and run in Psi4 just fine. However, it has not been hooked into Psi4 in all roles, notably gradients, LRC DFT energies, and ESP. So upon activating through ``set integral_package erd``, gradients will be caught and halted, but LRC DFT, ESP, and perhaps other types not tested and identified will give *wrong* answers. Consider this your warning."")`. * In `psi4/driver/driver.py`, apply patch below. ```; --- a/psi4/driver/driver.py; +++ b/psi4/driver/driver.py; @@ -82,6 +82,9 @@ def _find_derivative_type(ptype, method_name, user_dertype):; raise ValidationError(""_find_derivative_type: user_dertype should only be None or int!""); dertype = user_dertype; ; + if (core.get_global_option('INTEGRAL_PACKAGE') == 'ERD') and (dertype != 0):; + raise ValidationError(""INTEGRAL_PACKAGE ERD does not play nicely with gradients, so stopping.""); +; # Summary validation; if (dertype == 2) and (method_name in procedures['hessian']):; pass; ```. * Running this yield the following list (30",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/587#issuecomment-276884648
https://github.com/psi4/psi4/pull/587#issuecomment-276884648:2003,Availability,failure,failure,2003,"age(WARNING ""ERD will build, link, and run in Psi4 just fine. However, it has not been hooked into Psi4 in all roles, notably gradients, LRC DFT energies, and ESP. So upon activating through ``set integral_package erd``, gradients will be caught and halted, but LRC DFT, ESP, and perhaps other types not tested and identified will give *wrong* answers. Consider this your warning."")`. * In `psi4/driver/driver.py`, apply patch below. ```; --- a/psi4/driver/driver.py; +++ b/psi4/driver/driver.py; @@ -82,6 +82,9 @@ def _find_derivative_type(ptype, method_name, user_dertype):; raise ValidationError(""_find_derivative_type: user_dertype should only be None or int!""); dertype = user_dertype; ; + if (core.get_global_option('INTEGRAL_PACKAGE') == 'ERD') and (dertype != 0):; + raise ValidationError(""INTEGRAL_PACKAGE ERD does not play nicely with gradients, so stopping.""); +; # Summary validation; if (dertype == 2) and (method_name in procedures['hessian']):; pass; ```. * Running this yield the following list (30% failure rate).; ```; The following tests FAILED:; 	 12 - cbs-xtpl-freq (Failed); 	 13 - cbs-xtpl-gradient (Failed); 	 14 - cbs-xtpl-opt (Failed); 	 16 - cbs-xtpl-wrapper (Failed); 	 17 - cc1 (Failed); 	 21 - cc13 (Failed); 	 22 - cc13a (Failed); 	 23 - cc14 (Failed); 	 30 - cc21 (Failed); 	 32 - cc23 (Failed); 	 33 - cc24 (Failed); 	 34 - cc25 (Failed); 	 35 - cc26 (Failed); 	 36 - cc27 (Failed); 	 39 - cc3 (Failed); 	 78 - cepa0-grad1 (Failed); 	 79 - cepa0-grad2 (Failed); 	 95 - dcft-grad1 (Failed); 	 96 - dcft-grad2 (Failed); 	 97 - dcft-grad3 (Failed); 	 98 - dcft-grad4 (Failed); 	103 - dcft5 (Failed); 	114 - dfccd-grad1 (Failed); 	117 - dfccsd-grad1 (Failed); 	122 - dfmp2-3 (Failed); 	124 - dfmp2-grad1 (Failed); 	125 - dfmp2-grad2 (Failed); 	126 - dfmp2-grad3 (Failed); 	127 - dfmp2-grad4 (Failed); 	132 - dfomp2-grad1 (Failed); 	133 - dfomp2-grad2 (Failed); 	136 - dfomp3-grad1 (Failed); 	137 - dfomp3-grad2 (Failed); 	140 - dfomp2p5-grad1 (Failed); 	141 - dfomp2p5-gr",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/587#issuecomment-276884648
https://github.com/psi4/psi4/pull/587#issuecomment-276884648:4828,Availability,Error,Errors,4828,2-grad2 (Failed); 	136 - dfomp3-grad1 (Failed); 	137 - dfomp3-grad2 (Failed); 	140 - dfomp2p5-grad1 (Failed); 	141 - dfomp2p5-grad2 (Failed); 	146 - dft-freq (Failed); 	147 - dft-grad (Failed); 	151 - dft1 (Failed); 	152 - dft1-alt (Failed); 	154 - dft3 (Failed); 	157 - extern1 (Failed); 	165 - fd-freq-energy-large (Failed); 	166 - fd-freq-gradient (Failed); 	167 - fd-freq-gradient-large (Failed); 	168 - fd-gradient (Failed); 	169 - freq-isotope (Failed); 	171 - fnocc2 (Failed); 	176 - gibbs (Failed); 	188 - mints9 (Failed); 	192 - mp2-1 (Failed); 	194 - mp2-grad1 (Failed); 	195 - mp2-grad2 (Failed); 	196 - mp2-module (Failed); 	197 - mp2_5-grad1 (Failed); 	198 - mp2_5-grad2 (Failed); 	199 - mp3-grad1 (Failed); 	200 - mp3-grad2 (Failed); 	206 - ocepa-grad1 (Failed); 	207 - ocepa-grad2 (Failed); 	216 - omp2-grad1 (Failed); 	217 - omp2-grad2 (Failed); 	220 - omp2_5-grad1 (Failed); 	221 - omp2_5-grad2 (Failed); 	227 - omp3-grad1 (Failed); 	228 - omp3-grad2 (Failed); 	229 - opt-lindep-change (Failed); 	230 - opt1 (Failed); 	232 - opt2 (Failed); 	233 - opt2-fd (Failed); 	234 - opt3 (Failed); 	235 - opt4 (Failed); 	236 - opt5 (Failed); 	237 - opt6 (Failed); 	238 - opt7 (Failed); 	239 - opt8 (Failed); 	240 - opt9 (Failed); 	241 - opt11 (Failed); 	242 - opt12 (Failed); 	243 - opt13 (Failed); 	244 - opt14 (Failed); 	245 - opt-irc-1 (Failed); 	246 - opt-irc-2 (Failed); 	247 - opt_freeze_coords (Failed); 	261 - pubchem1 (Failed); 	263 - pywrap-alias (Failed); 	264 - pywrap-all (Failed); 	268 - pywrap-checkrun-rhf (Failed); 	269 - pywrap-checkrun-rohf (Failed); 	270 - pywrap-checkrun-uhf (Failed); 	272 - pywrap-db2 (Failed); 	275 - pywrap-freq-g-sowreap (Failed); 	301 - scf6 (Failed); 	309 - tu3-h2o-opt (Failed); 	310 - tu4-h2o-freq (Failed); 	322 - cubeprop-esp (Failed); 	331 - dftd3-grad (Failed); 	333 - dftd3-version (Failed); 	341 - mrcc-ccsdt (Failed); 	342 - mrcc-ccsd_t_ (Failed); 	343 - mrcc-ccsdt_q_ (Failed); 	344 - mrcc-optfreq (Failed); Errors while running CTest; ```,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/587#issuecomment-276884648
https://github.com/psi4/psi4/pull/587#issuecomment-276884648:1408,Deployability,patch,patch,1408,"find-exe, the known-failures, and the sow/reap, the ailing test cases involved either LRC functionals or ESP.; ```; The following tests FAILED:; 	151 - dft1 (Failed); 	152 - dft1-alt (Failed); 	154 - dft3 (Failed); 	188 - mints9 (Failed); 	272 - pywrap-db2 (Failed); 	275 - pywrap-freq-g-sowreap (Failed); 	322 - cubeprop-esp (Failed); 	333 - dftd3-version (Failed); 	341 - mrcc-ccsdt (Failed); 	342 - mrcc-ccsd_t_ (Failed); 	343 - mrcc-ccsdt_q_ (Failed); 	344 - mrcc-optfreq (Failed); Errors while running CTest; ```. ##### Recc. TODO. * In main CM, change erd warning to ` message(WARNING ""ERD will build, link, and run in Psi4 just fine. However, it has not been hooked into Psi4 in all roles, notably gradients, LRC DFT energies, and ESP. So upon activating through ``set integral_package erd``, gradients will be caught and halted, but LRC DFT, ESP, and perhaps other types not tested and identified will give *wrong* answers. Consider this your warning."")`. * In `psi4/driver/driver.py`, apply patch below. ```; --- a/psi4/driver/driver.py; +++ b/psi4/driver/driver.py; @@ -82,6 +82,9 @@ def _find_derivative_type(ptype, method_name, user_dertype):; raise ValidationError(""_find_derivative_type: user_dertype should only be None or int!""); dertype = user_dertype; ; + if (core.get_global_option('INTEGRAL_PACKAGE') == 'ERD') and (dertype != 0):; + raise ValidationError(""INTEGRAL_PACKAGE ERD does not play nicely with gradients, so stopping.""); +; # Summary validation; if (dertype == 2) and (method_name in procedures['hessian']):; pass; ```. * Running this yield the following list (30% failure rate).; ```; The following tests FAILED:; 	 12 - cbs-xtpl-freq (Failed); 	 13 - cbs-xtpl-gradient (Failed); 	 14 - cbs-xtpl-opt (Failed); 	 16 - cbs-xtpl-wrapper (Failed); 	 17 - cc1 (Failed); 	 21 - cc13 (Failed); 	 22 - cc13a (Failed); 	 23 - cc14 (Failed); 	 30 - cc21 (Failed); 	 32 - cc23 (Failed); 	 33 - cc24 (Failed); 	 34 - cc25 (Failed); 	 35 - cc26 (Failed); 	 36 - cc27 (Failed); 	 39 -",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/587#issuecomment-276884648
https://github.com/psi4/psi4/pull/587#issuecomment-276884648:3163,Energy Efficiency,energy,energy-large,3163,per (Failed); 	 17 - cc1 (Failed); 	 21 - cc13 (Failed); 	 22 - cc13a (Failed); 	 23 - cc14 (Failed); 	 30 - cc21 (Failed); 	 32 - cc23 (Failed); 	 33 - cc24 (Failed); 	 34 - cc25 (Failed); 	 35 - cc26 (Failed); 	 36 - cc27 (Failed); 	 39 - cc3 (Failed); 	 78 - cepa0-grad1 (Failed); 	 79 - cepa0-grad2 (Failed); 	 95 - dcft-grad1 (Failed); 	 96 - dcft-grad2 (Failed); 	 97 - dcft-grad3 (Failed); 	 98 - dcft-grad4 (Failed); 	103 - dcft5 (Failed); 	114 - dfccd-grad1 (Failed); 	117 - dfccsd-grad1 (Failed); 	122 - dfmp2-3 (Failed); 	124 - dfmp2-grad1 (Failed); 	125 - dfmp2-grad2 (Failed); 	126 - dfmp2-grad3 (Failed); 	127 - dfmp2-grad4 (Failed); 	132 - dfomp2-grad1 (Failed); 	133 - dfomp2-grad2 (Failed); 	136 - dfomp3-grad1 (Failed); 	137 - dfomp3-grad2 (Failed); 	140 - dfomp2p5-grad1 (Failed); 	141 - dfomp2p5-grad2 (Failed); 	146 - dft-freq (Failed); 	147 - dft-grad (Failed); 	151 - dft1 (Failed); 	152 - dft1-alt (Failed); 	154 - dft3 (Failed); 	157 - extern1 (Failed); 	165 - fd-freq-energy-large (Failed); 	166 - fd-freq-gradient (Failed); 	167 - fd-freq-gradient-large (Failed); 	168 - fd-gradient (Failed); 	169 - freq-isotope (Failed); 	171 - fnocc2 (Failed); 	176 - gibbs (Failed); 	188 - mints9 (Failed); 	192 - mp2-1 (Failed); 	194 - mp2-grad1 (Failed); 	195 - mp2-grad2 (Failed); 	196 - mp2-module (Failed); 	197 - mp2_5-grad1 (Failed); 	198 - mp2_5-grad2 (Failed); 	199 - mp3-grad1 (Failed); 	200 - mp3-grad2 (Failed); 	206 - ocepa-grad1 (Failed); 	207 - ocepa-grad2 (Failed); 	216 - omp2-grad1 (Failed); 	217 - omp2-grad2 (Failed); 	220 - omp2_5-grad1 (Failed); 	221 - omp2_5-grad2 (Failed); 	227 - omp3-grad1 (Failed); 	228 - omp3-grad2 (Failed); 	229 - opt-lindep-change (Failed); 	230 - opt1 (Failed); 	232 - opt2 (Failed); 	233 - opt2-fd (Failed); 	234 - opt3 (Failed); 	235 - opt4 (Failed); 	236 - opt5 (Failed); 	237 - opt6 (Failed); 	238 - opt7 (Failed); 	239 - opt8 (Failed); 	240 - opt9 (Failed); 	241 - opt11 (Failed); 	242 - opt12 (Failed); 	243 - opt13 (Failed); 	244 -,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/587#issuecomment-276884648
https://github.com/psi4/psi4/pull/587#issuecomment-276884648:983,Integrability,message,message,983,"##### Summary. With a couple changes, as below, I think this can be ready to go. ##### Testing Setup. * in `~/.psi4rc`: `psi4.set_global_option(""INTEGRAL_PACKAGE"", ""ERD"")`; * in `psi4/driver/driver.py`: the catch from the section below, only with `sys.exit(0)` to force smooth exit from test, rather than the ValidationError; * Under these conditions, only the below fail from full tests. Ignoring the can't-find-exe, the known-failures, and the sow/reap, the ailing test cases involved either LRC functionals or ESP.; ```; The following tests FAILED:; 	151 - dft1 (Failed); 	152 - dft1-alt (Failed); 	154 - dft3 (Failed); 	188 - mints9 (Failed); 	272 - pywrap-db2 (Failed); 	275 - pywrap-freq-g-sowreap (Failed); 	322 - cubeprop-esp (Failed); 	333 - dftd3-version (Failed); 	341 - mrcc-ccsdt (Failed); 	342 - mrcc-ccsd_t_ (Failed); 	343 - mrcc-ccsdt_q_ (Failed); 	344 - mrcc-optfreq (Failed); Errors while running CTest; ```. ##### Recc. TODO. * In main CM, change erd warning to ` message(WARNING ""ERD will build, link, and run in Psi4 just fine. However, it has not been hooked into Psi4 in all roles, notably gradients, LRC DFT energies, and ESP. So upon activating through ``set integral_package erd``, gradients will be caught and halted, but LRC DFT, ESP, and perhaps other types not tested and identified will give *wrong* answers. Consider this your warning."")`. * In `psi4/driver/driver.py`, apply patch below. ```; --- a/psi4/driver/driver.py; +++ b/psi4/driver/driver.py; @@ -82,6 +82,9 @@ def _find_derivative_type(ptype, method_name, user_dertype):; raise ValidationError(""_find_derivative_type: user_dertype should only be None or int!""); dertype = user_dertype; ; + if (core.get_global_option('INTEGRAL_PACKAGE') == 'ERD') and (dertype != 0):; + raise ValidationError(""INTEGRAL_PACKAGE ERD does not play nicely with gradients, so stopping.""); +; # Summary validation; if (dertype == 2) and (method_name in procedures['hessian']):; pass; ```. * Running this yield the following list (30",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/587#issuecomment-276884648
https://github.com/psi4/psi4/pull/587#issuecomment-276884648:2165,Integrability,wrap,wrapper,2165,,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/587#issuecomment-276884648
https://github.com/psi4/psi4/pull/587#issuecomment-276884648:309,Security,Validat,ValidationError,309,"##### Summary. With a couple changes, as below, I think this can be ready to go. ##### Testing Setup. * in `~/.psi4rc`: `psi4.set_global_option(""INTEGRAL_PACKAGE"", ""ERD"")`; * in `psi4/driver/driver.py`: the catch from the section below, only with `sys.exit(0)` to force smooth exit from test, rather than the ValidationError; * Under these conditions, only the below fail from full tests. Ignoring the can't-find-exe, the known-failures, and the sow/reap, the ailing test cases involved either LRC functionals or ESP.; ```; The following tests FAILED:; 	151 - dft1 (Failed); 	152 - dft1-alt (Failed); 	154 - dft3 (Failed); 	188 - mints9 (Failed); 	272 - pywrap-db2 (Failed); 	275 - pywrap-freq-g-sowreap (Failed); 	322 - cubeprop-esp (Failed); 	333 - dftd3-version (Failed); 	341 - mrcc-ccsdt (Failed); 	342 - mrcc-ccsd_t_ (Failed); 	343 - mrcc-ccsdt_q_ (Failed); 	344 - mrcc-optfreq (Failed); Errors while running CTest; ```. ##### Recc. TODO. * In main CM, change erd warning to ` message(WARNING ""ERD will build, link, and run in Psi4 just fine. However, it has not been hooked into Psi4 in all roles, notably gradients, LRC DFT energies, and ESP. So upon activating through ``set integral_package erd``, gradients will be caught and halted, but LRC DFT, ESP, and perhaps other types not tested and identified will give *wrong* answers. Consider this your warning."")`. * In `psi4/driver/driver.py`, apply patch below. ```; --- a/psi4/driver/driver.py; +++ b/psi4/driver/driver.py; @@ -82,6 +82,9 @@ def _find_derivative_type(ptype, method_name, user_dertype):; raise ValidationError(""_find_derivative_type: user_dertype should only be None or int!""); dertype = user_dertype; ; + if (core.get_global_option('INTEGRAL_PACKAGE') == 'ERD') and (dertype != 0):; + raise ValidationError(""INTEGRAL_PACKAGE ERD does not play nicely with gradients, so stopping.""); +; # Summary validation; if (dertype == 2) and (method_name in procedures['hessian']):; pass; ```. * Running this yield the following list (30",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/587#issuecomment-276884648
https://github.com/psi4/psi4/pull/587#issuecomment-276884648:1570,Security,Validat,ValidationError,1570,"1-alt (Failed); 	154 - dft3 (Failed); 	188 - mints9 (Failed); 	272 - pywrap-db2 (Failed); 	275 - pywrap-freq-g-sowreap (Failed); 	322 - cubeprop-esp (Failed); 	333 - dftd3-version (Failed); 	341 - mrcc-ccsdt (Failed); 	342 - mrcc-ccsd_t_ (Failed); 	343 - mrcc-ccsdt_q_ (Failed); 	344 - mrcc-optfreq (Failed); Errors while running CTest; ```. ##### Recc. TODO. * In main CM, change erd warning to ` message(WARNING ""ERD will build, link, and run in Psi4 just fine. However, it has not been hooked into Psi4 in all roles, notably gradients, LRC DFT energies, and ESP. So upon activating through ``set integral_package erd``, gradients will be caught and halted, but LRC DFT, ESP, and perhaps other types not tested and identified will give *wrong* answers. Consider this your warning."")`. * In `psi4/driver/driver.py`, apply patch below. ```; --- a/psi4/driver/driver.py; +++ b/psi4/driver/driver.py; @@ -82,6 +82,9 @@ def _find_derivative_type(ptype, method_name, user_dertype):; raise ValidationError(""_find_derivative_type: user_dertype should only be None or int!""); dertype = user_dertype; ; + if (core.get_global_option('INTEGRAL_PACKAGE') == 'ERD') and (dertype != 0):; + raise ValidationError(""INTEGRAL_PACKAGE ERD does not play nicely with gradients, so stopping.""); +; # Summary validation; if (dertype == 2) and (method_name in procedures['hessian']):; pass; ```. * Running this yield the following list (30% failure rate).; ```; The following tests FAILED:; 	 12 - cbs-xtpl-freq (Failed); 	 13 - cbs-xtpl-gradient (Failed); 	 14 - cbs-xtpl-opt (Failed); 	 16 - cbs-xtpl-wrapper (Failed); 	 17 - cc1 (Failed); 	 21 - cc13 (Failed); 	 22 - cc13a (Failed); 	 23 - cc14 (Failed); 	 30 - cc21 (Failed); 	 32 - cc23 (Failed); 	 33 - cc24 (Failed); 	 34 - cc25 (Failed); 	 35 - cc26 (Failed); 	 36 - cc27 (Failed); 	 39 - cc3 (Failed); 	 78 - cepa0-grad1 (Failed); 	 79 - cepa0-grad2 (Failed); 	 95 - dcft-grad1 (Failed); 	 96 - dcft-grad2 (Failed); 	 97 - dcft-grad3 (Failed); 	 98 - dcft-grad4 (F",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/587#issuecomment-276884648
https://github.com/psi4/psi4/pull/587#issuecomment-276884648:1768,Security,Validat,ValidationError,1768,"; 	341 - mrcc-ccsdt (Failed); 	342 - mrcc-ccsd_t_ (Failed); 	343 - mrcc-ccsdt_q_ (Failed); 	344 - mrcc-optfreq (Failed); Errors while running CTest; ```. ##### Recc. TODO. * In main CM, change erd warning to ` message(WARNING ""ERD will build, link, and run in Psi4 just fine. However, it has not been hooked into Psi4 in all roles, notably gradients, LRC DFT energies, and ESP. So upon activating through ``set integral_package erd``, gradients will be caught and halted, but LRC DFT, ESP, and perhaps other types not tested and identified will give *wrong* answers. Consider this your warning."")`. * In `psi4/driver/driver.py`, apply patch below. ```; --- a/psi4/driver/driver.py; +++ b/psi4/driver/driver.py; @@ -82,6 +82,9 @@ def _find_derivative_type(ptype, method_name, user_dertype):; raise ValidationError(""_find_derivative_type: user_dertype should only be None or int!""); dertype = user_dertype; ; + if (core.get_global_option('INTEGRAL_PACKAGE') == 'ERD') and (dertype != 0):; + raise ValidationError(""INTEGRAL_PACKAGE ERD does not play nicely with gradients, so stopping.""); +; # Summary validation; if (dertype == 2) and (method_name in procedures['hessian']):; pass; ```. * Running this yield the following list (30% failure rate).; ```; The following tests FAILED:; 	 12 - cbs-xtpl-freq (Failed); 	 13 - cbs-xtpl-gradient (Failed); 	 14 - cbs-xtpl-opt (Failed); 	 16 - cbs-xtpl-wrapper (Failed); 	 17 - cc1 (Failed); 	 21 - cc13 (Failed); 	 22 - cc13a (Failed); 	 23 - cc14 (Failed); 	 30 - cc21 (Failed); 	 32 - cc23 (Failed); 	 33 - cc24 (Failed); 	 34 - cc25 (Failed); 	 35 - cc26 (Failed); 	 36 - cc27 (Failed); 	 39 - cc3 (Failed); 	 78 - cepa0-grad1 (Failed); 	 79 - cepa0-grad2 (Failed); 	 95 - dcft-grad1 (Failed); 	 96 - dcft-grad2 (Failed); 	 97 - dcft-grad3 (Failed); 	 98 - dcft-grad4 (Failed); 	103 - dcft5 (Failed); 	114 - dfccd-grad1 (Failed); 	117 - dfccsd-grad1 (Failed); 	122 - dfmp2-3 (Failed); 	124 - dfmp2-grad1 (Failed); 	125 - dfmp2-grad2 (Failed); 	126 - dfmp2-g",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/587#issuecomment-276884648
https://github.com/psi4/psi4/pull/587#issuecomment-276884648:1872,Security,validat,validation,1872," running CTest; ```. ##### Recc. TODO. * In main CM, change erd warning to ` message(WARNING ""ERD will build, link, and run in Psi4 just fine. However, it has not been hooked into Psi4 in all roles, notably gradients, LRC DFT energies, and ESP. So upon activating through ``set integral_package erd``, gradients will be caught and halted, but LRC DFT, ESP, and perhaps other types not tested and identified will give *wrong* answers. Consider this your warning."")`. * In `psi4/driver/driver.py`, apply patch below. ```; --- a/psi4/driver/driver.py; +++ b/psi4/driver/driver.py; @@ -82,6 +82,9 @@ def _find_derivative_type(ptype, method_name, user_dertype):; raise ValidationError(""_find_derivative_type: user_dertype should only be None or int!""); dertype = user_dertype; ; + if (core.get_global_option('INTEGRAL_PACKAGE') == 'ERD') and (dertype != 0):; + raise ValidationError(""INTEGRAL_PACKAGE ERD does not play nicely with gradients, so stopping.""); +; # Summary validation; if (dertype == 2) and (method_name in procedures['hessian']):; pass; ```. * Running this yield the following list (30% failure rate).; ```; The following tests FAILED:; 	 12 - cbs-xtpl-freq (Failed); 	 13 - cbs-xtpl-gradient (Failed); 	 14 - cbs-xtpl-opt (Failed); 	 16 - cbs-xtpl-wrapper (Failed); 	 17 - cc1 (Failed); 	 21 - cc13 (Failed); 	 22 - cc13a (Failed); 	 23 - cc14 (Failed); 	 30 - cc21 (Failed); 	 32 - cc23 (Failed); 	 33 - cc24 (Failed); 	 34 - cc25 (Failed); 	 35 - cc26 (Failed); 	 36 - cc27 (Failed); 	 39 - cc3 (Failed); 	 78 - cepa0-grad1 (Failed); 	 79 - cepa0-grad2 (Failed); 	 95 - dcft-grad1 (Failed); 	 96 - dcft-grad2 (Failed); 	 97 - dcft-grad3 (Failed); 	 98 - dcft-grad4 (Failed); 	103 - dcft5 (Failed); 	114 - dfccd-grad1 (Failed); 	117 - dfccsd-grad1 (Failed); 	122 - dfmp2-3 (Failed); 	124 - dfmp2-grad1 (Failed); 	125 - dfmp2-grad2 (Failed); 	126 - dfmp2-grad3 (Failed); 	127 - dfmp2-grad4 (Failed); 	132 - dfomp2-grad1 (Failed); 	133 - dfomp2-grad2 (Failed); 	136 - dfomp3-grad1 (Failed);",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/587#issuecomment-276884648
https://github.com/psi4/psi4/pull/587#issuecomment-276884648:87,Testability,Test,Testing,87,"##### Summary. With a couple changes, as below, I think this can be ready to go. ##### Testing Setup. * in `~/.psi4rc`: `psi4.set_global_option(""INTEGRAL_PACKAGE"", ""ERD"")`; * in `psi4/driver/driver.py`: the catch from the section below, only with `sys.exit(0)` to force smooth exit from test, rather than the ValidationError; * Under these conditions, only the below fail from full tests. Ignoring the can't-find-exe, the known-failures, and the sow/reap, the ailing test cases involved either LRC functionals or ESP.; ```; The following tests FAILED:; 	151 - dft1 (Failed); 	152 - dft1-alt (Failed); 	154 - dft3 (Failed); 	188 - mints9 (Failed); 	272 - pywrap-db2 (Failed); 	275 - pywrap-freq-g-sowreap (Failed); 	322 - cubeprop-esp (Failed); 	333 - dftd3-version (Failed); 	341 - mrcc-ccsdt (Failed); 	342 - mrcc-ccsd_t_ (Failed); 	343 - mrcc-ccsdt_q_ (Failed); 	344 - mrcc-optfreq (Failed); Errors while running CTest; ```. ##### Recc. TODO. * In main CM, change erd warning to ` message(WARNING ""ERD will build, link, and run in Psi4 just fine. However, it has not been hooked into Psi4 in all roles, notably gradients, LRC DFT energies, and ESP. So upon activating through ``set integral_package erd``, gradients will be caught and halted, but LRC DFT, ESP, and perhaps other types not tested and identified will give *wrong* answers. Consider this your warning."")`. * In `psi4/driver/driver.py`, apply patch below. ```; --- a/psi4/driver/driver.py; +++ b/psi4/driver/driver.py; @@ -82,6 +82,9 @@ def _find_derivative_type(ptype, method_name, user_dertype):; raise ValidationError(""_find_derivative_type: user_dertype should only be None or int!""); dertype = user_dertype; ; + if (core.get_global_option('INTEGRAL_PACKAGE') == 'ERD') and (dertype != 0):; + raise ValidationError(""INTEGRAL_PACKAGE ERD does not play nicely with gradients, so stopping.""); +; # Summary validation; if (dertype == 2) and (method_name in procedures['hessian']):; pass; ```. * Running this yield the following list (30",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/587#issuecomment-276884648
https://github.com/psi4/psi4/pull/587#issuecomment-276884648:287,Testability,test,test,287,"##### Summary. With a couple changes, as below, I think this can be ready to go. ##### Testing Setup. * in `~/.psi4rc`: `psi4.set_global_option(""INTEGRAL_PACKAGE"", ""ERD"")`; * in `psi4/driver/driver.py`: the catch from the section below, only with `sys.exit(0)` to force smooth exit from test, rather than the ValidationError; * Under these conditions, only the below fail from full tests. Ignoring the can't-find-exe, the known-failures, and the sow/reap, the ailing test cases involved either LRC functionals or ESP.; ```; The following tests FAILED:; 	151 - dft1 (Failed); 	152 - dft1-alt (Failed); 	154 - dft3 (Failed); 	188 - mints9 (Failed); 	272 - pywrap-db2 (Failed); 	275 - pywrap-freq-g-sowreap (Failed); 	322 - cubeprop-esp (Failed); 	333 - dftd3-version (Failed); 	341 - mrcc-ccsdt (Failed); 	342 - mrcc-ccsd_t_ (Failed); 	343 - mrcc-ccsdt_q_ (Failed); 	344 - mrcc-optfreq (Failed); Errors while running CTest; ```. ##### Recc. TODO. * In main CM, change erd warning to ` message(WARNING ""ERD will build, link, and run in Psi4 just fine. However, it has not been hooked into Psi4 in all roles, notably gradients, LRC DFT energies, and ESP. So upon activating through ``set integral_package erd``, gradients will be caught and halted, but LRC DFT, ESP, and perhaps other types not tested and identified will give *wrong* answers. Consider this your warning."")`. * In `psi4/driver/driver.py`, apply patch below. ```; --- a/psi4/driver/driver.py; +++ b/psi4/driver/driver.py; @@ -82,6 +82,9 @@ def _find_derivative_type(ptype, method_name, user_dertype):; raise ValidationError(""_find_derivative_type: user_dertype should only be None or int!""); dertype = user_dertype; ; + if (core.get_global_option('INTEGRAL_PACKAGE') == 'ERD') and (dertype != 0):; + raise ValidationError(""INTEGRAL_PACKAGE ERD does not play nicely with gradients, so stopping.""); +; # Summary validation; if (dertype == 2) and (method_name in procedures['hessian']):; pass; ```. * Running this yield the following list (30",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/587#issuecomment-276884648
https://github.com/psi4/psi4/pull/587#issuecomment-276884648:382,Testability,test,tests,382,"##### Summary. With a couple changes, as below, I think this can be ready to go. ##### Testing Setup. * in `~/.psi4rc`: `psi4.set_global_option(""INTEGRAL_PACKAGE"", ""ERD"")`; * in `psi4/driver/driver.py`: the catch from the section below, only with `sys.exit(0)` to force smooth exit from test, rather than the ValidationError; * Under these conditions, only the below fail from full tests. Ignoring the can't-find-exe, the known-failures, and the sow/reap, the ailing test cases involved either LRC functionals or ESP.; ```; The following tests FAILED:; 	151 - dft1 (Failed); 	152 - dft1-alt (Failed); 	154 - dft3 (Failed); 	188 - mints9 (Failed); 	272 - pywrap-db2 (Failed); 	275 - pywrap-freq-g-sowreap (Failed); 	322 - cubeprop-esp (Failed); 	333 - dftd3-version (Failed); 	341 - mrcc-ccsdt (Failed); 	342 - mrcc-ccsd_t_ (Failed); 	343 - mrcc-ccsdt_q_ (Failed); 	344 - mrcc-optfreq (Failed); Errors while running CTest; ```. ##### Recc. TODO. * In main CM, change erd warning to ` message(WARNING ""ERD will build, link, and run in Psi4 just fine. However, it has not been hooked into Psi4 in all roles, notably gradients, LRC DFT energies, and ESP. So upon activating through ``set integral_package erd``, gradients will be caught and halted, but LRC DFT, ESP, and perhaps other types not tested and identified will give *wrong* answers. Consider this your warning."")`. * In `psi4/driver/driver.py`, apply patch below. ```; --- a/psi4/driver/driver.py; +++ b/psi4/driver/driver.py; @@ -82,6 +82,9 @@ def _find_derivative_type(ptype, method_name, user_dertype):; raise ValidationError(""_find_derivative_type: user_dertype should only be None or int!""); dertype = user_dertype; ; + if (core.get_global_option('INTEGRAL_PACKAGE') == 'ERD') and (dertype != 0):; + raise ValidationError(""INTEGRAL_PACKAGE ERD does not play nicely with gradients, so stopping.""); +; # Summary validation; if (dertype == 2) and (method_name in procedures['hessian']):; pass; ```. * Running this yield the following list (30",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/587#issuecomment-276884648
https://github.com/psi4/psi4/pull/587#issuecomment-276884648:467,Testability,test,test,467,"##### Summary. With a couple changes, as below, I think this can be ready to go. ##### Testing Setup. * in `~/.psi4rc`: `psi4.set_global_option(""INTEGRAL_PACKAGE"", ""ERD"")`; * in `psi4/driver/driver.py`: the catch from the section below, only with `sys.exit(0)` to force smooth exit from test, rather than the ValidationError; * Under these conditions, only the below fail from full tests. Ignoring the can't-find-exe, the known-failures, and the sow/reap, the ailing test cases involved either LRC functionals or ESP.; ```; The following tests FAILED:; 	151 - dft1 (Failed); 	152 - dft1-alt (Failed); 	154 - dft3 (Failed); 	188 - mints9 (Failed); 	272 - pywrap-db2 (Failed); 	275 - pywrap-freq-g-sowreap (Failed); 	322 - cubeprop-esp (Failed); 	333 - dftd3-version (Failed); 	341 - mrcc-ccsdt (Failed); 	342 - mrcc-ccsd_t_ (Failed); 	343 - mrcc-ccsdt_q_ (Failed); 	344 - mrcc-optfreq (Failed); Errors while running CTest; ```. ##### Recc. TODO. * In main CM, change erd warning to ` message(WARNING ""ERD will build, link, and run in Psi4 just fine. However, it has not been hooked into Psi4 in all roles, notably gradients, LRC DFT energies, and ESP. So upon activating through ``set integral_package erd``, gradients will be caught and halted, but LRC DFT, ESP, and perhaps other types not tested and identified will give *wrong* answers. Consider this your warning."")`. * In `psi4/driver/driver.py`, apply patch below. ```; --- a/psi4/driver/driver.py; +++ b/psi4/driver/driver.py; @@ -82,6 +82,9 @@ def _find_derivative_type(ptype, method_name, user_dertype):; raise ValidationError(""_find_derivative_type: user_dertype should only be None or int!""); dertype = user_dertype; ; + if (core.get_global_option('INTEGRAL_PACKAGE') == 'ERD') and (dertype != 0):; + raise ValidationError(""INTEGRAL_PACKAGE ERD does not play nicely with gradients, so stopping.""); +; # Summary validation; if (dertype == 2) and (method_name in procedures['hessian']):; pass; ```. * Running this yield the following list (30",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/587#issuecomment-276884648
https://github.com/psi4/psi4/pull/587#issuecomment-276884648:538,Testability,test,tests,538,"##### Summary. With a couple changes, as below, I think this can be ready to go. ##### Testing Setup. * in `~/.psi4rc`: `psi4.set_global_option(""INTEGRAL_PACKAGE"", ""ERD"")`; * in `psi4/driver/driver.py`: the catch from the section below, only with `sys.exit(0)` to force smooth exit from test, rather than the ValidationError; * Under these conditions, only the below fail from full tests. Ignoring the can't-find-exe, the known-failures, and the sow/reap, the ailing test cases involved either LRC functionals or ESP.; ```; The following tests FAILED:; 	151 - dft1 (Failed); 	152 - dft1-alt (Failed); 	154 - dft3 (Failed); 	188 - mints9 (Failed); 	272 - pywrap-db2 (Failed); 	275 - pywrap-freq-g-sowreap (Failed); 	322 - cubeprop-esp (Failed); 	333 - dftd3-version (Failed); 	341 - mrcc-ccsdt (Failed); 	342 - mrcc-ccsd_t_ (Failed); 	343 - mrcc-ccsdt_q_ (Failed); 	344 - mrcc-optfreq (Failed); Errors while running CTest; ```. ##### Recc. TODO. * In main CM, change erd warning to ` message(WARNING ""ERD will build, link, and run in Psi4 just fine. However, it has not been hooked into Psi4 in all roles, notably gradients, LRC DFT energies, and ESP. So upon activating through ``set integral_package erd``, gradients will be caught and halted, but LRC DFT, ESP, and perhaps other types not tested and identified will give *wrong* answers. Consider this your warning."")`. * In `psi4/driver/driver.py`, apply patch below. ```; --- a/psi4/driver/driver.py; +++ b/psi4/driver/driver.py; @@ -82,6 +82,9 @@ def _find_derivative_type(ptype, method_name, user_dertype):; raise ValidationError(""_find_derivative_type: user_dertype should only be None or int!""); dertype = user_dertype; ; + if (core.get_global_option('INTEGRAL_PACKAGE') == 'ERD') and (dertype != 0):; + raise ValidationError(""INTEGRAL_PACKAGE ERD does not play nicely with gradients, so stopping.""); +; # Summary validation; if (dertype == 2) and (method_name in procedures['hessian']):; pass; ```. * Running this yield the following list (30",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/587#issuecomment-276884648
https://github.com/psi4/psi4/pull/587#issuecomment-276884648:1291,Testability,test,tested,1291,"th `sys.exit(0)` to force smooth exit from test, rather than the ValidationError; * Under these conditions, only the below fail from full tests. Ignoring the can't-find-exe, the known-failures, and the sow/reap, the ailing test cases involved either LRC functionals or ESP.; ```; The following tests FAILED:; 	151 - dft1 (Failed); 	152 - dft1-alt (Failed); 	154 - dft3 (Failed); 	188 - mints9 (Failed); 	272 - pywrap-db2 (Failed); 	275 - pywrap-freq-g-sowreap (Failed); 	322 - cubeprop-esp (Failed); 	333 - dftd3-version (Failed); 	341 - mrcc-ccsdt (Failed); 	342 - mrcc-ccsd_t_ (Failed); 	343 - mrcc-ccsdt_q_ (Failed); 	344 - mrcc-optfreq (Failed); Errors while running CTest; ```. ##### Recc. TODO. * In main CM, change erd warning to ` message(WARNING ""ERD will build, link, and run in Psi4 just fine. However, it has not been hooked into Psi4 in all roles, notably gradients, LRC DFT energies, and ESP. So upon activating through ``set integral_package erd``, gradients will be caught and halted, but LRC DFT, ESP, and perhaps other types not tested and identified will give *wrong* answers. Consider this your warning."")`. * In `psi4/driver/driver.py`, apply patch below. ```; --- a/psi4/driver/driver.py; +++ b/psi4/driver/driver.py; @@ -82,6 +82,9 @@ def _find_derivative_type(ptype, method_name, user_dertype):; raise ValidationError(""_find_derivative_type: user_dertype should only be None or int!""); dertype = user_dertype; ; + if (core.get_global_option('INTEGRAL_PACKAGE') == 'ERD') and (dertype != 0):; + raise ValidationError(""INTEGRAL_PACKAGE ERD does not play nicely with gradients, so stopping.""); +; # Summary validation; if (dertype == 2) and (method_name in procedures['hessian']):; pass; ```. * Running this yield the following list (30% failure rate).; ```; The following tests FAILED:; 	 12 - cbs-xtpl-freq (Failed); 	 13 - cbs-xtpl-gradient (Failed); 	 14 - cbs-xtpl-opt (Failed); 	 16 - cbs-xtpl-wrapper (Failed); 	 17 - cc1 (Failed); 	 21 - cc13 (Failed); 	 22 - cc13a (Faile",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/587#issuecomment-276884648
https://github.com/psi4/psi4/pull/587#issuecomment-276884648:2038,Testability,test,tests,2038,,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/587#issuecomment-276884648
https://github.com/psi4/psi4/pull/587#issuecomment-277184410:306,Integrability,Contract,Contraction,306,"@bennybp, the coefficients array for the FCHK file has changed (see below) even with integrals_package libint. Key area is [here](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/libmints/writer.cc#L788-L794), I'd think. Once this is fixed, I think these ERD PRs can go through. FYI, @andysim . ```; Contraction coefficients R N= 42						Contraction coefficients R N= 42; 5.20198307e-04 4.02334478e-03 2.07290833e-02 8.10823271e-02 2.36226352e-01		 |	 7.16680438e-01 1.33580012e+00 2.26507441e+00 3.42829563e+00 4.27751198e+00; 4.43518209e-01 3.58670589e-01 -8.34979724e-03 -1.97236012e-04 -1.53501070e-03		 |	 3.67381232e+00 1.41044798e+00 -6.30902038e-03 -2.71733278e-01 -5.09642498e-01; -7.95118391e-03 -3.21134529e-02 -1.00269643e-01 -2.34047112e-01 -3.01410928e-01		 |	 -8.68828733e-01 -1.35781019e+00 -1.81565094e+00 -1.93869191e+00 -1.18527822e+00; 1.03491965e+00 1.00000000e+00 1.00000000e+00 4.11634896e-02 2.57762836e-01		 |	 7.81974577e-01 1.52282703e+00 3.41176955e-01 3.43681595e+00 3.33255540e+00; 8.02419274e-01 1.00000000e+00 1.00000000e+00 1.00000000e+00 1.00000000e+00		 |	 2.24812218e+00 6.58169745e-01 1.45551678e-01 4.34146067e+00 4.64226043e-01; 1.00000000e+00 2.54948632e-02 1.90362766e-01 8.52162022e-01 1.00000000e+00		 |	 2.22914576e+00 3.57943173e-01 6.45565254e-01 9.51885590e-01 4.31234313e-01; 1.00000000e+00 1.00000000e+00 1.00000000e+00 1.00000000e+00 2.54948632e-02		 |	 1.81416938e-01 1.53238405e+00 3.06224305e-01 1.10187220e+00 3.57943173e-01; 1.90362766e-01 8.52162022e-01 1.00000000e+00 1.00000000e+00 1.00000000e+00		 |	 6.45565254e-01 9.51885590e-01 4.31234313e-01 1.81416938e-01 1.53238405e+00; 1.00000000e+00 1.00000000e+00								 |	 3.06224305e-01 1.10187220e+00; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/587#issuecomment-277184410
https://github.com/psi4/psi4/pull/587#issuecomment-277184410:344,Integrability,Contract,Contraction,344,"@bennybp, the coefficients array for the FCHK file has changed (see below) even with integrals_package libint. Key area is [here](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/libmints/writer.cc#L788-L794), I'd think. Once this is fixed, I think these ERD PRs can go through. FYI, @andysim . ```; Contraction coefficients R N= 42						Contraction coefficients R N= 42; 5.20198307e-04 4.02334478e-03 2.07290833e-02 8.10823271e-02 2.36226352e-01		 |	 7.16680438e-01 1.33580012e+00 2.26507441e+00 3.42829563e+00 4.27751198e+00; 4.43518209e-01 3.58670589e-01 -8.34979724e-03 -1.97236012e-04 -1.53501070e-03		 |	 3.67381232e+00 1.41044798e+00 -6.30902038e-03 -2.71733278e-01 -5.09642498e-01; -7.95118391e-03 -3.21134529e-02 -1.00269643e-01 -2.34047112e-01 -3.01410928e-01		 |	 -8.68828733e-01 -1.35781019e+00 -1.81565094e+00 -1.93869191e+00 -1.18527822e+00; 1.03491965e+00 1.00000000e+00 1.00000000e+00 4.11634896e-02 2.57762836e-01		 |	 7.81974577e-01 1.52282703e+00 3.41176955e-01 3.43681595e+00 3.33255540e+00; 8.02419274e-01 1.00000000e+00 1.00000000e+00 1.00000000e+00 1.00000000e+00		 |	 2.24812218e+00 6.58169745e-01 1.45551678e-01 4.34146067e+00 4.64226043e-01; 1.00000000e+00 2.54948632e-02 1.90362766e-01 8.52162022e-01 1.00000000e+00		 |	 2.22914576e+00 3.57943173e-01 6.45565254e-01 9.51885590e-01 4.31234313e-01; 1.00000000e+00 1.00000000e+00 1.00000000e+00 1.00000000e+00 2.54948632e-02		 |	 1.81416938e-01 1.53238405e+00 3.06224305e-01 1.10187220e+00 3.57943173e-01; 1.90362766e-01 8.52162022e-01 1.00000000e+00 1.00000000e+00 1.00000000e+00		 |	 6.45565254e-01 9.51885590e-01 4.31234313e-01 1.81416938e-01 1.53238405e+00; 1.00000000e+00 1.00000000e+00								 |	 3.06224305e-01 1.10187220e+00; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/587#issuecomment-277184410
https://github.com/psi4/psi4/pull/587#issuecomment-277381511:103,Availability,error,error,103,"Indeed it does, for both libint and erd. _Thank you._ (I'm still getting a `WARNING: string truncated` error when run through CTest, but that won't have anything to do with the code. I'll work on it. Just a warning that the CI may still fail.). Do you want to cherry-pick my commits over from #605? Or shall I cherry-pick this last fix over to there, and merge from there?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/587#issuecomment-277381511
https://github.com/psi4/psi4/pull/588#issuecomment-275790506:210,Energy Efficiency,energy,energy,210,"```; molecule {; 0 1; symmetry c1; C; C 1 1.0; }. set basis cc-pVDZ; set scf_type pk; set nat_orbs true; set restricted_docc [2]; set qc_module detci. # Initial guess from CISD natural orbitals; ci_e, ci_wfn = energy('cisd', return_wfn=True). # Run CAS(10,10); set active [10]; cas_e, cas_wfn = energy('casscf', return_wfn=True, ref_wfn=ci_wfn); ```. crashes with 90cbafb2ad1e7a0a70780b26e5caa15c1ed02a60 applied. Without qc_module = detci, the CASSCF initial energy is the same as with HF, I guess the CISD module doesn't have NOs implemented?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/588#issuecomment-275790506
https://github.com/psi4/psi4/pull/588#issuecomment-275790506:295,Energy Efficiency,energy,energy,295,"```; molecule {; 0 1; symmetry c1; C; C 1 1.0; }. set basis cc-pVDZ; set scf_type pk; set nat_orbs true; set restricted_docc [2]; set qc_module detci. # Initial guess from CISD natural orbitals; ci_e, ci_wfn = energy('cisd', return_wfn=True). # Run CAS(10,10); set active [10]; cas_e, cas_wfn = energy('casscf', return_wfn=True, ref_wfn=ci_wfn); ```. crashes with 90cbafb2ad1e7a0a70780b26e5caa15c1ed02a60 applied. Without qc_module = detci, the CASSCF initial energy is the same as with HF, I guess the CISD module doesn't have NOs implemented?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/588#issuecomment-275790506
https://github.com/psi4/psi4/pull/588#issuecomment-275790506:460,Energy Efficiency,energy,energy,460,"```; molecule {; 0 1; symmetry c1; C; C 1 1.0; }. set basis cc-pVDZ; set scf_type pk; set nat_orbs true; set restricted_docc [2]; set qc_module detci. # Initial guess from CISD natural orbitals; ci_e, ci_wfn = energy('cisd', return_wfn=True). # Run CAS(10,10); set active [10]; cas_e, cas_wfn = energy('casscf', return_wfn=True, ref_wfn=ci_wfn); ```. crashes with 90cbafb2ad1e7a0a70780b26e5caa15c1ed02a60 applied. Without qc_module = detci, the CASSCF initial energy is the same as with HF, I guess the CISD module doesn't have NOs implemented?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/588#issuecomment-275790506
https://github.com/psi4/psi4/pull/588#issuecomment-275790678:4,Availability,error,error,4,"The error I get is; ```; ==> Starting MCSCF iterations <==. Iter Total Energy Delta E Orb RMS CI RMS NCI NORB. Traceback (most recent call last):; File ""/home/work/psi4/install/bin/psi4"", line 223, in <module>; exec(content); File ""<string>"", line 35, in <module>; File ""/home/work/psi4/install/lib/psi4/driver/driver.py"", line 447, in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); File ""/home/work/psi4/install/lib/psi4/driver/procedures/proc.py"", line 4025, in run_detcas; ciwfn = mcscf.mcscf_solver(ref_wfn); File ""/home/work/psi4/install/lib/psi4/driver/procedures/mcscf/mcscf_solver.py"", line 153, in mcscf_solver; nci_iter = ciwfn.diag_h(abs(ediff) * 1.e-2, orb_grad_rms * 1.e-3). RuntimeError: ; Fatal Error: PSIO Error; Error occurred in file: /home/work/psi4/psi4/psi4/src/psi4/libpsio/error.cc on line: 128; The most recent 5 function calls were:. psi::PsiException::PsiException(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, char const*, int); psi::psio_error(unsigned int, unsigned int); psi::PSIO::read(unsigned int, char const*, char*, unsigned long, psi::psio_address, psi::psio_address*); psi::psio_read(unsigned int, char const*, char*, unsigned long, psi::psio_address, psi::psio_address*); psi::psio_read_entry(unsigned int, char const*, char*, unsigned long); ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/588#issuecomment-275790678
https://github.com/psi4/psi4/pull/588#issuecomment-275790678:750,Availability,Error,Error,750,"The error I get is; ```; ==> Starting MCSCF iterations <==. Iter Total Energy Delta E Orb RMS CI RMS NCI NORB. Traceback (most recent call last):; File ""/home/work/psi4/install/bin/psi4"", line 223, in <module>; exec(content); File ""<string>"", line 35, in <module>; File ""/home/work/psi4/install/lib/psi4/driver/driver.py"", line 447, in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); File ""/home/work/psi4/install/lib/psi4/driver/procedures/proc.py"", line 4025, in run_detcas; ciwfn = mcscf.mcscf_solver(ref_wfn); File ""/home/work/psi4/install/lib/psi4/driver/procedures/mcscf/mcscf_solver.py"", line 153, in mcscf_solver; nci_iter = ciwfn.diag_h(abs(ediff) * 1.e-2, orb_grad_rms * 1.e-3). RuntimeError: ; Fatal Error: PSIO Error; Error occurred in file: /home/work/psi4/psi4/psi4/src/psi4/libpsio/error.cc on line: 128; The most recent 5 function calls were:. psi::PsiException::PsiException(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, char const*, int); psi::psio_error(unsigned int, unsigned int); psi::PSIO::read(unsigned int, char const*, char*, unsigned long, psi::psio_address, psi::psio_address*); psi::psio_read(unsigned int, char const*, char*, unsigned long, psi::psio_address, psi::psio_address*); psi::psio_read_entry(unsigned int, char const*, char*, unsigned long); ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/588#issuecomment-275790678
https://github.com/psi4/psi4/pull/588#issuecomment-275790678:762,Availability,Error,Error,762,"The error I get is; ```; ==> Starting MCSCF iterations <==. Iter Total Energy Delta E Orb RMS CI RMS NCI NORB. Traceback (most recent call last):; File ""/home/work/psi4/install/bin/psi4"", line 223, in <module>; exec(content); File ""<string>"", line 35, in <module>; File ""/home/work/psi4/install/lib/psi4/driver/driver.py"", line 447, in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); File ""/home/work/psi4/install/lib/psi4/driver/procedures/proc.py"", line 4025, in run_detcas; ciwfn = mcscf.mcscf_solver(ref_wfn); File ""/home/work/psi4/install/lib/psi4/driver/procedures/mcscf/mcscf_solver.py"", line 153, in mcscf_solver; nci_iter = ciwfn.diag_h(abs(ediff) * 1.e-2, orb_grad_rms * 1.e-3). RuntimeError: ; Fatal Error: PSIO Error; Error occurred in file: /home/work/psi4/psi4/psi4/src/psi4/libpsio/error.cc on line: 128; The most recent 5 function calls were:. psi::PsiException::PsiException(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, char const*, int); psi::psio_error(unsigned int, unsigned int); psi::PSIO::read(unsigned int, char const*, char*, unsigned long, psi::psio_address, psi::psio_address*); psi::psio_read(unsigned int, char const*, char*, unsigned long, psi::psio_address, psi::psio_address*); psi::psio_read_entry(unsigned int, char const*, char*, unsigned long); ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/588#issuecomment-275790678
https://github.com/psi4/psi4/pull/588#issuecomment-275790678:769,Availability,Error,Error,769,"The error I get is; ```; ==> Starting MCSCF iterations <==. Iter Total Energy Delta E Orb RMS CI RMS NCI NORB. Traceback (most recent call last):; File ""/home/work/psi4/install/bin/psi4"", line 223, in <module>; exec(content); File ""<string>"", line 35, in <module>; File ""/home/work/psi4/install/lib/psi4/driver/driver.py"", line 447, in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); File ""/home/work/psi4/install/lib/psi4/driver/procedures/proc.py"", line 4025, in run_detcas; ciwfn = mcscf.mcscf_solver(ref_wfn); File ""/home/work/psi4/install/lib/psi4/driver/procedures/mcscf/mcscf_solver.py"", line 153, in mcscf_solver; nci_iter = ciwfn.diag_h(abs(ediff) * 1.e-2, orb_grad_rms * 1.e-3). RuntimeError: ; Fatal Error: PSIO Error; Error occurred in file: /home/work/psi4/psi4/psi4/src/psi4/libpsio/error.cc on line: 128; The most recent 5 function calls were:. psi::PsiException::PsiException(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, char const*, int); psi::psio_error(unsigned int, unsigned int); psi::PSIO::read(unsigned int, char const*, char*, unsigned long, psi::psio_address, psi::psio_address*); psi::psio_read(unsigned int, char const*, char*, unsigned long, psi::psio_address, psi::psio_address*); psi::psio_read_entry(unsigned int, char const*, char*, unsigned long); ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/588#issuecomment-275790678
https://github.com/psi4/psi4/pull/588#issuecomment-275790678:836,Availability,error,error,836,"The error I get is; ```; ==> Starting MCSCF iterations <==. Iter Total Energy Delta E Orb RMS CI RMS NCI NORB. Traceback (most recent call last):; File ""/home/work/psi4/install/bin/psi4"", line 223, in <module>; exec(content); File ""<string>"", line 35, in <module>; File ""/home/work/psi4/install/lib/psi4/driver/driver.py"", line 447, in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); File ""/home/work/psi4/install/lib/psi4/driver/procedures/proc.py"", line 4025, in run_detcas; ciwfn = mcscf.mcscf_solver(ref_wfn); File ""/home/work/psi4/install/lib/psi4/driver/procedures/mcscf/mcscf_solver.py"", line 153, in mcscf_solver; nci_iter = ciwfn.diag_h(abs(ediff) * 1.e-2, orb_grad_rms * 1.e-3). RuntimeError: ; Fatal Error: PSIO Error; Error occurred in file: /home/work/psi4/psi4/psi4/src/psi4/libpsio/error.cc on line: 128; The most recent 5 function calls were:. psi::PsiException::PsiException(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, char const*, int); psi::psio_error(unsigned int, unsigned int); psi::PSIO::read(unsigned int, char const*, char*, unsigned long, psi::psio_address, psi::psio_address*); psi::psio_read(unsigned int, char const*, char*, unsigned long, psi::psio_address, psi::psio_address*); psi::psio_read_entry(unsigned int, char const*, char*, unsigned long); ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/588#issuecomment-275790678
https://github.com/psi4/psi4/pull/588#issuecomment-275790678:169,Deployability,install,install,169,"The error I get is; ```; ==> Starting MCSCF iterations <==. Iter Total Energy Delta E Orb RMS CI RMS NCI NORB. Traceback (most recent call last):; File ""/home/work/psi4/install/bin/psi4"", line 223, in <module>; exec(content); File ""<string>"", line 35, in <module>; File ""/home/work/psi4/install/lib/psi4/driver/driver.py"", line 447, in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); File ""/home/work/psi4/install/lib/psi4/driver/procedures/proc.py"", line 4025, in run_detcas; ciwfn = mcscf.mcscf_solver(ref_wfn); File ""/home/work/psi4/install/lib/psi4/driver/procedures/mcscf/mcscf_solver.py"", line 153, in mcscf_solver; nci_iter = ciwfn.diag_h(abs(ediff) * 1.e-2, orb_grad_rms * 1.e-3). RuntimeError: ; Fatal Error: PSIO Error; Error occurred in file: /home/work/psi4/psi4/psi4/src/psi4/libpsio/error.cc on line: 128; The most recent 5 function calls were:. psi::PsiException::PsiException(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, char const*, int); psi::psio_error(unsigned int, unsigned int); psi::PSIO::read(unsigned int, char const*, char*, unsigned long, psi::psio_address, psi::psio_address*); psi::psio_read(unsigned int, char const*, char*, unsigned long, psi::psio_address, psi::psio_address*); psi::psio_read_entry(unsigned int, char const*, char*, unsigned long); ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/588#issuecomment-275790678
https://github.com/psi4/psi4/pull/588#issuecomment-275790678:287,Deployability,install,install,287,"The error I get is; ```; ==> Starting MCSCF iterations <==. Iter Total Energy Delta E Orb RMS CI RMS NCI NORB. Traceback (most recent call last):; File ""/home/work/psi4/install/bin/psi4"", line 223, in <module>; exec(content); File ""<string>"", line 35, in <module>; File ""/home/work/psi4/install/lib/psi4/driver/driver.py"", line 447, in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); File ""/home/work/psi4/install/lib/psi4/driver/procedures/proc.py"", line 4025, in run_detcas; ciwfn = mcscf.mcscf_solver(ref_wfn); File ""/home/work/psi4/install/lib/psi4/driver/procedures/mcscf/mcscf_solver.py"", line 153, in mcscf_solver; nci_iter = ciwfn.diag_h(abs(ediff) * 1.e-2, orb_grad_rms * 1.e-3). RuntimeError: ; Fatal Error: PSIO Error; Error occurred in file: /home/work/psi4/psi4/psi4/src/psi4/libpsio/error.cc on line: 128; The most recent 5 function calls were:. psi::PsiException::PsiException(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, char const*, int); psi::psio_error(unsigned int, unsigned int); psi::PSIO::read(unsigned int, char const*, char*, unsigned long, psi::psio_address, psi::psio_address*); psi::psio_read(unsigned int, char const*, char*, unsigned long, psi::psio_address, psi::psio_address*); psi::psio_read_entry(unsigned int, char const*, char*, unsigned long); ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/588#issuecomment-275790678
https://github.com/psi4/psi4/pull/588#issuecomment-275790678:445,Deployability,install,install,445,"The error I get is; ```; ==> Starting MCSCF iterations <==. Iter Total Energy Delta E Orb RMS CI RMS NCI NORB. Traceback (most recent call last):; File ""/home/work/psi4/install/bin/psi4"", line 223, in <module>; exec(content); File ""<string>"", line 35, in <module>; File ""/home/work/psi4/install/lib/psi4/driver/driver.py"", line 447, in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); File ""/home/work/psi4/install/lib/psi4/driver/procedures/proc.py"", line 4025, in run_detcas; ciwfn = mcscf.mcscf_solver(ref_wfn); File ""/home/work/psi4/install/lib/psi4/driver/procedures/mcscf/mcscf_solver.py"", line 153, in mcscf_solver; nci_iter = ciwfn.diag_h(abs(ediff) * 1.e-2, orb_grad_rms * 1.e-3). RuntimeError: ; Fatal Error: PSIO Error; Error occurred in file: /home/work/psi4/psi4/psi4/src/psi4/libpsio/error.cc on line: 128; The most recent 5 function calls were:. psi::PsiException::PsiException(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, char const*, int); psi::psio_error(unsigned int, unsigned int); psi::PSIO::read(unsigned int, char const*, char*, unsigned long, psi::psio_address, psi::psio_address*); psi::psio_read(unsigned int, char const*, char*, unsigned long, psi::psio_address, psi::psio_address*); psi::psio_read_entry(unsigned int, char const*, char*, unsigned long); ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/588#issuecomment-275790678
https://github.com/psi4/psi4/pull/588#issuecomment-275790678:575,Deployability,install,install,575,"The error I get is; ```; ==> Starting MCSCF iterations <==. Iter Total Energy Delta E Orb RMS CI RMS NCI NORB. Traceback (most recent call last):; File ""/home/work/psi4/install/bin/psi4"", line 223, in <module>; exec(content); File ""<string>"", line 35, in <module>; File ""/home/work/psi4/install/lib/psi4/driver/driver.py"", line 447, in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); File ""/home/work/psi4/install/lib/psi4/driver/procedures/proc.py"", line 4025, in run_detcas; ciwfn = mcscf.mcscf_solver(ref_wfn); File ""/home/work/psi4/install/lib/psi4/driver/procedures/mcscf/mcscf_solver.py"", line 153, in mcscf_solver; nci_iter = ciwfn.diag_h(abs(ediff) * 1.e-2, orb_grad_rms * 1.e-3). RuntimeError: ; Fatal Error: PSIO Error; Error occurred in file: /home/work/psi4/psi4/psi4/src/psi4/libpsio/error.cc on line: 128; The most recent 5 function calls were:. psi::PsiException::PsiException(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, char const*, int); psi::psio_error(unsigned int, unsigned int); psi::PSIO::read(unsigned int, char const*, char*, unsigned long, psi::psio_address, psi::psio_address*); psi::psio_read(unsigned int, char const*, char*, unsigned long, psi::psio_address, psi::psio_address*); psi::psio_read_entry(unsigned int, char const*, char*, unsigned long); ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/588#issuecomment-275790678
https://github.com/psi4/psi4/pull/588#issuecomment-275790678:71,Energy Efficiency,Energy,Energy,71,"The error I get is; ```; ==> Starting MCSCF iterations <==. Iter Total Energy Delta E Orb RMS CI RMS NCI NORB. Traceback (most recent call last):; File ""/home/work/psi4/install/bin/psi4"", line 223, in <module>; exec(content); File ""<string>"", line 35, in <module>; File ""/home/work/psi4/install/lib/psi4/driver/driver.py"", line 447, in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); File ""/home/work/psi4/install/lib/psi4/driver/procedures/proc.py"", line 4025, in run_detcas; ciwfn = mcscf.mcscf_solver(ref_wfn); File ""/home/work/psi4/install/lib/psi4/driver/procedures/mcscf/mcscf_solver.py"", line 153, in mcscf_solver; nci_iter = ciwfn.diag_h(abs(ediff) * 1.e-2, orb_grad_rms * 1.e-3). RuntimeError: ; Fatal Error: PSIO Error; Error occurred in file: /home/work/psi4/psi4/psi4/src/psi4/libpsio/error.cc on line: 128; The most recent 5 function calls were:. psi::PsiException::PsiException(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, char const*, int); psi::psio_error(unsigned int, unsigned int); psi::PSIO::read(unsigned int, char const*, char*, unsigned long, psi::psio_address, psi::psio_address*); psi::psio_read(unsigned int, char const*, char*, unsigned long, psi::psio_address, psi::psio_address*); psi::psio_read_entry(unsigned int, char const*, char*, unsigned long); ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/588#issuecomment-275790678
https://github.com/psi4/psi4/pull/588#issuecomment-275790678:336,Energy Efficiency,energy,energy,336,"The error I get is; ```; ==> Starting MCSCF iterations <==. Iter Total Energy Delta E Orb RMS CI RMS NCI NORB. Traceback (most recent call last):; File ""/home/work/psi4/install/bin/psi4"", line 223, in <module>; exec(content); File ""<string>"", line 35, in <module>; File ""/home/work/psi4/install/lib/psi4/driver/driver.py"", line 447, in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); File ""/home/work/psi4/install/lib/psi4/driver/procedures/proc.py"", line 4025, in run_detcas; ciwfn = mcscf.mcscf_solver(ref_wfn); File ""/home/work/psi4/install/lib/psi4/driver/procedures/mcscf/mcscf_solver.py"", line 153, in mcscf_solver; nci_iter = ciwfn.diag_h(abs(ediff) * 1.e-2, orb_grad_rms * 1.e-3). RuntimeError: ; Fatal Error: PSIO Error; Error occurred in file: /home/work/psi4/psi4/psi4/src/psi4/libpsio/error.cc on line: 128; The most recent 5 function calls were:. psi::PsiException::PsiException(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, char const*, int); psi::psio_error(unsigned int, unsigned int); psi::PSIO::read(unsigned int, char const*, char*, unsigned long, psi::psio_address, psi::psio_address*); psi::psio_read(unsigned int, char const*, char*, unsigned long, psi::psio_address, psi::psio_address*); psi::psio_read_entry(unsigned int, char const*, char*, unsigned long); ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/588#issuecomment-275790678
https://github.com/psi4/psi4/pull/588#issuecomment-275790678:362,Energy Efficiency,energy,energy,362,"The error I get is; ```; ==> Starting MCSCF iterations <==. Iter Total Energy Delta E Orb RMS CI RMS NCI NORB. Traceback (most recent call last):; File ""/home/work/psi4/install/bin/psi4"", line 223, in <module>; exec(content); File ""<string>"", line 35, in <module>; File ""/home/work/psi4/install/lib/psi4/driver/driver.py"", line 447, in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); File ""/home/work/psi4/install/lib/psi4/driver/procedures/proc.py"", line 4025, in run_detcas; ciwfn = mcscf.mcscf_solver(ref_wfn); File ""/home/work/psi4/install/lib/psi4/driver/procedures/mcscf/mcscf_solver.py"", line 153, in mcscf_solver; nci_iter = ciwfn.diag_h(abs(ediff) * 1.e-2, orb_grad_rms * 1.e-3). RuntimeError: ; Fatal Error: PSIO Error; Error occurred in file: /home/work/psi4/psi4/psi4/src/psi4/libpsio/error.cc on line: 128; The most recent 5 function calls were:. psi::PsiException::PsiException(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, char const*, int); psi::psio_error(unsigned int, unsigned int); psi::PSIO::read(unsigned int, char const*, char*, unsigned long, psi::psio_address, psi::psio_address*); psi::psio_read(unsigned int, char const*, char*, unsigned long, psi::psio_address, psi::psio_address*); psi::psio_read_entry(unsigned int, char const*, char*, unsigned long); ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/588#issuecomment-275790678
https://github.com/psi4/psi4/pull/588#issuecomment-275808801:33,Testability,test,test,33,"@susilehtola Yup, got it. With a test too.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/588#issuecomment-275808801
https://github.com/psi4/psi4/pull/588#issuecomment-275884420:240,Energy Efficiency,energy,energy,240,"One more tiny bug:; ```; molecule {; 0 2 ; H 0.0 0.0 0.000000; H 0.0 0.0 0.500000; H 0.0 0.0 1.000000; }. set basis STO-3G; set reference rohf; set ci_maxiter 100; set scf_type pk; set fail_on_maxiter false; set nat_orbs true; ci_e, ci_wfn=energy('fci', return_wfn=True). # Rerun to get true solution; set num_roots 3; set e_convergence 1e-10; set r_convergence 1e-8; energy('fci', ref_wfn=ci_wfn); ```; prints out; ```; $ psi4; (H0block_setup): Can't find CI block!; (H0block_setup): Can't find CI block!; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/588#issuecomment-275884420
https://github.com/psi4/psi4/pull/588#issuecomment-275884420:368,Energy Efficiency,energy,energy,368,"One more tiny bug:; ```; molecule {; 0 2 ; H 0.0 0.0 0.000000; H 0.0 0.0 0.500000; H 0.0 0.0 1.000000; }. set basis STO-3G; set reference rohf; set ci_maxiter 100; set scf_type pk; set fail_on_maxiter false; set nat_orbs true; ci_e, ci_wfn=energy('fci', return_wfn=True). # Rerun to get true solution; set num_roots 3; set e_convergence 1e-10; set r_convergence 1e-8; energy('fci', ref_wfn=ci_wfn); ```; prints out; ```; $ psi4; (H0block_setup): Can't find CI block!; (H0block_setup): Can't find CI block!; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/588#issuecomment-275884420
https://github.com/psi4/psi4/pull/588#issuecomment-275939888:72,Testability,log,log,72,"Sure, I'm just wondering whether this should really be in stdout or the log file?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/588#issuecomment-275939888
https://github.com/psi4/psi4/issues/590#issuecomment-275767955:44,Integrability,rout,routines,44,"The MCSCF printing and the NO are different routines (hence why `nat_orbs` was broken for MCSCF, but not CI). What kind of printing would you want here?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/590#issuecomment-275767955
https://github.com/psi4/psi4/pull/591#issuecomment-276088154:294,Safety,detect,detection,294,Looks good to me from the CMake/math point of view. The foreach [here](https://github.com/psi4/psi4/pull/591/commits/242c33255741ca6783ce13d4143ed7096ef79766) looks a bit overkill. Will it be possible for me to take these changes over to Autocmake? The grand plan there is to split up the math detection monolith into individual modules. I am asking this because this now becomes GPL code and Autocmake is BSD. Advantage of taking it to Autocmake would be more testing exposure to other codes.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/591#issuecomment-276088154
https://github.com/psi4/psi4/pull/591#issuecomment-276088154:461,Testability,test,testing,461,Looks good to me from the CMake/math point of view. The foreach [here](https://github.com/psi4/psi4/pull/591/commits/242c33255741ca6783ce13d4143ed7096ef79766) looks a bit overkill. Will it be possible for me to take these changes over to Autocmake? The grand plan there is to split up the math detection monolith into individual modules. I am asking this because this now becomes GPL code and Autocmake is BSD. Advantage of taking it to Autocmake would be more testing exposure to other codes.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/591#issuecomment-276088154
https://github.com/psi4/psi4/pull/591#issuecomment-276091624:276,Deployability,patch,patch,276,"Yes, that foreach is overkill. I'll remove it if it looks like there's nothing more to add. You're welcome to take any of this back to autocmake. @robertodr's already mentioned putting together a backport. I wouldn't call this a thorough overhaul of the mkl detection, just a patch of some known deficiencies (mkl_rt, iomp5). And with all the `-Wl,`s mkl requires, I highly recommend ConfigMath/autocmake use targets, if it isn't already.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/591#issuecomment-276091624
https://github.com/psi4/psi4/pull/591#issuecomment-276091624:384,Modifiability,Config,ConfigMath,384,"Yes, that foreach is overkill. I'll remove it if it looks like there's nothing more to add. You're welcome to take any of this back to autocmake. @robertodr's already mentioned putting together a backport. I wouldn't call this a thorough overhaul of the mkl detection, just a patch of some known deficiencies (mkl_rt, iomp5). And with all the `-Wl,`s mkl requires, I highly recommend ConfigMath/autocmake use targets, if it isn't already.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/591#issuecomment-276091624
https://github.com/psi4/psi4/pull/591#issuecomment-276091624:258,Safety,detect,detection,258,"Yes, that foreach is overkill. I'll remove it if it looks like there's nothing more to add. You're welcome to take any of this back to autocmake. @robertodr's already mentioned putting together a backport. I wouldn't call this a thorough overhaul of the mkl detection, just a patch of some known deficiencies (mkl_rt, iomp5). And with all the `-Wl,`s mkl requires, I highly recommend ConfigMath/autocmake use targets, if it isn't already.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/591#issuecomment-276091624
https://github.com/psi4/psi4/pull/591#issuecomment-276161205:239,Availability,robust,robust,239,"Lori, if you have time, could you please describe briefly what the main reasons were for switching to targets as the mechanism to link to external libraries? What becomes easier? Are there known pitfalls/gotchas? I think targets look more robust than a string which could be (accidentally) modified on the way. In the initial math detection implementation we wanted to be close to how CMake finds libraries. Later I went a bit off course to make it easier for CMake-unaware colleagues to extend the detection. Now I feel I want to go back to more modular and CMake-like but I want to do it ""right"" this time so I would love to learn the advantages of using targets for this. Maybe you have a document you can point me to.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/591#issuecomment-276161205
https://github.com/psi4/psi4/pull/591#issuecomment-276161205:488,Modifiability,extend,extend,488,"Lori, if you have time, could you please describe briefly what the main reasons were for switching to targets as the mechanism to link to external libraries? What becomes easier? Are there known pitfalls/gotchas? I think targets look more robust than a string which could be (accidentally) modified on the way. In the initial math detection implementation we wanted to be close to how CMake finds libraries. Later I went a bit off course to make it easier for CMake-unaware colleagues to extend the detection. Now I feel I want to go back to more modular and CMake-like but I want to do it ""right"" this time so I would love to learn the advantages of using targets for this. Maybe you have a document you can point me to.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/591#issuecomment-276161205
https://github.com/psi4/psi4/pull/591#issuecomment-276161205:331,Safety,detect,detection,331,"Lori, if you have time, could you please describe briefly what the main reasons were for switching to targets as the mechanism to link to external libraries? What becomes easier? Are there known pitfalls/gotchas? I think targets look more robust than a string which could be (accidentally) modified on the way. In the initial math detection implementation we wanted to be close to how CMake finds libraries. Later I went a bit off course to make it easier for CMake-unaware colleagues to extend the detection. Now I feel I want to go back to more modular and CMake-like but I want to do it ""right"" this time so I would love to learn the advantages of using targets for this. Maybe you have a document you can point me to.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/591#issuecomment-276161205
https://github.com/psi4/psi4/pull/591#issuecomment-276161205:499,Safety,detect,detection,499,"Lori, if you have time, could you please describe briefly what the main reasons were for switching to targets as the mechanism to link to external libraries? What becomes easier? Are there known pitfalls/gotchas? I think targets look more robust than a string which could be (accidentally) modified on the way. In the initial math detection implementation we wanted to be close to how CMake finds libraries. Later I went a bit off course to make it easier for CMake-unaware colleagues to extend the detection. Now I feel I want to go back to more modular and CMake-like but I want to do it ""right"" this time so I would love to learn the advantages of using targets for this. Maybe you have a document you can point me to.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/591#issuecomment-276161205
https://github.com/psi4/psi4/pull/591#issuecomment-276161205:627,Usability,learn,learn,627,"Lori, if you have time, could you please describe briefly what the main reasons were for switching to targets as the mechanism to link to external libraries? What becomes easier? Are there known pitfalls/gotchas? I think targets look more robust than a string which could be (accidentally) modified on the way. In the initial math detection implementation we wanted to be close to how CMake finds libraries. Later I went a bit off course to make it easier for CMake-unaware colleagues to extend the detection. Now I feel I want to go back to more modular and CMake-like but I want to do it ""right"" this time so I would love to learn the advantages of using targets for this. Maybe you have a document you can point me to.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/591#issuecomment-276161205
https://github.com/psi4/psi4/pull/591#issuecomment-276178223:927,Integrability,depend,dependencies,927," I'm not a CMake expert, and most of what I know has been gleaned in the last six months just by reading the docs and listserve posts over and over again. CMake _does_ have a set of best practices in mind, but they don't (to my impression) do a good job of telling you what those practices are. And CMake is so flexible that it's easy to just ignore them. But insofar as they give explicit guidance, I've tried to follow it. So a few of my thoughts:. * Targets are to objects (OOP) as cmakevars (e.g., `${HDF5_LIBRARIES}`) are to data arrays. `Find<module>` or `<module>Config` that return <module>_LIBRARIES, _LIBRARY, _INCLUDE_DIR, _INCULDE_DIRS, _DEFINITIONS, _VERSION, _EXECUTABE, etc. are easy to relate to and not so hard to stick into `target_include_directories()`, `target_link_libraries()`, `target_compile_definitions()`, etc. in the consuming project. But it's so much nicer if the <module> author knows what his dependencies are, where his include directories are, whether they need to be used just to compile <module> or whether they need to be used by a consuming project, what compile definitions should be carried along. If all that gets packaged up in a target, then the consuming project need only `target_link_libraries(<tgt> <module>)` and not worry about the other stuff. * CMake tries to be too smart. The items that get put into `target_link_libraries()`, it (pretty reasonably) treats according to the rules of linking libraries and makes bold to rearrange them. Only problem is that when we put linker directives (start-group, as-needed, etc.) and especially when they get repeated in the grand final linking, CMake optimizes them away. So `-la -Wl,--whole-archive -lb, -Wl,--no-whole-archive -lc -Wl,--whole-archive -ld -Wl,--no-whole-archive` merrily becomes `-la -lb, -lc -Wl,--whole-archive -ld -Wl,--no-whole-archive` which is Bad Indeed. However, CMake promises (somewhere) to keep target link libraries properties intact and not to optimize across them. * I think htt",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/591#issuecomment-276178223
https://github.com/psi4/psi4/pull/591#issuecomment-276178223:313,Modifiability,flexible,flexible,313,"So I'm not a CMake expert, and most of what I know has been gleaned in the last six months just by reading the docs and listserve posts over and over again. CMake _does_ have a set of best practices in mind, but they don't (to my impression) do a good job of telling you what those practices are. And CMake is so flexible that it's easy to just ignore them. But insofar as they give explicit guidance, I've tried to follow it. So a few of my thoughts:. * Targets are to objects (OOP) as cmakevars (e.g., `${HDF5_LIBRARIES}`) are to data arrays. `Find<module>` or `<module>Config` that return <module>_LIBRARIES, _LIBRARY, _INCLUDE_DIR, _INCULDE_DIRS, _DEFINITIONS, _VERSION, _EXECUTABE, etc. are easy to relate to and not so hard to stick into `target_include_directories()`, `target_link_libraries()`, `target_compile_definitions()`, etc. in the consuming project. But it's so much nicer if the <module> author knows what his dependencies are, where his include directories are, whether they need to be used just to compile <module> or whether they need to be used by a consuming project, what compile definitions should be carried along. If all that gets packaged up in a target, then the consuming project need only `target_link_libraries(<tgt> <module>)` and not worry about the other stuff. * CMake tries to be too smart. The items that get put into `target_link_libraries()`, it (pretty reasonably) treats according to the rules of linking libraries and makes bold to rearrange them. Only problem is that when we put linker directives (start-group, as-needed, etc.) and especially when they get repeated in the grand final linking, CMake optimizes them away. So `-la -Wl,--whole-archive -lb, -Wl,--no-whole-archive -lc -Wl,--whole-archive -ld -Wl,--no-whole-archive` merrily becomes `-la -lb, -lc -Wl,--whole-archive -ld -Wl,--no-whole-archive` which is Bad Indeed. However, CMake promises (somewhere) to keep target link libraries properties intact and not to optimize across them. * I think ht",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/591#issuecomment-276178223
https://github.com/psi4/psi4/pull/591#issuecomment-276178223:572,Modifiability,Config,Config,572,"So I'm not a CMake expert, and most of what I know has been gleaned in the last six months just by reading the docs and listserve posts over and over again. CMake _does_ have a set of best practices in mind, but they don't (to my impression) do a good job of telling you what those practices are. And CMake is so flexible that it's easy to just ignore them. But insofar as they give explicit guidance, I've tried to follow it. So a few of my thoughts:. * Targets are to objects (OOP) as cmakevars (e.g., `${HDF5_LIBRARIES}`) are to data arrays. `Find<module>` or `<module>Config` that return <module>_LIBRARIES, _LIBRARY, _INCLUDE_DIR, _INCULDE_DIRS, _DEFINITIONS, _VERSION, _EXECUTABE, etc. are easy to relate to and not so hard to stick into `target_include_directories()`, `target_link_libraries()`, `target_compile_definitions()`, etc. in the consuming project. But it's so much nicer if the <module> author knows what his dependencies are, where his include directories are, whether they need to be used just to compile <module> or whether they need to be used by a consuming project, what compile definitions should be carried along. If all that gets packaged up in a target, then the consuming project need only `target_link_libraries(<tgt> <module>)` and not worry about the other stuff. * CMake tries to be too smart. The items that get put into `target_link_libraries()`, it (pretty reasonably) treats according to the rules of linking libraries and makes bold to rearrange them. Only problem is that when we put linker directives (start-group, as-needed, etc.) and especially when they get repeated in the grand final linking, CMake optimizes them away. So `-la -Wl,--whole-archive -lb, -Wl,--no-whole-archive -lc -Wl,--whole-archive -ld -Wl,--no-whole-archive` merrily becomes `-la -lb, -lc -Wl,--whole-archive -ld -Wl,--no-whole-archive` which is Bad Indeed. However, CMake promises (somewhere) to keep target link libraries properties intact and not to optimize across them. * I think ht",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/591#issuecomment-276178223
https://github.com/psi4/psi4/pull/591#issuecomment-276178223:1644,Performance,optimiz,optimizes,1644,"ARY, _INCLUDE_DIR, _INCULDE_DIRS, _DEFINITIONS, _VERSION, _EXECUTABE, etc. are easy to relate to and not so hard to stick into `target_include_directories()`, `target_link_libraries()`, `target_compile_definitions()`, etc. in the consuming project. But it's so much nicer if the <module> author knows what his dependencies are, where his include directories are, whether they need to be used just to compile <module> or whether they need to be used by a consuming project, what compile definitions should be carried along. If all that gets packaged up in a target, then the consuming project need only `target_link_libraries(<tgt> <module>)` and not worry about the other stuff. * CMake tries to be too smart. The items that get put into `target_link_libraries()`, it (pretty reasonably) treats according to the rules of linking libraries and makes bold to rearrange them. Only problem is that when we put linker directives (start-group, as-needed, etc.) and especially when they get repeated in the grand final linking, CMake optimizes them away. So `-la -Wl,--whole-archive -lb, -Wl,--no-whole-archive -lc -Wl,--whole-archive -ld -Wl,--no-whole-archive` merrily becomes `-la -lb, -lc -Wl,--whole-archive -ld -Wl,--no-whole-archive` which is Bad Indeed. However, CMake promises (somewhere) to keep target link libraries properties intact and not to optimize across them. * I think https://github.com/eruffaldi/cmakego/blob/master/cmakego.cmake is a rather nice pattern, and I've emulated it a bit in the external/common/TargetLAPACK. * Targets make all the external projects we link to in psi4 look fairly clean. Below are all the CMakeLists.txt interactions. ```; >>> grep -r '::' psi4/ | grep CMakeList; psi4/CMakeLists.txt: get_property(_loc TARGET CheMPS2::chemps2 PROPERTY LOCATION); psi4/CMakeLists.txt: get_property(_loc TARGET dkh::dkh PROPERTY LOCATION); psi4/CMakeLists.txt:get_property(_loc TARGET libefp::efp PROPERTY LOCATION); psi4/CMakeLists.txt: get_property(_loc TARGET erd::erd PRO",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/591#issuecomment-276178223
https://github.com/psi4/psi4/pull/591#issuecomment-276178223:1967,Performance,optimiz,optimize,1967,"pendencies are, where his include directories are, whether they need to be used just to compile <module> or whether they need to be used by a consuming project, what compile definitions should be carried along. If all that gets packaged up in a target, then the consuming project need only `target_link_libraries(<tgt> <module>)` and not worry about the other stuff. * CMake tries to be too smart. The items that get put into `target_link_libraries()`, it (pretty reasonably) treats according to the rules of linking libraries and makes bold to rearrange them. Only problem is that when we put linker directives (start-group, as-needed, etc.) and especially when they get repeated in the grand final linking, CMake optimizes them away. So `-la -Wl,--whole-archive -lb, -Wl,--no-whole-archive -lc -Wl,--whole-archive -ld -Wl,--no-whole-archive` merrily becomes `-la -lb, -lc -Wl,--whole-archive -ld -Wl,--no-whole-archive` which is Bad Indeed. However, CMake promises (somewhere) to keep target link libraries properties intact and not to optimize across them. * I think https://github.com/eruffaldi/cmakego/blob/master/cmakego.cmake is a rather nice pattern, and I've emulated it a bit in the external/common/TargetLAPACK. * Targets make all the external projects we link to in psi4 look fairly clean. Below are all the CMakeLists.txt interactions. ```; >>> grep -r '::' psi4/ | grep CMakeList; psi4/CMakeLists.txt: get_property(_loc TARGET CheMPS2::chemps2 PROPERTY LOCATION); psi4/CMakeLists.txt: get_property(_loc TARGET dkh::dkh PROPERTY LOCATION); psi4/CMakeLists.txt:get_property(_loc TARGET libefp::efp PROPERTY LOCATION); psi4/CMakeLists.txt: get_property(_loc TARGET erd::erd PROPERTY LOCATION); psi4/CMakeLists.txt: get_property(_loc TARGET gdma::gdma PROPERTY LOCATION); psi4/CMakeLists.txt:get_property(_loc TARGET libint::int PROPERTY LOCATION); psi4/CMakeLists.txt: #get_property(_loc TARGET PCMSolver::PCMSolver PROPERTY LOCATION); psi4/src/CMakeLists.txt:if(TARGET dkh::dkh); psi4/src/",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/591#issuecomment-276178223
https://github.com/psi4/psi4/pull/591#issuecomment-276178223:392,Usability,guid,guidance,392,"So I'm not a CMake expert, and most of what I know has been gleaned in the last six months just by reading the docs and listserve posts over and over again. CMake _does_ have a set of best practices in mind, but they don't (to my impression) do a good job of telling you what those practices are. And CMake is so flexible that it's easy to just ignore them. But insofar as they give explicit guidance, I've tried to follow it. So a few of my thoughts:. * Targets are to objects (OOP) as cmakevars (e.g., `${HDF5_LIBRARIES}`) are to data arrays. `Find<module>` or `<module>Config` that return <module>_LIBRARIES, _LIBRARY, _INCLUDE_DIR, _INCULDE_DIRS, _DEFINITIONS, _VERSION, _EXECUTABE, etc. are easy to relate to and not so hard to stick into `target_include_directories()`, `target_link_libraries()`, `target_compile_definitions()`, etc. in the consuming project. But it's so much nicer if the <module> author knows what his dependencies are, where his include directories are, whether they need to be used just to compile <module> or whether they need to be used by a consuming project, what compile definitions should be carried along. If all that gets packaged up in a target, then the consuming project need only `target_link_libraries(<tgt> <module>)` and not worry about the other stuff. * CMake tries to be too smart. The items that get put into `target_link_libraries()`, it (pretty reasonably) treats according to the rules of linking libraries and makes bold to rearrange them. Only problem is that when we put linker directives (start-group, as-needed, etc.) and especially when they get repeated in the grand final linking, CMake optimizes them away. So `-la -Wl,--whole-archive -lb, -Wl,--no-whole-archive -lc -Wl,--whole-archive -ld -Wl,--no-whole-archive` merrily becomes `-la -lb, -lc -Wl,--whole-archive -ld -Wl,--no-whole-archive` which is Bad Indeed. However, CMake promises (somewhere) to keep target link libraries properties intact and not to optimize across them. * I think ht",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/591#issuecomment-276178223
https://github.com/psi4/psi4/pull/591#issuecomment-276181143:49,Integrability,depend,dependencies,49,Thank you for the explanation! I really like how dependencies become more explicit (greppable).,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/591#issuecomment-276181143
https://github.com/psi4/psi4/pull/591#issuecomment-276186318:364,Energy Efficiency,energy,energy,364,"extern1 test fails for me (Arch Linux, gcc (GCC) 6.3.1, native BLAS/LAPACK):; ```; Output:; ----------------------------------------------------------; Performing finite difference calculations; 19 displacements needed ... 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19; Finite difference (3-pt.) vs. analytic gradient to 10^-5..........PASSED; Finite difference energy..........................................PASSED; Analytic energy...................................................PASSED; Exit Status: infile ( -6 ); autotest ( None ); sowreap ( None ); overall ( 1 ); <end of output>; Test time = 29.12 sec; ----------------------------------------------------------; Test Failed.; ""extern1"" end time: Jan 30 20:51 CET; ""extern1"" time elapsed: 00:00:29; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/591#issuecomment-276186318
https://github.com/psi4/psi4/pull/591#issuecomment-276186318:429,Energy Efficiency,energy,energy,429,"extern1 test fails for me (Arch Linux, gcc (GCC) 6.3.1, native BLAS/LAPACK):; ```; Output:; ----------------------------------------------------------; Performing finite difference calculations; 19 displacements needed ... 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19; Finite difference (3-pt.) vs. analytic gradient to 10^-5..........PASSED; Finite difference energy..........................................PASSED; Analytic energy...................................................PASSED; Exit Status: infile ( -6 ); autotest ( None ); sowreap ( None ); overall ( 1 ); <end of output>; Test time = 29.12 sec; ----------------------------------------------------------; Test Failed.; ""extern1"" end time: Jan 30 20:51 CET; ""extern1"" time elapsed: 00:00:29; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/591#issuecomment-276186318
https://github.com/psi4/psi4/pull/591#issuecomment-276186318:152,Performance,Perform,Performing,152,"extern1 test fails for me (Arch Linux, gcc (GCC) 6.3.1, native BLAS/LAPACK):; ```; Output:; ----------------------------------------------------------; Performing finite difference calculations; 19 displacements needed ... 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19; Finite difference (3-pt.) vs. analytic gradient to 10^-5..........PASSED; Finite difference energy..........................................PASSED; Analytic energy...................................................PASSED; Exit Status: infile ( -6 ); autotest ( None ); sowreap ( None ); overall ( 1 ); <end of output>; Test time = 29.12 sec; ----------------------------------------------------------; Test Failed.; ""extern1"" end time: Jan 30 20:51 CET; ""extern1"" time elapsed: 00:00:29; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/591#issuecomment-276186318
https://github.com/psi4/psi4/pull/591#issuecomment-276186318:8,Testability,test,test,8,"extern1 test fails for me (Arch Linux, gcc (GCC) 6.3.1, native BLAS/LAPACK):; ```; Output:; ----------------------------------------------------------; Performing finite difference calculations; 19 displacements needed ... 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19; Finite difference (3-pt.) vs. analytic gradient to 10^-5..........PASSED; Finite difference energy..........................................PASSED; Analytic energy...................................................PASSED; Exit Status: infile ( -6 ); autotest ( None ); sowreap ( None ); overall ( 1 ); <end of output>; Test time = 29.12 sec; ----------------------------------------------------------; Test Failed.; ""extern1"" end time: Jan 30 20:51 CET; ""extern1"" time elapsed: 00:00:29; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/591#issuecomment-276186318
https://github.com/psi4/psi4/pull/591#issuecomment-276186318:591,Testability,Test,Test,591,"extern1 test fails for me (Arch Linux, gcc (GCC) 6.3.1, native BLAS/LAPACK):; ```; Output:; ----------------------------------------------------------; Performing finite difference calculations; 19 displacements needed ... 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19; Finite difference (3-pt.) vs. analytic gradient to 10^-5..........PASSED; Finite difference energy..........................................PASSED; Analytic energy...................................................PASSED; Exit Status: infile ( -6 ); autotest ( None ); sowreap ( None ); overall ( 1 ); <end of output>; Test time = 29.12 sec; ----------------------------------------------------------; Test Failed.; ""extern1"" end time: Jan 30 20:51 CET; ""extern1"" time elapsed: 00:00:29; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/591#issuecomment-276186318
https://github.com/psi4/psi4/pull/591#issuecomment-276186318:674,Testability,Test,Test,674,"extern1 test fails for me (Arch Linux, gcc (GCC) 6.3.1, native BLAS/LAPACK):; ```; Output:; ----------------------------------------------------------; Performing finite difference calculations; 19 displacements needed ... 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19; Finite difference (3-pt.) vs. analytic gradient to 10^-5..........PASSED; Finite difference energy..........................................PASSED; Analytic energy...................................................PASSED; Exit Status: infile ( -6 ); autotest ( None ); sowreap ( None ); overall ( 1 ); <end of output>; Test time = 29.12 sec; ----------------------------------------------------------; Test Failed.; ""extern1"" end time: Jan 30 20:51 CET; ""extern1"" time elapsed: 00:00:29; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/591#issuecomment-276186318
https://github.com/psi4/psi4/pull/591#issuecomment-276331839:55,Usability,learn,learning,55,Indeed. Thumbs up. Very impressed and taking notes and learning.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/591#issuecomment-276331839
https://github.com/psi4/psi4/pull/591#issuecomment-276534257:321,Energy Efficiency,energy,energy,321,"@bast, could you post the end of the output file for the failed test case `<objdir>/tests/extern1/output.dat`? I'm perplexed as to what went wrong since the end of the test is simply:; ```; total time = 6 seconds = 0.10 minutes; Finite difference (3-pt.) vs. analytic gradient to 10^-5..........PASSED; Finite difference energy..........................................PASSED; Analytic energy...................................................PASSED. *** Psi4 exiting successfully. Buy a developer a beer!; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/591#issuecomment-276534257
https://github.com/psi4/psi4/pull/591#issuecomment-276534257:386,Energy Efficiency,energy,energy,386,"@bast, could you post the end of the output file for the failed test case `<objdir>/tests/extern1/output.dat`? I'm perplexed as to what went wrong since the end of the test is simply:; ```; total time = 6 seconds = 0.10 minutes; Finite difference (3-pt.) vs. analytic gradient to 10^-5..........PASSED; Finite difference energy..........................................PASSED; Analytic energy...................................................PASSED. *** Psi4 exiting successfully. Buy a developer a beer!; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/591#issuecomment-276534257
https://github.com/psi4/psi4/pull/591#issuecomment-276534257:64,Testability,test,test,64,"@bast, could you post the end of the output file for the failed test case `<objdir>/tests/extern1/output.dat`? I'm perplexed as to what went wrong since the end of the test is simply:; ```; total time = 6 seconds = 0.10 minutes; Finite difference (3-pt.) vs. analytic gradient to 10^-5..........PASSED; Finite difference energy..........................................PASSED; Analytic energy...................................................PASSED. *** Psi4 exiting successfully. Buy a developer a beer!; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/591#issuecomment-276534257
https://github.com/psi4/psi4/pull/591#issuecomment-276534257:84,Testability,test,tests,84,"@bast, could you post the end of the output file for the failed test case `<objdir>/tests/extern1/output.dat`? I'm perplexed as to what went wrong since the end of the test is simply:; ```; total time = 6 seconds = 0.10 minutes; Finite difference (3-pt.) vs. analytic gradient to 10^-5..........PASSED; Finite difference energy..........................................PASSED; Analytic energy...................................................PASSED. *** Psi4 exiting successfully. Buy a developer a beer!; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/591#issuecomment-276534257
https://github.com/psi4/psi4/pull/591#issuecomment-276534257:168,Testability,test,test,168,"@bast, could you post the end of the output file for the failed test case `<objdir>/tests/extern1/output.dat`? I'm perplexed as to what went wrong since the end of the test is simply:; ```; total time = 6 seconds = 0.10 minutes; Finite difference (3-pt.) vs. analytic gradient to 10^-5..........PASSED; Finite difference energy..........................................PASSED; Analytic energy...................................................PASSED. *** Psi4 exiting successfully. Buy a developer a beer!; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/591#issuecomment-276534257
https://github.com/psi4/psi4/pull/591#issuecomment-276534257:176,Usability,simpl,simply,176,"@bast, could you post the end of the output file for the failed test case `<objdir>/tests/extern1/output.dat`? I'm perplexed as to what went wrong since the end of the test is simply:; ```; total time = 6 seconds = 0.10 minutes; Finite difference (3-pt.) vs. analytic gradient to 10^-5..........PASSED; Finite difference energy..........................................PASSED; Analytic energy...................................................PASSED. *** Psi4 exiting successfully. Buy a developer a beer!; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/591#issuecomment-276534257
https://github.com/psi4/psi4/pull/591#issuecomment-276601165:481,Energy Efficiency,energy,energy,481,"This is what I got and that looks good to me, too:; ```; *** tstop() called on larry at Mon Jan 30 20:51:46 2017; Module time:; user time = 0.35 seconds = 0.01 minutes; system time = 0.02 seconds = 0.00 minutes; total time = 1 seconds = 0.02 minutes; Total time:; user time = 24.96 seconds = 0.42 minutes; system time = 0.20 seconds = 0.00 minutes; total time = 28 seconds = 0.47 minutes; Finite difference (3-pt.) vs. analytic gradient to 10^-5..........PASSED; Finite difference energy..........................................PASSED; Analytic energy...................................................PASSED. *** Psi4 exiting successfully. Buy a developer a beer!; ```. What does this mean: `Exit Status: infile ( -6 )`?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/591#issuecomment-276601165
https://github.com/psi4/psi4/pull/591#issuecomment-276601165:546,Energy Efficiency,energy,energy,546,"This is what I got and that looks good to me, too:; ```; *** tstop() called on larry at Mon Jan 30 20:51:46 2017; Module time:; user time = 0.35 seconds = 0.01 minutes; system time = 0.02 seconds = 0.00 minutes; total time = 1 seconds = 0.02 minutes; Total time:; user time = 24.96 seconds = 0.42 minutes; system time = 0.20 seconds = 0.00 minutes; total time = 28 seconds = 0.47 minutes; Finite difference (3-pt.) vs. analytic gradient to 10^-5..........PASSED; Finite difference energy..........................................PASSED; Analytic energy...................................................PASSED. *** Psi4 exiting successfully. Buy a developer a beer!; ```. What does this mean: `Exit Status: infile ( -6 )`?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/591#issuecomment-276601165
https://github.com/psi4/psi4/pull/591#issuecomment-276672405:148,Safety,detect,detection,148,"@psi-rking, you're one of the two people I know for whom this PR will actually solve a problem. That is, with this version of the code, Psi4's math detection should properly find your ACML libraries and forward them on to CheMPS2 and libefp without you fiddling with `LAPACKBLAS_LIBRARIES` or pointing to any special upstream branches. If you have a chance, I'd like to know if this works for you. Easiest way to get the code is a fresh checkout `git clone https://github.com/loriab/psi4.git` followed by branch switch `git checkout lapack`, then build as normal, giving none to minimal math hints. Also, don't use a `CMAKE_INSTALL_PREFIX` that has an existing psi4 in it (CMake's shown itself overzealous in finding and using old pybind11's). And, if you would, add `ENABLE_CheMPS2=ON` (you'll need hdf5 somewhere) to test that AddON + ACML, too.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/591#issuecomment-276672405
https://github.com/psi4/psi4/pull/591#issuecomment-276672405:819,Testability,test,test,819,"@psi-rking, you're one of the two people I know for whom this PR will actually solve a problem. That is, with this version of the code, Psi4's math detection should properly find your ACML libraries and forward them on to CheMPS2 and libefp without you fiddling with `LAPACKBLAS_LIBRARIES` or pointing to any special upstream branches. If you have a chance, I'd like to know if this works for you. Easiest way to get the code is a fresh checkout `git clone https://github.com/loriab/psi4.git` followed by branch switch `git checkout lapack`, then build as normal, giving none to minimal math hints. Also, don't use a `CMAKE_INSTALL_PREFIX` that has an existing psi4 in it (CMake's shown itself overzealous in finding and using old pybind11's). And, if you would, add `ENABLE_CheMPS2=ON` (you'll need hdf5 somewhere) to test that AddON + ACML, too.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/591#issuecomment-276672405
https://github.com/psi4/psi4/pull/591#issuecomment-276673381:117,Availability,failure,failure,117,"@bast, the -6 is the return code from the subprocess call that ran the test case. Usually it reflects success (0) or failure (anything else). Not sure what's going off here, but since your job gave every other appearance of success, I won't worry about it unless more evidence surfaces. Thanks for testing it with an exotic (for us) setup.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/591#issuecomment-276673381
https://github.com/psi4/psi4/pull/591#issuecomment-276673381:71,Testability,test,test,71,"@bast, the -6 is the return code from the subprocess call that ran the test case. Usually it reflects success (0) or failure (anything else). Not sure what's going off here, but since your job gave every other appearance of success, I won't worry about it unless more evidence surfaces. Thanks for testing it with an exotic (for us) setup.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/591#issuecomment-276673381
https://github.com/psi4/psi4/pull/591#issuecomment-276673381:298,Testability,test,testing,298,"@bast, the -6 is the return code from the subprocess call that ran the test case. Usually it reflects success (0) or failure (anything else). Not sure what's going off here, but since your job gave every other appearance of success, I won't worry about it unless more evidence surfaces. Thanks for testing it with an exotic (for us) setup.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/591#issuecomment-276673381
https://github.com/psi4/psi4/pull/591#issuecomment-276692658:172,Modifiability,config,configures,172,"I also ran into lapack issues with libefp when trying to compile psi4 with the latest PGI compiler (16.10 community edition). I just checked your branch @loriab and libefp configures+builds normally, both with MKL and PGI blas (basically system_native). There are unrelated PGI issues that prevent a full psi4 build, but those are for another time.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/591#issuecomment-276692658
https://github.com/psi4/psi4/pull/591#issuecomment-276864921:239,Deployability,install,install-,239,"This has had favorable reports and no problems. And I just tried it with gcc/g++/gfortran+MKL and it gave the below, no problems. So I'm offering this as ready-to-go. Will rebase when its turn comes. ```; >>> ldd -v stage/path/to/hrw-temp/install-psi4/lib/psi4/core.so ; 	linux-vdso.so.1 => (0x00007ffd40bdd000); 	libpcm.so.1 => /path/to/hrw-temp/objdir29/stage//path/to/hrw-temp/install-psi4/lib/libpcm.so.1 (0x00007f84bb67f000); 	libgdma.so => /path/to/miniconda/envs/texternals/lib/libgdma.so (0x00007f84bb2c1000); 	libderiv.so => /path/to/miniconda/envs/texternals/lib/libderiv.so (0x00007f84b4f3a000); 	libint.so => /path/to/miniconda/envs/texternals/lib/libint.so (0x00007f84b35b4000); 	libdkh.so => /path/to/hrw-temp/objdir29/stage//path/to/hrw-temp/install-psi4/lib/libdkh.so (0x00007f84b33a2000); 	libefp.so => /path/to/miniconda/envs/texternals/lib/libefp.so (0x00007f84b2847000); 	libmkl_rt.so => /path/to/miniconda/envs/texternals/lib/libmkl_rt.so (0x00007f84b221f000); 	libpthread.so.0 => /lib64/libpthread.so.0 (0x00007f84b1fdd000); 	libm.so.6 => /path/to/miniconda/lib/libm.so.6 (0x00007f84b1d59000); 	libdl.so.2 => /lib64/libdl.so.2 (0x00007f84b1b55000); 	libstdc++.so.6 => /path/to/miniconda/envs/texternals/lib/libstdc++.so.6 (0x00007f84b17c8000); 	libgomp.so.1 => /path/to/miniconda/envs/texternals/lib/libgomp.so.1 (0x00007f84b15a6000); 	libgcc_s.so.1 => /path/to/miniconda/envs/texternals/lib/libgcc_s.so.1 (0x00007f84b1390000); 	libc.so.6 => /lib64/libc.so.6 (0x00007f84b0fcf000); 	libz.so.1 => /path/to/miniconda/envs/texternals/lib/libz.so.1 (0x00007f84b0db8000); 	libgfortran.so.3 => /path/to/miniconda/envs/texternals/lib/libgfortran.so.3 (0x00007f84b0a98000); 	libquadmath.so.0 => /path/to/miniconda/envs/texternals/lib/libquadmath.so.0 (0x00007f84b085a000); 	/lib64/ld-linux-x86-64.so.2 (0x00007f84c3771000); 	librt.so.1 => /lib64/librt.so.1 (0x00007f84b0651000); ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/591#issuecomment-276864921
https://github.com/psi4/psi4/pull/591#issuecomment-276864921:380,Deployability,install,install-,380,"This has had favorable reports and no problems. And I just tried it with gcc/g++/gfortran+MKL and it gave the below, no problems. So I'm offering this as ready-to-go. Will rebase when its turn comes. ```; >>> ldd -v stage/path/to/hrw-temp/install-psi4/lib/psi4/core.so ; 	linux-vdso.so.1 => (0x00007ffd40bdd000); 	libpcm.so.1 => /path/to/hrw-temp/objdir29/stage//path/to/hrw-temp/install-psi4/lib/libpcm.so.1 (0x00007f84bb67f000); 	libgdma.so => /path/to/miniconda/envs/texternals/lib/libgdma.so (0x00007f84bb2c1000); 	libderiv.so => /path/to/miniconda/envs/texternals/lib/libderiv.so (0x00007f84b4f3a000); 	libint.so => /path/to/miniconda/envs/texternals/lib/libint.so (0x00007f84b35b4000); 	libdkh.so => /path/to/hrw-temp/objdir29/stage//path/to/hrw-temp/install-psi4/lib/libdkh.so (0x00007f84b33a2000); 	libefp.so => /path/to/miniconda/envs/texternals/lib/libefp.so (0x00007f84b2847000); 	libmkl_rt.so => /path/to/miniconda/envs/texternals/lib/libmkl_rt.so (0x00007f84b221f000); 	libpthread.so.0 => /lib64/libpthread.so.0 (0x00007f84b1fdd000); 	libm.so.6 => /path/to/miniconda/lib/libm.so.6 (0x00007f84b1d59000); 	libdl.so.2 => /lib64/libdl.so.2 (0x00007f84b1b55000); 	libstdc++.so.6 => /path/to/miniconda/envs/texternals/lib/libstdc++.so.6 (0x00007f84b17c8000); 	libgomp.so.1 => /path/to/miniconda/envs/texternals/lib/libgomp.so.1 (0x00007f84b15a6000); 	libgcc_s.so.1 => /path/to/miniconda/envs/texternals/lib/libgcc_s.so.1 (0x00007f84b1390000); 	libc.so.6 => /lib64/libc.so.6 (0x00007f84b0fcf000); 	libz.so.1 => /path/to/miniconda/envs/texternals/lib/libz.so.1 (0x00007f84b0db8000); 	libgfortran.so.3 => /path/to/miniconda/envs/texternals/lib/libgfortran.so.3 (0x00007f84b0a98000); 	libquadmath.so.0 => /path/to/miniconda/envs/texternals/lib/libquadmath.so.0 (0x00007f84b085a000); 	/lib64/ld-linux-x86-64.so.2 (0x00007f84c3771000); 	librt.so.1 => /lib64/librt.so.1 (0x00007f84b0651000); ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/591#issuecomment-276864921
https://github.com/psi4/psi4/pull/591#issuecomment-276864921:757,Deployability,install,install-,757,"This has had favorable reports and no problems. And I just tried it with gcc/g++/gfortran+MKL and it gave the below, no problems. So I'm offering this as ready-to-go. Will rebase when its turn comes. ```; >>> ldd -v stage/path/to/hrw-temp/install-psi4/lib/psi4/core.so ; 	linux-vdso.so.1 => (0x00007ffd40bdd000); 	libpcm.so.1 => /path/to/hrw-temp/objdir29/stage//path/to/hrw-temp/install-psi4/lib/libpcm.so.1 (0x00007f84bb67f000); 	libgdma.so => /path/to/miniconda/envs/texternals/lib/libgdma.so (0x00007f84bb2c1000); 	libderiv.so => /path/to/miniconda/envs/texternals/lib/libderiv.so (0x00007f84b4f3a000); 	libint.so => /path/to/miniconda/envs/texternals/lib/libint.so (0x00007f84b35b4000); 	libdkh.so => /path/to/hrw-temp/objdir29/stage//path/to/hrw-temp/install-psi4/lib/libdkh.so (0x00007f84b33a2000); 	libefp.so => /path/to/miniconda/envs/texternals/lib/libefp.so (0x00007f84b2847000); 	libmkl_rt.so => /path/to/miniconda/envs/texternals/lib/libmkl_rt.so (0x00007f84b221f000); 	libpthread.so.0 => /lib64/libpthread.so.0 (0x00007f84b1fdd000); 	libm.so.6 => /path/to/miniconda/lib/libm.so.6 (0x00007f84b1d59000); 	libdl.so.2 => /lib64/libdl.so.2 (0x00007f84b1b55000); 	libstdc++.so.6 => /path/to/miniconda/envs/texternals/lib/libstdc++.so.6 (0x00007f84b17c8000); 	libgomp.so.1 => /path/to/miniconda/envs/texternals/lib/libgomp.so.1 (0x00007f84b15a6000); 	libgcc_s.so.1 => /path/to/miniconda/envs/texternals/lib/libgcc_s.so.1 (0x00007f84b1390000); 	libc.so.6 => /lib64/libc.so.6 (0x00007f84b0fcf000); 	libz.so.1 => /path/to/miniconda/envs/texternals/lib/libz.so.1 (0x00007f84b0db8000); 	libgfortran.so.3 => /path/to/miniconda/envs/texternals/lib/libgfortran.so.3 (0x00007f84b0a98000); 	libquadmath.so.0 => /path/to/miniconda/envs/texternals/lib/libquadmath.so.0 (0x00007f84b085a000); 	/lib64/ld-linux-x86-64.so.2 (0x00007f84c3771000); 	librt.so.1 => /lib64/librt.so.1 (0x00007f84b0651000); ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/591#issuecomment-276864921
https://github.com/psi4/psi4/pull/592#issuecomment-276103836:85,Testability,test,test,85,"I have a good setup for vtune on some clusters. Do you have any inputs/scripts I can test?. Tangentially related, I'm getting a better look at the overall thread scaling. In density-fitted HF, the infamous dcopy is a very prominent problem - it's memory bound, so it takes only a few cores for the memory bandwidth to be saturated. If there's any other specific types of calculations you'd like to see, let me know.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/592#issuecomment-276103836
https://github.com/psi4/psi4/pull/592#issuecomment-276106444:330,Performance,bottleneck,bottleneck,330,"@bennybp I used this [gist](https://gist.github.com/dgasmith/876687198a62d1af417ab7f0622b48fb) to time the integrals. . If you have the output for a large `ao_potential` I would be curious to see what is taking time in `compute_shell` for 4+ threads. Im guessing its an IOPS thing as well. Well, at least we should have the dcopy bottleneck removed in Psi4 1.2. Before then we could write you a dense DFJK if needed.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/592#issuecomment-276106444
https://github.com/psi4/psi4/pull/592#issuecomment-276222956:65,Energy Efficiency,Allocate,Allocates,65,"Some bottlenecks that should be easy to fix:. 1.) osrecur.cc:998 Allocates (a tiny bit) of space on the heap. Can be fixed with an array on the stack; 2.) The calculate_f function; 3.) It might help to allocate just a contiguous array of memory in ""init_box"", etc. Just changing the allocation of F from heap to stack improved the timings by 10-20% for overlap, up to 50% for ao_potential in my tests (would be interesting if you can verify that). Thread scaling is better, but could still be improved I think. I may need to get timings for bigger tests",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/592#issuecomment-276222956
https://github.com/psi4/psi4/pull/592#issuecomment-276222956:202,Energy Efficiency,allocate,allocate,202,"Some bottlenecks that should be easy to fix:. 1.) osrecur.cc:998 Allocates (a tiny bit) of space on the heap. Can be fixed with an array on the stack; 2.) The calculate_f function; 3.) It might help to allocate just a contiguous array of memory in ""init_box"", etc. Just changing the allocation of F from heap to stack improved the timings by 10-20% for overlap, up to 50% for ao_potential in my tests (would be interesting if you can verify that). Thread scaling is better, but could still be improved I think. I may need to get timings for bigger tests",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/592#issuecomment-276222956
https://github.com/psi4/psi4/pull/592#issuecomment-276222956:5,Performance,bottleneck,bottlenecks,5,"Some bottlenecks that should be easy to fix:. 1.) osrecur.cc:998 Allocates (a tiny bit) of space on the heap. Can be fixed with an array on the stack; 2.) The calculate_f function; 3.) It might help to allocate just a contiguous array of memory in ""init_box"", etc. Just changing the allocation of F from heap to stack improved the timings by 10-20% for overlap, up to 50% for ao_potential in my tests (would be interesting if you can verify that). Thread scaling is better, but could still be improved I think. I may need to get timings for bigger tests",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/592#issuecomment-276222956
https://github.com/psi4/psi4/pull/592#issuecomment-276222956:395,Testability,test,tests,395,"Some bottlenecks that should be easy to fix:. 1.) osrecur.cc:998 Allocates (a tiny bit) of space on the heap. Can be fixed with an array on the stack; 2.) The calculate_f function; 3.) It might help to allocate just a contiguous array of memory in ""init_box"", etc. Just changing the allocation of F from heap to stack improved the timings by 10-20% for overlap, up to 50% for ao_potential in my tests (would be interesting if you can verify that). Thread scaling is better, but could still be improved I think. I may need to get timings for bigger tests",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/592#issuecomment-276222956
https://github.com/psi4/psi4/pull/592#issuecomment-276222956:548,Testability,test,tests,548,"Some bottlenecks that should be easy to fix:. 1.) osrecur.cc:998 Allocates (a tiny bit) of space on the heap. Can be fixed with an array on the stack; 2.) The calculate_f function; 3.) It might help to allocate just a contiguous array of memory in ""init_box"", etc. Just changing the allocation of F from heap to stack improved the timings by 10-20% for overlap, up to 50% for ao_potential in my tests (would be interesting if you can verify that). Thread scaling is better, but could still be improved I think. I may need to get timings for bigger tests",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/592#issuecomment-276222956
https://github.com/psi4/psi4/pull/592#issuecomment-276352793:91,Modifiability,refactor,refactor,91,"Yeah, I think the allocation at osrecur.cc:998 was a ""let's get a version working and I'll refactor later"" and later never occurred.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/592#issuecomment-276352793
https://github.com/psi4/psi4/pull/592#issuecomment-276403151:129,Usability,simpl,simplified,129,"Mind if I hack around with the FJT/Boys function stuff a bit? It may not be a straightforward replacement, but I think it can be simplified quite a bit",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/592#issuecomment-276403151
https://github.com/psi4/psi4/pull/592#issuecomment-276403875:228,Usability,simpl,simplified,228,"Go for it!. > On Jan 31, 2017, at 10:55 AM, Ben Pritchard <notifications@github.com> wrote:; > ; > Mind if I hack around with the FJT/Boys function stuff a bit? It may not be a straightforward replacement, but I think it can be simplified quite a bit; > ; > —; > You are receiving this because you commented.; > Reply to this email directly, view it on GitHub, or mute the thread.; >",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/592#issuecomment-276403875
https://github.com/psi4/psi4/pull/592#issuecomment-276474446:48,Testability,test,test,48,"I've got a new version of the fjt code ready to test, however it's based off of master. There is a conflict with this branch and master (export_mints.cc). Could someone more familiar with the changes rebase/merge master into this?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/592#issuecomment-276474446
https://github.com/psi4/psi4/pull/592#issuecomment-277145466:408,Deployability,update,update,408,Full tests pass except DCFT5/6 which attempts to compare the energy to 10 decimal places. On that note it looks like the SCF/CCSD energy difference is about 5.e-10 or so. Not too surprising since the one-electron integrals are slightly different. Might try to rig up a test where we check the norm between the current and previous versions matrix elements for large basis sets and heavy atoms. ```; # 6 core update; nbf ntrial ao_overlap ao_kinetic ao_potential so_overlap so_kinetic so_potential; 0 28 1275 0.001758 0.000034 0.001248 0.001832 0.000177 0.001438; 1 98 104 0.002072 0.000253 0.004509 0.002503 0.000808 0.005072; 2 168 35 0.002780 0.000696 0.017807 0.003713 0.001938 0.019500; 3 238 17 0.003789 0.001310 0.044333 0.005827 0.003503 0.047694; 4 308 10 0.005321 0.002705 0.093579 0.009500 0.006423 0.096568; 5 378 6 0.007993 0.004080 0.178422 0.012842 0.009268 0.173306; 6 448 4 0.011465 0.006115 0.276808 0.017397 0.012930 0.282091; 7 518 3 0.015315 0.007962 0.426757 0.023739 0.018704 0.436435; ```,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/592#issuecomment-277145466
https://github.com/psi4/psi4/pull/592#issuecomment-277145466:61,Energy Efficiency,energy,energy,61,Full tests pass except DCFT5/6 which attempts to compare the energy to 10 decimal places. On that note it looks like the SCF/CCSD energy difference is about 5.e-10 or so. Not too surprising since the one-electron integrals are slightly different. Might try to rig up a test where we check the norm between the current and previous versions matrix elements for large basis sets and heavy atoms. ```; # 6 core update; nbf ntrial ao_overlap ao_kinetic ao_potential so_overlap so_kinetic so_potential; 0 28 1275 0.001758 0.000034 0.001248 0.001832 0.000177 0.001438; 1 98 104 0.002072 0.000253 0.004509 0.002503 0.000808 0.005072; 2 168 35 0.002780 0.000696 0.017807 0.003713 0.001938 0.019500; 3 238 17 0.003789 0.001310 0.044333 0.005827 0.003503 0.047694; 4 308 10 0.005321 0.002705 0.093579 0.009500 0.006423 0.096568; 5 378 6 0.007993 0.004080 0.178422 0.012842 0.009268 0.173306; 6 448 4 0.011465 0.006115 0.276808 0.017397 0.012930 0.282091; 7 518 3 0.015315 0.007962 0.426757 0.023739 0.018704 0.436435; ```,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/592#issuecomment-277145466
https://github.com/psi4/psi4/pull/592#issuecomment-277145466:130,Energy Efficiency,energy,energy,130,Full tests pass except DCFT5/6 which attempts to compare the energy to 10 decimal places. On that note it looks like the SCF/CCSD energy difference is about 5.e-10 or so. Not too surprising since the one-electron integrals are slightly different. Might try to rig up a test where we check the norm between the current and previous versions matrix elements for large basis sets and heavy atoms. ```; # 6 core update; nbf ntrial ao_overlap ao_kinetic ao_potential so_overlap so_kinetic so_potential; 0 28 1275 0.001758 0.000034 0.001248 0.001832 0.000177 0.001438; 1 98 104 0.002072 0.000253 0.004509 0.002503 0.000808 0.005072; 2 168 35 0.002780 0.000696 0.017807 0.003713 0.001938 0.019500; 3 238 17 0.003789 0.001310 0.044333 0.005827 0.003503 0.047694; 4 308 10 0.005321 0.002705 0.093579 0.009500 0.006423 0.096568; 5 378 6 0.007993 0.004080 0.178422 0.012842 0.009268 0.173306; 6 448 4 0.011465 0.006115 0.276808 0.017397 0.012930 0.282091; 7 518 3 0.015315 0.007962 0.426757 0.023739 0.018704 0.436435; ```,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/592#issuecomment-277145466
https://github.com/psi4/psi4/pull/592#issuecomment-277145466:5,Testability,test,tests,5,Full tests pass except DCFT5/6 which attempts to compare the energy to 10 decimal places. On that note it looks like the SCF/CCSD energy difference is about 5.e-10 or so. Not too surprising since the one-electron integrals are slightly different. Might try to rig up a test where we check the norm between the current and previous versions matrix elements for large basis sets and heavy atoms. ```; # 6 core update; nbf ntrial ao_overlap ao_kinetic ao_potential so_overlap so_kinetic so_potential; 0 28 1275 0.001758 0.000034 0.001248 0.001832 0.000177 0.001438; 1 98 104 0.002072 0.000253 0.004509 0.002503 0.000808 0.005072; 2 168 35 0.002780 0.000696 0.017807 0.003713 0.001938 0.019500; 3 238 17 0.003789 0.001310 0.044333 0.005827 0.003503 0.047694; 4 308 10 0.005321 0.002705 0.093579 0.009500 0.006423 0.096568; 5 378 6 0.007993 0.004080 0.178422 0.012842 0.009268 0.173306; 6 448 4 0.011465 0.006115 0.276808 0.017397 0.012930 0.282091; 7 518 3 0.015315 0.007962 0.426757 0.023739 0.018704 0.436435; ```,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/592#issuecomment-277145466
https://github.com/psi4/psi4/pull/592#issuecomment-277145466:269,Testability,test,test,269,Full tests pass except DCFT5/6 which attempts to compare the energy to 10 decimal places. On that note it looks like the SCF/CCSD energy difference is about 5.e-10 or so. Not too surprising since the one-electron integrals are slightly different. Might try to rig up a test where we check the norm between the current and previous versions matrix elements for large basis sets and heavy atoms. ```; # 6 core update; nbf ntrial ao_overlap ao_kinetic ao_potential so_overlap so_kinetic so_potential; 0 28 1275 0.001758 0.000034 0.001248 0.001832 0.000177 0.001438; 1 98 104 0.002072 0.000253 0.004509 0.002503 0.000808 0.005072; 2 168 35 0.002780 0.000696 0.017807 0.003713 0.001938 0.019500; 3 238 17 0.003789 0.001310 0.044333 0.005827 0.003503 0.047694; 4 308 10 0.005321 0.002705 0.093579 0.009500 0.006423 0.096568; 5 378 6 0.007993 0.004080 0.178422 0.012842 0.009268 0.173306; 6 448 4 0.011465 0.006115 0.276808 0.017397 0.012930 0.282091; 7 518 3 0.015315 0.007962 0.426757 0.023739 0.018704 0.436435; ```,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/592#issuecomment-277145466
https://github.com/psi4/psi4/pull/592#issuecomment-277770423:83,Energy Efficiency,Energy,Energy,83,Taking the Krypton dimer at 3 angstroms with the def2-QZVP basis we get:. ```; SCF Energy difference: 7.1e-10 [hartree]; AO potential norm: 2.1e-8; AO max diff: 5.1e-9. AO ERI norm: 4.6e-8; AO ERI max diff: 2.0e-9; ```. Kr is nice and heavy with up to G functions. We could test something like aug-cc-pVDZ-RI for H and I functions.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/592#issuecomment-277770423
https://github.com/psi4/psi4/pull/592#issuecomment-277770423:274,Testability,test,test,274,Taking the Krypton dimer at 3 angstroms with the def2-QZVP basis we get:. ```; SCF Energy difference: 7.1e-10 [hartree]; AO potential norm: 2.1e-8; AO max diff: 5.1e-9. AO ERI norm: 4.6e-8; AO ERI max diff: 2.0e-9; ```. Kr is nice and heavy with up to G functions. We could test something like aug-cc-pVDZ-RI for H and I functions.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/592#issuecomment-277770423
https://github.com/psi4/psi4/pull/592#issuecomment-418167798:44,Availability,error,errors,44,From Andy: current status is that the 1e-10 errors are suspect. Want to use Ben's MIRP https://github.com/MolSSI/MIRP to gauge what's right and see if they're acceptable. Good miniproject.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/592#issuecomment-418167798
https://github.com/psi4/psi4/pull/593#issuecomment-293693404:23,Deployability,patch,patches,23,"@loriab: the following patches to `psi4/share/psi4/plugin/ambit/CMakeLists.txt.template` should fix the above problem. Can you try it when you have a chance?. line 54; ```; extern ""C""; SharedWavefunction @plugin@(SharedWavefunction ref_wfn, Options &options); {; using namespace ambit;. ambit::initialize(); // <== add; ```. line 181:; ```; //B.print();. ambit::finalize(); // <== add. return ref_wfn;; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/593#issuecomment-293693404
https://github.com/psi4/psi4/pull/593#issuecomment-293693404:51,Modifiability,plugin,plugin,51,"@loriab: the following patches to `psi4/share/psi4/plugin/ambit/CMakeLists.txt.template` should fix the above problem. Can you try it when you have a chance?. line 54; ```; extern ""C""; SharedWavefunction @plugin@(SharedWavefunction ref_wfn, Options &options); {; using namespace ambit;. ambit::initialize(); // <== add; ```. line 181:; ```; //B.print();. ambit::finalize(); // <== add. return ref_wfn;; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/593#issuecomment-293693404
https://github.com/psi4/psi4/pull/593#issuecomment-293693404:205,Modifiability,plugin,plugin,205,"@loriab: the following patches to `psi4/share/psi4/plugin/ambit/CMakeLists.txt.template` should fix the above problem. Can you try it when you have a chance?. line 54; ```; extern ""C""; SharedWavefunction @plugin@(SharedWavefunction ref_wfn, Options &options); {; using namespace ambit;. ambit::initialize(); // <== add; ```. line 181:; ```; //B.print();. ambit::finalize(); // <== add. return ref_wfn;; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/593#issuecomment-293693404
https://github.com/psi4/psi4/pull/594#issuecomment-276026020:522,Deployability,update,update,522,"# [Codecov](https://codecov.io/gh/psi4/psi4/pull/594?src=pr&el=h1) Report; > :exclamation: No coverage uploaded for pull request base (`master@51ebbbd`). ------. [Continue to review full report at Codecov](https://codecov.io/gh/psi4/psi4/pull/594?src=pr&el=continue).; > **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta); > `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`; > Powered by [Codecov](https://codecov.io/gh/psi4/psi4/pull/594?src=pr&el=footer). Last update [51ebbbd...410be6f](https://codecov.io/gh/psi4/psi4/compare/51ebbbd3257f39b516004b987f2ca650a036c320...410be6f525e84987e109ad06e4af65f2dbc289f0?el=footer&src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/594#issuecomment-276026020
https://github.com/psi4/psi4/pull/594#issuecomment-276026020:436,Energy Efficiency,Power,Powered,436,"# [Codecov](https://codecov.io/gh/psi4/psi4/pull/594?src=pr&el=h1) Report; > :exclamation: No coverage uploaded for pull request base (`master@51ebbbd`). ------. [Continue to review full report at Codecov](https://codecov.io/gh/psi4/psi4/pull/594?src=pr&el=continue).; > **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta); > `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`; > Powered by [Codecov](https://codecov.io/gh/psi4/psi4/pull/594?src=pr&el=footer). Last update [51ebbbd...410be6f](https://codecov.io/gh/psi4/psi4/compare/51ebbbd3257f39b516004b987f2ca650a036c320...410be6f525e84987e109ad06e4af65f2dbc289f0?el=footer&src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/594#issuecomment-276026020
https://github.com/psi4/psi4/pull/594#issuecomment-276026020:299,Usability,learn,learn,299,"# [Codecov](https://codecov.io/gh/psi4/psi4/pull/594?src=pr&el=h1) Report; > :exclamation: No coverage uploaded for pull request base (`master@51ebbbd`). ------. [Continue to review full report at Codecov](https://codecov.io/gh/psi4/psi4/pull/594?src=pr&el=continue).; > **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta); > `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`; > Powered by [Codecov](https://codecov.io/gh/psi4/psi4/pull/594?src=pr&el=footer). Last update [51ebbbd...410be6f](https://codecov.io/gh/psi4/psi4/compare/51ebbbd3257f39b516004b987f2ca650a036c320...410be6f525e84987e109ad06e4af65f2dbc289f0?el=footer&src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/594#issuecomment-276026020
https://github.com/psi4/psi4/pull/594#issuecomment-276211311:546,Deployability,install,installation,546,">>> I apologize for being overly slow on the promised PCMSolver CMake overhaul. No problem. By the time I got Lapack, CheMPS2, libefp, and Psi4 back on speaking terms, it seemed easiest to just do a decent pass at the psi4 interface with ambit and PCMSolver, then let you and Jet concentrate on the parts you know better than me. >>> What do you mean by ""I'd rather have pcmsolver as a proper module containing init, pcmsolver, getkw, etc., but that would mess with other codes use of pcmsolver, I suspect""?. I meant that it'd be nice to have an installation dir structure like the below where there's an outer pcmsolver module/namespace.; ```; here/pcmsolver/; here/pcmsolver/__init__.py; here/pcmsolver/pcmsolver.py; here/pcmsolver/getkw.py; ...; ```; Then `sys.path('here')` is the operation, and psi4 does `import pcmsolver; pcmsolver.pcmsolver.parse_pcm_input('pcmsolver.inp')` or whatever and all the getkw and codata are within the pcmsolver namespace. At present, one does `sys.path('here/pcmsolver')` and everything's in the outer namespace. The anticipated problem with other codes is that what I want would probably involve some `from . import getkw` and other codes might be depending on the `import getkw` structure. >>> I can fix the linking problems (see comment on psi4/src/psi4/libscf_solver/CMakeLists.txt) Should I fork you fork? Should I make the changes from the web-interface on the pcm branch of your fork?. As mentioned above, direct commit, web interface, whatever's most convenient.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/594#issuecomment-276211311
https://github.com/psi4/psi4/pull/594#issuecomment-276211311:223,Integrability,interface,interface,223,">>> I apologize for being overly slow on the promised PCMSolver CMake overhaul. No problem. By the time I got Lapack, CheMPS2, libefp, and Psi4 back on speaking terms, it seemed easiest to just do a decent pass at the psi4 interface with ambit and PCMSolver, then let you and Jet concentrate on the parts you know better than me. >>> What do you mean by ""I'd rather have pcmsolver as a proper module containing init, pcmsolver, getkw, etc., but that would mess with other codes use of pcmsolver, I suspect""?. I meant that it'd be nice to have an installation dir structure like the below where there's an outer pcmsolver module/namespace.; ```; here/pcmsolver/; here/pcmsolver/__init__.py; here/pcmsolver/pcmsolver.py; here/pcmsolver/getkw.py; ...; ```; Then `sys.path('here')` is the operation, and psi4 does `import pcmsolver; pcmsolver.pcmsolver.parse_pcm_input('pcmsolver.inp')` or whatever and all the getkw and codata are within the pcmsolver namespace. At present, one does `sys.path('here/pcmsolver')` and everything's in the outer namespace. The anticipated problem with other codes is that what I want would probably involve some `from . import getkw` and other codes might be depending on the `import getkw` structure. >>> I can fix the linking problems (see comment on psi4/src/psi4/libscf_solver/CMakeLists.txt) Should I fork you fork? Should I make the changes from the web-interface on the pcm branch of your fork?. As mentioned above, direct commit, web interface, whatever's most convenient.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/594#issuecomment-276211311
https://github.com/psi4/psi4/pull/594#issuecomment-276211311:1187,Integrability,depend,depending,1187,">>> I apologize for being overly slow on the promised PCMSolver CMake overhaul. No problem. By the time I got Lapack, CheMPS2, libefp, and Psi4 back on speaking terms, it seemed easiest to just do a decent pass at the psi4 interface with ambit and PCMSolver, then let you and Jet concentrate on the parts you know better than me. >>> What do you mean by ""I'd rather have pcmsolver as a proper module containing init, pcmsolver, getkw, etc., but that would mess with other codes use of pcmsolver, I suspect""?. I meant that it'd be nice to have an installation dir structure like the below where there's an outer pcmsolver module/namespace.; ```; here/pcmsolver/; here/pcmsolver/__init__.py; here/pcmsolver/pcmsolver.py; here/pcmsolver/getkw.py; ...; ```; Then `sys.path('here')` is the operation, and psi4 does `import pcmsolver; pcmsolver.pcmsolver.parse_pcm_input('pcmsolver.inp')` or whatever and all the getkw and codata are within the pcmsolver namespace. At present, one does `sys.path('here/pcmsolver')` and everything's in the outer namespace. The anticipated problem with other codes is that what I want would probably involve some `from . import getkw` and other codes might be depending on the `import getkw` structure. >>> I can fix the linking problems (see comment on psi4/src/psi4/libscf_solver/CMakeLists.txt) Should I fork you fork? Should I make the changes from the web-interface on the pcm branch of your fork?. As mentioned above, direct commit, web interface, whatever's most convenient.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/594#issuecomment-276211311
https://github.com/psi4/psi4/pull/594#issuecomment-276211311:1388,Integrability,interface,interface,1388,">>> I apologize for being overly slow on the promised PCMSolver CMake overhaul. No problem. By the time I got Lapack, CheMPS2, libefp, and Psi4 back on speaking terms, it seemed easiest to just do a decent pass at the psi4 interface with ambit and PCMSolver, then let you and Jet concentrate on the parts you know better than me. >>> What do you mean by ""I'd rather have pcmsolver as a proper module containing init, pcmsolver, getkw, etc., but that would mess with other codes use of pcmsolver, I suspect""?. I meant that it'd be nice to have an installation dir structure like the below where there's an outer pcmsolver module/namespace.; ```; here/pcmsolver/; here/pcmsolver/__init__.py; here/pcmsolver/pcmsolver.py; here/pcmsolver/getkw.py; ...; ```; Then `sys.path('here')` is the operation, and psi4 does `import pcmsolver; pcmsolver.pcmsolver.parse_pcm_input('pcmsolver.inp')` or whatever and all the getkw and codata are within the pcmsolver namespace. At present, one does `sys.path('here/pcmsolver')` and everything's in the outer namespace. The anticipated problem with other codes is that what I want would probably involve some `from . import getkw` and other codes might be depending on the `import getkw` structure. >>> I can fix the linking problems (see comment on psi4/src/psi4/libscf_solver/CMakeLists.txt) Should I fork you fork? Should I make the changes from the web-interface on the pcm branch of your fork?. As mentioned above, direct commit, web interface, whatever's most convenient.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/594#issuecomment-276211311
https://github.com/psi4/psi4/pull/594#issuecomment-276211311:1470,Integrability,interface,interface,1470,">>> I apologize for being overly slow on the promised PCMSolver CMake overhaul. No problem. By the time I got Lapack, CheMPS2, libefp, and Psi4 back on speaking terms, it seemed easiest to just do a decent pass at the psi4 interface with ambit and PCMSolver, then let you and Jet concentrate on the parts you know better than me. >>> What do you mean by ""I'd rather have pcmsolver as a proper module containing init, pcmsolver, getkw, etc., but that would mess with other codes use of pcmsolver, I suspect""?. I meant that it'd be nice to have an installation dir structure like the below where there's an outer pcmsolver module/namespace.; ```; here/pcmsolver/; here/pcmsolver/__init__.py; here/pcmsolver/pcmsolver.py; here/pcmsolver/getkw.py; ...; ```; Then `sys.path('here')` is the operation, and psi4 does `import pcmsolver; pcmsolver.pcmsolver.parse_pcm_input('pcmsolver.inp')` or whatever and all the getkw and codata are within the pcmsolver namespace. At present, one does `sys.path('here/pcmsolver')` and everything's in the outer namespace. The anticipated problem with other codes is that what I want would probably involve some `from . import getkw` and other codes might be depending on the `import getkw` structure. >>> I can fix the linking problems (see comment on psi4/src/psi4/libscf_solver/CMakeLists.txt) Should I fork you fork? Should I make the changes from the web-interface on the pcm branch of your fork?. As mentioned above, direct commit, web interface, whatever's most convenient.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/594#issuecomment-276211311
https://github.com/psi4/psi4/pull/594#issuecomment-276302044:135,Security,access,access,135,"OK, I see _viz_ ""pcmsolver as proper module"" I'll stack it on my TODO list. And it should be no problem for other projects, which only access `pcmsolver.py` anyway.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/594#issuecomment-276302044
https://github.com/psi4/psi4/pull/594#issuecomment-276344285:180,Testability,log,logs,180,"The Travis builds timed out... Would it be possible for you to restart just the last one?; Distelli, on the other hand, seems to have worked fine. Can I have a look at those build logs?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/594#issuecomment-276344285
https://github.com/psi4/psi4/pull/594#issuecomment-276525583:45,Availability,error,error,45,"@robertodr , that seeming GCC version symbol error you reported earlier somehow came about because [psipcm was unlinked](https://github.com/psi4/psi4/pull/594/commits/f89d42b517564f4f46918488554ef889d10b9a16#diff-938e23f9a1850388684b9681e0db1a4aL14). I'll push a correction shortly. This branch (pcm) seems to have gotten commits from upstream master added not at the base. Abandoning it and pushing a new branch and PR, this one still atop lapack branch but not atop ambit.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/594#issuecomment-276525583
https://github.com/psi4/psi4/pull/595#issuecomment-276187772:123,Safety,timeout,timeout,123,Lets pull this in and see how it effects PR's. I wonder if we should knocked out Clang 3.9 at the same time as it seems to timeout more than anything else at the moment.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/595#issuecomment-276187772
https://github.com/psi4/psi4/issues/596#issuecomment-276463125:1203,Energy Efficiency,energy,energy,1203,"```; molecule {; 0 1; symmetry c1; Mn -0.0128264866 -0.0002779912 -0.1091894544; O -1.1037647823 1.0246639195 -1.2821459116; O -0.4319309790 -1.5910632792 -1.0423314985; N 0.7243918073 1.6205280457 0.7709992473; N 1.3008767173 -0.9287768925 1.0635839133; C -1.2886186814 2.2834208702 -1.2181338272; C -0.7050865946 3.1821062059 -0.3604271375; C 0.3534920334 2.8195308082 0.5207059889; C 0.2177419816 -2.6945497951 -0.9662726987; C 1.2181378357 -3.0250490115 -0.0961995911; C 1.7180430400 -2.1229929449 0.8899899444; C 1.9393113446 1.3525171542 1.5367699106; C 1.8333722479 -0.0604962603 2.1055467704; H 0.8908035853 3.6241374839 1.0039698993; H 2.5024254412 -2.4854165868 1.5399007635; H 2.7858100041 1.4098930461 0.8661311665; H 1.1490336627 -0.0652673733 2.9502674019; H 2.0638511115 2.0769335299 2.3353274192; H 2.7993768711 -0.4085469833 2.4534782102; H -1.9892347032 2.6686747336 -1.9454961675; H -0.0986239324 -3.4441353556 -1.6764363233; Cl 1.8821942342 0.3098852687 -1.6599082362; O -1.1395010178 -0.1703680057 0.9263551082; H -0.9312248148 4.2251864392 -0.4696082573; H 1.6695378989 -3.9953914470 -0.1633815245; }. # Run SCF; set basis 6-31G*; set scf_type pk; set soscf true; scf_e, scf_wfn = energy('scf', return_wfn=True); ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/596#issuecomment-276463125
https://github.com/psi4/psi4/issues/596#issuecomment-277489656:491,Availability,error,error,491,"Mmh, how many parallel processes do you have ? aio_handler.cc spawns a new thread that is specifically for writing the integrals to disk. When there is no writing left to do, the thread should die, and a new one is generated when further writing is needed. Here it looks like it's trying to generate the thread when it already exists... Or maybe the threads are not properly dying, and it gets to the maximum number of threads. Does your computation seem to proceed normally in spite of the error message ?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/596#issuecomment-277489656
https://github.com/psi4/psi4/issues/596#issuecomment-277489656:497,Integrability,message,message,497,"Mmh, how many parallel processes do you have ? aio_handler.cc spawns a new thread that is specifically for writing the integrals to disk. When there is no writing left to do, the thread should die, and a new one is generated when further writing is needed. Here it looks like it's trying to generate the thread when it already exists... Or maybe the threads are not properly dying, and it gets to the maximum number of threads. Does your computation seem to proceed normally in spite of the error message ?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/596#issuecomment-277489656
https://github.com/psi4/psi4/issues/596#issuecomment-277502940:304,Availability,error,error,304,"Ok, thank you Susi. @loriab I see that you have added a synchronization step in AIOHandler::write, see former commit id c205621. Do you remember the reason for that ? As far as I can remember, the way AIOHandler is designed we should never need a synchronization here. @jturney From the git history, the error message Susi is seeing was added by you during KTB. Do you remember why you put it there ?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/596#issuecomment-277502940
https://github.com/psi4/psi4/issues/596#issuecomment-277502940:56,Integrability,synchroniz,synchronization,56,"Ok, thank you Susi. @loriab I see that you have added a synchronization step in AIOHandler::write, see former commit id c205621. Do you remember the reason for that ? As far as I can remember, the way AIOHandler is designed we should never need a synchronization here. @jturney From the git history, the error message Susi is seeing was added by you during KTB. Do you remember why you put it there ?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/596#issuecomment-277502940
https://github.com/psi4/psi4/issues/596#issuecomment-277502940:247,Integrability,synchroniz,synchronization,247,"Ok, thank you Susi. @loriab I see that you have added a synchronization step in AIOHandler::write, see former commit id c205621. Do you remember the reason for that ? As far as I can remember, the way AIOHandler is designed we should never need a synchronization here. @jturney From the git history, the error message Susi is seeing was added by you during KTB. Do you remember why you put it there ?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/596#issuecomment-277502940
https://github.com/psi4/psi4/issues/596#issuecomment-277502940:310,Integrability,message,message,310,"Ok, thank you Susi. @loriab I see that you have added a synchronization step in AIOHandler::write, see former commit id c205621. Do you remember the reason for that ? As far as I can remember, the way AIOHandler is designed we should never need a synchronization here. @jturney From the git history, the error message Susi is seeing was added by you during KTB. Do you remember why you put it there ?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/596#issuecomment-277502940
https://github.com/psi4/psi4/issues/596#issuecomment-277503822:41,Availability,error,error,41,"I remember the episode but not the exact error (though it was in sapt and cubeprop tests). Something about pybind's behavior being less forgiving than boost's. Also psi4 modules behaved differently wrt how much control they took upon themselves vs giving to the AIOHandler lib. I think I standardized that aspect a bit. Good news is that I think you can adjust the synchronization again, so long as the tests pass (since it was broken test cases before that prompted the change). Or the inversion may have spontaneously healed the problem.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/596#issuecomment-277503822
https://github.com/psi4/psi4/issues/596#issuecomment-277503822:365,Integrability,synchroniz,synchronization,365,"I remember the episode but not the exact error (though it was in sapt and cubeprop tests). Something about pybind's behavior being less forgiving than boost's. Also psi4 modules behaved differently wrt how much control they took upon themselves vs giving to the AIOHandler lib. I think I standardized that aspect a bit. Good news is that I think you can adjust the synchronization again, so long as the tests pass (since it was broken test cases before that prompted the change). Or the inversion may have spontaneously healed the problem.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/596#issuecomment-277503822
https://github.com/psi4/psi4/issues/596#issuecomment-277503822:83,Testability,test,tests,83,"I remember the episode but not the exact error (though it was in sapt and cubeprop tests). Something about pybind's behavior being less forgiving than boost's. Also psi4 modules behaved differently wrt how much control they took upon themselves vs giving to the AIOHandler lib. I think I standardized that aspect a bit. Good news is that I think you can adjust the synchronization again, so long as the tests pass (since it was broken test cases before that prompted the change). Or the inversion may have spontaneously healed the problem.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/596#issuecomment-277503822
https://github.com/psi4/psi4/issues/596#issuecomment-277503822:403,Testability,test,tests,403,"I remember the episode but not the exact error (though it was in sapt and cubeprop tests). Something about pybind's behavior being less forgiving than boost's. Also psi4 modules behaved differently wrt how much control they took upon themselves vs giving to the AIOHandler lib. I think I standardized that aspect a bit. Good news is that I think you can adjust the synchronization again, so long as the tests pass (since it was broken test cases before that prompted the change). Or the inversion may have spontaneously healed the problem.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/596#issuecomment-277503822
https://github.com/psi4/psi4/issues/596#issuecomment-277503822:435,Testability,test,test,435,"I remember the episode but not the exact error (though it was in sapt and cubeprop tests). Something about pybind's behavior being less forgiving than boost's. Also psi4 modules behaved differently wrt how much control they took upon themselves vs giving to the AIOHandler lib. I think I standardized that aspect a bit. Good news is that I think you can adjust the synchronization again, so long as the tests pass (since it was broken test cases before that prompted the change). Or the inversion may have spontaneously healed the problem.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/596#issuecomment-277503822
https://github.com/psi4/psi4/issues/596#issuecomment-278105814:89,Availability,error,error,89,"Just a little update: unless jturney has an opposition, I think we can safely delete the error message. I'm now trying to clean up the synchronization issues. I found the problem with cubeprop, and I'm working on the errors in the sapt tests, which seem to be even more subtle.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/596#issuecomment-278105814
https://github.com/psi4/psi4/issues/596#issuecomment-278105814:217,Availability,error,errors,217,"Just a little update: unless jturney has an opposition, I think we can safely delete the error message. I'm now trying to clean up the synchronization issues. I found the problem with cubeprop, and I'm working on the errors in the sapt tests, which seem to be even more subtle.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/596#issuecomment-278105814
https://github.com/psi4/psi4/issues/596#issuecomment-278105814:14,Deployability,update,update,14,"Just a little update: unless jturney has an opposition, I think we can safely delete the error message. I'm now trying to clean up the synchronization issues. I found the problem with cubeprop, and I'm working on the errors in the sapt tests, which seem to be even more subtle.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/596#issuecomment-278105814
https://github.com/psi4/psi4/issues/596#issuecomment-278105814:95,Integrability,message,message,95,"Just a little update: unless jturney has an opposition, I think we can safely delete the error message. I'm now trying to clean up the synchronization issues. I found the problem with cubeprop, and I'm working on the errors in the sapt tests, which seem to be even more subtle.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/596#issuecomment-278105814
https://github.com/psi4/psi4/issues/596#issuecomment-278105814:135,Integrability,synchroniz,synchronization,135,"Just a little update: unless jturney has an opposition, I think we can safely delete the error message. I'm now trying to clean up the synchronization issues. I found the problem with cubeprop, and I'm working on the errors in the sapt tests, which seem to be even more subtle.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/596#issuecomment-278105814
https://github.com/psi4/psi4/issues/596#issuecomment-278105814:71,Safety,safe,safely,71,"Just a little update: unless jturney has an opposition, I think we can safely delete the error message. I'm now trying to clean up the synchronization issues. I found the problem with cubeprop, and I'm working on the errors in the sapt tests, which seem to be even more subtle.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/596#issuecomment-278105814
https://github.com/psi4/psi4/issues/596#issuecomment-278105814:236,Testability,test,tests,236,"Just a little update: unless jturney has an opposition, I think we can safely delete the error message. I'm now trying to clean up the synchronization issues. I found the problem with cubeprop, and I'm working on the errors in the sapt tests, which seem to be even more subtle.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/596#issuecomment-278105814
https://github.com/psi4/psi4/issues/596#issuecomment-278176196:92,Availability,error,errors,92,"@loriab, @jturney : Problem fixed. Deleting synchronization in AIOHandler::write, I saw the errors you mentioned, Lori. The error in cubeprop was caused by the threads not being joined before they were destroyed (Boost automatically called detach() in the thread destructors). After adding synchronization everywhere, the cubeprop error disappears.; Then, sapt2, sapt3 and sapt6 had errors. These ones were caused by threads being joined twice when the user called synchronize on AIOHandler. That is now fixed by having synchronize() check wether the threads are joinable or not. I believe threads are now properly managed by AIOHandler.; @susilehtola : the error message you saw will not appear after PR #609 is accepted. Thanks for reporting it!",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/596#issuecomment-278176196
https://github.com/psi4/psi4/issues/596#issuecomment-278176196:124,Availability,error,error,124,"@loriab, @jturney : Problem fixed. Deleting synchronization in AIOHandler::write, I saw the errors you mentioned, Lori. The error in cubeprop was caused by the threads not being joined before they were destroyed (Boost automatically called detach() in the thread destructors). After adding synchronization everywhere, the cubeprop error disappears.; Then, sapt2, sapt3 and sapt6 had errors. These ones were caused by threads being joined twice when the user called synchronize on AIOHandler. That is now fixed by having synchronize() check wether the threads are joinable or not. I believe threads are now properly managed by AIOHandler.; @susilehtola : the error message you saw will not appear after PR #609 is accepted. Thanks for reporting it!",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/596#issuecomment-278176196
https://github.com/psi4/psi4/issues/596#issuecomment-278176196:331,Availability,error,error,331,"@loriab, @jturney : Problem fixed. Deleting synchronization in AIOHandler::write, I saw the errors you mentioned, Lori. The error in cubeprop was caused by the threads not being joined before they were destroyed (Boost automatically called detach() in the thread destructors). After adding synchronization everywhere, the cubeprop error disappears.; Then, sapt2, sapt3 and sapt6 had errors. These ones were caused by threads being joined twice when the user called synchronize on AIOHandler. That is now fixed by having synchronize() check wether the threads are joinable or not. I believe threads are now properly managed by AIOHandler.; @susilehtola : the error message you saw will not appear after PR #609 is accepted. Thanks for reporting it!",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/596#issuecomment-278176196
https://github.com/psi4/psi4/issues/596#issuecomment-278176196:383,Availability,error,errors,383,"@loriab, @jturney : Problem fixed. Deleting synchronization in AIOHandler::write, I saw the errors you mentioned, Lori. The error in cubeprop was caused by the threads not being joined before they were destroyed (Boost automatically called detach() in the thread destructors). After adding synchronization everywhere, the cubeprop error disappears.; Then, sapt2, sapt3 and sapt6 had errors. These ones were caused by threads being joined twice when the user called synchronize on AIOHandler. That is now fixed by having synchronize() check wether the threads are joinable or not. I believe threads are now properly managed by AIOHandler.; @susilehtola : the error message you saw will not appear after PR #609 is accepted. Thanks for reporting it!",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/596#issuecomment-278176196
https://github.com/psi4/psi4/issues/596#issuecomment-278176196:658,Availability,error,error,658,"@loriab, @jturney : Problem fixed. Deleting synchronization in AIOHandler::write, I saw the errors you mentioned, Lori. The error in cubeprop was caused by the threads not being joined before they were destroyed (Boost automatically called detach() in the thread destructors). After adding synchronization everywhere, the cubeprop error disappears.; Then, sapt2, sapt3 and sapt6 had errors. These ones were caused by threads being joined twice when the user called synchronize on AIOHandler. That is now fixed by having synchronize() check wether the threads are joinable or not. I believe threads are now properly managed by AIOHandler.; @susilehtola : the error message you saw will not appear after PR #609 is accepted. Thanks for reporting it!",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/596#issuecomment-278176196
https://github.com/psi4/psi4/issues/596#issuecomment-278176196:44,Integrability,synchroniz,synchronization,44,"@loriab, @jturney : Problem fixed. Deleting synchronization in AIOHandler::write, I saw the errors you mentioned, Lori. The error in cubeprop was caused by the threads not being joined before they were destroyed (Boost automatically called detach() in the thread destructors). After adding synchronization everywhere, the cubeprop error disappears.; Then, sapt2, sapt3 and sapt6 had errors. These ones were caused by threads being joined twice when the user called synchronize on AIOHandler. That is now fixed by having synchronize() check wether the threads are joinable or not. I believe threads are now properly managed by AIOHandler.; @susilehtola : the error message you saw will not appear after PR #609 is accepted. Thanks for reporting it!",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/596#issuecomment-278176196
https://github.com/psi4/psi4/issues/596#issuecomment-278176196:290,Integrability,synchroniz,synchronization,290,"@loriab, @jturney : Problem fixed. Deleting synchronization in AIOHandler::write, I saw the errors you mentioned, Lori. The error in cubeprop was caused by the threads not being joined before they were destroyed (Boost automatically called detach() in the thread destructors). After adding synchronization everywhere, the cubeprop error disappears.; Then, sapt2, sapt3 and sapt6 had errors. These ones were caused by threads being joined twice when the user called synchronize on AIOHandler. That is now fixed by having synchronize() check wether the threads are joinable or not. I believe threads are now properly managed by AIOHandler.; @susilehtola : the error message you saw will not appear after PR #609 is accepted. Thanks for reporting it!",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/596#issuecomment-278176196
https://github.com/psi4/psi4/issues/596#issuecomment-278176196:465,Integrability,synchroniz,synchronize,465,"@loriab, @jturney : Problem fixed. Deleting synchronization in AIOHandler::write, I saw the errors you mentioned, Lori. The error in cubeprop was caused by the threads not being joined before they were destroyed (Boost automatically called detach() in the thread destructors). After adding synchronization everywhere, the cubeprop error disappears.; Then, sapt2, sapt3 and sapt6 had errors. These ones were caused by threads being joined twice when the user called synchronize on AIOHandler. That is now fixed by having synchronize() check wether the threads are joinable or not. I believe threads are now properly managed by AIOHandler.; @susilehtola : the error message you saw will not appear after PR #609 is accepted. Thanks for reporting it!",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/596#issuecomment-278176196
https://github.com/psi4/psi4/issues/596#issuecomment-278176196:520,Integrability,synchroniz,synchronize,520,"@loriab, @jturney : Problem fixed. Deleting synchronization in AIOHandler::write, I saw the errors you mentioned, Lori. The error in cubeprop was caused by the threads not being joined before they were destroyed (Boost automatically called detach() in the thread destructors). After adding synchronization everywhere, the cubeprop error disappears.; Then, sapt2, sapt3 and sapt6 had errors. These ones were caused by threads being joined twice when the user called synchronize on AIOHandler. That is now fixed by having synchronize() check wether the threads are joinable or not. I believe threads are now properly managed by AIOHandler.; @susilehtola : the error message you saw will not appear after PR #609 is accepted. Thanks for reporting it!",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/596#issuecomment-278176196
https://github.com/psi4/psi4/issues/596#issuecomment-278176196:664,Integrability,message,message,664,"@loriab, @jturney : Problem fixed. Deleting synchronization in AIOHandler::write, I saw the errors you mentioned, Lori. The error in cubeprop was caused by the threads not being joined before they were destroyed (Boost automatically called detach() in the thread destructors). After adding synchronization everywhere, the cubeprop error disappears.; Then, sapt2, sapt3 and sapt6 had errors. These ones were caused by threads being joined twice when the user called synchronize on AIOHandler. That is now fixed by having synchronize() check wether the threads are joinable or not. I believe threads are now properly managed by AIOHandler.; @susilehtola : the error message you saw will not appear after PR #609 is accepted. Thanks for reporting it!",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/596#issuecomment-278176196
https://github.com/psi4/psi4/issues/597#issuecomment-276265704:104,Availability,error,error,104,"Yeah, I just realized that myself. But I'm pretty sure it shouldn't segfault, it should rather throw an error.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/597#issuecomment-276265704
https://github.com/psi4/psi4/issues/598#issuecomment-276286479:1240,Energy Efficiency,energy,energy,1240,"The calculation I'm trying to run is; ```; molecule {; 0 1; symmetry c1; Mn -0.0128264866 -0.0002779912 -0.1091894544; O -1.1037647823 1.0246639195 -1.2821459116; O -0.4319309790 -1.5910632792 -1.0423314985; N 0.7243918073 1.6205280457 0.7709992473; N 1.3008767173 -0.9287768925 1.0635839133; C -1.2886186814 2.2834208702 -1.2181338272; C -0.7050865946 3.1821062059 -0.3604271375; C 0.3534920334 2.8195308082 0.5207059889; C 0.2177419816 -2.6945497951 -0.9662726987; C 1.2181378357 -3.0250490115 -0.0961995911; C 1.7180430400 -2.1229929449 0.8899899444; C 1.9393113446 1.3525171542 1.5367699106; C 1.8333722479 -0.0604962603 2.1055467704; H 0.8908035853 3.6241374839 1.0039698993; H 2.5024254412 -2.4854165868 1.5399007635; H 2.7858100041 1.4098930461 0.8661311665; H 1.1490336627 -0.0652673733 2.9502674019; H 2.0638511115 2.0769335299 2.3353274192; H 2.7993768711 -0.4085469833 2.4534782102; H -1.9892347032 2.6686747336 -1.9454961675; H -0.0986239324 -3.4441353556 -1.6764363233; Cl 1.8821942342 0.3098852687 -1.6599082362; O -1.1395010178 -0.1703680057 0.9263551082; H -0.9312248148 4.2251864392 -0.4696082573; H 1.6695378989 -3.9953914470 -0.1633815245; }. # Run SCF; set basis 3-21G; set scf_type pk; set soscf true; scf_e, scf_wfn = energy('scf', return_wfn=True). # Guess active space orbitals: (20e,40o); set restricted_docc [49]; set active [40]; set nat_orbs true; ci_e, ci_wfn = energy('cisd', ref_wfn=scf_wfn, return_wfn=True). # Run (10e,10o) CASSCF; set frozen_docc [0]; set restricted_docc [64]; set active [10]; set nat_orbs true; cas_e, cas_wfn = energy('casscf', ref_wfn=ci_wfn, return_wfn=True); ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/598#issuecomment-276286479
https://github.com/psi4/psi4/issues/598#issuecomment-276286479:1391,Energy Efficiency,energy,energy,1391,"The calculation I'm trying to run is; ```; molecule {; 0 1; symmetry c1; Mn -0.0128264866 -0.0002779912 -0.1091894544; O -1.1037647823 1.0246639195 -1.2821459116; O -0.4319309790 -1.5910632792 -1.0423314985; N 0.7243918073 1.6205280457 0.7709992473; N 1.3008767173 -0.9287768925 1.0635839133; C -1.2886186814 2.2834208702 -1.2181338272; C -0.7050865946 3.1821062059 -0.3604271375; C 0.3534920334 2.8195308082 0.5207059889; C 0.2177419816 -2.6945497951 -0.9662726987; C 1.2181378357 -3.0250490115 -0.0961995911; C 1.7180430400 -2.1229929449 0.8899899444; C 1.9393113446 1.3525171542 1.5367699106; C 1.8333722479 -0.0604962603 2.1055467704; H 0.8908035853 3.6241374839 1.0039698993; H 2.5024254412 -2.4854165868 1.5399007635; H 2.7858100041 1.4098930461 0.8661311665; H 1.1490336627 -0.0652673733 2.9502674019; H 2.0638511115 2.0769335299 2.3353274192; H 2.7993768711 -0.4085469833 2.4534782102; H -1.9892347032 2.6686747336 -1.9454961675; H -0.0986239324 -3.4441353556 -1.6764363233; Cl 1.8821942342 0.3098852687 -1.6599082362; O -1.1395010178 -0.1703680057 0.9263551082; H -0.9312248148 4.2251864392 -0.4696082573; H 1.6695378989 -3.9953914470 -0.1633815245; }. # Run SCF; set basis 3-21G; set scf_type pk; set soscf true; scf_e, scf_wfn = energy('scf', return_wfn=True). # Guess active space orbitals: (20e,40o); set restricted_docc [49]; set active [40]; set nat_orbs true; ci_e, ci_wfn = energy('cisd', ref_wfn=scf_wfn, return_wfn=True). # Run (10e,10o) CASSCF; set frozen_docc [0]; set restricted_docc [64]; set active [10]; set nat_orbs true; cas_e, cas_wfn = energy('casscf', ref_wfn=ci_wfn, return_wfn=True); ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/598#issuecomment-276286479
https://github.com/psi4/psi4/issues/598#issuecomment-276286479:1565,Energy Efficiency,energy,energy,1565,"The calculation I'm trying to run is; ```; molecule {; 0 1; symmetry c1; Mn -0.0128264866 -0.0002779912 -0.1091894544; O -1.1037647823 1.0246639195 -1.2821459116; O -0.4319309790 -1.5910632792 -1.0423314985; N 0.7243918073 1.6205280457 0.7709992473; N 1.3008767173 -0.9287768925 1.0635839133; C -1.2886186814 2.2834208702 -1.2181338272; C -0.7050865946 3.1821062059 -0.3604271375; C 0.3534920334 2.8195308082 0.5207059889; C 0.2177419816 -2.6945497951 -0.9662726987; C 1.2181378357 -3.0250490115 -0.0961995911; C 1.7180430400 -2.1229929449 0.8899899444; C 1.9393113446 1.3525171542 1.5367699106; C 1.8333722479 -0.0604962603 2.1055467704; H 0.8908035853 3.6241374839 1.0039698993; H 2.5024254412 -2.4854165868 1.5399007635; H 2.7858100041 1.4098930461 0.8661311665; H 1.1490336627 -0.0652673733 2.9502674019; H 2.0638511115 2.0769335299 2.3353274192; H 2.7993768711 -0.4085469833 2.4534782102; H -1.9892347032 2.6686747336 -1.9454961675; H -0.0986239324 -3.4441353556 -1.6764363233; Cl 1.8821942342 0.3098852687 -1.6599082362; O -1.1395010178 -0.1703680057 0.9263551082; H -0.9312248148 4.2251864392 -0.4696082573; H 1.6695378989 -3.9953914470 -0.1633815245; }. # Run SCF; set basis 3-21G; set scf_type pk; set soscf true; scf_e, scf_wfn = energy('scf', return_wfn=True). # Guess active space orbitals: (20e,40o); set restricted_docc [49]; set active [40]; set nat_orbs true; ci_e, ci_wfn = energy('cisd', ref_wfn=scf_wfn, return_wfn=True). # Run (10e,10o) CASSCF; set frozen_docc [0]; set restricted_docc [64]; set active [10]; set nat_orbs true; cas_e, cas_wfn = energy('casscf', ref_wfn=ci_wfn, return_wfn=True); ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/598#issuecomment-276286479
https://github.com/psi4/psi4/issues/598#issuecomment-276377431:184,Deployability,toggle,toggled,184,"Different keywords that do the same thing really isnt in the Psi4 keyword ethos. I would suggest simply setting the `qc_module detci` keyword as you have done in the past. FNO code is toggled [here](https://github.com/psi4/psi4/blob/master/psi4/driver/procedures/proc.py#L918). However, without some kind of overhaul to support attributes this is unlikely to help you.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/598#issuecomment-276377431
https://github.com/psi4/psi4/issues/598#issuecomment-276377431:97,Usability,simpl,simply,97,"Different keywords that do the same thing really isnt in the Psi4 keyword ethos. I would suggest simply setting the `qc_module detci` keyword as you have done in the past. FNO code is toggled [here](https://github.com/psi4/psi4/blob/master/psi4/driver/procedures/proc.py#L918). However, without some kind of overhaul to support attributes this is unlikely to help you.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/598#issuecomment-276377431
https://github.com/psi4/psi4/pull/599#issuecomment-276601209:146,Deployability,update,update,146,"Can you grant me write access to your fork of PCMSolver?; 1. I already use the OpenMP Autocmake module, just not its latest version, which I will update.; 2. Testing for Python 3 support will be easier starting from your current version than the mess I currently have on my development branch... :disappointed: . The Travis and Distelli builds are not building PCMSolver, neither are they running the `pcmsolver` tests in Psi4. Am I missing something here?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/599#issuecomment-276601209
https://github.com/psi4/psi4/pull/599#issuecomment-276601209:23,Security,access,access,23,"Can you grant me write access to your fork of PCMSolver?; 1. I already use the OpenMP Autocmake module, just not its latest version, which I will update.; 2. Testing for Python 3 support will be easier starting from your current version than the mess I currently have on my development branch... :disappointed: . The Travis and Distelli builds are not building PCMSolver, neither are they running the `pcmsolver` tests in Psi4. Am I missing something here?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/599#issuecomment-276601209
https://github.com/psi4/psi4/pull/599#issuecomment-276601209:158,Testability,Test,Testing,158,"Can you grant me write access to your fork of PCMSolver?; 1. I already use the OpenMP Autocmake module, just not its latest version, which I will update.; 2. Testing for Python 3 support will be easier starting from your current version than the mess I currently have on my development branch... :disappointed: . The Travis and Distelli builds are not building PCMSolver, neither are they running the `pcmsolver` tests in Psi4. Am I missing something here?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/599#issuecomment-276601209
https://github.com/psi4/psi4/pull/599#issuecomment-276601209:413,Testability,test,tests,413,"Can you grant me write access to your fork of PCMSolver?; 1. I already use the OpenMP Autocmake module, just not its latest version, which I will update.; 2. Testing for Python 3 support will be easier starting from your current version than the mess I currently have on my development branch... :disappointed: . The Travis and Distelli builds are not building PCMSolver, neither are they running the `pcmsolver` tests in Psi4. Am I missing something here?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/599#issuecomment-276601209
https://github.com/psi4/psi4/pull/599#issuecomment-276677358:354,Availability,down,downloaded,354,"@robertodr ; Thanks on looking at Py3 and updating the autocmake omp. And go ahead and set `ENABLE_64BIT_INTEGERS` and anything else to sensible values. You're correct that Distelli and Travis are testing _only_ Psi4, not any addons. In fact, the addons it does test (libint, libefp, gdma) aren't getting built either. Rather (for Travis at least), it's downloaded prebuilt conda packages and just doing integration testing. PCMSolver compiles _really_ slowly (at least Release with Intel compilers), and we can't afford that. But once PCMSolver is up and running and packaged again, it can be added to the integration tests. We can certainly afford a fast test case or two.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/599#issuecomment-276677358
https://github.com/psi4/psi4/pull/599#issuecomment-276677358:404,Deployability,integrat,integration,404,"@robertodr ; Thanks on looking at Py3 and updating the autocmake omp. And go ahead and set `ENABLE_64BIT_INTEGERS` and anything else to sensible values. You're correct that Distelli and Travis are testing _only_ Psi4, not any addons. In fact, the addons it does test (libint, libefp, gdma) aren't getting built either. Rather (for Travis at least), it's downloaded prebuilt conda packages and just doing integration testing. PCMSolver compiles _really_ slowly (at least Release with Intel compilers), and we can't afford that. But once PCMSolver is up and running and packaged again, it can be added to the integration tests. We can certainly afford a fast test case or two.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/599#issuecomment-276677358
https://github.com/psi4/psi4/pull/599#issuecomment-276677358:470,Deployability,Release,Release,470,"@robertodr ; Thanks on looking at Py3 and updating the autocmake omp. And go ahead and set `ENABLE_64BIT_INTEGERS` and anything else to sensible values. You're correct that Distelli and Travis are testing _only_ Psi4, not any addons. In fact, the addons it does test (libint, libefp, gdma) aren't getting built either. Rather (for Travis at least), it's downloaded prebuilt conda packages and just doing integration testing. PCMSolver compiles _really_ slowly (at least Release with Intel compilers), and we can't afford that. But once PCMSolver is up and running and packaged again, it can be added to the integration tests. We can certainly afford a fast test case or two.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/599#issuecomment-276677358
https://github.com/psi4/psi4/pull/599#issuecomment-276677358:607,Deployability,integrat,integration,607,"@robertodr ; Thanks on looking at Py3 and updating the autocmake omp. And go ahead and set `ENABLE_64BIT_INTEGERS` and anything else to sensible values. You're correct that Distelli and Travis are testing _only_ Psi4, not any addons. In fact, the addons it does test (libint, libefp, gdma) aren't getting built either. Rather (for Travis at least), it's downloaded prebuilt conda packages and just doing integration testing. PCMSolver compiles _really_ slowly (at least Release with Intel compilers), and we can't afford that. But once PCMSolver is up and running and packaged again, it can be added to the integration tests. We can certainly afford a fast test case or two.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/599#issuecomment-276677358
https://github.com/psi4/psi4/pull/599#issuecomment-276677358:404,Integrability,integrat,integration,404,"@robertodr ; Thanks on looking at Py3 and updating the autocmake omp. And go ahead and set `ENABLE_64BIT_INTEGERS` and anything else to sensible values. You're correct that Distelli and Travis are testing _only_ Psi4, not any addons. In fact, the addons it does test (libint, libefp, gdma) aren't getting built either. Rather (for Travis at least), it's downloaded prebuilt conda packages and just doing integration testing. PCMSolver compiles _really_ slowly (at least Release with Intel compilers), and we can't afford that. But once PCMSolver is up and running and packaged again, it can be added to the integration tests. We can certainly afford a fast test case or two.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/599#issuecomment-276677358
https://github.com/psi4/psi4/pull/599#issuecomment-276677358:607,Integrability,integrat,integration,607,"@robertodr ; Thanks on looking at Py3 and updating the autocmake omp. And go ahead and set `ENABLE_64BIT_INTEGERS` and anything else to sensible values. You're correct that Distelli and Travis are testing _only_ Psi4, not any addons. In fact, the addons it does test (libint, libefp, gdma) aren't getting built either. Rather (for Travis at least), it's downloaded prebuilt conda packages and just doing integration testing. PCMSolver compiles _really_ slowly (at least Release with Intel compilers), and we can't afford that. But once PCMSolver is up and running and packaged again, it can be added to the integration tests. We can certainly afford a fast test case or two.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/599#issuecomment-276677358
https://github.com/psi4/psi4/pull/599#issuecomment-276677358:197,Testability,test,testing,197,"@robertodr ; Thanks on looking at Py3 and updating the autocmake omp. And go ahead and set `ENABLE_64BIT_INTEGERS` and anything else to sensible values. You're correct that Distelli and Travis are testing _only_ Psi4, not any addons. In fact, the addons it does test (libint, libefp, gdma) aren't getting built either. Rather (for Travis at least), it's downloaded prebuilt conda packages and just doing integration testing. PCMSolver compiles _really_ slowly (at least Release with Intel compilers), and we can't afford that. But once PCMSolver is up and running and packaged again, it can be added to the integration tests. We can certainly afford a fast test case or two.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/599#issuecomment-276677358
https://github.com/psi4/psi4/pull/599#issuecomment-276677358:262,Testability,test,test,262,"@robertodr ; Thanks on looking at Py3 and updating the autocmake omp. And go ahead and set `ENABLE_64BIT_INTEGERS` and anything else to sensible values. You're correct that Distelli and Travis are testing _only_ Psi4, not any addons. In fact, the addons it does test (libint, libefp, gdma) aren't getting built either. Rather (for Travis at least), it's downloaded prebuilt conda packages and just doing integration testing. PCMSolver compiles _really_ slowly (at least Release with Intel compilers), and we can't afford that. But once PCMSolver is up and running and packaged again, it can be added to the integration tests. We can certainly afford a fast test case or two.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/599#issuecomment-276677358
https://github.com/psi4/psi4/pull/599#issuecomment-276677358:416,Testability,test,testing,416,"@robertodr ; Thanks on looking at Py3 and updating the autocmake omp. And go ahead and set `ENABLE_64BIT_INTEGERS` and anything else to sensible values. You're correct that Distelli and Travis are testing _only_ Psi4, not any addons. In fact, the addons it does test (libint, libefp, gdma) aren't getting built either. Rather (for Travis at least), it's downloaded prebuilt conda packages and just doing integration testing. PCMSolver compiles _really_ slowly (at least Release with Intel compilers), and we can't afford that. But once PCMSolver is up and running and packaged again, it can be added to the integration tests. We can certainly afford a fast test case or two.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/599#issuecomment-276677358
https://github.com/psi4/psi4/pull/599#issuecomment-276677358:619,Testability,test,tests,619,"@robertodr ; Thanks on looking at Py3 and updating the autocmake omp. And go ahead and set `ENABLE_64BIT_INTEGERS` and anything else to sensible values. You're correct that Distelli and Travis are testing _only_ Psi4, not any addons. In fact, the addons it does test (libint, libefp, gdma) aren't getting built either. Rather (for Travis at least), it's downloaded prebuilt conda packages and just doing integration testing. PCMSolver compiles _really_ slowly (at least Release with Intel compilers), and we can't afford that. But once PCMSolver is up and running and packaged again, it can be added to the integration tests. We can certainly afford a fast test case or two.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/599#issuecomment-276677358
https://github.com/psi4/psi4/pull/599#issuecomment-276677358:657,Testability,test,test,657,"@robertodr ; Thanks on looking at Py3 and updating the autocmake omp. And go ahead and set `ENABLE_64BIT_INTEGERS` and anything else to sensible values. You're correct that Distelli and Travis are testing _only_ Psi4, not any addons. In fact, the addons it does test (libint, libefp, gdma) aren't getting built either. Rather (for Travis at least), it's downloaded prebuilt conda packages and just doing integration testing. PCMSolver compiles _really_ slowly (at least Release with Intel compilers), and we can't afford that. But once PCMSolver is up and running and packaged again, it can be added to the integration tests. We can certainly afford a fast test case or two.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/599#issuecomment-276677358
https://github.com/psi4/psi4/pull/599#issuecomment-279749140:253,Modifiability,CONFIG,CONFIG,253,"@amjames, sure you pulled `loriab:pcm2`, not `loriab:pcm`? Check that [these lines](https://github.com/loriab/psi4/blob/pcm2/psi4/CMakeLists.txt#L104-L109) are matching. It looks like it's still using the cmake/FindPCMSolver `MODULE` mode, not the new `CONFIG` mode.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/599#issuecomment-279749140
https://github.com/psi4/psi4/pull/599#issuecomment-279816796:171,Testability,test,testing,171,"No problem, @amjames. PCM involves two PRs on two repos both being worked on by two people and has been through some non-trivial rebases. So I'm grateful to you for field-testing it.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/599#issuecomment-279816796
https://github.com/psi4/psi4/issues/600#issuecomment-276765389:45,Energy Efficiency,efficient,efficiently,45,The question is how to run truncated CI most efficiently in detci.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/600#issuecomment-276765389
https://github.com/psi4/psi4/issues/600#issuecomment-276855493:231,Energy Efficiency,energy,energy,231,"```; molecule {; 1 1; symmetry c1; O; O 1 R1; O 2 R2 1 A1; H 3 R3 2 A2 1 D1. R1=1.228; R2=1.587; R3=0.968; A1=109.80; A2=97.10; D1=180.0; }. set basis 6-31G; set reference rohf; set scf_type pk; set nat_orbs true; scf_e, scf_wfn = energy('scf', return_wfn=True). set restricted_docc [7]; set active [10]; set qc_module detci; ci_e, ci_wfn = energy('cisd', return_wfn=True, ref_wfn=scf_wfn); ```; has Nmo = 29 and docc = 12, so a (10e,10o) active space. I get with cisd; ```; There are 252 alpha and 252 beta strings; The CI space requires 63504 (6.35E+04) determinants and 1 blocks; ```; with cisdt; ```; There are 252 alpha and 252 beta strings; The CI space requires 63504 (6.35E+04) determinants and 1 blocks; ```; and with cisdtq; ```; There are 252 alpha and 252 beta strings; The CI space requires 63504 (6.35E+04) determinants and 1 blocks; ```. 63504 is the dimension of the FCI space.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/600#issuecomment-276855493
https://github.com/psi4/psi4/issues/600#issuecomment-276855493:341,Energy Efficiency,energy,energy,341,"```; molecule {; 1 1; symmetry c1; O; O 1 R1; O 2 R2 1 A1; H 3 R3 2 A2 1 D1. R1=1.228; R2=1.587; R3=0.968; A1=109.80; A2=97.10; D1=180.0; }. set basis 6-31G; set reference rohf; set scf_type pk; set nat_orbs true; scf_e, scf_wfn = energy('scf', return_wfn=True). set restricted_docc [7]; set active [10]; set qc_module detci; ci_e, ci_wfn = energy('cisd', return_wfn=True, ref_wfn=scf_wfn); ```; has Nmo = 29 and docc = 12, so a (10e,10o) active space. I get with cisd; ```; There are 252 alpha and 252 beta strings; The CI space requires 63504 (6.35E+04) determinants and 1 blocks; ```; with cisdt; ```; There are 252 alpha and 252 beta strings; The CI space requires 63504 (6.35E+04) determinants and 1 blocks; ```; and with cisdtq; ```; There are 252 alpha and 252 beta strings; The CI space requires 63504 (6.35E+04) determinants and 1 blocks; ```. 63504 is the dimension of the FCI space.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/600#issuecomment-276855493
https://github.com/psi4/psi4/issues/600#issuecomment-276856487:613,Energy Efficiency,energy,energy,613,"Ah yes, when you set `active` you are effectively setting `RAS 2`. What you really want to do is set the restricted space like so:. `restricted_uocc [12]`. From the output:. The CI space requires 876 (8.76E+02) determinants and 6 blocks. Cheers,; Daniel Smith. > On Feb 1, 2017, at 22:03, Susi Lehtola <notifications@github.com> wrote:; > ; > molecule {; > 1 1; > symmetry c1; > O; > O 1 R1; > O 2 R2 1 A1; > H 3 R3 2 A2 1 D1; > ; > R1=1.228; > R2=1.587; > R3=0.968; > A1=109.80; > A2=97.10; > D1=180.0; > }; > ; > set basis 6-31G; > set reference rohf; > set scf_type pk; > set nat_orbs true; > scf_e, scf_wfn = energy('scf', return_wfn=True); > ; > set restricted_docc [7]; > set active [10]; > set qc_module detci; > ci_e, ci_wfn = energy('cisd', return_wfn=True, ref_wfn=scf_wfn); > has Nmo = 29 and docc = 12, so a (10e,10o) active space.; > ; > I get with cisd; > ; > There are 252 alpha and 252 beta strings; > The CI space requires 63504 (6.35E+04) determinants and 1 blocks; > with cisdt; > ; > There are 252 alpha and 252 beta strings; > The CI space requires 63504 (6.35E+04) determinants and 1 blocks; > and with cisdtq; > ; > There are 252 alpha and 252 beta strings; > The CI space requires 63504 (6.35E+04) determinants and 1 blocks; > 63504 is the dimension of the FCI space.; > ; > —; > You are receiving this because you commented.; > Reply to this email directly, view it on GitHub <https://github.com/psi4/psi4/issues/600#issuecomment-276855493>, or mute the thread <https://github.com/notifications/unsubscribe-auth/ABsBcV_cGQ1EW9w8Oa9ZEN44L9ON6ReZks5rYUeagaJpZM4LzeQz>.; >",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/600#issuecomment-276856487
https://github.com/psi4/psi4/issues/600#issuecomment-276856487:735,Energy Efficiency,energy,energy,735,"Ah yes, when you set `active` you are effectively setting `RAS 2`. What you really want to do is set the restricted space like so:. `restricted_uocc [12]`. From the output:. The CI space requires 876 (8.76E+02) determinants and 6 blocks. Cheers,; Daniel Smith. > On Feb 1, 2017, at 22:03, Susi Lehtola <notifications@github.com> wrote:; > ; > molecule {; > 1 1; > symmetry c1; > O; > O 1 R1; > O 2 R2 1 A1; > H 3 R3 2 A2 1 D1; > ; > R1=1.228; > R2=1.587; > R3=0.968; > A1=109.80; > A2=97.10; > D1=180.0; > }; > ; > set basis 6-31G; > set reference rohf; > set scf_type pk; > set nat_orbs true; > scf_e, scf_wfn = energy('scf', return_wfn=True); > ; > set restricted_docc [7]; > set active [10]; > set qc_module detci; > ci_e, ci_wfn = energy('cisd', return_wfn=True, ref_wfn=scf_wfn); > has Nmo = 29 and docc = 12, so a (10e,10o) active space.; > ; > I get with cisd; > ; > There are 252 alpha and 252 beta strings; > The CI space requires 63504 (6.35E+04) determinants and 1 blocks; > with cisdt; > ; > There are 252 alpha and 252 beta strings; > The CI space requires 63504 (6.35E+04) determinants and 1 blocks; > and with cisdtq; > ; > There are 252 alpha and 252 beta strings; > The CI space requires 63504 (6.35E+04) determinants and 1 blocks; > 63504 is the dimension of the FCI space.; > ; > —; > You are receiving this because you commented.; > Reply to this email directly, view it on GitHub <https://github.com/psi4/psi4/issues/600#issuecomment-276855493>, or mute the thread <https://github.com/notifications/unsubscribe-auth/ABsBcV_cGQ1EW9w8Oa9ZEN44L9ON6ReZks5rYUeagaJpZM4LzeQz>.; >",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/600#issuecomment-276856487
https://github.com/psi4/psi4/issues/600#issuecomment-278208375:130,Availability,avail,available,130,"Actually, if this is intended, then the manual should be adjusted. 'active' is listed as a relevant keyword for CI in the ""Spaces available in the MCSCF program"" section at http://www.psicode.org/psi4manual/master/detci.html. Otherwise, the behavior should be changed that when running ci(n), the code should figure out the resulting restricted spaces..",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/600#issuecomment-278208375
https://github.com/psi4/psi4/pull/602#issuecomment-277130364:336,Availability,down,down,336,"What happened was your previous commits were rebased so your local and master git hashes differed. However, since the new commits had the same diff as your current commits they effectively did nothing. Probably not terribly clear unless your familiar with git. The best thing to do as AJ mentioned is to always make a new branch a pull down a fresh version of `psi4/psi4:master`. . @amjames The histories probably were muddled. We probably need to squash this anyway so we can make a merge as the diff looks fine.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/602#issuecomment-277130364
https://github.com/psi4/psi4/pull/602#issuecomment-277130364:82,Security,hash,hashes,82,"What happened was your previous commits were rebased so your local and master git hashes differed. However, since the new commits had the same diff as your current commits they effectively did nothing. Probably not terribly clear unless your familiar with git. The best thing to do as AJ mentioned is to always make a new branch a pull down a fresh version of `psi4/psi4:master`. . @amjames The histories probably were muddled. We probably need to squash this anyway so we can make a merge as the diff looks fine.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/602#issuecomment-277130364
https://github.com/psi4/psi4/pull/602#issuecomment-277130364:224,Usability,clear,clear,224,"What happened was your previous commits were rebased so your local and master git hashes differed. However, since the new commits had the same diff as your current commits they effectively did nothing. Probably not terribly clear unless your familiar with git. The best thing to do as AJ mentioned is to always make a new branch a pull down a fresh version of `psi4/psi4:master`. . @amjames The histories probably were muddled. We probably need to squash this anyway so we can make a merge as the diff looks fine.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/602#issuecomment-277130364
https://github.com/psi4/psi4/issues/603#issuecomment-278675637:445,Energy Efficiency,Energy,Energy,445,"How are you able to tell that it does not converge? I ran the input you posted and It was able to converge fine. . You should see a section like this in the output file showing the EOM code working away at the root. ; ```; Symmetry of ground state: Ag; Symmetry of excited state: Ag; Symmetry of right eigenvector: Ag; Seeking states with multiplicity of 1; Obtaining initial guess from singles-singles block of Hbar...Done. Iter=1 L=1 Root EOM Energy Delta E Res. Norm Conv?; 1 0.4128588902 4.13e-01 3.16e-01 N; Iter=2 L=2 Root EOM Energy Delta E Res. Norm Conv?; 1 0.3340136980 -7.88e-02 5.54e-02 N; Iter=3 L=3 Root EOM Energy Delta E Res. Norm Conv?; 1 0.3311169492 -2.90e-03 2.75e-02 N; Iter=4 L=4 Root EOM Energy Delta E Res. Norm Conv?; 1 0.3303034550 -8.13e-04 1.53e-02 N; Iter=5 L=5 Root EOM Energy Delta E Res. Norm Conv?; 1 0.3299847862 -3.19e-04 9.33e-03 N; Iter=6 L=6 Root EOM Energy Delta E Res. Norm Conv?; 1 0.3299158588 -6.89e-05 4.43e-03 N; Iter=7 L=7 Root EOM Energy Delta E Res. Norm Conv?; 1 0.3299119405 -3.92e-06 1.74e-03 N; Iter=8 L=8 Root EOM Energy Delta E Res. Norm Conv?; 1 0.3299103467 -1.59e-06 6.71e-04 N; Iter=9 L=9 Root EOM Energy Delta E Res. Norm Conv?; 1 0.3299072934 -3.05e-06 3.17e-04 N; Iter=10 L=10 Root EOM Energy Delta E Res. Norm Conv?; 1 0.3299064524 -8.41e-07 1.45e-04 N; Iter=11 L=11 Root EOM Energy Delta E Res. Norm Conv?; 1 0.3299063854 -6.69e-08 9.39e-05 Y; Collapsing to only 1 vector(s). Procedure converged for 1 root(s).; Energy written to CC_INFO:Etot -231.2454217333; States per irrep written to CC_INFO.; EOM CCSD R0 for root 0 = -0.03232771150. Final Energetic Summary for Converged Roots of Irrep Ag; Excitation Energy Total Energy; (eV) (cm^-1) (au) (au); EOM State 1 8.977 72406.1 0.3299063854 -231.245421733323; ```. Summary at the end of the file also shows:; ```; 	 Excitation Energy OS RS RS Einstein A; 	State (eV) (cm^-1) (nm) (au) (l,au) (v,au) (s^-1); 	 1 Ag 8.977 72406.1 138.1 0.329906 0.0000 0.0000 0.0000 0.000000E+00; ```. If yo",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/603#issuecomment-278675637
https://github.com/psi4/psi4/issues/603#issuecomment-278675637:533,Energy Efficiency,Energy,Energy,533,"How are you able to tell that it does not converge? I ran the input you posted and It was able to converge fine. . You should see a section like this in the output file showing the EOM code working away at the root. ; ```; Symmetry of ground state: Ag; Symmetry of excited state: Ag; Symmetry of right eigenvector: Ag; Seeking states with multiplicity of 1; Obtaining initial guess from singles-singles block of Hbar...Done. Iter=1 L=1 Root EOM Energy Delta E Res. Norm Conv?; 1 0.4128588902 4.13e-01 3.16e-01 N; Iter=2 L=2 Root EOM Energy Delta E Res. Norm Conv?; 1 0.3340136980 -7.88e-02 5.54e-02 N; Iter=3 L=3 Root EOM Energy Delta E Res. Norm Conv?; 1 0.3311169492 -2.90e-03 2.75e-02 N; Iter=4 L=4 Root EOM Energy Delta E Res. Norm Conv?; 1 0.3303034550 -8.13e-04 1.53e-02 N; Iter=5 L=5 Root EOM Energy Delta E Res. Norm Conv?; 1 0.3299847862 -3.19e-04 9.33e-03 N; Iter=6 L=6 Root EOM Energy Delta E Res. Norm Conv?; 1 0.3299158588 -6.89e-05 4.43e-03 N; Iter=7 L=7 Root EOM Energy Delta E Res. Norm Conv?; 1 0.3299119405 -3.92e-06 1.74e-03 N; Iter=8 L=8 Root EOM Energy Delta E Res. Norm Conv?; 1 0.3299103467 -1.59e-06 6.71e-04 N; Iter=9 L=9 Root EOM Energy Delta E Res. Norm Conv?; 1 0.3299072934 -3.05e-06 3.17e-04 N; Iter=10 L=10 Root EOM Energy Delta E Res. Norm Conv?; 1 0.3299064524 -8.41e-07 1.45e-04 N; Iter=11 L=11 Root EOM Energy Delta E Res. Norm Conv?; 1 0.3299063854 -6.69e-08 9.39e-05 Y; Collapsing to only 1 vector(s). Procedure converged for 1 root(s).; Energy written to CC_INFO:Etot -231.2454217333; States per irrep written to CC_INFO.; EOM CCSD R0 for root 0 = -0.03232771150. Final Energetic Summary for Converged Roots of Irrep Ag; Excitation Energy Total Energy; (eV) (cm^-1) (au) (au); EOM State 1 8.977 72406.1 0.3299063854 -231.245421733323; ```. Summary at the end of the file also shows:; ```; 	 Excitation Energy OS RS RS Einstein A; 	State (eV) (cm^-1) (nm) (au) (l,au) (v,au) (s^-1); 	 1 Ag 8.977 72406.1 138.1 0.329906 0.0000 0.0000 0.0000 0.000000E+00; ```. If yo",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/603#issuecomment-278675637
https://github.com/psi4/psi4/issues/603#issuecomment-278675637:622,Energy Efficiency,Energy,Energy,622,"How are you able to tell that it does not converge? I ran the input you posted and It was able to converge fine. . You should see a section like this in the output file showing the EOM code working away at the root. ; ```; Symmetry of ground state: Ag; Symmetry of excited state: Ag; Symmetry of right eigenvector: Ag; Seeking states with multiplicity of 1; Obtaining initial guess from singles-singles block of Hbar...Done. Iter=1 L=1 Root EOM Energy Delta E Res. Norm Conv?; 1 0.4128588902 4.13e-01 3.16e-01 N; Iter=2 L=2 Root EOM Energy Delta E Res. Norm Conv?; 1 0.3340136980 -7.88e-02 5.54e-02 N; Iter=3 L=3 Root EOM Energy Delta E Res. Norm Conv?; 1 0.3311169492 -2.90e-03 2.75e-02 N; Iter=4 L=4 Root EOM Energy Delta E Res. Norm Conv?; 1 0.3303034550 -8.13e-04 1.53e-02 N; Iter=5 L=5 Root EOM Energy Delta E Res. Norm Conv?; 1 0.3299847862 -3.19e-04 9.33e-03 N; Iter=6 L=6 Root EOM Energy Delta E Res. Norm Conv?; 1 0.3299158588 -6.89e-05 4.43e-03 N; Iter=7 L=7 Root EOM Energy Delta E Res. Norm Conv?; 1 0.3299119405 -3.92e-06 1.74e-03 N; Iter=8 L=8 Root EOM Energy Delta E Res. Norm Conv?; 1 0.3299103467 -1.59e-06 6.71e-04 N; Iter=9 L=9 Root EOM Energy Delta E Res. Norm Conv?; 1 0.3299072934 -3.05e-06 3.17e-04 N; Iter=10 L=10 Root EOM Energy Delta E Res. Norm Conv?; 1 0.3299064524 -8.41e-07 1.45e-04 N; Iter=11 L=11 Root EOM Energy Delta E Res. Norm Conv?; 1 0.3299063854 -6.69e-08 9.39e-05 Y; Collapsing to only 1 vector(s). Procedure converged for 1 root(s).; Energy written to CC_INFO:Etot -231.2454217333; States per irrep written to CC_INFO.; EOM CCSD R0 for root 0 = -0.03232771150. Final Energetic Summary for Converged Roots of Irrep Ag; Excitation Energy Total Energy; (eV) (cm^-1) (au) (au); EOM State 1 8.977 72406.1 0.3299063854 -231.245421733323; ```. Summary at the end of the file also shows:; ```; 	 Excitation Energy OS RS RS Einstein A; 	State (eV) (cm^-1) (nm) (au) (l,au) (v,au) (s^-1); 	 1 Ag 8.977 72406.1 138.1 0.329906 0.0000 0.0000 0.0000 0.000000E+00; ```. If yo",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/603#issuecomment-278675637
https://github.com/psi4/psi4/issues/603#issuecomment-278675637:711,Energy Efficiency,Energy,Energy,711,"How are you able to tell that it does not converge? I ran the input you posted and It was able to converge fine. . You should see a section like this in the output file showing the EOM code working away at the root. ; ```; Symmetry of ground state: Ag; Symmetry of excited state: Ag; Symmetry of right eigenvector: Ag; Seeking states with multiplicity of 1; Obtaining initial guess from singles-singles block of Hbar...Done. Iter=1 L=1 Root EOM Energy Delta E Res. Norm Conv?; 1 0.4128588902 4.13e-01 3.16e-01 N; Iter=2 L=2 Root EOM Energy Delta E Res. Norm Conv?; 1 0.3340136980 -7.88e-02 5.54e-02 N; Iter=3 L=3 Root EOM Energy Delta E Res. Norm Conv?; 1 0.3311169492 -2.90e-03 2.75e-02 N; Iter=4 L=4 Root EOM Energy Delta E Res. Norm Conv?; 1 0.3303034550 -8.13e-04 1.53e-02 N; Iter=5 L=5 Root EOM Energy Delta E Res. Norm Conv?; 1 0.3299847862 -3.19e-04 9.33e-03 N; Iter=6 L=6 Root EOM Energy Delta E Res. Norm Conv?; 1 0.3299158588 -6.89e-05 4.43e-03 N; Iter=7 L=7 Root EOM Energy Delta E Res. Norm Conv?; 1 0.3299119405 -3.92e-06 1.74e-03 N; Iter=8 L=8 Root EOM Energy Delta E Res. Norm Conv?; 1 0.3299103467 -1.59e-06 6.71e-04 N; Iter=9 L=9 Root EOM Energy Delta E Res. Norm Conv?; 1 0.3299072934 -3.05e-06 3.17e-04 N; Iter=10 L=10 Root EOM Energy Delta E Res. Norm Conv?; 1 0.3299064524 -8.41e-07 1.45e-04 N; Iter=11 L=11 Root EOM Energy Delta E Res. Norm Conv?; 1 0.3299063854 -6.69e-08 9.39e-05 Y; Collapsing to only 1 vector(s). Procedure converged for 1 root(s).; Energy written to CC_INFO:Etot -231.2454217333; States per irrep written to CC_INFO.; EOM CCSD R0 for root 0 = -0.03232771150. Final Energetic Summary for Converged Roots of Irrep Ag; Excitation Energy Total Energy; (eV) (cm^-1) (au) (au); EOM State 1 8.977 72406.1 0.3299063854 -231.245421733323; ```. Summary at the end of the file also shows:; ```; 	 Excitation Energy OS RS RS Einstein A; 	State (eV) (cm^-1) (nm) (au) (l,au) (v,au) (s^-1); 	 1 Ag 8.977 72406.1 138.1 0.329906 0.0000 0.0000 0.0000 0.000000E+00; ```. If yo",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/603#issuecomment-278675637
https://github.com/psi4/psi4/issues/603#issuecomment-278675637:800,Energy Efficiency,Energy,Energy,800,"How are you able to tell that it does not converge? I ran the input you posted and It was able to converge fine. . You should see a section like this in the output file showing the EOM code working away at the root. ; ```; Symmetry of ground state: Ag; Symmetry of excited state: Ag; Symmetry of right eigenvector: Ag; Seeking states with multiplicity of 1; Obtaining initial guess from singles-singles block of Hbar...Done. Iter=1 L=1 Root EOM Energy Delta E Res. Norm Conv?; 1 0.4128588902 4.13e-01 3.16e-01 N; Iter=2 L=2 Root EOM Energy Delta E Res. Norm Conv?; 1 0.3340136980 -7.88e-02 5.54e-02 N; Iter=3 L=3 Root EOM Energy Delta E Res. Norm Conv?; 1 0.3311169492 -2.90e-03 2.75e-02 N; Iter=4 L=4 Root EOM Energy Delta E Res. Norm Conv?; 1 0.3303034550 -8.13e-04 1.53e-02 N; Iter=5 L=5 Root EOM Energy Delta E Res. Norm Conv?; 1 0.3299847862 -3.19e-04 9.33e-03 N; Iter=6 L=6 Root EOM Energy Delta E Res. Norm Conv?; 1 0.3299158588 -6.89e-05 4.43e-03 N; Iter=7 L=7 Root EOM Energy Delta E Res. Norm Conv?; 1 0.3299119405 -3.92e-06 1.74e-03 N; Iter=8 L=8 Root EOM Energy Delta E Res. Norm Conv?; 1 0.3299103467 -1.59e-06 6.71e-04 N; Iter=9 L=9 Root EOM Energy Delta E Res. Norm Conv?; 1 0.3299072934 -3.05e-06 3.17e-04 N; Iter=10 L=10 Root EOM Energy Delta E Res. Norm Conv?; 1 0.3299064524 -8.41e-07 1.45e-04 N; Iter=11 L=11 Root EOM Energy Delta E Res. Norm Conv?; 1 0.3299063854 -6.69e-08 9.39e-05 Y; Collapsing to only 1 vector(s). Procedure converged for 1 root(s).; Energy written to CC_INFO:Etot -231.2454217333; States per irrep written to CC_INFO.; EOM CCSD R0 for root 0 = -0.03232771150. Final Energetic Summary for Converged Roots of Irrep Ag; Excitation Energy Total Energy; (eV) (cm^-1) (au) (au); EOM State 1 8.977 72406.1 0.3299063854 -231.245421733323; ```. Summary at the end of the file also shows:; ```; 	 Excitation Energy OS RS RS Einstein A; 	State (eV) (cm^-1) (nm) (au) (l,au) (v,au) (s^-1); 	 1 Ag 8.977 72406.1 138.1 0.329906 0.0000 0.0000 0.0000 0.000000E+00; ```. If yo",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/603#issuecomment-278675637
https://github.com/psi4/psi4/issues/603#issuecomment-278675637:889,Energy Efficiency,Energy,Energy,889,"How are you able to tell that it does not converge? I ran the input you posted and It was able to converge fine. . You should see a section like this in the output file showing the EOM code working away at the root. ; ```; Symmetry of ground state: Ag; Symmetry of excited state: Ag; Symmetry of right eigenvector: Ag; Seeking states with multiplicity of 1; Obtaining initial guess from singles-singles block of Hbar...Done. Iter=1 L=1 Root EOM Energy Delta E Res. Norm Conv?; 1 0.4128588902 4.13e-01 3.16e-01 N; Iter=2 L=2 Root EOM Energy Delta E Res. Norm Conv?; 1 0.3340136980 -7.88e-02 5.54e-02 N; Iter=3 L=3 Root EOM Energy Delta E Res. Norm Conv?; 1 0.3311169492 -2.90e-03 2.75e-02 N; Iter=4 L=4 Root EOM Energy Delta E Res. Norm Conv?; 1 0.3303034550 -8.13e-04 1.53e-02 N; Iter=5 L=5 Root EOM Energy Delta E Res. Norm Conv?; 1 0.3299847862 -3.19e-04 9.33e-03 N; Iter=6 L=6 Root EOM Energy Delta E Res. Norm Conv?; 1 0.3299158588 -6.89e-05 4.43e-03 N; Iter=7 L=7 Root EOM Energy Delta E Res. Norm Conv?; 1 0.3299119405 -3.92e-06 1.74e-03 N; Iter=8 L=8 Root EOM Energy Delta E Res. Norm Conv?; 1 0.3299103467 -1.59e-06 6.71e-04 N; Iter=9 L=9 Root EOM Energy Delta E Res. Norm Conv?; 1 0.3299072934 -3.05e-06 3.17e-04 N; Iter=10 L=10 Root EOM Energy Delta E Res. Norm Conv?; 1 0.3299064524 -8.41e-07 1.45e-04 N; Iter=11 L=11 Root EOM Energy Delta E Res. Norm Conv?; 1 0.3299063854 -6.69e-08 9.39e-05 Y; Collapsing to only 1 vector(s). Procedure converged for 1 root(s).; Energy written to CC_INFO:Etot -231.2454217333; States per irrep written to CC_INFO.; EOM CCSD R0 for root 0 = -0.03232771150. Final Energetic Summary for Converged Roots of Irrep Ag; Excitation Energy Total Energy; (eV) (cm^-1) (au) (au); EOM State 1 8.977 72406.1 0.3299063854 -231.245421733323; ```. Summary at the end of the file also shows:; ```; 	 Excitation Energy OS RS RS Einstein A; 	State (eV) (cm^-1) (nm) (au) (l,au) (v,au) (s^-1); 	 1 Ag 8.977 72406.1 138.1 0.329906 0.0000 0.0000 0.0000 0.000000E+00; ```. If yo",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/603#issuecomment-278675637
https://github.com/psi4/psi4/issues/603#issuecomment-278675637:978,Energy Efficiency,Energy,Energy,978,"How are you able to tell that it does not converge? I ran the input you posted and It was able to converge fine. . You should see a section like this in the output file showing the EOM code working away at the root. ; ```; Symmetry of ground state: Ag; Symmetry of excited state: Ag; Symmetry of right eigenvector: Ag; Seeking states with multiplicity of 1; Obtaining initial guess from singles-singles block of Hbar...Done. Iter=1 L=1 Root EOM Energy Delta E Res. Norm Conv?; 1 0.4128588902 4.13e-01 3.16e-01 N; Iter=2 L=2 Root EOM Energy Delta E Res. Norm Conv?; 1 0.3340136980 -7.88e-02 5.54e-02 N; Iter=3 L=3 Root EOM Energy Delta E Res. Norm Conv?; 1 0.3311169492 -2.90e-03 2.75e-02 N; Iter=4 L=4 Root EOM Energy Delta E Res. Norm Conv?; 1 0.3303034550 -8.13e-04 1.53e-02 N; Iter=5 L=5 Root EOM Energy Delta E Res. Norm Conv?; 1 0.3299847862 -3.19e-04 9.33e-03 N; Iter=6 L=6 Root EOM Energy Delta E Res. Norm Conv?; 1 0.3299158588 -6.89e-05 4.43e-03 N; Iter=7 L=7 Root EOM Energy Delta E Res. Norm Conv?; 1 0.3299119405 -3.92e-06 1.74e-03 N; Iter=8 L=8 Root EOM Energy Delta E Res. Norm Conv?; 1 0.3299103467 -1.59e-06 6.71e-04 N; Iter=9 L=9 Root EOM Energy Delta E Res. Norm Conv?; 1 0.3299072934 -3.05e-06 3.17e-04 N; Iter=10 L=10 Root EOM Energy Delta E Res. Norm Conv?; 1 0.3299064524 -8.41e-07 1.45e-04 N; Iter=11 L=11 Root EOM Energy Delta E Res. Norm Conv?; 1 0.3299063854 -6.69e-08 9.39e-05 Y; Collapsing to only 1 vector(s). Procedure converged for 1 root(s).; Energy written to CC_INFO:Etot -231.2454217333; States per irrep written to CC_INFO.; EOM CCSD R0 for root 0 = -0.03232771150. Final Energetic Summary for Converged Roots of Irrep Ag; Excitation Energy Total Energy; (eV) (cm^-1) (au) (au); EOM State 1 8.977 72406.1 0.3299063854 -231.245421733323; ```. Summary at the end of the file also shows:; ```; 	 Excitation Energy OS RS RS Einstein A; 	State (eV) (cm^-1) (nm) (au) (l,au) (v,au) (s^-1); 	 1 Ag 8.977 72406.1 138.1 0.329906 0.0000 0.0000 0.0000 0.000000E+00; ```. If yo",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/603#issuecomment-278675637
https://github.com/psi4/psi4/issues/603#issuecomment-278675637:1067,Energy Efficiency,Energy,Energy,1067," input you posted and It was able to converge fine. . You should see a section like this in the output file showing the EOM code working away at the root. ; ```; Symmetry of ground state: Ag; Symmetry of excited state: Ag; Symmetry of right eigenvector: Ag; Seeking states with multiplicity of 1; Obtaining initial guess from singles-singles block of Hbar...Done. Iter=1 L=1 Root EOM Energy Delta E Res. Norm Conv?; 1 0.4128588902 4.13e-01 3.16e-01 N; Iter=2 L=2 Root EOM Energy Delta E Res. Norm Conv?; 1 0.3340136980 -7.88e-02 5.54e-02 N; Iter=3 L=3 Root EOM Energy Delta E Res. Norm Conv?; 1 0.3311169492 -2.90e-03 2.75e-02 N; Iter=4 L=4 Root EOM Energy Delta E Res. Norm Conv?; 1 0.3303034550 -8.13e-04 1.53e-02 N; Iter=5 L=5 Root EOM Energy Delta E Res. Norm Conv?; 1 0.3299847862 -3.19e-04 9.33e-03 N; Iter=6 L=6 Root EOM Energy Delta E Res. Norm Conv?; 1 0.3299158588 -6.89e-05 4.43e-03 N; Iter=7 L=7 Root EOM Energy Delta E Res. Norm Conv?; 1 0.3299119405 -3.92e-06 1.74e-03 N; Iter=8 L=8 Root EOM Energy Delta E Res. Norm Conv?; 1 0.3299103467 -1.59e-06 6.71e-04 N; Iter=9 L=9 Root EOM Energy Delta E Res. Norm Conv?; 1 0.3299072934 -3.05e-06 3.17e-04 N; Iter=10 L=10 Root EOM Energy Delta E Res. Norm Conv?; 1 0.3299064524 -8.41e-07 1.45e-04 N; Iter=11 L=11 Root EOM Energy Delta E Res. Norm Conv?; 1 0.3299063854 -6.69e-08 9.39e-05 Y; Collapsing to only 1 vector(s). Procedure converged for 1 root(s).; Energy written to CC_INFO:Etot -231.2454217333; States per irrep written to CC_INFO.; EOM CCSD R0 for root 0 = -0.03232771150. Final Energetic Summary for Converged Roots of Irrep Ag; Excitation Energy Total Energy; (eV) (cm^-1) (au) (au); EOM State 1 8.977 72406.1 0.3299063854 -231.245421733323; ```. Summary at the end of the file also shows:; ```; 	 Excitation Energy OS RS RS Einstein A; 	State (eV) (cm^-1) (nm) (au) (l,au) (v,au) (s^-1); 	 1 Ag 8.977 72406.1 138.1 0.329906 0.0000 0.0000 0.0000 0.000000E+00; ```. If you are seeing something different could you put your output in",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/603#issuecomment-278675637
https://github.com/psi4/psi4/issues/603#issuecomment-278675637:1156,Energy Efficiency,Energy,Energy,1156,"It was able to converge fine. . You should see a section like this in the output file showing the EOM code working away at the root. ; ```; Symmetry of ground state: Ag; Symmetry of excited state: Ag; Symmetry of right eigenvector: Ag; Seeking states with multiplicity of 1; Obtaining initial guess from singles-singles block of Hbar...Done. Iter=1 L=1 Root EOM Energy Delta E Res. Norm Conv?; 1 0.4128588902 4.13e-01 3.16e-01 N; Iter=2 L=2 Root EOM Energy Delta E Res. Norm Conv?; 1 0.3340136980 -7.88e-02 5.54e-02 N; Iter=3 L=3 Root EOM Energy Delta E Res. Norm Conv?; 1 0.3311169492 -2.90e-03 2.75e-02 N; Iter=4 L=4 Root EOM Energy Delta E Res. Norm Conv?; 1 0.3303034550 -8.13e-04 1.53e-02 N; Iter=5 L=5 Root EOM Energy Delta E Res. Norm Conv?; 1 0.3299847862 -3.19e-04 9.33e-03 N; Iter=6 L=6 Root EOM Energy Delta E Res. Norm Conv?; 1 0.3299158588 -6.89e-05 4.43e-03 N; Iter=7 L=7 Root EOM Energy Delta E Res. Norm Conv?; 1 0.3299119405 -3.92e-06 1.74e-03 N; Iter=8 L=8 Root EOM Energy Delta E Res. Norm Conv?; 1 0.3299103467 -1.59e-06 6.71e-04 N; Iter=9 L=9 Root EOM Energy Delta E Res. Norm Conv?; 1 0.3299072934 -3.05e-06 3.17e-04 N; Iter=10 L=10 Root EOM Energy Delta E Res. Norm Conv?; 1 0.3299064524 -8.41e-07 1.45e-04 N; Iter=11 L=11 Root EOM Energy Delta E Res. Norm Conv?; 1 0.3299063854 -6.69e-08 9.39e-05 Y; Collapsing to only 1 vector(s). Procedure converged for 1 root(s).; Energy written to CC_INFO:Etot -231.2454217333; States per irrep written to CC_INFO.; EOM CCSD R0 for root 0 = -0.03232771150. Final Energetic Summary for Converged Roots of Irrep Ag; Excitation Energy Total Energy; (eV) (cm^-1) (au) (au); EOM State 1 8.977 72406.1 0.3299063854 -231.245421733323; ```. Summary at the end of the file also shows:; ```; 	 Excitation Energy OS RS RS Einstein A; 	State (eV) (cm^-1) (nm) (au) (l,au) (v,au) (s^-1); 	 1 Ag 8.977 72406.1 138.1 0.329906 0.0000 0.0000 0.0000 0.000000E+00; ```. If you are seeing something different could you put your output in a gist, or pastebin?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/603#issuecomment-278675637
https://github.com/psi4/psi4/issues/603#issuecomment-278675637:1247,Energy Efficiency,Energy,Energy,1247,"It was able to converge fine. . You should see a section like this in the output file showing the EOM code working away at the root. ; ```; Symmetry of ground state: Ag; Symmetry of excited state: Ag; Symmetry of right eigenvector: Ag; Seeking states with multiplicity of 1; Obtaining initial guess from singles-singles block of Hbar...Done. Iter=1 L=1 Root EOM Energy Delta E Res. Norm Conv?; 1 0.4128588902 4.13e-01 3.16e-01 N; Iter=2 L=2 Root EOM Energy Delta E Res. Norm Conv?; 1 0.3340136980 -7.88e-02 5.54e-02 N; Iter=3 L=3 Root EOM Energy Delta E Res. Norm Conv?; 1 0.3311169492 -2.90e-03 2.75e-02 N; Iter=4 L=4 Root EOM Energy Delta E Res. Norm Conv?; 1 0.3303034550 -8.13e-04 1.53e-02 N; Iter=5 L=5 Root EOM Energy Delta E Res. Norm Conv?; 1 0.3299847862 -3.19e-04 9.33e-03 N; Iter=6 L=6 Root EOM Energy Delta E Res. Norm Conv?; 1 0.3299158588 -6.89e-05 4.43e-03 N; Iter=7 L=7 Root EOM Energy Delta E Res. Norm Conv?; 1 0.3299119405 -3.92e-06 1.74e-03 N; Iter=8 L=8 Root EOM Energy Delta E Res. Norm Conv?; 1 0.3299103467 -1.59e-06 6.71e-04 N; Iter=9 L=9 Root EOM Energy Delta E Res. Norm Conv?; 1 0.3299072934 -3.05e-06 3.17e-04 N; Iter=10 L=10 Root EOM Energy Delta E Res. Norm Conv?; 1 0.3299064524 -8.41e-07 1.45e-04 N; Iter=11 L=11 Root EOM Energy Delta E Res. Norm Conv?; 1 0.3299063854 -6.69e-08 9.39e-05 Y; Collapsing to only 1 vector(s). Procedure converged for 1 root(s).; Energy written to CC_INFO:Etot -231.2454217333; States per irrep written to CC_INFO.; EOM CCSD R0 for root 0 = -0.03232771150. Final Energetic Summary for Converged Roots of Irrep Ag; Excitation Energy Total Energy; (eV) (cm^-1) (au) (au); EOM State 1 8.977 72406.1 0.3299063854 -231.245421733323; ```. Summary at the end of the file also shows:; ```; 	 Excitation Energy OS RS RS Einstein A; 	State (eV) (cm^-1) (nm) (au) (l,au) (v,au) (s^-1); 	 1 Ag 8.977 72406.1 138.1 0.329906 0.0000 0.0000 0.0000 0.000000E+00; ```. If you are seeing something different could you put your output in a gist, or pastebin?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/603#issuecomment-278675637
https://github.com/psi4/psi4/issues/603#issuecomment-278675637:1338,Energy Efficiency,Energy,Energy,1338,"It was able to converge fine. . You should see a section like this in the output file showing the EOM code working away at the root. ; ```; Symmetry of ground state: Ag; Symmetry of excited state: Ag; Symmetry of right eigenvector: Ag; Seeking states with multiplicity of 1; Obtaining initial guess from singles-singles block of Hbar...Done. Iter=1 L=1 Root EOM Energy Delta E Res. Norm Conv?; 1 0.4128588902 4.13e-01 3.16e-01 N; Iter=2 L=2 Root EOM Energy Delta E Res. Norm Conv?; 1 0.3340136980 -7.88e-02 5.54e-02 N; Iter=3 L=3 Root EOM Energy Delta E Res. Norm Conv?; 1 0.3311169492 -2.90e-03 2.75e-02 N; Iter=4 L=4 Root EOM Energy Delta E Res. Norm Conv?; 1 0.3303034550 -8.13e-04 1.53e-02 N; Iter=5 L=5 Root EOM Energy Delta E Res. Norm Conv?; 1 0.3299847862 -3.19e-04 9.33e-03 N; Iter=6 L=6 Root EOM Energy Delta E Res. Norm Conv?; 1 0.3299158588 -6.89e-05 4.43e-03 N; Iter=7 L=7 Root EOM Energy Delta E Res. Norm Conv?; 1 0.3299119405 -3.92e-06 1.74e-03 N; Iter=8 L=8 Root EOM Energy Delta E Res. Norm Conv?; 1 0.3299103467 -1.59e-06 6.71e-04 N; Iter=9 L=9 Root EOM Energy Delta E Res. Norm Conv?; 1 0.3299072934 -3.05e-06 3.17e-04 N; Iter=10 L=10 Root EOM Energy Delta E Res. Norm Conv?; 1 0.3299064524 -8.41e-07 1.45e-04 N; Iter=11 L=11 Root EOM Energy Delta E Res. Norm Conv?; 1 0.3299063854 -6.69e-08 9.39e-05 Y; Collapsing to only 1 vector(s). Procedure converged for 1 root(s).; Energy written to CC_INFO:Etot -231.2454217333; States per irrep written to CC_INFO.; EOM CCSD R0 for root 0 = -0.03232771150. Final Energetic Summary for Converged Roots of Irrep Ag; Excitation Energy Total Energy; (eV) (cm^-1) (au) (au); EOM State 1 8.977 72406.1 0.3299063854 -231.245421733323; ```. Summary at the end of the file also shows:; ```; 	 Excitation Energy OS RS RS Einstein A; 	State (eV) (cm^-1) (nm) (au) (l,au) (v,au) (s^-1); 	 1 Ag 8.977 72406.1 138.1 0.329906 0.0000 0.0000 0.0000 0.000000E+00; ```. If you are seeing something different could you put your output in a gist, or pastebin?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/603#issuecomment-278675637
https://github.com/psi4/psi4/issues/603#issuecomment-278675637:1475,Energy Efficiency,Energy,Energy,1475,"It was able to converge fine. . You should see a section like this in the output file showing the EOM code working away at the root. ; ```; Symmetry of ground state: Ag; Symmetry of excited state: Ag; Symmetry of right eigenvector: Ag; Seeking states with multiplicity of 1; Obtaining initial guess from singles-singles block of Hbar...Done. Iter=1 L=1 Root EOM Energy Delta E Res. Norm Conv?; 1 0.4128588902 4.13e-01 3.16e-01 N; Iter=2 L=2 Root EOM Energy Delta E Res. Norm Conv?; 1 0.3340136980 -7.88e-02 5.54e-02 N; Iter=3 L=3 Root EOM Energy Delta E Res. Norm Conv?; 1 0.3311169492 -2.90e-03 2.75e-02 N; Iter=4 L=4 Root EOM Energy Delta E Res. Norm Conv?; 1 0.3303034550 -8.13e-04 1.53e-02 N; Iter=5 L=5 Root EOM Energy Delta E Res. Norm Conv?; 1 0.3299847862 -3.19e-04 9.33e-03 N; Iter=6 L=6 Root EOM Energy Delta E Res. Norm Conv?; 1 0.3299158588 -6.89e-05 4.43e-03 N; Iter=7 L=7 Root EOM Energy Delta E Res. Norm Conv?; 1 0.3299119405 -3.92e-06 1.74e-03 N; Iter=8 L=8 Root EOM Energy Delta E Res. Norm Conv?; 1 0.3299103467 -1.59e-06 6.71e-04 N; Iter=9 L=9 Root EOM Energy Delta E Res. Norm Conv?; 1 0.3299072934 -3.05e-06 3.17e-04 N; Iter=10 L=10 Root EOM Energy Delta E Res. Norm Conv?; 1 0.3299064524 -8.41e-07 1.45e-04 N; Iter=11 L=11 Root EOM Energy Delta E Res. Norm Conv?; 1 0.3299063854 -6.69e-08 9.39e-05 Y; Collapsing to only 1 vector(s). Procedure converged for 1 root(s).; Energy written to CC_INFO:Etot -231.2454217333; States per irrep written to CC_INFO.; EOM CCSD R0 for root 0 = -0.03232771150. Final Energetic Summary for Converged Roots of Irrep Ag; Excitation Energy Total Energy; (eV) (cm^-1) (au) (au); EOM State 1 8.977 72406.1 0.3299063854 -231.245421733323; ```. Summary at the end of the file also shows:; ```; 	 Excitation Energy OS RS RS Einstein A; 	State (eV) (cm^-1) (nm) (au) (l,au) (v,au) (s^-1); 	 1 Ag 8.977 72406.1 138.1 0.329906 0.0000 0.0000 0.0000 0.000000E+00; ```. If you are seeing something different could you put your output in a gist, or pastebin?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/603#issuecomment-278675637
https://github.com/psi4/psi4/issues/603#issuecomment-278675637:1670,Energy Efficiency,Energy,Energy,1670,"It was able to converge fine. . You should see a section like this in the output file showing the EOM code working away at the root. ; ```; Symmetry of ground state: Ag; Symmetry of excited state: Ag; Symmetry of right eigenvector: Ag; Seeking states with multiplicity of 1; Obtaining initial guess from singles-singles block of Hbar...Done. Iter=1 L=1 Root EOM Energy Delta E Res. Norm Conv?; 1 0.4128588902 4.13e-01 3.16e-01 N; Iter=2 L=2 Root EOM Energy Delta E Res. Norm Conv?; 1 0.3340136980 -7.88e-02 5.54e-02 N; Iter=3 L=3 Root EOM Energy Delta E Res. Norm Conv?; 1 0.3311169492 -2.90e-03 2.75e-02 N; Iter=4 L=4 Root EOM Energy Delta E Res. Norm Conv?; 1 0.3303034550 -8.13e-04 1.53e-02 N; Iter=5 L=5 Root EOM Energy Delta E Res. Norm Conv?; 1 0.3299847862 -3.19e-04 9.33e-03 N; Iter=6 L=6 Root EOM Energy Delta E Res. Norm Conv?; 1 0.3299158588 -6.89e-05 4.43e-03 N; Iter=7 L=7 Root EOM Energy Delta E Res. Norm Conv?; 1 0.3299119405 -3.92e-06 1.74e-03 N; Iter=8 L=8 Root EOM Energy Delta E Res. Norm Conv?; 1 0.3299103467 -1.59e-06 6.71e-04 N; Iter=9 L=9 Root EOM Energy Delta E Res. Norm Conv?; 1 0.3299072934 -3.05e-06 3.17e-04 N; Iter=10 L=10 Root EOM Energy Delta E Res. Norm Conv?; 1 0.3299064524 -8.41e-07 1.45e-04 N; Iter=11 L=11 Root EOM Energy Delta E Res. Norm Conv?; 1 0.3299063854 -6.69e-08 9.39e-05 Y; Collapsing to only 1 vector(s). Procedure converged for 1 root(s).; Energy written to CC_INFO:Etot -231.2454217333; States per irrep written to CC_INFO.; EOM CCSD R0 for root 0 = -0.03232771150. Final Energetic Summary for Converged Roots of Irrep Ag; Excitation Energy Total Energy; (eV) (cm^-1) (au) (au); EOM State 1 8.977 72406.1 0.3299063854 -231.245421733323; ```. Summary at the end of the file also shows:; ```; 	 Excitation Energy OS RS RS Einstein A; 	State (eV) (cm^-1) (nm) (au) (l,au) (v,au) (s^-1); 	 1 Ag 8.977 72406.1 138.1 0.329906 0.0000 0.0000 0.0000 0.000000E+00; ```. If you are seeing something different could you put your output in a gist, or pastebin?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/603#issuecomment-278675637
https://github.com/psi4/psi4/issues/603#issuecomment-278675637:1683,Energy Efficiency,Energy,Energy,1683,"It was able to converge fine. . You should see a section like this in the output file showing the EOM code working away at the root. ; ```; Symmetry of ground state: Ag; Symmetry of excited state: Ag; Symmetry of right eigenvector: Ag; Seeking states with multiplicity of 1; Obtaining initial guess from singles-singles block of Hbar...Done. Iter=1 L=1 Root EOM Energy Delta E Res. Norm Conv?; 1 0.4128588902 4.13e-01 3.16e-01 N; Iter=2 L=2 Root EOM Energy Delta E Res. Norm Conv?; 1 0.3340136980 -7.88e-02 5.54e-02 N; Iter=3 L=3 Root EOM Energy Delta E Res. Norm Conv?; 1 0.3311169492 -2.90e-03 2.75e-02 N; Iter=4 L=4 Root EOM Energy Delta E Res. Norm Conv?; 1 0.3303034550 -8.13e-04 1.53e-02 N; Iter=5 L=5 Root EOM Energy Delta E Res. Norm Conv?; 1 0.3299847862 -3.19e-04 9.33e-03 N; Iter=6 L=6 Root EOM Energy Delta E Res. Norm Conv?; 1 0.3299158588 -6.89e-05 4.43e-03 N; Iter=7 L=7 Root EOM Energy Delta E Res. Norm Conv?; 1 0.3299119405 -3.92e-06 1.74e-03 N; Iter=8 L=8 Root EOM Energy Delta E Res. Norm Conv?; 1 0.3299103467 -1.59e-06 6.71e-04 N; Iter=9 L=9 Root EOM Energy Delta E Res. Norm Conv?; 1 0.3299072934 -3.05e-06 3.17e-04 N; Iter=10 L=10 Root EOM Energy Delta E Res. Norm Conv?; 1 0.3299064524 -8.41e-07 1.45e-04 N; Iter=11 L=11 Root EOM Energy Delta E Res. Norm Conv?; 1 0.3299063854 -6.69e-08 9.39e-05 Y; Collapsing to only 1 vector(s). Procedure converged for 1 root(s).; Energy written to CC_INFO:Etot -231.2454217333; States per irrep written to CC_INFO.; EOM CCSD R0 for root 0 = -0.03232771150. Final Energetic Summary for Converged Roots of Irrep Ag; Excitation Energy Total Energy; (eV) (cm^-1) (au) (au); EOM State 1 8.977 72406.1 0.3299063854 -231.245421733323; ```. Summary at the end of the file also shows:; ```; 	 Excitation Energy OS RS RS Einstein A; 	State (eV) (cm^-1) (nm) (au) (l,au) (v,au) (s^-1); 	 1 Ag 8.977 72406.1 138.1 0.329906 0.0000 0.0000 0.0000 0.000000E+00; ```. If you are seeing something different could you put your output in a gist, or pastebin?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/603#issuecomment-278675637
https://github.com/psi4/psi4/issues/603#issuecomment-278675637:1840,Energy Efficiency,Energy,Energy,1840,"It was able to converge fine. . You should see a section like this in the output file showing the EOM code working away at the root. ; ```; Symmetry of ground state: Ag; Symmetry of excited state: Ag; Symmetry of right eigenvector: Ag; Seeking states with multiplicity of 1; Obtaining initial guess from singles-singles block of Hbar...Done. Iter=1 L=1 Root EOM Energy Delta E Res. Norm Conv?; 1 0.4128588902 4.13e-01 3.16e-01 N; Iter=2 L=2 Root EOM Energy Delta E Res. Norm Conv?; 1 0.3340136980 -7.88e-02 5.54e-02 N; Iter=3 L=3 Root EOM Energy Delta E Res. Norm Conv?; 1 0.3311169492 -2.90e-03 2.75e-02 N; Iter=4 L=4 Root EOM Energy Delta E Res. Norm Conv?; 1 0.3303034550 -8.13e-04 1.53e-02 N; Iter=5 L=5 Root EOM Energy Delta E Res. Norm Conv?; 1 0.3299847862 -3.19e-04 9.33e-03 N; Iter=6 L=6 Root EOM Energy Delta E Res. Norm Conv?; 1 0.3299158588 -6.89e-05 4.43e-03 N; Iter=7 L=7 Root EOM Energy Delta E Res. Norm Conv?; 1 0.3299119405 -3.92e-06 1.74e-03 N; Iter=8 L=8 Root EOM Energy Delta E Res. Norm Conv?; 1 0.3299103467 -1.59e-06 6.71e-04 N; Iter=9 L=9 Root EOM Energy Delta E Res. Norm Conv?; 1 0.3299072934 -3.05e-06 3.17e-04 N; Iter=10 L=10 Root EOM Energy Delta E Res. Norm Conv?; 1 0.3299064524 -8.41e-07 1.45e-04 N; Iter=11 L=11 Root EOM Energy Delta E Res. Norm Conv?; 1 0.3299063854 -6.69e-08 9.39e-05 Y; Collapsing to only 1 vector(s). Procedure converged for 1 root(s).; Energy written to CC_INFO:Etot -231.2454217333; States per irrep written to CC_INFO.; EOM CCSD R0 for root 0 = -0.03232771150. Final Energetic Summary for Converged Roots of Irrep Ag; Excitation Energy Total Energy; (eV) (cm^-1) (au) (au); EOM State 1 8.977 72406.1 0.3299063854 -231.245421733323; ```. Summary at the end of the file also shows:; ```; 	 Excitation Energy OS RS RS Einstein A; 	State (eV) (cm^-1) (nm) (au) (l,au) (v,au) (s^-1); 	 1 Ag 8.977 72406.1 138.1 0.329906 0.0000 0.0000 0.0000 0.000000E+00; ```. If you are seeing something different could you put your output in a gist, or pastebin?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/603#issuecomment-278675637
https://github.com/psi4/psi4/issues/603#issuecomment-279097143:127,Energy Efficiency,Energy,Energy,127,"If you calculate higher roots : set roots_per_irrep [3,0,0,0,0,0,0,0]. you should get the followings : . Iter=49 L=36 Root EOM Energy Delta E Res. Norm Conv?; 1 0.3243016108 3.23e-10 5.08e-07 Y; 2 0.3299082274 -4.27e-08 2.15e-05 N; 3 0.3364017920 3.03e-10 6.02e-07 Y; Iter=50 L=6 Root EOM Energy Delta E Res. Norm Conv?; 1 0.3243016107 -4.16e-11 5.07e-07 Y; 2 0.3299082274 9.50e-12 2.15e-05 N; 3 0.3364017920 -1.83e-11 6.05e-07 Y; Iter=51 L=7 Root EOM Energy Delta E Res. Norm Conv?; 1 0.3243016107 -7.15e-12 5.08e-07 Y; 2 0.3299081111 -1.16e-07 2.65e-05 N; 3 0.3364017920 5.08e-11 6.06e-07 Y; Iter=52 L=8 Root EOM Energy Delta E Res. Norm Conv?; 1 0.3243016109 1.66e-10 5.11e-07 Y; 2 0.3299079665 -1.45e-07 1.51e-05 N; 3 0.3364017922 1.60e-10 6.04e-07 Y; Iter=53 L=9 Root EOM Energy Delta E Res. Norm Conv?; 1 0.3243016134 2.49e-09 4.23e-07 Y; 2 0.3299076116 -3.55e-07 2.15e-05 N; 3 0.3364017922 -2.69e-11 6.01e-07 Y; Iter=54 L=10 Root EOM Energy Delta E Res. Norm Conv?; 1 0.3031989513 -2.11e-02 2.19e-01 N; 2 0.3243016119 -5.61e-03 4.37e-07 N; 3 0.3299093542 -6.49e-03 4.01e-05 N; Iter=55 L=13 Root EOM Energy Delta E Res. Norm Conv?; 1 0.1959550539 -1.07e-01 1.77e-01 N; 2 0.3243016120 1.51e-10 2.03e-07 Y; 3 0.3299083008 -1.05e-06 1.35e-05 N; Iter=56 L=15 Root EOM Energy Delta E Res. Norm Conv?; 1 0.1704364933 -2.55e-02 7.63e-02 N; 2 0.3243016120 2.24e-11 1.99e-07 Y; 3 0.3299082189 -8.19e-08 1.11e-05 N; Iter=57 L=17 Root EOM Energy Delta E Res. Norm Conv?; 1 0.1646225593 -5.81e-03 4.39e-02 N; 2 0.3243016115 -5.11e-10 1.86e-07 Y; 3 0.3299081686 -5.03e-08 1.05e-05 N; Iter=58 L=19 Root EOM Energy Delta E Res. Norm Conv?; 1 0.1600433140 -4.58e-03 5.00e-02 N; 2 0.2894312372 -3.49e-02 2.35e-01 N; 3 0.3243016111 -5.61e-03 2.21e-07 N",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/603#issuecomment-279097143
https://github.com/psi4/psi4/issues/603#issuecomment-279097143:289,Energy Efficiency,Energy,Energy,289,"If you calculate higher roots : set roots_per_irrep [3,0,0,0,0,0,0,0]. you should get the followings : . Iter=49 L=36 Root EOM Energy Delta E Res. Norm Conv?; 1 0.3243016108 3.23e-10 5.08e-07 Y; 2 0.3299082274 -4.27e-08 2.15e-05 N; 3 0.3364017920 3.03e-10 6.02e-07 Y; Iter=50 L=6 Root EOM Energy Delta E Res. Norm Conv?; 1 0.3243016107 -4.16e-11 5.07e-07 Y; 2 0.3299082274 9.50e-12 2.15e-05 N; 3 0.3364017920 -1.83e-11 6.05e-07 Y; Iter=51 L=7 Root EOM Energy Delta E Res. Norm Conv?; 1 0.3243016107 -7.15e-12 5.08e-07 Y; 2 0.3299081111 -1.16e-07 2.65e-05 N; 3 0.3364017920 5.08e-11 6.06e-07 Y; Iter=52 L=8 Root EOM Energy Delta E Res. Norm Conv?; 1 0.3243016109 1.66e-10 5.11e-07 Y; 2 0.3299079665 -1.45e-07 1.51e-05 N; 3 0.3364017922 1.60e-10 6.04e-07 Y; Iter=53 L=9 Root EOM Energy Delta E Res. Norm Conv?; 1 0.3243016134 2.49e-09 4.23e-07 Y; 2 0.3299076116 -3.55e-07 2.15e-05 N; 3 0.3364017922 -2.69e-11 6.01e-07 Y; Iter=54 L=10 Root EOM Energy Delta E Res. Norm Conv?; 1 0.3031989513 -2.11e-02 2.19e-01 N; 2 0.3243016119 -5.61e-03 4.37e-07 N; 3 0.3299093542 -6.49e-03 4.01e-05 N; Iter=55 L=13 Root EOM Energy Delta E Res. Norm Conv?; 1 0.1959550539 -1.07e-01 1.77e-01 N; 2 0.3243016120 1.51e-10 2.03e-07 Y; 3 0.3299083008 -1.05e-06 1.35e-05 N; Iter=56 L=15 Root EOM Energy Delta E Res. Norm Conv?; 1 0.1704364933 -2.55e-02 7.63e-02 N; 2 0.3243016120 2.24e-11 1.99e-07 Y; 3 0.3299082189 -8.19e-08 1.11e-05 N; Iter=57 L=17 Root EOM Energy Delta E Res. Norm Conv?; 1 0.1646225593 -5.81e-03 4.39e-02 N; 2 0.3243016115 -5.11e-10 1.86e-07 Y; 3 0.3299081686 -5.03e-08 1.05e-05 N; Iter=58 L=19 Root EOM Energy Delta E Res. Norm Conv?; 1 0.1600433140 -4.58e-03 5.00e-02 N; 2 0.2894312372 -3.49e-02 2.35e-01 N; 3 0.3243016111 -5.61e-03 2.21e-07 N",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/603#issuecomment-279097143
https://github.com/psi4/psi4/issues/603#issuecomment-279097143:452,Energy Efficiency,Energy,Energy,452,"If you calculate higher roots : set roots_per_irrep [3,0,0,0,0,0,0,0]. you should get the followings : . Iter=49 L=36 Root EOM Energy Delta E Res. Norm Conv?; 1 0.3243016108 3.23e-10 5.08e-07 Y; 2 0.3299082274 -4.27e-08 2.15e-05 N; 3 0.3364017920 3.03e-10 6.02e-07 Y; Iter=50 L=6 Root EOM Energy Delta E Res. Norm Conv?; 1 0.3243016107 -4.16e-11 5.07e-07 Y; 2 0.3299082274 9.50e-12 2.15e-05 N; 3 0.3364017920 -1.83e-11 6.05e-07 Y; Iter=51 L=7 Root EOM Energy Delta E Res. Norm Conv?; 1 0.3243016107 -7.15e-12 5.08e-07 Y; 2 0.3299081111 -1.16e-07 2.65e-05 N; 3 0.3364017920 5.08e-11 6.06e-07 Y; Iter=52 L=8 Root EOM Energy Delta E Res. Norm Conv?; 1 0.3243016109 1.66e-10 5.11e-07 Y; 2 0.3299079665 -1.45e-07 1.51e-05 N; 3 0.3364017922 1.60e-10 6.04e-07 Y; Iter=53 L=9 Root EOM Energy Delta E Res. Norm Conv?; 1 0.3243016134 2.49e-09 4.23e-07 Y; 2 0.3299076116 -3.55e-07 2.15e-05 N; 3 0.3364017922 -2.69e-11 6.01e-07 Y; Iter=54 L=10 Root EOM Energy Delta E Res. Norm Conv?; 1 0.3031989513 -2.11e-02 2.19e-01 N; 2 0.3243016119 -5.61e-03 4.37e-07 N; 3 0.3299093542 -6.49e-03 4.01e-05 N; Iter=55 L=13 Root EOM Energy Delta E Res. Norm Conv?; 1 0.1959550539 -1.07e-01 1.77e-01 N; 2 0.3243016120 1.51e-10 2.03e-07 Y; 3 0.3299083008 -1.05e-06 1.35e-05 N; Iter=56 L=15 Root EOM Energy Delta E Res. Norm Conv?; 1 0.1704364933 -2.55e-02 7.63e-02 N; 2 0.3243016120 2.24e-11 1.99e-07 Y; 3 0.3299082189 -8.19e-08 1.11e-05 N; Iter=57 L=17 Root EOM Energy Delta E Res. Norm Conv?; 1 0.1646225593 -5.81e-03 4.39e-02 N; 2 0.3243016115 -5.11e-10 1.86e-07 Y; 3 0.3299081686 -5.03e-08 1.05e-05 N; Iter=58 L=19 Root EOM Energy Delta E Res. Norm Conv?; 1 0.1600433140 -4.58e-03 5.00e-02 N; 2 0.2894312372 -3.49e-02 2.35e-01 N; 3 0.3243016111 -5.61e-03 2.21e-07 N",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/603#issuecomment-279097143
https://github.com/psi4/psi4/issues/603#issuecomment-279097143:615,Energy Efficiency,Energy,Energy,615,"If you calculate higher roots : set roots_per_irrep [3,0,0,0,0,0,0,0]. you should get the followings : . Iter=49 L=36 Root EOM Energy Delta E Res. Norm Conv?; 1 0.3243016108 3.23e-10 5.08e-07 Y; 2 0.3299082274 -4.27e-08 2.15e-05 N; 3 0.3364017920 3.03e-10 6.02e-07 Y; Iter=50 L=6 Root EOM Energy Delta E Res. Norm Conv?; 1 0.3243016107 -4.16e-11 5.07e-07 Y; 2 0.3299082274 9.50e-12 2.15e-05 N; 3 0.3364017920 -1.83e-11 6.05e-07 Y; Iter=51 L=7 Root EOM Energy Delta E Res. Norm Conv?; 1 0.3243016107 -7.15e-12 5.08e-07 Y; 2 0.3299081111 -1.16e-07 2.65e-05 N; 3 0.3364017920 5.08e-11 6.06e-07 Y; Iter=52 L=8 Root EOM Energy Delta E Res. Norm Conv?; 1 0.3243016109 1.66e-10 5.11e-07 Y; 2 0.3299079665 -1.45e-07 1.51e-05 N; 3 0.3364017922 1.60e-10 6.04e-07 Y; Iter=53 L=9 Root EOM Energy Delta E Res. Norm Conv?; 1 0.3243016134 2.49e-09 4.23e-07 Y; 2 0.3299076116 -3.55e-07 2.15e-05 N; 3 0.3364017922 -2.69e-11 6.01e-07 Y; Iter=54 L=10 Root EOM Energy Delta E Res. Norm Conv?; 1 0.3031989513 -2.11e-02 2.19e-01 N; 2 0.3243016119 -5.61e-03 4.37e-07 N; 3 0.3299093542 -6.49e-03 4.01e-05 N; Iter=55 L=13 Root EOM Energy Delta E Res. Norm Conv?; 1 0.1959550539 -1.07e-01 1.77e-01 N; 2 0.3243016120 1.51e-10 2.03e-07 Y; 3 0.3299083008 -1.05e-06 1.35e-05 N; Iter=56 L=15 Root EOM Energy Delta E Res. Norm Conv?; 1 0.1704364933 -2.55e-02 7.63e-02 N; 2 0.3243016120 2.24e-11 1.99e-07 Y; 3 0.3299082189 -8.19e-08 1.11e-05 N; Iter=57 L=17 Root EOM Energy Delta E Res. Norm Conv?; 1 0.1646225593 -5.81e-03 4.39e-02 N; 2 0.3243016115 -5.11e-10 1.86e-07 Y; 3 0.3299081686 -5.03e-08 1.05e-05 N; Iter=58 L=19 Root EOM Energy Delta E Res. Norm Conv?; 1 0.1600433140 -4.58e-03 5.00e-02 N; 2 0.2894312372 -3.49e-02 2.35e-01 N; 3 0.3243016111 -5.61e-03 2.21e-07 N",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/603#issuecomment-279097143
https://github.com/psi4/psi4/issues/603#issuecomment-279097143:777,Energy Efficiency,Energy,Energy,777,"If you calculate higher roots : set roots_per_irrep [3,0,0,0,0,0,0,0]. you should get the followings : . Iter=49 L=36 Root EOM Energy Delta E Res. Norm Conv?; 1 0.3243016108 3.23e-10 5.08e-07 Y; 2 0.3299082274 -4.27e-08 2.15e-05 N; 3 0.3364017920 3.03e-10 6.02e-07 Y; Iter=50 L=6 Root EOM Energy Delta E Res. Norm Conv?; 1 0.3243016107 -4.16e-11 5.07e-07 Y; 2 0.3299082274 9.50e-12 2.15e-05 N; 3 0.3364017920 -1.83e-11 6.05e-07 Y; Iter=51 L=7 Root EOM Energy Delta E Res. Norm Conv?; 1 0.3243016107 -7.15e-12 5.08e-07 Y; 2 0.3299081111 -1.16e-07 2.65e-05 N; 3 0.3364017920 5.08e-11 6.06e-07 Y; Iter=52 L=8 Root EOM Energy Delta E Res. Norm Conv?; 1 0.3243016109 1.66e-10 5.11e-07 Y; 2 0.3299079665 -1.45e-07 1.51e-05 N; 3 0.3364017922 1.60e-10 6.04e-07 Y; Iter=53 L=9 Root EOM Energy Delta E Res. Norm Conv?; 1 0.3243016134 2.49e-09 4.23e-07 Y; 2 0.3299076116 -3.55e-07 2.15e-05 N; 3 0.3364017922 -2.69e-11 6.01e-07 Y; Iter=54 L=10 Root EOM Energy Delta E Res. Norm Conv?; 1 0.3031989513 -2.11e-02 2.19e-01 N; 2 0.3243016119 -5.61e-03 4.37e-07 N; 3 0.3299093542 -6.49e-03 4.01e-05 N; Iter=55 L=13 Root EOM Energy Delta E Res. Norm Conv?; 1 0.1959550539 -1.07e-01 1.77e-01 N; 2 0.3243016120 1.51e-10 2.03e-07 Y; 3 0.3299083008 -1.05e-06 1.35e-05 N; Iter=56 L=15 Root EOM Energy Delta E Res. Norm Conv?; 1 0.1704364933 -2.55e-02 7.63e-02 N; 2 0.3243016120 2.24e-11 1.99e-07 Y; 3 0.3299082189 -8.19e-08 1.11e-05 N; Iter=57 L=17 Root EOM Energy Delta E Res. Norm Conv?; 1 0.1646225593 -5.81e-03 4.39e-02 N; 2 0.3243016115 -5.11e-10 1.86e-07 Y; 3 0.3299081686 -5.03e-08 1.05e-05 N; Iter=58 L=19 Root EOM Energy Delta E Res. Norm Conv?; 1 0.1600433140 -4.58e-03 5.00e-02 N; 2 0.2894312372 -3.49e-02 2.35e-01 N; 3 0.3243016111 -5.61e-03 2.21e-07 N",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/603#issuecomment-279097143
https://github.com/psi4/psi4/issues/603#issuecomment-279097143:941,Energy Efficiency,Energy,Energy,941,"If you calculate higher roots : set roots_per_irrep [3,0,0,0,0,0,0,0]. you should get the followings : . Iter=49 L=36 Root EOM Energy Delta E Res. Norm Conv?; 1 0.3243016108 3.23e-10 5.08e-07 Y; 2 0.3299082274 -4.27e-08 2.15e-05 N; 3 0.3364017920 3.03e-10 6.02e-07 Y; Iter=50 L=6 Root EOM Energy Delta E Res. Norm Conv?; 1 0.3243016107 -4.16e-11 5.07e-07 Y; 2 0.3299082274 9.50e-12 2.15e-05 N; 3 0.3364017920 -1.83e-11 6.05e-07 Y; Iter=51 L=7 Root EOM Energy Delta E Res. Norm Conv?; 1 0.3243016107 -7.15e-12 5.08e-07 Y; 2 0.3299081111 -1.16e-07 2.65e-05 N; 3 0.3364017920 5.08e-11 6.06e-07 Y; Iter=52 L=8 Root EOM Energy Delta E Res. Norm Conv?; 1 0.3243016109 1.66e-10 5.11e-07 Y; 2 0.3299079665 -1.45e-07 1.51e-05 N; 3 0.3364017922 1.60e-10 6.04e-07 Y; Iter=53 L=9 Root EOM Energy Delta E Res. Norm Conv?; 1 0.3243016134 2.49e-09 4.23e-07 Y; 2 0.3299076116 -3.55e-07 2.15e-05 N; 3 0.3364017922 -2.69e-11 6.01e-07 Y; Iter=54 L=10 Root EOM Energy Delta E Res. Norm Conv?; 1 0.3031989513 -2.11e-02 2.19e-01 N; 2 0.3243016119 -5.61e-03 4.37e-07 N; 3 0.3299093542 -6.49e-03 4.01e-05 N; Iter=55 L=13 Root EOM Energy Delta E Res. Norm Conv?; 1 0.1959550539 -1.07e-01 1.77e-01 N; 2 0.3243016120 1.51e-10 2.03e-07 Y; 3 0.3299083008 -1.05e-06 1.35e-05 N; Iter=56 L=15 Root EOM Energy Delta E Res. Norm Conv?; 1 0.1704364933 -2.55e-02 7.63e-02 N; 2 0.3243016120 2.24e-11 1.99e-07 Y; 3 0.3299082189 -8.19e-08 1.11e-05 N; Iter=57 L=17 Root EOM Energy Delta E Res. Norm Conv?; 1 0.1646225593 -5.81e-03 4.39e-02 N; 2 0.3243016115 -5.11e-10 1.86e-07 Y; 3 0.3299081686 -5.03e-08 1.05e-05 N; Iter=58 L=19 Root EOM Energy Delta E Res. Norm Conv?; 1 0.1600433140 -4.58e-03 5.00e-02 N; 2 0.2894312372 -3.49e-02 2.35e-01 N; 3 0.3243016111 -5.61e-03 2.21e-07 N",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/603#issuecomment-279097143
https://github.com/psi4/psi4/issues/603#issuecomment-279097143:1106,Energy Efficiency,Energy,Energy,1106,"If you calculate higher roots : set roots_per_irrep [3,0,0,0,0,0,0,0]. you should get the followings : . Iter=49 L=36 Root EOM Energy Delta E Res. Norm Conv?; 1 0.3243016108 3.23e-10 5.08e-07 Y; 2 0.3299082274 -4.27e-08 2.15e-05 N; 3 0.3364017920 3.03e-10 6.02e-07 Y; Iter=50 L=6 Root EOM Energy Delta E Res. Norm Conv?; 1 0.3243016107 -4.16e-11 5.07e-07 Y; 2 0.3299082274 9.50e-12 2.15e-05 N; 3 0.3364017920 -1.83e-11 6.05e-07 Y; Iter=51 L=7 Root EOM Energy Delta E Res. Norm Conv?; 1 0.3243016107 -7.15e-12 5.08e-07 Y; 2 0.3299081111 -1.16e-07 2.65e-05 N; 3 0.3364017920 5.08e-11 6.06e-07 Y; Iter=52 L=8 Root EOM Energy Delta E Res. Norm Conv?; 1 0.3243016109 1.66e-10 5.11e-07 Y; 2 0.3299079665 -1.45e-07 1.51e-05 N; 3 0.3364017922 1.60e-10 6.04e-07 Y; Iter=53 L=9 Root EOM Energy Delta E Res. Norm Conv?; 1 0.3243016134 2.49e-09 4.23e-07 Y; 2 0.3299076116 -3.55e-07 2.15e-05 N; 3 0.3364017922 -2.69e-11 6.01e-07 Y; Iter=54 L=10 Root EOM Energy Delta E Res. Norm Conv?; 1 0.3031989513 -2.11e-02 2.19e-01 N; 2 0.3243016119 -5.61e-03 4.37e-07 N; 3 0.3299093542 -6.49e-03 4.01e-05 N; Iter=55 L=13 Root EOM Energy Delta E Res. Norm Conv?; 1 0.1959550539 -1.07e-01 1.77e-01 N; 2 0.3243016120 1.51e-10 2.03e-07 Y; 3 0.3299083008 -1.05e-06 1.35e-05 N; Iter=56 L=15 Root EOM Energy Delta E Res. Norm Conv?; 1 0.1704364933 -2.55e-02 7.63e-02 N; 2 0.3243016120 2.24e-11 1.99e-07 Y; 3 0.3299082189 -8.19e-08 1.11e-05 N; Iter=57 L=17 Root EOM Energy Delta E Res. Norm Conv?; 1 0.1646225593 -5.81e-03 4.39e-02 N; 2 0.3243016115 -5.11e-10 1.86e-07 Y; 3 0.3299081686 -5.03e-08 1.05e-05 N; Iter=58 L=19 Root EOM Energy Delta E Res. Norm Conv?; 1 0.1600433140 -4.58e-03 5.00e-02 N; 2 0.2894312372 -3.49e-02 2.35e-01 N; 3 0.3243016111 -5.61e-03 2.21e-07 N",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/603#issuecomment-279097143
https://github.com/psi4/psi4/issues/603#issuecomment-279097143:1270,Energy Efficiency,Energy,Energy,1270,"If you calculate higher roots : set roots_per_irrep [3,0,0,0,0,0,0,0]. you should get the followings : . Iter=49 L=36 Root EOM Energy Delta E Res. Norm Conv?; 1 0.3243016108 3.23e-10 5.08e-07 Y; 2 0.3299082274 -4.27e-08 2.15e-05 N; 3 0.3364017920 3.03e-10 6.02e-07 Y; Iter=50 L=6 Root EOM Energy Delta E Res. Norm Conv?; 1 0.3243016107 -4.16e-11 5.07e-07 Y; 2 0.3299082274 9.50e-12 2.15e-05 N; 3 0.3364017920 -1.83e-11 6.05e-07 Y; Iter=51 L=7 Root EOM Energy Delta E Res. Norm Conv?; 1 0.3243016107 -7.15e-12 5.08e-07 Y; 2 0.3299081111 -1.16e-07 2.65e-05 N; 3 0.3364017920 5.08e-11 6.06e-07 Y; Iter=52 L=8 Root EOM Energy Delta E Res. Norm Conv?; 1 0.3243016109 1.66e-10 5.11e-07 Y; 2 0.3299079665 -1.45e-07 1.51e-05 N; 3 0.3364017922 1.60e-10 6.04e-07 Y; Iter=53 L=9 Root EOM Energy Delta E Res. Norm Conv?; 1 0.3243016134 2.49e-09 4.23e-07 Y; 2 0.3299076116 -3.55e-07 2.15e-05 N; 3 0.3364017922 -2.69e-11 6.01e-07 Y; Iter=54 L=10 Root EOM Energy Delta E Res. Norm Conv?; 1 0.3031989513 -2.11e-02 2.19e-01 N; 2 0.3243016119 -5.61e-03 4.37e-07 N; 3 0.3299093542 -6.49e-03 4.01e-05 N; Iter=55 L=13 Root EOM Energy Delta E Res. Norm Conv?; 1 0.1959550539 -1.07e-01 1.77e-01 N; 2 0.3243016120 1.51e-10 2.03e-07 Y; 3 0.3299083008 -1.05e-06 1.35e-05 N; Iter=56 L=15 Root EOM Energy Delta E Res. Norm Conv?; 1 0.1704364933 -2.55e-02 7.63e-02 N; 2 0.3243016120 2.24e-11 1.99e-07 Y; 3 0.3299082189 -8.19e-08 1.11e-05 N; Iter=57 L=17 Root EOM Energy Delta E Res. Norm Conv?; 1 0.1646225593 -5.81e-03 4.39e-02 N; 2 0.3243016115 -5.11e-10 1.86e-07 Y; 3 0.3299081686 -5.03e-08 1.05e-05 N; Iter=58 L=19 Root EOM Energy Delta E Res. Norm Conv?; 1 0.1600433140 -4.58e-03 5.00e-02 N; 2 0.2894312372 -3.49e-02 2.35e-01 N; 3 0.3243016111 -5.61e-03 2.21e-07 N",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/603#issuecomment-279097143
https://github.com/psi4/psi4/issues/603#issuecomment-279097143:1434,Energy Efficiency,Energy,Energy,1434,"If you calculate higher roots : set roots_per_irrep [3,0,0,0,0,0,0,0]. you should get the followings : . Iter=49 L=36 Root EOM Energy Delta E Res. Norm Conv?; 1 0.3243016108 3.23e-10 5.08e-07 Y; 2 0.3299082274 -4.27e-08 2.15e-05 N; 3 0.3364017920 3.03e-10 6.02e-07 Y; Iter=50 L=6 Root EOM Energy Delta E Res. Norm Conv?; 1 0.3243016107 -4.16e-11 5.07e-07 Y; 2 0.3299082274 9.50e-12 2.15e-05 N; 3 0.3364017920 -1.83e-11 6.05e-07 Y; Iter=51 L=7 Root EOM Energy Delta E Res. Norm Conv?; 1 0.3243016107 -7.15e-12 5.08e-07 Y; 2 0.3299081111 -1.16e-07 2.65e-05 N; 3 0.3364017920 5.08e-11 6.06e-07 Y; Iter=52 L=8 Root EOM Energy Delta E Res. Norm Conv?; 1 0.3243016109 1.66e-10 5.11e-07 Y; 2 0.3299079665 -1.45e-07 1.51e-05 N; 3 0.3364017922 1.60e-10 6.04e-07 Y; Iter=53 L=9 Root EOM Energy Delta E Res. Norm Conv?; 1 0.3243016134 2.49e-09 4.23e-07 Y; 2 0.3299076116 -3.55e-07 2.15e-05 N; 3 0.3364017922 -2.69e-11 6.01e-07 Y; Iter=54 L=10 Root EOM Energy Delta E Res. Norm Conv?; 1 0.3031989513 -2.11e-02 2.19e-01 N; 2 0.3243016119 -5.61e-03 4.37e-07 N; 3 0.3299093542 -6.49e-03 4.01e-05 N; Iter=55 L=13 Root EOM Energy Delta E Res. Norm Conv?; 1 0.1959550539 -1.07e-01 1.77e-01 N; 2 0.3243016120 1.51e-10 2.03e-07 Y; 3 0.3299083008 -1.05e-06 1.35e-05 N; Iter=56 L=15 Root EOM Energy Delta E Res. Norm Conv?; 1 0.1704364933 -2.55e-02 7.63e-02 N; 2 0.3243016120 2.24e-11 1.99e-07 Y; 3 0.3299082189 -8.19e-08 1.11e-05 N; Iter=57 L=17 Root EOM Energy Delta E Res. Norm Conv?; 1 0.1646225593 -5.81e-03 4.39e-02 N; 2 0.3243016115 -5.11e-10 1.86e-07 Y; 3 0.3299081686 -5.03e-08 1.05e-05 N; Iter=58 L=19 Root EOM Energy Delta E Res. Norm Conv?; 1 0.1600433140 -4.58e-03 5.00e-02 N; 2 0.2894312372 -3.49e-02 2.35e-01 N; 3 0.3243016111 -5.61e-03 2.21e-07 N",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/603#issuecomment-279097143
https://github.com/psi4/psi4/issues/603#issuecomment-279097143:1599,Energy Efficiency,Energy,Energy,1599,"If you calculate higher roots : set roots_per_irrep [3,0,0,0,0,0,0,0]. you should get the followings : . Iter=49 L=36 Root EOM Energy Delta E Res. Norm Conv?; 1 0.3243016108 3.23e-10 5.08e-07 Y; 2 0.3299082274 -4.27e-08 2.15e-05 N; 3 0.3364017920 3.03e-10 6.02e-07 Y; Iter=50 L=6 Root EOM Energy Delta E Res. Norm Conv?; 1 0.3243016107 -4.16e-11 5.07e-07 Y; 2 0.3299082274 9.50e-12 2.15e-05 N; 3 0.3364017920 -1.83e-11 6.05e-07 Y; Iter=51 L=7 Root EOM Energy Delta E Res. Norm Conv?; 1 0.3243016107 -7.15e-12 5.08e-07 Y; 2 0.3299081111 -1.16e-07 2.65e-05 N; 3 0.3364017920 5.08e-11 6.06e-07 Y; Iter=52 L=8 Root EOM Energy Delta E Res. Norm Conv?; 1 0.3243016109 1.66e-10 5.11e-07 Y; 2 0.3299079665 -1.45e-07 1.51e-05 N; 3 0.3364017922 1.60e-10 6.04e-07 Y; Iter=53 L=9 Root EOM Energy Delta E Res. Norm Conv?; 1 0.3243016134 2.49e-09 4.23e-07 Y; 2 0.3299076116 -3.55e-07 2.15e-05 N; 3 0.3364017922 -2.69e-11 6.01e-07 Y; Iter=54 L=10 Root EOM Energy Delta E Res. Norm Conv?; 1 0.3031989513 -2.11e-02 2.19e-01 N; 2 0.3243016119 -5.61e-03 4.37e-07 N; 3 0.3299093542 -6.49e-03 4.01e-05 N; Iter=55 L=13 Root EOM Energy Delta E Res. Norm Conv?; 1 0.1959550539 -1.07e-01 1.77e-01 N; 2 0.3243016120 1.51e-10 2.03e-07 Y; 3 0.3299083008 -1.05e-06 1.35e-05 N; Iter=56 L=15 Root EOM Energy Delta E Res. Norm Conv?; 1 0.1704364933 -2.55e-02 7.63e-02 N; 2 0.3243016120 2.24e-11 1.99e-07 Y; 3 0.3299082189 -8.19e-08 1.11e-05 N; Iter=57 L=17 Root EOM Energy Delta E Res. Norm Conv?; 1 0.1646225593 -5.81e-03 4.39e-02 N; 2 0.3243016115 -5.11e-10 1.86e-07 Y; 3 0.3299081686 -5.03e-08 1.05e-05 N; Iter=58 L=19 Root EOM Energy Delta E Res. Norm Conv?; 1 0.1600433140 -4.58e-03 5.00e-02 N; 2 0.2894312372 -3.49e-02 2.35e-01 N; 3 0.3243016111 -5.61e-03 2.21e-07 N",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/603#issuecomment-279097143
https://github.com/psi4/psi4/issues/603#issuecomment-279097344:3094,Availability,failure,failure,3094," 0.3243016058 2.42e-09 1.52e-06 N; 2 0.3285655299 6.91e-10 7.75e-06 N; Iter=34 L=12 Root EOM Energy Delta E Res. Norm Conv?; 1 0.3243016030 -2.78e-09 9.27e-07 Y; 2 0.3285655320 2.15e-09 6.23e-06 N; Iter=35 L=13 Root EOM Energy Delta E Res. Norm Conv?; 1 0.3243016033 2.53e-10 9.26e-07 Y; 2 0.3285655298 -2.26e-09 4.11e-06 N; Iter=36 L=14 Root EOM Energy Delta E Res. Norm Conv?; 1 0.3243016026 -6.98e-10 9.41e-07 Y; 2 0.3285655295 -2.30e-10 3.70e-06 N; Iter=37 L=15 Root EOM Energy Delta E Res. Norm Conv?; 1 0.3243016027 1.05e-10 9.64e-07 Y; 2 0.3285655298 2.71e-10 3.50e-06 N; Iter=38 L=16 Root EOM Energy Delta E Res. Norm Conv?; 1 0.3243016031 4.09e-10 9.77e-07 Y; 2 0.3285655296 -2.10e-10 3.48e-06 N; Iter=39 L=17 Root EOM Energy Delta E Res. Norm Conv?; 1 0.3243016034 2.70e-10 8.97e-07 Y; 2 0.3285655295 -6.61e-11 3.51e-06 N; Iter=40 L=18 Root EOM Energy Delta E Res. Norm Conv?; 1 0.3243016049 1.54e-09 8.13e-07 Y; 2 0.3285655298 2.62e-10 3.34e-06 N; Iter=41 L=19 Root EOM Energy Delta E Res. Norm Conv?; 1 0.3243016050 1.05e-10 7.91e-07 Y; 2 0.3285655298 -2.41e-11 3.31e-06 N; Iter=42 L=20 Root EOM Energy Delta E Res. Norm Conv?; 1 0.3243016056 5.33e-10 7.73e-07 Y; 2 0.3285655297 -9.36e-11 3.26e-06 N; Iter=43 L=21 Root EOM Energy Delta E Res. Norm Conv?; 1 0.3243016050 -5.70e-10 7.66e-07 Y; 2 0.3285655297 1.62e-11 3.26e-06 N; Iter=44 L=22 Root EOM Energy Delta E Res. Norm Conv?; 1 0.3243016043 -7.30e-10 7.68e-07 Y; 2 0.3285655297 -2.33e-11 3.26e-06 N; Iter=45 L=23 Root EOM Energy Delta E Res. Norm Conv?; 1 0.3243016047 4.83e-10 7.73e-07 Y; 2 0.3285655297 -1.39e-12 3.26e-06 N; Collapsing to only 2 vector(s). Procedure converged for 1 root(s). Algorithm failure: No vectors could be added, though not all roots converged!. EOM CCSD R0 for root 0 = 0.00000000000. Final Energetic Summary for Converged Roots of Irrep B1g; Excitation Energy Total Energy; (eV) (cm^-1) (au) (au); EOM State 1 8.825 71176.0 0.3243016047 -231.251027700721. Largest components of excited wave function #1:",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/603#issuecomment-279097344
https://github.com/psi4/psi4/issues/603#issuecomment-279097344:122,Energy Efficiency,Energy,Energy,122,"or with this set up : ; set roots_per_irrep [0,2,0,0,0,0,0,0]. The following result is obtained : . Iter=23 L=18 Root EOM Energy Delta E Res. Norm Conv?; 1 0.3243016057 2.09e-08 3.54e-05 N; 2 0.3285655293 -3.33e-16 6.43e-07 Y; Iter=24 L=19 Root EOM Energy Delta E Res. Norm Conv?; 1 0.3243016099 4.24e-09 2.38e-05 N; 2 0.3285655293 5.00e-16 6.43e-07 Y; Iter=25 L=20 Root EOM Energy Delta E Res. Norm Conv?; 1 0.3243016127 2.80e-09 1.56e-05 N; 2 0.3285655293 -3.89e-16 6.43e-07 Y; Iter=26 L=21 Root EOM Energy Delta E Res. Norm Conv?; 1 0.3243016234 1.06e-08 9.79e-06 N; 2 0.3285655293 -1.11e-16 6.43e-07 Y; Iter=27 L=22 Root EOM Energy Delta E Res. Norm Conv?; 1 0.3243016107 -1.26e-08 5.76e-06 N; 2 0.3285655293 2.78e-16 6.43e-07 Y; Iter=28 L=23 Root EOM Energy Delta E Res. Norm Conv?; 1 0.3243016097 -1.01e-09 3.48e-06 N; 2 0.3285655293 -1.11e-16 6.43e-07 Y; Iter=29 L=24 Root EOM Energy Delta E Res. Norm Conv?; 1 0.3243016125 2.73e-09 3.28e-06 N; 2 0.3285655293 -5.55e-17 6.43e-07 Y; Iter=30 L=4 Root EOM Energy Delta E Res. Norm Conv?; 1 0.3243016125 8.40e-14 3.28e-06 N; 2 0.3285655291 -2.62e-10 9.81e-06 N; Iter=31 L=6 Root EOM Energy Delta E Res. Norm Conv?; 1 0.3243015959 -1.66e-08 3.58e-06 N; 2 0.3285655309 1.79e-09 9.85e-06 N; Iter=32 L=8 Root EOM Energy Delta E Res. Norm Conv?; 1 0.3243016034 7.49e-09 2.77e-06 N; 2 0.3285655292 -1.67e-09 8.87e-06 N; Iter=33 L=10 Root EOM Energy Delta E Res. Norm Conv?; 1 0.3243016058 2.42e-09 1.52e-06 N; 2 0.3285655299 6.91e-10 7.75e-06 N; Iter=34 L=12 Root EOM Energy Delta E Res. Norm Conv?; 1 0.3243016030 -2.78e-09 9.27e-07 Y; 2 0.3285655320 2.15e-09 6.23e-06 N; Iter=35 L=13 Root EOM Energy Delta E Res. Norm Conv?; 1 0.3243016033 2.53e-10 9.26e-07 Y; 2 0.3285655298 -2.26e-09 4.11e-06 N; Iter=36 L=14 Root EOM Energy Delta E Res. Norm Conv?; 1 0.3243016026 -6.98e-10 9.41e-07 Y; 2 0.3285655295 -2.30e-10 3.70e-06 N; Iter=37 L=15 Root EOM Energy Delta E Res. Norm Conv?; 1 0.3243016027 1.05e-10 9.64e-07 Y; 2 0.3285655298 2.71e-10 3.50e-06 N; ",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/603#issuecomment-279097344
https://github.com/psi4/psi4/issues/603#issuecomment-279097344:249,Energy Efficiency,Energy,Energy,249,"or with this set up : ; set roots_per_irrep [0,2,0,0,0,0,0,0]. The following result is obtained : . Iter=23 L=18 Root EOM Energy Delta E Res. Norm Conv?; 1 0.3243016057 2.09e-08 3.54e-05 N; 2 0.3285655293 -3.33e-16 6.43e-07 Y; Iter=24 L=19 Root EOM Energy Delta E Res. Norm Conv?; 1 0.3243016099 4.24e-09 2.38e-05 N; 2 0.3285655293 5.00e-16 6.43e-07 Y; Iter=25 L=20 Root EOM Energy Delta E Res. Norm Conv?; 1 0.3243016127 2.80e-09 1.56e-05 N; 2 0.3285655293 -3.89e-16 6.43e-07 Y; Iter=26 L=21 Root EOM Energy Delta E Res. Norm Conv?; 1 0.3243016234 1.06e-08 9.79e-06 N; 2 0.3285655293 -1.11e-16 6.43e-07 Y; Iter=27 L=22 Root EOM Energy Delta E Res. Norm Conv?; 1 0.3243016107 -1.26e-08 5.76e-06 N; 2 0.3285655293 2.78e-16 6.43e-07 Y; Iter=28 L=23 Root EOM Energy Delta E Res. Norm Conv?; 1 0.3243016097 -1.01e-09 3.48e-06 N; 2 0.3285655293 -1.11e-16 6.43e-07 Y; Iter=29 L=24 Root EOM Energy Delta E Res. Norm Conv?; 1 0.3243016125 2.73e-09 3.28e-06 N; 2 0.3285655293 -5.55e-17 6.43e-07 Y; Iter=30 L=4 Root EOM Energy Delta E Res. Norm Conv?; 1 0.3243016125 8.40e-14 3.28e-06 N; 2 0.3285655291 -2.62e-10 9.81e-06 N; Iter=31 L=6 Root EOM Energy Delta E Res. Norm Conv?; 1 0.3243015959 -1.66e-08 3.58e-06 N; 2 0.3285655309 1.79e-09 9.85e-06 N; Iter=32 L=8 Root EOM Energy Delta E Res. Norm Conv?; 1 0.3243016034 7.49e-09 2.77e-06 N; 2 0.3285655292 -1.67e-09 8.87e-06 N; Iter=33 L=10 Root EOM Energy Delta E Res. Norm Conv?; 1 0.3243016058 2.42e-09 1.52e-06 N; 2 0.3285655299 6.91e-10 7.75e-06 N; Iter=34 L=12 Root EOM Energy Delta E Res. Norm Conv?; 1 0.3243016030 -2.78e-09 9.27e-07 Y; 2 0.3285655320 2.15e-09 6.23e-06 N; Iter=35 L=13 Root EOM Energy Delta E Res. Norm Conv?; 1 0.3243016033 2.53e-10 9.26e-07 Y; 2 0.3285655298 -2.26e-09 4.11e-06 N; Iter=36 L=14 Root EOM Energy Delta E Res. Norm Conv?; 1 0.3243016026 -6.98e-10 9.41e-07 Y; 2 0.3285655295 -2.30e-10 3.70e-06 N; Iter=37 L=15 Root EOM Energy Delta E Res. Norm Conv?; 1 0.3243016027 1.05e-10 9.64e-07 Y; 2 0.3285655298 2.71e-10 3.50e-06 N; ",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/603#issuecomment-279097344
https://github.com/psi4/psi4/issues/603#issuecomment-279097344:375,Energy Efficiency,Energy,Energy,375,"or with this set up : ; set roots_per_irrep [0,2,0,0,0,0,0,0]. The following result is obtained : . Iter=23 L=18 Root EOM Energy Delta E Res. Norm Conv?; 1 0.3243016057 2.09e-08 3.54e-05 N; 2 0.3285655293 -3.33e-16 6.43e-07 Y; Iter=24 L=19 Root EOM Energy Delta E Res. Norm Conv?; 1 0.3243016099 4.24e-09 2.38e-05 N; 2 0.3285655293 5.00e-16 6.43e-07 Y; Iter=25 L=20 Root EOM Energy Delta E Res. Norm Conv?; 1 0.3243016127 2.80e-09 1.56e-05 N; 2 0.3285655293 -3.89e-16 6.43e-07 Y; Iter=26 L=21 Root EOM Energy Delta E Res. Norm Conv?; 1 0.3243016234 1.06e-08 9.79e-06 N; 2 0.3285655293 -1.11e-16 6.43e-07 Y; Iter=27 L=22 Root EOM Energy Delta E Res. Norm Conv?; 1 0.3243016107 -1.26e-08 5.76e-06 N; 2 0.3285655293 2.78e-16 6.43e-07 Y; Iter=28 L=23 Root EOM Energy Delta E Res. Norm Conv?; 1 0.3243016097 -1.01e-09 3.48e-06 N; 2 0.3285655293 -1.11e-16 6.43e-07 Y; Iter=29 L=24 Root EOM Energy Delta E Res. Norm Conv?; 1 0.3243016125 2.73e-09 3.28e-06 N; 2 0.3285655293 -5.55e-17 6.43e-07 Y; Iter=30 L=4 Root EOM Energy Delta E Res. Norm Conv?; 1 0.3243016125 8.40e-14 3.28e-06 N; 2 0.3285655291 -2.62e-10 9.81e-06 N; Iter=31 L=6 Root EOM Energy Delta E Res. Norm Conv?; 1 0.3243015959 -1.66e-08 3.58e-06 N; 2 0.3285655309 1.79e-09 9.85e-06 N; Iter=32 L=8 Root EOM Energy Delta E Res. Norm Conv?; 1 0.3243016034 7.49e-09 2.77e-06 N; 2 0.3285655292 -1.67e-09 8.87e-06 N; Iter=33 L=10 Root EOM Energy Delta E Res. Norm Conv?; 1 0.3243016058 2.42e-09 1.52e-06 N; 2 0.3285655299 6.91e-10 7.75e-06 N; Iter=34 L=12 Root EOM Energy Delta E Res. Norm Conv?; 1 0.3243016030 -2.78e-09 9.27e-07 Y; 2 0.3285655320 2.15e-09 6.23e-06 N; Iter=35 L=13 Root EOM Energy Delta E Res. Norm Conv?; 1 0.3243016033 2.53e-10 9.26e-07 Y; 2 0.3285655298 -2.26e-09 4.11e-06 N; Iter=36 L=14 Root EOM Energy Delta E Res. Norm Conv?; 1 0.3243016026 -6.98e-10 9.41e-07 Y; 2 0.3285655295 -2.30e-10 3.70e-06 N; Iter=37 L=15 Root EOM Energy Delta E Res. Norm Conv?; 1 0.3243016027 1.05e-10 9.64e-07 Y; 2 0.3285655298 2.71e-10 3.50e-06 N; ",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/603#issuecomment-279097344
https://github.com/psi4/psi4/issues/603#issuecomment-279097344:502,Energy Efficiency,Energy,Energy,502,"or with this set up : ; set roots_per_irrep [0,2,0,0,0,0,0,0]. The following result is obtained : . Iter=23 L=18 Root EOM Energy Delta E Res. Norm Conv?; 1 0.3243016057 2.09e-08 3.54e-05 N; 2 0.3285655293 -3.33e-16 6.43e-07 Y; Iter=24 L=19 Root EOM Energy Delta E Res. Norm Conv?; 1 0.3243016099 4.24e-09 2.38e-05 N; 2 0.3285655293 5.00e-16 6.43e-07 Y; Iter=25 L=20 Root EOM Energy Delta E Res. Norm Conv?; 1 0.3243016127 2.80e-09 1.56e-05 N; 2 0.3285655293 -3.89e-16 6.43e-07 Y; Iter=26 L=21 Root EOM Energy Delta E Res. Norm Conv?; 1 0.3243016234 1.06e-08 9.79e-06 N; 2 0.3285655293 -1.11e-16 6.43e-07 Y; Iter=27 L=22 Root EOM Energy Delta E Res. Norm Conv?; 1 0.3243016107 -1.26e-08 5.76e-06 N; 2 0.3285655293 2.78e-16 6.43e-07 Y; Iter=28 L=23 Root EOM Energy Delta E Res. Norm Conv?; 1 0.3243016097 -1.01e-09 3.48e-06 N; 2 0.3285655293 -1.11e-16 6.43e-07 Y; Iter=29 L=24 Root EOM Energy Delta E Res. Norm Conv?; 1 0.3243016125 2.73e-09 3.28e-06 N; 2 0.3285655293 -5.55e-17 6.43e-07 Y; Iter=30 L=4 Root EOM Energy Delta E Res. Norm Conv?; 1 0.3243016125 8.40e-14 3.28e-06 N; 2 0.3285655291 -2.62e-10 9.81e-06 N; Iter=31 L=6 Root EOM Energy Delta E Res. Norm Conv?; 1 0.3243015959 -1.66e-08 3.58e-06 N; 2 0.3285655309 1.79e-09 9.85e-06 N; Iter=32 L=8 Root EOM Energy Delta E Res. Norm Conv?; 1 0.3243016034 7.49e-09 2.77e-06 N; 2 0.3285655292 -1.67e-09 8.87e-06 N; Iter=33 L=10 Root EOM Energy Delta E Res. Norm Conv?; 1 0.3243016058 2.42e-09 1.52e-06 N; 2 0.3285655299 6.91e-10 7.75e-06 N; Iter=34 L=12 Root EOM Energy Delta E Res. Norm Conv?; 1 0.3243016030 -2.78e-09 9.27e-07 Y; 2 0.3285655320 2.15e-09 6.23e-06 N; Iter=35 L=13 Root EOM Energy Delta E Res. Norm Conv?; 1 0.3243016033 2.53e-10 9.26e-07 Y; 2 0.3285655298 -2.26e-09 4.11e-06 N; Iter=36 L=14 Root EOM Energy Delta E Res. Norm Conv?; 1 0.3243016026 -6.98e-10 9.41e-07 Y; 2 0.3285655295 -2.30e-10 3.70e-06 N; Iter=37 L=15 Root EOM Energy Delta E Res. Norm Conv?; 1 0.3243016027 1.05e-10 9.64e-07 Y; 2 0.3285655298 2.71e-10 3.50e-06 N; ",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/603#issuecomment-279097344
https://github.com/psi4/psi4/issues/603#issuecomment-279097344:629,Energy Efficiency,Energy,Energy,629,"or with this set up : ; set roots_per_irrep [0,2,0,0,0,0,0,0]. The following result is obtained : . Iter=23 L=18 Root EOM Energy Delta E Res. Norm Conv?; 1 0.3243016057 2.09e-08 3.54e-05 N; 2 0.3285655293 -3.33e-16 6.43e-07 Y; Iter=24 L=19 Root EOM Energy Delta E Res. Norm Conv?; 1 0.3243016099 4.24e-09 2.38e-05 N; 2 0.3285655293 5.00e-16 6.43e-07 Y; Iter=25 L=20 Root EOM Energy Delta E Res. Norm Conv?; 1 0.3243016127 2.80e-09 1.56e-05 N; 2 0.3285655293 -3.89e-16 6.43e-07 Y; Iter=26 L=21 Root EOM Energy Delta E Res. Norm Conv?; 1 0.3243016234 1.06e-08 9.79e-06 N; 2 0.3285655293 -1.11e-16 6.43e-07 Y; Iter=27 L=22 Root EOM Energy Delta E Res. Norm Conv?; 1 0.3243016107 -1.26e-08 5.76e-06 N; 2 0.3285655293 2.78e-16 6.43e-07 Y; Iter=28 L=23 Root EOM Energy Delta E Res. Norm Conv?; 1 0.3243016097 -1.01e-09 3.48e-06 N; 2 0.3285655293 -1.11e-16 6.43e-07 Y; Iter=29 L=24 Root EOM Energy Delta E Res. Norm Conv?; 1 0.3243016125 2.73e-09 3.28e-06 N; 2 0.3285655293 -5.55e-17 6.43e-07 Y; Iter=30 L=4 Root EOM Energy Delta E Res. Norm Conv?; 1 0.3243016125 8.40e-14 3.28e-06 N; 2 0.3285655291 -2.62e-10 9.81e-06 N; Iter=31 L=6 Root EOM Energy Delta E Res. Norm Conv?; 1 0.3243015959 -1.66e-08 3.58e-06 N; 2 0.3285655309 1.79e-09 9.85e-06 N; Iter=32 L=8 Root EOM Energy Delta E Res. Norm Conv?; 1 0.3243016034 7.49e-09 2.77e-06 N; 2 0.3285655292 -1.67e-09 8.87e-06 N; Iter=33 L=10 Root EOM Energy Delta E Res. Norm Conv?; 1 0.3243016058 2.42e-09 1.52e-06 N; 2 0.3285655299 6.91e-10 7.75e-06 N; Iter=34 L=12 Root EOM Energy Delta E Res. Norm Conv?; 1 0.3243016030 -2.78e-09 9.27e-07 Y; 2 0.3285655320 2.15e-09 6.23e-06 N; Iter=35 L=13 Root EOM Energy Delta E Res. Norm Conv?; 1 0.3243016033 2.53e-10 9.26e-07 Y; 2 0.3285655298 -2.26e-09 4.11e-06 N; Iter=36 L=14 Root EOM Energy Delta E Res. Norm Conv?; 1 0.3243016026 -6.98e-10 9.41e-07 Y; 2 0.3285655295 -2.30e-10 3.70e-06 N; Iter=37 L=15 Root EOM Energy Delta E Res. Norm Conv?; 1 0.3243016027 1.05e-10 9.64e-07 Y; 2 0.3285655298 2.71e-10 3.50e-06 N; ",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/603#issuecomment-279097344
https://github.com/psi4/psi4/issues/603#issuecomment-279097344:756,Energy Efficiency,Energy,Energy,756,"or with this set up : ; set roots_per_irrep [0,2,0,0,0,0,0,0]. The following result is obtained : . Iter=23 L=18 Root EOM Energy Delta E Res. Norm Conv?; 1 0.3243016057 2.09e-08 3.54e-05 N; 2 0.3285655293 -3.33e-16 6.43e-07 Y; Iter=24 L=19 Root EOM Energy Delta E Res. Norm Conv?; 1 0.3243016099 4.24e-09 2.38e-05 N; 2 0.3285655293 5.00e-16 6.43e-07 Y; Iter=25 L=20 Root EOM Energy Delta E Res. Norm Conv?; 1 0.3243016127 2.80e-09 1.56e-05 N; 2 0.3285655293 -3.89e-16 6.43e-07 Y; Iter=26 L=21 Root EOM Energy Delta E Res. Norm Conv?; 1 0.3243016234 1.06e-08 9.79e-06 N; 2 0.3285655293 -1.11e-16 6.43e-07 Y; Iter=27 L=22 Root EOM Energy Delta E Res. Norm Conv?; 1 0.3243016107 -1.26e-08 5.76e-06 N; 2 0.3285655293 2.78e-16 6.43e-07 Y; Iter=28 L=23 Root EOM Energy Delta E Res. Norm Conv?; 1 0.3243016097 -1.01e-09 3.48e-06 N; 2 0.3285655293 -1.11e-16 6.43e-07 Y; Iter=29 L=24 Root EOM Energy Delta E Res. Norm Conv?; 1 0.3243016125 2.73e-09 3.28e-06 N; 2 0.3285655293 -5.55e-17 6.43e-07 Y; Iter=30 L=4 Root EOM Energy Delta E Res. Norm Conv?; 1 0.3243016125 8.40e-14 3.28e-06 N; 2 0.3285655291 -2.62e-10 9.81e-06 N; Iter=31 L=6 Root EOM Energy Delta E Res. Norm Conv?; 1 0.3243015959 -1.66e-08 3.58e-06 N; 2 0.3285655309 1.79e-09 9.85e-06 N; Iter=32 L=8 Root EOM Energy Delta E Res. Norm Conv?; 1 0.3243016034 7.49e-09 2.77e-06 N; 2 0.3285655292 -1.67e-09 8.87e-06 N; Iter=33 L=10 Root EOM Energy Delta E Res. Norm Conv?; 1 0.3243016058 2.42e-09 1.52e-06 N; 2 0.3285655299 6.91e-10 7.75e-06 N; Iter=34 L=12 Root EOM Energy Delta E Res. Norm Conv?; 1 0.3243016030 -2.78e-09 9.27e-07 Y; 2 0.3285655320 2.15e-09 6.23e-06 N; Iter=35 L=13 Root EOM Energy Delta E Res. Norm Conv?; 1 0.3243016033 2.53e-10 9.26e-07 Y; 2 0.3285655298 -2.26e-09 4.11e-06 N; Iter=36 L=14 Root EOM Energy Delta E Res. Norm Conv?; 1 0.3243016026 -6.98e-10 9.41e-07 Y; 2 0.3285655295 -2.30e-10 3.70e-06 N; Iter=37 L=15 Root EOM Energy Delta E Res. Norm Conv?; 1 0.3243016027 1.05e-10 9.64e-07 Y; 2 0.3285655298 2.71e-10 3.50e-06 N; ",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/603#issuecomment-279097344
https://github.com/psi4/psi4/issues/603#issuecomment-279097344:884,Energy Efficiency,Energy,Energy,884,"or with this set up : ; set roots_per_irrep [0,2,0,0,0,0,0,0]. The following result is obtained : . Iter=23 L=18 Root EOM Energy Delta E Res. Norm Conv?; 1 0.3243016057 2.09e-08 3.54e-05 N; 2 0.3285655293 -3.33e-16 6.43e-07 Y; Iter=24 L=19 Root EOM Energy Delta E Res. Norm Conv?; 1 0.3243016099 4.24e-09 2.38e-05 N; 2 0.3285655293 5.00e-16 6.43e-07 Y; Iter=25 L=20 Root EOM Energy Delta E Res. Norm Conv?; 1 0.3243016127 2.80e-09 1.56e-05 N; 2 0.3285655293 -3.89e-16 6.43e-07 Y; Iter=26 L=21 Root EOM Energy Delta E Res. Norm Conv?; 1 0.3243016234 1.06e-08 9.79e-06 N; 2 0.3285655293 -1.11e-16 6.43e-07 Y; Iter=27 L=22 Root EOM Energy Delta E Res. Norm Conv?; 1 0.3243016107 -1.26e-08 5.76e-06 N; 2 0.3285655293 2.78e-16 6.43e-07 Y; Iter=28 L=23 Root EOM Energy Delta E Res. Norm Conv?; 1 0.3243016097 -1.01e-09 3.48e-06 N; 2 0.3285655293 -1.11e-16 6.43e-07 Y; Iter=29 L=24 Root EOM Energy Delta E Res. Norm Conv?; 1 0.3243016125 2.73e-09 3.28e-06 N; 2 0.3285655293 -5.55e-17 6.43e-07 Y; Iter=30 L=4 Root EOM Energy Delta E Res. Norm Conv?; 1 0.3243016125 8.40e-14 3.28e-06 N; 2 0.3285655291 -2.62e-10 9.81e-06 N; Iter=31 L=6 Root EOM Energy Delta E Res. Norm Conv?; 1 0.3243015959 -1.66e-08 3.58e-06 N; 2 0.3285655309 1.79e-09 9.85e-06 N; Iter=32 L=8 Root EOM Energy Delta E Res. Norm Conv?; 1 0.3243016034 7.49e-09 2.77e-06 N; 2 0.3285655292 -1.67e-09 8.87e-06 N; Iter=33 L=10 Root EOM Energy Delta E Res. Norm Conv?; 1 0.3243016058 2.42e-09 1.52e-06 N; 2 0.3285655299 6.91e-10 7.75e-06 N; Iter=34 L=12 Root EOM Energy Delta E Res. Norm Conv?; 1 0.3243016030 -2.78e-09 9.27e-07 Y; 2 0.3285655320 2.15e-09 6.23e-06 N; Iter=35 L=13 Root EOM Energy Delta E Res. Norm Conv?; 1 0.3243016033 2.53e-10 9.26e-07 Y; 2 0.3285655298 -2.26e-09 4.11e-06 N; Iter=36 L=14 Root EOM Energy Delta E Res. Norm Conv?; 1 0.3243016026 -6.98e-10 9.41e-07 Y; 2 0.3285655295 -2.30e-10 3.70e-06 N; Iter=37 L=15 Root EOM Energy Delta E Res. Norm Conv?; 1 0.3243016027 1.05e-10 9.64e-07 Y; 2 0.3285655298 2.71e-10 3.50e-06 N; ",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/603#issuecomment-279097344
https://github.com/psi4/psi4/issues/603#issuecomment-279097344:1010,Energy Efficiency,Energy,Energy,1010,"ith this set up : ; set roots_per_irrep [0,2,0,0,0,0,0,0]. The following result is obtained : . Iter=23 L=18 Root EOM Energy Delta E Res. Norm Conv?; 1 0.3243016057 2.09e-08 3.54e-05 N; 2 0.3285655293 -3.33e-16 6.43e-07 Y; Iter=24 L=19 Root EOM Energy Delta E Res. Norm Conv?; 1 0.3243016099 4.24e-09 2.38e-05 N; 2 0.3285655293 5.00e-16 6.43e-07 Y; Iter=25 L=20 Root EOM Energy Delta E Res. Norm Conv?; 1 0.3243016127 2.80e-09 1.56e-05 N; 2 0.3285655293 -3.89e-16 6.43e-07 Y; Iter=26 L=21 Root EOM Energy Delta E Res. Norm Conv?; 1 0.3243016234 1.06e-08 9.79e-06 N; 2 0.3285655293 -1.11e-16 6.43e-07 Y; Iter=27 L=22 Root EOM Energy Delta E Res. Norm Conv?; 1 0.3243016107 -1.26e-08 5.76e-06 N; 2 0.3285655293 2.78e-16 6.43e-07 Y; Iter=28 L=23 Root EOM Energy Delta E Res. Norm Conv?; 1 0.3243016097 -1.01e-09 3.48e-06 N; 2 0.3285655293 -1.11e-16 6.43e-07 Y; Iter=29 L=24 Root EOM Energy Delta E Res. Norm Conv?; 1 0.3243016125 2.73e-09 3.28e-06 N; 2 0.3285655293 -5.55e-17 6.43e-07 Y; Iter=30 L=4 Root EOM Energy Delta E Res. Norm Conv?; 1 0.3243016125 8.40e-14 3.28e-06 N; 2 0.3285655291 -2.62e-10 9.81e-06 N; Iter=31 L=6 Root EOM Energy Delta E Res. Norm Conv?; 1 0.3243015959 -1.66e-08 3.58e-06 N; 2 0.3285655309 1.79e-09 9.85e-06 N; Iter=32 L=8 Root EOM Energy Delta E Res. Norm Conv?; 1 0.3243016034 7.49e-09 2.77e-06 N; 2 0.3285655292 -1.67e-09 8.87e-06 N; Iter=33 L=10 Root EOM Energy Delta E Res. Norm Conv?; 1 0.3243016058 2.42e-09 1.52e-06 N; 2 0.3285655299 6.91e-10 7.75e-06 N; Iter=34 L=12 Root EOM Energy Delta E Res. Norm Conv?; 1 0.3243016030 -2.78e-09 9.27e-07 Y; 2 0.3285655320 2.15e-09 6.23e-06 N; Iter=35 L=13 Root EOM Energy Delta E Res. Norm Conv?; 1 0.3243016033 2.53e-10 9.26e-07 Y; 2 0.3285655298 -2.26e-09 4.11e-06 N; Iter=36 L=14 Root EOM Energy Delta E Res. Norm Conv?; 1 0.3243016026 -6.98e-10 9.41e-07 Y; 2 0.3285655295 -2.30e-10 3.70e-06 N; Iter=37 L=15 Root EOM Energy Delta E Res. Norm Conv?; 1 0.3243016027 1.05e-10 9.64e-07 Y; 2 0.3285655298 2.71e-10 3.50e-06 N; Ite",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/603#issuecomment-279097344
https://github.com/psi4/psi4/issues/603#issuecomment-279097344:1136,Energy Efficiency,Energy,Energy,1136,elta E Res. Norm Conv?; 1 0.3243016057 2.09e-08 3.54e-05 N; 2 0.3285655293 -3.33e-16 6.43e-07 Y; Iter=24 L=19 Root EOM Energy Delta E Res. Norm Conv?; 1 0.3243016099 4.24e-09 2.38e-05 N; 2 0.3285655293 5.00e-16 6.43e-07 Y; Iter=25 L=20 Root EOM Energy Delta E Res. Norm Conv?; 1 0.3243016127 2.80e-09 1.56e-05 N; 2 0.3285655293 -3.89e-16 6.43e-07 Y; Iter=26 L=21 Root EOM Energy Delta E Res. Norm Conv?; 1 0.3243016234 1.06e-08 9.79e-06 N; 2 0.3285655293 -1.11e-16 6.43e-07 Y; Iter=27 L=22 Root EOM Energy Delta E Res. Norm Conv?; 1 0.3243016107 -1.26e-08 5.76e-06 N; 2 0.3285655293 2.78e-16 6.43e-07 Y; Iter=28 L=23 Root EOM Energy Delta E Res. Norm Conv?; 1 0.3243016097 -1.01e-09 3.48e-06 N; 2 0.3285655293 -1.11e-16 6.43e-07 Y; Iter=29 L=24 Root EOM Energy Delta E Res. Norm Conv?; 1 0.3243016125 2.73e-09 3.28e-06 N; 2 0.3285655293 -5.55e-17 6.43e-07 Y; Iter=30 L=4 Root EOM Energy Delta E Res. Norm Conv?; 1 0.3243016125 8.40e-14 3.28e-06 N; 2 0.3285655291 -2.62e-10 9.81e-06 N; Iter=31 L=6 Root EOM Energy Delta E Res. Norm Conv?; 1 0.3243015959 -1.66e-08 3.58e-06 N; 2 0.3285655309 1.79e-09 9.85e-06 N; Iter=32 L=8 Root EOM Energy Delta E Res. Norm Conv?; 1 0.3243016034 7.49e-09 2.77e-06 N; 2 0.3285655292 -1.67e-09 8.87e-06 N; Iter=33 L=10 Root EOM Energy Delta E Res. Norm Conv?; 1 0.3243016058 2.42e-09 1.52e-06 N; 2 0.3285655299 6.91e-10 7.75e-06 N; Iter=34 L=12 Root EOM Energy Delta E Res. Norm Conv?; 1 0.3243016030 -2.78e-09 9.27e-07 Y; 2 0.3285655320 2.15e-09 6.23e-06 N; Iter=35 L=13 Root EOM Energy Delta E Res. Norm Conv?; 1 0.3243016033 2.53e-10 9.26e-07 Y; 2 0.3285655298 -2.26e-09 4.11e-06 N; Iter=36 L=14 Root EOM Energy Delta E Res. Norm Conv?; 1 0.3243016026 -6.98e-10 9.41e-07 Y; 2 0.3285655295 -2.30e-10 3.70e-06 N; Iter=37 L=15 Root EOM Energy Delta E Res. Norm Conv?; 1 0.3243016027 1.05e-10 9.64e-07 Y; 2 0.3285655298 2.71e-10 3.50e-06 N; Iter=38 L=16 Root EOM Energy Delta E Res. Norm Conv?; 1 0.3243016031 4.09e-10 9.77e-07 Y; 2 0.3285655296 -2.10e-10 3.48e-06 N; It,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/603#issuecomment-279097344
https://github.com/psi4/psi4/issues/603#issuecomment-279097344:1262,Energy Efficiency,Energy,Energy,1262,Delta E Res. Norm Conv?; 1 0.3243016099 4.24e-09 2.38e-05 N; 2 0.3285655293 5.00e-16 6.43e-07 Y; Iter=25 L=20 Root EOM Energy Delta E Res. Norm Conv?; 1 0.3243016127 2.80e-09 1.56e-05 N; 2 0.3285655293 -3.89e-16 6.43e-07 Y; Iter=26 L=21 Root EOM Energy Delta E Res. Norm Conv?; 1 0.3243016234 1.06e-08 9.79e-06 N; 2 0.3285655293 -1.11e-16 6.43e-07 Y; Iter=27 L=22 Root EOM Energy Delta E Res. Norm Conv?; 1 0.3243016107 -1.26e-08 5.76e-06 N; 2 0.3285655293 2.78e-16 6.43e-07 Y; Iter=28 L=23 Root EOM Energy Delta E Res. Norm Conv?; 1 0.3243016097 -1.01e-09 3.48e-06 N; 2 0.3285655293 -1.11e-16 6.43e-07 Y; Iter=29 L=24 Root EOM Energy Delta E Res. Norm Conv?; 1 0.3243016125 2.73e-09 3.28e-06 N; 2 0.3285655293 -5.55e-17 6.43e-07 Y; Iter=30 L=4 Root EOM Energy Delta E Res. Norm Conv?; 1 0.3243016125 8.40e-14 3.28e-06 N; 2 0.3285655291 -2.62e-10 9.81e-06 N; Iter=31 L=6 Root EOM Energy Delta E Res. Norm Conv?; 1 0.3243015959 -1.66e-08 3.58e-06 N; 2 0.3285655309 1.79e-09 9.85e-06 N; Iter=32 L=8 Root EOM Energy Delta E Res. Norm Conv?; 1 0.3243016034 7.49e-09 2.77e-06 N; 2 0.3285655292 -1.67e-09 8.87e-06 N; Iter=33 L=10 Root EOM Energy Delta E Res. Norm Conv?; 1 0.3243016058 2.42e-09 1.52e-06 N; 2 0.3285655299 6.91e-10 7.75e-06 N; Iter=34 L=12 Root EOM Energy Delta E Res. Norm Conv?; 1 0.3243016030 -2.78e-09 9.27e-07 Y; 2 0.3285655320 2.15e-09 6.23e-06 N; Iter=35 L=13 Root EOM Energy Delta E Res. Norm Conv?; 1 0.3243016033 2.53e-10 9.26e-07 Y; 2 0.3285655298 -2.26e-09 4.11e-06 N; Iter=36 L=14 Root EOM Energy Delta E Res. Norm Conv?; 1 0.3243016026 -6.98e-10 9.41e-07 Y; 2 0.3285655295 -2.30e-10 3.70e-06 N; Iter=37 L=15 Root EOM Energy Delta E Res. Norm Conv?; 1 0.3243016027 1.05e-10 9.64e-07 Y; 2 0.3285655298 2.71e-10 3.50e-06 N; Iter=38 L=16 Root EOM Energy Delta E Res. Norm Conv?; 1 0.3243016031 4.09e-10 9.77e-07 Y; 2 0.3285655296 -2.10e-10 3.48e-06 N; Iter=39 L=17 Root EOM Energy Delta E Res. Norm Conv?; 1 0.3243016034 2.70e-10 8.97e-07 Y; 2 0.3285655295 -6.61e-11 3.51e-06 N; I,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/603#issuecomment-279097344
https://github.com/psi4/psi4/issues/603#issuecomment-279097344:1389,Energy Efficiency,Energy,Energy,1389,Delta E Res. Norm Conv?; 1 0.3243016127 2.80e-09 1.56e-05 N; 2 0.3285655293 -3.89e-16 6.43e-07 Y; Iter=26 L=21 Root EOM Energy Delta E Res. Norm Conv?; 1 0.3243016234 1.06e-08 9.79e-06 N; 2 0.3285655293 -1.11e-16 6.43e-07 Y; Iter=27 L=22 Root EOM Energy Delta E Res. Norm Conv?; 1 0.3243016107 -1.26e-08 5.76e-06 N; 2 0.3285655293 2.78e-16 6.43e-07 Y; Iter=28 L=23 Root EOM Energy Delta E Res. Norm Conv?; 1 0.3243016097 -1.01e-09 3.48e-06 N; 2 0.3285655293 -1.11e-16 6.43e-07 Y; Iter=29 L=24 Root EOM Energy Delta E Res. Norm Conv?; 1 0.3243016125 2.73e-09 3.28e-06 N; 2 0.3285655293 -5.55e-17 6.43e-07 Y; Iter=30 L=4 Root EOM Energy Delta E Res. Norm Conv?; 1 0.3243016125 8.40e-14 3.28e-06 N; 2 0.3285655291 -2.62e-10 9.81e-06 N; Iter=31 L=6 Root EOM Energy Delta E Res. Norm Conv?; 1 0.3243015959 -1.66e-08 3.58e-06 N; 2 0.3285655309 1.79e-09 9.85e-06 N; Iter=32 L=8 Root EOM Energy Delta E Res. Norm Conv?; 1 0.3243016034 7.49e-09 2.77e-06 N; 2 0.3285655292 -1.67e-09 8.87e-06 N; Iter=33 L=10 Root EOM Energy Delta E Res. Norm Conv?; 1 0.3243016058 2.42e-09 1.52e-06 N; 2 0.3285655299 6.91e-10 7.75e-06 N; Iter=34 L=12 Root EOM Energy Delta E Res. Norm Conv?; 1 0.3243016030 -2.78e-09 9.27e-07 Y; 2 0.3285655320 2.15e-09 6.23e-06 N; Iter=35 L=13 Root EOM Energy Delta E Res. Norm Conv?; 1 0.3243016033 2.53e-10 9.26e-07 Y; 2 0.3285655298 -2.26e-09 4.11e-06 N; Iter=36 L=14 Root EOM Energy Delta E Res. Norm Conv?; 1 0.3243016026 -6.98e-10 9.41e-07 Y; 2 0.3285655295 -2.30e-10 3.70e-06 N; Iter=37 L=15 Root EOM Energy Delta E Res. Norm Conv?; 1 0.3243016027 1.05e-10 9.64e-07 Y; 2 0.3285655298 2.71e-10 3.50e-06 N; Iter=38 L=16 Root EOM Energy Delta E Res. Norm Conv?; 1 0.3243016031 4.09e-10 9.77e-07 Y; 2 0.3285655296 -2.10e-10 3.48e-06 N; Iter=39 L=17 Root EOM Energy Delta E Res. Norm Conv?; 1 0.3243016034 2.70e-10 8.97e-07 Y; 2 0.3285655295 -6.61e-11 3.51e-06 N; Iter=40 L=18 Root EOM Energy Delta E Res. Norm Conv?; 1 0.3243016049 1.54e-09 8.13e-07 Y; 2 0.3285655298 2.62e-10 3.34e-06 N; It,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/603#issuecomment-279097344
https://github.com/psi4/psi4/issues/603#issuecomment-279097344:1515,Energy Efficiency,Energy,Energy,1515, Delta E Res. Norm Conv?; 1 0.3243016234 1.06e-08 9.79e-06 N; 2 0.3285655293 -1.11e-16 6.43e-07 Y; Iter=27 L=22 Root EOM Energy Delta E Res. Norm Conv?; 1 0.3243016107 -1.26e-08 5.76e-06 N; 2 0.3285655293 2.78e-16 6.43e-07 Y; Iter=28 L=23 Root EOM Energy Delta E Res. Norm Conv?; 1 0.3243016097 -1.01e-09 3.48e-06 N; 2 0.3285655293 -1.11e-16 6.43e-07 Y; Iter=29 L=24 Root EOM Energy Delta E Res. Norm Conv?; 1 0.3243016125 2.73e-09 3.28e-06 N; 2 0.3285655293 -5.55e-17 6.43e-07 Y; Iter=30 L=4 Root EOM Energy Delta E Res. Norm Conv?; 1 0.3243016125 8.40e-14 3.28e-06 N; 2 0.3285655291 -2.62e-10 9.81e-06 N; Iter=31 L=6 Root EOM Energy Delta E Res. Norm Conv?; 1 0.3243015959 -1.66e-08 3.58e-06 N; 2 0.3285655309 1.79e-09 9.85e-06 N; Iter=32 L=8 Root EOM Energy Delta E Res. Norm Conv?; 1 0.3243016034 7.49e-09 2.77e-06 N; 2 0.3285655292 -1.67e-09 8.87e-06 N; Iter=33 L=10 Root EOM Energy Delta E Res. Norm Conv?; 1 0.3243016058 2.42e-09 1.52e-06 N; 2 0.3285655299 6.91e-10 7.75e-06 N; Iter=34 L=12 Root EOM Energy Delta E Res. Norm Conv?; 1 0.3243016030 -2.78e-09 9.27e-07 Y; 2 0.3285655320 2.15e-09 6.23e-06 N; Iter=35 L=13 Root EOM Energy Delta E Res. Norm Conv?; 1 0.3243016033 2.53e-10 9.26e-07 Y; 2 0.3285655298 -2.26e-09 4.11e-06 N; Iter=36 L=14 Root EOM Energy Delta E Res. Norm Conv?; 1 0.3243016026 -6.98e-10 9.41e-07 Y; 2 0.3285655295 -2.30e-10 3.70e-06 N; Iter=37 L=15 Root EOM Energy Delta E Res. Norm Conv?; 1 0.3243016027 1.05e-10 9.64e-07 Y; 2 0.3285655298 2.71e-10 3.50e-06 N; Iter=38 L=16 Root EOM Energy Delta E Res. Norm Conv?; 1 0.3243016031 4.09e-10 9.77e-07 Y; 2 0.3285655296 -2.10e-10 3.48e-06 N; Iter=39 L=17 Root EOM Energy Delta E Res. Norm Conv?; 1 0.3243016034 2.70e-10 8.97e-07 Y; 2 0.3285655295 -6.61e-11 3.51e-06 N; Iter=40 L=18 Root EOM Energy Delta E Res. Norm Conv?; 1 0.3243016049 1.54e-09 8.13e-07 Y; 2 0.3285655298 2.62e-10 3.34e-06 N; Iter=41 L=19 Root EOM Energy Delta E Res. Norm Conv?; 1 0.3243016050 1.05e-10 7.91e-07 Y; 2 0.3285655298 -2.41e-11 3.31e-06 N; I,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/603#issuecomment-279097344
https://github.com/psi4/psi4/issues/603#issuecomment-279097344:1642,Energy Efficiency,Energy,Energy,1642, Delta E Res. Norm Conv?; 1 0.3243016107 -1.26e-08 5.76e-06 N; 2 0.3285655293 2.78e-16 6.43e-07 Y; Iter=28 L=23 Root EOM Energy Delta E Res. Norm Conv?; 1 0.3243016097 -1.01e-09 3.48e-06 N; 2 0.3285655293 -1.11e-16 6.43e-07 Y; Iter=29 L=24 Root EOM Energy Delta E Res. Norm Conv?; 1 0.3243016125 2.73e-09 3.28e-06 N; 2 0.3285655293 -5.55e-17 6.43e-07 Y; Iter=30 L=4 Root EOM Energy Delta E Res. Norm Conv?; 1 0.3243016125 8.40e-14 3.28e-06 N; 2 0.3285655291 -2.62e-10 9.81e-06 N; Iter=31 L=6 Root EOM Energy Delta E Res. Norm Conv?; 1 0.3243015959 -1.66e-08 3.58e-06 N; 2 0.3285655309 1.79e-09 9.85e-06 N; Iter=32 L=8 Root EOM Energy Delta E Res. Norm Conv?; 1 0.3243016034 7.49e-09 2.77e-06 N; 2 0.3285655292 -1.67e-09 8.87e-06 N; Iter=33 L=10 Root EOM Energy Delta E Res. Norm Conv?; 1 0.3243016058 2.42e-09 1.52e-06 N; 2 0.3285655299 6.91e-10 7.75e-06 N; Iter=34 L=12 Root EOM Energy Delta E Res. Norm Conv?; 1 0.3243016030 -2.78e-09 9.27e-07 Y; 2 0.3285655320 2.15e-09 6.23e-06 N; Iter=35 L=13 Root EOM Energy Delta E Res. Norm Conv?; 1 0.3243016033 2.53e-10 9.26e-07 Y; 2 0.3285655298 -2.26e-09 4.11e-06 N; Iter=36 L=14 Root EOM Energy Delta E Res. Norm Conv?; 1 0.3243016026 -6.98e-10 9.41e-07 Y; 2 0.3285655295 -2.30e-10 3.70e-06 N; Iter=37 L=15 Root EOM Energy Delta E Res. Norm Conv?; 1 0.3243016027 1.05e-10 9.64e-07 Y; 2 0.3285655298 2.71e-10 3.50e-06 N; Iter=38 L=16 Root EOM Energy Delta E Res. Norm Conv?; 1 0.3243016031 4.09e-10 9.77e-07 Y; 2 0.3285655296 -2.10e-10 3.48e-06 N; Iter=39 L=17 Root EOM Energy Delta E Res. Norm Conv?; 1 0.3243016034 2.70e-10 8.97e-07 Y; 2 0.3285655295 -6.61e-11 3.51e-06 N; Iter=40 L=18 Root EOM Energy Delta E Res. Norm Conv?; 1 0.3243016049 1.54e-09 8.13e-07 Y; 2 0.3285655298 2.62e-10 3.34e-06 N; Iter=41 L=19 Root EOM Energy Delta E Res. Norm Conv?; 1 0.3243016050 1.05e-10 7.91e-07 Y; 2 0.3285655298 -2.41e-11 3.31e-06 N; Iter=42 L=20 Root EOM Energy Delta E Res. Norm Conv?; 1 0.3243016056 5.33e-10 7.73e-07 Y; 2 0.3285655297 -9.36e-11 3.26e-06 N; I,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/603#issuecomment-279097344
https://github.com/psi4/psi4/issues/603#issuecomment-279097344:1769,Energy Efficiency,Energy,Energy,1769, Delta E Res. Norm Conv?; 1 0.3243016097 -1.01e-09 3.48e-06 N; 2 0.3285655293 -1.11e-16 6.43e-07 Y; Iter=29 L=24 Root EOM Energy Delta E Res. Norm Conv?; 1 0.3243016125 2.73e-09 3.28e-06 N; 2 0.3285655293 -5.55e-17 6.43e-07 Y; Iter=30 L=4 Root EOM Energy Delta E Res. Norm Conv?; 1 0.3243016125 8.40e-14 3.28e-06 N; 2 0.3285655291 -2.62e-10 9.81e-06 N; Iter=31 L=6 Root EOM Energy Delta E Res. Norm Conv?; 1 0.3243015959 -1.66e-08 3.58e-06 N; 2 0.3285655309 1.79e-09 9.85e-06 N; Iter=32 L=8 Root EOM Energy Delta E Res. Norm Conv?; 1 0.3243016034 7.49e-09 2.77e-06 N; 2 0.3285655292 -1.67e-09 8.87e-06 N; Iter=33 L=10 Root EOM Energy Delta E Res. Norm Conv?; 1 0.3243016058 2.42e-09 1.52e-06 N; 2 0.3285655299 6.91e-10 7.75e-06 N; Iter=34 L=12 Root EOM Energy Delta E Res. Norm Conv?; 1 0.3243016030 -2.78e-09 9.27e-07 Y; 2 0.3285655320 2.15e-09 6.23e-06 N; Iter=35 L=13 Root EOM Energy Delta E Res. Norm Conv?; 1 0.3243016033 2.53e-10 9.26e-07 Y; 2 0.3285655298 -2.26e-09 4.11e-06 N; Iter=36 L=14 Root EOM Energy Delta E Res. Norm Conv?; 1 0.3243016026 -6.98e-10 9.41e-07 Y; 2 0.3285655295 -2.30e-10 3.70e-06 N; Iter=37 L=15 Root EOM Energy Delta E Res. Norm Conv?; 1 0.3243016027 1.05e-10 9.64e-07 Y; 2 0.3285655298 2.71e-10 3.50e-06 N; Iter=38 L=16 Root EOM Energy Delta E Res. Norm Conv?; 1 0.3243016031 4.09e-10 9.77e-07 Y; 2 0.3285655296 -2.10e-10 3.48e-06 N; Iter=39 L=17 Root EOM Energy Delta E Res. Norm Conv?; 1 0.3243016034 2.70e-10 8.97e-07 Y; 2 0.3285655295 -6.61e-11 3.51e-06 N; Iter=40 L=18 Root EOM Energy Delta E Res. Norm Conv?; 1 0.3243016049 1.54e-09 8.13e-07 Y; 2 0.3285655298 2.62e-10 3.34e-06 N; Iter=41 L=19 Root EOM Energy Delta E Res. Norm Conv?; 1 0.3243016050 1.05e-10 7.91e-07 Y; 2 0.3285655298 -2.41e-11 3.31e-06 N; Iter=42 L=20 Root EOM Energy Delta E Res. Norm Conv?; 1 0.3243016056 5.33e-10 7.73e-07 Y; 2 0.3285655297 -9.36e-11 3.26e-06 N; Iter=43 L=21 Root EOM Energy Delta E Res. Norm Conv?; 1 0.3243016050 -5.70e-10 7.66e-07 Y; 2 0.3285655297 1.62e-11 3.26e-06 N; I,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/603#issuecomment-279097344
https://github.com/psi4/psi4/issues/603#issuecomment-279097344:1897,Energy Efficiency,Energy,Energy,1897, Delta E Res. Norm Conv?; 1 0.3243016125 2.73e-09 3.28e-06 N; 2 0.3285655293 -5.55e-17 6.43e-07 Y; Iter=30 L=4 Root EOM Energy Delta E Res. Norm Conv?; 1 0.3243016125 8.40e-14 3.28e-06 N; 2 0.3285655291 -2.62e-10 9.81e-06 N; Iter=31 L=6 Root EOM Energy Delta E Res. Norm Conv?; 1 0.3243015959 -1.66e-08 3.58e-06 N; 2 0.3285655309 1.79e-09 9.85e-06 N; Iter=32 L=8 Root EOM Energy Delta E Res. Norm Conv?; 1 0.3243016034 7.49e-09 2.77e-06 N; 2 0.3285655292 -1.67e-09 8.87e-06 N; Iter=33 L=10 Root EOM Energy Delta E Res. Norm Conv?; 1 0.3243016058 2.42e-09 1.52e-06 N; 2 0.3285655299 6.91e-10 7.75e-06 N; Iter=34 L=12 Root EOM Energy Delta E Res. Norm Conv?; 1 0.3243016030 -2.78e-09 9.27e-07 Y; 2 0.3285655320 2.15e-09 6.23e-06 N; Iter=35 L=13 Root EOM Energy Delta E Res. Norm Conv?; 1 0.3243016033 2.53e-10 9.26e-07 Y; 2 0.3285655298 -2.26e-09 4.11e-06 N; Iter=36 L=14 Root EOM Energy Delta E Res. Norm Conv?; 1 0.3243016026 -6.98e-10 9.41e-07 Y; 2 0.3285655295 -2.30e-10 3.70e-06 N; Iter=37 L=15 Root EOM Energy Delta E Res. Norm Conv?; 1 0.3243016027 1.05e-10 9.64e-07 Y; 2 0.3285655298 2.71e-10 3.50e-06 N; Iter=38 L=16 Root EOM Energy Delta E Res. Norm Conv?; 1 0.3243016031 4.09e-10 9.77e-07 Y; 2 0.3285655296 -2.10e-10 3.48e-06 N; Iter=39 L=17 Root EOM Energy Delta E Res. Norm Conv?; 1 0.3243016034 2.70e-10 8.97e-07 Y; 2 0.3285655295 -6.61e-11 3.51e-06 N; Iter=40 L=18 Root EOM Energy Delta E Res. Norm Conv?; 1 0.3243016049 1.54e-09 8.13e-07 Y; 2 0.3285655298 2.62e-10 3.34e-06 N; Iter=41 L=19 Root EOM Energy Delta E Res. Norm Conv?; 1 0.3243016050 1.05e-10 7.91e-07 Y; 2 0.3285655298 -2.41e-11 3.31e-06 N; Iter=42 L=20 Root EOM Energy Delta E Res. Norm Conv?; 1 0.3243016056 5.33e-10 7.73e-07 Y; 2 0.3285655297 -9.36e-11 3.26e-06 N; Iter=43 L=21 Root EOM Energy Delta E Res. Norm Conv?; 1 0.3243016050 -5.70e-10 7.66e-07 Y; 2 0.3285655297 1.62e-11 3.26e-06 N; Iter=44 L=22 Root EOM Energy Delta E Res. Norm Conv?; 1 0.3243016043 -7.30e-10 7.68e-07 Y; 2 0.3285655297 -2.33e-11 3.26e-06 N; I,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/603#issuecomment-279097344
https://github.com/psi4/psi4/issues/603#issuecomment-279097344:2023,Energy Efficiency,Energy,Energy,2023, Delta E Res. Norm Conv?; 1 0.3243016125 8.40e-14 3.28e-06 N; 2 0.3285655291 -2.62e-10 9.81e-06 N; Iter=31 L=6 Root EOM Energy Delta E Res. Norm Conv?; 1 0.3243015959 -1.66e-08 3.58e-06 N; 2 0.3285655309 1.79e-09 9.85e-06 N; Iter=32 L=8 Root EOM Energy Delta E Res. Norm Conv?; 1 0.3243016034 7.49e-09 2.77e-06 N; 2 0.3285655292 -1.67e-09 8.87e-06 N; Iter=33 L=10 Root EOM Energy Delta E Res. Norm Conv?; 1 0.3243016058 2.42e-09 1.52e-06 N; 2 0.3285655299 6.91e-10 7.75e-06 N; Iter=34 L=12 Root EOM Energy Delta E Res. Norm Conv?; 1 0.3243016030 -2.78e-09 9.27e-07 Y; 2 0.3285655320 2.15e-09 6.23e-06 N; Iter=35 L=13 Root EOM Energy Delta E Res. Norm Conv?; 1 0.3243016033 2.53e-10 9.26e-07 Y; 2 0.3285655298 -2.26e-09 4.11e-06 N; Iter=36 L=14 Root EOM Energy Delta E Res. Norm Conv?; 1 0.3243016026 -6.98e-10 9.41e-07 Y; 2 0.3285655295 -2.30e-10 3.70e-06 N; Iter=37 L=15 Root EOM Energy Delta E Res. Norm Conv?; 1 0.3243016027 1.05e-10 9.64e-07 Y; 2 0.3285655298 2.71e-10 3.50e-06 N; Iter=38 L=16 Root EOM Energy Delta E Res. Norm Conv?; 1 0.3243016031 4.09e-10 9.77e-07 Y; 2 0.3285655296 -2.10e-10 3.48e-06 N; Iter=39 L=17 Root EOM Energy Delta E Res. Norm Conv?; 1 0.3243016034 2.70e-10 8.97e-07 Y; 2 0.3285655295 -6.61e-11 3.51e-06 N; Iter=40 L=18 Root EOM Energy Delta E Res. Norm Conv?; 1 0.3243016049 1.54e-09 8.13e-07 Y; 2 0.3285655298 2.62e-10 3.34e-06 N; Iter=41 L=19 Root EOM Energy Delta E Res. Norm Conv?; 1 0.3243016050 1.05e-10 7.91e-07 Y; 2 0.3285655298 -2.41e-11 3.31e-06 N; Iter=42 L=20 Root EOM Energy Delta E Res. Norm Conv?; 1 0.3243016056 5.33e-10 7.73e-07 Y; 2 0.3285655297 -9.36e-11 3.26e-06 N; Iter=43 L=21 Root EOM Energy Delta E Res. Norm Conv?; 1 0.3243016050 -5.70e-10 7.66e-07 Y; 2 0.3285655297 1.62e-11 3.26e-06 N; Iter=44 L=22 Root EOM Energy Delta E Res. Norm Conv?; 1 0.3243016043 -7.30e-10 7.68e-07 Y; 2 0.3285655297 -2.33e-11 3.26e-06 N; Iter=45 L=23 Root EOM Energy Delta E Res. Norm Conv?; 1 0.3243016047 4.83e-10 7.73e-07 Y; 2 0.3285655297 -1.39e-12 3.26e-06 N; ,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/603#issuecomment-279097344
https://github.com/psi4/psi4/issues/603#issuecomment-279097344:2150,Energy Efficiency,Energy,Energy,2150,"Delta E Res. Norm Conv?; 1 0.3243015959 -1.66e-08 3.58e-06 N; 2 0.3285655309 1.79e-09 9.85e-06 N; Iter=32 L=8 Root EOM Energy Delta E Res. Norm Conv?; 1 0.3243016034 7.49e-09 2.77e-06 N; 2 0.3285655292 -1.67e-09 8.87e-06 N; Iter=33 L=10 Root EOM Energy Delta E Res. Norm Conv?; 1 0.3243016058 2.42e-09 1.52e-06 N; 2 0.3285655299 6.91e-10 7.75e-06 N; Iter=34 L=12 Root EOM Energy Delta E Res. Norm Conv?; 1 0.3243016030 -2.78e-09 9.27e-07 Y; 2 0.3285655320 2.15e-09 6.23e-06 N; Iter=35 L=13 Root EOM Energy Delta E Res. Norm Conv?; 1 0.3243016033 2.53e-10 9.26e-07 Y; 2 0.3285655298 -2.26e-09 4.11e-06 N; Iter=36 L=14 Root EOM Energy Delta E Res. Norm Conv?; 1 0.3243016026 -6.98e-10 9.41e-07 Y; 2 0.3285655295 -2.30e-10 3.70e-06 N; Iter=37 L=15 Root EOM Energy Delta E Res. Norm Conv?; 1 0.3243016027 1.05e-10 9.64e-07 Y; 2 0.3285655298 2.71e-10 3.50e-06 N; Iter=38 L=16 Root EOM Energy Delta E Res. Norm Conv?; 1 0.3243016031 4.09e-10 9.77e-07 Y; 2 0.3285655296 -2.10e-10 3.48e-06 N; Iter=39 L=17 Root EOM Energy Delta E Res. Norm Conv?; 1 0.3243016034 2.70e-10 8.97e-07 Y; 2 0.3285655295 -6.61e-11 3.51e-06 N; Iter=40 L=18 Root EOM Energy Delta E Res. Norm Conv?; 1 0.3243016049 1.54e-09 8.13e-07 Y; 2 0.3285655298 2.62e-10 3.34e-06 N; Iter=41 L=19 Root EOM Energy Delta E Res. Norm Conv?; 1 0.3243016050 1.05e-10 7.91e-07 Y; 2 0.3285655298 -2.41e-11 3.31e-06 N; Iter=42 L=20 Root EOM Energy Delta E Res. Norm Conv?; 1 0.3243016056 5.33e-10 7.73e-07 Y; 2 0.3285655297 -9.36e-11 3.26e-06 N; Iter=43 L=21 Root EOM Energy Delta E Res. Norm Conv?; 1 0.3243016050 -5.70e-10 7.66e-07 Y; 2 0.3285655297 1.62e-11 3.26e-06 N; Iter=44 L=22 Root EOM Energy Delta E Res. Norm Conv?; 1 0.3243016043 -7.30e-10 7.68e-07 Y; 2 0.3285655297 -2.33e-11 3.26e-06 N; Iter=45 L=23 Root EOM Energy Delta E Res. Norm Conv?; 1 0.3243016047 4.83e-10 7.73e-07 Y; 2 0.3285655297 -1.39e-12 3.26e-06 N; Collapsing to only 2 vector(s). Procedure converged for 1 root(s). Algorithm failure: No vectors could be added, though not all",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/603#issuecomment-279097344
https://github.com/psi4/psi4/issues/603#issuecomment-279097344:2277,Energy Efficiency,Energy,Energy,2277,"elta E Res. Norm Conv?; 1 0.3243016034 7.49e-09 2.77e-06 N; 2 0.3285655292 -1.67e-09 8.87e-06 N; Iter=33 L=10 Root EOM Energy Delta E Res. Norm Conv?; 1 0.3243016058 2.42e-09 1.52e-06 N; 2 0.3285655299 6.91e-10 7.75e-06 N; Iter=34 L=12 Root EOM Energy Delta E Res. Norm Conv?; 1 0.3243016030 -2.78e-09 9.27e-07 Y; 2 0.3285655320 2.15e-09 6.23e-06 N; Iter=35 L=13 Root EOM Energy Delta E Res. Norm Conv?; 1 0.3243016033 2.53e-10 9.26e-07 Y; 2 0.3285655298 -2.26e-09 4.11e-06 N; Iter=36 L=14 Root EOM Energy Delta E Res. Norm Conv?; 1 0.3243016026 -6.98e-10 9.41e-07 Y; 2 0.3285655295 -2.30e-10 3.70e-06 N; Iter=37 L=15 Root EOM Energy Delta E Res. Norm Conv?; 1 0.3243016027 1.05e-10 9.64e-07 Y; 2 0.3285655298 2.71e-10 3.50e-06 N; Iter=38 L=16 Root EOM Energy Delta E Res. Norm Conv?; 1 0.3243016031 4.09e-10 9.77e-07 Y; 2 0.3285655296 -2.10e-10 3.48e-06 N; Iter=39 L=17 Root EOM Energy Delta E Res. Norm Conv?; 1 0.3243016034 2.70e-10 8.97e-07 Y; 2 0.3285655295 -6.61e-11 3.51e-06 N; Iter=40 L=18 Root EOM Energy Delta E Res. Norm Conv?; 1 0.3243016049 1.54e-09 8.13e-07 Y; 2 0.3285655298 2.62e-10 3.34e-06 N; Iter=41 L=19 Root EOM Energy Delta E Res. Norm Conv?; 1 0.3243016050 1.05e-10 7.91e-07 Y; 2 0.3285655298 -2.41e-11 3.31e-06 N; Iter=42 L=20 Root EOM Energy Delta E Res. Norm Conv?; 1 0.3243016056 5.33e-10 7.73e-07 Y; 2 0.3285655297 -9.36e-11 3.26e-06 N; Iter=43 L=21 Root EOM Energy Delta E Res. Norm Conv?; 1 0.3243016050 -5.70e-10 7.66e-07 Y; 2 0.3285655297 1.62e-11 3.26e-06 N; Iter=44 L=22 Root EOM Energy Delta E Res. Norm Conv?; 1 0.3243016043 -7.30e-10 7.68e-07 Y; 2 0.3285655297 -2.33e-11 3.26e-06 N; Iter=45 L=23 Root EOM Energy Delta E Res. Norm Conv?; 1 0.3243016047 4.83e-10 7.73e-07 Y; 2 0.3285655297 -1.39e-12 3.26e-06 N; Collapsing to only 2 vector(s). Procedure converged for 1 root(s). Algorithm failure: No vectors could be added, though not all roots converged!. EOM CCSD R0 for root 0 = 0.00000000000. Final Energetic Summary for Converged Roots of Irrep B1g; Excitation",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/603#issuecomment-279097344
https://github.com/psi4/psi4/issues/603#issuecomment-279097344:2403,Energy Efficiency,Energy,Energy,2403,"Delta E Res. Norm Conv?; 1 0.3243016058 2.42e-09 1.52e-06 N; 2 0.3285655299 6.91e-10 7.75e-06 N; Iter=34 L=12 Root EOM Energy Delta E Res. Norm Conv?; 1 0.3243016030 -2.78e-09 9.27e-07 Y; 2 0.3285655320 2.15e-09 6.23e-06 N; Iter=35 L=13 Root EOM Energy Delta E Res. Norm Conv?; 1 0.3243016033 2.53e-10 9.26e-07 Y; 2 0.3285655298 -2.26e-09 4.11e-06 N; Iter=36 L=14 Root EOM Energy Delta E Res. Norm Conv?; 1 0.3243016026 -6.98e-10 9.41e-07 Y; 2 0.3285655295 -2.30e-10 3.70e-06 N; Iter=37 L=15 Root EOM Energy Delta E Res. Norm Conv?; 1 0.3243016027 1.05e-10 9.64e-07 Y; 2 0.3285655298 2.71e-10 3.50e-06 N; Iter=38 L=16 Root EOM Energy Delta E Res. Norm Conv?; 1 0.3243016031 4.09e-10 9.77e-07 Y; 2 0.3285655296 -2.10e-10 3.48e-06 N; Iter=39 L=17 Root EOM Energy Delta E Res. Norm Conv?; 1 0.3243016034 2.70e-10 8.97e-07 Y; 2 0.3285655295 -6.61e-11 3.51e-06 N; Iter=40 L=18 Root EOM Energy Delta E Res. Norm Conv?; 1 0.3243016049 1.54e-09 8.13e-07 Y; 2 0.3285655298 2.62e-10 3.34e-06 N; Iter=41 L=19 Root EOM Energy Delta E Res. Norm Conv?; 1 0.3243016050 1.05e-10 7.91e-07 Y; 2 0.3285655298 -2.41e-11 3.31e-06 N; Iter=42 L=20 Root EOM Energy Delta E Res. Norm Conv?; 1 0.3243016056 5.33e-10 7.73e-07 Y; 2 0.3285655297 -9.36e-11 3.26e-06 N; Iter=43 L=21 Root EOM Energy Delta E Res. Norm Conv?; 1 0.3243016050 -5.70e-10 7.66e-07 Y; 2 0.3285655297 1.62e-11 3.26e-06 N; Iter=44 L=22 Root EOM Energy Delta E Res. Norm Conv?; 1 0.3243016043 -7.30e-10 7.68e-07 Y; 2 0.3285655297 -2.33e-11 3.26e-06 N; Iter=45 L=23 Root EOM Energy Delta E Res. Norm Conv?; 1 0.3243016047 4.83e-10 7.73e-07 Y; 2 0.3285655297 -1.39e-12 3.26e-06 N; Collapsing to only 2 vector(s). Procedure converged for 1 root(s). Algorithm failure: No vectors could be added, though not all roots converged!. EOM CCSD R0 for root 0 = 0.00000000000. Final Energetic Summary for Converged Roots of Irrep B1g; Excitation Energy Total Energy; (eV) (cm^-1) (au) (au); EOM State 1 8.825 71176.0 0.3243016047 -231.251027700721. Largest components of ",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/603#issuecomment-279097344
https://github.com/psi4/psi4/issues/603#issuecomment-279097344:2530,Energy Efficiency,Energy,Energy,2530," 0.3243016058 2.42e-09 1.52e-06 N; 2 0.3285655299 6.91e-10 7.75e-06 N; Iter=34 L=12 Root EOM Energy Delta E Res. Norm Conv?; 1 0.3243016030 -2.78e-09 9.27e-07 Y; 2 0.3285655320 2.15e-09 6.23e-06 N; Iter=35 L=13 Root EOM Energy Delta E Res. Norm Conv?; 1 0.3243016033 2.53e-10 9.26e-07 Y; 2 0.3285655298 -2.26e-09 4.11e-06 N; Iter=36 L=14 Root EOM Energy Delta E Res. Norm Conv?; 1 0.3243016026 -6.98e-10 9.41e-07 Y; 2 0.3285655295 -2.30e-10 3.70e-06 N; Iter=37 L=15 Root EOM Energy Delta E Res. Norm Conv?; 1 0.3243016027 1.05e-10 9.64e-07 Y; 2 0.3285655298 2.71e-10 3.50e-06 N; Iter=38 L=16 Root EOM Energy Delta E Res. Norm Conv?; 1 0.3243016031 4.09e-10 9.77e-07 Y; 2 0.3285655296 -2.10e-10 3.48e-06 N; Iter=39 L=17 Root EOM Energy Delta E Res. Norm Conv?; 1 0.3243016034 2.70e-10 8.97e-07 Y; 2 0.3285655295 -6.61e-11 3.51e-06 N; Iter=40 L=18 Root EOM Energy Delta E Res. Norm Conv?; 1 0.3243016049 1.54e-09 8.13e-07 Y; 2 0.3285655298 2.62e-10 3.34e-06 N; Iter=41 L=19 Root EOM Energy Delta E Res. Norm Conv?; 1 0.3243016050 1.05e-10 7.91e-07 Y; 2 0.3285655298 -2.41e-11 3.31e-06 N; Iter=42 L=20 Root EOM Energy Delta E Res. Norm Conv?; 1 0.3243016056 5.33e-10 7.73e-07 Y; 2 0.3285655297 -9.36e-11 3.26e-06 N; Iter=43 L=21 Root EOM Energy Delta E Res. Norm Conv?; 1 0.3243016050 -5.70e-10 7.66e-07 Y; 2 0.3285655297 1.62e-11 3.26e-06 N; Iter=44 L=22 Root EOM Energy Delta E Res. Norm Conv?; 1 0.3243016043 -7.30e-10 7.68e-07 Y; 2 0.3285655297 -2.33e-11 3.26e-06 N; Iter=45 L=23 Root EOM Energy Delta E Res. Norm Conv?; 1 0.3243016047 4.83e-10 7.73e-07 Y; 2 0.3285655297 -1.39e-12 3.26e-06 N; Collapsing to only 2 vector(s). Procedure converged for 1 root(s). Algorithm failure: No vectors could be added, though not all roots converged!. EOM CCSD R0 for root 0 = 0.00000000000. Final Energetic Summary for Converged Roots of Irrep B1g; Excitation Energy Total Energy; (eV) (cm^-1) (au) (au); EOM State 1 8.825 71176.0 0.3243016047 -231.251027700721. Largest components of excited wave function #1:",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/603#issuecomment-279097344
https://github.com/psi4/psi4/issues/603#issuecomment-279097344:2657,Energy Efficiency,Energy,Energy,2657," 0.3243016058 2.42e-09 1.52e-06 N; 2 0.3285655299 6.91e-10 7.75e-06 N; Iter=34 L=12 Root EOM Energy Delta E Res. Norm Conv?; 1 0.3243016030 -2.78e-09 9.27e-07 Y; 2 0.3285655320 2.15e-09 6.23e-06 N; Iter=35 L=13 Root EOM Energy Delta E Res. Norm Conv?; 1 0.3243016033 2.53e-10 9.26e-07 Y; 2 0.3285655298 -2.26e-09 4.11e-06 N; Iter=36 L=14 Root EOM Energy Delta E Res. Norm Conv?; 1 0.3243016026 -6.98e-10 9.41e-07 Y; 2 0.3285655295 -2.30e-10 3.70e-06 N; Iter=37 L=15 Root EOM Energy Delta E Res. Norm Conv?; 1 0.3243016027 1.05e-10 9.64e-07 Y; 2 0.3285655298 2.71e-10 3.50e-06 N; Iter=38 L=16 Root EOM Energy Delta E Res. Norm Conv?; 1 0.3243016031 4.09e-10 9.77e-07 Y; 2 0.3285655296 -2.10e-10 3.48e-06 N; Iter=39 L=17 Root EOM Energy Delta E Res. Norm Conv?; 1 0.3243016034 2.70e-10 8.97e-07 Y; 2 0.3285655295 -6.61e-11 3.51e-06 N; Iter=40 L=18 Root EOM Energy Delta E Res. Norm Conv?; 1 0.3243016049 1.54e-09 8.13e-07 Y; 2 0.3285655298 2.62e-10 3.34e-06 N; Iter=41 L=19 Root EOM Energy Delta E Res. Norm Conv?; 1 0.3243016050 1.05e-10 7.91e-07 Y; 2 0.3285655298 -2.41e-11 3.31e-06 N; Iter=42 L=20 Root EOM Energy Delta E Res. Norm Conv?; 1 0.3243016056 5.33e-10 7.73e-07 Y; 2 0.3285655297 -9.36e-11 3.26e-06 N; Iter=43 L=21 Root EOM Energy Delta E Res. Norm Conv?; 1 0.3243016050 -5.70e-10 7.66e-07 Y; 2 0.3285655297 1.62e-11 3.26e-06 N; Iter=44 L=22 Root EOM Energy Delta E Res. Norm Conv?; 1 0.3243016043 -7.30e-10 7.68e-07 Y; 2 0.3285655297 -2.33e-11 3.26e-06 N; Iter=45 L=23 Root EOM Energy Delta E Res. Norm Conv?; 1 0.3243016047 4.83e-10 7.73e-07 Y; 2 0.3285655297 -1.39e-12 3.26e-06 N; Collapsing to only 2 vector(s). Procedure converged for 1 root(s). Algorithm failure: No vectors could be added, though not all roots converged!. EOM CCSD R0 for root 0 = 0.00000000000. Final Energetic Summary for Converged Roots of Irrep B1g; Excitation Energy Total Energy; (eV) (cm^-1) (au) (au); EOM State 1 8.825 71176.0 0.3243016047 -231.251027700721. Largest components of excited wave function #1:",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/603#issuecomment-279097344
https://github.com/psi4/psi4/issues/603#issuecomment-279097344:2784,Energy Efficiency,Energy,Energy,2784," 0.3243016058 2.42e-09 1.52e-06 N; 2 0.3285655299 6.91e-10 7.75e-06 N; Iter=34 L=12 Root EOM Energy Delta E Res. Norm Conv?; 1 0.3243016030 -2.78e-09 9.27e-07 Y; 2 0.3285655320 2.15e-09 6.23e-06 N; Iter=35 L=13 Root EOM Energy Delta E Res. Norm Conv?; 1 0.3243016033 2.53e-10 9.26e-07 Y; 2 0.3285655298 -2.26e-09 4.11e-06 N; Iter=36 L=14 Root EOM Energy Delta E Res. Norm Conv?; 1 0.3243016026 -6.98e-10 9.41e-07 Y; 2 0.3285655295 -2.30e-10 3.70e-06 N; Iter=37 L=15 Root EOM Energy Delta E Res. Norm Conv?; 1 0.3243016027 1.05e-10 9.64e-07 Y; 2 0.3285655298 2.71e-10 3.50e-06 N; Iter=38 L=16 Root EOM Energy Delta E Res. Norm Conv?; 1 0.3243016031 4.09e-10 9.77e-07 Y; 2 0.3285655296 -2.10e-10 3.48e-06 N; Iter=39 L=17 Root EOM Energy Delta E Res. Norm Conv?; 1 0.3243016034 2.70e-10 8.97e-07 Y; 2 0.3285655295 -6.61e-11 3.51e-06 N; Iter=40 L=18 Root EOM Energy Delta E Res. Norm Conv?; 1 0.3243016049 1.54e-09 8.13e-07 Y; 2 0.3285655298 2.62e-10 3.34e-06 N; Iter=41 L=19 Root EOM Energy Delta E Res. Norm Conv?; 1 0.3243016050 1.05e-10 7.91e-07 Y; 2 0.3285655298 -2.41e-11 3.31e-06 N; Iter=42 L=20 Root EOM Energy Delta E Res. Norm Conv?; 1 0.3243016056 5.33e-10 7.73e-07 Y; 2 0.3285655297 -9.36e-11 3.26e-06 N; Iter=43 L=21 Root EOM Energy Delta E Res. Norm Conv?; 1 0.3243016050 -5.70e-10 7.66e-07 Y; 2 0.3285655297 1.62e-11 3.26e-06 N; Iter=44 L=22 Root EOM Energy Delta E Res. Norm Conv?; 1 0.3243016043 -7.30e-10 7.68e-07 Y; 2 0.3285655297 -2.33e-11 3.26e-06 N; Iter=45 L=23 Root EOM Energy Delta E Res. Norm Conv?; 1 0.3243016047 4.83e-10 7.73e-07 Y; 2 0.3285655297 -1.39e-12 3.26e-06 N; Collapsing to only 2 vector(s). Procedure converged for 1 root(s). Algorithm failure: No vectors could be added, though not all roots converged!. EOM CCSD R0 for root 0 = 0.00000000000. Final Energetic Summary for Converged Roots of Irrep B1g; Excitation Energy Total Energy; (eV) (cm^-1) (au) (au); EOM State 1 8.825 71176.0 0.3243016047 -231.251027700721. Largest components of excited wave function #1:",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/603#issuecomment-279097344
https://github.com/psi4/psi4/issues/603#issuecomment-279097344:2912,Energy Efficiency,Energy,Energy,2912," 0.3243016058 2.42e-09 1.52e-06 N; 2 0.3285655299 6.91e-10 7.75e-06 N; Iter=34 L=12 Root EOM Energy Delta E Res. Norm Conv?; 1 0.3243016030 -2.78e-09 9.27e-07 Y; 2 0.3285655320 2.15e-09 6.23e-06 N; Iter=35 L=13 Root EOM Energy Delta E Res. Norm Conv?; 1 0.3243016033 2.53e-10 9.26e-07 Y; 2 0.3285655298 -2.26e-09 4.11e-06 N; Iter=36 L=14 Root EOM Energy Delta E Res. Norm Conv?; 1 0.3243016026 -6.98e-10 9.41e-07 Y; 2 0.3285655295 -2.30e-10 3.70e-06 N; Iter=37 L=15 Root EOM Energy Delta E Res. Norm Conv?; 1 0.3243016027 1.05e-10 9.64e-07 Y; 2 0.3285655298 2.71e-10 3.50e-06 N; Iter=38 L=16 Root EOM Energy Delta E Res. Norm Conv?; 1 0.3243016031 4.09e-10 9.77e-07 Y; 2 0.3285655296 -2.10e-10 3.48e-06 N; Iter=39 L=17 Root EOM Energy Delta E Res. Norm Conv?; 1 0.3243016034 2.70e-10 8.97e-07 Y; 2 0.3285655295 -6.61e-11 3.51e-06 N; Iter=40 L=18 Root EOM Energy Delta E Res. Norm Conv?; 1 0.3243016049 1.54e-09 8.13e-07 Y; 2 0.3285655298 2.62e-10 3.34e-06 N; Iter=41 L=19 Root EOM Energy Delta E Res. Norm Conv?; 1 0.3243016050 1.05e-10 7.91e-07 Y; 2 0.3285655298 -2.41e-11 3.31e-06 N; Iter=42 L=20 Root EOM Energy Delta E Res. Norm Conv?; 1 0.3243016056 5.33e-10 7.73e-07 Y; 2 0.3285655297 -9.36e-11 3.26e-06 N; Iter=43 L=21 Root EOM Energy Delta E Res. Norm Conv?; 1 0.3243016050 -5.70e-10 7.66e-07 Y; 2 0.3285655297 1.62e-11 3.26e-06 N; Iter=44 L=22 Root EOM Energy Delta E Res. Norm Conv?; 1 0.3243016043 -7.30e-10 7.68e-07 Y; 2 0.3285655297 -2.33e-11 3.26e-06 N; Iter=45 L=23 Root EOM Energy Delta E Res. Norm Conv?; 1 0.3243016047 4.83e-10 7.73e-07 Y; 2 0.3285655297 -1.39e-12 3.26e-06 N; Collapsing to only 2 vector(s). Procedure converged for 1 root(s). Algorithm failure: No vectors could be added, though not all roots converged!. EOM CCSD R0 for root 0 = 0.00000000000. Final Energetic Summary for Converged Roots of Irrep B1g; Excitation Energy Total Energy; (eV) (cm^-1) (au) (au); EOM State 1 8.825 71176.0 0.3243016047 -231.251027700721. Largest components of excited wave function #1:",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/603#issuecomment-279097344
https://github.com/psi4/psi4/issues/603#issuecomment-279097344:3272,Energy Efficiency,Energy,Energy,3272," 0.3243016058 2.42e-09 1.52e-06 N; 2 0.3285655299 6.91e-10 7.75e-06 N; Iter=34 L=12 Root EOM Energy Delta E Res. Norm Conv?; 1 0.3243016030 -2.78e-09 9.27e-07 Y; 2 0.3285655320 2.15e-09 6.23e-06 N; Iter=35 L=13 Root EOM Energy Delta E Res. Norm Conv?; 1 0.3243016033 2.53e-10 9.26e-07 Y; 2 0.3285655298 -2.26e-09 4.11e-06 N; Iter=36 L=14 Root EOM Energy Delta E Res. Norm Conv?; 1 0.3243016026 -6.98e-10 9.41e-07 Y; 2 0.3285655295 -2.30e-10 3.70e-06 N; Iter=37 L=15 Root EOM Energy Delta E Res. Norm Conv?; 1 0.3243016027 1.05e-10 9.64e-07 Y; 2 0.3285655298 2.71e-10 3.50e-06 N; Iter=38 L=16 Root EOM Energy Delta E Res. Norm Conv?; 1 0.3243016031 4.09e-10 9.77e-07 Y; 2 0.3285655296 -2.10e-10 3.48e-06 N; Iter=39 L=17 Root EOM Energy Delta E Res. Norm Conv?; 1 0.3243016034 2.70e-10 8.97e-07 Y; 2 0.3285655295 -6.61e-11 3.51e-06 N; Iter=40 L=18 Root EOM Energy Delta E Res. Norm Conv?; 1 0.3243016049 1.54e-09 8.13e-07 Y; 2 0.3285655298 2.62e-10 3.34e-06 N; Iter=41 L=19 Root EOM Energy Delta E Res. Norm Conv?; 1 0.3243016050 1.05e-10 7.91e-07 Y; 2 0.3285655298 -2.41e-11 3.31e-06 N; Iter=42 L=20 Root EOM Energy Delta E Res. Norm Conv?; 1 0.3243016056 5.33e-10 7.73e-07 Y; 2 0.3285655297 -9.36e-11 3.26e-06 N; Iter=43 L=21 Root EOM Energy Delta E Res. Norm Conv?; 1 0.3243016050 -5.70e-10 7.66e-07 Y; 2 0.3285655297 1.62e-11 3.26e-06 N; Iter=44 L=22 Root EOM Energy Delta E Res. Norm Conv?; 1 0.3243016043 -7.30e-10 7.68e-07 Y; 2 0.3285655297 -2.33e-11 3.26e-06 N; Iter=45 L=23 Root EOM Energy Delta E Res. Norm Conv?; 1 0.3243016047 4.83e-10 7.73e-07 Y; 2 0.3285655297 -1.39e-12 3.26e-06 N; Collapsing to only 2 vector(s). Procedure converged for 1 root(s). Algorithm failure: No vectors could be added, though not all roots converged!. EOM CCSD R0 for root 0 = 0.00000000000. Final Energetic Summary for Converged Roots of Irrep B1g; Excitation Energy Total Energy; (eV) (cm^-1) (au) (au); EOM State 1 8.825 71176.0 0.3243016047 -231.251027700721. Largest components of excited wave function #1:",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/603#issuecomment-279097344
https://github.com/psi4/psi4/issues/603#issuecomment-279097344:3285,Energy Efficiency,Energy,Energy,3285," 0.3243016058 2.42e-09 1.52e-06 N; 2 0.3285655299 6.91e-10 7.75e-06 N; Iter=34 L=12 Root EOM Energy Delta E Res. Norm Conv?; 1 0.3243016030 -2.78e-09 9.27e-07 Y; 2 0.3285655320 2.15e-09 6.23e-06 N; Iter=35 L=13 Root EOM Energy Delta E Res. Norm Conv?; 1 0.3243016033 2.53e-10 9.26e-07 Y; 2 0.3285655298 -2.26e-09 4.11e-06 N; Iter=36 L=14 Root EOM Energy Delta E Res. Norm Conv?; 1 0.3243016026 -6.98e-10 9.41e-07 Y; 2 0.3285655295 -2.30e-10 3.70e-06 N; Iter=37 L=15 Root EOM Energy Delta E Res. Norm Conv?; 1 0.3243016027 1.05e-10 9.64e-07 Y; 2 0.3285655298 2.71e-10 3.50e-06 N; Iter=38 L=16 Root EOM Energy Delta E Res. Norm Conv?; 1 0.3243016031 4.09e-10 9.77e-07 Y; 2 0.3285655296 -2.10e-10 3.48e-06 N; Iter=39 L=17 Root EOM Energy Delta E Res. Norm Conv?; 1 0.3243016034 2.70e-10 8.97e-07 Y; 2 0.3285655295 -6.61e-11 3.51e-06 N; Iter=40 L=18 Root EOM Energy Delta E Res. Norm Conv?; 1 0.3243016049 1.54e-09 8.13e-07 Y; 2 0.3285655298 2.62e-10 3.34e-06 N; Iter=41 L=19 Root EOM Energy Delta E Res. Norm Conv?; 1 0.3243016050 1.05e-10 7.91e-07 Y; 2 0.3285655298 -2.41e-11 3.31e-06 N; Iter=42 L=20 Root EOM Energy Delta E Res. Norm Conv?; 1 0.3243016056 5.33e-10 7.73e-07 Y; 2 0.3285655297 -9.36e-11 3.26e-06 N; Iter=43 L=21 Root EOM Energy Delta E Res. Norm Conv?; 1 0.3243016050 -5.70e-10 7.66e-07 Y; 2 0.3285655297 1.62e-11 3.26e-06 N; Iter=44 L=22 Root EOM Energy Delta E Res. Norm Conv?; 1 0.3243016043 -7.30e-10 7.68e-07 Y; 2 0.3285655297 -2.33e-11 3.26e-06 N; Iter=45 L=23 Root EOM Energy Delta E Res. Norm Conv?; 1 0.3243016047 4.83e-10 7.73e-07 Y; 2 0.3285655297 -1.39e-12 3.26e-06 N; Collapsing to only 2 vector(s). Procedure converged for 1 root(s). Algorithm failure: No vectors could be added, though not all roots converged!. EOM CCSD R0 for root 0 = 0.00000000000. Final Energetic Summary for Converged Roots of Irrep B1g; Excitation Energy Total Energy; (eV) (cm^-1) (au) (au); EOM State 1 8.825 71176.0 0.3243016047 -231.251027700721. Largest components of excited wave function #1:",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/603#issuecomment-279097344
https://github.com/psi4/psi4/issues/603#issuecomment-301266040:254,Availability,toler,tolerance,254,"Kind of looks like your convergence is getting tight enough that some sort of denominator is getting small enough for instabilities (not sure how this is solved, but alpha/beta in CG for examples). This is probably exacerbated by the very loose integral tolerance. @amjames Any comments?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/603#issuecomment-301266040
https://github.com/psi4/psi4/pull/605#issuecomment-277151141:54,Testability,Test,Test,54,Looks like `gdma` is still the culprit:; ```; 117/118 Test #335: gdma-gdma1 .......................***Failed 1.55 sec; ```,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/605#issuecomment-277151141
https://github.com/psi4/psi4/pull/605#issuecomment-277363294:182,Security,Validat,ValidationError,182,"With above commit, gdma1 is still going to fail **even with libint**, as described in psi4/psi4#587. But otherwise, with ERD activated (and ERD traps switched to `sys.exit(0)` from `ValidationError`), get a test suite clean except for below. The first and last are expected to fail on this computer. The middle two are sowreap's that return 0.0000 but, due to our testing structure, continue anyways and fail. I think answers of zero aren't failing silently. ```; The following tests FAILED:; 	188 - mints9 (Failed); 	272 - pywrap-db2 (Failed); 	275 - pywrap-freq-g-sowreap (Failed); 	333 - dftd3-version (Failed); ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/605#issuecomment-277363294
https://github.com/psi4/psi4/pull/605#issuecomment-277363294:207,Testability,test,test,207,"With above commit, gdma1 is still going to fail **even with libint**, as described in psi4/psi4#587. But otherwise, with ERD activated (and ERD traps switched to `sys.exit(0)` from `ValidationError`), get a test suite clean except for below. The first and last are expected to fail on this computer. The middle two are sowreap's that return 0.0000 but, due to our testing structure, continue anyways and fail. I think answers of zero aren't failing silently. ```; The following tests FAILED:; 	188 - mints9 (Failed); 	272 - pywrap-db2 (Failed); 	275 - pywrap-freq-g-sowreap (Failed); 	333 - dftd3-version (Failed); ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/605#issuecomment-277363294
https://github.com/psi4/psi4/pull/605#issuecomment-277363294:364,Testability,test,testing,364,"With above commit, gdma1 is still going to fail **even with libint**, as described in psi4/psi4#587. But otherwise, with ERD activated (and ERD traps switched to `sys.exit(0)` from `ValidationError`), get a test suite clean except for below. The first and last are expected to fail on this computer. The middle two are sowreap's that return 0.0000 but, due to our testing structure, continue anyways and fail. I think answers of zero aren't failing silently. ```; The following tests FAILED:; 	188 - mints9 (Failed); 	272 - pywrap-db2 (Failed); 	275 - pywrap-freq-g-sowreap (Failed); 	333 - dftd3-version (Failed); ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/605#issuecomment-277363294
https://github.com/psi4/psi4/pull/605#issuecomment-277363294:478,Testability,test,tests,478,"With above commit, gdma1 is still going to fail **even with libint**, as described in psi4/psi4#587. But otherwise, with ERD activated (and ERD traps switched to `sys.exit(0)` from `ValidationError`), get a test suite clean except for below. The first and last are expected to fail on this computer. The middle two are sowreap's that return 0.0000 but, due to our testing structure, continue anyways and fail. I think answers of zero aren't failing silently. ```; The following tests FAILED:; 	188 - mints9 (Failed); 	272 - pywrap-db2 (Failed); 	275 - pywrap-freq-g-sowreap (Failed); 	333 - dftd3-version (Failed); ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/605#issuecomment-277363294
https://github.com/psi4/psi4/pull/605#issuecomment-277397753:82,Availability,error,error,82,"For the record, the following are the tests that are terminated prematurely (with error msg) when ERD globally activated. If anyone gets the `WARNING: string truncated` with gdma, your compile dir path is too long. I think I can fix it, but that's not for this PR. ```; The following tests FAILED:; 	 12 - cbs-xtpl-freq (Failed); 	 13 - cbs-xtpl-gradient (Failed); 	 14 - cbs-xtpl-opt (Failed); 	 16 - cbs-xtpl-wrapper (Failed); 	 17 - cc1 (Failed); 	 21 - cc13 (Failed); 	 22 - cc13a (Failed); 	 23 - cc14 (Failed); 	 30 - cc21 (Failed); 	 32 - cc23 (Failed); 	 33 - cc24 (Failed); 	 34 - cc25 (Failed); 	 35 - cc26 (Failed); 	 36 - cc27 (Failed); 	 39 - cc3 (Failed); 	 78 - cepa0-grad1 (Failed); 	 79 - cepa0-grad2 (Failed); 	 95 - dcft-grad1 (Failed); 	 96 - dcft-grad2 (Failed); 	 97 - dcft-grad3 (Failed); 	 98 - dcft-grad4 (Failed); 	103 - dcft5 (Failed); 	114 - dfccd-grad1 (Failed); 	117 - dfccsd-grad1 (Failed); 	122 - dfmp2-3 (Failed); 	124 - dfmp2-grad1 (Failed); 	125 - dfmp2-grad2 (Failed); 	126 - dfmp2-grad3 (Failed); 	127 - dfmp2-grad4 (Failed); 	132 - dfomp2-grad1 (Failed); 	133 - dfomp2-grad2 (Failed); 	136 - dfomp3-grad1 (Failed); 	137 - dfomp3-grad2 (Failed); 	140 - dfomp2p5-grad1 (Failed); 	141 - dfomp2p5-grad2 (Failed); 	146 - dft-freq (Failed); 	147 - dft-grad (Failed); 	151 - dft1 (Failed); 	152 - dft1-alt (Failed); 	154 - dft3 (Failed); 	157 - extern1 (Failed); 	165 - fd-freq-energy-large (Failed); 	166 - fd-freq-gradient (Failed); 	167 - fd-freq-gradient-large (Failed); 	168 - fd-gradient (Failed); 	169 - freq-isotope (Failed); 	171 - fnocc2 (Failed); 	176 - gibbs (Failed); 	192 - mp2-1 (Failed); 	194 - mp2-grad1 (Failed); 	195 - mp2-grad2 (Failed); 	196 - mp2-module (Failed); 	197 - mp2_5-grad1 (Failed); 	198 - mp2_5-grad2 (Failed); 	199 - mp3-grad1 (Failed); 	200 - mp3-grad2 (Failed); 	206 - ocepa-grad1 (Failed); 	207 - ocepa-grad2 (Failed); 	216 - omp2-grad1 (Failed); 	217 - omp2-grad2 (Failed); 	220 - omp2_5-grad1 (Failed); 	221 - omp2_5-grad2 (Failed)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/605#issuecomment-277397753
https://github.com/psi4/psi4/pull/605#issuecomment-277397753:2930,Availability,Error,Errors,2930,rad1 (Failed); 	125 - dfmp2-grad2 (Failed); 	126 - dfmp2-grad3 (Failed); 	127 - dfmp2-grad4 (Failed); 	132 - dfomp2-grad1 (Failed); 	133 - dfomp2-grad2 (Failed); 	136 - dfomp3-grad1 (Failed); 	137 - dfomp3-grad2 (Failed); 	140 - dfomp2p5-grad1 (Failed); 	141 - dfomp2p5-grad2 (Failed); 	146 - dft-freq (Failed); 	147 - dft-grad (Failed); 	151 - dft1 (Failed); 	152 - dft1-alt (Failed); 	154 - dft3 (Failed); 	157 - extern1 (Failed); 	165 - fd-freq-energy-large (Failed); 	166 - fd-freq-gradient (Failed); 	167 - fd-freq-gradient-large (Failed); 	168 - fd-gradient (Failed); 	169 - freq-isotope (Failed); 	171 - fnocc2 (Failed); 	176 - gibbs (Failed); 	192 - mp2-1 (Failed); 	194 - mp2-grad1 (Failed); 	195 - mp2-grad2 (Failed); 	196 - mp2-module (Failed); 	197 - mp2_5-grad1 (Failed); 	198 - mp2_5-grad2 (Failed); 	199 - mp3-grad1 (Failed); 	200 - mp3-grad2 (Failed); 	206 - ocepa-grad1 (Failed); 	207 - ocepa-grad2 (Failed); 	216 - omp2-grad1 (Failed); 	217 - omp2-grad2 (Failed); 	220 - omp2_5-grad1 (Failed); 	221 - omp2_5-grad2 (Failed); 	227 - omp3-grad1 (Failed); 	228 - omp3-grad2 (Failed); 	229 - opt-lindep-change (Failed); 	230 - opt1 (Failed); 	232 - opt2 (Failed); 	233 - opt2-fd (Failed); 	234 - opt3 (Failed); 	235 - opt4 (Failed); 	236 - opt5 (Failed); 	237 - opt6 (Failed); 	238 - opt7 (Failed); 	239 - opt8 (Failed); 	240 - opt9 (Failed); 	241 - opt11 (Failed); 	242 - opt12 (Failed); 	243 - opt13 (Failed); 	244 - opt14 (Failed); 	245 - opt-irc-1 (Failed); 	246 - opt-irc-2 (Failed); 	247 - opt_freeze_coords (Failed); 	261 - pubchem1 (Failed); 	263 - pywrap-alias (Failed); 	264 - pywrap-all (Failed); 	268 - pywrap-checkrun-rhf (Failed); 	269 - pywrap-checkrun-rohf (Failed); 	270 - pywrap-checkrun-uhf (Failed); 	272 - pywrap-db2 (Failed); 	275 - pywrap-freq-g-sowreap (Failed); 	301 - scf6 (Failed); 	309 - tu3-h2o-opt (Failed); 	310 - tu4-h2o-freq (Failed); 	322 - cubeprop-esp (Failed); 	335 - dftd3-energy (Failed); 	336 - dftd3-grad (Failed); Errors while running CTest; ```,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/605#issuecomment-277397753
https://github.com/psi4/psi4/pull/605#issuecomment-277397753:1409,Energy Efficiency,energy,energy-large,1409,per (Failed); 	 17 - cc1 (Failed); 	 21 - cc13 (Failed); 	 22 - cc13a (Failed); 	 23 - cc14 (Failed); 	 30 - cc21 (Failed); 	 32 - cc23 (Failed); 	 33 - cc24 (Failed); 	 34 - cc25 (Failed); 	 35 - cc26 (Failed); 	 36 - cc27 (Failed); 	 39 - cc3 (Failed); 	 78 - cepa0-grad1 (Failed); 	 79 - cepa0-grad2 (Failed); 	 95 - dcft-grad1 (Failed); 	 96 - dcft-grad2 (Failed); 	 97 - dcft-grad3 (Failed); 	 98 - dcft-grad4 (Failed); 	103 - dcft5 (Failed); 	114 - dfccd-grad1 (Failed); 	117 - dfccsd-grad1 (Failed); 	122 - dfmp2-3 (Failed); 	124 - dfmp2-grad1 (Failed); 	125 - dfmp2-grad2 (Failed); 	126 - dfmp2-grad3 (Failed); 	127 - dfmp2-grad4 (Failed); 	132 - dfomp2-grad1 (Failed); 	133 - dfomp2-grad2 (Failed); 	136 - dfomp3-grad1 (Failed); 	137 - dfomp3-grad2 (Failed); 	140 - dfomp2p5-grad1 (Failed); 	141 - dfomp2p5-grad2 (Failed); 	146 - dft-freq (Failed); 	147 - dft-grad (Failed); 	151 - dft1 (Failed); 	152 - dft1-alt (Failed); 	154 - dft3 (Failed); 	157 - extern1 (Failed); 	165 - fd-freq-energy-large (Failed); 	166 - fd-freq-gradient (Failed); 	167 - fd-freq-gradient-large (Failed); 	168 - fd-gradient (Failed); 	169 - freq-isotope (Failed); 	171 - fnocc2 (Failed); 	176 - gibbs (Failed); 	192 - mp2-1 (Failed); 	194 - mp2-grad1 (Failed); 	195 - mp2-grad2 (Failed); 	196 - mp2-module (Failed); 	197 - mp2_5-grad1 (Failed); 	198 - mp2_5-grad2 (Failed); 	199 - mp3-grad1 (Failed); 	200 - mp3-grad2 (Failed); 	206 - ocepa-grad1 (Failed); 	207 - ocepa-grad2 (Failed); 	216 - omp2-grad1 (Failed); 	217 - omp2-grad2 (Failed); 	220 - omp2_5-grad1 (Failed); 	221 - omp2_5-grad2 (Failed); 	227 - omp3-grad1 (Failed); 	228 - omp3-grad2 (Failed); 	229 - opt-lindep-change (Failed); 	230 - opt1 (Failed); 	232 - opt2 (Failed); 	233 - opt2-fd (Failed); 	234 - opt3 (Failed); 	235 - opt4 (Failed); 	236 - opt5 (Failed); 	237 - opt6 (Failed); 	238 - opt7 (Failed); 	239 - opt8 (Failed); 	240 - opt9 (Failed); 	241 - opt11 (Failed); 	242 - opt12 (Failed); 	243 - opt13 (Failed); 	244 - opt14 (Failed); 	245 - ,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/605#issuecomment-277397753
https://github.com/psi4/psi4/pull/605#issuecomment-277397753:2885,Energy Efficiency,energy,energy,2885,rad1 (Failed); 	125 - dfmp2-grad2 (Failed); 	126 - dfmp2-grad3 (Failed); 	127 - dfmp2-grad4 (Failed); 	132 - dfomp2-grad1 (Failed); 	133 - dfomp2-grad2 (Failed); 	136 - dfomp3-grad1 (Failed); 	137 - dfomp3-grad2 (Failed); 	140 - dfomp2p5-grad1 (Failed); 	141 - dfomp2p5-grad2 (Failed); 	146 - dft-freq (Failed); 	147 - dft-grad (Failed); 	151 - dft1 (Failed); 	152 - dft1-alt (Failed); 	154 - dft3 (Failed); 	157 - extern1 (Failed); 	165 - fd-freq-energy-large (Failed); 	166 - fd-freq-gradient (Failed); 	167 - fd-freq-gradient-large (Failed); 	168 - fd-gradient (Failed); 	169 - freq-isotope (Failed); 	171 - fnocc2 (Failed); 	176 - gibbs (Failed); 	192 - mp2-1 (Failed); 	194 - mp2-grad1 (Failed); 	195 - mp2-grad2 (Failed); 	196 - mp2-module (Failed); 	197 - mp2_5-grad1 (Failed); 	198 - mp2_5-grad2 (Failed); 	199 - mp3-grad1 (Failed); 	200 - mp3-grad2 (Failed); 	206 - ocepa-grad1 (Failed); 	207 - ocepa-grad2 (Failed); 	216 - omp2-grad1 (Failed); 	217 - omp2-grad2 (Failed); 	220 - omp2_5-grad1 (Failed); 	221 - omp2_5-grad2 (Failed); 	227 - omp3-grad1 (Failed); 	228 - omp3-grad2 (Failed); 	229 - opt-lindep-change (Failed); 	230 - opt1 (Failed); 	232 - opt2 (Failed); 	233 - opt2-fd (Failed); 	234 - opt3 (Failed); 	235 - opt4 (Failed); 	236 - opt5 (Failed); 	237 - opt6 (Failed); 	238 - opt7 (Failed); 	239 - opt8 (Failed); 	240 - opt9 (Failed); 	241 - opt11 (Failed); 	242 - opt12 (Failed); 	243 - opt13 (Failed); 	244 - opt14 (Failed); 	245 - opt-irc-1 (Failed); 	246 - opt-irc-2 (Failed); 	247 - opt_freeze_coords (Failed); 	261 - pubchem1 (Failed); 	263 - pywrap-alias (Failed); 	264 - pywrap-all (Failed); 	268 - pywrap-checkrun-rhf (Failed); 	269 - pywrap-checkrun-rohf (Failed); 	270 - pywrap-checkrun-uhf (Failed); 	272 - pywrap-db2 (Failed); 	275 - pywrap-freq-g-sowreap (Failed); 	301 - scf6 (Failed); 	309 - tu3-h2o-opt (Failed); 	310 - tu4-h2o-freq (Failed); 	322 - cubeprop-esp (Failed); 	335 - dftd3-energy (Failed); 	336 - dftd3-grad (Failed); Errors while running CTest; ```,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/605#issuecomment-277397753
https://github.com/psi4/psi4/pull/605#issuecomment-277397753:411,Integrability,wrap,wrapper,411, ```; The following tests FAILED:; 	 12 - cbs-xtpl-freq (Failed); 	 13 - cbs-xtpl-gradient (Failed); 	 14 - cbs-xtpl-opt (Failed); 	 16 - cbs-xtpl-wrapper (Failed); 	 17 - cc1 (Failed); 	 21 - cc13 (Failed); 	 22 - cc13a (Failed); 	 23 - cc14 (Failed); 	 30 - cc21 (Failed); 	 32 - cc23 (Failed); 	 33 - cc24 (Failed); 	 34 - cc25 (Failed); 	 35 - cc26 (Failed); 	 36 - cc27 (Failed); 	 39 - cc3 (Failed); 	 78 - cepa0-grad1 (Failed); 	 79 - cepa0-grad2 (Failed); 	 95 - dcft-grad1 (Failed); 	 96 - dcft-grad2 (Failed); 	 97 - dcft-grad3 (Failed); 	 98 - dcft-grad4 (Failed); 	103 - dcft5 (Failed); 	114 - dfccd-grad1 (Failed); 	117 - dfccsd-grad1 (Failed); 	122 - dfmp2-3 (Failed); 	124 - dfmp2-grad1 (Failed); 	125 - dfmp2-grad2 (Failed); 	126 - dfmp2-grad3 (Failed); 	127 - dfmp2-grad4 (Failed); 	132 - dfomp2-grad1 (Failed); 	133 - dfomp2-grad2 (Failed); 	136 - dfomp3-grad1 (Failed); 	137 - dfomp3-grad2 (Failed); 	140 - dfomp2p5-grad1 (Failed); 	141 - dfomp2p5-grad2 (Failed); 	146 - dft-freq (Failed); 	147 - dft-grad (Failed); 	151 - dft1 (Failed); 	152 - dft1-alt (Failed); 	154 - dft3 (Failed); 	157 - extern1 (Failed); 	165 - fd-freq-energy-large (Failed); 	166 - fd-freq-gradient (Failed); 	167 - fd-freq-gradient-large (Failed); 	168 - fd-gradient (Failed); 	169 - freq-isotope (Failed); 	171 - fnocc2 (Failed); 	176 - gibbs (Failed); 	192 - mp2-1 (Failed); 	194 - mp2-grad1 (Failed); 	195 - mp2-grad2 (Failed); 	196 - mp2-module (Failed); 	197 - mp2_5-grad1 (Failed); 	198 - mp2_5-grad2 (Failed); 	199 - mp3-grad1 (Failed); 	200 - mp3-grad2 (Failed); 	206 - ocepa-grad1 (Failed); 	207 - ocepa-grad2 (Failed); 	216 - omp2-grad1 (Failed); 	217 - omp2-grad2 (Failed); 	220 - omp2_5-grad1 (Failed); 	221 - omp2_5-grad2 (Failed),MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/605#issuecomment-277397753
https://github.com/psi4/psi4/pull/605#issuecomment-277397753:38,Testability,test,tests,38,"For the record, the following are the tests that are terminated prematurely (with error msg) when ERD globally activated. If anyone gets the `WARNING: string truncated` with gdma, your compile dir path is too long. I think I can fix it, but that's not for this PR. ```; The following tests FAILED:; 	 12 - cbs-xtpl-freq (Failed); 	 13 - cbs-xtpl-gradient (Failed); 	 14 - cbs-xtpl-opt (Failed); 	 16 - cbs-xtpl-wrapper (Failed); 	 17 - cc1 (Failed); 	 21 - cc13 (Failed); 	 22 - cc13a (Failed); 	 23 - cc14 (Failed); 	 30 - cc21 (Failed); 	 32 - cc23 (Failed); 	 33 - cc24 (Failed); 	 34 - cc25 (Failed); 	 35 - cc26 (Failed); 	 36 - cc27 (Failed); 	 39 - cc3 (Failed); 	 78 - cepa0-grad1 (Failed); 	 79 - cepa0-grad2 (Failed); 	 95 - dcft-grad1 (Failed); 	 96 - dcft-grad2 (Failed); 	 97 - dcft-grad3 (Failed); 	 98 - dcft-grad4 (Failed); 	103 - dcft5 (Failed); 	114 - dfccd-grad1 (Failed); 	117 - dfccsd-grad1 (Failed); 	122 - dfmp2-3 (Failed); 	124 - dfmp2-grad1 (Failed); 	125 - dfmp2-grad2 (Failed); 	126 - dfmp2-grad3 (Failed); 	127 - dfmp2-grad4 (Failed); 	132 - dfomp2-grad1 (Failed); 	133 - dfomp2-grad2 (Failed); 	136 - dfomp3-grad1 (Failed); 	137 - dfomp3-grad2 (Failed); 	140 - dfomp2p5-grad1 (Failed); 	141 - dfomp2p5-grad2 (Failed); 	146 - dft-freq (Failed); 	147 - dft-grad (Failed); 	151 - dft1 (Failed); 	152 - dft1-alt (Failed); 	154 - dft3 (Failed); 	157 - extern1 (Failed); 	165 - fd-freq-energy-large (Failed); 	166 - fd-freq-gradient (Failed); 	167 - fd-freq-gradient-large (Failed); 	168 - fd-gradient (Failed); 	169 - freq-isotope (Failed); 	171 - fnocc2 (Failed); 	176 - gibbs (Failed); 	192 - mp2-1 (Failed); 	194 - mp2-grad1 (Failed); 	195 - mp2-grad2 (Failed); 	196 - mp2-module (Failed); 	197 - mp2_5-grad1 (Failed); 	198 - mp2_5-grad2 (Failed); 	199 - mp3-grad1 (Failed); 	200 - mp3-grad2 (Failed); 	206 - ocepa-grad1 (Failed); 	207 - ocepa-grad2 (Failed); 	216 - omp2-grad1 (Failed); 	217 - omp2-grad2 (Failed); 	220 - omp2_5-grad1 (Failed); 	221 - omp2_5-grad2 (Failed)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/605#issuecomment-277397753
https://github.com/psi4/psi4/pull/605#issuecomment-277397753:284,Testability,test,tests,284, ```; The following tests FAILED:; 	 12 - cbs-xtpl-freq (Failed); 	 13 - cbs-xtpl-gradient (Failed); 	 14 - cbs-xtpl-opt (Failed); 	 16 - cbs-xtpl-wrapper (Failed); 	 17 - cc1 (Failed); 	 21 - cc13 (Failed); 	 22 - cc13a (Failed); 	 23 - cc14 (Failed); 	 30 - cc21 (Failed); 	 32 - cc23 (Failed); 	 33 - cc24 (Failed); 	 34 - cc25 (Failed); 	 35 - cc26 (Failed); 	 36 - cc27 (Failed); 	 39 - cc3 (Failed); 	 78 - cepa0-grad1 (Failed); 	 79 - cepa0-grad2 (Failed); 	 95 - dcft-grad1 (Failed); 	 96 - dcft-grad2 (Failed); 	 97 - dcft-grad3 (Failed); 	 98 - dcft-grad4 (Failed); 	103 - dcft5 (Failed); 	114 - dfccd-grad1 (Failed); 	117 - dfccsd-grad1 (Failed); 	122 - dfmp2-3 (Failed); 	124 - dfmp2-grad1 (Failed); 	125 - dfmp2-grad2 (Failed); 	126 - dfmp2-grad3 (Failed); 	127 - dfmp2-grad4 (Failed); 	132 - dfomp2-grad1 (Failed); 	133 - dfomp2-grad2 (Failed); 	136 - dfomp3-grad1 (Failed); 	137 - dfomp3-grad2 (Failed); 	140 - dfomp2p5-grad1 (Failed); 	141 - dfomp2p5-grad2 (Failed); 	146 - dft-freq (Failed); 	147 - dft-grad (Failed); 	151 - dft1 (Failed); 	152 - dft1-alt (Failed); 	154 - dft3 (Failed); 	157 - extern1 (Failed); 	165 - fd-freq-energy-large (Failed); 	166 - fd-freq-gradient (Failed); 	167 - fd-freq-gradient-large (Failed); 	168 - fd-gradient (Failed); 	169 - freq-isotope (Failed); 	171 - fnocc2 (Failed); 	176 - gibbs (Failed); 	192 - mp2-1 (Failed); 	194 - mp2-grad1 (Failed); 	195 - mp2-grad2 (Failed); 	196 - mp2-module (Failed); 	197 - mp2_5-grad1 (Failed); 	198 - mp2_5-grad2 (Failed); 	199 - mp3-grad1 (Failed); 	200 - mp3-grad2 (Failed); 	206 - ocepa-grad1 (Failed); 	207 - ocepa-grad2 (Failed); 	216 - omp2-grad1 (Failed); 	217 - omp2-grad2 (Failed); 	220 - omp2_5-grad1 (Failed); 	221 - omp2_5-grad2 (Failed),MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/605#issuecomment-277397753
https://github.com/psi4/psi4/pull/605#issuecomment-277415985:215,Availability,error,error,215,"Great work, @bennybp and @loriab. I didn't realize just how half assed my attempt to interface ERD was until reviewing this PR (I lost steam a little when I realized we weren't getting any speedup over libint). The error checking to catch bad use cases is great.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/605#issuecomment-277415985
https://github.com/psi4/psi4/pull/605#issuecomment-277415985:85,Integrability,interface,interface,85,"Great work, @bennybp and @loriab. I didn't realize just how half assed my attempt to interface ERD was until reviewing this PR (I lost steam a little when I realized we weren't getting any speedup over libint). The error checking to catch bad use cases is great.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/605#issuecomment-277415985
https://github.com/psi4/psi4/issues/606#issuecomment-277491791:1293,Energy Efficiency,energy,energy,1293,"The crash is also reproducible with a slightly smaller input; ```; molecule {; 0 1; symmetry c1; Mn -0.0128264866 -0.0002779912 -0.1091894544; O -1.1037647823 1.0246639195 -1.2821459116; O -0.4319309790 -1.5910632792 -1.0423314985; N 0.7243918073 1.6205280457 0.7709992473; N 1.3008767173 -0.9287768925 1.0635839133; C -1.2886186814 2.2834208702 -1.2181338272; C -0.7050865946 3.1821062059 -0.3604271375; C 0.3534920334 2.8195308082 0.5207059889; C 0.2177419816 -2.6945497951 -0.9662726987; C 1.2181378357 -3.0250490115 -0.0961995911; C 1.7180430400 -2.1229929449 0.8899899444; C 1.9393113446 1.3525171542 1.5367699106; C 1.8333722479 -0.0604962603 2.1055467704; H 0.8908035853 3.6241374839 1.0039698993; H 2.5024254412 -2.4854165868 1.5399007635; H 2.7858100041 1.4098930461 0.8661311665; H 1.1490336627 -0.0652673733 2.9502674019; H 2.0638511115 2.0769335299 2.3353274192; H 2.7993768711 -0.4085469833 2.4534782102; H -1.9892347032 2.6686747336 -1.9454961675; H -0.0986239324 -3.4441353556 -1.6764363233; Cl 1.8821942342 0.3098852687 -1.6599082362; O -1.1395010178 -0.1703680057 0.9263551082; H -0.9312248148 4.2251864392 -0.4696082573; H 1.6695378989 -3.9953914470 -0.1633815245; }. # Run SCF, initialize in smaller basis; set basis 3-21G; set scf_type pk; set soscf true; scf_e, scf_wfn = energy('scf', return_wfn=True). # Get CISD active space guess. 69 occupied orbitals, out of which 32; # are core electrons. Leaves No=37 orbitals, excitable into Nv=110; # virtuals. Let's take only the first 40 virtuals; set restricted_docc [32]; set restricted_uocc [70]; set qc_module detci; set nat_orbs true; ci_e, ci_wfn = energy('cisd', ref_wfn=scf_wfn, return_wfn=True); ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/606#issuecomment-277491791
https://github.com/psi4/psi4/issues/606#issuecomment-277491791:1621,Energy Efficiency,energy,energy,1621,"The crash is also reproducible with a slightly smaller input; ```; molecule {; 0 1; symmetry c1; Mn -0.0128264866 -0.0002779912 -0.1091894544; O -1.1037647823 1.0246639195 -1.2821459116; O -0.4319309790 -1.5910632792 -1.0423314985; N 0.7243918073 1.6205280457 0.7709992473; N 1.3008767173 -0.9287768925 1.0635839133; C -1.2886186814 2.2834208702 -1.2181338272; C -0.7050865946 3.1821062059 -0.3604271375; C 0.3534920334 2.8195308082 0.5207059889; C 0.2177419816 -2.6945497951 -0.9662726987; C 1.2181378357 -3.0250490115 -0.0961995911; C 1.7180430400 -2.1229929449 0.8899899444; C 1.9393113446 1.3525171542 1.5367699106; C 1.8333722479 -0.0604962603 2.1055467704; H 0.8908035853 3.6241374839 1.0039698993; H 2.5024254412 -2.4854165868 1.5399007635; H 2.7858100041 1.4098930461 0.8661311665; H 1.1490336627 -0.0652673733 2.9502674019; H 2.0638511115 2.0769335299 2.3353274192; H 2.7993768711 -0.4085469833 2.4534782102; H -1.9892347032 2.6686747336 -1.9454961675; H -0.0986239324 -3.4441353556 -1.6764363233; Cl 1.8821942342 0.3098852687 -1.6599082362; O -1.1395010178 -0.1703680057 0.9263551082; H -0.9312248148 4.2251864392 -0.4696082573; H 1.6695378989 -3.9953914470 -0.1633815245; }. # Run SCF, initialize in smaller basis; set basis 3-21G; set scf_type pk; set soscf true; scf_e, scf_wfn = energy('scf', return_wfn=True). # Get CISD active space guess. 69 occupied orbitals, out of which 32; # are core electrons. Leaves No=37 orbitals, excitable into Nv=110; # virtuals. Let's take only the first 40 virtuals; set restricted_docc [32]; set restricted_uocc [70]; set qc_module detci; set nat_orbs true; ci_e, ci_wfn = energy('cisd', ref_wfn=scf_wfn, return_wfn=True); ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/606#issuecomment-277491791
https://github.com/psi4/psi4/pull/607#issuecomment-277851446:123,Performance,bottleneck,bottleneck,123,"I opted to use std::string and ostringstream instead of just increasing the size of the static arrays, because this is not bottleneck code. I'm not sure why they were used in the original code, but that seemed to be over 20 years old, i.e. originally C code?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/607#issuecomment-277851446
https://github.com/psi4/psi4/pull/607#issuecomment-277871699:25,Availability,error,error,25,"I looked at the original error and thought that the debugger was throwing on the wrong line, so this is a really great catch!. Yes, most of the CI code was overhauled last year; however, parts that deal with determinants have not been touched in awhile. I need to pull it down and double check, but I think this all looks great. Thanks for the contribution.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/607#issuecomment-277871699
https://github.com/psi4/psi4/pull/607#issuecomment-277871699:272,Availability,down,down,272,"I looked at the original error and thought that the debugger was throwing on the wrong line, so this is a really great catch!. Yes, most of the CI code was overhauled last year; however, parts that deal with determinants have not been touched in awhile. I need to pull it down and double check, but I think this all looks great. Thanks for the contribution.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/607#issuecomment-277871699
https://github.com/psi4/psi4/issues/608#issuecomment-278019226:304,Deployability,release,release,304,"Good question. The todo list is [here](https://github.com/psi4/psi4/projects/3). Except for a couple things (basis set and dkh changes), it's mainly a task of finishing up the interfacing of other software that works with Psi4, rather than Psi4 itself. I'd venture a RC w/i 3 weeks. What's your software release?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/608#issuecomment-278019226
https://github.com/psi4/psi4/issues/608#issuecomment-278480471:69,Deployability,release,release,69,"Thanks @loriab , I'll make a note to schedule that against our March release. We're using psi4 as part of a force-field parameteristion tool (see https://github.com/Acellera/htmd ). It's Python 3 only and distributed via conda so we have to do some nastry tricks to ship the py2 psi4.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/608#issuecomment-278480471
https://github.com/psi4/psi4/issues/608#issuecomment-278480471:37,Energy Efficiency,schedul,schedule,37,"Thanks @loriab , I'll make a note to schedule that against our March release. We're using psi4 as part of a force-field parameteristion tool (see https://github.com/Acellera/htmd ). It's Python 3 only and distributed via conda so we have to do some nastry tricks to ship the py2 psi4.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/608#issuecomment-278480471
https://github.com/psi4/psi4/issues/608#issuecomment-278482121:205,Deployability,release,release,205,"Sounds good. You've noticed that there _is_ as py3 conda package for Mac and Linux (https://github.com/psi4/psi4/issues/466#issuecomment-272589229)? It's stable, just not on the main channel until the 1.1 release.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/608#issuecomment-278482121
https://github.com/psi4/psi4/issues/612#issuecomment-278548121:79,Energy Efficiency,energy,energy,79,"I *think* this'll do it, but my memory can be very bad.. ```; scf_e, scf_wfn = energy('bp86', guess_wfn=scf_wfn, return_wfn=True); ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/612#issuecomment-278548121
https://github.com/psi4/psi4/issues/612#issuecomment-278680499:309,Energy Efficiency,energy,energy,309,"There are a few issues here, first you set `soscf true` which will fail for the `bp86` computation so you would need to switch it off. In addition, `basis_guess` will override `guess read` so your input file should look like:. ```; set basis_guess false; set soscf false; set scf guess read; scf_e, scf_wfn = energy('bp86', return_wfn=True); ```. Both SCF taking guess Wavefunctions and the combination of read options all relate to issue #483. Without some discussion there on all of the possible use cases and how these options should interact with each other I probably will not make fundamental changes to how SCF guessing works.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/612#issuecomment-278680499
https://github.com/psi4/psi4/issues/612#issuecomment-278718646:45,Availability,error,error,45,Oh that's right. But shouldn't psi4 throw an error if both basis_guess and guess read have been set?,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/612#issuecomment-278718646
https://github.com/psi4/psi4/pull/615#issuecomment-278961359:114,Availability,error,error,114,Looks like the MKL header is always being included:. ```; /psi4/psi4/src/psi4/libparallel/process.cc:36:17: fatal error: mkl.h: No such file or directory; #include <mkl.h>; ```,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/615#issuecomment-278961359
https://github.com/psi4/psi4/pull/615#issuecomment-278965098:120,Availability,fault,fault,120,Makes sense since it's finding the conda mkl_rt. Will look into where the `mkl.h` ever actually came from. The distelli fault is hdf5 – altered reasoning too late at night. Looking at that now.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/615#issuecomment-278965098
https://github.com/psi4/psi4/pull/615#issuecomment-279088836:14,Deployability,patch,patches,14,"If the latest patches work, ConfigMath should never again find a conda MKL (which probably means I should revert #611) because it can't find a `mkl.h` at the same MKL_ROOT. For all of us with intel compilers and mkl, this doesn't change a thing because ConfigMath was always finding our intel installations, never conda (the final lib may have shown up as linked to conda, but that's a `rpath`, not a ConfigMath, issue). But in cases w/o an intel installation and w/ a conda installation, ConfigMath should no longer settle upon conda mkl_rt.so because there's no associated `mkl.h`. Instead, should give up on MKL and proceed to OpenBLAS, ..., SYSTEM_NATIVE.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/615#issuecomment-279088836
https://github.com/psi4/psi4/pull/615#issuecomment-279088836:293,Deployability,install,installations,293,"If the latest patches work, ConfigMath should never again find a conda MKL (which probably means I should revert #611) because it can't find a `mkl.h` at the same MKL_ROOT. For all of us with intel compilers and mkl, this doesn't change a thing because ConfigMath was always finding our intel installations, never conda (the final lib may have shown up as linked to conda, but that's a `rpath`, not a ConfigMath, issue). But in cases w/o an intel installation and w/ a conda installation, ConfigMath should no longer settle upon conda mkl_rt.so because there's no associated `mkl.h`. Instead, should give up on MKL and proceed to OpenBLAS, ..., SYSTEM_NATIVE.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/615#issuecomment-279088836
https://github.com/psi4/psi4/pull/615#issuecomment-279088836:447,Deployability,install,installation,447,"If the latest patches work, ConfigMath should never again find a conda MKL (which probably means I should revert #611) because it can't find a `mkl.h` at the same MKL_ROOT. For all of us with intel compilers and mkl, this doesn't change a thing because ConfigMath was always finding our intel installations, never conda (the final lib may have shown up as linked to conda, but that's a `rpath`, not a ConfigMath, issue). But in cases w/o an intel installation and w/ a conda installation, ConfigMath should no longer settle upon conda mkl_rt.so because there's no associated `mkl.h`. Instead, should give up on MKL and proceed to OpenBLAS, ..., SYSTEM_NATIVE.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/615#issuecomment-279088836
https://github.com/psi4/psi4/pull/615#issuecomment-279088836:475,Deployability,install,installation,475,"If the latest patches work, ConfigMath should never again find a conda MKL (which probably means I should revert #611) because it can't find a `mkl.h` at the same MKL_ROOT. For all of us with intel compilers and mkl, this doesn't change a thing because ConfigMath was always finding our intel installations, never conda (the final lib may have shown up as linked to conda, but that's a `rpath`, not a ConfigMath, issue). But in cases w/o an intel installation and w/ a conda installation, ConfigMath should no longer settle upon conda mkl_rt.so because there's no associated `mkl.h`. Instead, should give up on MKL and proceed to OpenBLAS, ..., SYSTEM_NATIVE.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/615#issuecomment-279088836
https://github.com/psi4/psi4/pull/615#issuecomment-279088836:28,Modifiability,Config,ConfigMath,28,"If the latest patches work, ConfigMath should never again find a conda MKL (which probably means I should revert #611) because it can't find a `mkl.h` at the same MKL_ROOT. For all of us with intel compilers and mkl, this doesn't change a thing because ConfigMath was always finding our intel installations, never conda (the final lib may have shown up as linked to conda, but that's a `rpath`, not a ConfigMath, issue). But in cases w/o an intel installation and w/ a conda installation, ConfigMath should no longer settle upon conda mkl_rt.so because there's no associated `mkl.h`. Instead, should give up on MKL and proceed to OpenBLAS, ..., SYSTEM_NATIVE.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/615#issuecomment-279088836
https://github.com/psi4/psi4/pull/615#issuecomment-279088836:253,Modifiability,Config,ConfigMath,253,"If the latest patches work, ConfigMath should never again find a conda MKL (which probably means I should revert #611) because it can't find a `mkl.h` at the same MKL_ROOT. For all of us with intel compilers and mkl, this doesn't change a thing because ConfigMath was always finding our intel installations, never conda (the final lib may have shown up as linked to conda, but that's a `rpath`, not a ConfigMath, issue). But in cases w/o an intel installation and w/ a conda installation, ConfigMath should no longer settle upon conda mkl_rt.so because there's no associated `mkl.h`. Instead, should give up on MKL and proceed to OpenBLAS, ..., SYSTEM_NATIVE.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/615#issuecomment-279088836
https://github.com/psi4/psi4/pull/615#issuecomment-279088836:401,Modifiability,Config,ConfigMath,401,"If the latest patches work, ConfigMath should never again find a conda MKL (which probably means I should revert #611) because it can't find a `mkl.h` at the same MKL_ROOT. For all of us with intel compilers and mkl, this doesn't change a thing because ConfigMath was always finding our intel installations, never conda (the final lib may have shown up as linked to conda, but that's a `rpath`, not a ConfigMath, issue). But in cases w/o an intel installation and w/ a conda installation, ConfigMath should no longer settle upon conda mkl_rt.so because there's no associated `mkl.h`. Instead, should give up on MKL and proceed to OpenBLAS, ..., SYSTEM_NATIVE.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/615#issuecomment-279088836
https://github.com/psi4/psi4/pull/615#issuecomment-279088836:489,Modifiability,Config,ConfigMath,489,"If the latest patches work, ConfigMath should never again find a conda MKL (which probably means I should revert #611) because it can't find a `mkl.h` at the same MKL_ROOT. For all of us with intel compilers and mkl, this doesn't change a thing because ConfigMath was always finding our intel installations, never conda (the final lib may have shown up as linked to conda, but that's a `rpath`, not a ConfigMath, issue). But in cases w/o an intel installation and w/ a conda installation, ConfigMath should no longer settle upon conda mkl_rt.so because there's no associated `mkl.h`. Instead, should give up on MKL and proceed to OpenBLAS, ..., SYSTEM_NATIVE.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/615#issuecomment-279088836
https://github.com/psi4/psi4/pull/615#issuecomment-279194347:126,Integrability,depend,depends,126,"This PR solves one clear lack-of-threading problem with MKL. But we've had hints of a more elusive one where threading-or-not depends on MKL library load order. Be on the looking for this. To check both threads issues, I've checked in a timings script (originally Daniel's) [here](https://raw.githubusercontent.com/loriab/psi4/b381e6c0865f3e47986044a409e4c7e7b1f21757/tests/python/threading/input.py) to compare p4 vs np threading and n1 vs nmax threading.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/615#issuecomment-279194347
https://github.com/psi4/psi4/pull/615#issuecomment-279194347:149,Performance,load,load,149,"This PR solves one clear lack-of-threading problem with MKL. But we've had hints of a more elusive one where threading-or-not depends on MKL library load order. Be on the looking for this. To check both threads issues, I've checked in a timings script (originally Daniel's) [here](https://raw.githubusercontent.com/loriab/psi4/b381e6c0865f3e47986044a409e4c7e7b1f21757/tests/python/threading/input.py) to compare p4 vs np threading and n1 vs nmax threading.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/615#issuecomment-279194347
https://github.com/psi4/psi4/pull/615#issuecomment-279194347:368,Testability,test,tests,368,"This PR solves one clear lack-of-threading problem with MKL. But we've had hints of a more elusive one where threading-or-not depends on MKL library load order. Be on the looking for this. To check both threads issues, I've checked in a timings script (originally Daniel's) [here](https://raw.githubusercontent.com/loriab/psi4/b381e6c0865f3e47986044a409e4c7e7b1f21757/tests/python/threading/input.py) to compare p4 vs np threading and n1 vs nmax threading.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/615#issuecomment-279194347
https://github.com/psi4/psi4/pull/615#issuecomment-279194347:19,Usability,clear,clear,19,"This PR solves one clear lack-of-threading problem with MKL. But we've had hints of a more elusive one where threading-or-not depends on MKL library load order. Be on the looking for this. To check both threads issues, I've checked in a timings script (originally Daniel's) [here](https://raw.githubusercontent.com/loriab/psi4/b381e6c0865f3e47986044a409e4c7e7b1f21757/tests/python/threading/input.py) to compare p4 vs np threading and n1 vs nmax threading.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/615#issuecomment-279194347
https://github.com/psi4/psi4/pull/615#issuecomment-279339056:64,Safety,avoid,avoid,64,@loriab if I understood correctly the EXPLICIT_LIB change is to avoid having explicit libs baked into the math detection and I agree that it is good to separate these. We have also done this in other codes.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/615#issuecomment-279339056
https://github.com/psi4/psi4/pull/615#issuecomment-279339056:111,Safety,detect,detection,111,@loriab if I understood correctly the EXPLICIT_LIB change is to avoid having explicit libs baked into the math detection and I agree that it is good to separate these. We have also done this in other codes.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/615#issuecomment-279339056
https://github.com/psi4/psi4/pull/615#issuecomment-279508615:106,Modifiability,variab,variables,106,"@rbast, the EXPLICIT_LIB and EXTERNAL_LIB removal is because nothing outside cmake/math knows about those variables, so they're orphaned. LAPACK_LIBRARIES and LAPACK_INCLUDE_DIRS are being used in (I think, never used them myself) the EXPLICIT_LIB role.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/615#issuecomment-279508615
https://github.com/psi4/psi4/issues/621#issuecomment-280013153:46,Deployability,patch,patch,46,@cdsgroup Can you double check that the above patch would be correct? If so we can go ahead and make this change.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/621#issuecomment-280013153
https://github.com/psi4/psi4/pull/625#issuecomment-281017579:11,Availability,error,error,11,"I get this error when running `cmake -H. -Bobjdir_simint -DCMAKE_BUILD_TYPE=Debug -DENABLE_simint=ON` on my laptop with CMake 3.2.2; ```; CMake Error at /usr/share/cmake-3.2/Modules/ExternalProject.cmake:2027 (get_property):; INTERFACE_LIBRARY targets may only have whitelisted properties. The; property ""_EP_IS_EXTERNAL_PROJECT"" is not allowed.; Call Stack (most recent call first):; /usr/share/cmake-3.2/Modules/ExternalProject.cmake:2324 (_ep_add_configure_command); CMakeLists.txt:154 (ExternalProject_Add); ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/625#issuecomment-281017579
https://github.com/psi4/psi4/pull/625#issuecomment-281017579:144,Availability,Error,Error,144,"I get this error when running `cmake -H. -Bobjdir_simint -DCMAKE_BUILD_TYPE=Debug -DENABLE_simint=ON` on my laptop with CMake 3.2.2; ```; CMake Error at /usr/share/cmake-3.2/Modules/ExternalProject.cmake:2027 (get_property):; INTERFACE_LIBRARY targets may only have whitelisted properties. The; property ""_EP_IS_EXTERNAL_PROJECT"" is not allowed.; Call Stack (most recent call first):; /usr/share/cmake-3.2/Modules/ExternalProject.cmake:2324 (_ep_add_configure_command); CMakeLists.txt:154 (ExternalProject_Add); ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/625#issuecomment-281017579
https://github.com/psi4/psi4/pull/625#issuecomment-281106134:27,Availability,error,error,27,"I can confirm @robertodr's error. But it does away with CMake 3.3 (even though I can't see what the change was from the [release notes](https://cmake.org/cmake/help/v3.7/release/3.3.html)). I've sort of been wanting 3.3 because that detects the HDF5 version number, and I, at least, am susceptible to mixed 1.8.16 and 1.8.17 compilations, which the build system can now avoid. So shall we bump again?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/625#issuecomment-281106134
https://github.com/psi4/psi4/pull/625#issuecomment-281106134:121,Deployability,release,release,121,"I can confirm @robertodr's error. But it does away with CMake 3.3 (even though I can't see what the change was from the [release notes](https://cmake.org/cmake/help/v3.7/release/3.3.html)). I've sort of been wanting 3.3 because that detects the HDF5 version number, and I, at least, am susceptible to mixed 1.8.16 and 1.8.17 compilations, which the build system can now avoid. So shall we bump again?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/625#issuecomment-281106134
https://github.com/psi4/psi4/pull/625#issuecomment-281106134:170,Deployability,release,release,170,"I can confirm @robertodr's error. But it does away with CMake 3.3 (even though I can't see what the change was from the [release notes](https://cmake.org/cmake/help/v3.7/release/3.3.html)). I've sort of been wanting 3.3 because that detects the HDF5 version number, and I, at least, am susceptible to mixed 1.8.16 and 1.8.17 compilations, which the build system can now avoid. So shall we bump again?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/625#issuecomment-281106134
https://github.com/psi4/psi4/pull/625#issuecomment-281106134:233,Safety,detect,detects,233,"I can confirm @robertodr's error. But it does away with CMake 3.3 (even though I can't see what the change was from the [release notes](https://cmake.org/cmake/help/v3.7/release/3.3.html)). I've sort of been wanting 3.3 because that detects the HDF5 version number, and I, at least, am susceptible to mixed 1.8.16 and 1.8.17 compilations, which the build system can now avoid. So shall we bump again?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/625#issuecomment-281106134
https://github.com/psi4/psi4/pull/625#issuecomment-281106134:370,Safety,avoid,avoid,370,"I can confirm @robertodr's error. But it does away with CMake 3.3 (even though I can't see what the change was from the [release notes](https://cmake.org/cmake/help/v3.7/release/3.3.html)). I've sort of been wanting 3.3 because that detects the HDF5 version number, and I, at least, am susceptible to mixed 1.8.16 and 1.8.17 compilations, which the build system can now avoid. So shall we bump again?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/625#issuecomment-281106134
https://github.com/psi4/psi4/pull/625#issuecomment-281110156:133,Deployability,release,release,133,"If it solves this **and** library detection problems, then let's go for it. I notice that in [3.6](https://cmake.org/cmake/help/v3.7/release/3.6.html) they added support for compiler features also for Intel compilers, but maybe that's not as interesting.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/625#issuecomment-281110156
https://github.com/psi4/psi4/pull/625#issuecomment-281110156:34,Safety,detect,detection,34,"If it solves this **and** library detection problems, then let's go for it. I notice that in [3.6](https://cmake.org/cmake/help/v3.7/release/3.6.html) they added support for compiler features also for Intel compilers, but maybe that's not as interesting.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/625#issuecomment-281110156
https://github.com/psi4/psi4/pull/625#issuecomment-281112355:104,Safety,avoid,avoid,104,I consider that aspect of 3.6 very interesting. We wouldn't have to manually add `-std=c++11` and could avoid a repeated compiler warning about overwriting `-std=c++11` by ~`-std=gnuc++11` when cmake _is_ >=3.6 . But 3.6 is quite a leap just for our convenience.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/625#issuecomment-281112355
https://github.com/psi4/psi4/pull/625#issuecomment-281118096:230,Deployability,Configurat,Configuration,230,"The following should do the trick already, no?; ```; set(CMAKE_CXX_STANDARD 11); set(CMAKE_CXX_STANDARD_REQUIRED TRUE); set(CMAKE_CXX_EXTENSIONS FALSE); ```; You basically require C++11 _without_ GNU extensions from the compiler. Configuration should abort if the compiler doesn't have the relevant flag. These three lines would possibly eliminate the need for checking for compiler versions in [cmake_cxxstandard.cmake#L3-L11](https://github.com/psi4/psi4/blob/master/cmake/custom_cxxstandard.cmake#L3-L11). But, yes, I agree, is too large of a leap right now.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/625#issuecomment-281118096
https://github.com/psi4/psi4/pull/625#issuecomment-281118096:230,Modifiability,Config,Configuration,230,"The following should do the trick already, no?; ```; set(CMAKE_CXX_STANDARD 11); set(CMAKE_CXX_STANDARD_REQUIRED TRUE); set(CMAKE_CXX_EXTENSIONS FALSE); ```; You basically require C++11 _without_ GNU extensions from the compiler. Configuration should abort if the compiler doesn't have the relevant flag. These three lines would possibly eliminate the need for checking for compiler versions in [cmake_cxxstandard.cmake#L3-L11](https://github.com/psi4/psi4/blob/master/cmake/custom_cxxstandard.cmake#L3-L11). But, yes, I agree, is too large of a leap right now.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/625#issuecomment-281118096
https://github.com/psi4/psi4/pull/625#issuecomment-281118096:251,Safety,abort,abort,251,"The following should do the trick already, no?; ```; set(CMAKE_CXX_STANDARD 11); set(CMAKE_CXX_STANDARD_REQUIRED TRUE); set(CMAKE_CXX_EXTENSIONS FALSE); ```; You basically require C++11 _without_ GNU extensions from the compiler. Configuration should abort if the compiler doesn't have the relevant flag. These three lines would possibly eliminate the need for checking for compiler versions in [cmake_cxxstandard.cmake#L3-L11](https://github.com/psi4/psi4/blob/master/cmake/custom_cxxstandard.cmake#L3-L11). But, yes, I agree, is too large of a leap right now.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/625#issuecomment-281118096
https://github.com/psi4/psi4/pull/625#issuecomment-281120816:776,Modifiability,variab,variable,776,"The first two we've got the the inner `psi4-core` project (psi4 itself). The third I tried to get some opinions on (copied below for general interest). The compiler checks at least give a warning people understand better than C++ standards and do it before all the addons (which often don't require c++11) get built. _And_ for the crazy Intel/gnu situation, it's a nice place to check the underlying compiler version. So I'm all for solving the EXTENSIONS warnings and for revamping when we decide to require cmake 3.6. How do we feel about -std=c++11 vs. -std=gnu++11 via [CXX_EXTENSION](https://cmake.org/cmake/help/v3.4/prop_tgt/CXX_EXTENSIONS.html)?; I can fix the `icpc: command line warning #10121: overriding '-std=c++11' with '-std=gnu++11’` by (a) turning that cmake variable off (its default is on); (b) when omp is enabled, have our cmake add the gnu++ instead of the c++ flag; or (c) suppressing that icpc warning.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/625#issuecomment-281120816
https://github.com/psi4/psi4/pull/625#issuecomment-281120873:5,Testability,test,tested,5,"Just tested and the check on compiler version is still needed, since earlier compilers might not be feature-complete and CMake doesn't check for all features when setting the standard.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/625#issuecomment-281120873
https://github.com/psi4/psi4/pull/625#issuecomment-281386720:501,Usability,simpl,simplest,501,"No, the deal is that Psi4 adds `-std=c++11` to `CMAKE_CXX_FLAGS`, and everyone's happy with it. I haven't heard any petitions to make it `-std=gnu++11`. And we pass the CXX_STANDARD on to target `psi4-core`. Then with cmake 3.6 (which newly understands intel capabilities) + intel compilers, cmake takes that CXX_STANDARD + icpc and adds its flag so that `CMAKE_CXX_FLAGS` becomes `... -std=c++11 ... -std=gnu++11 ...` and then icpc throws a warning at every file that c++11 is being overwritten. The simplest thing, I think is to `CMAKE_CXX_EXTENSIONS=OFF` in the `psi4-core` ExternalProject list in main CMakeLists.txt.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/625#issuecomment-281386720
https://github.com/psi4/psi4/pull/625#issuecomment-281389274:579,Deployability,install,install,579,One thing to note about the c++ standard is that it is showing up on the command line twice. I'm almost certain that one is coming from pybind11 interface definitions (which might not be a good idea). . cd /home/ben/programming/psi4/build.reference/psi4-core-prefix/src/psi4-core-build/src/psi4/liboptions && /opt/intel2017/compilers_and_libraries_2017.1.132/linux/bin/intel64/icpc; -I/home/ben/programming/psi4/psi4.reference/psi4/include; -I/home/ben/programming/psi4/psi4.reference/psi4/src; -isystem /home/ben/programming/psi4/build.reference/stage/home/ben/programming/psi4/install.reference/include; -isystem /usr/include/python2.7 -xHost -qopenmp; -std=c++11 -O3 -DNDEBUG -fPIC -std=c++11; -o CMakeFiles/options.dir/print.cc.o; -c /home/ben/programming/psi4/psi4.reference/psi4/src/psi4/liboptions/print.cc,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/625#issuecomment-281389274
https://github.com/psi4/psi4/pull/625#issuecomment-281389274:145,Integrability,interface,interface,145,One thing to note about the c++ standard is that it is showing up on the command line twice. I'm almost certain that one is coming from pybind11 interface definitions (which might not be a good idea). . cd /home/ben/programming/psi4/build.reference/psi4-core-prefix/src/psi4-core-build/src/psi4/liboptions && /opt/intel2017/compilers_and_libraries_2017.1.132/linux/bin/intel64/icpc; -I/home/ben/programming/psi4/psi4.reference/psi4/include; -I/home/ben/programming/psi4/psi4.reference/psi4/src; -isystem /home/ben/programming/psi4/build.reference/stage/home/ben/programming/psi4/install.reference/include; -isystem /usr/include/python2.7 -xHost -qopenmp; -std=c++11 -O3 -DNDEBUG -fPIC -std=c++11; -o CMakeFiles/options.dir/print.cc.o; -c /home/ben/programming/psi4/psi4.reference/psi4/src/psi4/liboptions/print.cc,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/625#issuecomment-281389274
https://github.com/psi4/psi4/pull/625#issuecomment-281446113:58,Availability,error,error,58,"Turns out @robertodr's original `_EP_IS_EXTERNAL_PROJECT` error [was because](http://public.kitware.com/pipermail/cmake-developers/2015-April/025035.html) I moved all the external_* dependencies from `ExternalProject_Add(psi4-core ...) add_dependencies(psi4-core chemps2_external ...)` to `ExternalProject_Add(psi4-core DEPENDS chemps2_external ...)`, and CMake didn't learn to accept interface libs in that role until 3.3. So, I still rather want 3.3 because the DEPENDS looks tidier and the HDF5 version thing, but I can make 3.2 work again.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/625#issuecomment-281446113
https://github.com/psi4/psi4/pull/625#issuecomment-281446113:182,Integrability,depend,dependencies,182,"Turns out @robertodr's original `_EP_IS_EXTERNAL_PROJECT` error [was because](http://public.kitware.com/pipermail/cmake-developers/2015-April/025035.html) I moved all the external_* dependencies from `ExternalProject_Add(psi4-core ...) add_dependencies(psi4-core chemps2_external ...)` to `ExternalProject_Add(psi4-core DEPENDS chemps2_external ...)`, and CMake didn't learn to accept interface libs in that role until 3.3. So, I still rather want 3.3 because the DEPENDS looks tidier and the HDF5 version thing, but I can make 3.2 work again.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/625#issuecomment-281446113
https://github.com/psi4/psi4/pull/625#issuecomment-281446113:320,Integrability,DEPEND,DEPENDS,320,"Turns out @robertodr's original `_EP_IS_EXTERNAL_PROJECT` error [was because](http://public.kitware.com/pipermail/cmake-developers/2015-April/025035.html) I moved all the external_* dependencies from `ExternalProject_Add(psi4-core ...) add_dependencies(psi4-core chemps2_external ...)` to `ExternalProject_Add(psi4-core DEPENDS chemps2_external ...)`, and CMake didn't learn to accept interface libs in that role until 3.3. So, I still rather want 3.3 because the DEPENDS looks tidier and the HDF5 version thing, but I can make 3.2 work again.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/625#issuecomment-281446113
https://github.com/psi4/psi4/pull/625#issuecomment-281446113:385,Integrability,interface,interface,385,"Turns out @robertodr's original `_EP_IS_EXTERNAL_PROJECT` error [was because](http://public.kitware.com/pipermail/cmake-developers/2015-April/025035.html) I moved all the external_* dependencies from `ExternalProject_Add(psi4-core ...) add_dependencies(psi4-core chemps2_external ...)` to `ExternalProject_Add(psi4-core DEPENDS chemps2_external ...)`, and CMake didn't learn to accept interface libs in that role until 3.3. So, I still rather want 3.3 because the DEPENDS looks tidier and the HDF5 version thing, but I can make 3.2 work again.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/625#issuecomment-281446113
https://github.com/psi4/psi4/pull/625#issuecomment-281446113:464,Integrability,DEPEND,DEPENDS,464,"Turns out @robertodr's original `_EP_IS_EXTERNAL_PROJECT` error [was because](http://public.kitware.com/pipermail/cmake-developers/2015-April/025035.html) I moved all the external_* dependencies from `ExternalProject_Add(psi4-core ...) add_dependencies(psi4-core chemps2_external ...)` to `ExternalProject_Add(psi4-core DEPENDS chemps2_external ...)`, and CMake didn't learn to accept interface libs in that role until 3.3. So, I still rather want 3.3 because the DEPENDS looks tidier and the HDF5 version thing, but I can make 3.2 work again.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/625#issuecomment-281446113
https://github.com/psi4/psi4/pull/625#issuecomment-281446113:369,Usability,learn,learn,369,"Turns out @robertodr's original `_EP_IS_EXTERNAL_PROJECT` error [was because](http://public.kitware.com/pipermail/cmake-developers/2015-April/025035.html) I moved all the external_* dependencies from `ExternalProject_Add(psi4-core ...) add_dependencies(psi4-core chemps2_external ...)` to `ExternalProject_Add(psi4-core DEPENDS chemps2_external ...)`, and CMake didn't learn to accept interface libs in that role until 3.3. So, I still rather want 3.3 because the DEPENDS looks tidier and the HDF5 version thing, but I can make 3.2 work again.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/625#issuecomment-281446113
https://github.com/psi4/psi4/pull/625#issuecomment-281710846:173,Availability,error,error,173,"Updated this a bit after talking with @bennybp. I think he's going to do the following, then it'll be about ready:; * tarball with higher (h) AM; * also, could you throw an error in libmints if try to access out of bounds AM through simint? or switch to libint?; * absorb the config6 branch into upstream.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/625#issuecomment-281710846
https://github.com/psi4/psi4/pull/625#issuecomment-281710846:0,Deployability,Update,Updated,0,"Updated this a bit after talking with @bennybp. I think he's going to do the following, then it'll be about ready:; * tarball with higher (h) AM; * also, could you throw an error in libmints if try to access out of bounds AM through simint? or switch to libint?; * absorb the config6 branch into upstream.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/625#issuecomment-281710846
https://github.com/psi4/psi4/pull/625#issuecomment-281710846:201,Security,access,access,201,"Updated this a bit after talking with @bennybp. I think he's going to do the following, then it'll be about ready:; * tarball with higher (h) AM; * also, could you throw an error in libmints if try to access out of bounds AM through simint? or switch to libint?; * absorb the config6 branch into upstream.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/625#issuecomment-281710846
https://github.com/psi4/psi4/pull/625#issuecomment-288470468:169,Testability,test,test,169,"Continuing thread from other repo, @bennybp.; - I _haven't_ removed the `restrict` def psi4-side. Go to town on this `simintlab` branch.; - I have run a simint AM5 full test suite on psi4, and it's clean.; - I have built a Mac conda package, and it builds and ""ldd""'s ok; - I haven't rebuilt the Linux conda package after you confirmed refreshed tarball, but will do that next.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/625#issuecomment-288470468
https://github.com/psi4/psi4/pull/625#issuecomment-289815684:78,Deployability,release,release,78,"I'll try to wrap everything up this afternoon. I just need to do the official release (which is easy, just requires me making a changelog and stuff). And I will remove the restrict keyword from cmake",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/625#issuecomment-289815684
https://github.com/psi4/psi4/pull/625#issuecomment-289815684:12,Integrability,wrap,wrap,12,"I'll try to wrap everything up this afternoon. I just need to do the official release (which is easy, just requires me making a changelog and stuff). And I will remove the restrict keyword from cmake",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/625#issuecomment-289815684
https://github.com/psi4/psi4/pull/625#issuecomment-289968277:34,Testability,test,tests,34,Ok compiles now and the first few tests are passing,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/625#issuecomment-289968277
https://github.com/psi4/psi4/issues/626#issuecomment-281193022:517,Usability,guid,guides,517,"There is a [forum](http://forum.psicode.org/). The [wiki itself](https://github.com/psi4/psi4/wiki) is newly defunct and needs some labels indicating this. Everything relevant to users (as opposed to some limited developer info that's still good) is now in the [build docs](http://psicode.org/psi4manual/master/build_faq.html). The docs themselves are actually user editable if you care to – there's a pencil in the upper left of the page (unless it's an autogenerated page like for options) that lets one edit, then guides into submitting the changes for review. You're absolutely right that this should be documented somewhere – it's on my todo list for Psi4 1.1. I'm sorry for your trouble.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/626#issuecomment-281193022
https://github.com/psi4/psi4/issues/626#issuecomment-281235825:120,Energy Efficiency,reduce,reduce,120,"By the way, @ajmisquitta, I noticed you have a fork of psi4 from last summer. In October we re-wrote our git history to reduce the repository size by 90%. This makes pre-history-rewrite and post-history-rewrite repositories unreconcilable. If this is the source you are compiling from and you want to continue with psi4 1.0 era code, stick with your repository. Likewise if you have local development associated with your psi4 fork. Otherwise, I strongly recommend deleting your repository and re-forking. This will give you access to 1.1 era code and can interact with the main psi4/psi4 repo. (It will cut off access to building 1.0.) There's some significant build changes with 1.1, but a lot of [good features](https://github.com/psi4/psi4/issues/485), too.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/626#issuecomment-281235825
https://github.com/psi4/psi4/issues/626#issuecomment-281235825:178,Modifiability,rewrite,rewrite,178,"By the way, @ajmisquitta, I noticed you have a fork of psi4 from last summer. In October we re-wrote our git history to reduce the repository size by 90%. This makes pre-history-rewrite and post-history-rewrite repositories unreconcilable. If this is the source you are compiling from and you want to continue with psi4 1.0 era code, stick with your repository. Likewise if you have local development associated with your psi4 fork. Otherwise, I strongly recommend deleting your repository and re-forking. This will give you access to 1.1 era code and can interact with the main psi4/psi4 repo. (It will cut off access to building 1.0.) There's some significant build changes with 1.1, but a lot of [good features](https://github.com/psi4/psi4/issues/485), too.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/626#issuecomment-281235825
https://github.com/psi4/psi4/issues/626#issuecomment-281235825:203,Modifiability,rewrite,rewrite,203,"By the way, @ajmisquitta, I noticed you have a fork of psi4 from last summer. In October we re-wrote our git history to reduce the repository size by 90%. This makes pre-history-rewrite and post-history-rewrite repositories unreconcilable. If this is the source you are compiling from and you want to continue with psi4 1.0 era code, stick with your repository. Likewise if you have local development associated with your psi4 fork. Otherwise, I strongly recommend deleting your repository and re-forking. This will give you access to 1.1 era code and can interact with the main psi4/psi4 repo. (It will cut off access to building 1.0.) There's some significant build changes with 1.1, but a lot of [good features](https://github.com/psi4/psi4/issues/485), too.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/626#issuecomment-281235825
https://github.com/psi4/psi4/issues/626#issuecomment-281235825:525,Security,access,access,525,"By the way, @ajmisquitta, I noticed you have a fork of psi4 from last summer. In October we re-wrote our git history to reduce the repository size by 90%. This makes pre-history-rewrite and post-history-rewrite repositories unreconcilable. If this is the source you are compiling from and you want to continue with psi4 1.0 era code, stick with your repository. Likewise if you have local development associated with your psi4 fork. Otherwise, I strongly recommend deleting your repository and re-forking. This will give you access to 1.1 era code and can interact with the main psi4/psi4 repo. (It will cut off access to building 1.0.) There's some significant build changes with 1.1, but a lot of [good features](https://github.com/psi4/psi4/issues/485), too.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/626#issuecomment-281235825
https://github.com/psi4/psi4/issues/626#issuecomment-281235825:612,Security,access,access,612,"By the way, @ajmisquitta, I noticed you have a fork of psi4 from last summer. In October we re-wrote our git history to reduce the repository size by 90%. This makes pre-history-rewrite and post-history-rewrite repositories unreconcilable. If this is the source you are compiling from and you want to continue with psi4 1.0 era code, stick with your repository. Likewise if you have local development associated with your psi4 fork. Otherwise, I strongly recommend deleting your repository and re-forking. This will give you access to 1.1 era code and can interact with the main psi4/psi4 repo. (It will cut off access to building 1.0.) There's some significant build changes with 1.1, but a lot of [good features](https://github.com/psi4/psi4/issues/485), too.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/626#issuecomment-281235825
https://github.com/psi4/psi4/issues/626#issuecomment-281360860:194,Availability,error,error,194,"Hello @loriab, I have taken what you and @ajmisquitta has said and applied it to an argon dimer which worked out fine. However when attempting to apply this to a water dimer I get the following error. <code>[s.rayner@spasrv12 water_aug-cc-pvqz_psi4_deltaHF_ccsd_t]$ psi4 -n 4; Calculating for basis aug-cc-pvQZ; Calculating for coordinate set: 0; rDistance 4.72431496198; </code>. <code>; QcdbException BasisSetNotFound: BasisSet::construct: Unable to find a basis set for atom 4 for role RIFIT among:; Shell Entries: ['RN']; Basis Sets: ['def2-qzvpp-ri']; File Path: , /home/s.rayner/psi4conda/share/psi4/basis; Input Blocks:; </code>; <p>; <code>; Traceback (most recent call last):; File ""/home/s.rayner/psi4conda/share/psi4/python/qcdb/libmintsbasisset.py"", line 599, in pyconstruct; bs, msg = BasisSet.construct(parser, mol, fitrole, None if fitrole == 'BASIS' else fitrole, basstrings[fitrole]); File ""/home/s.rayner/psi4conda/share/psi4/python/qcdb/libmintsbasisset.py"", line 748, in construct; (at + 1, role, text2)); qcdb.exceptions.BasisSetNotFound: BasisSet::construct: Unable to find a basis set for atom 4 for role RIFIT among:; Shell Entries: ['RN']; Basis Sets: ['def2-qzvpp-ri']; File Path: , /home/s.rayner/psi4conda/share/psi4/basis; Input Blocks:</code></p>. The input.dat as the following http://pastebin.com/6kRJzc9e. Any help on this issue would be deeply appreciated.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/626#issuecomment-281360860
https://github.com/psi4/psi4/issues/626#issuecomment-281382831:27,Energy Efficiency,energy,energy,27,"@gruckion, you're running `energy('mp2'`, so you'll need a `df_basis_mp2` block identical to the `df_basis_cc` one. With `df_basis_scf`, `df_basis_mp2`, and `df_basis_cc`, that should cover most everything.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/626#issuecomment-281382831
https://github.com/psi4/psi4/issues/626#issuecomment-281394764:49,Usability,simpl,simple,49,"Oh dear, apologies for over looking something so simple. Thank you for getting back to me so swiftly. Let me know if there is a way to repay the favour. All the best,; Stephen",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/626#issuecomment-281394764
https://github.com/psi4/psi4/pull/627#issuecomment-281758152:503,Usability,simpl,simple,503,"I have no issues with requiring cmake version 3.3 for the sake of cleaner CMakeLists.txt's I think it is worth it. . w.r.t to the changes in handling threading, you have a big :+1: from me on this:; - Ignoring the envars is a good move. If `__init__.py` was going to look at `os.eviron` to set the default number of threads which should take precedence `MKL` or `OMP`? ; - > *In the face of ambiguity, refuse the temptation to guess.*; - With the command line argument, or `psi4.set_num_theads()` it is simple to honor the envars *explicitly*.; - > *Explicit is better than implicit* . One suggestion /comment (If the general consensus is in favor of this):; - Should the number of threads be removed from the psi4 header? I can see confusion coming from that line when `psi4.set_num_threads()` is used. Maybe just append something that indicates it is the value from the command line?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/627#issuecomment-281758152
https://github.com/psi4/psi4/pull/627#issuecomment-281991612:14,Availability,echo,echo,14,I pretty much echo what AJ said. @amjames I see you have been reading `import this`.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/627#issuecomment-281991612
https://github.com/psi4/psi4/pull/627#issuecomment-282393960:28,Integrability,message,messages,28,"Testing if I can still send messages. This PR has shiny new features, by the way.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/627#issuecomment-282393960
https://github.com/psi4/psi4/pull/627#issuecomment-282393960:0,Testability,Test,Testing,0,"Testing if I can still send messages. This PR has shiny new features, by the way.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/627#issuecomment-282393960
https://github.com/psi4/psi4/pull/627#issuecomment-283403855:62,Deployability,update,update,62,"I see a 3c smoke test in here, so I think it's best for me to update the branch with the 3c PR contents, before merging. Thoughts, @loriab ? Excellent stuff in this one - sorry for the delayed review.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/627#issuecomment-283403855
https://github.com/psi4/psi4/pull/627#issuecomment-283403855:17,Testability,test,test,17,"I see a 3c smoke test in here, so I think it's best for me to update the branch with the 3c PR contents, before merging. Thoughts, @loriab ? Excellent stuff in this one - sorry for the delayed review.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/627#issuecomment-283403855
https://github.com/psi4/psi4/pull/627#issuecomment-283435151:257,Deployability,install,installed,257,"Right @andysim, the 3c test was shuffled btwn PRs. The other had 3c but no pytest. This has pytest but no 3c. Either order would have been fine, as nothing's counting on the pytest to pass at this point (and it wouldn't even have run if you didn't have gcp installed), which is good b/c the threading test fails in the multi-pytest mode. So moot, but that's what was going on.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/627#issuecomment-283435151
https://github.com/psi4/psi4/pull/627#issuecomment-283435151:23,Testability,test,test,23,"Right @andysim, the 3c test was shuffled btwn PRs. The other had 3c but no pytest. This has pytest but no 3c. Either order would have been fine, as nothing's counting on the pytest to pass at this point (and it wouldn't even have run if you didn't have gcp installed), which is good b/c the threading test fails in the multi-pytest mode. So moot, but that's what was going on.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/627#issuecomment-283435151
https://github.com/psi4/psi4/pull/627#issuecomment-283435151:301,Testability,test,test,301,"Right @andysim, the 3c test was shuffled btwn PRs. The other had 3c but no pytest. This has pytest but no 3c. Either order would have been fine, as nothing's counting on the pytest to pass at this point (and it wouldn't even have run if you didn't have gcp installed), which is good b/c the threading test fails in the multi-pytest mode. So moot, but that's what was going on.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/627#issuecomment-283435151
https://github.com/psi4/psi4/issues/628#issuecomment-282102859:497,Energy Efficiency,adapt,adapted,497,"The L=l format parsing can be added simply by changing libmintsbasissetparser.py to; ```; if len(shell_type) == 1 or len(shell_type)>2:; if(len(shell_type) == 1):; # AM defined as character ; am = shell_to_am[shell_type[0]]; else:; # AM defined explicitly with L=l ; if(shell_type[0:2].lower()!=""l=""):; raise ValidationError(""""""Gaussian94BasisSetParser::parse: Invalid shell definition: line %d: %s"""""" % (lineno, line)); am = int(shell_type[2:]). ```. but in addition the shell regexp needs to be adapted to also accept the other format :S",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/628#issuecomment-282102859
https://github.com/psi4/psi4/issues/628#issuecomment-282102859:497,Modifiability,adapt,adapted,497,"The L=l format parsing can be added simply by changing libmintsbasissetparser.py to; ```; if len(shell_type) == 1 or len(shell_type)>2:; if(len(shell_type) == 1):; # AM defined as character ; am = shell_to_am[shell_type[0]]; else:; # AM defined explicitly with L=l ; if(shell_type[0:2].lower()!=""l=""):; raise ValidationError(""""""Gaussian94BasisSetParser::parse: Invalid shell definition: line %d: %s"""""" % (lineno, line)); am = int(shell_type[2:]). ```. but in addition the shell regexp needs to be adapted to also accept the other format :S",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/628#issuecomment-282102859
https://github.com/psi4/psi4/issues/628#issuecomment-282102859:309,Security,Validat,ValidationError,309,"The L=l format parsing can be added simply by changing libmintsbasissetparser.py to; ```; if len(shell_type) == 1 or len(shell_type)>2:; if(len(shell_type) == 1):; # AM defined as character ; am = shell_to_am[shell_type[0]]; else:; # AM defined explicitly with L=l ; if(shell_type[0:2].lower()!=""l=""):; raise ValidationError(""""""Gaussian94BasisSetParser::parse: Invalid shell definition: line %d: %s"""""" % (lineno, line)); am = int(shell_type[2:]). ```. but in addition the shell regexp needs to be adapted to also accept the other format :S",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/628#issuecomment-282102859
https://github.com/psi4/psi4/issues/628#issuecomment-282102859:36,Usability,simpl,simply,36,"The L=l format parsing can be added simply by changing libmintsbasissetparser.py to; ```; if len(shell_type) == 1 or len(shell_type)>2:; if(len(shell_type) == 1):; # AM defined as character ; am = shell_to_am[shell_type[0]]; else:; # AM defined explicitly with L=l ; if(shell_type[0:2].lower()!=""l=""):; raise ValidationError(""""""Gaussian94BasisSetParser::parse: Invalid shell definition: line %d: %s"""""" % (lineno, line)); am = int(shell_type[2:]). ```. but in addition the shell regexp needs to be adapted to also accept the other format :S",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/628#issuecomment-282102859
https://github.com/psi4/psi4/issues/628#issuecomment-282107744:552,Integrability,message,messages,552,"Seems Psi4 and EMSL and libint are internally consistent, so the issue is to accept `.gbs` files that are truly Gaussian-style in AM labeling, not just Gaussian-style in format. Do you happen to know, @susilehtola, if G94 (a) does not skip any letters, such that EMSL and G94 are inconsistent for all AM >=7 or (b) skips a different letter so that EMSL and G94 are inconsistent only for AM==7? It sounds like (a), but I want to be sure. . I was only faintly aware that there was an ""L=l"" gbs format. Found [this](http://www.ccl.net/chemistry/resources/messages/1996/09/12.004-dir/) on it, so will investigate, thanks.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/628#issuecomment-282107744
https://github.com/psi4/psi4/issues/629#issuecomment-282489363:24,Availability,error,error,24,"Thanks for the detailed error report. You're building a circa 1.0 snapshot (as evinced by the `setup` script, which we don't use anymore). The build system has been entirely rewritten since then. Please try re-cloning (not just pulling, as there's also been a git history re-write) and building the current development head. Some of the developers use Intel 2017 compilers, so they shouldn't be a problem.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/629#issuecomment-282489363
https://github.com/psi4/psi4/pull/630#issuecomment-283086573:320,Performance,perform,performance,320,"no numbers, i just restarted the webserver some time ago and there was something about psi4 in the forwarded email. It brakes occasionally and I am still responsible for it. I will probably test the methods once it goes to the master. the choice of the scf algorithm was purely for practical reasons of getting the best performance in ORCA and/or Turbomole, i believe. RI-J combined with exact exchange is pretty good for these methods and their target molecule size.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/630#issuecomment-283086573
https://github.com/psi4/psi4/pull/630#issuecomment-283086573:190,Testability,test,test,190,"no numbers, i just restarted the webserver some time ago and there was something about psi4 in the forwarded email. It brakes occasionally and I am still responsible for it. I will probably test the methods once it goes to the master. the choice of the scf algorithm was purely for practical reasons of getting the best performance in ORCA and/or Turbomole, i believe. RI-J combined with exact exchange is pretty good for these methods and their target molecule size.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/630#issuecomment-283086573
https://github.com/psi4/psi4/pull/630#issuecomment-283240378:170,Availability,down,downloads,170,"Thanks, @hokru, any testing or comments would be welcome, either now or once merged. Btw, the doi link nearest your name on [the gCP page](http://www.thch.uni-bonn.de/tc/downloads/gcp/index.html) is broken, if that's a concern.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/630#issuecomment-283240378
https://github.com/psi4/psi4/pull/630#issuecomment-283240378:20,Testability,test,testing,20,"Thanks, @hokru, any testing or comments would be welcome, either now or once merged. Btw, the doi link nearest your name on [the gCP page](http://www.thch.uni-bonn.de/tc/downloads/gcp/index.html) is broken, if that's a concern.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/630#issuecomment-283240378
https://github.com/psi4/psi4/issues/631#issuecomment-283062965:81,Testability,log,log,81,Broken build; https://kojipkgs.fedoraproject.org//work/tasks/8247/18108247/build.log. A succesful build; https://kojipkgs.fedoraproject.org//packages/psi4/1.0/1.926879egit.fc25/data/logs/x86_64/build.log,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/631#issuecomment-283062965
https://github.com/psi4/psi4/issues/631#issuecomment-283062965:182,Testability,log,logs,182,Broken build; https://kojipkgs.fedoraproject.org//work/tasks/8247/18108247/build.log. A succesful build; https://kojipkgs.fedoraproject.org//packages/psi4/1.0/1.926879egit.fc25/data/logs/x86_64/build.log,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/631#issuecomment-283062965
https://github.com/psi4/psi4/issues/631#issuecomment-283062965:200,Testability,log,log,200,Broken build; https://kojipkgs.fedoraproject.org//work/tasks/8247/18108247/build.log. A succesful build; https://kojipkgs.fedoraproject.org//packages/psi4/1.0/1.926879egit.fc25/data/logs/x86_64/build.log,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/631#issuecomment-283062965
https://github.com/psi4/psi4/issues/631#issuecomment-283067827:29,Energy Efficiency,schedul,scheduled,29,"On the `-std=gnu++11`, we're scheduled to suppress that soon with [this line](https://github.com/psi4/psi4/pull/627/files#diff-af3b638bc2a3e6c650974192a53c7291R176), as the issue came up with cmake >=3.6 and Intel compilers. I see what you mean about return type of [`std::bind`](http://en.cppreference.com/w/cpp/utility/functional/bind) being deprecated in c++17.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/631#issuecomment-283067827
https://github.com/psi4/psi4/issues/631#issuecomment-283681875:145,Availability,error,error,145,"Well, I updated to the newest git which includes the patch that switches from -std=gnu++11 to -std=c++11 but the build still fails with the same error about `std::bind`.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/631#issuecomment-283681875
https://github.com/psi4/psi4/issues/631#issuecomment-283681875:8,Deployability,update,updated,8,"Well, I updated to the newest git which includes the patch that switches from -std=gnu++11 to -std=c++11 but the build still fails with the same error about `std::bind`.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/631#issuecomment-283681875
https://github.com/psi4/psi4/issues/631#issuecomment-283681875:53,Deployability,patch,patch,53,"Well, I updated to the newest git which includes the patch that switches from -std=gnu++11 to -std=c++11 but the build still fails with the same error about `std::bind`.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/631#issuecomment-283681875
https://github.com/psi4/psi4/issues/631#issuecomment-284125806:86,Availability,down,download,86,"Hi @susilehtola, I was looking around the Fedora packaging site to see if there was a download counter. Didn't find one but did notice a few details from your build scripts that could be updated:. * http://pkgs.fedoraproject.org/cgit/rpms/psi4.git/tree/psi4.spec#n45 actually need Py >= 2.7, as I'm not holding back from dictionary comprehensions; * http://pkgs.fedoraproject.org/cgit/rpms/psi4.git/tree/psi4.spec#n19 more simply, `psi4/psi4`, though github re-directs; * http://pkgs.fedoraproject.org/cgit/rpms/psi4.git/tree/psi4.spec#n107 It's on by default anyway, so no change, but wrong variable https://github.com/psi4/psi4/blob/master/CMakeLists.txt#L99; * http://pkgs.fedoraproject.org/cgit/rpms/psi4.git/tree/psi4.spec#n109 not sure if this is still working. May need to be `-DLAPACK_LIBRARIES=...`. Is there actually a monitor that you know of for Fedora package downloads? We like to track them for grant reviews.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/631#issuecomment-284125806
https://github.com/psi4/psi4/issues/631#issuecomment-284125806:873,Availability,down,downloads,873,"Hi @susilehtola, I was looking around the Fedora packaging site to see if there was a download counter. Didn't find one but did notice a few details from your build scripts that could be updated:. * http://pkgs.fedoraproject.org/cgit/rpms/psi4.git/tree/psi4.spec#n45 actually need Py >= 2.7, as I'm not holding back from dictionary comprehensions; * http://pkgs.fedoraproject.org/cgit/rpms/psi4.git/tree/psi4.spec#n19 more simply, `psi4/psi4`, though github re-directs; * http://pkgs.fedoraproject.org/cgit/rpms/psi4.git/tree/psi4.spec#n107 It's on by default anyway, so no change, but wrong variable https://github.com/psi4/psi4/blob/master/CMakeLists.txt#L99; * http://pkgs.fedoraproject.org/cgit/rpms/psi4.git/tree/psi4.spec#n109 not sure if this is still working. May need to be `-DLAPACK_LIBRARIES=...`. Is there actually a monitor that you know of for Fedora package downloads? We like to track them for grant reviews.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/631#issuecomment-284125806
https://github.com/psi4/psi4/issues/631#issuecomment-284125806:187,Deployability,update,updated,187,"Hi @susilehtola, I was looking around the Fedora packaging site to see if there was a download counter. Didn't find one but did notice a few details from your build scripts that could be updated:. * http://pkgs.fedoraproject.org/cgit/rpms/psi4.git/tree/psi4.spec#n45 actually need Py >= 2.7, as I'm not holding back from dictionary comprehensions; * http://pkgs.fedoraproject.org/cgit/rpms/psi4.git/tree/psi4.spec#n19 more simply, `psi4/psi4`, though github re-directs; * http://pkgs.fedoraproject.org/cgit/rpms/psi4.git/tree/psi4.spec#n107 It's on by default anyway, so no change, but wrong variable https://github.com/psi4/psi4/blob/master/CMakeLists.txt#L99; * http://pkgs.fedoraproject.org/cgit/rpms/psi4.git/tree/psi4.spec#n109 not sure if this is still working. May need to be `-DLAPACK_LIBRARIES=...`. Is there actually a monitor that you know of for Fedora package downloads? We like to track them for grant reviews.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/631#issuecomment-284125806
https://github.com/psi4/psi4/issues/631#issuecomment-284125806:829,Energy Efficiency,monitor,monitor,829,"Hi @susilehtola, I was looking around the Fedora packaging site to see if there was a download counter. Didn't find one but did notice a few details from your build scripts that could be updated:. * http://pkgs.fedoraproject.org/cgit/rpms/psi4.git/tree/psi4.spec#n45 actually need Py >= 2.7, as I'm not holding back from dictionary comprehensions; * http://pkgs.fedoraproject.org/cgit/rpms/psi4.git/tree/psi4.spec#n19 more simply, `psi4/psi4`, though github re-directs; * http://pkgs.fedoraproject.org/cgit/rpms/psi4.git/tree/psi4.spec#n107 It's on by default anyway, so no change, but wrong variable https://github.com/psi4/psi4/blob/master/CMakeLists.txt#L99; * http://pkgs.fedoraproject.org/cgit/rpms/psi4.git/tree/psi4.spec#n109 not sure if this is still working. May need to be `-DLAPACK_LIBRARIES=...`. Is there actually a monitor that you know of for Fedora package downloads? We like to track them for grant reviews.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/631#issuecomment-284125806
https://github.com/psi4/psi4/issues/631#issuecomment-284125806:592,Modifiability,variab,variable,592,"Hi @susilehtola, I was looking around the Fedora packaging site to see if there was a download counter. Didn't find one but did notice a few details from your build scripts that could be updated:. * http://pkgs.fedoraproject.org/cgit/rpms/psi4.git/tree/psi4.spec#n45 actually need Py >= 2.7, as I'm not holding back from dictionary comprehensions; * http://pkgs.fedoraproject.org/cgit/rpms/psi4.git/tree/psi4.spec#n19 more simply, `psi4/psi4`, though github re-directs; * http://pkgs.fedoraproject.org/cgit/rpms/psi4.git/tree/psi4.spec#n107 It's on by default anyway, so no change, but wrong variable https://github.com/psi4/psi4/blob/master/CMakeLists.txt#L99; * http://pkgs.fedoraproject.org/cgit/rpms/psi4.git/tree/psi4.spec#n109 not sure if this is still working. May need to be `-DLAPACK_LIBRARIES=...`. Is there actually a monitor that you know of for Fedora package downloads? We like to track them for grant reviews.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/631#issuecomment-284125806
https://github.com/psi4/psi4/issues/631#issuecomment-284125806:423,Usability,simpl,simply,423,"Hi @susilehtola, I was looking around the Fedora packaging site to see if there was a download counter. Didn't find one but did notice a few details from your build scripts that could be updated:. * http://pkgs.fedoraproject.org/cgit/rpms/psi4.git/tree/psi4.spec#n45 actually need Py >= 2.7, as I'm not holding back from dictionary comprehensions; * http://pkgs.fedoraproject.org/cgit/rpms/psi4.git/tree/psi4.spec#n19 more simply, `psi4/psi4`, though github re-directs; * http://pkgs.fedoraproject.org/cgit/rpms/psi4.git/tree/psi4.spec#n107 It's on by default anyway, so no change, but wrong variable https://github.com/psi4/psi4/blob/master/CMakeLists.txt#L99; * http://pkgs.fedoraproject.org/cgit/rpms/psi4.git/tree/psi4.spec#n109 not sure if this is still working. May need to be `-DLAPACK_LIBRARIES=...`. Is there actually a monitor that you know of for Fedora package downloads? We like to track them for grant reviews.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/631#issuecomment-284125806
https://github.com/psi4/psi4/issues/631#issuecomment-285217536:170,Availability,ping,ping,170,"@dgasmith thanks, I'm still road tripping and haven't opened my computer in a few days. Getting back home to work tomorrow evening. @loriab okay, I'll have a look later (ping me since I'll probably forget). And no, there's no way to track package downloads, because they're mirrored to n>>>1 locations anyhow.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/631#issuecomment-285217536
https://github.com/psi4/psi4/issues/631#issuecomment-285217536:247,Availability,down,downloads,247,"@dgasmith thanks, I'm still road tripping and haven't opened my computer in a few days. Getting back home to work tomorrow evening. @loriab okay, I'll have a look later (ping me since I'll probably forget). And no, there's no way to track package downloads, because they're mirrored to n>>>1 locations anyhow.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/631#issuecomment-285217536
https://github.com/psi4/psi4/pull/633#issuecomment-283692563:51,Deployability,patch,patch,51,Confirmed - builds succesfully with gcc7 with this patch.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/633#issuecomment-283692563
https://github.com/psi4/psi4/pull/634#issuecomment-283811506:27,Deployability,update,update,27,I'll have time tomorrow to update the docs and tests.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/634#issuecomment-283811506
https://github.com/psi4/psi4/pull/634#issuecomment-283811506:47,Testability,test,tests,47,I'll have time tomorrow to update the docs and tests.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/634#issuecomment-283811506
https://github.com/psi4/psi4/pull/634#issuecomment-286584588:24,Testability,test,test,24,I think if we can get a test for this in the `tests/mrcc` folder this will be good to go.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/634#issuecomment-286584588
https://github.com/psi4/psi4/pull/634#issuecomment-286584588:46,Testability,test,tests,46,I think if we can get a test for this in the `tests/mrcc` folder this will be good to go.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/634#issuecomment-286584588
https://github.com/psi4/psi4/pull/634#issuecomment-287884835:114,Modifiability,variab,variables,114,It doesn't appear to be honoring the ```MRCC_OMP_NUM_THREADS``` keyword or family. Looks like how the environment variables being passed to mrcc was changed but not all the settings made the trip.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/634#issuecomment-287884835
https://github.com/psi4/psi4/pull/634#issuecomment-287889356:20,Testability,test,test,20,And I think the new test case is missing a CMakeLists.txt,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/634#issuecomment-287889356
https://github.com/psi4/psi4/pull/634#issuecomment-287899667:145,Deployability,Update,Updates,145,Now uses ```core.get_num_threads()``` to determine the number of threads to use with MRCC; this can be overridden by ```MRCC_OMP_NUM_THREADS```. Updates documentation with reference to Kallay's CCSDT(Q)/A and CCSDT(Q)/B paper and makes note about CCSDT(Q)/B being used by default and cites Martin's paper. I couldn't compile the documentation so please let me know if the formatting is off.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/634#issuecomment-287899667
https://github.com/psi4/psi4/pull/637#issuecomment-284583309:86,Deployability,integrat,integrated,86,"Thanks very much, @amjames! @loriab did a ton of heavy lifting to get them able to be integrated into the docs, so many thanks to her as well.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/637#issuecomment-284583309
https://github.com/psi4/psi4/pull/637#issuecomment-284583309:86,Integrability,integrat,integrated,86,"Thanks very much, @amjames! @loriab did a ton of heavy lifting to get them able to be integrated into the docs, so many thanks to her as well.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/637#issuecomment-284583309
https://github.com/psi4/psi4/pull/637#issuecomment-285992716:54,Deployability,update,update,54,"Now that #641 has been merged in, I'll go back in and update the memory setting section. @loriab, should I do that in my repo, or somewhere else since it needed some massaging for nbsphinx to take it?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/637#issuecomment-285992716
https://github.com/psi4/psi4/pull/641#issuecomment-285734725:188,Availability,avail,available,188,"@CDSherrill, nominally, yes. We've a test case that sets `memory 2 mb` to test an algorithm, and it runs just fine. Of course, we've never tested psi4 on a platform that has only 2–256 MB available. In general, I'm with you that I'd rather the minimum at which it complains was lower than the default: 100 or 256 mb. But it's not too hard to get around: `psi4.core.set_memory_bytes(2000)` will happily set internal memory to 2kb.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/641#issuecomment-285734725
https://github.com/psi4/psi4/pull/641#issuecomment-285734725:37,Testability,test,test,37,"@CDSherrill, nominally, yes. We've a test case that sets `memory 2 mb` to test an algorithm, and it runs just fine. Of course, we've never tested psi4 on a platform that has only 2–256 MB available. In general, I'm with you that I'd rather the minimum at which it complains was lower than the default: 100 or 256 mb. But it's not too hard to get around: `psi4.core.set_memory_bytes(2000)` will happily set internal memory to 2kb.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/641#issuecomment-285734725
https://github.com/psi4/psi4/pull/641#issuecomment-285734725:74,Testability,test,test,74,"@CDSherrill, nominally, yes. We've a test case that sets `memory 2 mb` to test an algorithm, and it runs just fine. Of course, we've never tested psi4 on a platform that has only 2–256 MB available. In general, I'm with you that I'd rather the minimum at which it complains was lower than the default: 100 or 256 mb. But it's not too hard to get around: `psi4.core.set_memory_bytes(2000)` will happily set internal memory to 2kb.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/641#issuecomment-285734725
https://github.com/psi4/psi4/pull/641#issuecomment-285734725:139,Testability,test,tested,139,"@CDSherrill, nominally, yes. We've a test case that sets `memory 2 mb` to test an algorithm, and it runs just fine. Of course, we've never tested psi4 on a platform that has only 2–256 MB available. In general, I'm with you that I'd rather the minimum at which it complains was lower than the default: 100 or 256 mb. But it's not too hard to get around: `psi4.core.set_memory_bytes(2000)` will happily set internal memory to 2kb.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/641#issuecomment-285734725
https://github.com/psi4/psi4/issues/642#issuecomment-284878288:48,Modifiability,variab,variables,48,"Not currently. The plan is to move all internal variables to the [`variables` dictionary](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/libmints/wavefunction.h#L547) on the Wavefunction which is exposed to Python. For DFMP2 this is rather straight forward, you could find and replace all `energy_` variables with `variables_` and pop the `energy_` dictionary from the MP2 header. Other classes are more difficult which is why this is on the TODO list, but feel free to do this one if needed.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/642#issuecomment-284878288
https://github.com/psi4/psi4/issues/642#issuecomment-284878288:67,Modifiability,variab,variables,67,"Not currently. The plan is to move all internal variables to the [`variables` dictionary](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/libmints/wavefunction.h#L547) on the Wavefunction which is exposed to Python. For DFMP2 this is rather straight forward, you could find and replace all `energy_` variables with `variables_` and pop the `energy_` dictionary from the MP2 header. Other classes are more difficult which is why this is on the TODO list, but feel free to do this one if needed.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/642#issuecomment-284878288
https://github.com/psi4/psi4/issues/642#issuecomment-284878288:307,Modifiability,variab,variables,307,"Not currently. The plan is to move all internal variables to the [`variables` dictionary](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/libmints/wavefunction.h#L547) on the Wavefunction which is exposed to Python. For DFMP2 this is rather straight forward, you could find and replace all `energy_` variables with `variables_` and pop the `energy_` dictionary from the MP2 header. Other classes are more difficult which is why this is on the TODO list, but feel free to do this one if needed.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/642#issuecomment-284878288
https://github.com/psi4/psi4/issues/642#issuecomment-284878288:204,Security,expose,exposed,204,"Not currently. The plan is to move all internal variables to the [`variables` dictionary](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/libmints/wavefunction.h#L547) on the Wavefunction which is exposed to Python. For DFMP2 this is rather straight forward, you could find and replace all `energy_` variables with `variables_` and pop the `energy_` dictionary from the MP2 header. Other classes are more difficult which is why this is on the TODO list, but feel free to do this one if needed.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/642#issuecomment-284878288
https://github.com/psi4/psi4/pull/643#issuecomment-284940969:415,Energy Efficiency,reduce,reduced,415,"@rmcgibbo, I made a [PR](https://github.com/rmcgibbo/psi4public/pull/1) to your PR so that variable labels stay consistent. This/your PR also needs rebasing. So please either (a) pull in my PR and rebase this one or (b) let me know, and I'll rebase my branch and do a PR (with your commit) directly. Thanks for the contribution kick-starting our Wavefunction.variables_ work. Btw, the git history rewrite this fall reduced repo size by 90%. If you wanted much quicker clones, you could delete your fork and re-fork.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/643#issuecomment-284940969
https://github.com/psi4/psi4/pull/643#issuecomment-284940969:91,Modifiability,variab,variable,91,"@rmcgibbo, I made a [PR](https://github.com/rmcgibbo/psi4public/pull/1) to your PR so that variable labels stay consistent. This/your PR also needs rebasing. So please either (a) pull in my PR and rebase this one or (b) let me know, and I'll rebase my branch and do a PR (with your commit) directly. Thanks for the contribution kick-starting our Wavefunction.variables_ work. Btw, the git history rewrite this fall reduced repo size by 90%. If you wanted much quicker clones, you could delete your fork and re-fork.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/643#issuecomment-284940969
https://github.com/psi4/psi4/pull/643#issuecomment-284940969:397,Modifiability,rewrite,rewrite,397,"@rmcgibbo, I made a [PR](https://github.com/rmcgibbo/psi4public/pull/1) to your PR so that variable labels stay consistent. This/your PR also needs rebasing. So please either (a) pull in my PR and rebase this one or (b) let me know, and I'll rebase my branch and do a PR (with your commit) directly. Thanks for the contribution kick-starting our Wavefunction.variables_ work. Btw, the git history rewrite this fall reduced repo size by 90%. If you wanted much quicker clones, you could delete your fork and re-fork.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/643#issuecomment-284940969
https://github.com/psi4/psi4/pull/643#issuecomment-284949491:615,Energy Efficiency,reduce,reduced,615,"Awesome. I'll merge this into my PR and rebase tomorrow morning. On Tue, Mar 7, 2017 at 11:05 PM, Lori A. Burns <notifications@github.com>; wrote:. > @rmcgibbo <https://github.com/rmcgibbo>, I made a PR; > <https://github.com/rmcgibbo/psi4public/pull/1> to your PR so that; > variable labels stay consistent. This/your PR also needs rebasing. So; > please either (a) pull in my PR and rebase this one or (b) let me know, and; > I'll rebase my branch and do a PR (with your commit) directly. Thanks for; > the contribution kick-starting our Wavefunction.variables_ work.; >; > Btw, the git history rewrite this fall reduced repo size by 90%. If you; > wanted much quicker clones, you could delete your fork and re-fork.; >; > —; > You are receiving this because you were mentioned.; > Reply to this email directly, view it on GitHub; > <https://github.com/psi4/psi4/pull/643#issuecomment-284940969>, or mute; > the thread; > <https://github.com/notifications/unsubscribe-auth/AAnI_gsl1aKAenbQoYI_7elUN9aYliQyks5rjikCgaJpZM4MWI2g>; > .; >. -- ; -Robert",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/643#issuecomment-284949491
https://github.com/psi4/psi4/pull/643#issuecomment-284949491:276,Modifiability,variab,variable,276,"Awesome. I'll merge this into my PR and rebase tomorrow morning. On Tue, Mar 7, 2017 at 11:05 PM, Lori A. Burns <notifications@github.com>; wrote:. > @rmcgibbo <https://github.com/rmcgibbo>, I made a PR; > <https://github.com/rmcgibbo/psi4public/pull/1> to your PR so that; > variable labels stay consistent. This/your PR also needs rebasing. So; > please either (a) pull in my PR and rebase this one or (b) let me know, and; > I'll rebase my branch and do a PR (with your commit) directly. Thanks for; > the contribution kick-starting our Wavefunction.variables_ work.; >; > Btw, the git history rewrite this fall reduced repo size by 90%. If you; > wanted much quicker clones, you could delete your fork and re-fork.; >; > —; > You are receiving this because you were mentioned.; > Reply to this email directly, view it on GitHub; > <https://github.com/psi4/psi4/pull/643#issuecomment-284940969>, or mute; > the thread; > <https://github.com/notifications/unsubscribe-auth/AAnI_gsl1aKAenbQoYI_7elUN9aYliQyks5rjikCgaJpZM4MWI2g>; > .; >. -- ; -Robert",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/643#issuecomment-284949491
https://github.com/psi4/psi4/pull/643#issuecomment-284949491:597,Modifiability,rewrite,rewrite,597,"Awesome. I'll merge this into my PR and rebase tomorrow morning. On Tue, Mar 7, 2017 at 11:05 PM, Lori A. Burns <notifications@github.com>; wrote:. > @rmcgibbo <https://github.com/rmcgibbo>, I made a PR; > <https://github.com/rmcgibbo/psi4public/pull/1> to your PR so that; > variable labels stay consistent. This/your PR also needs rebasing. So; > please either (a) pull in my PR and rebase this one or (b) let me know, and; > I'll rebase my branch and do a PR (with your commit) directly. Thanks for; > the contribution kick-starting our Wavefunction.variables_ work.; >; > Btw, the git history rewrite this fall reduced repo size by 90%. If you; > wanted much quicker clones, you could delete your fork and re-fork.; >; > —; > You are receiving this because you were mentioned.; > Reply to this email directly, view it on GitHub; > <https://github.com/psi4/psi4/pull/643#issuecomment-284940969>, or mute; > the thread; > <https://github.com/notifications/unsubscribe-auth/AAnI_gsl1aKAenbQoYI_7elUN9aYliQyks5rjikCgaJpZM4MWI2g>; > .; >. -- ; -Robert",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/643#issuecomment-284949491
https://github.com/psi4/psi4/pull/644#issuecomment-285471455:120,Integrability,interface,interface,120,"Ok, I tested it and it's a piece of cake. I'll save the info in Molden format and change the script for VMD to use this interface.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/644#issuecomment-285471455
https://github.com/psi4/psi4/pull/644#issuecomment-285471455:6,Testability,test,tested,6,"Ok, I tested it and it's a piece of cake. I'll save the info in Molden format and change the script for VMD to use this interface.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/644#issuecomment-285471455
https://github.com/psi4/psi4/pull/644#issuecomment-285475194:41,Security,access,accessible,41,"Oh, good. We'll want the data structures accessible in python, too (plan for the last three years), but for text, Molden format should do for convention.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/644#issuecomment-285475194
https://github.com/psi4/psi4/pull/644#issuecomment-285769962:146,Availability,avail,available,146,"I added some documentation so I think this PR is close to being ready for a commit. I am curious: are there any ideas on how to make normal modes available via Python? From what I have seen in findif, it might be necessary to store this information somewhere. Exactly where, I don't know.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/644#issuecomment-285769962
https://github.com/psi4/psi4/pull/644#issuecomment-286431537:524,Availability,avail,available,524,"Oh, and I meant to add that docs should say whether un-mass-weighted vs. mass-weighted and normalized vs. unnormalized normal coordinates are printed to the molden file. Pretty sure that it's the former on both choices. On the Python accessibility issue, there's some discussion [here](https://github.com/psi4/psi4/issues/347) (start in the paragraph above ""Future""). Findif's vibrational analysis capabilities have to be moved out of that module because it's organized on the assumption the psi4 has _no_ analytic Hessians available. Some of the shift to py-side is already in the works (@bwb314), and I expect this molden-writing can be moved py-side, too, once the data is accessible.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/644#issuecomment-286431537
https://github.com/psi4/psi4/pull/644#issuecomment-286431537:234,Security,access,accessibility,234,"Oh, and I meant to add that docs should say whether un-mass-weighted vs. mass-weighted and normalized vs. unnormalized normal coordinates are printed to the molden file. Pretty sure that it's the former on both choices. On the Python accessibility issue, there's some discussion [here](https://github.com/psi4/psi4/issues/347) (start in the paragraph above ""Future""). Findif's vibrational analysis capabilities have to be moved out of that module because it's organized on the assumption the psi4 has _no_ analytic Hessians available. Some of the shift to py-side is already in the works (@bwb314), and I expect this molden-writing can be moved py-side, too, once the data is accessible.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/644#issuecomment-286431537
https://github.com/psi4/psi4/pull/644#issuecomment-286431537:676,Security,access,accessible,676,"Oh, and I meant to add that docs should say whether un-mass-weighted vs. mass-weighted and normalized vs. unnormalized normal coordinates are printed to the molden file. Pretty sure that it's the former on both choices. On the Python accessibility issue, there's some discussion [here](https://github.com/psi4/psi4/issues/347) (start in the paragraph above ""Future""). Findif's vibrational analysis capabilities have to be moved out of that module because it's organized on the assumption the psi4 has _no_ analytic Hessians available. Some of the shift to py-side is already in the works (@bwb314), and I expect this molden-writing can be moved py-side, too, once the data is accessible.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/644#issuecomment-286431537
https://github.com/psi4/psi4/pull/644#issuecomment-286474443:271,Energy Efficiency,adapt,adapted,271,"@loriab: I think I agree with you but perhaps @psi-rking can help disentangle this. This is the code in `findidf/fd_freq_0.cc`:. ```; if (print_lvl >= 3) {; outfile->Printf(""\n\tForce Constants for irrep %s in mass-weighted, "", irrep_lbls[h]);; outfile->Printf(""symmetry-adapted cartesian coordinates.\n"");; mat_print(H_irr[h], salcs_pi[h].size(), salcs_pi[h].size(), ""outfile"");; }. // diagonalize force constant matrix; int dim = salcs_pi[h].size();; double *evals = init_array(dim);; double **evects = block_matrix(dim, dim);. sq_rsp(dim, dim, H_irr[h], evals, 3, evects, 1e-14);. // Build Bu^1/2 matrix for this irrep; SharedMatrix B_irr_shared = salc_list.matrix_irrep(h);; double **B_irr = B_irr_shared->pointer();. for (int i = 0; i < dim; ++i); for (int a = 0; a < Natom; ++a); for (int xyz = 0; xyz < 3; ++xyz); B_irr[i][3 * a + xyz] /= sqrt(mol->mass(a));. double **normal_irr = block_matrix(3 * Natom, dim);; C_DGEMM('t', 'n', 3 * Natom, dim, dim, 1.0, B_irr[0], 3 * Natom, evects[0],; dim, 0, normal_irr[0], dim);. if (print_lvl >= 3) {; outfile->Printf(""\n\tNormal coordinates (non-mass-weighted) for irrep %s:\n"", irrep_lbls[h]);; eivout(normal_irr, evals, 3 * Natom, dim, ""outfile"");; }; ```. It looks to me that contrary to what the print functions say, we first compute the Hessian (non-mass weighted), diagonalize it, and then mass-weight and symmetrize the eigenvectors?. @loriab, the normal coordinates that we print out now are not normalized. It's unclear what the Molden requirement are when it comes to mass-weighting or normalization.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/644#issuecomment-286474443
https://github.com/psi4/psi4/pull/644#issuecomment-286474443:271,Modifiability,adapt,adapted,271,"@loriab: I think I agree with you but perhaps @psi-rking can help disentangle this. This is the code in `findidf/fd_freq_0.cc`:. ```; if (print_lvl >= 3) {; outfile->Printf(""\n\tForce Constants for irrep %s in mass-weighted, "", irrep_lbls[h]);; outfile->Printf(""symmetry-adapted cartesian coordinates.\n"");; mat_print(H_irr[h], salcs_pi[h].size(), salcs_pi[h].size(), ""outfile"");; }. // diagonalize force constant matrix; int dim = salcs_pi[h].size();; double *evals = init_array(dim);; double **evects = block_matrix(dim, dim);. sq_rsp(dim, dim, H_irr[h], evals, 3, evects, 1e-14);. // Build Bu^1/2 matrix for this irrep; SharedMatrix B_irr_shared = salc_list.matrix_irrep(h);; double **B_irr = B_irr_shared->pointer();. for (int i = 0; i < dim; ++i); for (int a = 0; a < Natom; ++a); for (int xyz = 0; xyz < 3; ++xyz); B_irr[i][3 * a + xyz] /= sqrt(mol->mass(a));. double **normal_irr = block_matrix(3 * Natom, dim);; C_DGEMM('t', 'n', 3 * Natom, dim, dim, 1.0, B_irr[0], 3 * Natom, evects[0],; dim, 0, normal_irr[0], dim);. if (print_lvl >= 3) {; outfile->Printf(""\n\tNormal coordinates (non-mass-weighted) for irrep %s:\n"", irrep_lbls[h]);; eivout(normal_irr, evals, 3 * Natom, dim, ""outfile"");; }; ```. It looks to me that contrary to what the print functions say, we first compute the Hessian (non-mass weighted), diagonalize it, and then mass-weight and symmetrize the eigenvectors?. @loriab, the normal coordinates that we print out now are not normalized. It's unclear what the Molden requirement are when it comes to mass-weighting or normalization.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/644#issuecomment-286474443
https://github.com/psi4/psi4/pull/644#issuecomment-286525423:542,Deployability,patch,patch,542,"Sorry, written hastily. Units in [molden format](http://www.cmbi.ru.nl/molden/molden_format.html) `The atomic coordinates x,y,z and atomic displacements dx,dy,dz are all in Bohr (Atomic Unit of length)` seem to indicate non-mass-weighted. And I thought we got this standardized in 64dc61a2bb4 to solve psi4/psi4#225. I'm not sure that analytic freq are adhering to the nmw print standard, but the freq by E and by G should be, for what's written to output. And there was a misspelling of ""frequencies"" introduced in last commit (though I can patch that up later). If you feel comfortable with it, please rebase.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/644#issuecomment-286525423
https://github.com/psi4/psi4/pull/644#issuecomment-286543924:538,Usability,undo,undo,538,"I think the print statements are correct. The displacements are all done by displace_cart() in fd_misc.cc. These are in mass-weighted coordinates. The 'disp_size' is therefore in mass-weighted coordinates. The Hessian then computed (using energies and disp_size) is also the mass-weighted Hessian. So ""evects"" starting at 239 are the eigenvectors of the mass-weighted Hessian. I think (without thinking about it too long) that the division of ""B_irr"" coordinates by the square-root of the masses before multiplying is just an ugly way to undo the mass-weighting.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/644#issuecomment-286543924
https://github.com/psi4/psi4/pull/644#issuecomment-286563411:104,Deployability,update,update,104,"I haven't reloaded all my freq familiarity, but I did various comparisons around the time of the thermo update, but [molpro](https://github.com/psi4/psi4/blob/master/tests/freq-isotope/molpro.out#L469-L481) and [psi4](https://github.com/psi4/psi4/blob/master/tests/freq-isotope/output.ref#L4113-L4136) match, and there's other examples in that folder. Psi4 output vibs through both findif routes I'm confident are nmw (through analytic I haven't looked at). Normalization sounds good to me.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/644#issuecomment-286563411
https://github.com/psi4/psi4/pull/644#issuecomment-286563411:389,Integrability,rout,routes,389,"I haven't reloaded all my freq familiarity, but I did various comparisons around the time of the thermo update, but [molpro](https://github.com/psi4/psi4/blob/master/tests/freq-isotope/molpro.out#L469-L481) and [psi4](https://github.com/psi4/psi4/blob/master/tests/freq-isotope/output.ref#L4113-L4136) match, and there's other examples in that folder. Psi4 output vibs through both findif routes I'm confident are nmw (through analytic I haven't looked at). Normalization sounds good to me.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/644#issuecomment-286563411
https://github.com/psi4/psi4/pull/644#issuecomment-286563411:166,Testability,test,tests,166,"I haven't reloaded all my freq familiarity, but I did various comparisons around the time of the thermo update, but [molpro](https://github.com/psi4/psi4/blob/master/tests/freq-isotope/molpro.out#L469-L481) and [psi4](https://github.com/psi4/psi4/blob/master/tests/freq-isotope/output.ref#L4113-L4136) match, and there's other examples in that folder. Psi4 output vibs through both findif routes I'm confident are nmw (through analytic I haven't looked at). Normalization sounds good to me.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/644#issuecomment-286563411
https://github.com/psi4/psi4/pull/644#issuecomment-286563411:259,Testability,test,tests,259,"I haven't reloaded all my freq familiarity, but I did various comparisons around the time of the thermo update, but [molpro](https://github.com/psi4/psi4/blob/master/tests/freq-isotope/molpro.out#L469-L481) and [psi4](https://github.com/psi4/psi4/blob/master/tests/freq-isotope/output.ref#L4113-L4136) match, and there's other examples in that folder. Psi4 output vibs through both findif routes I'm confident are nmw (through analytic I haven't looked at). Normalization sounds good to me.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/644#issuecomment-286563411
https://github.com/psi4/psi4/pull/644#issuecomment-286614076:519,Modifiability,rewrite,rewrite,519,"Do you want me to fix it up, or do you want to give it a try? The below should do the trick. ```; # on master; git checkout -b moldennormco; # last commit should be ""Fix typo in doc and specify non-mass-weighted/normalized normal modes""; git pull --rebase upstream master; # last commit should be ""Fix typo ..."" and ; # first non-you commit should be ""Merge pull request #641 "" with hash 0c08 ; # (from https://github.com/psi4/psi4/commits/master); git push origin moldennormco:master; # fails because you're trying to rewrite published history; git push -f origin moldennormco:master; # success; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/644#issuecomment-286614076
https://github.com/psi4/psi4/pull/644#issuecomment-286614076:383,Security,hash,hash,383,"Do you want me to fix it up, or do you want to give it a try? The below should do the trick. ```; # on master; git checkout -b moldennormco; # last commit should be ""Fix typo in doc and specify non-mass-weighted/normalized normal modes""; git pull --rebase upstream master; # last commit should be ""Fix typo ..."" and ; # first non-you commit should be ""Merge pull request #641 "" with hash 0c08 ; # (from https://github.com/psi4/psi4/commits/master); git push origin moldennormco:master; # fails because you're trying to rewrite published history; git push -f origin moldennormco:master; # success; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/644#issuecomment-286614076
https://github.com/psi4/psi4/pull/644#issuecomment-286876414:17,Modifiability,rewrite,rewrite,17,I went ahead and rewrite the history. I think your instructions worked.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/644#issuecomment-286876414
https://github.com/psi4/psi4/issues/646#issuecomment-285695742:218,Energy Efficiency,energy,energy,218,"We have discussed this previous, but didnt find a clean way to do it. In 1.2 we have the ability to write/read Wavefunctions from disk. Would it be sufficient if you could do the following:. ```; scf_e, scf_wfn = psi4.energy(""SCF/cc-pVDZ"", return_wfn=True); scf_wfn.to_file(""my_wave.npz""); ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/646#issuecomment-285695742
https://github.com/psi4/psi4/issues/646#issuecomment-285708645:206,Deployability,patch,patch,206,"Oh, this should have been changed at some point to correctly drop these to PSI_SCRATCH. However, it doesn't look like this is present in master. I wonder if this was overwritten at some point... ill make a patch for this sometime today.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/646#issuecomment-285708645
https://github.com/psi4/psi4/issues/647#issuecomment-286920989:356,Energy Efficiency,energy,energy,356,"First of all, most structures don't converge. Only a few do. So that is an issue too. When I generated my own structures to calculate the torsion drive, one half of the molecule was ; fixed while I rotated the other half (around the fixed central bond). In that case, most structures converged and when I compared those structures to a molecular mechanics energy (which were fit to reproduce a torsion drive at the same level of QM theory) the energies were very close.; When I used optiking, and looked at the structures, it seemed like both sides of the molecule were bending to achieve the fixed dihedral angle (not sure if I'm being clear here) and when I compared the energy of the structures that did converge to the molecular mechanics energy, the energies were higher by a factor of ~10.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/647#issuecomment-286920989
https://github.com/psi4/psi4/issues/647#issuecomment-286920989:673,Energy Efficiency,energy,energy,673,"First of all, most structures don't converge. Only a few do. So that is an issue too. When I generated my own structures to calculate the torsion drive, one half of the molecule was ; fixed while I rotated the other half (around the fixed central bond). In that case, most structures converged and when I compared those structures to a molecular mechanics energy (which were fit to reproduce a torsion drive at the same level of QM theory) the energies were very close.; When I used optiking, and looked at the structures, it seemed like both sides of the molecule were bending to achieve the fixed dihedral angle (not sure if I'm being clear here) and when I compared the energy of the structures that did converge to the molecular mechanics energy, the energies were higher by a factor of ~10.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/647#issuecomment-286920989
https://github.com/psi4/psi4/issues/647#issuecomment-286920989:743,Energy Efficiency,energy,energy,743,"First of all, most structures don't converge. Only a few do. So that is an issue too. When I generated my own structures to calculate the torsion drive, one half of the molecule was ; fixed while I rotated the other half (around the fixed central bond). In that case, most structures converged and when I compared those structures to a molecular mechanics energy (which were fit to reproduce a torsion drive at the same level of QM theory) the energies were very close.; When I used optiking, and looked at the structures, it seemed like both sides of the molecule were bending to achieve the fixed dihedral angle (not sure if I'm being clear here) and when I compared the energy of the structures that did converge to the molecular mechanics energy, the energies were higher by a factor of ~10.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/647#issuecomment-286920989
https://github.com/psi4/psi4/issues/647#issuecomment-286920989:637,Usability,clear,clear,637,"First of all, most structures don't converge. Only a few do. So that is an issue too. When I generated my own structures to calculate the torsion drive, one half of the molecule was ; fixed while I rotated the other half (around the fixed central bond). In that case, most structures converged and when I compared those structures to a molecular mechanics energy (which were fit to reproduce a torsion drive at the same level of QM theory) the energies were very close.; When I used optiking, and looked at the structures, it seemed like both sides of the molecule were bending to achieve the fixed dihedral angle (not sure if I'm being clear here) and when I compared the energy of the structures that did converge to the molecular mechanics energy, the energies were higher by a factor of ~10.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/647#issuecomment-286920989
https://github.com/psi4/psi4/issues/647#issuecomment-288886460:326,Performance,optimiz,optimizer,326,"Sorry, busy week for me so I only just got a look at this problem. I got the scan to work with a few changes. First, your initial geometry has a dihedral of 180, but your initial step is 0, so that's an enormous perturbation to introduce through constraints; setting `start_angle = 181.0` sorts that out. I tried 180, but the optimizer seems to have problems when it gets too close to 180. I'm well out of my depth here, but I suspect [these](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/optking/set_params.cc#L719-L732) mysterious constants play a role. What do you think, @psi-rking? I removed the `frozen_dihedral` command, but I don't know if that makes a difference or not. I also added `symmetry c1` to the molecule definition section, to make sure weird things don't happen as the symmetry changes. Your `geom_py` command didn't work, so I changed it to `print(c4h10.save_string_xyz())`.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/647#issuecomment-288886460
https://github.com/psi4/psi4/issues/647#issuecomment-288896856:504,Energy Efficiency,energy,energy,504,"> First, your initial geometry has a dihedral of 180, but your initial step is 0, so that's an enormous perturbation to introduce through constraints; setting start_angle = 181.0. > I also added symmetry c1 to the molecule definition section, to make sure weird things don't happen as the symmetry changes. I had done both of these things too (Sorry, I probably should've posted that too) and while the optimizations did converge (although not for all structures), the structures were still of very high energy when compared to the molecular mechanics energy of the optimized structure. When I generated the starting structures outside of psi4, the molecular mechanics energies were much closer to the QM energies (as it should be since the parameters were fit to reproduce this scan). [Here](https://github.com/ChayaSt/torsionfit/blob/ddg/examples/butane/torsion_scans/psi4_archive/Psi4_QM_MM_comparison.pdf) is a figure comparing the QM and MM energies from structures generated with psi4; [Here](https://github.com/ChayaSt/torsionfit/blob/ddg/examples/butane/torsion_scans/psi4_archive/Pymol_scan_comparison.pdf) is one comparing QM and MM energies from structures generated outside of psi4.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/647#issuecomment-288896856
https://github.com/psi4/psi4/issues/647#issuecomment-288896856:552,Energy Efficiency,energy,energy,552,"> First, your initial geometry has a dihedral of 180, but your initial step is 0, so that's an enormous perturbation to introduce through constraints; setting start_angle = 181.0. > I also added symmetry c1 to the molecule definition section, to make sure weird things don't happen as the symmetry changes. I had done both of these things too (Sorry, I probably should've posted that too) and while the optimizations did converge (although not for all structures), the structures were still of very high energy when compared to the molecular mechanics energy of the optimized structure. When I generated the starting structures outside of psi4, the molecular mechanics energies were much closer to the QM energies (as it should be since the parameters were fit to reproduce this scan). [Here](https://github.com/ChayaSt/torsionfit/blob/ddg/examples/butane/torsion_scans/psi4_archive/Psi4_QM_MM_comparison.pdf) is a figure comparing the QM and MM energies from structures generated with psi4; [Here](https://github.com/ChayaSt/torsionfit/blob/ddg/examples/butane/torsion_scans/psi4_archive/Pymol_scan_comparison.pdf) is one comparing QM and MM energies from structures generated outside of psi4.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/647#issuecomment-288896856
https://github.com/psi4/psi4/issues/647#issuecomment-288896856:403,Performance,optimiz,optimizations,403,"> First, your initial geometry has a dihedral of 180, but your initial step is 0, so that's an enormous perturbation to introduce through constraints; setting start_angle = 181.0. > I also added symmetry c1 to the molecule definition section, to make sure weird things don't happen as the symmetry changes. I had done both of these things too (Sorry, I probably should've posted that too) and while the optimizations did converge (although not for all structures), the structures were still of very high energy when compared to the molecular mechanics energy of the optimized structure. When I generated the starting structures outside of psi4, the molecular mechanics energies were much closer to the QM energies (as it should be since the parameters were fit to reproduce this scan). [Here](https://github.com/ChayaSt/torsionfit/blob/ddg/examples/butane/torsion_scans/psi4_archive/Psi4_QM_MM_comparison.pdf) is a figure comparing the QM and MM energies from structures generated with psi4; [Here](https://github.com/ChayaSt/torsionfit/blob/ddg/examples/butane/torsion_scans/psi4_archive/Pymol_scan_comparison.pdf) is one comparing QM and MM energies from structures generated outside of psi4.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/647#issuecomment-288896856
https://github.com/psi4/psi4/issues/647#issuecomment-288896856:566,Performance,optimiz,optimized,566,"> First, your initial geometry has a dihedral of 180, but your initial step is 0, so that's an enormous perturbation to introduce through constraints; setting start_angle = 181.0. > I also added symmetry c1 to the molecule definition section, to make sure weird things don't happen as the symmetry changes. I had done both of these things too (Sorry, I probably should've posted that too) and while the optimizations did converge (although not for all structures), the structures were still of very high energy when compared to the molecular mechanics energy of the optimized structure. When I generated the starting structures outside of psi4, the molecular mechanics energies were much closer to the QM energies (as it should be since the parameters were fit to reproduce this scan). [Here](https://github.com/ChayaSt/torsionfit/blob/ddg/examples/butane/torsion_scans/psi4_archive/Psi4_QM_MM_comparison.pdf) is a figure comparing the QM and MM energies from structures generated with psi4; [Here](https://github.com/ChayaSt/torsionfit/blob/ddg/examples/butane/torsion_scans/psi4_archive/Pymol_scan_comparison.pdf) is one comparing QM and MM energies from structures generated outside of psi4.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/647#issuecomment-288896856
https://github.com/psi4/psi4/issues/647#issuecomment-288899031:1056,Energy Efficiency,energy,energy,1056,"Constrained optimizations are so often poorly (overly) interpreted and; erratic (dependent on initial guess, finite steps, ...) in their behavior; that I have never invested much time into them. It would not surprise me; if there were a problem with them in PSI4. However, I don't understand the; point of your first plot. The HF energies of the structures are fine, but; the MM ones are way too high? Or are these plots of different structures?. On Thu, Mar 23, 2017 at 7:06 PM, Chaya Stern <notifications@github.com>; wrote:. > First, your initial geometry has a dihedral of 180, but your initial step; > is 0, so that's an enormous perturbation to introduce through constraints;; > setting start_angle = 181.0; >; > I also added symmetry c1 to the molecule definition section, to make sure; > weird things don't happen as the symmetry changes.; >; > I had done both of these things too (Sorry, I probably should've posted; > that too) and while the optimizations did converge (although not for all; > structures), the structures were still of very high energy when compared to; > the molecular mechanics energy of the optimized structure. When I generated; > the starting structures outside of psi4, the molecular mechanics energies; > were much closer to the QM energies (as it should be since the parameters; > were fit to reproduce this scan); >; > Here; > <https://github.com/ChayaSt/torsionfit/blob/ddg/examples/butane/torsion_scans/psi4_archive/Psi4_QM_MM_comparison.pdf>; > is a figure comparing the QM and MM energies from structures generated with; > psi4; > Here; > <https://github.com/ChayaSt/torsionfit/blob/ddg/examples/butane/torsion_scans/psi4_archive/Pymol_scan_comparison.pdf>; > is one comparing QM and MM energies from structures generated outside of; > psi4.; >; > —; > You are receiving this because you were mentioned.; > Reply to this email directly, view it on GitHub; > <https://github.com/psi4/psi4/issues/647#issuecomment-288896856>, or mute; > the thread; > <https://git",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/647#issuecomment-288899031
https://github.com/psi4/psi4/issues/647#issuecomment-288899031:1107,Energy Efficiency,energy,energy,1107,"Constrained optimizations are so often poorly (overly) interpreted and; erratic (dependent on initial guess, finite steps, ...) in their behavior; that I have never invested much time into them. It would not surprise me; if there were a problem with them in PSI4. However, I don't understand the; point of your first plot. The HF energies of the structures are fine, but; the MM ones are way too high? Or are these plots of different structures?. On Thu, Mar 23, 2017 at 7:06 PM, Chaya Stern <notifications@github.com>; wrote:. > First, your initial geometry has a dihedral of 180, but your initial step; > is 0, so that's an enormous perturbation to introduce through constraints;; > setting start_angle = 181.0; >; > I also added symmetry c1 to the molecule definition section, to make sure; > weird things don't happen as the symmetry changes.; >; > I had done both of these things too (Sorry, I probably should've posted; > that too) and while the optimizations did converge (although not for all; > structures), the structures were still of very high energy when compared to; > the molecular mechanics energy of the optimized structure. When I generated; > the starting structures outside of psi4, the molecular mechanics energies; > were much closer to the QM energies (as it should be since the parameters; > were fit to reproduce this scan); >; > Here; > <https://github.com/ChayaSt/torsionfit/blob/ddg/examples/butane/torsion_scans/psi4_archive/Psi4_QM_MM_comparison.pdf>; > is a figure comparing the QM and MM energies from structures generated with; > psi4; > Here; > <https://github.com/ChayaSt/torsionfit/blob/ddg/examples/butane/torsion_scans/psi4_archive/Pymol_scan_comparison.pdf>; > is one comparing QM and MM energies from structures generated outside of; > psi4.; >; > —; > You are receiving this because you were mentioned.; > Reply to this email directly, view it on GitHub; > <https://github.com/psi4/psi4/issues/647#issuecomment-288896856>, or mute; > the thread; > <https://git",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/647#issuecomment-288899031
https://github.com/psi4/psi4/issues/647#issuecomment-288899031:81,Integrability,depend,dependent,81,"Constrained optimizations are so often poorly (overly) interpreted and; erratic (dependent on initial guess, finite steps, ...) in their behavior; that I have never invested much time into them. It would not surprise me; if there were a problem with them in PSI4. However, I don't understand the; point of your first plot. The HF energies of the structures are fine, but; the MM ones are way too high? Or are these plots of different structures?. On Thu, Mar 23, 2017 at 7:06 PM, Chaya Stern <notifications@github.com>; wrote:. > First, your initial geometry has a dihedral of 180, but your initial step; > is 0, so that's an enormous perturbation to introduce through constraints;; > setting start_angle = 181.0; >; > I also added symmetry c1 to the molecule definition section, to make sure; > weird things don't happen as the symmetry changes.; >; > I had done both of these things too (Sorry, I probably should've posted; > that too) and while the optimizations did converge (although not for all; > structures), the structures were still of very high energy when compared to; > the molecular mechanics energy of the optimized structure. When I generated; > the starting structures outside of psi4, the molecular mechanics energies; > were much closer to the QM energies (as it should be since the parameters; > were fit to reproduce this scan); >; > Here; > <https://github.com/ChayaSt/torsionfit/blob/ddg/examples/butane/torsion_scans/psi4_archive/Psi4_QM_MM_comparison.pdf>; > is a figure comparing the QM and MM energies from structures generated with; > psi4; > Here; > <https://github.com/ChayaSt/torsionfit/blob/ddg/examples/butane/torsion_scans/psi4_archive/Pymol_scan_comparison.pdf>; > is one comparing QM and MM energies from structures generated outside of; > psi4.; >; > —; > You are receiving this because you were mentioned.; > Reply to this email directly, view it on GitHub; > <https://github.com/psi4/psi4/issues/647#issuecomment-288896856>, or mute; > the thread; > <https://git",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/647#issuecomment-288899031
https://github.com/psi4/psi4/issues/647#issuecomment-288899031:12,Performance,optimiz,optimizations,12,"Constrained optimizations are so often poorly (overly) interpreted and; erratic (dependent on initial guess, finite steps, ...) in their behavior; that I have never invested much time into them. It would not surprise me; if there were a problem with them in PSI4. However, I don't understand the; point of your first plot. The HF energies of the structures are fine, but; the MM ones are way too high? Or are these plots of different structures?. On Thu, Mar 23, 2017 at 7:06 PM, Chaya Stern <notifications@github.com>; wrote:. > First, your initial geometry has a dihedral of 180, but your initial step; > is 0, so that's an enormous perturbation to introduce through constraints;; > setting start_angle = 181.0; >; > I also added symmetry c1 to the molecule definition section, to make sure; > weird things don't happen as the symmetry changes.; >; > I had done both of these things too (Sorry, I probably should've posted; > that too) and while the optimizations did converge (although not for all; > structures), the structures were still of very high energy when compared to; > the molecular mechanics energy of the optimized structure. When I generated; > the starting structures outside of psi4, the molecular mechanics energies; > were much closer to the QM energies (as it should be since the parameters; > were fit to reproduce this scan); >; > Here; > <https://github.com/ChayaSt/torsionfit/blob/ddg/examples/butane/torsion_scans/psi4_archive/Psi4_QM_MM_comparison.pdf>; > is a figure comparing the QM and MM energies from structures generated with; > psi4; > Here; > <https://github.com/ChayaSt/torsionfit/blob/ddg/examples/butane/torsion_scans/psi4_archive/Pymol_scan_comparison.pdf>; > is one comparing QM and MM energies from structures generated outside of; > psi4.; >; > —; > You are receiving this because you were mentioned.; > Reply to this email directly, view it on GitHub; > <https://github.com/psi4/psi4/issues/647#issuecomment-288896856>, or mute; > the thread; > <https://git",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/647#issuecomment-288899031
https://github.com/psi4/psi4/issues/647#issuecomment-288899031:952,Performance,optimiz,optimizations,952,"Constrained optimizations are so often poorly (overly) interpreted and; erratic (dependent on initial guess, finite steps, ...) in their behavior; that I have never invested much time into them. It would not surprise me; if there were a problem with them in PSI4. However, I don't understand the; point of your first plot. The HF energies of the structures are fine, but; the MM ones are way too high? Or are these plots of different structures?. On Thu, Mar 23, 2017 at 7:06 PM, Chaya Stern <notifications@github.com>; wrote:. > First, your initial geometry has a dihedral of 180, but your initial step; > is 0, so that's an enormous perturbation to introduce through constraints;; > setting start_angle = 181.0; >; > I also added symmetry c1 to the molecule definition section, to make sure; > weird things don't happen as the symmetry changes.; >; > I had done both of these things too (Sorry, I probably should've posted; > that too) and while the optimizations did converge (although not for all; > structures), the structures were still of very high energy when compared to; > the molecular mechanics energy of the optimized structure. When I generated; > the starting structures outside of psi4, the molecular mechanics energies; > were much closer to the QM energies (as it should be since the parameters; > were fit to reproduce this scan); >; > Here; > <https://github.com/ChayaSt/torsionfit/blob/ddg/examples/butane/torsion_scans/psi4_archive/Psi4_QM_MM_comparison.pdf>; > is a figure comparing the QM and MM energies from structures generated with; > psi4; > Here; > <https://github.com/ChayaSt/torsionfit/blob/ddg/examples/butane/torsion_scans/psi4_archive/Pymol_scan_comparison.pdf>; > is one comparing QM and MM energies from structures generated outside of; > psi4.; >; > —; > You are receiving this because you were mentioned.; > Reply to this email directly, view it on GitHub; > <https://github.com/psi4/psi4/issues/647#issuecomment-288896856>, or mute; > the thread; > <https://git",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/647#issuecomment-288899031
https://github.com/psi4/psi4/issues/647#issuecomment-288899031:1121,Performance,optimiz,optimized,1121,"Constrained optimizations are so often poorly (overly) interpreted and; erratic (dependent on initial guess, finite steps, ...) in their behavior; that I have never invested much time into them. It would not surprise me; if there were a problem with them in PSI4. However, I don't understand the; point of your first plot. The HF energies of the structures are fine, but; the MM ones are way too high? Or are these plots of different structures?. On Thu, Mar 23, 2017 at 7:06 PM, Chaya Stern <notifications@github.com>; wrote:. > First, your initial geometry has a dihedral of 180, but your initial step; > is 0, so that's an enormous perturbation to introduce through constraints;; > setting start_angle = 181.0; >; > I also added symmetry c1 to the molecule definition section, to make sure; > weird things don't happen as the symmetry changes.; >; > I had done both of these things too (Sorry, I probably should've posted; > that too) and while the optimizations did converge (although not for all; > structures), the structures were still of very high energy when compared to; > the molecular mechanics energy of the optimized structure. When I generated; > the starting structures outside of psi4, the molecular mechanics energies; > were much closer to the QM energies (as it should be since the parameters; > were fit to reproduce this scan); >; > Here; > <https://github.com/ChayaSt/torsionfit/blob/ddg/examples/butane/torsion_scans/psi4_archive/Psi4_QM_MM_comparison.pdf>; > is a figure comparing the QM and MM energies from structures generated with; > psi4; > Here; > <https://github.com/ChayaSt/torsionfit/blob/ddg/examples/butane/torsion_scans/psi4_archive/Pymol_scan_comparison.pdf>; > is one comparing QM and MM energies from structures generated outside of; > psi4.; >; > —; > You are receiving this because you were mentioned.; > Reply to this email directly, view it on GitHub; > <https://github.com/psi4/psi4/issues/647#issuecomment-288896856>, or mute; > the thread; > <https://git",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/647#issuecomment-288899031
https://github.com/psi4/psi4/issues/647#issuecomment-288899587:367,Performance,optimiz,optimizer,367,"[This](https://github.com/psi4/psi4/files/866534/torsion.pdf) is the sort of geometry I get, which is very reasonable looking. If you compare the 'good' and 'bad' geometries, is the different in the orientation of the methyl hydrogens? If so, it's likely that your starting guess has them oriented with steric clashes, but the barrier to rotation is too high for the optimizer to be able to overcome.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/647#issuecomment-288899587
https://github.com/psi4/psi4/issues/647#issuecomment-288900538:218,Availability,down,downhill,218,"Keep in mind that the optimizer (at least this one!) is not trying to; overcome any barriers except possibly one in the 'fixed coordinate'; direction. It's not an IRC computation or a global search. It's trying to; go downhill in all other directions, and it is subject to all the strange; behavior (discontinuities, etc.) present in scans by constrained; optimizations. If you generate your own initial guesses to a constrained; optimization, you will get, in general, different results. On Thu, Mar 23, 2017 at 7:25 PM, Andy Simmonett <notifications@github.com>; wrote:. > This <https://github.com/psi4/psi4/files/866534/torsion.pdf> is the sort; > of geometry I get, which is very reasonable looking. If you compare the; > 'good' and 'bad' geometries, is the different in the orientation of the; > methyl hydrogens? If so, it's likely that your starting guess has them; > oriented with steric clashes, but the barrier to rotation is too high for; > the optimizer to be able to overcome.; >; > —; > You are receiving this because you were mentioned.; > Reply to this email directly, view it on GitHub; > <https://github.com/psi4/psi4/issues/647#issuecomment-288899587>, or mute; > the thread; > <https://github.com/notifications/unsubscribe-auth/ADguTEGE7UVrDtnMjCBGDwRX1AuB-aYZks5row2IgaJpZM4Mbq9X>; > .; >",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/647#issuecomment-288900538
https://github.com/psi4/psi4/issues/647#issuecomment-288900538:22,Performance,optimiz,optimizer,22,"Keep in mind that the optimizer (at least this one!) is not trying to; overcome any barriers except possibly one in the 'fixed coordinate'; direction. It's not an IRC computation or a global search. It's trying to; go downhill in all other directions, and it is subject to all the strange; behavior (discontinuities, etc.) present in scans by constrained; optimizations. If you generate your own initial guesses to a constrained; optimization, you will get, in general, different results. On Thu, Mar 23, 2017 at 7:25 PM, Andy Simmonett <notifications@github.com>; wrote:. > This <https://github.com/psi4/psi4/files/866534/torsion.pdf> is the sort; > of geometry I get, which is very reasonable looking. If you compare the; > 'good' and 'bad' geometries, is the different in the orientation of the; > methyl hydrogens? If so, it's likely that your starting guess has them; > oriented with steric clashes, but the barrier to rotation is too high for; > the optimizer to be able to overcome.; >; > —; > You are receiving this because you were mentioned.; > Reply to this email directly, view it on GitHub; > <https://github.com/psi4/psi4/issues/647#issuecomment-288899587>, or mute; > the thread; > <https://github.com/notifications/unsubscribe-auth/ADguTEGE7UVrDtnMjCBGDwRX1AuB-aYZks5row2IgaJpZM4Mbq9X>; > .; >",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/647#issuecomment-288900538
https://github.com/psi4/psi4/issues/647#issuecomment-288900538:356,Performance,optimiz,optimizations,356,"Keep in mind that the optimizer (at least this one!) is not trying to; overcome any barriers except possibly one in the 'fixed coordinate'; direction. It's not an IRC computation or a global search. It's trying to; go downhill in all other directions, and it is subject to all the strange; behavior (discontinuities, etc.) present in scans by constrained; optimizations. If you generate your own initial guesses to a constrained; optimization, you will get, in general, different results. On Thu, Mar 23, 2017 at 7:25 PM, Andy Simmonett <notifications@github.com>; wrote:. > This <https://github.com/psi4/psi4/files/866534/torsion.pdf> is the sort; > of geometry I get, which is very reasonable looking. If you compare the; > 'good' and 'bad' geometries, is the different in the orientation of the; > methyl hydrogens? If so, it's likely that your starting guess has them; > oriented with steric clashes, but the barrier to rotation is too high for; > the optimizer to be able to overcome.; >; > —; > You are receiving this because you were mentioned.; > Reply to this email directly, view it on GitHub; > <https://github.com/psi4/psi4/issues/647#issuecomment-288899587>, or mute; > the thread; > <https://github.com/notifications/unsubscribe-auth/ADguTEGE7UVrDtnMjCBGDwRX1AuB-aYZks5row2IgaJpZM4Mbq9X>; > .; >",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/647#issuecomment-288900538
https://github.com/psi4/psi4/issues/647#issuecomment-288900538:430,Performance,optimiz,optimization,430,"Keep in mind that the optimizer (at least this one!) is not trying to; overcome any barriers except possibly one in the 'fixed coordinate'; direction. It's not an IRC computation or a global search. It's trying to; go downhill in all other directions, and it is subject to all the strange; behavior (discontinuities, etc.) present in scans by constrained; optimizations. If you generate your own initial guesses to a constrained; optimization, you will get, in general, different results. On Thu, Mar 23, 2017 at 7:25 PM, Andy Simmonett <notifications@github.com>; wrote:. > This <https://github.com/psi4/psi4/files/866534/torsion.pdf> is the sort; > of geometry I get, which is very reasonable looking. If you compare the; > 'good' and 'bad' geometries, is the different in the orientation of the; > methyl hydrogens? If so, it's likely that your starting guess has them; > oriented with steric clashes, but the barrier to rotation is too high for; > the optimizer to be able to overcome.; >; > —; > You are receiving this because you were mentioned.; > Reply to this email directly, view it on GitHub; > <https://github.com/psi4/psi4/issues/647#issuecomment-288899587>, or mute; > the thread; > <https://github.com/notifications/unsubscribe-auth/ADguTEGE7UVrDtnMjCBGDwRX1AuB-aYZks5row2IgaJpZM4Mbq9X>; > .; >",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/647#issuecomment-288900538
https://github.com/psi4/psi4/issues/647#issuecomment-288900538:956,Performance,optimiz,optimizer,956,"Keep in mind that the optimizer (at least this one!) is not trying to; overcome any barriers except possibly one in the 'fixed coordinate'; direction. It's not an IRC computation or a global search. It's trying to; go downhill in all other directions, and it is subject to all the strange; behavior (discontinuities, etc.) present in scans by constrained; optimizations. If you generate your own initial guesses to a constrained; optimization, you will get, in general, different results. On Thu, Mar 23, 2017 at 7:25 PM, Andy Simmonett <notifications@github.com>; wrote:. > This <https://github.com/psi4/psi4/files/866534/torsion.pdf> is the sort; > of geometry I get, which is very reasonable looking. If you compare the; > 'good' and 'bad' geometries, is the different in the orientation of the; > methyl hydrogens? If so, it's likely that your starting guess has them; > oriented with steric clashes, but the barrier to rotation is too high for; > the optimizer to be able to overcome.; >; > —; > You are receiving this because you were mentioned.; > Reply to this email directly, view it on GitHub; > <https://github.com/psi4/psi4/issues/647#issuecomment-288899587>, or mute; > the thread; > <https://github.com/notifications/unsubscribe-auth/ADguTEGE7UVrDtnMjCBGDwRX1AuB-aYZks5row2IgaJpZM4Mbq9X>; > .; >",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/647#issuecomment-288900538
https://github.com/psi4/psi4/issues/647#issuecomment-289561812:486,Modifiability,parameteriz,parameterized,486,"> However, I don't understand the; point of your first plot. The HF energies of the structures are fine, but; the MM ones are way too high? Or are these plots of different structures?. No, these are plots of the same structure. That's why I'm not sure what is going on. ; > If you generate your own initial guesses to a constrained; optimization, you will get, in general, different results. Could it be that given these structures differ slightly from the ones that the forcefield was parameterized with that the MM energies are so much higher? In the second plot that I linked, I generated my own initial guesses and with those structures the MM energies are closer.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/647#issuecomment-289561812
https://github.com/psi4/psi4/issues/647#issuecomment-289561812:333,Performance,optimiz,optimization,333,"> However, I don't understand the; point of your first plot. The HF energies of the structures are fine, but; the MM ones are way too high? Or are these plots of different structures?. No, these are plots of the same structure. That's why I'm not sure what is going on. ; > If you generate your own initial guesses to a constrained; optimization, you will get, in general, different results. Could it be that given these structures differ slightly from the ones that the forcefield was parameterized with that the MM energies are so much higher? In the second plot that I linked, I generated my own initial guesses and with those structures the MM energies are closer.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/647#issuecomment-289561812
https://github.com/psi4/psi4/issues/648#issuecomment-286957146:95,Integrability,message,message,95,"Adding printouts; ```; foreach(_al ${_addons}); get_filename_component(_ald ${_al} DIRECTORY); message(""al is \""${_al}\""""); message(""ald is \""${_ald}\""""); ```; yields the following output; ```; al is ""-lopenblaso""; ald is """"; ```. so I guess you need to add a check if ald is an empty variable..",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/648#issuecomment-286957146
https://github.com/psi4/psi4/issues/648#issuecomment-286957146:124,Integrability,message,message,124,"Adding printouts; ```; foreach(_al ${_addons}); get_filename_component(_ald ${_al} DIRECTORY); message(""al is \""${_al}\""""); message(""ald is \""${_ald}\""""); ```; yields the following output; ```; al is ""-lopenblaso""; ald is """"; ```. so I guess you need to add a check if ald is an empty variable..",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/648#issuecomment-286957146
https://github.com/psi4/psi4/issues/648#issuecomment-286957146:285,Modifiability,variab,variable,285,"Adding printouts; ```; foreach(_al ${_addons}); get_filename_component(_ald ${_al} DIRECTORY); message(""al is \""${_al}\""""); message(""ald is \""${_ald}\""""); ```; yields the following output; ```; al is ""-lopenblaso""; ald is """"; ```. so I guess you need to add a check if ald is an empty variable..",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/648#issuecomment-286957146
https://github.com/psi4/psi4/issues/650#issuecomment-286839124:253,Availability,error,error,253,"Well, the input preprocesser actually implicitly assumes that the molecule name is an allowable [Python identifier](https://docs.python.org/3/reference/lexical_analysis.html#identifiers), so using a name like `2xH2O` will crash the `exec` with a syntax error...",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/650#issuecomment-286839124
https://github.com/psi4/psi4/issues/650#issuecomment-286904185:132,Availability,error,errors,132,"Hm, I think a solution to allow this would be very messy. . We would have to: ; 1. check for molecule names that would cause syntax errors.; 2. Figure out some way to fix the name so that is is a valid identifier ; 3. Find any mention of the original name in the rest of the input file and apply the same translation to it. Doing something like prepending `mol_` to the molecule name would allow things like you mention `2xh20` to work fine `2xh20 `—>`mol_2xh20`, but I think it would be a difficult to deal with every possible thing that a user could possibly enter. . The [documentation](http://www.psicode.org/psi4manual/master/psithoninput.html) describes the few special cases that the ""psithon"" input parser is prepared to deal with like the `molecule <name> {…}` block. It might be a good idea to mention that `molecule name {…}` essentially gets converted to `name = psi4.geometry(…)` to drive home that ""name"" needs to be a valid Python identifier, but in my opinion the syntax error makes that pretty clear.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/650#issuecomment-286904185
https://github.com/psi4/psi4/issues/650#issuecomment-286904185:987,Availability,error,error,987,"Hm, I think a solution to allow this would be very messy. . We would have to: ; 1. check for molecule names that would cause syntax errors.; 2. Figure out some way to fix the name so that is is a valid identifier ; 3. Find any mention of the original name in the rest of the input file and apply the same translation to it. Doing something like prepending `mol_` to the molecule name would allow things like you mention `2xh20` to work fine `2xh20 `—>`mol_2xh20`, but I think it would be a difficult to deal with every possible thing that a user could possibly enter. . The [documentation](http://www.psicode.org/psi4manual/master/psithoninput.html) describes the few special cases that the ""psithon"" input parser is prepared to deal with like the `molecule <name> {…}` block. It might be a good idea to mention that `molecule name {…}` essentially gets converted to `name = psi4.geometry(…)` to drive home that ""name"" needs to be a valid Python identifier, but in my opinion the syntax error makes that pretty clear.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/650#issuecomment-286904185
https://github.com/psi4/psi4/issues/650#issuecomment-286904185:1011,Usability,clear,clear,1011,"Hm, I think a solution to allow this would be very messy. . We would have to: ; 1. check for molecule names that would cause syntax errors.; 2. Figure out some way to fix the name so that is is a valid identifier ; 3. Find any mention of the original name in the rest of the input file and apply the same translation to it. Doing something like prepending `mol_` to the molecule name would allow things like you mention `2xh20` to work fine `2xh20 `—>`mol_2xh20`, but I think it would be a difficult to deal with every possible thing that a user could possibly enter. . The [documentation](http://www.psicode.org/psi4manual/master/psithoninput.html) describes the few special cases that the ""psithon"" input parser is prepared to deal with like the `molecule <name> {…}` block. It might be a good idea to mention that `molecule name {…}` essentially gets converted to `name = psi4.geometry(…)` to drive home that ""name"" needs to be a valid Python identifier, but in my opinion the syntax error makes that pretty clear.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/650#issuecomment-286904185
https://github.com/psi4/psi4/issues/650#issuecomment-286907884:77,Performance,tune,tune,77,"Possibly we could try/catch the mol name as a Py identifier and thereby fine-tune the allowed names, rather than the current slight mismatch. I'm afraid that garden-variety Psi4 users won't get the block --> geometry idea, though maybe worth saying if the sentence starts ""For those acquainted with Python,"".",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/650#issuecomment-286907884
https://github.com/psi4/psi4/issues/650#issuecomment-286911061:43,Availability,error,error,43,"FWIW, I actually was stumped by the syntax error for a couple minutes, because you can't see the generated Python code anymore. The syntax error says ""error line line 21"" (or similar), but I had no idea what was on line 21.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/650#issuecomment-286911061
https://github.com/psi4/psi4/issues/650#issuecomment-286911061:139,Availability,error,error,139,"FWIW, I actually was stumped by the syntax error for a couple minutes, because you can't see the generated Python code anymore. The syntax error says ""error line line 21"" (or similar), but I had no idea what was on line 21.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/650#issuecomment-286911061
https://github.com/psi4/psi4/issues/650#issuecomment-286911061:151,Availability,error,error,151,"FWIW, I actually was stumped by the syntax error for a couple minutes, because you can't see the generated Python code anymore. The syntax error says ""error line line 21"" (or similar), but I had no idea what was on line 21.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/650#issuecomment-286911061
https://github.com/psi4/psi4/issues/650#issuecomment-286911897:156,Availability,error,error,156,"But yes, I agree that actually lifting the restriction mentioned in the original issue is either impossible or super tricky. Perhaps just reporting a clear error message when the mol name is not a valid Py identifier is the most friendly thing (e.g. I saw http://stackoverflow.com/a/29586366). Anyways, low priority.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/650#issuecomment-286911897
https://github.com/psi4/psi4/issues/650#issuecomment-286911897:162,Integrability,message,message,162,"But yes, I agree that actually lifting the restriction mentioned in the original issue is either impossible or super tricky. Perhaps just reporting a clear error message when the mol name is not a valid Py identifier is the most friendly thing (e.g. I saw http://stackoverflow.com/a/29586366). Anyways, low priority.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/650#issuecomment-286911897
https://github.com/psi4/psi4/issues/650#issuecomment-286911897:150,Usability,clear,clear,150,"But yes, I agree that actually lifting the restriction mentioned in the original issue is either impossible or super tricky. Perhaps just reporting a clear error message when the mol name is not a valid Py identifier is the most friendly thing (e.g. I saw http://stackoverflow.com/a/29586366). Anyways, low priority.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/650#issuecomment-286911897
https://github.com/psi4/psi4/issues/650#issuecomment-286913242:35,Availability,error,error,35,`.isidentifier()` for Py3 and sane error msg for Py2 seems reasonable. This is probably another reason why we mangle basis set names.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/650#issuecomment-286913242
https://github.com/psi4/psi4/issues/650#issuecomment-286957966:84,Modifiability,plugin,plugins,84,"Thanks for all the tips with `-v`. I try to keep most of the complexity; inside the plugins, so normally psithon is fine. On Wed, Mar 15, 2017 at 7:40 PM, Daniel Smith <notifications@github.com>; wrote:. > You can always go around the ""psithon"" input. For example:; >; > mol = psi4.geometry(""""""; > He; > """""",; > name=""mol_name ~^*""); >; > Where ""mol"" is the actual Molecule object and its name is an arbitrary; > string. If you are doing complex things within Psi4 I would recommend not; > using the psithon API and use the straight python API. To help, you can run; > any input file through psi4 -v input.dat to see the psithon -> python; > conversion.; >; > —; > You are receiving this because you authored the thread.; > Reply to this email directly, view it on GitHub; > <https://github.com/psi4/psi4/issues/650#issuecomment-286913919>, or mute; > the thread; > <https://github.com/notifications/unsubscribe-auth/AAnI_q1BdQKzU8EJUn1qDBWQN3mJ_mDQks5rmHbXgaJpZM4MeWtv>; > .; >. -- ; -Robert",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/650#issuecomment-286957966
https://github.com/psi4/psi4/issues/653#issuecomment-287394510:132,Energy Efficiency,energy,energy,132,"Sounds like a version mismatch. The `cp()` function was deprecated sometime last spring in favor of a `bsse_type='cp'` argument to `energy()`, as shown in [this section of the tutorial](http://psicode.org/psi4manual/master/tutorial.html#potential-surface-scans-and-counterpoise-correction-made-easy-with-psithon). It sounds like you've got a new version of Psi4 (latest ones [here](https://github.com/psi4/psi4/issues/466#issuecomment-272589229) but an old version of the tutorial. Use the latest versions of both and all should be well. If not, tell me more about what you're running (`psi4 --version`).",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/653#issuecomment-287394510
https://github.com/psi4/psi4/issues/655#issuecomment-287638234:469,Testability,test,tests,469,"Not sure what happened to the `C`, but the remainder of the valid string probably got mistaken for a comment and removed. While Psithon + preprocessing is very capable for interfacing Python and simple-to-moderate QC, the Psithon preprocessor would need to be considerably more sophisticated (ast module, I presume) to allow especially `#` to be treated correctly. I recommend using Python directly with PsiAPI (examples [here](https://github.com/psi4/psi4/tree/master/tests/pytest)). Psithon will never go away, but the developers are gradually moving toward primary PsiAPI use. . Thanks for the report, though. Any of these with ready solutions (like, I think, the `.isidentifier()` for molecule names) we'll gladly incorporate.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/655#issuecomment-287638234
https://github.com/psi4/psi4/issues/655#issuecomment-287638234:195,Usability,simpl,simple-to-moderate,195,"Not sure what happened to the `C`, but the remainder of the valid string probably got mistaken for a comment and removed. While Psithon + preprocessing is very capable for interfacing Python and simple-to-moderate QC, the Psithon preprocessor would need to be considerably more sophisticated (ast module, I presume) to allow especially `#` to be treated correctly. I recommend using Python directly with PsiAPI (examples [here](https://github.com/psi4/psi4/tree/master/tests/pytest)). Psithon will never go away, but the developers are gradually moving toward primary PsiAPI use. . Thanks for the report, though. Any of these with ready solutions (like, I think, the `.isidentifier()` for molecule names) we'll gladly incorporate.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/655#issuecomment-287638234
https://github.com/psi4/psi4/issues/655#issuecomment-287659057:436,Usability,simpl,simple-to-moderate,436,"I think this should be possible to fix with a proper EBNF grammar, but I would have to ask some colleagues who know more about parsers. Sent from my iPhone. > On Mar 19, 2017, at 2:54 PM, Lori A. Burns <notifications@github.com> wrote:; > ; > Not sure what happened to the C, but the remainder of the valid string probably got mistaken for a comment and removed. While Psithon + preprocessing is very capable for interfacing Python and simple-to-moderate QC, the Psithon preprocessor would need to be considerably more sophisticated (ast module, I presume) to allow especially # to be treated correctly. I recommend using Python directly with PsiAPI (examples here). Psithon will never go away, but the developers are gradually moving toward primary PsiAPI use.; > ; > Thanks for the report, though. Any of these with ready solutions (like, I think, the .isidentifier() for molecule names) we'll gladly incorporate.; > ; > —; > You are receiving this because you authored the thread.; > Reply to this email directly, view it on GitHub, or mute the thread.; >",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/655#issuecomment-287659057
https://github.com/psi4/psi4/issues/655#issuecomment-287840923:322,Performance,perform,perform,322,"Okay, @loriab: I have a pretty small fix for this that's much less invasive than a proper grammer. It will first section the input PSIthon script into two classes of segments: those which are preserved exactly (string literals and comments) and those in which substitutions can take place (everything else), and then only perform the PSIthon -> Python replacements on seconds in the second category. PR coming.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/655#issuecomment-287840923
https://github.com/psi4/psi4/issues/656#issuecomment-287771809:219,Testability,test,tests,219,"I've seen this, though it hasn't been a problem. Anyone recall whether this has always (last few months) been the case or only recently? If the latter, maybe the [pytest checks](https://github.com/psi4/psi4/blob/master/tests/pytest/test_addons.py#L7-L20) are involved.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/656#issuecomment-287771809
https://github.com/psi4/psi4/issues/656#issuecomment-287784898:172,Testability,test,test,172,"Yes @loriab, that fixes it. I see the program is actually being called to probe the exist code. I guess I get to see the stderr output. I once ran into a similar question (test if a binary exist) and saved this answer: http://stackoverflow.com/a/377028 (Though in the end I just ignored it and accepted a crashing script..)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/656#issuecomment-287784898
https://github.com/psi4/psi4/issues/656#issuecomment-288185174:71,Availability,fault,faulty,71,"Is it enough to suppress the can't-find-library, etc. output from when faulty externals preload? Or is their failure actually crashing the psi4 run? I like the `subprocess` ""which"" b/c it's closer to what the real run does and I can modify the path, but I can switch if need be.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/656#issuecomment-288185174
https://github.com/psi4/psi4/issues/656#issuecomment-288185174:109,Availability,failure,failure,109,"Is it enough to suppress the can't-find-library, etc. output from when faulty externals preload? Or is their failure actually crashing the psi4 run? I like the `subprocess` ""which"" b/c it's closer to what the real run does and I can modify the path, but I can switch if need be.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/656#issuecomment-288185174
https://github.com/psi4/psi4/issues/656#issuecomment-288354092:83,Availability,error,errors,83,psi4 does not crash. I was at first under the impression it did because of all the errors that got thrown at me. If the stderr from the subprocess is hidden from the user (i guess it's stderr) it should be all good.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/656#issuecomment-288354092
https://github.com/psi4/psi4/issues/656#issuecomment-288422107:216,Availability,error,error,216,"Give the newly committed fix a try, then if that's not satisfactory, reopen this. `psi4 --test` is what that preloading is actually affecting, so pass along any unexpected results of that. (Though I'm not sure if an error caused by a present but broken add-on should be skipped or failed.)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/656#issuecomment-288422107
https://github.com/psi4/psi4/issues/656#issuecomment-288422107:90,Testability,test,test,90,"Give the newly committed fix a try, then if that's not satisfactory, reopen this. `psi4 --test` is what that preloading is actually affecting, so pass along any unexpected results of that. (Though I'm not sure if an error caused by a present but broken add-on should be skipped or failed.)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/656#issuecomment-288422107
https://github.com/psi4/psi4/issues/657#issuecomment-287817795:112,Safety,detect,detection,112,"They're linked b/c the Intel link-line advisor specifies them and b/c we do some manipulation of static/dynamic detection for the binary. I don't swear it's the best way, but it hasn't been causing problems. Your `/home/kruse/gcc-4.9.4/bin/gcc` is what's active at build time? I'm surprised it's not picking up that `/home/kruse/gcc-4.9.4/lib64` libraries are being used, then preserving them in `rpath`. You may want to uncomment [this](https://github.com/psi4/psi4/blob/master/psi4/src/CMakeLists.txt#L94) and its friends to see what's going on with rpath.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/657#issuecomment-287817795
https://github.com/psi4/psi4/issues/657#issuecomment-289040592:185,Deployability,install,installation,185,"My issue here seems specific to our cluster. I have no problems on my workstation or our second cluster. Maybe the old (gcc 4.7.2) on the cluster makes troubles together with the local installation of gcc 4.9.4. But I have no real desire to dig into this... Btw, uncommenting these cmake debug messages did produce no output at all (or I did something wrong)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/657#issuecomment-289040592
https://github.com/psi4/psi4/issues/657#issuecomment-289040592:294,Integrability,message,messages,294,"My issue here seems specific to our cluster. I have no problems on my workstation or our second cluster. Maybe the old (gcc 4.7.2) on the cluster makes troubles together with the local installation of gcc 4.9.4. But I have no real desire to dig into this... Btw, uncommenting these cmake debug messages did produce no output at all (or I did something wrong)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/657#issuecomment-289040592
https://github.com/psi4/psi4/pull/658#issuecomment-289183019:587,Energy Efficiency,energy,energy,587,Looks like this isnt handling custom basis sets correctly and a few other python pieces like inline for-based lists and dicts. Failing tests are:. ```; The following tests FAILED:; 	 60 - cc49 (Failed); 	 93 - cubeprop (Failed); 	120 - dfmp2-1 (Failed); 	187 - mints2 (Failed); 	206 - mp2-property (Failed); 	235 - opt1 (Failed); 	256 - psimrcc-ccsd_t-1 (Failed); 	257 - psimrcc-ccsd_t-2 (Failed); 	258 - psimrcc-ccsd_t-3 (Failed); 	262 - psimrcc-pt2 (Failed); 	263 - psimrcc-sp1 (Failed); 	268 - pywrap-alias (Failed); 	310 - stability1 (Failed); 	322 - options1 (Failed); 	335 - dftd3-energy (Failed); 	339 - gdma-gdma1 (Failed); ```,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/658#issuecomment-289183019
https://github.com/psi4/psi4/pull/658#issuecomment-289183019:135,Testability,test,tests,135,Looks like this isnt handling custom basis sets correctly and a few other python pieces like inline for-based lists and dicts. Failing tests are:. ```; The following tests FAILED:; 	 60 - cc49 (Failed); 	 93 - cubeprop (Failed); 	120 - dfmp2-1 (Failed); 	187 - mints2 (Failed); 	206 - mp2-property (Failed); 	235 - opt1 (Failed); 	256 - psimrcc-ccsd_t-1 (Failed); 	257 - psimrcc-ccsd_t-2 (Failed); 	258 - psimrcc-ccsd_t-3 (Failed); 	262 - psimrcc-pt2 (Failed); 	263 - psimrcc-sp1 (Failed); 	268 - pywrap-alias (Failed); 	310 - stability1 (Failed); 	322 - options1 (Failed); 	335 - dftd3-energy (Failed); 	339 - gdma-gdma1 (Failed); ```,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/658#issuecomment-289183019
https://github.com/psi4/psi4/pull/658#issuecomment-289183019:166,Testability,test,tests,166,Looks like this isnt handling custom basis sets correctly and a few other python pieces like inline for-based lists and dicts. Failing tests are:. ```; The following tests FAILED:; 	 60 - cc49 (Failed); 	 93 - cubeprop (Failed); 	120 - dfmp2-1 (Failed); 	187 - mints2 (Failed); 	206 - mp2-property (Failed); 	235 - opt1 (Failed); 	256 - psimrcc-ccsd_t-1 (Failed); 	257 - psimrcc-ccsd_t-2 (Failed); 	258 - psimrcc-ccsd_t-3 (Failed); 	262 - psimrcc-pt2 (Failed); 	263 - psimrcc-sp1 (Failed); 	268 - pywrap-alias (Failed); 	310 - stability1 (Failed); 	322 - options1 (Failed); 	335 - dftd3-energy (Failed); 	339 - gdma-gdma1 (Failed); ```,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/658#issuecomment-289183019
https://github.com/psi4/psi4/pull/658#issuecomment-289222048:756,Energy Efficiency,energy,energy,756,"Yeah, I'll dive into it when I get some free time. On Fri, Mar 24, 2017 at 10:40 PM, Daniel Smith <notifications@github.com>; wrote:. > Looks like this isnt handling custom basis sets correctly and a few other; > python pieces like inline for-based lists and dicts. Failing tests are:; >; > The following tests FAILED:; > 	 60 - cc49 (Failed); > 	 93 - cubeprop (Failed); > 	120 - dfmp2-1 (Failed); > 	187 - mints2 (Failed); > 	206 - mp2-property (Failed); > 	235 - opt1 (Failed); > 	256 - psimrcc-ccsd_t-1 (Failed); > 	257 - psimrcc-ccsd_t-2 (Failed); > 	258 - psimrcc-ccsd_t-3 (Failed); > 	262 - psimrcc-pt2 (Failed); > 	263 - psimrcc-sp1 (Failed); > 	268 - pywrap-alias (Failed); > 	310 - stability1 (Failed); > 	322 - options1 (Failed); > 	335 - dftd3-energy (Failed); > 	339 - gdma-gdma1 (Failed); >; > —; > You are receiving this because you authored the thread.; > Reply to this email directly, view it on GitHub; > <https://github.com/psi4/psi4/pull/658#issuecomment-289183019>, or mute; > the thread; > <https://github.com/notifications/unsubscribe-auth/AAnI_ue38d1uwecW7_m5NMmKhLLmUZyoks5rpH6agaJpZM4MjEU7>; > .; >. -- ; -Robert",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/658#issuecomment-289222048
https://github.com/psi4/psi4/pull/658#issuecomment-289222048:274,Testability,test,tests,274,"Yeah, I'll dive into it when I get some free time. On Fri, Mar 24, 2017 at 10:40 PM, Daniel Smith <notifications@github.com>; wrote:. > Looks like this isnt handling custom basis sets correctly and a few other; > python pieces like inline for-based lists and dicts. Failing tests are:; >; > The following tests FAILED:; > 	 60 - cc49 (Failed); > 	 93 - cubeprop (Failed); > 	120 - dfmp2-1 (Failed); > 	187 - mints2 (Failed); > 	206 - mp2-property (Failed); > 	235 - opt1 (Failed); > 	256 - psimrcc-ccsd_t-1 (Failed); > 	257 - psimrcc-ccsd_t-2 (Failed); > 	258 - psimrcc-ccsd_t-3 (Failed); > 	262 - psimrcc-pt2 (Failed); > 	263 - psimrcc-sp1 (Failed); > 	268 - pywrap-alias (Failed); > 	310 - stability1 (Failed); > 	322 - options1 (Failed); > 	335 - dftd3-energy (Failed); > 	339 - gdma-gdma1 (Failed); >; > —; > You are receiving this because you authored the thread.; > Reply to this email directly, view it on GitHub; > <https://github.com/psi4/psi4/pull/658#issuecomment-289183019>, or mute; > the thread; > <https://github.com/notifications/unsubscribe-auth/AAnI_ue38d1uwecW7_m5NMmKhLLmUZyoks5rpH6agaJpZM4MjEU7>; > .; >. -- ; -Robert",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/658#issuecomment-289222048
https://github.com/psi4/psi4/pull/658#issuecomment-289222048:305,Testability,test,tests,305,"Yeah, I'll dive into it when I get some free time. On Fri, Mar 24, 2017 at 10:40 PM, Daniel Smith <notifications@github.com>; wrote:. > Looks like this isnt handling custom basis sets correctly and a few other; > python pieces like inline for-based lists and dicts. Failing tests are:; >; > The following tests FAILED:; > 	 60 - cc49 (Failed); > 	 93 - cubeprop (Failed); > 	120 - dfmp2-1 (Failed); > 	187 - mints2 (Failed); > 	206 - mp2-property (Failed); > 	235 - opt1 (Failed); > 	256 - psimrcc-ccsd_t-1 (Failed); > 	257 - psimrcc-ccsd_t-2 (Failed); > 	258 - psimrcc-ccsd_t-3 (Failed); > 	262 - psimrcc-pt2 (Failed); > 	263 - psimrcc-sp1 (Failed); > 	268 - pywrap-alias (Failed); > 	310 - stability1 (Failed); > 	322 - options1 (Failed); > 	335 - dftd3-energy (Failed); > 	339 - gdma-gdma1 (Failed); >; > —; > You are receiving this because you authored the thread.; > Reply to this email directly, view it on GitHub; > <https://github.com/psi4/psi4/pull/658#issuecomment-289183019>, or mute; > the thread; > <https://github.com/notifications/unsubscribe-auth/AAnI_ue38d1uwecW7_m5NMmKhLLmUZyoks5rpH6agaJpZM4MjEU7>; > .; >. -- ; -Robert",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/658#issuecomment-289222048
https://github.com/psi4/psi4/pull/658#issuecomment-798431091:49,Safety,safe,safe,49,"Seeing as this PR is almost four years old, it's safe to say somebody else will need to take over this PR, if we want it in.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/658#issuecomment-798431091
https://github.com/psi4/psi4/issues/660#issuecomment-288418891:106,Modifiability,plugin,plugin,106,"Uggh, never seen or though about that problem before. What would you simlink to if local gcc doesn't have plugin support either? You could try [this gcc instead](https://anaconda.org/msarahan/gcc_linux-64_linux-cos5-64/files), though I haven't particular hopes. Could you link against the prebuilt chemps2 conda package or do you really need to compile it yourself.?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/660#issuecomment-288418891
https://github.com/psi4/psi4/issues/660#issuecomment-288459669:164,Modifiability,variab,variables,164,"Okay, so I guess we can link against the pre-built conda one.; I still tested the gcc you suggested, and after giving the proper gcc-ar and gcc-ranlib to the CMake variables, it complains it cannot find liblto_plugin.so; I checked and the new gcc has only liblto_plugin.a and not the .so",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/660#issuecomment-288459669
https://github.com/psi4/psi4/issues/660#issuecomment-288459669:71,Testability,test,tested,71,"Okay, so I guess we can link against the pre-built conda one.; I still tested the gcc you suggested, and after giving the proper gcc-ar and gcc-ranlib to the CMake variables, it complains it cannot find liblto_plugin.so; I checked and the new gcc has only liblto_plugin.a and not the .so",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/660#issuecomment-288459669
https://github.com/psi4/psi4/issues/660#issuecomment-288472702:109,Availability,down,down,109,"At end of [this page](http://www.linuxfromscratch.org/lfs/view/development/chapter06/gcc.html) is a nice run-down of what's supposed to come with a gcc. `liblto_plugin.a` (the static) seems to be an oddity. Glad the conda pkg is working. You're getting it off the `test` [subchanel](https://anaconda.org/psi4/chemps2/files), I hope? `conda install chemps2 -c psi4/label/test` . That should be a well-built one, so let me know if it acts up. Build options is conda's weakness, I think. For instance, I can't use their `git` because I'm addicted to `git add -p`, and they don't build with perl enabled. There's ""features"" in the works to counteract this, but I can't suggest any other gcc right off.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/660#issuecomment-288472702
https://github.com/psi4/psi4/issues/660#issuecomment-288472702:340,Deployability,install,install,340,"At end of [this page](http://www.linuxfromscratch.org/lfs/view/development/chapter06/gcc.html) is a nice run-down of what's supposed to come with a gcc. `liblto_plugin.a` (the static) seems to be an oddity. Glad the conda pkg is working. You're getting it off the `test` [subchanel](https://anaconda.org/psi4/chemps2/files), I hope? `conda install chemps2 -c psi4/label/test` . That should be a well-built one, so let me know if it acts up. Build options is conda's weakness, I think. For instance, I can't use their `git` because I'm addicted to `git add -p`, and they don't build with perl enabled. There's ""features"" in the works to counteract this, but I can't suggest any other gcc right off.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/660#issuecomment-288472702
https://github.com/psi4/psi4/issues/660#issuecomment-288472702:265,Testability,test,test,265,"At end of [this page](http://www.linuxfromscratch.org/lfs/view/development/chapter06/gcc.html) is a nice run-down of what's supposed to come with a gcc. `liblto_plugin.a` (the static) seems to be an oddity. Glad the conda pkg is working. You're getting it off the `test` [subchanel](https://anaconda.org/psi4/chemps2/files), I hope? `conda install chemps2 -c psi4/label/test` . That should be a well-built one, so let me know if it acts up. Build options is conda's weakness, I think. For instance, I can't use their `git` because I'm addicted to `git add -p`, and they don't build with perl enabled. There's ""features"" in the works to counteract this, but I can't suggest any other gcc right off.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/660#issuecomment-288472702
https://github.com/psi4/psi4/issues/660#issuecomment-288472702:370,Testability,test,test,370,"At end of [this page](http://www.linuxfromscratch.org/lfs/view/development/chapter06/gcc.html) is a nice run-down of what's supposed to come with a gcc. `liblto_plugin.a` (the static) seems to be an oddity. Glad the conda pkg is working. You're getting it off the `test` [subchanel](https://anaconda.org/psi4/chemps2/files), I hope? `conda install chemps2 -c psi4/label/test` . That should be a well-built one, so let me know if it acts up. Build options is conda's weakness, I think. For instance, I can't use their `git` because I'm addicted to `git add -p`, and they don't build with perl enabled. There's ""features"" in the works to counteract this, but I can't suggest any other gcc right off.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/660#issuecomment-288472702
https://github.com/psi4/psi4/issues/660#issuecomment-288500982:395,Modifiability,variab,variable,395,"@loriab Just tried to link with conda chemps2 using the one from the test subchannel. CMake does not seem to realize CheMPS2 is there and keeps saying ""no suitable chemps2 found"" in spite of me passing; `-DENABLE_CheMPS2=ON -DCMAKE_PREFIX_PATH=/global/home/users/jgonthier/software/miniconda -DCheMPS2_DIR=/global/home/users/jgonthier/software/miniconda` to CMake. Am I forgetting an option/env variable ?. @susilehtola Thanks for the suggestion ! I guess we could also always re-built a local version of gcc... Hopefully if the binary works it won't come to that.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/660#issuecomment-288500982
https://github.com/psi4/psi4/issues/660#issuecomment-288500982:69,Testability,test,test,69,"@loriab Just tried to link with conda chemps2 using the one from the test subchannel. CMake does not seem to realize CheMPS2 is there and keeps saying ""no suitable chemps2 found"" in spite of me passing; `-DENABLE_CheMPS2=ON -DCMAKE_PREFIX_PATH=/global/home/users/jgonthier/software/miniconda -DCheMPS2_DIR=/global/home/users/jgonthier/software/miniconda` to CMake. Am I forgetting an option/env variable ?. @susilehtola Thanks for the suggestion ! I guess we could also always re-built a local version of gcc... Hopefully if the binary works it won't come to that.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/660#issuecomment-288500982
https://github.com/psi4/psi4/issues/660#issuecomment-288503545:186,Modifiability,config,configure-,186,"`CheMPS2_DIR` is the right approach, but it wants the dir with the `CheMPS2Config.cmake`, not the root dir. [here D for details](http://psicode.org/psi4manual/master/chemps2.html#how-to-configure-chemps2-for-building-psi4). Blame CMake, not me, for that one. I think that's the problem. But if that fails, remove the version from [here](https://github.com/psi4/psi4/blob/master/external/upstream/chemps2/CMakeLists.txt#L2) and [here](https://github.com/psi4/psi4/blob/master/psi4/CMakeLists.txt#L59).",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/660#issuecomment-288503545
https://github.com/psi4/psi4/issues/660#issuecomment-288525890:1090,Availability,error,error,1090,"The CMake variables were not the problem, the version number was. Apparently the one in `-c psi4/label/test` is 1.8.2 and not 1.8.3. But now, the compilation failed while building liboptions.cc with the following message: ; `cd /global/home/users/jgonthier/software/psi4/objdir_chemps2_ar/psi4-core-prefix/src/psi4-core-build/src/psi4/liboptions && /global/software/sl-6.x86_64/modules/langs/intel/2016.1.150/bin/icpc -DUSING_LAPACK_MKL -I/global/home/users/jgonthier/software/psi4/psi4/include -I/global/home/users/jgonthier/software/psi4/psi4/src -isystem /global/home/users/jgonthier/software/psi4/objdir_chemps2_ar/stage/usr/local/psi4/include -isystem /global/home/users/jgonthier/software/miniconda/include/python2.7 -isystem /global/software/sl-6.x86_64/modules/langs/intel/2016.1.150/mkl/include -xHost -qopenmp -O3 -DNDEBUG -fPIC -std=c++11 -o CMakeFiles/options.dir/liboptions.cc.o -c /global/home/users/jgonthier/software/psi4/psi4/src/psi4/liboptions/liboptions.cc; /global/home/users/jgonthier/software/miniconda/envs/gcc52/gcc/include/c++/bits/stl_iterator_base_types.h(154): error: name followed by ""::"" must be a class or namespace name; typedef typename _Iterator::iterator_category iterator_category;; ^`. As you can see I use Intel compilers 2016 with Intel MKL, in the GCC 5.2 conda environment. Could it be a problem with Intel compilers ?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/660#issuecomment-288525890
https://github.com/psi4/psi4/issues/660#issuecomment-288525890:213,Integrability,message,message,213,"The CMake variables were not the problem, the version number was. Apparently the one in `-c psi4/label/test` is 1.8.2 and not 1.8.3. But now, the compilation failed while building liboptions.cc with the following message: ; `cd /global/home/users/jgonthier/software/psi4/objdir_chemps2_ar/psi4-core-prefix/src/psi4-core-build/src/psi4/liboptions && /global/software/sl-6.x86_64/modules/langs/intel/2016.1.150/bin/icpc -DUSING_LAPACK_MKL -I/global/home/users/jgonthier/software/psi4/psi4/include -I/global/home/users/jgonthier/software/psi4/psi4/src -isystem /global/home/users/jgonthier/software/psi4/objdir_chemps2_ar/stage/usr/local/psi4/include -isystem /global/home/users/jgonthier/software/miniconda/include/python2.7 -isystem /global/software/sl-6.x86_64/modules/langs/intel/2016.1.150/mkl/include -xHost -qopenmp -O3 -DNDEBUG -fPIC -std=c++11 -o CMakeFiles/options.dir/liboptions.cc.o -c /global/home/users/jgonthier/software/psi4/psi4/src/psi4/liboptions/liboptions.cc; /global/home/users/jgonthier/software/miniconda/envs/gcc52/gcc/include/c++/bits/stl_iterator_base_types.h(154): error: name followed by ""::"" must be a class or namespace name; typedef typename _Iterator::iterator_category iterator_category;; ^`. As you can see I use Intel compilers 2016 with Intel MKL, in the GCC 5.2 conda environment. Could it be a problem with Intel compilers ?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/660#issuecomment-288525890
https://github.com/psi4/psi4/issues/660#issuecomment-288525890:10,Modifiability,variab,variables,10,"The CMake variables were not the problem, the version number was. Apparently the one in `-c psi4/label/test` is 1.8.2 and not 1.8.3. But now, the compilation failed while building liboptions.cc with the following message: ; `cd /global/home/users/jgonthier/software/psi4/objdir_chemps2_ar/psi4-core-prefix/src/psi4-core-build/src/psi4/liboptions && /global/software/sl-6.x86_64/modules/langs/intel/2016.1.150/bin/icpc -DUSING_LAPACK_MKL -I/global/home/users/jgonthier/software/psi4/psi4/include -I/global/home/users/jgonthier/software/psi4/psi4/src -isystem /global/home/users/jgonthier/software/psi4/objdir_chemps2_ar/stage/usr/local/psi4/include -isystem /global/home/users/jgonthier/software/miniconda/include/python2.7 -isystem /global/software/sl-6.x86_64/modules/langs/intel/2016.1.150/mkl/include -xHost -qopenmp -O3 -DNDEBUG -fPIC -std=c++11 -o CMakeFiles/options.dir/liboptions.cc.o -c /global/home/users/jgonthier/software/psi4/psi4/src/psi4/liboptions/liboptions.cc; /global/home/users/jgonthier/software/miniconda/envs/gcc52/gcc/include/c++/bits/stl_iterator_base_types.h(154): error: name followed by ""::"" must be a class or namespace name; typedef typename _Iterator::iterator_category iterator_category;; ^`. As you can see I use Intel compilers 2016 with Intel MKL, in the GCC 5.2 conda environment. Could it be a problem with Intel compilers ?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/660#issuecomment-288525890
https://github.com/psi4/psi4/issues/660#issuecomment-288525890:103,Testability,test,test,103,"The CMake variables were not the problem, the version number was. Apparently the one in `-c psi4/label/test` is 1.8.2 and not 1.8.3. But now, the compilation failed while building liboptions.cc with the following message: ; `cd /global/home/users/jgonthier/software/psi4/objdir_chemps2_ar/psi4-core-prefix/src/psi4-core-build/src/psi4/liboptions && /global/software/sl-6.x86_64/modules/langs/intel/2016.1.150/bin/icpc -DUSING_LAPACK_MKL -I/global/home/users/jgonthier/software/psi4/psi4/include -I/global/home/users/jgonthier/software/psi4/psi4/src -isystem /global/home/users/jgonthier/software/psi4/objdir_chemps2_ar/stage/usr/local/psi4/include -isystem /global/home/users/jgonthier/software/miniconda/include/python2.7 -isystem /global/software/sl-6.x86_64/modules/langs/intel/2016.1.150/mkl/include -xHost -qopenmp -O3 -DNDEBUG -fPIC -std=c++11 -o CMakeFiles/options.dir/liboptions.cc.o -c /global/home/users/jgonthier/software/psi4/psi4/src/psi4/liboptions/liboptions.cc; /global/home/users/jgonthier/software/miniconda/envs/gcc52/gcc/include/c++/bits/stl_iterator_base_types.h(154): error: name followed by ""::"" must be a class or namespace name; typedef typename _Iterator::iterator_category iterator_category;; ^`. As you can see I use Intel compilers 2016 with Intel MKL, in the GCC 5.2 conda environment. Could it be a problem with Intel compilers ?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/660#issuecomment-288525890
https://github.com/psi4/psi4/issues/660#issuecomment-288528850:441,Availability,down,down,441,"That's strange, I'm showing it as 1.8.3 (https://anaconda.org/psi4/chemps2/files). But anyways, any chance this is a rebuild of a pre-Christmas version? That has a faint look of a pybind11 incompatibility. We've been stable at pybind11 2.0 since mid-Jan or so. But any pybind11 change just requires a full wipe out of the build. And CMake is insidious, so if there's even an old pybind11 to be found at the _install_ location, it'll hunt it down and compile bad things with it. So do blow away your builddir and point it to an empty `CMAKE_INSTALL_PREFIX` if there's the least likelihood. (This is why we're sticking with 2.0 for as long as we can.)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/660#issuecomment-288528850
https://github.com/psi4/psi4/issues/660#issuecomment-288529918:297,Availability,avail,availability,297,"@loriab Regarding the chemps2 version: I just tried on my desktop where everything is fine and it installed 1.8.3. On my cluster with gcc < 4.9, it installs chemps2 1.8.2, if I do the install with the gcc 5 env activated it installs chemps2 1.8.3. So it seems the version installed depends on the availability of gcc >= 4.9",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/660#issuecomment-288529918
https://github.com/psi4/psi4/issues/660#issuecomment-288529918:98,Deployability,install,installed,98,"@loriab Regarding the chemps2 version: I just tried on my desktop where everything is fine and it installed 1.8.3. On my cluster with gcc < 4.9, it installs chemps2 1.8.2, if I do the install with the gcc 5 env activated it installs chemps2 1.8.3. So it seems the version installed depends on the availability of gcc >= 4.9",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/660#issuecomment-288529918
https://github.com/psi4/psi4/issues/660#issuecomment-288529918:148,Deployability,install,installs,148,"@loriab Regarding the chemps2 version: I just tried on my desktop where everything is fine and it installed 1.8.3. On my cluster with gcc < 4.9, it installs chemps2 1.8.2, if I do the install with the gcc 5 env activated it installs chemps2 1.8.3. So it seems the version installed depends on the availability of gcc >= 4.9",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/660#issuecomment-288529918
https://github.com/psi4/psi4/issues/660#issuecomment-288529918:184,Deployability,install,install,184,"@loriab Regarding the chemps2 version: I just tried on my desktop where everything is fine and it installed 1.8.3. On my cluster with gcc < 4.9, it installs chemps2 1.8.2, if I do the install with the gcc 5 env activated it installs chemps2 1.8.3. So it seems the version installed depends on the availability of gcc >= 4.9",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/660#issuecomment-288529918
https://github.com/psi4/psi4/issues/660#issuecomment-288529918:224,Deployability,install,installs,224,"@loriab Regarding the chemps2 version: I just tried on my desktop where everything is fine and it installed 1.8.3. On my cluster with gcc < 4.9, it installs chemps2 1.8.2, if I do the install with the gcc 5 env activated it installs chemps2 1.8.3. So it seems the version installed depends on the availability of gcc >= 4.9",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/660#issuecomment-288529918
https://github.com/psi4/psi4/issues/660#issuecomment-288529918:272,Deployability,install,installed,272,"@loriab Regarding the chemps2 version: I just tried on my desktop where everything is fine and it installed 1.8.3. On my cluster with gcc < 4.9, it installs chemps2 1.8.2, if I do the install with the gcc 5 env activated it installs chemps2 1.8.3. So it seems the version installed depends on the availability of gcc >= 4.9",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/660#issuecomment-288529918
https://github.com/psi4/psi4/issues/660#issuecomment-288529918:282,Integrability,depend,depends,282,"@loriab Regarding the chemps2 version: I just tried on my desktop where everything is fine and it installed 1.8.3. On my cluster with gcc < 4.9, it installs chemps2 1.8.2, if I do the install with the gcc 5 env activated it installs chemps2 1.8.3. So it seems the version installed depends on the availability of gcc >= 4.9",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/660#issuecomment-288529918
https://github.com/psi4/psi4/issues/660#issuecomment-288530704:85,Deployability,install,installed,85,And regarding the build: I cloned Psi4 yesterday on a machine where I never had Psi4 installed. The configure is also telling me that pybind11 could not be located and that it will be built.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/660#issuecomment-288530704
https://github.com/psi4/psi4/issues/660#issuecomment-288530704:100,Modifiability,config,configure,100,And regarding the build: I cloned Psi4 yesterday on a machine where I never had Psi4 installed. The configure is also telling me that pybind11 could not be located and that it will be built.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/660#issuecomment-288530704
https://github.com/psi4/psi4/issues/660#issuecomment-288535859:491,Availability,error,error,491,"Yeah, CheMPS2 and Psi4 have to use gnu on the same side of 5.1 b/c GCC changed their std::string compatibility. The conda CheMPS2 is def. built against the gcc5.2 in that faq. Usually you have to have the gcc5.2 environment active during configuration and build _or_ pass extra args to the compilers, as below. Doesn't hurt to do both. But you're getting past the compiler checks. I've heard of problems with 2016.1 Intel compiler set. 2016.3 is known good. Actually, @amjames, was this the error you were seeing with early 2016 compilers?. ```; PFXC=/theoryfs2/ds/cdsgroup/miniconda/envs/text35; ; ${PFXC}/bin/cmake -H. -Bobjdir53 \; -DCMAKE_C_COMPILER=/theoryfs2/common/software/intel2016/compilers_and_libraries_2016.3.210/linux/bin/intel64/icc \; -DCMAKE_CXX_COMPILER=/theoryfs2/common/software/intel2016/compilers_and_libraries_2016.3.210/linux/bin/intel64/icpc \; -DCMAKE_Fortran_COMPILER=/theoryfs2/common/software/intel2016/compilers_and_libraries_2016.3.210/linux/bin/intel64/ifort \; -DCMAKE_C_FLAGS=""-gcc-name=${PFXC}/bin/gcc"" \; -DCMAKE_CXX_FLAGS=""-gcc-name=${PFXC}/bin/gcc -gxx-name=${PFXC}/bin/g++"" \; -DCMAKE_Fortran_FLAGS=""-gcc-name=${PFXC}/bin/gcc -gxx-name=${PFXC}/bin/g++"" \; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/660#issuecomment-288535859
https://github.com/psi4/psi4/issues/660#issuecomment-288535859:238,Deployability,configurat,configuration,238,"Yeah, CheMPS2 and Psi4 have to use gnu on the same side of 5.1 b/c GCC changed their std::string compatibility. The conda CheMPS2 is def. built against the gcc5.2 in that faq. Usually you have to have the gcc5.2 environment active during configuration and build _or_ pass extra args to the compilers, as below. Doesn't hurt to do both. But you're getting past the compiler checks. I've heard of problems with 2016.1 Intel compiler set. 2016.3 is known good. Actually, @amjames, was this the error you were seeing with early 2016 compilers?. ```; PFXC=/theoryfs2/ds/cdsgroup/miniconda/envs/text35; ; ${PFXC}/bin/cmake -H. -Bobjdir53 \; -DCMAKE_C_COMPILER=/theoryfs2/common/software/intel2016/compilers_and_libraries_2016.3.210/linux/bin/intel64/icc \; -DCMAKE_CXX_COMPILER=/theoryfs2/common/software/intel2016/compilers_and_libraries_2016.3.210/linux/bin/intel64/icpc \; -DCMAKE_Fortran_COMPILER=/theoryfs2/common/software/intel2016/compilers_and_libraries_2016.3.210/linux/bin/intel64/ifort \; -DCMAKE_C_FLAGS=""-gcc-name=${PFXC}/bin/gcc"" \; -DCMAKE_CXX_FLAGS=""-gcc-name=${PFXC}/bin/gcc -gxx-name=${PFXC}/bin/g++"" \; -DCMAKE_Fortran_FLAGS=""-gcc-name=${PFXC}/bin/gcc -gxx-name=${PFXC}/bin/g++"" \; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/660#issuecomment-288535859
https://github.com/psi4/psi4/issues/660#issuecomment-288535859:238,Modifiability,config,configuration,238,"Yeah, CheMPS2 and Psi4 have to use gnu on the same side of 5.1 b/c GCC changed their std::string compatibility. The conda CheMPS2 is def. built against the gcc5.2 in that faq. Usually you have to have the gcc5.2 environment active during configuration and build _or_ pass extra args to the compilers, as below. Doesn't hurt to do both. But you're getting past the compiler checks. I've heard of problems with 2016.1 Intel compiler set. 2016.3 is known good. Actually, @amjames, was this the error you were seeing with early 2016 compilers?. ```; PFXC=/theoryfs2/ds/cdsgroup/miniconda/envs/text35; ; ${PFXC}/bin/cmake -H. -Bobjdir53 \; -DCMAKE_C_COMPILER=/theoryfs2/common/software/intel2016/compilers_and_libraries_2016.3.210/linux/bin/intel64/icc \; -DCMAKE_CXX_COMPILER=/theoryfs2/common/software/intel2016/compilers_and_libraries_2016.3.210/linux/bin/intel64/icpc \; -DCMAKE_Fortran_COMPILER=/theoryfs2/common/software/intel2016/compilers_and_libraries_2016.3.210/linux/bin/intel64/ifort \; -DCMAKE_C_FLAGS=""-gcc-name=${PFXC}/bin/gcc"" \; -DCMAKE_CXX_FLAGS=""-gcc-name=${PFXC}/bin/gcc -gxx-name=${PFXC}/bin/g++"" \; -DCMAKE_Fortran_FLAGS=""-gcc-name=${PFXC}/bin/gcc -gxx-name=${PFXC}/bin/g++"" \; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/660#issuecomment-288535859
https://github.com/psi4/psi4/issues/660#issuecomment-288573307:28,Deployability,install,installing,28,"Okay, I see. I tried again, installing the proper chemps2 from the conda environment, and using gcc/g++ instead of Intel.; Believe it or not, it did work. And the first few tests are ok. Side note: while testing I noticed that HDF5 detection in CMake fails if 1) HDF5 is installed on the system AND 2) I use conda to install chemps2, which installs hdf5 in conda as well. Should I open a new issue about that ? Or is it too specific a case for being worth the time ?. Thanks for all your input, @loriab and @susilehtola",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/660#issuecomment-288573307
https://github.com/psi4/psi4/issues/660#issuecomment-288573307:271,Deployability,install,installed,271,"Okay, I see. I tried again, installing the proper chemps2 from the conda environment, and using gcc/g++ instead of Intel.; Believe it or not, it did work. And the first few tests are ok. Side note: while testing I noticed that HDF5 detection in CMake fails if 1) HDF5 is installed on the system AND 2) I use conda to install chemps2, which installs hdf5 in conda as well. Should I open a new issue about that ? Or is it too specific a case for being worth the time ?. Thanks for all your input, @loriab and @susilehtola",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/660#issuecomment-288573307
https://github.com/psi4/psi4/issues/660#issuecomment-288573307:317,Deployability,install,install,317,"Okay, I see. I tried again, installing the proper chemps2 from the conda environment, and using gcc/g++ instead of Intel.; Believe it or not, it did work. And the first few tests are ok. Side note: while testing I noticed that HDF5 detection in CMake fails if 1) HDF5 is installed on the system AND 2) I use conda to install chemps2, which installs hdf5 in conda as well. Should I open a new issue about that ? Or is it too specific a case for being worth the time ?. Thanks for all your input, @loriab and @susilehtola",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/660#issuecomment-288573307
https://github.com/psi4/psi4/issues/660#issuecomment-288573307:340,Deployability,install,installs,340,"Okay, I see. I tried again, installing the proper chemps2 from the conda environment, and using gcc/g++ instead of Intel.; Believe it or not, it did work. And the first few tests are ok. Side note: while testing I noticed that HDF5 detection in CMake fails if 1) HDF5 is installed on the system AND 2) I use conda to install chemps2, which installs hdf5 in conda as well. Should I open a new issue about that ? Or is it too specific a case for being worth the time ?. Thanks for all your input, @loriab and @susilehtola",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/660#issuecomment-288573307
https://github.com/psi4/psi4/issues/660#issuecomment-288573307:232,Safety,detect,detection,232,"Okay, I see. I tried again, installing the proper chemps2 from the conda environment, and using gcc/g++ instead of Intel.; Believe it or not, it did work. And the first few tests are ok. Side note: while testing I noticed that HDF5 detection in CMake fails if 1) HDF5 is installed on the system AND 2) I use conda to install chemps2, which installs hdf5 in conda as well. Should I open a new issue about that ? Or is it too specific a case for being worth the time ?. Thanks for all your input, @loriab and @susilehtola",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/660#issuecomment-288573307
https://github.com/psi4/psi4/issues/660#issuecomment-288573307:173,Testability,test,tests,173,"Okay, I see. I tried again, installing the proper chemps2 from the conda environment, and using gcc/g++ instead of Intel.; Believe it or not, it did work. And the first few tests are ok. Side note: while testing I noticed that HDF5 detection in CMake fails if 1) HDF5 is installed on the system AND 2) I use conda to install chemps2, which installs hdf5 in conda as well. Should I open a new issue about that ? Or is it too specific a case for being worth the time ?. Thanks for all your input, @loriab and @susilehtola",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/660#issuecomment-288573307
https://github.com/psi4/psi4/issues/660#issuecomment-288573307:204,Testability,test,testing,204,"Okay, I see. I tried again, installing the proper chemps2 from the conda environment, and using gcc/g++ instead of Intel.; Believe it or not, it did work. And the first few tests are ok. Side note: while testing I noticed that HDF5 detection in CMake fails if 1) HDF5 is installed on the system AND 2) I use conda to install chemps2, which installs hdf5 in conda as well. Should I open a new issue about that ? Or is it too specific a case for being worth the time ?. Thanks for all your input, @loriab and @susilehtola",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/660#issuecomment-288573307
https://github.com/psi4/psi4/issues/660#issuecomment-288577924:223,Availability,down,down,223,"Yay, so building Psi4 w/ gcc/g++5.2 against a pre-built conda chemps2 is what's working?. HDF5 is persnickety in that chemps2 will complain if the HDF5 library it finds at runtime isn't the same one it was compiled against down to the patch level. That is, 1.8.16 and 1.8.17 aren't friendly. So unless you're lucky, you really must use the one that comes with the conda package. Does setting `-DCMAKE_PREFIX_PATH` to the conda env help to overcome the system hdf5? or `HDF5_ROOT`?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/660#issuecomment-288577924
https://github.com/psi4/psi4/issues/660#issuecomment-288577924:235,Deployability,patch,patch,235,"Yay, so building Psi4 w/ gcc/g++5.2 against a pre-built conda chemps2 is what's working?. HDF5 is persnickety in that chemps2 will complain if the HDF5 library it finds at runtime isn't the same one it was compiled against down to the patch level. That is, 1.8.16 and 1.8.17 aren't friendly. So unless you're lucky, you really must use the one that comes with the conda package. Does setting `-DCMAKE_PREFIX_PATH` to the conda env help to overcome the system hdf5? or `HDF5_ROOT`?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/660#issuecomment-288577924
https://github.com/psi4/psi4/issues/660#issuecomment-288581185:138,Testability,test,tests,138,"Yes, that's right: gcc5.2 conda env, Psi4 w/gcc/g++5.2 with Intel MKL against pre-built conda chemps2. Everything built in the conda env, tests run out of the conda env, seems to work. Yes, I tried setting `-DCMAKE_PREFIX_PATH`, but I only tried `HDF5_ROOT` pointing to the system library, which from what you say would fail anyway. I don't have the setup to test this any more though, but I could recreate it if there's enough interest.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/660#issuecomment-288581185
https://github.com/psi4/psi4/issues/660#issuecomment-288581185:359,Testability,test,test,359,"Yes, that's right: gcc5.2 conda env, Psi4 w/gcc/g++5.2 with Intel MKL against pre-built conda chemps2. Everything built in the conda env, tests run out of the conda env, seems to work. Yes, I tried setting `-DCMAKE_PREFIX_PATH`, but I only tried `HDF5_ROOT` pointing to the system library, which from what you say would fail anyway. I don't have the setup to test this any more though, but I could recreate it if there's enough interest.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/660#issuecomment-288581185
https://github.com/psi4/psi4/issues/660#issuecomment-288583765:37,Availability,failure,failure,37,Intel 2016.1.150 for the compilation failure reported above.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/660#issuecomment-288583765
https://github.com/psi4/psi4/issues/660#issuecomment-288590352:94,Availability,error,error,94,"Sorry to get in on this kind of late, but that message:; >`...stl_iterator_base_types.h(154): error: name followed by ""::"" must be a class or namespace name typedef typename _Iterator::iterator_category iterator_category; ^`. Does seem vaguely familiar and I have not been able to get psi4 working on our clusters with intel-16.1. I have not tried recently though so if it would help you out at all @jgonthier I could try a build tonight and let you know what I see.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/660#issuecomment-288590352
https://github.com/psi4/psi4/issues/660#issuecomment-288590352:47,Integrability,message,message,47,"Sorry to get in on this kind of late, but that message:; >`...stl_iterator_base_types.h(154): error: name followed by ""::"" must be a class or namespace name typedef typename _Iterator::iterator_category iterator_category; ^`. Does seem vaguely familiar and I have not been able to get psi4 working on our clusters with intel-16.1. I have not tried recently though so if it would help you out at all @jgonthier I could try a build tonight and let you know what I see.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/660#issuecomment-288590352
https://github.com/psi4/psi4/issues/661#issuecomment-288484811:42,Testability,test,testing,42,"No problem on all the issues. Glad you're testing the code. The `env=lenv` is basically to fulfill the ""addons may be in PSIPATH or PATH"" promise and to remove envvar noise from the execution environment. [This](https://github.com/psi4/psi4/blob/master/psi4/driver/procrouting/interface_cfour.py#L142-L148) is pretty much it. My first thought is that there might be some envvar you have set that is important for `xcfour` to run correctly but is getting cut from `lenv`. Maybe `printenv` and see if anything looks likely? We can certainly pass more through if warranted.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/661#issuecomment-288484811
https://github.com/psi4/psi4/issues/661#issuecomment-288652354:261,Deployability,configurat,configuration,261,"ah ok, I remember that cfour needs an environmental variable to figure out the number of mpi threads. At the configure step of the source code one sets something like:; `configure [...] --with-mpirun=mpirun -np ${CFOUR_NUM_CORES}`. Not sure if this is just our configuration or if `CFOUR_NUM_CORES` is the default name described in some installation documentation. I see that `OMP_NUM_THREADS` is handled correctly with `env=lenv`, though I don't see it is being added to `lenv`.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/661#issuecomment-288652354
https://github.com/psi4/psi4/issues/661#issuecomment-288652354:337,Deployability,install,installation,337,"ah ok, I remember that cfour needs an environmental variable to figure out the number of mpi threads. At the configure step of the source code one sets something like:; `configure [...] --with-mpirun=mpirun -np ${CFOUR_NUM_CORES}`. Not sure if this is just our configuration or if `CFOUR_NUM_CORES` is the default name described in some installation documentation. I see that `OMP_NUM_THREADS` is handled correctly with `env=lenv`, though I don't see it is being added to `lenv`.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/661#issuecomment-288652354
https://github.com/psi4/psi4/issues/661#issuecomment-288652354:52,Modifiability,variab,variable,52,"ah ok, I remember that cfour needs an environmental variable to figure out the number of mpi threads. At the configure step of the source code one sets something like:; `configure [...] --with-mpirun=mpirun -np ${CFOUR_NUM_CORES}`. Not sure if this is just our configuration or if `CFOUR_NUM_CORES` is the default name described in some installation documentation. I see that `OMP_NUM_THREADS` is handled correctly with `env=lenv`, though I don't see it is being added to `lenv`.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/661#issuecomment-288652354
https://github.com/psi4/psi4/issues/661#issuecomment-288652354:109,Modifiability,config,configure,109,"ah ok, I remember that cfour needs an environmental variable to figure out the number of mpi threads. At the configure step of the source code one sets something like:; `configure [...] --with-mpirun=mpirun -np ${CFOUR_NUM_CORES}`. Not sure if this is just our configuration or if `CFOUR_NUM_CORES` is the default name described in some installation documentation. I see that `OMP_NUM_THREADS` is handled correctly with `env=lenv`, though I don't see it is being added to `lenv`.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/661#issuecomment-288652354
https://github.com/psi4/psi4/issues/661#issuecomment-288652354:170,Modifiability,config,configure,170,"ah ok, I remember that cfour needs an environmental variable to figure out the number of mpi threads. At the configure step of the source code one sets something like:; `configure [...] --with-mpirun=mpirun -np ${CFOUR_NUM_CORES}`. Not sure if this is just our configuration or if `CFOUR_NUM_CORES` is the default name described in some installation documentation. I see that `OMP_NUM_THREADS` is handled correctly with `env=lenv`, though I don't see it is being added to `lenv`.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/661#issuecomment-288652354
https://github.com/psi4/psi4/issues/661#issuecomment-288652354:261,Modifiability,config,configuration,261,"ah ok, I remember that cfour needs an environmental variable to figure out the number of mpi threads. At the configure step of the source code one sets something like:; `configure [...] --with-mpirun=mpirun -np ${CFOUR_NUM_CORES}`. Not sure if this is just our configuration or if `CFOUR_NUM_CORES` is the default name described in some installation documentation. I see that `OMP_NUM_THREADS` is handled correctly with `env=lenv`, though I don't see it is being added to `lenv`.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/661#issuecomment-288652354
https://github.com/psi4/psi4/issues/661#issuecomment-289809443:294,Integrability,depend,depends,294,"From the cfour email chain today, it sounds like `CFOUR_NUM_CORES` is widespread. I'll add it to the whitelisted envvars. > export CFOUR_NUM_CORES=20; >; > From my experience I can say that using more than 4 processors will not increase performance and even sometimes the worse. Of course that depends also from the kind of computation (optimization, frequency, …).; > ; > Best regards,; > Alberto",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/661#issuecomment-289809443
https://github.com/psi4/psi4/issues/661#issuecomment-289809443:237,Performance,perform,performance,237,"From the cfour email chain today, it sounds like `CFOUR_NUM_CORES` is widespread. I'll add it to the whitelisted envvars. > export CFOUR_NUM_CORES=20; >; > From my experience I can say that using more than 4 processors will not increase performance and even sometimes the worse. Of course that depends also from the kind of computation (optimization, frequency, …).; > ; > Best regards,; > Alberto",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/661#issuecomment-289809443
https://github.com/psi4/psi4/issues/661#issuecomment-289809443:337,Performance,optimiz,optimization,337,"From the cfour email chain today, it sounds like `CFOUR_NUM_CORES` is widespread. I'll add it to the whitelisted envvars. > export CFOUR_NUM_CORES=20; >; > From my experience I can say that using more than 4 processors will not increase performance and even sometimes the worse. Of course that depends also from the kind of computation (optimization, frequency, …).; > ; > Best regards,; > Alberto",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/661#issuecomment-289809443
https://github.com/psi4/psi4/issues/662#issuecomment-288812442:30,Availability,redundant,redundant,30,"Haven't checked, but that's a redundant input, isn't it? `basis cc-pvdz` + `relativistic x2c` triggers the primary basis to decontract. That said, the answer in the docs for the x2c example is known wrong. Were you going to address that, @WDerricotte?. Let me know if I'm mistaken about any of this, as I don't run relativistic regularly. And if there's something that _should_ work, please make a test case of it so it will continue to work.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/662#issuecomment-288812442
https://github.com/psi4/psi4/issues/662#issuecomment-288812442:30,Safety,redund,redundant,30,"Haven't checked, but that's a redundant input, isn't it? `basis cc-pvdz` + `relativistic x2c` triggers the primary basis to decontract. That said, the answer in the docs for the x2c example is known wrong. Were you going to address that, @WDerricotte?. Let me know if I'm mistaken about any of this, as I don't run relativistic regularly. And if there's something that _should_ work, please make a test case of it so it will continue to work.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/662#issuecomment-288812442
https://github.com/psi4/psi4/issues/662#issuecomment-288812442:398,Testability,test,test,398,"Haven't checked, but that's a redundant input, isn't it? `basis cc-pvdz` + `relativistic x2c` triggers the primary basis to decontract. That said, the answer in the docs for the x2c example is known wrong. Were you going to address that, @WDerricotte?. Let me know if I'm mistaken about any of this, as I don't run relativistic regularly. And if there's something that _should_ work, please make a test case of it so it will continue to work.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/662#issuecomment-288812442
https://github.com/psi4/psi4/issues/662#issuecomment-288817347:73,Availability,redundant,redundant,73,"X2C doesn't decontract the basis by default so it is not automatically a redundant input. I'm getting the same error when trying to run X2C with a decontracted basis with the newest PSI4, I haven't run any X2C calculations in a while and was unaware of this issue. I'll look into this, making sure @fevangelista is also aware of this also.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/662#issuecomment-288817347
https://github.com/psi4/psi4/issues/662#issuecomment-288817347:111,Availability,error,error,111,"X2C doesn't decontract the basis by default so it is not automatically a redundant input. I'm getting the same error when trying to run X2C with a decontracted basis with the newest PSI4, I haven't run any X2C calculations in a while and was unaware of this issue. I'll look into this, making sure @fevangelista is also aware of this also.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/662#issuecomment-288817347
https://github.com/psi4/psi4/issues/662#issuecomment-288817347:73,Safety,redund,redundant,73,"X2C doesn't decontract the basis by default so it is not automatically a redundant input. I'm getting the same error when trying to run X2C with a decontracted basis with the newest PSI4, I haven't run any X2C calculations in a while and was unaware of this issue. I'll look into this, making sure @fevangelista is also aware of this also.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/662#issuecomment-288817347
https://github.com/psi4/psi4/issues/662#issuecomment-288820025:130,Testability,test,tests,130,"Thanks, @WDerricotte, I'm confused, as I expected this input (w/o ""-decon"") to work like https://github.com/psi4/psi4/blob/master/tests/x2c2/input.dat, which does trigger decontraction via `relativistic x2c`.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/662#issuecomment-288820025
https://github.com/psi4/psi4/issues/662#issuecomment-288839643:370,Energy Efficiency,energy,energy,370,"This input runs fine for HF, for me. Let me know if you need anything else. ```python; ref_nuc_energy = 5.176733562293478; ref_rel_energy = -100.10780818747669. molecule hf{; H; F 1 0.92; }. set {; scf_type pk; basis cc-pvdz-decon; basis_relativistic cc-pvdz-decon #Must Specify relativistic basis; #when using decontracted primary basis; relativistic x2c; }. testrel = energy('hf'). compare_values(ref_nuc_energy, hf.nuclear_repulsion_energy(), 9, ""Nuclear repulsion energy"") #TEST; compare_values(ref_rel_energy,testrel, 9, ""X2C relativistic SCF energy"") #TEST; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/662#issuecomment-288839643
https://github.com/psi4/psi4/issues/662#issuecomment-288839643:468,Energy Efficiency,energy,energy,468,"This input runs fine for HF, for me. Let me know if you need anything else. ```python; ref_nuc_energy = 5.176733562293478; ref_rel_energy = -100.10780818747669. molecule hf{; H; F 1 0.92; }. set {; scf_type pk; basis cc-pvdz-decon; basis_relativistic cc-pvdz-decon #Must Specify relativistic basis; #when using decontracted primary basis; relativistic x2c; }. testrel = energy('hf'). compare_values(ref_nuc_energy, hf.nuclear_repulsion_energy(), 9, ""Nuclear repulsion energy"") #TEST; compare_values(ref_rel_energy,testrel, 9, ""X2C relativistic SCF energy"") #TEST; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/662#issuecomment-288839643
https://github.com/psi4/psi4/issues/662#issuecomment-288839643:548,Energy Efficiency,energy,energy,548,"This input runs fine for HF, for me. Let me know if you need anything else. ```python; ref_nuc_energy = 5.176733562293478; ref_rel_energy = -100.10780818747669. molecule hf{; H; F 1 0.92; }. set {; scf_type pk; basis cc-pvdz-decon; basis_relativistic cc-pvdz-decon #Must Specify relativistic basis; #when using decontracted primary basis; relativistic x2c; }. testrel = energy('hf'). compare_values(ref_nuc_energy, hf.nuclear_repulsion_energy(), 9, ""Nuclear repulsion energy"") #TEST; compare_values(ref_rel_energy,testrel, 9, ""X2C relativistic SCF energy"") #TEST; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/662#issuecomment-288839643
https://github.com/psi4/psi4/issues/662#issuecomment-288839643:360,Testability,test,testrel,360,"This input runs fine for HF, for me. Let me know if you need anything else. ```python; ref_nuc_energy = 5.176733562293478; ref_rel_energy = -100.10780818747669. molecule hf{; H; F 1 0.92; }. set {; scf_type pk; basis cc-pvdz-decon; basis_relativistic cc-pvdz-decon #Must Specify relativistic basis; #when using decontracted primary basis; relativistic x2c; }. testrel = energy('hf'). compare_values(ref_nuc_energy, hf.nuclear_repulsion_energy(), 9, ""Nuclear repulsion energy"") #TEST; compare_values(ref_rel_energy,testrel, 9, ""X2C relativistic SCF energy"") #TEST; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/662#issuecomment-288839643
https://github.com/psi4/psi4/issues/662#issuecomment-288839643:478,Testability,TEST,TEST,478,"This input runs fine for HF, for me. Let me know if you need anything else. ```python; ref_nuc_energy = 5.176733562293478; ref_rel_energy = -100.10780818747669. molecule hf{; H; F 1 0.92; }. set {; scf_type pk; basis cc-pvdz-decon; basis_relativistic cc-pvdz-decon #Must Specify relativistic basis; #when using decontracted primary basis; relativistic x2c; }. testrel = energy('hf'). compare_values(ref_nuc_energy, hf.nuclear_repulsion_energy(), 9, ""Nuclear repulsion energy"") #TEST; compare_values(ref_rel_energy,testrel, 9, ""X2C relativistic SCF energy"") #TEST; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/662#issuecomment-288839643
https://github.com/psi4/psi4/issues/662#issuecomment-288839643:514,Testability,test,testrel,514,"This input runs fine for HF, for me. Let me know if you need anything else. ```python; ref_nuc_energy = 5.176733562293478; ref_rel_energy = -100.10780818747669. molecule hf{; H; F 1 0.92; }. set {; scf_type pk; basis cc-pvdz-decon; basis_relativistic cc-pvdz-decon #Must Specify relativistic basis; #when using decontracted primary basis; relativistic x2c; }. testrel = energy('hf'). compare_values(ref_nuc_energy, hf.nuclear_repulsion_energy(), 9, ""Nuclear repulsion energy"") #TEST; compare_values(ref_rel_energy,testrel, 9, ""X2C relativistic SCF energy"") #TEST; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/662#issuecomment-288839643
https://github.com/psi4/psi4/issues/662#issuecomment-288839643:558,Testability,TEST,TEST,558,"This input runs fine for HF, for me. Let me know if you need anything else. ```python; ref_nuc_energy = 5.176733562293478; ref_rel_energy = -100.10780818747669. molecule hf{; H; F 1 0.92; }. set {; scf_type pk; basis cc-pvdz-decon; basis_relativistic cc-pvdz-decon #Must Specify relativistic basis; #when using decontracted primary basis; relativistic x2c; }. testrel = energy('hf'). compare_values(ref_nuc_energy, hf.nuclear_repulsion_energy(), 9, ""Nuclear repulsion energy"") #TEST; compare_values(ref_rel_energy,testrel, 9, ""X2C relativistic SCF energy"") #TEST; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/662#issuecomment-288839643
https://github.com/psi4/psi4/issues/662#issuecomment-288839929:1441,Energy Efficiency,energy,energy,1441,"cts the `basis_relativistic` basis, which is used internally by x2c to solve the Dirac equation. This is the recommended procedure for basis sets like cc-pVXZ-DK. This table should help:. | `basis` | `basis_relativistic ` | Procedure | Good idea? |; | ------------- | ------------------- | ------------------------------------------------- |------------------- |; | cc-pVDZ-DK | | solve Dirac eq in cc-pVDZ-DK-decon basis/recontract to cc-pVDZ-DK| Yes, default |; | cc-pVDZ-DK | cc-pVDZ-DK-decon | Same as above | Option above is preferred |; | cc-pVDZ-DK | cc-pVDZ-DK | solve Dirac eq in cc-pVDZ-DK basis/return Hx2c in cc-pVDZ-DK basis| No, need to solve Dirac eq in decon basis to get accurate results |; | cc-pVDZ-DK-decon | | solve Dirac eq in cc-pVDZ-DK-decon basis/return Hx2c in cc-pVDZ-DK-decon basis| Yes, if you need high accuracy. Very expensive |; | cc-pVDZ-DK-decon | cc-pVDZ-DK-decon | Same as above| Option above is preferred |; | cc-pVDZ-DK-decon | cc-pVDZ-DK | solve Dirac eq in cc-pVDZ-DK basis/return Hx2c in cc-pVDZ-DK-decon basis| No, need to solve Dirac eq in decon basis to get accurate results |. My student Sam recently posted about this issue. This input should run:. ```; molecule {; H; F 1 0.92; }. set {; basis cc-pvdz-dk-decon; relativistic x2c; }. energy('hf'); ```; but fails on the python side. This is equivalent to this other input (which should also run):; ```; molecule {; H; F 1 0.92; }. set {; basis cc-pvdz-dk-decon; basis_relativistic cc-pvdz-dk-decon; relativistic x2c; }. energy('hf'); ```. @loriab ""That said, the answer in the docs for the x2c example is known wrong"". I have the fix, the example should read:; ```; molecule {; H; F 1 0.92; }. set {; scf_type pk; basis cc-pvdz; relativistic x2c; }. energy('hf'); ```. @jevandezande: If you are **not** interested in explicitly decontracting the basis the recommended way to run this input is:. ```; molecule {; H; F 1 0.92; }. set {; scf_type pk; basis cc-pvdz-dk; relativistic x2c; }. energy('hf'); ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/662#issuecomment-288839929
https://github.com/psi4/psi4/issues/662#issuecomment-288839929:1677,Energy Efficiency,energy,energy,1677,"cts the `basis_relativistic` basis, which is used internally by x2c to solve the Dirac equation. This is the recommended procedure for basis sets like cc-pVXZ-DK. This table should help:. | `basis` | `basis_relativistic ` | Procedure | Good idea? |; | ------------- | ------------------- | ------------------------------------------------- |------------------- |; | cc-pVDZ-DK | | solve Dirac eq in cc-pVDZ-DK-decon basis/recontract to cc-pVDZ-DK| Yes, default |; | cc-pVDZ-DK | cc-pVDZ-DK-decon | Same as above | Option above is preferred |; | cc-pVDZ-DK | cc-pVDZ-DK | solve Dirac eq in cc-pVDZ-DK basis/return Hx2c in cc-pVDZ-DK basis| No, need to solve Dirac eq in decon basis to get accurate results |; | cc-pVDZ-DK-decon | | solve Dirac eq in cc-pVDZ-DK-decon basis/return Hx2c in cc-pVDZ-DK-decon basis| Yes, if you need high accuracy. Very expensive |; | cc-pVDZ-DK-decon | cc-pVDZ-DK-decon | Same as above| Option above is preferred |; | cc-pVDZ-DK-decon | cc-pVDZ-DK | solve Dirac eq in cc-pVDZ-DK basis/return Hx2c in cc-pVDZ-DK-decon basis| No, need to solve Dirac eq in decon basis to get accurate results |. My student Sam recently posted about this issue. This input should run:. ```; molecule {; H; F 1 0.92; }. set {; basis cc-pvdz-dk-decon; relativistic x2c; }. energy('hf'); ```; but fails on the python side. This is equivalent to this other input (which should also run):; ```; molecule {; H; F 1 0.92; }. set {; basis cc-pvdz-dk-decon; basis_relativistic cc-pvdz-dk-decon; relativistic x2c; }. energy('hf'); ```. @loriab ""That said, the answer in the docs for the x2c example is known wrong"". I have the fix, the example should read:; ```; molecule {; H; F 1 0.92; }. set {; scf_type pk; basis cc-pvdz; relativistic x2c; }. energy('hf'); ```. @jevandezande: If you are **not** interested in explicitly decontracting the basis the recommended way to run this input is:. ```; molecule {; H; F 1 0.92; }. set {; scf_type pk; basis cc-pvdz-dk; relativistic x2c; }. energy('hf'); ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/662#issuecomment-288839929
https://github.com/psi4/psi4/issues/662#issuecomment-288839929:1907,Energy Efficiency,energy,energy,1907,"cts the `basis_relativistic` basis, which is used internally by x2c to solve the Dirac equation. This is the recommended procedure for basis sets like cc-pVXZ-DK. This table should help:. | `basis` | `basis_relativistic ` | Procedure | Good idea? |; | ------------- | ------------------- | ------------------------------------------------- |------------------- |; | cc-pVDZ-DK | | solve Dirac eq in cc-pVDZ-DK-decon basis/recontract to cc-pVDZ-DK| Yes, default |; | cc-pVDZ-DK | cc-pVDZ-DK-decon | Same as above | Option above is preferred |; | cc-pVDZ-DK | cc-pVDZ-DK | solve Dirac eq in cc-pVDZ-DK basis/return Hx2c in cc-pVDZ-DK basis| No, need to solve Dirac eq in decon basis to get accurate results |; | cc-pVDZ-DK-decon | | solve Dirac eq in cc-pVDZ-DK-decon basis/return Hx2c in cc-pVDZ-DK-decon basis| Yes, if you need high accuracy. Very expensive |; | cc-pVDZ-DK-decon | cc-pVDZ-DK-decon | Same as above| Option above is preferred |; | cc-pVDZ-DK-decon | cc-pVDZ-DK | solve Dirac eq in cc-pVDZ-DK basis/return Hx2c in cc-pVDZ-DK-decon basis| No, need to solve Dirac eq in decon basis to get accurate results |. My student Sam recently posted about this issue. This input should run:. ```; molecule {; H; F 1 0.92; }. set {; basis cc-pvdz-dk-decon; relativistic x2c; }. energy('hf'); ```; but fails on the python side. This is equivalent to this other input (which should also run):; ```; molecule {; H; F 1 0.92; }. set {; basis cc-pvdz-dk-decon; basis_relativistic cc-pvdz-dk-decon; relativistic x2c; }. energy('hf'); ```. @loriab ""That said, the answer in the docs for the x2c example is known wrong"". I have the fix, the example should read:; ```; molecule {; H; F 1 0.92; }. set {; scf_type pk; basis cc-pvdz; relativistic x2c; }. energy('hf'); ```. @jevandezande: If you are **not** interested in explicitly decontracting the basis the recommended way to run this input is:. ```; molecule {; H; F 1 0.92; }. set {; scf_type pk; basis cc-pvdz-dk; relativistic x2c; }. energy('hf'); ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/662#issuecomment-288839929
https://github.com/psi4/psi4/issues/662#issuecomment-288839929:2144,Energy Efficiency,energy,energy,2144,"cts the `basis_relativistic` basis, which is used internally by x2c to solve the Dirac equation. This is the recommended procedure for basis sets like cc-pVXZ-DK. This table should help:. | `basis` | `basis_relativistic ` | Procedure | Good idea? |; | ------------- | ------------------- | ------------------------------------------------- |------------------- |; | cc-pVDZ-DK | | solve Dirac eq in cc-pVDZ-DK-decon basis/recontract to cc-pVDZ-DK| Yes, default |; | cc-pVDZ-DK | cc-pVDZ-DK-decon | Same as above | Option above is preferred |; | cc-pVDZ-DK | cc-pVDZ-DK | solve Dirac eq in cc-pVDZ-DK basis/return Hx2c in cc-pVDZ-DK basis| No, need to solve Dirac eq in decon basis to get accurate results |; | cc-pVDZ-DK-decon | | solve Dirac eq in cc-pVDZ-DK-decon basis/return Hx2c in cc-pVDZ-DK-decon basis| Yes, if you need high accuracy. Very expensive |; | cc-pVDZ-DK-decon | cc-pVDZ-DK-decon | Same as above| Option above is preferred |; | cc-pVDZ-DK-decon | cc-pVDZ-DK | solve Dirac eq in cc-pVDZ-DK basis/return Hx2c in cc-pVDZ-DK-decon basis| No, need to solve Dirac eq in decon basis to get accurate results |. My student Sam recently posted about this issue. This input should run:. ```; molecule {; H; F 1 0.92; }. set {; basis cc-pvdz-dk-decon; relativistic x2c; }. energy('hf'); ```; but fails on the python side. This is equivalent to this other input (which should also run):; ```; molecule {; H; F 1 0.92; }. set {; basis cc-pvdz-dk-decon; basis_relativistic cc-pvdz-dk-decon; relativistic x2c; }. energy('hf'); ```. @loriab ""That said, the answer in the docs for the x2c example is known wrong"". I have the fix, the example should read:; ```; molecule {; H; F 1 0.92; }. set {; scf_type pk; basis cc-pvdz; relativistic x2c; }. energy('hf'); ```. @jevandezande: If you are **not** interested in explicitly decontracting the basis the recommended way to run this input is:. ```; molecule {; H; F 1 0.92; }. set {; scf_type pk; basis cc-pvdz-dk; relativistic x2c; }. energy('hf'); ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/662#issuecomment-288839929
https://github.com/psi4/psi4/issues/662#issuecomment-288840729:372,Availability,error,error,372,"In reply to @WDerricotte's last post. This runs on my laptop too. ```; basis cc-pvdz-decon; basis_relativistic cc-pvdz-decon; ```; but ; ```; basis cc-pvdz-dk-decon; basis_relativistic cc-pvdz-dk-decon; ```; does not. The second version (not working) should be the preferred one because the non-DK basis are not meant to be used for relativistic computations. This is the error that I get and it looks like a problem with DF, since if I add the keyword `scf_type = pk` it runs.; ```; CHE-FEVANGE-01I:x2c-double-decontract fevange$ psi4; Traceback (most recent call last):; File ""/Users/fevange/Source/psi4-fork-bin-Debug/bin/psi4"", line 247, in <module>; exec(content); File ""<string>"", line 29, in <module>; File ""/Users/fevange/Source/psi4-fork-bin-Debug/lib//psi4/driver/driver.py"", line 454, in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); File ""/Users/fevange/Source/psi4-fork-bin-Debug/lib//psi4/driver/procrouting/proc.py"", line 2794, in run_dft; scf_wfn = run_scf(name, **kwargs); File ""/Users/fevange/Source/psi4-fork-bin-Debug/lib//psi4/driver/procrouting/proc.py"", line 1938, in run_scf; scf_wfn = scf_helper(name, **kwargs); File ""/Users/fevange/Source/psi4-fork-bin-Debug/lib//psi4/driver/procrouting/proc.py"", line 1250, in scf_helper; scf_wfn = scf_wavefunction_factory(core.get_option('SCF', 'REFERENCE'), base_wfn); File ""/Users/fevange/Source/psi4-fork-bin-Debug/lib//psi4/driver/procrouting/proc.py"", line 1028, in scf_wavefunction_factory; puream=wfn.basisset().has_puream()); File ""/Users/fevange/Source/psi4-fork-bin-Debug/lib//psi4/driver/p4util/python_helpers.py"", line 64, in pybuild_basis; key, target, fitrole, other, return_atomlist=return_atomlist); File ""/Users/fevange/Source/psi4-fork-bin-Debug/lib//psi4/driver/qcdb/libmintsbasisset.py"", line 641, in pyconstruct; return_atomlist=return_atomlist); File ""/Users/fevange/Source/psi4-fork-bin-Debug/lib//psi4/driver/qcdb/libmintsbasisset.py"", line 742, in construct; tmp.append(c",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/662#issuecomment-288840729
https://github.com/psi4/psi4/issues/662#issuecomment-288840729:799,Energy Efficiency,energy,energy,799,"In reply to @WDerricotte's last post. This runs on my laptop too. ```; basis cc-pvdz-decon; basis_relativistic cc-pvdz-decon; ```; but ; ```; basis cc-pvdz-dk-decon; basis_relativistic cc-pvdz-dk-decon; ```; does not. The second version (not working) should be the preferred one because the non-DK basis are not meant to be used for relativistic computations. This is the error that I get and it looks like a problem with DF, since if I add the keyword `scf_type = pk` it runs.; ```; CHE-FEVANGE-01I:x2c-double-decontract fevange$ psi4; Traceback (most recent call last):; File ""/Users/fevange/Source/psi4-fork-bin-Debug/bin/psi4"", line 247, in <module>; exec(content); File ""<string>"", line 29, in <module>; File ""/Users/fevange/Source/psi4-fork-bin-Debug/lib//psi4/driver/driver.py"", line 454, in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); File ""/Users/fevange/Source/psi4-fork-bin-Debug/lib//psi4/driver/procrouting/proc.py"", line 2794, in run_dft; scf_wfn = run_scf(name, **kwargs); File ""/Users/fevange/Source/psi4-fork-bin-Debug/lib//psi4/driver/procrouting/proc.py"", line 1938, in run_scf; scf_wfn = scf_helper(name, **kwargs); File ""/Users/fevange/Source/psi4-fork-bin-Debug/lib//psi4/driver/procrouting/proc.py"", line 1250, in scf_helper; scf_wfn = scf_wavefunction_factory(core.get_option('SCF', 'REFERENCE'), base_wfn); File ""/Users/fevange/Source/psi4-fork-bin-Debug/lib//psi4/driver/procrouting/proc.py"", line 1028, in scf_wavefunction_factory; puream=wfn.basisset().has_puream()); File ""/Users/fevange/Source/psi4-fork-bin-Debug/lib//psi4/driver/p4util/python_helpers.py"", line 64, in pybuild_basis; key, target, fitrole, other, return_atomlist=return_atomlist); File ""/Users/fevange/Source/psi4-fork-bin-Debug/lib//psi4/driver/qcdb/libmintsbasisset.py"", line 641, in pyconstruct; return_atomlist=return_atomlist); File ""/Users/fevange/Source/psi4-fork-bin-Debug/lib//psi4/driver/qcdb/libmintsbasisset.py"", line 742, in construct; tmp.append(c",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/662#issuecomment-288840729
https://github.com/psi4/psi4/issues/662#issuecomment-288840729:825,Energy Efficiency,energy,energy,825,"In reply to @WDerricotte's last post. This runs on my laptop too. ```; basis cc-pvdz-decon; basis_relativistic cc-pvdz-decon; ```; but ; ```; basis cc-pvdz-dk-decon; basis_relativistic cc-pvdz-dk-decon; ```; does not. The second version (not working) should be the preferred one because the non-DK basis are not meant to be used for relativistic computations. This is the error that I get and it looks like a problem with DF, since if I add the keyword `scf_type = pk` it runs.; ```; CHE-FEVANGE-01I:x2c-double-decontract fevange$ psi4; Traceback (most recent call last):; File ""/Users/fevange/Source/psi4-fork-bin-Debug/bin/psi4"", line 247, in <module>; exec(content); File ""<string>"", line 29, in <module>; File ""/Users/fevange/Source/psi4-fork-bin-Debug/lib//psi4/driver/driver.py"", line 454, in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); File ""/Users/fevange/Source/psi4-fork-bin-Debug/lib//psi4/driver/procrouting/proc.py"", line 2794, in run_dft; scf_wfn = run_scf(name, **kwargs); File ""/Users/fevange/Source/psi4-fork-bin-Debug/lib//psi4/driver/procrouting/proc.py"", line 1938, in run_scf; scf_wfn = scf_helper(name, **kwargs); File ""/Users/fevange/Source/psi4-fork-bin-Debug/lib//psi4/driver/procrouting/proc.py"", line 1250, in scf_helper; scf_wfn = scf_wavefunction_factory(core.get_option('SCF', 'REFERENCE'), base_wfn); File ""/Users/fevange/Source/psi4-fork-bin-Debug/lib//psi4/driver/procrouting/proc.py"", line 1028, in scf_wavefunction_factory; puream=wfn.basisset().has_puream()); File ""/Users/fevange/Source/psi4-fork-bin-Debug/lib//psi4/driver/p4util/python_helpers.py"", line 64, in pybuild_basis; key, target, fitrole, other, return_atomlist=return_atomlist); File ""/Users/fevange/Source/psi4-fork-bin-Debug/lib//psi4/driver/qcdb/libmintsbasisset.py"", line 641, in pyconstruct; return_atomlist=return_atomlist); File ""/Users/fevange/Source/psi4-fork-bin-Debug/lib//psi4/driver/qcdb/libmintsbasisset.py"", line 742, in construct; tmp.append(c",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/662#issuecomment-288840729
https://github.com/psi4/psi4/issues/662#issuecomment-288846733:26,Usability,clear,clearly,26,"I see, thanks. This topic clearly needs a case list for me to work from. As I suspect you've kindly provided me one via The Table, I'll try to get them working simultaneously.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/662#issuecomment-288846733
https://github.com/psi4/psi4/issues/662#issuecomment-288920918:391,Integrability,depend,dependencies,391,"I am open to finding a way to force the user into using only the appropriate combinations of `basis`/`basis_relativistic` if that sounds like a more sensible choice. In principle it would be enough to eliminate the `basis_relativistic` option and always set `basis_relativistic` to a decontracted version of `basis`. However, this could be problematic when the decontracted basis has linear dependencies (I am working on this issue but I am currently slightly stuck/too busy).; The reason we have so many options was just for testing reasons, and to allow cases where `basis_relativistic` is a basis different from `basis` (e.g. to remove linear dependencies directly in the deconstructed basis). The HF example above should do. Once you address the Python issue I can run some checks. Beside external tests, there is at least one way to tell if things are internally consistent in psi4.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/662#issuecomment-288920918
https://github.com/psi4/psi4/issues/662#issuecomment-288920918:646,Integrability,depend,dependencies,646,"I am open to finding a way to force the user into using only the appropriate combinations of `basis`/`basis_relativistic` if that sounds like a more sensible choice. In principle it would be enough to eliminate the `basis_relativistic` option and always set `basis_relativistic` to a decontracted version of `basis`. However, this could be problematic when the decontracted basis has linear dependencies (I am working on this issue but I am currently slightly stuck/too busy).; The reason we have so many options was just for testing reasons, and to allow cases where `basis_relativistic` is a basis different from `basis` (e.g. to remove linear dependencies directly in the deconstructed basis). The HF example above should do. Once you address the Python issue I can run some checks. Beside external tests, there is at least one way to tell if things are internally consistent in psi4.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/662#issuecomment-288920918
https://github.com/psi4/psi4/issues/662#issuecomment-288920918:526,Testability,test,testing,526,"I am open to finding a way to force the user into using only the appropriate combinations of `basis`/`basis_relativistic` if that sounds like a more sensible choice. In principle it would be enough to eliminate the `basis_relativistic` option and always set `basis_relativistic` to a decontracted version of `basis`. However, this could be problematic when the decontracted basis has linear dependencies (I am working on this issue but I am currently slightly stuck/too busy).; The reason we have so many options was just for testing reasons, and to allow cases where `basis_relativistic` is a basis different from `basis` (e.g. to remove linear dependencies directly in the deconstructed basis). The HF example above should do. Once you address the Python issue I can run some checks. Beside external tests, there is at least one way to tell if things are internally consistent in psi4.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/662#issuecomment-288920918
https://github.com/psi4/psi4/issues/662#issuecomment-288920918:802,Testability,test,tests,802,"I am open to finding a way to force the user into using only the appropriate combinations of `basis`/`basis_relativistic` if that sounds like a more sensible choice. In principle it would be enough to eliminate the `basis_relativistic` option and always set `basis_relativistic` to a decontracted version of `basis`. However, this could be problematic when the decontracted basis has linear dependencies (I am working on this issue but I am currently slightly stuck/too busy).; The reason we have so many options was just for testing reasons, and to allow cases where `basis_relativistic` is a basis different from `basis` (e.g. to remove linear dependencies directly in the deconstructed basis). The HF example above should do. Once you address the Python issue I can run some checks. Beside external tests, there is at least one way to tell if things are internally consistent in psi4.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/662#issuecomment-288920918
https://github.com/psi4/psi4/issues/662#issuecomment-289018269:97,Integrability,contract,contracted,97,"There is at least one group that I know of that is working on developing basis sets specifically contracted for X2C computations. Thus, it may not be a good idea to automatically decontract the basis set.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/662#issuecomment-289018269
https://github.com/psi4/psi4/pull/665#issuecomment-290334388:262,Testability,test,tests,262,"Now that you made me think of it, you're right, they do not need to be always copied back. In addition, I don't think these files are so important that there needs to be a `KEEP` input keyword. I would rather copy them back ""by hand"" in the input script and the tests can serve as an example for the pattern. Is there a Python function to copy them back from scratch? I see [this](https://github.com/psi4/psi4/blob/master/psi4/driver/p4util/util.py#L436-L485) but then the namespace is ""mangled"" using UUID and I don't quite know how to get the full path to the execution directory.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/665#issuecomment-290334388
https://github.com/psi4/psi4/pull/665#issuecomment-291492708:103,Availability,recover,recover,103,"Sorry for taking such a long time on this. @loriab the `input.dat` in `pcmsolver/scf` now shows how to recover files from scratch:; ```python; pid = str(os.getpid()); scratch_dir = os.path.join(core.IOManager.shared_object().get_default_path(), 'psi.' + pid + '.pcmsolver'); pcm_save = reduce(lambda l1, l2 : l1 + l2, (glob.glob(t) for t in [scratch_dir + '*/' + x for x in ['cavity.off__' + pid, 'PEDRA.OUT__' + pid, 'cavity.npz']])); filter(lambda x : shutil.copy(x, psi4.extras.get_input_directory()), pcm_save); ```; Maybe it's an interesting bit for `p4util/util.py`.; The `input.dat` for the `pcmsolver/dipole` test now uses the `perturb_h`, `perturb_with` and `perturb_dipole` parameters. Surprise, surprise, the test is **failing**. After checking the PCM set up, basis, SCF start guess and all other obvious culprits, I found out that the nuclear energy is **different** from the one in the reference file. Do you and/or @andysim and/or @dgasmith have any idea why this could be?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/665#issuecomment-291492708
https://github.com/psi4/psi4/pull/665#issuecomment-291492708:286,Energy Efficiency,reduce,reduce,286,"Sorry for taking such a long time on this. @loriab the `input.dat` in `pcmsolver/scf` now shows how to recover files from scratch:; ```python; pid = str(os.getpid()); scratch_dir = os.path.join(core.IOManager.shared_object().get_default_path(), 'psi.' + pid + '.pcmsolver'); pcm_save = reduce(lambda l1, l2 : l1 + l2, (glob.glob(t) for t in [scratch_dir + '*/' + x for x in ['cavity.off__' + pid, 'PEDRA.OUT__' + pid, 'cavity.npz']])); filter(lambda x : shutil.copy(x, psi4.extras.get_input_directory()), pcm_save); ```; Maybe it's an interesting bit for `p4util/util.py`.; The `input.dat` for the `pcmsolver/dipole` test now uses the `perturb_h`, `perturb_with` and `perturb_dipole` parameters. Surprise, surprise, the test is **failing**. After checking the PCM set up, basis, SCF start guess and all other obvious culprits, I found out that the nuclear energy is **different** from the one in the reference file. Do you and/or @andysim and/or @dgasmith have any idea why this could be?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/665#issuecomment-291492708
https://github.com/psi4/psi4/pull/665#issuecomment-291492708:856,Energy Efficiency,energy,energy,856,"Sorry for taking such a long time on this. @loriab the `input.dat` in `pcmsolver/scf` now shows how to recover files from scratch:; ```python; pid = str(os.getpid()); scratch_dir = os.path.join(core.IOManager.shared_object().get_default_path(), 'psi.' + pid + '.pcmsolver'); pcm_save = reduce(lambda l1, l2 : l1 + l2, (glob.glob(t) for t in [scratch_dir + '*/' + x for x in ['cavity.off__' + pid, 'PEDRA.OUT__' + pid, 'cavity.npz']])); filter(lambda x : shutil.copy(x, psi4.extras.get_input_directory()), pcm_save); ```; Maybe it's an interesting bit for `p4util/util.py`.; The `input.dat` for the `pcmsolver/dipole` test now uses the `perturb_h`, `perturb_with` and `perturb_dipole` parameters. Surprise, surprise, the test is **failing**. After checking the PCM set up, basis, SCF start guess and all other obvious culprits, I found out that the nuclear energy is **different** from the one in the reference file. Do you and/or @andysim and/or @dgasmith have any idea why this could be?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/665#issuecomment-291492708
https://github.com/psi4/psi4/pull/665#issuecomment-291492708:103,Safety,recover,recover,103,"Sorry for taking such a long time on this. @loriab the `input.dat` in `pcmsolver/scf` now shows how to recover files from scratch:; ```python; pid = str(os.getpid()); scratch_dir = os.path.join(core.IOManager.shared_object().get_default_path(), 'psi.' + pid + '.pcmsolver'); pcm_save = reduce(lambda l1, l2 : l1 + l2, (glob.glob(t) for t in [scratch_dir + '*/' + x for x in ['cavity.off__' + pid, 'PEDRA.OUT__' + pid, 'cavity.npz']])); filter(lambda x : shutil.copy(x, psi4.extras.get_input_directory()), pcm_save); ```; Maybe it's an interesting bit for `p4util/util.py`.; The `input.dat` for the `pcmsolver/dipole` test now uses the `perturb_h`, `perturb_with` and `perturb_dipole` parameters. Surprise, surprise, the test is **failing**. After checking the PCM set up, basis, SCF start guess and all other obvious culprits, I found out that the nuclear energy is **different** from the one in the reference file. Do you and/or @andysim and/or @dgasmith have any idea why this could be?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/665#issuecomment-291492708
https://github.com/psi4/psi4/pull/665#issuecomment-291492708:617,Testability,test,test,617,"Sorry for taking such a long time on this. @loriab the `input.dat` in `pcmsolver/scf` now shows how to recover files from scratch:; ```python; pid = str(os.getpid()); scratch_dir = os.path.join(core.IOManager.shared_object().get_default_path(), 'psi.' + pid + '.pcmsolver'); pcm_save = reduce(lambda l1, l2 : l1 + l2, (glob.glob(t) for t in [scratch_dir + '*/' + x for x in ['cavity.off__' + pid, 'PEDRA.OUT__' + pid, 'cavity.npz']])); filter(lambda x : shutil.copy(x, psi4.extras.get_input_directory()), pcm_save); ```; Maybe it's an interesting bit for `p4util/util.py`.; The `input.dat` for the `pcmsolver/dipole` test now uses the `perturb_h`, `perturb_with` and `perturb_dipole` parameters. Surprise, surprise, the test is **failing**. After checking the PCM set up, basis, SCF start guess and all other obvious culprits, I found out that the nuclear energy is **different** from the one in the reference file. Do you and/or @andysim and/or @dgasmith have any idea why this could be?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/665#issuecomment-291492708
https://github.com/psi4/psi4/pull/665#issuecomment-291492708:720,Testability,test,test,720,"Sorry for taking such a long time on this. @loriab the `input.dat` in `pcmsolver/scf` now shows how to recover files from scratch:; ```python; pid = str(os.getpid()); scratch_dir = os.path.join(core.IOManager.shared_object().get_default_path(), 'psi.' + pid + '.pcmsolver'); pcm_save = reduce(lambda l1, l2 : l1 + l2, (glob.glob(t) for t in [scratch_dir + '*/' + x for x in ['cavity.off__' + pid, 'PEDRA.OUT__' + pid, 'cavity.npz']])); filter(lambda x : shutil.copy(x, psi4.extras.get_input_directory()), pcm_save); ```; Maybe it's an interesting bit for `p4util/util.py`.; The `input.dat` for the `pcmsolver/dipole` test now uses the `perturb_h`, `perturb_with` and `perturb_dipole` parameters. Surprise, surprise, the test is **failing**. After checking the PCM set up, basis, SCF start guess and all other obvious culprits, I found out that the nuclear energy is **different** from the one in the reference file. Do you and/or @andysim and/or @dgasmith have any idea why this could be?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/665#issuecomment-291492708
https://github.com/psi4/psi4/pull/665#issuecomment-291542176:50,Energy Efficiency,energy,energy,50,"@robertodr , #668 corrected the nuclear repulsion energy, which didn't feel the effect of a field before (and it should). I missed the fact that there's a PCM test that uses the `perturb_h` machinery, so I didn't fix the test. Sorry about that. [This](https://github.com/psi4/psi4/blob/master/tests/props1/input.dat) test does essentially the same thing that you do in the dipole test. Because the NRE now feels the applied field, you can just remove the nuclear_dipole terms entirely (that function still exists, but now lives in molecule). The `perturb_with` syntax will work, but will be deprecated. Please change it to `perturb_with dipole` and `perturb_dipole [0, 0, $l]` as in the test case that I linked. Sorry for the confusion!",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/665#issuecomment-291542176
https://github.com/psi4/psi4/pull/665#issuecomment-291542176:159,Testability,test,test,159,"@robertodr , #668 corrected the nuclear repulsion energy, which didn't feel the effect of a field before (and it should). I missed the fact that there's a PCM test that uses the `perturb_h` machinery, so I didn't fix the test. Sorry about that. [This](https://github.com/psi4/psi4/blob/master/tests/props1/input.dat) test does essentially the same thing that you do in the dipole test. Because the NRE now feels the applied field, you can just remove the nuclear_dipole terms entirely (that function still exists, but now lives in molecule). The `perturb_with` syntax will work, but will be deprecated. Please change it to `perturb_with dipole` and `perturb_dipole [0, 0, $l]` as in the test case that I linked. Sorry for the confusion!",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/665#issuecomment-291542176
https://github.com/psi4/psi4/pull/665#issuecomment-291542176:221,Testability,test,test,221,"@robertodr , #668 corrected the nuclear repulsion energy, which didn't feel the effect of a field before (and it should). I missed the fact that there's a PCM test that uses the `perturb_h` machinery, so I didn't fix the test. Sorry about that. [This](https://github.com/psi4/psi4/blob/master/tests/props1/input.dat) test does essentially the same thing that you do in the dipole test. Because the NRE now feels the applied field, you can just remove the nuclear_dipole terms entirely (that function still exists, but now lives in molecule). The `perturb_with` syntax will work, but will be deprecated. Please change it to `perturb_with dipole` and `perturb_dipole [0, 0, $l]` as in the test case that I linked. Sorry for the confusion!",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/665#issuecomment-291542176
https://github.com/psi4/psi4/pull/665#issuecomment-291542176:293,Testability,test,tests,293,"@robertodr , #668 corrected the nuclear repulsion energy, which didn't feel the effect of a field before (and it should). I missed the fact that there's a PCM test that uses the `perturb_h` machinery, so I didn't fix the test. Sorry about that. [This](https://github.com/psi4/psi4/blob/master/tests/props1/input.dat) test does essentially the same thing that you do in the dipole test. Because the NRE now feels the applied field, you can just remove the nuclear_dipole terms entirely (that function still exists, but now lives in molecule). The `perturb_with` syntax will work, but will be deprecated. Please change it to `perturb_with dipole` and `perturb_dipole [0, 0, $l]` as in the test case that I linked. Sorry for the confusion!",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/665#issuecomment-291542176
https://github.com/psi4/psi4/pull/665#issuecomment-291542176:317,Testability,test,test,317,"@robertodr , #668 corrected the nuclear repulsion energy, which didn't feel the effect of a field before (and it should). I missed the fact that there's a PCM test that uses the `perturb_h` machinery, so I didn't fix the test. Sorry about that. [This](https://github.com/psi4/psi4/blob/master/tests/props1/input.dat) test does essentially the same thing that you do in the dipole test. Because the NRE now feels the applied field, you can just remove the nuclear_dipole terms entirely (that function still exists, but now lives in molecule). The `perturb_with` syntax will work, but will be deprecated. Please change it to `perturb_with dipole` and `perturb_dipole [0, 0, $l]` as in the test case that I linked. Sorry for the confusion!",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/665#issuecomment-291542176
https://github.com/psi4/psi4/pull/665#issuecomment-291542176:380,Testability,test,test,380,"@robertodr , #668 corrected the nuclear repulsion energy, which didn't feel the effect of a field before (and it should). I missed the fact that there's a PCM test that uses the `perturb_h` machinery, so I didn't fix the test. Sorry about that. [This](https://github.com/psi4/psi4/blob/master/tests/props1/input.dat) test does essentially the same thing that you do in the dipole test. Because the NRE now feels the applied field, you can just remove the nuclear_dipole terms entirely (that function still exists, but now lives in molecule). The `perturb_with` syntax will work, but will be deprecated. Please change it to `perturb_with dipole` and `perturb_dipole [0, 0, $l]` as in the test case that I linked. Sorry for the confusion!",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/665#issuecomment-291542176
https://github.com/psi4/psi4/pull/665#issuecomment-291542176:687,Testability,test,test,687,"@robertodr , #668 corrected the nuclear repulsion energy, which didn't feel the effect of a field before (and it should). I missed the fact that there's a PCM test that uses the `perturb_h` machinery, so I didn't fix the test. Sorry about that. [This](https://github.com/psi4/psi4/blob/master/tests/props1/input.dat) test does essentially the same thing that you do in the dipole test. Because the NRE now feels the applied field, you can just remove the nuclear_dipole terms entirely (that function still exists, but now lives in molecule). The `perturb_with` syntax will work, but will be deprecated. Please change it to `perturb_with dipole` and `perturb_dipole [0, 0, $l]` as in the test case that I linked. Sorry for the confusion!",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/665#issuecomment-291542176
https://github.com/psi4/psi4/pull/665#issuecomment-291544765:60,Deployability,update,updated,60,"No problem @andysim It was just, as you say, confusing! The updated `input.dat` is basically [`tests/props1/input.dat`](https://github.com/psi4/psi4/blob/master/tests/props1/input.dat) with CPCM for HF and KS-B3LYP. I will just update the `output.ref` and this one in ready to go :wink:",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/665#issuecomment-291544765
https://github.com/psi4/psi4/pull/665#issuecomment-291544765:228,Deployability,update,update,228,"No problem @andysim It was just, as you say, confusing! The updated `input.dat` is basically [`tests/props1/input.dat`](https://github.com/psi4/psi4/blob/master/tests/props1/input.dat) with CPCM for HF and KS-B3LYP. I will just update the `output.ref` and this one in ready to go :wink:",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/665#issuecomment-291544765
https://github.com/psi4/psi4/pull/665#issuecomment-291544765:95,Testability,test,tests,95,"No problem @andysim It was just, as you say, confusing! The updated `input.dat` is basically [`tests/props1/input.dat`](https://github.com/psi4/psi4/blob/master/tests/props1/input.dat) with CPCM for HF and KS-B3LYP. I will just update the `output.ref` and this one in ready to go :wink:",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/665#issuecomment-291544765
https://github.com/psi4/psi4/pull/665#issuecomment-291544765:161,Testability,test,tests,161,"No problem @andysim It was just, as you say, confusing! The updated `input.dat` is basically [`tests/props1/input.dat`](https://github.com/psi4/psi4/blob/master/tests/props1/input.dat) with CPCM for HF and KS-B3LYP. I will just update the `output.ref` and this one in ready to go :wink:",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/665#issuecomment-291544765
https://github.com/psi4/psi4/pull/668#issuecomment-290245019:93,Modifiability,variab,variable,93,"My latest fix raises yet another problem: if the user requests `set scf perturb_h true`, the variable is invisible to `findif`, while `set perturb_h true` is just fine. Perhaps we should strongly suggest that people don't scope their options in future?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/668#issuecomment-290245019
https://github.com/psi4/psi4/pull/668#issuecomment-290552256:61,Usability,feedback,feedback,61,"Ok, I think this one is ready for review now. Thanks for the feedback @loriab",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/668#issuecomment-290552256
https://github.com/psi4/psi4/pull/668#issuecomment-290934458:31,Testability,test,test,31,"Good idea about the asymmetric test, @loriab . I think mintshelper handles the case where the field breaks symmetry, but it would be nice to have a C1 symmetry test that has a [1,1,1] field applied, to test all components of the dipole derivatives in case they get broken at some point (only z components are tested now, for speed, but I have verified the other components manually). We can think about these in the next phase, where some code (mintshelper?) will provide the matrices of dipole derivatives for @psi-rking to use in the IR intensities.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/668#issuecomment-290934458
https://github.com/psi4/psi4/pull/668#issuecomment-290934458:160,Testability,test,test,160,"Good idea about the asymmetric test, @loriab . I think mintshelper handles the case where the field breaks symmetry, but it would be nice to have a C1 symmetry test that has a [1,1,1] field applied, to test all components of the dipole derivatives in case they get broken at some point (only z components are tested now, for speed, but I have verified the other components manually). We can think about these in the next phase, where some code (mintshelper?) will provide the matrices of dipole derivatives for @psi-rking to use in the IR intensities.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/668#issuecomment-290934458
https://github.com/psi4/psi4/pull/668#issuecomment-290934458:202,Testability,test,test,202,"Good idea about the asymmetric test, @loriab . I think mintshelper handles the case where the field breaks symmetry, but it would be nice to have a C1 symmetry test that has a [1,1,1] field applied, to test all components of the dipole derivatives in case they get broken at some point (only z components are tested now, for speed, but I have verified the other components manually). We can think about these in the next phase, where some code (mintshelper?) will provide the matrices of dipole derivatives for @psi-rking to use in the IR intensities.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/668#issuecomment-290934458
https://github.com/psi4/psi4/pull/668#issuecomment-290934458:309,Testability,test,tested,309,"Good idea about the asymmetric test, @loriab . I think mintshelper handles the case where the field breaks symmetry, but it would be nice to have a C1 symmetry test that has a [1,1,1] field applied, to test all components of the dipole derivatives in case they get broken at some point (only z components are tested now, for speed, but I have verified the other components manually). We can think about these in the next phase, where some code (mintshelper?) will provide the matrices of dipole derivatives for @psi-rking to use in the IR intensities.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/668#issuecomment-290934458
https://github.com/psi4/psi4/issues/669#issuecomment-290459005:78,Deployability,patch,patched,78,"Looks like we missed a `os.path.abspath` somewhere. This should be able to be patched up, ill dig through the code when I get a chance.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/669#issuecomment-290459005
https://github.com/psi4/psi4/pull/670#issuecomment-290936022:596,Deployability,update,update,596,"This is fantastic, Ashutosh. I think you may have forgotten to activate the test, which can be done by adding cc13d to [this line](https://github.com/psi4/psi4/blob/master/tests/CMakeLists.txt#L40) in CMakeLists.txt of the tests. Apart from that, I think removing the 3pt finite difference test would be a good idea (there's nothing the 3pt test would catch that the 5pt finite difference test below wouldn't, unless I'm missing something). After that, if you could follow [these directions](http://www.psicode.org/psi4manual/master/build_obtaining.html#what-is-the-suggested-github-workflow) to update your branch, I suggest to @loriab , @jturney and @dgasmith that we pull this one in next (sorry for leapfrogging the Simint PR, Lori).",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/670#issuecomment-290936022
https://github.com/psi4/psi4/pull/670#issuecomment-290936022:76,Testability,test,test,76,"This is fantastic, Ashutosh. I think you may have forgotten to activate the test, which can be done by adding cc13d to [this line](https://github.com/psi4/psi4/blob/master/tests/CMakeLists.txt#L40) in CMakeLists.txt of the tests. Apart from that, I think removing the 3pt finite difference test would be a good idea (there's nothing the 3pt test would catch that the 5pt finite difference test below wouldn't, unless I'm missing something). After that, if you could follow [these directions](http://www.psicode.org/psi4manual/master/build_obtaining.html#what-is-the-suggested-github-workflow) to update your branch, I suggest to @loriab , @jturney and @dgasmith that we pull this one in next (sorry for leapfrogging the Simint PR, Lori).",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/670#issuecomment-290936022
https://github.com/psi4/psi4/pull/670#issuecomment-290936022:172,Testability,test,tests,172,"This is fantastic, Ashutosh. I think you may have forgotten to activate the test, which can be done by adding cc13d to [this line](https://github.com/psi4/psi4/blob/master/tests/CMakeLists.txt#L40) in CMakeLists.txt of the tests. Apart from that, I think removing the 3pt finite difference test would be a good idea (there's nothing the 3pt test would catch that the 5pt finite difference test below wouldn't, unless I'm missing something). After that, if you could follow [these directions](http://www.psicode.org/psi4manual/master/build_obtaining.html#what-is-the-suggested-github-workflow) to update your branch, I suggest to @loriab , @jturney and @dgasmith that we pull this one in next (sorry for leapfrogging the Simint PR, Lori).",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/670#issuecomment-290936022
https://github.com/psi4/psi4/pull/670#issuecomment-290936022:223,Testability,test,tests,223,"This is fantastic, Ashutosh. I think you may have forgotten to activate the test, which can be done by adding cc13d to [this line](https://github.com/psi4/psi4/blob/master/tests/CMakeLists.txt#L40) in CMakeLists.txt of the tests. Apart from that, I think removing the 3pt finite difference test would be a good idea (there's nothing the 3pt test would catch that the 5pt finite difference test below wouldn't, unless I'm missing something). After that, if you could follow [these directions](http://www.psicode.org/psi4manual/master/build_obtaining.html#what-is-the-suggested-github-workflow) to update your branch, I suggest to @loriab , @jturney and @dgasmith that we pull this one in next (sorry for leapfrogging the Simint PR, Lori).",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/670#issuecomment-290936022
https://github.com/psi4/psi4/pull/670#issuecomment-290936022:290,Testability,test,test,290,"This is fantastic, Ashutosh. I think you may have forgotten to activate the test, which can be done by adding cc13d to [this line](https://github.com/psi4/psi4/blob/master/tests/CMakeLists.txt#L40) in CMakeLists.txt of the tests. Apart from that, I think removing the 3pt finite difference test would be a good idea (there's nothing the 3pt test would catch that the 5pt finite difference test below wouldn't, unless I'm missing something). After that, if you could follow [these directions](http://www.psicode.org/psi4manual/master/build_obtaining.html#what-is-the-suggested-github-workflow) to update your branch, I suggest to @loriab , @jturney and @dgasmith that we pull this one in next (sorry for leapfrogging the Simint PR, Lori).",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/670#issuecomment-290936022
https://github.com/psi4/psi4/pull/670#issuecomment-290936022:341,Testability,test,test,341,"This is fantastic, Ashutosh. I think you may have forgotten to activate the test, which can be done by adding cc13d to [this line](https://github.com/psi4/psi4/blob/master/tests/CMakeLists.txt#L40) in CMakeLists.txt of the tests. Apart from that, I think removing the 3pt finite difference test would be a good idea (there's nothing the 3pt test would catch that the 5pt finite difference test below wouldn't, unless I'm missing something). After that, if you could follow [these directions](http://www.psicode.org/psi4manual/master/build_obtaining.html#what-is-the-suggested-github-workflow) to update your branch, I suggest to @loriab , @jturney and @dgasmith that we pull this one in next (sorry for leapfrogging the Simint PR, Lori).",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/670#issuecomment-290936022
https://github.com/psi4/psi4/pull/670#issuecomment-290936022:389,Testability,test,test,389,"This is fantastic, Ashutosh. I think you may have forgotten to activate the test, which can be done by adding cc13d to [this line](https://github.com/psi4/psi4/blob/master/tests/CMakeLists.txt#L40) in CMakeLists.txt of the tests. Apart from that, I think removing the 3pt finite difference test would be a good idea (there's nothing the 3pt test would catch that the 5pt finite difference test below wouldn't, unless I'm missing something). After that, if you could follow [these directions](http://www.psicode.org/psi4manual/master/build_obtaining.html#what-is-the-suggested-github-workflow) to update your branch, I suggest to @loriab , @jturney and @dgasmith that we pull this one in next (sorry for leapfrogging the Simint PR, Lori).",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/670#issuecomment-290936022
https://github.com/psi4/psi4/pull/670#issuecomment-290947009:15,Usability,feedback,feedback,15,Thanks for the feedback @andysim I have made the changes that you suggested and I think its ready to be merged now.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/670#issuecomment-290947009
https://github.com/psi4/psi4/pull/670#issuecomment-291047408:16,Usability,clear,clear,16,"Sorry, I wasn't clear. Either cc2 is under select control, in which case the notes_c section is needed, the select_cc2_gradient fn should come back and a select_cc2 fn should be added. Or, cc2 _not_ under select control, the notes_c can be removed, and the procedures table should direct cc2 calcs to run_ccenergy and run_ccenergy_gradient (or the appropriate non-select fn). It's not a good idea to have cc2 calcs directed toward select_ccsd. Sorry about the confusion.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/670#issuecomment-291047408
https://github.com/psi4/psi4/issues/671#issuecomment-305371763:69,Integrability,depend,depending,69,"Hmm, I do think we rely on `export OMP_NESTED=""FALSE` in some places depending on the scheme involved. Would there be a good place to add this to the docs?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/671#issuecomment-305371763
https://github.com/psi4/psi4/issues/671#issuecomment-305372235:70,Modifiability,variab,variables,70,[Here](http://psicode.org/psi4manual/master/external.html#environment-variables) maybe (compiled)? Can edit it directly with the pencil icon.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/671#issuecomment-305372235
https://github.com/psi4/psi4/issues/673#issuecomment-291010281:209,Usability,learn,learn,209,"I must admit, I was a bit surprised by the effect of changing the value of dft_spherical_points by 1! Undefined behaviour is never good!. I've never submitted a pull request before but it's something i should learn to do. Are there any simple tutorials on how to do this? Should I fork my own version and do a PR from that?. I'll see if I can work it out and submit one shortly...",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/673#issuecomment-291010281
https://github.com/psi4/psi4/issues/673#issuecomment-291010281:236,Usability,simpl,simple,236,"I must admit, I was a bit surprised by the effect of changing the value of dft_spherical_points by 1! Undefined behaviour is never good!. I've never submitted a pull request before but it's something i should learn to do. Are there any simple tutorials on how to do this? Should I fork my own version and do a PR from that?. I'll see if I can work it out and submit one shortly...",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/673#issuecomment-291010281
https://github.com/psi4/psi4/issues/673#issuecomment-291011776:19,Usability,guid,guide,19,"Sure, see if [this guide](http://psicode.org/psi4manual/master/build_obtaining.html#faq-githubworkflow) helps. You'll probably only need the first of the two slides. And we're glad to consult. Thanks for noticing this problem.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/673#issuecomment-291011776
https://github.com/psi4/psi4/issues/675#issuecomment-291237788:494,Availability,error,error,494,"Certainly doesn't look correct... maybe one of the team knows exactly what; this is coming from. Seems like a required library that psi4 expects to be; installed is not installed (or not installed in the expected location). On Mon, Apr 3, 2017 at 2:44 PM, tanorjb <notifications@github.com> wrote:. > Hello,; >; > I am working on a university project and want to confirm that Psi4 is; > running correctly. When I run the test that the binary installation guide; > specifies I get the following error:; >; > [image: image]; > <https://cloud.githubusercontent.com/assets/26287438/24625066/cd1d8af4-187b-11e7-8cf9-ff6d285895e3.png>; >; > —; > You are receiving this because you are subscribed to this thread.; > Reply to this email directly, view it on GitHub; > <https://github.com/psi4/psi4/issues/675>, or mute the thread; > <https://github.com/notifications/unsubscribe-auth/AC9QdhTNc393EsuLqC8YxKtbTATrTkzZks5rsT35gaJpZM4Mx72O>; > .; >",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/675#issuecomment-291237788
https://github.com/psi4/psi4/issues/675#issuecomment-291237788:152,Deployability,install,installed,152,"Certainly doesn't look correct... maybe one of the team knows exactly what; this is coming from. Seems like a required library that psi4 expects to be; installed is not installed (or not installed in the expected location). On Mon, Apr 3, 2017 at 2:44 PM, tanorjb <notifications@github.com> wrote:. > Hello,; >; > I am working on a university project and want to confirm that Psi4 is; > running correctly. When I run the test that the binary installation guide; > specifies I get the following error:; >; > [image: image]; > <https://cloud.githubusercontent.com/assets/26287438/24625066/cd1d8af4-187b-11e7-8cf9-ff6d285895e3.png>; >; > —; > You are receiving this because you are subscribed to this thread.; > Reply to this email directly, view it on GitHub; > <https://github.com/psi4/psi4/issues/675>, or mute the thread; > <https://github.com/notifications/unsubscribe-auth/AC9QdhTNc393EsuLqC8YxKtbTATrTkzZks5rsT35gaJpZM4Mx72O>; > .; >",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/675#issuecomment-291237788
https://github.com/psi4/psi4/issues/675#issuecomment-291237788:169,Deployability,install,installed,169,"Certainly doesn't look correct... maybe one of the team knows exactly what; this is coming from. Seems like a required library that psi4 expects to be; installed is not installed (or not installed in the expected location). On Mon, Apr 3, 2017 at 2:44 PM, tanorjb <notifications@github.com> wrote:. > Hello,; >; > I am working on a university project and want to confirm that Psi4 is; > running correctly. When I run the test that the binary installation guide; > specifies I get the following error:; >; > [image: image]; > <https://cloud.githubusercontent.com/assets/26287438/24625066/cd1d8af4-187b-11e7-8cf9-ff6d285895e3.png>; >; > —; > You are receiving this because you are subscribed to this thread.; > Reply to this email directly, view it on GitHub; > <https://github.com/psi4/psi4/issues/675>, or mute the thread; > <https://github.com/notifications/unsubscribe-auth/AC9QdhTNc393EsuLqC8YxKtbTATrTkzZks5rsT35gaJpZM4Mx72O>; > .; >",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/675#issuecomment-291237788
https://github.com/psi4/psi4/issues/675#issuecomment-291237788:187,Deployability,install,installed,187,"Certainly doesn't look correct... maybe one of the team knows exactly what; this is coming from. Seems like a required library that psi4 expects to be; installed is not installed (or not installed in the expected location). On Mon, Apr 3, 2017 at 2:44 PM, tanorjb <notifications@github.com> wrote:. > Hello,; >; > I am working on a university project and want to confirm that Psi4 is; > running correctly. When I run the test that the binary installation guide; > specifies I get the following error:; >; > [image: image]; > <https://cloud.githubusercontent.com/assets/26287438/24625066/cd1d8af4-187b-11e7-8cf9-ff6d285895e3.png>; >; > —; > You are receiving this because you are subscribed to this thread.; > Reply to this email directly, view it on GitHub; > <https://github.com/psi4/psi4/issues/675>, or mute the thread; > <https://github.com/notifications/unsubscribe-auth/AC9QdhTNc393EsuLqC8YxKtbTATrTkzZks5rsT35gaJpZM4Mx72O>; > .; >",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/675#issuecomment-291237788
https://github.com/psi4/psi4/issues/675#issuecomment-291237788:442,Deployability,install,installation,442,"Certainly doesn't look correct... maybe one of the team knows exactly what; this is coming from. Seems like a required library that psi4 expects to be; installed is not installed (or not installed in the expected location). On Mon, Apr 3, 2017 at 2:44 PM, tanorjb <notifications@github.com> wrote:. > Hello,; >; > I am working on a university project and want to confirm that Psi4 is; > running correctly. When I run the test that the binary installation guide; > specifies I get the following error:; >; > [image: image]; > <https://cloud.githubusercontent.com/assets/26287438/24625066/cd1d8af4-187b-11e7-8cf9-ff6d285895e3.png>; >; > —; > You are receiving this because you are subscribed to this thread.; > Reply to this email directly, view it on GitHub; > <https://github.com/psi4/psi4/issues/675>, or mute the thread; > <https://github.com/notifications/unsubscribe-auth/AC9QdhTNc393EsuLqC8YxKtbTATrTkzZks5rsT35gaJpZM4Mx72O>; > .; >",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/675#issuecomment-291237788
https://github.com/psi4/psi4/issues/675#issuecomment-291237788:421,Testability,test,test,421,"Certainly doesn't look correct... maybe one of the team knows exactly what; this is coming from. Seems like a required library that psi4 expects to be; installed is not installed (or not installed in the expected location). On Mon, Apr 3, 2017 at 2:44 PM, tanorjb <notifications@github.com> wrote:. > Hello,; >; > I am working on a university project and want to confirm that Psi4 is; > running correctly. When I run the test that the binary installation guide; > specifies I get the following error:; >; > [image: image]; > <https://cloud.githubusercontent.com/assets/26287438/24625066/cd1d8af4-187b-11e7-8cf9-ff6d285895e3.png>; >; > —; > You are receiving this because you are subscribed to this thread.; > Reply to this email directly, view it on GitHub; > <https://github.com/psi4/psi4/issues/675>, or mute the thread; > <https://github.com/notifications/unsubscribe-auth/AC9QdhTNc393EsuLqC8YxKtbTATrTkzZks5rsT35gaJpZM4Mx72O>; > .; >",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/675#issuecomment-291237788
https://github.com/psi4/psi4/issues/675#issuecomment-291237788:455,Usability,guid,guide,455,"Certainly doesn't look correct... maybe one of the team knows exactly what; this is coming from. Seems like a required library that psi4 expects to be; installed is not installed (or not installed in the expected location). On Mon, Apr 3, 2017 at 2:44 PM, tanorjb <notifications@github.com> wrote:. > Hello,; >; > I am working on a university project and want to confirm that Psi4 is; > running correctly. When I run the test that the binary installation guide; > specifies I get the following error:; >; > [image: image]; > <https://cloud.githubusercontent.com/assets/26287438/24625066/cd1d8af4-187b-11e7-8cf9-ff6d285895e3.png>; >; > —; > You are receiving this because you are subscribed to this thread.; > Reply to this email directly, view it on GitHub; > <https://github.com/psi4/psi4/issues/675>, or mute the thread; > <https://github.com/notifications/unsubscribe-auth/AC9QdhTNc393EsuLqC8YxKtbTATrTkzZks5rsT35gaJpZM4Mx72O>; > .; >",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/675#issuecomment-291237788
https://github.com/psi4/psi4/issues/675#issuecomment-291261254:140,Deployability,install,installed,140,Looks like your native gcc is too old. Activate the conda environment (something like `source activate p4env`) to use the newer gcc that is installed alongside the psi4 binary. Or `export LD_LIBRARY_PATH=/path/to/miniconda/envs/p4env/bin/../lib:$LD_LIBRARY_PATH` .,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/675#issuecomment-291261254
https://github.com/psi4/psi4/issues/675#issuecomment-291267736:133,Availability,avail,avail,133,"I just ran both ""source activate p4env"" and ""export LD_LIBRARY_PATH=/path/to/miniconda/envs/p4env/bin/../lib:$LD_LIBRARY_PATH"" to no avail, still get the symbol lookup error.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/675#issuecomment-291267736
https://github.com/psi4/psi4/issues/675#issuecomment-291267736:168,Availability,error,error,168,"I just ran both ""source activate p4env"" and ""export LD_LIBRARY_PATH=/path/to/miniconda/envs/p4env/bin/../lib:$LD_LIBRARY_PATH"" to no avail, still get the symbol lookup error.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/675#issuecomment-291267736
https://github.com/psi4/psi4/issues/675#issuecomment-296875163:510,Availability,error,error,510,"Provided your `ldd -v /miniconda/envs/psi4-env/lib/python2.7/site-packages/psi4.so` is actually `ldd -v /home/artfin/miniconda/envs/psi4-env/lib/python2.7/site-packages/psi4.so`, then your `ldd` trace looks good. I'd like to see your `gcc --version` return the `/home/artfin/miniconda/envs/psi4-env/bin/gcc`, though. Could you `source activate psi4-env` and try running psi4 again. Failing that, try the `export LD_LIBRARY_PATH=/home/artfin/miniconda/envs/psi4-env/lib:$LD_LIBRARY_PATH`. And supply your exact error, please.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/675#issuecomment-296875163
https://github.com/psi4/psi4/issues/675#issuecomment-297042835:283,Availability,error,error,283,"Okay, so I think the problem is that i did not have ```gcc``` in the ```/home/artfin/miniconda/envs/psi4-env/bin```. So I installed it with ```conda install -c anaconda gcc=4.8.5``` in the ```psi4-env``` environment. ; After rerunning ```psi4``` I still get:. ```psi4: symbol lookup error: psi4: undefined symbol:```; ```_ZTTSt19basic_ostringstreamIcSt11char_traitsIcESaIcEE```. ```export LD_LIBRARY_PATH=/home/artfin/miniconda/envs/psi4-env/lib:$LD_LIBRARY_PATH``` does not change anything.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/675#issuecomment-297042835
https://github.com/psi4/psi4/issues/675#issuecomment-297042835:122,Deployability,install,installed,122,"Okay, so I think the problem is that i did not have ```gcc``` in the ```/home/artfin/miniconda/envs/psi4-env/bin```. So I installed it with ```conda install -c anaconda gcc=4.8.5``` in the ```psi4-env``` environment. ; After rerunning ```psi4``` I still get:. ```psi4: symbol lookup error: psi4: undefined symbol:```; ```_ZTTSt19basic_ostringstreamIcSt11char_traitsIcESaIcEE```. ```export LD_LIBRARY_PATH=/home/artfin/miniconda/envs/psi4-env/lib:$LD_LIBRARY_PATH``` does not change anything.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/675#issuecomment-297042835
https://github.com/psi4/psi4/issues/675#issuecomment-297042835:149,Deployability,install,install,149,"Okay, so I think the problem is that i did not have ```gcc``` in the ```/home/artfin/miniconda/envs/psi4-env/bin```. So I installed it with ```conda install -c anaconda gcc=4.8.5``` in the ```psi4-env``` environment. ; After rerunning ```psi4``` I still get:. ```psi4: symbol lookup error: psi4: undefined symbol:```; ```_ZTTSt19basic_ostringstreamIcSt11char_traitsIcESaIcEE```. ```export LD_LIBRARY_PATH=/home/artfin/miniconda/envs/psi4-env/lib:$LD_LIBRARY_PATH``` does not change anything.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/675#issuecomment-297042835
https://github.com/psi4/psi4/issues/675#issuecomment-297062748:651,Availability,error,error,651,"Looks like I didn't ask you a fundamental enough question at the start of this diagnosis. Are you trying to install the last stable release (July 2016; 1.0; `conda install psi4 --channel psi4`) or the current development head (April 2017; ~1.1rc1; `conda install psi4 --channel psi4/label/devel --channel psi4`)? The former doesn't need a conda gcc and automatically installs the libgcc 4.8.5 package. The latter needs, and so comes with a gcc 5.2 package from the psi4 channel (borrowed from msarahan). So when psi4 ~1.1 is properly installed, `which psi4 python gcc` should all be pointing to side-by-side executables in your conda environment. The error you just reported is what happens when you mix libraries built against pre- and post-gcc-5.1 `std::string`. I'd abandon your psi4-env environment and start the installation again with something like the below (assuming psi4 ~1.1 is what you're after). ```; conda create -n p4env python=x.x psi4 psi4-deps -c psi4/label/devel -c psi4; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/675#issuecomment-297062748
https://github.com/psi4/psi4/issues/675#issuecomment-297062748:108,Deployability,install,install,108,"Looks like I didn't ask you a fundamental enough question at the start of this diagnosis. Are you trying to install the last stable release (July 2016; 1.0; `conda install psi4 --channel psi4`) or the current development head (April 2017; ~1.1rc1; `conda install psi4 --channel psi4/label/devel --channel psi4`)? The former doesn't need a conda gcc and automatically installs the libgcc 4.8.5 package. The latter needs, and so comes with a gcc 5.2 package from the psi4 channel (borrowed from msarahan). So when psi4 ~1.1 is properly installed, `which psi4 python gcc` should all be pointing to side-by-side executables in your conda environment. The error you just reported is what happens when you mix libraries built against pre- and post-gcc-5.1 `std::string`. I'd abandon your psi4-env environment and start the installation again with something like the below (assuming psi4 ~1.1 is what you're after). ```; conda create -n p4env python=x.x psi4 psi4-deps -c psi4/label/devel -c psi4; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/675#issuecomment-297062748
https://github.com/psi4/psi4/issues/675#issuecomment-297062748:132,Deployability,release,release,132,"Looks like I didn't ask you a fundamental enough question at the start of this diagnosis. Are you trying to install the last stable release (July 2016; 1.0; `conda install psi4 --channel psi4`) or the current development head (April 2017; ~1.1rc1; `conda install psi4 --channel psi4/label/devel --channel psi4`)? The former doesn't need a conda gcc and automatically installs the libgcc 4.8.5 package. The latter needs, and so comes with a gcc 5.2 package from the psi4 channel (borrowed from msarahan). So when psi4 ~1.1 is properly installed, `which psi4 python gcc` should all be pointing to side-by-side executables in your conda environment. The error you just reported is what happens when you mix libraries built against pre- and post-gcc-5.1 `std::string`. I'd abandon your psi4-env environment and start the installation again with something like the below (assuming psi4 ~1.1 is what you're after). ```; conda create -n p4env python=x.x psi4 psi4-deps -c psi4/label/devel -c psi4; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/675#issuecomment-297062748
https://github.com/psi4/psi4/issues/675#issuecomment-297062748:164,Deployability,install,install,164,"Looks like I didn't ask you a fundamental enough question at the start of this diagnosis. Are you trying to install the last stable release (July 2016; 1.0; `conda install psi4 --channel psi4`) or the current development head (April 2017; ~1.1rc1; `conda install psi4 --channel psi4/label/devel --channel psi4`)? The former doesn't need a conda gcc and automatically installs the libgcc 4.8.5 package. The latter needs, and so comes with a gcc 5.2 package from the psi4 channel (borrowed from msarahan). So when psi4 ~1.1 is properly installed, `which psi4 python gcc` should all be pointing to side-by-side executables in your conda environment. The error you just reported is what happens when you mix libraries built against pre- and post-gcc-5.1 `std::string`. I'd abandon your psi4-env environment and start the installation again with something like the below (assuming psi4 ~1.1 is what you're after). ```; conda create -n p4env python=x.x psi4 psi4-deps -c psi4/label/devel -c psi4; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/675#issuecomment-297062748
https://github.com/psi4/psi4/issues/675#issuecomment-297062748:255,Deployability,install,install,255,"Looks like I didn't ask you a fundamental enough question at the start of this diagnosis. Are you trying to install the last stable release (July 2016; 1.0; `conda install psi4 --channel psi4`) or the current development head (April 2017; ~1.1rc1; `conda install psi4 --channel psi4/label/devel --channel psi4`)? The former doesn't need a conda gcc and automatically installs the libgcc 4.8.5 package. The latter needs, and so comes with a gcc 5.2 package from the psi4 channel (borrowed from msarahan). So when psi4 ~1.1 is properly installed, `which psi4 python gcc` should all be pointing to side-by-side executables in your conda environment. The error you just reported is what happens when you mix libraries built against pre- and post-gcc-5.1 `std::string`. I'd abandon your psi4-env environment and start the installation again with something like the below (assuming psi4 ~1.1 is what you're after). ```; conda create -n p4env python=x.x psi4 psi4-deps -c psi4/label/devel -c psi4; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/675#issuecomment-297062748
https://github.com/psi4/psi4/issues/675#issuecomment-297062748:367,Deployability,install,installs,367,"Looks like I didn't ask you a fundamental enough question at the start of this diagnosis. Are you trying to install the last stable release (July 2016; 1.0; `conda install psi4 --channel psi4`) or the current development head (April 2017; ~1.1rc1; `conda install psi4 --channel psi4/label/devel --channel psi4`)? The former doesn't need a conda gcc and automatically installs the libgcc 4.8.5 package. The latter needs, and so comes with a gcc 5.2 package from the psi4 channel (borrowed from msarahan). So when psi4 ~1.1 is properly installed, `which psi4 python gcc` should all be pointing to side-by-side executables in your conda environment. The error you just reported is what happens when you mix libraries built against pre- and post-gcc-5.1 `std::string`. I'd abandon your psi4-env environment and start the installation again with something like the below (assuming psi4 ~1.1 is what you're after). ```; conda create -n p4env python=x.x psi4 psi4-deps -c psi4/label/devel -c psi4; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/675#issuecomment-297062748
https://github.com/psi4/psi4/issues/675#issuecomment-297062748:534,Deployability,install,installed,534,"Looks like I didn't ask you a fundamental enough question at the start of this diagnosis. Are you trying to install the last stable release (July 2016; 1.0; `conda install psi4 --channel psi4`) or the current development head (April 2017; ~1.1rc1; `conda install psi4 --channel psi4/label/devel --channel psi4`)? The former doesn't need a conda gcc and automatically installs the libgcc 4.8.5 package. The latter needs, and so comes with a gcc 5.2 package from the psi4 channel (borrowed from msarahan). So when psi4 ~1.1 is properly installed, `which psi4 python gcc` should all be pointing to side-by-side executables in your conda environment. The error you just reported is what happens when you mix libraries built against pre- and post-gcc-5.1 `std::string`. I'd abandon your psi4-env environment and start the installation again with something like the below (assuming psi4 ~1.1 is what you're after). ```; conda create -n p4env python=x.x psi4 psi4-deps -c psi4/label/devel -c psi4; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/675#issuecomment-297062748
https://github.com/psi4/psi4/issues/675#issuecomment-297062748:817,Deployability,install,installation,817,"Looks like I didn't ask you a fundamental enough question at the start of this diagnosis. Are you trying to install the last stable release (July 2016; 1.0; `conda install psi4 --channel psi4`) or the current development head (April 2017; ~1.1rc1; `conda install psi4 --channel psi4/label/devel --channel psi4`)? The former doesn't need a conda gcc and automatically installs the libgcc 4.8.5 package. The latter needs, and so comes with a gcc 5.2 package from the psi4 channel (borrowed from msarahan). So when psi4 ~1.1 is properly installed, `which psi4 python gcc` should all be pointing to side-by-side executables in your conda environment. The error you just reported is what happens when you mix libraries built against pre- and post-gcc-5.1 `std::string`. I'd abandon your psi4-env environment and start the installation again with something like the below (assuming psi4 ~1.1 is what you're after). ```; conda create -n p4env python=x.x psi4 psi4-deps -c psi4/label/devel -c psi4; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/675#issuecomment-297062748
https://github.com/psi4/psi4/issues/677#issuecomment-291915766:89,Testability,test,test,89,"Oh, yes, quite agree that it affects DFT in general, and just happens to show up in that test case. Maybe I should have named the issue for the cause, rather than the effect.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/677#issuecomment-291915766
https://github.com/psi4/psi4/pull/678#issuecomment-292588286:55,Availability,down,down,55,"Thanks a lot for you hard detective work to track this down. I'm happy to merge the PR, but I'd like to dig around and see if I can figure out why the off-diagonals appear in the first place.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/678#issuecomment-292588286
https://github.com/psi4/psi4/pull/678#issuecomment-292588286:26,Safety,detect,detective,26,"Thanks a lot for you hard detective work to track this down. I'm happy to merge the PR, but I'd like to dig around and see if I can figure out why the off-diagonals appear in the first place.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/678#issuecomment-292588286
https://github.com/psi4/psi4/pull/678#issuecomment-292620152:16,Performance,load,load,16,"I added a whole load of printfs and compared the output produced on a couple of different processors. I put a fair bit about it on the [forum](http://forum.psicode.org/t/different-dft-grid-behaviour-on-different-machines-very-different-dft-enrgies/460/9?u=laz). The Iq matrix obtains these ""nearly zero"" off diagonals at ca. line 3400 of cubature.cc in OrientationMgr::OrientationMgr() where the summation involves products of x, y, and z coordinates. For some processors ""-a + a = 0"" but for others, not quite by the looks of it. Some of the cartesian coordinates are things like 10-17, so products become extremely small. I've not looked into whether they've already been transformed form the input coordinates or not but they must have been processed in some way to get that sort of value. Also, the value of center was essentially ""0.0, 0.0, 1e-17"" on one machine but ""1e-17, 1e-17, 1e-16"" on an i7-5960x. When this gets subtracted off (line 3414), it either has no effect or adds to the non-zero-ness of the matrix elements (although, subtraction from elements with a significant value, such as the diagonals, has a negligible effect). Should coordinates have values as small as 1e-17? How close to zero is zero?! That's something I don't really have a feel for.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/678#issuecomment-292620152
https://github.com/psi4/psi4/pull/678#issuecomment-292635303:170,Availability,avail,available,170,"@lazaroid , I saw the forum post, and it's extremely helpful. My suspicion is that this is being caused by the injection of an optimisation that uses an instruction only available on the offending processors. I'm fine with rounding the result but, just for my own edification, I'd like to experiment with some `#pragma optimize` blocks to see if my suspicion is correct. This should be a fairly simple test, now that you've done all of the hard work of figuring out exactly what's wrong.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/678#issuecomment-292635303
https://github.com/psi4/psi4/pull/678#issuecomment-292635303:111,Integrability,inject,injection,111,"@lazaroid , I saw the forum post, and it's extremely helpful. My suspicion is that this is being caused by the injection of an optimisation that uses an instruction only available on the offending processors. I'm fine with rounding the result but, just for my own edification, I'd like to experiment with some `#pragma optimize` blocks to see if my suspicion is correct. This should be a fairly simple test, now that you've done all of the hard work of figuring out exactly what's wrong.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/678#issuecomment-292635303
https://github.com/psi4/psi4/pull/678#issuecomment-292635303:319,Performance,optimiz,optimize,319,"@lazaroid , I saw the forum post, and it's extremely helpful. My suspicion is that this is being caused by the injection of an optimisation that uses an instruction only available on the offending processors. I'm fine with rounding the result but, just for my own edification, I'd like to experiment with some `#pragma optimize` blocks to see if my suspicion is correct. This should be a fairly simple test, now that you've done all of the hard work of figuring out exactly what's wrong.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/678#issuecomment-292635303
https://github.com/psi4/psi4/pull/678#issuecomment-292635303:111,Security,inject,injection,111,"@lazaroid , I saw the forum post, and it's extremely helpful. My suspicion is that this is being caused by the injection of an optimisation that uses an instruction only available on the offending processors. I'm fine with rounding the result but, just for my own edification, I'd like to experiment with some `#pragma optimize` blocks to see if my suspicion is correct. This should be a fairly simple test, now that you've done all of the hard work of figuring out exactly what's wrong.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/678#issuecomment-292635303
https://github.com/psi4/psi4/pull/678#issuecomment-292635303:402,Testability,test,test,402,"@lazaroid , I saw the forum post, and it's extremely helpful. My suspicion is that this is being caused by the injection of an optimisation that uses an instruction only available on the offending processors. I'm fine with rounding the result but, just for my own edification, I'd like to experiment with some `#pragma optimize` blocks to see if my suspicion is correct. This should be a fairly simple test, now that you've done all of the hard work of figuring out exactly what's wrong.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/678#issuecomment-292635303
https://github.com/psi4/psi4/pull/678#issuecomment-292635303:395,Usability,simpl,simple,395,"@lazaroid , I saw the forum post, and it's extremely helpful. My suspicion is that this is being caused by the injection of an optimisation that uses an instruction only available on the offending processors. I'm fine with rounding the result but, just for my own edification, I'd like to experiment with some `#pragma optimize` blocks to see if my suspicion is correct. This should be a fairly simple test, now that you've done all of the hard work of figuring out exactly what's wrong.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/678#issuecomment-292635303
https://github.com/psi4/psi4/pull/678#issuecomment-292641928:41,Availability,down,down,41,"Exactly why I started trying to track it down: it only occurs on some processors and it shouldn't! I'm just perusing libmints/molecule.cc. In Molecule::inertia_tensor(), inertia tensor elements less that ZERO (#defined as 1e-14) are set to 0.0 before diagonalisation, presumably for similar reasons.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/678#issuecomment-292641928
https://github.com/psi4/psi4/pull/678#issuecomment-293376301:208,Performance,optimiz,optimize,208,"Ok, I've had a chance to poke around a bit and I have found that I can reproduce the issue on an E5-2680 v3 chip, so your hunch that this affects all Haswells is likely correct. I found that putting `#pragma optimize("""", off )` immediately before `OrientationMgr::OrientationMgr(std::shared_ptr<Molecule> mol)` on 3389 and `#pragma optimize("""", on ) ` after that function on line 3418 fixes the issue. I have a very slight preference for this approach because it's unambiguous, but I'm also fine to go with zeroing offending elements out. Thoughts anybody? Either way, this is a very important fix, and we should either merge the current PR or my proposed solution.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/678#issuecomment-293376301
https://github.com/psi4/psi4/pull/678#issuecomment-293376301:332,Performance,optimiz,optimize,332,"Ok, I've had a chance to poke around a bit and I have found that I can reproduce the issue on an E5-2680 v3 chip, so your hunch that this affects all Haswells is likely correct. I found that putting `#pragma optimize("""", off )` immediately before `OrientationMgr::OrientationMgr(std::shared_ptr<Molecule> mol)` on 3389 and `#pragma optimize("""", on ) ` after that function on line 3418 fixes the issue. I have a very slight preference for this approach because it's unambiguous, but I'm also fine to go with zeroing offending elements out. Thoughts anybody? Either way, this is a very important fix, and we should either merge the current PR or my proposed solution.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/678#issuecomment-293376301
https://github.com/psi4/psi4/pull/678#issuecomment-293473618:320,Modifiability,portab,portability,320,"I tried my suggested fix using GCC and it didn't work. Neither did [this](https://gcc.gnu.org/onlinedocs/gcc-4.8.4/gcc/Function-Specific-Option-Pragmas.html) or [this](http://odellconnie.blogspot.com/2012/02/controlling-gcc-optimization-with.html) so I'd rather stick with zeroing out offending elements, as in this PR; portability is far more important than worrying about some arbitrary cutoff.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/678#issuecomment-293473618
https://github.com/psi4/psi4/pull/678#issuecomment-293473618:224,Performance,optimiz,optimization-with,224,"I tried my suggested fix using GCC and it didn't work. Neither did [this](https://gcc.gnu.org/onlinedocs/gcc-4.8.4/gcc/Function-Specific-Option-Pragmas.html) or [this](http://odellconnie.blogspot.com/2012/02/controlling-gcc-optimization-with.html) so I'd rather stick with zeroing out offending elements, as in this PR; portability is far more important than worrying about some arbitrary cutoff.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/678#issuecomment-293473618
https://github.com/psi4/psi4/pull/679#issuecomment-296413636:24,Testability,test,test,24,Restarted the timed out test cases. This should be ready to go after the tests pass.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/679#issuecomment-296413636
https://github.com/psi4/psi4/pull/679#issuecomment-296413636:73,Testability,test,tests,73,Restarted the timed out test cases. This should be ready to go after the tests pass.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/679#issuecomment-296413636
https://github.com/psi4/psi4/issues/680#issuecomment-295397426:88,Testability,test,tested,88,"The ""multi"" mode should be considered as experimental (obviously). It has not been much tested. I have hoped to return to this code in the future, as I think it could develop into something very nice, but alas I've been sidetracked. The 'atoms' not in the fragment are simply points in space as defined by linear combinations of atomic positions. So they are pseudo-atoms used to define the interfragment coordinates. As far as linear bends go, I bet the problem is the code is hardwired to expect no more than 6 interfragment coordinates, and with linear bends there could be more than 6. That probably never even occurred to me. So the code could be fixed to support this, but I don't think it is a small change.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/680#issuecomment-295397426
https://github.com/psi4/psi4/issues/680#issuecomment-295397426:269,Usability,simpl,simply,269,"The ""multi"" mode should be considered as experimental (obviously). It has not been much tested. I have hoped to return to this code in the future, as I think it could develop into something very nice, but alas I've been sidetracked. The 'atoms' not in the fragment are simply points in space as defined by linear combinations of atomic positions. So they are pseudo-atoms used to define the interfragment coordinates. As far as linear bends go, I bet the problem is the code is hardwired to expect no more than 6 interfragment coordinates, and with linear bends there could be more than 6. That probably never even occurred to me. So the code could be fixed to support this, but I don't think it is a small change.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/680#issuecomment-295397426
https://github.com/psi4/psi4/issues/680#issuecomment-295595920:176,Availability,down,down,176,"I'm afraid I have a habit of finding obscure bugs! :-) I'd forgotten about needing the additional vectors for linear bends. I'll poke about a bit more to see if I can track it down a bit more. As an aside, is there any real advantage of ""multi"" mode over ""single"" mode, apart form the former appearing to be (in my mind!) more of a logical way of thinking? I'll do some more tests...",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/680#issuecomment-295595920
