quality_attribute,sentence,keyword,source,author,repo,version,id,matched_word,match_idx,filename,wiki,url,total_similar,target_keywords,target_matched_words,attribute_desc,prompt,true_positive,reasoning
Availability," Virshup` {smaller}`LouisK92` {smaller}`mayarali`; - Integrated [DocSearch], a find-as-you-type documentation index search. {pr}`1754` {smaller}`P Angerer`; - - Reorganized reference docs {pr}`1753` {smaller}`I Virshup`; - Clarified docs issues for {func}`~scanpy.pp.neighbors`,; {func}`~scanpy.tl.diffmap`, {func}`~scanpy.pp.calculate_qc_metrics` {pr}`1680` {smaller}`G Palla`; - Fixed typos in grouped plot doc-strings {pr}`1877` {smaller}`C Rands`; - Extended examples for differential expression plotting. {pr}`1529` {smaller}`F Ramirez`; \- See {func}`~scanpy.pl.rank_genes_groups_dotplot` or {func}`~scanpy.pl.rank_genes_groups_matrixplot` for examples. ```{rubric} Bug fixes; ```. - Fix {func}`scanpy.pl.paga_path` `TypeError` with recent versions of anndata {pr}`1047` {smaller}`P Angerer`; - Fix detection of whether IPython is running {pr}`1844` {smaller}`I Virshup`; - Fixed reproducibility of {func}`scanpy.tl.diffmap` (added random_state) {pr}`1858` {smaller}`I Kucinski`; - Fixed errors and warnings from embedding plots with small numbers of categories after `sns.set_palette` was called {pr}`1886` {smaller}`I Virshup`; - Fixed handling of `gene_symbols` argument in a number of `sc.pl.rank_genes_groups*` functions {pr}`1529` {smaller}`F Ramirez` {smaller}`I Virshup`; - Fixed handling of `use_raw` for `sc.tl.rank_genes_groups` when no `.raw` is present {pr}`1895` {smaller}`I Virshup`; - {func}`scanpy.pl.rank_genes_groups_violin` now works for `raw=False` {pr}`1669` {smaller}`M van den Beek`; - {func}`scanpy.pl.dotplot` now uses `smallest_dot` argument correctly {pr}`1771` {smaller}`S Flemming`. ```{rubric} Development processes; ```. - Switched to [flit] for building and deploying the package, a simple tool with an easy to understand command line interface and metadata {pr}`1527` {smaller}`P Angerer`; - Use [pre-commit](https://pre-commit.com) for style checks {pr}`1684` {pr}`1848` {smaller}`L Heumos` {smaller}`I Virshup`. ```{rubric} Deprecations; ```. - Dropped suppor",error,MatchSource.DOCS,scverse,scanpy,1.10.2,https://github.com/scverse/scanpy/tree/1.10.2/docs/release-notes/1.8.0.md:2905,errors,2905,docs/release-notes/1.8.0.md,https://scanpy.readthedocs.io,https://github.com/scverse/scanpy/tree/1.10.2/docs/release-notes/1.8.0.md,1,['error'],['errors'],"The system's readiness to perform its function when required, focusing on reliability and recovery. It involves fault masking or repair to prevent failures, ensuring minimal cumulative downtime.","
You are an expert in evaluating and categorizing quality attributes in software engineering. You possess the necessary skills to distinguish sentences that clearly relate to a given quality attribute from those that do not. 

Evaluate whether the content accurately aligns with its associated quality attribute, given the context provided. Your goal is to determine if the content makes sense in relation to the quality attribute description or if it is a false positive.

Data:

Quality Attribute: Availability
Attribute Description: The system's readiness to perform its function when required, focusing on reliability and recovery. It involves fault masking or repair to prevent failures, ensuring minimal cumulative downtime.
Content:  Virshup` {smaller}`LouisK92` {smaller}`mayarali`; - Integrated [DocSearch], a find-as-you-type documentation index search. {pr}`1754` {smaller}`P Angerer`; - - Reorganized reference docs {pr}`1753` {smaller}`I Virshup`; - Clarified docs issues for {func}`~scanpy.pp.neighbors`,; {func}`~scanpy.tl.diffmap`, {func}`~scanpy.pp.calculate_qc_metrics` {pr}`1680` {smaller}`G Palla`; - Fixed typos in grouped plot doc-strings {pr}`1877` {smaller}`C Rands`; - Extended examples for differential expression plotting. {pr}`1529` {smaller}`F Ramirez`; \- See {func}`~scanpy.pl.rank_genes_groups_dotplot` or {func}`~scanpy.pl.rank_genes_groups_matrixplot` for examples. ```{rubric} Bug fixes; ```. - Fix {func}`scanpy.pl.paga_path` `TypeError` with recent versions of anndata {pr}`1047` {smaller}`P Angerer`; - Fix detection of whether IPython is running {pr}`1844` {smaller}`I Virshup`; - Fixed reproducibility of {func}`scanpy.tl.diffmap` (added random_state) {pr}`1858` {smaller}`I Kucinski`; - Fixed errors and warnings from embedding plots with small numbers of categories after `sns.set_palette` was called {pr}`1886` {smaller}`I Virshup`; - Fixed handling of `gene_symbols` argument in a number of `sc.pl.rank_genes_groups*` functions {pr}`1529` {smaller}`F Ramirez` {smaller}`I Virshup`; - Fixed handling of `use_raw` for `sc.tl.rank_genes_groups` when no `.raw` is present {pr}`1895` {smaller}`I Virshup`; - {func}`scanpy.pl.rank_genes_groups_violin` now works for `raw=False` {pr}`1669` {smaller}`M van den Beek`; - {func}`scanpy.pl.dotplot` now uses `smallest_dot` argument correctly {pr}`1771` {smaller}`S Flemming`. ```{rubric} Development processes; ```. - Switched to [flit] for building and deploying the package, a simple tool with an easy to understand command line interface and metadata {pr}`1527` {smaller}`P Angerer`; - Use [pre-commit](https://pre-commit.com) for style checks {pr}`1684` {pr}`1848` {smaller}`L Heumos` {smaller}`I Virshup`. ```{rubric} Deprecations; ```. - Dropped suppor

Instructions: 
1. Analyze the content and the attribute description.
2. Determine if the content accurately reflects the intended quality attribute in this context.
3. If it does, label it as `true_positive: true`; if not, mark it as a `true_positive: false`.
4. If the content consists only of logs with no other text, mark it as a `true_positive: false`. 
4. If the content partially consists of logs, focus on analyzing remaining text. 
5. Add `reasoning` why the content is a true or false positive.
",False,"The content provided appears to be a list of tasks completed in a software development context, including bug fixes, documentation improvements, and process changes. The term 'availability' typically refers to the system's ability to function when needed, focusing on reliability and recovery from failures. While some of the content relates to functionality (e.g., fixing bugs), it does not specifically address how the system maintains its readiness or recovers from issues, which are key aspects of availability. Therefore, this content does not accurately reflect the quality attribute 'Availability' as described."
Availability,"# API. Import Scanpy as:. ```; import scanpy as sc; ```. ```{note}; Additional functionality is available in the broader {doc}`ecosystem <../ecosystem>`, with some tools being wrapped in the {mod}`scanpy.external` module.; ```. ```{toctree}; :maxdepth: 2. preprocessing; tools; plotting; reading; get; queries; metrics; experimental; classes; settings; datasets; deprecated; ```; ",avail,MatchSource.DOCS,scverse,scanpy,1.10.2,https://github.com/scverse/scanpy/tree/1.10.2/docs/api/index.md:96,available,96,docs/api/index.md,https://scanpy.readthedocs.io,https://github.com/scverse/scanpy/tree/1.10.2/docs/api/index.md,1,['avail'],['available'],"The system's readiness to perform its function when required, focusing on reliability and recovery. It involves fault masking or repair to prevent failures, ensuring minimal cumulative downtime.","
You are an expert in evaluating and categorizing quality attributes in software engineering. You possess the necessary skills to distinguish sentences that clearly relate to a given quality attribute from those that do not. 

Evaluate whether the content accurately aligns with its associated quality attribute, given the context provided. Your goal is to determine if the content makes sense in relation to the quality attribute description or if it is a false positive.

Data:

Quality Attribute: Availability
Attribute Description: The system's readiness to perform its function when required, focusing on reliability and recovery. It involves fault masking or repair to prevent failures, ensuring minimal cumulative downtime.
Content: # API. Import Scanpy as:. ```; import scanpy as sc; ```. ```{note}; Additional functionality is available in the broader {doc}`ecosystem <../ecosystem>`, with some tools being wrapped in the {mod}`scanpy.external` module.; ```. ```{toctree}; :maxdepth: 2. preprocessing; tools; plotting; reading; get; queries; metrics; experimental; classes; settings; datasets; deprecated; ```; 

Instructions: 
1. Analyze the content and the attribute description.
2. Determine if the content accurately reflects the intended quality attribute in this context.
3. If it does, label it as `true_positive: true`; if not, mark it as a `true_positive: false`.
4. If the content consists only of logs with no other text, mark it as a `true_positive: false`. 
4. If the content partially consists of logs, focus on analyzing remaining text. 
5. Add `reasoning` why the content is a true or false positive.
",False,"The content provided contains API import statements and references to additional functionality in the broader ecosystem, along with a structure for documentation sections. While this relates to system readiness and setup, it does not directly address fault handling, recovery mechanisms, or minimizing downtime as described by the Availability quality attribute. Instead, it focuses on API usage and documentation organization, which are more about system architecture and usability rather than operational reliability."
Availability,"# CI. ## Plotting tests. A frequent frustration in testing is the reproducibility of the plots and `matplotlib`'s behaviour in different environments.; We have some tooling to help with this. ### Viewing plots from failed tests on Azure pipelines. The fixtures `check_same_image` and `image_comparer` upload plots from failing tests so you can view them from the azure pipelines test viewer.; To find these, navigate to the tests tab for your build. ```{image} ../_static/img/ci_plot-view_tests-tab.png; :width: 750px; ```. Select your failing test. ```{image} ../_static/img/ci_plot-view_select-test.png; :width: 750px; ```. And open the attachments tab. ```{image} ../_static/img/ci_plot-view_attachment-tab.png; :width: 750px; ```. From here you can view and download the images which were compared, as well as a diff between them. ### Misc. {func}`matplotlib.testing.setup` tries to establish a consistent environment for creating plots. Make sure it's active!; ",down,MatchSource.DOCS,scverse,scanpy,1.10.2,https://github.com/scverse/scanpy/tree/1.10.2/docs/dev/ci.md:762,download,762,docs/dev/ci.md,https://scanpy.readthedocs.io,https://github.com/scverse/scanpy/tree/1.10.2/docs/dev/ci.md,1,['down'],['download'],"The system's readiness to perform its function when required, focusing on reliability and recovery. It involves fault masking or repair to prevent failures, ensuring minimal cumulative downtime.","
You are an expert in evaluating and categorizing quality attributes in software engineering. You possess the necessary skills to distinguish sentences that clearly relate to a given quality attribute from those that do not. 

Evaluate whether the content accurately aligns with its associated quality attribute, given the context provided. Your goal is to determine if the content makes sense in relation to the quality attribute description or if it is a false positive.

Data:

Quality Attribute: Availability
Attribute Description: The system's readiness to perform its function when required, focusing on reliability and recovery. It involves fault masking or repair to prevent failures, ensuring minimal cumulative downtime.
Content: # CI. ## Plotting tests. A frequent frustration in testing is the reproducibility of the plots and `matplotlib`'s behaviour in different environments.; We have some tooling to help with this. ### Viewing plots from failed tests on Azure pipelines. The fixtures `check_same_image` and `image_comparer` upload plots from failing tests so you can view them from the azure pipelines test viewer.; To find these, navigate to the tests tab for your build. ```{image} ../_static/img/ci_plot-view_tests-tab.png; :width: 750px; ```. Select your failing test. ```{image} ../_static/img/ci_plot-view_select-test.png; :width: 750px; ```. And open the attachments tab. ```{image} ../_static/img/ci_plot-view_attachment-tab.png; :width: 750px; ```. From here you can view and download the images which were compared, as well as a diff between them. ### Misc. {func}`matplotlib.testing.setup` tries to establish a consistent environment for creating plots. Make sure it's active!; 

Instructions: 
1. Analyze the content and the attribute description.
2. Determine if the content accurately reflects the intended quality attribute in this context.
3. If it does, label it as `true_positive: true`; if not, mark it as a `true_positive: false`.
4. If the content consists only of logs with no other text, mark it as a `true_positive: false`. 
4. If the content partially consists of logs, focus on analyzing remaining text. 
5. Add `reasoning` why the content is a true or false positive.
",True,"The provided content discusses testing tools and methods for plotting and comparing test results in different environments using fixtures. It mentions Azure pipelines and tools like check_same_image and image_comparer to view plots from failed tests. The focus is on ensuring that failing tests can be easily viewed and compared, which relates to availability by preventing issues where tests might fail due to environment differences or inconsistencies. By providing a consistent way to view and analyze test results, the system's readiness for production is enhanced, contributing to higher availability."
Availability,"# Versioning. ```{note}; We are currently experimenting with our development practices.; These are currently documented on a best effort basis, but may not be completely accurate.; ```. ## Semantic versioning. We try to follow [semantic versioning](https://semver.org) with our versioning scheme.; This scheme breaks down a version number into `{major.minor.point}` sections.; At a `point` release, there should be no changes beyond bug fixes.; `minor` releases can include new features.; `major` releases can break old APIs. ### Version numbers. Valid version numbers are described in [PEP 440](https://peps.python.org/pep-0440/). [Pre-releases](https://peps.python.org/pep-0440/#pre-releases); : should have versions like `1.7.0rc1` or `1.7.0rc2`.; [Development versions](https://peps.python.org/pep-0440/#developmental-releases); : should look like `1.8.0.dev0`, with a commit hash optionally appended as a local version identifier (e.g. `1.8.0.dev2+g00ad77b`). ## Tooling. To be sure we can follow this scheme and maintain some agility in development, we use some tooling and development practices.; When a minor release is made, a release branch should be cut and pushed to the main repo (e.g. `1.7.x` for the `1.7` release series). For PRs which fix an bug in the most recent minor release, the changes will need to added to both the development and release branches.; To accomplish this, PRs which fix bugs must be labelled as such.; After approval, a developer will notify the [meeseeks bot](https://meeseeksbox.github.io) to open a backport PR onto the release branch via a comment saying:. > @Meeseeksdev backport \<branch>. Where ""\<branch>"" is the most recent release branch. The bot will attempt to make a backport and open a PR.; This will sometimes require manual intervention due to merge conflicts or test failures.; ",down,MatchSource.DOCS,scverse,scanpy,1.10.2,https://github.com/scverse/scanpy/tree/1.10.2/docs/dev/versioning.md:317,down,317,docs/dev/versioning.md,https://scanpy.readthedocs.io,https://github.com/scverse/scanpy/tree/1.10.2/docs/dev/versioning.md,2,"['down', 'failure']","['down', 'failures']","The system's readiness to perform its function when required, focusing on reliability and recovery. It involves fault masking or repair to prevent failures, ensuring minimal cumulative downtime.","
You are an expert in evaluating and categorizing quality attributes in software engineering. You possess the necessary skills to distinguish sentences that clearly relate to a given quality attribute from those that do not. 

Evaluate whether the content accurately aligns with its associated quality attribute, given the context provided. Your goal is to determine if the content makes sense in relation to the quality attribute description or if it is a false positive.

Data:

Quality Attribute: Availability
Attribute Description: The system's readiness to perform its function when required, focusing on reliability and recovery. It involves fault masking or repair to prevent failures, ensuring minimal cumulative downtime.
Content: # Versioning. ```{note}; We are currently experimenting with our development practices.; These are currently documented on a best effort basis, but may not be completely accurate.; ```. ## Semantic versioning. We try to follow [semantic versioning](https://semver.org) with our versioning scheme.; This scheme breaks down a version number into `{major.minor.point}` sections.; At a `point` release, there should be no changes beyond bug fixes.; `minor` releases can include new features.; `major` releases can break old APIs. ### Version numbers. Valid version numbers are described in [PEP 440](https://peps.python.org/pep-0440/). [Pre-releases](https://peps.python.org/pep-0440/#pre-releases); : should have versions like `1.7.0rc1` or `1.7.0rc2`.; [Development versions](https://peps.python.org/pep-0440/#developmental-releases); : should look like `1.8.0.dev0`, with a commit hash optionally appended as a local version identifier (e.g. `1.8.0.dev2+g00ad77b`). ## Tooling. To be sure we can follow this scheme and maintain some agility in development, we use some tooling and development practices.; When a minor release is made, a release branch should be cut and pushed to the main repo (e.g. `1.7.x` for the `1.7` release series). For PRs which fix an bug in the most recent minor release, the changes will need to added to both the development and release branches.; To accomplish this, PRs which fix bugs must be labelled as such.; After approval, a developer will notify the [meeseeks bot](https://meeseeksbox.github.io) to open a backport PR onto the release branch via a comment saying:. > @Meeseeksdev backport \<branch>. Where ""\<branch>"" is the most recent release branch. The bot will attempt to make a backport and open a PR.; This will sometimes require manual intervention due to merge conflicts or test failures.; 

Instructions: 
1. Analyze the content and the attribute description.
2. Determine if the content accurately reflects the intended quality attribute in this context.
3. If it does, label it as `true_positive: true`; if not, mark it as a `true_positive: false`.
4. If the content consists only of logs with no other text, mark it as a `true_positive: false`. 
4. If the content partially consists of logs, focus on analyzing remaining text. 
5. Add `reasoning` why the content is a true or false positive.
",False,"The provided content discusses version control practices and semantic versioning, which are more related to maintainability and modularity rather than availability. Availability focuses on system readiness and reliability, while this text is about how versions are managed, labeling, and distribution."
Availability,"## Preprocessing: `pp`. ```{eval-rst}; .. module:: scanpy.pp; ```. ```{eval-rst}; .. currentmodule:: scanpy; ```. Filtering of highly-variable genes, batch-effect correction, per-cell normalization, preprocessing recipes. Any transformation of the data matrix that is not a *tool*. Other than *tools*, preprocessing steps usually don't return an easily interpretable annotation, but perform a basic transformation on the data matrix. ### Basic Preprocessing. For visual quality control, see {func}`~scanpy.pl.highest_expr_genes` and; {func}`~scanpy.pl.filter_genes_dispersion` in {mod}`scanpy.pl`. ```{eval-rst}; .. autosummary::; :nosignatures:; :toctree: ../generated/. pp.calculate_qc_metrics; pp.filter_cells; pp.filter_genes; pp.highly_variable_genes; pp.log1p; pp.pca; pp.normalize_total; pp.regress_out; pp.scale; pp.subsample; pp.downsample_counts; ```. ### Recipes. ```{eval-rst}; .. autosummary::; :nosignatures:; :toctree: generated/. pp.recipe_zheng17; pp.recipe_weinreb17; pp.recipe_seurat; ```. ### Batch effect correction. Also see [Data integration]. Note that a simple batch correction method is available via {func}`pp.regress_out`. Checkout {mod}`scanpy.external` for more. ```{eval-rst}; .. autosummary::; :nosignatures:; :toctree: generated/. pp.combat; ```. ### Doublet detection. ```{eval-rst}; .. autosummary::; :nosignatures:; :toctree: generated/. pp.scrublet; pp.scrublet_simulate_doublets; ```. ### Neighbors. ```{eval-rst}; .. autosummary::; :nosignatures:; :toctree: generated/. pp.neighbors. ```; ",avail,MatchSource.DOCS,scverse,scanpy,1.10.2,https://github.com/scverse/scanpy/tree/1.10.2/docs/api/preprocessing.md:1113,available,1113,docs/api/preprocessing.md,https://scanpy.readthedocs.io,https://github.com/scverse/scanpy/tree/1.10.2/docs/api/preprocessing.md,1,['avail'],['available'],"The system's readiness to perform its function when required, focusing on reliability and recovery. It involves fault masking or repair to prevent failures, ensuring minimal cumulative downtime.","
You are an expert in evaluating and categorizing quality attributes in software engineering. You possess the necessary skills to distinguish sentences that clearly relate to a given quality attribute from those that do not. 

Evaluate whether the content accurately aligns with its associated quality attribute, given the context provided. Your goal is to determine if the content makes sense in relation to the quality attribute description or if it is a false positive.

Data:

Quality Attribute: Availability
Attribute Description: The system's readiness to perform its function when required, focusing on reliability and recovery. It involves fault masking or repair to prevent failures, ensuring minimal cumulative downtime.
Content: ## Preprocessing: `pp`. ```{eval-rst}; .. module:: scanpy.pp; ```. ```{eval-rst}; .. currentmodule:: scanpy; ```. Filtering of highly-variable genes, batch-effect correction, per-cell normalization, preprocessing recipes. Any transformation of the data matrix that is not a *tool*. Other than *tools*, preprocessing steps usually don't return an easily interpretable annotation, but perform a basic transformation on the data matrix. ### Basic Preprocessing. For visual quality control, see {func}`~scanpy.pl.highest_expr_genes` and; {func}`~scanpy.pl.filter_genes_dispersion` in {mod}`scanpy.pl`. ```{eval-rst}; .. autosummary::; :nosignatures:; :toctree: ../generated/. pp.calculate_qc_metrics; pp.filter_cells; pp.filter_genes; pp.highly_variable_genes; pp.log1p; pp.pca; pp.normalize_total; pp.regress_out; pp.scale; pp.subsample; pp.downsample_counts; ```. ### Recipes. ```{eval-rst}; .. autosummary::; :nosignatures:; :toctree: generated/. pp.recipe_zheng17; pp.recipe_weinreb17; pp.recipe_seurat; ```. ### Batch effect correction. Also see [Data integration]. Note that a simple batch correction method is available via {func}`pp.regress_out`. Checkout {mod}`scanpy.external` for more. ```{eval-rst}; .. autosummary::; :nosignatures:; :toctree: generated/. pp.combat; ```. ### Doublet detection. ```{eval-rst}; .. autosummary::; :nosignatures:; :toctree: generated/. pp.scrublet; pp.scrublet_simulate_doublets; ```. ### Neighbors. ```{eval-rst}; .. autosummary::; :nosignatures:; :toctree: generated/. pp.neighbors. ```; 

Instructions: 
1. Analyze the content and the attribute description.
2. Determine if the content accurately reflects the intended quality attribute in this context.
3. If it does, label it as `true_positive: true`; if not, mark it as a `true_positive: false`.
4. If the content consists only of logs with no other text, mark it as a `true_positive: false`. 
4. If the content partially consists of logs, focus on analyzing remaining text. 
5. Add `reasoning` why the content is a true or false positive.
",True,"The provided content discusses preprocessing steps in an analysis pipeline such as filtering genes, normalization, and batch effect correction. These are related to data processing to ensure accurate and reliable data handling, which contributes to system availability by reducing failures and ensuring consistent performance."
Availability,"### 0.3.0 {small}`2017-11-16`. - {class}`~anndata.AnnData` gains method {meth}`~anndata.AnnData.concatenate` {smaller}`A Wolf`; - {class}`~anndata.AnnData` is available as the separate [anndata] package {smaller}`P Angerer, A Wolf`; - results of [PAGA](https://github.com/theislab/paga) simplified {smaller}`A Wolf`. [anndata]: https://pypi.org/project/anndata/; ",avail,MatchSource.DOCS,scverse,scanpy,1.10.2,https://github.com/scverse/scanpy/tree/1.10.2/docs/release-notes/0.3.0.md:159,available,159,docs/release-notes/0.3.0.md,https://scanpy.readthedocs.io,https://github.com/scverse/scanpy/tree/1.10.2/docs/release-notes/0.3.0.md,1,['avail'],['available'],"The system's readiness to perform its function when required, focusing on reliability and recovery. It involves fault masking or repair to prevent failures, ensuring minimal cumulative downtime.","
You are an expert in evaluating and categorizing quality attributes in software engineering. You possess the necessary skills to distinguish sentences that clearly relate to a given quality attribute from those that do not. 

Evaluate whether the content accurately aligns with its associated quality attribute, given the context provided. Your goal is to determine if the content makes sense in relation to the quality attribute description or if it is a false positive.

Data:

Quality Attribute: Availability
Attribute Description: The system's readiness to perform its function when required, focusing on reliability and recovery. It involves fault masking or repair to prevent failures, ensuring minimal cumulative downtime.
Content: ### 0.3.0 {small}`2017-11-16`. - {class}`~anndata.AnnData` gains method {meth}`~anndata.AnnData.concatenate` {smaller}`A Wolf`; - {class}`~anndata.AnnData` is available as the separate [anndata] package {smaller}`P Angerer, A Wolf`; - results of [PAGA](https://github.com/theislab/paga) simplified {smaller}`A Wolf`. [anndata]: https://pypi.org/project/anndata/; 

Instructions: 
1. Analyze the content and the attribute description.
2. Determine if the content accurately reflects the intended quality attribute in this context.
3. If it does, label it as `true_positive: true`; if not, mark it as a `true_positive: false`.
4. If the content consists only of logs with no other text, mark it as a `true_positive: false`. 
4. If the content partially consists of logs, focus on analyzing remaining text. 
5. Add `reasoning` why the content is a true or false positive.
",True,"The content discusses the availability and functionality of the [anndata] package, mentioning that it's available as a separate package and results from PAGA are simplified. This relates to the system being ready for use when required."
Availability,"### 1.10.0 {small}`2024-03-26`. `scanpy` 1.10 brings a large amount of new features, performance improvements, and improved documentation. Some highlights:. * Improved support for out-of-core workflows via `dask`. See new tutorial: {doc}`/tutorials/experimental/dask` demonstrating counts-to-clusters for 1.4 million cells in <10 min.; * A new {doc}`basic clustering tutorial </tutorials/basics/clustering>` demonstrating an updated workflow.; * Opt-in increased performance for neighbor search and clustering ({doc}`how to guide </how-to/knn-transformers>`).; * Ability to `mask` observations or variables from a number of methods (see {doc}`/tutorials/plotting/advanced` for an example with plotting embeddings); * A new function {func}`~scanpy.get.aggregate` for computing aggregations of your data, very useful for pseudo bulking!. ```{rubric} Features; ```. * {func}`~scanpy.pp.scrublet` and {func}`~scanpy.pp.scrublet_simulate_doublets` were moved from {mod}`scanpy.external.pp` to {mod}`scanpy.pp`. The `scrublet` implementation is now maintained as part of scanpy {pr}`2703` {smaller}`P Angerer`; * {func}`scanpy.pp.pca`, {func}`scanpy.pp.scale`, {func}`scanpy.pl.embedding`, and {func}`scanpy.experimental.pp.normalize_pearson_residuals_pca` now support a `mask` parameter {pr}`2272` {smaller}`C Bright, T Marcella, & P Angerer`; * Enhanced dask support for some internal utilities, paving the way for more extensive dask support {pr}`2696` {smaller}`P Angerer`; * {func}`scanpy.pp.highly_variable_genes` supports dask for the default `seurat` and `cell_ranger` flavors {pr}`2809` {smaller}`P Angerer`; * New function {func}`scanpy.get.aggregate` which allows grouped aggregations over your data. Useful for pseudobulking! {pr}`2590` {smaller}`Isaac Virshup` {smaller}`Ilan Gold` {smaller}`Jon Bloom`; * {func}`scanpy.pp.neighbors` now has a `transformer` argument allowing the use of different ANN/ KNN libraries {pr}`2536` {smaller}`P Angerer`; * {func}`scanpy.experimental.pp.highly_variab",mask,MatchSource.DOCS,scverse,scanpy,1.10.2,https://github.com/scverse/scanpy/tree/1.10.2/docs/release-notes/1.10.0.md:575,mask,575,docs/release-notes/1.10.0.md,https://scanpy.readthedocs.io,https://github.com/scverse/scanpy/tree/1.10.2/docs/release-notes/1.10.0.md,1,['mask'],['mask'],"The system's readiness to perform its function when required, focusing on reliability and recovery. It involves fault masking or repair to prevent failures, ensuring minimal cumulative downtime.","
You are an expert in evaluating and categorizing quality attributes in software engineering. You possess the necessary skills to distinguish sentences that clearly relate to a given quality attribute from those that do not. 

Evaluate whether the content accurately aligns with its associated quality attribute, given the context provided. Your goal is to determine if the content makes sense in relation to the quality attribute description or if it is a false positive.

Data:

Quality Attribute: Availability
Attribute Description: The system's readiness to perform its function when required, focusing on reliability and recovery. It involves fault masking or repair to prevent failures, ensuring minimal cumulative downtime.
Content: ### 1.10.0 {small}`2024-03-26`. `scanpy` 1.10 brings a large amount of new features, performance improvements, and improved documentation. Some highlights:. * Improved support for out-of-core workflows via `dask`. See new tutorial: {doc}`/tutorials/experimental/dask` demonstrating counts-to-clusters for 1.4 million cells in <10 min.; * A new {doc}`basic clustering tutorial </tutorials/basics/clustering>` demonstrating an updated workflow.; * Opt-in increased performance for neighbor search and clustering ({doc}`how to guide </how-to/knn-transformers>`).; * Ability to `mask` observations or variables from a number of methods (see {doc}`/tutorials/plotting/advanced` for an example with plotting embeddings); * A new function {func}`~scanpy.get.aggregate` for computing aggregations of your data, very useful for pseudo bulking!. ```{rubric} Features; ```. * {func}`~scanpy.pp.scrublet` and {func}`~scanpy.pp.scrublet_simulate_doublets` were moved from {mod}`scanpy.external.pp` to {mod}`scanpy.pp`. The `scrublet` implementation is now maintained as part of scanpy {pr}`2703` {smaller}`P Angerer`; * {func}`scanpy.pp.pca`, {func}`scanpy.pp.scale`, {func}`scanpy.pl.embedding`, and {func}`scanpy.experimental.pp.normalize_pearson_residuals_pca` now support a `mask` parameter {pr}`2272` {smaller}`C Bright, T Marcella, & P Angerer`; * Enhanced dask support for some internal utilities, paving the way for more extensive dask support {pr}`2696` {smaller}`P Angerer`; * {func}`scanpy.pp.highly_variable_genes` supports dask for the default `seurat` and `cell_ranger` flavors {pr}`2809` {smaller}`P Angerer`; * New function {func}`scanpy.get.aggregate` which allows grouped aggregations over your data. Useful for pseudobulking! {pr}`2590` {smaller}`Isaac Virshup` {smaller}`Ilan Gold` {smaller}`Jon Bloom`; * {func}`scanpy.pp.neighbors` now has a `transformer` argument allowing the use of different ANN/ KNN libraries {pr}`2536` {smaller}`P Angerer`; * {func}`scanpy.experimental.pp.highly_variab

Instructions: 
1. Analyze the content and the attribute description.
2. Determine if the content accurately reflects the intended quality attribute in this context.
3. If it does, label it as `true_positive: true`; if not, mark it as a `true_positive: false`.
4. If the content consists only of logs with no other text, mark it as a `true_positive: false`. 
4. If the content partially consists of logs, focus on analyzing remaining text. 
5. Add `reasoning` why the content is a true or false positive.
",True,"The content describes new features and performance improvements in scanpy, including enhanced functionality like Dask support for workflows, updated clustering tutorials, and aggregation functions. These updates relate to increasing the system's capability and efficiency, which aligns with availability by ensuring reliable performance and minimizing downtime through improved processing capabilities. The mention of 'mask' observations could also contribute to fault tolerance as it allows handling missing or problematic data without disrupting the workflow. Therefore, this content accurately reflects the quality attribute of Availability."
Availability,"### 1.10.2 {small}`2024-06-25`. ```{rubric} Development features; ```. * Add performance benchmarking {pr}`2977` {smaller}`R Shrestha`, {smaller}`P Angerer`. ```{rubric} Docs; ```. * Document several missing parameters in docstring {pr}`2888` {smaller}`S Cheney`; * Fixed incorrect instructions in ""testing"" dev docs {pr}`2994` {smaller}`I Virshup`; * Update marsilea tutorial to use `group_` methods {pr}`3001` {smaller}`I Virshup`; * Fixed citations {pr}`3032` {smaller}`P Angerer`; * Improve dataset documentation {pr}`3060` {smaller}`P Angerer`. ```{rubric} Bug fixes; ```. * Compatibility with `matplotlib` 3.9 {pr}`2999` {smaller}`I Virshup`; * Add clear errors where `backed` mode-like matrices (i.e., from `sparse_dataset`) are not supported {pr}`3048` {smaller}`I gold`; * Write out full pca results when `_choose_representation` is called i.e., {func}`~scanpy.pp.neighbors` without {func}`~scanpy.pp.pca` {pr}`3079` {smaller}`I gold`; * Fix deprecated use of `.A` with sparse matrices {pr}`3084` {smaller}`P Angerer`; * Fix zappy support {pr}`3089` {smaller}`P Angerer`; * Fix dotplot group order with {mod}`pandas` 1.x {pr}`3101` {smaller}`P Angerer`. ```{rubric} Performance; ```. * `sparse_mean_variance_axis` now uses all cores for the calculations {pr}`3015` {smaller}`S Dicks`; * `pp.highly_variable_genes` with `flavor=seurat_v3` now uses a numba kernel {pr}`3017` {smaller}`S Dicks`; * Speed up {func}`~scanpy.pp.scrublet` {pr}`3044` {smaller}`S Dicks` and {pr}`3056` {smaller}`P Angerer`; * Speed up clipping of array in {func}`~scanpy.pp.scale` {pr}`3100` {smaller}`P Ashish & S Dicks`; ",error,MatchSource.DOCS,scverse,scanpy,1.10.2,https://github.com/scverse/scanpy/tree/1.10.2/docs/release-notes/1.10.2.md:661,errors,661,docs/release-notes/1.10.2.md,https://scanpy.readthedocs.io,https://github.com/scverse/scanpy/tree/1.10.2/docs/release-notes/1.10.2.md,1,['error'],['errors'],"The system's readiness to perform its function when required, focusing on reliability and recovery. It involves fault masking or repair to prevent failures, ensuring minimal cumulative downtime.","
You are an expert in evaluating and categorizing quality attributes in software engineering. You possess the necessary skills to distinguish sentences that clearly relate to a given quality attribute from those that do not. 

Evaluate whether the content accurately aligns with its associated quality attribute, given the context provided. Your goal is to determine if the content makes sense in relation to the quality attribute description or if it is a false positive.

Data:

Quality Attribute: Availability
Attribute Description: The system's readiness to perform its function when required, focusing on reliability and recovery. It involves fault masking or repair to prevent failures, ensuring minimal cumulative downtime.
Content: ### 1.10.2 {small}`2024-06-25`. ```{rubric} Development features; ```. * Add performance benchmarking {pr}`2977` {smaller}`R Shrestha`, {smaller}`P Angerer`. ```{rubric} Docs; ```. * Document several missing parameters in docstring {pr}`2888` {smaller}`S Cheney`; * Fixed incorrect instructions in ""testing"" dev docs {pr}`2994` {smaller}`I Virshup`; * Update marsilea tutorial to use `group_` methods {pr}`3001` {smaller}`I Virshup`; * Fixed citations {pr}`3032` {smaller}`P Angerer`; * Improve dataset documentation {pr}`3060` {smaller}`P Angerer`. ```{rubric} Bug fixes; ```. * Compatibility with `matplotlib` 3.9 {pr}`2999` {smaller}`I Virshup`; * Add clear errors where `backed` mode-like matrices (i.e., from `sparse_dataset`) are not supported {pr}`3048` {smaller}`I gold`; * Write out full pca results when `_choose_representation` is called i.e., {func}`~scanpy.pp.neighbors` without {func}`~scanpy.pp.pca` {pr}`3079` {smaller}`I gold`; * Fix deprecated use of `.A` with sparse matrices {pr}`3084` {smaller}`P Angerer`; * Fix zappy support {pr}`3089` {smaller}`P Angerer`; * Fix dotplot group order with {mod}`pandas` 1.x {pr}`3101` {smaller}`P Angerer`. ```{rubric} Performance; ```. * `sparse_mean_variance_axis` now uses all cores for the calculations {pr}`3015` {smaller}`S Dicks`; * `pp.highly_variable_genes` with `flavor=seurat_v3` now uses a numba kernel {pr}`3017` {smaller}`S Dicks`; * Speed up {func}`~scanpy.pp.scrublet` {pr}`3044` {smaller}`S Dicks` and {pr}`3056` {smaller}`P Angerer`; * Speed up clipping of array in {func}`~scanpy.pp.scale` {pr}`3100` {smaller}`P Ashish & S Dicks`; 

Instructions: 
1. Analyze the content and the attribute description.
2. Determine if the content accurately reflects the intended quality attribute in this context.
3. If it does, label it as `true_positive: true`; if not, mark it as a `true_positive: false`.
4. If the content consists only of logs with no other text, mark it as a `true_positive: false`. 
4. If the content partially consists of logs, focus on analyzing remaining text. 
5. Add `reasoning` why the content is a true or false positive.
",False,"The content provided seems to be related to software development tasks such as adding features, documentation updates, bug fixes, and performance improvements. While availability relates more directly to system readiness, reliability, and recovery mechanisms, the content here focuses on specific technical developments and fixes rather than addressing system availability or fault tolerance. Therefore, it does not accurately reflect the quality attribute of Availability but instead pertains to other aspects like performance and documentation."
Availability,"### 1.4.1 {small}`2019-04-26`. ```{rubric} New functionality; ```. - Scanpy has a command line interface again. Invoking it with `scanpy somecommand [args]` calls `scanpy-somecommand [args]`, except for builtin commands (currently `scanpy settings`) {pr}`604` {smaller}`P Angerer`; - {func}`~scanpy.datasets.ebi_expression_atlas` allows convenient download of EBI expression atlas {smaller}`I Virshup`; - {func}`~scanpy.tl.marker_gene_overlap` computes overlaps of marker genes {smaller}`M Luecken`; - {func}`~scanpy.tl.filter_rank_genes_groups` filters out genes based on fold change and fraction of cells expressing genes {smaller}`F Ramirez`; - {func}`~scanpy.pp.normalize_total` replaces {func}`~scanpy.pp.normalize_per_cell`, is more efficient and provides a parameter to only normalize using a fraction of expressed genes {smaller}`S Rybakov`; - {func}`~scanpy.pp.downsample_counts` has been sped up, changed default value of `replace` parameter to `False` {pr}`474` {smaller}`I Virshup`; - {func}`~scanpy.tl.embedding_density` computes densities on embeddings {pr}`543` {smaller}`M Luecken`; - {func}`~scanpy.external.tl.palantir` interfaces Palantir {cite:p}`Setty2019` {pr}`493` {smaller}`A Mousa`. ```{rubric} Code design; ```. - `.layers` support of scatter plots {smaller}`F Ramirez`; - fix double-logarithmization in compute of log fold change in {func}`~scanpy.tl.rank_genes_groups` {smaller}`A Muñoz-Rojas`; - fix return sections of docs {smaller}`P Angerer`; ",down,MatchSource.DOCS,scverse,scanpy,1.10.2,https://github.com/scverse/scanpy/tree/1.10.2/docs/release-notes/1.4.1.md:348,download,348,docs/release-notes/1.4.1.md,https://scanpy.readthedocs.io,https://github.com/scverse/scanpy/tree/1.10.2/docs/release-notes/1.4.1.md,1,['down'],['download'],"The system's readiness to perform its function when required, focusing on reliability and recovery. It involves fault masking or repair to prevent failures, ensuring minimal cumulative downtime.","
You are an expert in evaluating and categorizing quality attributes in software engineering. You possess the necessary skills to distinguish sentences that clearly relate to a given quality attribute from those that do not. 

Evaluate whether the content accurately aligns with its associated quality attribute, given the context provided. Your goal is to determine if the content makes sense in relation to the quality attribute description or if it is a false positive.

Data:

Quality Attribute: Availability
Attribute Description: The system's readiness to perform its function when required, focusing on reliability and recovery. It involves fault masking or repair to prevent failures, ensuring minimal cumulative downtime.
Content: ### 1.4.1 {small}`2019-04-26`. ```{rubric} New functionality; ```. - Scanpy has a command line interface again. Invoking it with `scanpy somecommand [args]` calls `scanpy-somecommand [args]`, except for builtin commands (currently `scanpy settings`) {pr}`604` {smaller}`P Angerer`; - {func}`~scanpy.datasets.ebi_expression_atlas` allows convenient download of EBI expression atlas {smaller}`I Virshup`; - {func}`~scanpy.tl.marker_gene_overlap` computes overlaps of marker genes {smaller}`M Luecken`; - {func}`~scanpy.tl.filter_rank_genes_groups` filters out genes based on fold change and fraction of cells expressing genes {smaller}`F Ramirez`; - {func}`~scanpy.pp.normalize_total` replaces {func}`~scanpy.pp.normalize_per_cell`, is more efficient and provides a parameter to only normalize using a fraction of expressed genes {smaller}`S Rybakov`; - {func}`~scanpy.pp.downsample_counts` has been sped up, changed default value of `replace` parameter to `False` {pr}`474` {smaller}`I Virshup`; - {func}`~scanpy.tl.embedding_density` computes densities on embeddings {pr}`543` {smaller}`M Luecken`; - {func}`~scanpy.external.tl.palantir` interfaces Palantir {cite:p}`Setty2019` {pr}`493` {smaller}`A Mousa`. ```{rubric} Code design; ```. - `.layers` support of scatter plots {smaller}`F Ramirez`; - fix double-logarithmization in compute of log fold change in {func}`~scanpy.tl.rank_genes_groups` {smaller}`A Muñoz-Rojas`; - fix return sections of docs {smaller}`P Angerer`; 

Instructions: 
1. Analyze the content and the attribute description.
2. Determine if the content accurately reflects the intended quality attribute in this context.
3. If it does, label it as `true_positive: true`; if not, mark it as a `true_positive: false`.
4. If the content consists only of logs with no other text, mark it as a `true_positive: false`. 
4. If the content partially consists of logs, focus on analyzing remaining text. 
5. Add `reasoning` why the content is a true or false positive.
",False,"The content describes new functionality in scanpy such as command line interface improvements and new processing functions. The quality attribute of Availability relates to system readiness and reliability. While these changes improve usability and efficiency, they don't directly address availability which focuses on preventing failures and ensuring uptime. Therefore, the content does not accurately reflect the intended quality attribute. It is a false positive."
Availability,"### 1.7.0 {small}`2021-02-03`. ```{rubric} Features; ```. - Add new 10x Visium datasets to {func}`~scanpy.datasets.visium_sge` {pr}`1473` {smaller}`G Palla`; - Enable download of source image for 10x visium datasets in {func}`~scanpy.datasets.visium_sge` {pr}`1506` {smaller}`H Spitzer`; - Refactor of {func}`scanpy.pl.spatial`. Better support for plotting without an image, as well as directly providing images {pr}`1512` {smaller}`G Palla`; - Dict input for {func}`scanpy.queries.enrich` {pr}`1488` {smaller}`G Eraslan`; - {func}`~scanpy.get.rank_genes_groups_df` can now return fraction of cells in a group expressing a gene, and allows retrieving values for multiple groups at once {pr}`1388` {smaller}`G Eraslan`; - Color annotations for gene sets in {func}`~scanpy.pl.heatmap` are now matched to color for cluster {pr}`1511` {smaller}`L Sikkema`; - PCA plots can now annotate axes with variance explained {pr}`1470` {smaller}`bfurtwa`; - Plots with `groupby` arguments can now group by values in the index by passing the index's name (like `pd.DataFrame.groupby`). {pr}`1583` {smaller}`F Ramirez`; - Added `na_color` and `na_in_legend` keyword arguments to {func}`~scanpy.pl.embedding` plots. Allows specifying color for missing or filtered values in plots like {func}`~scanpy.pl.umap` or {func}`~scanpy.pl.spatial` {pr}`1356` {smaller}`I Virshup`; - {func}`~scanpy.pl.embedding` plots now support passing `dict` of `{cluster_name: cluster_color, ...}` for palette argument {pr}`1392` {smaller}`I Virshup`. ```{rubric} External tools (new); ```. - Add [Scanorama](https://github.com/brianhie/scanorama) integration to scanpy external API ({func}`~scanpy.external.pp.scanorama_integrate`, {cite:t}`Hie2019`) {pr}`1332` {smaller}`B Hie`; - Scrublet {cite:p}`Wolock2019` integration: {func}`~scanpy.pp.scrublet`, {func}`~scanpy.pp.scrublet_simulate_doublets`, and plotting method {func}`~scanpy.pl.scrublet_score_distribution` {pr}`1476` {smaller}`J Manning`; - {func}`~scanpy.external.pp.hashsolo`",down,MatchSource.DOCS,scverse,scanpy,1.10.2,https://github.com/scverse/scanpy/tree/1.10.2/docs/release-notes/1.7.0.md:167,download,167,docs/release-notes/1.7.0.md,https://scanpy.readthedocs.io,https://github.com/scverse/scanpy/tree/1.10.2/docs/release-notes/1.7.0.md,1,['down'],['download'],"The system's readiness to perform its function when required, focusing on reliability and recovery. It involves fault masking or repair to prevent failures, ensuring minimal cumulative downtime.","
You are an expert in evaluating and categorizing quality attributes in software engineering. You possess the necessary skills to distinguish sentences that clearly relate to a given quality attribute from those that do not. 

Evaluate whether the content accurately aligns with its associated quality attribute, given the context provided. Your goal is to determine if the content makes sense in relation to the quality attribute description or if it is a false positive.

Data:

Quality Attribute: Availability
Attribute Description: The system's readiness to perform its function when required, focusing on reliability and recovery. It involves fault masking or repair to prevent failures, ensuring minimal cumulative downtime.
Content: ### 1.7.0 {small}`2021-02-03`. ```{rubric} Features; ```. - Add new 10x Visium datasets to {func}`~scanpy.datasets.visium_sge` {pr}`1473` {smaller}`G Palla`; - Enable download of source image for 10x visium datasets in {func}`~scanpy.datasets.visium_sge` {pr}`1506` {smaller}`H Spitzer`; - Refactor of {func}`scanpy.pl.spatial`. Better support for plotting without an image, as well as directly providing images {pr}`1512` {smaller}`G Palla`; - Dict input for {func}`scanpy.queries.enrich` {pr}`1488` {smaller}`G Eraslan`; - {func}`~scanpy.get.rank_genes_groups_df` can now return fraction of cells in a group expressing a gene, and allows retrieving values for multiple groups at once {pr}`1388` {smaller}`G Eraslan`; - Color annotations for gene sets in {func}`~scanpy.pl.heatmap` are now matched to color for cluster {pr}`1511` {smaller}`L Sikkema`; - PCA plots can now annotate axes with variance explained {pr}`1470` {smaller}`bfurtwa`; - Plots with `groupby` arguments can now group by values in the index by passing the index's name (like `pd.DataFrame.groupby`). {pr}`1583` {smaller}`F Ramirez`; - Added `na_color` and `na_in_legend` keyword arguments to {func}`~scanpy.pl.embedding` plots. Allows specifying color for missing or filtered values in plots like {func}`~scanpy.pl.umap` or {func}`~scanpy.pl.spatial` {pr}`1356` {smaller}`I Virshup`; - {func}`~scanpy.pl.embedding` plots now support passing `dict` of `{cluster_name: cluster_color, ...}` for palette argument {pr}`1392` {smaller}`I Virshup`. ```{rubric} External tools (new); ```. - Add [Scanorama](https://github.com/brianhie/scanorama) integration to scanpy external API ({func}`~scanpy.external.pp.scanorama_integrate`, {cite:t}`Hie2019`) {pr}`1332` {smaller}`B Hie`; - Scrublet {cite:p}`Wolock2019` integration: {func}`~scanpy.pp.scrublet`, {func}`~scanpy.pp.scrublet_simulate_doublets`, and plotting method {func}`~scanpy.pl.scrublet_score_distribution` {pr}`1476` {smaller}`J Manning`; - {func}`~scanpy.external.pp.hashsolo`

Instructions: 
1. Analyze the content and the attribute description.
2. Determine if the content accurately reflects the intended quality attribute in this context.
3. If it does, label it as `true_positive: true`; if not, mark it as a `true_positive: false`.
4. If the content consists only of logs with no other text, mark it as a `true_positive: false`. 
4. If the content partially consists of logs, focus on analyzing remaining text. 
5. Add `reasoning` why the content is a true or false positive.
",True,"The content provided describes updates and new features added to scanpy, an open-source software for single-cell analysis. The changes include adding new datasets, enabling downloads, refactoring code modules, integrating external tools like Scrublet and Scanorama, and improving visualization capabilities. These are technical developments aimed at enhancing the functionality and usability of the software, which relates to its availability in terms of reliability and readiness for use. The updates ensure that users have access to newer features and tools, reducing potential downtime or issues with versioning. Therefore, this content aligns well with the quality attribute of Availability by focusing on enhancements that make the system more robust and user-friendly."
Availability,### 1.7.1 {small}`2021-02-24`. ```{rubric} Documentation; ```. - More twitter handles for core devs {pr}`1676` {smaller}`G Eraslan`. ```{rubric} Bug fixes; ```. - {func}`~scanpy.tl.dendrogram` use `1 - correlation` as distance matrix to compute the dendrogram {pr}`1614` {smaller}`F Ramirez`; - Fixed {func}`~scanpy.get.obs_df`/ {func}`~scanpy.get.var_df` erroring when `keys` not passed {pr}`1637` {smaller}`I Virshup`; - Fixed argument handling for {func}`scanpy.pp.scrublet` {smaller}`J Manning`; - Fixed passing of `kwargs` to {func}`scanpy.pl.violin` when `stripplot` was also used {pr}`1655` {smaller}`M van den Beek`; - Fixed colorbar creation in `scanpy.pl.timeseries_as_heatmap` {pr}`1654` {smaller}`M van den Beek`; ,error,MatchSource.DOCS,scverse,scanpy,1.10.2,https://github.com/scverse/scanpy/tree/1.10.2/docs/release-notes/1.7.1.md:356,erroring,356,docs/release-notes/1.7.1.md,https://scanpy.readthedocs.io,https://github.com/scverse/scanpy/tree/1.10.2/docs/release-notes/1.7.1.md,1,['error'],['erroring'],"The system's readiness to perform its function when required, focusing on reliability and recovery. It involves fault masking or repair to prevent failures, ensuring minimal cumulative downtime.","
You are an expert in evaluating and categorizing quality attributes in software engineering. You possess the necessary skills to distinguish sentences that clearly relate to a given quality attribute from those that do not. 

Evaluate whether the content accurately aligns with its associated quality attribute, given the context provided. Your goal is to determine if the content makes sense in relation to the quality attribute description or if it is a false positive.

Data:

Quality Attribute: Availability
Attribute Description: The system's readiness to perform its function when required, focusing on reliability and recovery. It involves fault masking or repair to prevent failures, ensuring minimal cumulative downtime.
Content: ### 1.7.1 {small}`2021-02-24`. ```{rubric} Documentation; ```. - More twitter handles for core devs {pr}`1676` {smaller}`G Eraslan`. ```{rubric} Bug fixes; ```. - {func}`~scanpy.tl.dendrogram` use `1 - correlation` as distance matrix to compute the dendrogram {pr}`1614` {smaller}`F Ramirez`; - Fixed {func}`~scanpy.get.obs_df`/ {func}`~scanpy.get.var_df` erroring when `keys` not passed {pr}`1637` {smaller}`I Virshup`; - Fixed argument handling for {func}`scanpy.pp.scrublet` {smaller}`J Manning`; - Fixed passing of `kwargs` to {func}`scanpy.pl.violin` when `stripplot` was also used {pr}`1655` {smaller}`M van den Beek`; - Fixed colorbar creation in `scanpy.pl.timeseries_as_heatmap` {pr}`1654` {smaller}`M van den Beek`; 

Instructions: 
1. Analyze the content and the attribute description.
2. Determine if the content accurately reflects the intended quality attribute in this context.
3. If it does, label it as `true_positive: true`; if not, mark it as a `true_positive: false`.
4. If the content consists only of logs with no other text, mark it as a `true_positive: false`. 
4. If the content partially consists of logs, focus on analyzing remaining text. 
5. Add `reasoning` why the content is a true or false positive.
",False,"The content provided is a list of bug fixes and improvements related to specific functions in scanpy. The context does not mention anything about system readiness or reliability, which are key aspects of Availability. Therefore, this content does not align with the Availability quality attribute."
Availability,"### 1.7.2 {small}`2021-04-07`. ```{rubric} Bug fixes; ```. - {func}`scanpy.logging.print_versions` now works when `python<3.8` {pr}`1691` {smaller}`I Virshup`; - {func}`scanpy.pp.regress_out` now uses `joblib` as the parallel backend, and should stop oversubscribing threads {pr}`1694` {smaller}`I Virshup`; - {func}`scanpy.pp.highly_variable_genes` with `flavor=""seurat_v3""` now returns correct gene means and -variances when used with `batch_key` {pr}`1732` {smaller}`J Lause`; - {func}`scanpy.pp.highly_variable_genes` now throws a warning instead of an error when non-integer values are passed for method `""seurat_v3""`. The check can be skipped by passing `check_values=False`. {pr}`1679` {smaller}`G Palla`. ```{rubric} Ecosystem; ```. - Added `triku` a feature selection method to the ecosystem page {pr}`1722` {smaller}`AM Ascensión`; - Added `dorothea` and `progeny` to the ecosystem page {pr}`1767` {smaller}`P Badia-i-Mompel`; ",error,MatchSource.DOCS,scverse,scanpy,1.10.2,https://github.com/scverse/scanpy/tree/1.10.2/docs/release-notes/1.7.2.md:557,error,557,docs/release-notes/1.7.2.md,https://scanpy.readthedocs.io,https://github.com/scverse/scanpy/tree/1.10.2/docs/release-notes/1.7.2.md,1,['error'],['error'],"The system's readiness to perform its function when required, focusing on reliability and recovery. It involves fault masking or repair to prevent failures, ensuring minimal cumulative downtime.","
You are an expert in evaluating and categorizing quality attributes in software engineering. You possess the necessary skills to distinguish sentences that clearly relate to a given quality attribute from those that do not. 

Evaluate whether the content accurately aligns with its associated quality attribute, given the context provided. Your goal is to determine if the content makes sense in relation to the quality attribute description or if it is a false positive.

Data:

Quality Attribute: Availability
Attribute Description: The system's readiness to perform its function when required, focusing on reliability and recovery. It involves fault masking or repair to prevent failures, ensuring minimal cumulative downtime.
Content: ### 1.7.2 {small}`2021-04-07`. ```{rubric} Bug fixes; ```. - {func}`scanpy.logging.print_versions` now works when `python<3.8` {pr}`1691` {smaller}`I Virshup`; - {func}`scanpy.pp.regress_out` now uses `joblib` as the parallel backend, and should stop oversubscribing threads {pr}`1694` {smaller}`I Virshup`; - {func}`scanpy.pp.highly_variable_genes` with `flavor=""seurat_v3""` now returns correct gene means and -variances when used with `batch_key` {pr}`1732` {smaller}`J Lause`; - {func}`scanpy.pp.highly_variable_genes` now throws a warning instead of an error when non-integer values are passed for method `""seurat_v3""`. The check can be skipped by passing `check_values=False`. {pr}`1679` {smaller}`G Palla`. ```{rubric} Ecosystem; ```. - Added `triku` a feature selection method to the ecosystem page {pr}`1722` {smaller}`AM Ascensión`; - Added `dorothea` and `progeny` to the ecosystem page {pr}`1767` {smaller}`P Badia-i-Mompel`; 

Instructions: 
1. Analyze the content and the attribute description.
2. Determine if the content accurately reflects the intended quality attribute in this context.
3. If it does, label it as `true_positive: true`; if not, mark it as a `true_positive: false`.
4. If the content consists only of logs with no other text, mark it as a `true_positive: false`. 
4. If the content partially consists of logs, focus on analyzing remaining text. 
5. Add `reasoning` why the content is a true or false positive.
",False,"The provided content seems to be a list of bug fixes and updates related to various features in the system. The context involves improving functionality and adding new features, which relates to the availability as it ensures the system can perform its required functions reliably. However, the content doesn't explicitly discuss fault masking or recovery mechanisms, which are central to the definition of availability. Therefore, while it ties into aspects of reliability, it might not fully align with the strict definition of availability that includes failure handling and recovery."
Availability,"### 1.8.0 {small}`2021-06-28`. ```{rubric} Metrics module; ```. - Added {mod}`scanpy.metrics` module!. > - Added {func}`scanpy.metrics.gearys_c` for spatial autocorrelation {pr}`915` {smaller}`I Virshup`; > - Added {func}`scanpy.metrics.morans_i` for global spatial autocorrelation {pr}`1740` {smaller}`I Virshup, G Palla`; > - Added {func}`scanpy.metrics.confusion_matrix` for comparing labellings {pr}`915` {smaller}`I Virshup`. ```{rubric} Features; ```. - Added `layer` and `copy` kwargs to {func}`~scanpy.pp.normalize_total` {pr}`1667` {smaller}`I Virshup`; - Added `vcenter` and `norm` arguments to the plotting functions {pr}`1551` {smaller}`G Eraslan`; - Standardized and expanded available arguments to the `sc.pl.rank_genes_groups*` family of functions. {pr}`1529` {smaller}`F Ramirez` {smaller}`I Virshup`; \- See examples sections of {func}`~scanpy.pl.rank_genes_groups_dotplot` and {func}`~scanpy.pl.rank_genes_groups_matrixplot` for demonstrations.; - {func}`scanpy.tl.tsne` now supports the metric argument and records the passed parameters {pr}`1854` {smaller}`I Virshup`; - {func}`scanpy.pl.scrublet_score_distribution` now uses same API as other scanpy functions for saving/ showing plots {pr}`1741` {smaller}`J Manning`. ```{rubric} Ecosystem; ```. - Added [Cubé](https://github.com/connerlambden/Cube) to ecosystem page {pr}`1878` {smaller}`C Lambden`; - Added `triku` a feature selection method to the ecosystem page {pr}`1722` {smaller}`AM Ascensión`; - Added `dorothea` and `progeny` to the ecosystem page {pr}`1767` {smaller}`P Badia-i-Mompel`. ```{rubric} Documentation; ```. - Added {doc}`/community` page to docs {pr}`1856` {smaller}`I Virshup`; - Added rendered examples to many plotting functions {issue}`1664` {smaller}`A Schaar` {smaller}`L Zappia` {smaller}`bio-la` {smaller}`L Hetzel` {smaller}`L Dony` {smaller}`M Buttner` {smaller}`K Hrovatin` {smaller}`F Ramirez` {smaller}`I Virshup` {smaller}`LouisK92` {smaller}`mayarali`; - Integrated [DocSearch], a find-as-you",avail,MatchSource.DOCS,scverse,scanpy,1.10.2,https://github.com/scverse/scanpy/tree/1.10.2/docs/release-notes/1.8.0.md:689,available,689,docs/release-notes/1.8.0.md,https://scanpy.readthedocs.io,https://github.com/scverse/scanpy/tree/1.10.2/docs/release-notes/1.8.0.md,1,['avail'],['available'],"The system's readiness to perform its function when required, focusing on reliability and recovery. It involves fault masking or repair to prevent failures, ensuring minimal cumulative downtime.","
You are an expert in evaluating and categorizing quality attributes in software engineering. You possess the necessary skills to distinguish sentences that clearly relate to a given quality attribute from those that do not. 

Evaluate whether the content accurately aligns with its associated quality attribute, given the context provided. Your goal is to determine if the content makes sense in relation to the quality attribute description or if it is a false positive.

Data:

Quality Attribute: Availability
Attribute Description: The system's readiness to perform its function when required, focusing on reliability and recovery. It involves fault masking or repair to prevent failures, ensuring minimal cumulative downtime.
Content: ### 1.8.0 {small}`2021-06-28`. ```{rubric} Metrics module; ```. - Added {mod}`scanpy.metrics` module!. > - Added {func}`scanpy.metrics.gearys_c` for spatial autocorrelation {pr}`915` {smaller}`I Virshup`; > - Added {func}`scanpy.metrics.morans_i` for global spatial autocorrelation {pr}`1740` {smaller}`I Virshup, G Palla`; > - Added {func}`scanpy.metrics.confusion_matrix` for comparing labellings {pr}`915` {smaller}`I Virshup`. ```{rubric} Features; ```. - Added `layer` and `copy` kwargs to {func}`~scanpy.pp.normalize_total` {pr}`1667` {smaller}`I Virshup`; - Added `vcenter` and `norm` arguments to the plotting functions {pr}`1551` {smaller}`G Eraslan`; - Standardized and expanded available arguments to the `sc.pl.rank_genes_groups*` family of functions. {pr}`1529` {smaller}`F Ramirez` {smaller}`I Virshup`; \- See examples sections of {func}`~scanpy.pl.rank_genes_groups_dotplot` and {func}`~scanpy.pl.rank_genes_groups_matrixplot` for demonstrations.; - {func}`scanpy.tl.tsne` now supports the metric argument and records the passed parameters {pr}`1854` {smaller}`I Virshup`; - {func}`scanpy.pl.scrublet_score_distribution` now uses same API as other scanpy functions for saving/ showing plots {pr}`1741` {smaller}`J Manning`. ```{rubric} Ecosystem; ```. - Added [Cubé](https://github.com/connerlambden/Cube) to ecosystem page {pr}`1878` {smaller}`C Lambden`; - Added `triku` a feature selection method to the ecosystem page {pr}`1722` {smaller}`AM Ascensión`; - Added `dorothea` and `progeny` to the ecosystem page {pr}`1767` {smaller}`P Badia-i-Mompel`. ```{rubric} Documentation; ```. - Added {doc}`/community` page to docs {pr}`1856` {smaller}`I Virshup`; - Added rendered examples to many plotting functions {issue}`1664` {smaller}`A Schaar` {smaller}`L Zappia` {smaller}`bio-la` {smaller}`L Hetzel` {smaller}`L Dony` {smaller}`M Buttner` {smaller}`K Hrovatin` {smaller}`F Ramirez` {smaller}`I Virshup` {smaller}`LouisK92` {smaller}`mayarali`; - Integrated [DocSearch], a find-as-you

Instructions: 
1. Analyze the content and the attribute description.
2. Determine if the content accurately reflects the intended quality attribute in this context.
3. If it does, label it as `true_positive: true`; if not, mark it as a `true_positive: false`.
4. If the content consists only of logs with no other text, mark it as a `true_positive: false`. 
4. If the content partially consists of logs, focus on analyzing remaining text. 
5. Add `reasoning` why the content is a true or false positive.
",False,"The provided content discusses updates and additions to various modules, features, documentation, etc., which are related to the functionality and maintainability of software rather than its ability to be available when required. Therefore, it does not align with the 'Availability' quality attribute."
Availability,"(News)=. ## News. ```{eval-rst}; .. role:: small. ```. <!-- marker: after prelude -->. ### `rapids-singlecell` brings scanpy to the GPU! {small}`2024-03-18`. {doc}`rapids-singlecell <rapids_singlecell:index>` by Severin Dicks provides a scanpy-like API with accelerated operations implemented on GPU. ### Scanpy hits 100 contributors! {small}`2022-03-31`. [100 people have contributed to Scanpy's source code!](https://github.com/scverse/scanpy/graphs/contributors). Of course, contributions to the project are not limited to direct modification of the source code.; Many others have improved the project by building on top of it, participating in development discussions, helping others with usage, or by showing off what it's helped them accomplish. Thanks to all our contributors for making this project possible!. ### New community channels {small}`2022-03-31`. We've moved our forums and have a new publicly available chat!. * Our discourse forum has migrated to a joint scverse forum ([discourse.scverse.org](https://discourse.scverse.org)).; * Our private developer Slack has been replaced by a public Zulip chat ([scverse.zulipchat.com](https://scverse.zulipchat.com)). ### Toolkit for spatial (squidpy) and multimodal (muon) published {small}`2022-02-01`. Two large toolkits extending our ecosystem to new modalities have had their manuscripts published!. * [Muon](https://muon.readthedocs.io/), a framework for multimodal has been published in [Genome Biology](https://genomebiology.biomedcentral.com/articles/10.1186/s13059-021-02577-8).; * [Squidpy](https://squidpy.readthedocs.io/) a toolkit for working with spatial single cell data has been published in [Nature Methods](https://www.nature.com/articles/s41592-021-01358-2). <!-- marker: before old news -->. ### scVelo on the cover of Nature Biotechnology {small}`2020-12-01`. Scanpy's counterpart for RNA velocity, [scVelo](https://scvelo.org/), made it on the cover of [Nature Biotechnology](https://www.nature.com/nbt/volumes/38/issu",avail,MatchSource.DOCS,scverse,scanpy,1.10.2,https://github.com/scverse/scanpy/tree/1.10.2/docs/news.md:913,available,913,docs/news.md,https://scanpy.readthedocs.io,https://github.com/scverse/scanpy/tree/1.10.2/docs/news.md,1,['avail'],['available'],"The system's readiness to perform its function when required, focusing on reliability and recovery. It involves fault masking or repair to prevent failures, ensuring minimal cumulative downtime.","
You are an expert in evaluating and categorizing quality attributes in software engineering. You possess the necessary skills to distinguish sentences that clearly relate to a given quality attribute from those that do not. 

Evaluate whether the content accurately aligns with its associated quality attribute, given the context provided. Your goal is to determine if the content makes sense in relation to the quality attribute description or if it is a false positive.

Data:

Quality Attribute: Availability
Attribute Description: The system's readiness to perform its function when required, focusing on reliability and recovery. It involves fault masking or repair to prevent failures, ensuring minimal cumulative downtime.
Content: (News)=. ## News. ```{eval-rst}; .. role:: small. ```. <!-- marker: after prelude -->. ### `rapids-singlecell` brings scanpy to the GPU! {small}`2024-03-18`. {doc}`rapids-singlecell <rapids_singlecell:index>` by Severin Dicks provides a scanpy-like API with accelerated operations implemented on GPU. ### Scanpy hits 100 contributors! {small}`2022-03-31`. [100 people have contributed to Scanpy's source code!](https://github.com/scverse/scanpy/graphs/contributors). Of course, contributions to the project are not limited to direct modification of the source code.; Many others have improved the project by building on top of it, participating in development discussions, helping others with usage, or by showing off what it's helped them accomplish. Thanks to all our contributors for making this project possible!. ### New community channels {small}`2022-03-31`. We've moved our forums and have a new publicly available chat!. * Our discourse forum has migrated to a joint scverse forum ([discourse.scverse.org](https://discourse.scverse.org)).; * Our private developer Slack has been replaced by a public Zulip chat ([scverse.zulipchat.com](https://scverse.zulipchat.com)). ### Toolkit for spatial (squidpy) and multimodal (muon) published {small}`2022-02-01`. Two large toolkits extending our ecosystem to new modalities have had their manuscripts published!. * [Muon](https://muon.readthedocs.io/), a framework for multimodal has been published in [Genome Biology](https://genomebiology.biomedcentral.com/articles/10.1186/s13059-021-02577-8).; * [Squidpy](https://squidpy.readthedocs.io/) a toolkit for working with spatial single cell data has been published in [Nature Methods](https://www.nature.com/articles/s41592-021-01358-2). <!-- marker: before old news -->. ### scVelo on the cover of Nature Biotechnology {small}`2020-12-01`. Scanpy's counterpart for RNA velocity, [scVelo](https://scvelo.org/), made it on the cover of [Nature Biotechnology](https://www.nature.com/nbt/volumes/38/issu

Instructions: 
1. Analyze the content and the attribute description.
2. Determine if the content accurately reflects the intended quality attribute in this context.
3. If it does, label it as `true_positive: true`; if not, mark it as a `true_positive: false`.
4. If the content consists only of logs with no other text, mark it as a `true_positive: false`. 
4. If the content partially consists of logs, focus on analyzing remaining text. 
5. Add `reasoning` why the content is a true or false positive.
",False,"The provided content discusses news and updates related to various projects and toolkits within the scverse ecosystem, including new publications, community channel changes, and feature enhancements. While availability is about system readiness and reliability, this content focuses on project updates and community engagement rather than the functional aspects of a system's ability to be operational when needed. Therefore, it does not align with the definition of availability as described in the quality attribute. Hence, it should be marked as true_positive: false."
Availability,"(settings)=. ## Settings. ```{eval-rst}; .. currentmodule:: scanpy; ```. A convenience function for setting some default {obj}`matplotlib.rcParams` and a; high-resolution jupyter display backend useful for use in notebooks. ```{eval-rst}; .. autosummary::; :nosignatures:; :toctree: ../generated/. set_figure_params; ```. An instance of the {class}`~scanpy._settings.ScanpyConfig` is available as `scanpy.settings` and allows configuring Scanpy. ```{eval-rst}; .. autosummary::; :nosignatures:; :toctree: ../generated/. _settings.ScanpyConfig; ```. Some selected settings are discussed in the following. Influence the global behavior of plotting functions. In non-interactive scripts,; you'd usually want to set `settings.autoshow` to `False`. % no :toctree: here because they are linked under the class. ```{eval-rst}; .. autosummary::; :nosignatures:. ~_settings.ScanpyConfig.autoshow; ~_settings.ScanpyConfig.autosave; ```. The default directories for saving figures, caching files and storing datasets. ```{eval-rst}; .. autosummary::; :nosignatures:. ~_settings.ScanpyConfig.figdir; ~_settings.ScanpyConfig.cachedir; ~_settings.ScanpyConfig.datasetdir; ```. The verbosity of logging output, where verbosity levels have the following; meaning: 0='error', 1='warning', 2='info', 3='hint', 4=more details, 5=even more; details, etc. ```{eval-rst}; .. autosummary::; :nosignatures:. ~_settings.ScanpyConfig.verbosity; ```. Print versions of packages that might influence numerical results. ```{eval-rst}; .. autosummary::; :nosignatures:; :toctree: ../generated/. logging.print_header; logging.print_versions. ```; ",avail,MatchSource.DOCS,scverse,scanpy,1.10.2,https://github.com/scverse/scanpy/tree/1.10.2/docs/api/settings.md:384,available,384,docs/api/settings.md,https://scanpy.readthedocs.io,https://github.com/scverse/scanpy/tree/1.10.2/docs/api/settings.md,2,"['avail', 'error']","['available', 'error']","The system's readiness to perform its function when required, focusing on reliability and recovery. It involves fault masking or repair to prevent failures, ensuring minimal cumulative downtime.","
You are an expert in evaluating and categorizing quality attributes in software engineering. You possess the necessary skills to distinguish sentences that clearly relate to a given quality attribute from those that do not. 

Evaluate whether the content accurately aligns with its associated quality attribute, given the context provided. Your goal is to determine if the content makes sense in relation to the quality attribute description or if it is a false positive.

Data:

Quality Attribute: Availability
Attribute Description: The system's readiness to perform its function when required, focusing on reliability and recovery. It involves fault masking or repair to prevent failures, ensuring minimal cumulative downtime.
Content: (settings)=. ## Settings. ```{eval-rst}; .. currentmodule:: scanpy; ```. A convenience function for setting some default {obj}`matplotlib.rcParams` and a; high-resolution jupyter display backend useful for use in notebooks. ```{eval-rst}; .. autosummary::; :nosignatures:; :toctree: ../generated/. set_figure_params; ```. An instance of the {class}`~scanpy._settings.ScanpyConfig` is available as `scanpy.settings` and allows configuring Scanpy. ```{eval-rst}; .. autosummary::; :nosignatures:; :toctree: ../generated/. _settings.ScanpyConfig; ```. Some selected settings are discussed in the following. Influence the global behavior of plotting functions. In non-interactive scripts,; you'd usually want to set `settings.autoshow` to `False`. % no :toctree: here because they are linked under the class. ```{eval-rst}; .. autosummary::; :nosignatures:. ~_settings.ScanpyConfig.autoshow; ~_settings.ScanpyConfig.autosave; ```. The default directories for saving figures, caching files and storing datasets. ```{eval-rst}; .. autosummary::; :nosignatures:. ~_settings.ScanpyConfig.figdir; ~_settings.ScanpyConfig.cachedir; ~_settings.ScanpyConfig.datasetdir; ```. The verbosity of logging output, where verbosity levels have the following; meaning: 0='error', 1='warning', 2='info', 3='hint', 4=more details, 5=even more; details, etc. ```{eval-rst}; .. autosummary::; :nosignatures:. ~_settings.ScanpyConfig.verbosity; ```. Print versions of packages that might influence numerical results. ```{eval-rst}; .. autosummary::; :nosignatures:; :toctree: ../generated/. logging.print_header; logging.print_versions. ```; 

Instructions: 
1. Analyze the content and the attribute description.
2. Determine if the content accurately reflects the intended quality attribute in this context.
3. If it does, label it as `true_positive: true`; if not, mark it as a `true_positive: false`.
4. If the content consists only of logs with no other text, mark it as a `true_positive: false`. 
4. If the content partially consists of logs, focus on analyzing remaining text. 
5. Add `reasoning` why the content is a true or false positive.
",False,"The content provided discusses various settings in scanpy such as default directories for figures, caching, and datasets; verbosity levels for logging; and printing versions of packages. These are all configuration options rather than discussing availability aspects like reliability, recovery mechanisms, or fault handling. The context is more about system configuration and user preferences rather than the readiness of the system to perform its functions when required. Therefore, it does not align with the Availability quality attribute description."
Availability,"(tests)=. # Tests. Possibly the most important part of contributing to any open source package is the test suite.; Implementations may change, but the only way we can know the code is working before making a release is the test suite. ## Running the tests. We use [pytest](https://docs.pytest.org/en/stable/) to test scanpy.; To run the tests first make sure you have the required dependencies (`pip install -e "".[test,dev]""`), then run `pytest` from the root of the repository. It can take a while to run the whole test suite. There are a few ways to cut down on this while working on a PR:. 1. Only run a subset of the tests. This can be done with the `-k` argument from pytest (e.g. `pytest -k test_plotting.py` or `pytest -k ""test_umap*""`; 2. Run the tests in parallel. If you install the pytest extension [pytest-xdist](https://github.com/pytest-dev/pytest-xdist) you can run tests in parallel with the `--numprocesses` argument to pytest (e.g. `pytest -n 8`). ### Miscellaneous tips. - A lot of warnings can be thrown while running the test suite. It's often easier to read the test results with them hidden via the `--disable-pytest-warnings` argument. ## Writing tests. You can refer to the [existing test suite](https://github.com/scverse/scanpy/tree/main/scanpy/tests) for examples.; If you haven't written tests before, Software Carpentry has an [in-depth guide](https://katyhuff.github.io/2016-07-11-scipy/testing/01-basics.html) on the topic. We highly recommend using [Test Driven Development](https://en.wikipedia.org/wiki/Test-driven_development) when contributing code.; This not only ensures you have tests written, it often makes implementation easier since you start out with a specification for your function. Consider parameterizing your tests using the `pytest.mark.parameterize` and `pytest.fixture` decorators.; Documentation on these can be found [here](https://docs.pytest.org/en/stable/fixture.html), but we'd also recommend searching our test suite for existing usage. ###",down,MatchSource.DOCS,scverse,scanpy,1.10.2,https://github.com/scverse/scanpy/tree/1.10.2/docs/dev/testing.md:556,down,556,docs/dev/testing.md,https://scanpy.readthedocs.io,https://github.com/scverse/scanpy/tree/1.10.2/docs/dev/testing.md,1,['down'],['down'],"The system's readiness to perform its function when required, focusing on reliability and recovery. It involves fault masking or repair to prevent failures, ensuring minimal cumulative downtime.","
You are an expert in evaluating and categorizing quality attributes in software engineering. You possess the necessary skills to distinguish sentences that clearly relate to a given quality attribute from those that do not. 

Evaluate whether the content accurately aligns with its associated quality attribute, given the context provided. Your goal is to determine if the content makes sense in relation to the quality attribute description or if it is a false positive.

Data:

Quality Attribute: Availability
Attribute Description: The system's readiness to perform its function when required, focusing on reliability and recovery. It involves fault masking or repair to prevent failures, ensuring minimal cumulative downtime.
Content: (tests)=. # Tests. Possibly the most important part of contributing to any open source package is the test suite.; Implementations may change, but the only way we can know the code is working before making a release is the test suite. ## Running the tests. We use [pytest](https://docs.pytest.org/en/stable/) to test scanpy.; To run the tests first make sure you have the required dependencies (`pip install -e "".[test,dev]""`), then run `pytest` from the root of the repository. It can take a while to run the whole test suite. There are a few ways to cut down on this while working on a PR:. 1. Only run a subset of the tests. This can be done with the `-k` argument from pytest (e.g. `pytest -k test_plotting.py` or `pytest -k ""test_umap*""`; 2. Run the tests in parallel. If you install the pytest extension [pytest-xdist](https://github.com/pytest-dev/pytest-xdist) you can run tests in parallel with the `--numprocesses` argument to pytest (e.g. `pytest -n 8`). ### Miscellaneous tips. - A lot of warnings can be thrown while running the test suite. It's often easier to read the test results with them hidden via the `--disable-pytest-warnings` argument. ## Writing tests. You can refer to the [existing test suite](https://github.com/scverse/scanpy/tree/main/scanpy/tests) for examples.; If you haven't written tests before, Software Carpentry has an [in-depth guide](https://katyhuff.github.io/2016-07-11-scipy/testing/01-basics.html) on the topic. We highly recommend using [Test Driven Development](https://en.wikipedia.org/wiki/Test-driven_development) when contributing code.; This not only ensures you have tests written, it often makes implementation easier since you start out with a specification for your function. Consider parameterizing your tests using the `pytest.mark.parameterize` and `pytest.fixture` decorators.; Documentation on these can be found [here](https://docs.pytest.org/en/stable/fixture.html), but we'd also recommend searching our test suite for existing usage. ###

Instructions: 
1. Analyze the content and the attribute description.
2. Determine if the content accurately reflects the intended quality attribute in this context.
3. If it does, label it as `true_positive: true`; if not, mark it as a `true_positive: false`.
4. If the content consists only of logs with no other text, mark it as a `true_positive: false`. 
4. If the content partially consists of logs, focus on analyzing remaining text. 
5. Add `reasoning` why the content is a true or false positive.
",True,"The content provided discusses how to run tests for a project using pytest, which is related to ensuring code reliability and functionality (quality attribute: availability). The description mentions the importance of a test suite in confirming that the code works before release, which ties into the system's readiness and performance. While the content focuses heavily on testing practices, it indirectly supports the overall quality attribute by ensuring that software functions as intended, thus contributing to its availability."
Availability,".tl.palantir_results` {pr}`1245` {smaller}`A Mousa`; - Fixes to {func}`~scanpy.external.tl.harmony_timeseries` docs {pr}`1248` {smaller}`A Mousa`; - Support for `leiden` clustering by {func}`scanpy.external.tl.phenograph` {pr}`1080` {smaller}`A Mousa`; - Deprecate `scanpy.external.pp.scvi` {pr}`1554` {smaller}`G Xing`; - Updated default params of {func}`~scanpy.external.tl.sam` to work with larger data {pr}`1540` {smaller}`A Tarashansky`. ```{rubric} Documentation; ```. - {ref}`New contribution guide <contribution-guide>` {pr}`1544` {smaller}`I Virshup`; - `zsh` installation instructions {pr}`1444` {smaller}`P Angerer`. ```{rubric} Performance; ```. - Speed up {func}`~scanpy.read_10x_h5` {pr}`1402` {smaller}`P Weiler`; - Speed ups for {func}`~scanpy.get.obs_df` {pr}`1499` {smaller}`F Ramirez`. ```{rubric} Bugfixes; ```. - Consistent fold-change, fractions calculation for filter_rank_genes_groups {pr}`1391` {smaller}`S Rybakov`; - Fixed bug where `score_genes` would error if one gene was passed {pr}`1398` {smaller}`I Virshup`; - Fixed `log1p` inplace on integer dense arrays {pr}`1400` {smaller}`I Virshup`; - Fix docstring formatting for {func}`~scanpy.tl.rank_genes_groups` {pr}`1417` {smaller}`P Weiler`; - Removed `` PendingDeprecationWarning`s from use of `np.matrix `` {pr}`1424` {smaller}`P Weiler`; - Fixed indexing byg in `~scanpy.pp.highly_variable_genes` {pr}`1456` {smaller}`V Bergen`; - Fix default number of genes for marker_genes_overlap {pr}`1464` {smaller}`MD Luecken`; - Fixed passing `groupby` and `dendrogram_key` to {func}`~scanpy.tl.dendrogram` {pr}`1465` {smaller}`M Varma`; - Fixed download path of `pbmc3k_processed` {pr}`1472` {smaller}`D Strobl`; - Better error message when computing DE with a group of size 1 {pr}`1490` {smaller}`J Manning`; - Update cugraph API usage for v0.16 {pr}`1494` {smaller}`R Ilango`; - Fixed `marker_gene_overlap` default value for `top_n_markers` {pr}`1464` {smaller}`MD Luecken`; - Pass `random_state` to RAPIDs UMAP {pr}`1474`",error,MatchSource.DOCS,scverse,scanpy,1.10.2,https://github.com/scverse/scanpy/tree/1.10.2/docs/release-notes/1.7.0.md:3402,error,3402,docs/release-notes/1.7.0.md,https://scanpy.readthedocs.io,https://github.com/scverse/scanpy/tree/1.10.2/docs/release-notes/1.7.0.md,1,['error'],['error'],"The system's readiness to perform its function when required, focusing on reliability and recovery. It involves fault masking or repair to prevent failures, ensuring minimal cumulative downtime.","
You are an expert in evaluating and categorizing quality attributes in software engineering. You possess the necessary skills to distinguish sentences that clearly relate to a given quality attribute from those that do not. 

Evaluate whether the content accurately aligns with its associated quality attribute, given the context provided. Your goal is to determine if the content makes sense in relation to the quality attribute description or if it is a false positive.

Data:

Quality Attribute: Availability
Attribute Description: The system's readiness to perform its function when required, focusing on reliability and recovery. It involves fault masking or repair to prevent failures, ensuring minimal cumulative downtime.
Content: .tl.palantir_results` {pr}`1245` {smaller}`A Mousa`; - Fixes to {func}`~scanpy.external.tl.harmony_timeseries` docs {pr}`1248` {smaller}`A Mousa`; - Support for `leiden` clustering by {func}`scanpy.external.tl.phenograph` {pr}`1080` {smaller}`A Mousa`; - Deprecate `scanpy.external.pp.scvi` {pr}`1554` {smaller}`G Xing`; - Updated default params of {func}`~scanpy.external.tl.sam` to work with larger data {pr}`1540` {smaller}`A Tarashansky`. ```{rubric} Documentation; ```. - {ref}`New contribution guide <contribution-guide>` {pr}`1544` {smaller}`I Virshup`; - `zsh` installation instructions {pr}`1444` {smaller}`P Angerer`. ```{rubric} Performance; ```. - Speed up {func}`~scanpy.read_10x_h5` {pr}`1402` {smaller}`P Weiler`; - Speed ups for {func}`~scanpy.get.obs_df` {pr}`1499` {smaller}`F Ramirez`. ```{rubric} Bugfixes; ```. - Consistent fold-change, fractions calculation for filter_rank_genes_groups {pr}`1391` {smaller}`S Rybakov`; - Fixed bug where `score_genes` would error if one gene was passed {pr}`1398` {smaller}`I Virshup`; - Fixed `log1p` inplace on integer dense arrays {pr}`1400` {smaller}`I Virshup`; - Fix docstring formatting for {func}`~scanpy.tl.rank_genes_groups` {pr}`1417` {smaller}`P Weiler`; - Removed `` PendingDeprecationWarning`s from use of `np.matrix `` {pr}`1424` {smaller}`P Weiler`; - Fixed indexing byg in `~scanpy.pp.highly_variable_genes` {pr}`1456` {smaller}`V Bergen`; - Fix default number of genes for marker_genes_overlap {pr}`1464` {smaller}`MD Luecken`; - Fixed passing `groupby` and `dendrogram_key` to {func}`~scanpy.tl.dendrogram` {pr}`1465` {smaller}`M Varma`; - Fixed download path of `pbmc3k_processed` {pr}`1472` {smaller}`D Strobl`; - Better error message when computing DE with a group of size 1 {pr}`1490` {smaller}`J Manning`; - Update cugraph API usage for v0.16 {pr}`1494` {smaller}`R Ilango`; - Fixed `marker_gene_overlap` default value for `top_n_markers` {pr}`1464` {smaller}`MD Luecken`; - Pass `random_state` to RAPIDs UMAP {pr}`1474`

Instructions: 
1. Analyze the content and the attribute description.
2. Determine if the content accurately reflects the intended quality attribute in this context.
3. If it does, label it as `true_positive: true`; if not, mark it as a `true_positive: false`.
4. If the content consists only of logs with no other text, mark it as a `true_positive: false`. 
4. If the content partially consists of logs, focus on analyzing remaining text. 
5. Add `reasoning` why the content is a true or false positive.
",False,"The content provided discusses various fixes and updates in software documentation, including performance improvements and bug fixes. These aspects relate to system reliability and recovery, which are key components of Availability. However, since the context consists primarily of logs with no explicit mention of fault masking or repair mechanisms, it does not fully align with the broader definition of Availability. The focus here is more on maintainability rather than system readiness."
Availability,"Contributing; ============. Contributions to Scanpy are highly welcome!. Before filing an issue; ----------------------; * Search the repository (also google) to see if someone has already reported the same issue.; This allows contributors to spend less time responding to issues, and more time adding new features!; * Please provide a minimal complete verifiable example for any bug.; If you're not sure what this means, check out; [this blog post](https://matthewrocklin.com/minimal-bug-reports); by Matthew Rocklin or [this definition](https://stackoverflow.com/help/mcve) from StackOverflow.; * Let us know about your environment. Environment information is available via: `sc.logging.print_versions()`. Contributing code; -----------------. We love code contributions!; If you're interested in contributing code, please take a look over the [contribution guide](https://scanpy.readthedocs.io/en/latest/dev/index.html) in the main documentation.; ",avail,MatchSource.DOCS,scverse,scanpy,1.10.2,https://github.com/scverse/scanpy/tree/1.10.2/CONTRIBUTING.md:662,available,662,CONTRIBUTING.md,https://scanpy.readthedocs.io,https://github.com/scverse/scanpy/tree/1.10.2/CONTRIBUTING.md,1,['avail'],['available'],"The system's readiness to perform its function when required, focusing on reliability and recovery. It involves fault masking or repair to prevent failures, ensuring minimal cumulative downtime.","
You are an expert in evaluating and categorizing quality attributes in software engineering. You possess the necessary skills to distinguish sentences that clearly relate to a given quality attribute from those that do not. 

Evaluate whether the content accurately aligns with its associated quality attribute, given the context provided. Your goal is to determine if the content makes sense in relation to the quality attribute description or if it is a false positive.

Data:

Quality Attribute: Availability
Attribute Description: The system's readiness to perform its function when required, focusing on reliability and recovery. It involves fault masking or repair to prevent failures, ensuring minimal cumulative downtime.
Content: Contributing; ============. Contributions to Scanpy are highly welcome!. Before filing an issue; ----------------------; * Search the repository (also google) to see if someone has already reported the same issue.; This allows contributors to spend less time responding to issues, and more time adding new features!; * Please provide a minimal complete verifiable example for any bug.; If you're not sure what this means, check out; [this blog post](https://matthewrocklin.com/minimal-bug-reports); by Matthew Rocklin or [this definition](https://stackoverflow.com/help/mcve) from StackOverflow.; * Let us know about your environment. Environment information is available via: `sc.logging.print_versions()`. Contributing code; -----------------. We love code contributions!; If you're interested in contributing code, please take a look over the [contribution guide](https://scanpy.readthedocs.io/en/latest/dev/index.html) in the main documentation.; 

Instructions: 
1. Analyze the content and the attribute description.
2. Determine if the content accurately reflects the intended quality attribute in this context.
3. If it does, label it as `true_positive: true`; if not, mark it as a `true_positive: false`.
4. If the content consists only of logs with no other text, mark it as a `true_positive: false`. 
4. If the content partially consists of logs, focus on analyzing remaining text. 
5. Add `reasoning` why the content is a true or false positive.
",False,"The provided content does not discuss anything related to system readiness, reliability, or recovery mechanisms. Instead, it outlines guidelines for contributing to an open-source project, including how to report issues and submit contributions. There's no mention of fault masking, repairs, or minimizing downtime. Therefore, the content does not align with the Availability quality attribute."
Availability,"` {pr}`1402` {smaller}`P Weiler`; - Speed ups for {func}`~scanpy.get.obs_df` {pr}`1499` {smaller}`F Ramirez`. ```{rubric} Bugfixes; ```. - Consistent fold-change, fractions calculation for filter_rank_genes_groups {pr}`1391` {smaller}`S Rybakov`; - Fixed bug where `score_genes` would error if one gene was passed {pr}`1398` {smaller}`I Virshup`; - Fixed `log1p` inplace on integer dense arrays {pr}`1400` {smaller}`I Virshup`; - Fix docstring formatting for {func}`~scanpy.tl.rank_genes_groups` {pr}`1417` {smaller}`P Weiler`; - Removed `` PendingDeprecationWarning`s from use of `np.matrix `` {pr}`1424` {smaller}`P Weiler`; - Fixed indexing byg in `~scanpy.pp.highly_variable_genes` {pr}`1456` {smaller}`V Bergen`; - Fix default number of genes for marker_genes_overlap {pr}`1464` {smaller}`MD Luecken`; - Fixed passing `groupby` and `dendrogram_key` to {func}`~scanpy.tl.dendrogram` {pr}`1465` {smaller}`M Varma`; - Fixed download path of `pbmc3k_processed` {pr}`1472` {smaller}`D Strobl`; - Better error message when computing DE with a group of size 1 {pr}`1490` {smaller}`J Manning`; - Update cugraph API usage for v0.16 {pr}`1494` {smaller}`R Ilango`; - Fixed `marker_gene_overlap` default value for `top_n_markers` {pr}`1464` {smaller}`MD Luecken`; - Pass `random_state` to RAPIDs UMAP {pr}`1474` {smaller}`C Nolet`; - Fixed `anndata` version requirement for {func}`~anndata.concat` (re-exported from scanpy as `sc.concat`) {pr}`1491` {smaller}`I Virshup`; - Fixed the width of the progress bar when downloading data {pr}`1507` {smaller}`M Klein`; - Updated link for `moignard15` dataset {pr}`1542` {smaller}`I Virshup`; - Fixed bug where calling `set_figure_params` could block if IPython was installed, but not used. {pr}`1547` {smaller}`I Virshup`; - {func}`~scanpy.pl.violin` no longer fails if `.raw` not present {pr}`1548` {smaller}`I Virshup`; - {func}`~scanpy.pl.spatial` refactoring and better handling of spatial data {pr}`1512` {smaller}`G Palla`; - {func}`~scanpy.pp.pca` works w",down,MatchSource.DOCS,scverse,scanpy,1.10.2,https://github.com/scverse/scanpy/tree/1.10.2/docs/release-notes/1.7.0.md:4043,download,4043,docs/release-notes/1.7.0.md,https://scanpy.readthedocs.io,https://github.com/scverse/scanpy/tree/1.10.2/docs/release-notes/1.7.0.md,2,"['down', 'error']","['download', 'error']","The system's readiness to perform its function when required, focusing on reliability and recovery. It involves fault masking or repair to prevent failures, ensuring minimal cumulative downtime.","
You are an expert in evaluating and categorizing quality attributes in software engineering. You possess the necessary skills to distinguish sentences that clearly relate to a given quality attribute from those that do not. 

Evaluate whether the content accurately aligns with its associated quality attribute, given the context provided. Your goal is to determine if the content makes sense in relation to the quality attribute description or if it is a false positive.

Data:

Quality Attribute: Availability
Attribute Description: The system's readiness to perform its function when required, focusing on reliability and recovery. It involves fault masking or repair to prevent failures, ensuring minimal cumulative downtime.
Content: ` {pr}`1402` {smaller}`P Weiler`; - Speed ups for {func}`~scanpy.get.obs_df` {pr}`1499` {smaller}`F Ramirez`. ```{rubric} Bugfixes; ```. - Consistent fold-change, fractions calculation for filter_rank_genes_groups {pr}`1391` {smaller}`S Rybakov`; - Fixed bug where `score_genes` would error if one gene was passed {pr}`1398` {smaller}`I Virshup`; - Fixed `log1p` inplace on integer dense arrays {pr}`1400` {smaller}`I Virshup`; - Fix docstring formatting for {func}`~scanpy.tl.rank_genes_groups` {pr}`1417` {smaller}`P Weiler`; - Removed `` PendingDeprecationWarning`s from use of `np.matrix `` {pr}`1424` {smaller}`P Weiler`; - Fixed indexing byg in `~scanpy.pp.highly_variable_genes` {pr}`1456` {smaller}`V Bergen`; - Fix default number of genes for marker_genes_overlap {pr}`1464` {smaller}`MD Luecken`; - Fixed passing `groupby` and `dendrogram_key` to {func}`~scanpy.tl.dendrogram` {pr}`1465` {smaller}`M Varma`; - Fixed download path of `pbmc3k_processed` {pr}`1472` {smaller}`D Strobl`; - Better error message when computing DE with a group of size 1 {pr}`1490` {smaller}`J Manning`; - Update cugraph API usage for v0.16 {pr}`1494` {smaller}`R Ilango`; - Fixed `marker_gene_overlap` default value for `top_n_markers` {pr}`1464` {smaller}`MD Luecken`; - Pass `random_state` to RAPIDs UMAP {pr}`1474` {smaller}`C Nolet`; - Fixed `anndata` version requirement for {func}`~anndata.concat` (re-exported from scanpy as `sc.concat`) {pr}`1491` {smaller}`I Virshup`; - Fixed the width of the progress bar when downloading data {pr}`1507` {smaller}`M Klein`; - Updated link for `moignard15` dataset {pr}`1542` {smaller}`I Virshup`; - Fixed bug where calling `set_figure_params` could block if IPython was installed, but not used. {pr}`1547` {smaller}`I Virshup`; - {func}`~scanpy.pl.violin` no longer fails if `.raw` not present {pr}`1548` {smaller}`I Virshup`; - {func}`~scanpy.pl.spatial` refactoring and better handling of spatial data {pr}`1512` {smaller}`G Palla`; - {func}`~scanpy.pp.pca` works w

Instructions: 
1. Analyze the content and the attribute description.
2. Determine if the content accurately reflects the intended quality attribute in this context.
3. If it does, label it as `true_positive: true`; if not, mark it as a `true_positive: false`.
4. If the content consists only of logs with no other text, mark it as a `true_positive: false`. 
4. If the content partially consists of logs, focus on analyzing remaining text. 
5. Add `reasoning` why the content is a true or false positive.
",True,"The content provided is a list of bug fixes and improvements in the codebase. It mentions things like fixed bugs where score_genes would error if one gene was passed, fixed log1p inplace on integer dense arrays, and removed pending deprecation warnings from numpy. This relates to system reliability and fault tolerance as it ensures that functions are working correctly even under unexpected conditions, which aligns with the Availability quality attribute."
Availability,"ic clustering tutorial </tutorials/basics/clustering>` demonstrating an updated workflow.; * Opt-in increased performance for neighbor search and clustering ({doc}`how to guide </how-to/knn-transformers>`).; * Ability to `mask` observations or variables from a number of methods (see {doc}`/tutorials/plotting/advanced` for an example with plotting embeddings); * A new function {func}`~scanpy.get.aggregate` for computing aggregations of your data, very useful for pseudo bulking!. ```{rubric} Features; ```. * {func}`~scanpy.pp.scrublet` and {func}`~scanpy.pp.scrublet_simulate_doublets` were moved from {mod}`scanpy.external.pp` to {mod}`scanpy.pp`. The `scrublet` implementation is now maintained as part of scanpy {pr}`2703` {smaller}`P Angerer`; * {func}`scanpy.pp.pca`, {func}`scanpy.pp.scale`, {func}`scanpy.pl.embedding`, and {func}`scanpy.experimental.pp.normalize_pearson_residuals_pca` now support a `mask` parameter {pr}`2272` {smaller}`C Bright, T Marcella, & P Angerer`; * Enhanced dask support for some internal utilities, paving the way for more extensive dask support {pr}`2696` {smaller}`P Angerer`; * {func}`scanpy.pp.highly_variable_genes` supports dask for the default `seurat` and `cell_ranger` flavors {pr}`2809` {smaller}`P Angerer`; * New function {func}`scanpy.get.aggregate` which allows grouped aggregations over your data. Useful for pseudobulking! {pr}`2590` {smaller}`Isaac Virshup` {smaller}`Ilan Gold` {smaller}`Jon Bloom`; * {func}`scanpy.pp.neighbors` now has a `transformer` argument allowing the use of different ANN/ KNN libraries {pr}`2536` {smaller}`P Angerer`; * {func}`scanpy.experimental.pp.highly_variable_genes` using `flavor='pearson_residuals'` now uses numba for variance computation and is faster {pr}`2612` {smaller}`S Dicks & P Angerer`; * {func}`scanpy.tl.leiden` now offers `igraph`'s implementation of the leiden algorithm via via `flavor` when set to `igraph`. `leidenalg`'s implementation is still default, but discouraged. {pr}`2815` {smaller",mask,MatchSource.DOCS,scverse,scanpy,1.10.2,https://github.com/scverse/scanpy/tree/1.10.2/docs/release-notes/1.10.0.md:1266,mask,1266,docs/release-notes/1.10.0.md,https://scanpy.readthedocs.io,https://github.com/scverse/scanpy/tree/1.10.2/docs/release-notes/1.10.0.md,1,['mask'],['mask'],"The system's readiness to perform its function when required, focusing on reliability and recovery. It involves fault masking or repair to prevent failures, ensuring minimal cumulative downtime.","
You are an expert in evaluating and categorizing quality attributes in software engineering. You possess the necessary skills to distinguish sentences that clearly relate to a given quality attribute from those that do not. 

Evaluate whether the content accurately aligns with its associated quality attribute, given the context provided. Your goal is to determine if the content makes sense in relation to the quality attribute description or if it is a false positive.

Data:

Quality Attribute: Availability
Attribute Description: The system's readiness to perform its function when required, focusing on reliability and recovery. It involves fault masking or repair to prevent failures, ensuring minimal cumulative downtime.
Content: ic clustering tutorial </tutorials/basics/clustering>` demonstrating an updated workflow.; * Opt-in increased performance for neighbor search and clustering ({doc}`how to guide </how-to/knn-transformers>`).; * Ability to `mask` observations or variables from a number of methods (see {doc}`/tutorials/plotting/advanced` for an example with plotting embeddings); * A new function {func}`~scanpy.get.aggregate` for computing aggregations of your data, very useful for pseudo bulking!. ```{rubric} Features; ```. * {func}`~scanpy.pp.scrublet` and {func}`~scanpy.pp.scrublet_simulate_doublets` were moved from {mod}`scanpy.external.pp` to {mod}`scanpy.pp`. The `scrublet` implementation is now maintained as part of scanpy {pr}`2703` {smaller}`P Angerer`; * {func}`scanpy.pp.pca`, {func}`scanpy.pp.scale`, {func}`scanpy.pl.embedding`, and {func}`scanpy.experimental.pp.normalize_pearson_residuals_pca` now support a `mask` parameter {pr}`2272` {smaller}`C Bright, T Marcella, & P Angerer`; * Enhanced dask support for some internal utilities, paving the way for more extensive dask support {pr}`2696` {smaller}`P Angerer`; * {func}`scanpy.pp.highly_variable_genes` supports dask for the default `seurat` and `cell_ranger` flavors {pr}`2809` {smaller}`P Angerer`; * New function {func}`scanpy.get.aggregate` which allows grouped aggregations over your data. Useful for pseudobulking! {pr}`2590` {smaller}`Isaac Virshup` {smaller}`Ilan Gold` {smaller}`Jon Bloom`; * {func}`scanpy.pp.neighbors` now has a `transformer` argument allowing the use of different ANN/ KNN libraries {pr}`2536` {smaller}`P Angerer`; * {func}`scanpy.experimental.pp.highly_variable_genes` using `flavor='pearson_residuals'` now uses numba for variance computation and is faster {pr}`2612` {smaller}`S Dicks & P Angerer`; * {func}`scanpy.tl.leiden` now offers `igraph`'s implementation of the leiden algorithm via via `flavor` when set to `igraph`. `leidenalg`'s implementation is still default, but discouraged. {pr}`2815` {smaller

Instructions: 
1. Analyze the content and the attribute description.
2. Determine if the content accurately reflects the intended quality attribute in this context.
3. If it does, label it as `true_positive: true`; if not, mark it as a `true_positive: false`.
4. If the content consists only of logs with no other text, mark it as a `true_positive: false`. 
4. If the content partially consists of logs, focus on analyzing remaining text. 
5. Add `reasoning` why the content is a true or false positive.
",True,"The content discusses updates and new features in an analytics tool, including improved functionality through performance optimizations (e.g., neighbor search and clustering), enhanced support for certain algorithms (e.g., KNN libraries via transformer argument), and updates to specific functions supporting masking observations. While availability isn't explicitly mentioned, the focus is on system readiness and reliability by improving processing capabilities and fault handling, which aligns with the broader concept of availability in software engineering."
Availability,icient implicit centering for sparse matrices. This can lead to signifigantly improved performance for large datasets {pr}`1066` {smaller}`A Tarashansky`; - {func}`~scanpy.tl.score_genes` now has an efficient implementation for sparse matrices with missing values {pr}`1196` {smaller}`redst4r`. ```{warning}; The new {func}`~scanpy.pp.pca` implementation can result in slightly different results for sparse matrices. See the pr ({pr}`1066`) and documentation for more info.; ```. ```{rubric} Code design; ```. - {func}`~scanpy.pl.stacked_violin` can now be used as a subplot {pr}`1084` {smaller}`P Angerer`; - {func}`~scanpy.tl.score_genes` has improved logging {pr}`1119` {smaller}`G Eraslan`; - {func}`~scanpy.pp.scale` now saves mean and standard deviation in the {attr}`~anndata.AnnData.var` {pr}`1173` {smaller}`A Wolf`; - {func}`~scanpy.external.tl.harmony_timeseries` {pr}`1091` {smaller}`A Mousa`. ```{rubric} Bug fixes; ```. - {func}`~scanpy.pp.combat` now works when `obs_names` aren't unique. {pr}`1215` {smaller}`I Virshup`; - {func}`~scanpy.pp.scale` can now be used on dense arrays without centering {pr}`1160` {smaller}`simonwm`; - {func}`~scanpy.pp.regress_out` now works when some features are constant {pr}`1194` {smaller}`simonwm`; - {func}`~scanpy.pp.normalize_total` errored if the passed object was a view {pr}`1200` {smaller}`I Virshup`; - {func}`~scanpy.pp.neighbors` sometimes ignored the `n_pcs` param {pr}`1124` {smaller}`V Bergen`; - {func}`~scanpy.datasets.ebi_expression_atlas` which contained some out-of-date URLs {pr}`1102` {smaller}`I Virshup`; - {func}`~scanpy.tl.ingest` for UMAP `0.4` {pr}`1165` {smaller}`S Rybakov`; - {func}`~scanpy.tl.louvain` for Louvain `0.6` {pr}`1197` {smaller}`I Virshup`; - {func}`~scanpy.pp.highly_variable_genes` which could lead to incorrect results when the `batch_key` argument was used {pr}`1180` {smaller}`G Eraslan`; - {func}`~scanpy.tl.ingest` where an inconsistent number of neighbors was used {pr}`1111` {smaller}`S Rybakov`; ,error,MatchSource.DOCS,scverse,scanpy,1.10.2,https://github.com/scverse/scanpy/tree/1.10.2/docs/release-notes/1.5.0.md:2775,errored,2775,docs/release-notes/1.5.0.md,https://scanpy.readthedocs.io,https://github.com/scverse/scanpy/tree/1.10.2/docs/release-notes/1.5.0.md,1,['error'],['errored'],"The system's readiness to perform its function when required, focusing on reliability and recovery. It involves fault masking or repair to prevent failures, ensuring minimal cumulative downtime.","
You are an expert in evaluating and categorizing quality attributes in software engineering. You possess the necessary skills to distinguish sentences that clearly relate to a given quality attribute from those that do not. 

Evaluate whether the content accurately aligns with its associated quality attribute, given the context provided. Your goal is to determine if the content makes sense in relation to the quality attribute description or if it is a false positive.

Data:

Quality Attribute: Availability
Attribute Description: The system's readiness to perform its function when required, focusing on reliability and recovery. It involves fault masking or repair to prevent failures, ensuring minimal cumulative downtime.
Content: icient implicit centering for sparse matrices. This can lead to signifigantly improved performance for large datasets {pr}`1066` {smaller}`A Tarashansky`; - {func}`~scanpy.tl.score_genes` now has an efficient implementation for sparse matrices with missing values {pr}`1196` {smaller}`redst4r`. ```{warning}; The new {func}`~scanpy.pp.pca` implementation can result in slightly different results for sparse matrices. See the pr ({pr}`1066`) and documentation for more info.; ```. ```{rubric} Code design; ```. - {func}`~scanpy.pl.stacked_violin` can now be used as a subplot {pr}`1084` {smaller}`P Angerer`; - {func}`~scanpy.tl.score_genes` has improved logging {pr}`1119` {smaller}`G Eraslan`; - {func}`~scanpy.pp.scale` now saves mean and standard deviation in the {attr}`~anndata.AnnData.var` {pr}`1173` {smaller}`A Wolf`; - {func}`~scanpy.external.tl.harmony_timeseries` {pr}`1091` {smaller}`A Mousa`. ```{rubric} Bug fixes; ```. - {func}`~scanpy.pp.combat` now works when `obs_names` aren't unique. {pr}`1215` {smaller}`I Virshup`; - {func}`~scanpy.pp.scale` can now be used on dense arrays without centering {pr}`1160` {smaller}`simonwm`; - {func}`~scanpy.pp.regress_out` now works when some features are constant {pr}`1194` {smaller}`simonwm`; - {func}`~scanpy.pp.normalize_total` errored if the passed object was a view {pr}`1200` {smaller}`I Virshup`; - {func}`~scanpy.pp.neighbors` sometimes ignored the `n_pcs` param {pr}`1124` {smaller}`V Bergen`; - {func}`~scanpy.datasets.ebi_expression_atlas` which contained some out-of-date URLs {pr}`1102` {smaller}`I Virshup`; - {func}`~scanpy.tl.ingest` for UMAP `0.4` {pr}`1165` {smaller}`S Rybakov`; - {func}`~scanpy.tl.louvain` for Louvain `0.6` {pr}`1197` {smaller}`I Virshup`; - {func}`~scanpy.pp.highly_variable_genes` which could lead to incorrect results when the `batch_key` argument was used {pr}`1180` {smaller}`G Eraslan`; - {func}`~scanpy.tl.ingest` where an inconsistent number of neighbors was used {pr}`1111` {smaller}`S Rybakov`; 

Instructions: 
1. Analyze the content and the attribute description.
2. Determine if the content accurately reflects the intended quality attribute in this context.
3. If it does, label it as `true_positive: true`; if not, mark it as a `true_positive: false`.
4. If the content consists only of logs with no other text, mark it as a `true_positive: false`. 
4. If the content partially consists of logs, focus on analyzing remaining text. 
5. Add `reasoning` why the content is a true or false positive.
",False,"The provided content discusses changes made to specific functions in an software tool, including bug fixes and improvements. However, there's no indication that these changes relate to system readiness, reliability, or recovery mechanisms. The focus seems to be on code updates, performance optimizations, and functional improvements rather than availability. Therefore, this does not align with the quality attribute of Availability as defined."
Availability,"iden]'; ```. The extra `[leiden]` installs two packages that are needed for popular; parts of scanpy but aren't requirements: [igraph] {cite:p}`Csardi2006` and [leiden] {cite:p}`Traag2019`. (dev-install-instructions)=. ## Development Version. To work with the latest version [on GitHub]: clone the repository and `cd` into its root directory. ```shell; gh repo clone scverse/scanpy; cd scanpy; ```. If you are using `pip>=21.3`, an editable install can be made:. ```shell; pip install -e '.[dev,test]'; ```. If you want to let [conda] handle the installations of dependencies, do:. ```shell; pipx install beni; beni pyproject.toml > environment.yml; conda env create -f environment.yml; conda activate scanpy; pip install -e '.[dev,doc,test]'; ```. For instructions on how to work with the code, see the {ref}`contribution guide <contribution-guide>`. ## Docker. If you're using [Docker], you can use e.g. the image [gcfntnu/scanpy] from Docker Hub. ## Troubleshooting. If you get a `Permission denied` error, never use `sudo pip`. Instead, use virtual environments or:. ```shell; pip install --user scanpy; ```. **On MacOS**, if **not** using `conda`, you might need to install the C core of igraph via homebrew first. - `brew install igraph`. - If igraph still fails to install, see the question on [compiling igraph].; Alternatively consider installing gcc via `brew install gcc --without-multilib`; and exporting the required variables:. ```shell; export CC=""/usr/local/Cellar/gcc/X.x.x/bin/gcc-X""; export CXX=""/usr/local/Cellar/gcc/X.x.x/bin/gcc-X""; ```. where `X` and `x` refers to the version of `gcc`;; in my case, the path reads `/usr/local/Cellar/gcc/6.3.0_1/bin/gcc-6`. **On Windows**, there also often problems installing compiled packages such as `igraph`,; but you can find precompiled packages on Christoph Gohlke’s [unofficial binaries].; Download those and install them using `pip install ./path/to/file.whl`. (conda)=. ## Installing Miniconda. After downloading [Miniconda], in a un",error,MatchSource.DOCS,scverse,scanpy,1.10.2,https://github.com/scverse/scanpy/tree/1.10.2/docs/installation.md:1477,error,1477,docs/installation.md,https://scanpy.readthedocs.io,https://github.com/scverse/scanpy/tree/1.10.2/docs/installation.md,1,['error'],['error'],"The system's readiness to perform its function when required, focusing on reliability and recovery. It involves fault masking or repair to prevent failures, ensuring minimal cumulative downtime.","
You are an expert in evaluating and categorizing quality attributes in software engineering. You possess the necessary skills to distinguish sentences that clearly relate to a given quality attribute from those that do not. 

Evaluate whether the content accurately aligns with its associated quality attribute, given the context provided. Your goal is to determine if the content makes sense in relation to the quality attribute description or if it is a false positive.

Data:

Quality Attribute: Availability
Attribute Description: The system's readiness to perform its function when required, focusing on reliability and recovery. It involves fault masking or repair to prevent failures, ensuring minimal cumulative downtime.
Content: iden]'; ```. The extra `[leiden]` installs two packages that are needed for popular; parts of scanpy but aren't requirements: [igraph] {cite:p}`Csardi2006` and [leiden] {cite:p}`Traag2019`. (dev-install-instructions)=. ## Development Version. To work with the latest version [on GitHub]: clone the repository and `cd` into its root directory. ```shell; gh repo clone scverse/scanpy; cd scanpy; ```. If you are using `pip>=21.3`, an editable install can be made:. ```shell; pip install -e '.[dev,test]'; ```. If you want to let [conda] handle the installations of dependencies, do:. ```shell; pipx install beni; beni pyproject.toml > environment.yml; conda env create -f environment.yml; conda activate scanpy; pip install -e '.[dev,doc,test]'; ```. For instructions on how to work with the code, see the {ref}`contribution guide <contribution-guide>`. ## Docker. If you're using [Docker], you can use e.g. the image [gcfntnu/scanpy] from Docker Hub. ## Troubleshooting. If you get a `Permission denied` error, never use `sudo pip`. Instead, use virtual environments or:. ```shell; pip install --user scanpy; ```. **On MacOS**, if **not** using `conda`, you might need to install the C core of igraph via homebrew first. - `brew install igraph`. - If igraph still fails to install, see the question on [compiling igraph].; Alternatively consider installing gcc via `brew install gcc --without-multilib`; and exporting the required variables:. ```shell; export CC=""/usr/local/Cellar/gcc/X.x.x/bin/gcc-X""; export CXX=""/usr/local/Cellar/gcc/X.x.x/bin/gcc-X""; ```. where `X` and `x` refers to the version of `gcc`;; in my case, the path reads `/usr/local/Cellar/gcc/6.3.0_1/bin/gcc-6`. **On Windows**, there also often problems installing compiled packages such as `igraph`,; but you can find precompiled packages on Christoph Gohlke’s [unofficial binaries].; Download those and install them using `pip install ./path/to/file.whl`. (conda)=. ## Installing Miniconda. After downloading [Miniconda], in a un

Instructions: 
1. Analyze the content and the attribute description.
2. Determine if the content accurately reflects the intended quality attribute in this context.
3. If it does, label it as `true_positive: true`; if not, mark it as a `true_positive: false`.
4. If the content consists only of logs with no other text, mark it as a `true_positive: false`. 
4. If the content partially consists of logs, focus on analyzing remaining text. 
5. Add `reasoning` why the content is a true or false positive.
",True,"The content provided discusses installation instructions for software, which relates to the system's readiness (availability) and troubleshooting issues that affect its performance. The instructions include steps to clone repositories, install packages using pip and conda, and handle potential installation errors. These steps are essential for ensuring that the system can be used as required, thereby addressing availability."
Availability,"l.louvain](https://github.com/scverse/scanpy/blob/a811fee0ef44fcaecbde0cad6336336bce649484/scanpy/tools/_louvain.py#L22-L90) as an example for everything mentioned here. ### Plots in docstrings. One of the most useful things you can include in a docstring is examples of how the function should be used.; These are a great way to demonstrate intended usage and give users a template they can copy and modify.; We're able to include the plots produced by these snippets in the rendered docs using [matplotlib's plot directive](https://matplotlib.org/devel/plot_directive.html).; For examples of this, see the `Examples` sections of {func}`~scanpy.pl.dotplot` or {func}`~scanpy.pp.calculate_qc_metrics`. Note that anything in these sections will need to be run when the docs are built, so please keep them computationally light. - If you need computed features (e.g. an embedding, differential expression results) load data that has this precomputed.; - Try to re-use datasets, this reduces the amount of data that needs to be downloaded to the CI server. ### `Params` section. The `Params` abbreviation is a legit replacement for `Parameters`. To document parameter types use type annotations on function parameters.; These will automatically populate the docstrings on import, and when the documentation is built. Use the python standard library types (defined in [collections.abc](https://docs.python.org/3/library/collections.abc.html) and [typing](https://docs.python.org/3/library/typing.html) modules) for containers, e.g. `Sequence`s (like `list`), `Iterable`s (like `set`), and `Mapping`s (like `dict`).; Always specify what these contain, e.g. `{'a': (1, 2)}` → `Mapping[str, Tuple[int, int]]`.; If you can’t use one of those, use a concrete class like `AnnData`.; If your parameter only accepts an enumeration of strings, specify them like so: `Literal['elem-1', 'elem-2']`. ### `Returns` section. There are three types of return sections – prose, tuple, and a mix of both. 1. Prose is for si",down,MatchSource.DOCS,scverse,scanpy,1.10.2,https://github.com/scverse/scanpy/tree/1.10.2/docs/dev/documentation.md:3976,downloaded,3976,docs/dev/documentation.md,https://scanpy.readthedocs.io,https://github.com/scverse/scanpy/tree/1.10.2/docs/dev/documentation.md,1,['down'],['downloaded'],"The system's readiness to perform its function when required, focusing on reliability and recovery. It involves fault masking or repair to prevent failures, ensuring minimal cumulative downtime.","
You are an expert in evaluating and categorizing quality attributes in software engineering. You possess the necessary skills to distinguish sentences that clearly relate to a given quality attribute from those that do not. 

Evaluate whether the content accurately aligns with its associated quality attribute, given the context provided. Your goal is to determine if the content makes sense in relation to the quality attribute description or if it is a false positive.

Data:

Quality Attribute: Availability
Attribute Description: The system's readiness to perform its function when required, focusing on reliability and recovery. It involves fault masking or repair to prevent failures, ensuring minimal cumulative downtime.
Content: l.louvain](https://github.com/scverse/scanpy/blob/a811fee0ef44fcaecbde0cad6336336bce649484/scanpy/tools/_louvain.py#L22-L90) as an example for everything mentioned here. ### Plots in docstrings. One of the most useful things you can include in a docstring is examples of how the function should be used.; These are a great way to demonstrate intended usage and give users a template they can copy and modify.; We're able to include the plots produced by these snippets in the rendered docs using [matplotlib's plot directive](https://matplotlib.org/devel/plot_directive.html).; For examples of this, see the `Examples` sections of {func}`~scanpy.pl.dotplot` or {func}`~scanpy.pp.calculate_qc_metrics`. Note that anything in these sections will need to be run when the docs are built, so please keep them computationally light. - If you need computed features (e.g. an embedding, differential expression results) load data that has this precomputed.; - Try to re-use datasets, this reduces the amount of data that needs to be downloaded to the CI server. ### `Params` section. The `Params` abbreviation is a legit replacement for `Parameters`. To document parameter types use type annotations on function parameters.; These will automatically populate the docstrings on import, and when the documentation is built. Use the python standard library types (defined in [collections.abc](https://docs.python.org/3/library/collections.abc.html) and [typing](https://docs.python.org/3/library/typing.html) modules) for containers, e.g. `Sequence`s (like `list`), `Iterable`s (like `set`), and `Mapping`s (like `dict`).; Always specify what these contain, e.g. `{'a': (1, 2)}` → `Mapping[str, Tuple[int, int]]`.; If you can’t use one of those, use a concrete class like `AnnData`.; If your parameter only accepts an enumeration of strings, specify them like so: `Literal['elem-1', 'elem-2']`. ### `Returns` section. There are three types of return sections – prose, tuple, and a mix of both. 1. Prose is for si

Instructions: 
1. Analyze the content and the attribute description.
2. Determine if the content accurately reflects the intended quality attribute in this context.
3. If it does, label it as `true_positive: true`; if not, mark it as a `true_positive: false`.
4. If the content consists only of logs with no other text, mark it as a `true_positive: false`. 
4. If the content partially consists of logs, focus on analyzing remaining text. 
5. Add `reasoning` why the content is a true or false positive.
",False,"The content is about documentation structure and practices for functions in Python, including docstrings, parameters, returns sections, etc. It does not mention anything related to system availability, reliability, recovery mechanisms, or fault masking as described in the quality attribute. Instead, it focuses on technical writing standards and example usage in documentation. Therefore, this content does not align with the Availability quality attribute."
Availability,"nt. ## Writing tests. You can refer to the [existing test suite](https://github.com/scverse/scanpy/tree/main/scanpy/tests) for examples.; If you haven't written tests before, Software Carpentry has an [in-depth guide](https://katyhuff.github.io/2016-07-11-scipy/testing/01-basics.html) on the topic. We highly recommend using [Test Driven Development](https://en.wikipedia.org/wiki/Test-driven_development) when contributing code.; This not only ensures you have tests written, it often makes implementation easier since you start out with a specification for your function. Consider parameterizing your tests using the `pytest.mark.parameterize` and `pytest.fixture` decorators.; Documentation on these can be found [here](https://docs.pytest.org/en/stable/fixture.html), but we'd also recommend searching our test suite for existing usage. ### What to test. If you're not sure what to tests about your function, some ideas include:. - Are there arguments which conflict with each other? Check that if they are both passed, the function throws an error (see `pytest.raises` [in the pytest docs](https://docs.pytest.org/en/stable/assert.html#assertions-about-expected-exceptions).; - Are there input values which should cause your function to error?; - Did you add a helpful error message that recommends better outputs? Check that that error message is actually thrown.; - Can you place bounds on the values returned by your function?; - Are there different input values which should generate equivalent output (e.g. if an array is sparse or dense)?; - Do you have arguments which should have orthogonal effects on the output? Check that they are independent. For example, if there is a flag for extended output, the base output should remain the same either way.; - Are you optimizing a method? Check that it's results are the same as a gold standard implementation. ### Performance. It's more important that you're accurately testing the code works than it is that test suite runs quickly.; That sa",error,MatchSource.DOCS,scverse,scanpy,1.10.2,https://github.com/scverse/scanpy/tree/1.10.2/docs/dev/testing.md:2204,error,2204,docs/dev/testing.md,https://scanpy.readthedocs.io,https://github.com/scverse/scanpy/tree/1.10.2/docs/dev/testing.md,1,['error'],['error'],"The system's readiness to perform its function when required, focusing on reliability and recovery. It involves fault masking or repair to prevent failures, ensuring minimal cumulative downtime.","
You are an expert in evaluating and categorizing quality attributes in software engineering. You possess the necessary skills to distinguish sentences that clearly relate to a given quality attribute from those that do not. 

Evaluate whether the content accurately aligns with its associated quality attribute, given the context provided. Your goal is to determine if the content makes sense in relation to the quality attribute description or if it is a false positive.

Data:

Quality Attribute: Availability
Attribute Description: The system's readiness to perform its function when required, focusing on reliability and recovery. It involves fault masking or repair to prevent failures, ensuring minimal cumulative downtime.
Content: nt. ## Writing tests. You can refer to the [existing test suite](https://github.com/scverse/scanpy/tree/main/scanpy/tests) for examples.; If you haven't written tests before, Software Carpentry has an [in-depth guide](https://katyhuff.github.io/2016-07-11-scipy/testing/01-basics.html) on the topic. We highly recommend using [Test Driven Development](https://en.wikipedia.org/wiki/Test-driven_development) when contributing code.; This not only ensures you have tests written, it often makes implementation easier since you start out with a specification for your function. Consider parameterizing your tests using the `pytest.mark.parameterize` and `pytest.fixture` decorators.; Documentation on these can be found [here](https://docs.pytest.org/en/stable/fixture.html), but we'd also recommend searching our test suite for existing usage. ### What to test. If you're not sure what to tests about your function, some ideas include:. - Are there arguments which conflict with each other? Check that if they are both passed, the function throws an error (see `pytest.raises` [in the pytest docs](https://docs.pytest.org/en/stable/assert.html#assertions-about-expected-exceptions).; - Are there input values which should cause your function to error?; - Did you add a helpful error message that recommends better outputs? Check that that error message is actually thrown.; - Can you place bounds on the values returned by your function?; - Are there different input values which should generate equivalent output (e.g. if an array is sparse or dense)?; - Do you have arguments which should have orthogonal effects on the output? Check that they are independent. For example, if there is a flag for extended output, the base output should remain the same either way.; - Are you optimizing a method? Check that it's results are the same as a gold standard implementation. ### Performance. It's more important that you're accurately testing the code works than it is that test suite runs quickly.; That sa

Instructions: 
1. Analyze the content and the attribute description.
2. Determine if the content accurately reflects the intended quality attribute in this context.
3. If it does, label it as `true_positive: true`; if not, mark it as a `true_positive: false`.
4. If the content consists only of logs with no other text, mark it as a `true_positive: false`. 
4. If the content partially consists of logs, focus on analyzing remaining text. 
5. Add `reasoning` why the content is a true or false positive.
",False,"The content provided discusses writing tests and includes information about test-driven development, pytest fixtures, and what to test in a function. However, the quality attribute for availability focuses on system readiness, fault masking, and reliability. This content does not address any of these aspects. Therefore, it is a false positive."
Availability,"old-change, fractions calculation for filter_rank_genes_groups {pr}`1391` {smaller}`S Rybakov`; - Fixed bug where `score_genes` would error if one gene was passed {pr}`1398` {smaller}`I Virshup`; - Fixed `log1p` inplace on integer dense arrays {pr}`1400` {smaller}`I Virshup`; - Fix docstring formatting for {func}`~scanpy.tl.rank_genes_groups` {pr}`1417` {smaller}`P Weiler`; - Removed `` PendingDeprecationWarning`s from use of `np.matrix `` {pr}`1424` {smaller}`P Weiler`; - Fixed indexing byg in `~scanpy.pp.highly_variable_genes` {pr}`1456` {smaller}`V Bergen`; - Fix default number of genes for marker_genes_overlap {pr}`1464` {smaller}`MD Luecken`; - Fixed passing `groupby` and `dendrogram_key` to {func}`~scanpy.tl.dendrogram` {pr}`1465` {smaller}`M Varma`; - Fixed download path of `pbmc3k_processed` {pr}`1472` {smaller}`D Strobl`; - Better error message when computing DE with a group of size 1 {pr}`1490` {smaller}`J Manning`; - Update cugraph API usage for v0.16 {pr}`1494` {smaller}`R Ilango`; - Fixed `marker_gene_overlap` default value for `top_n_markers` {pr}`1464` {smaller}`MD Luecken`; - Pass `random_state` to RAPIDs UMAP {pr}`1474` {smaller}`C Nolet`; - Fixed `anndata` version requirement for {func}`~anndata.concat` (re-exported from scanpy as `sc.concat`) {pr}`1491` {smaller}`I Virshup`; - Fixed the width of the progress bar when downloading data {pr}`1507` {smaller}`M Klein`; - Updated link for `moignard15` dataset {pr}`1542` {smaller}`I Virshup`; - Fixed bug where calling `set_figure_params` could block if IPython was installed, but not used. {pr}`1547` {smaller}`I Virshup`; - {func}`~scanpy.pl.violin` no longer fails if `.raw` not present {pr}`1548` {smaller}`I Virshup`; - {func}`~scanpy.pl.spatial` refactoring and better handling of spatial data {pr}`1512` {smaller}`G Palla`; - {func}`~scanpy.pp.pca` works with `chunked=True` again {pr}`1592` {smaller}`I Virshup`; - {func}`~scanpy.tl.ingest` now works with umap-learn 0.5.0 {pr}`1601` {smaller}`S Rybakov`; ",down,MatchSource.DOCS,scverse,scanpy,1.10.2,https://github.com/scverse/scanpy/tree/1.10.2/docs/release-notes/1.7.0.md:4626,downloading,4626,docs/release-notes/1.7.0.md,https://scanpy.readthedocs.io,https://github.com/scverse/scanpy/tree/1.10.2/docs/release-notes/1.7.0.md,1,['down'],['downloading'],"The system's readiness to perform its function when required, focusing on reliability and recovery. It involves fault masking or repair to prevent failures, ensuring minimal cumulative downtime.","
You are an expert in evaluating and categorizing quality attributes in software engineering. You possess the necessary skills to distinguish sentences that clearly relate to a given quality attribute from those that do not. 

Evaluate whether the content accurately aligns with its associated quality attribute, given the context provided. Your goal is to determine if the content makes sense in relation to the quality attribute description or if it is a false positive.

Data:

Quality Attribute: Availability
Attribute Description: The system's readiness to perform its function when required, focusing on reliability and recovery. It involves fault masking or repair to prevent failures, ensuring minimal cumulative downtime.
Content: old-change, fractions calculation for filter_rank_genes_groups {pr}`1391` {smaller}`S Rybakov`; - Fixed bug where `score_genes` would error if one gene was passed {pr}`1398` {smaller}`I Virshup`; - Fixed `log1p` inplace on integer dense arrays {pr}`1400` {smaller}`I Virshup`; - Fix docstring formatting for {func}`~scanpy.tl.rank_genes_groups` {pr}`1417` {smaller}`P Weiler`; - Removed `` PendingDeprecationWarning`s from use of `np.matrix `` {pr}`1424` {smaller}`P Weiler`; - Fixed indexing byg in `~scanpy.pp.highly_variable_genes` {pr}`1456` {smaller}`V Bergen`; - Fix default number of genes for marker_genes_overlap {pr}`1464` {smaller}`MD Luecken`; - Fixed passing `groupby` and `dendrogram_key` to {func}`~scanpy.tl.dendrogram` {pr}`1465` {smaller}`M Varma`; - Fixed download path of `pbmc3k_processed` {pr}`1472` {smaller}`D Strobl`; - Better error message when computing DE with a group of size 1 {pr}`1490` {smaller}`J Manning`; - Update cugraph API usage for v0.16 {pr}`1494` {smaller}`R Ilango`; - Fixed `marker_gene_overlap` default value for `top_n_markers` {pr}`1464` {smaller}`MD Luecken`; - Pass `random_state` to RAPIDs UMAP {pr}`1474` {smaller}`C Nolet`; - Fixed `anndata` version requirement for {func}`~anndata.concat` (re-exported from scanpy as `sc.concat`) {pr}`1491` {smaller}`I Virshup`; - Fixed the width of the progress bar when downloading data {pr}`1507` {smaller}`M Klein`; - Updated link for `moignard15` dataset {pr}`1542` {smaller}`I Virshup`; - Fixed bug where calling `set_figure_params` could block if IPython was installed, but not used. {pr}`1547` {smaller}`I Virshup`; - {func}`~scanpy.pl.violin` no longer fails if `.raw` not present {pr}`1548` {smaller}`I Virshup`; - {func}`~scanpy.pl.spatial` refactoring and better handling of spatial data {pr}`1512` {smaller}`G Palla`; - {func}`~scanpy.pp.pca` works with `chunked=True` again {pr}`1592` {smaller}`I Virshup`; - {func}`~scanpy.tl.ingest` now works with umap-learn 0.5.0 {pr}`1601` {smaller}`S Rybakov`; 

Instructions: 
1. Analyze the content and the attribute description.
2. Determine if the content accurately reflects the intended quality attribute in this context.
3. If it does, label it as `true_positive: true`; if not, mark it as a `true_positive: false`.
4. If the content consists only of logs with no other text, mark it as a `true_positive: false`. 
4. If the content partially consists of logs, focus on analyzing remaining text. 
5. Add `reasoning` why the content is a true or false positive.
",False,"The provided content appears to be a list of issue fixes and updates in a software project, likely related to bug fixes and system improvements. While it mentions various changes like fixed bugs, refactored code, and documentation improvements, there's no direct indication that these changes relate specifically to Availability as defined by reliability and recovery from faults. The descriptions focus more on functional fixes rather than ensuring the system is available when required."
Availability,"sics.html) on the topic. We highly recommend using [Test Driven Development](https://en.wikipedia.org/wiki/Test-driven_development) when contributing code.; This not only ensures you have tests written, it often makes implementation easier since you start out with a specification for your function. Consider parameterizing your tests using the `pytest.mark.parameterize` and `pytest.fixture` decorators.; Documentation on these can be found [here](https://docs.pytest.org/en/stable/fixture.html), but we'd also recommend searching our test suite for existing usage. ### What to test. If you're not sure what to tests about your function, some ideas include:. - Are there arguments which conflict with each other? Check that if they are both passed, the function throws an error (see `pytest.raises` [in the pytest docs](https://docs.pytest.org/en/stable/assert.html#assertions-about-expected-exceptions).; - Are there input values which should cause your function to error?; - Did you add a helpful error message that recommends better outputs? Check that that error message is actually thrown.; - Can you place bounds on the values returned by your function?; - Are there different input values which should generate equivalent output (e.g. if an array is sparse or dense)?; - Do you have arguments which should have orthogonal effects on the output? Check that they are independent. For example, if there is a flag for extended output, the base output should remain the same either way.; - Are you optimizing a method? Check that it's results are the same as a gold standard implementation. ### Performance. It's more important that you're accurately testing the code works than it is that test suite runs quickly.; That said, it's nice when the test suite runs fast. You can check how long tests take to run by passing `--durations=0` argument to `pytest`.; Hopefully your new tests won't show up on top!; Some approaches to this include:. - Is there a common setup/ computation happening in each",error,MatchSource.DOCS,scverse,scanpy,1.10.2,https://github.com/scverse/scanpy/tree/1.10.2/docs/dev/testing.md:2399,error,2399,docs/dev/testing.md,https://scanpy.readthedocs.io,https://github.com/scverse/scanpy/tree/1.10.2/docs/dev/testing.md,3,['error'],['error'],"The system's readiness to perform its function when required, focusing on reliability and recovery. It involves fault masking or repair to prevent failures, ensuring minimal cumulative downtime.","
You are an expert in evaluating and categorizing quality attributes in software engineering. You possess the necessary skills to distinguish sentences that clearly relate to a given quality attribute from those that do not. 

Evaluate whether the content accurately aligns with its associated quality attribute, given the context provided. Your goal is to determine if the content makes sense in relation to the quality attribute description or if it is a false positive.

Data:

Quality Attribute: Availability
Attribute Description: The system's readiness to perform its function when required, focusing on reliability and recovery. It involves fault masking or repair to prevent failures, ensuring minimal cumulative downtime.
Content: sics.html) on the topic. We highly recommend using [Test Driven Development](https://en.wikipedia.org/wiki/Test-driven_development) when contributing code.; This not only ensures you have tests written, it often makes implementation easier since you start out with a specification for your function. Consider parameterizing your tests using the `pytest.mark.parameterize` and `pytest.fixture` decorators.; Documentation on these can be found [here](https://docs.pytest.org/en/stable/fixture.html), but we'd also recommend searching our test suite for existing usage. ### What to test. If you're not sure what to tests about your function, some ideas include:. - Are there arguments which conflict with each other? Check that if they are both passed, the function throws an error (see `pytest.raises` [in the pytest docs](https://docs.pytest.org/en/stable/assert.html#assertions-about-expected-exceptions).; - Are there input values which should cause your function to error?; - Did you add a helpful error message that recommends better outputs? Check that that error message is actually thrown.; - Can you place bounds on the values returned by your function?; - Are there different input values which should generate equivalent output (e.g. if an array is sparse or dense)?; - Do you have arguments which should have orthogonal effects on the output? Check that they are independent. For example, if there is a flag for extended output, the base output should remain the same either way.; - Are you optimizing a method? Check that it's results are the same as a gold standard implementation. ### Performance. It's more important that you're accurately testing the code works than it is that test suite runs quickly.; That said, it's nice when the test suite runs fast. You can check how long tests take to run by passing `--durations=0` argument to `pytest`.; Hopefully your new tests won't show up on top!; Some approaches to this include:. - Is there a common setup/ computation happening in each

Instructions: 
1. Analyze the content and the attribute description.
2. Determine if the content accurately reflects the intended quality attribute in this context.
3. If it does, label it as `true_positive: true`; if not, mark it as a `true_positive: false`.
4. If the content consists only of logs with no other text, mark it as a `true_positive: false`. 
4. If the content partially consists of logs, focus on analyzing remaining text. 
5. Add `reasoning` why the content is a true or false positive.
",False,"The provided content discusses testing practices and tools like Test Driven Development (TDD) using pytest fixtures and parameterization. While TDD and testing are related to software quality, they don't directly address 'Availability' as defined by the system's readiness when required, focusing on reliability and recovery from failures. The content is more about testing processes and tools rather than ensuring the system is available or recoverable."
Availability,"sion denied` error, never use `sudo pip`. Instead, use virtual environments or:. ```shell; pip install --user scanpy; ```. **On MacOS**, if **not** using `conda`, you might need to install the C core of igraph via homebrew first. - `brew install igraph`. - If igraph still fails to install, see the question on [compiling igraph].; Alternatively consider installing gcc via `brew install gcc --without-multilib`; and exporting the required variables:. ```shell; export CC=""/usr/local/Cellar/gcc/X.x.x/bin/gcc-X""; export CXX=""/usr/local/Cellar/gcc/X.x.x/bin/gcc-X""; ```. where `X` and `x` refers to the version of `gcc`;; in my case, the path reads `/usr/local/Cellar/gcc/6.3.0_1/bin/gcc-6`. **On Windows**, there also often problems installing compiled packages such as `igraph`,; but you can find precompiled packages on Christoph Gohlke’s [unofficial binaries].; Download those and install them using `pip install ./path/to/file.whl`. (conda)=. ## Installing Miniconda. After downloading [Miniconda], in a unix shell (Linux, Mac), run. ```shell; cd DOWNLOAD_DIR; chmod +x Miniconda3-latest-VERSION.sh; ./Miniconda3-latest-VERSION.sh; ```. and accept all suggestions.; Either reopen a new terminal or `source ~/.bashrc` on Linux/ `source ~/.bash_profile` on Mac.; The whole process takes just a couple of minutes. [bioconda]: https://bioconda.github.io/; [compiling igraph]: https://stackoverflow.com/q/29589696/247482; [create symbolic links]: https://docs.microsoft.com/en-us/windows/security/threat-protection/security-policy-settings/create-symbolic-links; [docker]: https://en.wikipedia.org/wiki/Docker_(software); [from pypi]: https://pypi.org/project/scanpy; [gcfntnu/scanpy]: https://hub.docker.com/r/gcfntnu/scanpy; [leiden]: https://leidenalg.readthedocs.io; [miniconda]: https://docs.conda.io/projects/miniconda/en/latest/; [on github]: https://github.com/scverse/scanpy; [igraph]: https://python.igraph.org/en/stable/; [unofficial binaries]: https://www.lfd.uci.edu/~gohlke/pythonlibs/; ",down,MatchSource.DOCS,scverse,scanpy,1.10.2,https://github.com/scverse/scanpy/tree/1.10.2/docs/installation.md:2442,downloading,2442,docs/installation.md,https://scanpy.readthedocs.io,https://github.com/scverse/scanpy/tree/1.10.2/docs/installation.md,1,['down'],['downloading'],"The system's readiness to perform its function when required, focusing on reliability and recovery. It involves fault masking or repair to prevent failures, ensuring minimal cumulative downtime.","
You are an expert in evaluating and categorizing quality attributes in software engineering. You possess the necessary skills to distinguish sentences that clearly relate to a given quality attribute from those that do not. 

Evaluate whether the content accurately aligns with its associated quality attribute, given the context provided. Your goal is to determine if the content makes sense in relation to the quality attribute description or if it is a false positive.

Data:

Quality Attribute: Availability
Attribute Description: The system's readiness to perform its function when required, focusing on reliability and recovery. It involves fault masking or repair to prevent failures, ensuring minimal cumulative downtime.
Content: sion denied` error, never use `sudo pip`. Instead, use virtual environments or:. ```shell; pip install --user scanpy; ```. **On MacOS**, if **not** using `conda`, you might need to install the C core of igraph via homebrew first. - `brew install igraph`. - If igraph still fails to install, see the question on [compiling igraph].; Alternatively consider installing gcc via `brew install gcc --without-multilib`; and exporting the required variables:. ```shell; export CC=""/usr/local/Cellar/gcc/X.x.x/bin/gcc-X""; export CXX=""/usr/local/Cellar/gcc/X.x.x/bin/gcc-X""; ```. where `X` and `x` refers to the version of `gcc`;; in my case, the path reads `/usr/local/Cellar/gcc/6.3.0_1/bin/gcc-6`. **On Windows**, there also often problems installing compiled packages such as `igraph`,; but you can find precompiled packages on Christoph Gohlke’s [unofficial binaries].; Download those and install them using `pip install ./path/to/file.whl`. (conda)=. ## Installing Miniconda. After downloading [Miniconda], in a unix shell (Linux, Mac), run. ```shell; cd DOWNLOAD_DIR; chmod +x Miniconda3-latest-VERSION.sh; ./Miniconda3-latest-VERSION.sh; ```. and accept all suggestions.; Either reopen a new terminal or `source ~/.bashrc` on Linux/ `source ~/.bash_profile` on Mac.; The whole process takes just a couple of minutes. [bioconda]: https://bioconda.github.io/; [compiling igraph]: https://stackoverflow.com/q/29589696/247482; [create symbolic links]: https://docs.microsoft.com/en-us/windows/security/threat-protection/security-policy-settings/create-symbolic-links; [docker]: https://en.wikipedia.org/wiki/Docker_(software); [from pypi]: https://pypi.org/project/scanpy; [gcfntnu/scanpy]: https://hub.docker.com/r/gcfntnu/scanpy; [leiden]: https://leidenalg.readthedocs.io; [miniconda]: https://docs.conda.io/projects/miniconda/en/latest/; [on github]: https://github.com/scverse/scanpy; [igraph]: https://python.igraph.org/en/stable/; [unofficial binaries]: https://www.lfd.uci.edu/~gohlke/pythonlibs/; 

Instructions: 
1. Analyze the content and the attribute description.
2. Determine if the content accurately reflects the intended quality attribute in this context.
3. If it does, label it as `true_positive: true`; if not, mark it as a `true_positive: false`.
4. If the content consists only of logs with no other text, mark it as a `true_positive: false`. 
4. If the content partially consists of logs, focus on analyzing remaining text. 
5. Add `reasoning` why the content is a true or false positive.
",False,"The provided content discusses installation steps for various packages and tools like scanpy, igraph, and Miniconda. While these topics relate to software setup and dependency management, they don't directly address system readiness or reliability as defined by the Availability quality attribute. The focus is on technical troubleshooting and installation procedures rather than ensuring the system's ability to perform functions reliably when required."
Availability,"the single-cell graph and is faster;; UMAP is also used for measuring connectivities and computing neighbors,; see {func}`~scanpy.pp.neighbors` {smaller}`A Wolf`; - graph abstraction: AGA is renamed to [PAGA](https://github.com/theislab/paga): {func}`~scanpy.tl.paga`; now,; it only measures connectivities between partitions of the single-cell graph,; pseudotime and clustering need to be computed separately via; {func}`~scanpy.tl.louvain` and {func}`~scanpy.tl.dpt`, the; connectivity measure has been improved {smaller}`A Wolf`; - logistic regression for finding marker genes; {func}`~scanpy.tl.rank_genes_groups` with parameter `method='logreg'` {smaller}`A Wolf`; - {func}`~scanpy.tl.louvain` provides a better implementation for; reclustering via `restrict_to` {smaller}`A Wolf`; - scanpy no longer modifies rcParams upon import, call; `settings.set_figure_params` to set the 'scanpy style' {smaller}`A Wolf`; - default cache directory is `./cache/`, set `settings.cachedir` to change; this; nested directories in this are avoided {smaller}`A Wolf`; - show edges in scatter plots based on graph visualization; {func}`~scanpy.tl.draw_graph` and {func}`~scanpy.tl.umap` by passing `edges=True` {smaller}`A Wolf`; - {func}`~scanpy.pp.downsample_counts` for downsampling counts {smaller}`MD Luecken`; - default `'louvain_groups'` are called `'louvain'` {smaller}`A Wolf`; - `'X_diffmap'` contains the zero component, plotting remains unchanged {smaller}`A Wolf`. [14min]: https://github.com/scverse/scanpy_usage/blob/master/170522_visualizing_one_million_cells/logfile_130K.txt; [3min]: https://nbviewer.jupyter.org/github/scverse/scanpy_usage/blob/master/170503_zheng17/zheng17.ipynb; [6h]: https://github.com/scverse/scanpy_usage/blob/master/170522_visualizing_one_million_cells/; [paul15]: https://nbviewer.jupyter.org/github/scverse/scanpy_usage/blob/master/170502_paul15/paul15.ipynb; [seurat]: https://nbviewer.jupyter.org/github/scverse/scanpy_usage/blob/master/170505_seurat/seurat.ipynb; ",down,MatchSource.DOCS,scverse,scanpy,1.10.2,https://github.com/scverse/scanpy/tree/1.10.2/docs/release-notes/1.0.0.md:3119,downsampling,3119,docs/release-notes/1.0.0.md,https://scanpy.readthedocs.io,https://github.com/scverse/scanpy/tree/1.10.2/docs/release-notes/1.0.0.md,1,['down'],['downsampling'],"The system's readiness to perform its function when required, focusing on reliability and recovery. It involves fault masking or repair to prevent failures, ensuring minimal cumulative downtime.","
You are an expert in evaluating and categorizing quality attributes in software engineering. You possess the necessary skills to distinguish sentences that clearly relate to a given quality attribute from those that do not. 

Evaluate whether the content accurately aligns with its associated quality attribute, given the context provided. Your goal is to determine if the content makes sense in relation to the quality attribute description or if it is a false positive.

Data:

Quality Attribute: Availability
Attribute Description: The system's readiness to perform its function when required, focusing on reliability and recovery. It involves fault masking or repair to prevent failures, ensuring minimal cumulative downtime.
Content: the single-cell graph and is faster;; UMAP is also used for measuring connectivities and computing neighbors,; see {func}`~scanpy.pp.neighbors` {smaller}`A Wolf`; - graph abstraction: AGA is renamed to [PAGA](https://github.com/theislab/paga): {func}`~scanpy.tl.paga`; now,; it only measures connectivities between partitions of the single-cell graph,; pseudotime and clustering need to be computed separately via; {func}`~scanpy.tl.louvain` and {func}`~scanpy.tl.dpt`, the; connectivity measure has been improved {smaller}`A Wolf`; - logistic regression for finding marker genes; {func}`~scanpy.tl.rank_genes_groups` with parameter `method='logreg'` {smaller}`A Wolf`; - {func}`~scanpy.tl.louvain` provides a better implementation for; reclustering via `restrict_to` {smaller}`A Wolf`; - scanpy no longer modifies rcParams upon import, call; `settings.set_figure_params` to set the 'scanpy style' {smaller}`A Wolf`; - default cache directory is `./cache/`, set `settings.cachedir` to change; this; nested directories in this are avoided {smaller}`A Wolf`; - show edges in scatter plots based on graph visualization; {func}`~scanpy.tl.draw_graph` and {func}`~scanpy.tl.umap` by passing `edges=True` {smaller}`A Wolf`; - {func}`~scanpy.pp.downsample_counts` for downsampling counts {smaller}`MD Luecken`; - default `'louvain_groups'` are called `'louvain'` {smaller}`A Wolf`; - `'X_diffmap'` contains the zero component, plotting remains unchanged {smaller}`A Wolf`. [14min]: https://github.com/scverse/scanpy_usage/blob/master/170522_visualizing_one_million_cells/logfile_130K.txt; [3min]: https://nbviewer.jupyter.org/github/scverse/scanpy_usage/blob/master/170503_zheng17/zheng17.ipynb; [6h]: https://github.com/scverse/scanpy_usage/blob/master/170522_visualizing_one_million_cells/; [paul15]: https://nbviewer.jupyter.org/github/scverse/scanpy_usage/blob/master/170502_paul15/paul15.ipynb; [seurat]: https://nbviewer.jupyter.org/github/scverse/scanpy_usage/blob/master/170505_seurat/seurat.ipynb; 

Instructions: 
1. Analyze the content and the attribute description.
2. Determine if the content accurately reflects the intended quality attribute in this context.
3. If it does, label it as `true_positive: true`; if not, mark it as a `true_positive: false`.
4. If the content consists only of logs with no other text, mark it as a `true_positive: false`. 
4. If the content partially consists of logs, focus on analyzing remaining text. 
5. Add `reasoning` why the content is a true or false positive.
",False,"The content provided includes mentions of single-cell graph structures, UMAP usage for connectivity measurements, and specific scanpy functions like `~scanpy.pp.neighbors`, `~scanpy.tl.paga`, `~scanpy.tl.louvain`, and `~scanpy.tl.dpt`. These terms relate to data processing and analysis in bioinformatics, particularly in single-cell omics data. While availability focuses on system readiness and reliability, the content here discusses technical aspects of data processing tools and their usage rather than addressing system performance or fault tolerance. Therefore, this does not directly align with the quality attribute of Availability."
Availability,"y the location of colorbar legend, or pass `None` to not show a colorbar {pr}`1821` {smaller}`A Schaar` {smaller}`I Virshup`; - Embedding plots now have a `dimensions` argument, which lets users select which dimensions of their embedding to plot and uses the same broadcasting rules as other arguments {pr}`1538` {smaller}`I Virshup`; - {func}`~scanpy.logging.print_versions` now uses `session_info` {pr}`2089` {smaller}`P Angerer` {smaller}`I Virshup`. ```{rubric} Ecosystem; ```. Multiple packages have been added to our ecosystem page, including:. - [decoupler](https://github.com/saezlab/decoupler-py) a for footprint analysis and pathway enrichement {pr}`2186` {smaller}`PB Mompel`; - [dandelion](https://github.com/zktuong/dandelion) for B-cell receptor analysis {pr}`1953` {smaller}`Z Tuong`; - [CIARA](https://github.com/ScialdoneLab/CIARA_python) a feature selection tools for identifying rare cell types {pr}`2175` {smaller}`M Stock`. ```{rubric} Bug fixes; ```. - Fixed finding variables with `use_raw=True` and `basis=None` in {func}`scanpy.pl.scatter` {pr}`2027` {smaller}`E Rice`; - Fixed {func}`scanpy.pp.scrublet` to address {issue}`1957` {smaller}`FlMai` and ensure raw counts are used for simulation; - Functions in {mod}`scanpy.datasets` no longer throw `OldFormatWarnings` when using `anndata` `0.8` {pr}`2096` {smaller}`I Virshup`; - Fixed use of {func}`scanpy.pp.neighbors` with `method='rapids'`: RAPIDS cuML no longer returns a squared Euclidean distance matrix, so we should not square-root the kNN distance matrix. {pr}`1828` {smaller}`M Zaslavsky`; - Removed `pytables` dependency by implementing `read_10x_h5` with `h5py` due to installation errors on Windows {pr}`2064`; - Fixed bug in {func}`scanpy.external.pp.hashsolo` where default value was set improperly {pr}`2190` {smaller}`B Reiz`; - Fixed bug in {func}`scanpy.pl.embedding` functions where an error could be raised when there were missing values and large numbers of categories {pr}`2187` {smaller}`I Virshup`; ",error,MatchSource.DOCS,scverse,scanpy,1.10.2,https://github.com/scverse/scanpy/tree/1.10.2/docs/release-notes/1.9.0.md:3853,errors,3853,docs/release-notes/1.9.0.md,https://scanpy.readthedocs.io,https://github.com/scverse/scanpy/tree/1.10.2/docs/release-notes/1.9.0.md,2,['error'],"['error', 'errors']","The system's readiness to perform its function when required, focusing on reliability and recovery. It involves fault masking or repair to prevent failures, ensuring minimal cumulative downtime.","
You are an expert in evaluating and categorizing quality attributes in software engineering. You possess the necessary skills to distinguish sentences that clearly relate to a given quality attribute from those that do not. 

Evaluate whether the content accurately aligns with its associated quality attribute, given the context provided. Your goal is to determine if the content makes sense in relation to the quality attribute description or if it is a false positive.

Data:

Quality Attribute: Availability
Attribute Description: The system's readiness to perform its function when required, focusing on reliability and recovery. It involves fault masking or repair to prevent failures, ensuring minimal cumulative downtime.
Content: y the location of colorbar legend, or pass `None` to not show a colorbar {pr}`1821` {smaller}`A Schaar` {smaller}`I Virshup`; - Embedding plots now have a `dimensions` argument, which lets users select which dimensions of their embedding to plot and uses the same broadcasting rules as other arguments {pr}`1538` {smaller}`I Virshup`; - {func}`~scanpy.logging.print_versions` now uses `session_info` {pr}`2089` {smaller}`P Angerer` {smaller}`I Virshup`. ```{rubric} Ecosystem; ```. Multiple packages have been added to our ecosystem page, including:. - [decoupler](https://github.com/saezlab/decoupler-py) a for footprint analysis and pathway enrichement {pr}`2186` {smaller}`PB Mompel`; - [dandelion](https://github.com/zktuong/dandelion) for B-cell receptor analysis {pr}`1953` {smaller}`Z Tuong`; - [CIARA](https://github.com/ScialdoneLab/CIARA_python) a feature selection tools for identifying rare cell types {pr}`2175` {smaller}`M Stock`. ```{rubric} Bug fixes; ```. - Fixed finding variables with `use_raw=True` and `basis=None` in {func}`scanpy.pl.scatter` {pr}`2027` {smaller}`E Rice`; - Fixed {func}`scanpy.pp.scrublet` to address {issue}`1957` {smaller}`FlMai` and ensure raw counts are used for simulation; - Functions in {mod}`scanpy.datasets` no longer throw `OldFormatWarnings` when using `anndata` `0.8` {pr}`2096` {smaller}`I Virshup`; - Fixed use of {func}`scanpy.pp.neighbors` with `method='rapids'`: RAPIDS cuML no longer returns a squared Euclidean distance matrix, so we should not square-root the kNN distance matrix. {pr}`1828` {smaller}`M Zaslavsky`; - Removed `pytables` dependency by implementing `read_10x_h5` with `h5py` due to installation errors on Windows {pr}`2064`; - Fixed bug in {func}`scanpy.external.pp.hashsolo` where default value was set improperly {pr}`2190` {smaller}`B Reiz`; - Fixed bug in {func}`scanpy.pl.embedding` functions where an error could be raised when there were missing values and large numbers of categories {pr}`2187` {smaller}`I Virshup`; 

Instructions: 
1. Analyze the content and the attribute description.
2. Determine if the content accurately reflects the intended quality attribute in this context.
3. If it does, label it as `true_positive: true`; if not, mark it as a `true_positive: false`.
4. If the content consists only of logs with no other text, mark it as a `true_positive: false`. 
4. If the content partially consists of logs, focus on analyzing remaining text. 
5. Add `reasoning` why the content is a true or false positive.
",False,"The content provided is a list of updates and bug fixes related to various packages in the ecosystem. It includes information about new additions like [decoupler], [dandelion], and [CIARA_python], as well as fixes for functions like {func}`scanpy.pl.scatter` and others. While it does mention some technical details about software updates, this content is more about system enhancements rather than directly discussing the readiness or reliability of the system itself. The term 'availability' typically refers to the ability of a system to function when required without significant interruptions. This content does not address how the system ensures it can perform its functions reliably or recover from failures. Instead, it focuses on package updates and bug fixes which are more related to maintainability and functionality rather than availability."
Deployability," Anaconda. If you do not have a working installation of Python 3.6 (or later), consider; installing [Miniconda] (see [Installing Miniconda]). Then run:. ```shell; conda install -c conda-forge scanpy python-igraph leidenalg; ```. Pull Scanpy from [PyPI](https://pypi.org/project/scanpy) (consider using `pip3` to access Python 3):. ```shell; pip install scanpy; ```. ## PyPI only. If you prefer to exclusively use PyPI run:. ```shell; pip install 'scanpy[leiden]'; ```. The extra `[leiden]` installs two packages that are needed for popular; parts of scanpy but aren't requirements: [igraph] {cite:p}`Csardi2006` and [leiden] {cite:p}`Traag2019`. (dev-install-instructions)=. ## Development Version. To work with the latest version [on GitHub]: clone the repository and `cd` into its root directory. ```shell; gh repo clone scverse/scanpy; cd scanpy; ```. If you are using `pip>=21.3`, an editable install can be made:. ```shell; pip install -e '.[dev,test]'; ```. If you want to let [conda] handle the installations of dependencies, do:. ```shell; pipx install beni; beni pyproject.toml > environment.yml; conda env create -f environment.yml; conda activate scanpy; pip install -e '.[dev,doc,test]'; ```. For instructions on how to work with the code, see the {ref}`contribution guide <contribution-guide>`. ## Docker. If you're using [Docker], you can use e.g. the image [gcfntnu/scanpy] from Docker Hub. ## Troubleshooting. If you get a `Permission denied` error, never use `sudo pip`. Instead, use virtual environments or:. ```shell; pip install --user scanpy; ```. **On MacOS**, if **not** using `conda`, you might need to install the C core of igraph via homebrew first. - `brew install igraph`. - If igraph still fails to install, see the question on [compiling igraph].; Alternatively consider installing gcc via `brew install gcc --without-multilib`; and exporting the required variables:. ```shell; export CC=""/usr/local/Cellar/gcc/X.x.x/bin/gcc-X""; export CXX=""/usr/local/Cellar/gcc/X.x.x/b",install,MatchSource.DOCS,scverse,scanpy,1.10.2,https://github.com/scverse/scanpy/tree/1.10.2/docs/installation.md:1020,installations,1020,docs/installation.md,https://scanpy.readthedocs.io,https://github.com/scverse/scanpy/tree/1.10.2/docs/installation.md,1,['install'],['installations'],"The capability of software to be deployed into an operational environment with predictable time and effort, including options for rollback if needed. Key aspects include automation, deployment speed, and deployment granularity.","
You are an expert in evaluating and categorizing quality attributes in software engineering. You possess the necessary skills to distinguish sentences that clearly relate to a given quality attribute from those that do not. 

Evaluate whether the content accurately aligns with its associated quality attribute, given the context provided. Your goal is to determine if the content makes sense in relation to the quality attribute description or if it is a false positive.

Data:

Quality Attribute: Deployability
Attribute Description: The capability of software to be deployed into an operational environment with predictable time and effort, including options for rollback if needed. Key aspects include automation, deployment speed, and deployment granularity.
Content:  Anaconda. If you do not have a working installation of Python 3.6 (or later), consider; installing [Miniconda] (see [Installing Miniconda]). Then run:. ```shell; conda install -c conda-forge scanpy python-igraph leidenalg; ```. Pull Scanpy from [PyPI](https://pypi.org/project/scanpy) (consider using `pip3` to access Python 3):. ```shell; pip install scanpy; ```. ## PyPI only. If you prefer to exclusively use PyPI run:. ```shell; pip install 'scanpy[leiden]'; ```. The extra `[leiden]` installs two packages that are needed for popular; parts of scanpy but aren't requirements: [igraph] {cite:p}`Csardi2006` and [leiden] {cite:p}`Traag2019`. (dev-install-instructions)=. ## Development Version. To work with the latest version [on GitHub]: clone the repository and `cd` into its root directory. ```shell; gh repo clone scverse/scanpy; cd scanpy; ```. If you are using `pip>=21.3`, an editable install can be made:. ```shell; pip install -e '.[dev,test]'; ```. If you want to let [conda] handle the installations of dependencies, do:. ```shell; pipx install beni; beni pyproject.toml > environment.yml; conda env create -f environment.yml; conda activate scanpy; pip install -e '.[dev,doc,test]'; ```. For instructions on how to work with the code, see the {ref}`contribution guide <contribution-guide>`. ## Docker. If you're using [Docker], you can use e.g. the image [gcfntnu/scanpy] from Docker Hub. ## Troubleshooting. If you get a `Permission denied` error, never use `sudo pip`. Instead, use virtual environments or:. ```shell; pip install --user scanpy; ```. **On MacOS**, if **not** using `conda`, you might need to install the C core of igraph via homebrew first. - `brew install igraph`. - If igraph still fails to install, see the question on [compiling igraph].; Alternatively consider installing gcc via `brew install gcc --without-multilib`; and exporting the required variables:. ```shell; export CC=""/usr/local/Cellar/gcc/X.x.x/bin/gcc-X""; export CXX=""/usr/local/Cellar/gcc/X.x.x/b

Instructions: 
1. Analyze the content and the attribute description.
2. Determine if the content accurately reflects the intended quality attribute in this context.
3. If it does, label it as `true_positive: true`; if not, mark it as a `true_positive: false`.
4. If the content consists only of logs with no other text, mark it as a `true_positive: false`. 
4. If the content partially consists of logs, focus on analyzing remaining text. 
5. Add `reasoning` why the content is a true or false positive.
",True,"The content provided discusses installation and setup instructions for software, including using package managers like Conda and pip, and mentions deployment considerations for dependencies such as igraph. While it is installation guidance rather than directly discussing deployability aspects like automation or rollback, the overall context pertains to ensuring software can be deployed predictably. Therefore, it aligns with Deployability by focusing on deployment methods and ensuring smooth installations which are key factors in deployability."
Deployability," gene, and allows retrieving values for multiple groups at once {pr}`1388` {smaller}`G Eraslan`; - Color annotations for gene sets in {func}`~scanpy.pl.heatmap` are now matched to color for cluster {pr}`1511` {smaller}`L Sikkema`; - PCA plots can now annotate axes with variance explained {pr}`1470` {smaller}`bfurtwa`; - Plots with `groupby` arguments can now group by values in the index by passing the index's name (like `pd.DataFrame.groupby`). {pr}`1583` {smaller}`F Ramirez`; - Added `na_color` and `na_in_legend` keyword arguments to {func}`~scanpy.pl.embedding` plots. Allows specifying color for missing or filtered values in plots like {func}`~scanpy.pl.umap` or {func}`~scanpy.pl.spatial` {pr}`1356` {smaller}`I Virshup`; - {func}`~scanpy.pl.embedding` plots now support passing `dict` of `{cluster_name: cluster_color, ...}` for palette argument {pr}`1392` {smaller}`I Virshup`. ```{rubric} External tools (new); ```. - Add [Scanorama](https://github.com/brianhie/scanorama) integration to scanpy external API ({func}`~scanpy.external.pp.scanorama_integrate`, {cite:t}`Hie2019`) {pr}`1332` {smaller}`B Hie`; - Scrublet {cite:p}`Wolock2019` integration: {func}`~scanpy.pp.scrublet`, {func}`~scanpy.pp.scrublet_simulate_doublets`, and plotting method {func}`~scanpy.pl.scrublet_score_distribution` {pr}`1476` {smaller}`J Manning`; - {func}`~scanpy.external.pp.hashsolo` for HTO demultiplexing {cite:p}`Bernstein2020` {pr}`1432` {smaller}`NJ Bernstein`; - Added [scirpy](https://github.com/icbi-lab/scirpy) (sc-AIRR analysis) to ecosystem page {pr}`1453` {smaller}`G Sturm`; - Added [scvi-tools](https://scvi-tools.org) to ecosystem page {pr}`1421` {smaller}`A Gayoso`. ```{rubric} External tools (changes); ```. - Updates for {func}`~scanpy.external.tl.palantir` and {func}`~scanpy.external.tl.palantir_results` {pr}`1245` {smaller}`A Mousa`; - Fixes to {func}`~scanpy.external.tl.harmony_timeseries` docs {pr}`1248` {smaller}`A Mousa`; - Support for `leiden` clustering by {func}`scanpy.ext",integrat,MatchSource.DOCS,scverse,scanpy,1.10.2,https://github.com/scverse/scanpy/tree/1.10.2/docs/release-notes/1.7.0.md:1609,integration,1609,docs/release-notes/1.7.0.md,https://scanpy.readthedocs.io,https://github.com/scverse/scanpy/tree/1.10.2/docs/release-notes/1.7.0.md,1,['integrat'],['integration'],"The capability of software to be deployed into an operational environment with predictable time and effort, including options for rollback if needed. Key aspects include automation, deployment speed, and deployment granularity.","
You are an expert in evaluating and categorizing quality attributes in software engineering. You possess the necessary skills to distinguish sentences that clearly relate to a given quality attribute from those that do not. 

Evaluate whether the content accurately aligns with its associated quality attribute, given the context provided. Your goal is to determine if the content makes sense in relation to the quality attribute description or if it is a false positive.

Data:

Quality Attribute: Deployability
Attribute Description: The capability of software to be deployed into an operational environment with predictable time and effort, including options for rollback if needed. Key aspects include automation, deployment speed, and deployment granularity.
Content:  gene, and allows retrieving values for multiple groups at once {pr}`1388` {smaller}`G Eraslan`; - Color annotations for gene sets in {func}`~scanpy.pl.heatmap` are now matched to color for cluster {pr}`1511` {smaller}`L Sikkema`; - PCA plots can now annotate axes with variance explained {pr}`1470` {smaller}`bfurtwa`; - Plots with `groupby` arguments can now group by values in the index by passing the index's name (like `pd.DataFrame.groupby`). {pr}`1583` {smaller}`F Ramirez`; - Added `na_color` and `na_in_legend` keyword arguments to {func}`~scanpy.pl.embedding` plots. Allows specifying color for missing or filtered values in plots like {func}`~scanpy.pl.umap` or {func}`~scanpy.pl.spatial` {pr}`1356` {smaller}`I Virshup`; - {func}`~scanpy.pl.embedding` plots now support passing `dict` of `{cluster_name: cluster_color, ...}` for palette argument {pr}`1392` {smaller}`I Virshup`. ```{rubric} External tools (new); ```. - Add [Scanorama](https://github.com/brianhie/scanorama) integration to scanpy external API ({func}`~scanpy.external.pp.scanorama_integrate`, {cite:t}`Hie2019`) {pr}`1332` {smaller}`B Hie`; - Scrublet {cite:p}`Wolock2019` integration: {func}`~scanpy.pp.scrublet`, {func}`~scanpy.pp.scrublet_simulate_doublets`, and plotting method {func}`~scanpy.pl.scrublet_score_distribution` {pr}`1476` {smaller}`J Manning`; - {func}`~scanpy.external.pp.hashsolo` for HTO demultiplexing {cite:p}`Bernstein2020` {pr}`1432` {smaller}`NJ Bernstein`; - Added [scirpy](https://github.com/icbi-lab/scirpy) (sc-AIRR analysis) to ecosystem page {pr}`1453` {smaller}`G Sturm`; - Added [scvi-tools](https://scvi-tools.org) to ecosystem page {pr}`1421` {smaller}`A Gayoso`. ```{rubric} External tools (changes); ```. - Updates for {func}`~scanpy.external.tl.palantir` and {func}`~scanpy.external.tl.palantir_results` {pr}`1245` {smaller}`A Mousa`; - Fixes to {func}`~scanpy.external.tl.harmony_timeseries` docs {pr}`1248` {smaller}`A Mousa`; - Support for `leiden` clustering by {func}`scanpy.ext

Instructions: 
1. Analyze the content and the attribute description.
2. Determine if the content accurately reflects the intended quality attribute in this context.
3. If it does, label it as `true_positive: true`; if not, mark it as a `true_positive: false`.
4. If the content consists only of logs with no other text, mark it as a `true_positive: false`. 
4. If the content partially consists of logs, focus on analyzing remaining text. 
5. Add `reasoning` why the content is a true or false positive.
",False,"The provided content discusses updates and features added to an ecosystem page related to external tools such as Scrublet, Scanorama, and scirpy/scvi-tools. While these additions might enhance usability or integration capabilities, they don't directly address deployment aspects like automation, speed, rollback, or deployment granularity. Therefore, it does not align with Deployability."
Deployability," have all of matplotlib's detailed configuration possibilities. To facilitate writing memory-efficient pipelines, by default,; Scanpy tools operate *inplace* on `adata` and return `None` –; this also allows to easily transition to [out-of-memory pipelines].; If you want to return a copy of the {class}`~anndata.AnnData` object; and leave the passed `adata` unchanged, pass `copy=True` or `inplace=False`. ## AnnData. Scanpy is based on {mod}`anndata`, which provides the {class}`~anndata.AnnData` class. ```{image} https://falexwolf.de/img/scanpy/anndata.svg; :width: 300px; ```. At the most basic level, an {class}`~anndata.AnnData` object `adata` stores; a data matrix `adata.X`, annotation of observations; `adata.obs` and variables `adata.var` as `pd.DataFrame` and unstructured; annotation `adata.uns` as `dict`. Names of observations and; variables can be accessed via `adata.obs_names` and `adata.var_names`,; respectively. {class}`~anndata.AnnData` objects can be sliced like; dataframes, for example, `adata_subset = adata[:, list_of_gene_names]`.; For more, see this [blog post]. To read a data file to an {class}`~anndata.AnnData` object, call:. ```; adata = sc.read(filename); ```. to initialize an {class}`~anndata.AnnData` object. Possibly add further annotation using, e.g., `pd.read_csv`:. ```; import pandas as pd; anno = pd.read_csv(filename_sample_annotation); adata.obs['cell_groups'] = anno['cell_groups'] # categorical annotation of type pandas.Categorical; adata.obs['time'] = anno['time'] # numerical annotation of type float; # alternatively, you could also set the whole dataframe; # adata.obs = anno; ```. To write, use:. ```; adata.write(filename); adata.write_csvs(filename); adata.write_loom(filename); ```. [blog post]: https://falexwolf.de/blog/171223_AnnData_indexing_views_HDF5-backing/; [matplotlib]: https://matplotlib.org/; [out-of-memory pipelines]: https://falexwolf.de/blog/171223_AnnData_indexing_views_HDF5-backing/; [seaborn]: https://seaborn.pydata.org/; ",pipeline,MatchSource.DOCS,scverse,scanpy,1.10.2,https://github.com/scverse/scanpy/tree/1.10.2/docs/usage-principles.md:2559,pipelines,2559,docs/usage-principles.md,https://scanpy.readthedocs.io,https://github.com/scverse/scanpy/tree/1.10.2/docs/usage-principles.md,1,['pipeline'],['pipelines'],"The capability of software to be deployed into an operational environment with predictable time and effort, including options for rollback if needed. Key aspects include automation, deployment speed, and deployment granularity.","
You are an expert in evaluating and categorizing quality attributes in software engineering. You possess the necessary skills to distinguish sentences that clearly relate to a given quality attribute from those that do not. 

Evaluate whether the content accurately aligns with its associated quality attribute, given the context provided. Your goal is to determine if the content makes sense in relation to the quality attribute description or if it is a false positive.

Data:

Quality Attribute: Deployability
Attribute Description: The capability of software to be deployed into an operational environment with predictable time and effort, including options for rollback if needed. Key aspects include automation, deployment speed, and deployment granularity.
Content:  have all of matplotlib's detailed configuration possibilities. To facilitate writing memory-efficient pipelines, by default,; Scanpy tools operate *inplace* on `adata` and return `None` –; this also allows to easily transition to [out-of-memory pipelines].; If you want to return a copy of the {class}`~anndata.AnnData` object; and leave the passed `adata` unchanged, pass `copy=True` or `inplace=False`. ## AnnData. Scanpy is based on {mod}`anndata`, which provides the {class}`~anndata.AnnData` class. ```{image} https://falexwolf.de/img/scanpy/anndata.svg; :width: 300px; ```. At the most basic level, an {class}`~anndata.AnnData` object `adata` stores; a data matrix `adata.X`, annotation of observations; `adata.obs` and variables `adata.var` as `pd.DataFrame` and unstructured; annotation `adata.uns` as `dict`. Names of observations and; variables can be accessed via `adata.obs_names` and `adata.var_names`,; respectively. {class}`~anndata.AnnData` objects can be sliced like; dataframes, for example, `adata_subset = adata[:, list_of_gene_names]`.; For more, see this [blog post]. To read a data file to an {class}`~anndata.AnnData` object, call:. ```; adata = sc.read(filename); ```. to initialize an {class}`~anndata.AnnData` object. Possibly add further annotation using, e.g., `pd.read_csv`:. ```; import pandas as pd; anno = pd.read_csv(filename_sample_annotation); adata.obs['cell_groups'] = anno['cell_groups'] # categorical annotation of type pandas.Categorical; adata.obs['time'] = anno['time'] # numerical annotation of type float; # alternatively, you could also set the whole dataframe; # adata.obs = anno; ```. To write, use:. ```; adata.write(filename); adata.write_csvs(filename); adata.write_loom(filename); ```. [blog post]: https://falexwolf.de/blog/171223_AnnData_indexing_views_HDF5-backing/; [matplotlib]: https://matplotlib.org/; [out-of-memory pipelines]: https://falexwolf.de/blog/171223_AnnData_indexing_views_HDF5-backing/; [seaborn]: https://seaborn.pydata.org/; 

Instructions: 
1. Analyze the content and the attribute description.
2. Determine if the content accurately reflects the intended quality attribute in this context.
3. If it does, label it as `true_positive: true`; if not, mark it as a `true_positive: false`.
4. If the content consists only of logs with no other text, mark it as a `true_positive: false`. 
4. If the content partially consists of logs, focus on analyzing remaining text. 
5. Add `reasoning` why the content is a true or false positive.
",False,"The content provided discusses various aspects related to AnnData objects in Scanpy, including how data can be read into an AnnData object and how annotations are added using pandas. It also explains how to write data back out. While this information is useful for working with the software, it does not directly relate to deployment capabilities such as automation, deployment speed, or deployment granularity. Therefore, the content does not accurately align with the Deployability quality attribute."
Deployability," into warnings try removing all untracked files in the docs directory.; ```. ## Adding to the docs. For any user-visible changes, please make sure a note has been added to the release notes for the relevant version so we can credit you!; These files are found in the `docs/release-notes/` directory.; We recommend waiting on this until your PR is close to done since this can often causes merge conflicts. Once you've added a new function to the documentation, you'll need to make sure there is a link somewhere in the documentation site pointing to it.; This should be added to `docs/api.md` under a relevant heading. For tutorials and more in depth examples, consider adding a notebook to [scanpy-tutorials](https://github.com/scverse/scanpy-tutorials/). The tutorials are tied to this repository via a submodule. To update the submodule, run `git submodule update --remote` from the root of the repository. Subsequently, commit and push the changes in a PR. This should be done before each release to ensure the tutorials are up to date. ## docstrings format. We use the numpydoc style for writing docstrings.; We'd primarily suggest looking at existing docstrings for examples, but the [napolean guide to numpy style docstrings](https://sphinxcontrib-napoleon.readthedocs.io/en/latest/example_numpy.html#example-numpy) is also a great source.; If you're unfamiliar with the reStructuredText (`rst`) markup format, [Sphinx has a useful primer](https://www.sphinx-doc.org/en/master/usage/restructuredtext/basics.html). Some key points:. - We have some custom sphinx extensions activated. When in doubt, try to copy the style of existing docstrings.; - We autopopulate type information in docstrings when possible, so just add the type information to signatures.; - When docs exist in the same file as code, line length restrictions still apply. In files which are just docs, go with a sentence per line (for easier `git diff`s).; - Check that the docs look like what you expect them too! It's easy ",release,MatchSource.DOCS,scverse,scanpy,1.10.2,https://github.com/scverse/scanpy/tree/1.10.2/docs/dev/documentation.md:1851,release,1851,docs/dev/documentation.md,https://scanpy.readthedocs.io,https://github.com/scverse/scanpy/tree/1.10.2/docs/dev/documentation.md,1,['release'],['release'],"The capability of software to be deployed into an operational environment with predictable time and effort, including options for rollback if needed. Key aspects include automation, deployment speed, and deployment granularity.","
You are an expert in evaluating and categorizing quality attributes in software engineering. You possess the necessary skills to distinguish sentences that clearly relate to a given quality attribute from those that do not. 

Evaluate whether the content accurately aligns with its associated quality attribute, given the context provided. Your goal is to determine if the content makes sense in relation to the quality attribute description or if it is a false positive.

Data:

Quality Attribute: Deployability
Attribute Description: The capability of software to be deployed into an operational environment with predictable time and effort, including options for rollback if needed. Key aspects include automation, deployment speed, and deployment granularity.
Content:  into warnings try removing all untracked files in the docs directory.; ```. ## Adding to the docs. For any user-visible changes, please make sure a note has been added to the release notes for the relevant version so we can credit you!; These files are found in the `docs/release-notes/` directory.; We recommend waiting on this until your PR is close to done since this can often causes merge conflicts. Once you've added a new function to the documentation, you'll need to make sure there is a link somewhere in the documentation site pointing to it.; This should be added to `docs/api.md` under a relevant heading. For tutorials and more in depth examples, consider adding a notebook to [scanpy-tutorials](https://github.com/scverse/scanpy-tutorials/). The tutorials are tied to this repository via a submodule. To update the submodule, run `git submodule update --remote` from the root of the repository. Subsequently, commit and push the changes in a PR. This should be done before each release to ensure the tutorials are up to date. ## docstrings format. We use the numpydoc style for writing docstrings.; We'd primarily suggest looking at existing docstrings for examples, but the [napolean guide to numpy style docstrings](https://sphinxcontrib-napoleon.readthedocs.io/en/latest/example_numpy.html#example-numpy) is also a great source.; If you're unfamiliar with the reStructuredText (`rst`) markup format, [Sphinx has a useful primer](https://www.sphinx-doc.org/en/master/usage/restructuredtext/basics.html). Some key points:. - We have some custom sphinx extensions activated. When in doubt, try to copy the style of existing docstrings.; - We autopopulate type information in docstrings when possible, so just add the type information to signatures.; - When docs exist in the same file as code, line length restrictions still apply. In files which are just docs, go with a sentence per line (for easier `git diff`s).; - Check that the docs look like what you expect them too! It's easy 

Instructions: 
1. Analyze the content and the attribute description.
2. Determine if the content accurately reflects the intended quality attribute in this context.
3. If it does, label it as `true_positive: true`; if not, mark it as a `true_positive: false`.
4. If the content consists only of logs with no other text, mark it as a `true_positive: false`. 
4. If the content partially consists of logs, focus on analyzing remaining text. 
5. Add `reasoning` why the content is a true or false positive.
",False,"The content provided discusses documentation practices such as updating release notes and adding docstrings, which are related to maintainable code deployment through proper documentation. However, Deployability focuses more on the technical aspects like automation, deployment speed, and rollbacks rather than documentation processes. Therefore, while the content is relevant to software development in general, it does not directly address deployability concerns such as automated deployment or potential issues during deployment that could lead to rollback scenarios."
Deployability," very straight forward if you're using [GitHub's CLI](https://cli.github.com):. ```shell; $ gh repo fork scverse/scanpy --clone --remote; ```. This will fork the repo to your github account, create a clone of the repo on your current machine, add our repository as a remote, and set the `main` development branch to track our repository. To do this manually, first make a fork of the repository by clicking the ""fork"" button on our main github package. Then, on your machine, run:. ```shell; # Clone your fork of the repository (substitute in your username); git clone https://github.com/{your-username}/scanpy.git; # Enter the cloned repository; cd scanpy; # Add our repository as a remote; git remote add upstream https://github.com/scverse/scanpy.git; # git branch --set-upstream-to ""upstream/main""; ```. ### `pre-commit`. We use [precommit](https://pre-commit.com) to run some styling checks in an automated way.; We also test against these checks, so make sure you follow them!. You can install pre-commit with:. ```shell; pip install pre-commit; ```. You can then install it to run while developing here with:. ```shell; pre-commit install; ```. From the root of the repo. If you choose not to run the hooks on each commit, you can run them manually with `pre-commit run --files={your files}`. (creating-a-branch)=. ### Creating a branch for your feature. All development should occur in branches dedicated to the particular work being done.; Additionally, unless you are a maintainer, all changes should be directed at the `main` branch.; You can create a branch with:. ```shell; git checkout main # Starting from the main branch; git pull # Syncing with the repo; git checkout -b {your-branch-name} # Making and changing to the new branch; ```. (open-a-pr)=. ### Open a pull request. When you're ready to have your code reviewed, push your changes up to your fork:. ```shell; # The first time you push the branch, you'll need to tell git where; git push --set-upstream origin {your-branch-nam",install,MatchSource.DOCS,scverse,scanpy,1.10.2,https://github.com/scverse/scanpy/tree/1.10.2/docs/dev/getting-set-up.md:1791,install,1791,docs/dev/getting-set-up.md,https://scanpy.readthedocs.io,https://github.com/scverse/scanpy/tree/1.10.2/docs/dev/getting-set-up.md,1,['install'],['install'],"The capability of software to be deployed into an operational environment with predictable time and effort, including options for rollback if needed. Key aspects include automation, deployment speed, and deployment granularity.","
You are an expert in evaluating and categorizing quality attributes in software engineering. You possess the necessary skills to distinguish sentences that clearly relate to a given quality attribute from those that do not. 

Evaluate whether the content accurately aligns with its associated quality attribute, given the context provided. Your goal is to determine if the content makes sense in relation to the quality attribute description or if it is a false positive.

Data:

Quality Attribute: Deployability
Attribute Description: The capability of software to be deployed into an operational environment with predictable time and effort, including options for rollback if needed. Key aspects include automation, deployment speed, and deployment granularity.
Content:  very straight forward if you're using [GitHub's CLI](https://cli.github.com):. ```shell; $ gh repo fork scverse/scanpy --clone --remote; ```. This will fork the repo to your github account, create a clone of the repo on your current machine, add our repository as a remote, and set the `main` development branch to track our repository. To do this manually, first make a fork of the repository by clicking the ""fork"" button on our main github package. Then, on your machine, run:. ```shell; # Clone your fork of the repository (substitute in your username); git clone https://github.com/{your-username}/scanpy.git; # Enter the cloned repository; cd scanpy; # Add our repository as a remote; git remote add upstream https://github.com/scverse/scanpy.git; # git branch --set-upstream-to ""upstream/main""; ```. ### `pre-commit`. We use [precommit](https://pre-commit.com) to run some styling checks in an automated way.; We also test against these checks, so make sure you follow them!. You can install pre-commit with:. ```shell; pip install pre-commit; ```. You can then install it to run while developing here with:. ```shell; pre-commit install; ```. From the root of the repo. If you choose not to run the hooks on each commit, you can run them manually with `pre-commit run --files={your files}`. (creating-a-branch)=. ### Creating a branch for your feature. All development should occur in branches dedicated to the particular work being done.; Additionally, unless you are a maintainer, all changes should be directed at the `main` branch.; You can create a branch with:. ```shell; git checkout main # Starting from the main branch; git pull # Syncing with the repo; git checkout -b {your-branch-name} # Making and changing to the new branch; ```. (open-a-pr)=. ### Open a pull request. When you're ready to have your code reviewed, push your changes up to your fork:. ```shell; # The first time you push the branch, you'll need to tell git where; git push --set-upstream origin {your-branch-nam

Instructions: 
1. Analyze the content and the attribute description.
2. Determine if the content accurately reflects the intended quality attribute in this context.
3. If it does, label it as `true_positive: true`; if not, mark it as a `true_positive: false`.
4. If the content consists only of logs with no other text, mark it as a `true_positive: false`. 
4. If the content partially consists of logs, focus on analyzing remaining text. 
5. Add `reasoning` why the content is a true or false positive.
",True,"The content provided describes how to set up deployments using GitHub's CLI and manual steps for cloning repositories, which directly relates to deployability by ensuring smooth deployment processes are established. The use of pre-commit hooks and guidelines for creating branches and pull requests also contribute to maintainable and deployable code practices. These actions support the quality attribute of Deployability by automating checks and streamlining the deployment workflow."
Deployability,# Basics. ```{toctree}; :maxdepth: 1. clustering; clustering-2017; integrating-data-using-ingest; ```; ,integrat,MatchSource.DOCS,scverse,scanpy,1.10.2,https://github.com/scverse/scanpy/tree/1.10.2/docs/tutorials/basics/index.md:67,integrating-data-using-ingest,67,docs/tutorials/basics/index.md,https://scanpy.readthedocs.io,https://github.com/scverse/scanpy/tree/1.10.2/docs/tutorials/basics/index.md,1,['integrat'],['integrating-data-using-ingest'],"The capability of software to be deployed into an operational environment with predictable time and effort, including options for rollback if needed. Key aspects include automation, deployment speed, and deployment granularity.","
You are an expert in evaluating and categorizing quality attributes in software engineering. You possess the necessary skills to distinguish sentences that clearly relate to a given quality attribute from those that do not. 

Evaluate whether the content accurately aligns with its associated quality attribute, given the context provided. Your goal is to determine if the content makes sense in relation to the quality attribute description or if it is a false positive.

Data:

Quality Attribute: Deployability
Attribute Description: The capability of software to be deployed into an operational environment with predictable time and effort, including options for rollback if needed. Key aspects include automation, deployment speed, and deployment granularity.
Content: # Basics. ```{toctree}; :maxdepth: 1. clustering; clustering-2017; integrating-data-using-ingest; ```; 

Instructions: 
1. Analyze the content and the attribute description.
2. Determine if the content accurately reflects the intended quality attribute in this context.
3. If it does, label it as `true_positive: true`; if not, mark it as a `true_positive: false`.
4. If the content consists only of logs with no other text, mark it as a `true_positive: false`. 
4. If the content partially consists of logs, focus on analyzing remaining text. 
5. Add `reasoning` why the content is a true or false positive.
",False,The content provided is a log snippet that includes clustering and integrating data from 2017. This does not relate to deployability as it pertains to data integration rather than deployment aspects.
Deployability,"# CI. ## Plotting tests. A frequent frustration in testing is the reproducibility of the plots and `matplotlib`'s behaviour in different environments.; We have some tooling to help with this. ### Viewing plots from failed tests on Azure pipelines. The fixtures `check_same_image` and `image_comparer` upload plots from failing tests so you can view them from the azure pipelines test viewer.; To find these, navigate to the tests tab for your build. ```{image} ../_static/img/ci_plot-view_tests-tab.png; :width: 750px; ```. Select your failing test. ```{image} ../_static/img/ci_plot-view_select-test.png; :width: 750px; ```. And open the attachments tab. ```{image} ../_static/img/ci_plot-view_attachment-tab.png; :width: 750px; ```. From here you can view and download the images which were compared, as well as a diff between them. ### Misc. {func}`matplotlib.testing.setup` tries to establish a consistent environment for creating plots. Make sure it's active!; ",pipeline,MatchSource.DOCS,scverse,scanpy,1.10.2,https://github.com/scverse/scanpy/tree/1.10.2/docs/dev/ci.md:237,pipelines,237,docs/dev/ci.md,https://scanpy.readthedocs.io,https://github.com/scverse/scanpy/tree/1.10.2/docs/dev/ci.md,2,['pipeline'],['pipelines'],"The capability of software to be deployed into an operational environment with predictable time and effort, including options for rollback if needed. Key aspects include automation, deployment speed, and deployment granularity.","
You are an expert in evaluating and categorizing quality attributes in software engineering. You possess the necessary skills to distinguish sentences that clearly relate to a given quality attribute from those that do not. 

Evaluate whether the content accurately aligns with its associated quality attribute, given the context provided. Your goal is to determine if the content makes sense in relation to the quality attribute description or if it is a false positive.

Data:

Quality Attribute: Deployability
Attribute Description: The capability of software to be deployed into an operational environment with predictable time and effort, including options for rollback if needed. Key aspects include automation, deployment speed, and deployment granularity.
Content: # CI. ## Plotting tests. A frequent frustration in testing is the reproducibility of the plots and `matplotlib`'s behaviour in different environments.; We have some tooling to help with this. ### Viewing plots from failed tests on Azure pipelines. The fixtures `check_same_image` and `image_comparer` upload plots from failing tests so you can view them from the azure pipelines test viewer.; To find these, navigate to the tests tab for your build. ```{image} ../_static/img/ci_plot-view_tests-tab.png; :width: 750px; ```. Select your failing test. ```{image} ../_static/img/ci_plot-view_select-test.png; :width: 750px; ```. And open the attachments tab. ```{image} ../_static/img/ci_plot-view_attachment-tab.png; :width: 750px; ```. From here you can view and download the images which were compared, as well as a diff between them. ### Misc. {func}`matplotlib.testing.setup` tries to establish a consistent environment for creating plots. Make sure it's active!; 

Instructions: 
1. Analyze the content and the attribute description.
2. Determine if the content accurately reflects the intended quality attribute in this context.
3. If it does, label it as `true_positive: true`; if not, mark it as a `true_positive: false`.
4. If the content consists only of logs with no other text, mark it as a `true_positive: false`. 
4. If the content partially consists of logs, focus on analyzing remaining text. 
5. Add `reasoning` why the content is a true or false positive.
",False,"The content discusses tools for viewing and comparing plots from failed tests in Azure pipelines, which relates to testing reproducibility. However, deployability focuses more on deployment aspects like automation, speed, and rollback rather than test visualization. Therefore, this content does not align with Deployability."
Deployability,"# Documentation. (building-the-docs)=. ## Building the docs. Dependencies for building the documentation for scanpy can be installed with `pip install -e ""scanpy[doc]""`. To build the docs, enter the `docs` directory and run `make html`. After this process completes you can take a look at the docs by opening `scanpy/docs/_build/html/index.html`. Your browser and Sphinx cache docs which have been built previously.; Sometimes these caches are not invalidated when you've updated the docs.; If docs are not updating the way you expect, first try ""force reloading"" your browser page – e.g. reload the page without using the cache.; Next, if problems persist, clear the sphinx cache and try building them again (`make clean` from `docs` directory). ```{note}; If you've cloned the repository pre 1.8.0, you may need to be more thorough in cleaning.; If you run into warnings try removing all untracked files in the docs directory.; ```. ## Adding to the docs. For any user-visible changes, please make sure a note has been added to the release notes for the relevant version so we can credit you!; These files are found in the `docs/release-notes/` directory.; We recommend waiting on this until your PR is close to done since this can often causes merge conflicts. Once you've added a new function to the documentation, you'll need to make sure there is a link somewhere in the documentation site pointing to it.; This should be added to `docs/api.md` under a relevant heading. For tutorials and more in depth examples, consider adding a notebook to [scanpy-tutorials](https://github.com/scverse/scanpy-tutorials/). The tutorials are tied to this repository via a submodule. To update the submodule, run `git submodule update --remote` from the root of the repository. Subsequently, commit and push the changes in a PR. This should be done before each release to ensure the tutorials are up to date. ## docstrings format. We use the numpydoc style for writing docstrings.; We'd primarily suggest lookin",install,MatchSource.DOCS,scverse,scanpy,1.10.2,https://github.com/scverse/scanpy/tree/1.10.2/docs/dev/documentation.md:123,installed,123,docs/dev/documentation.md,https://scanpy.readthedocs.io,https://github.com/scverse/scanpy/tree/1.10.2/docs/dev/documentation.md,3,"['install', 'update']","['install', 'installed', 'updated']","The capability of software to be deployed into an operational environment with predictable time and effort, including options for rollback if needed. Key aspects include automation, deployment speed, and deployment granularity.","
You are an expert in evaluating and categorizing quality attributes in software engineering. You possess the necessary skills to distinguish sentences that clearly relate to a given quality attribute from those that do not. 

Evaluate whether the content accurately aligns with its associated quality attribute, given the context provided. Your goal is to determine if the content makes sense in relation to the quality attribute description or if it is a false positive.

Data:

Quality Attribute: Deployability
Attribute Description: The capability of software to be deployed into an operational environment with predictable time and effort, including options for rollback if needed. Key aspects include automation, deployment speed, and deployment granularity.
Content: # Documentation. (building-the-docs)=. ## Building the docs. Dependencies for building the documentation for scanpy can be installed with `pip install -e ""scanpy[doc]""`. To build the docs, enter the `docs` directory and run `make html`. After this process completes you can take a look at the docs by opening `scanpy/docs/_build/html/index.html`. Your browser and Sphinx cache docs which have been built previously.; Sometimes these caches are not invalidated when you've updated the docs.; If docs are not updating the way you expect, first try ""force reloading"" your browser page – e.g. reload the page without using the cache.; Next, if problems persist, clear the sphinx cache and try building them again (`make clean` from `docs` directory). ```{note}; If you've cloned the repository pre 1.8.0, you may need to be more thorough in cleaning.; If you run into warnings try removing all untracked files in the docs directory.; ```. ## Adding to the docs. For any user-visible changes, please make sure a note has been added to the release notes for the relevant version so we can credit you!; These files are found in the `docs/release-notes/` directory.; We recommend waiting on this until your PR is close to done since this can often causes merge conflicts. Once you've added a new function to the documentation, you'll need to make sure there is a link somewhere in the documentation site pointing to it.; This should be added to `docs/api.md` under a relevant heading. For tutorials and more in depth examples, consider adding a notebook to [scanpy-tutorials](https://github.com/scverse/scanpy-tutorials/). The tutorials are tied to this repository via a submodule. To update the submodule, run `git submodule update --remote` from the root of the repository. Subsequently, commit and push the changes in a PR. This should be done before each release to ensure the tutorials are up to date. ## docstrings format. We use the numpydoc style for writing docstrings.; We'd primarily suggest lookin

Instructions: 
1. Analyze the content and the attribute description.
2. Determine if the content accurately reflects the intended quality attribute in this context.
3. If it does, label it as `true_positive: true`; if not, mark it as a `true_positive: false`.
4. If the content consists only of logs with no other text, mark it as a `true_positive: false`. 
4. If the content partially consists of logs, focus on analyzing remaining text. 
5. Add `reasoning` why the content is a true or false positive.
",True,"The given content discusses documentation practices and procedures for building and updating the project's documentation. It includes instructions on how to install dependencies, build the docs using specific commands, and how to handle caching issues. While deployment isn't directly mentioned, the ability to deploy and maintain documentation smoothly is a part of overall deployability. The process described ensures that documentation can be reliably generated and accessed by users, which supports deployability."
Deployability,"# External API. ```{eval-rst}; .. module:: scanpy.external; ```. ```{warning}; We are no longer accepting new tools into `scanpy.external`.; Instead, please submit your tool to the [scverse ecosystem package listing](https://scverse.org/packages/#ecosystem).; ```. ```{note}; For tools that integrate well with scanpy and anndata, see:; * The [scverse ecosystem](https://scverse.org/packages/#ecosystem); * Scanpy's ecosystem {doc}`ecosystem page <../ecosystem>`; ```. Import Scanpy's wrappers to external tools as:. ```; import scanpy.external as sce; ```. ```{toctree}; :maxdepth: 2. preprocessing; tools; plotting; exporting; ```; ",integrat,MatchSource.DOCS,scverse,scanpy,1.10.2,https://github.com/scverse/scanpy/tree/1.10.2/docs/external/index.md:291,integrate,291,docs/external/index.md,https://scanpy.readthedocs.io,https://github.com/scverse/scanpy/tree/1.10.2/docs/external/index.md,1,['integrat'],['integrate'],"The capability of software to be deployed into an operational environment with predictable time and effort, including options for rollback if needed. Key aspects include automation, deployment speed, and deployment granularity.","
You are an expert in evaluating and categorizing quality attributes in software engineering. You possess the necessary skills to distinguish sentences that clearly relate to a given quality attribute from those that do not. 

Evaluate whether the content accurately aligns with its associated quality attribute, given the context provided. Your goal is to determine if the content makes sense in relation to the quality attribute description or if it is a false positive.

Data:

Quality Attribute: Deployability
Attribute Description: The capability of software to be deployed into an operational environment with predictable time and effort, including options for rollback if needed. Key aspects include automation, deployment speed, and deployment granularity.
Content: # External API. ```{eval-rst}; .. module:: scanpy.external; ```. ```{warning}; We are no longer accepting new tools into `scanpy.external`.; Instead, please submit your tool to the [scverse ecosystem package listing](https://scverse.org/packages/#ecosystem).; ```. ```{note}; For tools that integrate well with scanpy and anndata, see:; * The [scverse ecosystem](https://scverse.org/packages/#ecosystem); * Scanpy's ecosystem {doc}`ecosystem page <../ecosystem>`; ```. Import Scanpy's wrappers to external tools as:. ```; import scanpy.external as sce; ```. ```{toctree}; :maxdepth: 2. preprocessing; tools; plotting; exporting; ```; 

Instructions: 
1. Analyze the content and the attribute description.
2. Determine if the content accurately reflects the intended quality attribute in this context.
3. If it does, label it as `true_positive: true`; if not, mark it as a `true_positive: false`.
4. If the content consists only of logs with no other text, mark it as a `true_positive: false`. 
4. If the content partially consists of logs, focus on analyzing remaining text. 
5. Add `reasoning` why the content is a true or false positive.
",True,"The content provided discusses how to import and use external tools with scanpy, which relates to deploying tools into an operational environment. It guides users on where to find compatible tools and how to integrate them, ensuring that deployment can be done effectively. This aligns well with the Deployability attribute, as it involves making sure tools are ready for deployment with minimal effort and proper integration."
Deployability,"# For each ""variable = "", there must be a right hand side:; # either an empty string or a python-style logical expression; # involving variable names, ""or"", ""and"", ""("", "")"".; # The order of equations matters!; #; # modelType = hill; # invTimeStep = 0.1; #; # boolean update rules:; 0 = 0 and not 1; 1 = 1 and not 0; # coupling list:; 0 0 1.0; 0 1 -1.0; 1 1 1.0; 1 0 -1.0; ",update,MatchSource.DOCS,scverse,scanpy,1.10.2,https://github.com/scverse/scanpy/tree/1.10.2/src/scanpy/sim_models/toggleswitch.txt:267,update,267,src/scanpy/sim_models/toggleswitch.txt,https://scanpy.readthedocs.io,https://github.com/scverse/scanpy/tree/1.10.2/src/scanpy/sim_models/toggleswitch.txt,1,['update'],['update'],"The capability of software to be deployed into an operational environment with predictable time and effort, including options for rollback if needed. Key aspects include automation, deployment speed, and deployment granularity.","
You are an expert in evaluating and categorizing quality attributes in software engineering. You possess the necessary skills to distinguish sentences that clearly relate to a given quality attribute from those that do not. 

Evaluate whether the content accurately aligns with its associated quality attribute, given the context provided. Your goal is to determine if the content makes sense in relation to the quality attribute description or if it is a false positive.

Data:

Quality Attribute: Deployability
Attribute Description: The capability of software to be deployed into an operational environment with predictable time and effort, including options for rollback if needed. Key aspects include automation, deployment speed, and deployment granularity.
Content: # For each ""variable = "", there must be a right hand side:; # either an empty string or a python-style logical expression; # involving variable names, ""or"", ""and"", ""("", "")"".; # The order of equations matters!; #; # modelType = hill; # invTimeStep = 0.1; #; # boolean update rules:; 0 = 0 and not 1; 1 = 1 and not 0; # coupling list:; 0 0 1.0; 0 1 -1.0; 1 1 1.0; 1 0 -1.0; 

Instructions: 
1. Analyze the content and the attribute description.
2. Determine if the content accurately reflects the intended quality attribute in this context.
3. If it does, label it as `true_positive: true`; if not, mark it as a `true_positive: false`.
4. If the content consists only of logs with no other text, mark it as a `true_positive: false`. 
4. If the content partially consists of logs, focus on analyzing remaining text. 
5. Add `reasoning` why the content is a true or false positive.
",False,"The content provided seems to be a snippet from a configuration file, possibly for a simulation model. The lines like 'modelType = hill' and 'invTimeStep = 0.1' suggest that it's setting parameters for a specific model. However, the attribute description focuses on deployment aspects such as automation, speed, and rollback options. This content doesn't mention anything about deployment or related terms; instead, it seems to be about modeling parameters. Therefore, it does not align with Deployability."
Deployability,"# Installation. ## Anaconda. If you do not have a working installation of Python 3.6 (or later), consider; installing [Miniconda] (see [Installing Miniconda]). Then run:. ```shell; conda install -c conda-forge scanpy python-igraph leidenalg; ```. Pull Scanpy from [PyPI](https://pypi.org/project/scanpy) (consider using `pip3` to access Python 3):. ```shell; pip install scanpy; ```. ## PyPI only. If you prefer to exclusively use PyPI run:. ```shell; pip install 'scanpy[leiden]'; ```. The extra `[leiden]` installs two packages that are needed for popular; parts of scanpy but aren't requirements: [igraph] {cite:p}`Csardi2006` and [leiden] {cite:p}`Traag2019`. (dev-install-instructions)=. ## Development Version. To work with the latest version [on GitHub]: clone the repository and `cd` into its root directory. ```shell; gh repo clone scverse/scanpy; cd scanpy; ```. If you are using `pip>=21.3`, an editable install can be made:. ```shell; pip install -e '.[dev,test]'; ```. If you want to let [conda] handle the installations of dependencies, do:. ```shell; pipx install beni; beni pyproject.toml > environment.yml; conda env create -f environment.yml; conda activate scanpy; pip install -e '.[dev,doc,test]'; ```. For instructions on how to work with the code, see the {ref}`contribution guide <contribution-guide>`. ## Docker. If you're using [Docker], you can use e.g. the image [gcfntnu/scanpy] from Docker Hub. ## Troubleshooting. If you get a `Permission denied` error, never use `sudo pip`. Instead, use virtual environments or:. ```shell; pip install --user scanpy; ```. **On MacOS**, if **not** using `conda`, you might need to install the C core of igraph via homebrew first. - `brew install igraph`. - If igraph still fails to install, see the question on [compiling igraph].; Alternatively consider installing gcc via `brew install gcc --without-multilib`; and exporting the required variables:. ```shell; export CC=""/usr/local/Cellar/gcc/X.x.x/bin/gcc-X""; export CXX=""/usr/local/C",install,MatchSource.DOCS,scverse,scanpy,1.10.2,https://github.com/scverse/scanpy/tree/1.10.2/docs/installation.md:58,installation,58,docs/installation.md,https://scanpy.readthedocs.io,https://github.com/scverse/scanpy/tree/1.10.2/docs/installation.md,9,['install'],"['install', 'install-instructions', 'installation', 'installing', 'installs']","The capability of software to be deployed into an operational environment with predictable time and effort, including options for rollback if needed. Key aspects include automation, deployment speed, and deployment granularity.","
You are an expert in evaluating and categorizing quality attributes in software engineering. You possess the necessary skills to distinguish sentences that clearly relate to a given quality attribute from those that do not. 

Evaluate whether the content accurately aligns with its associated quality attribute, given the context provided. Your goal is to determine if the content makes sense in relation to the quality attribute description or if it is a false positive.

Data:

Quality Attribute: Deployability
Attribute Description: The capability of software to be deployed into an operational environment with predictable time and effort, including options for rollback if needed. Key aspects include automation, deployment speed, and deployment granularity.
Content: # Installation. ## Anaconda. If you do not have a working installation of Python 3.6 (or later), consider; installing [Miniconda] (see [Installing Miniconda]). Then run:. ```shell; conda install -c conda-forge scanpy python-igraph leidenalg; ```. Pull Scanpy from [PyPI](https://pypi.org/project/scanpy) (consider using `pip3` to access Python 3):. ```shell; pip install scanpy; ```. ## PyPI only. If you prefer to exclusively use PyPI run:. ```shell; pip install 'scanpy[leiden]'; ```. The extra `[leiden]` installs two packages that are needed for popular; parts of scanpy but aren't requirements: [igraph] {cite:p}`Csardi2006` and [leiden] {cite:p}`Traag2019`. (dev-install-instructions)=. ## Development Version. To work with the latest version [on GitHub]: clone the repository and `cd` into its root directory. ```shell; gh repo clone scverse/scanpy; cd scanpy; ```. If you are using `pip>=21.3`, an editable install can be made:. ```shell; pip install -e '.[dev,test]'; ```. If you want to let [conda] handle the installations of dependencies, do:. ```shell; pipx install beni; beni pyproject.toml > environment.yml; conda env create -f environment.yml; conda activate scanpy; pip install -e '.[dev,doc,test]'; ```. For instructions on how to work with the code, see the {ref}`contribution guide <contribution-guide>`. ## Docker. If you're using [Docker], you can use e.g. the image [gcfntnu/scanpy] from Docker Hub. ## Troubleshooting. If you get a `Permission denied` error, never use `sudo pip`. Instead, use virtual environments or:. ```shell; pip install --user scanpy; ```. **On MacOS**, if **not** using `conda`, you might need to install the C core of igraph via homebrew first. - `brew install igraph`. - If igraph still fails to install, see the question on [compiling igraph].; Alternatively consider installing gcc via `brew install gcc --without-multilib`; and exporting the required variables:. ```shell; export CC=""/usr/local/Cellar/gcc/X.x.x/bin/gcc-X""; export CXX=""/usr/local/C

Instructions: 
1. Analyze the content and the attribute description.
2. Determine if the content accurately reflects the intended quality attribute in this context.
3. If it does, label it as `true_positive: true`; if not, mark it as a `true_positive: false`.
4. If the content consists only of logs with no other text, mark it as a `true_positive: false`. 
4. If the content partially consists of logs, focus on analyzing remaining text. 
5. Add `reasoning` why the content is a true or false positive.
",True,"The content provided discusses installation instructions for Anaconda and PyPI, deployment methods such as using GitHub and pip, and mentions Docker. These all pertain to how software can be deployed and installed, which aligns with Deployability."
Deployability,"# Making a release. First, check out {doc}`versioning` to see which kind of release you want to make.; That page also explains concepts like *pre-releases* and applications thereof. ## Actually making the release. 1. Go to GitHub’s [releases][] page; 2. Click “Draft a new release”; 3. Click “Choose a tag” and type the version of the tag you want to release, such as `1.9.6`; 4. Click “**+ Create new tag: 1.\<minor>.\<patch>** on publish”; 5. If the version is a *pre-release* version, such as `1.7.0rc1` or `1.10.0a1`, tick the “Set as a pre-release” checkbox. [releases]: https://github.com/scverse/scanpy/releases. ## After making a release. After *any* release has been made:. - Create a new release notes file for the next bugfix release.; This should be included in both dev and stable branches.; - Create a milestone for the next release (in case you made a bugfix release) or releases (in case of a major/minor release).; For bugfix releases, this should have `on-merge: backport to 0.<minor>.x`,; so the [meeseeksdev][] bot will create a backport PR. See {doc}`versioning` for more info.; - Clear out and close the milestone you just made a release for. After a *major* or *minor* release has been made:. - Tweet about it! Announce it on Zulip! Announce it on Discourse! Think about making a bot for this! Maybe actually do that?; - Create a new release notes file for the next minor release. This should only be added to the dev branch.; - Tag the development branch. If you just released `1.7.0`, this would be `1.8.0.dev0`.; - Create a new branch for this release series, like `1.7.x`. This should get a new release notes file. [meeseeksdev]: https://meeseeksbox.github.io. ## Debugging the build process. If you changed something about the build process (e.g. [Hatchling’s build configuration][hatch-build]),; or something about the package’s structure,; you might want to manually check if the build and upload process behaves as expected:. ```shell; # Clear out old distributions; rm ",release,MatchSource.DOCS,scverse,scanpy,1.10.2,https://github.com/scverse/scanpy/tree/1.10.2/docs/dev/release.md:11,release,11,docs/dev/release.md,https://scanpy.readthedocs.io,https://github.com/scverse/scanpy/tree/1.10.2/docs/dev/release.md,21,"['patch', 'release']","['patch', 'release', 'releases']","The capability of software to be deployed into an operational environment with predictable time and effort, including options for rollback if needed. Key aspects include automation, deployment speed, and deployment granularity.","
You are an expert in evaluating and categorizing quality attributes in software engineering. You possess the necessary skills to distinguish sentences that clearly relate to a given quality attribute from those that do not. 

Evaluate whether the content accurately aligns with its associated quality attribute, given the context provided. Your goal is to determine if the content makes sense in relation to the quality attribute description or if it is a false positive.

Data:

Quality Attribute: Deployability
Attribute Description: The capability of software to be deployed into an operational environment with predictable time and effort, including options for rollback if needed. Key aspects include automation, deployment speed, and deployment granularity.
Content: # Making a release. First, check out {doc}`versioning` to see which kind of release you want to make.; That page also explains concepts like *pre-releases* and applications thereof. ## Actually making the release. 1. Go to GitHub’s [releases][] page; 2. Click “Draft a new release”; 3. Click “Choose a tag” and type the version of the tag you want to release, such as `1.9.6`; 4. Click “**+ Create new tag: 1.\<minor>.\<patch>** on publish”; 5. If the version is a *pre-release* version, such as `1.7.0rc1` or `1.10.0a1`, tick the “Set as a pre-release” checkbox. [releases]: https://github.com/scverse/scanpy/releases. ## After making a release. After *any* release has been made:. - Create a new release notes file for the next bugfix release.; This should be included in both dev and stable branches.; - Create a milestone for the next release (in case you made a bugfix release) or releases (in case of a major/minor release).; For bugfix releases, this should have `on-merge: backport to 0.<minor>.x`,; so the [meeseeksdev][] bot will create a backport PR. See {doc}`versioning` for more info.; - Clear out and close the milestone you just made a release for. After a *major* or *minor* release has been made:. - Tweet about it! Announce it on Zulip! Announce it on Discourse! Think about making a bot for this! Maybe actually do that?; - Create a new release notes file for the next minor release. This should only be added to the dev branch.; - Tag the development branch. If you just released `1.7.0`, this would be `1.8.0.dev0`.; - Create a new branch for this release series, like `1.7.x`. This should get a new release notes file. [meeseeksdev]: https://meeseeksbox.github.io. ## Debugging the build process. If you changed something about the build process (e.g. [Hatchling’s build configuration][hatch-build]),; or something about the package’s structure,; you might want to manually check if the build and upload process behaves as expected:. ```shell; # Clear out old distributions; rm 

Instructions: 
1. Analyze the content and the attribute description.
2. Determine if the content accurately reflects the intended quality attribute in this context.
3. If it does, label it as `true_positive: true`; if not, mark it as a `true_positive: false`.
4. If the content consists only of logs with no other text, mark it as a `true_positive: false`. 
4. If the content partially consists of logs, focus on analyzing remaining text. 
5. Add `reasoning` why the content is a true or false positive.
",True,"The content provided describes the process for making and announcing releases, including creating release notes and milestones. This directly relates to deployability as it covers how software is released into an operational environment with clear steps. The attribute description mentions deployment automation, speed, and granularity, which are addressed through the processes outlined here. The content is a true positive because it aligns with the deployability quality attribute by detailing release management practices that ensure smooth deployment."
Deployability,"# See Table 1 in Krumsiek et al. (2011), p. 3 or; # Table 1, in Suppl. Mat. of Moignard et al. (2015), p. 28.; #; # For each ""variable = "", there must be a right hand side:; # either an empty string or a python-style logical expression; # involving variable names, ""or"", ""and"", ""("", "")"".; # The order of equations matters!; #; # modelType = hill; # invTimeStep = 0.02; #; # boolean update rules:; Gata2 = Gata2 and not (Gata1 and Fog1) and not Pu.1; Gata1 = (Gata1 or Gata2 or Fli1) and not Pu.1; Fog1 = Gata1; EKLF = Gata1 and not Fli1; Fli1 = Gata1 and not EKLF; SCL = Gata1 and not Pu.1; Cebpa = Cebpa and not (Gata1 and Fog1 and SCL); Pu.1 = (Cebpa or Pu.1) and not (Gata1 or Gata2); cJun = Pu.1 and not Gfi1; EgrNab = (Pu.1 and cJun) and not Gfi1; Gfi1 = Cebpa and not EgrNab; # coupling list:; Gata2 Gata2 1.0; Gata2 Gata1 -0.1; Gata2 Fog1 -1.0; Gata2 Pu.1 -1.15; Gata1 Gata2 1.0; Gata1 Gata1 0.1; Gata1 Fli1 1.0; Gata1 Pu.1 -1.21; Fog1 Gata1 0.1; EKLF Gata1 0.2; EKLF Fli1 -1.0; Fli1 Gata1 0.2; Fli1 EKLF -1.0; SCL Gata1 1.0; SCL Pu.1 -1.0; Cebpa Gata1 -1.0; Cebpa Fog1 -1.0; Cebpa SCL -1.0; Cebpa Cebpa 10.0; Pu.1 Gata2 -1.0; Pu.1 Gata1 -1.0; Pu.1 Cebpa 10.0; Pu.1 Pu.1 10.0; cJun Pu.1 1.0; cJun Gfi1 -1.0; EgrNab Pu.1 1.0; EgrNab cJun 1.0; EgrNab Gfi1 -1.3; Gfi1 Cebpa 1.0; Gfi1 EgrNab -5.0; ",update,MatchSource.DOCS,scverse,scanpy,1.10.2,https://github.com/scverse/scanpy/tree/1.10.2/src/scanpy/sim_models/krumsiek11.txt:382,update,382,src/scanpy/sim_models/krumsiek11.txt,https://scanpy.readthedocs.io,https://github.com/scverse/scanpy/tree/1.10.2/src/scanpy/sim_models/krumsiek11.txt,1,['update'],['update'],"The capability of software to be deployed into an operational environment with predictable time and effort, including options for rollback if needed. Key aspects include automation, deployment speed, and deployment granularity.","
You are an expert in evaluating and categorizing quality attributes in software engineering. You possess the necessary skills to distinguish sentences that clearly relate to a given quality attribute from those that do not. 

Evaluate whether the content accurately aligns with its associated quality attribute, given the context provided. Your goal is to determine if the content makes sense in relation to the quality attribute description or if it is a false positive.

Data:

Quality Attribute: Deployability
Attribute Description: The capability of software to be deployed into an operational environment with predictable time and effort, including options for rollback if needed. Key aspects include automation, deployment speed, and deployment granularity.
Content: # See Table 1 in Krumsiek et al. (2011), p. 3 or; # Table 1, in Suppl. Mat. of Moignard et al. (2015), p. 28.; #; # For each ""variable = "", there must be a right hand side:; # either an empty string or a python-style logical expression; # involving variable names, ""or"", ""and"", ""("", "")"".; # The order of equations matters!; #; # modelType = hill; # invTimeStep = 0.02; #; # boolean update rules:; Gata2 = Gata2 and not (Gata1 and Fog1) and not Pu.1; Gata1 = (Gata1 or Gata2 or Fli1) and not Pu.1; Fog1 = Gata1; EKLF = Gata1 and not Fli1; Fli1 = Gata1 and not EKLF; SCL = Gata1 and not Pu.1; Cebpa = Cebpa and not (Gata1 and Fog1 and SCL); Pu.1 = (Cebpa or Pu.1) and not (Gata1 or Gata2); cJun = Pu.1 and not Gfi1; EgrNab = (Pu.1 and cJun) and not Gfi1; Gfi1 = Cebpa and not EgrNab; # coupling list:; Gata2 Gata2 1.0; Gata2 Gata1 -0.1; Gata2 Fog1 -1.0; Gata2 Pu.1 -1.15; Gata1 Gata2 1.0; Gata1 Gata1 0.1; Gata1 Fli1 1.0; Gata1 Pu.1 -1.21; Fog1 Gata1 0.1; EKLF Gata1 0.2; EKLF Fli1 -1.0; Fli1 Gata1 0.2; Fli1 EKLF -1.0; SCL Gata1 1.0; SCL Pu.1 -1.0; Cebpa Gata1 -1.0; Cebpa Fog1 -1.0; Cebpa SCL -1.0; Cebpa Cebpa 10.0; Pu.1 Gata2 -1.0; Pu.1 Gata1 -1.0; Pu.1 Cebpa 10.0; Pu.1 Pu.1 10.0; cJun Pu.1 1.0; cJun Gfi1 -1.0; EgrNab Pu.1 1.0; EgrNab cJun 1.0; EgrNab Gfi1 -1.3; Gfi1 Cebpa 1.0; Gfi1 EgrNab -5.0; 

Instructions: 
1. Analyze the content and the attribute description.
2. Determine if the content accurately reflects the intended quality attribute in this context.
3. If it does, label it as `true_positive: true`; if not, mark it as a `true_positive: false`.
4. If the content consists only of logs with no other text, mark it as a `true_positive: false`. 
4. If the content partially consists of logs, focus on analyzing remaining text. 
5. Add `reasoning` why the content is a true or false positive.
",False,"The content provided is a series of logical equations and variables used to model gene regulatory networks. While it's detailed, there's no mention of deployment processes, automation, or other aspects related to deployability. The focus is on biological systems rather than software deployment."
Deployability,"# Tutorials. :::{seealso}; For more tutorials featureing scanpy and other [scverse](https://scverse.org) ecosystem tools, check out the curated set of tutorials at [scverse.org/learn](https://scverse.org/learn); :::. ## Basic workflows. ```{toctree}; :maxdepth: 2. basics/index; ```. ## Visualization. ```{toctree}; :maxdepth: 2. plotting/index; ```. ## Trajectory inference. ```{seealso}; For more powerful tools for analysing single cell dynamics, check out the Scverse ecosystem packages:. * [CellRank](https://cellrank.readthedocs.io); * [Dynamo](https://dynamo-release.readthedocs.io/en/latest/); ```. ```{toctree}; :maxdepth: 2. trajectories/index; ```. ## Spatial data. ```{seealso}; For more up-to-date tutorials on working with spatial data, see:. * [SquidPy tutorials](https://squidpy.readthedocs.io/en/stable/notebooks/tutorials/index.html); * [SpatialData tutorials](https://spatialdata.scverse.org/en/latest/tutorials/notebooks/notebooks.html); * [Scverse ecosystem spatial tutorials](https://scverse.org/learn/); ```. ```{toctree}; :maxdepth: 2. spatial/index; ```. ## Experimental. ```{toctree}; :maxdepth: 2. experimental/index; ```. ## Older tutorials. A number of older tutorials can be found at:. * The [`scanpy_usage`](https://github.com/scverse/scanpy_usage) repository; ",release,MatchSource.DOCS,scverse,scanpy,1.10.2,https://github.com/scverse/scanpy/tree/1.10.2/docs/tutorials/index.md:566,release,566,docs/tutorials/index.md,https://scanpy.readthedocs.io,https://github.com/scverse/scanpy/tree/1.10.2/docs/tutorials/index.md,1,['release'],['release'],"The capability of software to be deployed into an operational environment with predictable time and effort, including options for rollback if needed. Key aspects include automation, deployment speed, and deployment granularity.","
You are an expert in evaluating and categorizing quality attributes in software engineering. You possess the necessary skills to distinguish sentences that clearly relate to a given quality attribute from those that do not. 

Evaluate whether the content accurately aligns with its associated quality attribute, given the context provided. Your goal is to determine if the content makes sense in relation to the quality attribute description or if it is a false positive.

Data:

Quality Attribute: Deployability
Attribute Description: The capability of software to be deployed into an operational environment with predictable time and effort, including options for rollback if needed. Key aspects include automation, deployment speed, and deployment granularity.
Content: # Tutorials. :::{seealso}; For more tutorials featureing scanpy and other [scverse](https://scverse.org) ecosystem tools, check out the curated set of tutorials at [scverse.org/learn](https://scverse.org/learn); :::. ## Basic workflows. ```{toctree}; :maxdepth: 2. basics/index; ```. ## Visualization. ```{toctree}; :maxdepth: 2. plotting/index; ```. ## Trajectory inference. ```{seealso}; For more powerful tools for analysing single cell dynamics, check out the Scverse ecosystem packages:. * [CellRank](https://cellrank.readthedocs.io); * [Dynamo](https://dynamo-release.readthedocs.io/en/latest/); ```. ```{toctree}; :maxdepth: 2. trajectories/index; ```. ## Spatial data. ```{seealso}; For more up-to-date tutorials on working with spatial data, see:. * [SquidPy tutorials](https://squidpy.readthedocs.io/en/stable/notebooks/tutorials/index.html); * [SpatialData tutorials](https://spatialdata.scverse.org/en/latest/tutorials/notebooks/notebooks.html); * [Scverse ecosystem spatial tutorials](https://scverse.org/learn/); ```. ```{toctree}; :maxdepth: 2. spatial/index; ```. ## Experimental. ```{toctree}; :maxdepth: 2. experimental/index; ```. ## Older tutorials. A number of older tutorials can be found at:. * The [`scanpy_usage`](https://github.com/scverse/scanpy_usage) repository; 

Instructions: 
1. Analyze the content and the attribute description.
2. Determine if the content accurately reflects the intended quality attribute in this context.
3. If it does, label it as `true_positive: true`; if not, mark it as a `true_positive: false`.
4. If the content consists only of logs with no other text, mark it as a `true_positive: false`. 
4. If the content partially consists of logs, focus on analyzing remaining text. 
5. Add `reasoning` why the content is a true or false positive.
",False,"The content provided is a list of tutorials and links related to various tools and workflows in the Scverse ecosystem. It includes sections for basic workflows, visualization, trajectory inference, spatial data, experimental workflows, and older tutorials. The attribute Deployability refers to the ability to deploy software predictably and with automation, deployment speed, and deployment granularity. While the content discusses different functionalities of tools like scanpy and others, it does not directly relate to aspects such as deployment automation, speed, or rollbacks which are key aspects of deployability. Therefore, this content does not accurately align with the Deployability quality attribute."
Deployability,"# Usage Principles. Import Scanpy as:. ```; import scanpy as sc; ```. ## Workflow. The typical workflow consists of subsequent calls of data analysis tools; in `sc.tl`, e.g.:. ```; sc.tl.umap(adata, **tool_params) # embed a neighborhood graph of the data using UMAP; ```. where `adata` is an {class}`~anndata.AnnData` object.; Each of these calls adds annotation to an expression matrix *X*,; which stores *n_obs* observations (cells) of *n_vars* variables (genes).; For each tool, there typically is an associated plotting function in `sc.pl`:. ```; sc.pl.umap(adata, **plotting_params); ```. If you pass `show=False`, a {class}`~matplotlib.axes.Axes` instance is returned; and you have all of matplotlib's detailed configuration possibilities. To facilitate writing memory-efficient pipelines, by default,; Scanpy tools operate *inplace* on `adata` and return `None` –; this also allows to easily transition to [out-of-memory pipelines].; If you want to return a copy of the {class}`~anndata.AnnData` object; and leave the passed `adata` unchanged, pass `copy=True` or `inplace=False`. ## AnnData. Scanpy is based on {mod}`anndata`, which provides the {class}`~anndata.AnnData` class. ```{image} https://falexwolf.de/img/scanpy/anndata.svg; :width: 300px; ```. At the most basic level, an {class}`~anndata.AnnData` object `adata` stores; a data matrix `adata.X`, annotation of observations; `adata.obs` and variables `adata.var` as `pd.DataFrame` and unstructured; annotation `adata.uns` as `dict`. Names of observations and; variables can be accessed via `adata.obs_names` and `adata.var_names`,; respectively. {class}`~anndata.AnnData` objects can be sliced like; dataframes, for example, `adata_subset = adata[:, list_of_gene_names]`.; For more, see this [blog post]. To read a data file to an {class}`~anndata.AnnData` object, call:. ```; adata = sc.read(filename); ```. to initialize an {class}`~anndata.AnnData` object. Possibly add further annotation using, e.g., `pd.read_csv`:. ```; import ",configurat,MatchSource.DOCS,scverse,scanpy,1.10.2,https://github.com/scverse/scanpy/tree/1.10.2/docs/usage-principles.md:717,configuration,717,docs/usage-principles.md,https://scanpy.readthedocs.io,https://github.com/scverse/scanpy/tree/1.10.2/docs/usage-principles.md,3,"['configurat', 'pipeline']","['configuration', 'pipelines']","The capability of software to be deployed into an operational environment with predictable time and effort, including options for rollback if needed. Key aspects include automation, deployment speed, and deployment granularity.","
You are an expert in evaluating and categorizing quality attributes in software engineering. You possess the necessary skills to distinguish sentences that clearly relate to a given quality attribute from those that do not. 

Evaluate whether the content accurately aligns with its associated quality attribute, given the context provided. Your goal is to determine if the content makes sense in relation to the quality attribute description or if it is a false positive.

Data:

Quality Attribute: Deployability
Attribute Description: The capability of software to be deployed into an operational environment with predictable time and effort, including options for rollback if needed. Key aspects include automation, deployment speed, and deployment granularity.
Content: # Usage Principles. Import Scanpy as:. ```; import scanpy as sc; ```. ## Workflow. The typical workflow consists of subsequent calls of data analysis tools; in `sc.tl`, e.g.:. ```; sc.tl.umap(adata, **tool_params) # embed a neighborhood graph of the data using UMAP; ```. where `adata` is an {class}`~anndata.AnnData` object.; Each of these calls adds annotation to an expression matrix *X*,; which stores *n_obs* observations (cells) of *n_vars* variables (genes).; For each tool, there typically is an associated plotting function in `sc.pl`:. ```; sc.pl.umap(adata, **plotting_params); ```. If you pass `show=False`, a {class}`~matplotlib.axes.Axes` instance is returned; and you have all of matplotlib's detailed configuration possibilities. To facilitate writing memory-efficient pipelines, by default,; Scanpy tools operate *inplace* on `adata` and return `None` –; this also allows to easily transition to [out-of-memory pipelines].; If you want to return a copy of the {class}`~anndata.AnnData` object; and leave the passed `adata` unchanged, pass `copy=True` or `inplace=False`. ## AnnData. Scanpy is based on {mod}`anndata`, which provides the {class}`~anndata.AnnData` class. ```{image} https://falexwolf.de/img/scanpy/anndata.svg; :width: 300px; ```. At the most basic level, an {class}`~anndata.AnnData` object `adata` stores; a data matrix `adata.X`, annotation of observations; `adata.obs` and variables `adata.var` as `pd.DataFrame` and unstructured; annotation `adata.uns` as `dict`. Names of observations and; variables can be accessed via `adata.obs_names` and `adata.var_names`,; respectively. {class}`~anndata.AnnData` objects can be sliced like; dataframes, for example, `adata_subset = adata[:, list_of_gene_names]`.; For more, see this [blog post]. To read a data file to an {class}`~anndata.AnnData` object, call:. ```; adata = sc.read(filename); ```. to initialize an {class}`~anndata.AnnData` object. Possibly add further annotation using, e.g., `pd.read_csv`:. ```; import 

Instructions: 
1. Analyze the content and the attribute description.
2. Determine if the content accurately reflects the intended quality attribute in this context.
3. If it does, label it as `true_positive: true`; if not, mark it as a `true_positive: false`.
4. If the content consists only of logs with no other text, mark it as a `true_positive: false`. 
4. If the content partially consists of logs, focus on analyzing remaining text. 
5. Add `reasoning` why the content is a true or false positive.
",False,"The provided content discusses the use of Scanpy for data analysis and deployment practices, such as in-place operations and returning copies. However, Deployability focuses on how software can be deployed into an operational environment with predictable time and effort, including rollbacks. The given content does not mention anything about deployment, rollbacks, automation options, or deployment speed. Instead, it details the usage of Scanpy tools for data processing and manipulation. Therefore, this content does not accurately reflect Deployability and is a false positive."
Deployability,"# Versioning. ```{note}; We are currently experimenting with our development practices.; These are currently documented on a best effort basis, but may not be completely accurate.; ```. ## Semantic versioning. We try to follow [semantic versioning](https://semver.org) with our versioning scheme.; This scheme breaks down a version number into `{major.minor.point}` sections.; At a `point` release, there should be no changes beyond bug fixes.; `minor` releases can include new features.; `major` releases can break old APIs. ### Version numbers. Valid version numbers are described in [PEP 440](https://peps.python.org/pep-0440/). [Pre-releases](https://peps.python.org/pep-0440/#pre-releases); : should have versions like `1.7.0rc1` or `1.7.0rc2`.; [Development versions](https://peps.python.org/pep-0440/#developmental-releases); : should look like `1.8.0.dev0`, with a commit hash optionally appended as a local version identifier (e.g. `1.8.0.dev2+g00ad77b`). ## Tooling. To be sure we can follow this scheme and maintain some agility in development, we use some tooling and development practices.; When a minor release is made, a release branch should be cut and pushed to the main repo (e.g. `1.7.x` for the `1.7` release series). For PRs which fix an bug in the most recent minor release, the changes will need to added to both the development and release branches.; To accomplish this, PRs which fix bugs must be labelled as such.; After approval, a developer will notify the [meeseeks bot](https://meeseeksbox.github.io) to open a backport PR onto the release branch via a comment saying:. > @Meeseeksdev backport \<branch>. Where ""\<branch>"" is the most recent release branch. The bot will attempt to make a backport and open a PR.; This will sometimes require manual intervention due to merge conflicts or test failures.; ",release,MatchSource.DOCS,scverse,scanpy,1.10.2,https://github.com/scverse/scanpy/tree/1.10.2/docs/dev/versioning.md:390,release,390,docs/dev/versioning.md,https://scanpy.readthedocs.io,https://github.com/scverse/scanpy/tree/1.10.2/docs/dev/versioning.md,13,['release'],"['release', 'releases']","The capability of software to be deployed into an operational environment with predictable time and effort, including options for rollback if needed. Key aspects include automation, deployment speed, and deployment granularity.","
You are an expert in evaluating and categorizing quality attributes in software engineering. You possess the necessary skills to distinguish sentences that clearly relate to a given quality attribute from those that do not. 

Evaluate whether the content accurately aligns with its associated quality attribute, given the context provided. Your goal is to determine if the content makes sense in relation to the quality attribute description or if it is a false positive.

Data:

Quality Attribute: Deployability
Attribute Description: The capability of software to be deployed into an operational environment with predictable time and effort, including options for rollback if needed. Key aspects include automation, deployment speed, and deployment granularity.
Content: # Versioning. ```{note}; We are currently experimenting with our development practices.; These are currently documented on a best effort basis, but may not be completely accurate.; ```. ## Semantic versioning. We try to follow [semantic versioning](https://semver.org) with our versioning scheme.; This scheme breaks down a version number into `{major.minor.point}` sections.; At a `point` release, there should be no changes beyond bug fixes.; `minor` releases can include new features.; `major` releases can break old APIs. ### Version numbers. Valid version numbers are described in [PEP 440](https://peps.python.org/pep-0440/). [Pre-releases](https://peps.python.org/pep-0440/#pre-releases); : should have versions like `1.7.0rc1` or `1.7.0rc2`.; [Development versions](https://peps.python.org/pep-0440/#developmental-releases); : should look like `1.8.0.dev0`, with a commit hash optionally appended as a local version identifier (e.g. `1.8.0.dev2+g00ad77b`). ## Tooling. To be sure we can follow this scheme and maintain some agility in development, we use some tooling and development practices.; When a minor release is made, a release branch should be cut and pushed to the main repo (e.g. `1.7.x` for the `1.7` release series). For PRs which fix an bug in the most recent minor release, the changes will need to added to both the development and release branches.; To accomplish this, PRs which fix bugs must be labelled as such.; After approval, a developer will notify the [meeseeks bot](https://meeseeksbox.github.io) to open a backport PR onto the release branch via a comment saying:. > @Meeseeksdev backport \<branch>. Where ""\<branch>"" is the most recent release branch. The bot will attempt to make a backport and open a PR.; This will sometimes require manual intervention due to merge conflicts or test failures.; 

Instructions: 
1. Analyze the content and the attribute description.
2. Determine if the content accurately reflects the intended quality attribute in this context.
3. If it does, label it as `true_positive: true`; if not, mark it as a `true_positive: false`.
4. If the content consists only of logs with no other text, mark it as a `true_positive: false`. 
4. If the content partially consists of logs, focus on analyzing remaining text. 
5. Add `reasoning` why the content is a true or false positive.
",False,"The provided content discusses version control practices such as semantic versioning and the use of tooling for deployment. However, deployability primarily concerns how software is deployed into an operational environment, including aspects like automation, speed, and rollback options. The given text focuses more on versioning and release management rather than deployment itself. While deployment might be indirectly related through versioning (e.g., how versions are rolled out), the content does not directly address deployability as defined by the attribute. Therefore, it is a false positive."
Deployability,"## After making a release. After *any* release has been made:. - Create a new release notes file for the next bugfix release.; This should be included in both dev and stable branches.; - Create a milestone for the next release (in case you made a bugfix release) or releases (in case of a major/minor release).; For bugfix releases, this should have `on-merge: backport to 0.<minor>.x`,; so the [meeseeksdev][] bot will create a backport PR. See {doc}`versioning` for more info.; - Clear out and close the milestone you just made a release for. After a *major* or *minor* release has been made:. - Tweet about it! Announce it on Zulip! Announce it on Discourse! Think about making a bot for this! Maybe actually do that?; - Create a new release notes file for the next minor release. This should only be added to the dev branch.; - Tag the development branch. If you just released `1.7.0`, this would be `1.8.0.dev0`.; - Create a new branch for this release series, like `1.7.x`. This should get a new release notes file. [meeseeksdev]: https://meeseeksbox.github.io. ## Debugging the build process. If you changed something about the build process (e.g. [Hatchling’s build configuration][hatch-build]),; or something about the package’s structure,; you might want to manually check if the build and upload process behaves as expected:. ```shell; # Clear out old distributions; rm -r dist. # Build source distribution and wheel both; python -m build. # Now check those build artifacts; twine check dist/*. # List the wheel archive’s contents; bsdtar -tf dist/*.whl. ```. You can also upload the package to <test.pypi.org> ([tutorial][testpypi tutorial]). [testpypi tutorial]: https://packaging.python.org/en/latest/tutorials/packaging-projects/#uploading-the-distribution-archives. ```; twine upload --repository testpypi dist/*; ```. The above approximates what the [publish workflow][] does automatically for us.; If you want to replicate the process more exactly, make sure you are careful,; and c",release,MatchSource.DOCS,scverse,scanpy,1.10.2,https://github.com/scverse/scanpy/tree/1.10.2/docs/dev/release.md:1622,release,1622,docs/dev/release.md,https://scanpy.readthedocs.io,https://github.com/scverse/scanpy/tree/1.10.2/docs/dev/release.md,1,['release'],['release'],"The capability of software to be deployed into an operational environment with predictable time and effort, including options for rollback if needed. Key aspects include automation, deployment speed, and deployment granularity.","
You are an expert in evaluating and categorizing quality attributes in software engineering. You possess the necessary skills to distinguish sentences that clearly relate to a given quality attribute from those that do not. 

Evaluate whether the content accurately aligns with its associated quality attribute, given the context provided. Your goal is to determine if the content makes sense in relation to the quality attribute description or if it is a false positive.

Data:

Quality Attribute: Deployability
Attribute Description: The capability of software to be deployed into an operational environment with predictable time and effort, including options for rollback if needed. Key aspects include automation, deployment speed, and deployment granularity.
Content: ## After making a release. After *any* release has been made:. - Create a new release notes file for the next bugfix release.; This should be included in both dev and stable branches.; - Create a milestone for the next release (in case you made a bugfix release) or releases (in case of a major/minor release).; For bugfix releases, this should have `on-merge: backport to 0.<minor>.x`,; so the [meeseeksdev][] bot will create a backport PR. See {doc}`versioning` for more info.; - Clear out and close the milestone you just made a release for. After a *major* or *minor* release has been made:. - Tweet about it! Announce it on Zulip! Announce it on Discourse! Think about making a bot for this! Maybe actually do that?; - Create a new release notes file for the next minor release. This should only be added to the dev branch.; - Tag the development branch. If you just released `1.7.0`, this would be `1.8.0.dev0`.; - Create a new branch for this release series, like `1.7.x`. This should get a new release notes file. [meeseeksdev]: https://meeseeksbox.github.io. ## Debugging the build process. If you changed something about the build process (e.g. [Hatchling’s build configuration][hatch-build]),; or something about the package’s structure,; you might want to manually check if the build and upload process behaves as expected:. ```shell; # Clear out old distributions; rm -r dist. # Build source distribution and wheel both; python -m build. # Now check those build artifacts; twine check dist/*. # List the wheel archive’s contents; bsdtar -tf dist/*.whl. ```. You can also upload the package to <test.pypi.org> ([tutorial][testpypi tutorial]). [testpypi tutorial]: https://packaging.python.org/en/latest/tutorials/packaging-projects/#uploading-the-distribution-archives. ```; twine upload --repository testpypi dist/*; ```. The above approximates what the [publish workflow][] does automatically for us.; If you want to replicate the process more exactly, make sure you are careful,; and c

Instructions: 
1. Analyze the content and the attribute description.
2. Determine if the content accurately reflects the intended quality attribute in this context.
3. If it does, label it as `true_positive: true`; if not, mark it as a `true_positive: false`.
4. If the content consists only of logs with no other text, mark it as a `true_positive: false`. 
4. If the content partially consists of logs, focus on analyzing remaining text. 
5. Add `reasoning` why the content is a true or false positive.
",True,"The content discusses release processes, including creating release notes, tagging releases, and announcing them. This directly relates to deployability as it involves preparing for deployment and managing releases effectively."
Deployability,## Datasets. ```{eval-rst}; .. module:: scanpy.datasets; ```. ```{eval-rst}; .. currentmodule:: scanpy; ```. ```{eval-rst}; .. autosummary::; :nosignatures:; :toctree: ../generated/. datasets.blobs; datasets.ebi_expression_atlas; datasets.krumsiek11; datasets.moignard15; datasets.pbmc3k; datasets.pbmc3k_processed; datasets.pbmc68k_reduced; datasets.paul15; datasets.toggleswitch; datasets.visium_sge. ```; ,toggle,MatchSource.DOCS,scverse,scanpy,1.10.2,https://github.com/scverse/scanpy/tree/1.10.2/docs/api/datasets.md:368,toggleswitch,368,docs/api/datasets.md,https://scanpy.readthedocs.io,https://github.com/scverse/scanpy/tree/1.10.2/docs/api/datasets.md,1,['toggle'],['toggleswitch'],"The capability of software to be deployed into an operational environment with predictable time and effort, including options for rollback if needed. Key aspects include automation, deployment speed, and deployment granularity.","
You are an expert in evaluating and categorizing quality attributes in software engineering. You possess the necessary skills to distinguish sentences that clearly relate to a given quality attribute from those that do not. 

Evaluate whether the content accurately aligns with its associated quality attribute, given the context provided. Your goal is to determine if the content makes sense in relation to the quality attribute description or if it is a false positive.

Data:

Quality Attribute: Deployability
Attribute Description: The capability of software to be deployed into an operational environment with predictable time and effort, including options for rollback if needed. Key aspects include automation, deployment speed, and deployment granularity.
Content: ## Datasets. ```{eval-rst}; .. module:: scanpy.datasets; ```. ```{eval-rst}; .. currentmodule:: scanpy; ```. ```{eval-rst}; .. autosummary::; :nosignatures:; :toctree: ../generated/. datasets.blobs; datasets.ebi_expression_atlas; datasets.krumsiek11; datasets.moignard15; datasets.pbmc3k; datasets.pbmc3k_processed; datasets.pbmc68k_reduced; datasets.paul15; datasets.toggleswitch; datasets.visium_sge. ```; 

Instructions: 
1. Analyze the content and the attribute description.
2. Determine if the content accurately reflects the intended quality attribute in this context.
3. If it does, label it as `true_positive: true`; if not, mark it as a `true_positive: false`.
4. If the content consists only of logs with no other text, mark it as a `true_positive: false`. 
4. If the content partially consists of logs, focus on analyzing remaining text. 
5. Add `reasoning` why the content is a true or false positive.
",False,"The content lists various datasets related to scapy, which is about network packets analysis. However, Deployability refers to software deployment aspects like automation, speed, and rollback options. Since this content discusses data availability rather than deployment capabilities, it does not align with the Deployability quality attribute."
Deployability,"## Plotting: `pl`. ```{eval-rst}; .. module:: scanpy.pl; ```. ```{eval-rst}; .. currentmodule:: scanpy; ```. The plotting module {mod}`scanpy.pl` largely parallels the `tl.*` and a few of the `pp.*` functions.; For most tools and for some preprocessing functions, you'll find a plotting function with the same name. See {doc}`/tutorials/plotting/core` for an overview of how to use these functions. ```{note}; See the {ref}`settings` section for all important plotting configurations.; ```. (pl-generic)=. ### Generic. ```{eval-rst}; .. autosummary::; :nosignatures:; :toctree: ../generated/. pl.scatter; pl.heatmap; pl.dotplot; pl.tracksplot; pl.violin; pl.stacked_violin; pl.matrixplot; pl.clustermap; pl.ranking; pl.dendrogram. ```. ### Classes. These classes allow fine tuning of visual parameters. ```{eval-rst}; .. autosummary::; :nosignatures:; :toctree: generated/classes. pl.DotPlot; pl.MatrixPlot; pl.StackedViolin. ```. ### Preprocessing. Methods for visualizing quality control and results of preprocessing functions. ```{eval-rst}; .. autosummary::; :nosignatures:; :toctree: generated/. pl.highest_expr_genes; pl.filter_genes_dispersion; pl.highly_variable_genes; pl.scrublet_score_distribution. ```. ### Tools. Methods that extract and visualize tool-specific annotation in an; {class}`~anndata.AnnData` object. For any method in module `tl`, there is; a method with the same name in `pl`. #### PCA. ```{eval-rst}; .. autosummary::; :nosignatures:; :toctree: generated/. pl.pca; pl.pca_loadings; pl.pca_variance_ratio; pl.pca_overview; ```. #### Embeddings. ```{eval-rst}; .. autosummary::; :nosignatures:; :toctree: generated/. pl.tsne; pl.umap; pl.diffmap; pl.draw_graph; pl.spatial; pl.embedding; ```. Compute densities on embeddings. ```{eval-rst}; .. autosummary::; :nosignatures:; :toctree: generated/. pl.embedding_density; ```. #### Branching trajectories and pseudotime, clustering. Visualize clusters using one of the embedding methods passing `color='louvain'`. ```{eval-rst}",configurat,MatchSource.DOCS,scverse,scanpy,1.10.2,https://github.com/scverse/scanpy/tree/1.10.2/docs/api/plotting.md:469,configurations,469,docs/api/plotting.md,https://scanpy.readthedocs.io,https://github.com/scverse/scanpy/tree/1.10.2/docs/api/plotting.md,1,['configurat'],['configurations'],"The capability of software to be deployed into an operational environment with predictable time and effort, including options for rollback if needed. Key aspects include automation, deployment speed, and deployment granularity.","
You are an expert in evaluating and categorizing quality attributes in software engineering. You possess the necessary skills to distinguish sentences that clearly relate to a given quality attribute from those that do not. 

Evaluate whether the content accurately aligns with its associated quality attribute, given the context provided. Your goal is to determine if the content makes sense in relation to the quality attribute description or if it is a false positive.

Data:

Quality Attribute: Deployability
Attribute Description: The capability of software to be deployed into an operational environment with predictable time and effort, including options for rollback if needed. Key aspects include automation, deployment speed, and deployment granularity.
Content: ## Plotting: `pl`. ```{eval-rst}; .. module:: scanpy.pl; ```. ```{eval-rst}; .. currentmodule:: scanpy; ```. The plotting module {mod}`scanpy.pl` largely parallels the `tl.*` and a few of the `pp.*` functions.; For most tools and for some preprocessing functions, you'll find a plotting function with the same name. See {doc}`/tutorials/plotting/core` for an overview of how to use these functions. ```{note}; See the {ref}`settings` section for all important plotting configurations.; ```. (pl-generic)=. ### Generic. ```{eval-rst}; .. autosummary::; :nosignatures:; :toctree: ../generated/. pl.scatter; pl.heatmap; pl.dotplot; pl.tracksplot; pl.violin; pl.stacked_violin; pl.matrixplot; pl.clustermap; pl.ranking; pl.dendrogram. ```. ### Classes. These classes allow fine tuning of visual parameters. ```{eval-rst}; .. autosummary::; :nosignatures:; :toctree: generated/classes. pl.DotPlot; pl.MatrixPlot; pl.StackedViolin. ```. ### Preprocessing. Methods for visualizing quality control and results of preprocessing functions. ```{eval-rst}; .. autosummary::; :nosignatures:; :toctree: generated/. pl.highest_expr_genes; pl.filter_genes_dispersion; pl.highly_variable_genes; pl.scrublet_score_distribution. ```. ### Tools. Methods that extract and visualize tool-specific annotation in an; {class}`~anndata.AnnData` object. For any method in module `tl`, there is; a method with the same name in `pl`. #### PCA. ```{eval-rst}; .. autosummary::; :nosignatures:; :toctree: generated/. pl.pca; pl.pca_loadings; pl.pca_variance_ratio; pl.pca_overview; ```. #### Embeddings. ```{eval-rst}; .. autosummary::; :nosignatures:; :toctree: generated/. pl.tsne; pl.umap; pl.diffmap; pl.draw_graph; pl.spatial; pl.embedding; ```. Compute densities on embeddings. ```{eval-rst}; .. autosummary::; :nosignatures:; :toctree: generated/. pl.embedding_density; ```. #### Branching trajectories and pseudotime, clustering. Visualize clusters using one of the embedding methods passing `color='louvain'`. ```{eval-rst}

Instructions: 
1. Analyze the content and the attribute description.
2. Determine if the content accurately reflects the intended quality attribute in this context.
3. If it does, label it as `true_positive: true`; if not, mark it as a `true_positive: false`.
4. If the content consists only of logs with no other text, mark it as a `true_positive: false`. 
4. If the content partially consists of logs, focus on analyzing remaining text. 
5. Add `reasoning` why the content is a true or false positive.
",False,"The provided content discusses various plotting functions and visualization tools in a software module called 'scanpy.pl'. The description focuses on how these plotting functions allow users to create visualizations for different aspects of their data, such as scatter plots, heatmaps, dot plots, and others. It also mentions that each tool in the 'tl.*' module has a corresponding function in 'pl', making the visualization process more streamlined. Additionally, there are methods for preprocessing and analyzing quality control results. The content does not mention anything about deployment, automation, rollback options, or deployment speed. Instead, it's focused on data visualization functionalities. Therefore, this content does not align with the Deployability attribute, which is about software deployment capabilities. As such, it should be marked as a false positive."
Deployability,## Preprocessing: PP. ```{eval-rst}; .. module:: scanpy.external.pp; .. currentmodule:: scanpy.external; ```. ### Data integration. ```{eval-rst}; .. autosummary::; :toctree: ../generated/. pp.bbknn; pp.harmony_integrate; pp.mnn_correct; pp.scanorama_integrate. ```. ### Sample demultiplexing. ```{eval-rst}; .. autosummary::; :toctree: ../generated/. pp.hashsolo; ```. ### Imputation. Note that the fundamental limitations of imputation are still under [debate](https://github.com/scverse/scanpy/issues/189). ```{eval-rst}; .. autosummary::; :toctree: ../generated/. pp.dca; pp.magic. ```; ,integrat,MatchSource.DOCS,scverse,scanpy,1.10.2,https://github.com/scverse/scanpy/tree/1.10.2/docs/external/preprocessing.md:119,integration,119,docs/external/preprocessing.md,https://scanpy.readthedocs.io,https://github.com/scverse/scanpy/tree/1.10.2/docs/external/preprocessing.md,1,['integrat'],['integration'],"The capability of software to be deployed into an operational environment with predictable time and effort, including options for rollback if needed. Key aspects include automation, deployment speed, and deployment granularity.","
You are an expert in evaluating and categorizing quality attributes in software engineering. You possess the necessary skills to distinguish sentences that clearly relate to a given quality attribute from those that do not. 

Evaluate whether the content accurately aligns with its associated quality attribute, given the context provided. Your goal is to determine if the content makes sense in relation to the quality attribute description or if it is a false positive.

Data:

Quality Attribute: Deployability
Attribute Description: The capability of software to be deployed into an operational environment with predictable time and effort, including options for rollback if needed. Key aspects include automation, deployment speed, and deployment granularity.
Content: ## Preprocessing: PP. ```{eval-rst}; .. module:: scanpy.external.pp; .. currentmodule:: scanpy.external; ```. ### Data integration. ```{eval-rst}; .. autosummary::; :toctree: ../generated/. pp.bbknn; pp.harmony_integrate; pp.mnn_correct; pp.scanorama_integrate. ```. ### Sample demultiplexing. ```{eval-rst}; .. autosummary::; :toctree: ../generated/. pp.hashsolo; ```. ### Imputation. Note that the fundamental limitations of imputation are still under [debate](https://github.com/scverse/scanpy/issues/189). ```{eval-rst}; .. autosummary::; :toctree: ../generated/. pp.dca; pp.magic. ```; 

Instructions: 
1. Analyze the content and the attribute description.
2. Determine if the content accurately reflects the intended quality attribute in this context.
3. If it does, label it as `true_positive: true`; if not, mark it as a `true_positive: false`.
4. If the content consists only of logs with no other text, mark it as a `true_positive: false`. 
4. If the content partially consists of logs, focus on analyzing remaining text. 
5. Add `reasoning` why the content is a true or false positive.
",True,"The content provided describes preprocessing steps including data integration, sample demultiplexing, and imputation methods in scanpy.external.pp. While deployment aspects are not explicitly discussed here, these preprocessing steps contribute to the overall deployability by ensuring proper data handling and integration prior to deployment. The mention of limitations under debate might imply that careful consideration is needed for deployment strategies. Thus, this content indirectly relates to deployability."
Deployability,"## Preprocessing: `pp`. ```{eval-rst}; .. module:: scanpy.pp; ```. ```{eval-rst}; .. currentmodule:: scanpy; ```. Filtering of highly-variable genes, batch-effect correction, per-cell normalization, preprocessing recipes. Any transformation of the data matrix that is not a *tool*. Other than *tools*, preprocessing steps usually don't return an easily interpretable annotation, but perform a basic transformation on the data matrix. ### Basic Preprocessing. For visual quality control, see {func}`~scanpy.pl.highest_expr_genes` and; {func}`~scanpy.pl.filter_genes_dispersion` in {mod}`scanpy.pl`. ```{eval-rst}; .. autosummary::; :nosignatures:; :toctree: ../generated/. pp.calculate_qc_metrics; pp.filter_cells; pp.filter_genes; pp.highly_variable_genes; pp.log1p; pp.pca; pp.normalize_total; pp.regress_out; pp.scale; pp.subsample; pp.downsample_counts; ```. ### Recipes. ```{eval-rst}; .. autosummary::; :nosignatures:; :toctree: generated/. pp.recipe_zheng17; pp.recipe_weinreb17; pp.recipe_seurat; ```. ### Batch effect correction. Also see [Data integration]. Note that a simple batch correction method is available via {func}`pp.regress_out`. Checkout {mod}`scanpy.external` for more. ```{eval-rst}; .. autosummary::; :nosignatures:; :toctree: generated/. pp.combat; ```. ### Doublet detection. ```{eval-rst}; .. autosummary::; :nosignatures:; :toctree: generated/. pp.scrublet; pp.scrublet_simulate_doublets; ```. ### Neighbors. ```{eval-rst}; .. autosummary::; :nosignatures:; :toctree: generated/. pp.neighbors. ```; ",integrat,MatchSource.DOCS,scverse,scanpy,1.10.2,https://github.com/scverse/scanpy/tree/1.10.2/docs/api/preprocessing.md:1053,integration,1053,docs/api/preprocessing.md,https://scanpy.readthedocs.io,https://github.com/scverse/scanpy/tree/1.10.2/docs/api/preprocessing.md,1,['integrat'],['integration'],"The capability of software to be deployed into an operational environment with predictable time and effort, including options for rollback if needed. Key aspects include automation, deployment speed, and deployment granularity.","
You are an expert in evaluating and categorizing quality attributes in software engineering. You possess the necessary skills to distinguish sentences that clearly relate to a given quality attribute from those that do not. 

Evaluate whether the content accurately aligns with its associated quality attribute, given the context provided. Your goal is to determine if the content makes sense in relation to the quality attribute description or if it is a false positive.

Data:

Quality Attribute: Deployability
Attribute Description: The capability of software to be deployed into an operational environment with predictable time and effort, including options for rollback if needed. Key aspects include automation, deployment speed, and deployment granularity.
Content: ## Preprocessing: `pp`. ```{eval-rst}; .. module:: scanpy.pp; ```. ```{eval-rst}; .. currentmodule:: scanpy; ```. Filtering of highly-variable genes, batch-effect correction, per-cell normalization, preprocessing recipes. Any transformation of the data matrix that is not a *tool*. Other than *tools*, preprocessing steps usually don't return an easily interpretable annotation, but perform a basic transformation on the data matrix. ### Basic Preprocessing. For visual quality control, see {func}`~scanpy.pl.highest_expr_genes` and; {func}`~scanpy.pl.filter_genes_dispersion` in {mod}`scanpy.pl`. ```{eval-rst}; .. autosummary::; :nosignatures:; :toctree: ../generated/. pp.calculate_qc_metrics; pp.filter_cells; pp.filter_genes; pp.highly_variable_genes; pp.log1p; pp.pca; pp.normalize_total; pp.regress_out; pp.scale; pp.subsample; pp.downsample_counts; ```. ### Recipes. ```{eval-rst}; .. autosummary::; :nosignatures:; :toctree: generated/. pp.recipe_zheng17; pp.recipe_weinreb17; pp.recipe_seurat; ```. ### Batch effect correction. Also see [Data integration]. Note that a simple batch correction method is available via {func}`pp.regress_out`. Checkout {mod}`scanpy.external` for more. ```{eval-rst}; .. autosummary::; :nosignatures:; :toctree: generated/. pp.combat; ```. ### Doublet detection. ```{eval-rst}; .. autosummary::; :nosignatures:; :toctree: generated/. pp.scrublet; pp.scrublet_simulate_doublets; ```. ### Neighbors. ```{eval-rst}; .. autosummary::; :nosignatures:; :toctree: generated/. pp.neighbors. ```; 

Instructions: 
1. Analyze the content and the attribute description.
2. Determine if the content accurately reflects the intended quality attribute in this context.
3. If it does, label it as `true_positive: true`; if not, mark it as a `true_positive: false`.
4. If the content consists only of logs with no other text, mark it as a `true_positive: false`. 
4. If the content partially consists of logs, focus on analyzing remaining text. 
5. Add `reasoning` why the content is a true or false positive.
",False,"The content discusses data preprocessing steps such as filtering highly-variable genes and normalization. This is related to ensuring that the software can be deployed effectively by providing consistent data quality. However, it's more aligned with data quality rather than deployability in terms of deployment processes. Therefore, it might not directly relate to the Deployability quality attribute."
Deployability,## Spatial. ```{toctree}; :maxdepth: 1. basic-analysis; integration-scanorama; ```; ,integrat,MatchSource.DOCS,scverse,scanpy,1.10.2,https://github.com/scverse/scanpy/tree/1.10.2/docs/tutorials/spatial/index.md:56,integration-scanorama,56,docs/tutorials/spatial/index.md,https://scanpy.readthedocs.io,https://github.com/scverse/scanpy/tree/1.10.2/docs/tutorials/spatial/index.md,1,['integrat'],['integration-scanorama'],"The capability of software to be deployed into an operational environment with predictable time and effort, including options for rollback if needed. Key aspects include automation, deployment speed, and deployment granularity.","
You are an expert in evaluating and categorizing quality attributes in software engineering. You possess the necessary skills to distinguish sentences that clearly relate to a given quality attribute from those that do not. 

Evaluate whether the content accurately aligns with its associated quality attribute, given the context provided. Your goal is to determine if the content makes sense in relation to the quality attribute description or if it is a false positive.

Data:

Quality Attribute: Deployability
Attribute Description: The capability of software to be deployed into an operational environment with predictable time and effort, including options for rollback if needed. Key aspects include automation, deployment speed, and deployment granularity.
Content: ## Spatial. ```{toctree}; :maxdepth: 1. basic-analysis; integration-scanorama; ```; 

Instructions: 
1. Analyze the content and the attribute description.
2. Determine if the content accurately reflects the intended quality attribute in this context.
3. If it does, label it as `true_positive: true`; if not, mark it as a `true_positive: false`.
4. If the content consists only of logs with no other text, mark it as a `true_positive: false`. 
4. If the content partially consists of logs, focus on analyzing remaining text. 
5. Add `reasoning` why the content is a true or false positive.
",False,"The content provided appears to be a snippet from a file structure, possibly a Toctree with options like basic-analysis and integration-scanorama. These terms do not directly relate to deployability aspects such as automation, deployment speed, or deployment granularity. The mention of spatial could imply something related to geometry, which is unrelated to software deployment. Therefore, this content does not accurately reflect the Deployability quality attribute."
Deployability,"## Tools: `tl`. ```{eval-rst}; .. module:: scanpy.tl; ```. ```{eval-rst}; .. currentmodule:: scanpy; ```. Any transformation of the data matrix that is not *preprocessing*. In contrast to a *preprocessing* function, a *tool* usually adds an easily interpretable annotation to the data matrix, which can then be visualized with a corresponding plotting function. ### Embeddings. ```{eval-rst}; .. autosummary::; :nosignatures:; :toctree: ../generated/. pp.pca; tl.tsne; tl.umap; tl.draw_graph; tl.diffmap; ```. Compute densities on embeddings. ```{eval-rst}; .. autosummary::; :nosignatures:; :toctree: ../generated/. tl.embedding_density; ```. ### Clustering and trajectory inference. ```{eval-rst}; .. autosummary::; :nosignatures:; :toctree: ../generated/. tl.leiden; tl.louvain; tl.dendrogram; tl.dpt; tl.paga; ```. ### Data integration. ```{eval-rst}; .. autosummary::; :nosignatures:; :toctree: ../generated/. tl.ingest; ```. ### Marker genes. ```{eval-rst}; .. autosummary::; :nosignatures:; :toctree: ../generated/. tl.rank_genes_groups; tl.filter_rank_genes_groups; tl.marker_gene_overlap; ```. ### Gene scores, Cell cycle. ```{eval-rst}; .. autosummary::; :nosignatures:; :toctree: ../generated/. tl.score_genes; tl.score_genes_cell_cycle; ```. ### Simulations. ```{eval-rst}; .. autosummary::; :nosignatures:; :toctree: ../generated/. tl.sim. ```; ",integrat,MatchSource.DOCS,scverse,scanpy,1.10.2,https://github.com/scverse/scanpy/tree/1.10.2/docs/api/tools.md:828,integration,828,docs/api/tools.md,https://scanpy.readthedocs.io,https://github.com/scverse/scanpy/tree/1.10.2/docs/api/tools.md,1,['integrat'],['integration'],"The capability of software to be deployed into an operational environment with predictable time and effort, including options for rollback if needed. Key aspects include automation, deployment speed, and deployment granularity.","
You are an expert in evaluating and categorizing quality attributes in software engineering. You possess the necessary skills to distinguish sentences that clearly relate to a given quality attribute from those that do not. 

Evaluate whether the content accurately aligns with its associated quality attribute, given the context provided. Your goal is to determine if the content makes sense in relation to the quality attribute description or if it is a false positive.

Data:

Quality Attribute: Deployability
Attribute Description: The capability of software to be deployed into an operational environment with predictable time and effort, including options for rollback if needed. Key aspects include automation, deployment speed, and deployment granularity.
Content: ## Tools: `tl`. ```{eval-rst}; .. module:: scanpy.tl; ```. ```{eval-rst}; .. currentmodule:: scanpy; ```. Any transformation of the data matrix that is not *preprocessing*. In contrast to a *preprocessing* function, a *tool* usually adds an easily interpretable annotation to the data matrix, which can then be visualized with a corresponding plotting function. ### Embeddings. ```{eval-rst}; .. autosummary::; :nosignatures:; :toctree: ../generated/. pp.pca; tl.tsne; tl.umap; tl.draw_graph; tl.diffmap; ```. Compute densities on embeddings. ```{eval-rst}; .. autosummary::; :nosignatures:; :toctree: ../generated/. tl.embedding_density; ```. ### Clustering and trajectory inference. ```{eval-rst}; .. autosummary::; :nosignatures:; :toctree: ../generated/. tl.leiden; tl.louvain; tl.dendrogram; tl.dpt; tl.paga; ```. ### Data integration. ```{eval-rst}; .. autosummary::; :nosignatures:; :toctree: ../generated/. tl.ingest; ```. ### Marker genes. ```{eval-rst}; .. autosummary::; :nosignatures:; :toctree: ../generated/. tl.rank_genes_groups; tl.filter_rank_genes_groups; tl.marker_gene_overlap; ```. ### Gene scores, Cell cycle. ```{eval-rst}; .. autosummary::; :nosignatures:; :toctree: ../generated/. tl.score_genes; tl.score_genes_cell_cycle; ```. ### Simulations. ```{eval-rst}; .. autosummary::; :nosignatures:; :toctree: ../generated/. tl.sim. ```; 

Instructions: 
1. Analyze the content and the attribute description.
2. Determine if the content accurately reflects the intended quality attribute in this context.
3. If it does, label it as `true_positive: true`; if not, mark it as a `true_positive: false`.
4. If the content consists only of logs with no other text, mark it as a `true_positive: false`. 
4. If the content partially consists of logs, focus on analyzing remaining text. 
5. Add `reasoning` why the content is a true or false positive.
",False,"The content discusses various tools and functionalities in scanpy such as embeddings, clustering, data integration, marker genes, gene scores, and simulations. While deployability focuses on deployment aspects like automation and speed, this content pertains to data processing and analysis features. There's no mention of deployment processes or options for rollback, so it doesn't align with deployability."
Deployability,"### 0.2.9 {small}`2017-10-25`. ```{rubric} Initial release of the new trajectory inference method [PAGA](https://github.com/theislab/paga); ```. - {func}`~scanpy.tl.paga` computes an abstracted, coarse-grained (PAGA) graph of the neighborhood graph {smaller}`A Wolf`; - {func}`~scanpy.pl.paga_compare` plot this graph next an embedding {smaller}`A Wolf`; - {func}`~scanpy.pl.paga_path` plots a heatmap through a node sequence in the PAGA graph {smaller}`A Wolf`; ",release,MatchSource.DOCS,scverse,scanpy,1.10.2,https://github.com/scverse/scanpy/tree/1.10.2/docs/release-notes/0.2.9.md:51,release,51,docs/release-notes/0.2.9.md,https://scanpy.readthedocs.io,https://github.com/scverse/scanpy/tree/1.10.2/docs/release-notes/0.2.9.md,1,['release'],['release'],"The capability of software to be deployed into an operational environment with predictable time and effort, including options for rollback if needed. Key aspects include automation, deployment speed, and deployment granularity.","
You are an expert in evaluating and categorizing quality attributes in software engineering. You possess the necessary skills to distinguish sentences that clearly relate to a given quality attribute from those that do not. 

Evaluate whether the content accurately aligns with its associated quality attribute, given the context provided. Your goal is to determine if the content makes sense in relation to the quality attribute description or if it is a false positive.

Data:

Quality Attribute: Deployability
Attribute Description: The capability of software to be deployed into an operational environment with predictable time and effort, including options for rollback if needed. Key aspects include automation, deployment speed, and deployment granularity.
Content: ### 0.2.9 {small}`2017-10-25`. ```{rubric} Initial release of the new trajectory inference method [PAGA](https://github.com/theislab/paga); ```. - {func}`~scanpy.tl.paga` computes an abstracted, coarse-grained (PAGA) graph of the neighborhood graph {smaller}`A Wolf`; - {func}`~scanpy.pl.paga_compare` plot this graph next an embedding {smaller}`A Wolf`; - {func}`~scanpy.pl.paga_path` plots a heatmap through a node sequence in the PAGA graph {smaller}`A Wolf`; 

Instructions: 
1. Analyze the content and the attribute description.
2. Determine if the content accurately reflects the intended quality attribute in this context.
3. If it does, label it as `true_positive: true`; if not, mark it as a `true_positive: false`.
4. If the content consists only of logs with no other text, mark it as a `true_positive: false`. 
4. If the content partially consists of logs, focus on analyzing remaining text. 
5. Add `reasoning` why the content is a true or false positive.
",True,"The content discusses the release and deployment of a new method called PAGA. It mentions functions used to compute and plot the PAGA graph, which are part of an abstracted neighborhood graph. This indicates that there was a deployment process involved with automation aspects, as these functions automate the computation and visualization of the PAGA method. The reference to 'deployment granularity' could be related to how the PAGA method is implemented in scanpy, possibly allowing for modular or fine-grained deployment steps. Therefore, this content aligns well with deployability as it involves releasing a new method with automated deployment processes."
Deployability,"### 1.0.0 {small}`2018-03-30`. ```{rubric} Major updates; ```. - Scanpy is much faster and more memory efficient: preprocess, cluster and; visualize 1.3M cells in [6h], 130K cells in [14min], and 68K cells in [3min] {smaller}`A Wolf`; - the API gained a preprocessing function {func}`~scanpy.pp.neighbors` and a; class {func}`~scanpy.Neighbors` to which all basic graph computations are; delegated {smaller}`A Wolf`. ```{warning}; ```{rubric} Upgrading to 1.0 isn’t fully backwards compatible in the following changes; ```. - the graph-based tools {func}`~scanpy.tl.louvain`; {func}`~scanpy.tl.dpt` {func}`~scanpy.tl.draw_graph`; {func}`~scanpy.tl.umap` {func}`~scanpy.tl.diffmap`; {func}`~scanpy.tl.paga` require prior computation of the graph:; `sc.pp.neighbors(adata, n_neighbors=5); sc.tl.louvain(adata)` instead of; previously `sc.tl.louvain(adata, n_neighbors=5)`; - install `numba` via `conda install numba`, which replaces cython; - the default connectivity measure (dpt will look different using default; settings) changed. setting `method='gauss'` in `sc.pp.neighbors` uses; gauss kernel connectivities and reproduces the previous behavior,; see, for instance in the example [paul15].; - namings of returned annotation have changed for less bloated AnnData; objects, which means that some of the unstructured annotation of old; AnnData files is not recognized anymore; - replace occurances of `group_by` with `groupby` (consistency with; `pandas`); - it is worth checking out the notebook examples to see changes, e.g.; the [seurat] example.; - upgrading scikit-learn from 0.18 to 0.19 changed the implementation of PCA,; some results might therefore look slightly different; ```. ```{rubric} Further updates; ```. - UMAP {cite:p}`McInnes2018` can serve as a first visualization of the data just as tSNE,; in contrast to tSNE, UMAP directly embeds the single-cell graph and is faster;; UMAP is also used for measuring connectivities and computing neighbors,; see {func}`~scanpy.pp.neighbors`",update,MatchSource.DOCS,scverse,scanpy,1.10.2,https://github.com/scverse/scanpy/tree/1.10.2/docs/release-notes/1.0.0.md:49,updates,49,docs/release-notes/1.0.0.md,https://scanpy.readthedocs.io,https://github.com/scverse/scanpy/tree/1.10.2/docs/release-notes/1.0.0.md,3,"['install', 'update']","['install', 'updates']","The capability of software to be deployed into an operational environment with predictable time and effort, including options for rollback if needed. Key aspects include automation, deployment speed, and deployment granularity.","
You are an expert in evaluating and categorizing quality attributes in software engineering. You possess the necessary skills to distinguish sentences that clearly relate to a given quality attribute from those that do not. 

Evaluate whether the content accurately aligns with its associated quality attribute, given the context provided. Your goal is to determine if the content makes sense in relation to the quality attribute description or if it is a false positive.

Data:

Quality Attribute: Deployability
Attribute Description: The capability of software to be deployed into an operational environment with predictable time and effort, including options for rollback if needed. Key aspects include automation, deployment speed, and deployment granularity.
Content: ### 1.0.0 {small}`2018-03-30`. ```{rubric} Major updates; ```. - Scanpy is much faster and more memory efficient: preprocess, cluster and; visualize 1.3M cells in [6h], 130K cells in [14min], and 68K cells in [3min] {smaller}`A Wolf`; - the API gained a preprocessing function {func}`~scanpy.pp.neighbors` and a; class {func}`~scanpy.Neighbors` to which all basic graph computations are; delegated {smaller}`A Wolf`. ```{warning}; ```{rubric} Upgrading to 1.0 isn’t fully backwards compatible in the following changes; ```. - the graph-based tools {func}`~scanpy.tl.louvain`; {func}`~scanpy.tl.dpt` {func}`~scanpy.tl.draw_graph`; {func}`~scanpy.tl.umap` {func}`~scanpy.tl.diffmap`; {func}`~scanpy.tl.paga` require prior computation of the graph:; `sc.pp.neighbors(adata, n_neighbors=5); sc.tl.louvain(adata)` instead of; previously `sc.tl.louvain(adata, n_neighbors=5)`; - install `numba` via `conda install numba`, which replaces cython; - the default connectivity measure (dpt will look different using default; settings) changed. setting `method='gauss'` in `sc.pp.neighbors` uses; gauss kernel connectivities and reproduces the previous behavior,; see, for instance in the example [paul15].; - namings of returned annotation have changed for less bloated AnnData; objects, which means that some of the unstructured annotation of old; AnnData files is not recognized anymore; - replace occurances of `group_by` with `groupby` (consistency with; `pandas`); - it is worth checking out the notebook examples to see changes, e.g.; the [seurat] example.; - upgrading scikit-learn from 0.18 to 0.19 changed the implementation of PCA,; some results might therefore look slightly different; ```. ```{rubric} Further updates; ```. - UMAP {cite:p}`McInnes2018` can serve as a first visualization of the data just as tSNE,; in contrast to tSNE, UMAP directly embeds the single-cell graph and is faster;; UMAP is also used for measuring connectivities and computing neighbors,; see {func}`~scanpy.pp.neighbors`

Instructions: 
1. Analyze the content and the attribute description.
2. Determine if the content accurately reflects the intended quality attribute in this context.
3. If it does, label it as `true_positive: true`; if not, mark it as a `true_positive: false`.
4. If the content consists only of logs with no other text, mark it as a `true_positive: false`. 
4. If the content partially consists of logs, focus on analyzing remaining text. 
5. Add `reasoning` why the content is a true or false positive.
",False,"The content provided discusses updates and changes in Scanpy, such as preprocessing functions and API improvements, which relate to deployment considerations by improving efficiency and functionality. However, without explicit mention of deployment aspects like automation, speed, or rollback options, it does not fully align with the Deployability attribute. The focus is more on software functionality and user experience rather than operational deployment capabilities."
Deployability,"### 1.10.0 {small}`2024-03-26`. `scanpy` 1.10 brings a large amount of new features, performance improvements, and improved documentation. Some highlights:. * Improved support for out-of-core workflows via `dask`. See new tutorial: {doc}`/tutorials/experimental/dask` demonstrating counts-to-clusters for 1.4 million cells in <10 min.; * A new {doc}`basic clustering tutorial </tutorials/basics/clustering>` demonstrating an updated workflow.; * Opt-in increased performance for neighbor search and clustering ({doc}`how to guide </how-to/knn-transformers>`).; * Ability to `mask` observations or variables from a number of methods (see {doc}`/tutorials/plotting/advanced` for an example with plotting embeddings); * A new function {func}`~scanpy.get.aggregate` for computing aggregations of your data, very useful for pseudo bulking!. ```{rubric} Features; ```. * {func}`~scanpy.pp.scrublet` and {func}`~scanpy.pp.scrublet_simulate_doublets` were moved from {mod}`scanpy.external.pp` to {mod}`scanpy.pp`. The `scrublet` implementation is now maintained as part of scanpy {pr}`2703` {smaller}`P Angerer`; * {func}`scanpy.pp.pca`, {func}`scanpy.pp.scale`, {func}`scanpy.pl.embedding`, and {func}`scanpy.experimental.pp.normalize_pearson_residuals_pca` now support a `mask` parameter {pr}`2272` {smaller}`C Bright, T Marcella, & P Angerer`; * Enhanced dask support for some internal utilities, paving the way for more extensive dask support {pr}`2696` {smaller}`P Angerer`; * {func}`scanpy.pp.highly_variable_genes` supports dask for the default `seurat` and `cell_ranger` flavors {pr}`2809` {smaller}`P Angerer`; * New function {func}`scanpy.get.aggregate` which allows grouped aggregations over your data. Useful for pseudobulking! {pr}`2590` {smaller}`Isaac Virshup` {smaller}`Ilan Gold` {smaller}`Jon Bloom`; * {func}`scanpy.pp.neighbors` now has a `transformer` argument allowing the use of different ANN/ KNN libraries {pr}`2536` {smaller}`P Angerer`; * {func}`scanpy.experimental.pp.highly_variab",update,MatchSource.DOCS,scverse,scanpy,1.10.2,https://github.com/scverse/scanpy/tree/1.10.2/docs/release-notes/1.10.0.md:425,updated,425,docs/release-notes/1.10.0.md,https://scanpy.readthedocs.io,https://github.com/scverse/scanpy/tree/1.10.2/docs/release-notes/1.10.0.md,1,['update'],['updated'],"The capability of software to be deployed into an operational environment with predictable time and effort, including options for rollback if needed. Key aspects include automation, deployment speed, and deployment granularity.","
You are an expert in evaluating and categorizing quality attributes in software engineering. You possess the necessary skills to distinguish sentences that clearly relate to a given quality attribute from those that do not. 

Evaluate whether the content accurately aligns with its associated quality attribute, given the context provided. Your goal is to determine if the content makes sense in relation to the quality attribute description or if it is a false positive.

Data:

Quality Attribute: Deployability
Attribute Description: The capability of software to be deployed into an operational environment with predictable time and effort, including options for rollback if needed. Key aspects include automation, deployment speed, and deployment granularity.
Content: ### 1.10.0 {small}`2024-03-26`. `scanpy` 1.10 brings a large amount of new features, performance improvements, and improved documentation. Some highlights:. * Improved support for out-of-core workflows via `dask`. See new tutorial: {doc}`/tutorials/experimental/dask` demonstrating counts-to-clusters for 1.4 million cells in <10 min.; * A new {doc}`basic clustering tutorial </tutorials/basics/clustering>` demonstrating an updated workflow.; * Opt-in increased performance for neighbor search and clustering ({doc}`how to guide </how-to/knn-transformers>`).; * Ability to `mask` observations or variables from a number of methods (see {doc}`/tutorials/plotting/advanced` for an example with plotting embeddings); * A new function {func}`~scanpy.get.aggregate` for computing aggregations of your data, very useful for pseudo bulking!. ```{rubric} Features; ```. * {func}`~scanpy.pp.scrublet` and {func}`~scanpy.pp.scrublet_simulate_doublets` were moved from {mod}`scanpy.external.pp` to {mod}`scanpy.pp`. The `scrublet` implementation is now maintained as part of scanpy {pr}`2703` {smaller}`P Angerer`; * {func}`scanpy.pp.pca`, {func}`scanpy.pp.scale`, {func}`scanpy.pl.embedding`, and {func}`scanpy.experimental.pp.normalize_pearson_residuals_pca` now support a `mask` parameter {pr}`2272` {smaller}`C Bright, T Marcella, & P Angerer`; * Enhanced dask support for some internal utilities, paving the way for more extensive dask support {pr}`2696` {smaller}`P Angerer`; * {func}`scanpy.pp.highly_variable_genes` supports dask for the default `seurat` and `cell_ranger` flavors {pr}`2809` {smaller}`P Angerer`; * New function {func}`scanpy.get.aggregate` which allows grouped aggregations over your data. Useful for pseudobulking! {pr}`2590` {smaller}`Isaac Virshup` {smaller}`Ilan Gold` {smaller}`Jon Bloom`; * {func}`scanpy.pp.neighbors` now has a `transformer` argument allowing the use of different ANN/ KNN libraries {pr}`2536` {smaller}`P Angerer`; * {func}`scanpy.experimental.pp.highly_variab

Instructions: 
1. Analyze the content and the attribute description.
2. Determine if the content accurately reflects the intended quality attribute in this context.
3. If it does, label it as `true_positive: true`; if not, mark it as a `true_positive: false`.
4. If the content consists only of logs with no other text, mark it as a `true_positive: false`. 
4. If the content partially consists of logs, focus on analyzing remaining text. 
5. Add `reasoning` why the content is a true or false positive.
",True,"The provided content describes new features and performance improvements in an open-source software package called 'scanpy'. These updates include enhanced support for out-of-core workflows using Dask, improved documentation, and updated clustering tutorials. It mentions moving functions from external to internal modules and supporting new functionalities such as masking observations. The content also talks about performance optimizations and feature enhancements, which are part of the overall functionality and usability of scanpy. While it does include some logs (e.g., PR numbers), most of the text is focused on describing new features and improvements that would enhance deployability by making the software more efficient, scalable, and user-friendly, thereby aiding in its deployment into an operational environment."
Deployability,"### 1.3.3 {small}`2018-11-05`. ```{rubric} Major updates; ```. - a fully distributed preprocessing backend {smaller}`T White and the Laserson Lab`. ```{rubric} Code design; ```. - {func}`~scanpy.read_10x_h5` and {func}`~scanpy.read_10x_mtx` read Cell Ranger 3.0 outputs {pr}`334` {smaller}`Q Gong`. ```{note}; ```{rubric} Also see changes in anndata 0.6.; ```. - changed default compression to `None` in {meth}`~anndata.AnnData.write_h5ad` to speed up read and write, disk space use is usually less critical; - performance gains in {meth}`~anndata.AnnData.write_h5ad` due to better handling of strings and categories {smaller}`S Rybakov`; ```; ",update,MatchSource.DOCS,scverse,scanpy,1.10.2,https://github.com/scverse/scanpy/tree/1.10.2/docs/release-notes/1.3.3.md:49,updates,49,docs/release-notes/1.3.3.md,https://scanpy.readthedocs.io,https://github.com/scverse/scanpy/tree/1.10.2/docs/release-notes/1.3.3.md,1,['update'],['updates'],"The capability of software to be deployed into an operational environment with predictable time and effort, including options for rollback if needed. Key aspects include automation, deployment speed, and deployment granularity.","
You are an expert in evaluating and categorizing quality attributes in software engineering. You possess the necessary skills to distinguish sentences that clearly relate to a given quality attribute from those that do not. 

Evaluate whether the content accurately aligns with its associated quality attribute, given the context provided. Your goal is to determine if the content makes sense in relation to the quality attribute description or if it is a false positive.

Data:

Quality Attribute: Deployability
Attribute Description: The capability of software to be deployed into an operational environment with predictable time and effort, including options for rollback if needed. Key aspects include automation, deployment speed, and deployment granularity.
Content: ### 1.3.3 {small}`2018-11-05`. ```{rubric} Major updates; ```. - a fully distributed preprocessing backend {smaller}`T White and the Laserson Lab`. ```{rubric} Code design; ```. - {func}`~scanpy.read_10x_h5` and {func}`~scanpy.read_10x_mtx` read Cell Ranger 3.0 outputs {pr}`334` {smaller}`Q Gong`. ```{note}; ```{rubric} Also see changes in anndata 0.6.; ```. - changed default compression to `None` in {meth}`~anndata.AnnData.write_h5ad` to speed up read and write, disk space use is usually less critical; - performance gains in {meth}`~anndata.AnnData.write_h5ad` due to better handling of strings and categories {smaller}`S Rybakov`; ```; 

Instructions: 
1. Analyze the content and the attribute description.
2. Determine if the content accurately reflects the intended quality attribute in this context.
3. If it does, label it as `true_positive: true`; if not, mark it as a `true_positive: false`.
4. If the content consists only of logs with no other text, mark it as a `true_positive: false`. 
4. If the content partially consists of logs, focus on analyzing remaining text. 
5. Add `reasoning` why the content is a true or false positive.
",True,"The provided content discusses updates to preprocessing backend code and related functions. These updates include changes in compression settings for data writing, which aim to improve performance and reduce disk space usage. This aligns with deployability as it relates to deployment speed (performance gains) and automation (improved handling of writes), contributing to efficient and predictable deployments."
Deployability,"### 1.3.6 {small}`2018-12-11`. ```{rubric} Major updates; ```. - a new plotting gallery for `visualizing-marker-genes` {smaller}`F Ramirez`; - tutorials are integrated on ReadTheDocs, `pbmc3k` and `paga-paul15` {smaller}`A Wolf`. ```{rubric} Interactive exploration of analysis results through *manifold viewers*; ```. - CZI’s [cellxgene] directly reads `.h5ad` files {smaller}`the cellxgene developers`; - the [UCSC Single Cell Browser] requires exporting via {func}`~scanpy.external.exporting.cellbrowser` {smaller}`M Haeussler`. ```{rubric} Code design; ```. - {func}`~scanpy.pp.highly_variable_genes` supersedes {func}`~scanpy.pp.filter_genes_dispersion`, it gives the same results but, by default, expects logarithmized data and doesn’t subset {smaller}`A Wolf`. [cellxgene]: https://github.com/chanzuckerberg/cellxgene; [ucsc single cell browser]: https://github.com/maximilianh/cellBrowser; ",update,MatchSource.DOCS,scverse,scanpy,1.10.2,https://github.com/scverse/scanpy/tree/1.10.2/docs/release-notes/1.3.6.md:49,updates,49,docs/release-notes/1.3.6.md,https://scanpy.readthedocs.io,https://github.com/scverse/scanpy/tree/1.10.2/docs/release-notes/1.3.6.md,2,"['integrat', 'update']","['integrated', 'updates']","The capability of software to be deployed into an operational environment with predictable time and effort, including options for rollback if needed. Key aspects include automation, deployment speed, and deployment granularity.","
You are an expert in evaluating and categorizing quality attributes in software engineering. You possess the necessary skills to distinguish sentences that clearly relate to a given quality attribute from those that do not. 

Evaluate whether the content accurately aligns with its associated quality attribute, given the context provided. Your goal is to determine if the content makes sense in relation to the quality attribute description or if it is a false positive.

Data:

Quality Attribute: Deployability
Attribute Description: The capability of software to be deployed into an operational environment with predictable time and effort, including options for rollback if needed. Key aspects include automation, deployment speed, and deployment granularity.
Content: ### 1.3.6 {small}`2018-12-11`. ```{rubric} Major updates; ```. - a new plotting gallery for `visualizing-marker-genes` {smaller}`F Ramirez`; - tutorials are integrated on ReadTheDocs, `pbmc3k` and `paga-paul15` {smaller}`A Wolf`. ```{rubric} Interactive exploration of analysis results through *manifold viewers*; ```. - CZI’s [cellxgene] directly reads `.h5ad` files {smaller}`the cellxgene developers`; - the [UCSC Single Cell Browser] requires exporting via {func}`~scanpy.external.exporting.cellbrowser` {smaller}`M Haeussler`. ```{rubric} Code design; ```. - {func}`~scanpy.pp.highly_variable_genes` supersedes {func}`~scanpy.pp.filter_genes_dispersion`, it gives the same results but, by default, expects logarithmized data and doesn’t subset {smaller}`A Wolf`. [cellxgene]: https://github.com/chanzuckerberg/cellxgene; [ucsc single cell browser]: https://github.com/maximilianh/cellBrowser; 

Instructions: 
1. Analyze the content and the attribute description.
2. Determine if the content accurately reflects the intended quality attribute in this context.
3. If it does, label it as `true_positive: true`; if not, mark it as a `true_positive: false`.
4. If the content consists only of logs with no other text, mark it as a `true_positive: false`. 
4. If the content partially consists of logs, focus on analyzing remaining text. 
5. Add `reasoning` why the content is a true or false positive.
",False,"The content provided describes updates and changes made to software features, such as integrating new functionalities (e.g., plotting gallery for visualizing marker genes), adding tutorials, and enhancing code design through revised functions. These activities are related to deployment in that they involve updating the software with new features or improvements, which can be considered part of deployability. However, the content is more focused on feature development and integration rather than directly addressing aspects like automation, deployment speed, or rollback mechanisms mentioned in the Deployability attribute. Therefore, while it relates to deployability, it does not specifically address the key aspects highlighted in the attribute description. As such, this should be marked as a false positive."
Deployability,"### 1.4.5 {small}`2019-12-30`. Please install `scanpy==1.4.5.post3` instead of `scanpy==1.4.5`. ```{rubric} New functionality; ```. - {func}`~scanpy.tl.ingest` maps labels and embeddings of reference data to new data {doc}`/tutorials/basics/integrating-data-using-ingest` {pr}`651` {smaller}`S Rybakov, A Wolf`; - {mod}`~scanpy.queries` recieved many updates including enrichment through [gprofiler] and more advanced biomart queries {pr}`467` {smaller}`I Virshup`; - {func}`~scanpy.set_figure_params` allows setting `figsize` and accepts `facecolor='white'`, useful for working in dark mode {smaller}`A Wolf`. ```{rubric} Code design; ```. - {mod}`~scanpy.pp.downsample_counts` now always preserves the dtype of it's input, instead of converting floats to ints {pr}`865` {smaller}`I Virshup`; - allow specifying a base for {func}`~scanpy.pp.log1p` {pr}`931` {smaller}`G Eraslan`; - run neighbors on a GPU using rapids {pr}`830` {smaller}`T White`; - param docs from typed params {smaller}`P Angerer`; - {func}`~scanpy.tl.embedding_density` now only takes one positional argument; similar for {func}`~scanpy.pl.embedding_density`, which gains a param `groupby` {pr}`965` {smaller}`A Wolf`; - webpage overhaul, ecosystem page, release notes, tutorials overhaul {pr}`960` {pr}`966` {smaller}`A Wolf`. ```{warning}; - changed default `solver` in {func}`~scanpy.pp.pca` from `auto` to `arpack`; - changed default `use_raw` in {func}`~scanpy.tl.score_genes` from `False` to `None`; ```. [gprofiler]: https://biit.cs.ut.ee/gprofiler/; ",install,MatchSource.DOCS,scverse,scanpy,1.10.2,https://github.com/scverse/scanpy/tree/1.10.2/docs/release-notes/1.4.5.md:38,install,38,docs/release-notes/1.4.5.md,https://scanpy.readthedocs.io,https://github.com/scverse/scanpy/tree/1.10.2/docs/release-notes/1.4.5.md,4,"['install', 'integrat', 'release', 'update']","['install', 'integrating-data-using-ingest', 'release', 'updates']","The capability of software to be deployed into an operational environment with predictable time and effort, including options for rollback if needed. Key aspects include automation, deployment speed, and deployment granularity.","
You are an expert in evaluating and categorizing quality attributes in software engineering. You possess the necessary skills to distinguish sentences that clearly relate to a given quality attribute from those that do not. 

Evaluate whether the content accurately aligns with its associated quality attribute, given the context provided. Your goal is to determine if the content makes sense in relation to the quality attribute description or if it is a false positive.

Data:

Quality Attribute: Deployability
Attribute Description: The capability of software to be deployed into an operational environment with predictable time and effort, including options for rollback if needed. Key aspects include automation, deployment speed, and deployment granularity.
Content: ### 1.4.5 {small}`2019-12-30`. Please install `scanpy==1.4.5.post3` instead of `scanpy==1.4.5`. ```{rubric} New functionality; ```. - {func}`~scanpy.tl.ingest` maps labels and embeddings of reference data to new data {doc}`/tutorials/basics/integrating-data-using-ingest` {pr}`651` {smaller}`S Rybakov, A Wolf`; - {mod}`~scanpy.queries` recieved many updates including enrichment through [gprofiler] and more advanced biomart queries {pr}`467` {smaller}`I Virshup`; - {func}`~scanpy.set_figure_params` allows setting `figsize` and accepts `facecolor='white'`, useful for working in dark mode {smaller}`A Wolf`. ```{rubric} Code design; ```. - {mod}`~scanpy.pp.downsample_counts` now always preserves the dtype of it's input, instead of converting floats to ints {pr}`865` {smaller}`I Virshup`; - allow specifying a base for {func}`~scanpy.pp.log1p` {pr}`931` {smaller}`G Eraslan`; - run neighbors on a GPU using rapids {pr}`830` {smaller}`T White`; - param docs from typed params {smaller}`P Angerer`; - {func}`~scanpy.tl.embedding_density` now only takes one positional argument; similar for {func}`~scanpy.pl.embedding_density`, which gains a param `groupby` {pr}`965` {smaller}`A Wolf`; - webpage overhaul, ecosystem page, release notes, tutorials overhaul {pr}`960` {pr}`966` {smaller}`A Wolf`. ```{warning}; - changed default `solver` in {func}`~scanpy.pp.pca` from `auto` to `arpack`; - changed default `use_raw` in {func}`~scanpy.tl.score_genes` from `False` to `None`; ```. [gprofiler]: https://biit.cs.ut.ee/gprofiler/; 

Instructions: 
1. Analyze the content and the attribute description.
2. Determine if the content accurately reflects the intended quality attribute in this context.
3. If it does, label it as `true_positive: true`; if not, mark it as a `true_positive: false`.
4. If the content consists only of logs with no other text, mark it as a `true_positive: false`. 
4. If the content partially consists of logs, focus on analyzing remaining text. 
5. Add `reasoning` why the content is a true or false positive.
",False,"The provided content appears to be related to the deployment aspects of software with mentions such as 'install scanpy==1.4.5.post3' and 'webpage overhaul'. However, it's unclear how these directly tie to Deployability attributes like automation, deployment speed, or rollback options. The content mainly discusses updates to functionality, code design, and documentation rather than deployment-specific capabilities."
Deployability,"### 1.5.0 {small}`2020-05-15`. The `1.5.0` release adds a lot of new functionality, much of which takes advantage of {mod}`anndata` updates `0.7.0 - 0.7.2`. Highlights of this release include support for spatial data, dedicated handling of graphs in AnnData, sparse PCA, an interface with scvi, and others. ```{rubric} Spatial data support; ```. - Basic analysis {doc}`/tutorials/spatial/basic-analysis` and integration with single cell data {doc}`/tutorials/spatial/integration-scanorama` {smaller}`G Palla`; - {func}`~scanpy.read_visium` read 10x Visium data {pr}`1034` {smaller}`G Palla, P Angerer, I Virshup`; - {func}`~scanpy.datasets.visium_sge` load Visium data directly from 10x Genomics {pr}`1013` {smaller}`M Mirkazemi, G Palla, P Angerer`; - {func}`~scanpy.pl.spatial` plot spatial data {pr}`1012` {smaller}`G Palla, P Angerer`. ```{rubric} New functionality; ```. - Many functions, like {func}`~scanpy.pp.neighbors` and {func}`~scanpy.tl.umap`, now store cell-by-cell graphs in {attr}`~anndata.AnnData.obsp` {pr}`1118` {smaller}`S Rybakov`; - {func}`~scanpy.pp.scale` and {func}`~scanpy.pp.log1p` can be used on any element in {attr}`~anndata.AnnData.layers` or {attr}`~anndata.AnnData.obsm` {pr}`1173` {smaller}`I Virshup`. ```{rubric} External tools; ```. - `scanpy.external.pp.scvi` for preprocessing with scVI {pr}`1085` {smaller}`G Xing`; - Guide for using `Scanpy in R` {pr}`1186` {smaller}`L Zappia`. ```{rubric} Performance; ```. - {func}`~scanpy.pp.pca` now uses efficient implicit centering for sparse matrices. This can lead to signifigantly improved performance for large datasets {pr}`1066` {smaller}`A Tarashansky`; - {func}`~scanpy.tl.score_genes` now has an efficient implementation for sparse matrices with missing values {pr}`1196` {smaller}`redst4r`. ```{warning}; The new {func}`~scanpy.pp.pca` implementation can result in slightly different results for sparse matrices. See the pr ({pr}`1066`) and documentation for more info.; ```. ```{rubric} Code design; ```. - {f",release,MatchSource.DOCS,scverse,scanpy,1.10.2,https://github.com/scverse/scanpy/tree/1.10.2/docs/release-notes/1.5.0.md:43,release,43,docs/release-notes/1.5.0.md,https://scanpy.readthedocs.io,https://github.com/scverse/scanpy/tree/1.10.2/docs/release-notes/1.5.0.md,5,"['integrat', 'release', 'update']","['integration', 'integration-scanorama', 'release', 'updates']","The capability of software to be deployed into an operational environment with predictable time and effort, including options for rollback if needed. Key aspects include automation, deployment speed, and deployment granularity.","
You are an expert in evaluating and categorizing quality attributes in software engineering. You possess the necessary skills to distinguish sentences that clearly relate to a given quality attribute from those that do not. 

Evaluate whether the content accurately aligns with its associated quality attribute, given the context provided. Your goal is to determine if the content makes sense in relation to the quality attribute description or if it is a false positive.

Data:

Quality Attribute: Deployability
Attribute Description: The capability of software to be deployed into an operational environment with predictable time and effort, including options for rollback if needed. Key aspects include automation, deployment speed, and deployment granularity.
Content: ### 1.5.0 {small}`2020-05-15`. The `1.5.0` release adds a lot of new functionality, much of which takes advantage of {mod}`anndata` updates `0.7.0 - 0.7.2`. Highlights of this release include support for spatial data, dedicated handling of graphs in AnnData, sparse PCA, an interface with scvi, and others. ```{rubric} Spatial data support; ```. - Basic analysis {doc}`/tutorials/spatial/basic-analysis` and integration with single cell data {doc}`/tutorials/spatial/integration-scanorama` {smaller}`G Palla`; - {func}`~scanpy.read_visium` read 10x Visium data {pr}`1034` {smaller}`G Palla, P Angerer, I Virshup`; - {func}`~scanpy.datasets.visium_sge` load Visium data directly from 10x Genomics {pr}`1013` {smaller}`M Mirkazemi, G Palla, P Angerer`; - {func}`~scanpy.pl.spatial` plot spatial data {pr}`1012` {smaller}`G Palla, P Angerer`. ```{rubric} New functionality; ```. - Many functions, like {func}`~scanpy.pp.neighbors` and {func}`~scanpy.tl.umap`, now store cell-by-cell graphs in {attr}`~anndata.AnnData.obsp` {pr}`1118` {smaller}`S Rybakov`; - {func}`~scanpy.pp.scale` and {func}`~scanpy.pp.log1p` can be used on any element in {attr}`~anndata.AnnData.layers` or {attr}`~anndata.AnnData.obsm` {pr}`1173` {smaller}`I Virshup`. ```{rubric} External tools; ```. - `scanpy.external.pp.scvi` for preprocessing with scVI {pr}`1085` {smaller}`G Xing`; - Guide for using `Scanpy in R` {pr}`1186` {smaller}`L Zappia`. ```{rubric} Performance; ```. - {func}`~scanpy.pp.pca` now uses efficient implicit centering for sparse matrices. This can lead to signifigantly improved performance for large datasets {pr}`1066` {smaller}`A Tarashansky`; - {func}`~scanpy.tl.score_genes` now has an efficient implementation for sparse matrices with missing values {pr}`1196` {smaller}`redst4r`. ```{warning}; The new {func}`~scanpy.pp.pca` implementation can result in slightly different results for sparse matrices. See the pr ({pr}`1066`) and documentation for more info.; ```. ```{rubric} Code design; ```. - {f

Instructions: 
1. Analyze the content and the attribute description.
2. Determine if the content accurately reflects the intended quality attribute in this context.
3. If it does, label it as `true_positive: true`; if not, mark it as a `true_positive: false`.
4. If the content consists only of logs with no other text, mark it as a `true_positive: false`. 
4. If the content partially consists of logs, focus on analyzing remaining text. 
5. Add `reasoning` why the content is a true or false positive.
",True,"The content discusses new functionality, performance improvements, and code design aspects in detail. These are all relevant to deployability as they relate to how well the software can be rolled out into production with predictability."
Deployability,"### 1.6.0 {small}`2020-08-15`. This release includes an overhaul of {func}`~scanpy.pl.dotplot`, {func}`~scanpy.pl.matrixplot`, and {func}`~scanpy.pl.stacked_violin` ({pr}`1210` {smaller}`F Ramirez`), and of the internals of {func}`~scanpy.tl.rank_genes_groups` ({pr}`1156` {smaller}`S Rybakov`). ~~~{rubric} Overhaul of {func}`~scanpy.pl.dotplot`, {func}`~scanpy.pl.matrixplot`, and {func}`~scanpy.pl.stacked_violin` {pr}`1210` {smaller}`F Ramirez`; ~~~. - An overhauled tutorial {doc}`/tutorials/plotting/core`. - New plotting classes can be accessed directly (e.g., {class}`~scanpy.pl.DotPlot`) or using the `return_fig` param. - It is possible to plot log fold change and p-values in the {func}`~scanpy.pl.rank_genes_groups_dotplot` family of functions. - Added `ax` parameter which allows embedding the plot in other images. - Added option to include a bar plot instead of the dendrogram containing the cell/observation totals per category. - Return a dictionary of axes for further manipulation. This includes the main plot, legend and dendrogram to totals. - Legends can be removed. - The `groupby` param can take a list of categories, e.g., `groupby=[‘tissue’, ‘cell type’]`. - Added padding parameter to `dotplot` and `stacked_violin`. {pr}`1270`. - Added title for colorbar and positioned as in dotplot for {func}`~scanpy.pl.matrixplot`. - {func}`~scanpy.pl.dotplot` changes:. > - Improved the colorbar and size legend for dotplots. Now the colorbar and size have titles, which can be modified using the `colorbar_title` and `size_title` params. They also align at the bottom of the image and do not shrink if the dotplot image is smaller.; > - Allow plotting genes in rows and categories in columns (`swap_axes`).; > - Using {class}`~scanpy.pl.DotPlot`, the `dot_edge_color` and line width can be modified, a grid can be added, and other modifications are enabled.; > - A new style was added in which the dots are replaced by an empty circle and the square behind the circle is colored (like",release,MatchSource.DOCS,scverse,scanpy,1.10.2,https://github.com/scverse/scanpy/tree/1.10.2/docs/release-notes/1.6.0.md:36,release,36,docs/release-notes/1.6.0.md,https://scanpy.readthedocs.io,https://github.com/scverse/scanpy/tree/1.10.2/docs/release-notes/1.6.0.md,1,['release'],['release'],"The capability of software to be deployed into an operational environment with predictable time and effort, including options for rollback if needed. Key aspects include automation, deployment speed, and deployment granularity.","
You are an expert in evaluating and categorizing quality attributes in software engineering. You possess the necessary skills to distinguish sentences that clearly relate to a given quality attribute from those that do not. 

Evaluate whether the content accurately aligns with its associated quality attribute, given the context provided. Your goal is to determine if the content makes sense in relation to the quality attribute description or if it is a false positive.

Data:

Quality Attribute: Deployability
Attribute Description: The capability of software to be deployed into an operational environment with predictable time and effort, including options for rollback if needed. Key aspects include automation, deployment speed, and deployment granularity.
Content: ### 1.6.0 {small}`2020-08-15`. This release includes an overhaul of {func}`~scanpy.pl.dotplot`, {func}`~scanpy.pl.matrixplot`, and {func}`~scanpy.pl.stacked_violin` ({pr}`1210` {smaller}`F Ramirez`), and of the internals of {func}`~scanpy.tl.rank_genes_groups` ({pr}`1156` {smaller}`S Rybakov`). ~~~{rubric} Overhaul of {func}`~scanpy.pl.dotplot`, {func}`~scanpy.pl.matrixplot`, and {func}`~scanpy.pl.stacked_violin` {pr}`1210` {smaller}`F Ramirez`; ~~~. - An overhauled tutorial {doc}`/tutorials/plotting/core`. - New plotting classes can be accessed directly (e.g., {class}`~scanpy.pl.DotPlot`) or using the `return_fig` param. - It is possible to plot log fold change and p-values in the {func}`~scanpy.pl.rank_genes_groups_dotplot` family of functions. - Added `ax` parameter which allows embedding the plot in other images. - Added option to include a bar plot instead of the dendrogram containing the cell/observation totals per category. - Return a dictionary of axes for further manipulation. This includes the main plot, legend and dendrogram to totals. - Legends can be removed. - The `groupby` param can take a list of categories, e.g., `groupby=[‘tissue’, ‘cell type’]`. - Added padding parameter to `dotplot` and `stacked_violin`. {pr}`1270`. - Added title for colorbar and positioned as in dotplot for {func}`~scanpy.pl.matrixplot`. - {func}`~scanpy.pl.dotplot` changes:. > - Improved the colorbar and size legend for dotplots. Now the colorbar and size have titles, which can be modified using the `colorbar_title` and `size_title` params. They also align at the bottom of the image and do not shrink if the dotplot image is smaller.; > - Allow plotting genes in rows and categories in columns (`swap_axes`).; > - Using {class}`~scanpy.pl.DotPlot`, the `dot_edge_color` and line width can be modified, a grid can be added, and other modifications are enabled.; > - A new style was added in which the dots are replaced by an empty circle and the square behind the circle is colored (like

Instructions: 
1. Analyze the content and the attribute description.
2. Determine if the content accurately reflects the intended quality attribute in this context.
3. If it does, label it as `true_positive: true`; if not, mark it as a `true_positive: false`.
4. If the content consists only of logs with no other text, mark it as a `true_positive: false`. 
4. If the content partially consists of logs, focus on analyzing remaining text. 
5. Add `reasoning` why the content is a true or false positive.
",True,"The content discusses updates and features added to plotting functions in scanpy such as dotplot, matrixplot, etc. It mentions new parameters like 'groupby' and 'swap_axes', allows embedding plots using the 'ax' parameter, and returns dictionaries for further manipulation. These improvements relate to making the software more deployable by providing easier and more flexible ways to integrate and modify plots in the application. The mention of deployment granularity is less direct, but the automation aspects through new parameters and functions contribute to deployability."
Deployability,### 1.8.2 {small}`2021-11-3`. ```{rubric} Docs; ```. - Update conda installation instructions {pr}`1974` {smaller}`L Heumos`. ```{rubric} Bug fixes; ```. - Fix plotting after {func}`scanpy.tl.filter_rank_genes_groups` {pr}`1942` {smaller}`S Rybakov`; - Fix `use_raw=None` using {attr}`anndata.AnnData.var_names` if {attr}`anndata.AnnData.raw`; is present in {func}`scanpy.tl.score_genes` {pr}`1999` {smaller}`M Klein`; - Fix compatibility with UMAP 0.5.2 {pr}`2028` {smaller}`L Mcinnes`; - Fixed non-determinism in {func}`scanpy.pl.paga` node positions {pr}`1922` {smaller}`I Virshup`. ```{rubric} Ecosystem; ```. - Added PASTE (a tool to align and integrate spatial transcriptomics data) to scanpy ecosystem.; ,install,MatchSource.DOCS,scverse,scanpy,1.10.2,https://github.com/scverse/scanpy/tree/1.10.2/docs/release-notes/1.8.2.md:68,installation,68,docs/release-notes/1.8.2.md,https://scanpy.readthedocs.io,https://github.com/scverse/scanpy/tree/1.10.2/docs/release-notes/1.8.2.md,2,"['install', 'integrat']","['installation', 'integrate']","The capability of software to be deployed into an operational environment with predictable time and effort, including options for rollback if needed. Key aspects include automation, deployment speed, and deployment granularity.","
You are an expert in evaluating and categorizing quality attributes in software engineering. You possess the necessary skills to distinguish sentences that clearly relate to a given quality attribute from those that do not. 

Evaluate whether the content accurately aligns with its associated quality attribute, given the context provided. Your goal is to determine if the content makes sense in relation to the quality attribute description or if it is a false positive.

Data:

Quality Attribute: Deployability
Attribute Description: The capability of software to be deployed into an operational environment with predictable time and effort, including options for rollback if needed. Key aspects include automation, deployment speed, and deployment granularity.
Content: ### 1.8.2 {small}`2021-11-3`. ```{rubric} Docs; ```. - Update conda installation instructions {pr}`1974` {smaller}`L Heumos`. ```{rubric} Bug fixes; ```. - Fix plotting after {func}`scanpy.tl.filter_rank_genes_groups` {pr}`1942` {smaller}`S Rybakov`; - Fix `use_raw=None` using {attr}`anndata.AnnData.var_names` if {attr}`anndata.AnnData.raw`; is present in {func}`scanpy.tl.score_genes` {pr}`1999` {smaller}`M Klein`; - Fix compatibility with UMAP 0.5.2 {pr}`2028` {smaller}`L Mcinnes`; - Fixed non-determinism in {func}`scanpy.pl.paga` node positions {pr}`1922` {smaller}`I Virshup`. ```{rubric} Ecosystem; ```. - Added PASTE (a tool to align and integrate spatial transcriptomics data) to scanpy ecosystem.; 

Instructions: 
1. Analyze the content and the attribute description.
2. Determine if the content accurately reflects the intended quality attribute in this context.
3. If it does, label it as `true_positive: true`; if not, mark it as a `true_positive: false`.
4. If the content consists only of logs with no other text, mark it as a `true_positive: false`. 
4. If the content partially consists of logs, focus on analyzing remaining text. 
5. Add `reasoning` why the content is a true or false positive.
",False,"The content describes updates and bug fixes to a software project, which are aspects related to deployability. Specifically, it mentions 'Update conda installation instructions' which could relate to deployment configuration. However, most of the content focuses on bug fixes in functionalities like plotting and data processing, rather than directly addressing deployment capabilities or issues. Therefore, while there's a slight mention related to deployment, the majority does not align with Deployability, making it a false positive."
Deployability,### 1.9.1 {small}`2022-04-05`. ```{rubric} Bug fixes; ```. - {func}`~scanpy.pp.normalize_total` works when Dask is not installed {pr}`2209` {smaller}`R Cannoodt`; - Fix embedding plots by bumping matplotlib dependency to version 3.4 {pr}`2212` {smaller}`I Virshup`; ,install,MatchSource.DOCS,scverse,scanpy,1.10.2,https://github.com/scverse/scanpy/tree/1.10.2/docs/release-notes/1.9.1.md:119,installed,119,docs/release-notes/1.9.1.md,https://scanpy.readthedocs.io,https://github.com/scverse/scanpy/tree/1.10.2/docs/release-notes/1.9.1.md,1,['install'],['installed'],"The capability of software to be deployed into an operational environment with predictable time and effort, including options for rollback if needed. Key aspects include automation, deployment speed, and deployment granularity.","
You are an expert in evaluating and categorizing quality attributes in software engineering. You possess the necessary skills to distinguish sentences that clearly relate to a given quality attribute from those that do not. 

Evaluate whether the content accurately aligns with its associated quality attribute, given the context provided. Your goal is to determine if the content makes sense in relation to the quality attribute description or if it is a false positive.

Data:

Quality Attribute: Deployability
Attribute Description: The capability of software to be deployed into an operational environment with predictable time and effort, including options for rollback if needed. Key aspects include automation, deployment speed, and deployment granularity.
Content: ### 1.9.1 {small}`2022-04-05`. ```{rubric} Bug fixes; ```. - {func}`~scanpy.pp.normalize_total` works when Dask is not installed {pr}`2209` {smaller}`R Cannoodt`; - Fix embedding plots by bumping matplotlib dependency to version 3.4 {pr}`2212` {smaller}`I Virshup`; 

Instructions: 
1. Analyze the content and the attribute description.
2. Determine if the content accurately reflects the intended quality attribute in this context.
3. If it does, label it as `true_positive: true`; if not, mark it as a `true_positive: false`.
4. If the content consists only of logs with no other text, mark it as a `true_positive: false`. 
4. If the content partially consists of logs, focus on analyzing remaining text. 
5. Add `reasoning` why the content is a true or false positive.
",False,"The provided content appears to be a list of bug fixes and updates, such as version changes and dependency adjustments. However, the context given pertains to 'Deployability', which focuses on deployment capabilities, automation, speed, and rollback options. This content does not address any aspects related to deployment or deployment processes. Instead, it discusses software development practices like fixing bugs and updating dependencies, which are more related to maintainability, reliability, and version control rather than deployability."
Deployability,"'elem-1', 'elem-2']`. ### `Returns` section. There are three types of return sections – prose, tuple, and a mix of both. 1. Prose is for simple cases.; 2. Tuple return sections are formatted like parameters. Other than in numpydoc, each tuple is first characterized by the identifier and *not* by its type. Provide type annotation in the function header.; 3. Mix of prose and tuple is relevant in complicated cases, e.g. when you want to describe that you *added something as annotation to an \`AnnData\` object*. #### Examples. For simple cases, use prose as in; {func}`~scanpy.pp.normalize_total`. ```rst; Returns; -------; Returns dictionary with normalized copies of `adata.X` and `adata.layers`; or updates `adata` with normalized versions of the original; `adata.X` and `adata.layers`, depending on `inplace`.; ```. For tuple return values, you can use the standard numpydoc way of populating it,; e.g. as in {func}`~scanpy.pp.calculate_qc_metrics`.; Do not add types in the docstring, but specify them in the function signature:. ```python; def myfunc(...) -> tuple[int, str]:; """"""; ...; Returns; -------; one_identifier; Description.; second_identifier; Description 2.; """"""; ...; ```. Many functions also just modify parts of the passed AnnData object, like e.g. {func}`~scanpy.tl.dpt`.; You can then combine prose and lists to best describe what happens. ```rst; Returns; -------; Depending on `copy`, returns or updates `adata` with the following fields. If `n_branchings==0`, no field `dpt_groups` will be written. dpt_pseudotime : :class:`~pandas.Series` (`adata.obs`, dtype `float`); Array of dim (number of samples) that stores the pseudotime of each; cell, that is, the DPT distance with respect to the root cell.; dpt_groups : :class:`pandas.Series` (`adata.obs`, dtype `category`); Array of dim (number of samples) that stores the subgroup id ('0',; '1', ...) for each cell. The groups typically correspond to; 'progenitor cells', 'undecided cells' or 'branches' of a process.; ```; ",update,MatchSource.DOCS,scverse,scanpy,1.10.2,https://github.com/scverse/scanpy/tree/1.10.2/docs/dev/documentation.md:6235,updates,6235,docs/dev/documentation.md,https://scanpy.readthedocs.io,https://github.com/scverse/scanpy/tree/1.10.2/docs/dev/documentation.md,1,['update'],['updates'],"The capability of software to be deployed into an operational environment with predictable time and effort, including options for rollback if needed. Key aspects include automation, deployment speed, and deployment granularity.","
You are an expert in evaluating and categorizing quality attributes in software engineering. You possess the necessary skills to distinguish sentences that clearly relate to a given quality attribute from those that do not. 

Evaluate whether the content accurately aligns with its associated quality attribute, given the context provided. Your goal is to determine if the content makes sense in relation to the quality attribute description or if it is a false positive.

Data:

Quality Attribute: Deployability
Attribute Description: The capability of software to be deployed into an operational environment with predictable time and effort, including options for rollback if needed. Key aspects include automation, deployment speed, and deployment granularity.
Content: 'elem-1', 'elem-2']`. ### `Returns` section. There are three types of return sections – prose, tuple, and a mix of both. 1. Prose is for simple cases.; 2. Tuple return sections are formatted like parameters. Other than in numpydoc, each tuple is first characterized by the identifier and *not* by its type. Provide type annotation in the function header.; 3. Mix of prose and tuple is relevant in complicated cases, e.g. when you want to describe that you *added something as annotation to an \`AnnData\` object*. #### Examples. For simple cases, use prose as in; {func}`~scanpy.pp.normalize_total`. ```rst; Returns; -------; Returns dictionary with normalized copies of `adata.X` and `adata.layers`; or updates `adata` with normalized versions of the original; `adata.X` and `adata.layers`, depending on `inplace`.; ```. For tuple return values, you can use the standard numpydoc way of populating it,; e.g. as in {func}`~scanpy.pp.calculate_qc_metrics`.; Do not add types in the docstring, but specify them in the function signature:. ```python; def myfunc(...) -> tuple[int, str]:; """"""; ...; Returns; -------; one_identifier; Description.; second_identifier; Description 2.; """"""; ...; ```. Many functions also just modify parts of the passed AnnData object, like e.g. {func}`~scanpy.tl.dpt`.; You can then combine prose and lists to best describe what happens. ```rst; Returns; -------; Depending on `copy`, returns or updates `adata` with the following fields. If `n_branchings==0`, no field `dpt_groups` will be written. dpt_pseudotime : :class:`~pandas.Series` (`adata.obs`, dtype `float`); Array of dim (number of samples) that stores the pseudotime of each; cell, that is, the DPT distance with respect to the root cell.; dpt_groups : :class:`pandas.Series` (`adata.obs`, dtype `category`); Array of dim (number of samples) that stores the subgroup id ('0',; '1', ...) for each cell. The groups typically correspond to; 'progenitor cells', 'undecided cells' or 'branches' of a process.; ```; 

Instructions: 
1. Analyze the content and the attribute description.
2. Determine if the content accurately reflects the intended quality attribute in this context.
3. If it does, label it as `true_positive: true`; if not, mark it as a `true_positive: false`.
4. If the content consists only of logs with no other text, mark it as a `true_positive: false`. 
4. If the content partially consists of logs, focus on analyzing remaining text. 
5. Add `reasoning` why the content is a true or false positive.
",True,"The content refers to deployment options and rollback capabilities, which aligns with the Deployability attribute's focus on deployment automation, speed, and granularity."
Deployability,(contribution-guide)=. # Contributing. Contributions to scanpy are welcome!; This section of the docs provides some guidelines and tips to follow when contributing. ```{toctree}; code; getting-set-up; testing; documentation; ci; versioning; release; ```. Parts of the guidelines have been adapted from the [pandas](https://pandas.pydata.org/pandas-docs/stable/development/index.html) and [MDAnalysis](https://userguide.mdanalysis.org/stable/contributing.html) guides.; These are both excellent guides and we highly recommend checking them out.; ,release,MatchSource.DOCS,scverse,scanpy,1.10.2,https://github.com/scverse/scanpy/tree/1.10.2/docs/dev/index.md:241,release,241,docs/dev/index.md,https://scanpy.readthedocs.io,https://github.com/scverse/scanpy/tree/1.10.2/docs/dev/index.md,1,['release'],['release'],"The capability of software to be deployed into an operational environment with predictable time and effort, including options for rollback if needed. Key aspects include automation, deployment speed, and deployment granularity.","
You are an expert in evaluating and categorizing quality attributes in software engineering. You possess the necessary skills to distinguish sentences that clearly relate to a given quality attribute from those that do not. 

Evaluate whether the content accurately aligns with its associated quality attribute, given the context provided. Your goal is to determine if the content makes sense in relation to the quality attribute description or if it is a false positive.

Data:

Quality Attribute: Deployability
Attribute Description: The capability of software to be deployed into an operational environment with predictable time and effort, including options for rollback if needed. Key aspects include automation, deployment speed, and deployment granularity.
Content: (contribution-guide)=. # Contributing. Contributions to scanpy are welcome!; This section of the docs provides some guidelines and tips to follow when contributing. ```{toctree}; code; getting-set-up; testing; documentation; ci; versioning; release; ```. Parts of the guidelines have been adapted from the [pandas](https://pandas.pydata.org/pandas-docs/stable/development/index.html) and [MDAnalysis](https://userguide.mdanalysis.org/stable/contributing.html) guides.; These are both excellent guides and we highly recommend checking them out.; 

Instructions: 
1. Analyze the content and the attribute description.
2. Determine if the content accurately reflects the intended quality attribute in this context.
3. If it does, label it as `true_positive: true`; if not, mark it as a `true_positive: false`.
4. If the content consists only of logs with no other text, mark it as a `true_positive: false`. 
4. If the content partially consists of logs, focus on analyzing remaining text. 
5. Add `reasoning` why the content is a true or false positive.
",True,"The content discusses contributing guidelines for software development, which includes procedures that should be followed when making contributions to the project. This relates to how deployable the software is because it outlines steps that ensure smooth deployment processes, such as automated testing and continuous integration practices which are part of deployability."
Deployability,(release-notes)=. # Release notes. ## Version 1.10. ```{include} /release-notes/1.10.3.md; ```. ```{include} /release-notes/1.10.2.md; ```. ```{include} /release-notes/1.10.1.md; ```. ```{include} /release-notes/1.10.0.md; ```. ## Version 1.9. ```{include} /release-notes/1.9.8.md; ```. ```{include} /release-notes/1.9.7.md; ```. ```{include} /release-notes/1.9.6.md; ```. ```{include} /release-notes/1.9.5.md; ```. ```{include} /release-notes/1.9.4.md; ```. ```{include} /release-notes/1.9.3.md; ```. ```{include} /release-notes/1.9.2.md; ```. ```{include} /release-notes/1.9.1.md; ```. ```{include} /release-notes/1.9.0.md; ```. ## Version 1.8. ```{include} /release-notes/1.8.2.md; ```. ```{include} /release-notes/1.8.1.md; ```. ```{include} /release-notes/1.8.0.md; ```. ## Version 1.7. ```{include} /release-notes/1.7.2.md; ```. ```{include} /release-notes/1.7.1.md; ```. ```{include} /release-notes/1.7.0.md; ```. ## Version 1.6. ```{include} 1.6.0.md; ```. ## Version 1.5. ```{include} 1.5.1.md; ```. ```{include} 1.5.0.md; ```. ## Version 1.4. ```{include} 1.4.6.md; ```. ```{include} 1.4.5.md; ```. ```{include} 1.4.4.md; ```. ```{include} 1.4.3.md; ```. ```{include} 1.4.2.md; ```. ```{include} 1.4.1.md; ```. ## Version 1.3. ```{include} 1.3.8.md; ```. ```{include} 1.3.7.md; ```. ```{include} 1.3.6.md; ```. ```{include} 1.3.5.md; ```. ```{include} 1.3.4.md; ```. ```{include} 1.3.3.md; ```. ```{include} 1.3.1.md; ```. ## Version 1.2. ```{include} 1.2.1.md; ```. ```{include} 1.2.0.md; ```. ## Version 1.1. ```{include} 1.1.0.md; ```. ## Version 1.0. ```{include} 1.0.0.md; ```. ## Version 0.4. ```{include} 0.4.4.md; ```. ```{include} 0.4.3.md; ```. ```{include} 0.4.2.md; ```. ```{include} 0.4.0.md; ```. ## Version 0.3. ```{include} 0.3.2.md; ```. ```{include} 0.3.0.md; ```. ## Version 0.2. ```{include} 0.2.9.md; ```. ```{include} 0.2.1.md; ```. ## Version 0.1. ```{include} 0.1.0.md; ```; ,release,MatchSource.DOCS,scverse,scanpy,1.10.2,https://github.com/scverse/scanpy/tree/1.10.2/docs/release-notes/index.md:1,release-notes,1,docs/release-notes/index.md,https://scanpy.readthedocs.io,https://github.com/scverse/scanpy/tree/1.10.2/docs/release-notes/index.md,20,['release'],['release-notes'],"The capability of software to be deployed into an operational environment with predictable time and effort, including options for rollback if needed. Key aspects include automation, deployment speed, and deployment granularity.","
You are an expert in evaluating and categorizing quality attributes in software engineering. You possess the necessary skills to distinguish sentences that clearly relate to a given quality attribute from those that do not. 

Evaluate whether the content accurately aligns with its associated quality attribute, given the context provided. Your goal is to determine if the content makes sense in relation to the quality attribute description or if it is a false positive.

Data:

Quality Attribute: Deployability
Attribute Description: The capability of software to be deployed into an operational environment with predictable time and effort, including options for rollback if needed. Key aspects include automation, deployment speed, and deployment granularity.
Content: (release-notes)=. # Release notes. ## Version 1.10. ```{include} /release-notes/1.10.3.md; ```. ```{include} /release-notes/1.10.2.md; ```. ```{include} /release-notes/1.10.1.md; ```. ```{include} /release-notes/1.10.0.md; ```. ## Version 1.9. ```{include} /release-notes/1.9.8.md; ```. ```{include} /release-notes/1.9.7.md; ```. ```{include} /release-notes/1.9.6.md; ```. ```{include} /release-notes/1.9.5.md; ```. ```{include} /release-notes/1.9.4.md; ```. ```{include} /release-notes/1.9.3.md; ```. ```{include} /release-notes/1.9.2.md; ```. ```{include} /release-notes/1.9.1.md; ```. ```{include} /release-notes/1.9.0.md; ```. ## Version 1.8. ```{include} /release-notes/1.8.2.md; ```. ```{include} /release-notes/1.8.1.md; ```. ```{include} /release-notes/1.8.0.md; ```. ## Version 1.7. ```{include} /release-notes/1.7.2.md; ```. ```{include} /release-notes/1.7.1.md; ```. ```{include} /release-notes/1.7.0.md; ```. ## Version 1.6. ```{include} 1.6.0.md; ```. ## Version 1.5. ```{include} 1.5.1.md; ```. ```{include} 1.5.0.md; ```. ## Version 1.4. ```{include} 1.4.6.md; ```. ```{include} 1.4.5.md; ```. ```{include} 1.4.4.md; ```. ```{include} 1.4.3.md; ```. ```{include} 1.4.2.md; ```. ```{include} 1.4.1.md; ```. ## Version 1.3. ```{include} 1.3.8.md; ```. ```{include} 1.3.7.md; ```. ```{include} 1.3.6.md; ```. ```{include} 1.3.5.md; ```. ```{include} 1.3.4.md; ```. ```{include} 1.3.3.md; ```. ```{include} 1.3.1.md; ```. ## Version 1.2. ```{include} 1.2.1.md; ```. ```{include} 1.2.0.md; ```. ## Version 1.1. ```{include} 1.1.0.md; ```. ## Version 1.0. ```{include} 1.0.0.md; ```. ## Version 0.4. ```{include} 0.4.4.md; ```. ```{include} 0.4.3.md; ```. ```{include} 0.4.2.md; ```. ```{include} 0.4.0.md; ```. ## Version 0.3. ```{include} 0.3.2.md; ```. ```{include} 0.3.0.md; ```. ## Version 0.2. ```{include} 0.2.9.md; ```. ```{include} 0.2.1.md; ```. ## Version 0.1. ```{include} 0.1.0.md; ```; 

Instructions: 
1. Analyze the content and the attribute description.
2. Determine if the content accurately reflects the intended quality attribute in this context.
3. If it does, label it as `true_positive: true`; if not, mark it as a `true_positive: false`.
4. If the content consists only of logs with no other text, mark it as a `true_positive: false`. 
4. If the content partially consists of logs, focus on analyzing remaining text. 
5. Add `reasoning` why the content is a true or false positive.
",True,"The content provided is solely a list of release notes and version numbers, which are typically used to document software changes, updates, and bug fixes. This aligns with deployability as it ensures that the software can be rolled out predictably and efficiently, supporting a smooth deployment process."
Deployability,"(tests)=. # Tests. Possibly the most important part of contributing to any open source package is the test suite.; Implementations may change, but the only way we can know the code is working before making a release is the test suite. ## Running the tests. We use [pytest](https://docs.pytest.org/en/stable/) to test scanpy.; To run the tests first make sure you have the required dependencies (`pip install -e "".[test,dev]""`), then run `pytest` from the root of the repository. It can take a while to run the whole test suite. There are a few ways to cut down on this while working on a PR:. 1. Only run a subset of the tests. This can be done with the `-k` argument from pytest (e.g. `pytest -k test_plotting.py` or `pytest -k ""test_umap*""`; 2. Run the tests in parallel. If you install the pytest extension [pytest-xdist](https://github.com/pytest-dev/pytest-xdist) you can run tests in parallel with the `--numprocesses` argument to pytest (e.g. `pytest -n 8`). ### Miscellaneous tips. - A lot of warnings can be thrown while running the test suite. It's often easier to read the test results with them hidden via the `--disable-pytest-warnings` argument. ## Writing tests. You can refer to the [existing test suite](https://github.com/scverse/scanpy/tree/main/scanpy/tests) for examples.; If you haven't written tests before, Software Carpentry has an [in-depth guide](https://katyhuff.github.io/2016-07-11-scipy/testing/01-basics.html) on the topic. We highly recommend using [Test Driven Development](https://en.wikipedia.org/wiki/Test-driven_development) when contributing code.; This not only ensures you have tests written, it often makes implementation easier since you start out with a specification for your function. Consider parameterizing your tests using the `pytest.mark.parameterize` and `pytest.fixture` decorators.; Documentation on these can be found [here](https://docs.pytest.org/en/stable/fixture.html), but we'd also recommend searching our test suite for existing usage. ###",release,MatchSource.DOCS,scverse,scanpy,1.10.2,https://github.com/scverse/scanpy/tree/1.10.2/docs/dev/testing.md:208,release,208,docs/dev/testing.md,https://scanpy.readthedocs.io,https://github.com/scverse/scanpy/tree/1.10.2/docs/dev/testing.md,3,"['install', 'release']","['install', 'release']","The capability of software to be deployed into an operational environment with predictable time and effort, including options for rollback if needed. Key aspects include automation, deployment speed, and deployment granularity.","
You are an expert in evaluating and categorizing quality attributes in software engineering. You possess the necessary skills to distinguish sentences that clearly relate to a given quality attribute from those that do not. 

Evaluate whether the content accurately aligns with its associated quality attribute, given the context provided. Your goal is to determine if the content makes sense in relation to the quality attribute description or if it is a false positive.

Data:

Quality Attribute: Deployability
Attribute Description: The capability of software to be deployed into an operational environment with predictable time and effort, including options for rollback if needed. Key aspects include automation, deployment speed, and deployment granularity.
Content: (tests)=. # Tests. Possibly the most important part of contributing to any open source package is the test suite.; Implementations may change, but the only way we can know the code is working before making a release is the test suite. ## Running the tests. We use [pytest](https://docs.pytest.org/en/stable/) to test scanpy.; To run the tests first make sure you have the required dependencies (`pip install -e "".[test,dev]""`), then run `pytest` from the root of the repository. It can take a while to run the whole test suite. There are a few ways to cut down on this while working on a PR:. 1. Only run a subset of the tests. This can be done with the `-k` argument from pytest (e.g. `pytest -k test_plotting.py` or `pytest -k ""test_umap*""`; 2. Run the tests in parallel. If you install the pytest extension [pytest-xdist](https://github.com/pytest-dev/pytest-xdist) you can run tests in parallel with the `--numprocesses` argument to pytest (e.g. `pytest -n 8`). ### Miscellaneous tips. - A lot of warnings can be thrown while running the test suite. It's often easier to read the test results with them hidden via the `--disable-pytest-warnings` argument. ## Writing tests. You can refer to the [existing test suite](https://github.com/scverse/scanpy/tree/main/scanpy/tests) for examples.; If you haven't written tests before, Software Carpentry has an [in-depth guide](https://katyhuff.github.io/2016-07-11-scipy/testing/01-basics.html) on the topic. We highly recommend using [Test Driven Development](https://en.wikipedia.org/wiki/Test-driven_development) when contributing code.; This not only ensures you have tests written, it often makes implementation easier since you start out with a specification for your function. Consider parameterizing your tests using the `pytest.mark.parameterize` and `pytest.fixture` decorators.; Documentation on these can be found [here](https://docs.pytest.org/en/stable/fixture.html), but we'd also recommend searching our test suite for existing usage. ###

Instructions: 
1. Analyze the content and the attribute description.
2. Determine if the content accurately reflects the intended quality attribute in this context.
3. If it does, label it as `true_positive: true`; if not, mark it as a `true_positive: false`.
4. If the content consists only of logs with no other text, mark it as a `true_positive: false`. 
4. If the content partially consists of logs, focus on analyzing remaining text. 
5. Add `reasoning` why the content is a true or false positive.
",True,"The content discusses how to run tests and write new ones using pytest, which relates to having a maintainable test suite for deployment purposes. Deployability is about being able to deploy software predictably, and having a good test suite helps ensure that the software works as expected before deployment."
Deployability,. ## Experimental. ```{eval-rst}; .. module:: scanpy.experimental; .. currentmodule:: scanpy; ```. New methods that are in early development which are not (yet); integrated in Scanpy core. ```{eval-rst}; .. module:: scanpy.experimental.pp; .. currentmodule:: scanpy; ```. ```{eval-rst}; .. autosummary::; :nosignatures:; :toctree: ../generated/. experimental.pp.normalize_pearson_residuals; experimental.pp.normalize_pearson_residuals_pca; experimental.pp.highly_variable_genes; experimental.pp.recipe_pearson_residuals; ```; ,integrat,MatchSource.DOCS,scverse,scanpy,1.10.2,https://github.com/scverse/scanpy/tree/1.10.2/docs/api/experimental.md:162,integrated,162,docs/api/experimental.md,https://scanpy.readthedocs.io,https://github.com/scverse/scanpy/tree/1.10.2/docs/api/experimental.md,1,['integrat'],['integrated'],"The capability of software to be deployed into an operational environment with predictable time and effort, including options for rollback if needed. Key aspects include automation, deployment speed, and deployment granularity.","
You are an expert in evaluating and categorizing quality attributes in software engineering. You possess the necessary skills to distinguish sentences that clearly relate to a given quality attribute from those that do not. 

Evaluate whether the content accurately aligns with its associated quality attribute, given the context provided. Your goal is to determine if the content makes sense in relation to the quality attribute description or if it is a false positive.

Data:

Quality Attribute: Deployability
Attribute Description: The capability of software to be deployed into an operational environment with predictable time and effort, including options for rollback if needed. Key aspects include automation, deployment speed, and deployment granularity.
Content: . ## Experimental. ```{eval-rst}; .. module:: scanpy.experimental; .. currentmodule:: scanpy; ```. New methods that are in early development which are not (yet); integrated in Scanpy core. ```{eval-rst}; .. module:: scanpy.experimental.pp; .. currentmodule:: scanpy; ```. ```{eval-rst}; .. autosummary::; :nosignatures:; :toctree: ../generated/. experimental.pp.normalize_pearson_residuals; experimental.pp.normalize_pearson_residuals_pca; experimental.pp.highly_variable_genes; experimental.pp.recipe_pearson_residuals; ```; 

Instructions: 
1. Analyze the content and the attribute description.
2. Determine if the content accurately reflects the intended quality attribute in this context.
3. If it does, label it as `true_positive: true`; if not, mark it as a `true_positive: false`.
4. If the content consists only of logs with no other text, mark it as a `true_positive: false`. 
4. If the content partially consists of logs, focus on analyzing remaining text. 
5. Add `reasoning` why the content is a true or false positive.
",True,"The content discusses experimental methods and new features under development in Scanpy, which are not yet integrated into the core. This relates to deployment aspects because it highlights the capability of adding new features through experimentation, ensuring that these can be rolled back if necessary. The mention of normalization and PCA processing steps in the methods suggests a structured approach to ensure smooth deployment when these features are integrated."
Deployability,<!--; Thanks for opening a PR to scanpy!; Please be sure to follow the guidelines in our contribution guide (https://scanpy.readthedocs.io/en/latest/dev/index.html) to familiarize yourself with our workflow and speed up review.; -->. <!-- Please check (“- [x]”) and fill in the following boxes -->; - [ ] Closes #; - [ ] Tests included or not required because:; <!-- Only check the following box if you did not include release notes -->; - [ ] Release notes not necessary because:; ,release,MatchSource.DOCS,scverse,scanpy,1.10.2,https://github.com/scverse/scanpy/tree/1.10.2/.github/pull_request_template.md:419,release,419,.github/pull_request_template.md,https://scanpy.readthedocs.io,https://github.com/scverse/scanpy/tree/1.10.2/.github/pull_request_template.md,1,['release'],['release'],"The capability of software to be deployed into an operational environment with predictable time and effort, including options for rollback if needed. Key aspects include automation, deployment speed, and deployment granularity.","
You are an expert in evaluating and categorizing quality attributes in software engineering. You possess the necessary skills to distinguish sentences that clearly relate to a given quality attribute from those that do not. 

Evaluate whether the content accurately aligns with its associated quality attribute, given the context provided. Your goal is to determine if the content makes sense in relation to the quality attribute description or if it is a false positive.

Data:

Quality Attribute: Deployability
Attribute Description: The capability of software to be deployed into an operational environment with predictable time and effort, including options for rollback if needed. Key aspects include automation, deployment speed, and deployment granularity.
Content: <!--; Thanks for opening a PR to scanpy!; Please be sure to follow the guidelines in our contribution guide (https://scanpy.readthedocs.io/en/latest/dev/index.html) to familiarize yourself with our workflow and speed up review.; -->. <!-- Please check (“- [x]”) and fill in the following boxes -->; - [ ] Closes #; - [ ] Tests included or not required because:; <!-- Only check the following box if you did not include release notes -->; - [ ] Release notes not necessary because:; 

Instructions: 
1. Analyze the content and the attribute description.
2. Determine if the content accurately reflects the intended quality attribute in this context.
3. If it does, label it as `true_positive: true`; if not, mark it as a `true_positive: false`.
4. If the content consists only of logs with no other text, mark it as a `true_positive: false`. 
4. If the content partially consists of logs, focus on analyzing remaining text. 
5. Add `reasoning` why the content is a true or false positive.
",False,"The content provided does not discuss deployment capabilities, automation, deployment speed, or deployment granularity. Instead, it appears to be part of a pull request review process, including instructions for contributors on following guidelines and checking specific boxes related to issue closing and release notes. This content is unrelated to deployability as defined."
Deployability,"Docker], you can use e.g. the image [gcfntnu/scanpy] from Docker Hub. ## Troubleshooting. If you get a `Permission denied` error, never use `sudo pip`. Instead, use virtual environments or:. ```shell; pip install --user scanpy; ```. **On MacOS**, if **not** using `conda`, you might need to install the C core of igraph via homebrew first. - `brew install igraph`. - If igraph still fails to install, see the question on [compiling igraph].; Alternatively consider installing gcc via `brew install gcc --without-multilib`; and exporting the required variables:. ```shell; export CC=""/usr/local/Cellar/gcc/X.x.x/bin/gcc-X""; export CXX=""/usr/local/Cellar/gcc/X.x.x/bin/gcc-X""; ```. where `X` and `x` refers to the version of `gcc`;; in my case, the path reads `/usr/local/Cellar/gcc/6.3.0_1/bin/gcc-6`. **On Windows**, there also often problems installing compiled packages such as `igraph`,; but you can find precompiled packages on Christoph Gohlke’s [unofficial binaries].; Download those and install them using `pip install ./path/to/file.whl`. (conda)=. ## Installing Miniconda. After downloading [Miniconda], in a unix shell (Linux, Mac), run. ```shell; cd DOWNLOAD_DIR; chmod +x Miniconda3-latest-VERSION.sh; ./Miniconda3-latest-VERSION.sh; ```. and accept all suggestions.; Either reopen a new terminal or `source ~/.bashrc` on Linux/ `source ~/.bash_profile` on Mac.; The whole process takes just a couple of minutes. [bioconda]: https://bioconda.github.io/; [compiling igraph]: https://stackoverflow.com/q/29589696/247482; [create symbolic links]: https://docs.microsoft.com/en-us/windows/security/threat-protection/security-policy-settings/create-symbolic-links; [docker]: https://en.wikipedia.org/wiki/Docker_(software); [from pypi]: https://pypi.org/project/scanpy; [gcfntnu/scanpy]: https://hub.docker.com/r/gcfntnu/scanpy; [leiden]: https://leidenalg.readthedocs.io; [miniconda]: https://docs.conda.io/projects/miniconda/en/latest/; [on github]: https://github.com/scverse/scanpy; [igrap",install,MatchSource.DOCS,scverse,scanpy,1.10.2,https://github.com/scverse/scanpy/tree/1.10.2/docs/installation.md:2348,install,2348,docs/installation.md,https://scanpy.readthedocs.io,https://github.com/scverse/scanpy/tree/1.10.2/docs/installation.md,2,['install'],['install'],"The capability of software to be deployed into an operational environment with predictable time and effort, including options for rollback if needed. Key aspects include automation, deployment speed, and deployment granularity.","
You are an expert in evaluating and categorizing quality attributes in software engineering. You possess the necessary skills to distinguish sentences that clearly relate to a given quality attribute from those that do not. 

Evaluate whether the content accurately aligns with its associated quality attribute, given the context provided. Your goal is to determine if the content makes sense in relation to the quality attribute description or if it is a false positive.

Data:

Quality Attribute: Deployability
Attribute Description: The capability of software to be deployed into an operational environment with predictable time and effort, including options for rollback if needed. Key aspects include automation, deployment speed, and deployment granularity.
Content: Docker], you can use e.g. the image [gcfntnu/scanpy] from Docker Hub. ## Troubleshooting. If you get a `Permission denied` error, never use `sudo pip`. Instead, use virtual environments or:. ```shell; pip install --user scanpy; ```. **On MacOS**, if **not** using `conda`, you might need to install the C core of igraph via homebrew first. - `brew install igraph`. - If igraph still fails to install, see the question on [compiling igraph].; Alternatively consider installing gcc via `brew install gcc --without-multilib`; and exporting the required variables:. ```shell; export CC=""/usr/local/Cellar/gcc/X.x.x/bin/gcc-X""; export CXX=""/usr/local/Cellar/gcc/X.x.x/bin/gcc-X""; ```. where `X` and `x` refers to the version of `gcc`;; in my case, the path reads `/usr/local/Cellar/gcc/6.3.0_1/bin/gcc-6`. **On Windows**, there also often problems installing compiled packages such as `igraph`,; but you can find precompiled packages on Christoph Gohlke’s [unofficial binaries].; Download those and install them using `pip install ./path/to/file.whl`. (conda)=. ## Installing Miniconda. After downloading [Miniconda], in a unix shell (Linux, Mac), run. ```shell; cd DOWNLOAD_DIR; chmod +x Miniconda3-latest-VERSION.sh; ./Miniconda3-latest-VERSION.sh; ```. and accept all suggestions.; Either reopen a new terminal or `source ~/.bashrc` on Linux/ `source ~/.bash_profile` on Mac.; The whole process takes just a couple of minutes. [bioconda]: https://bioconda.github.io/; [compiling igraph]: https://stackoverflow.com/q/29589696/247482; [create symbolic links]: https://docs.microsoft.com/en-us/windows/security/threat-protection/security-policy-settings/create-symbolic-links; [docker]: https://en.wikipedia.org/wiki/Docker_(software); [from pypi]: https://pypi.org/project/scanpy; [gcfntnu/scanpy]: https://hub.docker.com/r/gcfntnu/scanpy; [leiden]: https://leidenalg.readthedocs.io; [miniconda]: https://docs.conda.io/projects/miniconda/en/latest/; [on github]: https://github.com/scverse/scanpy; [igrap

Instructions: 
1. Analyze the content and the attribute description.
2. Determine if the content accurately reflects the intended quality attribute in this context.
3. If it does, label it as `true_positive: true`; if not, mark it as a `true_positive: false`.
4. If the content consists only of logs with no other text, mark it as a `true_positive: false`. 
4. If the content partially consists of logs, focus on analyzing remaining text. 
5. Add `reasoning` why the content is a true or false positive.
",True,"The content describes various steps for installing software components using specific package managers and tools like Docker, Miniconda, and homebrew. It also addresses common installation issues and provides solutions. This aligns with deployability as it ensures that the software can be reliably deployed in different environments with minimal effort and proper setup."
Deployability,"Hub]: clone the repository and `cd` into its root directory. ```shell; gh repo clone scverse/scanpy; cd scanpy; ```. If you are using `pip>=21.3`, an editable install can be made:. ```shell; pip install -e '.[dev,test]'; ```. If you want to let [conda] handle the installations of dependencies, do:. ```shell; pipx install beni; beni pyproject.toml > environment.yml; conda env create -f environment.yml; conda activate scanpy; pip install -e '.[dev,doc,test]'; ```. For instructions on how to work with the code, see the {ref}`contribution guide <contribution-guide>`. ## Docker. If you're using [Docker], you can use e.g. the image [gcfntnu/scanpy] from Docker Hub. ## Troubleshooting. If you get a `Permission denied` error, never use `sudo pip`. Instead, use virtual environments or:. ```shell; pip install --user scanpy; ```. **On MacOS**, if **not** using `conda`, you might need to install the C core of igraph via homebrew first. - `brew install igraph`. - If igraph still fails to install, see the question on [compiling igraph].; Alternatively consider installing gcc via `brew install gcc --without-multilib`; and exporting the required variables:. ```shell; export CC=""/usr/local/Cellar/gcc/X.x.x/bin/gcc-X""; export CXX=""/usr/local/Cellar/gcc/X.x.x/bin/gcc-X""; ```. where `X` and `x` refers to the version of `gcc`;; in my case, the path reads `/usr/local/Cellar/gcc/6.3.0_1/bin/gcc-6`. **On Windows**, there also often problems installing compiled packages such as `igraph`,; but you can find precompiled packages on Christoph Gohlke’s [unofficial binaries].; Download those and install them using `pip install ./path/to/file.whl`. (conda)=. ## Installing Miniconda. After downloading [Miniconda], in a unix shell (Linux, Mac), run. ```shell; cd DOWNLOAD_DIR; chmod +x Miniconda3-latest-VERSION.sh; ./Miniconda3-latest-VERSION.sh; ```. and accept all suggestions.; Either reopen a new terminal or `source ~/.bashrc` on Linux/ `source ~/.bash_profile` on Mac.; The whole process takes jus",install,MatchSource.DOCS,scverse,scanpy,1.10.2,https://github.com/scverse/scanpy/tree/1.10.2/docs/installation.md:1746,install,1746,docs/installation.md,https://scanpy.readthedocs.io,https://github.com/scverse/scanpy/tree/1.10.2/docs/installation.md,1,['install'],['install'],"The capability of software to be deployed into an operational environment with predictable time and effort, including options for rollback if needed. Key aspects include automation, deployment speed, and deployment granularity.","
You are an expert in evaluating and categorizing quality attributes in software engineering. You possess the necessary skills to distinguish sentences that clearly relate to a given quality attribute from those that do not. 

Evaluate whether the content accurately aligns with its associated quality attribute, given the context provided. Your goal is to determine if the content makes sense in relation to the quality attribute description or if it is a false positive.

Data:

Quality Attribute: Deployability
Attribute Description: The capability of software to be deployed into an operational environment with predictable time and effort, including options for rollback if needed. Key aspects include automation, deployment speed, and deployment granularity.
Content: Hub]: clone the repository and `cd` into its root directory. ```shell; gh repo clone scverse/scanpy; cd scanpy; ```. If you are using `pip>=21.3`, an editable install can be made:. ```shell; pip install -e '.[dev,test]'; ```. If you want to let [conda] handle the installations of dependencies, do:. ```shell; pipx install beni; beni pyproject.toml > environment.yml; conda env create -f environment.yml; conda activate scanpy; pip install -e '.[dev,doc,test]'; ```. For instructions on how to work with the code, see the {ref}`contribution guide <contribution-guide>`. ## Docker. If you're using [Docker], you can use e.g. the image [gcfntnu/scanpy] from Docker Hub. ## Troubleshooting. If you get a `Permission denied` error, never use `sudo pip`. Instead, use virtual environments or:. ```shell; pip install --user scanpy; ```. **On MacOS**, if **not** using `conda`, you might need to install the C core of igraph via homebrew first. - `brew install igraph`. - If igraph still fails to install, see the question on [compiling igraph].; Alternatively consider installing gcc via `brew install gcc --without-multilib`; and exporting the required variables:. ```shell; export CC=""/usr/local/Cellar/gcc/X.x.x/bin/gcc-X""; export CXX=""/usr/local/Cellar/gcc/X.x.x/bin/gcc-X""; ```. where `X` and `x` refers to the version of `gcc`;; in my case, the path reads `/usr/local/Cellar/gcc/6.3.0_1/bin/gcc-6`. **On Windows**, there also often problems installing compiled packages such as `igraph`,; but you can find precompiled packages on Christoph Gohlke’s [unofficial binaries].; Download those and install them using `pip install ./path/to/file.whl`. (conda)=. ## Installing Miniconda. After downloading [Miniconda], in a unix shell (Linux, Mac), run. ```shell; cd DOWNLOAD_DIR; chmod +x Miniconda3-latest-VERSION.sh; ./Miniconda3-latest-VERSION.sh; ```. and accept all suggestions.; Either reopen a new terminal or `source ~/.bashrc` on Linux/ `source ~/.bash_profile` on Mac.; The whole process takes jus

Instructions: 
1. Analyze the content and the attribute description.
2. Determine if the content accurately reflects the intended quality attribute in this context.
3. If it does, label it as `true_positive: true`; if not, mark it as a `true_positive: false`.
4. If the content consists only of logs with no other text, mark it as a `true_positive: false`. 
4. If the content partially consists of logs, focus on analyzing remaining text. 
5. Add `reasoning` why the content is a true or false positive.
",True,"The content describes steps for installing software using various package managers like pip and conda, which are related to deployment in that they enable efficient installation and management of dependencies in an operational environment."
Deployability,```{include} ../README.md; :end-before: '## Citation'; ```. ```{eval-rst}; .. role:: small; ```. ```{eval-rst}; .. role:: smaller; ```. ::::{grid} 1 2 3 3; :gutter: 2. :::{grid-item-card} Installation {octicon}`plug;1em;`; :link: installation; :link-type: doc. New to *scanpy*? Check out the installation guide.; :::. :::{grid-item-card} Tutorials {octicon}`play;1em;`; :link: tutorials/index; :link-type: doc. The tutorials walk you through real-world applications of scanpy.; :::. :::{grid-item-card} API reference {octicon}`book;1em;`; :link: api/index; :link-type: doc. The API reference contains a detailed description of; the scanpy API.; :::. :::{grid-item-card} Discussion {octicon}`megaphone;1em;`; :link: https://discourse.scverse.org. Need help? Reach out on our forum to get your questions answered!; :::. :::{grid-item-card} GitHub {octicon}`mark-github;1em;`; :link: https://github.com/scverse/scanpy. Find a bug? Interested in improving scanpy? Checkout our GitHub for the latest developments.; :::; ::::. **Other resources**. * Follow changes in the {ref}`release notes <release-notes>`.; * Find tools that harmonize well with anndata & Scanpy at [scverse.org/packages/](https://scverse.org/packages/); * Check out our {ref}`contribution guide <contribution-guide>` for development practices.; * Consider citing [Genome Biology (2018)] along with original {doc}`references <references>`. ## News. ```{include} news.md; :start-after: '<!-- marker: after prelude -->'; :end-before: '<!-- marker: before old news -->'; ```. {ref}`(past news) <News>`. % put references first so all references are resolved. % NO! there is a particular meaning to this sequence. ```{toctree}; :hidden: true; :maxdepth: 1. installation; tutorials/index; usage-principles; how-to/index; api/index; external/index; ecosystem; release-notes/index; community; news; dev/index; contributors; references; ```. [contribution guide]: dev/index.md; [genome biology (2018)]: https://doi.org/10.1186/s13059-017-1382-0; ,install,MatchSource.DOCS,scverse,scanpy,1.10.2,https://github.com/scverse/scanpy/tree/1.10.2/docs/index.md:230,installation,230,docs/index.md,https://scanpy.readthedocs.io,https://github.com/scverse/scanpy/tree/1.10.2/docs/index.md,2,['install'],['installation'],"The capability of software to be deployed into an operational environment with predictable time and effort, including options for rollback if needed. Key aspects include automation, deployment speed, and deployment granularity.","
You are an expert in evaluating and categorizing quality attributes in software engineering. You possess the necessary skills to distinguish sentences that clearly relate to a given quality attribute from those that do not. 

Evaluate whether the content accurately aligns with its associated quality attribute, given the context provided. Your goal is to determine if the content makes sense in relation to the quality attribute description or if it is a false positive.

Data:

Quality Attribute: Deployability
Attribute Description: The capability of software to be deployed into an operational environment with predictable time and effort, including options for rollback if needed. Key aspects include automation, deployment speed, and deployment granularity.
Content: ```{include} ../README.md; :end-before: '## Citation'; ```. ```{eval-rst}; .. role:: small; ```. ```{eval-rst}; .. role:: smaller; ```. ::::{grid} 1 2 3 3; :gutter: 2. :::{grid-item-card} Installation {octicon}`plug;1em;`; :link: installation; :link-type: doc. New to *scanpy*? Check out the installation guide.; :::. :::{grid-item-card} Tutorials {octicon}`play;1em;`; :link: tutorials/index; :link-type: doc. The tutorials walk you through real-world applications of scanpy.; :::. :::{grid-item-card} API reference {octicon}`book;1em;`; :link: api/index; :link-type: doc. The API reference contains a detailed description of; the scanpy API.; :::. :::{grid-item-card} Discussion {octicon}`megaphone;1em;`; :link: https://discourse.scverse.org. Need help? Reach out on our forum to get your questions answered!; :::. :::{grid-item-card} GitHub {octicon}`mark-github;1em;`; :link: https://github.com/scverse/scanpy. Find a bug? Interested in improving scanpy? Checkout our GitHub for the latest developments.; :::; ::::. **Other resources**. * Follow changes in the {ref}`release notes <release-notes>`.; * Find tools that harmonize well with anndata & Scanpy at [scverse.org/packages/](https://scverse.org/packages/); * Check out our {ref}`contribution guide <contribution-guide>` for development practices.; * Consider citing [Genome Biology (2018)] along with original {doc}`references <references>`. ## News. ```{include} news.md; :start-after: '<!-- marker: after prelude -->'; :end-before: '<!-- marker: before old news -->'; ```. {ref}`(past news) <News>`. % put references first so all references are resolved. % NO! there is a particular meaning to this sequence. ```{toctree}; :hidden: true; :maxdepth: 1. installation; tutorials/index; usage-principles; how-to/index; api/index; external/index; ecosystem; release-notes/index; community; news; dev/index; contributors; references; ```. [contribution guide]: dev/index.md; [genome biology (2018)]: https://doi.org/10.1186/s13059-017-1382-0; 

Instructions: 
1. Analyze the content and the attribute description.
2. Determine if the content accurately reflects the intended quality attribute in this context.
3. If it does, label it as `true_positive: true`; if not, mark it as a `true_positive: false`.
4. If the content consists only of logs with no other text, mark it as a `true_positive: false`. 
4. If the content partially consists of logs, focus on analyzing remaining text. 
5. Add `reasoning` why the content is a true or false positive.
",False,"The content provided is part of a README.md file which includes links to installation guides and other resources. While deployment involves deploying software into an environment, the content here focuses more on user navigation and documentation rather than the deployment process itself. Therefore, it does not accurately reflect deployability as per the quality attribute."
Deployability,"a bugfix release) or releases (in case of a major/minor release).; For bugfix releases, this should have `on-merge: backport to 0.<minor>.x`,; so the [meeseeksdev][] bot will create a backport PR. See {doc}`versioning` for more info.; - Clear out and close the milestone you just made a release for. After a *major* or *minor* release has been made:. - Tweet about it! Announce it on Zulip! Announce it on Discourse! Think about making a bot for this! Maybe actually do that?; - Create a new release notes file for the next minor release. This should only be added to the dev branch.; - Tag the development branch. If you just released `1.7.0`, this would be `1.8.0.dev0`.; - Create a new branch for this release series, like `1.7.x`. This should get a new release notes file. [meeseeksdev]: https://meeseeksbox.github.io. ## Debugging the build process. If you changed something about the build process (e.g. [Hatchling’s build configuration][hatch-build]),; or something about the package’s structure,; you might want to manually check if the build and upload process behaves as expected:. ```shell; # Clear out old distributions; rm -r dist. # Build source distribution and wheel both; python -m build. # Now check those build artifacts; twine check dist/*. # List the wheel archive’s contents; bsdtar -tf dist/*.whl. ```. You can also upload the package to <test.pypi.org> ([tutorial][testpypi tutorial]). [testpypi tutorial]: https://packaging.python.org/en/latest/tutorials/packaging-projects/#uploading-the-distribution-archives. ```; twine upload --repository testpypi dist/*; ```. The above approximates what the [publish workflow][] does automatically for us.; If you want to replicate the process more exactly, make sure you are careful,; and create a version tag before building (make sure you delete it after uploading to TestPyPI!). [hatch-build]: https://hatch.pypa.io/latest/config/build/; [publish workflow]: https://github.com/scverse/scanpy/tree/main/.github/workflows/publish.yml;",configurat,MatchSource.DOCS,scverse,scanpy,1.10.2,https://github.com/scverse/scanpy/tree/1.10.2/docs/dev/release.md:1794,configuration,1794,docs/dev/release.md,https://scanpy.readthedocs.io,https://github.com/scverse/scanpy/tree/1.10.2/docs/dev/release.md,1,['configurat'],['configuration'],"The capability of software to be deployed into an operational environment with predictable time and effort, including options for rollback if needed. Key aspects include automation, deployment speed, and deployment granularity.","
You are an expert in evaluating and categorizing quality attributes in software engineering. You possess the necessary skills to distinguish sentences that clearly relate to a given quality attribute from those that do not. 

Evaluate whether the content accurately aligns with its associated quality attribute, given the context provided. Your goal is to determine if the content makes sense in relation to the quality attribute description or if it is a false positive.

Data:

Quality Attribute: Deployability
Attribute Description: The capability of software to be deployed into an operational environment with predictable time and effort, including options for rollback if needed. Key aspects include automation, deployment speed, and deployment granularity.
Content: a bugfix release) or releases (in case of a major/minor release).; For bugfix releases, this should have `on-merge: backport to 0.<minor>.x`,; so the [meeseeksdev][] bot will create a backport PR. See {doc}`versioning` for more info.; - Clear out and close the milestone you just made a release for. After a *major* or *minor* release has been made:. - Tweet about it! Announce it on Zulip! Announce it on Discourse! Think about making a bot for this! Maybe actually do that?; - Create a new release notes file for the next minor release. This should only be added to the dev branch.; - Tag the development branch. If you just released `1.7.0`, this would be `1.8.0.dev0`.; - Create a new branch for this release series, like `1.7.x`. This should get a new release notes file. [meeseeksdev]: https://meeseeksbox.github.io. ## Debugging the build process. If you changed something about the build process (e.g. [Hatchling’s build configuration][hatch-build]),; or something about the package’s structure,; you might want to manually check if the build and upload process behaves as expected:. ```shell; # Clear out old distributions; rm -r dist. # Build source distribution and wheel both; python -m build. # Now check those build artifacts; twine check dist/*. # List the wheel archive’s contents; bsdtar -tf dist/*.whl. ```. You can also upload the package to <test.pypi.org> ([tutorial][testpypi tutorial]). [testpypi tutorial]: https://packaging.python.org/en/latest/tutorials/packaging-projects/#uploading-the-distribution-archives. ```; twine upload --repository testpypi dist/*; ```. The above approximates what the [publish workflow][] does automatically for us.; If you want to replicate the process more exactly, make sure you are careful,; and create a version tag before building (make sure you delete it after uploading to TestPyPI!). [hatch-build]: https://hatch.pypa.io/latest/config/build/; [publish workflow]: https://github.com/scverse/scanpy/tree/main/.github/workflows/publish.yml;

Instructions: 
1. Analyze the content and the attribute description.
2. Determine if the content accurately reflects the intended quality attribute in this context.
3. If it does, label it as `true_positive: true`; if not, mark it as a `true_positive: false`.
4. If the content consists only of logs with no other text, mark it as a `true_positive: false`. 
4. If the content partially consists of logs, focus on analyzing remaining text. 
5. Add `reasoning` why the content is a true or false positive.
",True,"The content provided discusses deployment processes such as creating release notes, tagging branches, and announcing releases. These activities are directly related to the Deployability quality attribute since they involve efficient and structured deployment practices. The mention of backporting fixes and version control management aligns with ensuring that deployments are predictable and can be rolled back if necessary. Thus, it accurately reflects the Deployability quality attribute."
Deployability,"a remote; git remote add upstream https://github.com/scverse/scanpy.git; # git branch --set-upstream-to ""upstream/main""; ```. ### `pre-commit`. We use [precommit](https://pre-commit.com) to run some styling checks in an automated way.; We also test against these checks, so make sure you follow them!. You can install pre-commit with:. ```shell; pip install pre-commit; ```. You can then install it to run while developing here with:. ```shell; pre-commit install; ```. From the root of the repo. If you choose not to run the hooks on each commit, you can run them manually with `pre-commit run --files={your files}`. (creating-a-branch)=. ### Creating a branch for your feature. All development should occur in branches dedicated to the particular work being done.; Additionally, unless you are a maintainer, all changes should be directed at the `main` branch.; You can create a branch with:. ```shell; git checkout main # Starting from the main branch; git pull # Syncing with the repo; git checkout -b {your-branch-name} # Making and changing to the new branch; ```. (open-a-pr)=. ### Open a pull request. When you're ready to have your code reviewed, push your changes up to your fork:. ```shell; # The first time you push the branch, you'll need to tell git where; git push --set-upstream origin {your-branch-name}; # After that, just use; git push; ```. And open a pull request by going to the main repo and clicking *New pull request*.; GitHub is also pretty good about prompting you to open PRs for recently pushed branches. We'll try and get back to you soon!. (dev-environments)=. ## Development environments. It's recommended to do development work in an isolated environment.; There are number of ways to do this, including conda environments, virtual environments, and virtual machines. We think the easiest is probably conda environments. Simply create a new environment with a supported version of python and make a {ref}`development install <dev-install-instructions>` of `scanpy`.; ",install,MatchSource.DOCS,scverse,scanpy,1.10.2,https://github.com/scverse/scanpy/tree/1.10.2/docs/dev/getting-set-up.md:3431,install,3431,docs/dev/getting-set-up.md,https://scanpy.readthedocs.io,https://github.com/scverse/scanpy/tree/1.10.2/docs/dev/getting-set-up.md,2,['install'],"['install', 'install-instructions']","The capability of software to be deployed into an operational environment with predictable time and effort, including options for rollback if needed. Key aspects include automation, deployment speed, and deployment granularity.","
You are an expert in evaluating and categorizing quality attributes in software engineering. You possess the necessary skills to distinguish sentences that clearly relate to a given quality attribute from those that do not. 

Evaluate whether the content accurately aligns with its associated quality attribute, given the context provided. Your goal is to determine if the content makes sense in relation to the quality attribute description or if it is a false positive.

Data:

Quality Attribute: Deployability
Attribute Description: The capability of software to be deployed into an operational environment with predictable time and effort, including options for rollback if needed. Key aspects include automation, deployment speed, and deployment granularity.
Content: a remote; git remote add upstream https://github.com/scverse/scanpy.git; # git branch --set-upstream-to ""upstream/main""; ```. ### `pre-commit`. We use [precommit](https://pre-commit.com) to run some styling checks in an automated way.; We also test against these checks, so make sure you follow them!. You can install pre-commit with:. ```shell; pip install pre-commit; ```. You can then install it to run while developing here with:. ```shell; pre-commit install; ```. From the root of the repo. If you choose not to run the hooks on each commit, you can run them manually with `pre-commit run --files={your files}`. (creating-a-branch)=. ### Creating a branch for your feature. All development should occur in branches dedicated to the particular work being done.; Additionally, unless you are a maintainer, all changes should be directed at the `main` branch.; You can create a branch with:. ```shell; git checkout main # Starting from the main branch; git pull # Syncing with the repo; git checkout -b {your-branch-name} # Making and changing to the new branch; ```. (open-a-pr)=. ### Open a pull request. When you're ready to have your code reviewed, push your changes up to your fork:. ```shell; # The first time you push the branch, you'll need to tell git where; git push --set-upstream origin {your-branch-name}; # After that, just use; git push; ```. And open a pull request by going to the main repo and clicking *New pull request*.; GitHub is also pretty good about prompting you to open PRs for recently pushed branches. We'll try and get back to you soon!. (dev-environments)=. ## Development environments. It's recommended to do development work in an isolated environment.; There are number of ways to do this, including conda environments, virtual environments, and virtual machines. We think the easiest is probably conda environments. Simply create a new environment with a supported version of python and make a {ref}`development install <dev-install-instructions>` of `scanpy`.; 

Instructions: 
1. Analyze the content and the attribute description.
2. Determine if the content accurately reflects the intended quality attribute in this context.
3. If it does, label it as `true_positive: true`; if not, mark it as a `true_positive: false`.
4. If the content consists only of logs with no other text, mark it as a `true_positive: false`. 
4. If the content partially consists of logs, focus on analyzing remaining text. 
5. Add `reasoning` why the content is a true or false positive.
",True,"The content provided discusses setting up pre-commit hooks for code style checks and creating branches for feature development, which are related to deployment considerations such as automation and workflow management. While not directly about deploying software into an operational environment, these practices contribute indirectly to deployability by maintaining code quality and ensuring smooth deployments."
Deployability,"ally making the release. 1. Go to GitHub’s [releases][] page; 2. Click “Draft a new release”; 3. Click “Choose a tag” and type the version of the tag you want to release, such as `1.9.6`; 4. Click “**+ Create new tag: 1.\<minor>.\<patch>** on publish”; 5. If the version is a *pre-release* version, such as `1.7.0rc1` or `1.10.0a1`, tick the “Set as a pre-release” checkbox. [releases]: https://github.com/scverse/scanpy/releases. ## After making a release. After *any* release has been made:. - Create a new release notes file for the next bugfix release.; This should be included in both dev and stable branches.; - Create a milestone for the next release (in case you made a bugfix release) or releases (in case of a major/minor release).; For bugfix releases, this should have `on-merge: backport to 0.<minor>.x`,; so the [meeseeksdev][] bot will create a backport PR. See {doc}`versioning` for more info.; - Clear out and close the milestone you just made a release for. After a *major* or *minor* release has been made:. - Tweet about it! Announce it on Zulip! Announce it on Discourse! Think about making a bot for this! Maybe actually do that?; - Create a new release notes file for the next minor release. This should only be added to the dev branch.; - Tag the development branch. If you just released `1.7.0`, this would be `1.8.0.dev0`.; - Create a new branch for this release series, like `1.7.x`. This should get a new release notes file. [meeseeksdev]: https://meeseeksbox.github.io. ## Debugging the build process. If you changed something about the build process (e.g. [Hatchling’s build configuration][hatch-build]),; or something about the package’s structure,; you might want to manually check if the build and upload process behaves as expected:. ```shell; # Clear out old distributions; rm -r dist. # Build source distribution and wheel both; python -m build. # Now check those build artifacts; twine check dist/*. # List the wheel archive’s contents; bsdtar -tf dist/*.whl. ```.",release,MatchSource.DOCS,scverse,scanpy,1.10.2,https://github.com/scverse/scanpy/tree/1.10.2/docs/dev/release.md:1192,release,1192,docs/dev/release.md,https://scanpy.readthedocs.io,https://github.com/scverse/scanpy/tree/1.10.2/docs/dev/release.md,1,['release'],['release'],"The capability of software to be deployed into an operational environment with predictable time and effort, including options for rollback if needed. Key aspects include automation, deployment speed, and deployment granularity.","
You are an expert in evaluating and categorizing quality attributes in software engineering. You possess the necessary skills to distinguish sentences that clearly relate to a given quality attribute from those that do not. 

Evaluate whether the content accurately aligns with its associated quality attribute, given the context provided. Your goal is to determine if the content makes sense in relation to the quality attribute description or if it is a false positive.

Data:

Quality Attribute: Deployability
Attribute Description: The capability of software to be deployed into an operational environment with predictable time and effort, including options for rollback if needed. Key aspects include automation, deployment speed, and deployment granularity.
Content: ally making the release. 1. Go to GitHub’s [releases][] page; 2. Click “Draft a new release”; 3. Click “Choose a tag” and type the version of the tag you want to release, such as `1.9.6`; 4. Click “**+ Create new tag: 1.\<minor>.\<patch>** on publish”; 5. If the version is a *pre-release* version, such as `1.7.0rc1` or `1.10.0a1`, tick the “Set as a pre-release” checkbox. [releases]: https://github.com/scverse/scanpy/releases. ## After making a release. After *any* release has been made:. - Create a new release notes file for the next bugfix release.; This should be included in both dev and stable branches.; - Create a milestone for the next release (in case you made a bugfix release) or releases (in case of a major/minor release).; For bugfix releases, this should have `on-merge: backport to 0.<minor>.x`,; so the [meeseeksdev][] bot will create a backport PR. See {doc}`versioning` for more info.; - Clear out and close the milestone you just made a release for. After a *major* or *minor* release has been made:. - Tweet about it! Announce it on Zulip! Announce it on Discourse! Think about making a bot for this! Maybe actually do that?; - Create a new release notes file for the next minor release. This should only be added to the dev branch.; - Tag the development branch. If you just released `1.7.0`, this would be `1.8.0.dev0`.; - Create a new branch for this release series, like `1.7.x`. This should get a new release notes file. [meeseeksdev]: https://meeseeksbox.github.io. ## Debugging the build process. If you changed something about the build process (e.g. [Hatchling’s build configuration][hatch-build]),; or something about the package’s structure,; you might want to manually check if the build and upload process behaves as expected:. ```shell; # Clear out old distributions; rm -r dist. # Build source distribution and wheel both; python -m build. # Now check those build artifacts; twine check dist/*. # List the wheel archive’s contents; bsdtar -tf dist/*.whl. ```.

Instructions: 
1. Analyze the content and the attribute description.
2. Determine if the content accurately reflects the intended quality attribute in this context.
3. If it does, label it as `true_positive: true`; if not, mark it as a `true_positive: false`.
4. If the content consists only of logs with no other text, mark it as a `true_positive: false`. 
4. If the content partially consists of logs, focus on analyzing remaining text. 
5. Add `reasoning` why the content is a true or false positive.
",True,"The content describes steps for creating and managing releases, which are related to deployability as deployment involves releasing software into an operational environment. Steps include creating release tags, setting pre-releases, managing milestones, announcing releases, etc. These directly tie into the key aspects of deployability, such as automation, deployment speed, and deployment granularity through proper tagging and process management."
Deployability,"cs. Dependencies for building the documentation for scanpy can be installed with `pip install -e ""scanpy[doc]""`. To build the docs, enter the `docs` directory and run `make html`. After this process completes you can take a look at the docs by opening `scanpy/docs/_build/html/index.html`. Your browser and Sphinx cache docs which have been built previously.; Sometimes these caches are not invalidated when you've updated the docs.; If docs are not updating the way you expect, first try ""force reloading"" your browser page – e.g. reload the page without using the cache.; Next, if problems persist, clear the sphinx cache and try building them again (`make clean` from `docs` directory). ```{note}; If you've cloned the repository pre 1.8.0, you may need to be more thorough in cleaning.; If you run into warnings try removing all untracked files in the docs directory.; ```. ## Adding to the docs. For any user-visible changes, please make sure a note has been added to the release notes for the relevant version so we can credit you!; These files are found in the `docs/release-notes/` directory.; We recommend waiting on this until your PR is close to done since this can often causes merge conflicts. Once you've added a new function to the documentation, you'll need to make sure there is a link somewhere in the documentation site pointing to it.; This should be added to `docs/api.md` under a relevant heading. For tutorials and more in depth examples, consider adding a notebook to [scanpy-tutorials](https://github.com/scverse/scanpy-tutorials/). The tutorials are tied to this repository via a submodule. To update the submodule, run `git submodule update --remote` from the root of the repository. Subsequently, commit and push the changes in a PR. This should be done before each release to ensure the tutorials are up to date. ## docstrings format. We use the numpydoc style for writing docstrings.; We'd primarily suggest looking at existing docstrings for examples, but the [napolean",release,MatchSource.DOCS,scverse,scanpy,1.10.2,https://github.com/scverse/scanpy/tree/1.10.2/docs/dev/documentation.md:1034,release,1034,docs/dev/documentation.md,https://scanpy.readthedocs.io,https://github.com/scverse/scanpy/tree/1.10.2/docs/dev/documentation.md,2,['release'],"['release', 'release-notes']","The capability of software to be deployed into an operational environment with predictable time and effort, including options for rollback if needed. Key aspects include automation, deployment speed, and deployment granularity.","
You are an expert in evaluating and categorizing quality attributes in software engineering. You possess the necessary skills to distinguish sentences that clearly relate to a given quality attribute from those that do not. 

Evaluate whether the content accurately aligns with its associated quality attribute, given the context provided. Your goal is to determine if the content makes sense in relation to the quality attribute description or if it is a false positive.

Data:

Quality Attribute: Deployability
Attribute Description: The capability of software to be deployed into an operational environment with predictable time and effort, including options for rollback if needed. Key aspects include automation, deployment speed, and deployment granularity.
Content: cs. Dependencies for building the documentation for scanpy can be installed with `pip install -e ""scanpy[doc]""`. To build the docs, enter the `docs` directory and run `make html`. After this process completes you can take a look at the docs by opening `scanpy/docs/_build/html/index.html`. Your browser and Sphinx cache docs which have been built previously.; Sometimes these caches are not invalidated when you've updated the docs.; If docs are not updating the way you expect, first try ""force reloading"" your browser page – e.g. reload the page without using the cache.; Next, if problems persist, clear the sphinx cache and try building them again (`make clean` from `docs` directory). ```{note}; If you've cloned the repository pre 1.8.0, you may need to be more thorough in cleaning.; If you run into warnings try removing all untracked files in the docs directory.; ```. ## Adding to the docs. For any user-visible changes, please make sure a note has been added to the release notes for the relevant version so we can credit you!; These files are found in the `docs/release-notes/` directory.; We recommend waiting on this until your PR is close to done since this can often causes merge conflicts. Once you've added a new function to the documentation, you'll need to make sure there is a link somewhere in the documentation site pointing to it.; This should be added to `docs/api.md` under a relevant heading. For tutorials and more in depth examples, consider adding a notebook to [scanpy-tutorials](https://github.com/scverse/scanpy-tutorials/). The tutorials are tied to this repository via a submodule. To update the submodule, run `git submodule update --remote` from the root of the repository. Subsequently, commit and push the changes in a PR. This should be done before each release to ensure the tutorials are up to date. ## docstrings format. We use the numpydoc style for writing docstrings.; We'd primarily suggest looking at existing docstrings for examples, but the [napolean

Instructions: 
1. Analyze the content and the attribute description.
2. Determine if the content accurately reflects the intended quality attribute in this context.
3. If it does, label it as `true_positive: true`; if not, mark it as a `true_positive: false`.
4. If the content consists only of logs with no other text, mark it as a `true_positive: false`. 
4. If the content partially consists of logs, focus on analyzing remaining text. 
5. Add `reasoning` why the content is a true or false positive.
",True,"The provided content seems to be related to documentation and building process for the software. It includes instructions on installing dependencies for documentation, building documentation using Makefile commands, and clearing caches. This aligns with deployability in that it ensures that the documentation can be built and deployed correctly, which is part of making the software deployable."
Deployability,"d type the version of the tag you want to release, such as `1.9.6`; 4. Click “**+ Create new tag: 1.\<minor>.\<patch>** on publish”; 5. If the version is a *pre-release* version, such as `1.7.0rc1` or `1.10.0a1`, tick the “Set as a pre-release” checkbox. [releases]: https://github.com/scverse/scanpy/releases. ## After making a release. After *any* release has been made:. - Create a new release notes file for the next bugfix release.; This should be included in both dev and stable branches.; - Create a milestone for the next release (in case you made a bugfix release) or releases (in case of a major/minor release).; For bugfix releases, this should have `on-merge: backport to 0.<minor>.x`,; so the [meeseeksdev][] bot will create a backport PR. See {doc}`versioning` for more info.; - Clear out and close the milestone you just made a release for. After a *major* or *minor* release has been made:. - Tweet about it! Announce it on Zulip! Announce it on Discourse! Think about making a bot for this! Maybe actually do that?; - Create a new release notes file for the next minor release. This should only be added to the dev branch.; - Tag the development branch. If you just released `1.7.0`, this would be `1.8.0.dev0`.; - Create a new branch for this release series, like `1.7.x`. This should get a new release notes file. [meeseeksdev]: https://meeseeksbox.github.io. ## Debugging the build process. If you changed something about the build process (e.g. [Hatchling’s build configuration][hatch-build]),; or something about the package’s structure,; you might want to manually check if the build and upload process behaves as expected:. ```shell; # Clear out old distributions; rm -r dist. # Build source distribution and wheel both; python -m build. # Now check those build artifacts; twine check dist/*. # List the wheel archive’s contents; bsdtar -tf dist/*.whl. ```. You can also upload the package to <test.pypi.org> ([tutorial][testpypi tutorial]). [testpypi tutorial]: https://packa",release,MatchSource.DOCS,scverse,scanpy,1.10.2,https://github.com/scverse/scanpy/tree/1.10.2/docs/dev/release.md:1357,release,1357,docs/dev/release.md,https://scanpy.readthedocs.io,https://github.com/scverse/scanpy/tree/1.10.2/docs/dev/release.md,2,['release'],['release'],"The capability of software to be deployed into an operational environment with predictable time and effort, including options for rollback if needed. Key aspects include automation, deployment speed, and deployment granularity.","
You are an expert in evaluating and categorizing quality attributes in software engineering. You possess the necessary skills to distinguish sentences that clearly relate to a given quality attribute from those that do not. 

Evaluate whether the content accurately aligns with its associated quality attribute, given the context provided. Your goal is to determine if the content makes sense in relation to the quality attribute description or if it is a false positive.

Data:

Quality Attribute: Deployability
Attribute Description: The capability of software to be deployed into an operational environment with predictable time and effort, including options for rollback if needed. Key aspects include automation, deployment speed, and deployment granularity.
Content: d type the version of the tag you want to release, such as `1.9.6`; 4. Click “**+ Create new tag: 1.\<minor>.\<patch>** on publish”; 5. If the version is a *pre-release* version, such as `1.7.0rc1` or `1.10.0a1`, tick the “Set as a pre-release” checkbox. [releases]: https://github.com/scverse/scanpy/releases. ## After making a release. After *any* release has been made:. - Create a new release notes file for the next bugfix release.; This should be included in both dev and stable branches.; - Create a milestone for the next release (in case you made a bugfix release) or releases (in case of a major/minor release).; For bugfix releases, this should have `on-merge: backport to 0.<minor>.x`,; so the [meeseeksdev][] bot will create a backport PR. See {doc}`versioning` for more info.; - Clear out and close the milestone you just made a release for. After a *major* or *minor* release has been made:. - Tweet about it! Announce it on Zulip! Announce it on Discourse! Think about making a bot for this! Maybe actually do that?; - Create a new release notes file for the next minor release. This should only be added to the dev branch.; - Tag the development branch. If you just released `1.7.0`, this would be `1.8.0.dev0`.; - Create a new branch for this release series, like `1.7.x`. This should get a new release notes file. [meeseeksdev]: https://meeseeksbox.github.io. ## Debugging the build process. If you changed something about the build process (e.g. [Hatchling’s build configuration][hatch-build]),; or something about the package’s structure,; you might want to manually check if the build and upload process behaves as expected:. ```shell; # Clear out old distributions; rm -r dist. # Build source distribution and wheel both; python -m build. # Now check those build artifacts; twine check dist/*. # List the wheel archive’s contents; bsdtar -tf dist/*.whl. ```. You can also upload the package to <test.pypi.org> ([tutorial][testpypi tutorial]). [testpypi tutorial]: https://packa

Instructions: 
1. Analyze the content and the attribute description.
2. Determine if the content accurately reflects the intended quality attribute in this context.
3. If it does, label it as `true_positive: true`; if not, mark it as a `true_positive: false`.
4. If the content consists only of logs with no other text, mark it as a `true_positive: false`. 
4. If the content partially consists of logs, focus on analyzing remaining text. 
5. Add `reasoning` why the content is a true or false positive.
",True,"The content provided is about creating and managing software releases, including tagging versions, setting pre-releases, and updating milestones. These are all aspects related to deployability because they deal with how releases are deployed and managed in an operational environment. The steps described ensure that deployments can be done predictably and efficiently, which aligns with the key aspects of deployability such as automation, deployment speed, and deployment granularity."
Deployability,"en] {cite:p}`Traag2019`. (dev-install-instructions)=. ## Development Version. To work with the latest version [on GitHub]: clone the repository and `cd` into its root directory. ```shell; gh repo clone scverse/scanpy; cd scanpy; ```. If you are using `pip>=21.3`, an editable install can be made:. ```shell; pip install -e '.[dev,test]'; ```. If you want to let [conda] handle the installations of dependencies, do:. ```shell; pipx install beni; beni pyproject.toml > environment.yml; conda env create -f environment.yml; conda activate scanpy; pip install -e '.[dev,doc,test]'; ```. For instructions on how to work with the code, see the {ref}`contribution guide <contribution-guide>`. ## Docker. If you're using [Docker], you can use e.g. the image [gcfntnu/scanpy] from Docker Hub. ## Troubleshooting. If you get a `Permission denied` error, never use `sudo pip`. Instead, use virtual environments or:. ```shell; pip install --user scanpy; ```. **On MacOS**, if **not** using `conda`, you might need to install the C core of igraph via homebrew first. - `brew install igraph`. - If igraph still fails to install, see the question on [compiling igraph].; Alternatively consider installing gcc via `brew install gcc --without-multilib`; and exporting the required variables:. ```shell; export CC=""/usr/local/Cellar/gcc/X.x.x/bin/gcc-X""; export CXX=""/usr/local/Cellar/gcc/X.x.x/bin/gcc-X""; ```. where `X` and `x` refers to the version of `gcc`;; in my case, the path reads `/usr/local/Cellar/gcc/6.3.0_1/bin/gcc-6`. **On Windows**, there also often problems installing compiled packages such as `igraph`,; but you can find precompiled packages on Christoph Gohlke’s [unofficial binaries].; Download those and install them using `pip install ./path/to/file.whl`. (conda)=. ## Installing Miniconda. After downloading [Miniconda], in a unix shell (Linux, Mac), run. ```shell; cd DOWNLOAD_DIR; chmod +x Miniconda3-latest-VERSION.sh; ./Miniconda3-latest-VERSION.sh; ```. and accept all suggestions.; Either",install,MatchSource.DOCS,scverse,scanpy,1.10.2,https://github.com/scverse/scanpy/tree/1.10.2/docs/installation.md:1645,install,1645,docs/installation.md,https://scanpy.readthedocs.io,https://github.com/scverse/scanpy/tree/1.10.2/docs/installation.md,1,['install'],['install'],"The capability of software to be deployed into an operational environment with predictable time and effort, including options for rollback if needed. Key aspects include automation, deployment speed, and deployment granularity.","
You are an expert in evaluating and categorizing quality attributes in software engineering. You possess the necessary skills to distinguish sentences that clearly relate to a given quality attribute from those that do not. 

Evaluate whether the content accurately aligns with its associated quality attribute, given the context provided. Your goal is to determine if the content makes sense in relation to the quality attribute description or if it is a false positive.

Data:

Quality Attribute: Deployability
Attribute Description: The capability of software to be deployed into an operational environment with predictable time and effort, including options for rollback if needed. Key aspects include automation, deployment speed, and deployment granularity.
Content: en] {cite:p}`Traag2019`. (dev-install-instructions)=. ## Development Version. To work with the latest version [on GitHub]: clone the repository and `cd` into its root directory. ```shell; gh repo clone scverse/scanpy; cd scanpy; ```. If you are using `pip>=21.3`, an editable install can be made:. ```shell; pip install -e '.[dev,test]'; ```. If you want to let [conda] handle the installations of dependencies, do:. ```shell; pipx install beni; beni pyproject.toml > environment.yml; conda env create -f environment.yml; conda activate scanpy; pip install -e '.[dev,doc,test]'; ```. For instructions on how to work with the code, see the {ref}`contribution guide <contribution-guide>`. ## Docker. If you're using [Docker], you can use e.g. the image [gcfntnu/scanpy] from Docker Hub. ## Troubleshooting. If you get a `Permission denied` error, never use `sudo pip`. Instead, use virtual environments or:. ```shell; pip install --user scanpy; ```. **On MacOS**, if **not** using `conda`, you might need to install the C core of igraph via homebrew first. - `brew install igraph`. - If igraph still fails to install, see the question on [compiling igraph].; Alternatively consider installing gcc via `brew install gcc --without-multilib`; and exporting the required variables:. ```shell; export CC=""/usr/local/Cellar/gcc/X.x.x/bin/gcc-X""; export CXX=""/usr/local/Cellar/gcc/X.x.x/bin/gcc-X""; ```. where `X` and `x` refers to the version of `gcc`;; in my case, the path reads `/usr/local/Cellar/gcc/6.3.0_1/bin/gcc-6`. **On Windows**, there also often problems installing compiled packages such as `igraph`,; but you can find precompiled packages on Christoph Gohlke’s [unofficial binaries].; Download those and install them using `pip install ./path/to/file.whl`. (conda)=. ## Installing Miniconda. After downloading [Miniconda], in a unix shell (Linux, Mac), run. ```shell; cd DOWNLOAD_DIR; chmod +x Miniconda3-latest-VERSION.sh; ./Miniconda3-latest-VERSION.sh; ```. and accept all suggestions.; Either

Instructions: 
1. Analyze the content and the attribute description.
2. Determine if the content accurately reflects the intended quality attribute in this context.
3. If it does, label it as `true_positive: true`; if not, mark it as a `true_positive: false`.
4. If the content consists only of logs with no other text, mark it as a `true_positive: false`. 
4. If the content partially consists of logs, focus on analyzing remaining text. 
5. Add `reasoning` why the content is a true or false positive.
",True,"The content provided discusses instructions for installing and setting up software in various environments like development, Docker, troubleshooting installation issues, and installing Miniconda. These instructions are related to making the software deployable by providing clear steps on how to install and configure dependencies, which contributes to the deployability of the software. The key aspects mentioned in the attribute description include automation, deployment speed, and deployment granularity, and while the content does not directly mention these, it does provide configuration steps that support these aspects indirectly."
Deployability,"epts like *pre-releases* and applications thereof. ## Actually making the release. 1. Go to GitHub’s [releases][] page; 2. Click “Draft a new release”; 3. Click “Choose a tag” and type the version of the tag you want to release, such as `1.9.6`; 4. Click “**+ Create new tag: 1.\<minor>.\<patch>** on publish”; 5. If the version is a *pre-release* version, such as `1.7.0rc1` or `1.10.0a1`, tick the “Set as a pre-release” checkbox. [releases]: https://github.com/scverse/scanpy/releases. ## After making a release. After *any* release has been made:. - Create a new release notes file for the next bugfix release.; This should be included in both dev and stable branches.; - Create a milestone for the next release (in case you made a bugfix release) or releases (in case of a major/minor release).; For bugfix releases, this should have `on-merge: backport to 0.<minor>.x`,; so the [meeseeksdev][] bot will create a backport PR. See {doc}`versioning` for more info.; - Clear out and close the milestone you just made a release for. After a *major* or *minor* release has been made:. - Tweet about it! Announce it on Zulip! Announce it on Discourse! Think about making a bot for this! Maybe actually do that?; - Create a new release notes file for the next minor release. This should only be added to the dev branch.; - Tag the development branch. If you just released `1.7.0`, this would be `1.8.0.dev0`.; - Create a new branch for this release series, like `1.7.x`. This should get a new release notes file. [meeseeksdev]: https://meeseeksbox.github.io. ## Debugging the build process. If you changed something about the build process (e.g. [Hatchling’s build configuration][hatch-build]),; or something about the package’s structure,; you might want to manually check if the build and upload process behaves as expected:. ```shell; # Clear out old distributions; rm -r dist. # Build source distribution and wheel both; python -m build. # Now check those build artifacts; twine check dist/*. # Lis",release,MatchSource.DOCS,scverse,scanpy,1.10.2,https://github.com/scverse/scanpy/tree/1.10.2/docs/dev/release.md:1152,release,1152,docs/dev/release.md,https://scanpy.readthedocs.io,https://github.com/scverse/scanpy/tree/1.10.2/docs/dev/release.md,1,['release'],['release'],"The capability of software to be deployed into an operational environment with predictable time and effort, including options for rollback if needed. Key aspects include automation, deployment speed, and deployment granularity.","
You are an expert in evaluating and categorizing quality attributes in software engineering. You possess the necessary skills to distinguish sentences that clearly relate to a given quality attribute from those that do not. 

Evaluate whether the content accurately aligns with its associated quality attribute, given the context provided. Your goal is to determine if the content makes sense in relation to the quality attribute description or if it is a false positive.

Data:

Quality Attribute: Deployability
Attribute Description: The capability of software to be deployed into an operational environment with predictable time and effort, including options for rollback if needed. Key aspects include automation, deployment speed, and deployment granularity.
Content: epts like *pre-releases* and applications thereof. ## Actually making the release. 1. Go to GitHub’s [releases][] page; 2. Click “Draft a new release”; 3. Click “Choose a tag” and type the version of the tag you want to release, such as `1.9.6`; 4. Click “**+ Create new tag: 1.\<minor>.\<patch>** on publish”; 5. If the version is a *pre-release* version, such as `1.7.0rc1` or `1.10.0a1`, tick the “Set as a pre-release” checkbox. [releases]: https://github.com/scverse/scanpy/releases. ## After making a release. After *any* release has been made:. - Create a new release notes file for the next bugfix release.; This should be included in both dev and stable branches.; - Create a milestone for the next release (in case you made a bugfix release) or releases (in case of a major/minor release).; For bugfix releases, this should have `on-merge: backport to 0.<minor>.x`,; so the [meeseeksdev][] bot will create a backport PR. See {doc}`versioning` for more info.; - Clear out and close the milestone you just made a release for. After a *major* or *minor* release has been made:. - Tweet about it! Announce it on Zulip! Announce it on Discourse! Think about making a bot for this! Maybe actually do that?; - Create a new release notes file for the next minor release. This should only be added to the dev branch.; - Tag the development branch. If you just released `1.7.0`, this would be `1.8.0.dev0`.; - Create a new branch for this release series, like `1.7.x`. This should get a new release notes file. [meeseeksdev]: https://meeseeksbox.github.io. ## Debugging the build process. If you changed something about the build process (e.g. [Hatchling’s build configuration][hatch-build]),; or something about the package’s structure,; you might want to manually check if the build and upload process behaves as expected:. ```shell; # Clear out old distributions; rm -r dist. # Build source distribution and wheel both; python -m build. # Now check those build artifacts; twine check dist/*. # Lis

Instructions: 
1. Analyze the content and the attribute description.
2. Determine if the content accurately reflects the intended quality attribute in this context.
3. If it does, label it as `true_positive: true`; if not, mark it as a `true_positive: false`.
4. If the content consists only of logs with no other text, mark it as a `true_positive: false`. 
4. If the content partially consists of logs, focus on analyzing remaining text. 
5. Add `reasoning` why the content is a true or false positive.
",True,"The content discusses releasing software via GitHub's process, including creating new tags and managing release notes. Deployability involves being able to deploy with predictable effort. Creating releases is directly related to deployment, so it aligns well with deployability."
Deployability,"equire prior computation of the graph:; `sc.pp.neighbors(adata, n_neighbors=5); sc.tl.louvain(adata)` instead of; previously `sc.tl.louvain(adata, n_neighbors=5)`; - install `numba` via `conda install numba`, which replaces cython; - the default connectivity measure (dpt will look different using default; settings) changed. setting `method='gauss'` in `sc.pp.neighbors` uses; gauss kernel connectivities and reproduces the previous behavior,; see, for instance in the example [paul15].; - namings of returned annotation have changed for less bloated AnnData; objects, which means that some of the unstructured annotation of old; AnnData files is not recognized anymore; - replace occurances of `group_by` with `groupby` (consistency with; `pandas`); - it is worth checking out the notebook examples to see changes, e.g.; the [seurat] example.; - upgrading scikit-learn from 0.18 to 0.19 changed the implementation of PCA,; some results might therefore look slightly different; ```. ```{rubric} Further updates; ```. - UMAP {cite:p}`McInnes2018` can serve as a first visualization of the data just as tSNE,; in contrast to tSNE, UMAP directly embeds the single-cell graph and is faster;; UMAP is also used for measuring connectivities and computing neighbors,; see {func}`~scanpy.pp.neighbors` {smaller}`A Wolf`; - graph abstraction: AGA is renamed to [PAGA](https://github.com/theislab/paga): {func}`~scanpy.tl.paga`; now,; it only measures connectivities between partitions of the single-cell graph,; pseudotime and clustering need to be computed separately via; {func}`~scanpy.tl.louvain` and {func}`~scanpy.tl.dpt`, the; connectivity measure has been improved {smaller}`A Wolf`; - logistic regression for finding marker genes; {func}`~scanpy.tl.rank_genes_groups` with parameter `method='logreg'` {smaller}`A Wolf`; - {func}`~scanpy.tl.louvain` provides a better implementation for; reclustering via `restrict_to` {smaller}`A Wolf`; - scanpy no longer modifies rcParams upon import, call; `setti",update,MatchSource.DOCS,scverse,scanpy,1.10.2,https://github.com/scverse/scanpy/tree/1.10.2/docs/release-notes/1.0.0.md:1711,updates,1711,docs/release-notes/1.0.0.md,https://scanpy.readthedocs.io,https://github.com/scverse/scanpy/tree/1.10.2/docs/release-notes/1.0.0.md,1,['update'],['updates'],"The capability of software to be deployed into an operational environment with predictable time and effort, including options for rollback if needed. Key aspects include automation, deployment speed, and deployment granularity.","
You are an expert in evaluating and categorizing quality attributes in software engineering. You possess the necessary skills to distinguish sentences that clearly relate to a given quality attribute from those that do not. 

Evaluate whether the content accurately aligns with its associated quality attribute, given the context provided. Your goal is to determine if the content makes sense in relation to the quality attribute description or if it is a false positive.

Data:

Quality Attribute: Deployability
Attribute Description: The capability of software to be deployed into an operational environment with predictable time and effort, including options for rollback if needed. Key aspects include automation, deployment speed, and deployment granularity.
Content: equire prior computation of the graph:; `sc.pp.neighbors(adata, n_neighbors=5); sc.tl.louvain(adata)` instead of; previously `sc.tl.louvain(adata, n_neighbors=5)`; - install `numba` via `conda install numba`, which replaces cython; - the default connectivity measure (dpt will look different using default; settings) changed. setting `method='gauss'` in `sc.pp.neighbors` uses; gauss kernel connectivities and reproduces the previous behavior,; see, for instance in the example [paul15].; - namings of returned annotation have changed for less bloated AnnData; objects, which means that some of the unstructured annotation of old; AnnData files is not recognized anymore; - replace occurances of `group_by` with `groupby` (consistency with; `pandas`); - it is worth checking out the notebook examples to see changes, e.g.; the [seurat] example.; - upgrading scikit-learn from 0.18 to 0.19 changed the implementation of PCA,; some results might therefore look slightly different; ```. ```{rubric} Further updates; ```. - UMAP {cite:p}`McInnes2018` can serve as a first visualization of the data just as tSNE,; in contrast to tSNE, UMAP directly embeds the single-cell graph and is faster;; UMAP is also used for measuring connectivities and computing neighbors,; see {func}`~scanpy.pp.neighbors` {smaller}`A Wolf`; - graph abstraction: AGA is renamed to [PAGA](https://github.com/theislab/paga): {func}`~scanpy.tl.paga`; now,; it only measures connectivities between partitions of the single-cell graph,; pseudotime and clustering need to be computed separately via; {func}`~scanpy.tl.louvain` and {func}`~scanpy.tl.dpt`, the; connectivity measure has been improved {smaller}`A Wolf`; - logistic regression for finding marker genes; {func}`~scanpy.tl.rank_genes_groups` with parameter `method='logreg'` {smaller}`A Wolf`; - {func}`~scanpy.tl.louvain` provides a better implementation for; reclustering via `restrict_to` {smaller}`A Wolf`; - scanpy no longer modifies rcParams upon import, call; `setti

Instructions: 
1. Analyze the content and the attribute description.
2. Determine if the content accurately reflects the intended quality attribute in this context.
3. If it does, label it as `true_positive: true`; if not, mark it as a `true_positive: false`.
4. If the content consists only of logs with no other text, mark it as a `true_positive: false`. 
4. If the content partially consists of logs, focus on analyzing remaining text. 
5. Add `reasoning` why the content is a true or false positive.
",True,"The content provided discusses updates to a software tool or process related to deployment considerations such as installing dependencies (numba), changes in functionality (connectivity measures using gauss kernel), name changes in annotations, and code syntax changes (group_by vs groupby). These are all aspects of deployability because they relate to the ability to install, configure, and deploy software reliably. The mention of UMAP and PCA updates might not directly relate but could be part of the deployment process or analysis that affects deployability."
Deployability,"er}`C Rands`; - Extended examples for differential expression plotting. {pr}`1529` {smaller}`F Ramirez`; \- See {func}`~scanpy.pl.rank_genes_groups_dotplot` or {func}`~scanpy.pl.rank_genes_groups_matrixplot` for examples. ```{rubric} Bug fixes; ```. - Fix {func}`scanpy.pl.paga_path` `TypeError` with recent versions of anndata {pr}`1047` {smaller}`P Angerer`; - Fix detection of whether IPython is running {pr}`1844` {smaller}`I Virshup`; - Fixed reproducibility of {func}`scanpy.tl.diffmap` (added random_state) {pr}`1858` {smaller}`I Kucinski`; - Fixed errors and warnings from embedding plots with small numbers of categories after `sns.set_palette` was called {pr}`1886` {smaller}`I Virshup`; - Fixed handling of `gene_symbols` argument in a number of `sc.pl.rank_genes_groups*` functions {pr}`1529` {smaller}`F Ramirez` {smaller}`I Virshup`; - Fixed handling of `use_raw` for `sc.tl.rank_genes_groups` when no `.raw` is present {pr}`1895` {smaller}`I Virshup`; - {func}`scanpy.pl.rank_genes_groups_violin` now works for `raw=False` {pr}`1669` {smaller}`M van den Beek`; - {func}`scanpy.pl.dotplot` now uses `smallest_dot` argument correctly {pr}`1771` {smaller}`S Flemming`. ```{rubric} Development processes; ```. - Switched to [flit] for building and deploying the package, a simple tool with an easy to understand command line interface and metadata {pr}`1527` {smaller}`P Angerer`; - Use [pre-commit](https://pre-commit.com) for style checks {pr}`1684` {pr}`1848` {smaller}`L Heumos` {smaller}`I Virshup`. ```{rubric} Deprecations; ```. - Dropped support for Python 3.6. [More details here](https://numpy.org/neps/nep-0029-deprecation_policy.html). {pr}`1897` {smaller}`I Virshup`; - Deprecated `layers` and `layers_norm` kwargs to {func}`~scanpy.pp.normalize_total` {pr}`1667` {smaller}`I Virshup`; - Deprecated `MulticoreTSNE` backend for {func}`scanpy.tl.tsne` {pr}`1854` {smaller}`I Virshup`. [docsearch]: https://docsearch.algolia.com/; [flit]: https://flit.readthedocs.io/en/latest/; ",deploy,MatchSource.DOCS,scverse,scanpy,1.10.2,https://github.com/scverse/scanpy/tree/1.10.2/docs/release-notes/1.8.0.md:3608,deploying,3608,docs/release-notes/1.8.0.md,https://scanpy.readthedocs.io,https://github.com/scverse/scanpy/tree/1.10.2/docs/release-notes/1.8.0.md,1,['deploy'],['deploying'],"The capability of software to be deployed into an operational environment with predictable time and effort, including options for rollback if needed. Key aspects include automation, deployment speed, and deployment granularity.","
You are an expert in evaluating and categorizing quality attributes in software engineering. You possess the necessary skills to distinguish sentences that clearly relate to a given quality attribute from those that do not. 

Evaluate whether the content accurately aligns with its associated quality attribute, given the context provided. Your goal is to determine if the content makes sense in relation to the quality attribute description or if it is a false positive.

Data:

Quality Attribute: Deployability
Attribute Description: The capability of software to be deployed into an operational environment with predictable time and effort, including options for rollback if needed. Key aspects include automation, deployment speed, and deployment granularity.
Content: er}`C Rands`; - Extended examples for differential expression plotting. {pr}`1529` {smaller}`F Ramirez`; \- See {func}`~scanpy.pl.rank_genes_groups_dotplot` or {func}`~scanpy.pl.rank_genes_groups_matrixplot` for examples. ```{rubric} Bug fixes; ```. - Fix {func}`scanpy.pl.paga_path` `TypeError` with recent versions of anndata {pr}`1047` {smaller}`P Angerer`; - Fix detection of whether IPython is running {pr}`1844` {smaller}`I Virshup`; - Fixed reproducibility of {func}`scanpy.tl.diffmap` (added random_state) {pr}`1858` {smaller}`I Kucinski`; - Fixed errors and warnings from embedding plots with small numbers of categories after `sns.set_palette` was called {pr}`1886` {smaller}`I Virshup`; - Fixed handling of `gene_symbols` argument in a number of `sc.pl.rank_genes_groups*` functions {pr}`1529` {smaller}`F Ramirez` {smaller}`I Virshup`; - Fixed handling of `use_raw` for `sc.tl.rank_genes_groups` when no `.raw` is present {pr}`1895` {smaller}`I Virshup`; - {func}`scanpy.pl.rank_genes_groups_violin` now works for `raw=False` {pr}`1669` {smaller}`M van den Beek`; - {func}`scanpy.pl.dotplot` now uses `smallest_dot` argument correctly {pr}`1771` {smaller}`S Flemming`. ```{rubric} Development processes; ```. - Switched to [flit] for building and deploying the package, a simple tool with an easy to understand command line interface and metadata {pr}`1527` {smaller}`P Angerer`; - Use [pre-commit](https://pre-commit.com) for style checks {pr}`1684` {pr}`1848` {smaller}`L Heumos` {smaller}`I Virshup`. ```{rubric} Deprecations; ```. - Dropped support for Python 3.6. [More details here](https://numpy.org/neps/nep-0029-deprecation_policy.html). {pr}`1897` {smaller}`I Virshup`; - Deprecated `layers` and `layers_norm` kwargs to {func}`~scanpy.pp.normalize_total` {pr}`1667` {smaller}`I Virshup`; - Deprecated `MulticoreTSNE` backend for {func}`scanpy.tl.tsne` {pr}`1854` {smaller}`I Virshup`. [docsearch]: https://docsearch.algolia.com/; [flit]: https://flit.readthedocs.io/en/latest/; 

Instructions: 
1. Analyze the content and the attribute description.
2. Determine if the content accurately reflects the intended quality attribute in this context.
3. If it does, label it as `true_positive: true`; if not, mark it as a `true_positive: false`.
4. If the content consists only of logs with no other text, mark it as a `true_positive: false`. 
4. If the content partially consists of logs, focus on analyzing remaining text. 
5. Add `reasoning` why the content is a true or false positive.
",True,"The content provided includes information about bug fixes, reproducibility improvements, and changes in deployment tools (flit) which are related to making software deployable with predictable time and effort. Additionally, it mentions fixes for potential deployment issues like handling raw data properly and the use of raw=False for certain functions. The mention of using flit for building and deploying the package also relates to deployment capabilities as it's a tool that aids in packaging and deployment. Therefore, this content aligns with Deployability as it addresses improvements that facilitate easier and more reliable deployment processes."
Deployability,"etween spots. - [bento](https://bento-tools.readthedocs.io/en/latest/) 🍱 {small}`UC San Diego`. > Bento is an accessible Python toolkit for performing subcellular analysis of spatial transcriptomics data. ### Multimodal integration. - [MUON](https://muon.readthedocs.io/en/latest/) and [MuData](https://mudata.readthedocs.io/en/latest/) {small}`EMBL/ DKFZ`. > MUON, and it's associated data structure MuData are designed to organise, analyse, visualise, and exchange multimodal data.; > MUON enables a range of analyses for ATAC and CITE-seq, from data preprocessing to flexible multi-omics alignment. ### Adaptive immune receptor repertoire (AIRR). - [scirpy](https://github.com/icbi-lab/scirpy) {small}`Medical University of Innsbruck`. > scirpy is a scanpy extension to expore single-cell T-cell receptor (TCR) and B-cell receptor (BCR) repertoires. - [dandelion](https://github.com/zktuong/dandelion) {small}`University of Cambridge`. > dandelion is a single-cell BCR-seq network analysis package that integrates with transcriptomic data analyzed via scanpy. ### Long reads. - [Swan](https://freese.gitbook.io/swan/tutorials/data_processing) {small}`UC Irvine`. > Swan is a Python library designed for the analysis and visualization of transcriptomes, especially with long-read transcriptomes in mind.; > Users can add transcriptomes from different datasets and explore distinct splicing and expression patterns across datasets. ## Analysis methods. ### scvi-tools. - [scvi-tools](https://github.com/YosefLab/scvi-tools) {small}`Berkeley`. > scvi-tools hosts deep generative models (DGM) for end-to-end analysis of single-cell; > omics data (e.g., scVI, scANVI, totalVI). It also contains several primitives to build novel DGMs. ### Fate mapping. - [CellRank](https://cellrank.org) {small}`Helmholtz Munich`. > CellRank is a framework to uncover cellular dynamics based on single-cell data.; > It incorporates modalities such as RNA velocity, pseudotime, developmental potential, real-time inform",integrat,MatchSource.DOCS,scverse,scanpy,1.10.2,https://github.com/scverse/scanpy/tree/1.10.2/docs/ecosystem.md:2866,integrates,2866,docs/ecosystem.md,https://scanpy.readthedocs.io,https://github.com/scverse/scanpy/tree/1.10.2/docs/ecosystem.md,1,['integrat'],['integrates'],"The capability of software to be deployed into an operational environment with predictable time and effort, including options for rollback if needed. Key aspects include automation, deployment speed, and deployment granularity.","
You are an expert in evaluating and categorizing quality attributes in software engineering. You possess the necessary skills to distinguish sentences that clearly relate to a given quality attribute from those that do not. 

Evaluate whether the content accurately aligns with its associated quality attribute, given the context provided. Your goal is to determine if the content makes sense in relation to the quality attribute description or if it is a false positive.

Data:

Quality Attribute: Deployability
Attribute Description: The capability of software to be deployed into an operational environment with predictable time and effort, including options for rollback if needed. Key aspects include automation, deployment speed, and deployment granularity.
Content: etween spots. - [bento](https://bento-tools.readthedocs.io/en/latest/) 🍱 {small}`UC San Diego`. > Bento is an accessible Python toolkit for performing subcellular analysis of spatial transcriptomics data. ### Multimodal integration. - [MUON](https://muon.readthedocs.io/en/latest/) and [MuData](https://mudata.readthedocs.io/en/latest/) {small}`EMBL/ DKFZ`. > MUON, and it's associated data structure MuData are designed to organise, analyse, visualise, and exchange multimodal data.; > MUON enables a range of analyses for ATAC and CITE-seq, from data preprocessing to flexible multi-omics alignment. ### Adaptive immune receptor repertoire (AIRR). - [scirpy](https://github.com/icbi-lab/scirpy) {small}`Medical University of Innsbruck`. > scirpy is a scanpy extension to expore single-cell T-cell receptor (TCR) and B-cell receptor (BCR) repertoires. - [dandelion](https://github.com/zktuong/dandelion) {small}`University of Cambridge`. > dandelion is a single-cell BCR-seq network analysis package that integrates with transcriptomic data analyzed via scanpy. ### Long reads. - [Swan](https://freese.gitbook.io/swan/tutorials/data_processing) {small}`UC Irvine`. > Swan is a Python library designed for the analysis and visualization of transcriptomes, especially with long-read transcriptomes in mind.; > Users can add transcriptomes from different datasets and explore distinct splicing and expression patterns across datasets. ## Analysis methods. ### scvi-tools. - [scvi-tools](https://github.com/YosefLab/scvi-tools) {small}`Berkeley`. > scvi-tools hosts deep generative models (DGM) for end-to-end analysis of single-cell; > omics data (e.g., scVI, scANVI, totalVI). It also contains several primitives to build novel DGMs. ### Fate mapping. - [CellRank](https://cellrank.org) {small}`Helmholtz Munich`. > CellRank is a framework to uncover cellular dynamics based on single-cell data.; > It incorporates modalities such as RNA velocity, pseudotime, developmental potential, real-time inform

Instructions: 
1. Analyze the content and the attribute description.
2. Determine if the content accurately reflects the intended quality attribute in this context.
3. If it does, label it as `true_positive: true`; if not, mark it as a `true_positive: false`.
4. If the content consists only of logs with no other text, mark it as a `true_positive: false`. 
4. If the content partially consists of logs, focus on analyzing remaining text. 
5. Add `reasoning` why the content is a true or false positive.
",False,"The content discusses various tools and libraries for data analysis in the context of biology and medicine. While it mentions specific Python packages like scirpy, dandelion, scvi-tools, etc., there's no direct link to deployment aspects such as automation, deployment speed, or deployment granularity. The focus is on analytical capabilities rather than deployment. Therefore, this content does not accurately reflect the Deployability quality attribute and should be marked as false positive."
Deployability,"g`s (like `dict`).; Always specify what these contain, e.g. `{'a': (1, 2)}` → `Mapping[str, Tuple[int, int]]`.; If you can’t use one of those, use a concrete class like `AnnData`.; If your parameter only accepts an enumeration of strings, specify them like so: `Literal['elem-1', 'elem-2']`. ### `Returns` section. There are three types of return sections – prose, tuple, and a mix of both. 1. Prose is for simple cases.; 2. Tuple return sections are formatted like parameters. Other than in numpydoc, each tuple is first characterized by the identifier and *not* by its type. Provide type annotation in the function header.; 3. Mix of prose and tuple is relevant in complicated cases, e.g. when you want to describe that you *added something as annotation to an \`AnnData\` object*. #### Examples. For simple cases, use prose as in; {func}`~scanpy.pp.normalize_total`. ```rst; Returns; -------; Returns dictionary with normalized copies of `adata.X` and `adata.layers`; or updates `adata` with normalized versions of the original; `adata.X` and `adata.layers`, depending on `inplace`.; ```. For tuple return values, you can use the standard numpydoc way of populating it,; e.g. as in {func}`~scanpy.pp.calculate_qc_metrics`.; Do not add types in the docstring, but specify them in the function signature:. ```python; def myfunc(...) -> tuple[int, str]:; """"""; ...; Returns; -------; one_identifier; Description.; second_identifier; Description 2.; """"""; ...; ```. Many functions also just modify parts of the passed AnnData object, like e.g. {func}`~scanpy.tl.dpt`.; You can then combine prose and lists to best describe what happens. ```rst; Returns; -------; Depending on `copy`, returns or updates `adata` with the following fields. If `n_branchings==0`, no field `dpt_groups` will be written. dpt_pseudotime : :class:`~pandas.Series` (`adata.obs`, dtype `float`); Array of dim (number of samples) that stores the pseudotime of each; cell, that is, the DPT distance with respect to the root cell.; d",update,MatchSource.DOCS,scverse,scanpy,1.10.2,https://github.com/scverse/scanpy/tree/1.10.2/docs/dev/documentation.md:5517,updates,5517,docs/dev/documentation.md,https://scanpy.readthedocs.io,https://github.com/scverse/scanpy/tree/1.10.2/docs/dev/documentation.md,1,['update'],['updates'],"The capability of software to be deployed into an operational environment with predictable time and effort, including options for rollback if needed. Key aspects include automation, deployment speed, and deployment granularity.","
You are an expert in evaluating and categorizing quality attributes in software engineering. You possess the necessary skills to distinguish sentences that clearly relate to a given quality attribute from those that do not. 

Evaluate whether the content accurately aligns with its associated quality attribute, given the context provided. Your goal is to determine if the content makes sense in relation to the quality attribute description or if it is a false positive.

Data:

Quality Attribute: Deployability
Attribute Description: The capability of software to be deployed into an operational environment with predictable time and effort, including options for rollback if needed. Key aspects include automation, deployment speed, and deployment granularity.
Content: g`s (like `dict`).; Always specify what these contain, e.g. `{'a': (1, 2)}` → `Mapping[str, Tuple[int, int]]`.; If you can’t use one of those, use a concrete class like `AnnData`.; If your parameter only accepts an enumeration of strings, specify them like so: `Literal['elem-1', 'elem-2']`. ### `Returns` section. There are three types of return sections – prose, tuple, and a mix of both. 1. Prose is for simple cases.; 2. Tuple return sections are formatted like parameters. Other than in numpydoc, each tuple is first characterized by the identifier and *not* by its type. Provide type annotation in the function header.; 3. Mix of prose and tuple is relevant in complicated cases, e.g. when you want to describe that you *added something as annotation to an \`AnnData\` object*. #### Examples. For simple cases, use prose as in; {func}`~scanpy.pp.normalize_total`. ```rst; Returns; -------; Returns dictionary with normalized copies of `adata.X` and `adata.layers`; or updates `adata` with normalized versions of the original; `adata.X` and `adata.layers`, depending on `inplace`.; ```. For tuple return values, you can use the standard numpydoc way of populating it,; e.g. as in {func}`~scanpy.pp.calculate_qc_metrics`.; Do not add types in the docstring, but specify them in the function signature:. ```python; def myfunc(...) -> tuple[int, str]:; """"""; ...; Returns; -------; one_identifier; Description.; second_identifier; Description 2.; """"""; ...; ```. Many functions also just modify parts of the passed AnnData object, like e.g. {func}`~scanpy.tl.dpt`.; You can then combine prose and lists to best describe what happens. ```rst; Returns; -------; Depending on `copy`, returns or updates `adata` with the following fields. If `n_branchings==0`, no field `dpt_groups` will be written. dpt_pseudotime : :class:`~pandas.Series` (`adata.obs`, dtype `float`); Array of dim (number of samples) that stores the pseudotime of each; cell, that is, the DPT distance with respect to the root cell.; d

Instructions: 
1. Analyze the content and the attribute description.
2. Determine if the content accurately reflects the intended quality attribute in this context.
3. If it does, label it as `true_positive: true`; if not, mark it as a `true_positive: false`.
4. If the content consists only of logs with no other text, mark it as a `true_positive: false`. 
4. If the content partially consists of logs, focus on analyzing remaining text. 
5. Add `reasoning` why the content is a true or false positive.
",True,"The provided content discusses return types and formatting in the context of a function's documentation. It mentions different scenarios like prose returns, tuple returns, and mixed cases, providing examples for each type. This directly relates to deployability as it covers how functions can be documented with clear returns sections, aiding in the deployment process by ensuring others understand function outputs."
Deployability,"h as `1.7.0rc1` or `1.10.0a1`, tick the “Set as a pre-release” checkbox. [releases]: https://github.com/scverse/scanpy/releases. ## After making a release. After *any* release has been made:. - Create a new release notes file for the next bugfix release.; This should be included in both dev and stable branches.; - Create a milestone for the next release (in case you made a bugfix release) or releases (in case of a major/minor release).; For bugfix releases, this should have `on-merge: backport to 0.<minor>.x`,; so the [meeseeksdev][] bot will create a backport PR. See {doc}`versioning` for more info.; - Clear out and close the milestone you just made a release for. After a *major* or *minor* release has been made:. - Tweet about it! Announce it on Zulip! Announce it on Discourse! Think about making a bot for this! Maybe actually do that?; - Create a new release notes file for the next minor release. This should only be added to the dev branch.; - Tag the development branch. If you just released `1.7.0`, this would be `1.8.0.dev0`.; - Create a new branch for this release series, like `1.7.x`. This should get a new release notes file. [meeseeksdev]: https://meeseeksbox.github.io. ## Debugging the build process. If you changed something about the build process (e.g. [Hatchling’s build configuration][hatch-build]),; or something about the package’s structure,; you might want to manually check if the build and upload process behaves as expected:. ```shell; # Clear out old distributions; rm -r dist. # Build source distribution and wheel both; python -m build. # Now check those build artifacts; twine check dist/*. # List the wheel archive’s contents; bsdtar -tf dist/*.whl. ```. You can also upload the package to <test.pypi.org> ([tutorial][testpypi tutorial]). [testpypi tutorial]: https://packaging.python.org/en/latest/tutorials/packaging-projects/#uploading-the-distribution-archives. ```; twine upload --repository testpypi dist/*; ```. The above approximates what the [publ",release,MatchSource.DOCS,scverse,scanpy,1.10.2,https://github.com/scverse/scanpy/tree/1.10.2/docs/dev/release.md:1492,released,1492,docs/dev/release.md,https://scanpy.readthedocs.io,https://github.com/scverse/scanpy/tree/1.10.2/docs/dev/release.md,1,['release'],['released'],"The capability of software to be deployed into an operational environment with predictable time and effort, including options for rollback if needed. Key aspects include automation, deployment speed, and deployment granularity.","
You are an expert in evaluating and categorizing quality attributes in software engineering. You possess the necessary skills to distinguish sentences that clearly relate to a given quality attribute from those that do not. 

Evaluate whether the content accurately aligns with its associated quality attribute, given the context provided. Your goal is to determine if the content makes sense in relation to the quality attribute description or if it is a false positive.

Data:

Quality Attribute: Deployability
Attribute Description: The capability of software to be deployed into an operational environment with predictable time and effort, including options for rollback if needed. Key aspects include automation, deployment speed, and deployment granularity.
Content: h as `1.7.0rc1` or `1.10.0a1`, tick the “Set as a pre-release” checkbox. [releases]: https://github.com/scverse/scanpy/releases. ## After making a release. After *any* release has been made:. - Create a new release notes file for the next bugfix release.; This should be included in both dev and stable branches.; - Create a milestone for the next release (in case you made a bugfix release) or releases (in case of a major/minor release).; For bugfix releases, this should have `on-merge: backport to 0.<minor>.x`,; so the [meeseeksdev][] bot will create a backport PR. See {doc}`versioning` for more info.; - Clear out and close the milestone you just made a release for. After a *major* or *minor* release has been made:. - Tweet about it! Announce it on Zulip! Announce it on Discourse! Think about making a bot for this! Maybe actually do that?; - Create a new release notes file for the next minor release. This should only be added to the dev branch.; - Tag the development branch. If you just released `1.7.0`, this would be `1.8.0.dev0`.; - Create a new branch for this release series, like `1.7.x`. This should get a new release notes file. [meeseeksdev]: https://meeseeksbox.github.io. ## Debugging the build process. If you changed something about the build process (e.g. [Hatchling’s build configuration][hatch-build]),; or something about the package’s structure,; you might want to manually check if the build and upload process behaves as expected:. ```shell; # Clear out old distributions; rm -r dist. # Build source distribution and wheel both; python -m build. # Now check those build artifacts; twine check dist/*. # List the wheel archive’s contents; bsdtar -tf dist/*.whl. ```. You can also upload the package to <test.pypi.org> ([tutorial][testpypi tutorial]). [testpypi tutorial]: https://packaging.python.org/en/latest/tutorials/packaging-projects/#uploading-the-distribution-archives. ```; twine upload --repository testpypi dist/*; ```. The above approximates what the [publ

Instructions: 
1. Analyze the content and the attribute description.
2. Determine if the content accurately reflects the intended quality attribute in this context.
3. If it does, label it as `true_positive: true`; if not, mark it as a `true_positive: false`.
4. If the content consists only of logs with no other text, mark it as a `true_positive: false`. 
4. If the content partially consists of logs, focus on analyzing remaining text. 
5. Add `reasoning` why the content is a true or false positive.
",True,"The content discusses release management procedures such as creating new release notes, tagging development branches, and handling bug fixes through specific commands and workflows. These activities directly relate to ensuring that software can be deployed predictably and efficiently, which aligns with Deployability. The mention of automation (e.g., using a bot for backporting) also supports the key aspect of deployment automation."
Deployability,"hon 3.6 (or later), consider; installing [Miniconda] (see [Installing Miniconda]). Then run:. ```shell; conda install -c conda-forge scanpy python-igraph leidenalg; ```. Pull Scanpy from [PyPI](https://pypi.org/project/scanpy) (consider using `pip3` to access Python 3):. ```shell; pip install scanpy; ```. ## PyPI only. If you prefer to exclusively use PyPI run:. ```shell; pip install 'scanpy[leiden]'; ```. The extra `[leiden]` installs two packages that are needed for popular; parts of scanpy but aren't requirements: [igraph] {cite:p}`Csardi2006` and [leiden] {cite:p}`Traag2019`. (dev-install-instructions)=. ## Development Version. To work with the latest version [on GitHub]: clone the repository and `cd` into its root directory. ```shell; gh repo clone scverse/scanpy; cd scanpy; ```. If you are using `pip>=21.3`, an editable install can be made:. ```shell; pip install -e '.[dev,test]'; ```. If you want to let [conda] handle the installations of dependencies, do:. ```shell; pipx install beni; beni pyproject.toml > environment.yml; conda env create -f environment.yml; conda activate scanpy; pip install -e '.[dev,doc,test]'; ```. For instructions on how to work with the code, see the {ref}`contribution guide <contribution-guide>`. ## Docker. If you're using [Docker], you can use e.g. the image [gcfntnu/scanpy] from Docker Hub. ## Troubleshooting. If you get a `Permission denied` error, never use `sudo pip`. Instead, use virtual environments or:. ```shell; pip install --user scanpy; ```. **On MacOS**, if **not** using `conda`, you might need to install the C core of igraph via homebrew first. - `brew install igraph`. - If igraph still fails to install, see the question on [compiling igraph].; Alternatively consider installing gcc via `brew install gcc --without-multilib`; and exporting the required variables:. ```shell; export CC=""/usr/local/Cellar/gcc/X.x.x/bin/gcc-X""; export CXX=""/usr/local/Cellar/gcc/X.x.x/bin/gcc-X""; ```. where `X` and `x` refers to the version of `",install,MatchSource.DOCS,scverse,scanpy,1.10.2,https://github.com/scverse/scanpy/tree/1.10.2/docs/installation.md:1071,install,1071,docs/installation.md,https://scanpy.readthedocs.io,https://github.com/scverse/scanpy/tree/1.10.2/docs/installation.md,1,['install'],['install'],"The capability of software to be deployed into an operational environment with predictable time and effort, including options for rollback if needed. Key aspects include automation, deployment speed, and deployment granularity.","
You are an expert in evaluating and categorizing quality attributes in software engineering. You possess the necessary skills to distinguish sentences that clearly relate to a given quality attribute from those that do not. 

Evaluate whether the content accurately aligns with its associated quality attribute, given the context provided. Your goal is to determine if the content makes sense in relation to the quality attribute description or if it is a false positive.

Data:

Quality Attribute: Deployability
Attribute Description: The capability of software to be deployed into an operational environment with predictable time and effort, including options for rollback if needed. Key aspects include automation, deployment speed, and deployment granularity.
Content: hon 3.6 (or later), consider; installing [Miniconda] (see [Installing Miniconda]). Then run:. ```shell; conda install -c conda-forge scanpy python-igraph leidenalg; ```. Pull Scanpy from [PyPI](https://pypi.org/project/scanpy) (consider using `pip3` to access Python 3):. ```shell; pip install scanpy; ```. ## PyPI only. If you prefer to exclusively use PyPI run:. ```shell; pip install 'scanpy[leiden]'; ```. The extra `[leiden]` installs two packages that are needed for popular; parts of scanpy but aren't requirements: [igraph] {cite:p}`Csardi2006` and [leiden] {cite:p}`Traag2019`. (dev-install-instructions)=. ## Development Version. To work with the latest version [on GitHub]: clone the repository and `cd` into its root directory. ```shell; gh repo clone scverse/scanpy; cd scanpy; ```. If you are using `pip>=21.3`, an editable install can be made:. ```shell; pip install -e '.[dev,test]'; ```. If you want to let [conda] handle the installations of dependencies, do:. ```shell; pipx install beni; beni pyproject.toml > environment.yml; conda env create -f environment.yml; conda activate scanpy; pip install -e '.[dev,doc,test]'; ```. For instructions on how to work with the code, see the {ref}`contribution guide <contribution-guide>`. ## Docker. If you're using [Docker], you can use e.g. the image [gcfntnu/scanpy] from Docker Hub. ## Troubleshooting. If you get a `Permission denied` error, never use `sudo pip`. Instead, use virtual environments or:. ```shell; pip install --user scanpy; ```. **On MacOS**, if **not** using `conda`, you might need to install the C core of igraph via homebrew first. - `brew install igraph`. - If igraph still fails to install, see the question on [compiling igraph].; Alternatively consider installing gcc via `brew install gcc --without-multilib`; and exporting the required variables:. ```shell; export CC=""/usr/local/Cellar/gcc/X.x.x/bin/gcc-X""; export CXX=""/usr/local/Cellar/gcc/X.x.x/bin/gcc-X""; ```. where `X` and `x` refers to the version of `

Instructions: 
1. Analyze the content and the attribute description.
2. Determine if the content accurately reflects the intended quality attribute in this context.
3. If it does, label it as `true_positive: true`; if not, mark it as a `true_positive: false`.
4. If the content consists only of logs with no other text, mark it as a `true_positive: false`. 
4. If the content partially consists of logs, focus on analyzing remaining text. 
5. Add `reasoning` why the content is a true or false positive.
",True,"The content in question discusses installation methods for software packages such as Conda and pip, which are related to deployment practices. It also covers using Docker for deployment and troubleshooting installation issues, all of which are aspects of deployability including automation and deployment speed."
Deployability,"l; conda install -c conda-forge scanpy python-igraph leidenalg; ```. Pull Scanpy from [PyPI](https://pypi.org/project/scanpy) (consider using `pip3` to access Python 3):. ```shell; pip install scanpy; ```. ## PyPI only. If you prefer to exclusively use PyPI run:. ```shell; pip install 'scanpy[leiden]'; ```. The extra `[leiden]` installs two packages that are needed for popular; parts of scanpy but aren't requirements: [igraph] {cite:p}`Csardi2006` and [leiden] {cite:p}`Traag2019`. (dev-install-instructions)=. ## Development Version. To work with the latest version [on GitHub]: clone the repository and `cd` into its root directory. ```shell; gh repo clone scverse/scanpy; cd scanpy; ```. If you are using `pip>=21.3`, an editable install can be made:. ```shell; pip install -e '.[dev,test]'; ```. If you want to let [conda] handle the installations of dependencies, do:. ```shell; pipx install beni; beni pyproject.toml > environment.yml; conda env create -f environment.yml; conda activate scanpy; pip install -e '.[dev,doc,test]'; ```. For instructions on how to work with the code, see the {ref}`contribution guide <contribution-guide>`. ## Docker. If you're using [Docker], you can use e.g. the image [gcfntnu/scanpy] from Docker Hub. ## Troubleshooting. If you get a `Permission denied` error, never use `sudo pip`. Instead, use virtual environments or:. ```shell; pip install --user scanpy; ```. **On MacOS**, if **not** using `conda`, you might need to install the C core of igraph via homebrew first. - `brew install igraph`. - If igraph still fails to install, see the question on [compiling igraph].; Alternatively consider installing gcc via `brew install gcc --without-multilib`; and exporting the required variables:. ```shell; export CC=""/usr/local/Cellar/gcc/X.x.x/bin/gcc-X""; export CXX=""/usr/local/Cellar/gcc/X.x.x/bin/gcc-X""; ```. where `X` and `x` refers to the version of `gcc`;; in my case, the path reads `/usr/local/Cellar/gcc/6.3.0_1/bin/gcc-6`. **On Windows**, there al",install,MatchSource.DOCS,scverse,scanpy,1.10.2,https://github.com/scverse/scanpy/tree/1.10.2/docs/installation.md:1188,install,1188,docs/installation.md,https://scanpy.readthedocs.io,https://github.com/scverse/scanpy/tree/1.10.2/docs/installation.md,1,['install'],['install'],"The capability of software to be deployed into an operational environment with predictable time and effort, including options for rollback if needed. Key aspects include automation, deployment speed, and deployment granularity.","
You are an expert in evaluating and categorizing quality attributes in software engineering. You possess the necessary skills to distinguish sentences that clearly relate to a given quality attribute from those that do not. 

Evaluate whether the content accurately aligns with its associated quality attribute, given the context provided. Your goal is to determine if the content makes sense in relation to the quality attribute description or if it is a false positive.

Data:

Quality Attribute: Deployability
Attribute Description: The capability of software to be deployed into an operational environment with predictable time and effort, including options for rollback if needed. Key aspects include automation, deployment speed, and deployment granularity.
Content: l; conda install -c conda-forge scanpy python-igraph leidenalg; ```. Pull Scanpy from [PyPI](https://pypi.org/project/scanpy) (consider using `pip3` to access Python 3):. ```shell; pip install scanpy; ```. ## PyPI only. If you prefer to exclusively use PyPI run:. ```shell; pip install 'scanpy[leiden]'; ```. The extra `[leiden]` installs two packages that are needed for popular; parts of scanpy but aren't requirements: [igraph] {cite:p}`Csardi2006` and [leiden] {cite:p}`Traag2019`. (dev-install-instructions)=. ## Development Version. To work with the latest version [on GitHub]: clone the repository and `cd` into its root directory. ```shell; gh repo clone scverse/scanpy; cd scanpy; ```. If you are using `pip>=21.3`, an editable install can be made:. ```shell; pip install -e '.[dev,test]'; ```. If you want to let [conda] handle the installations of dependencies, do:. ```shell; pipx install beni; beni pyproject.toml > environment.yml; conda env create -f environment.yml; conda activate scanpy; pip install -e '.[dev,doc,test]'; ```. For instructions on how to work with the code, see the {ref}`contribution guide <contribution-guide>`. ## Docker. If you're using [Docker], you can use e.g. the image [gcfntnu/scanpy] from Docker Hub. ## Troubleshooting. If you get a `Permission denied` error, never use `sudo pip`. Instead, use virtual environments or:. ```shell; pip install --user scanpy; ```. **On MacOS**, if **not** using `conda`, you might need to install the C core of igraph via homebrew first. - `brew install igraph`. - If igraph still fails to install, see the question on [compiling igraph].; Alternatively consider installing gcc via `brew install gcc --without-multilib`; and exporting the required variables:. ```shell; export CC=""/usr/local/Cellar/gcc/X.x.x/bin/gcc-X""; export CXX=""/usr/local/Cellar/gcc/X.x.x/bin/gcc-X""; ```. where `X` and `x` refers to the version of `gcc`;; in my case, the path reads `/usr/local/Cellar/gcc/6.3.0_1/bin/gcc-6`. **On Windows**, there al

Instructions: 
1. Analyze the content and the attribute description.
2. Determine if the content accurately reflects the intended quality attribute in this context.
3. If it does, label it as `true_positive: true`; if not, mark it as a `true_positive: false`.
4. If the content consists only of logs with no other text, mark it as a `true_positive: false`. 
4. If the content partially consists of logs, focus on analyzing remaining text. 
5. Add `reasoning` why the content is a true or false positive.
",False,"The content provided contains installation instructions for a Python package called scanpy, which includes using pip and conda. It also mentions dependencies like igraph and leidenalg. However, these are not directly related to deployability. Deployability focuses on the ability to deploy software into an operational environment with options for rollback, automation, and deployment speed. The content discusses installation steps, package versions, and development setup using pip and conda, which are about installability rather than deployment. Therefore, this does not align with the Deployability quality attribute."
Deployability,"ll; $ gh repo fork scverse/scanpy --clone --remote; ```. This will fork the repo to your github account, create a clone of the repo on your current machine, add our repository as a remote, and set the `main` development branch to track our repository. To do this manually, first make a fork of the repository by clicking the ""fork"" button on our main github package. Then, on your machine, run:. ```shell; # Clone your fork of the repository (substitute in your username); git clone https://github.com/{your-username}/scanpy.git; # Enter the cloned repository; cd scanpy; # Add our repository as a remote; git remote add upstream https://github.com/scverse/scanpy.git; # git branch --set-upstream-to ""upstream/main""; ```. ### `pre-commit`. We use [precommit](https://pre-commit.com) to run some styling checks in an automated way.; We also test against these checks, so make sure you follow them!. You can install pre-commit with:. ```shell; pip install pre-commit; ```. You can then install it to run while developing here with:. ```shell; pre-commit install; ```. From the root of the repo. If you choose not to run the hooks on each commit, you can run them manually with `pre-commit run --files={your files}`. (creating-a-branch)=. ### Creating a branch for your feature. All development should occur in branches dedicated to the particular work being done.; Additionally, unless you are a maintainer, all changes should be directed at the `main` branch.; You can create a branch with:. ```shell; git checkout main # Starting from the main branch; git pull # Syncing with the repo; git checkout -b {your-branch-name} # Making and changing to the new branch; ```. (open-a-pr)=. ### Open a pull request. When you're ready to have your code reviewed, push your changes up to your fork:. ```shell; # The first time you push the branch, you'll need to tell git where; git push --set-upstream origin {your-branch-name}; # After that, just use; git push; ```. And open a pull request by going to the mai",install,MatchSource.DOCS,scverse,scanpy,1.10.2,https://github.com/scverse/scanpy/tree/1.10.2/docs/dev/getting-set-up.md:1869,install,1869,docs/dev/getting-set-up.md,https://scanpy.readthedocs.io,https://github.com/scverse/scanpy/tree/1.10.2/docs/dev/getting-set-up.md,1,['install'],['install'],"The capability of software to be deployed into an operational environment with predictable time and effort, including options for rollback if needed. Key aspects include automation, deployment speed, and deployment granularity.","
You are an expert in evaluating and categorizing quality attributes in software engineering. You possess the necessary skills to distinguish sentences that clearly relate to a given quality attribute from those that do not. 

Evaluate whether the content accurately aligns with its associated quality attribute, given the context provided. Your goal is to determine if the content makes sense in relation to the quality attribute description or if it is a false positive.

Data:

Quality Attribute: Deployability
Attribute Description: The capability of software to be deployed into an operational environment with predictable time and effort, including options for rollback if needed. Key aspects include automation, deployment speed, and deployment granularity.
Content: ll; $ gh repo fork scverse/scanpy --clone --remote; ```. This will fork the repo to your github account, create a clone of the repo on your current machine, add our repository as a remote, and set the `main` development branch to track our repository. To do this manually, first make a fork of the repository by clicking the ""fork"" button on our main github package. Then, on your machine, run:. ```shell; # Clone your fork of the repository (substitute in your username); git clone https://github.com/{your-username}/scanpy.git; # Enter the cloned repository; cd scanpy; # Add our repository as a remote; git remote add upstream https://github.com/scverse/scanpy.git; # git branch --set-upstream-to ""upstream/main""; ```. ### `pre-commit`. We use [precommit](https://pre-commit.com) to run some styling checks in an automated way.; We also test against these checks, so make sure you follow them!. You can install pre-commit with:. ```shell; pip install pre-commit; ```. You can then install it to run while developing here with:. ```shell; pre-commit install; ```. From the root of the repo. If you choose not to run the hooks on each commit, you can run them manually with `pre-commit run --files={your files}`. (creating-a-branch)=. ### Creating a branch for your feature. All development should occur in branches dedicated to the particular work being done.; Additionally, unless you are a maintainer, all changes should be directed at the `main` branch.; You can create a branch with:. ```shell; git checkout main # Starting from the main branch; git pull # Syncing with the repo; git checkout -b {your-branch-name} # Making and changing to the new branch; ```. (open-a-pr)=. ### Open a pull request. When you're ready to have your code reviewed, push your changes up to your fork:. ```shell; # The first time you push the branch, you'll need to tell git where; git push --set-upstream origin {your-branch-name}; # After that, just use; git push; ```. And open a pull request by going to the mai

Instructions: 
1. Analyze the content and the attribute description.
2. Determine if the content accurately reflects the intended quality attribute in this context.
3. If it does, label it as `true_positive: true`; if not, mark it as a `true_positive: false`.
4. If the content consists only of logs with no other text, mark it as a `true_positive: false`. 
4. If the content partially consists of logs, focus on analyzing remaining text. 
5. Add `reasoning` why the content is a true or false positive.
",False,"The provided content includes steps for setting up Git repositories and managing branches, which are related to deployment processes and collaboration practices. However, Deployability focuses more specifically on deployment mechanics, automation, and rollback options rather than general repository setup. While repository management is part of software development, it's not directly tied to deployability attributes."
Deployability,"mancellatlas.usegalaxy.eu) for the Human Cell Atlas [\[tweet\]](https://twitter.com/ExpressionAtlas/status/1151797848469626881) {small}`U Freiburg`; - the [Expression Atlas](https://www.ebi.ac.uk/gxa/sc/help.html) {small}`EMBL-EBI`. ## Modalities. ### RNA velocity. - [scVelo](https://scvelo.org) {small}`Helmholtz Munich`. ### Spatial Transcriptomics Tools. - [squidpy](https://squidpy.readthedocs.io/en/stable/) {small}`Helmholtz Munich`. > Squidpy is a comprehensive toolkit for working with spatial single cell omics data. - [PASTE](https://github.com/raphael-group/paste) {small}`Princeton`. > PASTE is a computational method to align and integrate spatial transcriptomics data across adjacent tissue slices by leveraging both gene expression similarity and spatial distances between spots. - [bento](https://bento-tools.readthedocs.io/en/latest/) 🍱 {small}`UC San Diego`. > Bento is an accessible Python toolkit for performing subcellular analysis of spatial transcriptomics data. ### Multimodal integration. - [MUON](https://muon.readthedocs.io/en/latest/) and [MuData](https://mudata.readthedocs.io/en/latest/) {small}`EMBL/ DKFZ`. > MUON, and it's associated data structure MuData are designed to organise, analyse, visualise, and exchange multimodal data.; > MUON enables a range of analyses for ATAC and CITE-seq, from data preprocessing to flexible multi-omics alignment. ### Adaptive immune receptor repertoire (AIRR). - [scirpy](https://github.com/icbi-lab/scirpy) {small}`Medical University of Innsbruck`. > scirpy is a scanpy extension to expore single-cell T-cell receptor (TCR) and B-cell receptor (BCR) repertoires. - [dandelion](https://github.com/zktuong/dandelion) {small}`University of Cambridge`. > dandelion is a single-cell BCR-seq network analysis package that integrates with transcriptomic data analyzed via scanpy. ### Long reads. - [Swan](https://freese.gitbook.io/swan/tutorials/data_processing) {small}`UC Irvine`. > Swan is a Python library designed for the analysis",integrat,MatchSource.DOCS,scverse,scanpy,1.10.2,https://github.com/scverse/scanpy/tree/1.10.2/docs/ecosystem.md:2080,integration,2080,docs/ecosystem.md,https://scanpy.readthedocs.io,https://github.com/scverse/scanpy/tree/1.10.2/docs/ecosystem.md,1,['integrat'],['integration'],"The capability of software to be deployed into an operational environment with predictable time and effort, including options for rollback if needed. Key aspects include automation, deployment speed, and deployment granularity.","
You are an expert in evaluating and categorizing quality attributes in software engineering. You possess the necessary skills to distinguish sentences that clearly relate to a given quality attribute from those that do not. 

Evaluate whether the content accurately aligns with its associated quality attribute, given the context provided. Your goal is to determine if the content makes sense in relation to the quality attribute description or if it is a false positive.

Data:

Quality Attribute: Deployability
Attribute Description: The capability of software to be deployed into an operational environment with predictable time and effort, including options for rollback if needed. Key aspects include automation, deployment speed, and deployment granularity.
Content: mancellatlas.usegalaxy.eu) for the Human Cell Atlas [\[tweet\]](https://twitter.com/ExpressionAtlas/status/1151797848469626881) {small}`U Freiburg`; - the [Expression Atlas](https://www.ebi.ac.uk/gxa/sc/help.html) {small}`EMBL-EBI`. ## Modalities. ### RNA velocity. - [scVelo](https://scvelo.org) {small}`Helmholtz Munich`. ### Spatial Transcriptomics Tools. - [squidpy](https://squidpy.readthedocs.io/en/stable/) {small}`Helmholtz Munich`. > Squidpy is a comprehensive toolkit for working with spatial single cell omics data. - [PASTE](https://github.com/raphael-group/paste) {small}`Princeton`. > PASTE is a computational method to align and integrate spatial transcriptomics data across adjacent tissue slices by leveraging both gene expression similarity and spatial distances between spots. - [bento](https://bento-tools.readthedocs.io/en/latest/) 🍱 {small}`UC San Diego`. > Bento is an accessible Python toolkit for performing subcellular analysis of spatial transcriptomics data. ### Multimodal integration. - [MUON](https://muon.readthedocs.io/en/latest/) and [MuData](https://mudata.readthedocs.io/en/latest/) {small}`EMBL/ DKFZ`. > MUON, and it's associated data structure MuData are designed to organise, analyse, visualise, and exchange multimodal data.; > MUON enables a range of analyses for ATAC and CITE-seq, from data preprocessing to flexible multi-omics alignment. ### Adaptive immune receptor repertoire (AIRR). - [scirpy](https://github.com/icbi-lab/scirpy) {small}`Medical University of Innsbruck`. > scirpy is a scanpy extension to expore single-cell T-cell receptor (TCR) and B-cell receptor (BCR) repertoires. - [dandelion](https://github.com/zktuong/dandelion) {small}`University of Cambridge`. > dandelion is a single-cell BCR-seq network analysis package that integrates with transcriptomic data analyzed via scanpy. ### Long reads. - [Swan](https://freese.gitbook.io/swan/tutorials/data_processing) {small}`UC Irvine`. > Swan is a Python library designed for the analysis

Instructions: 
1. Analyze the content and the attribute description.
2. Determine if the content accurately reflects the intended quality attribute in this context.
3. If it does, label it as `true_positive: true`; if not, mark it as a `true_positive: false`.
4. If the content consists only of logs with no other text, mark it as a `true_positive: false`. 
4. If the content partially consists of logs, focus on analyzing remaining text. 
5. Add `reasoning` why the content is a true or false positive.
",False,"The content discusses various tools and methods related to spatial transcriptomics, multimodal integration, and single-cell analysis, which are aspects of deployability in terms of enabling deployment of analytical pipelines and tools for integration and analysis of datasets. However, the connection to deployability as per the quality attribute definition is indirect and not explicit. The primary focus is on functionality rather than deployment capabilities like automation or speed."
Deployability,model = SCANPY_PATH/sim_models/toggleswitch.txt; tmax = 100; branching = True; nrRealizations = 2; noiseObs = 0.01; noiseDyn = 0.001; step = 1; seed = 0; ,toggle,MatchSource.DOCS,scverse,scanpy,1.10.2,https://github.com/scverse/scanpy/tree/1.10.2/src/scanpy/sim_models/toggleswitch_params.txt:31,toggleswitch,31,src/scanpy/sim_models/toggleswitch_params.txt,https://scanpy.readthedocs.io,https://github.com/scverse/scanpy/tree/1.10.2/src/scanpy/sim_models/toggleswitch_params.txt,1,['toggle'],['toggleswitch'],"The capability of software to be deployed into an operational environment with predictable time and effort, including options for rollback if needed. Key aspects include automation, deployment speed, and deployment granularity.","
You are an expert in evaluating and categorizing quality attributes in software engineering. You possess the necessary skills to distinguish sentences that clearly relate to a given quality attribute from those that do not. 

Evaluate whether the content accurately aligns with its associated quality attribute, given the context provided. Your goal is to determine if the content makes sense in relation to the quality attribute description or if it is a false positive.

Data:

Quality Attribute: Deployability
Attribute Description: The capability of software to be deployed into an operational environment with predictable time and effort, including options for rollback if needed. Key aspects include automation, deployment speed, and deployment granularity.
Content: model = SCANPY_PATH/sim_models/toggleswitch.txt; tmax = 100; branching = True; nrRealizations = 2; noiseObs = 0.01; noiseDyn = 0.001; step = 1; seed = 0; 

Instructions: 
1. Analyze the content and the attribute description.
2. Determine if the content accurately reflects the intended quality attribute in this context.
3. If it does, label it as `true_positive: true`; if not, mark it as a `true_positive: false`.
4. If the content consists only of logs with no other text, mark it as a `true_positive: false`. 
4. If the content partially consists of logs, focus on analyzing remaining text. 
5. Add `reasoning` why the content is a true or false positive.
",False,"The provided code snippet contains parameters for model deployment including 'model = ...', which relates to deployment configuration. However, without additional context, it's unclear how these parameters tie directly to deployability aspects like automation, speed, or rollback mechanisms mentioned in the quality attribute description."
Deployability,"n` from `docs` directory). ```{note}; If you've cloned the repository pre 1.8.0, you may need to be more thorough in cleaning.; If you run into warnings try removing all untracked files in the docs directory.; ```. ## Adding to the docs. For any user-visible changes, please make sure a note has been added to the release notes for the relevant version so we can credit you!; These files are found in the `docs/release-notes/` directory.; We recommend waiting on this until your PR is close to done since this can often causes merge conflicts. Once you've added a new function to the documentation, you'll need to make sure there is a link somewhere in the documentation site pointing to it.; This should be added to `docs/api.md` under a relevant heading. For tutorials and more in depth examples, consider adding a notebook to [scanpy-tutorials](https://github.com/scverse/scanpy-tutorials/). The tutorials are tied to this repository via a submodule. To update the submodule, run `git submodule update --remote` from the root of the repository. Subsequently, commit and push the changes in a PR. This should be done before each release to ensure the tutorials are up to date. ## docstrings format. We use the numpydoc style for writing docstrings.; We'd primarily suggest looking at existing docstrings for examples, but the [napolean guide to numpy style docstrings](https://sphinxcontrib-napoleon.readthedocs.io/en/latest/example_numpy.html#example-numpy) is also a great source.; If you're unfamiliar with the reStructuredText (`rst`) markup format, [Sphinx has a useful primer](https://www.sphinx-doc.org/en/master/usage/restructuredtext/basics.html). Some key points:. - We have some custom sphinx extensions activated. When in doubt, try to copy the style of existing docstrings.; - We autopopulate type information in docstrings when possible, so just add the type information to signatures.; - When docs exist in the same file as code, line length restrictions still apply. In files which ",update,MatchSource.DOCS,scverse,scanpy,1.10.2,https://github.com/scverse/scanpy/tree/1.10.2/docs/dev/documentation.md:1677,update,1677,docs/dev/documentation.md,https://scanpy.readthedocs.io,https://github.com/scverse/scanpy/tree/1.10.2/docs/dev/documentation.md,2,['update'],['update'],"The capability of software to be deployed into an operational environment with predictable time and effort, including options for rollback if needed. Key aspects include automation, deployment speed, and deployment granularity.","
You are an expert in evaluating and categorizing quality attributes in software engineering. You possess the necessary skills to distinguish sentences that clearly relate to a given quality attribute from those that do not. 

Evaluate whether the content accurately aligns with its associated quality attribute, given the context provided. Your goal is to determine if the content makes sense in relation to the quality attribute description or if it is a false positive.

Data:

Quality Attribute: Deployability
Attribute Description: The capability of software to be deployed into an operational environment with predictable time and effort, including options for rollback if needed. Key aspects include automation, deployment speed, and deployment granularity.
Content: n` from `docs` directory). ```{note}; If you've cloned the repository pre 1.8.0, you may need to be more thorough in cleaning.; If you run into warnings try removing all untracked files in the docs directory.; ```. ## Adding to the docs. For any user-visible changes, please make sure a note has been added to the release notes for the relevant version so we can credit you!; These files are found in the `docs/release-notes/` directory.; We recommend waiting on this until your PR is close to done since this can often causes merge conflicts. Once you've added a new function to the documentation, you'll need to make sure there is a link somewhere in the documentation site pointing to it.; This should be added to `docs/api.md` under a relevant heading. For tutorials and more in depth examples, consider adding a notebook to [scanpy-tutorials](https://github.com/scverse/scanpy-tutorials/). The tutorials are tied to this repository via a submodule. To update the submodule, run `git submodule update --remote` from the root of the repository. Subsequently, commit and push the changes in a PR. This should be done before each release to ensure the tutorials are up to date. ## docstrings format. We use the numpydoc style for writing docstrings.; We'd primarily suggest looking at existing docstrings for examples, but the [napolean guide to numpy style docstrings](https://sphinxcontrib-napoleon.readthedocs.io/en/latest/example_numpy.html#example-numpy) is also a great source.; If you're unfamiliar with the reStructuredText (`rst`) markup format, [Sphinx has a useful primer](https://www.sphinx-doc.org/en/master/usage/restructuredtext/basics.html). Some key points:. - We have some custom sphinx extensions activated. When in doubt, try to copy the style of existing docstrings.; - We autopopulate type information in docstrings when possible, so just add the type information to signatures.; - When docs exist in the same file as code, line length restrictions still apply. In files which 

Instructions: 
1. Analyze the content and the attribute description.
2. Determine if the content accurately reflects the intended quality attribute in this context.
3. If it does, label it as `true_positive: true`; if not, mark it as a `true_positive: false`.
4. If the content consists only of logs with no other text, mark it as a `true_positive: false`. 
4. If the content partially consists of logs, focus on analyzing remaining text. 
5. Add `reasoning` why the content is a true or false positive.
",False,"The provided content seems to be related to documentation practices and guidelines within a software project, such as updating release notes, structuring docstrings, and managing tutorials. While these tasks are important for maintainability and user understanding, they don't directly address deployability concerns like deployment automation or speed. Therefore, this content doesn't align well with the Deployability quality attribute."
Deployability,"ng [GitHub's CLI](https://cli.github.com):. ```shell; $ gh repo fork scverse/scanpy --clone --remote; ```. This will fork the repo to your github account, create a clone of the repo on your current machine, add our repository as a remote, and set the `main` development branch to track our repository. To do this manually, first make a fork of the repository by clicking the ""fork"" button on our main github package. Then, on your machine, run:. ```shell; # Clone your fork of the repository (substitute in your username); git clone https://github.com/{your-username}/scanpy.git; # Enter the cloned repository; cd scanpy; # Add our repository as a remote; git remote add upstream https://github.com/scverse/scanpy.git; # git branch --set-upstream-to ""upstream/main""; ```. ### `pre-commit`. We use [precommit](https://pre-commit.com) to run some styling checks in an automated way.; We also test against these checks, so make sure you follow them!. You can install pre-commit with:. ```shell; pip install pre-commit; ```. You can then install it to run while developing here with:. ```shell; pre-commit install; ```. From the root of the repo. If you choose not to run the hooks on each commit, you can run them manually with `pre-commit run --files={your files}`. (creating-a-branch)=. ### Creating a branch for your feature. All development should occur in branches dedicated to the particular work being done.; Additionally, unless you are a maintainer, all changes should be directed at the `main` branch.; You can create a branch with:. ```shell; git checkout main # Starting from the main branch; git pull # Syncing with the repo; git checkout -b {your-branch-name} # Making and changing to the new branch; ```. (open-a-pr)=. ### Open a pull request. When you're ready to have your code reviewed, push your changes up to your fork:. ```shell; # The first time you push the branch, you'll need to tell git where; git push --set-upstream origin {your-branch-name}; # After that, just use; git push;",install,MatchSource.DOCS,scverse,scanpy,1.10.2,https://github.com/scverse/scanpy/tree/1.10.2/docs/dev/getting-set-up.md:1831,install,1831,docs/dev/getting-set-up.md,https://scanpy.readthedocs.io,https://github.com/scverse/scanpy/tree/1.10.2/docs/dev/getting-set-up.md,1,['install'],['install'],"The capability of software to be deployed into an operational environment with predictable time and effort, including options for rollback if needed. Key aspects include automation, deployment speed, and deployment granularity.","
You are an expert in evaluating and categorizing quality attributes in software engineering. You possess the necessary skills to distinguish sentences that clearly relate to a given quality attribute from those that do not. 

Evaluate whether the content accurately aligns with its associated quality attribute, given the context provided. Your goal is to determine if the content makes sense in relation to the quality attribute description or if it is a false positive.

Data:

Quality Attribute: Deployability
Attribute Description: The capability of software to be deployed into an operational environment with predictable time and effort, including options for rollback if needed. Key aspects include automation, deployment speed, and deployment granularity.
Content: ng [GitHub's CLI](https://cli.github.com):. ```shell; $ gh repo fork scverse/scanpy --clone --remote; ```. This will fork the repo to your github account, create a clone of the repo on your current machine, add our repository as a remote, and set the `main` development branch to track our repository. To do this manually, first make a fork of the repository by clicking the ""fork"" button on our main github package. Then, on your machine, run:. ```shell; # Clone your fork of the repository (substitute in your username); git clone https://github.com/{your-username}/scanpy.git; # Enter the cloned repository; cd scanpy; # Add our repository as a remote; git remote add upstream https://github.com/scverse/scanpy.git; # git branch --set-upstream-to ""upstream/main""; ```. ### `pre-commit`. We use [precommit](https://pre-commit.com) to run some styling checks in an automated way.; We also test against these checks, so make sure you follow them!. You can install pre-commit with:. ```shell; pip install pre-commit; ```. You can then install it to run while developing here with:. ```shell; pre-commit install; ```. From the root of the repo. If you choose not to run the hooks on each commit, you can run them manually with `pre-commit run --files={your files}`. (creating-a-branch)=. ### Creating a branch for your feature. All development should occur in branches dedicated to the particular work being done.; Additionally, unless you are a maintainer, all changes should be directed at the `main` branch.; You can create a branch with:. ```shell; git checkout main # Starting from the main branch; git pull # Syncing with the repo; git checkout -b {your-branch-name} # Making and changing to the new branch; ```. (open-a-pr)=. ### Open a pull request. When you're ready to have your code reviewed, push your changes up to your fork:. ```shell; # The first time you push the branch, you'll need to tell git where; git push --set-upstream origin {your-branch-name}; # After that, just use; git push;

Instructions: 
1. Analyze the content and the attribute description.
2. Determine if the content accurately reflects the intended quality attribute in this context.
3. If it does, label it as `true_positive: true`; if not, mark it as a `true_positive: false`.
4. If the content consists only of logs with no other text, mark it as a `true_positive: false`. 
4. If the content partially consists of logs, focus on analyzing remaining text. 
5. Add `reasoning` why the content is a true or false positive.
",True,"The content provided discusses setting up deployment processes such as forking repositories and using pre-commit hooks. These are related to making the software deployable by ensuring proper setup and automated checks, which aligns with Deployability."
Deployability,"nt Version. To work with the latest version [on GitHub]: clone the repository and `cd` into its root directory. ```shell; gh repo clone scverse/scanpy; cd scanpy; ```. If you are using `pip>=21.3`, an editable install can be made:. ```shell; pip install -e '.[dev,test]'; ```. If you want to let [conda] handle the installations of dependencies, do:. ```shell; pipx install beni; beni pyproject.toml > environment.yml; conda env create -f environment.yml; conda activate scanpy; pip install -e '.[dev,doc,test]'; ```. For instructions on how to work with the code, see the {ref}`contribution guide <contribution-guide>`. ## Docker. If you're using [Docker], you can use e.g. the image [gcfntnu/scanpy] from Docker Hub. ## Troubleshooting. If you get a `Permission denied` error, never use `sudo pip`. Instead, use virtual environments or:. ```shell; pip install --user scanpy; ```. **On MacOS**, if **not** using `conda`, you might need to install the C core of igraph via homebrew first. - `brew install igraph`. - If igraph still fails to install, see the question on [compiling igraph].; Alternatively consider installing gcc via `brew install gcc --without-multilib`; and exporting the required variables:. ```shell; export CC=""/usr/local/Cellar/gcc/X.x.x/bin/gcc-X""; export CXX=""/usr/local/Cellar/gcc/X.x.x/bin/gcc-X""; ```. where `X` and `x` refers to the version of `gcc`;; in my case, the path reads `/usr/local/Cellar/gcc/6.3.0_1/bin/gcc-6`. **On Windows**, there also often problems installing compiled packages such as `igraph`,; but you can find precompiled packages on Christoph Gohlke’s [unofficial binaries].; Download those and install them using `pip install ./path/to/file.whl`. (conda)=. ## Installing Miniconda. After downloading [Miniconda], in a unix shell (Linux, Mac), run. ```shell; cd DOWNLOAD_DIR; chmod +x Miniconda3-latest-VERSION.sh; ./Miniconda3-latest-VERSION.sh; ```. and accept all suggestions.; Either reopen a new terminal or `source ~/.bashrc` on Linux/ `source ~/.",install,MatchSource.DOCS,scverse,scanpy,1.10.2,https://github.com/scverse/scanpy/tree/1.10.2/docs/installation.md:1702,install,1702,docs/installation.md,https://scanpy.readthedocs.io,https://github.com/scverse/scanpy/tree/1.10.2/docs/installation.md,1,['install'],['install'],"The capability of software to be deployed into an operational environment with predictable time and effort, including options for rollback if needed. Key aspects include automation, deployment speed, and deployment granularity.","
You are an expert in evaluating and categorizing quality attributes in software engineering. You possess the necessary skills to distinguish sentences that clearly relate to a given quality attribute from those that do not. 

Evaluate whether the content accurately aligns with its associated quality attribute, given the context provided. Your goal is to determine if the content makes sense in relation to the quality attribute description or if it is a false positive.

Data:

Quality Attribute: Deployability
Attribute Description: The capability of software to be deployed into an operational environment with predictable time and effort, including options for rollback if needed. Key aspects include automation, deployment speed, and deployment granularity.
Content: nt Version. To work with the latest version [on GitHub]: clone the repository and `cd` into its root directory. ```shell; gh repo clone scverse/scanpy; cd scanpy; ```. If you are using `pip>=21.3`, an editable install can be made:. ```shell; pip install -e '.[dev,test]'; ```. If you want to let [conda] handle the installations of dependencies, do:. ```shell; pipx install beni; beni pyproject.toml > environment.yml; conda env create -f environment.yml; conda activate scanpy; pip install -e '.[dev,doc,test]'; ```. For instructions on how to work with the code, see the {ref}`contribution guide <contribution-guide>`. ## Docker. If you're using [Docker], you can use e.g. the image [gcfntnu/scanpy] from Docker Hub. ## Troubleshooting. If you get a `Permission denied` error, never use `sudo pip`. Instead, use virtual environments or:. ```shell; pip install --user scanpy; ```. **On MacOS**, if **not** using `conda`, you might need to install the C core of igraph via homebrew first. - `brew install igraph`. - If igraph still fails to install, see the question on [compiling igraph].; Alternatively consider installing gcc via `brew install gcc --without-multilib`; and exporting the required variables:. ```shell; export CC=""/usr/local/Cellar/gcc/X.x.x/bin/gcc-X""; export CXX=""/usr/local/Cellar/gcc/X.x.x/bin/gcc-X""; ```. where `X` and `x` refers to the version of `gcc`;; in my case, the path reads `/usr/local/Cellar/gcc/6.3.0_1/bin/gcc-6`. **On Windows**, there also often problems installing compiled packages such as `igraph`,; but you can find precompiled packages on Christoph Gohlke’s [unofficial binaries].; Download those and install them using `pip install ./path/to/file.whl`. (conda)=. ## Installing Miniconda. After downloading [Miniconda], in a unix shell (Linux, Mac), run. ```shell; cd DOWNLOAD_DIR; chmod +x Miniconda3-latest-VERSION.sh; ./Miniconda3-latest-VERSION.sh; ```. and accept all suggestions.; Either reopen a new terminal or `source ~/.bashrc` on Linux/ `source ~/.

Instructions: 
1. Analyze the content and the attribute description.
2. Determine if the content accurately reflects the intended quality attribute in this context.
3. If it does, label it as `true_positive: true`; if not, mark it as a `true_positive: false`.
4. If the content consists only of logs with no other text, mark it as a `true_positive: false`. 
4. If the content partially consists of logs, focus on analyzing remaining text. 
5. Add `reasoning` why the content is a true or false positive.
",False,"The content provided details installation instructions for software, which is related to deployment. However, Deployability specifically refers to deploying into an operational environment with predictable time and effort, including rollback options. The given text focuses more on how to install and set up the software rather than its deployment capabilities. Therefore, it does not accurately reflect the quality attribute of Deployability."
Deployability,"of scanpy but aren't requirements: [igraph] {cite:p}`Csardi2006` and [leiden] {cite:p}`Traag2019`. (dev-install-instructions)=. ## Development Version. To work with the latest version [on GitHub]: clone the repository and `cd` into its root directory. ```shell; gh repo clone scverse/scanpy; cd scanpy; ```. If you are using `pip>=21.3`, an editable install can be made:. ```shell; pip install -e '.[dev,test]'; ```. If you want to let [conda] handle the installations of dependencies, do:. ```shell; pipx install beni; beni pyproject.toml > environment.yml; conda env create -f environment.yml; conda activate scanpy; pip install -e '.[dev,doc,test]'; ```. For instructions on how to work with the code, see the {ref}`contribution guide <contribution-guide>`. ## Docker. If you're using [Docker], you can use e.g. the image [gcfntnu/scanpy] from Docker Hub. ## Troubleshooting. If you get a `Permission denied` error, never use `sudo pip`. Instead, use virtual environments or:. ```shell; pip install --user scanpy; ```. **On MacOS**, if **not** using `conda`, you might need to install the C core of igraph via homebrew first. - `brew install igraph`. - If igraph still fails to install, see the question on [compiling igraph].; Alternatively consider installing gcc via `brew install gcc --without-multilib`; and exporting the required variables:. ```shell; export CC=""/usr/local/Cellar/gcc/X.x.x/bin/gcc-X""; export CXX=""/usr/local/Cellar/gcc/X.x.x/bin/gcc-X""; ```. where `X` and `x` refers to the version of `gcc`;; in my case, the path reads `/usr/local/Cellar/gcc/6.3.0_1/bin/gcc-6`. **On Windows**, there also often problems installing compiled packages such as `igraph`,; but you can find precompiled packages on Christoph Gohlke’s [unofficial binaries].; Download those and install them using `pip install ./path/to/file.whl`. (conda)=. ## Installing Miniconda. After downloading [Miniconda], in a unix shell (Linux, Mac), run. ```shell; cd DOWNLOAD_DIR; chmod +x Miniconda3-latest-VERSION.s",install,MatchSource.DOCS,scverse,scanpy,1.10.2,https://github.com/scverse/scanpy/tree/1.10.2/docs/installation.md:1559,install,1559,docs/installation.md,https://scanpy.readthedocs.io,https://github.com/scverse/scanpy/tree/1.10.2/docs/installation.md,1,['install'],['install'],"The capability of software to be deployed into an operational environment with predictable time and effort, including options for rollback if needed. Key aspects include automation, deployment speed, and deployment granularity.","
You are an expert in evaluating and categorizing quality attributes in software engineering. You possess the necessary skills to distinguish sentences that clearly relate to a given quality attribute from those that do not. 

Evaluate whether the content accurately aligns with its associated quality attribute, given the context provided. Your goal is to determine if the content makes sense in relation to the quality attribute description or if it is a false positive.

Data:

Quality Attribute: Deployability
Attribute Description: The capability of software to be deployed into an operational environment with predictable time and effort, including options for rollback if needed. Key aspects include automation, deployment speed, and deployment granularity.
Content: of scanpy but aren't requirements: [igraph] {cite:p}`Csardi2006` and [leiden] {cite:p}`Traag2019`. (dev-install-instructions)=. ## Development Version. To work with the latest version [on GitHub]: clone the repository and `cd` into its root directory. ```shell; gh repo clone scverse/scanpy; cd scanpy; ```. If you are using `pip>=21.3`, an editable install can be made:. ```shell; pip install -e '.[dev,test]'; ```. If you want to let [conda] handle the installations of dependencies, do:. ```shell; pipx install beni; beni pyproject.toml > environment.yml; conda env create -f environment.yml; conda activate scanpy; pip install -e '.[dev,doc,test]'; ```. For instructions on how to work with the code, see the {ref}`contribution guide <contribution-guide>`. ## Docker. If you're using [Docker], you can use e.g. the image [gcfntnu/scanpy] from Docker Hub. ## Troubleshooting. If you get a `Permission denied` error, never use `sudo pip`. Instead, use virtual environments or:. ```shell; pip install --user scanpy; ```. **On MacOS**, if **not** using `conda`, you might need to install the C core of igraph via homebrew first. - `brew install igraph`. - If igraph still fails to install, see the question on [compiling igraph].; Alternatively consider installing gcc via `brew install gcc --without-multilib`; and exporting the required variables:. ```shell; export CC=""/usr/local/Cellar/gcc/X.x.x/bin/gcc-X""; export CXX=""/usr/local/Cellar/gcc/X.x.x/bin/gcc-X""; ```. where `X` and `x` refers to the version of `gcc`;; in my case, the path reads `/usr/local/Cellar/gcc/6.3.0_1/bin/gcc-6`. **On Windows**, there also often problems installing compiled packages such as `igraph`,; but you can find precompiled packages on Christoph Gohlke’s [unofficial binaries].; Download those and install them using `pip install ./path/to/file.whl`. (conda)=. ## Installing Miniconda. After downloading [Miniconda], in a unix shell (Linux, Mac), run. ```shell; cd DOWNLOAD_DIR; chmod +x Miniconda3-latest-VERSION.s

Instructions: 
1. Analyze the content and the attribute description.
2. Determine if the content accurately reflects the intended quality attribute in this context.
3. If it does, label it as `true_positive: true`; if not, mark it as a `true_positive: false`.
4. If the content consists only of logs with no other text, mark it as a `true_positive: false`. 
4. If the content partially consists of logs, focus on analyzing remaining text. 
5. Add `reasoning` why the content is a true or false positive.
",True,"The content provided discusses installation and setup instructions for software, including using pip, Docker, troubleshooting installation issues, installing Miniconda, etc. Deployability refers to the ability to deploy software into an operational environment with predictable time and effort. The content includes information on how to install the software in different environments (e.g., editable installs via pip, conda, Docker) which supports deploying the software efficiently. It also covers potential issues during deployment, like permission errors and installing dependencies correctly. Therefore, the content is related to deployability as it addresses deployment procedures and ensures smooth installation/deployment processes."
Deployability,"oject` {small}`Harvard Med`; - [vitessce](https://github.com/vitessce/vitessce#readme) for purely browser based viewing of zarr formatted AnnData files {smaller}`Harvard Med`. ## Portals. - the [Gene Expression Analysis Resource](https://umgear.org/) {small}`U Maryland`; - the [Galaxy Project](https://humancellatlas.usegalaxy.eu) for the Human Cell Atlas [\[tweet\]](https://twitter.com/ExpressionAtlas/status/1151797848469626881) {small}`U Freiburg`; - the [Expression Atlas](https://www.ebi.ac.uk/gxa/sc/help.html) {small}`EMBL-EBI`. ## Modalities. ### RNA velocity. - [scVelo](https://scvelo.org) {small}`Helmholtz Munich`. ### Spatial Transcriptomics Tools. - [squidpy](https://squidpy.readthedocs.io/en/stable/) {small}`Helmholtz Munich`. > Squidpy is a comprehensive toolkit for working with spatial single cell omics data. - [PASTE](https://github.com/raphael-group/paste) {small}`Princeton`. > PASTE is a computational method to align and integrate spatial transcriptomics data across adjacent tissue slices by leveraging both gene expression similarity and spatial distances between spots. - [bento](https://bento-tools.readthedocs.io/en/latest/) 🍱 {small}`UC San Diego`. > Bento is an accessible Python toolkit for performing subcellular analysis of spatial transcriptomics data. ### Multimodal integration. - [MUON](https://muon.readthedocs.io/en/latest/) and [MuData](https://mudata.readthedocs.io/en/latest/) {small}`EMBL/ DKFZ`. > MUON, and it's associated data structure MuData are designed to organise, analyse, visualise, and exchange multimodal data.; > MUON enables a range of analyses for ATAC and CITE-seq, from data preprocessing to flexible multi-omics alignment. ### Adaptive immune receptor repertoire (AIRR). - [scirpy](https://github.com/icbi-lab/scirpy) {small}`Medical University of Innsbruck`. > scirpy is a scanpy extension to expore single-cell T-cell receptor (TCR) and B-cell receptor (BCR) repertoires. - [dandelion](https://github.com/zktuong/dandelion) {small}`U",integrat,MatchSource.DOCS,scverse,scanpy,1.10.2,https://github.com/scverse/scanpy/tree/1.10.2/docs/ecosystem.md:1722,integrate,1722,docs/ecosystem.md,https://scanpy.readthedocs.io,https://github.com/scverse/scanpy/tree/1.10.2/docs/ecosystem.md,1,['integrat'],['integrate'],"The capability of software to be deployed into an operational environment with predictable time and effort, including options for rollback if needed. Key aspects include automation, deployment speed, and deployment granularity.","
You are an expert in evaluating and categorizing quality attributes in software engineering. You possess the necessary skills to distinguish sentences that clearly relate to a given quality attribute from those that do not. 

Evaluate whether the content accurately aligns with its associated quality attribute, given the context provided. Your goal is to determine if the content makes sense in relation to the quality attribute description or if it is a false positive.

Data:

Quality Attribute: Deployability
Attribute Description: The capability of software to be deployed into an operational environment with predictable time and effort, including options for rollback if needed. Key aspects include automation, deployment speed, and deployment granularity.
Content: oject` {small}`Harvard Med`; - [vitessce](https://github.com/vitessce/vitessce#readme) for purely browser based viewing of zarr formatted AnnData files {smaller}`Harvard Med`. ## Portals. - the [Gene Expression Analysis Resource](https://umgear.org/) {small}`U Maryland`; - the [Galaxy Project](https://humancellatlas.usegalaxy.eu) for the Human Cell Atlas [\[tweet\]](https://twitter.com/ExpressionAtlas/status/1151797848469626881) {small}`U Freiburg`; - the [Expression Atlas](https://www.ebi.ac.uk/gxa/sc/help.html) {small}`EMBL-EBI`. ## Modalities. ### RNA velocity. - [scVelo](https://scvelo.org) {small}`Helmholtz Munich`. ### Spatial Transcriptomics Tools. - [squidpy](https://squidpy.readthedocs.io/en/stable/) {small}`Helmholtz Munich`. > Squidpy is a comprehensive toolkit for working with spatial single cell omics data. - [PASTE](https://github.com/raphael-group/paste) {small}`Princeton`. > PASTE is a computational method to align and integrate spatial transcriptomics data across adjacent tissue slices by leveraging both gene expression similarity and spatial distances between spots. - [bento](https://bento-tools.readthedocs.io/en/latest/) 🍱 {small}`UC San Diego`. > Bento is an accessible Python toolkit for performing subcellular analysis of spatial transcriptomics data. ### Multimodal integration. - [MUON](https://muon.readthedocs.io/en/latest/) and [MuData](https://mudata.readthedocs.io/en/latest/) {small}`EMBL/ DKFZ`. > MUON, and it's associated data structure MuData are designed to organise, analyse, visualise, and exchange multimodal data.; > MUON enables a range of analyses for ATAC and CITE-seq, from data preprocessing to flexible multi-omics alignment. ### Adaptive immune receptor repertoire (AIRR). - [scirpy](https://github.com/icbi-lab/scirpy) {small}`Medical University of Innsbruck`. > scirpy is a scanpy extension to expore single-cell T-cell receptor (TCR) and B-cell receptor (BCR) repertoires. - [dandelion](https://github.com/zktuong/dandelion) {small}`U

Instructions: 
1. Analyze the content and the attribute description.
2. Determine if the content accurately reflects the intended quality attribute in this context.
3. If it does, label it as `true_positive: true`; if not, mark it as a `true_positive: false`.
4. If the content consists only of logs with no other text, mark it as a `true_positive: false`. 
4. If the content partially consists of logs, focus on analyzing remaining text. 
5. Add `reasoning` why the content is a true or false positive.
",False,"The content provided contains information about various tools and resources related to gene expression analysis, including portals like Expression Atlas and Galaxy Project, as well as spatial transcriptomics tools such as scVelo, squidpy, PASTE, and bento. Additionally, it mentions multimodal integration tools like MUON and MuData. None of this content discusses deployment processes, automation, or rollback mechanisms, which are key aspects of Deployability. Therefore, the content does not align with the Deployability quality attribute."
Deployability,"old-change, fractions calculation for filter_rank_genes_groups {pr}`1391` {smaller}`S Rybakov`; - Fixed bug where `score_genes` would error if one gene was passed {pr}`1398` {smaller}`I Virshup`; - Fixed `log1p` inplace on integer dense arrays {pr}`1400` {smaller}`I Virshup`; - Fix docstring formatting for {func}`~scanpy.tl.rank_genes_groups` {pr}`1417` {smaller}`P Weiler`; - Removed `` PendingDeprecationWarning`s from use of `np.matrix `` {pr}`1424` {smaller}`P Weiler`; - Fixed indexing byg in `~scanpy.pp.highly_variable_genes` {pr}`1456` {smaller}`V Bergen`; - Fix default number of genes for marker_genes_overlap {pr}`1464` {smaller}`MD Luecken`; - Fixed passing `groupby` and `dendrogram_key` to {func}`~scanpy.tl.dendrogram` {pr}`1465` {smaller}`M Varma`; - Fixed download path of `pbmc3k_processed` {pr}`1472` {smaller}`D Strobl`; - Better error message when computing DE with a group of size 1 {pr}`1490` {smaller}`J Manning`; - Update cugraph API usage for v0.16 {pr}`1494` {smaller}`R Ilango`; - Fixed `marker_gene_overlap` default value for `top_n_markers` {pr}`1464` {smaller}`MD Luecken`; - Pass `random_state` to RAPIDs UMAP {pr}`1474` {smaller}`C Nolet`; - Fixed `anndata` version requirement for {func}`~anndata.concat` (re-exported from scanpy as `sc.concat`) {pr}`1491` {smaller}`I Virshup`; - Fixed the width of the progress bar when downloading data {pr}`1507` {smaller}`M Klein`; - Updated link for `moignard15` dataset {pr}`1542` {smaller}`I Virshup`; - Fixed bug where calling `set_figure_params` could block if IPython was installed, but not used. {pr}`1547` {smaller}`I Virshup`; - {func}`~scanpy.pl.violin` no longer fails if `.raw` not present {pr}`1548` {smaller}`I Virshup`; - {func}`~scanpy.pl.spatial` refactoring and better handling of spatial data {pr}`1512` {smaller}`G Palla`; - {func}`~scanpy.pp.pca` works with `chunked=True` again {pr}`1592` {smaller}`I Virshup`; - {func}`~scanpy.tl.ingest` now works with umap-learn 0.5.0 {pr}`1601` {smaller}`S Rybakov`; ",install,MatchSource.DOCS,scverse,scanpy,1.10.2,https://github.com/scverse/scanpy/tree/1.10.2/docs/release-notes/1.7.0.md:4820,installed,4820,docs/release-notes/1.7.0.md,https://scanpy.readthedocs.io,https://github.com/scverse/scanpy/tree/1.10.2/docs/release-notes/1.7.0.md,1,['install'],['installed'],"The capability of software to be deployed into an operational environment with predictable time and effort, including options for rollback if needed. Key aspects include automation, deployment speed, and deployment granularity.","
You are an expert in evaluating and categorizing quality attributes in software engineering. You possess the necessary skills to distinguish sentences that clearly relate to a given quality attribute from those that do not. 

Evaluate whether the content accurately aligns with its associated quality attribute, given the context provided. Your goal is to determine if the content makes sense in relation to the quality attribute description or if it is a false positive.

Data:

Quality Attribute: Deployability
Attribute Description: The capability of software to be deployed into an operational environment with predictable time and effort, including options for rollback if needed. Key aspects include automation, deployment speed, and deployment granularity.
Content: old-change, fractions calculation for filter_rank_genes_groups {pr}`1391` {smaller}`S Rybakov`; - Fixed bug where `score_genes` would error if one gene was passed {pr}`1398` {smaller}`I Virshup`; - Fixed `log1p` inplace on integer dense arrays {pr}`1400` {smaller}`I Virshup`; - Fix docstring formatting for {func}`~scanpy.tl.rank_genes_groups` {pr}`1417` {smaller}`P Weiler`; - Removed `` PendingDeprecationWarning`s from use of `np.matrix `` {pr}`1424` {smaller}`P Weiler`; - Fixed indexing byg in `~scanpy.pp.highly_variable_genes` {pr}`1456` {smaller}`V Bergen`; - Fix default number of genes for marker_genes_overlap {pr}`1464` {smaller}`MD Luecken`; - Fixed passing `groupby` and `dendrogram_key` to {func}`~scanpy.tl.dendrogram` {pr}`1465` {smaller}`M Varma`; - Fixed download path of `pbmc3k_processed` {pr}`1472` {smaller}`D Strobl`; - Better error message when computing DE with a group of size 1 {pr}`1490` {smaller}`J Manning`; - Update cugraph API usage for v0.16 {pr}`1494` {smaller}`R Ilango`; - Fixed `marker_gene_overlap` default value for `top_n_markers` {pr}`1464` {smaller}`MD Luecken`; - Pass `random_state` to RAPIDs UMAP {pr}`1474` {smaller}`C Nolet`; - Fixed `anndata` version requirement for {func}`~anndata.concat` (re-exported from scanpy as `sc.concat`) {pr}`1491` {smaller}`I Virshup`; - Fixed the width of the progress bar when downloading data {pr}`1507` {smaller}`M Klein`; - Updated link for `moignard15` dataset {pr}`1542` {smaller}`I Virshup`; - Fixed bug where calling `set_figure_params` could block if IPython was installed, but not used. {pr}`1547` {smaller}`I Virshup`; - {func}`~scanpy.pl.violin` no longer fails if `.raw` not present {pr}`1548` {smaller}`I Virshup`; - {func}`~scanpy.pl.spatial` refactoring and better handling of spatial data {pr}`1512` {smaller}`G Palla`; - {func}`~scanpy.pp.pca` works with `chunked=True` again {pr}`1592` {smaller}`I Virshup`; - {func}`~scanpy.tl.ingest` now works with umap-learn 0.5.0 {pr}`1601` {smaller}`S Rybakov`; 

Instructions: 
1. Analyze the content and the attribute description.
2. Determine if the content accurately reflects the intended quality attribute in this context.
3. If it does, label it as `true_positive: true`; if not, mark it as a `true_positive: false`.
4. If the content consists only of logs with no other text, mark it as a `true_positive: false`. 
4. If the content partially consists of logs, focus on analyzing remaining text. 
5. Add `reasoning` why the content is a true or false positive.
",False,"The content provided lists various software changes and bug fixes, such as fixing bugs in specific functions and improving error handling. While these are important for maintaining code functionality and stability, they do not directly relate to deployability. Deployability concerns include deployment automation, speed, rollback capabilities, and granularity. The listed changes focus on internal code improvements rather than deployment aspects."
Deployability,"on how to work with the code, see the {ref}`contribution guide <contribution-guide>`. ## Docker. If you're using [Docker], you can use e.g. the image [gcfntnu/scanpy] from Docker Hub. ## Troubleshooting. If you get a `Permission denied` error, never use `sudo pip`. Instead, use virtual environments or:. ```shell; pip install --user scanpy; ```. **On MacOS**, if **not** using `conda`, you might need to install the C core of igraph via homebrew first. - `brew install igraph`. - If igraph still fails to install, see the question on [compiling igraph].; Alternatively consider installing gcc via `brew install gcc --without-multilib`; and exporting the required variables:. ```shell; export CC=""/usr/local/Cellar/gcc/X.x.x/bin/gcc-X""; export CXX=""/usr/local/Cellar/gcc/X.x.x/bin/gcc-X""; ```. where `X` and `x` refers to the version of `gcc`;; in my case, the path reads `/usr/local/Cellar/gcc/6.3.0_1/bin/gcc-6`. **On Windows**, there also often problems installing compiled packages such as `igraph`,; but you can find precompiled packages on Christoph Gohlke’s [unofficial binaries].; Download those and install them using `pip install ./path/to/file.whl`. (conda)=. ## Installing Miniconda. After downloading [Miniconda], in a unix shell (Linux, Mac), run. ```shell; cd DOWNLOAD_DIR; chmod +x Miniconda3-latest-VERSION.sh; ./Miniconda3-latest-VERSION.sh; ```. and accept all suggestions.; Either reopen a new terminal or `source ~/.bashrc` on Linux/ `source ~/.bash_profile` on Mac.; The whole process takes just a couple of minutes. [bioconda]: https://bioconda.github.io/; [compiling igraph]: https://stackoverflow.com/q/29589696/247482; [create symbolic links]: https://docs.microsoft.com/en-us/windows/security/threat-protection/security-policy-settings/create-symbolic-links; [docker]: https://en.wikipedia.org/wiki/Docker_(software); [from pypi]: https://pypi.org/project/scanpy; [gcfntnu/scanpy]: https://hub.docker.com/r/gcfntnu/scanpy; [leiden]: https://leidenalg.readthedocs.io; [minico",install,MatchSource.DOCS,scverse,scanpy,1.10.2,https://github.com/scverse/scanpy/tree/1.10.2/docs/installation.md:2197,installing,2197,docs/installation.md,https://scanpy.readthedocs.io,https://github.com/scverse/scanpy/tree/1.10.2/docs/installation.md,1,['install'],['installing'],"The capability of software to be deployed into an operational environment with predictable time and effort, including options for rollback if needed. Key aspects include automation, deployment speed, and deployment granularity.","
You are an expert in evaluating and categorizing quality attributes in software engineering. You possess the necessary skills to distinguish sentences that clearly relate to a given quality attribute from those that do not. 

Evaluate whether the content accurately aligns with its associated quality attribute, given the context provided. Your goal is to determine if the content makes sense in relation to the quality attribute description or if it is a false positive.

Data:

Quality Attribute: Deployability
Attribute Description: The capability of software to be deployed into an operational environment with predictable time and effort, including options for rollback if needed. Key aspects include automation, deployment speed, and deployment granularity.
Content: on how to work with the code, see the {ref}`contribution guide <contribution-guide>`. ## Docker. If you're using [Docker], you can use e.g. the image [gcfntnu/scanpy] from Docker Hub. ## Troubleshooting. If you get a `Permission denied` error, never use `sudo pip`. Instead, use virtual environments or:. ```shell; pip install --user scanpy; ```. **On MacOS**, if **not** using `conda`, you might need to install the C core of igraph via homebrew first. - `brew install igraph`. - If igraph still fails to install, see the question on [compiling igraph].; Alternatively consider installing gcc via `brew install gcc --without-multilib`; and exporting the required variables:. ```shell; export CC=""/usr/local/Cellar/gcc/X.x.x/bin/gcc-X""; export CXX=""/usr/local/Cellar/gcc/X.x.x/bin/gcc-X""; ```. where `X` and `x` refers to the version of `gcc`;; in my case, the path reads `/usr/local/Cellar/gcc/6.3.0_1/bin/gcc-6`. **On Windows**, there also often problems installing compiled packages such as `igraph`,; but you can find precompiled packages on Christoph Gohlke’s [unofficial binaries].; Download those and install them using `pip install ./path/to/file.whl`. (conda)=. ## Installing Miniconda. After downloading [Miniconda], in a unix shell (Linux, Mac), run. ```shell; cd DOWNLOAD_DIR; chmod +x Miniconda3-latest-VERSION.sh; ./Miniconda3-latest-VERSION.sh; ```. and accept all suggestions.; Either reopen a new terminal or `source ~/.bashrc` on Linux/ `source ~/.bash_profile` on Mac.; The whole process takes just a couple of minutes. [bioconda]: https://bioconda.github.io/; [compiling igraph]: https://stackoverflow.com/q/29589696/247482; [create symbolic links]: https://docs.microsoft.com/en-us/windows/security/threat-protection/security-policy-settings/create-symbolic-links; [docker]: https://en.wikipedia.org/wiki/Docker_(software); [from pypi]: https://pypi.org/project/scanpy; [gcfntnu/scanpy]: https://hub.docker.com/r/gcfntnu/scanpy; [leiden]: https://leidenalg.readthedocs.io; [minico

Instructions: 
1. Analyze the content and the attribute description.
2. Determine if the content accurately reflects the intended quality attribute in this context.
3. If it does, label it as `true_positive: true`; if not, mark it as a `true_positive: false`.
4. If the content consists only of logs with no other text, mark it as a `true_positive: false`. 
4. If the content partially consists of logs, focus on analyzing remaining text. 
5. Add `reasoning` why the content is a true or false positive.
",True,"The content discusses installation and configuration steps for various tools like Docker, troubleshooting issues with permissions, and installing Miniconda. While deployment isn't explicitly mentioned, these steps are related to deploying software in an operational environment through automated means (Docker) and ensuring smooth installations, which contributes to deployability."
Deployability,"ote; ```. This will fork the repo to your github account, create a clone of the repo on your current machine, add our repository as a remote, and set the `main` development branch to track our repository. To do this manually, first make a fork of the repository by clicking the ""fork"" button on our main github package. Then, on your machine, run:. ```shell; # Clone your fork of the repository (substitute in your username); git clone https://github.com/{your-username}/scanpy.git; # Enter the cloned repository; cd scanpy; # Add our repository as a remote; git remote add upstream https://github.com/scverse/scanpy.git; # git branch --set-upstream-to ""upstream/main""; ```. ### `pre-commit`. We use [precommit](https://pre-commit.com) to run some styling checks in an automated way.; We also test against these checks, so make sure you follow them!. You can install pre-commit with:. ```shell; pip install pre-commit; ```. You can then install it to run while developing here with:. ```shell; pre-commit install; ```. From the root of the repo. If you choose not to run the hooks on each commit, you can run them manually with `pre-commit run --files={your files}`. (creating-a-branch)=. ### Creating a branch for your feature. All development should occur in branches dedicated to the particular work being done.; Additionally, unless you are a maintainer, all changes should be directed at the `main` branch.; You can create a branch with:. ```shell; git checkout main # Starting from the main branch; git pull # Syncing with the repo; git checkout -b {your-branch-name} # Making and changing to the new branch; ```. (open-a-pr)=. ### Open a pull request. When you're ready to have your code reviewed, push your changes up to your fork:. ```shell; # The first time you push the branch, you'll need to tell git where; git push --set-upstream origin {your-branch-name}; # After that, just use; git push; ```. And open a pull request by going to the main repo and clicking *New pull request*.; GitHub ",install,MatchSource.DOCS,scverse,scanpy,1.10.2,https://github.com/scverse/scanpy/tree/1.10.2/docs/dev/getting-set-up.md:1937,install,1937,docs/dev/getting-set-up.md,https://scanpy.readthedocs.io,https://github.com/scverse/scanpy/tree/1.10.2/docs/dev/getting-set-up.md,1,['install'],['install'],"The capability of software to be deployed into an operational environment with predictable time and effort, including options for rollback if needed. Key aspects include automation, deployment speed, and deployment granularity.","
You are an expert in evaluating and categorizing quality attributes in software engineering. You possess the necessary skills to distinguish sentences that clearly relate to a given quality attribute from those that do not. 

Evaluate whether the content accurately aligns with its associated quality attribute, given the context provided. Your goal is to determine if the content makes sense in relation to the quality attribute description or if it is a false positive.

Data:

Quality Attribute: Deployability
Attribute Description: The capability of software to be deployed into an operational environment with predictable time and effort, including options for rollback if needed. Key aspects include automation, deployment speed, and deployment granularity.
Content: ote; ```. This will fork the repo to your github account, create a clone of the repo on your current machine, add our repository as a remote, and set the `main` development branch to track our repository. To do this manually, first make a fork of the repository by clicking the ""fork"" button on our main github package. Then, on your machine, run:. ```shell; # Clone your fork of the repository (substitute in your username); git clone https://github.com/{your-username}/scanpy.git; # Enter the cloned repository; cd scanpy; # Add our repository as a remote; git remote add upstream https://github.com/scverse/scanpy.git; # git branch --set-upstream-to ""upstream/main""; ```. ### `pre-commit`. We use [precommit](https://pre-commit.com) to run some styling checks in an automated way.; We also test against these checks, so make sure you follow them!. You can install pre-commit with:. ```shell; pip install pre-commit; ```. You can then install it to run while developing here with:. ```shell; pre-commit install; ```. From the root of the repo. If you choose not to run the hooks on each commit, you can run them manually with `pre-commit run --files={your files}`. (creating-a-branch)=. ### Creating a branch for your feature. All development should occur in branches dedicated to the particular work being done.; Additionally, unless you are a maintainer, all changes should be directed at the `main` branch.; You can create a branch with:. ```shell; git checkout main # Starting from the main branch; git pull # Syncing with the repo; git checkout -b {your-branch-name} # Making and changing to the new branch; ```. (open-a-pr)=. ### Open a pull request. When you're ready to have your code reviewed, push your changes up to your fork:. ```shell; # The first time you push the branch, you'll need to tell git where; git push --set-upstream origin {your-branch-name}; # After that, just use; git push; ```. And open a pull request by going to the main repo and clicking *New pull request*.; GitHub 

Instructions: 
1. Analyze the content and the attribute description.
2. Determine if the content accurately reflects the intended quality attribute in this context.
3. If it does, label it as `true_positive: true`; if not, mark it as a `true_positive: false`.
4. If the content consists only of logs with no other text, mark it as a `true_positive: false`. 
4. If the content partially consists of logs, focus on analyzing remaining text. 
5. Add `reasoning` why the content is a true or false positive.
",True,"The content describes setting up a development environment by cloning a repository and adding it as a remote. It also talks about creating branches for feature development and using pre-commit hooks. These steps are related to ensuring that software can be deployed predictably, especially through automation of certain processes like branch creation and code checks. The use of pre-commit ensures consistent coding standards which is part of deployability by reducing errors during deployment. The content focuses on setup and process automation which aligns with Deployability as described."
Deployability,"releases]: https://github.com/scverse/scanpy/releases. ## After making a release. After *any* release has been made:. - Create a new release notes file for the next bugfix release.; This should be included in both dev and stable branches.; - Create a milestone for the next release (in case you made a bugfix release) or releases (in case of a major/minor release).; For bugfix releases, this should have `on-merge: backport to 0.<minor>.x`,; so the [meeseeksdev][] bot will create a backport PR. See {doc}`versioning` for more info.; - Clear out and close the milestone you just made a release for. After a *major* or *minor* release has been made:. - Tweet about it! Announce it on Zulip! Announce it on Discourse! Think about making a bot for this! Maybe actually do that?; - Create a new release notes file for the next minor release. This should only be added to the dev branch.; - Tag the development branch. If you just released `1.7.0`, this would be `1.8.0.dev0`.; - Create a new branch for this release series, like `1.7.x`. This should get a new release notes file. [meeseeksdev]: https://meeseeksbox.github.io. ## Debugging the build process. If you changed something about the build process (e.g. [Hatchling’s build configuration][hatch-build]),; or something about the package’s structure,; you might want to manually check if the build and upload process behaves as expected:. ```shell; # Clear out old distributions; rm -r dist. # Build source distribution and wheel both; python -m build. # Now check those build artifacts; twine check dist/*. # List the wheel archive’s contents; bsdtar -tf dist/*.whl. ```. You can also upload the package to <test.pypi.org> ([tutorial][testpypi tutorial]). [testpypi tutorial]: https://packaging.python.org/en/latest/tutorials/packaging-projects/#uploading-the-distribution-archives. ```; twine upload --repository testpypi dist/*; ```. The above approximates what the [publish workflow][] does automatically for us.; If you want to replicate the p",release,MatchSource.DOCS,scverse,scanpy,1.10.2,https://github.com/scverse/scanpy/tree/1.10.2/docs/dev/release.md:1570,release,1570,docs/dev/release.md,https://scanpy.readthedocs.io,https://github.com/scverse/scanpy/tree/1.10.2/docs/dev/release.md,1,['release'],['release'],"The capability of software to be deployed into an operational environment with predictable time and effort, including options for rollback if needed. Key aspects include automation, deployment speed, and deployment granularity.","
You are an expert in evaluating and categorizing quality attributes in software engineering. You possess the necessary skills to distinguish sentences that clearly relate to a given quality attribute from those that do not. 

Evaluate whether the content accurately aligns with its associated quality attribute, given the context provided. Your goal is to determine if the content makes sense in relation to the quality attribute description or if it is a false positive.

Data:

Quality Attribute: Deployability
Attribute Description: The capability of software to be deployed into an operational environment with predictable time and effort, including options for rollback if needed. Key aspects include automation, deployment speed, and deployment granularity.
Content: releases]: https://github.com/scverse/scanpy/releases. ## After making a release. After *any* release has been made:. - Create a new release notes file for the next bugfix release.; This should be included in both dev and stable branches.; - Create a milestone for the next release (in case you made a bugfix release) or releases (in case of a major/minor release).; For bugfix releases, this should have `on-merge: backport to 0.<minor>.x`,; so the [meeseeksdev][] bot will create a backport PR. See {doc}`versioning` for more info.; - Clear out and close the milestone you just made a release for. After a *major* or *minor* release has been made:. - Tweet about it! Announce it on Zulip! Announce it on Discourse! Think about making a bot for this! Maybe actually do that?; - Create a new release notes file for the next minor release. This should only be added to the dev branch.; - Tag the development branch. If you just released `1.7.0`, this would be `1.8.0.dev0`.; - Create a new branch for this release series, like `1.7.x`. This should get a new release notes file. [meeseeksdev]: https://meeseeksbox.github.io. ## Debugging the build process. If you changed something about the build process (e.g. [Hatchling’s build configuration][hatch-build]),; or something about the package’s structure,; you might want to manually check if the build and upload process behaves as expected:. ```shell; # Clear out old distributions; rm -r dist. # Build source distribution and wheel both; python -m build. # Now check those build artifacts; twine check dist/*. # List the wheel archive’s contents; bsdtar -tf dist/*.whl. ```. You can also upload the package to <test.pypi.org> ([tutorial][testpypi tutorial]). [testpypi tutorial]: https://packaging.python.org/en/latest/tutorials/packaging-projects/#uploading-the-distribution-archives. ```; twine upload --repository testpypi dist/*; ```. The above approximates what the [publish workflow][] does automatically for us.; If you want to replicate the p

Instructions: 
1. Analyze the content and the attribute description.
2. Determine if the content accurately reflects the intended quality attribute in this context.
3. If it does, label it as `true_positive: true`; if not, mark it as a `true_positive: false`.
4. If the content consists only of logs with no other text, mark it as a `true_positive: false`. 
4. If the content partially consists of logs, focus on analyzing remaining text. 
5. Add `reasoning` why the content is a true or false positive.
",True,"The content is about setting up and managing releases, which directly relates to deployability as it involves creating release notes, tagging branches, announcing releases, etc. This supports the software's ability to be deployed predictably with clear steps for rollbacks and updates."
Deployability,"s for gene sets in {func}`~scanpy.pl.heatmap` are now matched to color for cluster {pr}`1511` {smaller}`L Sikkema`; - PCA plots can now annotate axes with variance explained {pr}`1470` {smaller}`bfurtwa`; - Plots with `groupby` arguments can now group by values in the index by passing the index's name (like `pd.DataFrame.groupby`). {pr}`1583` {smaller}`F Ramirez`; - Added `na_color` and `na_in_legend` keyword arguments to {func}`~scanpy.pl.embedding` plots. Allows specifying color for missing or filtered values in plots like {func}`~scanpy.pl.umap` or {func}`~scanpy.pl.spatial` {pr}`1356` {smaller}`I Virshup`; - {func}`~scanpy.pl.embedding` plots now support passing `dict` of `{cluster_name: cluster_color, ...}` for palette argument {pr}`1392` {smaller}`I Virshup`. ```{rubric} External tools (new); ```. - Add [Scanorama](https://github.com/brianhie/scanorama) integration to scanpy external API ({func}`~scanpy.external.pp.scanorama_integrate`, {cite:t}`Hie2019`) {pr}`1332` {smaller}`B Hie`; - Scrublet {cite:p}`Wolock2019` integration: {func}`~scanpy.pp.scrublet`, {func}`~scanpy.pp.scrublet_simulate_doublets`, and plotting method {func}`~scanpy.pl.scrublet_score_distribution` {pr}`1476` {smaller}`J Manning`; - {func}`~scanpy.external.pp.hashsolo` for HTO demultiplexing {cite:p}`Bernstein2020` {pr}`1432` {smaller}`NJ Bernstein`; - Added [scirpy](https://github.com/icbi-lab/scirpy) (sc-AIRR analysis) to ecosystem page {pr}`1453` {smaller}`G Sturm`; - Added [scvi-tools](https://scvi-tools.org) to ecosystem page {pr}`1421` {smaller}`A Gayoso`. ```{rubric} External tools (changes); ```. - Updates for {func}`~scanpy.external.tl.palantir` and {func}`~scanpy.external.tl.palantir_results` {pr}`1245` {smaller}`A Mousa`; - Fixes to {func}`~scanpy.external.tl.harmony_timeseries` docs {pr}`1248` {smaller}`A Mousa`; - Support for `leiden` clustering by {func}`scanpy.external.tl.phenograph` {pr}`1080` {smaller}`A Mousa`; - Deprecate `scanpy.external.pp.scvi` {pr}`1554` {smaller}`G X",integrat,MatchSource.DOCS,scverse,scanpy,1.10.2,https://github.com/scverse/scanpy/tree/1.10.2/docs/release-notes/1.7.0.md:1774,integration,1774,docs/release-notes/1.7.0.md,https://scanpy.readthedocs.io,https://github.com/scverse/scanpy/tree/1.10.2/docs/release-notes/1.7.0.md,1,['integrat'],['integration'],"The capability of software to be deployed into an operational environment with predictable time and effort, including options for rollback if needed. Key aspects include automation, deployment speed, and deployment granularity.","
You are an expert in evaluating and categorizing quality attributes in software engineering. You possess the necessary skills to distinguish sentences that clearly relate to a given quality attribute from those that do not. 

Evaluate whether the content accurately aligns with its associated quality attribute, given the context provided. Your goal is to determine if the content makes sense in relation to the quality attribute description or if it is a false positive.

Data:

Quality Attribute: Deployability
Attribute Description: The capability of software to be deployed into an operational environment with predictable time and effort, including options for rollback if needed. Key aspects include automation, deployment speed, and deployment granularity.
Content: s for gene sets in {func}`~scanpy.pl.heatmap` are now matched to color for cluster {pr}`1511` {smaller}`L Sikkema`; - PCA plots can now annotate axes with variance explained {pr}`1470` {smaller}`bfurtwa`; - Plots with `groupby` arguments can now group by values in the index by passing the index's name (like `pd.DataFrame.groupby`). {pr}`1583` {smaller}`F Ramirez`; - Added `na_color` and `na_in_legend` keyword arguments to {func}`~scanpy.pl.embedding` plots. Allows specifying color for missing or filtered values in plots like {func}`~scanpy.pl.umap` or {func}`~scanpy.pl.spatial` {pr}`1356` {smaller}`I Virshup`; - {func}`~scanpy.pl.embedding` plots now support passing `dict` of `{cluster_name: cluster_color, ...}` for palette argument {pr}`1392` {smaller}`I Virshup`. ```{rubric} External tools (new); ```. - Add [Scanorama](https://github.com/brianhie/scanorama) integration to scanpy external API ({func}`~scanpy.external.pp.scanorama_integrate`, {cite:t}`Hie2019`) {pr}`1332` {smaller}`B Hie`; - Scrublet {cite:p}`Wolock2019` integration: {func}`~scanpy.pp.scrublet`, {func}`~scanpy.pp.scrublet_simulate_doublets`, and plotting method {func}`~scanpy.pl.scrublet_score_distribution` {pr}`1476` {smaller}`J Manning`; - {func}`~scanpy.external.pp.hashsolo` for HTO demultiplexing {cite:p}`Bernstein2020` {pr}`1432` {smaller}`NJ Bernstein`; - Added [scirpy](https://github.com/icbi-lab/scirpy) (sc-AIRR analysis) to ecosystem page {pr}`1453` {smaller}`G Sturm`; - Added [scvi-tools](https://scvi-tools.org) to ecosystem page {pr}`1421` {smaller}`A Gayoso`. ```{rubric} External tools (changes); ```. - Updates for {func}`~scanpy.external.tl.palantir` and {func}`~scanpy.external.tl.palantir_results` {pr}`1245` {smaller}`A Mousa`; - Fixes to {func}`~scanpy.external.tl.harmony_timeseries` docs {pr}`1248` {smaller}`A Mousa`; - Support for `leiden` clustering by {func}`scanpy.external.tl.phenograph` {pr}`1080` {smaller}`A Mousa`; - Deprecate `scanpy.external.pp.scvi` {pr}`1554` {smaller}`G X

Instructions: 
1. Analyze the content and the attribute description.
2. Determine if the content accurately reflects the intended quality attribute in this context.
3. If it does, label it as `true_positive: true`; if not, mark it as a `true_positive: false`.
4. If the content consists only of logs with no other text, mark it as a `true_positive: false`. 
4. If the content partially consists of logs, focus on analyzing remaining text. 
5. Add `reasoning` why the content is a true or false positive.
",True,"The content provided lists several new features and updates related to Scanpy's functionality, including integration with external tools like Scrublet and Scanorama. These enhancements improve the ease of deployment by providing additional functionalities and integrations that can be utilized by users in their workflows. Specifically, the addition of new plotting methods and tools supports automated deployment through more efficient processing and visualization. The mention of `deployability` is thus evident as these updates streamline the deployment process."
Deployability,"s/data_processing) {small}`UC Irvine`. > Swan is a Python library designed for the analysis and visualization of transcriptomes, especially with long-read transcriptomes in mind.; > Users can add transcriptomes from different datasets and explore distinct splicing and expression patterns across datasets. ## Analysis methods. ### scvi-tools. - [scvi-tools](https://github.com/YosefLab/scvi-tools) {small}`Berkeley`. > scvi-tools hosts deep generative models (DGM) for end-to-end analysis of single-cell; > omics data (e.g., scVI, scANVI, totalVI). It also contains several primitives to build novel DGMs. ### Fate mapping. - [CellRank](https://cellrank.org) {small}`Helmholtz Munich`. > CellRank is a framework to uncover cellular dynamics based on single-cell data.; > It incorporates modalities such as RNA velocity, pseudotime, developmental potential, real-time information, etc. ### Differential expression. - [diffxpy](https://github.com/theislab/diffxpy) {small}`Helmholtz Munich`. ### Data integration. - [scanaroma](https://github.com/brianhie/scanorama) {small}`MIT`. ### Modeling perturbations. - [scGen](https://github.com/theislab/scgen) / [trVAE](https://github.com/theislab/trvae) {small}`Helmholtz Munich`. ### Feature selection. - [triku 🦔](https://gitlab.com/alexmascension/triku) {small}`Biodonostia Health Research Institute`; - [CIARA](https://github.com/ScialdoneLab/CIARA_python) {small}`Helmholtz Munich`. > CIARA is an algorithm for feature selection, that aims for the identification of rare cell types via scRNA-Seq data in scanpy. ### Annotation/ Enrichment Analysis. Analyses using curated prior knowledge. - [decoupler](https://github.com/saezlab/decoupler-py) is a collection of footprint enrichment methods that allows to infer transcription factor or pathway activities. {small}`Institute for Computational Biomedicine, Heidelberg University`; - [Cubé](https://github.com/connerlambden/Cube) {small}`Harvard University`. > Intuitive Nonparametric Gene Network Search",integrat,MatchSource.DOCS,scverse,scanpy,1.10.2,https://github.com/scverse/scanpy/tree/1.10.2/docs/ecosystem.md:3986,integration,3986,docs/ecosystem.md,https://scanpy.readthedocs.io,https://github.com/scverse/scanpy/tree/1.10.2/docs/ecosystem.md,1,['integrat'],['integration'],"The capability of software to be deployed into an operational environment with predictable time and effort, including options for rollback if needed. Key aspects include automation, deployment speed, and deployment granularity.","
You are an expert in evaluating and categorizing quality attributes in software engineering. You possess the necessary skills to distinguish sentences that clearly relate to a given quality attribute from those that do not. 

Evaluate whether the content accurately aligns with its associated quality attribute, given the context provided. Your goal is to determine if the content makes sense in relation to the quality attribute description or if it is a false positive.

Data:

Quality Attribute: Deployability
Attribute Description: The capability of software to be deployed into an operational environment with predictable time and effort, including options for rollback if needed. Key aspects include automation, deployment speed, and deployment granularity.
Content: s/data_processing) {small}`UC Irvine`. > Swan is a Python library designed for the analysis and visualization of transcriptomes, especially with long-read transcriptomes in mind.; > Users can add transcriptomes from different datasets and explore distinct splicing and expression patterns across datasets. ## Analysis methods. ### scvi-tools. - [scvi-tools](https://github.com/YosefLab/scvi-tools) {small}`Berkeley`. > scvi-tools hosts deep generative models (DGM) for end-to-end analysis of single-cell; > omics data (e.g., scVI, scANVI, totalVI). It also contains several primitives to build novel DGMs. ### Fate mapping. - [CellRank](https://cellrank.org) {small}`Helmholtz Munich`. > CellRank is a framework to uncover cellular dynamics based on single-cell data.; > It incorporates modalities such as RNA velocity, pseudotime, developmental potential, real-time information, etc. ### Differential expression. - [diffxpy](https://github.com/theislab/diffxpy) {small}`Helmholtz Munich`. ### Data integration. - [scanaroma](https://github.com/brianhie/scanorama) {small}`MIT`. ### Modeling perturbations. - [scGen](https://github.com/theislab/scgen) / [trVAE](https://github.com/theislab/trvae) {small}`Helmholtz Munich`. ### Feature selection. - [triku 🦔](https://gitlab.com/alexmascension/triku) {small}`Biodonostia Health Research Institute`; - [CIARA](https://github.com/ScialdoneLab/CIARA_python) {small}`Helmholtz Munich`. > CIARA is an algorithm for feature selection, that aims for the identification of rare cell types via scRNA-Seq data in scanpy. ### Annotation/ Enrichment Analysis. Analyses using curated prior knowledge. - [decoupler](https://github.com/saezlab/decoupler-py) is a collection of footprint enrichment methods that allows to infer transcription factor or pathway activities. {small}`Institute for Computational Biomedicine, Heidelberg University`; - [Cubé](https://github.com/connerlambden/Cube) {small}`Harvard University`. > Intuitive Nonparametric Gene Network Search

Instructions: 
1. Analyze the content and the attribute description.
2. Determine if the content accurately reflects the intended quality attribute in this context.
3. If it does, label it as `true_positive: true`; if not, mark it as a `true_positive: false`.
4. If the content consists only of logs with no other text, mark it as a `true_positive: false`. 
4. If the content partially consists of logs, focus on analyzing remaining text. 
5. Add `reasoning` why the content is a true or false positive.
",False,"The content describes various tools and libraries used in transcriptomics analysis such as scvi-tools, CellRank, diffxpy, etc. While these relate to functionality of the software, deployability isn't directly discussed here. The original context focuses on deployment aspects like automation, speed, and rollback options, which are absent from this content."
Deployability,tation'; ```. ```{eval-rst}; .. role:: small; ```. ```{eval-rst}; .. role:: smaller; ```. ::::{grid} 1 2 3 3; :gutter: 2. :::{grid-item-card} Installation {octicon}`plug;1em;`; :link: installation; :link-type: doc. New to *scanpy*? Check out the installation guide.; :::. :::{grid-item-card} Tutorials {octicon}`play;1em;`; :link: tutorials/index; :link-type: doc. The tutorials walk you through real-world applications of scanpy.; :::. :::{grid-item-card} API reference {octicon}`book;1em;`; :link: api/index; :link-type: doc. The API reference contains a detailed description of; the scanpy API.; :::. :::{grid-item-card} Discussion {octicon}`megaphone;1em;`; :link: https://discourse.scverse.org. Need help? Reach out on our forum to get your questions answered!; :::. :::{grid-item-card} GitHub {octicon}`mark-github;1em;`; :link: https://github.com/scverse/scanpy. Find a bug? Interested in improving scanpy? Checkout our GitHub for the latest developments.; :::; ::::. **Other resources**. * Follow changes in the {ref}`release notes <release-notes>`.; * Find tools that harmonize well with anndata & Scanpy at [scverse.org/packages/](https://scverse.org/packages/); * Check out our {ref}`contribution guide <contribution-guide>` for development practices.; * Consider citing [Genome Biology (2018)] along with original {doc}`references <references>`. ## News. ```{include} news.md; :start-after: '<!-- marker: after prelude -->'; :end-before: '<!-- marker: before old news -->'; ```. {ref}`(past news) <News>`. % put references first so all references are resolved. % NO! there is a particular meaning to this sequence. ```{toctree}; :hidden: true; :maxdepth: 1. installation; tutorials/index; usage-principles; how-to/index; api/index; external/index; ecosystem; release-notes/index; community; news; dev/index; contributors; references; ```. [contribution guide]: dev/index.md; [genome biology (2018)]: https://doi.org/10.1186/s13059-017-1382-0; [github]: https://github.com/scverse/scanpy; ,release,MatchSource.DOCS,scverse,scanpy,1.10.2,https://github.com/scverse/scanpy/tree/1.10.2/docs/index.md:1072,release,1072,docs/index.md,https://scanpy.readthedocs.io,https://github.com/scverse/scanpy/tree/1.10.2/docs/index.md,4,"['install', 'release']","['installation', 'release', 'release-notes']","The capability of software to be deployed into an operational environment with predictable time and effort, including options for rollback if needed. Key aspects include automation, deployment speed, and deployment granularity.","
You are an expert in evaluating and categorizing quality attributes in software engineering. You possess the necessary skills to distinguish sentences that clearly relate to a given quality attribute from those that do not. 

Evaluate whether the content accurately aligns with its associated quality attribute, given the context provided. Your goal is to determine if the content makes sense in relation to the quality attribute description or if it is a false positive.

Data:

Quality Attribute: Deployability
Attribute Description: The capability of software to be deployed into an operational environment with predictable time and effort, including options for rollback if needed. Key aspects include automation, deployment speed, and deployment granularity.
Content: tation'; ```. ```{eval-rst}; .. role:: small; ```. ```{eval-rst}; .. role:: smaller; ```. ::::{grid} 1 2 3 3; :gutter: 2. :::{grid-item-card} Installation {octicon}`plug;1em;`; :link: installation; :link-type: doc. New to *scanpy*? Check out the installation guide.; :::. :::{grid-item-card} Tutorials {octicon}`play;1em;`; :link: tutorials/index; :link-type: doc. The tutorials walk you through real-world applications of scanpy.; :::. :::{grid-item-card} API reference {octicon}`book;1em;`; :link: api/index; :link-type: doc. The API reference contains a detailed description of; the scanpy API.; :::. :::{grid-item-card} Discussion {octicon}`megaphone;1em;`; :link: https://discourse.scverse.org. Need help? Reach out on our forum to get your questions answered!; :::. :::{grid-item-card} GitHub {octicon}`mark-github;1em;`; :link: https://github.com/scverse/scanpy. Find a bug? Interested in improving scanpy? Checkout our GitHub for the latest developments.; :::; ::::. **Other resources**. * Follow changes in the {ref}`release notes <release-notes>`.; * Find tools that harmonize well with anndata & Scanpy at [scverse.org/packages/](https://scverse.org/packages/); * Check out our {ref}`contribution guide <contribution-guide>` for development practices.; * Consider citing [Genome Biology (2018)] along with original {doc}`references <references>`. ## News. ```{include} news.md; :start-after: '<!-- marker: after prelude -->'; :end-before: '<!-- marker: before old news -->'; ```. {ref}`(past news) <News>`. % put references first so all references are resolved. % NO! there is a particular meaning to this sequence. ```{toctree}; :hidden: true; :maxdepth: 1. installation; tutorials/index; usage-principles; how-to/index; api/index; external/index; ecosystem; release-notes/index; community; news; dev/index; contributors; references; ```. [contribution guide]: dev/index.md; [genome biology (2018)]: https://doi.org/10.1186/s13059-017-1382-0; [github]: https://github.com/scverse/scanpy; 

Instructions: 
1. Analyze the content and the attribute description.
2. Determine if the content accurately reflects the intended quality attribute in this context.
3. If it does, label it as `true_positive: true`; if not, mark it as a `true_positive: false`.
4. If the content consists only of logs with no other text, mark it as a `true_positive: false`. 
4. If the content partially consists of logs, focus on analyzing remaining text. 
5. Add `reasoning` why the content is a true or false positive.
",False,"The content provided seems to be part of documentation for a software tool, likely 'scanpy'. It lists various resources such as installation guide, tutorials, API reference, discussion forum, and GitHub repository. While deployment ('Deployability') relates to how software is delivered into an environment, the given content doesn't directly address aspects like automation, speed, or rollback mechanisms. Instead, it focuses on user guides and resources, which are more about usage and access rather than deployment capabilities. Therefore, it doesn't align well with the Deployability quality attribute."
Deployability,"y the location of colorbar legend, or pass `None` to not show a colorbar {pr}`1821` {smaller}`A Schaar` {smaller}`I Virshup`; - Embedding plots now have a `dimensions` argument, which lets users select which dimensions of their embedding to plot and uses the same broadcasting rules as other arguments {pr}`1538` {smaller}`I Virshup`; - {func}`~scanpy.logging.print_versions` now uses `session_info` {pr}`2089` {smaller}`P Angerer` {smaller}`I Virshup`. ```{rubric} Ecosystem; ```. Multiple packages have been added to our ecosystem page, including:. - [decoupler](https://github.com/saezlab/decoupler-py) a for footprint analysis and pathway enrichement {pr}`2186` {smaller}`PB Mompel`; - [dandelion](https://github.com/zktuong/dandelion) for B-cell receptor analysis {pr}`1953` {smaller}`Z Tuong`; - [CIARA](https://github.com/ScialdoneLab/CIARA_python) a feature selection tools for identifying rare cell types {pr}`2175` {smaller}`M Stock`. ```{rubric} Bug fixes; ```. - Fixed finding variables with `use_raw=True` and `basis=None` in {func}`scanpy.pl.scatter` {pr}`2027` {smaller}`E Rice`; - Fixed {func}`scanpy.pp.scrublet` to address {issue}`1957` {smaller}`FlMai` and ensure raw counts are used for simulation; - Functions in {mod}`scanpy.datasets` no longer throw `OldFormatWarnings` when using `anndata` `0.8` {pr}`2096` {smaller}`I Virshup`; - Fixed use of {func}`scanpy.pp.neighbors` with `method='rapids'`: RAPIDS cuML no longer returns a squared Euclidean distance matrix, so we should not square-root the kNN distance matrix. {pr}`1828` {smaller}`M Zaslavsky`; - Removed `pytables` dependency by implementing `read_10x_h5` with `h5py` due to installation errors on Windows {pr}`2064`; - Fixed bug in {func}`scanpy.external.pp.hashsolo` where default value was set improperly {pr}`2190` {smaller}`B Reiz`; - Fixed bug in {func}`scanpy.pl.embedding` functions where an error could be raised when there were missing values and large numbers of categories {pr}`2187` {smaller}`I Virshup`; ",install,MatchSource.DOCS,scverse,scanpy,1.10.2,https://github.com/scverse/scanpy/tree/1.10.2/docs/release-notes/1.9.0.md:3840,installation,3840,docs/release-notes/1.9.0.md,https://scanpy.readthedocs.io,https://github.com/scverse/scanpy/tree/1.10.2/docs/release-notes/1.9.0.md,1,['install'],['installation'],"The capability of software to be deployed into an operational environment with predictable time and effort, including options for rollback if needed. Key aspects include automation, deployment speed, and deployment granularity.","
You are an expert in evaluating and categorizing quality attributes in software engineering. You possess the necessary skills to distinguish sentences that clearly relate to a given quality attribute from those that do not. 

Evaluate whether the content accurately aligns with its associated quality attribute, given the context provided. Your goal is to determine if the content makes sense in relation to the quality attribute description or if it is a false positive.

Data:

Quality Attribute: Deployability
Attribute Description: The capability of software to be deployed into an operational environment with predictable time and effort, including options for rollback if needed. Key aspects include automation, deployment speed, and deployment granularity.
Content: y the location of colorbar legend, or pass `None` to not show a colorbar {pr}`1821` {smaller}`A Schaar` {smaller}`I Virshup`; - Embedding plots now have a `dimensions` argument, which lets users select which dimensions of their embedding to plot and uses the same broadcasting rules as other arguments {pr}`1538` {smaller}`I Virshup`; - {func}`~scanpy.logging.print_versions` now uses `session_info` {pr}`2089` {smaller}`P Angerer` {smaller}`I Virshup`. ```{rubric} Ecosystem; ```. Multiple packages have been added to our ecosystem page, including:. - [decoupler](https://github.com/saezlab/decoupler-py) a for footprint analysis and pathway enrichement {pr}`2186` {smaller}`PB Mompel`; - [dandelion](https://github.com/zktuong/dandelion) for B-cell receptor analysis {pr}`1953` {smaller}`Z Tuong`; - [CIARA](https://github.com/ScialdoneLab/CIARA_python) a feature selection tools for identifying rare cell types {pr}`2175` {smaller}`M Stock`. ```{rubric} Bug fixes; ```. - Fixed finding variables with `use_raw=True` and `basis=None` in {func}`scanpy.pl.scatter` {pr}`2027` {smaller}`E Rice`; - Fixed {func}`scanpy.pp.scrublet` to address {issue}`1957` {smaller}`FlMai` and ensure raw counts are used for simulation; - Functions in {mod}`scanpy.datasets` no longer throw `OldFormatWarnings` when using `anndata` `0.8` {pr}`2096` {smaller}`I Virshup`; - Fixed use of {func}`scanpy.pp.neighbors` with `method='rapids'`: RAPIDS cuML no longer returns a squared Euclidean distance matrix, so we should not square-root the kNN distance matrix. {pr}`1828` {smaller}`M Zaslavsky`; - Removed `pytables` dependency by implementing `read_10x_h5` with `h5py` due to installation errors on Windows {pr}`2064`; - Fixed bug in {func}`scanpy.external.pp.hashsolo` where default value was set improperly {pr}`2190` {smaller}`B Reiz`; - Fixed bug in {func}`scanpy.pl.embedding` functions where an error could be raised when there were missing values and large numbers of categories {pr}`2187` {smaller}`I Virshup`; 

Instructions: 
1. Analyze the content and the attribute description.
2. Determine if the content accurately reflects the intended quality attribute in this context.
3. If it does, label it as `true_positive: true`; if not, mark it as a `true_positive: false`.
4. If the content consists only of logs with no other text, mark it as a `true_positive: false`. 
4. If the content partially consists of logs, focus on analyzing remaining text. 
5. Add `reasoning` why the content is a true or false positive.
",False,"The content provided is a log entry that lists bug fixes and new packages added to an ecosystem. It includes information about updates, such as fixing specific functions, removing dependencies, and adding new tools. This aligns with deployability because deployment can be facilitated by having a stable, maintainable codebase with reliable functionality (bug-free) and the ability to integrate new components. However, while it does touch on bug fixes which contribute to deployability, most of the content is about package additions rather than actual deployment processes or automation. Therefore, it's partially related but not fully encompassing of Deployability."
Deployability,"y; cd scanpy; ```. If you are using `pip>=21.3`, an editable install can be made:. ```shell; pip install -e '.[dev,test]'; ```. If you want to let [conda] handle the installations of dependencies, do:. ```shell; pipx install beni; beni pyproject.toml > environment.yml; conda env create -f environment.yml; conda activate scanpy; pip install -e '.[dev,doc,test]'; ```. For instructions on how to work with the code, see the {ref}`contribution guide <contribution-guide>`. ## Docker. If you're using [Docker], you can use e.g. the image [gcfntnu/scanpy] from Docker Hub. ## Troubleshooting. If you get a `Permission denied` error, never use `sudo pip`. Instead, use virtual environments or:. ```shell; pip install --user scanpy; ```. **On MacOS**, if **not** using `conda`, you might need to install the C core of igraph via homebrew first. - `brew install igraph`. - If igraph still fails to install, see the question on [compiling igraph].; Alternatively consider installing gcc via `brew install gcc --without-multilib`; and exporting the required variables:. ```shell; export CC=""/usr/local/Cellar/gcc/X.x.x/bin/gcc-X""; export CXX=""/usr/local/Cellar/gcc/X.x.x/bin/gcc-X""; ```. where `X` and `x` refers to the version of `gcc`;; in my case, the path reads `/usr/local/Cellar/gcc/6.3.0_1/bin/gcc-6`. **On Windows**, there also often problems installing compiled packages such as `igraph`,; but you can find precompiled packages on Christoph Gohlke’s [unofficial binaries].; Download those and install them using `pip install ./path/to/file.whl`. (conda)=. ## Installing Miniconda. After downloading [Miniconda], in a unix shell (Linux, Mac), run. ```shell; cd DOWNLOAD_DIR; chmod +x Miniconda3-latest-VERSION.sh; ./Miniconda3-latest-VERSION.sh; ```. and accept all suggestions.; Either reopen a new terminal or `source ~/.bashrc` on Linux/ `source ~/.bash_profile` on Mac.; The whole process takes just a couple of minutes. [bioconda]: https://bioconda.github.io/; [compiling igraph]: https://stackov",install,MatchSource.DOCS,scverse,scanpy,1.10.2,https://github.com/scverse/scanpy/tree/1.10.2/docs/installation.md:1819,installing,1819,docs/installation.md,https://scanpy.readthedocs.io,https://github.com/scverse/scanpy/tree/1.10.2/docs/installation.md,2,['install'],"['install', 'installing']","The capability of software to be deployed into an operational environment with predictable time and effort, including options for rollback if needed. Key aspects include automation, deployment speed, and deployment granularity.","
You are an expert in evaluating and categorizing quality attributes in software engineering. You possess the necessary skills to distinguish sentences that clearly relate to a given quality attribute from those that do not. 

Evaluate whether the content accurately aligns with its associated quality attribute, given the context provided. Your goal is to determine if the content makes sense in relation to the quality attribute description or if it is a false positive.

Data:

Quality Attribute: Deployability
Attribute Description: The capability of software to be deployed into an operational environment with predictable time and effort, including options for rollback if needed. Key aspects include automation, deployment speed, and deployment granularity.
Content: y; cd scanpy; ```. If you are using `pip>=21.3`, an editable install can be made:. ```shell; pip install -e '.[dev,test]'; ```. If you want to let [conda] handle the installations of dependencies, do:. ```shell; pipx install beni; beni pyproject.toml > environment.yml; conda env create -f environment.yml; conda activate scanpy; pip install -e '.[dev,doc,test]'; ```. For instructions on how to work with the code, see the {ref}`contribution guide <contribution-guide>`. ## Docker. If you're using [Docker], you can use e.g. the image [gcfntnu/scanpy] from Docker Hub. ## Troubleshooting. If you get a `Permission denied` error, never use `sudo pip`. Instead, use virtual environments or:. ```shell; pip install --user scanpy; ```. **On MacOS**, if **not** using `conda`, you might need to install the C core of igraph via homebrew first. - `brew install igraph`. - If igraph still fails to install, see the question on [compiling igraph].; Alternatively consider installing gcc via `brew install gcc --without-multilib`; and exporting the required variables:. ```shell; export CC=""/usr/local/Cellar/gcc/X.x.x/bin/gcc-X""; export CXX=""/usr/local/Cellar/gcc/X.x.x/bin/gcc-X""; ```. where `X` and `x` refers to the version of `gcc`;; in my case, the path reads `/usr/local/Cellar/gcc/6.3.0_1/bin/gcc-6`. **On Windows**, there also often problems installing compiled packages such as `igraph`,; but you can find precompiled packages on Christoph Gohlke’s [unofficial binaries].; Download those and install them using `pip install ./path/to/file.whl`. (conda)=. ## Installing Miniconda. After downloading [Miniconda], in a unix shell (Linux, Mac), run. ```shell; cd DOWNLOAD_DIR; chmod +x Miniconda3-latest-VERSION.sh; ./Miniconda3-latest-VERSION.sh; ```. and accept all suggestions.; Either reopen a new terminal or `source ~/.bashrc` on Linux/ `source ~/.bash_profile` on Mac.; The whole process takes just a couple of minutes. [bioconda]: https://bioconda.github.io/; [compiling igraph]: https://stackov

Instructions: 
1. Analyze the content and the attribute description.
2. Determine if the content accurately reflects the intended quality attribute in this context.
3. If it does, label it as `true_positive: true`; if not, mark it as a `true_positive: false`.
4. If the content consists only of logs with no other text, mark it as a `true_positive: false`. 
4. If the content partially consists of logs, focus on analyzing remaining text. 
5. Add `reasoning` why the content is a true or false positive.
",True,"The content describes installation and setup instructions for various tools like pip, conda, Docker, etc., which are related to deployment considerations. It includes guidance on how to install dependencies, use virtual environments, and deploy software using containerization. These aspects directly tie into Deployability as they address the ease, automation, and repeatability of deploying software in different environments."
Deployability,"~scanpy.external.pp.hashsolo` for HTO demultiplexing {cite:p}`Bernstein2020` {pr}`1432` {smaller}`NJ Bernstein`; - Added [scirpy](https://github.com/icbi-lab/scirpy) (sc-AIRR analysis) to ecosystem page {pr}`1453` {smaller}`G Sturm`; - Added [scvi-tools](https://scvi-tools.org) to ecosystem page {pr}`1421` {smaller}`A Gayoso`. ```{rubric} External tools (changes); ```. - Updates for {func}`~scanpy.external.tl.palantir` and {func}`~scanpy.external.tl.palantir_results` {pr}`1245` {smaller}`A Mousa`; - Fixes to {func}`~scanpy.external.tl.harmony_timeseries` docs {pr}`1248` {smaller}`A Mousa`; - Support for `leiden` clustering by {func}`scanpy.external.tl.phenograph` {pr}`1080` {smaller}`A Mousa`; - Deprecate `scanpy.external.pp.scvi` {pr}`1554` {smaller}`G Xing`; - Updated default params of {func}`~scanpy.external.tl.sam` to work with larger data {pr}`1540` {smaller}`A Tarashansky`. ```{rubric} Documentation; ```. - {ref}`New contribution guide <contribution-guide>` {pr}`1544` {smaller}`I Virshup`; - `zsh` installation instructions {pr}`1444` {smaller}`P Angerer`. ```{rubric} Performance; ```. - Speed up {func}`~scanpy.read_10x_h5` {pr}`1402` {smaller}`P Weiler`; - Speed ups for {func}`~scanpy.get.obs_df` {pr}`1499` {smaller}`F Ramirez`. ```{rubric} Bugfixes; ```. - Consistent fold-change, fractions calculation for filter_rank_genes_groups {pr}`1391` {smaller}`S Rybakov`; - Fixed bug where `score_genes` would error if one gene was passed {pr}`1398` {smaller}`I Virshup`; - Fixed `log1p` inplace on integer dense arrays {pr}`1400` {smaller}`I Virshup`; - Fix docstring formatting for {func}`~scanpy.tl.rank_genes_groups` {pr}`1417` {smaller}`P Weiler`; - Removed `` PendingDeprecationWarning`s from use of `np.matrix `` {pr}`1424` {smaller}`P Weiler`; - Fixed indexing byg in `~scanpy.pp.highly_variable_genes` {pr}`1456` {smaller}`V Bergen`; - Fix default number of genes for marker_genes_overlap {pr}`1464` {smaller}`MD Luecken`; - Fixed passing `groupby` and `dendrogram_key` to",install,MatchSource.DOCS,scverse,scanpy,1.10.2,https://github.com/scverse/scanpy/tree/1.10.2/docs/release-notes/1.7.0.md:2991,installation,2991,docs/release-notes/1.7.0.md,https://scanpy.readthedocs.io,https://github.com/scverse/scanpy/tree/1.10.2/docs/release-notes/1.7.0.md,1,['install'],['installation'],"The capability of software to be deployed into an operational environment with predictable time and effort, including options for rollback if needed. Key aspects include automation, deployment speed, and deployment granularity.","
You are an expert in evaluating and categorizing quality attributes in software engineering. You possess the necessary skills to distinguish sentences that clearly relate to a given quality attribute from those that do not. 

Evaluate whether the content accurately aligns with its associated quality attribute, given the context provided. Your goal is to determine if the content makes sense in relation to the quality attribute description or if it is a false positive.

Data:

Quality Attribute: Deployability
Attribute Description: The capability of software to be deployed into an operational environment with predictable time and effort, including options for rollback if needed. Key aspects include automation, deployment speed, and deployment granularity.
Content: ~scanpy.external.pp.hashsolo` for HTO demultiplexing {cite:p}`Bernstein2020` {pr}`1432` {smaller}`NJ Bernstein`; - Added [scirpy](https://github.com/icbi-lab/scirpy) (sc-AIRR analysis) to ecosystem page {pr}`1453` {smaller}`G Sturm`; - Added [scvi-tools](https://scvi-tools.org) to ecosystem page {pr}`1421` {smaller}`A Gayoso`. ```{rubric} External tools (changes); ```. - Updates for {func}`~scanpy.external.tl.palantir` and {func}`~scanpy.external.tl.palantir_results` {pr}`1245` {smaller}`A Mousa`; - Fixes to {func}`~scanpy.external.tl.harmony_timeseries` docs {pr}`1248` {smaller}`A Mousa`; - Support for `leiden` clustering by {func}`scanpy.external.tl.phenograph` {pr}`1080` {smaller}`A Mousa`; - Deprecate `scanpy.external.pp.scvi` {pr}`1554` {smaller}`G Xing`; - Updated default params of {func}`~scanpy.external.tl.sam` to work with larger data {pr}`1540` {smaller}`A Tarashansky`. ```{rubric} Documentation; ```. - {ref}`New contribution guide <contribution-guide>` {pr}`1544` {smaller}`I Virshup`; - `zsh` installation instructions {pr}`1444` {smaller}`P Angerer`. ```{rubric} Performance; ```. - Speed up {func}`~scanpy.read_10x_h5` {pr}`1402` {smaller}`P Weiler`; - Speed ups for {func}`~scanpy.get.obs_df` {pr}`1499` {smaller}`F Ramirez`. ```{rubric} Bugfixes; ```. - Consistent fold-change, fractions calculation for filter_rank_genes_groups {pr}`1391` {smaller}`S Rybakov`; - Fixed bug where `score_genes` would error if one gene was passed {pr}`1398` {smaller}`I Virshup`; - Fixed `log1p` inplace on integer dense arrays {pr}`1400` {smaller}`I Virshup`; - Fix docstring formatting for {func}`~scanpy.tl.rank_genes_groups` {pr}`1417` {smaller}`P Weiler`; - Removed `` PendingDeprecationWarning`s from use of `np.matrix `` {pr}`1424` {smaller}`P Weiler`; - Fixed indexing byg in `~scanpy.pp.highly_variable_genes` {pr}`1456` {smaller}`V Bergen`; - Fix default number of genes for marker_genes_overlap {pr}`1464` {smaller}`MD Luecken`; - Fixed passing `groupby` and `dendrogram_key` to

Instructions: 
1. Analyze the content and the attribute description.
2. Determine if the content accurately reflects the intended quality attribute in this context.
3. If it does, label it as `true_positive: true`; if not, mark it as a `true_positive: false`.
4. If the content consists only of logs with no other text, mark it as a `true_positive: false`. 
4. If the content partially consists of logs, focus on analyzing remaining text. 
5. Add `reasoning` why the content is a true or false positive.
",True,"I need to evaluate whether the provided content accurately reflects the Deployability quality attribute. The content includes mentions of external tools being added to an ecosystem page, updates and fixes for various functions, support for new features like leiden clustering, deprecations of old functions, parameter updates for larger data handling, speed improvements in function read operations, bug fixes including issues with specific functions, and improved documentation. These activities seem related to improving deployment capabilities by enhancing the software's deployability through better automation, increased deployment speed, and robustness via bug fixes and documentation. The content doesn't mention anything about rollback mechanisms but does focus on aspects like automation (adding tools) and deployment speed, which are key aspects of deployability."
Energy Efficiency," Palla`; - {func}`~scanpy.read_visium` read 10x Visium data {pr}`1034` {smaller}`G Palla, P Angerer, I Virshup`; - {func}`~scanpy.datasets.visium_sge` load Visium data directly from 10x Genomics {pr}`1013` {smaller}`M Mirkazemi, G Palla, P Angerer`; - {func}`~scanpy.pl.spatial` plot spatial data {pr}`1012` {smaller}`G Palla, P Angerer`. ```{rubric} New functionality; ```. - Many functions, like {func}`~scanpy.pp.neighbors` and {func}`~scanpy.tl.umap`, now store cell-by-cell graphs in {attr}`~anndata.AnnData.obsp` {pr}`1118` {smaller}`S Rybakov`; - {func}`~scanpy.pp.scale` and {func}`~scanpy.pp.log1p` can be used on any element in {attr}`~anndata.AnnData.layers` or {attr}`~anndata.AnnData.obsm` {pr}`1173` {smaller}`I Virshup`. ```{rubric} External tools; ```. - `scanpy.external.pp.scvi` for preprocessing with scVI {pr}`1085` {smaller}`G Xing`; - Guide for using `Scanpy in R` {pr}`1186` {smaller}`L Zappia`. ```{rubric} Performance; ```. - {func}`~scanpy.pp.pca` now uses efficient implicit centering for sparse matrices. This can lead to signifigantly improved performance for large datasets {pr}`1066` {smaller}`A Tarashansky`; - {func}`~scanpy.tl.score_genes` now has an efficient implementation for sparse matrices with missing values {pr}`1196` {smaller}`redst4r`. ```{warning}; The new {func}`~scanpy.pp.pca` implementation can result in slightly different results for sparse matrices. See the pr ({pr}`1066`) and documentation for more info.; ```. ```{rubric} Code design; ```. - {func}`~scanpy.pl.stacked_violin` can now be used as a subplot {pr}`1084` {smaller}`P Angerer`; - {func}`~scanpy.tl.score_genes` has improved logging {pr}`1119` {smaller}`G Eraslan`; - {func}`~scanpy.pp.scale` now saves mean and standard deviation in the {attr}`~anndata.AnnData.var` {pr}`1173` {smaller}`A Wolf`; - {func}`~scanpy.external.tl.harmony_timeseries` {pr}`1091` {smaller}`A Mousa`. ```{rubric} Bug fixes; ```. - {func}`~scanpy.pp.combat` now works when `obs_names` aren't unique. {pr}`1215` ",efficient,MatchSource.DOCS,scverse,scanpy,1.10.2,https://github.com/scverse/scanpy/tree/1.10.2/docs/release-notes/1.5.0.md:1484,efficient,1484,docs/release-notes/1.5.0.md,https://scanpy.readthedocs.io,https://github.com/scverse/scanpy/tree/1.10.2/docs/release-notes/1.5.0.md,1,['efficient'],['efficient'],"The system’s ability to optimize resource use and minimize energy consumption while achieving required performance. This involves monitoring, allocation, and adaptation of resources.","
You are an expert in evaluating and categorizing quality attributes in software engineering. You possess the necessary skills to distinguish sentences that clearly relate to a given quality attribute from those that do not. 

Evaluate whether the content accurately aligns with its associated quality attribute, given the context provided. Your goal is to determine if the content makes sense in relation to the quality attribute description or if it is a false positive.

Data:

Quality Attribute: Energy Efficiency
Attribute Description: The system’s ability to optimize resource use and minimize energy consumption while achieving required performance. This involves monitoring, allocation, and adaptation of resources.
Content:  Palla`; - {func}`~scanpy.read_visium` read 10x Visium data {pr}`1034` {smaller}`G Palla, P Angerer, I Virshup`; - {func}`~scanpy.datasets.visium_sge` load Visium data directly from 10x Genomics {pr}`1013` {smaller}`M Mirkazemi, G Palla, P Angerer`; - {func}`~scanpy.pl.spatial` plot spatial data {pr}`1012` {smaller}`G Palla, P Angerer`. ```{rubric} New functionality; ```. - Many functions, like {func}`~scanpy.pp.neighbors` and {func}`~scanpy.tl.umap`, now store cell-by-cell graphs in {attr}`~anndata.AnnData.obsp` {pr}`1118` {smaller}`S Rybakov`; - {func}`~scanpy.pp.scale` and {func}`~scanpy.pp.log1p` can be used on any element in {attr}`~anndata.AnnData.layers` or {attr}`~anndata.AnnData.obsm` {pr}`1173` {smaller}`I Virshup`. ```{rubric} External tools; ```. - `scanpy.external.pp.scvi` for preprocessing with scVI {pr}`1085` {smaller}`G Xing`; - Guide for using `Scanpy in R` {pr}`1186` {smaller}`L Zappia`. ```{rubric} Performance; ```. - {func}`~scanpy.pp.pca` now uses efficient implicit centering for sparse matrices. This can lead to signifigantly improved performance for large datasets {pr}`1066` {smaller}`A Tarashansky`; - {func}`~scanpy.tl.score_genes` now has an efficient implementation for sparse matrices with missing values {pr}`1196` {smaller}`redst4r`. ```{warning}; The new {func}`~scanpy.pp.pca` implementation can result in slightly different results for sparse matrices. See the pr ({pr}`1066`) and documentation for more info.; ```. ```{rubric} Code design; ```. - {func}`~scanpy.pl.stacked_violin` can now be used as a subplot {pr}`1084` {smaller}`P Angerer`; - {func}`~scanpy.tl.score_genes` has improved logging {pr}`1119` {smaller}`G Eraslan`; - {func}`~scanpy.pp.scale` now saves mean and standard deviation in the {attr}`~anndata.AnnData.var` {pr}`1173` {smaller}`A Wolf`; - {func}`~scanpy.external.tl.harmony_timeseries` {pr}`1091` {smaller}`A Mousa`. ```{rubric} Bug fixes; ```. - {func}`~scanpy.pp.combat` now works when `obs_names` aren't unique. {pr}`1215` 

Instructions: 
1. Analyze the content and the attribute description.
2. Determine if the content accurately reflects the intended quality attribute in this context.
3. If it does, label it as `true_positive: true`; if not, mark it as a `true_positive: false`.
4. If the content consists only of logs with no other text, mark it as a `true_positive: false`. 
4. If the content partially consists of logs, focus on analyzing remaining text. 
5. Add `reasoning` why the content is a true or false positive.
",False,"The content provided discusses various updates and changes in Scanpy functionality, including performance improvements like efficient PCA implementation for sparse matrices and bug fixes. While there are mentions of function updates and bug fixes, the main focus is on functional additions rather than directly discussing energy efficiency or resource optimization. The description of Energy Efficiency focuses on optimizing resource use and minimizing energy consumption while maintaining performance, which isn't directly addressed in the content. Therefore, this content does not accurately reflect the intended quality attribute and should be labeled as false positive."
Energy Efficiency,"# Tutorials. :::{seealso}; For more tutorials featureing scanpy and other [scverse](https://scverse.org) ecosystem tools, check out the curated set of tutorials at [scverse.org/learn](https://scverse.org/learn); :::. ## Basic workflows. ```{toctree}; :maxdepth: 2. basics/index; ```. ## Visualization. ```{toctree}; :maxdepth: 2. plotting/index; ```. ## Trajectory inference. ```{seealso}; For more powerful tools for analysing single cell dynamics, check out the Scverse ecosystem packages:. * [CellRank](https://cellrank.readthedocs.io); * [Dynamo](https://dynamo-release.readthedocs.io/en/latest/); ```. ```{toctree}; :maxdepth: 2. trajectories/index; ```. ## Spatial data. ```{seealso}; For more up-to-date tutorials on working with spatial data, see:. * [SquidPy tutorials](https://squidpy.readthedocs.io/en/stable/notebooks/tutorials/index.html); * [SpatialData tutorials](https://spatialdata.scverse.org/en/latest/tutorials/notebooks/notebooks.html); * [Scverse ecosystem spatial tutorials](https://scverse.org/learn/); ```. ```{toctree}; :maxdepth: 2. spatial/index; ```. ## Experimental. ```{toctree}; :maxdepth: 2. experimental/index; ```. ## Older tutorials. A number of older tutorials can be found at:. * The [`scanpy_usage`](https://github.com/scverse/scanpy_usage) repository; ",power,MatchSource.DOCS,scverse,scanpy,1.10.2,https://github.com/scverse/scanpy/tree/1.10.2/docs/tutorials/index.md:399,powerful,399,docs/tutorials/index.md,https://scanpy.readthedocs.io,https://github.com/scverse/scanpy/tree/1.10.2/docs/tutorials/index.md,1,['power'],['powerful'],"The system’s ability to optimize resource use and minimize energy consumption while achieving required performance. This involves monitoring, allocation, and adaptation of resources.","
You are an expert in evaluating and categorizing quality attributes in software engineering. You possess the necessary skills to distinguish sentences that clearly relate to a given quality attribute from those that do not. 

Evaluate whether the content accurately aligns with its associated quality attribute, given the context provided. Your goal is to determine if the content makes sense in relation to the quality attribute description or if it is a false positive.

Data:

Quality Attribute: Energy Efficiency
Attribute Description: The system’s ability to optimize resource use and minimize energy consumption while achieving required performance. This involves monitoring, allocation, and adaptation of resources.
Content: # Tutorials. :::{seealso}; For more tutorials featureing scanpy and other [scverse](https://scverse.org) ecosystem tools, check out the curated set of tutorials at [scverse.org/learn](https://scverse.org/learn); :::. ## Basic workflows. ```{toctree}; :maxdepth: 2. basics/index; ```. ## Visualization. ```{toctree}; :maxdepth: 2. plotting/index; ```. ## Trajectory inference. ```{seealso}; For more powerful tools for analysing single cell dynamics, check out the Scverse ecosystem packages:. * [CellRank](https://cellrank.readthedocs.io); * [Dynamo](https://dynamo-release.readthedocs.io/en/latest/); ```. ```{toctree}; :maxdepth: 2. trajectories/index; ```. ## Spatial data. ```{seealso}; For more up-to-date tutorials on working with spatial data, see:. * [SquidPy tutorials](https://squidpy.readthedocs.io/en/stable/notebooks/tutorials/index.html); * [SpatialData tutorials](https://spatialdata.scverse.org/en/latest/tutorials/notebooks/notebooks.html); * [Scverse ecosystem spatial tutorials](https://scverse.org/learn/); ```. ```{toctree}; :maxdepth: 2. spatial/index; ```. ## Experimental. ```{toctree}; :maxdepth: 2. experimental/index; ```. ## Older tutorials. A number of older tutorials can be found at:. * The [`scanpy_usage`](https://github.com/scverse/scanpy_usage) repository; 

Instructions: 
1. Analyze the content and the attribute description.
2. Determine if the content accurately reflects the intended quality attribute in this context.
3. If it does, label it as `true_positive: true`; if not, mark it as a `true_positive: false`.
4. If the content consists only of logs with no other text, mark it as a `true_positive: false`. 
4. If the content partially consists of logs, focus on analyzing remaining text. 
5. Add `reasoning` why the content is a true or false positive.
",False,"The content does not mention anything about energy efficiency, resource optimization, or energy consumption. Instead, it discusses tutorials related to scverse ecosystem tools like scanpy and spatial data analysis. There is no indication that these tutorials are optimizing resources for better energy efficiency or minimizing energy use. The focus is purely on providing educational materials rather than addressing any quality attribute related to energy efficiency."
Energy Efficiency,"# Usage Principles. Import Scanpy as:. ```; import scanpy as sc; ```. ## Workflow. The typical workflow consists of subsequent calls of data analysis tools; in `sc.tl`, e.g.:. ```; sc.tl.umap(adata, **tool_params) # embed a neighborhood graph of the data using UMAP; ```. where `adata` is an {class}`~anndata.AnnData` object.; Each of these calls adds annotation to an expression matrix *X*,; which stores *n_obs* observations (cells) of *n_vars* variables (genes).; For each tool, there typically is an associated plotting function in `sc.pl`:. ```; sc.pl.umap(adata, **plotting_params); ```. If you pass `show=False`, a {class}`~matplotlib.axes.Axes` instance is returned; and you have all of matplotlib's detailed configuration possibilities. To facilitate writing memory-efficient pipelines, by default,; Scanpy tools operate *inplace* on `adata` and return `None` –; this also allows to easily transition to [out-of-memory pipelines].; If you want to return a copy of the {class}`~anndata.AnnData` object; and leave the passed `adata` unchanged, pass `copy=True` or `inplace=False`. ## AnnData. Scanpy is based on {mod}`anndata`, which provides the {class}`~anndata.AnnData` class. ```{image} https://falexwolf.de/img/scanpy/anndata.svg; :width: 300px; ```. At the most basic level, an {class}`~anndata.AnnData` object `adata` stores; a data matrix `adata.X`, annotation of observations; `adata.obs` and variables `adata.var` as `pd.DataFrame` and unstructured; annotation `adata.uns` as `dict`. Names of observations and; variables can be accessed via `adata.obs_names` and `adata.var_names`,; respectively. {class}`~anndata.AnnData` objects can be sliced like; dataframes, for example, `adata_subset = adata[:, list_of_gene_names]`.; For more, see this [blog post]. To read a data file to an {class}`~anndata.AnnData` object, call:. ```; adata = sc.read(filename); ```. to initialize an {class}`~anndata.AnnData` object. Possibly add further annotation using, e.g., `pd.read_csv`:. ```; import ",efficient,MatchSource.DOCS,scverse,scanpy,1.10.2,https://github.com/scverse/scanpy/tree/1.10.2/docs/usage-principles.md:775,efficient,775,docs/usage-principles.md,https://scanpy.readthedocs.io,https://github.com/scverse/scanpy/tree/1.10.2/docs/usage-principles.md,1,['efficient'],['efficient'],"The system’s ability to optimize resource use and minimize energy consumption while achieving required performance. This involves monitoring, allocation, and adaptation of resources.","
You are an expert in evaluating and categorizing quality attributes in software engineering. You possess the necessary skills to distinguish sentences that clearly relate to a given quality attribute from those that do not. 

Evaluate whether the content accurately aligns with its associated quality attribute, given the context provided. Your goal is to determine if the content makes sense in relation to the quality attribute description or if it is a false positive.

Data:

Quality Attribute: Energy Efficiency
Attribute Description: The system’s ability to optimize resource use and minimize energy consumption while achieving required performance. This involves monitoring, allocation, and adaptation of resources.
Content: # Usage Principles. Import Scanpy as:. ```; import scanpy as sc; ```. ## Workflow. The typical workflow consists of subsequent calls of data analysis tools; in `sc.tl`, e.g.:. ```; sc.tl.umap(adata, **tool_params) # embed a neighborhood graph of the data using UMAP; ```. where `adata` is an {class}`~anndata.AnnData` object.; Each of these calls adds annotation to an expression matrix *X*,; which stores *n_obs* observations (cells) of *n_vars* variables (genes).; For each tool, there typically is an associated plotting function in `sc.pl`:. ```; sc.pl.umap(adata, **plotting_params); ```. If you pass `show=False`, a {class}`~matplotlib.axes.Axes` instance is returned; and you have all of matplotlib's detailed configuration possibilities. To facilitate writing memory-efficient pipelines, by default,; Scanpy tools operate *inplace* on `adata` and return `None` –; this also allows to easily transition to [out-of-memory pipelines].; If you want to return a copy of the {class}`~anndata.AnnData` object; and leave the passed `adata` unchanged, pass `copy=True` or `inplace=False`. ## AnnData. Scanpy is based on {mod}`anndata`, which provides the {class}`~anndata.AnnData` class. ```{image} https://falexwolf.de/img/scanpy/anndata.svg; :width: 300px; ```. At the most basic level, an {class}`~anndata.AnnData` object `adata` stores; a data matrix `adata.X`, annotation of observations; `adata.obs` and variables `adata.var` as `pd.DataFrame` and unstructured; annotation `adata.uns` as `dict`. Names of observations and; variables can be accessed via `adata.obs_names` and `adata.var_names`,; respectively. {class}`~anndata.AnnData` objects can be sliced like; dataframes, for example, `adata_subset = adata[:, list_of_gene_names]`.; For more, see this [blog post]. To read a data file to an {class}`~anndata.AnnData` object, call:. ```; adata = sc.read(filename); ```. to initialize an {class}`~anndata.AnnData` object. Possibly add further annotation using, e.g., `pd.read_csv`:. ```; import 

Instructions: 
1. Analyze the content and the attribute description.
2. Determine if the content accurately reflects the intended quality attribute in this context.
3. If it does, label it as `true_positive: true`; if not, mark it as a `true_positive: false`.
4. If the content consists only of logs with no other text, mark it as a `true_positive: false`. 
4. If the content partially consists of logs, focus on analyzing remaining text. 
5. Add `reasoning` why the content is a true or false positive.
",False,"The content provided discusses the usage principles and features of Scanpy, including how data analysis tools are applied through functions like sc.tl.umap and sc.pl.umap, which relate to embedding and plotting data for visualization. It also explains the structure of AnnData objects, detailing their components (X, obs, var, uns) and methods for slicing and reading data files. While this content is technical and relates to data processing, it does not directly address energy efficiency or resource optimization as described in the Energy Efficiency quality attribute. The context focuses on data analysis and computational processing rather than resource management or energy optimization."
Energy Efficiency,"### 0.2.1 {small}`2017-07-24`. Scanpy includes preprocessing, visualization, clustering, pseudotime and; trajectory inference, differential expression testing and simulation of gene; regulatory networks. The implementation efficiently deals with [datasets of more; than one million cells](https://github.com/scverse/scanpy_usage/tree/master/170522_visualizing_one_million_cells). {smaller}`A Wolf, P Angerer`; ",efficient,MatchSource.DOCS,scverse,scanpy,1.10.2,https://github.com/scverse/scanpy/tree/1.10.2/docs/release-notes/0.2.1.md:223,efficiently,223,docs/release-notes/0.2.1.md,https://scanpy.readthedocs.io,https://github.com/scverse/scanpy/tree/1.10.2/docs/release-notes/0.2.1.md,1,['efficient'],['efficiently'],"The system’s ability to optimize resource use and minimize energy consumption while achieving required performance. This involves monitoring, allocation, and adaptation of resources.","
You are an expert in evaluating and categorizing quality attributes in software engineering. You possess the necessary skills to distinguish sentences that clearly relate to a given quality attribute from those that do not. 

Evaluate whether the content accurately aligns with its associated quality attribute, given the context provided. Your goal is to determine if the content makes sense in relation to the quality attribute description or if it is a false positive.

Data:

Quality Attribute: Energy Efficiency
Attribute Description: The system’s ability to optimize resource use and minimize energy consumption while achieving required performance. This involves monitoring, allocation, and adaptation of resources.
Content: ### 0.2.1 {small}`2017-07-24`. Scanpy includes preprocessing, visualization, clustering, pseudotime and; trajectory inference, differential expression testing and simulation of gene; regulatory networks. The implementation efficiently deals with [datasets of more; than one million cells](https://github.com/scverse/scanpy_usage/tree/master/170522_visualizing_one_million_cells). {smaller}`A Wolf, P Angerer`; 

Instructions: 
1. Analyze the content and the attribute description.
2. Determine if the content accurately reflects the intended quality attribute in this context.
3. If it does, label it as `true_positive: true`; if not, mark it as a `true_positive: false`.
4. If the content consists only of logs with no other text, mark it as a `true_positive: false`. 
4. If the content partially consists of logs, focus on analyzing remaining text. 
5. Add `reasoning` why the content is a true or false positive.
",False,"The content discusses implementation details of Scanpy, including preprocessing and visualization capabilities, which are related to resource optimization in data processing. However, it does not directly mention energy efficiency or resource use optimization specific to energy consumption."
Energy Efficiency,"### 1.0.0 {small}`2018-03-30`. ```{rubric} Major updates; ```. - Scanpy is much faster and more memory efficient: preprocess, cluster and; visualize 1.3M cells in [6h], 130K cells in [14min], and 68K cells in [3min] {smaller}`A Wolf`; - the API gained a preprocessing function {func}`~scanpy.pp.neighbors` and a; class {func}`~scanpy.Neighbors` to which all basic graph computations are; delegated {smaller}`A Wolf`. ```{warning}; ```{rubric} Upgrading to 1.0 isn’t fully backwards compatible in the following changes; ```. - the graph-based tools {func}`~scanpy.tl.louvain`; {func}`~scanpy.tl.dpt` {func}`~scanpy.tl.draw_graph`; {func}`~scanpy.tl.umap` {func}`~scanpy.tl.diffmap`; {func}`~scanpy.tl.paga` require prior computation of the graph:; `sc.pp.neighbors(adata, n_neighbors=5); sc.tl.louvain(adata)` instead of; previously `sc.tl.louvain(adata, n_neighbors=5)`; - install `numba` via `conda install numba`, which replaces cython; - the default connectivity measure (dpt will look different using default; settings) changed. setting `method='gauss'` in `sc.pp.neighbors` uses; gauss kernel connectivities and reproduces the previous behavior,; see, for instance in the example [paul15].; - namings of returned annotation have changed for less bloated AnnData; objects, which means that some of the unstructured annotation of old; AnnData files is not recognized anymore; - replace occurances of `group_by` with `groupby` (consistency with; `pandas`); - it is worth checking out the notebook examples to see changes, e.g.; the [seurat] example.; - upgrading scikit-learn from 0.18 to 0.19 changed the implementation of PCA,; some results might therefore look slightly different; ```. ```{rubric} Further updates; ```. - UMAP {cite:p}`McInnes2018` can serve as a first visualization of the data just as tSNE,; in contrast to tSNE, UMAP directly embeds the single-cell graph and is faster;; UMAP is also used for measuring connectivities and computing neighbors,; see {func}`~scanpy.pp.neighbors`",efficient,MatchSource.DOCS,scverse,scanpy,1.10.2,https://github.com/scverse/scanpy/tree/1.10.2/docs/release-notes/1.0.0.md:103,efficient,103,docs/release-notes/1.0.0.md,https://scanpy.readthedocs.io,https://github.com/scverse/scanpy/tree/1.10.2/docs/release-notes/1.0.0.md,1,['efficient'],['efficient'],"The system’s ability to optimize resource use and minimize energy consumption while achieving required performance. This involves monitoring, allocation, and adaptation of resources.","
You are an expert in evaluating and categorizing quality attributes in software engineering. You possess the necessary skills to distinguish sentences that clearly relate to a given quality attribute from those that do not. 

Evaluate whether the content accurately aligns with its associated quality attribute, given the context provided. Your goal is to determine if the content makes sense in relation to the quality attribute description or if it is a false positive.

Data:

Quality Attribute: Energy Efficiency
Attribute Description: The system’s ability to optimize resource use and minimize energy consumption while achieving required performance. This involves monitoring, allocation, and adaptation of resources.
Content: ### 1.0.0 {small}`2018-03-30`. ```{rubric} Major updates; ```. - Scanpy is much faster and more memory efficient: preprocess, cluster and; visualize 1.3M cells in [6h], 130K cells in [14min], and 68K cells in [3min] {smaller}`A Wolf`; - the API gained a preprocessing function {func}`~scanpy.pp.neighbors` and a; class {func}`~scanpy.Neighbors` to which all basic graph computations are; delegated {smaller}`A Wolf`. ```{warning}; ```{rubric} Upgrading to 1.0 isn’t fully backwards compatible in the following changes; ```. - the graph-based tools {func}`~scanpy.tl.louvain`; {func}`~scanpy.tl.dpt` {func}`~scanpy.tl.draw_graph`; {func}`~scanpy.tl.umap` {func}`~scanpy.tl.diffmap`; {func}`~scanpy.tl.paga` require prior computation of the graph:; `sc.pp.neighbors(adata, n_neighbors=5); sc.tl.louvain(adata)` instead of; previously `sc.tl.louvain(adata, n_neighbors=5)`; - install `numba` via `conda install numba`, which replaces cython; - the default connectivity measure (dpt will look different using default; settings) changed. setting `method='gauss'` in `sc.pp.neighbors` uses; gauss kernel connectivities and reproduces the previous behavior,; see, for instance in the example [paul15].; - namings of returned annotation have changed for less bloated AnnData; objects, which means that some of the unstructured annotation of old; AnnData files is not recognized anymore; - replace occurances of `group_by` with `groupby` (consistency with; `pandas`); - it is worth checking out the notebook examples to see changes, e.g.; the [seurat] example.; - upgrading scikit-learn from 0.18 to 0.19 changed the implementation of PCA,; some results might therefore look slightly different; ```. ```{rubric} Further updates; ```. - UMAP {cite:p}`McInnes2018` can serve as a first visualization of the data just as tSNE,; in contrast to tSNE, UMAP directly embeds the single-cell graph and is faster;; UMAP is also used for measuring connectivities and computing neighbors,; see {func}`~scanpy.pp.neighbors`

Instructions: 
1. Analyze the content and the attribute description.
2. Determine if the content accurately reflects the intended quality attribute in this context.
3. If it does, label it as `true_positive: true`; if not, mark it as a `true_positive: false`.
4. If the content consists only of logs with no other text, mark it as a `true_positive: false`. 
4. If the content partially consists of logs, focus on analyzing remaining text. 
5. Add `reasoning` why the content is a true or false positive.
",True,"The content discusses updates and changes in Scanpy, including optimizations for speed and memory usage (preprocessing, clustering, visualization), installation requirements (numba instead of cython), API changes (new functions for graph computations), and backwards compatibility issues. These focus on resource optimization and efficiency improvements, which align with the Energy Efficiency quality attribute as they involve minimizing energy consumption through efficient resource use. The content also mentions UMAP's faster processing compared to tSNE, further supporting energy efficiency by reducing computational time and resources."
Energy Efficiency,"### 1.4.1 {small}`2019-04-26`. ```{rubric} New functionality; ```. - Scanpy has a command line interface again. Invoking it with `scanpy somecommand [args]` calls `scanpy-somecommand [args]`, except for builtin commands (currently `scanpy settings`) {pr}`604` {smaller}`P Angerer`; - {func}`~scanpy.datasets.ebi_expression_atlas` allows convenient download of EBI expression atlas {smaller}`I Virshup`; - {func}`~scanpy.tl.marker_gene_overlap` computes overlaps of marker genes {smaller}`M Luecken`; - {func}`~scanpy.tl.filter_rank_genes_groups` filters out genes based on fold change and fraction of cells expressing genes {smaller}`F Ramirez`; - {func}`~scanpy.pp.normalize_total` replaces {func}`~scanpy.pp.normalize_per_cell`, is more efficient and provides a parameter to only normalize using a fraction of expressed genes {smaller}`S Rybakov`; - {func}`~scanpy.pp.downsample_counts` has been sped up, changed default value of `replace` parameter to `False` {pr}`474` {smaller}`I Virshup`; - {func}`~scanpy.tl.embedding_density` computes densities on embeddings {pr}`543` {smaller}`M Luecken`; - {func}`~scanpy.external.tl.palantir` interfaces Palantir {cite:p}`Setty2019` {pr}`493` {smaller}`A Mousa`. ```{rubric} Code design; ```. - `.layers` support of scatter plots {smaller}`F Ramirez`; - fix double-logarithmization in compute of log fold change in {func}`~scanpy.tl.rank_genes_groups` {smaller}`A Muñoz-Rojas`; - fix return sections of docs {smaller}`P Angerer`; ",efficient,MatchSource.DOCS,scverse,scanpy,1.10.2,https://github.com/scverse/scanpy/tree/1.10.2/docs/release-notes/1.4.1.md:739,efficient,739,docs/release-notes/1.4.1.md,https://scanpy.readthedocs.io,https://github.com/scverse/scanpy/tree/1.10.2/docs/release-notes/1.4.1.md,1,['efficient'],['efficient'],"The system’s ability to optimize resource use and minimize energy consumption while achieving required performance. This involves monitoring, allocation, and adaptation of resources.","
You are an expert in evaluating and categorizing quality attributes in software engineering. You possess the necessary skills to distinguish sentences that clearly relate to a given quality attribute from those that do not. 

Evaluate whether the content accurately aligns with its associated quality attribute, given the context provided. Your goal is to determine if the content makes sense in relation to the quality attribute description or if it is a false positive.

Data:

Quality Attribute: Energy Efficiency
Attribute Description: The system’s ability to optimize resource use and minimize energy consumption while achieving required performance. This involves monitoring, allocation, and adaptation of resources.
Content: ### 1.4.1 {small}`2019-04-26`. ```{rubric} New functionality; ```. - Scanpy has a command line interface again. Invoking it with `scanpy somecommand [args]` calls `scanpy-somecommand [args]`, except for builtin commands (currently `scanpy settings`) {pr}`604` {smaller}`P Angerer`; - {func}`~scanpy.datasets.ebi_expression_atlas` allows convenient download of EBI expression atlas {smaller}`I Virshup`; - {func}`~scanpy.tl.marker_gene_overlap` computes overlaps of marker genes {smaller}`M Luecken`; - {func}`~scanpy.tl.filter_rank_genes_groups` filters out genes based on fold change and fraction of cells expressing genes {smaller}`F Ramirez`; - {func}`~scanpy.pp.normalize_total` replaces {func}`~scanpy.pp.normalize_per_cell`, is more efficient and provides a parameter to only normalize using a fraction of expressed genes {smaller}`S Rybakov`; - {func}`~scanpy.pp.downsample_counts` has been sped up, changed default value of `replace` parameter to `False` {pr}`474` {smaller}`I Virshup`; - {func}`~scanpy.tl.embedding_density` computes densities on embeddings {pr}`543` {smaller}`M Luecken`; - {func}`~scanpy.external.tl.palantir` interfaces Palantir {cite:p}`Setty2019` {pr}`493` {smaller}`A Mousa`. ```{rubric} Code design; ```. - `.layers` support of scatter plots {smaller}`F Ramirez`; - fix double-logarithmization in compute of log fold change in {func}`~scanpy.tl.rank_genes_groups` {smaller}`A Muñoz-Rojas`; - fix return sections of docs {smaller}`P Angerer`; 

Instructions: 
1. Analyze the content and the attribute description.
2. Determine if the content accurately reflects the intended quality attribute in this context.
3. If it does, label it as `true_positive: true`; if not, mark it as a `true_positive: false`.
4. If the content consists only of logs with no other text, mark it as a `true_positive: false`. 
4. If the content partially consists of logs, focus on analyzing remaining text. 
5. Add `reasoning` why the content is a true or false positive.
",False,"The content provided discusses updates and new features in Scanpy, such as new commands and improvements in existing functions. While energy efficiency relates to resource optimization, this content focuses on code functionality and feature enhancements rather than resource management or optimization. Therefore, the content does not accurately align with the Energy Efficiency quality attribute description."
Energy Efficiency,"### 1.4.6 {small}`2020-03-17`. ~~~{rubric} Functionality in `external`; ~~~. - {func}`~scanpy.external.tl.sam` self-assembling manifolds {cite:p}`Tarashansky2019` {pr}`903` {smaller}`A Tarashansky`; - {func}`~scanpy.external.tl.harmony_timeseries` for trajectory inference on discrete time points {pr}`994` {smaller}`A Mousa`; - {func}`~scanpy.external.tl.wishbone` for trajectory inference (bifurcations) {pr}`1063` {smaller}`A Mousa`. ```{rubric} Code design; ```. - {mod}`~scanpy.pl.violin` now reads `.uns['colors_...']` {pr}`1029` {smaller}`michalk8`. ```{rubric} Bug fixes; ```. - adapt {func}`~scanpy.tl.ingest` for UMAP 0.4 {pr}`1038` {pr}`1106` {smaller}`S Rybakov`; - compat with matplotlib 3.1 and 3.2 {pr}`1090` {smaller}`I Virshup, P Angerer`; - fix PAGA for new igraph {pr}`1037` {smaller}`P Angerer`; - fix rapids compat of louvain {pr}`1079` {smaller}`LouisFaure`; ",adapt,MatchSource.DOCS,scverse,scanpy,1.10.2,https://github.com/scverse/scanpy/tree/1.10.2/docs/release-notes/1.4.6.md:587,adapt,587,docs/release-notes/1.4.6.md,https://scanpy.readthedocs.io,https://github.com/scverse/scanpy/tree/1.10.2/docs/release-notes/1.4.6.md,1,['adapt'],['adapt'],"The system’s ability to optimize resource use and minimize energy consumption while achieving required performance. This involves monitoring, allocation, and adaptation of resources.","
You are an expert in evaluating and categorizing quality attributes in software engineering. You possess the necessary skills to distinguish sentences that clearly relate to a given quality attribute from those that do not. 

Evaluate whether the content accurately aligns with its associated quality attribute, given the context provided. Your goal is to determine if the content makes sense in relation to the quality attribute description or if it is a false positive.

Data:

Quality Attribute: Energy Efficiency
Attribute Description: The system’s ability to optimize resource use and minimize energy consumption while achieving required performance. This involves monitoring, allocation, and adaptation of resources.
Content: ### 1.4.6 {small}`2020-03-17`. ~~~{rubric} Functionality in `external`; ~~~. - {func}`~scanpy.external.tl.sam` self-assembling manifolds {cite:p}`Tarashansky2019` {pr}`903` {smaller}`A Tarashansky`; - {func}`~scanpy.external.tl.harmony_timeseries` for trajectory inference on discrete time points {pr}`994` {smaller}`A Mousa`; - {func}`~scanpy.external.tl.wishbone` for trajectory inference (bifurcations) {pr}`1063` {smaller}`A Mousa`. ```{rubric} Code design; ```. - {mod}`~scanpy.pl.violin` now reads `.uns['colors_...']` {pr}`1029` {smaller}`michalk8`. ```{rubric} Bug fixes; ```. - adapt {func}`~scanpy.tl.ingest` for UMAP 0.4 {pr}`1038` {pr}`1106` {smaller}`S Rybakov`; - compat with matplotlib 3.1 and 3.2 {pr}`1090` {smaller}`I Virshup, P Angerer`; - fix PAGA for new igraph {pr}`1037` {smaller}`P Angerer`; - fix rapids compat of louvain {pr}`1079` {smaller}`LouisFaure`; 

Instructions: 
1. Analyze the content and the attribute description.
2. Determine if the content accurately reflects the intended quality attribute in this context.
3. If it does, label it as `true_positive: true`; if not, mark it as a `true_positive: false`.
4. If the content consists only of logs with no other text, mark it as a `true_positive: false`. 
4. If the content partially consists of logs, focus on analyzing remaining text. 
5. Add `reasoning` why the content is a true or false positive.
",True,"The content provided includes references to function updates, code design changes, and bug fixes within scanpy. This aligns with the description of Energy Efficiency as optimizing resource use through efficient updates and maintaining system performance."
Energy Efficiency,(contribution-guide)=. # Contributing. Contributions to scanpy are welcome!; This section of the docs provides some guidelines and tips to follow when contributing. ```{toctree}; code; getting-set-up; testing; documentation; ci; versioning; release; ```. Parts of the guidelines have been adapted from the [pandas](https://pandas.pydata.org/pandas-docs/stable/development/index.html) and [MDAnalysis](https://userguide.mdanalysis.org/stable/contributing.html) guides.; These are both excellent guides and we highly recommend checking them out.; ,adapt,MatchSource.DOCS,scverse,scanpy,1.10.2,https://github.com/scverse/scanpy/tree/1.10.2/docs/dev/index.md:289,adapted,289,docs/dev/index.md,https://scanpy.readthedocs.io,https://github.com/scverse/scanpy/tree/1.10.2/docs/dev/index.md,1,['adapt'],['adapted'],"The system’s ability to optimize resource use and minimize energy consumption while achieving required performance. This involves monitoring, allocation, and adaptation of resources.","
You are an expert in evaluating and categorizing quality attributes in software engineering. You possess the necessary skills to distinguish sentences that clearly relate to a given quality attribute from those that do not. 

Evaluate whether the content accurately aligns with its associated quality attribute, given the context provided. Your goal is to determine if the content makes sense in relation to the quality attribute description or if it is a false positive.

Data:

Quality Attribute: Energy Efficiency
Attribute Description: The system’s ability to optimize resource use and minimize energy consumption while achieving required performance. This involves monitoring, allocation, and adaptation of resources.
Content: (contribution-guide)=. # Contributing. Contributions to scanpy are welcome!; This section of the docs provides some guidelines and tips to follow when contributing. ```{toctree}; code; getting-set-up; testing; documentation; ci; versioning; release; ```. Parts of the guidelines have been adapted from the [pandas](https://pandas.pydata.org/pandas-docs/stable/development/index.html) and [MDAnalysis](https://userguide.mdanalysis.org/stable/contributing.html) guides.; These are both excellent guides and we highly recommend checking them out.; 

Instructions: 
1. Analyze the content and the attribute description.
2. Determine if the content accurately reflects the intended quality attribute in this context.
3. If it does, label it as `true_positive: true`; if not, mark it as a `true_positive: false`.
4. If the content consists only of logs with no other text, mark it as a `true_positive: false`. 
4. If the content partially consists of logs, focus on analyzing remaining text. 
5. Add `reasoning` why the content is a true or false positive.
",False,"The content discusses contributing to scanpy by providing guidelines and tips for contributors, including code setup, testing, documentation, CI, versioning, release processes. While it mentions adapting from other projects, which might relate to resource management, it doesn't directly discuss energy efficiency or optimization of resources. Therefore, the content does not accurately reflect the Energy Efficiency quality attribute."
Energy Efficiency,"anpy); [![Docs](https://readthedocs.com/projects/icb-scanpy/badge/?version=latest)](https://scanpy.readthedocs.io); [![Build Status](https://dev.azure.com/scverse/scanpy/_apis/build/status/scverse.scanpy?branchName=main)](https://dev.azure.com/scverse/scanpy/_build); [![Discourse topics](https://img.shields.io/discourse/posts?color=yellow&logo=discourse&server=https%3A%2F%2Fdiscourse.scverse.org)](https://discourse.scverse.org/); [![Chat](https://img.shields.io/badge/zulip-join_chat-%2367b08f.svg)](https://scverse.zulipchat.com); [![Powered by NumFOCUS](https://img.shields.io/badge/powered%20by-NumFOCUS-orange.svg?style=flat&colorA=E1523D&colorB=007D8A)](https://numfocus.org/). # Scanpy – Single-Cell Analysis in Python. Scanpy is a scalable toolkit for analyzing single-cell gene expression data; built jointly with [anndata][]. It includes; preprocessing, visualization, clustering, trajectory inference and differential; expression testing. The Python-based implementation efficiently deals with; datasets of more than one million cells. Discuss usage on the scverse [Discourse][]. Read the [documentation][].; If you'd like to contribute by opening an issue or creating a pull request, please take a look at our [contribution guide][]. [anndata]: https://anndata.readthedocs.io; [discourse]: https://discourse.scverse.org/; [documentation]: https://scanpy.readthedocs.io. [//]: # (numfocus-fiscal-sponsor-attribution). scanpy is part of the scverse project ([website](https://scverse.org), [governance](https://scverse.org/about/roles)) and is fiscally sponsored by [NumFOCUS](https://numfocus.org/).; If you like scverse and want to support our mission, please consider making a [donation](https://numfocus.org/donate-to-scverse) to support our efforts. <div align=""center"">; <a href=""https://numfocus.org/project/scverse"">; <img; src=""https://raw.githubusercontent.com/numfocus/templates/master/images/numfocus-logo.png""; width=""200""; >; </a>; </div>. ## Citation. If you use `scanpy` i",efficient,MatchSource.DOCS,scverse,scanpy,1.10.2,https://github.com/scverse/scanpy/tree/1.10.2/README.md:1424,efficiently,1424,README.md,https://scanpy.readthedocs.io,https://github.com/scverse/scanpy/tree/1.10.2/README.md,1,['efficient'],['efficiently'],"The system’s ability to optimize resource use and minimize energy consumption while achieving required performance. This involves monitoring, allocation, and adaptation of resources.","
You are an expert in evaluating and categorizing quality attributes in software engineering. You possess the necessary skills to distinguish sentences that clearly relate to a given quality attribute from those that do not. 

Evaluate whether the content accurately aligns with its associated quality attribute, given the context provided. Your goal is to determine if the content makes sense in relation to the quality attribute description or if it is a false positive.

Data:

Quality Attribute: Energy Efficiency
Attribute Description: The system’s ability to optimize resource use and minimize energy consumption while achieving required performance. This involves monitoring, allocation, and adaptation of resources.
Content: anpy); [![Docs](https://readthedocs.com/projects/icb-scanpy/badge/?version=latest)](https://scanpy.readthedocs.io); [![Build Status](https://dev.azure.com/scverse/scanpy/_apis/build/status/scverse.scanpy?branchName=main)](https://dev.azure.com/scverse/scanpy/_build); [![Discourse topics](https://img.shields.io/discourse/posts?color=yellow&logo=discourse&server=https%3A%2F%2Fdiscourse.scverse.org)](https://discourse.scverse.org/); [![Chat](https://img.shields.io/badge/zulip-join_chat-%2367b08f.svg)](https://scverse.zulipchat.com); [![Powered by NumFOCUS](https://img.shields.io/badge/powered%20by-NumFOCUS-orange.svg?style=flat&colorA=E1523D&colorB=007D8A)](https://numfocus.org/). # Scanpy – Single-Cell Analysis in Python. Scanpy is a scalable toolkit for analyzing single-cell gene expression data; built jointly with [anndata][]. It includes; preprocessing, visualization, clustering, trajectory inference and differential; expression testing. The Python-based implementation efficiently deals with; datasets of more than one million cells. Discuss usage on the scverse [Discourse][]. Read the [documentation][].; If you'd like to contribute by opening an issue or creating a pull request, please take a look at our [contribution guide][]. [anndata]: https://anndata.readthedocs.io; [discourse]: https://discourse.scverse.org/; [documentation]: https://scanpy.readthedocs.io. [//]: # (numfocus-fiscal-sponsor-attribution). scanpy is part of the scverse project ([website](https://scverse.org), [governance](https://scverse.org/about/roles)) and is fiscally sponsored by [NumFOCUS](https://numfocus.org/).; If you like scverse and want to support our mission, please consider making a [donation](https://numfocus.org/donate-to-scverse) to support our efforts. <div align=""center"">; <a href=""https://numfocus.org/project/scverse"">; <img; src=""https://raw.githubusercontent.com/numfocus/templates/master/images/numfocus-logo.png""; width=""200""; >; </a>; </div>. ## Citation. If you use `scanpy` i

Instructions: 
1. Analyze the content and the attribute description.
2. Determine if the content accurately reflects the intended quality attribute in this context.
3. If it does, label it as `true_positive: true`; if not, mark it as a `true_positive: false`.
4. If the content consists only of logs with no other text, mark it as a `true_positive: false`. 
4. If the content partially consists of logs, focus on analyzing remaining text. 
5. Add `reasoning` why the content is a true or false positive.
",True,"The content describes scanpy, which is a Python tool for single-cell analysis. It involves preprocessing, visualization, clustering, etc., and mentions its scalability with datasets over one million cells. The description aligns with resource optimization as it efficiently handles large data sets, implying lower energy consumption in processing. It also discusses contribution guidelines and community support, which relates to resource allocation and monitoring in development processes. Therefore, the content accurately reflects the quality attribute of Energy Efficiency."
Energy Efficiency,"b/stars/scverse/scanpy?style=flat&logo=GitHub&color=yellow)](https://github.com/scverse/scanpy/stargazers); [![PyPI](https://img.shields.io/pypi/v/scanpy?logo=PyPI)](https://pypi.org/project/scanpy); [![Downloads](https://static.pepy.tech/badge/scanpy)](https://pepy.tech/project/scanpy); [![Conda](https://img.shields.io/conda/dn/conda-forge/scanpy?logo=Anaconda)](https://anaconda.org/conda-forge/scanpy); [![Docs](https://readthedocs.com/projects/icb-scanpy/badge/?version=latest)](https://scanpy.readthedocs.io); [![Build Status](https://dev.azure.com/scverse/scanpy/_apis/build/status/scverse.scanpy?branchName=main)](https://dev.azure.com/scverse/scanpy/_build); [![Discourse topics](https://img.shields.io/discourse/posts?color=yellow&logo=discourse&server=https%3A%2F%2Fdiscourse.scverse.org)](https://discourse.scverse.org/); [![Chat](https://img.shields.io/badge/zulip-join_chat-%2367b08f.svg)](https://scverse.zulipchat.com); [![Powered by NumFOCUS](https://img.shields.io/badge/powered%20by-NumFOCUS-orange.svg?style=flat&colorA=E1523D&colorB=007D8A)](https://numfocus.org/). # Scanpy – Single-Cell Analysis in Python. Scanpy is a scalable toolkit for analyzing single-cell gene expression data; built jointly with [anndata][]. It includes; preprocessing, visualization, clustering, trajectory inference and differential; expression testing. The Python-based implementation efficiently deals with; datasets of more than one million cells. Discuss usage on the scverse [Discourse][]. Read the [documentation][].; If you'd like to contribute by opening an issue or creating a pull request, please take a look at our [contribution guide][]. [anndata]: https://anndata.readthedocs.io; [discourse]: https://discourse.scverse.org/; [documentation]: https://scanpy.readthedocs.io. [//]: # (numfocus-fiscal-sponsor-attribution). scanpy is part of the scverse project ([website](https://scverse.org), [governance](https://scverse.org/about/roles)) and is fiscally sponsored by [NumFOCUS](https://n",power,MatchSource.DOCS,scverse,scanpy,1.10.2,https://github.com/scverse/scanpy/tree/1.10.2/README.md:1028,powered,1028,README.md,https://scanpy.readthedocs.io,https://github.com/scverse/scanpy/tree/1.10.2/README.md,1,['power'],['powered'],"The system’s ability to optimize resource use and minimize energy consumption while achieving required performance. This involves monitoring, allocation, and adaptation of resources.","
You are an expert in evaluating and categorizing quality attributes in software engineering. You possess the necessary skills to distinguish sentences that clearly relate to a given quality attribute from those that do not. 

Evaluate whether the content accurately aligns with its associated quality attribute, given the context provided. Your goal is to determine if the content makes sense in relation to the quality attribute description or if it is a false positive.

Data:

Quality Attribute: Energy Efficiency
Attribute Description: The system’s ability to optimize resource use and minimize energy consumption while achieving required performance. This involves monitoring, allocation, and adaptation of resources.
Content: b/stars/scverse/scanpy?style=flat&logo=GitHub&color=yellow)](https://github.com/scverse/scanpy/stargazers); [![PyPI](https://img.shields.io/pypi/v/scanpy?logo=PyPI)](https://pypi.org/project/scanpy); [![Downloads](https://static.pepy.tech/badge/scanpy)](https://pepy.tech/project/scanpy); [![Conda](https://img.shields.io/conda/dn/conda-forge/scanpy?logo=Anaconda)](https://anaconda.org/conda-forge/scanpy); [![Docs](https://readthedocs.com/projects/icb-scanpy/badge/?version=latest)](https://scanpy.readthedocs.io); [![Build Status](https://dev.azure.com/scverse/scanpy/_apis/build/status/scverse.scanpy?branchName=main)](https://dev.azure.com/scverse/scanpy/_build); [![Discourse topics](https://img.shields.io/discourse/posts?color=yellow&logo=discourse&server=https%3A%2F%2Fdiscourse.scverse.org)](https://discourse.scverse.org/); [![Chat](https://img.shields.io/badge/zulip-join_chat-%2367b08f.svg)](https://scverse.zulipchat.com); [![Powered by NumFOCUS](https://img.shields.io/badge/powered%20by-NumFOCUS-orange.svg?style=flat&colorA=E1523D&colorB=007D8A)](https://numfocus.org/). # Scanpy – Single-Cell Analysis in Python. Scanpy is a scalable toolkit for analyzing single-cell gene expression data; built jointly with [anndata][]. It includes; preprocessing, visualization, clustering, trajectory inference and differential; expression testing. The Python-based implementation efficiently deals with; datasets of more than one million cells. Discuss usage on the scverse [Discourse][]. Read the [documentation][].; If you'd like to contribute by opening an issue or creating a pull request, please take a look at our [contribution guide][]. [anndata]: https://anndata.readthedocs.io; [discourse]: https://discourse.scverse.org/; [documentation]: https://scanpy.readthedocs.io. [//]: # (numfocus-fiscal-sponsor-attribution). scanpy is part of the scverse project ([website](https://scverse.org), [governance](https://scverse.org/about/roles)) and is fiscally sponsored by [NumFOCUS](https://n

Instructions: 
1. Analyze the content and the attribute description.
2. Determine if the content accurately reflects the intended quality attribute in this context.
3. If it does, label it as `true_positive: true`; if not, mark it as a `true_positive: false`.
4. If the content consists only of logs with no other text, mark it as a `true_positive: false`. 
4. If the content partially consists of logs, focus on analyzing remaining text. 
5. Add `reasoning` why the content is a true or false positive.
",True,"The provided content is about Scanpy, which is a Python tool for single-cell gene expression analysis. It includes preprocessing, visualization, clustering, and other functionalities. The description emphasizes efficiency in handling large datasets, such as those with over one million cells, achieved through optimized resource use. This aligns well with the quality attribute of Energy Efficiency, as it discusses optimizing resource utilization and minimizing energy consumption during data processing. Additionally, the content includes links to documentation and contribution guidelines, but the primary focus is on the tool's functionality in handling large datasets efficiently, which directly relates to energy efficiency by implying optimized resource allocation and performance."
Energy Efficiency,"l.louvain](https://github.com/scverse/scanpy/blob/a811fee0ef44fcaecbde0cad6336336bce649484/scanpy/tools/_louvain.py#L22-L90) as an example for everything mentioned here. ### Plots in docstrings. One of the most useful things you can include in a docstring is examples of how the function should be used.; These are a great way to demonstrate intended usage and give users a template they can copy and modify.; We're able to include the plots produced by these snippets in the rendered docs using [matplotlib's plot directive](https://matplotlib.org/devel/plot_directive.html).; For examples of this, see the `Examples` sections of {func}`~scanpy.pl.dotplot` or {func}`~scanpy.pp.calculate_qc_metrics`. Note that anything in these sections will need to be run when the docs are built, so please keep them computationally light. - If you need computed features (e.g. an embedding, differential expression results) load data that has this precomputed.; - Try to re-use datasets, this reduces the amount of data that needs to be downloaded to the CI server. ### `Params` section. The `Params` abbreviation is a legit replacement for `Parameters`. To document parameter types use type annotations on function parameters.; These will automatically populate the docstrings on import, and when the documentation is built. Use the python standard library types (defined in [collections.abc](https://docs.python.org/3/library/collections.abc.html) and [typing](https://docs.python.org/3/library/typing.html) modules) for containers, e.g. `Sequence`s (like `list`), `Iterable`s (like `set`), and `Mapping`s (like `dict`).; Always specify what these contain, e.g. `{'a': (1, 2)}` → `Mapping[str, Tuple[int, int]]`.; If you can’t use one of those, use a concrete class like `AnnData`.; If your parameter only accepts an enumeration of strings, specify them like so: `Literal['elem-1', 'elem-2']`. ### `Returns` section. There are three types of return sections – prose, tuple, and a mix of both. 1. Prose is for si",reduce,MatchSource.DOCS,scverse,scanpy,1.10.2,https://github.com/scverse/scanpy/tree/1.10.2/docs/dev/documentation.md:3932,reduces,3932,docs/dev/documentation.md,https://scanpy.readthedocs.io,https://github.com/scverse/scanpy/tree/1.10.2/docs/dev/documentation.md,1,['reduce'],['reduces'],"The system’s ability to optimize resource use and minimize energy consumption while achieving required performance. This involves monitoring, allocation, and adaptation of resources.","
You are an expert in evaluating and categorizing quality attributes in software engineering. You possess the necessary skills to distinguish sentences that clearly relate to a given quality attribute from those that do not. 

Evaluate whether the content accurately aligns with its associated quality attribute, given the context provided. Your goal is to determine if the content makes sense in relation to the quality attribute description or if it is a false positive.

Data:

Quality Attribute: Energy Efficiency
Attribute Description: The system’s ability to optimize resource use and minimize energy consumption while achieving required performance. This involves monitoring, allocation, and adaptation of resources.
Content: l.louvain](https://github.com/scverse/scanpy/blob/a811fee0ef44fcaecbde0cad6336336bce649484/scanpy/tools/_louvain.py#L22-L90) as an example for everything mentioned here. ### Plots in docstrings. One of the most useful things you can include in a docstring is examples of how the function should be used.; These are a great way to demonstrate intended usage and give users a template they can copy and modify.; We're able to include the plots produced by these snippets in the rendered docs using [matplotlib's plot directive](https://matplotlib.org/devel/plot_directive.html).; For examples of this, see the `Examples` sections of {func}`~scanpy.pl.dotplot` or {func}`~scanpy.pp.calculate_qc_metrics`. Note that anything in these sections will need to be run when the docs are built, so please keep them computationally light. - If you need computed features (e.g. an embedding, differential expression results) load data that has this precomputed.; - Try to re-use datasets, this reduces the amount of data that needs to be downloaded to the CI server. ### `Params` section. The `Params` abbreviation is a legit replacement for `Parameters`. To document parameter types use type annotations on function parameters.; These will automatically populate the docstrings on import, and when the documentation is built. Use the python standard library types (defined in [collections.abc](https://docs.python.org/3/library/collections.abc.html) and [typing](https://docs.python.org/3/library/typing.html) modules) for containers, e.g. `Sequence`s (like `list`), `Iterable`s (like `set`), and `Mapping`s (like `dict`).; Always specify what these contain, e.g. `{'a': (1, 2)}` → `Mapping[str, Tuple[int, int]]`.; If you can’t use one of those, use a concrete class like `AnnData`.; If your parameter only accepts an enumeration of strings, specify them like so: `Literal['elem-1', 'elem-2']`. ### `Returns` section. There are three types of return sections – prose, tuple, and a mix of both. 1. Prose is for si

Instructions: 
1. Analyze the content and the attribute description.
2. Determine if the content accurately reflects the intended quality attribute in this context.
3. If it does, label it as `true_positive: true`; if not, mark it as a `true_positive: false`.
4. If the content consists only of logs with no other text, mark it as a `true_positive: false`. 
4. If the content partially consists of logs, focus on analyzing remaining text. 
5. Add `reasoning` why the content is a true or false positive.
",False,"The provided content is part of a documentation snippet for a function in Python, which includes information about how to structure docstrings, such as sections like 'Params', 'Returns', and examples. The content mentions using specific formatting for parameters and return values, including type annotations and examples from other functions. This focuses on the structure and readability of the documentation rather than the actual functionality related to energy efficiency. As a result, it does not align with the quality attribute described, which is about resource optimization and energy consumption in software systems."
Energy Efficiency,"rkazemi, G Palla, P Angerer`; - {func}`~scanpy.pl.spatial` plot spatial data {pr}`1012` {smaller}`G Palla, P Angerer`. ```{rubric} New functionality; ```. - Many functions, like {func}`~scanpy.pp.neighbors` and {func}`~scanpy.tl.umap`, now store cell-by-cell graphs in {attr}`~anndata.AnnData.obsp` {pr}`1118` {smaller}`S Rybakov`; - {func}`~scanpy.pp.scale` and {func}`~scanpy.pp.log1p` can be used on any element in {attr}`~anndata.AnnData.layers` or {attr}`~anndata.AnnData.obsm` {pr}`1173` {smaller}`I Virshup`. ```{rubric} External tools; ```. - `scanpy.external.pp.scvi` for preprocessing with scVI {pr}`1085` {smaller}`G Xing`; - Guide for using `Scanpy in R` {pr}`1186` {smaller}`L Zappia`. ```{rubric} Performance; ```. - {func}`~scanpy.pp.pca` now uses efficient implicit centering for sparse matrices. This can lead to signifigantly improved performance for large datasets {pr}`1066` {smaller}`A Tarashansky`; - {func}`~scanpy.tl.score_genes` now has an efficient implementation for sparse matrices with missing values {pr}`1196` {smaller}`redst4r`. ```{warning}; The new {func}`~scanpy.pp.pca` implementation can result in slightly different results for sparse matrices. See the pr ({pr}`1066`) and documentation for more info.; ```. ```{rubric} Code design; ```. - {func}`~scanpy.pl.stacked_violin` can now be used as a subplot {pr}`1084` {smaller}`P Angerer`; - {func}`~scanpy.tl.score_genes` has improved logging {pr}`1119` {smaller}`G Eraslan`; - {func}`~scanpy.pp.scale` now saves mean and standard deviation in the {attr}`~anndata.AnnData.var` {pr}`1173` {smaller}`A Wolf`; - {func}`~scanpy.external.tl.harmony_timeseries` {pr}`1091` {smaller}`A Mousa`. ```{rubric} Bug fixes; ```. - {func}`~scanpy.pp.combat` now works when `obs_names` aren't unique. {pr}`1215` {smaller}`I Virshup`; - {func}`~scanpy.pp.scale` can now be used on dense arrays without centering {pr}`1160` {smaller}`simonwm`; - {func}`~scanpy.pp.regress_out` now works when some features are constant {pr}`1194` {sma",efficient,MatchSource.DOCS,scverse,scanpy,1.10.2,https://github.com/scverse/scanpy/tree/1.10.2/docs/release-notes/1.5.0.md:1686,efficient,1686,docs/release-notes/1.5.0.md,https://scanpy.readthedocs.io,https://github.com/scverse/scanpy/tree/1.10.2/docs/release-notes/1.5.0.md,1,['efficient'],['efficient'],"The system’s ability to optimize resource use and minimize energy consumption while achieving required performance. This involves monitoring, allocation, and adaptation of resources.","
You are an expert in evaluating and categorizing quality attributes in software engineering. You possess the necessary skills to distinguish sentences that clearly relate to a given quality attribute from those that do not. 

Evaluate whether the content accurately aligns with its associated quality attribute, given the context provided. Your goal is to determine if the content makes sense in relation to the quality attribute description or if it is a false positive.

Data:

Quality Attribute: Energy Efficiency
Attribute Description: The system’s ability to optimize resource use and minimize energy consumption while achieving required performance. This involves monitoring, allocation, and adaptation of resources.
Content: rkazemi, G Palla, P Angerer`; - {func}`~scanpy.pl.spatial` plot spatial data {pr}`1012` {smaller}`G Palla, P Angerer`. ```{rubric} New functionality; ```. - Many functions, like {func}`~scanpy.pp.neighbors` and {func}`~scanpy.tl.umap`, now store cell-by-cell graphs in {attr}`~anndata.AnnData.obsp` {pr}`1118` {smaller}`S Rybakov`; - {func}`~scanpy.pp.scale` and {func}`~scanpy.pp.log1p` can be used on any element in {attr}`~anndata.AnnData.layers` or {attr}`~anndata.AnnData.obsm` {pr}`1173` {smaller}`I Virshup`. ```{rubric} External tools; ```. - `scanpy.external.pp.scvi` for preprocessing with scVI {pr}`1085` {smaller}`G Xing`; - Guide for using `Scanpy in R` {pr}`1186` {smaller}`L Zappia`. ```{rubric} Performance; ```. - {func}`~scanpy.pp.pca` now uses efficient implicit centering for sparse matrices. This can lead to signifigantly improved performance for large datasets {pr}`1066` {smaller}`A Tarashansky`; - {func}`~scanpy.tl.score_genes` now has an efficient implementation for sparse matrices with missing values {pr}`1196` {smaller}`redst4r`. ```{warning}; The new {func}`~scanpy.pp.pca` implementation can result in slightly different results for sparse matrices. See the pr ({pr}`1066`) and documentation for more info.; ```. ```{rubric} Code design; ```. - {func}`~scanpy.pl.stacked_violin` can now be used as a subplot {pr}`1084` {smaller}`P Angerer`; - {func}`~scanpy.tl.score_genes` has improved logging {pr}`1119` {smaller}`G Eraslan`; - {func}`~scanpy.pp.scale` now saves mean and standard deviation in the {attr}`~anndata.AnnData.var` {pr}`1173` {smaller}`A Wolf`; - {func}`~scanpy.external.tl.harmony_timeseries` {pr}`1091` {smaller}`A Mousa`. ```{rubric} Bug fixes; ```. - {func}`~scanpy.pp.combat` now works when `obs_names` aren't unique. {pr}`1215` {smaller}`I Virshup`; - {func}`~scanpy.pp.scale` can now be used on dense arrays without centering {pr}`1160` {smaller}`simonwm`; - {func}`~scanpy.pp.regress_out` now works when some features are constant {pr}`1194` {sma

Instructions: 
1. Analyze the content and the attribute description.
2. Determine if the content accurately reflects the intended quality attribute in this context.
3. If it does, label it as `true_positive: true`; if not, mark it as a `true_positive: false`.
4. If the content consists only of logs with no other text, mark it as a `true_positive: false`. 
4. If the content partially consists of logs, focus on analyzing remaining text. 
5. Add `reasoning` why the content is a true or false positive.
",False,"The content discusses new functionalities, performance improvements, code design changes, and bug fixes related to scanpy. The energy efficiency quality attribute refers to the system's ability to optimize resource use and minimize energy consumption while achieving required performance. This could involve efficient processing of data, optimized algorithms, or resource-aware designs. While the updates mentioned are about functionality, performance, and bug fixes, there is no direct mention of resource optimization or energy consumption. Therefore, this content does not accurately reflect the intended quality attribute."
Integrability," Anaconda. If you do not have a working installation of Python 3.6 (or later), consider; installing [Miniconda] (see [Installing Miniconda]). Then run:. ```shell; conda install -c conda-forge scanpy python-igraph leidenalg; ```. Pull Scanpy from [PyPI](https://pypi.org/project/scanpy) (consider using `pip3` to access Python 3):. ```shell; pip install scanpy; ```. ## PyPI only. If you prefer to exclusively use PyPI run:. ```shell; pip install 'scanpy[leiden]'; ```. The extra `[leiden]` installs two packages that are needed for popular; parts of scanpy but aren't requirements: [igraph] {cite:p}`Csardi2006` and [leiden] {cite:p}`Traag2019`. (dev-install-instructions)=. ## Development Version. To work with the latest version [on GitHub]: clone the repository and `cd` into its root directory. ```shell; gh repo clone scverse/scanpy; cd scanpy; ```. If you are using `pip>=21.3`, an editable install can be made:. ```shell; pip install -e '.[dev,test]'; ```. If you want to let [conda] handle the installations of dependencies, do:. ```shell; pipx install beni; beni pyproject.toml > environment.yml; conda env create -f environment.yml; conda activate scanpy; pip install -e '.[dev,doc,test]'; ```. For instructions on how to work with the code, see the {ref}`contribution guide <contribution-guide>`. ## Docker. If you're using [Docker], you can use e.g. the image [gcfntnu/scanpy] from Docker Hub. ## Troubleshooting. If you get a `Permission denied` error, never use `sudo pip`. Instead, use virtual environments or:. ```shell; pip install --user scanpy; ```. **On MacOS**, if **not** using `conda`, you might need to install the C core of igraph via homebrew first. - `brew install igraph`. - If igraph still fails to install, see the question on [compiling igraph].; Alternatively consider installing gcc via `brew install gcc --without-multilib`; and exporting the required variables:. ```shell; export CC=""/usr/local/Cellar/gcc/X.x.x/bin/gcc-X""; export CXX=""/usr/local/Cellar/gcc/X.x.x/b",depend,MatchSource.DOCS,scverse,scanpy,1.10.2,https://github.com/scverse/scanpy/tree/1.10.2/docs/installation.md:1037,dependencies,1037,docs/installation.md,https://scanpy.readthedocs.io,https://github.com/scverse/scanpy/tree/1.10.2/docs/installation.md,1,['depend'],['dependencies'],"The ease of combining the system with other systems or components, measured by integration cost and technical risks. Integrability considers the complexity and compatibility of interfaces, including syntactic, semantic, behavioral, and temporal alignment.","
You are an expert in evaluating and categorizing quality attributes in software engineering. You possess the necessary skills to distinguish sentences that clearly relate to a given quality attribute from those that do not. 

Evaluate whether the content accurately aligns with its associated quality attribute, given the context provided. Your goal is to determine if the content makes sense in relation to the quality attribute description or if it is a false positive.

Data:

Quality Attribute: Integrability
Attribute Description: The ease of combining the system with other systems or components, measured by integration cost and technical risks. Integrability considers the complexity and compatibility of interfaces, including syntactic, semantic, behavioral, and temporal alignment.
Content:  Anaconda. If you do not have a working installation of Python 3.6 (or later), consider; installing [Miniconda] (see [Installing Miniconda]). Then run:. ```shell; conda install -c conda-forge scanpy python-igraph leidenalg; ```. Pull Scanpy from [PyPI](https://pypi.org/project/scanpy) (consider using `pip3` to access Python 3):. ```shell; pip install scanpy; ```. ## PyPI only. If you prefer to exclusively use PyPI run:. ```shell; pip install 'scanpy[leiden]'; ```. The extra `[leiden]` installs two packages that are needed for popular; parts of scanpy but aren't requirements: [igraph] {cite:p}`Csardi2006` and [leiden] {cite:p}`Traag2019`. (dev-install-instructions)=. ## Development Version. To work with the latest version [on GitHub]: clone the repository and `cd` into its root directory. ```shell; gh repo clone scverse/scanpy; cd scanpy; ```. If you are using `pip>=21.3`, an editable install can be made:. ```shell; pip install -e '.[dev,test]'; ```. If you want to let [conda] handle the installations of dependencies, do:. ```shell; pipx install beni; beni pyproject.toml > environment.yml; conda env create -f environment.yml; conda activate scanpy; pip install -e '.[dev,doc,test]'; ```. For instructions on how to work with the code, see the {ref}`contribution guide <contribution-guide>`. ## Docker. If you're using [Docker], you can use e.g. the image [gcfntnu/scanpy] from Docker Hub. ## Troubleshooting. If you get a `Permission denied` error, never use `sudo pip`. Instead, use virtual environments or:. ```shell; pip install --user scanpy; ```. **On MacOS**, if **not** using `conda`, you might need to install the C core of igraph via homebrew first. - `brew install igraph`. - If igraph still fails to install, see the question on [compiling igraph].; Alternatively consider installing gcc via `brew install gcc --without-multilib`; and exporting the required variables:. ```shell; export CC=""/usr/local/Cellar/gcc/X.x.x/bin/gcc-X""; export CXX=""/usr/local/Cellar/gcc/X.x.x/b

Instructions: 
1. Analyze the content and the attribute description.
2. Determine if the content accurately reflects the intended quality attribute in this context.
3. If it does, label it as `true_positive: true`; if not, mark it as a `true_positive: false`.
4. If the content consists only of logs with no other text, mark it as a `true_positive: false`. 
4. If the content partially consists of logs, focus on analyzing remaining text. 
5. Add `reasoning` why the content is a true or false positive.
",False,"The provided content discusses installation instructions for Anaconda and Python packages like scanpy and igraph, which are related to software dependencies and installation steps. However, the quality attribute of Integrability focuses on how well systems can be integrated with each other, including interface compatibility and technical risks. The content does not directly address issues related to integration between systems or components; instead, it deals with installation procedures and dependency management. Therefore, it does not accurately reflect the Integrability quality attribute."
Integrability," gene, and allows retrieving values for multiple groups at once {pr}`1388` {smaller}`G Eraslan`; - Color annotations for gene sets in {func}`~scanpy.pl.heatmap` are now matched to color for cluster {pr}`1511` {smaller}`L Sikkema`; - PCA plots can now annotate axes with variance explained {pr}`1470` {smaller}`bfurtwa`; - Plots with `groupby` arguments can now group by values in the index by passing the index's name (like `pd.DataFrame.groupby`). {pr}`1583` {smaller}`F Ramirez`; - Added `na_color` and `na_in_legend` keyword arguments to {func}`~scanpy.pl.embedding` plots. Allows specifying color for missing or filtered values in plots like {func}`~scanpy.pl.umap` or {func}`~scanpy.pl.spatial` {pr}`1356` {smaller}`I Virshup`; - {func}`~scanpy.pl.embedding` plots now support passing `dict` of `{cluster_name: cluster_color, ...}` for palette argument {pr}`1392` {smaller}`I Virshup`. ```{rubric} External tools (new); ```. - Add [Scanorama](https://github.com/brianhie/scanorama) integration to scanpy external API ({func}`~scanpy.external.pp.scanorama_integrate`, {cite:t}`Hie2019`) {pr}`1332` {smaller}`B Hie`; - Scrublet {cite:p}`Wolock2019` integration: {func}`~scanpy.pp.scrublet`, {func}`~scanpy.pp.scrublet_simulate_doublets`, and plotting method {func}`~scanpy.pl.scrublet_score_distribution` {pr}`1476` {smaller}`J Manning`; - {func}`~scanpy.external.pp.hashsolo` for HTO demultiplexing {cite:p}`Bernstein2020` {pr}`1432` {smaller}`NJ Bernstein`; - Added [scirpy](https://github.com/icbi-lab/scirpy) (sc-AIRR analysis) to ecosystem page {pr}`1453` {smaller}`G Sturm`; - Added [scvi-tools](https://scvi-tools.org) to ecosystem page {pr}`1421` {smaller}`A Gayoso`. ```{rubric} External tools (changes); ```. - Updates for {func}`~scanpy.external.tl.palantir` and {func}`~scanpy.external.tl.palantir_results` {pr}`1245` {smaller}`A Mousa`; - Fixes to {func}`~scanpy.external.tl.harmony_timeseries` docs {pr}`1248` {smaller}`A Mousa`; - Support for `leiden` clustering by {func}`scanpy.ext",integrat,MatchSource.DOCS,scverse,scanpy,1.10.2,https://github.com/scverse/scanpy/tree/1.10.2/docs/release-notes/1.7.0.md:1609,integration,1609,docs/release-notes/1.7.0.md,https://scanpy.readthedocs.io,https://github.com/scverse/scanpy/tree/1.10.2/docs/release-notes/1.7.0.md,1,['integrat'],['integration'],"The ease of combining the system with other systems or components, measured by integration cost and technical risks. Integrability considers the complexity and compatibility of interfaces, including syntactic, semantic, behavioral, and temporal alignment.","
You are an expert in evaluating and categorizing quality attributes in software engineering. You possess the necessary skills to distinguish sentences that clearly relate to a given quality attribute from those that do not. 

Evaluate whether the content accurately aligns with its associated quality attribute, given the context provided. Your goal is to determine if the content makes sense in relation to the quality attribute description or if it is a false positive.

Data:

Quality Attribute: Integrability
Attribute Description: The ease of combining the system with other systems or components, measured by integration cost and technical risks. Integrability considers the complexity and compatibility of interfaces, including syntactic, semantic, behavioral, and temporal alignment.
Content:  gene, and allows retrieving values for multiple groups at once {pr}`1388` {smaller}`G Eraslan`; - Color annotations for gene sets in {func}`~scanpy.pl.heatmap` are now matched to color for cluster {pr}`1511` {smaller}`L Sikkema`; - PCA plots can now annotate axes with variance explained {pr}`1470` {smaller}`bfurtwa`; - Plots with `groupby` arguments can now group by values in the index by passing the index's name (like `pd.DataFrame.groupby`). {pr}`1583` {smaller}`F Ramirez`; - Added `na_color` and `na_in_legend` keyword arguments to {func}`~scanpy.pl.embedding` plots. Allows specifying color for missing or filtered values in plots like {func}`~scanpy.pl.umap` or {func}`~scanpy.pl.spatial` {pr}`1356` {smaller}`I Virshup`; - {func}`~scanpy.pl.embedding` plots now support passing `dict` of `{cluster_name: cluster_color, ...}` for palette argument {pr}`1392` {smaller}`I Virshup`. ```{rubric} External tools (new); ```. - Add [Scanorama](https://github.com/brianhie/scanorama) integration to scanpy external API ({func}`~scanpy.external.pp.scanorama_integrate`, {cite:t}`Hie2019`) {pr}`1332` {smaller}`B Hie`; - Scrublet {cite:p}`Wolock2019` integration: {func}`~scanpy.pp.scrublet`, {func}`~scanpy.pp.scrublet_simulate_doublets`, and plotting method {func}`~scanpy.pl.scrublet_score_distribution` {pr}`1476` {smaller}`J Manning`; - {func}`~scanpy.external.pp.hashsolo` for HTO demultiplexing {cite:p}`Bernstein2020` {pr}`1432` {smaller}`NJ Bernstein`; - Added [scirpy](https://github.com/icbi-lab/scirpy) (sc-AIRR analysis) to ecosystem page {pr}`1453` {smaller}`G Sturm`; - Added [scvi-tools](https://scvi-tools.org) to ecosystem page {pr}`1421` {smaller}`A Gayoso`. ```{rubric} External tools (changes); ```. - Updates for {func}`~scanpy.external.tl.palantir` and {func}`~scanpy.external.tl.palantir_results` {pr}`1245` {smaller}`A Mousa`; - Fixes to {func}`~scanpy.external.tl.harmony_timeseries` docs {pr}`1248` {smaller}`A Mousa`; - Support for `leiden` clustering by {func}`scanpy.ext

Instructions: 
1. Analyze the content and the attribute description.
2. Determine if the content accurately reflects the intended quality attribute in this context.
3. If it does, label it as `true_positive: true`; if not, mark it as a `true_positive: false`.
4. If the content consists only of logs with no other text, mark it as a `true_positive: false`. 
4. If the content partially consists of logs, focus on analyzing remaining text. 
5. Add `reasoning` why the content is a true or false positive.
",True,"The provided content discusses various software integrations and updates to functionality in scanpy, including adding new tools like Scrublet, Scanorama, and scirpy. These updates enhance the system's ability to integrate with other systems and components, aligning with the Integrability quality attribute which focuses on combining systems and reducing technical risks through compatibility. The content also mentions improvements in user interfaces for better usability when integrating, suggesting an alignment with integrability. Therefore, this is a true positive."
Integrability,"# API. Import Scanpy as:. ```; import scanpy as sc; ```. ```{note}; Additional functionality is available in the broader {doc}`ecosystem <../ecosystem>`, with some tools being wrapped in the {mod}`scanpy.external` module.; ```. ```{toctree}; :maxdepth: 2. preprocessing; tools; plotting; reading; get; queries; metrics; experimental; classes; settings; datasets; deprecated; ```; ",wrap,MatchSource.DOCS,scverse,scanpy,1.10.2,https://github.com/scverse/scanpy/tree/1.10.2/docs/api/index.md:176,wrapped,176,docs/api/index.md,https://scanpy.readthedocs.io,https://github.com/scverse/scanpy/tree/1.10.2/docs/api/index.md,1,['wrap'],['wrapped'],"The ease of combining the system with other systems or components, measured by integration cost and technical risks. Integrability considers the complexity and compatibility of interfaces, including syntactic, semantic, behavioral, and temporal alignment.","
You are an expert in evaluating and categorizing quality attributes in software engineering. You possess the necessary skills to distinguish sentences that clearly relate to a given quality attribute from those that do not. 

Evaluate whether the content accurately aligns with its associated quality attribute, given the context provided. Your goal is to determine if the content makes sense in relation to the quality attribute description or if it is a false positive.

Data:

Quality Attribute: Integrability
Attribute Description: The ease of combining the system with other systems or components, measured by integration cost and technical risks. Integrability considers the complexity and compatibility of interfaces, including syntactic, semantic, behavioral, and temporal alignment.
Content: # API. Import Scanpy as:. ```; import scanpy as sc; ```. ```{note}; Additional functionality is available in the broader {doc}`ecosystem <../ecosystem>`, with some tools being wrapped in the {mod}`scanpy.external` module.; ```. ```{toctree}; :maxdepth: 2. preprocessing; tools; plotting; reading; get; queries; metrics; experimental; classes; settings; datasets; deprecated; ```; 

Instructions: 
1. Analyze the content and the attribute description.
2. Determine if the content accurately reflects the intended quality attribute in this context.
3. If it does, label it as `true_positive: true`; if not, mark it as a `true_positive: false`.
4. If the content consists only of logs with no other text, mark it as a `true_positive: false`. 
4. If the content partially consists of logs, focus on analyzing remaining text. 
5. Add `reasoning` why the content is a true or false positive.
",False,"The provided code snippet imports scanpy, which is related to data analysis and genomics. The attribute in question is about integrability, which deals with how well systems can be combined. While importing a library is a basic step, it does not inherently relate to the integration of systems or components. Therefore, this content does not align with the quality attribute of integrability."
Integrability,# Basics. ```{toctree}; :maxdepth: 1. clustering; clustering-2017; integrating-data-using-ingest; ```; ,integrat,MatchSource.DOCS,scverse,scanpy,1.10.2,https://github.com/scverse/scanpy/tree/1.10.2/docs/tutorials/basics/index.md:67,integrating-data-using-ingest,67,docs/tutorials/basics/index.md,https://scanpy.readthedocs.io,https://github.com/scverse/scanpy/tree/1.10.2/docs/tutorials/basics/index.md,1,['integrat'],['integrating-data-using-ingest'],"The ease of combining the system with other systems or components, measured by integration cost and technical risks. Integrability considers the complexity and compatibility of interfaces, including syntactic, semantic, behavioral, and temporal alignment.","
You are an expert in evaluating and categorizing quality attributes in software engineering. You possess the necessary skills to distinguish sentences that clearly relate to a given quality attribute from those that do not. 

Evaluate whether the content accurately aligns with its associated quality attribute, given the context provided. Your goal is to determine if the content makes sense in relation to the quality attribute description or if it is a false positive.

Data:

Quality Attribute: Integrability
Attribute Description: The ease of combining the system with other systems or components, measured by integration cost and technical risks. Integrability considers the complexity and compatibility of interfaces, including syntactic, semantic, behavioral, and temporal alignment.
Content: # Basics. ```{toctree}; :maxdepth: 1. clustering; clustering-2017; integrating-data-using-ingest; ```; 

Instructions: 
1. Analyze the content and the attribute description.
2. Determine if the content accurately reflects the intended quality attribute in this context.
3. If it does, label it as `true_positive: true`; if not, mark it as a `true_positive: false`.
4. If the content consists only of logs with no other text, mark it as a `true_positive: false`. 
4. If the content partially consists of logs, focus on analyzing remaining text. 
5. Add `reasoning` why the content is a true or false positive.
",False,"The content provided includes a section labeled 'Basics' with an toctree that mentions clustering and integrating data using ingest. While clustering is related to data integration, the term 'integrating data using ingest' suggests a specific method of integration. Integrability involves broader aspects such as interface compatibility and complexity. This content specifically discusses a method rather than the overall ease or difficulty of integrating systems."
Integrability,"# External API. ```{eval-rst}; .. module:: scanpy.external; ```. ```{warning}; We are no longer accepting new tools into `scanpy.external`.; Instead, please submit your tool to the [scverse ecosystem package listing](https://scverse.org/packages/#ecosystem).; ```. ```{note}; For tools that integrate well with scanpy and anndata, see:; * The [scverse ecosystem](https://scverse.org/packages/#ecosystem); * Scanpy's ecosystem {doc}`ecosystem page <../ecosystem>`; ```. Import Scanpy's wrappers to external tools as:. ```; import scanpy.external as sce; ```. ```{toctree}; :maxdepth: 2. preprocessing; tools; plotting; exporting; ```; ",integrat,MatchSource.DOCS,scverse,scanpy,1.10.2,https://github.com/scverse/scanpy/tree/1.10.2/docs/external/index.md:291,integrate,291,docs/external/index.md,https://scanpy.readthedocs.io,https://github.com/scverse/scanpy/tree/1.10.2/docs/external/index.md,2,"['integrat', 'wrap']","['integrate', 'wrappers']","The ease of combining the system with other systems or components, measured by integration cost and technical risks. Integrability considers the complexity and compatibility of interfaces, including syntactic, semantic, behavioral, and temporal alignment.","
You are an expert in evaluating and categorizing quality attributes in software engineering. You possess the necessary skills to distinguish sentences that clearly relate to a given quality attribute from those that do not. 

Evaluate whether the content accurately aligns with its associated quality attribute, given the context provided. Your goal is to determine if the content makes sense in relation to the quality attribute description or if it is a false positive.

Data:

Quality Attribute: Integrability
Attribute Description: The ease of combining the system with other systems or components, measured by integration cost and technical risks. Integrability considers the complexity and compatibility of interfaces, including syntactic, semantic, behavioral, and temporal alignment.
Content: # External API. ```{eval-rst}; .. module:: scanpy.external; ```. ```{warning}; We are no longer accepting new tools into `scanpy.external`.; Instead, please submit your tool to the [scverse ecosystem package listing](https://scverse.org/packages/#ecosystem).; ```. ```{note}; For tools that integrate well with scanpy and anndata, see:; * The [scverse ecosystem](https://scverse.org/packages/#ecosystem); * Scanpy's ecosystem {doc}`ecosystem page <../ecosystem>`; ```. Import Scanpy's wrappers to external tools as:. ```; import scanpy.external as sce; ```. ```{toctree}; :maxdepth: 2. preprocessing; tools; plotting; exporting; ```; 

Instructions: 
1. Analyze the content and the attribute description.
2. Determine if the content accurately reflects the intended quality attribute in this context.
3. If it does, label it as `true_positive: true`; if not, mark it as a `true_positive: false`.
4. If the content consists only of logs with no other text, mark it as a `true_positive: false`. 
4. If the content partially consists of logs, focus on analyzing remaining text. 
5. Add `reasoning` why the content is a true or false positive.
",True,"The content provided discusses how to integrate external tools with scanpy by importing wrappers and provides links to relevant ecosystems. This directly relates to the ease of combining systems, which is what Integrability measures."
Integrability,"# Getting set up. ## Working with `git`. This section of the docs covers our practices for working with `git` on our codebase. For more in-depth guides, we can recommend a few sources:. For a more complete git tutorials we recommend checking out:. - [Atlassian's git tutorial](https://www.atlassian.com/git/tutorials) -- Beginner friendly introductions to the git command line interface; - [Setting up git for GitHub](https://docs.github.com/en/free-pro-team@latest/github/getting-started-with-github/set-up-git) -- Configuring git to work with your GitHub user account. (forking-and-cloning)=. ### Forking and cloning. To get the code, and be able to push changes back to the main project, you'll need to (1) fork the repository on github and (2) clone the repository to your local machine. This is very straight forward if you're using [GitHub's CLI](https://cli.github.com):. ```shell; $ gh repo fork scverse/scanpy --clone --remote; ```. This will fork the repo to your github account, create a clone of the repo on your current machine, add our repository as a remote, and set the `main` development branch to track our repository. To do this manually, first make a fork of the repository by clicking the ""fork"" button on our main github package. Then, on your machine, run:. ```shell; # Clone your fork of the repository (substitute in your username); git clone https://github.com/{your-username}/scanpy.git; # Enter the cloned repository; cd scanpy; # Add our repository as a remote; git remote add upstream https://github.com/scverse/scanpy.git; # git branch --set-upstream-to ""upstream/main""; ```. ### `pre-commit`. We use [precommit](https://pre-commit.com) to run some styling checks in an automated way.; We also test against these checks, so make sure you follow them!. You can install pre-commit with:. ```shell; pip install pre-commit; ```. You can then install it to run while developing here with:. ```shell; pre-commit install; ```. From the root of the repo. If you choose not to ru",interface,MatchSource.DOCS,scverse,scanpy,1.10.2,https://github.com/scverse/scanpy/tree/1.10.2/docs/dev/getting-set-up.md:377,interface,377,docs/dev/getting-set-up.md,https://scanpy.readthedocs.io,https://github.com/scverse/scanpy/tree/1.10.2/docs/dev/getting-set-up.md,1,['interface'],['interface'],"The ease of combining the system with other systems or components, measured by integration cost and technical risks. Integrability considers the complexity and compatibility of interfaces, including syntactic, semantic, behavioral, and temporal alignment.","
You are an expert in evaluating and categorizing quality attributes in software engineering. You possess the necessary skills to distinguish sentences that clearly relate to a given quality attribute from those that do not. 

Evaluate whether the content accurately aligns with its associated quality attribute, given the context provided. Your goal is to determine if the content makes sense in relation to the quality attribute description or if it is a false positive.

Data:

Quality Attribute: Integrability
Attribute Description: The ease of combining the system with other systems or components, measured by integration cost and technical risks. Integrability considers the complexity and compatibility of interfaces, including syntactic, semantic, behavioral, and temporal alignment.
Content: # Getting set up. ## Working with `git`. This section of the docs covers our practices for working with `git` on our codebase. For more in-depth guides, we can recommend a few sources:. For a more complete git tutorials we recommend checking out:. - [Atlassian's git tutorial](https://www.atlassian.com/git/tutorials) -- Beginner friendly introductions to the git command line interface; - [Setting up git for GitHub](https://docs.github.com/en/free-pro-team@latest/github/getting-started-with-github/set-up-git) -- Configuring git to work with your GitHub user account. (forking-and-cloning)=. ### Forking and cloning. To get the code, and be able to push changes back to the main project, you'll need to (1) fork the repository on github and (2) clone the repository to your local machine. This is very straight forward if you're using [GitHub's CLI](https://cli.github.com):. ```shell; $ gh repo fork scverse/scanpy --clone --remote; ```. This will fork the repo to your github account, create a clone of the repo on your current machine, add our repository as a remote, and set the `main` development branch to track our repository. To do this manually, first make a fork of the repository by clicking the ""fork"" button on our main github package. Then, on your machine, run:. ```shell; # Clone your fork of the repository (substitute in your username); git clone https://github.com/{your-username}/scanpy.git; # Enter the cloned repository; cd scanpy; # Add our repository as a remote; git remote add upstream https://github.com/scverse/scanpy.git; # git branch --set-upstream-to ""upstream/main""; ```. ### `pre-commit`. We use [precommit](https://pre-commit.com) to run some styling checks in an automated way.; We also test against these checks, so make sure you follow them!. You can install pre-commit with:. ```shell; pip install pre-commit; ```. You can then install it to run while developing here with:. ```shell; pre-commit install; ```. From the root of the repo. If you choose not to ru

Instructions: 
1. Analyze the content and the attribute description.
2. Determine if the content accurately reflects the intended quality attribute in this context.
3. If it does, label it as `true_positive: true`; if not, mark it as a `true_positive: false`.
4. If the content consists only of logs with no other text, mark it as a `true_positive: false`. 
4. If the content partially consists of logs, focus on analyzing remaining text. 
5. Add `reasoning` why the content is a true or false positive.
",True,"The provided content discusses setting up Git for working with a codebase and includes instructions on forking and cloning repositories, which relates to integrating external systems (e.g., collaboration tools) into the project. This aligns with the concept of integrability as it involves the process of combining systems through proper setup and configuration."
Integrability,## Preprocessing: PP. ```{eval-rst}; .. module:: scanpy.external.pp; .. currentmodule:: scanpy.external; ```. ### Data integration. ```{eval-rst}; .. autosummary::; :toctree: ../generated/. pp.bbknn; pp.harmony_integrate; pp.mnn_correct; pp.scanorama_integrate. ```. ### Sample demultiplexing. ```{eval-rst}; .. autosummary::; :toctree: ../generated/. pp.hashsolo; ```. ### Imputation. Note that the fundamental limitations of imputation are still under [debate](https://github.com/scverse/scanpy/issues/189). ```{eval-rst}; .. autosummary::; :toctree: ../generated/. pp.dca; pp.magic. ```; ,integrat,MatchSource.DOCS,scverse,scanpy,1.10.2,https://github.com/scverse/scanpy/tree/1.10.2/docs/external/preprocessing.md:119,integration,119,docs/external/preprocessing.md,https://scanpy.readthedocs.io,https://github.com/scverse/scanpy/tree/1.10.2/docs/external/preprocessing.md,1,['integrat'],['integration'],"The ease of combining the system with other systems or components, measured by integration cost and technical risks. Integrability considers the complexity and compatibility of interfaces, including syntactic, semantic, behavioral, and temporal alignment.","
You are an expert in evaluating and categorizing quality attributes in software engineering. You possess the necessary skills to distinguish sentences that clearly relate to a given quality attribute from those that do not. 

Evaluate whether the content accurately aligns with its associated quality attribute, given the context provided. Your goal is to determine if the content makes sense in relation to the quality attribute description or if it is a false positive.

Data:

Quality Attribute: Integrability
Attribute Description: The ease of combining the system with other systems or components, measured by integration cost and technical risks. Integrability considers the complexity and compatibility of interfaces, including syntactic, semantic, behavioral, and temporal alignment.
Content: ## Preprocessing: PP. ```{eval-rst}; .. module:: scanpy.external.pp; .. currentmodule:: scanpy.external; ```. ### Data integration. ```{eval-rst}; .. autosummary::; :toctree: ../generated/. pp.bbknn; pp.harmony_integrate; pp.mnn_correct; pp.scanorama_integrate. ```. ### Sample demultiplexing. ```{eval-rst}; .. autosummary::; :toctree: ../generated/. pp.hashsolo; ```. ### Imputation. Note that the fundamental limitations of imputation are still under [debate](https://github.com/scverse/scanpy/issues/189). ```{eval-rst}; .. autosummary::; :toctree: ../generated/. pp.dca; pp.magic. ```; 

Instructions: 
1. Analyze the content and the attribute description.
2. Determine if the content accurately reflects the intended quality attribute in this context.
3. If it does, label it as `true_positive: true`; if not, mark it as a `true_positive: false`.
4. If the content consists only of logs with no other text, mark it as a `true_positive: false`. 
4. If the content partially consists of logs, focus on analyzing remaining text. 
5. Add `reasoning` why the content is a true or false positive.
",True,"The content discusses data integration, sample demultiplexing, and imputation techniques in scanpy.external. These are all aspects related to integrating and combining systems or components. The mention of imputation (filling missing data) also ties into system compatibility as it ensures data integrity before integration. Therefore, the content accurately reflects the integrability quality attribute by covering key integration processes."
Integrability,"## Preprocessing: `pp`. ```{eval-rst}; .. module:: scanpy.pp; ```. ```{eval-rst}; .. currentmodule:: scanpy; ```. Filtering of highly-variable genes, batch-effect correction, per-cell normalization, preprocessing recipes. Any transformation of the data matrix that is not a *tool*. Other than *tools*, preprocessing steps usually don't return an easily interpretable annotation, but perform a basic transformation on the data matrix. ### Basic Preprocessing. For visual quality control, see {func}`~scanpy.pl.highest_expr_genes` and; {func}`~scanpy.pl.filter_genes_dispersion` in {mod}`scanpy.pl`. ```{eval-rst}; .. autosummary::; :nosignatures:; :toctree: ../generated/. pp.calculate_qc_metrics; pp.filter_cells; pp.filter_genes; pp.highly_variable_genes; pp.log1p; pp.pca; pp.normalize_total; pp.regress_out; pp.scale; pp.subsample; pp.downsample_counts; ```. ### Recipes. ```{eval-rst}; .. autosummary::; :nosignatures:; :toctree: generated/. pp.recipe_zheng17; pp.recipe_weinreb17; pp.recipe_seurat; ```. ### Batch effect correction. Also see [Data integration]. Note that a simple batch correction method is available via {func}`pp.regress_out`. Checkout {mod}`scanpy.external` for more. ```{eval-rst}; .. autosummary::; :nosignatures:; :toctree: generated/. pp.combat; ```. ### Doublet detection. ```{eval-rst}; .. autosummary::; :nosignatures:; :toctree: generated/. pp.scrublet; pp.scrublet_simulate_doublets; ```. ### Neighbors. ```{eval-rst}; .. autosummary::; :nosignatures:; :toctree: generated/. pp.neighbors. ```; ",integrat,MatchSource.DOCS,scverse,scanpy,1.10.2,https://github.com/scverse/scanpy/tree/1.10.2/docs/api/preprocessing.md:1053,integration,1053,docs/api/preprocessing.md,https://scanpy.readthedocs.io,https://github.com/scverse/scanpy/tree/1.10.2/docs/api/preprocessing.md,1,['integrat'],['integration'],"The ease of combining the system with other systems or components, measured by integration cost and technical risks. Integrability considers the complexity and compatibility of interfaces, including syntactic, semantic, behavioral, and temporal alignment.","
You are an expert in evaluating and categorizing quality attributes in software engineering. You possess the necessary skills to distinguish sentences that clearly relate to a given quality attribute from those that do not. 

Evaluate whether the content accurately aligns with its associated quality attribute, given the context provided. Your goal is to determine if the content makes sense in relation to the quality attribute description or if it is a false positive.

Data:

Quality Attribute: Integrability
Attribute Description: The ease of combining the system with other systems or components, measured by integration cost and technical risks. Integrability considers the complexity and compatibility of interfaces, including syntactic, semantic, behavioral, and temporal alignment.
Content: ## Preprocessing: `pp`. ```{eval-rst}; .. module:: scanpy.pp; ```. ```{eval-rst}; .. currentmodule:: scanpy; ```. Filtering of highly-variable genes, batch-effect correction, per-cell normalization, preprocessing recipes. Any transformation of the data matrix that is not a *tool*. Other than *tools*, preprocessing steps usually don't return an easily interpretable annotation, but perform a basic transformation on the data matrix. ### Basic Preprocessing. For visual quality control, see {func}`~scanpy.pl.highest_expr_genes` and; {func}`~scanpy.pl.filter_genes_dispersion` in {mod}`scanpy.pl`. ```{eval-rst}; .. autosummary::; :nosignatures:; :toctree: ../generated/. pp.calculate_qc_metrics; pp.filter_cells; pp.filter_genes; pp.highly_variable_genes; pp.log1p; pp.pca; pp.normalize_total; pp.regress_out; pp.scale; pp.subsample; pp.downsample_counts; ```. ### Recipes. ```{eval-rst}; .. autosummary::; :nosignatures:; :toctree: generated/. pp.recipe_zheng17; pp.recipe_weinreb17; pp.recipe_seurat; ```. ### Batch effect correction. Also see [Data integration]. Note that a simple batch correction method is available via {func}`pp.regress_out`. Checkout {mod}`scanpy.external` for more. ```{eval-rst}; .. autosummary::; :nosignatures:; :toctree: generated/. pp.combat; ```. ### Doublet detection. ```{eval-rst}; .. autosummary::; :nosignatures:; :toctree: generated/. pp.scrublet; pp.scrublet_simulate_doublets; ```. ### Neighbors. ```{eval-rst}; .. autosummary::; :nosignatures:; :toctree: generated/. pp.neighbors. ```; 

Instructions: 
1. Analyze the content and the attribute description.
2. Determine if the content accurately reflects the intended quality attribute in this context.
3. If it does, label it as `true_positive: true`; if not, mark it as a `true_positive: false`.
4. If the content consists only of logs with no other text, mark it as a `true_positive: false`. 
4. If the content partially consists of logs, focus on analyzing remaining text. 
5. Add `reasoning` why the content is a true or false positive.
",True,"The content discusses preprocessing steps such as filtering highly-variable genes and batch-effect correction, which are important aspects of data integration. The use of functions like pp.regress_out for batch correction aligns with the need to integrate data effectively. However, integrability also involves ensuring interfaces are compatible, which isn't directly addressed here but is part of broader data integration practices."
Integrability,## Spatial. ```{toctree}; :maxdepth: 1. basic-analysis; integration-scanorama; ```; ,integrat,MatchSource.DOCS,scverse,scanpy,1.10.2,https://github.com/scverse/scanpy/tree/1.10.2/docs/tutorials/spatial/index.md:56,integration-scanorama,56,docs/tutorials/spatial/index.md,https://scanpy.readthedocs.io,https://github.com/scverse/scanpy/tree/1.10.2/docs/tutorials/spatial/index.md,1,['integrat'],['integration-scanorama'],"The ease of combining the system with other systems or components, measured by integration cost and technical risks. Integrability considers the complexity and compatibility of interfaces, including syntactic, semantic, behavioral, and temporal alignment.","
You are an expert in evaluating and categorizing quality attributes in software engineering. You possess the necessary skills to distinguish sentences that clearly relate to a given quality attribute from those that do not. 

Evaluate whether the content accurately aligns with its associated quality attribute, given the context provided. Your goal is to determine if the content makes sense in relation to the quality attribute description or if it is a false positive.

Data:

Quality Attribute: Integrability
Attribute Description: The ease of combining the system with other systems or components, measured by integration cost and technical risks. Integrability considers the complexity and compatibility of interfaces, including syntactic, semantic, behavioral, and temporal alignment.
Content: ## Spatial. ```{toctree}; :maxdepth: 1. basic-analysis; integration-scanorama; ```; 

Instructions: 
1. Analyze the content and the attribute description.
2. Determine if the content accurately reflects the intended quality attribute in this context.
3. If it does, label it as `true_positive: true`; if not, mark it as a `true_positive: false`.
4. If the content consists only of logs with no other text, mark it as a `true_positive: false`. 
4. If the content partially consists of logs, focus on analyzing remaining text. 
5. Add `reasoning` why the content is a true or false positive.
",True,"The content refers to 'integration-scanorama' which likely relates to integration aspects of a system, aligning with the Integrability quality attribute."
Integrability,"## Tools: `tl`. ```{eval-rst}; .. module:: scanpy.tl; ```. ```{eval-rst}; .. currentmodule:: scanpy; ```. Any transformation of the data matrix that is not *preprocessing*. In contrast to a *preprocessing* function, a *tool* usually adds an easily interpretable annotation to the data matrix, which can then be visualized with a corresponding plotting function. ### Embeddings. ```{eval-rst}; .. autosummary::; :nosignatures:; :toctree: ../generated/. pp.pca; tl.tsne; tl.umap; tl.draw_graph; tl.diffmap; ```. Compute densities on embeddings. ```{eval-rst}; .. autosummary::; :nosignatures:; :toctree: ../generated/. tl.embedding_density; ```. ### Clustering and trajectory inference. ```{eval-rst}; .. autosummary::; :nosignatures:; :toctree: ../generated/. tl.leiden; tl.louvain; tl.dendrogram; tl.dpt; tl.paga; ```. ### Data integration. ```{eval-rst}; .. autosummary::; :nosignatures:; :toctree: ../generated/. tl.ingest; ```. ### Marker genes. ```{eval-rst}; .. autosummary::; :nosignatures:; :toctree: ../generated/. tl.rank_genes_groups; tl.filter_rank_genes_groups; tl.marker_gene_overlap; ```. ### Gene scores, Cell cycle. ```{eval-rst}; .. autosummary::; :nosignatures:; :toctree: ../generated/. tl.score_genes; tl.score_genes_cell_cycle; ```. ### Simulations. ```{eval-rst}; .. autosummary::; :nosignatures:; :toctree: ../generated/. tl.sim. ```; ",integrat,MatchSource.DOCS,scverse,scanpy,1.10.2,https://github.com/scverse/scanpy/tree/1.10.2/docs/api/tools.md:828,integration,828,docs/api/tools.md,https://scanpy.readthedocs.io,https://github.com/scverse/scanpy/tree/1.10.2/docs/api/tools.md,1,['integrat'],['integration'],"The ease of combining the system with other systems or components, measured by integration cost and technical risks. Integrability considers the complexity and compatibility of interfaces, including syntactic, semantic, behavioral, and temporal alignment.","
You are an expert in evaluating and categorizing quality attributes in software engineering. You possess the necessary skills to distinguish sentences that clearly relate to a given quality attribute from those that do not. 

Evaluate whether the content accurately aligns with its associated quality attribute, given the context provided. Your goal is to determine if the content makes sense in relation to the quality attribute description or if it is a false positive.

Data:

Quality Attribute: Integrability
Attribute Description: The ease of combining the system with other systems or components, measured by integration cost and technical risks. Integrability considers the complexity and compatibility of interfaces, including syntactic, semantic, behavioral, and temporal alignment.
Content: ## Tools: `tl`. ```{eval-rst}; .. module:: scanpy.tl; ```. ```{eval-rst}; .. currentmodule:: scanpy; ```. Any transformation of the data matrix that is not *preprocessing*. In contrast to a *preprocessing* function, a *tool* usually adds an easily interpretable annotation to the data matrix, which can then be visualized with a corresponding plotting function. ### Embeddings. ```{eval-rst}; .. autosummary::; :nosignatures:; :toctree: ../generated/. pp.pca; tl.tsne; tl.umap; tl.draw_graph; tl.diffmap; ```. Compute densities on embeddings. ```{eval-rst}; .. autosummary::; :nosignatures:; :toctree: ../generated/. tl.embedding_density; ```. ### Clustering and trajectory inference. ```{eval-rst}; .. autosummary::; :nosignatures:; :toctree: ../generated/. tl.leiden; tl.louvain; tl.dendrogram; tl.dpt; tl.paga; ```. ### Data integration. ```{eval-rst}; .. autosummary::; :nosignatures:; :toctree: ../generated/. tl.ingest; ```. ### Marker genes. ```{eval-rst}; .. autosummary::; :nosignatures:; :toctree: ../generated/. tl.rank_genes_groups; tl.filter_rank_genes_groups; tl.marker_gene_overlap; ```. ### Gene scores, Cell cycle. ```{eval-rst}; .. autosummary::; :nosignatures:; :toctree: ../generated/. tl.score_genes; tl.score_genes_cell_cycle; ```. ### Simulations. ```{eval-rst}; .. autosummary::; :nosignatures:; :toctree: ../generated/. tl.sim. ```; 

Instructions: 
1. Analyze the content and the attribute description.
2. Determine if the content accurately reflects the intended quality attribute in this context.
3. If it does, label it as `true_positive: true`; if not, mark it as a `true_positive: false`.
4. If the content consists only of logs with no other text, mark it as a `true_positive: false`. 
4. If the content partially consists of logs, focus on analyzing remaining text. 
5. Add `reasoning` why the content is a true or false positive.
",True,"The content discusses various tools and functionalities provided by scanpy such as PCA, t-SNE, UMAP, clustering methods like Leiden and Louvain, data integration with 'ingest', marker gene analysis, gene scoring, and simulations. These are all related to the ability of the system to integrate different modules, preprocess data, analyze clusters, and perform various analyses that contribute to the overall integrability of the software. The tools mentioned help in effectively combining different components and ensuring compatibility, which aligns with the quality attribute of Integrability."
Integrability,"### 1.3.4 {small}`2018-11-24`. - {func}`~scanpy.tl.leiden` wraps the recent graph clustering package by {cite:t}`Traag2019` {smaller}`K Polanski`; - {func}`~scanpy.external.pp.bbknn` wraps the recent batch correction package {cite:p}`Polanski2019` {smaller}`K Polanski`; - {func}`~scanpy.pp.calculate_qc_metrics` caculates a number of quality control metrics, similar to `calculateQCMetrics` from *Scater* {cite:p}`McCarthy2017` {smaller}`I Virshup`; ",wrap,MatchSource.DOCS,scverse,scanpy,1.10.2,https://github.com/scverse/scanpy/tree/1.10.2/docs/release-notes/1.3.4.md:59,wraps,59,docs/release-notes/1.3.4.md,https://scanpy.readthedocs.io,https://github.com/scverse/scanpy/tree/1.10.2/docs/release-notes/1.3.4.md,2,['wrap'],['wraps'],"The ease of combining the system with other systems or components, measured by integration cost and technical risks. Integrability considers the complexity and compatibility of interfaces, including syntactic, semantic, behavioral, and temporal alignment.","
You are an expert in evaluating and categorizing quality attributes in software engineering. You possess the necessary skills to distinguish sentences that clearly relate to a given quality attribute from those that do not. 

Evaluate whether the content accurately aligns with its associated quality attribute, given the context provided. Your goal is to determine if the content makes sense in relation to the quality attribute description or if it is a false positive.

Data:

Quality Attribute: Integrability
Attribute Description: The ease of combining the system with other systems or components, measured by integration cost and technical risks. Integrability considers the complexity and compatibility of interfaces, including syntactic, semantic, behavioral, and temporal alignment.
Content: ### 1.3.4 {small}`2018-11-24`. - {func}`~scanpy.tl.leiden` wraps the recent graph clustering package by {cite:t}`Traag2019` {smaller}`K Polanski`; - {func}`~scanpy.external.pp.bbknn` wraps the recent batch correction package {cite:p}`Polanski2019` {smaller}`K Polanski`; - {func}`~scanpy.pp.calculate_qc_metrics` caculates a number of quality control metrics, similar to `calculateQCMetrics` from *Scater* {cite:p}`McCarthy2017` {smaller}`I Virshup`; 

Instructions: 
1. Analyze the content and the attribute description.
2. Determine if the content accurately reflects the intended quality attribute in this context.
3. If it does, label it as `true_positive: true`; if not, mark it as a `true_positive: false`.
4. If the content consists only of logs with no other text, mark it as a `true_positive: false`. 
4. If the content partially consists of logs, focus on analyzing remaining text. 
5. Add `reasoning` why the content is a true or false positive.
",True,"The content discusses specific functions and packages in scanpy related to data processing and quality control metrics. This involves integrating external tools and packages, which relates to how well the system can be integrated with other components. The complexity of these integrations includes both functional aspects (e.g., wrapping external packages) and technical risks (e.g., compatibility issues). Therefore, this content is directly related to the integrability quality attribute."
Integrability,"### 1.3.6 {small}`2018-12-11`. ```{rubric} Major updates; ```. - a new plotting gallery for `visualizing-marker-genes` {smaller}`F Ramirez`; - tutorials are integrated on ReadTheDocs, `pbmc3k` and `paga-paul15` {smaller}`A Wolf`. ```{rubric} Interactive exploration of analysis results through *manifold viewers*; ```. - CZI’s [cellxgene] directly reads `.h5ad` files {smaller}`the cellxgene developers`; - the [UCSC Single Cell Browser] requires exporting via {func}`~scanpy.external.exporting.cellbrowser` {smaller}`M Haeussler`. ```{rubric} Code design; ```. - {func}`~scanpy.pp.highly_variable_genes` supersedes {func}`~scanpy.pp.filter_genes_dispersion`, it gives the same results but, by default, expects logarithmized data and doesn’t subset {smaller}`A Wolf`. [cellxgene]: https://github.com/chanzuckerberg/cellxgene; [ucsc single cell browser]: https://github.com/maximilianh/cellBrowser; ",integrat,MatchSource.DOCS,scverse,scanpy,1.10.2,https://github.com/scverse/scanpy/tree/1.10.2/docs/release-notes/1.3.6.md:157,integrated,157,docs/release-notes/1.3.6.md,https://scanpy.readthedocs.io,https://github.com/scverse/scanpy/tree/1.10.2/docs/release-notes/1.3.6.md,1,['integrat'],['integrated'],"The ease of combining the system with other systems or components, measured by integration cost and technical risks. Integrability considers the complexity and compatibility of interfaces, including syntactic, semantic, behavioral, and temporal alignment.","
You are an expert in evaluating and categorizing quality attributes in software engineering. You possess the necessary skills to distinguish sentences that clearly relate to a given quality attribute from those that do not. 

Evaluate whether the content accurately aligns with its associated quality attribute, given the context provided. Your goal is to determine if the content makes sense in relation to the quality attribute description or if it is a false positive.

Data:

Quality Attribute: Integrability
Attribute Description: The ease of combining the system with other systems or components, measured by integration cost and technical risks. Integrability considers the complexity and compatibility of interfaces, including syntactic, semantic, behavioral, and temporal alignment.
Content: ### 1.3.6 {small}`2018-12-11`. ```{rubric} Major updates; ```. - a new plotting gallery for `visualizing-marker-genes` {smaller}`F Ramirez`; - tutorials are integrated on ReadTheDocs, `pbmc3k` and `paga-paul15` {smaller}`A Wolf`. ```{rubric} Interactive exploration of analysis results through *manifold viewers*; ```. - CZI’s [cellxgene] directly reads `.h5ad` files {smaller}`the cellxgene developers`; - the [UCSC Single Cell Browser] requires exporting via {func}`~scanpy.external.exporting.cellbrowser` {smaller}`M Haeussler`. ```{rubric} Code design; ```. - {func}`~scanpy.pp.highly_variable_genes` supersedes {func}`~scanpy.pp.filter_genes_dispersion`, it gives the same results but, by default, expects logarithmized data and doesn’t subset {smaller}`A Wolf`. [cellxgene]: https://github.com/chanzuckerberg/cellxgene; [ucsc single cell browser]: https://github.com/maximilianh/cellBrowser; 

Instructions: 
1. Analyze the content and the attribute description.
2. Determine if the content accurately reflects the intended quality attribute in this context.
3. If it does, label it as `true_positive: true`; if not, mark it as a `true_positive: false`.
4. If the content consists only of logs with no other text, mark it as a `true_positive: false`. 
4. If the content partially consists of logs, focus on analyzing remaining text. 
5. Add `reasoning` why the content is a true or false positive.
",True,"The content discusses integrating new features and existing tools (e.g., plotting gallery, tutorials, manifold viewers, cellxgene, UCSF browser) which relates to how well components can be combined. The cost and risks of integration are not explicitly mentioned, but the focus is on successful integrations and compatibility. Therefore, it's a true positive."
Integrability,"### 1.4.1 {small}`2019-04-26`. ```{rubric} New functionality; ```. - Scanpy has a command line interface again. Invoking it with `scanpy somecommand [args]` calls `scanpy-somecommand [args]`, except for builtin commands (currently `scanpy settings`) {pr}`604` {smaller}`P Angerer`; - {func}`~scanpy.datasets.ebi_expression_atlas` allows convenient download of EBI expression atlas {smaller}`I Virshup`; - {func}`~scanpy.tl.marker_gene_overlap` computes overlaps of marker genes {smaller}`M Luecken`; - {func}`~scanpy.tl.filter_rank_genes_groups` filters out genes based on fold change and fraction of cells expressing genes {smaller}`F Ramirez`; - {func}`~scanpy.pp.normalize_total` replaces {func}`~scanpy.pp.normalize_per_cell`, is more efficient and provides a parameter to only normalize using a fraction of expressed genes {smaller}`S Rybakov`; - {func}`~scanpy.pp.downsample_counts` has been sped up, changed default value of `replace` parameter to `False` {pr}`474` {smaller}`I Virshup`; - {func}`~scanpy.tl.embedding_density` computes densities on embeddings {pr}`543` {smaller}`M Luecken`; - {func}`~scanpy.external.tl.palantir` interfaces Palantir {cite:p}`Setty2019` {pr}`493` {smaller}`A Mousa`. ```{rubric} Code design; ```. - `.layers` support of scatter plots {smaller}`F Ramirez`; - fix double-logarithmization in compute of log fold change in {func}`~scanpy.tl.rank_genes_groups` {smaller}`A Muñoz-Rojas`; - fix return sections of docs {smaller}`P Angerer`; ",interface,MatchSource.DOCS,scverse,scanpy,1.10.2,https://github.com/scverse/scanpy/tree/1.10.2/docs/release-notes/1.4.1.md:95,interface,95,docs/release-notes/1.4.1.md,https://scanpy.readthedocs.io,https://github.com/scverse/scanpy/tree/1.10.2/docs/release-notes/1.4.1.md,2,['interface'],"['interface', 'interfaces']","The ease of combining the system with other systems or components, measured by integration cost and technical risks. Integrability considers the complexity and compatibility of interfaces, including syntactic, semantic, behavioral, and temporal alignment.","
You are an expert in evaluating and categorizing quality attributes in software engineering. You possess the necessary skills to distinguish sentences that clearly relate to a given quality attribute from those that do not. 

Evaluate whether the content accurately aligns with its associated quality attribute, given the context provided. Your goal is to determine if the content makes sense in relation to the quality attribute description or if it is a false positive.

Data:

Quality Attribute: Integrability
Attribute Description: The ease of combining the system with other systems or components, measured by integration cost and technical risks. Integrability considers the complexity and compatibility of interfaces, including syntactic, semantic, behavioral, and temporal alignment.
Content: ### 1.4.1 {small}`2019-04-26`. ```{rubric} New functionality; ```. - Scanpy has a command line interface again. Invoking it with `scanpy somecommand [args]` calls `scanpy-somecommand [args]`, except for builtin commands (currently `scanpy settings`) {pr}`604` {smaller}`P Angerer`; - {func}`~scanpy.datasets.ebi_expression_atlas` allows convenient download of EBI expression atlas {smaller}`I Virshup`; - {func}`~scanpy.tl.marker_gene_overlap` computes overlaps of marker genes {smaller}`M Luecken`; - {func}`~scanpy.tl.filter_rank_genes_groups` filters out genes based on fold change and fraction of cells expressing genes {smaller}`F Ramirez`; - {func}`~scanpy.pp.normalize_total` replaces {func}`~scanpy.pp.normalize_per_cell`, is more efficient and provides a parameter to only normalize using a fraction of expressed genes {smaller}`S Rybakov`; - {func}`~scanpy.pp.downsample_counts` has been sped up, changed default value of `replace` parameter to `False` {pr}`474` {smaller}`I Virshup`; - {func}`~scanpy.tl.embedding_density` computes densities on embeddings {pr}`543` {smaller}`M Luecken`; - {func}`~scanpy.external.tl.palantir` interfaces Palantir {cite:p}`Setty2019` {pr}`493` {smaller}`A Mousa`. ```{rubric} Code design; ```. - `.layers` support of scatter plots {smaller}`F Ramirez`; - fix double-logarithmization in compute of log fold change in {func}`~scanpy.tl.rank_genes_groups` {smaller}`A Muñoz-Rojas`; - fix return sections of docs {smaller}`P Angerer`; 

Instructions: 
1. Analyze the content and the attribute description.
2. Determine if the content accurately reflects the intended quality attribute in this context.
3. If it does, label it as `true_positive: true`; if not, mark it as a `true_positive: false`.
4. If the content consists only of logs with no other text, mark it as a `true_positive: false`. 
4. If the content partially consists of logs, focus on analyzing remaining text. 
5. Add `reasoning` why the content is a true or false positive.
",False,"The content provided is a list of updates to Scanpy, including new functionality and code design improvements. While integrability concerns more about how systems can be combined with others, this content focuses on internal features and user interface improvements rather than integration aspects. Therefore, it does not accurately reflect the Integrability quality attribute."
Integrability,"### 1.4.2 {small}`2019-05-06`. ```{rubric} New functionality; ```. - {func}`~scanpy.pp.combat` supports additional covariates which may include adjustment variables or biological condition {pr}`618` {smaller}`G Eraslan`; - {func}`~scanpy.pp.highly_variable_genes` has a `batch_key` option which performs HVG selection in each batch separately to avoid selecting genes that vary strongly across batches {pr}`622` {smaller}`G Eraslan`. ```{rubric} Bug fixes; ```. - {func}`~scanpy.tl.rank_genes_groups` t-test implementation doesn't return NaN when variance is 0, also changed to scipy's implementation {pr}`621` {smaller}`I Virshup`; - {func}`~scanpy.tl.umap` with `init_pos='paga'` detects correct `dtype` {smaller}`A Wolf`; - {func}`~scanpy.tl.louvain` and {func}`~scanpy.tl.leiden` auto-generate `key_added=louvain_R` upon passing `restrict_to`, which was temporarily changed in `1.4.1` {smaller}`A Wolf`. ```{rubric} Code design; ```. - {func}`~scanpy.pp.neighbors` and {func}`~scanpy.tl.umap` got rid of UMAP legacy code and introduced UMAP as a dependency {pr}`576` {smaller}`S Rybakov`; ",depend,MatchSource.DOCS,scverse,scanpy,1.10.2,https://github.com/scverse/scanpy/tree/1.10.2/docs/release-notes/1.4.2.md:1050,dependency,1050,docs/release-notes/1.4.2.md,https://scanpy.readthedocs.io,https://github.com/scverse/scanpy/tree/1.10.2/docs/release-notes/1.4.2.md,1,['depend'],['dependency'],"The ease of combining the system with other systems or components, measured by integration cost and technical risks. Integrability considers the complexity and compatibility of interfaces, including syntactic, semantic, behavioral, and temporal alignment.","
You are an expert in evaluating and categorizing quality attributes in software engineering. You possess the necessary skills to distinguish sentences that clearly relate to a given quality attribute from those that do not. 

Evaluate whether the content accurately aligns with its associated quality attribute, given the context provided. Your goal is to determine if the content makes sense in relation to the quality attribute description or if it is a false positive.

Data:

Quality Attribute: Integrability
Attribute Description: The ease of combining the system with other systems or components, measured by integration cost and technical risks. Integrability considers the complexity and compatibility of interfaces, including syntactic, semantic, behavioral, and temporal alignment.
Content: ### 1.4.2 {small}`2019-05-06`. ```{rubric} New functionality; ```. - {func}`~scanpy.pp.combat` supports additional covariates which may include adjustment variables or biological condition {pr}`618` {smaller}`G Eraslan`; - {func}`~scanpy.pp.highly_variable_genes` has a `batch_key` option which performs HVG selection in each batch separately to avoid selecting genes that vary strongly across batches {pr}`622` {smaller}`G Eraslan`. ```{rubric} Bug fixes; ```. - {func}`~scanpy.tl.rank_genes_groups` t-test implementation doesn't return NaN when variance is 0, also changed to scipy's implementation {pr}`621` {smaller}`I Virshup`; - {func}`~scanpy.tl.umap` with `init_pos='paga'` detects correct `dtype` {smaller}`A Wolf`; - {func}`~scanpy.tl.louvain` and {func}`~scanpy.tl.leiden` auto-generate `key_added=louvain_R` upon passing `restrict_to`, which was temporarily changed in `1.4.1` {smaller}`A Wolf`. ```{rubric} Code design; ```. - {func}`~scanpy.pp.neighbors` and {func}`~scanpy.tl.umap` got rid of UMAP legacy code and introduced UMAP as a dependency {pr}`576` {smaller}`S Rybakov`; 

Instructions: 
1. Analyze the content and the attribute description.
2. Determine if the content accurately reflects the intended quality attribute in this context.
3. If it does, label it as `true_positive: true`; if not, mark it as a `true_positive: false`.
4. If the content consists only of logs with no other text, mark it as a `true_positive: false`. 
4. If the content partially consists of logs, focus on analyzing remaining text. 
5. Add `reasoning` why the content is a true or false positive.
",False,"The provided content is a list of updates related to functionality additions and bug fixes in software code. It mentions changes like adding new features, fixing bugs, and refactoring code. While these are important aspects of software development, they don't directly relate to the quality attribute of integrability, which focuses on how well systems can be integrated together. The content provided here is more about internal system updates and maintenance rather than combining different systems or addressing integration challenges."
Integrability,"### 1.4.5 {small}`2019-12-30`. Please install `scanpy==1.4.5.post3` instead of `scanpy==1.4.5`. ```{rubric} New functionality; ```. - {func}`~scanpy.tl.ingest` maps labels and embeddings of reference data to new data {doc}`/tutorials/basics/integrating-data-using-ingest` {pr}`651` {smaller}`S Rybakov, A Wolf`; - {mod}`~scanpy.queries` recieved many updates including enrichment through [gprofiler] and more advanced biomart queries {pr}`467` {smaller}`I Virshup`; - {func}`~scanpy.set_figure_params` allows setting `figsize` and accepts `facecolor='white'`, useful for working in dark mode {smaller}`A Wolf`. ```{rubric} Code design; ```. - {mod}`~scanpy.pp.downsample_counts` now always preserves the dtype of it's input, instead of converting floats to ints {pr}`865` {smaller}`I Virshup`; - allow specifying a base for {func}`~scanpy.pp.log1p` {pr}`931` {smaller}`G Eraslan`; - run neighbors on a GPU using rapids {pr}`830` {smaller}`T White`; - param docs from typed params {smaller}`P Angerer`; - {func}`~scanpy.tl.embedding_density` now only takes one positional argument; similar for {func}`~scanpy.pl.embedding_density`, which gains a param `groupby` {pr}`965` {smaller}`A Wolf`; - webpage overhaul, ecosystem page, release notes, tutorials overhaul {pr}`960` {pr}`966` {smaller}`A Wolf`. ```{warning}; - changed default `solver` in {func}`~scanpy.pp.pca` from `auto` to `arpack`; - changed default `use_raw` in {func}`~scanpy.tl.score_genes` from `False` to `None`; ```. [gprofiler]: https://biit.cs.ut.ee/gprofiler/; ",integrat,MatchSource.DOCS,scverse,scanpy,1.10.2,https://github.com/scverse/scanpy/tree/1.10.2/docs/release-notes/1.4.5.md:241,integrating-data-using-ingest,241,docs/release-notes/1.4.5.md,https://scanpy.readthedocs.io,https://github.com/scverse/scanpy/tree/1.10.2/docs/release-notes/1.4.5.md,1,['integrat'],['integrating-data-using-ingest'],"The ease of combining the system with other systems or components, measured by integration cost and technical risks. Integrability considers the complexity and compatibility of interfaces, including syntactic, semantic, behavioral, and temporal alignment.","
You are an expert in evaluating and categorizing quality attributes in software engineering. You possess the necessary skills to distinguish sentences that clearly relate to a given quality attribute from those that do not. 

Evaluate whether the content accurately aligns with its associated quality attribute, given the context provided. Your goal is to determine if the content makes sense in relation to the quality attribute description or if it is a false positive.

Data:

Quality Attribute: Integrability
Attribute Description: The ease of combining the system with other systems or components, measured by integration cost and technical risks. Integrability considers the complexity and compatibility of interfaces, including syntactic, semantic, behavioral, and temporal alignment.
Content: ### 1.4.5 {small}`2019-12-30`. Please install `scanpy==1.4.5.post3` instead of `scanpy==1.4.5`. ```{rubric} New functionality; ```. - {func}`~scanpy.tl.ingest` maps labels and embeddings of reference data to new data {doc}`/tutorials/basics/integrating-data-using-ingest` {pr}`651` {smaller}`S Rybakov, A Wolf`; - {mod}`~scanpy.queries` recieved many updates including enrichment through [gprofiler] and more advanced biomart queries {pr}`467` {smaller}`I Virshup`; - {func}`~scanpy.set_figure_params` allows setting `figsize` and accepts `facecolor='white'`, useful for working in dark mode {smaller}`A Wolf`. ```{rubric} Code design; ```. - {mod}`~scanpy.pp.downsample_counts` now always preserves the dtype of it's input, instead of converting floats to ints {pr}`865` {smaller}`I Virshup`; - allow specifying a base for {func}`~scanpy.pp.log1p` {pr}`931` {smaller}`G Eraslan`; - run neighbors on a GPU using rapids {pr}`830` {smaller}`T White`; - param docs from typed params {smaller}`P Angerer`; - {func}`~scanpy.tl.embedding_density` now only takes one positional argument; similar for {func}`~scanpy.pl.embedding_density`, which gains a param `groupby` {pr}`965` {smaller}`A Wolf`; - webpage overhaul, ecosystem page, release notes, tutorials overhaul {pr}`960` {pr}`966` {smaller}`A Wolf`. ```{warning}; - changed default `solver` in {func}`~scanpy.pp.pca` from `auto` to `arpack`; - changed default `use_raw` in {func}`~scanpy.tl.score_genes` from `False` to `None`; ```. [gprofiler]: https://biit.cs.ut.ee/gprofiler/; 

Instructions: 
1. Analyze the content and the attribute description.
2. Determine if the content accurately reflects the intended quality attribute in this context.
3. If it does, label it as `true_positive: true`; if not, mark it as a `true_positive: false`.
4. If the content consists only of logs with no other text, mark it as a `true_positive: false`. 
4. If the content partially consists of logs, focus on analyzing remaining text. 
5. Add `reasoning` why the content is a true or false positive.
",False,"The content provided discusses updates and changes in scanpy, including new functionalities, code design improvements, and documentation. The Integrability quality attribute deals with how well systems can be combined. However, the content here focuses on internal system modifications rather than integration aspects. There's no mention of combining different systems or components, nor interfaces or compatibility issues. Thus, it does not relate to integrability but rather to maintainability or system enhancements."
Integrability,"### 1.5.0 {small}`2020-05-15`. The `1.5.0` release adds a lot of new functionality, much of which takes advantage of {mod}`anndata` updates `0.7.0 - 0.7.2`. Highlights of this release include support for spatial data, dedicated handling of graphs in AnnData, sparse PCA, an interface with scvi, and others. ```{rubric} Spatial data support; ```. - Basic analysis {doc}`/tutorials/spatial/basic-analysis` and integration with single cell data {doc}`/tutorials/spatial/integration-scanorama` {smaller}`G Palla`; - {func}`~scanpy.read_visium` read 10x Visium data {pr}`1034` {smaller}`G Palla, P Angerer, I Virshup`; - {func}`~scanpy.datasets.visium_sge` load Visium data directly from 10x Genomics {pr}`1013` {smaller}`M Mirkazemi, G Palla, P Angerer`; - {func}`~scanpy.pl.spatial` plot spatial data {pr}`1012` {smaller}`G Palla, P Angerer`. ```{rubric} New functionality; ```. - Many functions, like {func}`~scanpy.pp.neighbors` and {func}`~scanpy.tl.umap`, now store cell-by-cell graphs in {attr}`~anndata.AnnData.obsp` {pr}`1118` {smaller}`S Rybakov`; - {func}`~scanpy.pp.scale` and {func}`~scanpy.pp.log1p` can be used on any element in {attr}`~anndata.AnnData.layers` or {attr}`~anndata.AnnData.obsm` {pr}`1173` {smaller}`I Virshup`. ```{rubric} External tools; ```. - `scanpy.external.pp.scvi` for preprocessing with scVI {pr}`1085` {smaller}`G Xing`; - Guide for using `Scanpy in R` {pr}`1186` {smaller}`L Zappia`. ```{rubric} Performance; ```. - {func}`~scanpy.pp.pca` now uses efficient implicit centering for sparse matrices. This can lead to signifigantly improved performance for large datasets {pr}`1066` {smaller}`A Tarashansky`; - {func}`~scanpy.tl.score_genes` now has an efficient implementation for sparse matrices with missing values {pr}`1196` {smaller}`redst4r`. ```{warning}; The new {func}`~scanpy.pp.pca` implementation can result in slightly different results for sparse matrices. See the pr ({pr}`1066`) and documentation for more info.; ```. ```{rubric} Code design; ```. - {f",interface,MatchSource.DOCS,scverse,scanpy,1.10.2,https://github.com/scverse/scanpy/tree/1.10.2/docs/release-notes/1.5.0.md:274,interface,274,docs/release-notes/1.5.0.md,https://scanpy.readthedocs.io,https://github.com/scverse/scanpy/tree/1.10.2/docs/release-notes/1.5.0.md,3,"['integrat', 'interface']","['integration', 'integration-scanorama', 'interface']","The ease of combining the system with other systems or components, measured by integration cost and technical risks. Integrability considers the complexity and compatibility of interfaces, including syntactic, semantic, behavioral, and temporal alignment.","
You are an expert in evaluating and categorizing quality attributes in software engineering. You possess the necessary skills to distinguish sentences that clearly relate to a given quality attribute from those that do not. 

Evaluate whether the content accurately aligns with its associated quality attribute, given the context provided. Your goal is to determine if the content makes sense in relation to the quality attribute description or if it is a false positive.

Data:

Quality Attribute: Integrability
Attribute Description: The ease of combining the system with other systems or components, measured by integration cost and technical risks. Integrability considers the complexity and compatibility of interfaces, including syntactic, semantic, behavioral, and temporal alignment.
Content: ### 1.5.0 {small}`2020-05-15`. The `1.5.0` release adds a lot of new functionality, much of which takes advantage of {mod}`anndata` updates `0.7.0 - 0.7.2`. Highlights of this release include support for spatial data, dedicated handling of graphs in AnnData, sparse PCA, an interface with scvi, and others. ```{rubric} Spatial data support; ```. - Basic analysis {doc}`/tutorials/spatial/basic-analysis` and integration with single cell data {doc}`/tutorials/spatial/integration-scanorama` {smaller}`G Palla`; - {func}`~scanpy.read_visium` read 10x Visium data {pr}`1034` {smaller}`G Palla, P Angerer, I Virshup`; - {func}`~scanpy.datasets.visium_sge` load Visium data directly from 10x Genomics {pr}`1013` {smaller}`M Mirkazemi, G Palla, P Angerer`; - {func}`~scanpy.pl.spatial` plot spatial data {pr}`1012` {smaller}`G Palla, P Angerer`. ```{rubric} New functionality; ```. - Many functions, like {func}`~scanpy.pp.neighbors` and {func}`~scanpy.tl.umap`, now store cell-by-cell graphs in {attr}`~anndata.AnnData.obsp` {pr}`1118` {smaller}`S Rybakov`; - {func}`~scanpy.pp.scale` and {func}`~scanpy.pp.log1p` can be used on any element in {attr}`~anndata.AnnData.layers` or {attr}`~anndata.AnnData.obsm` {pr}`1173` {smaller}`I Virshup`. ```{rubric} External tools; ```. - `scanpy.external.pp.scvi` for preprocessing with scVI {pr}`1085` {smaller}`G Xing`; - Guide for using `Scanpy in R` {pr}`1186` {smaller}`L Zappia`. ```{rubric} Performance; ```. - {func}`~scanpy.pp.pca` now uses efficient implicit centering for sparse matrices. This can lead to signifigantly improved performance for large datasets {pr}`1066` {smaller}`A Tarashansky`; - {func}`~scanpy.tl.score_genes` now has an efficient implementation for sparse matrices with missing values {pr}`1196` {smaller}`redst4r`. ```{warning}; The new {func}`~scanpy.pp.pca` implementation can result in slightly different results for sparse matrices. See the pr ({pr}`1066`) and documentation for more info.; ```. ```{rubric} Code design; ```. - {f

Instructions: 
1. Analyze the content and the attribute description.
2. Determine if the content accurately reflects the intended quality attribute in this context.
3. If it does, label it as `true_positive: true`; if not, mark it as a `true_positive: false`.
4. If the content consists only of logs with no other text, mark it as a `true_positive: false`. 
4. If the content partially consists of logs, focus on analyzing remaining text. 
5. Add `reasoning` why the content is a true or false positive.
",False,"The content discusses updates and new features in an software release. It includes information about integration with spatial data, use cases, functions, and performance improvements. The description for Integrability mentions considering complexity and compatibility of interfaces, including syntactic, semantic, behavioral, and temporal alignment. While the content does talk about integration (e.g., with single cell data), the focus is more on new features and technical improvements rather than the overall integrability or ease of combining systems. Therefore, it does not accurately reflect the intended quality attribute."
Integrability,### 1.8.2 {small}`2021-11-3`. ```{rubric} Docs; ```. - Update conda installation instructions {pr}`1974` {smaller}`L Heumos`. ```{rubric} Bug fixes; ```. - Fix plotting after {func}`scanpy.tl.filter_rank_genes_groups` {pr}`1942` {smaller}`S Rybakov`; - Fix `use_raw=None` using {attr}`anndata.AnnData.var_names` if {attr}`anndata.AnnData.raw`; is present in {func}`scanpy.tl.score_genes` {pr}`1999` {smaller}`M Klein`; - Fix compatibility with UMAP 0.5.2 {pr}`2028` {smaller}`L Mcinnes`; - Fixed non-determinism in {func}`scanpy.pl.paga` node positions {pr}`1922` {smaller}`I Virshup`. ```{rubric} Ecosystem; ```. - Added PASTE (a tool to align and integrate spatial transcriptomics data) to scanpy ecosystem.; ,integrat,MatchSource.DOCS,scverse,scanpy,1.10.2,https://github.com/scverse/scanpy/tree/1.10.2/docs/release-notes/1.8.2.md:649,integrate,649,docs/release-notes/1.8.2.md,https://scanpy.readthedocs.io,https://github.com/scverse/scanpy/tree/1.10.2/docs/release-notes/1.8.2.md,1,['integrat'],['integrate'],"The ease of combining the system with other systems or components, measured by integration cost and technical risks. Integrability considers the complexity and compatibility of interfaces, including syntactic, semantic, behavioral, and temporal alignment.","
You are an expert in evaluating and categorizing quality attributes in software engineering. You possess the necessary skills to distinguish sentences that clearly relate to a given quality attribute from those that do not. 

Evaluate whether the content accurately aligns with its associated quality attribute, given the context provided. Your goal is to determine if the content makes sense in relation to the quality attribute description or if it is a false positive.

Data:

Quality Attribute: Integrability
Attribute Description: The ease of combining the system with other systems or components, measured by integration cost and technical risks. Integrability considers the complexity and compatibility of interfaces, including syntactic, semantic, behavioral, and temporal alignment.
Content: ### 1.8.2 {small}`2021-11-3`. ```{rubric} Docs; ```. - Update conda installation instructions {pr}`1974` {smaller}`L Heumos`. ```{rubric} Bug fixes; ```. - Fix plotting after {func}`scanpy.tl.filter_rank_genes_groups` {pr}`1942` {smaller}`S Rybakov`; - Fix `use_raw=None` using {attr}`anndata.AnnData.var_names` if {attr}`anndata.AnnData.raw`; is present in {func}`scanpy.tl.score_genes` {pr}`1999` {smaller}`M Klein`; - Fix compatibility with UMAP 0.5.2 {pr}`2028` {smaller}`L Mcinnes`; - Fixed non-determinism in {func}`scanpy.pl.paga` node positions {pr}`1922` {smaller}`I Virshup`. ```{rubric} Ecosystem; ```. - Added PASTE (a tool to align and integrate spatial transcriptomics data) to scanpy ecosystem.; 

Instructions: 
1. Analyze the content and the attribute description.
2. Determine if the content accurately reflects the intended quality attribute in this context.
3. If it does, label it as `true_positive: true`; if not, mark it as a `true_positive: false`.
4. If the content consists only of logs with no other text, mark it as a `true_positive: false`. 
4. If the content partially consists of logs, focus on analyzing remaining text. 
5. Add `reasoning` why the content is a true or false positive.
",True,"The content includes updates to conda installation instructions and adds PASTE tool to the ecosystem, which indicates efforts towards integrating new tools and systems, contributing to integrability."
Integrability,### 1.9.1 {small}`2022-04-05`. ```{rubric} Bug fixes; ```. - {func}`~scanpy.pp.normalize_total` works when Dask is not installed {pr}`2209` {smaller}`R Cannoodt`; - Fix embedding plots by bumping matplotlib dependency to version 3.4 {pr}`2212` {smaller}`I Virshup`; ,depend,MatchSource.DOCS,scverse,scanpy,1.10.2,https://github.com/scverse/scanpy/tree/1.10.2/docs/release-notes/1.9.1.md:207,dependency,207,docs/release-notes/1.9.1.md,https://scanpy.readthedocs.io,https://github.com/scverse/scanpy/tree/1.10.2/docs/release-notes/1.9.1.md,1,['depend'],['dependency'],"The ease of combining the system with other systems or components, measured by integration cost and technical risks. Integrability considers the complexity and compatibility of interfaces, including syntactic, semantic, behavioral, and temporal alignment.","
You are an expert in evaluating and categorizing quality attributes in software engineering. You possess the necessary skills to distinguish sentences that clearly relate to a given quality attribute from those that do not. 

Evaluate whether the content accurately aligns with its associated quality attribute, given the context provided. Your goal is to determine if the content makes sense in relation to the quality attribute description or if it is a false positive.

Data:

Quality Attribute: Integrability
Attribute Description: The ease of combining the system with other systems or components, measured by integration cost and technical risks. Integrability considers the complexity and compatibility of interfaces, including syntactic, semantic, behavioral, and temporal alignment.
Content: ### 1.9.1 {small}`2022-04-05`. ```{rubric} Bug fixes; ```. - {func}`~scanpy.pp.normalize_total` works when Dask is not installed {pr}`2209` {smaller}`R Cannoodt`; - Fix embedding plots by bumping matplotlib dependency to version 3.4 {pr}`2212` {smaller}`I Virshup`; 

Instructions: 
1. Analyze the content and the attribute description.
2. Determine if the content accurately reflects the intended quality attribute in this context.
3. If it does, label it as `true_positive: true`; if not, mark it as a `true_positive: false`.
4. If the content consists only of logs with no other text, mark it as a `true_positive: false`. 
4. If the content partially consists of logs, focus on analyzing remaining text. 
5. Add `reasoning` why the content is a true or false positive.
",False,"The provided content discusses bug fixes related to specific functions and pull requests. This does not directly relate to integrability as it pertains to system integration concerns such as interface compatibility, complexity, or combining systems. Instead, this content is about resolving functional issues through bug fixing."
Integrability,### 1.9.7 {small}`2024-01-25`. ```{rubric} Bug fixes; ```; - Fix handling of numpy array palettes (e.g. after write-read cycle) {pr}`2734` {smaller}`P Angerer`; - Specify correct version of `matplotlib` dependency {pr}`2733` {smaller}`P Fisher`; - Fix {func}`scanpy.pl.violin` usage of `seaborn.catplot` {pr}`2739` {smaller}`E Roellin`; - Fix {func}`scanpy.pp.highly_variable_genes` to handle the combinations of `inplace` and `subset` consistently {pr}`2757` {smaller}`E Roellin`; - Replace usage of various deprecated functionality from {mod}`anndata` and {mod}`pandas` {pr}`2678` {pr}`2779` {smaller}`P Angerer`; - Allow to use default `n_top_genes` when using {func}`scanpy.pp.highly_variable_genes` flavor `'seurat_v3'` {pr}`2782` {smaller}`P Angerer`; - Fix {func}`scanpy.read_10x_mtx`’s `gex_only=True` mode {pr}`2801` {smaller}`P Angerer`; ,depend,MatchSource.DOCS,scverse,scanpy,1.10.2,https://github.com/scverse/scanpy/tree/1.10.2/docs/release-notes/1.9.7.md:203,dependency,203,docs/release-notes/1.9.7.md,https://scanpy.readthedocs.io,https://github.com/scverse/scanpy/tree/1.10.2/docs/release-notes/1.9.7.md,1,['depend'],['dependency'],"The ease of combining the system with other systems or components, measured by integration cost and technical risks. Integrability considers the complexity and compatibility of interfaces, including syntactic, semantic, behavioral, and temporal alignment.","
You are an expert in evaluating and categorizing quality attributes in software engineering. You possess the necessary skills to distinguish sentences that clearly relate to a given quality attribute from those that do not. 

Evaluate whether the content accurately aligns with its associated quality attribute, given the context provided. Your goal is to determine if the content makes sense in relation to the quality attribute description or if it is a false positive.

Data:

Quality Attribute: Integrability
Attribute Description: The ease of combining the system with other systems or components, measured by integration cost and technical risks. Integrability considers the complexity and compatibility of interfaces, including syntactic, semantic, behavioral, and temporal alignment.
Content: ### 1.9.7 {small}`2024-01-25`. ```{rubric} Bug fixes; ```; - Fix handling of numpy array palettes (e.g. after write-read cycle) {pr}`2734` {smaller}`P Angerer`; - Specify correct version of `matplotlib` dependency {pr}`2733` {smaller}`P Fisher`; - Fix {func}`scanpy.pl.violin` usage of `seaborn.catplot` {pr}`2739` {smaller}`E Roellin`; - Fix {func}`scanpy.pp.highly_variable_genes` to handle the combinations of `inplace` and `subset` consistently {pr}`2757` {smaller}`E Roellin`; - Replace usage of various deprecated functionality from {mod}`anndata` and {mod}`pandas` {pr}`2678` {pr}`2779` {smaller}`P Angerer`; - Allow to use default `n_top_genes` when using {func}`scanpy.pp.highly_variable_genes` flavor `'seurat_v3'` {pr}`2782` {smaller}`P Angerer`; - Fix {func}`scanpy.read_10x_mtx`’s `gex_only=True` mode {pr}`2801` {smaller}`P Angerer`; 

Instructions: 
1. Analyze the content and the attribute description.
2. Determine if the content accurately reflects the intended quality attribute in this context.
3. If it does, label it as `true_positive: true`; if not, mark it as a `true_positive: false`.
4. If the content consists only of logs with no other text, mark it as a `true_positive: false`. 
4. If the content partially consists of logs, focus on analyzing remaining text. 
5. Add `reasoning` why the content is a true or false positive.
",False,"The provided content details bug fixes and updates related to specific functionalities and dependencies in the system. While these are important for maintaining and improving the system's functionality and stability, they do not directly address integrability. Integrability concerns issues like combining systems or components, compatibility of interfaces, etc., which is a separate quality attribute. Therefore, this content does not accurately reflect the intended quality attribute of 'Integrability'."
Integrability,"(tests)=. # Tests. Possibly the most important part of contributing to any open source package is the test suite.; Implementations may change, but the only way we can know the code is working before making a release is the test suite. ## Running the tests. We use [pytest](https://docs.pytest.org/en/stable/) to test scanpy.; To run the tests first make sure you have the required dependencies (`pip install -e "".[test,dev]""`), then run `pytest` from the root of the repository. It can take a while to run the whole test suite. There are a few ways to cut down on this while working on a PR:. 1. Only run a subset of the tests. This can be done with the `-k` argument from pytest (e.g. `pytest -k test_plotting.py` or `pytest -k ""test_umap*""`; 2. Run the tests in parallel. If you install the pytest extension [pytest-xdist](https://github.com/pytest-dev/pytest-xdist) you can run tests in parallel with the `--numprocesses` argument to pytest (e.g. `pytest -n 8`). ### Miscellaneous tips. - A lot of warnings can be thrown while running the test suite. It's often easier to read the test results with them hidden via the `--disable-pytest-warnings` argument. ## Writing tests. You can refer to the [existing test suite](https://github.com/scverse/scanpy/tree/main/scanpy/tests) for examples.; If you haven't written tests before, Software Carpentry has an [in-depth guide](https://katyhuff.github.io/2016-07-11-scipy/testing/01-basics.html) on the topic. We highly recommend using [Test Driven Development](https://en.wikipedia.org/wiki/Test-driven_development) when contributing code.; This not only ensures you have tests written, it often makes implementation easier since you start out with a specification for your function. Consider parameterizing your tests using the `pytest.mark.parameterize` and `pytest.fixture` decorators.; Documentation on these can be found [here](https://docs.pytest.org/en/stable/fixture.html), but we'd also recommend searching our test suite for existing usage. ###",depend,MatchSource.DOCS,scverse,scanpy,1.10.2,https://github.com/scverse/scanpy/tree/1.10.2/docs/dev/testing.md:381,dependencies,381,docs/dev/testing.md,https://scanpy.readthedocs.io,https://github.com/scverse/scanpy/tree/1.10.2/docs/dev/testing.md,1,['depend'],['dependencies'],"The ease of combining the system with other systems or components, measured by integration cost and technical risks. Integrability considers the complexity and compatibility of interfaces, including syntactic, semantic, behavioral, and temporal alignment.","
You are an expert in evaluating and categorizing quality attributes in software engineering. You possess the necessary skills to distinguish sentences that clearly relate to a given quality attribute from those that do not. 

Evaluate whether the content accurately aligns with its associated quality attribute, given the context provided. Your goal is to determine if the content makes sense in relation to the quality attribute description or if it is a false positive.

Data:

Quality Attribute: Integrability
Attribute Description: The ease of combining the system with other systems or components, measured by integration cost and technical risks. Integrability considers the complexity and compatibility of interfaces, including syntactic, semantic, behavioral, and temporal alignment.
Content: (tests)=. # Tests. Possibly the most important part of contributing to any open source package is the test suite.; Implementations may change, but the only way we can know the code is working before making a release is the test suite. ## Running the tests. We use [pytest](https://docs.pytest.org/en/stable/) to test scanpy.; To run the tests first make sure you have the required dependencies (`pip install -e "".[test,dev]""`), then run `pytest` from the root of the repository. It can take a while to run the whole test suite. There are a few ways to cut down on this while working on a PR:. 1. Only run a subset of the tests. This can be done with the `-k` argument from pytest (e.g. `pytest -k test_plotting.py` or `pytest -k ""test_umap*""`; 2. Run the tests in parallel. If you install the pytest extension [pytest-xdist](https://github.com/pytest-dev/pytest-xdist) you can run tests in parallel with the `--numprocesses` argument to pytest (e.g. `pytest -n 8`). ### Miscellaneous tips. - A lot of warnings can be thrown while running the test suite. It's often easier to read the test results with them hidden via the `--disable-pytest-warnings` argument. ## Writing tests. You can refer to the [existing test suite](https://github.com/scverse/scanpy/tree/main/scanpy/tests) for examples.; If you haven't written tests before, Software Carpentry has an [in-depth guide](https://katyhuff.github.io/2016-07-11-scipy/testing/01-basics.html) on the topic. We highly recommend using [Test Driven Development](https://en.wikipedia.org/wiki/Test-driven_development) when contributing code.; This not only ensures you have tests written, it often makes implementation easier since you start out with a specification for your function. Consider parameterizing your tests using the `pytest.mark.parameterize` and `pytest.fixture` decorators.; Documentation on these can be found [here](https://docs.pytest.org/en/stable/fixture.html), but we'd also recommend searching our test suite for existing usage. ###

Instructions: 
1. Analyze the content and the attribute description.
2. Determine if the content accurately reflects the intended quality attribute in this context.
3. If it does, label it as `true_positive: true`; if not, mark it as a `true_positive: false`.
4. If the content consists only of logs with no other text, mark it as a `true_positive: false`. 
4. If the content partially consists of logs, focus on analyzing remaining text. 
5. Add `reasoning` why the content is a true or false positive.
",False,"The content provided in the context discusses testing practices, specifically how to run and write tests for an open-source package using pytest. The quality attribute 'Integrability' refers to the ease of combining systems or components, considering factors like interface complexity and compatibility. While the content is useful for ensuring code functionality through testing, it does not directly address aspects related to integrability, such as how well the system can be integrated with others or the technical risks involved in integration. Therefore, this content is not accurately reflecting the 'Integrability' quality attribute."
Integrability,", 2)}` → `Mapping[str, Tuple[int, int]]`.; If you can’t use one of those, use a concrete class like `AnnData`.; If your parameter only accepts an enumeration of strings, specify them like so: `Literal['elem-1', 'elem-2']`. ### `Returns` section. There are three types of return sections – prose, tuple, and a mix of both. 1. Prose is for simple cases.; 2. Tuple return sections are formatted like parameters. Other than in numpydoc, each tuple is first characterized by the identifier and *not* by its type. Provide type annotation in the function header.; 3. Mix of prose and tuple is relevant in complicated cases, e.g. when you want to describe that you *added something as annotation to an \`AnnData\` object*. #### Examples. For simple cases, use prose as in; {func}`~scanpy.pp.normalize_total`. ```rst; Returns; -------; Returns dictionary with normalized copies of `adata.X` and `adata.layers`; or updates `adata` with normalized versions of the original; `adata.X` and `adata.layers`, depending on `inplace`.; ```. For tuple return values, you can use the standard numpydoc way of populating it,; e.g. as in {func}`~scanpy.pp.calculate_qc_metrics`.; Do not add types in the docstring, but specify them in the function signature:. ```python; def myfunc(...) -> tuple[int, str]:; """"""; ...; Returns; -------; one_identifier; Description.; second_identifier; Description 2.; """"""; ...; ```. Many functions also just modify parts of the passed AnnData object, like e.g. {func}`~scanpy.tl.dpt`.; You can then combine prose and lists to best describe what happens. ```rst; Returns; -------; Depending on `copy`, returns or updates `adata` with the following fields. If `n_branchings==0`, no field `dpt_groups` will be written. dpt_pseudotime : :class:`~pandas.Series` (`adata.obs`, dtype `float`); Array of dim (number of samples) that stores the pseudotime of each; cell, that is, the DPT distance with respect to the root cell.; dpt_groups : :class:`pandas.Series` (`adata.obs`, dtype `category`); ",depend,MatchSource.DOCS,scverse,scanpy,1.10.2,https://github.com/scverse/scanpy/tree/1.10.2/docs/dev/documentation.md:5605,depending,5605,docs/dev/documentation.md,https://scanpy.readthedocs.io,https://github.com/scverse/scanpy/tree/1.10.2/docs/dev/documentation.md,1,['depend'],['depending'],"The ease of combining the system with other systems or components, measured by integration cost and technical risks. Integrability considers the complexity and compatibility of interfaces, including syntactic, semantic, behavioral, and temporal alignment.","
You are an expert in evaluating and categorizing quality attributes in software engineering. You possess the necessary skills to distinguish sentences that clearly relate to a given quality attribute from those that do not. 

Evaluate whether the content accurately aligns with its associated quality attribute, given the context provided. Your goal is to determine if the content makes sense in relation to the quality attribute description or if it is a false positive.

Data:

Quality Attribute: Integrability
Attribute Description: The ease of combining the system with other systems or components, measured by integration cost and technical risks. Integrability considers the complexity and compatibility of interfaces, including syntactic, semantic, behavioral, and temporal alignment.
Content: , 2)}` → `Mapping[str, Tuple[int, int]]`.; If you can’t use one of those, use a concrete class like `AnnData`.; If your parameter only accepts an enumeration of strings, specify them like so: `Literal['elem-1', 'elem-2']`. ### `Returns` section. There are three types of return sections – prose, tuple, and a mix of both. 1. Prose is for simple cases.; 2. Tuple return sections are formatted like parameters. Other than in numpydoc, each tuple is first characterized by the identifier and *not* by its type. Provide type annotation in the function header.; 3. Mix of prose and tuple is relevant in complicated cases, e.g. when you want to describe that you *added something as annotation to an \`AnnData\` object*. #### Examples. For simple cases, use prose as in; {func}`~scanpy.pp.normalize_total`. ```rst; Returns; -------; Returns dictionary with normalized copies of `adata.X` and `adata.layers`; or updates `adata` with normalized versions of the original; `adata.X` and `adata.layers`, depending on `inplace`.; ```. For tuple return values, you can use the standard numpydoc way of populating it,; e.g. as in {func}`~scanpy.pp.calculate_qc_metrics`.; Do not add types in the docstring, but specify them in the function signature:. ```python; def myfunc(...) -> tuple[int, str]:; """"""; ...; Returns; -------; one_identifier; Description.; second_identifier; Description 2.; """"""; ...; ```. Many functions also just modify parts of the passed AnnData object, like e.g. {func}`~scanpy.tl.dpt`.; You can then combine prose and lists to best describe what happens. ```rst; Returns; -------; Depending on `copy`, returns or updates `adata` with the following fields. If `n_branchings==0`, no field `dpt_groups` will be written. dpt_pseudotime : :class:`~pandas.Series` (`adata.obs`, dtype `float`); Array of dim (number of samples) that stores the pseudotime of each; cell, that is, the DPT distance with respect to the root cell.; dpt_groups : :class:`pandas.Series` (`adata.obs`, dtype `category`); 

Instructions: 
1. Analyze the content and the attribute description.
2. Determine if the content accurately reflects the intended quality attribute in this context.
3. If it does, label it as `true_positive: true`; if not, mark it as a `true_positive: false`.
4. If the content consists only of logs with no other text, mark it as a `true_positive: false`. 
4. If the content partially consists of logs, focus on analyzing remaining text. 
5. Add `reasoning` why the content is a true or false positive.
",True,"The content discusses return types and structures in function documentation, specifically about how functions return data, whether through prose or tuple formats. It mentions different ways to structure returns based on complexity, such as using dictionaries, tuples, or updating objects like AnnData. This is related to integrability because it's about how systems can be integrated with each other by ensuring compatible interfaces and structures, which involves understanding and managing the return types and data structures that one system might expect from another. Therefore, this content aligns with the quality attribute of integrability."
Integrability,. ## Experimental. ```{eval-rst}; .. module:: scanpy.experimental; .. currentmodule:: scanpy; ```. New methods that are in early development which are not (yet); integrated in Scanpy core. ```{eval-rst}; .. module:: scanpy.experimental.pp; .. currentmodule:: scanpy; ```. ```{eval-rst}; .. autosummary::; :nosignatures:; :toctree: ../generated/. experimental.pp.normalize_pearson_residuals; experimental.pp.normalize_pearson_residuals_pca; experimental.pp.highly_variable_genes; experimental.pp.recipe_pearson_residuals; ```; ,integrat,MatchSource.DOCS,scverse,scanpy,1.10.2,https://github.com/scverse/scanpy/tree/1.10.2/docs/api/experimental.md:162,integrated,162,docs/api/experimental.md,https://scanpy.readthedocs.io,https://github.com/scverse/scanpy/tree/1.10.2/docs/api/experimental.md,1,['integrat'],['integrated'],"The ease of combining the system with other systems or components, measured by integration cost and technical risks. Integrability considers the complexity and compatibility of interfaces, including syntactic, semantic, behavioral, and temporal alignment.","
You are an expert in evaluating and categorizing quality attributes in software engineering. You possess the necessary skills to distinguish sentences that clearly relate to a given quality attribute from those that do not. 

Evaluate whether the content accurately aligns with its associated quality attribute, given the context provided. Your goal is to determine if the content makes sense in relation to the quality attribute description or if it is a false positive.

Data:

Quality Attribute: Integrability
Attribute Description: The ease of combining the system with other systems or components, measured by integration cost and technical risks. Integrability considers the complexity and compatibility of interfaces, including syntactic, semantic, behavioral, and temporal alignment.
Content: . ## Experimental. ```{eval-rst}; .. module:: scanpy.experimental; .. currentmodule:: scanpy; ```. New methods that are in early development which are not (yet); integrated in Scanpy core. ```{eval-rst}; .. module:: scanpy.experimental.pp; .. currentmodule:: scanpy; ```. ```{eval-rst}; .. autosummary::; :nosignatures:; :toctree: ../generated/. experimental.pp.normalize_pearson_residuals; experimental.pp.normalize_pearson_residuals_pca; experimental.pp.highly_variable_genes; experimental.pp.recipe_pearson_residuals; ```; 

Instructions: 
1. Analyze the content and the attribute description.
2. Determine if the content accurately reflects the intended quality attribute in this context.
3. If it does, label it as `true_positive: true`; if not, mark it as a `true_positive: false`.
4. If the content consists only of logs with no other text, mark it as a `true_positive: false`. 
4. If the content partially consists of logs, focus on analyzing remaining text. 
5. Add `reasoning` why the content is a true or false positive.
",True,"The content discusses new methods in experimental.pp that are not yet integrated into Scanpy core, which relates to integrability as it concerns combining systems or components. The mention of methods and their status indicates integration challenges, aligning with the attribute's focus on integration complexity and compatibility."
Integrability,"` {pr}`1402` {smaller}`P Weiler`; - Speed ups for {func}`~scanpy.get.obs_df` {pr}`1499` {smaller}`F Ramirez`. ```{rubric} Bugfixes; ```. - Consistent fold-change, fractions calculation for filter_rank_genes_groups {pr}`1391` {smaller}`S Rybakov`; - Fixed bug where `score_genes` would error if one gene was passed {pr}`1398` {smaller}`I Virshup`; - Fixed `log1p` inplace on integer dense arrays {pr}`1400` {smaller}`I Virshup`; - Fix docstring formatting for {func}`~scanpy.tl.rank_genes_groups` {pr}`1417` {smaller}`P Weiler`; - Removed `` PendingDeprecationWarning`s from use of `np.matrix `` {pr}`1424` {smaller}`P Weiler`; - Fixed indexing byg in `~scanpy.pp.highly_variable_genes` {pr}`1456` {smaller}`V Bergen`; - Fix default number of genes for marker_genes_overlap {pr}`1464` {smaller}`MD Luecken`; - Fixed passing `groupby` and `dendrogram_key` to {func}`~scanpy.tl.dendrogram` {pr}`1465` {smaller}`M Varma`; - Fixed download path of `pbmc3k_processed` {pr}`1472` {smaller}`D Strobl`; - Better error message when computing DE with a group of size 1 {pr}`1490` {smaller}`J Manning`; - Update cugraph API usage for v0.16 {pr}`1494` {smaller}`R Ilango`; - Fixed `marker_gene_overlap` default value for `top_n_markers` {pr}`1464` {smaller}`MD Luecken`; - Pass `random_state` to RAPIDs UMAP {pr}`1474` {smaller}`C Nolet`; - Fixed `anndata` version requirement for {func}`~anndata.concat` (re-exported from scanpy as `sc.concat`) {pr}`1491` {smaller}`I Virshup`; - Fixed the width of the progress bar when downloading data {pr}`1507` {smaller}`M Klein`; - Updated link for `moignard15` dataset {pr}`1542` {smaller}`I Virshup`; - Fixed bug where calling `set_figure_params` could block if IPython was installed, but not used. {pr}`1547` {smaller}`I Virshup`; - {func}`~scanpy.pl.violin` no longer fails if `.raw` not present {pr}`1548` {smaller}`I Virshup`; - {func}`~scanpy.pl.spatial` refactoring and better handling of spatial data {pr}`1512` {smaller}`G Palla`; - {func}`~scanpy.pp.pca` works w",message,MatchSource.DOCS,scverse,scanpy,1.10.2,https://github.com/scverse/scanpy/tree/1.10.2/docs/release-notes/1.7.0.md:4126,message,4126,docs/release-notes/1.7.0.md,https://scanpy.readthedocs.io,https://github.com/scverse/scanpy/tree/1.10.2/docs/release-notes/1.7.0.md,1,['message'],['message'],"The ease of combining the system with other systems or components, measured by integration cost and technical risks. Integrability considers the complexity and compatibility of interfaces, including syntactic, semantic, behavioral, and temporal alignment.","
You are an expert in evaluating and categorizing quality attributes in software engineering. You possess the necessary skills to distinguish sentences that clearly relate to a given quality attribute from those that do not. 

Evaluate whether the content accurately aligns with its associated quality attribute, given the context provided. Your goal is to determine if the content makes sense in relation to the quality attribute description or if it is a false positive.

Data:

Quality Attribute: Integrability
Attribute Description: The ease of combining the system with other systems or components, measured by integration cost and technical risks. Integrability considers the complexity and compatibility of interfaces, including syntactic, semantic, behavioral, and temporal alignment.
Content: ` {pr}`1402` {smaller}`P Weiler`; - Speed ups for {func}`~scanpy.get.obs_df` {pr}`1499` {smaller}`F Ramirez`. ```{rubric} Bugfixes; ```. - Consistent fold-change, fractions calculation for filter_rank_genes_groups {pr}`1391` {smaller}`S Rybakov`; - Fixed bug where `score_genes` would error if one gene was passed {pr}`1398` {smaller}`I Virshup`; - Fixed `log1p` inplace on integer dense arrays {pr}`1400` {smaller}`I Virshup`; - Fix docstring formatting for {func}`~scanpy.tl.rank_genes_groups` {pr}`1417` {smaller}`P Weiler`; - Removed `` PendingDeprecationWarning`s from use of `np.matrix `` {pr}`1424` {smaller}`P Weiler`; - Fixed indexing byg in `~scanpy.pp.highly_variable_genes` {pr}`1456` {smaller}`V Bergen`; - Fix default number of genes for marker_genes_overlap {pr}`1464` {smaller}`MD Luecken`; - Fixed passing `groupby` and `dendrogram_key` to {func}`~scanpy.tl.dendrogram` {pr}`1465` {smaller}`M Varma`; - Fixed download path of `pbmc3k_processed` {pr}`1472` {smaller}`D Strobl`; - Better error message when computing DE with a group of size 1 {pr}`1490` {smaller}`J Manning`; - Update cugraph API usage for v0.16 {pr}`1494` {smaller}`R Ilango`; - Fixed `marker_gene_overlap` default value for `top_n_markers` {pr}`1464` {smaller}`MD Luecken`; - Pass `random_state` to RAPIDs UMAP {pr}`1474` {smaller}`C Nolet`; - Fixed `anndata` version requirement for {func}`~anndata.concat` (re-exported from scanpy as `sc.concat`) {pr}`1491` {smaller}`I Virshup`; - Fixed the width of the progress bar when downloading data {pr}`1507` {smaller}`M Klein`; - Updated link for `moignard15` dataset {pr}`1542` {smaller}`I Virshup`; - Fixed bug where calling `set_figure_params` could block if IPython was installed, but not used. {pr}`1547` {smaller}`I Virshup`; - {func}`~scanpy.pl.violin` no longer fails if `.raw` not present {pr}`1548` {smaller}`I Virshup`; - {func}`~scanpy.pl.spatial` refactoring and better handling of spatial data {pr}`1512` {smaller}`G Palla`; - {func}`~scanpy.pp.pca` works w

Instructions: 
1. Analyze the content and the attribute description.
2. Determine if the content accurately reflects the intended quality attribute in this context.
3. If it does, label it as `true_positive: true`; if not, mark it as a `true_positive: false`.
4. If the content consists only of logs with no other text, mark it as a `true_positive: false`. 
4. If the content partially consists of logs, focus on analyzing remaining text. 
5. Add `reasoning` why the content is a true or false positive.
",True,"The content provided includes multiple instances of bug fixes and improvements to specific functions in an application. This suggests that the integration with other systems or components has been enhanced, which aligns with the quality attribute of Integrability. The mention of 'bugfixes' indicates issues that might have hindered integration, and their resolution contributes positively to integrability by reducing technical risks."
Integrability,"er}`C Rands`; - Extended examples for differential expression plotting. {pr}`1529` {smaller}`F Ramirez`; \- See {func}`~scanpy.pl.rank_genes_groups_dotplot` or {func}`~scanpy.pl.rank_genes_groups_matrixplot` for examples. ```{rubric} Bug fixes; ```. - Fix {func}`scanpy.pl.paga_path` `TypeError` with recent versions of anndata {pr}`1047` {smaller}`P Angerer`; - Fix detection of whether IPython is running {pr}`1844` {smaller}`I Virshup`; - Fixed reproducibility of {func}`scanpy.tl.diffmap` (added random_state) {pr}`1858` {smaller}`I Kucinski`; - Fixed errors and warnings from embedding plots with small numbers of categories after `sns.set_palette` was called {pr}`1886` {smaller}`I Virshup`; - Fixed handling of `gene_symbols` argument in a number of `sc.pl.rank_genes_groups*` functions {pr}`1529` {smaller}`F Ramirez` {smaller}`I Virshup`; - Fixed handling of `use_raw` for `sc.tl.rank_genes_groups` when no `.raw` is present {pr}`1895` {smaller}`I Virshup`; - {func}`scanpy.pl.rank_genes_groups_violin` now works for `raw=False` {pr}`1669` {smaller}`M van den Beek`; - {func}`scanpy.pl.dotplot` now uses `smallest_dot` argument correctly {pr}`1771` {smaller}`S Flemming`. ```{rubric} Development processes; ```. - Switched to [flit] for building and deploying the package, a simple tool with an easy to understand command line interface and metadata {pr}`1527` {smaller}`P Angerer`; - Use [pre-commit](https://pre-commit.com) for style checks {pr}`1684` {pr}`1848` {smaller}`L Heumos` {smaller}`I Virshup`. ```{rubric} Deprecations; ```. - Dropped support for Python 3.6. [More details here](https://numpy.org/neps/nep-0029-deprecation_policy.html). {pr}`1897` {smaller}`I Virshup`; - Deprecated `layers` and `layers_norm` kwargs to {func}`~scanpy.pp.normalize_total` {pr}`1667` {smaller}`I Virshup`; - Deprecated `MulticoreTSNE` backend for {func}`scanpy.tl.tsne` {pr}`1854` {smaller}`I Virshup`. [docsearch]: https://docsearch.algolia.com/; [flit]: https://flit.readthedocs.io/en/latest/; ",interface,MatchSource.DOCS,scverse,scanpy,1.10.2,https://github.com/scverse/scanpy/tree/1.10.2/docs/release-notes/1.8.0.md:3685,interface,3685,docs/release-notes/1.8.0.md,https://scanpy.readthedocs.io,https://github.com/scverse/scanpy/tree/1.10.2/docs/release-notes/1.8.0.md,1,['interface'],['interface'],"The ease of combining the system with other systems or components, measured by integration cost and technical risks. Integrability considers the complexity and compatibility of interfaces, including syntactic, semantic, behavioral, and temporal alignment.","
You are an expert in evaluating and categorizing quality attributes in software engineering. You possess the necessary skills to distinguish sentences that clearly relate to a given quality attribute from those that do not. 

Evaluate whether the content accurately aligns with its associated quality attribute, given the context provided. Your goal is to determine if the content makes sense in relation to the quality attribute description or if it is a false positive.

Data:

Quality Attribute: Integrability
Attribute Description: The ease of combining the system with other systems or components, measured by integration cost and technical risks. Integrability considers the complexity and compatibility of interfaces, including syntactic, semantic, behavioral, and temporal alignment.
Content: er}`C Rands`; - Extended examples for differential expression plotting. {pr}`1529` {smaller}`F Ramirez`; \- See {func}`~scanpy.pl.rank_genes_groups_dotplot` or {func}`~scanpy.pl.rank_genes_groups_matrixplot` for examples. ```{rubric} Bug fixes; ```. - Fix {func}`scanpy.pl.paga_path` `TypeError` with recent versions of anndata {pr}`1047` {smaller}`P Angerer`; - Fix detection of whether IPython is running {pr}`1844` {smaller}`I Virshup`; - Fixed reproducibility of {func}`scanpy.tl.diffmap` (added random_state) {pr}`1858` {smaller}`I Kucinski`; - Fixed errors and warnings from embedding plots with small numbers of categories after `sns.set_palette` was called {pr}`1886` {smaller}`I Virshup`; - Fixed handling of `gene_symbols` argument in a number of `sc.pl.rank_genes_groups*` functions {pr}`1529` {smaller}`F Ramirez` {smaller}`I Virshup`; - Fixed handling of `use_raw` for `sc.tl.rank_genes_groups` when no `.raw` is present {pr}`1895` {smaller}`I Virshup`; - {func}`scanpy.pl.rank_genes_groups_violin` now works for `raw=False` {pr}`1669` {smaller}`M van den Beek`; - {func}`scanpy.pl.dotplot` now uses `smallest_dot` argument correctly {pr}`1771` {smaller}`S Flemming`. ```{rubric} Development processes; ```. - Switched to [flit] for building and deploying the package, a simple tool with an easy to understand command line interface and metadata {pr}`1527` {smaller}`P Angerer`; - Use [pre-commit](https://pre-commit.com) for style checks {pr}`1684` {pr}`1848` {smaller}`L Heumos` {smaller}`I Virshup`. ```{rubric} Deprecations; ```. - Dropped support for Python 3.6. [More details here](https://numpy.org/neps/nep-0029-deprecation_policy.html). {pr}`1897` {smaller}`I Virshup`; - Deprecated `layers` and `layers_norm` kwargs to {func}`~scanpy.pp.normalize_total` {pr}`1667` {smaller}`I Virshup`; - Deprecated `MulticoreTSNE` backend for {func}`scanpy.tl.tsne` {pr}`1854` {smaller}`I Virshup`. [docsearch]: https://docsearch.algolia.com/; [flit]: https://flit.readthedocs.io/en/latest/; 

Instructions: 
1. Analyze the content and the attribute description.
2. Determine if the content accurately reflects the intended quality attribute in this context.
3. If it does, label it as `true_positive: true`; if not, mark it as a `true_positive: false`.
4. If the content consists only of logs with no other text, mark it as a `true_positive: false`. 
4. If the content partially consists of logs, focus on analyzing remaining text. 
5. Add `reasoning` why the content is a true or false positive.
",False,"The content provided consists primarily of bug fixes and development process updates related to the ScAnpy package. These include fixing errors in specific functions, switching to Flit for deployment, style checks with pre-commit, deprecations of certain features, and dropping support for Python 3.6. While these are important aspects of software development, they do not directly pertain to the integrability of the system. Integrability concerns the ease of combining systems or components, focusing on interfaces, compatibility, and integration cost. The content here discusses technical debt management, deployment processes, and feature deprecations rather than integration issues. Therefore, this content does not accurately reflect the quality attribute of integrability."
Integrability,"etween spots. - [bento](https://bento-tools.readthedocs.io/en/latest/) 🍱 {small}`UC San Diego`. > Bento is an accessible Python toolkit for performing subcellular analysis of spatial transcriptomics data. ### Multimodal integration. - [MUON](https://muon.readthedocs.io/en/latest/) and [MuData](https://mudata.readthedocs.io/en/latest/) {small}`EMBL/ DKFZ`. > MUON, and it's associated data structure MuData are designed to organise, analyse, visualise, and exchange multimodal data.; > MUON enables a range of analyses for ATAC and CITE-seq, from data preprocessing to flexible multi-omics alignment. ### Adaptive immune receptor repertoire (AIRR). - [scirpy](https://github.com/icbi-lab/scirpy) {small}`Medical University of Innsbruck`. > scirpy is a scanpy extension to expore single-cell T-cell receptor (TCR) and B-cell receptor (BCR) repertoires. - [dandelion](https://github.com/zktuong/dandelion) {small}`University of Cambridge`. > dandelion is a single-cell BCR-seq network analysis package that integrates with transcriptomic data analyzed via scanpy. ### Long reads. - [Swan](https://freese.gitbook.io/swan/tutorials/data_processing) {small}`UC Irvine`. > Swan is a Python library designed for the analysis and visualization of transcriptomes, especially with long-read transcriptomes in mind.; > Users can add transcriptomes from different datasets and explore distinct splicing and expression patterns across datasets. ## Analysis methods. ### scvi-tools. - [scvi-tools](https://github.com/YosefLab/scvi-tools) {small}`Berkeley`. > scvi-tools hosts deep generative models (DGM) for end-to-end analysis of single-cell; > omics data (e.g., scVI, scANVI, totalVI). It also contains several primitives to build novel DGMs. ### Fate mapping. - [CellRank](https://cellrank.org) {small}`Helmholtz Munich`. > CellRank is a framework to uncover cellular dynamics based on single-cell data.; > It incorporates modalities such as RNA velocity, pseudotime, developmental potential, real-time inform",integrat,MatchSource.DOCS,scverse,scanpy,1.10.2,https://github.com/scverse/scanpy/tree/1.10.2/docs/ecosystem.md:2866,integrates,2866,docs/ecosystem.md,https://scanpy.readthedocs.io,https://github.com/scverse/scanpy/tree/1.10.2/docs/ecosystem.md,1,['integrat'],['integrates'],"The ease of combining the system with other systems or components, measured by integration cost and technical risks. Integrability considers the complexity and compatibility of interfaces, including syntactic, semantic, behavioral, and temporal alignment.","
You are an expert in evaluating and categorizing quality attributes in software engineering. You possess the necessary skills to distinguish sentences that clearly relate to a given quality attribute from those that do not. 

Evaluate whether the content accurately aligns with its associated quality attribute, given the context provided. Your goal is to determine if the content makes sense in relation to the quality attribute description or if it is a false positive.

Data:

Quality Attribute: Integrability
Attribute Description: The ease of combining the system with other systems or components, measured by integration cost and technical risks. Integrability considers the complexity and compatibility of interfaces, including syntactic, semantic, behavioral, and temporal alignment.
Content: etween spots. - [bento](https://bento-tools.readthedocs.io/en/latest/) 🍱 {small}`UC San Diego`. > Bento is an accessible Python toolkit for performing subcellular analysis of spatial transcriptomics data. ### Multimodal integration. - [MUON](https://muon.readthedocs.io/en/latest/) and [MuData](https://mudata.readthedocs.io/en/latest/) {small}`EMBL/ DKFZ`. > MUON, and it's associated data structure MuData are designed to organise, analyse, visualise, and exchange multimodal data.; > MUON enables a range of analyses for ATAC and CITE-seq, from data preprocessing to flexible multi-omics alignment. ### Adaptive immune receptor repertoire (AIRR). - [scirpy](https://github.com/icbi-lab/scirpy) {small}`Medical University of Innsbruck`. > scirpy is a scanpy extension to expore single-cell T-cell receptor (TCR) and B-cell receptor (BCR) repertoires. - [dandelion](https://github.com/zktuong/dandelion) {small}`University of Cambridge`. > dandelion is a single-cell BCR-seq network analysis package that integrates with transcriptomic data analyzed via scanpy. ### Long reads. - [Swan](https://freese.gitbook.io/swan/tutorials/data_processing) {small}`UC Irvine`. > Swan is a Python library designed for the analysis and visualization of transcriptomes, especially with long-read transcriptomes in mind.; > Users can add transcriptomes from different datasets and explore distinct splicing and expression patterns across datasets. ## Analysis methods. ### scvi-tools. - [scvi-tools](https://github.com/YosefLab/scvi-tools) {small}`Berkeley`. > scvi-tools hosts deep generative models (DGM) for end-to-end analysis of single-cell; > omics data (e.g., scVI, scANVI, totalVI). It also contains several primitives to build novel DGMs. ### Fate mapping. - [CellRank](https://cellrank.org) {small}`Helmholtz Munich`. > CellRank is a framework to uncover cellular dynamics based on single-cell data.; > It incorporates modalities such as RNA velocity, pseudotime, developmental potential, real-time inform

Instructions: 
1. Analyze the content and the attribute description.
2. Determine if the content accurately reflects the intended quality attribute in this context.
3. If it does, label it as `true_positive: true`; if not, mark it as a `true_positive: false`.
4. If the content consists only of logs with no other text, mark it as a `true_positive: false`. 
4. If the content partially consists of logs, focus on analyzing remaining text. 
5. Add `reasoning` why the content is a true or false positive.
",True,"The content discusses integrating various tools and data types (e.g., Bento, MUON, MuData, scirpy, dandelion, Swan, scvi-tools, CellRank) to perform multimodal analyses. The descriptions mention combining different datasets and using Python libraries for analysis, which relates to the concept of integrability as it involves integrating systems or components. However, the connection is not directly about system integration but more about data integration in specific biological domains."
Integrability,"hould remain the same either way.; - Are you optimizing a method? Check that it's results are the same as a gold standard implementation. ### Performance. It's more important that you're accurately testing the code works than it is that test suite runs quickly.; That said, it's nice when the test suite runs fast. You can check how long tests take to run by passing `--durations=0` argument to `pytest`.; Hopefully your new tests won't show up on top!; Some approaches to this include:. - Is there a common setup/ computation happening in each test? Consider caching these in a [scoped test fixture](https://docs.pytest.org/en/stable/fixture.html#sharing-test-data).; - Is the behaviour you're testing for dependent on the size of the data? If not, consider reducing it. ### Plotting tests. While computational functions will return arrays and values, it can be harder to work with the output of plotting functions. To make this easier, we use the `image_comparer` fixture for comparing plotting results (search the test suite for example usage).; This is used to check that generated plots look the same as they did previously.; Reference images (the expected output) are stored as `expected.png` to relevant tests directory under `scanpy/tests/_images`.; When run, the test suite will generate `actual.png` files for each check.; These files are compared, and if the `actual` plot differs from the reference plot, a `diff` of the images is also generated.; Paths for all these files will be reported when a test fails, and images for failed plots can be viewed via the :doc:`CI interface <ci>`. A common gotcha here is that plots often change slightly on different machines/ OSs.; `scanpy`'s test suite sets a number of environment variables to ensure as similar of plots as possible.; When adding new reference plots, the recommended workflow is to write the test as though an expected result already exists, run it once to generate the output, then move that output to the reference directory.; ",interface,MatchSource.DOCS,scverse,scanpy,1.10.2,https://github.com/scverse/scanpy/tree/1.10.2/docs/dev/testing.md:4468,interface,4468,docs/dev/testing.md,https://scanpy.readthedocs.io,https://github.com/scverse/scanpy/tree/1.10.2/docs/dev/testing.md,1,['interface'],['interface'],"The ease of combining the system with other systems or components, measured by integration cost and technical risks. Integrability considers the complexity and compatibility of interfaces, including syntactic, semantic, behavioral, and temporal alignment.","
You are an expert in evaluating and categorizing quality attributes in software engineering. You possess the necessary skills to distinguish sentences that clearly relate to a given quality attribute from those that do not. 

Evaluate whether the content accurately aligns with its associated quality attribute, given the context provided. Your goal is to determine if the content makes sense in relation to the quality attribute description or if it is a false positive.

Data:

Quality Attribute: Integrability
Attribute Description: The ease of combining the system with other systems or components, measured by integration cost and technical risks. Integrability considers the complexity and compatibility of interfaces, including syntactic, semantic, behavioral, and temporal alignment.
Content: hould remain the same either way.; - Are you optimizing a method? Check that it's results are the same as a gold standard implementation. ### Performance. It's more important that you're accurately testing the code works than it is that test suite runs quickly.; That said, it's nice when the test suite runs fast. You can check how long tests take to run by passing `--durations=0` argument to `pytest`.; Hopefully your new tests won't show up on top!; Some approaches to this include:. - Is there a common setup/ computation happening in each test? Consider caching these in a [scoped test fixture](https://docs.pytest.org/en/stable/fixture.html#sharing-test-data).; - Is the behaviour you're testing for dependent on the size of the data? If not, consider reducing it. ### Plotting tests. While computational functions will return arrays and values, it can be harder to work with the output of plotting functions. To make this easier, we use the `image_comparer` fixture for comparing plotting results (search the test suite for example usage).; This is used to check that generated plots look the same as they did previously.; Reference images (the expected output) are stored as `expected.png` to relevant tests directory under `scanpy/tests/_images`.; When run, the test suite will generate `actual.png` files for each check.; These files are compared, and if the `actual` plot differs from the reference plot, a `diff` of the images is also generated.; Paths for all these files will be reported when a test fails, and images for failed plots can be viewed via the :doc:`CI interface <ci>`. A common gotcha here is that plots often change slightly on different machines/ OSs.; `scanpy`'s test suite sets a number of environment variables to ensure as similar of plots as possible.; When adding new reference plots, the recommended workflow is to write the test as though an expected result already exists, run it once to generate the output, then move that output to the reference directory.; 

Instructions: 
1. Analyze the content and the attribute description.
2. Determine if the content accurately reflects the intended quality attribute in this context.
3. If it does, label it as `true_positive: true`; if not, mark it as a `true_positive: false`.
4. If the content consists only of logs with no other text, mark it as a `true_positive: false`. 
4. If the content partially consists of logs, focus on analyzing remaining text. 
5. Add `reasoning` why the content is a true or false positive.
",False,"The provided content discusses testing practices such as optimizing test methods, using fixtures for caching common computations, reducing data size, and comparing plotting results with reference images. While these are important aspects of software development, they don't directly relate to integrability which focuses on the ease of combining systems or components regarding interfaces and compatibility. The content is more aligned with testing efficiency and effectiveness rather than system integration."
Integrability,"ifferent input values which should generate equivalent output (e.g. if an array is sparse or dense)?; - Do you have arguments which should have orthogonal effects on the output? Check that they are independent. For example, if there is a flag for extended output, the base output should remain the same either way.; - Are you optimizing a method? Check that it's results are the same as a gold standard implementation. ### Performance. It's more important that you're accurately testing the code works than it is that test suite runs quickly.; That said, it's nice when the test suite runs fast. You can check how long tests take to run by passing `--durations=0` argument to `pytest`.; Hopefully your new tests won't show up on top!; Some approaches to this include:. - Is there a common setup/ computation happening in each test? Consider caching these in a [scoped test fixture](https://docs.pytest.org/en/stable/fixture.html#sharing-test-data).; - Is the behaviour you're testing for dependent on the size of the data? If not, consider reducing it. ### Plotting tests. While computational functions will return arrays and values, it can be harder to work with the output of plotting functions. To make this easier, we use the `image_comparer` fixture for comparing plotting results (search the test suite for example usage).; This is used to check that generated plots look the same as they did previously.; Reference images (the expected output) are stored as `expected.png` to relevant tests directory under `scanpy/tests/_images`.; When run, the test suite will generate `actual.png` files for each check.; These files are compared, and if the `actual` plot differs from the reference plot, a `diff` of the images is also generated.; Paths for all these files will be reported when a test fails, and images for failed plots can be viewed via the :doc:`CI interface <ci>`. A common gotcha here is that plots often change slightly on different machines/ OSs.; `scanpy`'s test suite sets a number",depend,MatchSource.DOCS,scverse,scanpy,1.10.2,https://github.com/scverse/scanpy/tree/1.10.2/docs/dev/testing.md:3594,dependent,3594,docs/dev/testing.md,https://scanpy.readthedocs.io,https://github.com/scverse/scanpy/tree/1.10.2/docs/dev/testing.md,1,['depend'],['dependent'],"The ease of combining the system with other systems or components, measured by integration cost and technical risks. Integrability considers the complexity and compatibility of interfaces, including syntactic, semantic, behavioral, and temporal alignment.","
You are an expert in evaluating and categorizing quality attributes in software engineering. You possess the necessary skills to distinguish sentences that clearly relate to a given quality attribute from those that do not. 

Evaluate whether the content accurately aligns with its associated quality attribute, given the context provided. Your goal is to determine if the content makes sense in relation to the quality attribute description or if it is a false positive.

Data:

Quality Attribute: Integrability
Attribute Description: The ease of combining the system with other systems or components, measured by integration cost and technical risks. Integrability considers the complexity and compatibility of interfaces, including syntactic, semantic, behavioral, and temporal alignment.
Content: ifferent input values which should generate equivalent output (e.g. if an array is sparse or dense)?; - Do you have arguments which should have orthogonal effects on the output? Check that they are independent. For example, if there is a flag for extended output, the base output should remain the same either way.; - Are you optimizing a method? Check that it's results are the same as a gold standard implementation. ### Performance. It's more important that you're accurately testing the code works than it is that test suite runs quickly.; That said, it's nice when the test suite runs fast. You can check how long tests take to run by passing `--durations=0` argument to `pytest`.; Hopefully your new tests won't show up on top!; Some approaches to this include:. - Is there a common setup/ computation happening in each test? Consider caching these in a [scoped test fixture](https://docs.pytest.org/en/stable/fixture.html#sharing-test-data).; - Is the behaviour you're testing for dependent on the size of the data? If not, consider reducing it. ### Plotting tests. While computational functions will return arrays and values, it can be harder to work with the output of plotting functions. To make this easier, we use the `image_comparer` fixture for comparing plotting results (search the test suite for example usage).; This is used to check that generated plots look the same as they did previously.; Reference images (the expected output) are stored as `expected.png` to relevant tests directory under `scanpy/tests/_images`.; When run, the test suite will generate `actual.png` files for each check.; These files are compared, and if the `actual` plot differs from the reference plot, a `diff` of the images is also generated.; Paths for all these files will be reported when a test fails, and images for failed plots can be viewed via the :doc:`CI interface <ci>`. A common gotcha here is that plots often change slightly on different machines/ OSs.; `scanpy`'s test suite sets a number

Instructions: 
1. Analyze the content and the attribute description.
2. Determine if the content accurately reflects the intended quality attribute in this context.
3. If it does, label it as `true_positive: true`; if not, mark it as a `true_positive: false`.
4. If the content consists only of logs with no other text, mark it as a `true_positive: false`. 
4. If the content partially consists of logs, focus on analyzing remaining text. 
5. Add `reasoning` why the content is a true or false positive.
",False,"The content discusses testing practices such as reducing test data size and using fixtures to cache computations. It mentions performance considerations with pytest arguments and the use of reference images for plotting tests. These points are related to testing efficiency but do not directly address integrability, which concerns system integration complexity and compatibility. Therefore, this content is a false positive regarding integrability."
Integrability,"mancellatlas.usegalaxy.eu) for the Human Cell Atlas [\[tweet\]](https://twitter.com/ExpressionAtlas/status/1151797848469626881) {small}`U Freiburg`; - the [Expression Atlas](https://www.ebi.ac.uk/gxa/sc/help.html) {small}`EMBL-EBI`. ## Modalities. ### RNA velocity. - [scVelo](https://scvelo.org) {small}`Helmholtz Munich`. ### Spatial Transcriptomics Tools. - [squidpy](https://squidpy.readthedocs.io/en/stable/) {small}`Helmholtz Munich`. > Squidpy is a comprehensive toolkit for working with spatial single cell omics data. - [PASTE](https://github.com/raphael-group/paste) {small}`Princeton`. > PASTE is a computational method to align and integrate spatial transcriptomics data across adjacent tissue slices by leveraging both gene expression similarity and spatial distances between spots. - [bento](https://bento-tools.readthedocs.io/en/latest/) 🍱 {small}`UC San Diego`. > Bento is an accessible Python toolkit for performing subcellular analysis of spatial transcriptomics data. ### Multimodal integration. - [MUON](https://muon.readthedocs.io/en/latest/) and [MuData](https://mudata.readthedocs.io/en/latest/) {small}`EMBL/ DKFZ`. > MUON, and it's associated data structure MuData are designed to organise, analyse, visualise, and exchange multimodal data.; > MUON enables a range of analyses for ATAC and CITE-seq, from data preprocessing to flexible multi-omics alignment. ### Adaptive immune receptor repertoire (AIRR). - [scirpy](https://github.com/icbi-lab/scirpy) {small}`Medical University of Innsbruck`. > scirpy is a scanpy extension to expore single-cell T-cell receptor (TCR) and B-cell receptor (BCR) repertoires. - [dandelion](https://github.com/zktuong/dandelion) {small}`University of Cambridge`. > dandelion is a single-cell BCR-seq network analysis package that integrates with transcriptomic data analyzed via scanpy. ### Long reads. - [Swan](https://freese.gitbook.io/swan/tutorials/data_processing) {small}`UC Irvine`. > Swan is a Python library designed for the analysis",integrat,MatchSource.DOCS,scverse,scanpy,1.10.2,https://github.com/scverse/scanpy/tree/1.10.2/docs/ecosystem.md:2080,integration,2080,docs/ecosystem.md,https://scanpy.readthedocs.io,https://github.com/scverse/scanpy/tree/1.10.2/docs/ecosystem.md,1,['integrat'],['integration'],"The ease of combining the system with other systems or components, measured by integration cost and technical risks. Integrability considers the complexity and compatibility of interfaces, including syntactic, semantic, behavioral, and temporal alignment.","
You are an expert in evaluating and categorizing quality attributes in software engineering. You possess the necessary skills to distinguish sentences that clearly relate to a given quality attribute from those that do not. 

Evaluate whether the content accurately aligns with its associated quality attribute, given the context provided. Your goal is to determine if the content makes sense in relation to the quality attribute description or if it is a false positive.

Data:

Quality Attribute: Integrability
Attribute Description: The ease of combining the system with other systems or components, measured by integration cost and technical risks. Integrability considers the complexity and compatibility of interfaces, including syntactic, semantic, behavioral, and temporal alignment.
Content: mancellatlas.usegalaxy.eu) for the Human Cell Atlas [\[tweet\]](https://twitter.com/ExpressionAtlas/status/1151797848469626881) {small}`U Freiburg`; - the [Expression Atlas](https://www.ebi.ac.uk/gxa/sc/help.html) {small}`EMBL-EBI`. ## Modalities. ### RNA velocity. - [scVelo](https://scvelo.org) {small}`Helmholtz Munich`. ### Spatial Transcriptomics Tools. - [squidpy](https://squidpy.readthedocs.io/en/stable/) {small}`Helmholtz Munich`. > Squidpy is a comprehensive toolkit for working with spatial single cell omics data. - [PASTE](https://github.com/raphael-group/paste) {small}`Princeton`. > PASTE is a computational method to align and integrate spatial transcriptomics data across adjacent tissue slices by leveraging both gene expression similarity and spatial distances between spots. - [bento](https://bento-tools.readthedocs.io/en/latest/) 🍱 {small}`UC San Diego`. > Bento is an accessible Python toolkit for performing subcellular analysis of spatial transcriptomics data. ### Multimodal integration. - [MUON](https://muon.readthedocs.io/en/latest/) and [MuData](https://mudata.readthedocs.io/en/latest/) {small}`EMBL/ DKFZ`. > MUON, and it's associated data structure MuData are designed to organise, analyse, visualise, and exchange multimodal data.; > MUON enables a range of analyses for ATAC and CITE-seq, from data preprocessing to flexible multi-omics alignment. ### Adaptive immune receptor repertoire (AIRR). - [scirpy](https://github.com/icbi-lab/scirpy) {small}`Medical University of Innsbruck`. > scirpy is a scanpy extension to expore single-cell T-cell receptor (TCR) and B-cell receptor (BCR) repertoires. - [dandelion](https://github.com/zktuong/dandelion) {small}`University of Cambridge`. > dandelion is a single-cell BCR-seq network analysis package that integrates with transcriptomic data analyzed via scanpy. ### Long reads. - [Swan](https://freese.gitbook.io/swan/tutorials/data_processing) {small}`UC Irvine`. > Swan is a Python library designed for the analysis

Instructions: 
1. Analyze the content and the attribute description.
2. Determine if the content accurately reflects the intended quality attribute in this context.
3. If it does, label it as `true_positive: true`; if not, mark it as a `true_positive: false`.
4. If the content consists only of logs with no other text, mark it as a `true_positive: false`. 
4. If the content partially consists of logs, focus on analyzing remaining text. 
5. Add `reasoning` why the content is a true or false positive.
",False,"The content provided discusses various tools and techniques related to spatial transcriptomics, multimodal integration, adaptive immune receptor repertoires, and long reads. These topics fall under computational tools for integrating diverse data types within biological systems. The quality attribute of Integrability is concerned with the ease of combining systems or components, considering factors like interface complexity and compatibility. While the content deals with integrable aspects in data analysis, it doesn't directly focus on system integration challenges. Instead, it highlights specific software tools used to manage and integrate biological datasets. Therefore, the provided content does not accurately reflect the quality attribute of Integrability as defined."
Integrability,"mproved docs for `percent_top` argument of {func}`~scanpy.pp.calculate_qc_metrics` {pr}`2849` {smaller}`I Virshup`; * New basic clustering tutorial ({doc}`/tutorials/basics/clustering`), based on one from [scverse-tutorials](https://scverse-tutorials.readthedocs.io/en/latest/notebooks/basic-scrna-tutorial.html) {pr}`2901` {smaller}`I Virshup`; * Overhauled {doc}`/tutorials/index` page, and added new {doc}`/how-to/index` section to docs {pr}`2901` {smaller}`I Virshup`; * Added a new tutorial on working with dask ({doc}`/tutorials/experimental/dask`) {pr}`2901` {smaller}`I Gold` {smaller}`I Virshup`. ```{rubric} Bug fixes; ```. * Updated {func}`~scanpy.read_visium` such that it can read spaceranger 2.0 files {smaller}`L Lehner`; * Fix {func}`~scanpy.pp.normalize_total` for dask {pr}`2466` {smaller}`P Angerer`; * Fix setting `sc.settings.verbosity` in some cases {pr}`2605` {smaller}`P Angerer`; * Fix all remaining pandas warnings {pr}`2789` {smaller}`P Angerer`; * Fix some annoying plotting warnings around violin plots {pr}`2844` {smaller}`P Angerer`; * Scanpy now has a test job which tests against the minumum versions of the dependencies. In the process of implementing this, many bugs associated with using older versions of `pandas`, `anndata`, `numpy`, and `matplotlib` were fixed. {pr}`2816` {smaller}`I Virshup`; * Fix warnings caused by internal usage of `pandas.DataFrame.stack` with `pandas>=2.1` {pr}`2864`{smaller}`I Virshup`; * {func}`scanpy.get.aggregate` now always returns {class}`numpy.ndarray` {pr}`2893` {smaller}`S Dicks`; * Removes self from array of neighbors for `use_approx_neighbors = True` in {func}`~scanpy.pp.scrublet` {pr}`2896`{smaller}`S Dicks`; * Compatibility with scipy 1.13 {pr}`2943` {smaller}`I Virshup`; * Fix use of {func}`~scanpy.tl.dendrogram` on highly correlated low precision data {pr}`2928` {smaller}`P Angerer`; * Fix pytest deprecation warning {pr}`2879` {smaller}`P Angerer`. ```{rubric} Development; ```. * Scanpy is now tested against py",depend,MatchSource.DOCS,scverse,scanpy,1.10.2,https://github.com/scverse/scanpy/tree/1.10.2/docs/release-notes/1.10.0.md:5352,dependencies,5352,docs/release-notes/1.10.0.md,https://scanpy.readthedocs.io,https://github.com/scverse/scanpy/tree/1.10.2/docs/release-notes/1.10.0.md,1,['depend'],['dependencies'],"The ease of combining the system with other systems or components, measured by integration cost and technical risks. Integrability considers the complexity and compatibility of interfaces, including syntactic, semantic, behavioral, and temporal alignment.","
You are an expert in evaluating and categorizing quality attributes in software engineering. You possess the necessary skills to distinguish sentences that clearly relate to a given quality attribute from those that do not. 

Evaluate whether the content accurately aligns with its associated quality attribute, given the context provided. Your goal is to determine if the content makes sense in relation to the quality attribute description or if it is a false positive.

Data:

Quality Attribute: Integrability
Attribute Description: The ease of combining the system with other systems or components, measured by integration cost and technical risks. Integrability considers the complexity and compatibility of interfaces, including syntactic, semantic, behavioral, and temporal alignment.
Content: mproved docs for `percent_top` argument of {func}`~scanpy.pp.calculate_qc_metrics` {pr}`2849` {smaller}`I Virshup`; * New basic clustering tutorial ({doc}`/tutorials/basics/clustering`), based on one from [scverse-tutorials](https://scverse-tutorials.readthedocs.io/en/latest/notebooks/basic-scrna-tutorial.html) {pr}`2901` {smaller}`I Virshup`; * Overhauled {doc}`/tutorials/index` page, and added new {doc}`/how-to/index` section to docs {pr}`2901` {smaller}`I Virshup`; * Added a new tutorial on working with dask ({doc}`/tutorials/experimental/dask`) {pr}`2901` {smaller}`I Gold` {smaller}`I Virshup`. ```{rubric} Bug fixes; ```. * Updated {func}`~scanpy.read_visium` such that it can read spaceranger 2.0 files {smaller}`L Lehner`; * Fix {func}`~scanpy.pp.normalize_total` for dask {pr}`2466` {smaller}`P Angerer`; * Fix setting `sc.settings.verbosity` in some cases {pr}`2605` {smaller}`P Angerer`; * Fix all remaining pandas warnings {pr}`2789` {smaller}`P Angerer`; * Fix some annoying plotting warnings around violin plots {pr}`2844` {smaller}`P Angerer`; * Scanpy now has a test job which tests against the minumum versions of the dependencies. In the process of implementing this, many bugs associated with using older versions of `pandas`, `anndata`, `numpy`, and `matplotlib` were fixed. {pr}`2816` {smaller}`I Virshup`; * Fix warnings caused by internal usage of `pandas.DataFrame.stack` with `pandas>=2.1` {pr}`2864`{smaller}`I Virshup`; * {func}`scanpy.get.aggregate` now always returns {class}`numpy.ndarray` {pr}`2893` {smaller}`S Dicks`; * Removes self from array of neighbors for `use_approx_neighbors = True` in {func}`~scanpy.pp.scrublet` {pr}`2896`{smaller}`S Dicks`; * Compatibility with scipy 1.13 {pr}`2943` {smaller}`I Virshup`; * Fix use of {func}`~scanpy.tl.dendrogram` on highly correlated low precision data {pr}`2928` {smaller}`P Angerer`; * Fix pytest deprecation warning {pr}`2879` {smaller}`P Angerer`. ```{rubric} Development; ```. * Scanpy is now tested against py

Instructions: 
1. Analyze the content and the attribute description.
2. Determine if the content accurately reflects the intended quality attribute in this context.
3. If it does, label it as `true_positive: true`; if not, mark it as a `true_positive: false`.
4. If the content consists only of logs with no other text, mark it as a `true_positive: false`. 
4. If the content partially consists of logs, focus on analyzing remaining text. 
5. Add `reasoning` why the content is a true or false positive.
",True,"The content provided includes both bug fixes and new features added to the software. This aligns with the idea that integrability involves making systems compatible and easily integrated. Bug fixes often involve resolving compatibility issues, which ties into the integration aspect of the system. The addition of new tutorials and improved documentation also supports better integrability by helping users understand how to use the system effectively with other tools or components."
Integrability,"oject` {small}`Harvard Med`; - [vitessce](https://github.com/vitessce/vitessce#readme) for purely browser based viewing of zarr formatted AnnData files {smaller}`Harvard Med`. ## Portals. - the [Gene Expression Analysis Resource](https://umgear.org/) {small}`U Maryland`; - the [Galaxy Project](https://humancellatlas.usegalaxy.eu) for the Human Cell Atlas [\[tweet\]](https://twitter.com/ExpressionAtlas/status/1151797848469626881) {small}`U Freiburg`; - the [Expression Atlas](https://www.ebi.ac.uk/gxa/sc/help.html) {small}`EMBL-EBI`. ## Modalities. ### RNA velocity. - [scVelo](https://scvelo.org) {small}`Helmholtz Munich`. ### Spatial Transcriptomics Tools. - [squidpy](https://squidpy.readthedocs.io/en/stable/) {small}`Helmholtz Munich`. > Squidpy is a comprehensive toolkit for working with spatial single cell omics data. - [PASTE](https://github.com/raphael-group/paste) {small}`Princeton`. > PASTE is a computational method to align and integrate spatial transcriptomics data across adjacent tissue slices by leveraging both gene expression similarity and spatial distances between spots. - [bento](https://bento-tools.readthedocs.io/en/latest/) 🍱 {small}`UC San Diego`. > Bento is an accessible Python toolkit for performing subcellular analysis of spatial transcriptomics data. ### Multimodal integration. - [MUON](https://muon.readthedocs.io/en/latest/) and [MuData](https://mudata.readthedocs.io/en/latest/) {small}`EMBL/ DKFZ`. > MUON, and it's associated data structure MuData are designed to organise, analyse, visualise, and exchange multimodal data.; > MUON enables a range of analyses for ATAC and CITE-seq, from data preprocessing to flexible multi-omics alignment. ### Adaptive immune receptor repertoire (AIRR). - [scirpy](https://github.com/icbi-lab/scirpy) {small}`Medical University of Innsbruck`. > scirpy is a scanpy extension to expore single-cell T-cell receptor (TCR) and B-cell receptor (BCR) repertoires. - [dandelion](https://github.com/zktuong/dandelion) {small}`U",integrat,MatchSource.DOCS,scverse,scanpy,1.10.2,https://github.com/scverse/scanpy/tree/1.10.2/docs/ecosystem.md:1722,integrate,1722,docs/ecosystem.md,https://scanpy.readthedocs.io,https://github.com/scverse/scanpy/tree/1.10.2/docs/ecosystem.md,1,['integrat'],['integrate'],"The ease of combining the system with other systems or components, measured by integration cost and technical risks. Integrability considers the complexity and compatibility of interfaces, including syntactic, semantic, behavioral, and temporal alignment.","
You are an expert in evaluating and categorizing quality attributes in software engineering. You possess the necessary skills to distinguish sentences that clearly relate to a given quality attribute from those that do not. 

Evaluate whether the content accurately aligns with its associated quality attribute, given the context provided. Your goal is to determine if the content makes sense in relation to the quality attribute description or if it is a false positive.

Data:

Quality Attribute: Integrability
Attribute Description: The ease of combining the system with other systems or components, measured by integration cost and technical risks. Integrability considers the complexity and compatibility of interfaces, including syntactic, semantic, behavioral, and temporal alignment.
Content: oject` {small}`Harvard Med`; - [vitessce](https://github.com/vitessce/vitessce#readme) for purely browser based viewing of zarr formatted AnnData files {smaller}`Harvard Med`. ## Portals. - the [Gene Expression Analysis Resource](https://umgear.org/) {small}`U Maryland`; - the [Galaxy Project](https://humancellatlas.usegalaxy.eu) for the Human Cell Atlas [\[tweet\]](https://twitter.com/ExpressionAtlas/status/1151797848469626881) {small}`U Freiburg`; - the [Expression Atlas](https://www.ebi.ac.uk/gxa/sc/help.html) {small}`EMBL-EBI`. ## Modalities. ### RNA velocity. - [scVelo](https://scvelo.org) {small}`Helmholtz Munich`. ### Spatial Transcriptomics Tools. - [squidpy](https://squidpy.readthedocs.io/en/stable/) {small}`Helmholtz Munich`. > Squidpy is a comprehensive toolkit for working with spatial single cell omics data. - [PASTE](https://github.com/raphael-group/paste) {small}`Princeton`. > PASTE is a computational method to align and integrate spatial transcriptomics data across adjacent tissue slices by leveraging both gene expression similarity and spatial distances between spots. - [bento](https://bento-tools.readthedocs.io/en/latest/) 🍱 {small}`UC San Diego`. > Bento is an accessible Python toolkit for performing subcellular analysis of spatial transcriptomics data. ### Multimodal integration. - [MUON](https://muon.readthedocs.io/en/latest/) and [MuData](https://mudata.readthedocs.io/en/latest/) {small}`EMBL/ DKFZ`. > MUON, and it's associated data structure MuData are designed to organise, analyse, visualise, and exchange multimodal data.; > MUON enables a range of analyses for ATAC and CITE-seq, from data preprocessing to flexible multi-omics alignment. ### Adaptive immune receptor repertoire (AIRR). - [scirpy](https://github.com/icbi-lab/scirpy) {small}`Medical University of Innsbruck`. > scirpy is a scanpy extension to expore single-cell T-cell receptor (TCR) and B-cell receptor (BCR) repertoires. - [dandelion](https://github.com/zktuong/dandelion) {small}`U

Instructions: 
1. Analyze the content and the attribute description.
2. Determine if the content accurately reflects the intended quality attribute in this context.
3. If it does, label it as `true_positive: true`; if not, mark it as a `true_positive: false`.
4. If the content consists only of logs with no other text, mark it as a `true_positive: false`. 
4. If the content partially consists of logs, focus on analyzing remaining text. 
5. Add `reasoning` why the content is a true or false positive.
",True,"The content discusses various tools and resources related to genomics data analysis, including RNA velocity tools like scVelo and spatial transcriptomics tools like squidpy. It also mentions computational methods for integrating multimodal data (MUON and MuData) and adaptive immune receptor repertoire analysis tools. These descriptions focus on the integration capabilities of these tools in genomics data analysis, such as combining different datasets or modalities. The attribute description emphasizes the ease of combining systems or components, including technical risks and interface compatibility. While the content provides information about specific tools that likely relate to integrability, it does not directly discuss the technical aspects of how these integrations are achieved, nor does it quantify integration costs or risks. However, given the context, it is reasonable to infer that discussing such tools is related to their integrability in data analysis workflows."
Integrability,"s for gene sets in {func}`~scanpy.pl.heatmap` are now matched to color for cluster {pr}`1511` {smaller}`L Sikkema`; - PCA plots can now annotate axes with variance explained {pr}`1470` {smaller}`bfurtwa`; - Plots with `groupby` arguments can now group by values in the index by passing the index's name (like `pd.DataFrame.groupby`). {pr}`1583` {smaller}`F Ramirez`; - Added `na_color` and `na_in_legend` keyword arguments to {func}`~scanpy.pl.embedding` plots. Allows specifying color for missing or filtered values in plots like {func}`~scanpy.pl.umap` or {func}`~scanpy.pl.spatial` {pr}`1356` {smaller}`I Virshup`; - {func}`~scanpy.pl.embedding` plots now support passing `dict` of `{cluster_name: cluster_color, ...}` for palette argument {pr}`1392` {smaller}`I Virshup`. ```{rubric} External tools (new); ```. - Add [Scanorama](https://github.com/brianhie/scanorama) integration to scanpy external API ({func}`~scanpy.external.pp.scanorama_integrate`, {cite:t}`Hie2019`) {pr}`1332` {smaller}`B Hie`; - Scrublet {cite:p}`Wolock2019` integration: {func}`~scanpy.pp.scrublet`, {func}`~scanpy.pp.scrublet_simulate_doublets`, and plotting method {func}`~scanpy.pl.scrublet_score_distribution` {pr}`1476` {smaller}`J Manning`; - {func}`~scanpy.external.pp.hashsolo` for HTO demultiplexing {cite:p}`Bernstein2020` {pr}`1432` {smaller}`NJ Bernstein`; - Added [scirpy](https://github.com/icbi-lab/scirpy) (sc-AIRR analysis) to ecosystem page {pr}`1453` {smaller}`G Sturm`; - Added [scvi-tools](https://scvi-tools.org) to ecosystem page {pr}`1421` {smaller}`A Gayoso`. ```{rubric} External tools (changes); ```. - Updates for {func}`~scanpy.external.tl.palantir` and {func}`~scanpy.external.tl.palantir_results` {pr}`1245` {smaller}`A Mousa`; - Fixes to {func}`~scanpy.external.tl.harmony_timeseries` docs {pr}`1248` {smaller}`A Mousa`; - Support for `leiden` clustering by {func}`scanpy.external.tl.phenograph` {pr}`1080` {smaller}`A Mousa`; - Deprecate `scanpy.external.pp.scvi` {pr}`1554` {smaller}`G X",integrat,MatchSource.DOCS,scverse,scanpy,1.10.2,https://github.com/scverse/scanpy/tree/1.10.2/docs/release-notes/1.7.0.md:1774,integration,1774,docs/release-notes/1.7.0.md,https://scanpy.readthedocs.io,https://github.com/scverse/scanpy/tree/1.10.2/docs/release-notes/1.7.0.md,1,['integrat'],['integration'],"The ease of combining the system with other systems or components, measured by integration cost and technical risks. Integrability considers the complexity and compatibility of interfaces, including syntactic, semantic, behavioral, and temporal alignment.","
You are an expert in evaluating and categorizing quality attributes in software engineering. You possess the necessary skills to distinguish sentences that clearly relate to a given quality attribute from those that do not. 

Evaluate whether the content accurately aligns with its associated quality attribute, given the context provided. Your goal is to determine if the content makes sense in relation to the quality attribute description or if it is a false positive.

Data:

Quality Attribute: Integrability
Attribute Description: The ease of combining the system with other systems or components, measured by integration cost and technical risks. Integrability considers the complexity and compatibility of interfaces, including syntactic, semantic, behavioral, and temporal alignment.
Content: s for gene sets in {func}`~scanpy.pl.heatmap` are now matched to color for cluster {pr}`1511` {smaller}`L Sikkema`; - PCA plots can now annotate axes with variance explained {pr}`1470` {smaller}`bfurtwa`; - Plots with `groupby` arguments can now group by values in the index by passing the index's name (like `pd.DataFrame.groupby`). {pr}`1583` {smaller}`F Ramirez`; - Added `na_color` and `na_in_legend` keyword arguments to {func}`~scanpy.pl.embedding` plots. Allows specifying color for missing or filtered values in plots like {func}`~scanpy.pl.umap` or {func}`~scanpy.pl.spatial` {pr}`1356` {smaller}`I Virshup`; - {func}`~scanpy.pl.embedding` plots now support passing `dict` of `{cluster_name: cluster_color, ...}` for palette argument {pr}`1392` {smaller}`I Virshup`. ```{rubric} External tools (new); ```. - Add [Scanorama](https://github.com/brianhie/scanorama) integration to scanpy external API ({func}`~scanpy.external.pp.scanorama_integrate`, {cite:t}`Hie2019`) {pr}`1332` {smaller}`B Hie`; - Scrublet {cite:p}`Wolock2019` integration: {func}`~scanpy.pp.scrublet`, {func}`~scanpy.pp.scrublet_simulate_doublets`, and plotting method {func}`~scanpy.pl.scrublet_score_distribution` {pr}`1476` {smaller}`J Manning`; - {func}`~scanpy.external.pp.hashsolo` for HTO demultiplexing {cite:p}`Bernstein2020` {pr}`1432` {smaller}`NJ Bernstein`; - Added [scirpy](https://github.com/icbi-lab/scirpy) (sc-AIRR analysis) to ecosystem page {pr}`1453` {smaller}`G Sturm`; - Added [scvi-tools](https://scvi-tools.org) to ecosystem page {pr}`1421` {smaller}`A Gayoso`. ```{rubric} External tools (changes); ```. - Updates for {func}`~scanpy.external.tl.palantir` and {func}`~scanpy.external.tl.palantir_results` {pr}`1245` {smaller}`A Mousa`; - Fixes to {func}`~scanpy.external.tl.harmony_timeseries` docs {pr}`1248` {smaller}`A Mousa`; - Support for `leiden` clustering by {func}`scanpy.external.tl.phenograph` {pr}`1080` {smaller}`A Mousa`; - Deprecate `scanpy.external.pp.scvi` {pr}`1554` {smaller}`G X

Instructions: 
1. Analyze the content and the attribute description.
2. Determine if the content accurately reflects the intended quality attribute in this context.
3. If it does, label it as `true_positive: true`; if not, mark it as a `true_positive: false`.
4. If the content consists only of logs with no other text, mark it as a `true_positive: false`. 
4. If the content partially consists of logs, focus on analyzing remaining text. 
5. Add `reasoning` why the content is a true or false positive.
",True,"The content provided discusses updates and features in scanpy such as new functionalities for integration with other tools and components, including Scrublet, Scanorama, scirpy, scvi-tools, and others. This aligns with the concept of integrability, which involves combining systems or components seamlessly. The description mentions technical enhancements that facilitate integration, supporting compatibility and reducing integration costs. Therefore, this content accurately reflects the quality attribute of integrability."
Integrability,"s/data_processing) {small}`UC Irvine`. > Swan is a Python library designed for the analysis and visualization of transcriptomes, especially with long-read transcriptomes in mind.; > Users can add transcriptomes from different datasets and explore distinct splicing and expression patterns across datasets. ## Analysis methods. ### scvi-tools. - [scvi-tools](https://github.com/YosefLab/scvi-tools) {small}`Berkeley`. > scvi-tools hosts deep generative models (DGM) for end-to-end analysis of single-cell; > omics data (e.g., scVI, scANVI, totalVI). It also contains several primitives to build novel DGMs. ### Fate mapping. - [CellRank](https://cellrank.org) {small}`Helmholtz Munich`. > CellRank is a framework to uncover cellular dynamics based on single-cell data.; > It incorporates modalities such as RNA velocity, pseudotime, developmental potential, real-time information, etc. ### Differential expression. - [diffxpy](https://github.com/theislab/diffxpy) {small}`Helmholtz Munich`. ### Data integration. - [scanaroma](https://github.com/brianhie/scanorama) {small}`MIT`. ### Modeling perturbations. - [scGen](https://github.com/theislab/scgen) / [trVAE](https://github.com/theislab/trvae) {small}`Helmholtz Munich`. ### Feature selection. - [triku 🦔](https://gitlab.com/alexmascension/triku) {small}`Biodonostia Health Research Institute`; - [CIARA](https://github.com/ScialdoneLab/CIARA_python) {small}`Helmholtz Munich`. > CIARA is an algorithm for feature selection, that aims for the identification of rare cell types via scRNA-Seq data in scanpy. ### Annotation/ Enrichment Analysis. Analyses using curated prior knowledge. - [decoupler](https://github.com/saezlab/decoupler-py) is a collection of footprint enrichment methods that allows to infer transcription factor or pathway activities. {small}`Institute for Computational Biomedicine, Heidelberg University`; - [Cubé](https://github.com/connerlambden/Cube) {small}`Harvard University`. > Intuitive Nonparametric Gene Network Search",integrat,MatchSource.DOCS,scverse,scanpy,1.10.2,https://github.com/scverse/scanpy/tree/1.10.2/docs/ecosystem.md:3986,integration,3986,docs/ecosystem.md,https://scanpy.readthedocs.io,https://github.com/scverse/scanpy/tree/1.10.2/docs/ecosystem.md,1,['integrat'],['integration'],"The ease of combining the system with other systems or components, measured by integration cost and technical risks. Integrability considers the complexity and compatibility of interfaces, including syntactic, semantic, behavioral, and temporal alignment.","
You are an expert in evaluating and categorizing quality attributes in software engineering. You possess the necessary skills to distinguish sentences that clearly relate to a given quality attribute from those that do not. 

Evaluate whether the content accurately aligns with its associated quality attribute, given the context provided. Your goal is to determine if the content makes sense in relation to the quality attribute description or if it is a false positive.

Data:

Quality Attribute: Integrability
Attribute Description: The ease of combining the system with other systems or components, measured by integration cost and technical risks. Integrability considers the complexity and compatibility of interfaces, including syntactic, semantic, behavioral, and temporal alignment.
Content: s/data_processing) {small}`UC Irvine`. > Swan is a Python library designed for the analysis and visualization of transcriptomes, especially with long-read transcriptomes in mind.; > Users can add transcriptomes from different datasets and explore distinct splicing and expression patterns across datasets. ## Analysis methods. ### scvi-tools. - [scvi-tools](https://github.com/YosefLab/scvi-tools) {small}`Berkeley`. > scvi-tools hosts deep generative models (DGM) for end-to-end analysis of single-cell; > omics data (e.g., scVI, scANVI, totalVI). It also contains several primitives to build novel DGMs. ### Fate mapping. - [CellRank](https://cellrank.org) {small}`Helmholtz Munich`. > CellRank is a framework to uncover cellular dynamics based on single-cell data.; > It incorporates modalities such as RNA velocity, pseudotime, developmental potential, real-time information, etc. ### Differential expression. - [diffxpy](https://github.com/theislab/diffxpy) {small}`Helmholtz Munich`. ### Data integration. - [scanaroma](https://github.com/brianhie/scanorama) {small}`MIT`. ### Modeling perturbations. - [scGen](https://github.com/theislab/scgen) / [trVAE](https://github.com/theislab/trvae) {small}`Helmholtz Munich`. ### Feature selection. - [triku 🦔](https://gitlab.com/alexmascension/triku) {small}`Biodonostia Health Research Institute`; - [CIARA](https://github.com/ScialdoneLab/CIARA_python) {small}`Helmholtz Munich`. > CIARA is an algorithm for feature selection, that aims for the identification of rare cell types via scRNA-Seq data in scanpy. ### Annotation/ Enrichment Analysis. Analyses using curated prior knowledge. - [decoupler](https://github.com/saezlab/decoupler-py) is a collection of footprint enrichment methods that allows to infer transcription factor or pathway activities. {small}`Institute for Computational Biomedicine, Heidelberg University`; - [Cubé](https://github.com/connerlambden/Cube) {small}`Harvard University`. > Intuitive Nonparametric Gene Network Search

Instructions: 
1. Analyze the content and the attribute description.
2. Determine if the content accurately reflects the intended quality attribute in this context.
3. If it does, label it as `true_positive: true`; if not, mark it as a `true_positive: false`.
4. If the content consists only of logs with no other text, mark it as a `true_positive: false`. 
4. If the content partially consists of logs, focus on analyzing remaining text. 
5. Add `reasoning` why the content is a true or false positive.
",False,"Content discusses various tools and libraries related to transcriptome analysis, data integration, and feature selection in computational biology. The attribute 'Integrability' refers specifically to how well systems can be combined (e.g., through interfaces). However, this content is more about functionalities of specific software tools rather than the ease or difficulty of integrating different components or systems. Therefore, it does not align with the quality attribute of integrability."
Integrability,"sics.html) on the topic. We highly recommend using [Test Driven Development](https://en.wikipedia.org/wiki/Test-driven_development) when contributing code.; This not only ensures you have tests written, it often makes implementation easier since you start out with a specification for your function. Consider parameterizing your tests using the `pytest.mark.parameterize` and `pytest.fixture` decorators.; Documentation on these can be found [here](https://docs.pytest.org/en/stable/fixture.html), but we'd also recommend searching our test suite for existing usage. ### What to test. If you're not sure what to tests about your function, some ideas include:. - Are there arguments which conflict with each other? Check that if they are both passed, the function throws an error (see `pytest.raises` [in the pytest docs](https://docs.pytest.org/en/stable/assert.html#assertions-about-expected-exceptions).; - Are there input values which should cause your function to error?; - Did you add a helpful error message that recommends better outputs? Check that that error message is actually thrown.; - Can you place bounds on the values returned by your function?; - Are there different input values which should generate equivalent output (e.g. if an array is sparse or dense)?; - Do you have arguments which should have orthogonal effects on the output? Check that they are independent. For example, if there is a flag for extended output, the base output should remain the same either way.; - Are you optimizing a method? Check that it's results are the same as a gold standard implementation. ### Performance. It's more important that you're accurately testing the code works than it is that test suite runs quickly.; That said, it's nice when the test suite runs fast. You can check how long tests take to run by passing `--durations=0` argument to `pytest`.; Hopefully your new tests won't show up on top!; Some approaches to this include:. - Is there a common setup/ computation happening in each",message,MatchSource.DOCS,scverse,scanpy,1.10.2,https://github.com/scverse/scanpy/tree/1.10.2/docs/dev/testing.md:2437,message,2437,docs/dev/testing.md,https://scanpy.readthedocs.io,https://github.com/scverse/scanpy/tree/1.10.2/docs/dev/testing.md,2,['message'],['message'],"The ease of combining the system with other systems or components, measured by integration cost and technical risks. Integrability considers the complexity and compatibility of interfaces, including syntactic, semantic, behavioral, and temporal alignment.","
You are an expert in evaluating and categorizing quality attributes in software engineering. You possess the necessary skills to distinguish sentences that clearly relate to a given quality attribute from those that do not. 

Evaluate whether the content accurately aligns with its associated quality attribute, given the context provided. Your goal is to determine if the content makes sense in relation to the quality attribute description or if it is a false positive.

Data:

Quality Attribute: Integrability
Attribute Description: The ease of combining the system with other systems or components, measured by integration cost and technical risks. Integrability considers the complexity and compatibility of interfaces, including syntactic, semantic, behavioral, and temporal alignment.
Content: sics.html) on the topic. We highly recommend using [Test Driven Development](https://en.wikipedia.org/wiki/Test-driven_development) when contributing code.; This not only ensures you have tests written, it often makes implementation easier since you start out with a specification for your function. Consider parameterizing your tests using the `pytest.mark.parameterize` and `pytest.fixture` decorators.; Documentation on these can be found [here](https://docs.pytest.org/en/stable/fixture.html), but we'd also recommend searching our test suite for existing usage. ### What to test. If you're not sure what to tests about your function, some ideas include:. - Are there arguments which conflict with each other? Check that if they are both passed, the function throws an error (see `pytest.raises` [in the pytest docs](https://docs.pytest.org/en/stable/assert.html#assertions-about-expected-exceptions).; - Are there input values which should cause your function to error?; - Did you add a helpful error message that recommends better outputs? Check that that error message is actually thrown.; - Can you place bounds on the values returned by your function?; - Are there different input values which should generate equivalent output (e.g. if an array is sparse or dense)?; - Do you have arguments which should have orthogonal effects on the output? Check that they are independent. For example, if there is a flag for extended output, the base output should remain the same either way.; - Are you optimizing a method? Check that it's results are the same as a gold standard implementation. ### Performance. It's more important that you're accurately testing the code works than it is that test suite runs quickly.; That said, it's nice when the test suite runs fast. You can check how long tests take to run by passing `--durations=0` argument to `pytest`.; Hopefully your new tests won't show up on top!; Some approaches to this include:. - Is there a common setup/ computation happening in each

Instructions: 
1. Analyze the content and the attribute description.
2. Determine if the content accurately reflects the intended quality attribute in this context.
3. If it does, label it as `true_positive: true`; if not, mark it as a `true_positive: false`.
4. If the content consists only of logs with no other text, mark it as a `true_positive: false`. 
4. If the content partially consists of logs, focus on analyzing remaining text. 
5. Add `reasoning` why the content is a true or false positive.
",True,"The content discusses Test Driven Development and pytest fixtures, which are about writing tests before implementation to ensure integrability. It also talks about testing different aspects of a function, including error handling and parameterization. This contributes to ensuring that the system can be integrated with other components when it's developed. Therefore, this content is relevant to Integrability."
Integrability,"y the location of colorbar legend, or pass `None` to not show a colorbar {pr}`1821` {smaller}`A Schaar` {smaller}`I Virshup`; - Embedding plots now have a `dimensions` argument, which lets users select which dimensions of their embedding to plot and uses the same broadcasting rules as other arguments {pr}`1538` {smaller}`I Virshup`; - {func}`~scanpy.logging.print_versions` now uses `session_info` {pr}`2089` {smaller}`P Angerer` {smaller}`I Virshup`. ```{rubric} Ecosystem; ```. Multiple packages have been added to our ecosystem page, including:. - [decoupler](https://github.com/saezlab/decoupler-py) a for footprint analysis and pathway enrichement {pr}`2186` {smaller}`PB Mompel`; - [dandelion](https://github.com/zktuong/dandelion) for B-cell receptor analysis {pr}`1953` {smaller}`Z Tuong`; - [CIARA](https://github.com/ScialdoneLab/CIARA_python) a feature selection tools for identifying rare cell types {pr}`2175` {smaller}`M Stock`. ```{rubric} Bug fixes; ```. - Fixed finding variables with `use_raw=True` and `basis=None` in {func}`scanpy.pl.scatter` {pr}`2027` {smaller}`E Rice`; - Fixed {func}`scanpy.pp.scrublet` to address {issue}`1957` {smaller}`FlMai` and ensure raw counts are used for simulation; - Functions in {mod}`scanpy.datasets` no longer throw `OldFormatWarnings` when using `anndata` `0.8` {pr}`2096` {smaller}`I Virshup`; - Fixed use of {func}`scanpy.pp.neighbors` with `method='rapids'`: RAPIDS cuML no longer returns a squared Euclidean distance matrix, so we should not square-root the kNN distance matrix. {pr}`1828` {smaller}`M Zaslavsky`; - Removed `pytables` dependency by implementing `read_10x_h5` with `h5py` due to installation errors on Windows {pr}`2064`; - Fixed bug in {func}`scanpy.external.pp.hashsolo` where default value was set improperly {pr}`2190` {smaller}`B Reiz`; - Fixed bug in {func}`scanpy.pl.embedding` functions where an error could be raised when there were missing values and large numbers of categories {pr}`2187` {smaller}`I Virshup`; ",depend,MatchSource.DOCS,scverse,scanpy,1.10.2,https://github.com/scverse/scanpy/tree/1.10.2/docs/release-notes/1.9.0.md:3780,dependency,3780,docs/release-notes/1.9.0.md,https://scanpy.readthedocs.io,https://github.com/scverse/scanpy/tree/1.10.2/docs/release-notes/1.9.0.md,1,['depend'],['dependency'],"The ease of combining the system with other systems or components, measured by integration cost and technical risks. Integrability considers the complexity and compatibility of interfaces, including syntactic, semantic, behavioral, and temporal alignment.","
You are an expert in evaluating and categorizing quality attributes in software engineering. You possess the necessary skills to distinguish sentences that clearly relate to a given quality attribute from those that do not. 

Evaluate whether the content accurately aligns with its associated quality attribute, given the context provided. Your goal is to determine if the content makes sense in relation to the quality attribute description or if it is a false positive.

Data:

Quality Attribute: Integrability
Attribute Description: The ease of combining the system with other systems or components, measured by integration cost and technical risks. Integrability considers the complexity and compatibility of interfaces, including syntactic, semantic, behavioral, and temporal alignment.
Content: y the location of colorbar legend, or pass `None` to not show a colorbar {pr}`1821` {smaller}`A Schaar` {smaller}`I Virshup`; - Embedding plots now have a `dimensions` argument, which lets users select which dimensions of their embedding to plot and uses the same broadcasting rules as other arguments {pr}`1538` {smaller}`I Virshup`; - {func}`~scanpy.logging.print_versions` now uses `session_info` {pr}`2089` {smaller}`P Angerer` {smaller}`I Virshup`. ```{rubric} Ecosystem; ```. Multiple packages have been added to our ecosystem page, including:. - [decoupler](https://github.com/saezlab/decoupler-py) a for footprint analysis and pathway enrichement {pr}`2186` {smaller}`PB Mompel`; - [dandelion](https://github.com/zktuong/dandelion) for B-cell receptor analysis {pr}`1953` {smaller}`Z Tuong`; - [CIARA](https://github.com/ScialdoneLab/CIARA_python) a feature selection tools for identifying rare cell types {pr}`2175` {smaller}`M Stock`. ```{rubric} Bug fixes; ```. - Fixed finding variables with `use_raw=True` and `basis=None` in {func}`scanpy.pl.scatter` {pr}`2027` {smaller}`E Rice`; - Fixed {func}`scanpy.pp.scrublet` to address {issue}`1957` {smaller}`FlMai` and ensure raw counts are used for simulation; - Functions in {mod}`scanpy.datasets` no longer throw `OldFormatWarnings` when using `anndata` `0.8` {pr}`2096` {smaller}`I Virshup`; - Fixed use of {func}`scanpy.pp.neighbors` with `method='rapids'`: RAPIDS cuML no longer returns a squared Euclidean distance matrix, so we should not square-root the kNN distance matrix. {pr}`1828` {smaller}`M Zaslavsky`; - Removed `pytables` dependency by implementing `read_10x_h5` with `h5py` due to installation errors on Windows {pr}`2064`; - Fixed bug in {func}`scanpy.external.pp.hashsolo` where default value was set improperly {pr}`2190` {smaller}`B Reiz`; - Fixed bug in {func}`scanpy.pl.embedding` functions where an error could be raised when there were missing values and large numbers of categories {pr}`2187` {smaller}`I Virshup`; 

Instructions: 
1. Analyze the content and the attribute description.
2. Determine if the content accurately reflects the intended quality attribute in this context.
3. If it does, label it as `true_positive: true`; if not, mark it as a `true_positive: false`.
4. If the content consists only of logs with no other text, mark it as a `true_positive: false`. 
4. If the content partially consists of logs, focus on analyzing remaining text. 
5. Add `reasoning` why the content is a true or false positive.
",False,"The content provided lists updates and bug fixes in various packages, including adding new packages to the ecosystem. It also mentions feature selections and tools. While this information is relevant to the overall system's capabilities and user experience, it does not directly relate to the specific quality attribute of integrability. Integrability concerns the ease of combining systems or components, focusing on interfaces, technical risks, and integration cost. The content here discusses updates, bug fixes, and new features but doesn't address how these changes affect the system's ability to integrate with others or improve its integration properties. Therefore, this content does not accurately reflect the quality attribute of integrability."
Modifiability," bugfix release) or releases (in case of a major/minor release).; For bugfix releases, this should have `on-merge: backport to 0.<minor>.x`,; so the [meeseeksdev][] bot will create a backport PR. See {doc}`versioning` for more info.; - Clear out and close the milestone you just made a release for. After a *major* or *minor* release has been made:. - Tweet about it! Announce it on Zulip! Announce it on Discourse! Think about making a bot for this! Maybe actually do that?; - Create a new release notes file for the next minor release. This should only be added to the dev branch.; - Tag the development branch. If you just released `1.7.0`, this would be `1.8.0.dev0`.; - Create a new branch for this release series, like `1.7.x`. This should get a new release notes file. [meeseeksdev]: https://meeseeksbox.github.io. ## Debugging the build process. If you changed something about the build process (e.g. [Hatchling’s build configuration][hatch-build]),; or something about the package’s structure,; you might want to manually check if the build and upload process behaves as expected:. ```shell; # Clear out old distributions; rm -r dist. # Build source distribution and wheel both; python -m build. # Now check those build artifacts; twine check dist/*. # List the wheel archive’s contents; bsdtar -tf dist/*.whl. ```. You can also upload the package to <test.pypi.org> ([tutorial][testpypi tutorial]). [testpypi tutorial]: https://packaging.python.org/en/latest/tutorials/packaging-projects/#uploading-the-distribution-archives. ```; twine upload --repository testpypi dist/*; ```. The above approximates what the [publish workflow][] does automatically for us.; If you want to replicate the process more exactly, make sure you are careful,; and create a version tag before building (make sure you delete it after uploading to TestPyPI!). [hatch-build]: https://hatch.pypa.io/latest/config/build/; [publish workflow]: https://github.com/scverse/scanpy/tree/main/.github/workflows/publish.yml; ",config,MatchSource.DOCS,scverse,scanpy,1.10.2,https://github.com/scverse/scanpy/tree/1.10.2/docs/dev/release.md:2756,config,2756,docs/dev/release.md,https://scanpy.readthedocs.io,https://github.com/scverse/scanpy/tree/1.10.2/docs/dev/release.md,1,['config'],['config'],"The ease with which the system can be adapted by adding, removing, or modifying features, or adjusting to new environments. This attribute involves assessing the time, cost, and impact of changes, considering factors like coupling, cohesion, and the scope of modifications.","
You are an expert in evaluating and categorizing quality attributes in software engineering. You possess the necessary skills to distinguish sentences that clearly relate to a given quality attribute from those that do not. 

Evaluate whether the content accurately aligns with its associated quality attribute, given the context provided. Your goal is to determine if the content makes sense in relation to the quality attribute description or if it is a false positive.

Data:

Quality Attribute: Modifiability
Attribute Description: The ease with which the system can be adapted by adding, removing, or modifying features, or adjusting to new environments. This attribute involves assessing the time, cost, and impact of changes, considering factors like coupling, cohesion, and the scope of modifications.
Content:  bugfix release) or releases (in case of a major/minor release).; For bugfix releases, this should have `on-merge: backport to 0.<minor>.x`,; so the [meeseeksdev][] bot will create a backport PR. See {doc}`versioning` for more info.; - Clear out and close the milestone you just made a release for. After a *major* or *minor* release has been made:. - Tweet about it! Announce it on Zulip! Announce it on Discourse! Think about making a bot for this! Maybe actually do that?; - Create a new release notes file for the next minor release. This should only be added to the dev branch.; - Tag the development branch. If you just released `1.7.0`, this would be `1.8.0.dev0`.; - Create a new branch for this release series, like `1.7.x`. This should get a new release notes file. [meeseeksdev]: https://meeseeksbox.github.io. ## Debugging the build process. If you changed something about the build process (e.g. [Hatchling’s build configuration][hatch-build]),; or something about the package’s structure,; you might want to manually check if the build and upload process behaves as expected:. ```shell; # Clear out old distributions; rm -r dist. # Build source distribution and wheel both; python -m build. # Now check those build artifacts; twine check dist/*. # List the wheel archive’s contents; bsdtar -tf dist/*.whl. ```. You can also upload the package to <test.pypi.org> ([tutorial][testpypi tutorial]). [testpypi tutorial]: https://packaging.python.org/en/latest/tutorials/packaging-projects/#uploading-the-distribution-archives. ```; twine upload --repository testpypi dist/*; ```. The above approximates what the [publish workflow][] does automatically for us.; If you want to replicate the process more exactly, make sure you are careful,; and create a version tag before building (make sure you delete it after uploading to TestPyPI!). [hatch-build]: https://hatch.pypa.io/latest/config/build/; [publish workflow]: https://github.com/scverse/scanpy/tree/main/.github/workflows/publish.yml; 

Instructions: 
1. Analyze the content and the attribute description.
2. Determine if the content accurately reflects the intended quality attribute in this context.
3. If it does, label it as `true_positive: true`; if not, mark it as a `true_positive: false`.
4. If the content consists only of logs with no other text, mark it as a `true_positive: false`. 
4. If the content partially consists of logs, focus on analyzing remaining text. 
5. Add `reasoning` why the content is a true or false positive.
",True,"The provided content discusses version control and release processes, such as creating bugfix releases, tagging branches, and uploading to TestPyPI. These activities are related to software modifiability because they involve adapting the system by adding or modifying features and adjusting to new environments. For example, when a bug is fixed and released, it demonstrates the ease with which changes can be made and propagated through the system. Therefore, this content aligns with the quality attribute of Modifiability."
Modifiability," in `sc.pl`:. ```; sc.pl.umap(adata, **plotting_params); ```. If you pass `show=False`, a {class}`~matplotlib.axes.Axes` instance is returned; and you have all of matplotlib's detailed configuration possibilities. To facilitate writing memory-efficient pipelines, by default,; Scanpy tools operate *inplace* on `adata` and return `None` –; this also allows to easily transition to [out-of-memory pipelines].; If you want to return a copy of the {class}`~anndata.AnnData` object; and leave the passed `adata` unchanged, pass `copy=True` or `inplace=False`. ## AnnData. Scanpy is based on {mod}`anndata`, which provides the {class}`~anndata.AnnData` class. ```{image} https://falexwolf.de/img/scanpy/anndata.svg; :width: 300px; ```. At the most basic level, an {class}`~anndata.AnnData` object `adata` stores; a data matrix `adata.X`, annotation of observations; `adata.obs` and variables `adata.var` as `pd.DataFrame` and unstructured; annotation `adata.uns` as `dict`. Names of observations and; variables can be accessed via `adata.obs_names` and `adata.var_names`,; respectively. {class}`~anndata.AnnData` objects can be sliced like; dataframes, for example, `adata_subset = adata[:, list_of_gene_names]`.; For more, see this [blog post]. To read a data file to an {class}`~anndata.AnnData` object, call:. ```; adata = sc.read(filename); ```. to initialize an {class}`~anndata.AnnData` object. Possibly add further annotation using, e.g., `pd.read_csv`:. ```; import pandas as pd; anno = pd.read_csv(filename_sample_annotation); adata.obs['cell_groups'] = anno['cell_groups'] # categorical annotation of type pandas.Categorical; adata.obs['time'] = anno['time'] # numerical annotation of type float; # alternatively, you could also set the whole dataframe; # adata.obs = anno; ```. To write, use:. ```; adata.write(filename); adata.write_csvs(filename); adata.write_loom(filename); ```. [blog post]: https://falexwolf.de/blog/171223_AnnData_indexing_views_HDF5-backing/; [matplotlib]: https://matplo",variab,MatchSource.DOCS,scverse,scanpy,1.10.2,https://github.com/scverse/scanpy/tree/1.10.2/docs/usage-principles.md:1528,variables,1528,docs/usage-principles.md,https://scanpy.readthedocs.io,https://github.com/scverse/scanpy/tree/1.10.2/docs/usage-principles.md,1,['variab'],['variables'],"The ease with which the system can be adapted by adding, removing, or modifying features, or adjusting to new environments. This attribute involves assessing the time, cost, and impact of changes, considering factors like coupling, cohesion, and the scope of modifications.","
You are an expert in evaluating and categorizing quality attributes in software engineering. You possess the necessary skills to distinguish sentences that clearly relate to a given quality attribute from those that do not. 

Evaluate whether the content accurately aligns with its associated quality attribute, given the context provided. Your goal is to determine if the content makes sense in relation to the quality attribute description or if it is a false positive.

Data:

Quality Attribute: Modifiability
Attribute Description: The ease with which the system can be adapted by adding, removing, or modifying features, or adjusting to new environments. This attribute involves assessing the time, cost, and impact of changes, considering factors like coupling, cohesion, and the scope of modifications.
Content:  in `sc.pl`:. ```; sc.pl.umap(adata, **plotting_params); ```. If you pass `show=False`, a {class}`~matplotlib.axes.Axes` instance is returned; and you have all of matplotlib's detailed configuration possibilities. To facilitate writing memory-efficient pipelines, by default,; Scanpy tools operate *inplace* on `adata` and return `None` –; this also allows to easily transition to [out-of-memory pipelines].; If you want to return a copy of the {class}`~anndata.AnnData` object; and leave the passed `adata` unchanged, pass `copy=True` or `inplace=False`. ## AnnData. Scanpy is based on {mod}`anndata`, which provides the {class}`~anndata.AnnData` class. ```{image} https://falexwolf.de/img/scanpy/anndata.svg; :width: 300px; ```. At the most basic level, an {class}`~anndata.AnnData` object `adata` stores; a data matrix `adata.X`, annotation of observations; `adata.obs` and variables `adata.var` as `pd.DataFrame` and unstructured; annotation `adata.uns` as `dict`. Names of observations and; variables can be accessed via `adata.obs_names` and `adata.var_names`,; respectively. {class}`~anndata.AnnData` objects can be sliced like; dataframes, for example, `adata_subset = adata[:, list_of_gene_names]`.; For more, see this [blog post]. To read a data file to an {class}`~anndata.AnnData` object, call:. ```; adata = sc.read(filename); ```. to initialize an {class}`~anndata.AnnData` object. Possibly add further annotation using, e.g., `pd.read_csv`:. ```; import pandas as pd; anno = pd.read_csv(filename_sample_annotation); adata.obs['cell_groups'] = anno['cell_groups'] # categorical annotation of type pandas.Categorical; adata.obs['time'] = anno['time'] # numerical annotation of type float; # alternatively, you could also set the whole dataframe; # adata.obs = anno; ```. To write, use:. ```; adata.write(filename); adata.write_csvs(filename); adata.write_loom(filename); ```. [blog post]: https://falexwolf.de/blog/171223_AnnData_indexing_views_HDF5-backing/; [matplotlib]: https://matplo

Instructions: 
1. Analyze the content and the attribute description.
2. Determine if the content accurately reflects the intended quality attribute in this context.
3. If it does, label it as `true_positive: true`; if not, mark it as a `true_positive: false`.
4. If the content consists only of logs with no other text, mark it as a `true_positive: false`. 
4. If the content partially consists of logs, focus on analyzing remaining text. 
5. Add `reasoning` why the content is a true or false positive.
",False,"The content provided discusses how to manipulate and utilize an AnnData object in Scanpy, including operations like slicing, reading data, adding annotations, and writing files. It also mentions configuration options for plotting. While this information is technical, it does not directly address modifiability or the ease of adapting the system. Modifiability typically concerns the ability to modify the codebase, add/remove features, or adapt to new environments, which involves factors like coupling and cohesion. The content here is more about data manipulation and usage rather than software system modifications. Therefore, it does not accurately reflect modifiability."
Modifiability," observations (cells) of *n_vars* variables (genes).; For each tool, there typically is an associated plotting function in `sc.pl`:. ```; sc.pl.umap(adata, **plotting_params); ```. If you pass `show=False`, a {class}`~matplotlib.axes.Axes` instance is returned; and you have all of matplotlib's detailed configuration possibilities. To facilitate writing memory-efficient pipelines, by default,; Scanpy tools operate *inplace* on `adata` and return `None` –; this also allows to easily transition to [out-of-memory pipelines].; If you want to return a copy of the {class}`~anndata.AnnData` object; and leave the passed `adata` unchanged, pass `copy=True` or `inplace=False`. ## AnnData. Scanpy is based on {mod}`anndata`, which provides the {class}`~anndata.AnnData` class. ```{image} https://falexwolf.de/img/scanpy/anndata.svg; :width: 300px; ```. At the most basic level, an {class}`~anndata.AnnData` object `adata` stores; a data matrix `adata.X`, annotation of observations; `adata.obs` and variables `adata.var` as `pd.DataFrame` and unstructured; annotation `adata.uns` as `dict`. Names of observations and; variables can be accessed via `adata.obs_names` and `adata.var_names`,; respectively. {class}`~anndata.AnnData` objects can be sliced like; dataframes, for example, `adata_subset = adata[:, list_of_gene_names]`.; For more, see this [blog post]. To read a data file to an {class}`~anndata.AnnData` object, call:. ```; adata = sc.read(filename); ```. to initialize an {class}`~anndata.AnnData` object. Possibly add further annotation using, e.g., `pd.read_csv`:. ```; import pandas as pd; anno = pd.read_csv(filename_sample_annotation); adata.obs['cell_groups'] = anno['cell_groups'] # categorical annotation of type pandas.Categorical; adata.obs['time'] = anno['time'] # numerical annotation of type float; # alternatively, you could also set the whole dataframe; # adata.obs = anno; ```. To write, use:. ```; adata.write(filename); adata.write_csvs(filename); adata.write_loom(filename",variab,MatchSource.DOCS,scverse,scanpy,1.10.2,https://github.com/scverse/scanpy/tree/1.10.2/docs/usage-principles.md:1409,variables,1409,docs/usage-principles.md,https://scanpy.readthedocs.io,https://github.com/scverse/scanpy/tree/1.10.2/docs/usage-principles.md,1,['variab'],['variables'],"The ease with which the system can be adapted by adding, removing, or modifying features, or adjusting to new environments. This attribute involves assessing the time, cost, and impact of changes, considering factors like coupling, cohesion, and the scope of modifications.","
You are an expert in evaluating and categorizing quality attributes in software engineering. You possess the necessary skills to distinguish sentences that clearly relate to a given quality attribute from those that do not. 

Evaluate whether the content accurately aligns with its associated quality attribute, given the context provided. Your goal is to determine if the content makes sense in relation to the quality attribute description or if it is a false positive.

Data:

Quality Attribute: Modifiability
Attribute Description: The ease with which the system can be adapted by adding, removing, or modifying features, or adjusting to new environments. This attribute involves assessing the time, cost, and impact of changes, considering factors like coupling, cohesion, and the scope of modifications.
Content:  observations (cells) of *n_vars* variables (genes).; For each tool, there typically is an associated plotting function in `sc.pl`:. ```; sc.pl.umap(adata, **plotting_params); ```. If you pass `show=False`, a {class}`~matplotlib.axes.Axes` instance is returned; and you have all of matplotlib's detailed configuration possibilities. To facilitate writing memory-efficient pipelines, by default,; Scanpy tools operate *inplace* on `adata` and return `None` –; this also allows to easily transition to [out-of-memory pipelines].; If you want to return a copy of the {class}`~anndata.AnnData` object; and leave the passed `adata` unchanged, pass `copy=True` or `inplace=False`. ## AnnData. Scanpy is based on {mod}`anndata`, which provides the {class}`~anndata.AnnData` class. ```{image} https://falexwolf.de/img/scanpy/anndata.svg; :width: 300px; ```. At the most basic level, an {class}`~anndata.AnnData` object `adata` stores; a data matrix `adata.X`, annotation of observations; `adata.obs` and variables `adata.var` as `pd.DataFrame` and unstructured; annotation `adata.uns` as `dict`. Names of observations and; variables can be accessed via `adata.obs_names` and `adata.var_names`,; respectively. {class}`~anndata.AnnData` objects can be sliced like; dataframes, for example, `adata_subset = adata[:, list_of_gene_names]`.; For more, see this [blog post]. To read a data file to an {class}`~anndata.AnnData` object, call:. ```; adata = sc.read(filename); ```. to initialize an {class}`~anndata.AnnData` object. Possibly add further annotation using, e.g., `pd.read_csv`:. ```; import pandas as pd; anno = pd.read_csv(filename_sample_annotation); adata.obs['cell_groups'] = anno['cell_groups'] # categorical annotation of type pandas.Categorical; adata.obs['time'] = anno['time'] # numerical annotation of type float; # alternatively, you could also set the whole dataframe; # adata.obs = anno; ```. To write, use:. ```; adata.write(filename); adata.write_csvs(filename); adata.write_loom(filename

Instructions: 
1. Analyze the content and the attribute description.
2. Determine if the content accurately reflects the intended quality attribute in this context.
3. If it does, label it as `true_positive: true`; if not, mark it as a `true_positive: false`.
4. If the content consists only of logs with no other text, mark it as a `true_positive: false`. 
4. If the content partially consists of logs, focus on analyzing remaining text. 
5. Add `reasoning` why the content is a true or false positive.
",True,"The content provided discusses how to manipulate and utilize an AnnData object in Scanpy, including functions like sc.pl.umap for plotting and options for returning copies versus modifying data in place. This involves understanding and adjusting system components (e.g., the AnnData class) which is related to modifiability as it deals with adapting the system by modifying its features or structures."
Modifiability,"# For each ""variable = "", there must be a right hand side:; # either an empty string or a python-style logical expression; # involving variable names, ""or"", ""and"", ""("", "")"".; # The order of equations matters!; #; # modelType = hill; # invTimeStep = 0.1; #; # boolean update rules:; 0 = 0 and not 1; 1 = 1 and not 0; # coupling list:; 0 0 1.0; 0 1 -1.0; 1 1 1.0; 1 0 -1.0; ",variab,MatchSource.DOCS,scverse,scanpy,1.10.2,https://github.com/scverse/scanpy/tree/1.10.2/src/scanpy/sim_models/toggleswitch.txt:12,variable,12,src/scanpy/sim_models/toggleswitch.txt,https://scanpy.readthedocs.io,https://github.com/scverse/scanpy/tree/1.10.2/src/scanpy/sim_models/toggleswitch.txt,3,"['coupling', 'variab']","['coupling', 'variable']","The ease with which the system can be adapted by adding, removing, or modifying features, or adjusting to new environments. This attribute involves assessing the time, cost, and impact of changes, considering factors like coupling, cohesion, and the scope of modifications.","
You are an expert in evaluating and categorizing quality attributes in software engineering. You possess the necessary skills to distinguish sentences that clearly relate to a given quality attribute from those that do not. 

Evaluate whether the content accurately aligns with its associated quality attribute, given the context provided. Your goal is to determine if the content makes sense in relation to the quality attribute description or if it is a false positive.

Data:

Quality Attribute: Modifiability
Attribute Description: The ease with which the system can be adapted by adding, removing, or modifying features, or adjusting to new environments. This attribute involves assessing the time, cost, and impact of changes, considering factors like coupling, cohesion, and the scope of modifications.
Content: # For each ""variable = "", there must be a right hand side:; # either an empty string or a python-style logical expression; # involving variable names, ""or"", ""and"", ""("", "")"".; # The order of equations matters!; #; # modelType = hill; # invTimeStep = 0.1; #; # boolean update rules:; 0 = 0 and not 1; 1 = 1 and not 0; # coupling list:; 0 0 1.0; 0 1 -1.0; 1 1 1.0; 1 0 -1.0; 

Instructions: 
1. Analyze the content and the attribute description.
2. Determine if the content accurately reflects the intended quality attribute in this context.
3. If it does, label it as `true_positive: true`; if not, mark it as a `true_positive: false`.
4. If the content consists only of logs with no other text, mark it as a `true_positive: false`. 
4. If the content partially consists of logs, focus on analyzing remaining text. 
5. Add `reasoning` why the content is a true or false positive.
",True,The content provided includes variable assignments and coupling information which are relevant to understanding modifiability through factors like coupling and cohesion. The presence of these details aligns with the description of modifiability as it involves assessing changes in the system.
Modifiability,"# See Table 1 in Krumsiek et al. (2011), p. 3 or; # Table 1, in Suppl. Mat. of Moignard et al. (2015), p. 28.; #; # For each ""variable = "", there must be a right hand side:; # either an empty string or a python-style logical expression; # involving variable names, ""or"", ""and"", ""("", "")"".; # The order of equations matters!; #; # modelType = hill; # invTimeStep = 0.02; #; # boolean update rules:; Gata2 = Gata2 and not (Gata1 and Fog1) and not Pu.1; Gata1 = (Gata1 or Gata2 or Fli1) and not Pu.1; Fog1 = Gata1; EKLF = Gata1 and not Fli1; Fli1 = Gata1 and not EKLF; SCL = Gata1 and not Pu.1; Cebpa = Cebpa and not (Gata1 and Fog1 and SCL); Pu.1 = (Cebpa or Pu.1) and not (Gata1 or Gata2); cJun = Pu.1 and not Gfi1; EgrNab = (Pu.1 and cJun) and not Gfi1; Gfi1 = Cebpa and not EgrNab; # coupling list:; Gata2 Gata2 1.0; Gata2 Gata1 -0.1; Gata2 Fog1 -1.0; Gata2 Pu.1 -1.15; Gata1 Gata2 1.0; Gata1 Gata1 0.1; Gata1 Fli1 1.0; Gata1 Pu.1 -1.21; Fog1 Gata1 0.1; EKLF Gata1 0.2; EKLF Fli1 -1.0; Fli1 Gata1 0.2; Fli1 EKLF -1.0; SCL Gata1 1.0; SCL Pu.1 -1.0; Cebpa Gata1 -1.0; Cebpa Fog1 -1.0; Cebpa SCL -1.0; Cebpa Cebpa 10.0; Pu.1 Gata2 -1.0; Pu.1 Gata1 -1.0; Pu.1 Cebpa 10.0; Pu.1 Pu.1 10.0; cJun Pu.1 1.0; cJun Gfi1 -1.0; EgrNab Pu.1 1.0; EgrNab cJun 1.0; EgrNab Gfi1 -1.3; Gfi1 Cebpa 1.0; Gfi1 EgrNab -5.0; ",variab,MatchSource.DOCS,scverse,scanpy,1.10.2,https://github.com/scverse/scanpy/tree/1.10.2/src/scanpy/sim_models/krumsiek11.txt:126,variable,126,src/scanpy/sim_models/krumsiek11.txt,https://scanpy.readthedocs.io,https://github.com/scverse/scanpy/tree/1.10.2/src/scanpy/sim_models/krumsiek11.txt,3,"['coupling', 'variab']","['coupling', 'variable']","The ease with which the system can be adapted by adding, removing, or modifying features, or adjusting to new environments. This attribute involves assessing the time, cost, and impact of changes, considering factors like coupling, cohesion, and the scope of modifications.","
You are an expert in evaluating and categorizing quality attributes in software engineering. You possess the necessary skills to distinguish sentences that clearly relate to a given quality attribute from those that do not. 

Evaluate whether the content accurately aligns with its associated quality attribute, given the context provided. Your goal is to determine if the content makes sense in relation to the quality attribute description or if it is a false positive.

Data:

Quality Attribute: Modifiability
Attribute Description: The ease with which the system can be adapted by adding, removing, or modifying features, or adjusting to new environments. This attribute involves assessing the time, cost, and impact of changes, considering factors like coupling, cohesion, and the scope of modifications.
Content: # See Table 1 in Krumsiek et al. (2011), p. 3 or; # Table 1, in Suppl. Mat. of Moignard et al. (2015), p. 28.; #; # For each ""variable = "", there must be a right hand side:; # either an empty string or a python-style logical expression; # involving variable names, ""or"", ""and"", ""("", "")"".; # The order of equations matters!; #; # modelType = hill; # invTimeStep = 0.02; #; # boolean update rules:; Gata2 = Gata2 and not (Gata1 and Fog1) and not Pu.1; Gata1 = (Gata1 or Gata2 or Fli1) and not Pu.1; Fog1 = Gata1; EKLF = Gata1 and not Fli1; Fli1 = Gata1 and not EKLF; SCL = Gata1 and not Pu.1; Cebpa = Cebpa and not (Gata1 and Fog1 and SCL); Pu.1 = (Cebpa or Pu.1) and not (Gata1 or Gata2); cJun = Pu.1 and not Gfi1; EgrNab = (Pu.1 and cJun) and not Gfi1; Gfi1 = Cebpa and not EgrNab; # coupling list:; Gata2 Gata2 1.0; Gata2 Gata1 -0.1; Gata2 Fog1 -1.0; Gata2 Pu.1 -1.15; Gata1 Gata2 1.0; Gata1 Gata1 0.1; Gata1 Fli1 1.0; Gata1 Pu.1 -1.21; Fog1 Gata1 0.1; EKLF Gata1 0.2; EKLF Fli1 -1.0; Fli1 Gata1 0.2; Fli1 EKLF -1.0; SCL Gata1 1.0; SCL Pu.1 -1.0; Cebpa Gata1 -1.0; Cebpa Fog1 -1.0; Cebpa SCL -1.0; Cebpa Cebpa 10.0; Pu.1 Gata2 -1.0; Pu.1 Gata1 -1.0; Pu.1 Cebpa 10.0; Pu.1 Pu.1 10.0; cJun Pu.1 1.0; cJun Gfi1 -1.0; EgrNab Pu.1 1.0; EgrNab cJun 1.0; EgrNab Gfi1 -1.3; Gfi1 Cebpa 1.0; Gfi1 EgrNab -5.0; 

Instructions: 
1. Analyze the content and the attribute description.
2. Determine if the content accurately reflects the intended quality attribute in this context.
3. If it does, label it as `true_positive: true`; if not, mark it as a `true_positive: false`.
4. If the content consists only of logs with no other text, mark it as a `true_positive: false`. 
4. If the content partially consists of logs, focus on analyzing remaining text. 
5. Add `reasoning` why the content is a true or false positive.
",True,"The provided content includes a series of variable update rules and coupling information, which are detailed in the attribute description of Modifiability as factors that influence how changes can be made to the system. The update rules specify how variables interact, affecting modifiability, and the coupling list details dependencies between components, both of which align with the concept of Modifiability. Therefore, this content accurately reflects the quality attribute of Modifiability."
Modifiability,"# Usage Principles. Import Scanpy as:. ```; import scanpy as sc; ```. ## Workflow. The typical workflow consists of subsequent calls of data analysis tools; in `sc.tl`, e.g.:. ```; sc.tl.umap(adata, **tool_params) # embed a neighborhood graph of the data using UMAP; ```. where `adata` is an {class}`~anndata.AnnData` object.; Each of these calls adds annotation to an expression matrix *X*,; which stores *n_obs* observations (cells) of *n_vars* variables (genes).; For each tool, there typically is an associated plotting function in `sc.pl`:. ```; sc.pl.umap(adata, **plotting_params); ```. If you pass `show=False`, a {class}`~matplotlib.axes.Axes` instance is returned; and you have all of matplotlib's detailed configuration possibilities. To facilitate writing memory-efficient pipelines, by default,; Scanpy tools operate *inplace* on `adata` and return `None` –; this also allows to easily transition to [out-of-memory pipelines].; If you want to return a copy of the {class}`~anndata.AnnData` object; and leave the passed `adata` unchanged, pass `copy=True` or `inplace=False`. ## AnnData. Scanpy is based on {mod}`anndata`, which provides the {class}`~anndata.AnnData` class. ```{image} https://falexwolf.de/img/scanpy/anndata.svg; :width: 300px; ```. At the most basic level, an {class}`~anndata.AnnData` object `adata` stores; a data matrix `adata.X`, annotation of observations; `adata.obs` and variables `adata.var` as `pd.DataFrame` and unstructured; annotation `adata.uns` as `dict`. Names of observations and; variables can be accessed via `adata.obs_names` and `adata.var_names`,; respectively. {class}`~anndata.AnnData` objects can be sliced like; dataframes, for example, `adata_subset = adata[:, list_of_gene_names]`.; For more, see this [blog post]. To read a data file to an {class}`~anndata.AnnData` object, call:. ```; adata = sc.read(filename); ```. to initialize an {class}`~anndata.AnnData` object. Possibly add further annotation using, e.g., `pd.read_csv`:. ```; import ",variab,MatchSource.DOCS,scverse,scanpy,1.10.2,https://github.com/scverse/scanpy/tree/1.10.2/docs/usage-principles.md:447,variables,447,docs/usage-principles.md,https://scanpy.readthedocs.io,https://github.com/scverse/scanpy/tree/1.10.2/docs/usage-principles.md,2,"['config', 'variab']","['configuration', 'variables']","The ease with which the system can be adapted by adding, removing, or modifying features, or adjusting to new environments. This attribute involves assessing the time, cost, and impact of changes, considering factors like coupling, cohesion, and the scope of modifications.","
You are an expert in evaluating and categorizing quality attributes in software engineering. You possess the necessary skills to distinguish sentences that clearly relate to a given quality attribute from those that do not. 

Evaluate whether the content accurately aligns with its associated quality attribute, given the context provided. Your goal is to determine if the content makes sense in relation to the quality attribute description or if it is a false positive.

Data:

Quality Attribute: Modifiability
Attribute Description: The ease with which the system can be adapted by adding, removing, or modifying features, or adjusting to new environments. This attribute involves assessing the time, cost, and impact of changes, considering factors like coupling, cohesion, and the scope of modifications.
Content: # Usage Principles. Import Scanpy as:. ```; import scanpy as sc; ```. ## Workflow. The typical workflow consists of subsequent calls of data analysis tools; in `sc.tl`, e.g.:. ```; sc.tl.umap(adata, **tool_params) # embed a neighborhood graph of the data using UMAP; ```. where `adata` is an {class}`~anndata.AnnData` object.; Each of these calls adds annotation to an expression matrix *X*,; which stores *n_obs* observations (cells) of *n_vars* variables (genes).; For each tool, there typically is an associated plotting function in `sc.pl`:. ```; sc.pl.umap(adata, **plotting_params); ```. If you pass `show=False`, a {class}`~matplotlib.axes.Axes` instance is returned; and you have all of matplotlib's detailed configuration possibilities. To facilitate writing memory-efficient pipelines, by default,; Scanpy tools operate *inplace* on `adata` and return `None` –; this also allows to easily transition to [out-of-memory pipelines].; If you want to return a copy of the {class}`~anndata.AnnData` object; and leave the passed `adata` unchanged, pass `copy=True` or `inplace=False`. ## AnnData. Scanpy is based on {mod}`anndata`, which provides the {class}`~anndata.AnnData` class. ```{image} https://falexwolf.de/img/scanpy/anndata.svg; :width: 300px; ```. At the most basic level, an {class}`~anndata.AnnData` object `adata` stores; a data matrix `adata.X`, annotation of observations; `adata.obs` and variables `adata.var` as `pd.DataFrame` and unstructured; annotation `adata.uns` as `dict`. Names of observations and; variables can be accessed via `adata.obs_names` and `adata.var_names`,; respectively. {class}`~anndata.AnnData` objects can be sliced like; dataframes, for example, `adata_subset = adata[:, list_of_gene_names]`.; For more, see this [blog post]. To read a data file to an {class}`~anndata.AnnData` object, call:. ```; adata = sc.read(filename); ```. to initialize an {class}`~anndata.AnnData` object. Possibly add further annotation using, e.g., `pd.read_csv`:. ```; import 

Instructions: 
1. Analyze the content and the attribute description.
2. Determine if the content accurately reflects the intended quality attribute in this context.
3. If it does, label it as `true_positive: true`; if not, mark it as a `true_positive: false`.
4. If the content consists only of logs with no other text, mark it as a `true_positive: false`. 
4. If the content partially consists of logs, focus on analyzing remaining text. 
5. Add `reasoning` why the content is a true or false positive.
",True,"The provided content is about using Scanpy for data analysis and manipulating AnnData objects, which includes modifying data by adding/removing features (like importing modules) and adapting to new environments (like plotting functions). It discusses how tools like `sc.tl.umap` modify the data in place or return copies. This directly relates to modifiability as it explains how easily the system can be adapted and modified, including through configuration options and in-place operations. The content doesn't contain logs but instead technical instructions relevant to the quality attribute."
Modifiability,"## Plotting: `pl`. ```{eval-rst}; .. module:: scanpy.pl; ```. ```{eval-rst}; .. currentmodule:: scanpy; ```. The plotting module {mod}`scanpy.pl` largely parallels the `tl.*` and a few of the `pp.*` functions.; For most tools and for some preprocessing functions, you'll find a plotting function with the same name. See {doc}`/tutorials/plotting/core` for an overview of how to use these functions. ```{note}; See the {ref}`settings` section for all important plotting configurations.; ```. (pl-generic)=. ### Generic. ```{eval-rst}; .. autosummary::; :nosignatures:; :toctree: ../generated/. pl.scatter; pl.heatmap; pl.dotplot; pl.tracksplot; pl.violin; pl.stacked_violin; pl.matrixplot; pl.clustermap; pl.ranking; pl.dendrogram. ```. ### Classes. These classes allow fine tuning of visual parameters. ```{eval-rst}; .. autosummary::; :nosignatures:; :toctree: generated/classes. pl.DotPlot; pl.MatrixPlot; pl.StackedViolin. ```. ### Preprocessing. Methods for visualizing quality control and results of preprocessing functions. ```{eval-rst}; .. autosummary::; :nosignatures:; :toctree: generated/. pl.highest_expr_genes; pl.filter_genes_dispersion; pl.highly_variable_genes; pl.scrublet_score_distribution. ```. ### Tools. Methods that extract and visualize tool-specific annotation in an; {class}`~anndata.AnnData` object. For any method in module `tl`, there is; a method with the same name in `pl`. #### PCA. ```{eval-rst}; .. autosummary::; :nosignatures:; :toctree: generated/. pl.pca; pl.pca_loadings; pl.pca_variance_ratio; pl.pca_overview; ```. #### Embeddings. ```{eval-rst}; .. autosummary::; :nosignatures:; :toctree: generated/. pl.tsne; pl.umap; pl.diffmap; pl.draw_graph; pl.spatial; pl.embedding; ```. Compute densities on embeddings. ```{eval-rst}; .. autosummary::; :nosignatures:; :toctree: generated/. pl.embedding_density; ```. #### Branching trajectories and pseudotime, clustering. Visualize clusters using one of the embedding methods passing `color='louvain'`. ```{eval-rst}",config,MatchSource.DOCS,scverse,scanpy,1.10.2,https://github.com/scverse/scanpy/tree/1.10.2/docs/api/plotting.md:469,configurations,469,docs/api/plotting.md,https://scanpy.readthedocs.io,https://github.com/scverse/scanpy/tree/1.10.2/docs/api/plotting.md,1,['config'],['configurations'],"The ease with which the system can be adapted by adding, removing, or modifying features, or adjusting to new environments. This attribute involves assessing the time, cost, and impact of changes, considering factors like coupling, cohesion, and the scope of modifications.","
You are an expert in evaluating and categorizing quality attributes in software engineering. You possess the necessary skills to distinguish sentences that clearly relate to a given quality attribute from those that do not. 

Evaluate whether the content accurately aligns with its associated quality attribute, given the context provided. Your goal is to determine if the content makes sense in relation to the quality attribute description or if it is a false positive.

Data:

Quality Attribute: Modifiability
Attribute Description: The ease with which the system can be adapted by adding, removing, or modifying features, or adjusting to new environments. This attribute involves assessing the time, cost, and impact of changes, considering factors like coupling, cohesion, and the scope of modifications.
Content: ## Plotting: `pl`. ```{eval-rst}; .. module:: scanpy.pl; ```. ```{eval-rst}; .. currentmodule:: scanpy; ```. The plotting module {mod}`scanpy.pl` largely parallels the `tl.*` and a few of the `pp.*` functions.; For most tools and for some preprocessing functions, you'll find a plotting function with the same name. See {doc}`/tutorials/plotting/core` for an overview of how to use these functions. ```{note}; See the {ref}`settings` section for all important plotting configurations.; ```. (pl-generic)=. ### Generic. ```{eval-rst}; .. autosummary::; :nosignatures:; :toctree: ../generated/. pl.scatter; pl.heatmap; pl.dotplot; pl.tracksplot; pl.violin; pl.stacked_violin; pl.matrixplot; pl.clustermap; pl.ranking; pl.dendrogram. ```. ### Classes. These classes allow fine tuning of visual parameters. ```{eval-rst}; .. autosummary::; :nosignatures:; :toctree: generated/classes. pl.DotPlot; pl.MatrixPlot; pl.StackedViolin. ```. ### Preprocessing. Methods for visualizing quality control and results of preprocessing functions. ```{eval-rst}; .. autosummary::; :nosignatures:; :toctree: generated/. pl.highest_expr_genes; pl.filter_genes_dispersion; pl.highly_variable_genes; pl.scrublet_score_distribution. ```. ### Tools. Methods that extract and visualize tool-specific annotation in an; {class}`~anndata.AnnData` object. For any method in module `tl`, there is; a method with the same name in `pl`. #### PCA. ```{eval-rst}; .. autosummary::; :nosignatures:; :toctree: generated/. pl.pca; pl.pca_loadings; pl.pca_variance_ratio; pl.pca_overview; ```. #### Embeddings. ```{eval-rst}; .. autosummary::; :nosignatures:; :toctree: generated/. pl.tsne; pl.umap; pl.diffmap; pl.draw_graph; pl.spatial; pl.embedding; ```. Compute densities on embeddings. ```{eval-rst}; .. autosummary::; :nosignatures:; :toctree: generated/. pl.embedding_density; ```. #### Branching trajectories and pseudotime, clustering. Visualize clusters using one of the embedding methods passing `color='louvain'`. ```{eval-rst}

Instructions: 
1. Analyze the content and the attribute description.
2. Determine if the content accurately reflects the intended quality attribute in this context.
3. If it does, label it as `true_positive: true`; if not, mark it as a `true_positive: false`.
4. If the content consists only of logs with no other text, mark it as a `true_positive: false`. 
4. If the content partially consists of logs, focus on analyzing remaining text. 
5. Add `reasoning` why the content is a true or false positive.
",True,"The content discusses plotting functions and visualization tools in ScanPy, which allows for adapting the system by adding, removing, or modifying features through configuration settings and parameters. The ability to modify visual parameters and customize plots contributes to the modifiability of the system as described."
Modifiability,"## Preprocessing: `pp`. ```{eval-rst}; .. module:: scanpy.pp; ```. ```{eval-rst}; .. currentmodule:: scanpy; ```. Filtering of highly-variable genes, batch-effect correction, per-cell normalization, preprocessing recipes. Any transformation of the data matrix that is not a *tool*. Other than *tools*, preprocessing steps usually don't return an easily interpretable annotation, but perform a basic transformation on the data matrix. ### Basic Preprocessing. For visual quality control, see {func}`~scanpy.pl.highest_expr_genes` and; {func}`~scanpy.pl.filter_genes_dispersion` in {mod}`scanpy.pl`. ```{eval-rst}; .. autosummary::; :nosignatures:; :toctree: ../generated/. pp.calculate_qc_metrics; pp.filter_cells; pp.filter_genes; pp.highly_variable_genes; pp.log1p; pp.pca; pp.normalize_total; pp.regress_out; pp.scale; pp.subsample; pp.downsample_counts; ```. ### Recipes. ```{eval-rst}; .. autosummary::; :nosignatures:; :toctree: generated/. pp.recipe_zheng17; pp.recipe_weinreb17; pp.recipe_seurat; ```. ### Batch effect correction. Also see [Data integration]. Note that a simple batch correction method is available via {func}`pp.regress_out`. Checkout {mod}`scanpy.external` for more. ```{eval-rst}; .. autosummary::; :nosignatures:; :toctree: generated/. pp.combat; ```. ### Doublet detection. ```{eval-rst}; .. autosummary::; :nosignatures:; :toctree: generated/. pp.scrublet; pp.scrublet_simulate_doublets; ```. ### Neighbors. ```{eval-rst}; .. autosummary::; :nosignatures:; :toctree: generated/. pp.neighbors. ```; ",variab,MatchSource.DOCS,scverse,scanpy,1.10.2,https://github.com/scverse/scanpy/tree/1.10.2/docs/api/preprocessing.md:134,variable,134,docs/api/preprocessing.md,https://scanpy.readthedocs.io,https://github.com/scverse/scanpy/tree/1.10.2/docs/api/preprocessing.md,1,['variab'],['variable'],"The ease with which the system can be adapted by adding, removing, or modifying features, or adjusting to new environments. This attribute involves assessing the time, cost, and impact of changes, considering factors like coupling, cohesion, and the scope of modifications.","
You are an expert in evaluating and categorizing quality attributes in software engineering. You possess the necessary skills to distinguish sentences that clearly relate to a given quality attribute from those that do not. 

Evaluate whether the content accurately aligns with its associated quality attribute, given the context provided. Your goal is to determine if the content makes sense in relation to the quality attribute description or if it is a false positive.

Data:

Quality Attribute: Modifiability
Attribute Description: The ease with which the system can be adapted by adding, removing, or modifying features, or adjusting to new environments. This attribute involves assessing the time, cost, and impact of changes, considering factors like coupling, cohesion, and the scope of modifications.
Content: ## Preprocessing: `pp`. ```{eval-rst}; .. module:: scanpy.pp; ```. ```{eval-rst}; .. currentmodule:: scanpy; ```. Filtering of highly-variable genes, batch-effect correction, per-cell normalization, preprocessing recipes. Any transformation of the data matrix that is not a *tool*. Other than *tools*, preprocessing steps usually don't return an easily interpretable annotation, but perform a basic transformation on the data matrix. ### Basic Preprocessing. For visual quality control, see {func}`~scanpy.pl.highest_expr_genes` and; {func}`~scanpy.pl.filter_genes_dispersion` in {mod}`scanpy.pl`. ```{eval-rst}; .. autosummary::; :nosignatures:; :toctree: ../generated/. pp.calculate_qc_metrics; pp.filter_cells; pp.filter_genes; pp.highly_variable_genes; pp.log1p; pp.pca; pp.normalize_total; pp.regress_out; pp.scale; pp.subsample; pp.downsample_counts; ```. ### Recipes. ```{eval-rst}; .. autosummary::; :nosignatures:; :toctree: generated/. pp.recipe_zheng17; pp.recipe_weinreb17; pp.recipe_seurat; ```. ### Batch effect correction. Also see [Data integration]. Note that a simple batch correction method is available via {func}`pp.regress_out`. Checkout {mod}`scanpy.external` for more. ```{eval-rst}; .. autosummary::; :nosignatures:; :toctree: generated/. pp.combat; ```. ### Doublet detection. ```{eval-rst}; .. autosummary::; :nosignatures:; :toctree: generated/. pp.scrublet; pp.scrublet_simulate_doublets; ```. ### Neighbors. ```{eval-rst}; .. autosummary::; :nosignatures:; :toctree: generated/. pp.neighbors. ```; 

Instructions: 
1. Analyze the content and the attribute description.
2. Determine if the content accurately reflects the intended quality attribute in this context.
3. If it does, label it as `true_positive: true`; if not, mark it as a `true_positive: false`.
4. If the content consists only of logs with no other text, mark it as a `true_positive: false`. 
4. If the content partially consists of logs, focus on analyzing remaining text. 
5. Add `reasoning` why the content is a true or false positive.
",True,"The content discusses preprocessing steps like filtering genes and normalizing data, which are modifications to the system's functionality to improve performance. These adjustments align with modifiability by allowing the system to adapt to different conditions."
Modifiability,"### 1.1.0 {small}`2018-06-01`. - {func}`~scanpy.set_figure_params` by default passes `vector_friendly=True` and allows you to produce reasonablly sized pdfs by rasterizing large scatter plots {smaller}`A Wolf`; - {func}`~scanpy.tl.draw_graph` defaults to the ForceAtlas2 layout {cite:p}`Jacomy2014,Chippada2018`, which is often more visually appealing and whose computation is much faster {smaller}`S Wollock`; - {func}`~scanpy.pl.scatter` also plots along variables axis {smaller}`MD Luecken`; - {func}`~scanpy.pp.pca` and {func}`~scanpy.pp.log1p` support chunk processing {smaller}`S Rybakov`; - {func}`~scanpy.pp.regress_out` is back to multiprocessing {smaller}`F Ramirez`; - {func}`~scanpy.read` reads compressed text files {smaller}`G Eraslan`; - {func}`~scanpy.queries.mitochondrial_genes` for querying mito genes {smaller}`FG Brundu`; - {func}`~scanpy.external.pp.mnn_correct` for batch correction {cite:p}`Haghverdi2018,Kang2018`; - {func}`~scanpy.external.tl.phate` for low-dimensional embedding {cite:p}`Moon2019` {smaller}`S Gigante`; - {func}`~scanpy.external.tl.sandbag`, {func}`~scanpy.external.tl.cyclone` for scoring genes {cite:p}`Scialdone2015,Fechtner2018`; ",variab,MatchSource.DOCS,scverse,scanpy,1.10.2,https://github.com/scverse/scanpy/tree/1.10.2/docs/release-notes/1.1.0.md:457,variables,457,docs/release-notes/1.1.0.md,https://scanpy.readthedocs.io,https://github.com/scverse/scanpy/tree/1.10.2/docs/release-notes/1.1.0.md,1,['variab'],['variables'],"The ease with which the system can be adapted by adding, removing, or modifying features, or adjusting to new environments. This attribute involves assessing the time, cost, and impact of changes, considering factors like coupling, cohesion, and the scope of modifications.","
You are an expert in evaluating and categorizing quality attributes in software engineering. You possess the necessary skills to distinguish sentences that clearly relate to a given quality attribute from those that do not. 

Evaluate whether the content accurately aligns with its associated quality attribute, given the context provided. Your goal is to determine if the content makes sense in relation to the quality attribute description or if it is a false positive.

Data:

Quality Attribute: Modifiability
Attribute Description: The ease with which the system can be adapted by adding, removing, or modifying features, or adjusting to new environments. This attribute involves assessing the time, cost, and impact of changes, considering factors like coupling, cohesion, and the scope of modifications.
Content: ### 1.1.0 {small}`2018-06-01`. - {func}`~scanpy.set_figure_params` by default passes `vector_friendly=True` and allows you to produce reasonablly sized pdfs by rasterizing large scatter plots {smaller}`A Wolf`; - {func}`~scanpy.tl.draw_graph` defaults to the ForceAtlas2 layout {cite:p}`Jacomy2014,Chippada2018`, which is often more visually appealing and whose computation is much faster {smaller}`S Wollock`; - {func}`~scanpy.pl.scatter` also plots along variables axis {smaller}`MD Luecken`; - {func}`~scanpy.pp.pca` and {func}`~scanpy.pp.log1p` support chunk processing {smaller}`S Rybakov`; - {func}`~scanpy.pp.regress_out` is back to multiprocessing {smaller}`F Ramirez`; - {func}`~scanpy.read` reads compressed text files {smaller}`G Eraslan`; - {func}`~scanpy.queries.mitochondrial_genes` for querying mito genes {smaller}`FG Brundu`; - {func}`~scanpy.external.pp.mnn_correct` for batch correction {cite:p}`Haghverdi2018,Kang2018`; - {func}`~scanpy.external.tl.phate` for low-dimensional embedding {cite:p}`Moon2019` {smaller}`S Gigante`; - {func}`~scanpy.external.tl.sandbag`, {func}`~scanpy.external.tl.cyclone` for scoring genes {cite:p}`Scialdone2015,Fechtner2018`; 

Instructions: 
1. Analyze the content and the attribute description.
2. Determine if the content accurately reflects the intended quality attribute in this context.
3. If it does, label it as `true_positive: true`; if not, mark it as a `true_positive: false`.
4. If the content consists only of logs with no other text, mark it as a `true_positive: false`. 
4. If the content partially consists of logs, focus on analyzing remaining text. 
5. Add `reasoning` why the content is a true or false positive.
",False,"The content provided describes various functions and their usage in the software, including default parameters and features like rasterizing large scatter plots, layout algorithms for graphs, support for chunk processing, regression methods, data reading, gene querying, batch correction techniques, and low-dimensional embeddings. It also cites relevant literature. This information is about specific functionalities and implementations rather than the modifiability of the system or how easy it is to modify the system. There’s no mention of adapting the system to new environments, adding or removing features, or adjusting to new conditions. The focus is on the existing features and their configurations rather than the flexibility and adaptability of the system."
Modifiability,"### 1.10.0 {small}`2024-03-26`. `scanpy` 1.10 brings a large amount of new features, performance improvements, and improved documentation. Some highlights:. * Improved support for out-of-core workflows via `dask`. See new tutorial: {doc}`/tutorials/experimental/dask` demonstrating counts-to-clusters for 1.4 million cells in <10 min.; * A new {doc}`basic clustering tutorial </tutorials/basics/clustering>` demonstrating an updated workflow.; * Opt-in increased performance for neighbor search and clustering ({doc}`how to guide </how-to/knn-transformers>`).; * Ability to `mask` observations or variables from a number of methods (see {doc}`/tutorials/plotting/advanced` for an example with plotting embeddings); * A new function {func}`~scanpy.get.aggregate` for computing aggregations of your data, very useful for pseudo bulking!. ```{rubric} Features; ```. * {func}`~scanpy.pp.scrublet` and {func}`~scanpy.pp.scrublet_simulate_doublets` were moved from {mod}`scanpy.external.pp` to {mod}`scanpy.pp`. The `scrublet` implementation is now maintained as part of scanpy {pr}`2703` {smaller}`P Angerer`; * {func}`scanpy.pp.pca`, {func}`scanpy.pp.scale`, {func}`scanpy.pl.embedding`, and {func}`scanpy.experimental.pp.normalize_pearson_residuals_pca` now support a `mask` parameter {pr}`2272` {smaller}`C Bright, T Marcella, & P Angerer`; * Enhanced dask support for some internal utilities, paving the way for more extensive dask support {pr}`2696` {smaller}`P Angerer`; * {func}`scanpy.pp.highly_variable_genes` supports dask for the default `seurat` and `cell_ranger` flavors {pr}`2809` {smaller}`P Angerer`; * New function {func}`scanpy.get.aggregate` which allows grouped aggregations over your data. Useful for pseudobulking! {pr}`2590` {smaller}`Isaac Virshup` {smaller}`Ilan Gold` {smaller}`Jon Bloom`; * {func}`scanpy.pp.neighbors` now has a `transformer` argument allowing the use of different ANN/ KNN libraries {pr}`2536` {smaller}`P Angerer`; * {func}`scanpy.experimental.pp.highly_variab",variab,MatchSource.DOCS,scverse,scanpy,1.10.2,https://github.com/scverse/scanpy/tree/1.10.2/docs/release-notes/1.10.0.md:597,variables,597,docs/release-notes/1.10.0.md,https://scanpy.readthedocs.io,https://github.com/scverse/scanpy/tree/1.10.2/docs/release-notes/1.10.0.md,1,['variab'],['variables'],"The ease with which the system can be adapted by adding, removing, or modifying features, or adjusting to new environments. This attribute involves assessing the time, cost, and impact of changes, considering factors like coupling, cohesion, and the scope of modifications.","
You are an expert in evaluating and categorizing quality attributes in software engineering. You possess the necessary skills to distinguish sentences that clearly relate to a given quality attribute from those that do not. 

Evaluate whether the content accurately aligns with its associated quality attribute, given the context provided. Your goal is to determine if the content makes sense in relation to the quality attribute description or if it is a false positive.

Data:

Quality Attribute: Modifiability
Attribute Description: The ease with which the system can be adapted by adding, removing, or modifying features, or adjusting to new environments. This attribute involves assessing the time, cost, and impact of changes, considering factors like coupling, cohesion, and the scope of modifications.
Content: ### 1.10.0 {small}`2024-03-26`. `scanpy` 1.10 brings a large amount of new features, performance improvements, and improved documentation. Some highlights:. * Improved support for out-of-core workflows via `dask`. See new tutorial: {doc}`/tutorials/experimental/dask` demonstrating counts-to-clusters for 1.4 million cells in <10 min.; * A new {doc}`basic clustering tutorial </tutorials/basics/clustering>` demonstrating an updated workflow.; * Opt-in increased performance for neighbor search and clustering ({doc}`how to guide </how-to/knn-transformers>`).; * Ability to `mask` observations or variables from a number of methods (see {doc}`/tutorials/plotting/advanced` for an example with plotting embeddings); * A new function {func}`~scanpy.get.aggregate` for computing aggregations of your data, very useful for pseudo bulking!. ```{rubric} Features; ```. * {func}`~scanpy.pp.scrublet` and {func}`~scanpy.pp.scrublet_simulate_doublets` were moved from {mod}`scanpy.external.pp` to {mod}`scanpy.pp`. The `scrublet` implementation is now maintained as part of scanpy {pr}`2703` {smaller}`P Angerer`; * {func}`scanpy.pp.pca`, {func}`scanpy.pp.scale`, {func}`scanpy.pl.embedding`, and {func}`scanpy.experimental.pp.normalize_pearson_residuals_pca` now support a `mask` parameter {pr}`2272` {smaller}`C Bright, T Marcella, & P Angerer`; * Enhanced dask support for some internal utilities, paving the way for more extensive dask support {pr}`2696` {smaller}`P Angerer`; * {func}`scanpy.pp.highly_variable_genes` supports dask for the default `seurat` and `cell_ranger` flavors {pr}`2809` {smaller}`P Angerer`; * New function {func}`scanpy.get.aggregate` which allows grouped aggregations over your data. Useful for pseudobulking! {pr}`2590` {smaller}`Isaac Virshup` {smaller}`Ilan Gold` {smaller}`Jon Bloom`; * {func}`scanpy.pp.neighbors` now has a `transformer` argument allowing the use of different ANN/ KNN libraries {pr}`2536` {smaller}`P Angerer`; * {func}`scanpy.experimental.pp.highly_variab

Instructions: 
1. Analyze the content and the attribute description.
2. Determine if the content accurately reflects the intended quality attribute in this context.
3. If it does, label it as `true_positive: true`; if not, mark it as a `true_positive: false`.
4. If the content consists only of logs with no other text, mark it as a `true_positive: false`. 
4. If the content partially consists of logs, focus on analyzing remaining text. 
5. Add `reasoning` why the content is a true or false positive.
",True,"The content discusses new features, performance improvements, and documentation updates which relate to modifiability as it involves adding new features and adapting the system through code changes."
Modifiability,"### 1.3.1 {small}`2018-09-03`. ```{rubric} RNA velocity in single cells {cite:p}`LaManno2018`; ```. - Scanpy and AnnData support loom’s layers so that computations for single-cell RNA velocity {cite:p}`LaManno2018` become feasible {smaller}`S Rybakov and V Bergen`; - [scvelo] harmonizes with Scanpy and is able to process loom files with splicing information produced by Velocyto {cite:p}`LaManno2018`, it runs a lot faster than the count matrix analysis of Velocyto and provides several conceptual developments. ~~~{rubric} Plotting ({ref}`pl-generic`); ~~~. - {func}`~scanpy.pl.dotplot` for visualizing genes across conditions and clusters, see [here](https://gist.github.com/fidelram/2289b7a8d6da055fb058ac9a79ed485c) {pr}`199` {smaller}`F Ramirez`; - {func}`~scanpy.pl.heatmap` for pretty heatmaps {pr}`175` {smaller}`F Ramirez`; - {func}`~scanpy.pl.violin` produces very compact overview figures with many panels {pr}`175` {smaller}`F Ramirez`. ~~~{rubric} There now is a section on imputation in {doc}`external <../external/index>`:; ~~~. - {func}`~scanpy.external.pp.magic` for imputation using data diffusion {cite:p}`vanDijk2018` {pr}`187` {smaller}`S Gigante`; - {func}`~scanpy.external.pp.dca` for imputation and latent space construction using an autoencoder {cite:p}`Eraslan2019` {pr}`186` {smaller}`G Eraslan`. [scvelo]: https://github.com/theislab/scvelo; ",layers,MatchSource.DOCS,scverse,scanpy,1.10.2,https://github.com/scverse/scanpy/tree/1.10.2/docs/release-notes/1.3.1.md:136,layers,136,docs/release-notes/1.3.1.md,https://scanpy.readthedocs.io,https://github.com/scverse/scanpy/tree/1.10.2/docs/release-notes/1.3.1.md,1,['layers'],['layers'],"The ease with which the system can be adapted by adding, removing, or modifying features, or adjusting to new environments. This attribute involves assessing the time, cost, and impact of changes, considering factors like coupling, cohesion, and the scope of modifications.","
You are an expert in evaluating and categorizing quality attributes in software engineering. You possess the necessary skills to distinguish sentences that clearly relate to a given quality attribute from those that do not. 

Evaluate whether the content accurately aligns with its associated quality attribute, given the context provided. Your goal is to determine if the content makes sense in relation to the quality attribute description or if it is a false positive.

Data:

Quality Attribute: Modifiability
Attribute Description: The ease with which the system can be adapted by adding, removing, or modifying features, or adjusting to new environments. This attribute involves assessing the time, cost, and impact of changes, considering factors like coupling, cohesion, and the scope of modifications.
Content: ### 1.3.1 {small}`2018-09-03`. ```{rubric} RNA velocity in single cells {cite:p}`LaManno2018`; ```. - Scanpy and AnnData support loom’s layers so that computations for single-cell RNA velocity {cite:p}`LaManno2018` become feasible {smaller}`S Rybakov and V Bergen`; - [scvelo] harmonizes with Scanpy and is able to process loom files with splicing information produced by Velocyto {cite:p}`LaManno2018`, it runs a lot faster than the count matrix analysis of Velocyto and provides several conceptual developments. ~~~{rubric} Plotting ({ref}`pl-generic`); ~~~. - {func}`~scanpy.pl.dotplot` for visualizing genes across conditions and clusters, see [here](https://gist.github.com/fidelram/2289b7a8d6da055fb058ac9a79ed485c) {pr}`199` {smaller}`F Ramirez`; - {func}`~scanpy.pl.heatmap` for pretty heatmaps {pr}`175` {smaller}`F Ramirez`; - {func}`~scanpy.pl.violin` produces very compact overview figures with many panels {pr}`175` {smaller}`F Ramirez`. ~~~{rubric} There now is a section on imputation in {doc}`external <../external/index>`:; ~~~. - {func}`~scanpy.external.pp.magic` for imputation using data diffusion {cite:p}`vanDijk2018` {pr}`187` {smaller}`S Gigante`; - {func}`~scanpy.external.pp.dca` for imputation and latent space construction using an autoencoder {cite:p}`Eraslan2019` {pr}`186` {smaller}`G Eraslan`. [scvelo]: https://github.com/theislab/scvelo; 

Instructions: 
1. Analyze the content and the attribute description.
2. Determine if the content accurately reflects the intended quality attribute in this context.
3. If it does, label it as `true_positive: true`; if not, mark it as a `true_positive: false`.
4. If the content consists only of logs with no other text, mark it as a `true_positive: false`. 
4. If the content partially consists of logs, focus on analyzing remaining text. 
5. Add `reasoning` why the content is a true or false positive.
",False,"The content provided discusses tools and functions in Scanpy and Scvelo for data analysis tasks such as velocity computation, plotting, and imputation. While these tasks are related to data processing, they do not directly relate to modifiability. Modifiability concerns how easily a system can be modified or adapted, which involves factors like coupling and cohesion. The content does not touch upon any aspect of modifying or adapting the system but rather focuses on processing data using specific tools and functions. Therefore, this content does not align with the quality attribute of modifiability."
Modifiability,"### 1.4.1 {small}`2019-04-26`. ```{rubric} New functionality; ```. - Scanpy has a command line interface again. Invoking it with `scanpy somecommand [args]` calls `scanpy-somecommand [args]`, except for builtin commands (currently `scanpy settings`) {pr}`604` {smaller}`P Angerer`; - {func}`~scanpy.datasets.ebi_expression_atlas` allows convenient download of EBI expression atlas {smaller}`I Virshup`; - {func}`~scanpy.tl.marker_gene_overlap` computes overlaps of marker genes {smaller}`M Luecken`; - {func}`~scanpy.tl.filter_rank_genes_groups` filters out genes based on fold change and fraction of cells expressing genes {smaller}`F Ramirez`; - {func}`~scanpy.pp.normalize_total` replaces {func}`~scanpy.pp.normalize_per_cell`, is more efficient and provides a parameter to only normalize using a fraction of expressed genes {smaller}`S Rybakov`; - {func}`~scanpy.pp.downsample_counts` has been sped up, changed default value of `replace` parameter to `False` {pr}`474` {smaller}`I Virshup`; - {func}`~scanpy.tl.embedding_density` computes densities on embeddings {pr}`543` {smaller}`M Luecken`; - {func}`~scanpy.external.tl.palantir` interfaces Palantir {cite:p}`Setty2019` {pr}`493` {smaller}`A Mousa`. ```{rubric} Code design; ```. - `.layers` support of scatter plots {smaller}`F Ramirez`; - fix double-logarithmization in compute of log fold change in {func}`~scanpy.tl.rank_genes_groups` {smaller}`A Muñoz-Rojas`; - fix return sections of docs {smaller}`P Angerer`; ",layers,MatchSource.DOCS,scverse,scanpy,1.10.2,https://github.com/scverse/scanpy/tree/1.10.2/docs/release-notes/1.4.1.md:1242,layers,1242,docs/release-notes/1.4.1.md,https://scanpy.readthedocs.io,https://github.com/scverse/scanpy/tree/1.10.2/docs/release-notes/1.4.1.md,1,['layers'],['layers'],"The ease with which the system can be adapted by adding, removing, or modifying features, or adjusting to new environments. This attribute involves assessing the time, cost, and impact of changes, considering factors like coupling, cohesion, and the scope of modifications.","
You are an expert in evaluating and categorizing quality attributes in software engineering. You possess the necessary skills to distinguish sentences that clearly relate to a given quality attribute from those that do not. 

Evaluate whether the content accurately aligns with its associated quality attribute, given the context provided. Your goal is to determine if the content makes sense in relation to the quality attribute description or if it is a false positive.

Data:

Quality Attribute: Modifiability
Attribute Description: The ease with which the system can be adapted by adding, removing, or modifying features, or adjusting to new environments. This attribute involves assessing the time, cost, and impact of changes, considering factors like coupling, cohesion, and the scope of modifications.
Content: ### 1.4.1 {small}`2019-04-26`. ```{rubric} New functionality; ```. - Scanpy has a command line interface again. Invoking it with `scanpy somecommand [args]` calls `scanpy-somecommand [args]`, except for builtin commands (currently `scanpy settings`) {pr}`604` {smaller}`P Angerer`; - {func}`~scanpy.datasets.ebi_expression_atlas` allows convenient download of EBI expression atlas {smaller}`I Virshup`; - {func}`~scanpy.tl.marker_gene_overlap` computes overlaps of marker genes {smaller}`M Luecken`; - {func}`~scanpy.tl.filter_rank_genes_groups` filters out genes based on fold change and fraction of cells expressing genes {smaller}`F Ramirez`; - {func}`~scanpy.pp.normalize_total` replaces {func}`~scanpy.pp.normalize_per_cell`, is more efficient and provides a parameter to only normalize using a fraction of expressed genes {smaller}`S Rybakov`; - {func}`~scanpy.pp.downsample_counts` has been sped up, changed default value of `replace` parameter to `False` {pr}`474` {smaller}`I Virshup`; - {func}`~scanpy.tl.embedding_density` computes densities on embeddings {pr}`543` {smaller}`M Luecken`; - {func}`~scanpy.external.tl.palantir` interfaces Palantir {cite:p}`Setty2019` {pr}`493` {smaller}`A Mousa`. ```{rubric} Code design; ```. - `.layers` support of scatter plots {smaller}`F Ramirez`; - fix double-logarithmization in compute of log fold change in {func}`~scanpy.tl.rank_genes_groups` {smaller}`A Muñoz-Rojas`; - fix return sections of docs {smaller}`P Angerer`; 

Instructions: 
1. Analyze the content and the attribute description.
2. Determine if the content accurately reflects the intended quality attribute in this context.
3. If it does, label it as `true_positive: true`; if not, mark it as a `true_positive: false`.
4. If the content consists only of logs with no other text, mark it as a `true_positive: false`. 
4. If the content partially consists of logs, focus on analyzing remaining text. 
5. Add `reasoning` why the content is a true or false positive.
",True,"The content discusses updates and changes to the scanpy tool, including new functionality and code design elements such as layer support for scatter plots and fixes in functions. These describe modifications and enhancements made to the system, which aligns with Modifiability by allowing the system to be adapted through added features and improved functionalities."
Modifiability,"### 1.4.2 {small}`2019-05-06`. ```{rubric} New functionality; ```. - {func}`~scanpy.pp.combat` supports additional covariates which may include adjustment variables or biological condition {pr}`618` {smaller}`G Eraslan`; - {func}`~scanpy.pp.highly_variable_genes` has a `batch_key` option which performs HVG selection in each batch separately to avoid selecting genes that vary strongly across batches {pr}`622` {smaller}`G Eraslan`. ```{rubric} Bug fixes; ```. - {func}`~scanpy.tl.rank_genes_groups` t-test implementation doesn't return NaN when variance is 0, also changed to scipy's implementation {pr}`621` {smaller}`I Virshup`; - {func}`~scanpy.tl.umap` with `init_pos='paga'` detects correct `dtype` {smaller}`A Wolf`; - {func}`~scanpy.tl.louvain` and {func}`~scanpy.tl.leiden` auto-generate `key_added=louvain_R` upon passing `restrict_to`, which was temporarily changed in `1.4.1` {smaller}`A Wolf`. ```{rubric} Code design; ```. - {func}`~scanpy.pp.neighbors` and {func}`~scanpy.tl.umap` got rid of UMAP legacy code and introduced UMAP as a dependency {pr}`576` {smaller}`S Rybakov`; ",variab,MatchSource.DOCS,scverse,scanpy,1.10.2,https://github.com/scverse/scanpy/tree/1.10.2/docs/release-notes/1.4.2.md:155,variables,155,docs/release-notes/1.4.2.md,https://scanpy.readthedocs.io,https://github.com/scverse/scanpy/tree/1.10.2/docs/release-notes/1.4.2.md,1,['variab'],['variables'],"The ease with which the system can be adapted by adding, removing, or modifying features, or adjusting to new environments. This attribute involves assessing the time, cost, and impact of changes, considering factors like coupling, cohesion, and the scope of modifications.","
You are an expert in evaluating and categorizing quality attributes in software engineering. You possess the necessary skills to distinguish sentences that clearly relate to a given quality attribute from those that do not. 

Evaluate whether the content accurately aligns with its associated quality attribute, given the context provided. Your goal is to determine if the content makes sense in relation to the quality attribute description or if it is a false positive.

Data:

Quality Attribute: Modifiability
Attribute Description: The ease with which the system can be adapted by adding, removing, or modifying features, or adjusting to new environments. This attribute involves assessing the time, cost, and impact of changes, considering factors like coupling, cohesion, and the scope of modifications.
Content: ### 1.4.2 {small}`2019-05-06`. ```{rubric} New functionality; ```. - {func}`~scanpy.pp.combat` supports additional covariates which may include adjustment variables or biological condition {pr}`618` {smaller}`G Eraslan`; - {func}`~scanpy.pp.highly_variable_genes` has a `batch_key` option which performs HVG selection in each batch separately to avoid selecting genes that vary strongly across batches {pr}`622` {smaller}`G Eraslan`. ```{rubric} Bug fixes; ```. - {func}`~scanpy.tl.rank_genes_groups` t-test implementation doesn't return NaN when variance is 0, also changed to scipy's implementation {pr}`621` {smaller}`I Virshup`; - {func}`~scanpy.tl.umap` with `init_pos='paga'` detects correct `dtype` {smaller}`A Wolf`; - {func}`~scanpy.tl.louvain` and {func}`~scanpy.tl.leiden` auto-generate `key_added=louvain_R` upon passing `restrict_to`, which was temporarily changed in `1.4.1` {smaller}`A Wolf`. ```{rubric} Code design; ```. - {func}`~scanpy.pp.neighbors` and {func}`~scanpy.tl.umap` got rid of UMAP legacy code and introduced UMAP as a dependency {pr}`576` {smaller}`S Rybakov`; 

Instructions: 
1. Analyze the content and the attribute description.
2. Determine if the content accurately reflects the intended quality attribute in this context.
3. If it does, label it as `true_positive: true`; if not, mark it as a `true_positive: false`.
4. If the content consists only of logs with no other text, mark it as a `true_positive: false`. 
4. If the content partially consists of logs, focus on analyzing remaining text. 
5. Add `reasoning` why the content is a true or false positive.
",True,"The content describes updates and changes made to specific functions in the software, including new features and bug fixes, which relates to modifiability as it involves modifications and enhancements."
Modifiability,"### 1.4.6 {small}`2020-03-17`. ~~~{rubric} Functionality in `external`; ~~~. - {func}`~scanpy.external.tl.sam` self-assembling manifolds {cite:p}`Tarashansky2019` {pr}`903` {smaller}`A Tarashansky`; - {func}`~scanpy.external.tl.harmony_timeseries` for trajectory inference on discrete time points {pr}`994` {smaller}`A Mousa`; - {func}`~scanpy.external.tl.wishbone` for trajectory inference (bifurcations) {pr}`1063` {smaller}`A Mousa`. ```{rubric} Code design; ```. - {mod}`~scanpy.pl.violin` now reads `.uns['colors_...']` {pr}`1029` {smaller}`michalk8`. ```{rubric} Bug fixes; ```. - adapt {func}`~scanpy.tl.ingest` for UMAP 0.4 {pr}`1038` {pr}`1106` {smaller}`S Rybakov`; - compat with matplotlib 3.1 and 3.2 {pr}`1090` {smaller}`I Virshup, P Angerer`; - fix PAGA for new igraph {pr}`1037` {smaller}`P Angerer`; - fix rapids compat of louvain {pr}`1079` {smaller}`LouisFaure`; ",adapt,MatchSource.DOCS,scverse,scanpy,1.10.2,https://github.com/scverse/scanpy/tree/1.10.2/docs/release-notes/1.4.6.md:587,adapt,587,docs/release-notes/1.4.6.md,https://scanpy.readthedocs.io,https://github.com/scverse/scanpy/tree/1.10.2/docs/release-notes/1.4.6.md,1,['adapt'],['adapt'],"The ease with which the system can be adapted by adding, removing, or modifying features, or adjusting to new environments. This attribute involves assessing the time, cost, and impact of changes, considering factors like coupling, cohesion, and the scope of modifications.","
You are an expert in evaluating and categorizing quality attributes in software engineering. You possess the necessary skills to distinguish sentences that clearly relate to a given quality attribute from those that do not. 

Evaluate whether the content accurately aligns with its associated quality attribute, given the context provided. Your goal is to determine if the content makes sense in relation to the quality attribute description or if it is a false positive.

Data:

Quality Attribute: Modifiability
Attribute Description: The ease with which the system can be adapted by adding, removing, or modifying features, or adjusting to new environments. This attribute involves assessing the time, cost, and impact of changes, considering factors like coupling, cohesion, and the scope of modifications.
Content: ### 1.4.6 {small}`2020-03-17`. ~~~{rubric} Functionality in `external`; ~~~. - {func}`~scanpy.external.tl.sam` self-assembling manifolds {cite:p}`Tarashansky2019` {pr}`903` {smaller}`A Tarashansky`; - {func}`~scanpy.external.tl.harmony_timeseries` for trajectory inference on discrete time points {pr}`994` {smaller}`A Mousa`; - {func}`~scanpy.external.tl.wishbone` for trajectory inference (bifurcations) {pr}`1063` {smaller}`A Mousa`. ```{rubric} Code design; ```. - {mod}`~scanpy.pl.violin` now reads `.uns['colors_...']` {pr}`1029` {smaller}`michalk8`. ```{rubric} Bug fixes; ```. - adapt {func}`~scanpy.tl.ingest` for UMAP 0.4 {pr}`1038` {pr}`1106` {smaller}`S Rybakov`; - compat with matplotlib 3.1 and 3.2 {pr}`1090` {smaller}`I Virshup, P Angerer`; - fix PAGA for new igraph {pr}`1037` {smaller}`P Angerer`; - fix rapids compat of louvain {pr}`1079` {smaller}`LouisFaure`; 

Instructions: 
1. Analyze the content and the attribute description.
2. Determine if the content accurately reflects the intended quality attribute in this context.
3. If it does, label it as `true_positive: true`; if not, mark it as a `true_positive: false`.
4. If the content consists only of logs with no other text, mark it as a `true_positive: false`. 
4. If the content partially consists of logs, focus on analyzing remaining text. 
5. Add `reasoning` why the content is a true or false positive.
",True,"The content provided includes updates and modifications to various functions and modules in the software project. These include new functionality implementations, code design changes, bug fixes, and compatibility adjustments. Modifiability refers to the ease with which the system can be adapted by making such changes. The mention of specific functions like `violin`, `ingest`, compatibility with newer versions of libraries, and fixes for existing features all indicate that modifications are being made, which aligns with the concept of modifiability."
Modifiability,"### Spatial Transcriptomics Tools. - [squidpy](https://squidpy.readthedocs.io/en/stable/) {small}`Helmholtz Munich`. > Squidpy is a comprehensive toolkit for working with spatial single cell omics data. - [PASTE](https://github.com/raphael-group/paste) {small}`Princeton`. > PASTE is a computational method to align and integrate spatial transcriptomics data across adjacent tissue slices by leveraging both gene expression similarity and spatial distances between spots. - [bento](https://bento-tools.readthedocs.io/en/latest/) 🍱 {small}`UC San Diego`. > Bento is an accessible Python toolkit for performing subcellular analysis of spatial transcriptomics data. ### Multimodal integration. - [MUON](https://muon.readthedocs.io/en/latest/) and [MuData](https://mudata.readthedocs.io/en/latest/) {small}`EMBL/ DKFZ`. > MUON, and it's associated data structure MuData are designed to organise, analyse, visualise, and exchange multimodal data.; > MUON enables a range of analyses for ATAC and CITE-seq, from data preprocessing to flexible multi-omics alignment. ### Adaptive immune receptor repertoire (AIRR). - [scirpy](https://github.com/icbi-lab/scirpy) {small}`Medical University of Innsbruck`. > scirpy is a scanpy extension to expore single-cell T-cell receptor (TCR) and B-cell receptor (BCR) repertoires. - [dandelion](https://github.com/zktuong/dandelion) {small}`University of Cambridge`. > dandelion is a single-cell BCR-seq network analysis package that integrates with transcriptomic data analyzed via scanpy. ### Long reads. - [Swan](https://freese.gitbook.io/swan/tutorials/data_processing) {small}`UC Irvine`. > Swan is a Python library designed for the analysis and visualization of transcriptomes, especially with long-read transcriptomes in mind.; > Users can add transcriptomes from different datasets and explore distinct splicing and expression patterns across datasets. ## Analysis methods. ### scvi-tools. - [scvi-tools](https://github.com/YosefLab/scvi-tools) {small}`Berkeley`",flexible,MatchSource.DOCS,scverse,scanpy,1.10.2,https://github.com/scverse/scanpy/tree/1.10.2/docs/ecosystem.md:2430,flexible,2430,docs/ecosystem.md,https://scanpy.readthedocs.io,https://github.com/scverse/scanpy/tree/1.10.2/docs/ecosystem.md,1,['flexible'],['flexible'],"The ease with which the system can be adapted by adding, removing, or modifying features, or adjusting to new environments. This attribute involves assessing the time, cost, and impact of changes, considering factors like coupling, cohesion, and the scope of modifications.","
You are an expert in evaluating and categorizing quality attributes in software engineering. You possess the necessary skills to distinguish sentences that clearly relate to a given quality attribute from those that do not. 

Evaluate whether the content accurately aligns with its associated quality attribute, given the context provided. Your goal is to determine if the content makes sense in relation to the quality attribute description or if it is a false positive.

Data:

Quality Attribute: Modifiability
Attribute Description: The ease with which the system can be adapted by adding, removing, or modifying features, or adjusting to new environments. This attribute involves assessing the time, cost, and impact of changes, considering factors like coupling, cohesion, and the scope of modifications.
Content: ### Spatial Transcriptomics Tools. - [squidpy](https://squidpy.readthedocs.io/en/stable/) {small}`Helmholtz Munich`. > Squidpy is a comprehensive toolkit for working with spatial single cell omics data. - [PASTE](https://github.com/raphael-group/paste) {small}`Princeton`. > PASTE is a computational method to align and integrate spatial transcriptomics data across adjacent tissue slices by leveraging both gene expression similarity and spatial distances between spots. - [bento](https://bento-tools.readthedocs.io/en/latest/) 🍱 {small}`UC San Diego`. > Bento is an accessible Python toolkit for performing subcellular analysis of spatial transcriptomics data. ### Multimodal integration. - [MUON](https://muon.readthedocs.io/en/latest/) and [MuData](https://mudata.readthedocs.io/en/latest/) {small}`EMBL/ DKFZ`. > MUON, and it's associated data structure MuData are designed to organise, analyse, visualise, and exchange multimodal data.; > MUON enables a range of analyses for ATAC and CITE-seq, from data preprocessing to flexible multi-omics alignment. ### Adaptive immune receptor repertoire (AIRR). - [scirpy](https://github.com/icbi-lab/scirpy) {small}`Medical University of Innsbruck`. > scirpy is a scanpy extension to expore single-cell T-cell receptor (TCR) and B-cell receptor (BCR) repertoires. - [dandelion](https://github.com/zktuong/dandelion) {small}`University of Cambridge`. > dandelion is a single-cell BCR-seq network analysis package that integrates with transcriptomic data analyzed via scanpy. ### Long reads. - [Swan](https://freese.gitbook.io/swan/tutorials/data_processing) {small}`UC Irvine`. > Swan is a Python library designed for the analysis and visualization of transcriptomes, especially with long-read transcriptomes in mind.; > Users can add transcriptomes from different datasets and explore distinct splicing and expression patterns across datasets. ## Analysis methods. ### scvi-tools. - [scvi-tools](https://github.com/YosefLab/scvi-tools) {small}`Berkeley`

Instructions: 
1. Analyze the content and the attribute description.
2. Determine if the content accurately reflects the intended quality attribute in this context.
3. If it does, label it as `true_positive: true`; if not, mark it as a `true_positive: false`.
4. If the content consists only of logs with no other text, mark it as a `true_positive: false`. 
4. If the content partially consists of logs, focus on analyzing remaining text. 
5. Add `reasoning` why the content is a true or false positive.
",False,"The content discusses various tools related to spatial transcriptomics and multimodal integration. While these areas are important in data analysis, they don't directly relate to modifiability, which involves how easily a system can be adapted to changes or new environments. Therefore, the content does not accurately reflect the intended quality attribute of modifiability."
Modifiability,(contribution-guide)=. # Contributing. Contributions to scanpy are welcome!; This section of the docs provides some guidelines and tips to follow when contributing. ```{toctree}; code; getting-set-up; testing; documentation; ci; versioning; release; ```. Parts of the guidelines have been adapted from the [pandas](https://pandas.pydata.org/pandas-docs/stable/development/index.html) and [MDAnalysis](https://userguide.mdanalysis.org/stable/contributing.html) guides.; These are both excellent guides and we highly recommend checking them out.; ,adapt,MatchSource.DOCS,scverse,scanpy,1.10.2,https://github.com/scverse/scanpy/tree/1.10.2/docs/dev/index.md:289,adapted,289,docs/dev/index.md,https://scanpy.readthedocs.io,https://github.com/scverse/scanpy/tree/1.10.2/docs/dev/index.md,1,['adapt'],['adapted'],"The ease with which the system can be adapted by adding, removing, or modifying features, or adjusting to new environments. This attribute involves assessing the time, cost, and impact of changes, considering factors like coupling, cohesion, and the scope of modifications.","
You are an expert in evaluating and categorizing quality attributes in software engineering. You possess the necessary skills to distinguish sentences that clearly relate to a given quality attribute from those that do not. 

Evaluate whether the content accurately aligns with its associated quality attribute, given the context provided. Your goal is to determine if the content makes sense in relation to the quality attribute description or if it is a false positive.

Data:

Quality Attribute: Modifiability
Attribute Description: The ease with which the system can be adapted by adding, removing, or modifying features, or adjusting to new environments. This attribute involves assessing the time, cost, and impact of changes, considering factors like coupling, cohesion, and the scope of modifications.
Content: (contribution-guide)=. # Contributing. Contributions to scanpy are welcome!; This section of the docs provides some guidelines and tips to follow when contributing. ```{toctree}; code; getting-set-up; testing; documentation; ci; versioning; release; ```. Parts of the guidelines have been adapted from the [pandas](https://pandas.pydata.org/pandas-docs/stable/development/index.html) and [MDAnalysis](https://userguide.mdanalysis.org/stable/contributing.html) guides.; These are both excellent guides and we highly recommend checking them out.; 

Instructions: 
1. Analyze the content and the attribute description.
2. Determine if the content accurately reflects the intended quality attribute in this context.
3. If it does, label it as `true_positive: true`; if not, mark it as a `true_positive: false`.
4. If the content consists only of logs with no other text, mark it as a `true_positive: false`. 
4. If the content partially consists of logs, focus on analyzing remaining text. 
5. Add `reasoning` why the content is a true or false positive.
",False,"The content provided discusses guidelines for contributing to scanpy, including code setup, testing, documentation, and other related areas. While this is about system modification and contribution practices, it's more aligned with maintainability and modifiability in terms of allowing contributors to adapt the system. However, the connection to 'modifiability' as defined (ease of adapting features, etc.) isn't explicit. The content focuses on the process for contributions rather than the actual ability to modify the system."
Modifiability,"(settings)=. ## Settings. ```{eval-rst}; .. currentmodule:: scanpy; ```. A convenience function for setting some default {obj}`matplotlib.rcParams` and a; high-resolution jupyter display backend useful for use in notebooks. ```{eval-rst}; .. autosummary::; :nosignatures:; :toctree: ../generated/. set_figure_params; ```. An instance of the {class}`~scanpy._settings.ScanpyConfig` is available as `scanpy.settings` and allows configuring Scanpy. ```{eval-rst}; .. autosummary::; :nosignatures:; :toctree: ../generated/. _settings.ScanpyConfig; ```. Some selected settings are discussed in the following. Influence the global behavior of plotting functions. In non-interactive scripts,; you'd usually want to set `settings.autoshow` to `False`. % no :toctree: here because they are linked under the class. ```{eval-rst}; .. autosummary::; :nosignatures:. ~_settings.ScanpyConfig.autoshow; ~_settings.ScanpyConfig.autosave; ```. The default directories for saving figures, caching files and storing datasets. ```{eval-rst}; .. autosummary::; :nosignatures:. ~_settings.ScanpyConfig.figdir; ~_settings.ScanpyConfig.cachedir; ~_settings.ScanpyConfig.datasetdir; ```. The verbosity of logging output, where verbosity levels have the following; meaning: 0='error', 1='warning', 2='info', 3='hint', 4=more details, 5=even more; details, etc. ```{eval-rst}; .. autosummary::; :nosignatures:. ~_settings.ScanpyConfig.verbosity; ```. Print versions of packages that might influence numerical results. ```{eval-rst}; .. autosummary::; :nosignatures:; :toctree: ../generated/. logging.print_header; logging.print_versions. ```; ",config,MatchSource.DOCS,scverse,scanpy,1.10.2,https://github.com/scverse/scanpy/tree/1.10.2/docs/api/settings.md:426,configuring,426,docs/api/settings.md,https://scanpy.readthedocs.io,https://github.com/scverse/scanpy/tree/1.10.2/docs/api/settings.md,1,['config'],['configuring'],"The ease with which the system can be adapted by adding, removing, or modifying features, or adjusting to new environments. This attribute involves assessing the time, cost, and impact of changes, considering factors like coupling, cohesion, and the scope of modifications.","
You are an expert in evaluating and categorizing quality attributes in software engineering. You possess the necessary skills to distinguish sentences that clearly relate to a given quality attribute from those that do not. 

Evaluate whether the content accurately aligns with its associated quality attribute, given the context provided. Your goal is to determine if the content makes sense in relation to the quality attribute description or if it is a false positive.

Data:

Quality Attribute: Modifiability
Attribute Description: The ease with which the system can be adapted by adding, removing, or modifying features, or adjusting to new environments. This attribute involves assessing the time, cost, and impact of changes, considering factors like coupling, cohesion, and the scope of modifications.
Content: (settings)=. ## Settings. ```{eval-rst}; .. currentmodule:: scanpy; ```. A convenience function for setting some default {obj}`matplotlib.rcParams` and a; high-resolution jupyter display backend useful for use in notebooks. ```{eval-rst}; .. autosummary::; :nosignatures:; :toctree: ../generated/. set_figure_params; ```. An instance of the {class}`~scanpy._settings.ScanpyConfig` is available as `scanpy.settings` and allows configuring Scanpy. ```{eval-rst}; .. autosummary::; :nosignatures:; :toctree: ../generated/. _settings.ScanpyConfig; ```. Some selected settings are discussed in the following. Influence the global behavior of plotting functions. In non-interactive scripts,; you'd usually want to set `settings.autoshow` to `False`. % no :toctree: here because they are linked under the class. ```{eval-rst}; .. autosummary::; :nosignatures:. ~_settings.ScanpyConfig.autoshow; ~_settings.ScanpyConfig.autosave; ```. The default directories for saving figures, caching files and storing datasets. ```{eval-rst}; .. autosummary::; :nosignatures:. ~_settings.ScanpyConfig.figdir; ~_settings.ScanpyConfig.cachedir; ~_settings.ScanpyConfig.datasetdir; ```. The verbosity of logging output, where verbosity levels have the following; meaning: 0='error', 1='warning', 2='info', 3='hint', 4=more details, 5=even more; details, etc. ```{eval-rst}; .. autosummary::; :nosignatures:. ~_settings.ScanpyConfig.verbosity; ```. Print versions of packages that might influence numerical results. ```{eval-rst}; .. autosummary::; :nosignatures:; :toctree: ../generated/. logging.print_header; logging.print_versions. ```; 

Instructions: 
1. Analyze the content and the attribute description.
2. Determine if the content accurately reflects the intended quality attribute in this context.
3. If it does, label it as `true_positive: true`; if not, mark it as a `true_positive: false`.
4. If the content consists only of logs with no other text, mark it as a `true_positive: false`. 
4. If the content partially consists of logs, focus on analyzing remaining text. 
5. Add `reasoning` why the content is a true or false positive.
",True,"The provided content discusses configuration settings and their purposes within a software system. It includes details about setting parameters like autoshow, figure directories, logging verbosity, and print versions. This context pertains to how easily one can adjust system settings without altering the core functionality. The ability to modify these settings is indicative of modifiability, which allows users to adapt the system to their needs by changing or adding configurations. Therefore, this content accurately reflects the quality attribute of modifiability."
Modifiability,", 2)}` → `Mapping[str, Tuple[int, int]]`.; If you can’t use one of those, use a concrete class like `AnnData`.; If your parameter only accepts an enumeration of strings, specify them like so: `Literal['elem-1', 'elem-2']`. ### `Returns` section. There are three types of return sections – prose, tuple, and a mix of both. 1. Prose is for simple cases.; 2. Tuple return sections are formatted like parameters. Other than in numpydoc, each tuple is first characterized by the identifier and *not* by its type. Provide type annotation in the function header.; 3. Mix of prose and tuple is relevant in complicated cases, e.g. when you want to describe that you *added something as annotation to an \`AnnData\` object*. #### Examples. For simple cases, use prose as in; {func}`~scanpy.pp.normalize_total`. ```rst; Returns; -------; Returns dictionary with normalized copies of `adata.X` and `adata.layers`; or updates `adata` with normalized versions of the original; `adata.X` and `adata.layers`, depending on `inplace`.; ```. For tuple return values, you can use the standard numpydoc way of populating it,; e.g. as in {func}`~scanpy.pp.calculate_qc_metrics`.; Do not add types in the docstring, but specify them in the function signature:. ```python; def myfunc(...) -> tuple[int, str]:; """"""; ...; Returns; -------; one_identifier; Description.; second_identifier; Description 2.; """"""; ...; ```. Many functions also just modify parts of the passed AnnData object, like e.g. {func}`~scanpy.tl.dpt`.; You can then combine prose and lists to best describe what happens. ```rst; Returns; -------; Depending on `copy`, returns or updates `adata` with the following fields. If `n_branchings==0`, no field `dpt_groups` will be written. dpt_pseudotime : :class:`~pandas.Series` (`adata.obs`, dtype `float`); Array of dim (number of samples) that stores the pseudotime of each; cell, that is, the DPT distance with respect to the root cell.; dpt_groups : :class:`pandas.Series` (`adata.obs`, dtype `category`); ",layers,MatchSource.DOCS,scverse,scanpy,1.10.2,https://github.com/scverse/scanpy/tree/1.10.2/docs/dev/documentation.md:5596,layers,5596,docs/dev/documentation.md,https://scanpy.readthedocs.io,https://github.com/scverse/scanpy/tree/1.10.2/docs/dev/documentation.md,1,['layers'],['layers'],"The ease with which the system can be adapted by adding, removing, or modifying features, or adjusting to new environments. This attribute involves assessing the time, cost, and impact of changes, considering factors like coupling, cohesion, and the scope of modifications.","
You are an expert in evaluating and categorizing quality attributes in software engineering. You possess the necessary skills to distinguish sentences that clearly relate to a given quality attribute from those that do not. 

Evaluate whether the content accurately aligns with its associated quality attribute, given the context provided. Your goal is to determine if the content makes sense in relation to the quality attribute description or if it is a false positive.

Data:

Quality Attribute: Modifiability
Attribute Description: The ease with which the system can be adapted by adding, removing, or modifying features, or adjusting to new environments. This attribute involves assessing the time, cost, and impact of changes, considering factors like coupling, cohesion, and the scope of modifications.
Content: , 2)}` → `Mapping[str, Tuple[int, int]]`.; If you can’t use one of those, use a concrete class like `AnnData`.; If your parameter only accepts an enumeration of strings, specify them like so: `Literal['elem-1', 'elem-2']`. ### `Returns` section. There are three types of return sections – prose, tuple, and a mix of both. 1. Prose is for simple cases.; 2. Tuple return sections are formatted like parameters. Other than in numpydoc, each tuple is first characterized by the identifier and *not* by its type. Provide type annotation in the function header.; 3. Mix of prose and tuple is relevant in complicated cases, e.g. when you want to describe that you *added something as annotation to an \`AnnData\` object*. #### Examples. For simple cases, use prose as in; {func}`~scanpy.pp.normalize_total`. ```rst; Returns; -------; Returns dictionary with normalized copies of `adata.X` and `adata.layers`; or updates `adata` with normalized versions of the original; `adata.X` and `adata.layers`, depending on `inplace`.; ```. For tuple return values, you can use the standard numpydoc way of populating it,; e.g. as in {func}`~scanpy.pp.calculate_qc_metrics`.; Do not add types in the docstring, but specify them in the function signature:. ```python; def myfunc(...) -> tuple[int, str]:; """"""; ...; Returns; -------; one_identifier; Description.; second_identifier; Description 2.; """"""; ...; ```. Many functions also just modify parts of the passed AnnData object, like e.g. {func}`~scanpy.tl.dpt`.; You can then combine prose and lists to best describe what happens. ```rst; Returns; -------; Depending on `copy`, returns or updates `adata` with the following fields. If `n_branchings==0`, no field `dpt_groups` will be written. dpt_pseudotime : :class:`~pandas.Series` (`adata.obs`, dtype `float`); Array of dim (number of samples) that stores the pseudotime of each; cell, that is, the DPT distance with respect to the root cell.; dpt_groups : :class:`pandas.Series` (`adata.obs`, dtype `category`); 

Instructions: 
1. Analyze the content and the attribute description.
2. Determine if the content accurately reflects the intended quality attribute in this context.
3. If it does, label it as `true_positive: true`; if not, mark it as a `true_positive: false`.
4. If the content consists only of logs with no other text, mark it as a `true_positive: false`. 
4. If the content partially consists of logs, focus on analyzing remaining text. 
5. Add `reasoning` why the content is a true or false positive.
",False,"The content provided does not directly relate to modifiability, which refers to the ease of adapting a system by adding, removing, or modifying features. The given text discusses function return types and documentation conventions for functions in Python, specifically regarding return sections in docstrings. It mentions different types of return sections such as prose and tuples, providing examples like `scanpy.pp.normalize_total` and `scanpy.tl.dpt`. While this information is useful for software development practices, it does not address how the system can be easily modified or adapted, nor does it relate to factors like coupling or cohesion. Therefore, it does not align with the definition of modifiability."
Modifiability,"- {func}`~scanpy.experimental.pp.normalize_pearson_residuals` for Pearson Residuals normalization; - {func}`~scanpy.experimental.pp.highly_variable_genes` for HVG selection with Pearson Residuals; - {func}`~scanpy.experimental.pp.normalize_pearson_residuals_pca` for Pearson Residuals normalization and dimensionality reduction with PCA; - {func}`~scanpy.experimental.pp.recipe_pearson_residuals` for Pearson Residuals normalization, HVG selection and dimensionality reduction with PCA. ```{rubric} Features; ```. - {func}`~scanpy.tl.filter_rank_genes_groups` now allows to filter with absolute values of log fold change {pr}`1649` {smaller}`S Rybakov`; - `_choose_representation` now subsets the provided representation to n_pcs, regardless of the name of the provided representation (should affect mostly {func}`~scanpy.pp.neighbors`) {pr}`2179` {smaller}`I Virshup` {smaller}`PG Majev`; - {func}`scanpy.pp.scrublet` (and related functions) can now be used on `AnnData` objects containing multiple batches {pr}`1965` {smaller}`J Manning`; - Number of variables plotted with {func}`~scanpy.pl.pca_loadings` can now be controlled with `n_points` argument. Additionally, variables are no longer repeated if the anndata has less than 30 variables {pr}`2075` {smaller}`Yves33`; - Dask arrays now work with {func}`scanpy.pp.normalize_total` {pr}`1663` {smaller}`G Buckley, I Virshup`; - {func}`~scanpy.pl.embedding_density` now allows more than 10 groups {pr}`1936` {smaller}`A Wolf`; - Embedding plots can now pass `colorbar_loc` to specify the location of colorbar legend, or pass `None` to not show a colorbar {pr}`1821` {smaller}`A Schaar` {smaller}`I Virshup`; - Embedding plots now have a `dimensions` argument, which lets users select which dimensions of their embedding to plot and uses the same broadcasting rules as other arguments {pr}`1538` {smaller}`I Virshup`; - {func}`~scanpy.logging.print_versions` now uses `session_info` {pr}`2089` {smaller}`P Angerer` {smaller}`I Virshup`. ```{rubric",variab,MatchSource.DOCS,scverse,scanpy,1.10.2,https://github.com/scverse/scanpy/tree/1.10.2/docs/release-notes/1.9.0.md:1700,variables,1700,docs/release-notes/1.9.0.md,https://scanpy.readthedocs.io,https://github.com/scverse/scanpy/tree/1.10.2/docs/release-notes/1.9.0.md,1,['variab'],['variables'],"The ease with which the system can be adapted by adding, removing, or modifying features, or adjusting to new environments. This attribute involves assessing the time, cost, and impact of changes, considering factors like coupling, cohesion, and the scope of modifications.","
You are an expert in evaluating and categorizing quality attributes in software engineering. You possess the necessary skills to distinguish sentences that clearly relate to a given quality attribute from those that do not. 

Evaluate whether the content accurately aligns with its associated quality attribute, given the context provided. Your goal is to determine if the content makes sense in relation to the quality attribute description or if it is a false positive.

Data:

Quality Attribute: Modifiability
Attribute Description: The ease with which the system can be adapted by adding, removing, or modifying features, or adjusting to new environments. This attribute involves assessing the time, cost, and impact of changes, considering factors like coupling, cohesion, and the scope of modifications.
Content: - {func}`~scanpy.experimental.pp.normalize_pearson_residuals` for Pearson Residuals normalization; - {func}`~scanpy.experimental.pp.highly_variable_genes` for HVG selection with Pearson Residuals; - {func}`~scanpy.experimental.pp.normalize_pearson_residuals_pca` for Pearson Residuals normalization and dimensionality reduction with PCA; - {func}`~scanpy.experimental.pp.recipe_pearson_residuals` for Pearson Residuals normalization, HVG selection and dimensionality reduction with PCA. ```{rubric} Features; ```. - {func}`~scanpy.tl.filter_rank_genes_groups` now allows to filter with absolute values of log fold change {pr}`1649` {smaller}`S Rybakov`; - `_choose_representation` now subsets the provided representation to n_pcs, regardless of the name of the provided representation (should affect mostly {func}`~scanpy.pp.neighbors`) {pr}`2179` {smaller}`I Virshup` {smaller}`PG Majev`; - {func}`scanpy.pp.scrublet` (and related functions) can now be used on `AnnData` objects containing multiple batches {pr}`1965` {smaller}`J Manning`; - Number of variables plotted with {func}`~scanpy.pl.pca_loadings` can now be controlled with `n_points` argument. Additionally, variables are no longer repeated if the anndata has less than 30 variables {pr}`2075` {smaller}`Yves33`; - Dask arrays now work with {func}`scanpy.pp.normalize_total` {pr}`1663` {smaller}`G Buckley, I Virshup`; - {func}`~scanpy.pl.embedding_density` now allows more than 10 groups {pr}`1936` {smaller}`A Wolf`; - Embedding plots can now pass `colorbar_loc` to specify the location of colorbar legend, or pass `None` to not show a colorbar {pr}`1821` {smaller}`A Schaar` {smaller}`I Virshup`; - Embedding plots now have a `dimensions` argument, which lets users select which dimensions of their embedding to plot and uses the same broadcasting rules as other arguments {pr}`1538` {smaller}`I Virshup`; - {func}`~scanpy.logging.print_versions` now uses `session_info` {pr}`2089` {smaller}`P Angerer` {smaller}`I Virshup`. ```{rubric

Instructions: 
1. Analyze the content and the attribute description.
2. Determine if the content accurately reflects the intended quality attribute in this context.
3. If it does, label it as `true_positive: true`; if not, mark it as a `true_positive: false`.
4. If the content consists only of logs with no other text, mark it as a `true_positive: false`. 
4. If the content partially consists of logs, focus on analyzing remaining text. 
5. Add `reasoning` why the content is a true or false positive.
",True,"Based on the provided context and analysis, the content discusses various software features, bug fixes, updates, and new functionalities in the scanpy library. These include modifications such as allowing users to filter genes with specific criteria, improvements in data processing functions, and enhancements in visualization tools. The descriptions of these changes align with the concept of modifiability as they demonstrate how the system can be adapted or adjusted through updates and feature additions. Therefore, the content accurately reflects the quality attribute of modifiability."
Modifiability,"a bugfix release) or releases (in case of a major/minor release).; For bugfix releases, this should have `on-merge: backport to 0.<minor>.x`,; so the [meeseeksdev][] bot will create a backport PR. See {doc}`versioning` for more info.; - Clear out and close the milestone you just made a release for. After a *major* or *minor* release has been made:. - Tweet about it! Announce it on Zulip! Announce it on Discourse! Think about making a bot for this! Maybe actually do that?; - Create a new release notes file for the next minor release. This should only be added to the dev branch.; - Tag the development branch. If you just released `1.7.0`, this would be `1.8.0.dev0`.; - Create a new branch for this release series, like `1.7.x`. This should get a new release notes file. [meeseeksdev]: https://meeseeksbox.github.io. ## Debugging the build process. If you changed something about the build process (e.g. [Hatchling’s build configuration][hatch-build]),; or something about the package’s structure,; you might want to manually check if the build and upload process behaves as expected:. ```shell; # Clear out old distributions; rm -r dist. # Build source distribution and wheel both; python -m build. # Now check those build artifacts; twine check dist/*. # List the wheel archive’s contents; bsdtar -tf dist/*.whl. ```. You can also upload the package to <test.pypi.org> ([tutorial][testpypi tutorial]). [testpypi tutorial]: https://packaging.python.org/en/latest/tutorials/packaging-projects/#uploading-the-distribution-archives. ```; twine upload --repository testpypi dist/*; ```. The above approximates what the [publish workflow][] does automatically for us.; If you want to replicate the process more exactly, make sure you are careful,; and create a version tag before building (make sure you delete it after uploading to TestPyPI!). [hatch-build]: https://hatch.pypa.io/latest/config/build/; [publish workflow]: https://github.com/scverse/scanpy/tree/main/.github/workflows/publish.yml;",config,MatchSource.DOCS,scverse,scanpy,1.10.2,https://github.com/scverse/scanpy/tree/1.10.2/docs/dev/release.md:1794,configuration,1794,docs/dev/release.md,https://scanpy.readthedocs.io,https://github.com/scverse/scanpy/tree/1.10.2/docs/dev/release.md,1,['config'],['configuration'],"The ease with which the system can be adapted by adding, removing, or modifying features, or adjusting to new environments. This attribute involves assessing the time, cost, and impact of changes, considering factors like coupling, cohesion, and the scope of modifications.","
You are an expert in evaluating and categorizing quality attributes in software engineering. You possess the necessary skills to distinguish sentences that clearly relate to a given quality attribute from those that do not. 

Evaluate whether the content accurately aligns with its associated quality attribute, given the context provided. Your goal is to determine if the content makes sense in relation to the quality attribute description or if it is a false positive.

Data:

Quality Attribute: Modifiability
Attribute Description: The ease with which the system can be adapted by adding, removing, or modifying features, or adjusting to new environments. This attribute involves assessing the time, cost, and impact of changes, considering factors like coupling, cohesion, and the scope of modifications.
Content: a bugfix release) or releases (in case of a major/minor release).; For bugfix releases, this should have `on-merge: backport to 0.<minor>.x`,; so the [meeseeksdev][] bot will create a backport PR. See {doc}`versioning` for more info.; - Clear out and close the milestone you just made a release for. After a *major* or *minor* release has been made:. - Tweet about it! Announce it on Zulip! Announce it on Discourse! Think about making a bot for this! Maybe actually do that?; - Create a new release notes file for the next minor release. This should only be added to the dev branch.; - Tag the development branch. If you just released `1.7.0`, this would be `1.8.0.dev0`.; - Create a new branch for this release series, like `1.7.x`. This should get a new release notes file. [meeseeksdev]: https://meeseeksbox.github.io. ## Debugging the build process. If you changed something about the build process (e.g. [Hatchling’s build configuration][hatch-build]),; or something about the package’s structure,; you might want to manually check if the build and upload process behaves as expected:. ```shell; # Clear out old distributions; rm -r dist. # Build source distribution and wheel both; python -m build. # Now check those build artifacts; twine check dist/*. # List the wheel archive’s contents; bsdtar -tf dist/*.whl. ```. You can also upload the package to <test.pypi.org> ([tutorial][testpypi tutorial]). [testpypi tutorial]: https://packaging.python.org/en/latest/tutorials/packaging-projects/#uploading-the-distribution-archives. ```; twine upload --repository testpypi dist/*; ```. The above approximates what the [publish workflow][] does automatically for us.; If you want to replicate the process more exactly, make sure you are careful,; and create a version tag before building (make sure you delete it after uploading to TestPyPI!). [hatch-build]: https://hatch.pypa.io/latest/config/build/; [publish workflow]: https://github.com/scverse/scanpy/tree/main/.github/workflows/publish.yml;

Instructions: 
1. Analyze the content and the attribute description.
2. Determine if the content accurately reflects the intended quality attribute in this context.
3. If it does, label it as `true_positive: true`; if not, mark it as a `true_positive: false`.
4. If the content consists only of logs with no other text, mark it as a `true_positive: false`. 
4. If the content partially consists of logs, focus on analyzing remaining text. 
5. Add `reasoning` why the content is a true or false positive.
",True,"The content discusses version control, release processes, and build steps which are related to modifiability because it involves changing versions, backporting fixes, and updating release milestones. Modifiability refers to how easily a system can be adapted, which includes changes like updating versions (e.g., from 1.7.0 to 1.8.0.dev0) and managing feature additions/removals through proper processes."
Modifiability,"er}`C Rands`; - Extended examples for differential expression plotting. {pr}`1529` {smaller}`F Ramirez`; \- See {func}`~scanpy.pl.rank_genes_groups_dotplot` or {func}`~scanpy.pl.rank_genes_groups_matrixplot` for examples. ```{rubric} Bug fixes; ```. - Fix {func}`scanpy.pl.paga_path` `TypeError` with recent versions of anndata {pr}`1047` {smaller}`P Angerer`; - Fix detection of whether IPython is running {pr}`1844` {smaller}`I Virshup`; - Fixed reproducibility of {func}`scanpy.tl.diffmap` (added random_state) {pr}`1858` {smaller}`I Kucinski`; - Fixed errors and warnings from embedding plots with small numbers of categories after `sns.set_palette` was called {pr}`1886` {smaller}`I Virshup`; - Fixed handling of `gene_symbols` argument in a number of `sc.pl.rank_genes_groups*` functions {pr}`1529` {smaller}`F Ramirez` {smaller}`I Virshup`; - Fixed handling of `use_raw` for `sc.tl.rank_genes_groups` when no `.raw` is present {pr}`1895` {smaller}`I Virshup`; - {func}`scanpy.pl.rank_genes_groups_violin` now works for `raw=False` {pr}`1669` {smaller}`M van den Beek`; - {func}`scanpy.pl.dotplot` now uses `smallest_dot` argument correctly {pr}`1771` {smaller}`S Flemming`. ```{rubric} Development processes; ```. - Switched to [flit] for building and deploying the package, a simple tool with an easy to understand command line interface and metadata {pr}`1527` {smaller}`P Angerer`; - Use [pre-commit](https://pre-commit.com) for style checks {pr}`1684` {pr}`1848` {smaller}`L Heumos` {smaller}`I Virshup`. ```{rubric} Deprecations; ```. - Dropped support for Python 3.6. [More details here](https://numpy.org/neps/nep-0029-deprecation_policy.html). {pr}`1897` {smaller}`I Virshup`; - Deprecated `layers` and `layers_norm` kwargs to {func}`~scanpy.pp.normalize_total` {pr}`1667` {smaller}`I Virshup`; - Deprecated `MulticoreTSNE` backend for {func}`scanpy.tl.tsne` {pr}`1854` {smaller}`I Virshup`. [docsearch]: https://docsearch.algolia.com/; [flit]: https://flit.readthedocs.io/en/latest/; ",layers,MatchSource.DOCS,scverse,scanpy,1.10.2,https://github.com/scverse/scanpy/tree/1.10.2/docs/release-notes/1.8.0.md:4055,layers,4055,docs/release-notes/1.8.0.md,https://scanpy.readthedocs.io,https://github.com/scverse/scanpy/tree/1.10.2/docs/release-notes/1.8.0.md,1,['layers'],['layers'],"The ease with which the system can be adapted by adding, removing, or modifying features, or adjusting to new environments. This attribute involves assessing the time, cost, and impact of changes, considering factors like coupling, cohesion, and the scope of modifications.","
You are an expert in evaluating and categorizing quality attributes in software engineering. You possess the necessary skills to distinguish sentences that clearly relate to a given quality attribute from those that do not. 

Evaluate whether the content accurately aligns with its associated quality attribute, given the context provided. Your goal is to determine if the content makes sense in relation to the quality attribute description or if it is a false positive.

Data:

Quality Attribute: Modifiability
Attribute Description: The ease with which the system can be adapted by adding, removing, or modifying features, or adjusting to new environments. This attribute involves assessing the time, cost, and impact of changes, considering factors like coupling, cohesion, and the scope of modifications.
Content: er}`C Rands`; - Extended examples for differential expression plotting. {pr}`1529` {smaller}`F Ramirez`; \- See {func}`~scanpy.pl.rank_genes_groups_dotplot` or {func}`~scanpy.pl.rank_genes_groups_matrixplot` for examples. ```{rubric} Bug fixes; ```. - Fix {func}`scanpy.pl.paga_path` `TypeError` with recent versions of anndata {pr}`1047` {smaller}`P Angerer`; - Fix detection of whether IPython is running {pr}`1844` {smaller}`I Virshup`; - Fixed reproducibility of {func}`scanpy.tl.diffmap` (added random_state) {pr}`1858` {smaller}`I Kucinski`; - Fixed errors and warnings from embedding plots with small numbers of categories after `sns.set_palette` was called {pr}`1886` {smaller}`I Virshup`; - Fixed handling of `gene_symbols` argument in a number of `sc.pl.rank_genes_groups*` functions {pr}`1529` {smaller}`F Ramirez` {smaller}`I Virshup`; - Fixed handling of `use_raw` for `sc.tl.rank_genes_groups` when no `.raw` is present {pr}`1895` {smaller}`I Virshup`; - {func}`scanpy.pl.rank_genes_groups_violin` now works for `raw=False` {pr}`1669` {smaller}`M van den Beek`; - {func}`scanpy.pl.dotplot` now uses `smallest_dot` argument correctly {pr}`1771` {smaller}`S Flemming`. ```{rubric} Development processes; ```. - Switched to [flit] for building and deploying the package, a simple tool with an easy to understand command line interface and metadata {pr}`1527` {smaller}`P Angerer`; - Use [pre-commit](https://pre-commit.com) for style checks {pr}`1684` {pr}`1848` {smaller}`L Heumos` {smaller}`I Virshup`. ```{rubric} Deprecations; ```. - Dropped support for Python 3.6. [More details here](https://numpy.org/neps/nep-0029-deprecation_policy.html). {pr}`1897` {smaller}`I Virshup`; - Deprecated `layers` and `layers_norm` kwargs to {func}`~scanpy.pp.normalize_total` {pr}`1667` {smaller}`I Virshup`; - Deprecated `MulticoreTSNE` backend for {func}`scanpy.tl.tsne` {pr}`1854` {smaller}`I Virshup`. [docsearch]: https://docsearch.algolia.com/; [flit]: https://flit.readthedocs.io/en/latest/; 

Instructions: 
1. Analyze the content and the attribute description.
2. Determine if the content accurately reflects the intended quality attribute in this context.
3. If it does, label it as `true_positive: true`; if not, mark it as a `true_positive: false`.
4. If the content consists only of logs with no other text, mark it as a `true_positive: false`. 
4. If the content partially consists of logs, focus on analyzing remaining text. 
5. Add `reasoning` why the content is a true or false positive.
",True,"The content provided is mainly bug fixes and development process changes such as switching to flit for building the package and adopting pre-commit for style checks. These activities are related to software modifiability as they involve adapting the system by making changes, such as adding new features or modifying existing ones, which is part of assessing how easily the system can be adapted."
Modifiability,"g`s (like `dict`).; Always specify what these contain, e.g. `{'a': (1, 2)}` → `Mapping[str, Tuple[int, int]]`.; If you can’t use one of those, use a concrete class like `AnnData`.; If your parameter only accepts an enumeration of strings, specify them like so: `Literal['elem-1', 'elem-2']`. ### `Returns` section. There are three types of return sections – prose, tuple, and a mix of both. 1. Prose is for simple cases.; 2. Tuple return sections are formatted like parameters. Other than in numpydoc, each tuple is first characterized by the identifier and *not* by its type. Provide type annotation in the function header.; 3. Mix of prose and tuple is relevant in complicated cases, e.g. when you want to describe that you *added something as annotation to an \`AnnData\` object*. #### Examples. For simple cases, use prose as in; {func}`~scanpy.pp.normalize_total`. ```rst; Returns; -------; Returns dictionary with normalized copies of `adata.X` and `adata.layers`; or updates `adata` with normalized versions of the original; `adata.X` and `adata.layers`, depending on `inplace`.; ```. For tuple return values, you can use the standard numpydoc way of populating it,; e.g. as in {func}`~scanpy.pp.calculate_qc_metrics`.; Do not add types in the docstring, but specify them in the function signature:. ```python; def myfunc(...) -> tuple[int, str]:; """"""; ...; Returns; -------; one_identifier; Description.; second_identifier; Description 2.; """"""; ...; ```. Many functions also just modify parts of the passed AnnData object, like e.g. {func}`~scanpy.tl.dpt`.; You can then combine prose and lists to best describe what happens. ```rst; Returns; -------; Depending on `copy`, returns or updates `adata` with the following fields. If `n_branchings==0`, no field `dpt_groups` will be written. dpt_pseudotime : :class:`~pandas.Series` (`adata.obs`, dtype `float`); Array of dim (number of samples) that stores the pseudotime of each; cell, that is, the DPT distance with respect to the root cell.; d",layers,MatchSource.DOCS,scverse,scanpy,1.10.2,https://github.com/scverse/scanpy/tree/1.10.2/docs/dev/documentation.md:5505,layers,5505,docs/dev/documentation.md,https://scanpy.readthedocs.io,https://github.com/scverse/scanpy/tree/1.10.2/docs/dev/documentation.md,1,['layers'],['layers'],"The ease with which the system can be adapted by adding, removing, or modifying features, or adjusting to new environments. This attribute involves assessing the time, cost, and impact of changes, considering factors like coupling, cohesion, and the scope of modifications.","
You are an expert in evaluating and categorizing quality attributes in software engineering. You possess the necessary skills to distinguish sentences that clearly relate to a given quality attribute from those that do not. 

Evaluate whether the content accurately aligns with its associated quality attribute, given the context provided. Your goal is to determine if the content makes sense in relation to the quality attribute description or if it is a false positive.

Data:

Quality Attribute: Modifiability
Attribute Description: The ease with which the system can be adapted by adding, removing, or modifying features, or adjusting to new environments. This attribute involves assessing the time, cost, and impact of changes, considering factors like coupling, cohesion, and the scope of modifications.
Content: g`s (like `dict`).; Always specify what these contain, e.g. `{'a': (1, 2)}` → `Mapping[str, Tuple[int, int]]`.; If you can’t use one of those, use a concrete class like `AnnData`.; If your parameter only accepts an enumeration of strings, specify them like so: `Literal['elem-1', 'elem-2']`. ### `Returns` section. There are three types of return sections – prose, tuple, and a mix of both. 1. Prose is for simple cases.; 2. Tuple return sections are formatted like parameters. Other than in numpydoc, each tuple is first characterized by the identifier and *not* by its type. Provide type annotation in the function header.; 3. Mix of prose and tuple is relevant in complicated cases, e.g. when you want to describe that you *added something as annotation to an \`AnnData\` object*. #### Examples. For simple cases, use prose as in; {func}`~scanpy.pp.normalize_total`. ```rst; Returns; -------; Returns dictionary with normalized copies of `adata.X` and `adata.layers`; or updates `adata` with normalized versions of the original; `adata.X` and `adata.layers`, depending on `inplace`.; ```. For tuple return values, you can use the standard numpydoc way of populating it,; e.g. as in {func}`~scanpy.pp.calculate_qc_metrics`.; Do not add types in the docstring, but specify them in the function signature:. ```python; def myfunc(...) -> tuple[int, str]:; """"""; ...; Returns; -------; one_identifier; Description.; second_identifier; Description 2.; """"""; ...; ```. Many functions also just modify parts of the passed AnnData object, like e.g. {func}`~scanpy.tl.dpt`.; You can then combine prose and lists to best describe what happens. ```rst; Returns; -------; Depending on `copy`, returns or updates `adata` with the following fields. If `n_branchings==0`, no field `dpt_groups` will be written. dpt_pseudotime : :class:`~pandas.Series` (`adata.obs`, dtype `float`); Array of dim (number of samples) that stores the pseudotime of each; cell, that is, the DPT distance with respect to the root cell.; d

Instructions: 
1. Analyze the content and the attribute description.
2. Determine if the content accurately reflects the intended quality attribute in this context.
3. If it does, label it as `true_positive: true`; if not, mark it as a `true_positive: false`.
4. If the content consists only of logs with no other text, mark it as a `true_positive: false`. 
4. If the content partially consists of logs, focus on analyzing remaining text. 
5. Add `reasoning` why the content is a true or false positive.
",True,"The content discusses return types and descriptions for functions, which relates to how systems can be modified by adding, removing, or modifying features. This aligns with modifiability as it involves adjustments in code structure and functionality."
Modifiability,"hould remain the same either way.; - Are you optimizing a method? Check that it's results are the same as a gold standard implementation. ### Performance. It's more important that you're accurately testing the code works than it is that test suite runs quickly.; That said, it's nice when the test suite runs fast. You can check how long tests take to run by passing `--durations=0` argument to `pytest`.; Hopefully your new tests won't show up on top!; Some approaches to this include:. - Is there a common setup/ computation happening in each test? Consider caching these in a [scoped test fixture](https://docs.pytest.org/en/stable/fixture.html#sharing-test-data).; - Is the behaviour you're testing for dependent on the size of the data? If not, consider reducing it. ### Plotting tests. While computational functions will return arrays and values, it can be harder to work with the output of plotting functions. To make this easier, we use the `image_comparer` fixture for comparing plotting results (search the test suite for example usage).; This is used to check that generated plots look the same as they did previously.; Reference images (the expected output) are stored as `expected.png` to relevant tests directory under `scanpy/tests/_images`.; When run, the test suite will generate `actual.png` files for each check.; These files are compared, and if the `actual` plot differs from the reference plot, a `diff` of the images is also generated.; Paths for all these files will be reported when a test fails, and images for failed plots can be viewed via the :doc:`CI interface <ci>`. A common gotcha here is that plots often change slightly on different machines/ OSs.; `scanpy`'s test suite sets a number of environment variables to ensure as similar of plots as possible.; When adding new reference plots, the recommended workflow is to write the test as though an expected result already exists, run it once to generate the output, then move that output to the reference directory.; ",variab,MatchSource.DOCS,scverse,scanpy,1.10.2,https://github.com/scverse/scanpy/tree/1.10.2/docs/dev/testing.md:4622,variables,4622,docs/dev/testing.md,https://scanpy.readthedocs.io,https://github.com/scverse/scanpy/tree/1.10.2/docs/dev/testing.md,1,['variab'],['variables'],"The ease with which the system can be adapted by adding, removing, or modifying features, or adjusting to new environments. This attribute involves assessing the time, cost, and impact of changes, considering factors like coupling, cohesion, and the scope of modifications.","
You are an expert in evaluating and categorizing quality attributes in software engineering. You possess the necessary skills to distinguish sentences that clearly relate to a given quality attribute from those that do not. 

Evaluate whether the content accurately aligns with its associated quality attribute, given the context provided. Your goal is to determine if the content makes sense in relation to the quality attribute description or if it is a false positive.

Data:

Quality Attribute: Modifiability
Attribute Description: The ease with which the system can be adapted by adding, removing, or modifying features, or adjusting to new environments. This attribute involves assessing the time, cost, and impact of changes, considering factors like coupling, cohesion, and the scope of modifications.
Content: hould remain the same either way.; - Are you optimizing a method? Check that it's results are the same as a gold standard implementation. ### Performance. It's more important that you're accurately testing the code works than it is that test suite runs quickly.; That said, it's nice when the test suite runs fast. You can check how long tests take to run by passing `--durations=0` argument to `pytest`.; Hopefully your new tests won't show up on top!; Some approaches to this include:. - Is there a common setup/ computation happening in each test? Consider caching these in a [scoped test fixture](https://docs.pytest.org/en/stable/fixture.html#sharing-test-data).; - Is the behaviour you're testing for dependent on the size of the data? If not, consider reducing it. ### Plotting tests. While computational functions will return arrays and values, it can be harder to work with the output of plotting functions. To make this easier, we use the `image_comparer` fixture for comparing plotting results (search the test suite for example usage).; This is used to check that generated plots look the same as they did previously.; Reference images (the expected output) are stored as `expected.png` to relevant tests directory under `scanpy/tests/_images`.; When run, the test suite will generate `actual.png` files for each check.; These files are compared, and if the `actual` plot differs from the reference plot, a `diff` of the images is also generated.; Paths for all these files will be reported when a test fails, and images for failed plots can be viewed via the :doc:`CI interface <ci>`. A common gotcha here is that plots often change slightly on different machines/ OSs.; `scanpy`'s test suite sets a number of environment variables to ensure as similar of plots as possible.; When adding new reference plots, the recommended workflow is to write the test as though an expected result already exists, run it once to generate the output, then move that output to the reference directory.; 

Instructions: 
1. Analyze the content and the attribute description.
2. Determine if the content accurately reflects the intended quality attribute in this context.
3. If it does, label it as `true_positive: true`; if not, mark it as a `true_positive: false`.
4. If the content consists only of logs with no other text, mark it as a `true_positive: false`. 
4. If the content partially consists of logs, focus on analyzing remaining text. 
5. Add `reasoning` why the content is a true or false positive.
",True,"The content discusses testing practices like reducing test data size and using fixtures for caching common computations, which relates to modifiability by ensuring tests can be easily adjusted or modified when needed. The mention of caching in fixtures supports modifiability as changes to tests are manageable and consistent."
Modifiability,"ize_pearson_residuals_pca` for Pearson Residuals normalization and dimensionality reduction with PCA; - {func}`~scanpy.experimental.pp.recipe_pearson_residuals` for Pearson Residuals normalization, HVG selection and dimensionality reduction with PCA. ```{rubric} Features; ```. - {func}`~scanpy.tl.filter_rank_genes_groups` now allows to filter with absolute values of log fold change {pr}`1649` {smaller}`S Rybakov`; - `_choose_representation` now subsets the provided representation to n_pcs, regardless of the name of the provided representation (should affect mostly {func}`~scanpy.pp.neighbors`) {pr}`2179` {smaller}`I Virshup` {smaller}`PG Majev`; - {func}`scanpy.pp.scrublet` (and related functions) can now be used on `AnnData` objects containing multiple batches {pr}`1965` {smaller}`J Manning`; - Number of variables plotted with {func}`~scanpy.pl.pca_loadings` can now be controlled with `n_points` argument. Additionally, variables are no longer repeated if the anndata has less than 30 variables {pr}`2075` {smaller}`Yves33`; - Dask arrays now work with {func}`scanpy.pp.normalize_total` {pr}`1663` {smaller}`G Buckley, I Virshup`; - {func}`~scanpy.pl.embedding_density` now allows more than 10 groups {pr}`1936` {smaller}`A Wolf`; - Embedding plots can now pass `colorbar_loc` to specify the location of colorbar legend, or pass `None` to not show a colorbar {pr}`1821` {smaller}`A Schaar` {smaller}`I Virshup`; - Embedding plots now have a `dimensions` argument, which lets users select which dimensions of their embedding to plot and uses the same broadcasting rules as other arguments {pr}`1538` {smaller}`I Virshup`; - {func}`~scanpy.logging.print_versions` now uses `session_info` {pr}`2089` {smaller}`P Angerer` {smaller}`I Virshup`. ```{rubric} Ecosystem; ```. Multiple packages have been added to our ecosystem page, including:. - [decoupler](https://github.com/saezlab/decoupler-py) a for footprint analysis and pathway enrichement {pr}`2186` {smaller}`PB Mompel`; - [dandelion",variab,MatchSource.DOCS,scverse,scanpy,1.10.2,https://github.com/scverse/scanpy/tree/1.10.2/docs/release-notes/1.9.0.md:1817,variables,1817,docs/release-notes/1.9.0.md,https://scanpy.readthedocs.io,https://github.com/scverse/scanpy/tree/1.10.2/docs/release-notes/1.9.0.md,2,['variab'],['variables'],"The ease with which the system can be adapted by adding, removing, or modifying features, or adjusting to new environments. This attribute involves assessing the time, cost, and impact of changes, considering factors like coupling, cohesion, and the scope of modifications.","
You are an expert in evaluating and categorizing quality attributes in software engineering. You possess the necessary skills to distinguish sentences that clearly relate to a given quality attribute from those that do not. 

Evaluate whether the content accurately aligns with its associated quality attribute, given the context provided. Your goal is to determine if the content makes sense in relation to the quality attribute description or if it is a false positive.

Data:

Quality Attribute: Modifiability
Attribute Description: The ease with which the system can be adapted by adding, removing, or modifying features, or adjusting to new environments. This attribute involves assessing the time, cost, and impact of changes, considering factors like coupling, cohesion, and the scope of modifications.
Content: ize_pearson_residuals_pca` for Pearson Residuals normalization and dimensionality reduction with PCA; - {func}`~scanpy.experimental.pp.recipe_pearson_residuals` for Pearson Residuals normalization, HVG selection and dimensionality reduction with PCA. ```{rubric} Features; ```. - {func}`~scanpy.tl.filter_rank_genes_groups` now allows to filter with absolute values of log fold change {pr}`1649` {smaller}`S Rybakov`; - `_choose_representation` now subsets the provided representation to n_pcs, regardless of the name of the provided representation (should affect mostly {func}`~scanpy.pp.neighbors`) {pr}`2179` {smaller}`I Virshup` {smaller}`PG Majev`; - {func}`scanpy.pp.scrublet` (and related functions) can now be used on `AnnData` objects containing multiple batches {pr}`1965` {smaller}`J Manning`; - Number of variables plotted with {func}`~scanpy.pl.pca_loadings` can now be controlled with `n_points` argument. Additionally, variables are no longer repeated if the anndata has less than 30 variables {pr}`2075` {smaller}`Yves33`; - Dask arrays now work with {func}`scanpy.pp.normalize_total` {pr}`1663` {smaller}`G Buckley, I Virshup`; - {func}`~scanpy.pl.embedding_density` now allows more than 10 groups {pr}`1936` {smaller}`A Wolf`; - Embedding plots can now pass `colorbar_loc` to specify the location of colorbar legend, or pass `None` to not show a colorbar {pr}`1821` {smaller}`A Schaar` {smaller}`I Virshup`; - Embedding plots now have a `dimensions` argument, which lets users select which dimensions of their embedding to plot and uses the same broadcasting rules as other arguments {pr}`1538` {smaller}`I Virshup`; - {func}`~scanpy.logging.print_versions` now uses `session_info` {pr}`2089` {smaller}`P Angerer` {smaller}`I Virshup`. ```{rubric} Ecosystem; ```. Multiple packages have been added to our ecosystem page, including:. - [decoupler](https://github.com/saezlab/decoupler-py) a for footprint analysis and pathway enrichement {pr}`2186` {smaller}`PB Mompel`; - [dandelion

Instructions: 
1. Analyze the content and the attribute description.
2. Determine if the content accurately reflects the intended quality attribute in this context.
3. If it does, label it as `true_positive: true`; if not, mark it as a `true_positive: false`.
4. If the content consists only of logs with no other text, mark it as a `true_positive: false`. 
4. If the content partially consists of logs, focus on analyzing remaining text. 
5. Add `reasoning` why the content is a true or false positive.
",True,"The provided content discusses updates and features in scanpy regarding normalization, dimensionality reduction, and embedding plots, which relate to the modifiability as it deals with system adaptability by allowing modifications such as adding new functions and features."
Modifiability,"le` params. They also align at the bottom of the image and do not shrink if the dotplot image is smaller.; > - Allow plotting genes in rows and categories in columns (`swap_axes`).; > - Using {class}`~scanpy.pl.DotPlot`, the `dot_edge_color` and line width can be modified, a grid can be added, and other modifications are enabled.; > - A new style was added in which the dots are replaced by an empty circle and the square behind the circle is colored (like in matrixplots). - {func}`~scanpy.pl.stacked_violin` changes:. > - Violin colors can be colored based on average gene expression as in dotplots.; > - The linewidth of the violin plots is thinner.; > - Removed the tics for the y-axis as they tend to overlap with each other. Using the style method they can be displayed if needed. ```{rubric} Additions; ```. - {func}`~anndata.concat` is now exported from scanpy, see {doc}`anndata:concatenation` for more info. {pr}`1338` {smaller}`I Virshup`; - Added highly variable gene selection strategy from Seurat v3 {pr}`1204` {smaller}`A Gayoso`; - Added [CellRank](https://github.com/theislab/cellrank/) to scanpy ecosystem {pr}`1304` {smaller}`giovp`; - Added `backup_url` param to {func}`~scanpy.read_10x_h5` {pr}`1296` {smaller}`A Gayoso`; - Allow prefix for {func}`~scanpy.read_10x_mtx` {pr}`1250` {smaller}`G Sturm`; - Optional tie correction for the `'wilcoxon'` method in {func}`~scanpy.tl.rank_genes_groups` {pr}`1330` {smaller}`S Rybakov`; - Use `sinfo` for {func}`~scanpy.logging.print_versions` and add {func}`~scanpy.logging.print_header` to do what it previously did. {pr}`1338` {smaller}`I Virshup` {pr}`1373`. ```{rubric} Bug fixes; ```. - Avoid warning in {func}`~scanpy.tl.rank_genes_groups` if 't-test' is passed {pr}`1303` {smaller}`A Wolf`; - Restrict sphinx version to \<3.1, >3.0 {pr}`1297` {smaller}`I Virshup`; - Clean up `_ranks` and fix `dendrogram` for scipy 1.5 {pr}`1290` {smaller}`S Rybakov`; - Use `.raw` to translate gene symbols if applicable {pr}`1278` {smaller}`E ",variab,MatchSource.DOCS,scverse,scanpy,1.10.2,https://github.com/scverse/scanpy/tree/1.10.2/docs/release-notes/1.6.0.md:2511,variable,2511,docs/release-notes/1.6.0.md,https://scanpy.readthedocs.io,https://github.com/scverse/scanpy/tree/1.10.2/docs/release-notes/1.6.0.md,1,['variab'],['variable'],"The ease with which the system can be adapted by adding, removing, or modifying features, or adjusting to new environments. This attribute involves assessing the time, cost, and impact of changes, considering factors like coupling, cohesion, and the scope of modifications.","
You are an expert in evaluating and categorizing quality attributes in software engineering. You possess the necessary skills to distinguish sentences that clearly relate to a given quality attribute from those that do not. 

Evaluate whether the content accurately aligns with its associated quality attribute, given the context provided. Your goal is to determine if the content makes sense in relation to the quality attribute description or if it is a false positive.

Data:

Quality Attribute: Modifiability
Attribute Description: The ease with which the system can be adapted by adding, removing, or modifying features, or adjusting to new environments. This attribute involves assessing the time, cost, and impact of changes, considering factors like coupling, cohesion, and the scope of modifications.
Content: le` params. They also align at the bottom of the image and do not shrink if the dotplot image is smaller.; > - Allow plotting genes in rows and categories in columns (`swap_axes`).; > - Using {class}`~scanpy.pl.DotPlot`, the `dot_edge_color` and line width can be modified, a grid can be added, and other modifications are enabled.; > - A new style was added in which the dots are replaced by an empty circle and the square behind the circle is colored (like in matrixplots). - {func}`~scanpy.pl.stacked_violin` changes:. > - Violin colors can be colored based on average gene expression as in dotplots.; > - The linewidth of the violin plots is thinner.; > - Removed the tics for the y-axis as they tend to overlap with each other. Using the style method they can be displayed if needed. ```{rubric} Additions; ```. - {func}`~anndata.concat` is now exported from scanpy, see {doc}`anndata:concatenation` for more info. {pr}`1338` {smaller}`I Virshup`; - Added highly variable gene selection strategy from Seurat v3 {pr}`1204` {smaller}`A Gayoso`; - Added [CellRank](https://github.com/theislab/cellrank/) to scanpy ecosystem {pr}`1304` {smaller}`giovp`; - Added `backup_url` param to {func}`~scanpy.read_10x_h5` {pr}`1296` {smaller}`A Gayoso`; - Allow prefix for {func}`~scanpy.read_10x_mtx` {pr}`1250` {smaller}`G Sturm`; - Optional tie correction for the `'wilcoxon'` method in {func}`~scanpy.tl.rank_genes_groups` {pr}`1330` {smaller}`S Rybakov`; - Use `sinfo` for {func}`~scanpy.logging.print_versions` and add {func}`~scanpy.logging.print_header` to do what it previously did. {pr}`1338` {smaller}`I Virshup` {pr}`1373`. ```{rubric} Bug fixes; ```. - Avoid warning in {func}`~scanpy.tl.rank_genes_groups` if 't-test' is passed {pr}`1303` {smaller}`A Wolf`; - Restrict sphinx version to \<3.1, >3.0 {pr}`1297` {smaller}`I Virshup`; - Clean up `_ranks` and fix `dendrogram` for scipy 1.5 {pr}`1290` {smaller}`S Rybakov`; - Use `.raw` to translate gene symbols if applicable {pr}`1278` {smaller}`E 

Instructions: 
1. Analyze the content and the attribute description.
2. Determine if the content accurately reflects the intended quality attribute in this context.
3. If it does, label it as `true_positive: true`; if not, mark it as a `true_positive: false`.
4. If the content consists only of logs with no other text, mark it as a `true_positive: false`. 
4. If the content partially consists of logs, focus on analyzing remaining text. 
5. Add `reasoning` why the content is a true or false positive.
",True,"The content discusses modifications and additions to the system, such as new features (e.g., CellRank addition), new parameters, bug fixes, and style changes which align with modifiability."
Modifiability,"old-change, fractions calculation for filter_rank_genes_groups {pr}`1391` {smaller}`S Rybakov`; - Fixed bug where `score_genes` would error if one gene was passed {pr}`1398` {smaller}`I Virshup`; - Fixed `log1p` inplace on integer dense arrays {pr}`1400` {smaller}`I Virshup`; - Fix docstring formatting for {func}`~scanpy.tl.rank_genes_groups` {pr}`1417` {smaller}`P Weiler`; - Removed `` PendingDeprecationWarning`s from use of `np.matrix `` {pr}`1424` {smaller}`P Weiler`; - Fixed indexing byg in `~scanpy.pp.highly_variable_genes` {pr}`1456` {smaller}`V Bergen`; - Fix default number of genes for marker_genes_overlap {pr}`1464` {smaller}`MD Luecken`; - Fixed passing `groupby` and `dendrogram_key` to {func}`~scanpy.tl.dendrogram` {pr}`1465` {smaller}`M Varma`; - Fixed download path of `pbmc3k_processed` {pr}`1472` {smaller}`D Strobl`; - Better error message when computing DE with a group of size 1 {pr}`1490` {smaller}`J Manning`; - Update cugraph API usage for v0.16 {pr}`1494` {smaller}`R Ilango`; - Fixed `marker_gene_overlap` default value for `top_n_markers` {pr}`1464` {smaller}`MD Luecken`; - Pass `random_state` to RAPIDs UMAP {pr}`1474` {smaller}`C Nolet`; - Fixed `anndata` version requirement for {func}`~anndata.concat` (re-exported from scanpy as `sc.concat`) {pr}`1491` {smaller}`I Virshup`; - Fixed the width of the progress bar when downloading data {pr}`1507` {smaller}`M Klein`; - Updated link for `moignard15` dataset {pr}`1542` {smaller}`I Virshup`; - Fixed bug where calling `set_figure_params` could block if IPython was installed, but not used. {pr}`1547` {smaller}`I Virshup`; - {func}`~scanpy.pl.violin` no longer fails if `.raw` not present {pr}`1548` {smaller}`I Virshup`; - {func}`~scanpy.pl.spatial` refactoring and better handling of spatial data {pr}`1512` {smaller}`G Palla`; - {func}`~scanpy.pp.pca` works with `chunked=True` again {pr}`1592` {smaller}`I Virshup`; - {func}`~scanpy.tl.ingest` now works with umap-learn 0.5.0 {pr}`1601` {smaller}`S Rybakov`; ",refactor,MatchSource.DOCS,scverse,scanpy,1.10.2,https://github.com/scverse/scanpy/tree/1.10.2/docs/release-notes/1.7.0.md:5006,refactoring,5006,docs/release-notes/1.7.0.md,https://scanpy.readthedocs.io,https://github.com/scverse/scanpy/tree/1.10.2/docs/release-notes/1.7.0.md,1,['refactor'],['refactoring'],"The ease with which the system can be adapted by adding, removing, or modifying features, or adjusting to new environments. This attribute involves assessing the time, cost, and impact of changes, considering factors like coupling, cohesion, and the scope of modifications.","
You are an expert in evaluating and categorizing quality attributes in software engineering. You possess the necessary skills to distinguish sentences that clearly relate to a given quality attribute from those that do not. 

Evaluate whether the content accurately aligns with its associated quality attribute, given the context provided. Your goal is to determine if the content makes sense in relation to the quality attribute description or if it is a false positive.

Data:

Quality Attribute: Modifiability
Attribute Description: The ease with which the system can be adapted by adding, removing, or modifying features, or adjusting to new environments. This attribute involves assessing the time, cost, and impact of changes, considering factors like coupling, cohesion, and the scope of modifications.
Content: old-change, fractions calculation for filter_rank_genes_groups {pr}`1391` {smaller}`S Rybakov`; - Fixed bug where `score_genes` would error if one gene was passed {pr}`1398` {smaller}`I Virshup`; - Fixed `log1p` inplace on integer dense arrays {pr}`1400` {smaller}`I Virshup`; - Fix docstring formatting for {func}`~scanpy.tl.rank_genes_groups` {pr}`1417` {smaller}`P Weiler`; - Removed `` PendingDeprecationWarning`s from use of `np.matrix `` {pr}`1424` {smaller}`P Weiler`; - Fixed indexing byg in `~scanpy.pp.highly_variable_genes` {pr}`1456` {smaller}`V Bergen`; - Fix default number of genes for marker_genes_overlap {pr}`1464` {smaller}`MD Luecken`; - Fixed passing `groupby` and `dendrogram_key` to {func}`~scanpy.tl.dendrogram` {pr}`1465` {smaller}`M Varma`; - Fixed download path of `pbmc3k_processed` {pr}`1472` {smaller}`D Strobl`; - Better error message when computing DE with a group of size 1 {pr}`1490` {smaller}`J Manning`; - Update cugraph API usage for v0.16 {pr}`1494` {smaller}`R Ilango`; - Fixed `marker_gene_overlap` default value for `top_n_markers` {pr}`1464` {smaller}`MD Luecken`; - Pass `random_state` to RAPIDs UMAP {pr}`1474` {smaller}`C Nolet`; - Fixed `anndata` version requirement for {func}`~anndata.concat` (re-exported from scanpy as `sc.concat`) {pr}`1491` {smaller}`I Virshup`; - Fixed the width of the progress bar when downloading data {pr}`1507` {smaller}`M Klein`; - Updated link for `moignard15` dataset {pr}`1542` {smaller}`I Virshup`; - Fixed bug where calling `set_figure_params` could block if IPython was installed, but not used. {pr}`1547` {smaller}`I Virshup`; - {func}`~scanpy.pl.violin` no longer fails if `.raw` not present {pr}`1548` {smaller}`I Virshup`; - {func}`~scanpy.pl.spatial` refactoring and better handling of spatial data {pr}`1512` {smaller}`G Palla`; - {func}`~scanpy.pp.pca` works with `chunked=True` again {pr}`1592` {smaller}`I Virshup`; - {func}`~scanpy.tl.ingest` now works with umap-learn 0.5.0 {pr}`1601` {smaller}`S Rybakov`; 

Instructions: 
1. Analyze the content and the attribute description.
2. Determine if the content accurately reflects the intended quality attribute in this context.
3. If it does, label it as `true_positive: true`; if not, mark it as a `true_positive: false`.
4. If the content consists only of logs with no other text, mark it as a `true_positive: false`. 
4. If the content partially consists of logs, focus on analyzing remaining text. 
5. Add `reasoning` why the content is a true or false positive.
",True,"The provided content is a list of code changes and bug fixes, which are all related to modifying and adapting the system. Each entry mentions specific pull requests with details like 'smaller' and changes made by various contributors. This indicates that the system's modifiability has been addressed through these adjustments. Therefore, the content aligns well with the Modifiability quality attribute."
Modifiability,"ound [here](https://docs.pytest.org/en/stable/fixture.html), but we'd also recommend searching our test suite for existing usage. ### What to test. If you're not sure what to tests about your function, some ideas include:. - Are there arguments which conflict with each other? Check that if they are both passed, the function throws an error (see `pytest.raises` [in the pytest docs](https://docs.pytest.org/en/stable/assert.html#assertions-about-expected-exceptions).; - Are there input values which should cause your function to error?; - Did you add a helpful error message that recommends better outputs? Check that that error message is actually thrown.; - Can you place bounds on the values returned by your function?; - Are there different input values which should generate equivalent output (e.g. if an array is sparse or dense)?; - Do you have arguments which should have orthogonal effects on the output? Check that they are independent. For example, if there is a flag for extended output, the base output should remain the same either way.; - Are you optimizing a method? Check that it's results are the same as a gold standard implementation. ### Performance. It's more important that you're accurately testing the code works than it is that test suite runs quickly.; That said, it's nice when the test suite runs fast. You can check how long tests take to run by passing `--durations=0` argument to `pytest`.; Hopefully your new tests won't show up on top!; Some approaches to this include:. - Is there a common setup/ computation happening in each test? Consider caching these in a [scoped test fixture](https://docs.pytest.org/en/stable/fixture.html#sharing-test-data).; - Is the behaviour you're testing for dependent on the size of the data? If not, consider reducing it. ### Plotting tests. While computational functions will return arrays and values, it can be harder to work with the output of plotting functions. To make this easier, we use the `image_comparer` fixture for com",extend,MatchSource.DOCS,scverse,scanpy,1.10.2,https://github.com/scverse/scanpy/tree/1.10.2/docs/dev/testing.md:2853,extended,2853,docs/dev/testing.md,https://scanpy.readthedocs.io,https://github.com/scverse/scanpy/tree/1.10.2/docs/dev/testing.md,1,['extend'],['extended'],"The ease with which the system can be adapted by adding, removing, or modifying features, or adjusting to new environments. This attribute involves assessing the time, cost, and impact of changes, considering factors like coupling, cohesion, and the scope of modifications.","
You are an expert in evaluating and categorizing quality attributes in software engineering. You possess the necessary skills to distinguish sentences that clearly relate to a given quality attribute from those that do not. 

Evaluate whether the content accurately aligns with its associated quality attribute, given the context provided. Your goal is to determine if the content makes sense in relation to the quality attribute description or if it is a false positive.

Data:

Quality Attribute: Modifiability
Attribute Description: The ease with which the system can be adapted by adding, removing, or modifying features, or adjusting to new environments. This attribute involves assessing the time, cost, and impact of changes, considering factors like coupling, cohesion, and the scope of modifications.
Content: ound [here](https://docs.pytest.org/en/stable/fixture.html), but we'd also recommend searching our test suite for existing usage. ### What to test. If you're not sure what to tests about your function, some ideas include:. - Are there arguments which conflict with each other? Check that if they are both passed, the function throws an error (see `pytest.raises` [in the pytest docs](https://docs.pytest.org/en/stable/assert.html#assertions-about-expected-exceptions).; - Are there input values which should cause your function to error?; - Did you add a helpful error message that recommends better outputs? Check that that error message is actually thrown.; - Can you place bounds on the values returned by your function?; - Are there different input values which should generate equivalent output (e.g. if an array is sparse or dense)?; - Do you have arguments which should have orthogonal effects on the output? Check that they are independent. For example, if there is a flag for extended output, the base output should remain the same either way.; - Are you optimizing a method? Check that it's results are the same as a gold standard implementation. ### Performance. It's more important that you're accurately testing the code works than it is that test suite runs quickly.; That said, it's nice when the test suite runs fast. You can check how long tests take to run by passing `--durations=0` argument to `pytest`.; Hopefully your new tests won't show up on top!; Some approaches to this include:. - Is there a common setup/ computation happening in each test? Consider caching these in a [scoped test fixture](https://docs.pytest.org/en/stable/fixture.html#sharing-test-data).; - Is the behaviour you're testing for dependent on the size of the data? If not, consider reducing it. ### Plotting tests. While computational functions will return arrays and values, it can be harder to work with the output of plotting functions. To make this easier, we use the `image_comparer` fixture for com

Instructions: 
1. Analyze the content and the attribute description.
2. Determine if the content accurately reflects the intended quality attribute in this context.
3. If it does, label it as `true_positive: true`; if not, mark it as a `true_positive: false`.
4. If the content consists only of logs with no other text, mark it as a `true_positive: false`. 
4. If the content partially consists of logs, focus on analyzing remaining text. 
5. Add `reasoning` why the content is a true or false positive.
",True,"The content discusses testing practices and strategies, including how to structure tests, handle edge cases, optimize methods, cache computations, and improve test performance. These are aspects related to modifiability because they involve making the system adaptable by ensuring comprehensive testing, which can be easily modified or adjusted if needed. The mention of caching in test fixtures also aligns with efficient modifications."
Modifiability,"release include support for spatial data, dedicated handling of graphs in AnnData, sparse PCA, an interface with scvi, and others. ```{rubric} Spatial data support; ```. - Basic analysis {doc}`/tutorials/spatial/basic-analysis` and integration with single cell data {doc}`/tutorials/spatial/integration-scanorama` {smaller}`G Palla`; - {func}`~scanpy.read_visium` read 10x Visium data {pr}`1034` {smaller}`G Palla, P Angerer, I Virshup`; - {func}`~scanpy.datasets.visium_sge` load Visium data directly from 10x Genomics {pr}`1013` {smaller}`M Mirkazemi, G Palla, P Angerer`; - {func}`~scanpy.pl.spatial` plot spatial data {pr}`1012` {smaller}`G Palla, P Angerer`. ```{rubric} New functionality; ```. - Many functions, like {func}`~scanpy.pp.neighbors` and {func}`~scanpy.tl.umap`, now store cell-by-cell graphs in {attr}`~anndata.AnnData.obsp` {pr}`1118` {smaller}`S Rybakov`; - {func}`~scanpy.pp.scale` and {func}`~scanpy.pp.log1p` can be used on any element in {attr}`~anndata.AnnData.layers` or {attr}`~anndata.AnnData.obsm` {pr}`1173` {smaller}`I Virshup`. ```{rubric} External tools; ```. - `scanpy.external.pp.scvi` for preprocessing with scVI {pr}`1085` {smaller}`G Xing`; - Guide for using `Scanpy in R` {pr}`1186` {smaller}`L Zappia`. ```{rubric} Performance; ```. - {func}`~scanpy.pp.pca` now uses efficient implicit centering for sparse matrices. This can lead to signifigantly improved performance for large datasets {pr}`1066` {smaller}`A Tarashansky`; - {func}`~scanpy.tl.score_genes` now has an efficient implementation for sparse matrices with missing values {pr}`1196` {smaller}`redst4r`. ```{warning}; The new {func}`~scanpy.pp.pca` implementation can result in slightly different results for sparse matrices. See the pr ({pr}`1066`) and documentation for more info.; ```. ```{rubric} Code design; ```. - {func}`~scanpy.pl.stacked_violin` can now be used as a subplot {pr}`1084` {smaller}`P Angerer`; - {func}`~scanpy.tl.score_genes` has improved logging {pr}`1119` {smaller}`G Erasl",layers,MatchSource.DOCS,scverse,scanpy,1.10.2,https://github.com/scverse/scanpy/tree/1.10.2/docs/release-notes/1.5.0.md:1163,layers,1163,docs/release-notes/1.5.0.md,https://scanpy.readthedocs.io,https://github.com/scverse/scanpy/tree/1.10.2/docs/release-notes/1.5.0.md,1,['layers'],['layers'],"The ease with which the system can be adapted by adding, removing, or modifying features, or adjusting to new environments. This attribute involves assessing the time, cost, and impact of changes, considering factors like coupling, cohesion, and the scope of modifications.","
You are an expert in evaluating and categorizing quality attributes in software engineering. You possess the necessary skills to distinguish sentences that clearly relate to a given quality attribute from those that do not. 

Evaluate whether the content accurately aligns with its associated quality attribute, given the context provided. Your goal is to determine if the content makes sense in relation to the quality attribute description or if it is a false positive.

Data:

Quality Attribute: Modifiability
Attribute Description: The ease with which the system can be adapted by adding, removing, or modifying features, or adjusting to new environments. This attribute involves assessing the time, cost, and impact of changes, considering factors like coupling, cohesion, and the scope of modifications.
Content: release include support for spatial data, dedicated handling of graphs in AnnData, sparse PCA, an interface with scvi, and others. ```{rubric} Spatial data support; ```. - Basic analysis {doc}`/tutorials/spatial/basic-analysis` and integration with single cell data {doc}`/tutorials/spatial/integration-scanorama` {smaller}`G Palla`; - {func}`~scanpy.read_visium` read 10x Visium data {pr}`1034` {smaller}`G Palla, P Angerer, I Virshup`; - {func}`~scanpy.datasets.visium_sge` load Visium data directly from 10x Genomics {pr}`1013` {smaller}`M Mirkazemi, G Palla, P Angerer`; - {func}`~scanpy.pl.spatial` plot spatial data {pr}`1012` {smaller}`G Palla, P Angerer`. ```{rubric} New functionality; ```. - Many functions, like {func}`~scanpy.pp.neighbors` and {func}`~scanpy.tl.umap`, now store cell-by-cell graphs in {attr}`~anndata.AnnData.obsp` {pr}`1118` {smaller}`S Rybakov`; - {func}`~scanpy.pp.scale` and {func}`~scanpy.pp.log1p` can be used on any element in {attr}`~anndata.AnnData.layers` or {attr}`~anndata.AnnData.obsm` {pr}`1173` {smaller}`I Virshup`. ```{rubric} External tools; ```. - `scanpy.external.pp.scvi` for preprocessing with scVI {pr}`1085` {smaller}`G Xing`; - Guide for using `Scanpy in R` {pr}`1186` {smaller}`L Zappia`. ```{rubric} Performance; ```. - {func}`~scanpy.pp.pca` now uses efficient implicit centering for sparse matrices. This can lead to signifigantly improved performance for large datasets {pr}`1066` {smaller}`A Tarashansky`; - {func}`~scanpy.tl.score_genes` now has an efficient implementation for sparse matrices with missing values {pr}`1196` {smaller}`redst4r`. ```{warning}; The new {func}`~scanpy.pp.pca` implementation can result in slightly different results for sparse matrices. See the pr ({pr}`1066`) and documentation for more info.; ```. ```{rubric} Code design; ```. - {func}`~scanpy.pl.stacked_violin` can now be used as a subplot {pr}`1084` {smaller}`P Angerer`; - {func}`~scanpy.tl.score_genes` has improved logging {pr}`1119` {smaller}`G Erasl

Instructions: 
1. Analyze the content and the attribute description.
2. Determine if the content accurately reflects the intended quality attribute in this context.
3. If it does, label it as `true_positive: true`; if not, mark it as a `true_positive: false`.
4. If the content consists only of logs with no other text, mark it as a `true_positive: false`. 
4. If the content partially consists of logs, focus on analyzing remaining text. 
5. Add `reasoning` why the content is a true or false positive.
",True,"The content describes new features and improvements in an analytics tool, including support for spatial data, integration with external tools like scVI, performance optimizations, and code design enhancements. These changes aim to make the system more adaptable by adding functionality, improving efficiency, and refining the interface. The mention of 'modifiability' is not directly present, but the focus on adding features, integrating new components, and optimizing processes suggests an underlying capability to modify and adapt the system as needed. Therefore, this content aligns with the modifiability quality attribute."
Modifiability,"sts in parallel. If you install the pytest extension [pytest-xdist](https://github.com/pytest-dev/pytest-xdist) you can run tests in parallel with the `--numprocesses` argument to pytest (e.g. `pytest -n 8`). ### Miscellaneous tips. - A lot of warnings can be thrown while running the test suite. It's often easier to read the test results with them hidden via the `--disable-pytest-warnings` argument. ## Writing tests. You can refer to the [existing test suite](https://github.com/scverse/scanpy/tree/main/scanpy/tests) for examples.; If you haven't written tests before, Software Carpentry has an [in-depth guide](https://katyhuff.github.io/2016-07-11-scipy/testing/01-basics.html) on the topic. We highly recommend using [Test Driven Development](https://en.wikipedia.org/wiki/Test-driven_development) when contributing code.; This not only ensures you have tests written, it often makes implementation easier since you start out with a specification for your function. Consider parameterizing your tests using the `pytest.mark.parameterize` and `pytest.fixture` decorators.; Documentation on these can be found [here](https://docs.pytest.org/en/stable/fixture.html), but we'd also recommend searching our test suite for existing usage. ### What to test. If you're not sure what to tests about your function, some ideas include:. - Are there arguments which conflict with each other? Check that if they are both passed, the function throws an error (see `pytest.raises` [in the pytest docs](https://docs.pytest.org/en/stable/assert.html#assertions-about-expected-exceptions).; - Are there input values which should cause your function to error?; - Did you add a helpful error message that recommends better outputs? Check that that error message is actually thrown.; - Can you place bounds on the values returned by your function?; - Are there different input values which should generate equivalent output (e.g. if an array is sparse or dense)?; - Do you have arguments which should have orthogo",parameteriz,MatchSource.DOCS,scverse,scanpy,1.10.2,https://github.com/scverse/scanpy/tree/1.10.2/docs/dev/testing.md:1740,parameterizing,1740,docs/dev/testing.md,https://scanpy.readthedocs.io,https://github.com/scverse/scanpy/tree/1.10.2/docs/dev/testing.md,1,['parameteriz'],['parameterizing'],"The ease with which the system can be adapted by adding, removing, or modifying features, or adjusting to new environments. This attribute involves assessing the time, cost, and impact of changes, considering factors like coupling, cohesion, and the scope of modifications.","
You are an expert in evaluating and categorizing quality attributes in software engineering. You possess the necessary skills to distinguish sentences that clearly relate to a given quality attribute from those that do not. 

Evaluate whether the content accurately aligns with its associated quality attribute, given the context provided. Your goal is to determine if the content makes sense in relation to the quality attribute description or if it is a false positive.

Data:

Quality Attribute: Modifiability
Attribute Description: The ease with which the system can be adapted by adding, removing, or modifying features, or adjusting to new environments. This attribute involves assessing the time, cost, and impact of changes, considering factors like coupling, cohesion, and the scope of modifications.
Content: sts in parallel. If you install the pytest extension [pytest-xdist](https://github.com/pytest-dev/pytest-xdist) you can run tests in parallel with the `--numprocesses` argument to pytest (e.g. `pytest -n 8`). ### Miscellaneous tips. - A lot of warnings can be thrown while running the test suite. It's often easier to read the test results with them hidden via the `--disable-pytest-warnings` argument. ## Writing tests. You can refer to the [existing test suite](https://github.com/scverse/scanpy/tree/main/scanpy/tests) for examples.; If you haven't written tests before, Software Carpentry has an [in-depth guide](https://katyhuff.github.io/2016-07-11-scipy/testing/01-basics.html) on the topic. We highly recommend using [Test Driven Development](https://en.wikipedia.org/wiki/Test-driven_development) when contributing code.; This not only ensures you have tests written, it often makes implementation easier since you start out with a specification for your function. Consider parameterizing your tests using the `pytest.mark.parameterize` and `pytest.fixture` decorators.; Documentation on these can be found [here](https://docs.pytest.org/en/stable/fixture.html), but we'd also recommend searching our test suite for existing usage. ### What to test. If you're not sure what to tests about your function, some ideas include:. - Are there arguments which conflict with each other? Check that if they are both passed, the function throws an error (see `pytest.raises` [in the pytest docs](https://docs.pytest.org/en/stable/assert.html#assertions-about-expected-exceptions).; - Are there input values which should cause your function to error?; - Did you add a helpful error message that recommends better outputs? Check that that error message is actually thrown.; - Can you place bounds on the values returned by your function?; - Are there different input values which should generate equivalent output (e.g. if an array is sparse or dense)?; - Do you have arguments which should have orthogo

Instructions: 
1. Analyze the content and the attribute description.
2. Determine if the content accurately reflects the intended quality attribute in this context.
3. If it does, label it as `true_positive: true`; if not, mark it as a `true_positive: false`.
4. If the content consists only of logs with no other text, mark it as a `true_positive: false`. 
4. If the content partially consists of logs, focus on analyzing remaining text. 
5. Add `reasoning` why the content is a true or false positive.
",False,"The content provided talks about pytest and running tests in parallel using specific arguments like pytest -n 8. It also mentions handling warnings and writing tests, including test examples and recommended practices like Test Driven Development. These are all related to testing and ensuring code quality through automated tests. Modifiability refers to how easily a system can be adapted or modified. While the content discusses testing and writing tests, it does not directly relate to modifying or adapting the system itself but rather ensuring that modifications can be tested effectively. Therefore, this content is not about modifiability but rather about testability and test practices. Thus, it should be marked as a false positive for modifiability."
Modifiability,"tension [pytest-xdist](https://github.com/pytest-dev/pytest-xdist) you can run tests in parallel with the `--numprocesses` argument to pytest (e.g. `pytest -n 8`). ### Miscellaneous tips. - A lot of warnings can be thrown while running the test suite. It's often easier to read the test results with them hidden via the `--disable-pytest-warnings` argument. ## Writing tests. You can refer to the [existing test suite](https://github.com/scverse/scanpy/tree/main/scanpy/tests) for examples.; If you haven't written tests before, Software Carpentry has an [in-depth guide](https://katyhuff.github.io/2016-07-11-scipy/testing/01-basics.html) on the topic. We highly recommend using [Test Driven Development](https://en.wikipedia.org/wiki/Test-driven_development) when contributing code.; This not only ensures you have tests written, it often makes implementation easier since you start out with a specification for your function. Consider parameterizing your tests using the `pytest.mark.parameterize` and `pytest.fixture` decorators.; Documentation on these can be found [here](https://docs.pytest.org/en/stable/fixture.html), but we'd also recommend searching our test suite for existing usage. ### What to test. If you're not sure what to tests about your function, some ideas include:. - Are there arguments which conflict with each other? Check that if they are both passed, the function throws an error (see `pytest.raises` [in the pytest docs](https://docs.pytest.org/en/stable/assert.html#assertions-about-expected-exceptions).; - Are there input values which should cause your function to error?; - Did you add a helpful error message that recommends better outputs? Check that that error message is actually thrown.; - Can you place bounds on the values returned by your function?; - Are there different input values which should generate equivalent output (e.g. if an array is sparse or dense)?; - Do you have arguments which should have orthogonal effects on the output? Check that they ar",parameteriz,MatchSource.DOCS,scverse,scanpy,1.10.2,https://github.com/scverse/scanpy/tree/1.10.2/docs/dev/testing.md:1789,parameterize,1789,docs/dev/testing.md,https://scanpy.readthedocs.io,https://github.com/scverse/scanpy/tree/1.10.2/docs/dev/testing.md,1,['parameteriz'],['parameterize'],"The ease with which the system can be adapted by adding, removing, or modifying features, or adjusting to new environments. This attribute involves assessing the time, cost, and impact of changes, considering factors like coupling, cohesion, and the scope of modifications.","
You are an expert in evaluating and categorizing quality attributes in software engineering. You possess the necessary skills to distinguish sentences that clearly relate to a given quality attribute from those that do not. 

Evaluate whether the content accurately aligns with its associated quality attribute, given the context provided. Your goal is to determine if the content makes sense in relation to the quality attribute description or if it is a false positive.

Data:

Quality Attribute: Modifiability
Attribute Description: The ease with which the system can be adapted by adding, removing, or modifying features, or adjusting to new environments. This attribute involves assessing the time, cost, and impact of changes, considering factors like coupling, cohesion, and the scope of modifications.
Content: tension [pytest-xdist](https://github.com/pytest-dev/pytest-xdist) you can run tests in parallel with the `--numprocesses` argument to pytest (e.g. `pytest -n 8`). ### Miscellaneous tips. - A lot of warnings can be thrown while running the test suite. It's often easier to read the test results with them hidden via the `--disable-pytest-warnings` argument. ## Writing tests. You can refer to the [existing test suite](https://github.com/scverse/scanpy/tree/main/scanpy/tests) for examples.; If you haven't written tests before, Software Carpentry has an [in-depth guide](https://katyhuff.github.io/2016-07-11-scipy/testing/01-basics.html) on the topic. We highly recommend using [Test Driven Development](https://en.wikipedia.org/wiki/Test-driven_development) when contributing code.; This not only ensures you have tests written, it often makes implementation easier since you start out with a specification for your function. Consider parameterizing your tests using the `pytest.mark.parameterize` and `pytest.fixture` decorators.; Documentation on these can be found [here](https://docs.pytest.org/en/stable/fixture.html), but we'd also recommend searching our test suite for existing usage. ### What to test. If you're not sure what to tests about your function, some ideas include:. - Are there arguments which conflict with each other? Check that if they are both passed, the function throws an error (see `pytest.raises` [in the pytest docs](https://docs.pytest.org/en/stable/assert.html#assertions-about-expected-exceptions).; - Are there input values which should cause your function to error?; - Did you add a helpful error message that recommends better outputs? Check that that error message is actually thrown.; - Can you place bounds on the values returned by your function?; - Are there different input values which should generate equivalent output (e.g. if an array is sparse or dense)?; - Do you have arguments which should have orthogonal effects on the output? Check that they ar

Instructions: 
1. Analyze the content and the attribute description.
2. Determine if the content accurately reflects the intended quality attribute in this context.
3. If it does, label it as `true_positive: true`; if not, mark it as a `true_positive: false`.
4. If the content consists only of logs with no other text, mark it as a `true_positive: false`. 
4. If the content partially consists of logs, focus on analyzing remaining text. 
5. Add `reasoning` why the content is a true or false positive.
",True,"The provided content discusses testing practices such as parallel test execution and handling warnings, which are related to maintainability and modifiability because effective testing frameworks and configurations enable easier modification of the system in response to new requirements or issues."
Modifiability,"ts 100 contributors! {small}`2022-03-31`. [100 people have contributed to Scanpy's source code!](https://github.com/scverse/scanpy/graphs/contributors). Of course, contributions to the project are not limited to direct modification of the source code.; Many others have improved the project by building on top of it, participating in development discussions, helping others with usage, or by showing off what it's helped them accomplish. Thanks to all our contributors for making this project possible!. ### New community channels {small}`2022-03-31`. We've moved our forums and have a new publicly available chat!. * Our discourse forum has migrated to a joint scverse forum ([discourse.scverse.org](https://discourse.scverse.org)).; * Our private developer Slack has been replaced by a public Zulip chat ([scverse.zulipchat.com](https://scverse.zulipchat.com)). ### Toolkit for spatial (squidpy) and multimodal (muon) published {small}`2022-02-01`. Two large toolkits extending our ecosystem to new modalities have had their manuscripts published!. * [Muon](https://muon.readthedocs.io/), a framework for multimodal has been published in [Genome Biology](https://genomebiology.biomedcentral.com/articles/10.1186/s13059-021-02577-8).; * [Squidpy](https://squidpy.readthedocs.io/) a toolkit for working with spatial single cell data has been published in [Nature Methods](https://www.nature.com/articles/s41592-021-01358-2). <!-- marker: before old news -->. ### scVelo on the cover of Nature Biotechnology {small}`2020-12-01`. Scanpy's counterpart for RNA velocity, [scVelo](https://scvelo.org/), made it on the cover of [Nature Biotechnology](https://www.nature.com/nbt/volumes/38/issues/12) \[[tweet](https://twitter.com/NatureBiotech/status/1334647540030070792)\]. ### Scanpy selected among 20 papers for 20 years of Genome Biology {small}`2020-08-01`. [Genome Biology: Celebrating 20 Years of Genome Biology](https://genomebiology.biomedcentral.com/20years) selected the initial Scanpy paper for",extend,MatchSource.DOCS,scverse,scanpy,1.10.2,https://github.com/scverse/scanpy/tree/1.10.2/docs/news.md:1284,extending,1284,docs/news.md,https://scanpy.readthedocs.io,https://github.com/scverse/scanpy/tree/1.10.2/docs/news.md,1,['extend'],['extending'],"The ease with which the system can be adapted by adding, removing, or modifying features, or adjusting to new environments. This attribute involves assessing the time, cost, and impact of changes, considering factors like coupling, cohesion, and the scope of modifications.","
You are an expert in evaluating and categorizing quality attributes in software engineering. You possess the necessary skills to distinguish sentences that clearly relate to a given quality attribute from those that do not. 

Evaluate whether the content accurately aligns with its associated quality attribute, given the context provided. Your goal is to determine if the content makes sense in relation to the quality attribute description or if it is a false positive.

Data:

Quality Attribute: Modifiability
Attribute Description: The ease with which the system can be adapted by adding, removing, or modifying features, or adjusting to new environments. This attribute involves assessing the time, cost, and impact of changes, considering factors like coupling, cohesion, and the scope of modifications.
Content: ts 100 contributors! {small}`2022-03-31`. [100 people have contributed to Scanpy's source code!](https://github.com/scverse/scanpy/graphs/contributors). Of course, contributions to the project are not limited to direct modification of the source code.; Many others have improved the project by building on top of it, participating in development discussions, helping others with usage, or by showing off what it's helped them accomplish. Thanks to all our contributors for making this project possible!. ### New community channels {small}`2022-03-31`. We've moved our forums and have a new publicly available chat!. * Our discourse forum has migrated to a joint scverse forum ([discourse.scverse.org](https://discourse.scverse.org)).; * Our private developer Slack has been replaced by a public Zulip chat ([scverse.zulipchat.com](https://scverse.zulipchat.com)). ### Toolkit for spatial (squidpy) and multimodal (muon) published {small}`2022-02-01`. Two large toolkits extending our ecosystem to new modalities have had their manuscripts published!. * [Muon](https://muon.readthedocs.io/), a framework for multimodal has been published in [Genome Biology](https://genomebiology.biomedcentral.com/articles/10.1186/s13059-021-02577-8).; * [Squidpy](https://squidpy.readthedocs.io/) a toolkit for working with spatial single cell data has been published in [Nature Methods](https://www.nature.com/articles/s41592-021-01358-2). <!-- marker: before old news -->. ### scVelo on the cover of Nature Biotechnology {small}`2020-12-01`. Scanpy's counterpart for RNA velocity, [scVelo](https://scvelo.org/), made it on the cover of [Nature Biotechnology](https://www.nature.com/nbt/volumes/38/issues/12) \[[tweet](https://twitter.com/NatureBiotech/status/1334647540030070792)\]. ### Scanpy selected among 20 papers for 20 years of Genome Biology {small}`2020-08-01`. [Genome Biology: Celebrating 20 Years of Genome Biology](https://genomebiology.biomedcentral.com/20years) selected the initial Scanpy paper for

Instructions: 
1. Analyze the content and the attribute description.
2. Determine if the content accurately reflects the intended quality attribute in this context.
3. If it does, label it as `true_positive: true`; if not, mark it as a `true_positive: false`.
4. If the content consists only of logs with no other text, mark it as a `true_positive: false`. 
4. If the content partially consists of logs, focus on analyzing remaining text. 
5. Add `reasoning` why the content is a true or false positive.
",False,"The content provided discusses updates and contributions to Scanpy, including new publications and community changes. While this is relevant information about the project's ecosystem, it does not directly relate to modifiability, which concerns how easily the system can be adapted through changes. Therefore, this content does not accurately reflect the modifiability quality attribute."
Modifiability,"y the location of colorbar legend, or pass `None` to not show a colorbar {pr}`1821` {smaller}`A Schaar` {smaller}`I Virshup`; - Embedding plots now have a `dimensions` argument, which lets users select which dimensions of their embedding to plot and uses the same broadcasting rules as other arguments {pr}`1538` {smaller}`I Virshup`; - {func}`~scanpy.logging.print_versions` now uses `session_info` {pr}`2089` {smaller}`P Angerer` {smaller}`I Virshup`. ```{rubric} Ecosystem; ```. Multiple packages have been added to our ecosystem page, including:. - [decoupler](https://github.com/saezlab/decoupler-py) a for footprint analysis and pathway enrichement {pr}`2186` {smaller}`PB Mompel`; - [dandelion](https://github.com/zktuong/dandelion) for B-cell receptor analysis {pr}`1953` {smaller}`Z Tuong`; - [CIARA](https://github.com/ScialdoneLab/CIARA_python) a feature selection tools for identifying rare cell types {pr}`2175` {smaller}`M Stock`. ```{rubric} Bug fixes; ```. - Fixed finding variables with `use_raw=True` and `basis=None` in {func}`scanpy.pl.scatter` {pr}`2027` {smaller}`E Rice`; - Fixed {func}`scanpy.pp.scrublet` to address {issue}`1957` {smaller}`FlMai` and ensure raw counts are used for simulation; - Functions in {mod}`scanpy.datasets` no longer throw `OldFormatWarnings` when using `anndata` `0.8` {pr}`2096` {smaller}`I Virshup`; - Fixed use of {func}`scanpy.pp.neighbors` with `method='rapids'`: RAPIDS cuML no longer returns a squared Euclidean distance matrix, so we should not square-root the kNN distance matrix. {pr}`1828` {smaller}`M Zaslavsky`; - Removed `pytables` dependency by implementing `read_10x_h5` with `h5py` due to installation errors on Windows {pr}`2064`; - Fixed bug in {func}`scanpy.external.pp.hashsolo` where default value was set improperly {pr}`2190` {smaller}`B Reiz`; - Fixed bug in {func}`scanpy.pl.embedding` functions where an error could be raised when there were missing values and large numbers of categories {pr}`2187` {smaller}`I Virshup`; ",variab,MatchSource.DOCS,scverse,scanpy,1.10.2,https://github.com/scverse/scanpy/tree/1.10.2/docs/release-notes/1.9.0.md:3172,variables,3172,docs/release-notes/1.9.0.md,https://scanpy.readthedocs.io,https://github.com/scverse/scanpy/tree/1.10.2/docs/release-notes/1.9.0.md,1,['variab'],['variables'],"The ease with which the system can be adapted by adding, removing, or modifying features, or adjusting to new environments. This attribute involves assessing the time, cost, and impact of changes, considering factors like coupling, cohesion, and the scope of modifications.","
You are an expert in evaluating and categorizing quality attributes in software engineering. You possess the necessary skills to distinguish sentences that clearly relate to a given quality attribute from those that do not. 

Evaluate whether the content accurately aligns with its associated quality attribute, given the context provided. Your goal is to determine if the content makes sense in relation to the quality attribute description or if it is a false positive.

Data:

Quality Attribute: Modifiability
Attribute Description: The ease with which the system can be adapted by adding, removing, or modifying features, or adjusting to new environments. This attribute involves assessing the time, cost, and impact of changes, considering factors like coupling, cohesion, and the scope of modifications.
Content: y the location of colorbar legend, or pass `None` to not show a colorbar {pr}`1821` {smaller}`A Schaar` {smaller}`I Virshup`; - Embedding plots now have a `dimensions` argument, which lets users select which dimensions of their embedding to plot and uses the same broadcasting rules as other arguments {pr}`1538` {smaller}`I Virshup`; - {func}`~scanpy.logging.print_versions` now uses `session_info` {pr}`2089` {smaller}`P Angerer` {smaller}`I Virshup`. ```{rubric} Ecosystem; ```. Multiple packages have been added to our ecosystem page, including:. - [decoupler](https://github.com/saezlab/decoupler-py) a for footprint analysis and pathway enrichement {pr}`2186` {smaller}`PB Mompel`; - [dandelion](https://github.com/zktuong/dandelion) for B-cell receptor analysis {pr}`1953` {smaller}`Z Tuong`; - [CIARA](https://github.com/ScialdoneLab/CIARA_python) a feature selection tools for identifying rare cell types {pr}`2175` {smaller}`M Stock`. ```{rubric} Bug fixes; ```. - Fixed finding variables with `use_raw=True` and `basis=None` in {func}`scanpy.pl.scatter` {pr}`2027` {smaller}`E Rice`; - Fixed {func}`scanpy.pp.scrublet` to address {issue}`1957` {smaller}`FlMai` and ensure raw counts are used for simulation; - Functions in {mod}`scanpy.datasets` no longer throw `OldFormatWarnings` when using `anndata` `0.8` {pr}`2096` {smaller}`I Virshup`; - Fixed use of {func}`scanpy.pp.neighbors` with `method='rapids'`: RAPIDS cuML no longer returns a squared Euclidean distance matrix, so we should not square-root the kNN distance matrix. {pr}`1828` {smaller}`M Zaslavsky`; - Removed `pytables` dependency by implementing `read_10x_h5` with `h5py` due to installation errors on Windows {pr}`2064`; - Fixed bug in {func}`scanpy.external.pp.hashsolo` where default value was set improperly {pr}`2190` {smaller}`B Reiz`; - Fixed bug in {func}`scanpy.pl.embedding` functions where an error could be raised when there were missing values and large numbers of categories {pr}`2187` {smaller}`I Virshup`; 

Instructions: 
1. Analyze the content and the attribute description.
2. Determine if the content accurately reflects the intended quality attribute in this context.
3. If it does, label it as `true_positive: true`; if not, mark it as a `true_positive: false`.
4. If the content consists only of logs with no other text, mark it as a `true_positive: false`. 
4. If the content partially consists of logs, focus on analyzing remaining text. 
5. Add `reasoning` why the content is a true or false positive.
",False,"The provided content appears to be a list of updates and changes made to a software project, including feature additions, bug fixes, and dependency modifications. The mention of 'decoupler,' 'dandelion,' and 'CIARA' as new packages in the ecosystem suggests that the system is being expanded or modified, which relates to modifiability as it involves adjustments and enhancements to the system. However, most of the content is logging of changes rather than discussing how modifications are made or assessed. The attribute description emphasizes the ease of adapting the system through factors like coupling and cohesion. While the updates show that modifications are being done (e.g., adding new features), there's no indication that these changes are done in an easily modifiable manner or that considerations for modifiability were addressed. Therefore, this content does not accurately reflect the intended quality attribute of Modifiability."
Modifiability,"y; cd scanpy; ```. If you are using `pip>=21.3`, an editable install can be made:. ```shell; pip install -e '.[dev,test]'; ```. If you want to let [conda] handle the installations of dependencies, do:. ```shell; pipx install beni; beni pyproject.toml > environment.yml; conda env create -f environment.yml; conda activate scanpy; pip install -e '.[dev,doc,test]'; ```. For instructions on how to work with the code, see the {ref}`contribution guide <contribution-guide>`. ## Docker. If you're using [Docker], you can use e.g. the image [gcfntnu/scanpy] from Docker Hub. ## Troubleshooting. If you get a `Permission denied` error, never use `sudo pip`. Instead, use virtual environments or:. ```shell; pip install --user scanpy; ```. **On MacOS**, if **not** using `conda`, you might need to install the C core of igraph via homebrew first. - `brew install igraph`. - If igraph still fails to install, see the question on [compiling igraph].; Alternatively consider installing gcc via `brew install gcc --without-multilib`; and exporting the required variables:. ```shell; export CC=""/usr/local/Cellar/gcc/X.x.x/bin/gcc-X""; export CXX=""/usr/local/Cellar/gcc/X.x.x/bin/gcc-X""; ```. where `X` and `x` refers to the version of `gcc`;; in my case, the path reads `/usr/local/Cellar/gcc/6.3.0_1/bin/gcc-6`. **On Windows**, there also often problems installing compiled packages such as `igraph`,; but you can find precompiled packages on Christoph Gohlke’s [unofficial binaries].; Download those and install them using `pip install ./path/to/file.whl`. (conda)=. ## Installing Miniconda. After downloading [Miniconda], in a unix shell (Linux, Mac), run. ```shell; cd DOWNLOAD_DIR; chmod +x Miniconda3-latest-VERSION.sh; ./Miniconda3-latest-VERSION.sh; ```. and accept all suggestions.; Either reopen a new terminal or `source ~/.bashrc` on Linux/ `source ~/.bash_profile` on Mac.; The whole process takes just a couple of minutes. [bioconda]: https://bioconda.github.io/; [compiling igraph]: https://stackov",variab,MatchSource.DOCS,scverse,scanpy,1.10.2,https://github.com/scverse/scanpy/tree/1.10.2/docs/installation.md:1904,variables,1904,docs/installation.md,https://scanpy.readthedocs.io,https://github.com/scverse/scanpy/tree/1.10.2/docs/installation.md,1,['variab'],['variables'],"The ease with which the system can be adapted by adding, removing, or modifying features, or adjusting to new environments. This attribute involves assessing the time, cost, and impact of changes, considering factors like coupling, cohesion, and the scope of modifications.","
You are an expert in evaluating and categorizing quality attributes in software engineering. You possess the necessary skills to distinguish sentences that clearly relate to a given quality attribute from those that do not. 

Evaluate whether the content accurately aligns with its associated quality attribute, given the context provided. Your goal is to determine if the content makes sense in relation to the quality attribute description or if it is a false positive.

Data:

Quality Attribute: Modifiability
Attribute Description: The ease with which the system can be adapted by adding, removing, or modifying features, or adjusting to new environments. This attribute involves assessing the time, cost, and impact of changes, considering factors like coupling, cohesion, and the scope of modifications.
Content: y; cd scanpy; ```. If you are using `pip>=21.3`, an editable install can be made:. ```shell; pip install -e '.[dev,test]'; ```. If you want to let [conda] handle the installations of dependencies, do:. ```shell; pipx install beni; beni pyproject.toml > environment.yml; conda env create -f environment.yml; conda activate scanpy; pip install -e '.[dev,doc,test]'; ```. For instructions on how to work with the code, see the {ref}`contribution guide <contribution-guide>`. ## Docker. If you're using [Docker], you can use e.g. the image [gcfntnu/scanpy] from Docker Hub. ## Troubleshooting. If you get a `Permission denied` error, never use `sudo pip`. Instead, use virtual environments or:. ```shell; pip install --user scanpy; ```. **On MacOS**, if **not** using `conda`, you might need to install the C core of igraph via homebrew first. - `brew install igraph`. - If igraph still fails to install, see the question on [compiling igraph].; Alternatively consider installing gcc via `brew install gcc --without-multilib`; and exporting the required variables:. ```shell; export CC=""/usr/local/Cellar/gcc/X.x.x/bin/gcc-X""; export CXX=""/usr/local/Cellar/gcc/X.x.x/bin/gcc-X""; ```. where `X` and `x` refers to the version of `gcc`;; in my case, the path reads `/usr/local/Cellar/gcc/6.3.0_1/bin/gcc-6`. **On Windows**, there also often problems installing compiled packages such as `igraph`,; but you can find precompiled packages on Christoph Gohlke’s [unofficial binaries].; Download those and install them using `pip install ./path/to/file.whl`. (conda)=. ## Installing Miniconda. After downloading [Miniconda], in a unix shell (Linux, Mac), run. ```shell; cd DOWNLOAD_DIR; chmod +x Miniconda3-latest-VERSION.sh; ./Miniconda3-latest-VERSION.sh; ```. and accept all suggestions.; Either reopen a new terminal or `source ~/.bashrc` on Linux/ `source ~/.bash_profile` on Mac.; The whole process takes just a couple of minutes. [bioconda]: https://bioconda.github.io/; [compiling igraph]: https://stackov

Instructions: 
1. Analyze the content and the attribute description.
2. Determine if the content accurately reflects the intended quality attribute in this context.
3. If it does, label it as `true_positive: true`; if not, mark it as a `true_positive: false`.
4. If the content consists only of logs with no other text, mark it as a `true_positive: false`. 
4. If the content partially consists of logs, focus on analyzing remaining text. 
5. Add `reasoning` why the content is a true or false positive.
",False,"The provided content consists mainly of installation and configuration instructions for various tools such as pip, conda, Docker, and troubleshooting steps related to installing software packages like igraph and Miniconada. While this information is useful for users, it does not directly relate to the concept of modifiability. Modifiability concerns how easily a system can be adapted or modified, which involves aspects like coupling and cohesion in code. The content here discusses setup procedures rather than the ability to modify or adapt the system itself. Therefore, the content does not accurately reflect the quality attribute of modifiability."
Performance," contrast to tSNE, UMAP directly embeds the single-cell graph and is faster;; UMAP is also used for measuring connectivities and computing neighbors,; see {func}`~scanpy.pp.neighbors` {smaller}`A Wolf`; - graph abstraction: AGA is renamed to [PAGA](https://github.com/theislab/paga): {func}`~scanpy.tl.paga`; now,; it only measures connectivities between partitions of the single-cell graph,; pseudotime and clustering need to be computed separately via; {func}`~scanpy.tl.louvain` and {func}`~scanpy.tl.dpt`, the; connectivity measure has been improved {smaller}`A Wolf`; - logistic regression for finding marker genes; {func}`~scanpy.tl.rank_genes_groups` with parameter `method='logreg'` {smaller}`A Wolf`; - {func}`~scanpy.tl.louvain` provides a better implementation for; reclustering via `restrict_to` {smaller}`A Wolf`; - scanpy no longer modifies rcParams upon import, call; `settings.set_figure_params` to set the 'scanpy style' {smaller}`A Wolf`; - default cache directory is `./cache/`, set `settings.cachedir` to change; this; nested directories in this are avoided {smaller}`A Wolf`; - show edges in scatter plots based on graph visualization; {func}`~scanpy.tl.draw_graph` and {func}`~scanpy.tl.umap` by passing `edges=True` {smaller}`A Wolf`; - {func}`~scanpy.pp.downsample_counts` for downsampling counts {smaller}`MD Luecken`; - default `'louvain_groups'` are called `'louvain'` {smaller}`A Wolf`; - `'X_diffmap'` contains the zero component, plotting remains unchanged {smaller}`A Wolf`. [14min]: https://github.com/scverse/scanpy_usage/blob/master/170522_visualizing_one_million_cells/logfile_130K.txt; [3min]: https://nbviewer.jupyter.org/github/scverse/scanpy_usage/blob/master/170503_zheng17/zheng17.ipynb; [6h]: https://github.com/scverse/scanpy_usage/blob/master/170522_visualizing_one_million_cells/; [paul15]: https://nbviewer.jupyter.org/github/scverse/scanpy_usage/blob/master/170502_paul15/paul15.ipynb; [seurat]: https://nbviewer.jupyter.org/github/scverse/scanpy_usage/",cache,MatchSource.DOCS,scverse,scanpy,1.10.2,https://github.com/scverse/scanpy/tree/1.10.2/docs/release-notes/1.0.0.md:2807,cache,2807,docs/release-notes/1.0.0.md,https://scanpy.readthedocs.io,https://github.com/scverse/scanpy/tree/1.10.2/docs/release-notes/1.0.0.md,1,['cache'],['cache'],"The system’s capacity to meet its timing requirements, managing event handling and response times effectively. Performance focuses on reducing blocked time from resource contention and optimizing resource utilization under varying load conditions.","
You are an expert in evaluating and categorizing quality attributes in software engineering. You possess the necessary skills to distinguish sentences that clearly relate to a given quality attribute from those that do not. 

Evaluate whether the content accurately aligns with its associated quality attribute, given the context provided. Your goal is to determine if the content makes sense in relation to the quality attribute description or if it is a false positive.

Data:

Quality Attribute: Performance
Attribute Description: The system’s capacity to meet its timing requirements, managing event handling and response times effectively. Performance focuses on reducing blocked time from resource contention and optimizing resource utilization under varying load conditions.
Content:  contrast to tSNE, UMAP directly embeds the single-cell graph and is faster;; UMAP is also used for measuring connectivities and computing neighbors,; see {func}`~scanpy.pp.neighbors` {smaller}`A Wolf`; - graph abstraction: AGA is renamed to [PAGA](https://github.com/theislab/paga): {func}`~scanpy.tl.paga`; now,; it only measures connectivities between partitions of the single-cell graph,; pseudotime and clustering need to be computed separately via; {func}`~scanpy.tl.louvain` and {func}`~scanpy.tl.dpt`, the; connectivity measure has been improved {smaller}`A Wolf`; - logistic regression for finding marker genes; {func}`~scanpy.tl.rank_genes_groups` with parameter `method='logreg'` {smaller}`A Wolf`; - {func}`~scanpy.tl.louvain` provides a better implementation for; reclustering via `restrict_to` {smaller}`A Wolf`; - scanpy no longer modifies rcParams upon import, call; `settings.set_figure_params` to set the 'scanpy style' {smaller}`A Wolf`; - default cache directory is `./cache/`, set `settings.cachedir` to change; this; nested directories in this are avoided {smaller}`A Wolf`; - show edges in scatter plots based on graph visualization; {func}`~scanpy.tl.draw_graph` and {func}`~scanpy.tl.umap` by passing `edges=True` {smaller}`A Wolf`; - {func}`~scanpy.pp.downsample_counts` for downsampling counts {smaller}`MD Luecken`; - default `'louvain_groups'` are called `'louvain'` {smaller}`A Wolf`; - `'X_diffmap'` contains the zero component, plotting remains unchanged {smaller}`A Wolf`. [14min]: https://github.com/scverse/scanpy_usage/blob/master/170522_visualizing_one_million_cells/logfile_130K.txt; [3min]: https://nbviewer.jupyter.org/github/scverse/scanpy_usage/blob/master/170503_zheng17/zheng17.ipynb; [6h]: https://github.com/scverse/scanpy_usage/blob/master/170522_visualizing_one_million_cells/; [paul15]: https://nbviewer.jupyter.org/github/scverse/scanpy_usage/blob/master/170502_paul15/paul15.ipynb; [seurat]: https://nbviewer.jupyter.org/github/scverse/scanpy_usage/

Instructions: 
1. Analyze the content and the attribute description.
2. Determine if the content accurately reflects the intended quality attribute in this context.
3. If it does, label it as `true_positive: true`; if not, mark it as a `true_positive: false`.
4. If the content consists only of logs with no other text, mark it as a `true_positive: false`. 
4. If the content partially consists of logs, focus on analyzing remaining text. 
5. Add `reasoning` why the content is a true or false positive.
",True,"The content discusses various Scanpy functions and changes related to graph visualization, clustering methods, and performance optimizations such as UMAP implementation and connectivity measurements. These areas include improving computational efficiency and resource management under varying conditions, aligning with the definition of Performance which focuses on meeting timing requirements and optimizing resource use. The mention of specific functions like `~scanpy.tl.rank_genes_groups` and performance considerations in data processing support the link to performance quality attribute."
Performance," fixes; ```. * Updated {func}`~scanpy.read_visium` such that it can read spaceranger 2.0 files {smaller}`L Lehner`; * Fix {func}`~scanpy.pp.normalize_total` for dask {pr}`2466` {smaller}`P Angerer`; * Fix setting `sc.settings.verbosity` in some cases {pr}`2605` {smaller}`P Angerer`; * Fix all remaining pandas warnings {pr}`2789` {smaller}`P Angerer`; * Fix some annoying plotting warnings around violin plots {pr}`2844` {smaller}`P Angerer`; * Scanpy now has a test job which tests against the minumum versions of the dependencies. In the process of implementing this, many bugs associated with using older versions of `pandas`, `anndata`, `numpy`, and `matplotlib` were fixed. {pr}`2816` {smaller}`I Virshup`; * Fix warnings caused by internal usage of `pandas.DataFrame.stack` with `pandas>=2.1` {pr}`2864`{smaller}`I Virshup`; * {func}`scanpy.get.aggregate` now always returns {class}`numpy.ndarray` {pr}`2893` {smaller}`S Dicks`; * Removes self from array of neighbors for `use_approx_neighbors = True` in {func}`~scanpy.pp.scrublet` {pr}`2896`{smaller}`S Dicks`; * Compatibility with scipy 1.13 {pr}`2943` {smaller}`I Virshup`; * Fix use of {func}`~scanpy.tl.dendrogram` on highly correlated low precision data {pr}`2928` {smaller}`P Angerer`; * Fix pytest deprecation warning {pr}`2879` {smaller}`P Angerer`. ```{rubric} Development; ```. * Scanpy is now tested against python 3.12 {pr}`2863` {smaller}`ivirshup`; * Fix testing package build {pr}`2468` {smaller}`P Angerer`. ```{rubric} Deprecations; ```. * Dropped support for Python 3.8. [More details here](https://numpy.org/neps/nep-0029-deprecation_policy.html). {pr}`2695` {smaller}`P Angerer`; * Deprecated specifying large numbers of function parameters by position as opposed to by name/keyword in all public APIs.; e.g. prefer `sc.tl.umap(adata, min_dist=0.1, spread=0.8)` over `sc.tl.umap(adata, 0.1, 0.8)` {pr}`2702` {smaller}`P Angerer`; * Dropped support for `umap<0.5` for performance reasons. {pr}`2870` {smaller}`P Angerer`; ",perform,MatchSource.DOCS,scverse,scanpy,1.10.2,https://github.com/scverse/scanpy/tree/1.10.2/docs/release-notes/1.10.0.md:6778,performance,6778,docs/release-notes/1.10.0.md,https://scanpy.readthedocs.io,https://github.com/scverse/scanpy/tree/1.10.2/docs/release-notes/1.10.0.md,1,['perform'],['performance'],"The system’s capacity to meet its timing requirements, managing event handling and response times effectively. Performance focuses on reducing blocked time from resource contention and optimizing resource utilization under varying load conditions.","
You are an expert in evaluating and categorizing quality attributes in software engineering. You possess the necessary skills to distinguish sentences that clearly relate to a given quality attribute from those that do not. 

Evaluate whether the content accurately aligns with its associated quality attribute, given the context provided. Your goal is to determine if the content makes sense in relation to the quality attribute description or if it is a false positive.

Data:

Quality Attribute: Performance
Attribute Description: The system’s capacity to meet its timing requirements, managing event handling and response times effectively. Performance focuses on reducing blocked time from resource contention and optimizing resource utilization under varying load conditions.
Content:  fixes; ```. * Updated {func}`~scanpy.read_visium` such that it can read spaceranger 2.0 files {smaller}`L Lehner`; * Fix {func}`~scanpy.pp.normalize_total` for dask {pr}`2466` {smaller}`P Angerer`; * Fix setting `sc.settings.verbosity` in some cases {pr}`2605` {smaller}`P Angerer`; * Fix all remaining pandas warnings {pr}`2789` {smaller}`P Angerer`; * Fix some annoying plotting warnings around violin plots {pr}`2844` {smaller}`P Angerer`; * Scanpy now has a test job which tests against the minumum versions of the dependencies. In the process of implementing this, many bugs associated with using older versions of `pandas`, `anndata`, `numpy`, and `matplotlib` were fixed. {pr}`2816` {smaller}`I Virshup`; * Fix warnings caused by internal usage of `pandas.DataFrame.stack` with `pandas>=2.1` {pr}`2864`{smaller}`I Virshup`; * {func}`scanpy.get.aggregate` now always returns {class}`numpy.ndarray` {pr}`2893` {smaller}`S Dicks`; * Removes self from array of neighbors for `use_approx_neighbors = True` in {func}`~scanpy.pp.scrublet` {pr}`2896`{smaller}`S Dicks`; * Compatibility with scipy 1.13 {pr}`2943` {smaller}`I Virshup`; * Fix use of {func}`~scanpy.tl.dendrogram` on highly correlated low precision data {pr}`2928` {smaller}`P Angerer`; * Fix pytest deprecation warning {pr}`2879` {smaller}`P Angerer`. ```{rubric} Development; ```. * Scanpy is now tested against python 3.12 {pr}`2863` {smaller}`ivirshup`; * Fix testing package build {pr}`2468` {smaller}`P Angerer`. ```{rubric} Deprecations; ```. * Dropped support for Python 3.8. [More details here](https://numpy.org/neps/nep-0029-deprecation_policy.html). {pr}`2695` {smaller}`P Angerer`; * Deprecated specifying large numbers of function parameters by position as opposed to by name/keyword in all public APIs.; e.g. prefer `sc.tl.umap(adata, min_dist=0.1, spread=0.8)` over `sc.tl.umap(adata, 0.1, 0.8)` {pr}`2702` {smaller}`P Angerer`; * Dropped support for `umap<0.5` for performance reasons. {pr}`2870` {smaller}`P Angerer`; 

Instructions: 
1. Analyze the content and the attribute description.
2. Determine if the content accurately reflects the intended quality attribute in this context.
3. If it does, label it as `true_positive: true`; if not, mark it as a `true_positive: false`.
4. If the content consists only of logs with no other text, mark it as a `true_positive: false`. 
4. If the content partially consists of logs, focus on analyzing remaining text. 
5. Add `reasoning` why the content is a true or false positive.
",True,"The provided content details various fixes and updates in scanpy, including performance-related optimizations such as testing against Python 3.12 and compatibility with newer versions of dependencies. These changes aim to improve overall system performance by ensuring efficient resource utilization and proper timing under different loads. Thus, the content aligns well with the Performance quality attribute."
Performance," to forget to add a reference to function, be sure it got added and looks right. Look at [sc.tl.louvain](https://github.com/scverse/scanpy/blob/a811fee0ef44fcaecbde0cad6336336bce649484/scanpy/tools/_louvain.py#L22-L90) as an example for everything mentioned here. ### Plots in docstrings. One of the most useful things you can include in a docstring is examples of how the function should be used.; These are a great way to demonstrate intended usage and give users a template they can copy and modify.; We're able to include the plots produced by these snippets in the rendered docs using [matplotlib's plot directive](https://matplotlib.org/devel/plot_directive.html).; For examples of this, see the `Examples` sections of {func}`~scanpy.pl.dotplot` or {func}`~scanpy.pp.calculate_qc_metrics`. Note that anything in these sections will need to be run when the docs are built, so please keep them computationally light. - If you need computed features (e.g. an embedding, differential expression results) load data that has this precomputed.; - Try to re-use datasets, this reduces the amount of data that needs to be downloaded to the CI server. ### `Params` section. The `Params` abbreviation is a legit replacement for `Parameters`. To document parameter types use type annotations on function parameters.; These will automatically populate the docstrings on import, and when the documentation is built. Use the python standard library types (defined in [collections.abc](https://docs.python.org/3/library/collections.abc.html) and [typing](https://docs.python.org/3/library/typing.html) modules) for containers, e.g. `Sequence`s (like `list`), `Iterable`s (like `set`), and `Mapping`s (like `dict`).; Always specify what these contain, e.g. `{'a': (1, 2)}` → `Mapping[str, Tuple[int, int]]`.; If you can’t use one of those, use a concrete class like `AnnData`.; If your parameter only accepts an enumeration of strings, specify them like so: `Literal['elem-1', 'elem-2']`. ### `Returns` section.",load,MatchSource.DOCS,scverse,scanpy,1.10.2,https://github.com/scverse/scanpy/tree/1.10.2/docs/dev/documentation.md:3863,load,3863,docs/dev/documentation.md,https://scanpy.readthedocs.io,https://github.com/scverse/scanpy/tree/1.10.2/docs/dev/documentation.md,1,['load'],['load'],"The system’s capacity to meet its timing requirements, managing event handling and response times effectively. Performance focuses on reducing blocked time from resource contention and optimizing resource utilization under varying load conditions.","
You are an expert in evaluating and categorizing quality attributes in software engineering. You possess the necessary skills to distinguish sentences that clearly relate to a given quality attribute from those that do not. 

Evaluate whether the content accurately aligns with its associated quality attribute, given the context provided. Your goal is to determine if the content makes sense in relation to the quality attribute description or if it is a false positive.

Data:

Quality Attribute: Performance
Attribute Description: The system’s capacity to meet its timing requirements, managing event handling and response times effectively. Performance focuses on reducing blocked time from resource contention and optimizing resource utilization under varying load conditions.
Content:  to forget to add a reference to function, be sure it got added and looks right. Look at [sc.tl.louvain](https://github.com/scverse/scanpy/blob/a811fee0ef44fcaecbde0cad6336336bce649484/scanpy/tools/_louvain.py#L22-L90) as an example for everything mentioned here. ### Plots in docstrings. One of the most useful things you can include in a docstring is examples of how the function should be used.; These are a great way to demonstrate intended usage and give users a template they can copy and modify.; We're able to include the plots produced by these snippets in the rendered docs using [matplotlib's plot directive](https://matplotlib.org/devel/plot_directive.html).; For examples of this, see the `Examples` sections of {func}`~scanpy.pl.dotplot` or {func}`~scanpy.pp.calculate_qc_metrics`. Note that anything in these sections will need to be run when the docs are built, so please keep them computationally light. - If you need computed features (e.g. an embedding, differential expression results) load data that has this precomputed.; - Try to re-use datasets, this reduces the amount of data that needs to be downloaded to the CI server. ### `Params` section. The `Params` abbreviation is a legit replacement for `Parameters`. To document parameter types use type annotations on function parameters.; These will automatically populate the docstrings on import, and when the documentation is built. Use the python standard library types (defined in [collections.abc](https://docs.python.org/3/library/collections.abc.html) and [typing](https://docs.python.org/3/library/typing.html) modules) for containers, e.g. `Sequence`s (like `list`), `Iterable`s (like `set`), and `Mapping`s (like `dict`).; Always specify what these contain, e.g. `{'a': (1, 2)}` → `Mapping[str, Tuple[int, int]]`.; If you can’t use one of those, use a concrete class like `AnnData`.; If your parameter only accepts an enumeration of strings, specify them like so: `Literal['elem-1', 'elem-2']`. ### `Returns` section.

Instructions: 
1. Analyze the content and the attribute description.
2. Determine if the content accurately reflects the intended quality attribute in this context.
3. If it does, label it as `true_positive: true`; if not, mark it as a `true_positive: false`.
4. If the content consists only of logs with no other text, mark it as a `true_positive: false`. 
4. If the content partially consists of logs, focus on analyzing remaining text. 
5. Add `reasoning` why the content is a true or false positive.
",False,"The provided content discusses documentation practices such as including examples in docstrings and using specific abbreviations like 'Params' for parameters, along with specifying types and return values. This focuses on clarity and ease of use for users rather than system performance attributes. Since the content does not mention anything related to resource management, response times, or load conditions, it is unrelated to the Performance quality attribute."
Performance,"# Documentation. (building-the-docs)=. ## Building the docs. Dependencies for building the documentation for scanpy can be installed with `pip install -e ""scanpy[doc]""`. To build the docs, enter the `docs` directory and run `make html`. After this process completes you can take a look at the docs by opening `scanpy/docs/_build/html/index.html`. Your browser and Sphinx cache docs which have been built previously.; Sometimes these caches are not invalidated when you've updated the docs.; If docs are not updating the way you expect, first try ""force reloading"" your browser page – e.g. reload the page without using the cache.; Next, if problems persist, clear the sphinx cache and try building them again (`make clean` from `docs` directory). ```{note}; If you've cloned the repository pre 1.8.0, you may need to be more thorough in cleaning.; If you run into warnings try removing all untracked files in the docs directory.; ```. ## Adding to the docs. For any user-visible changes, please make sure a note has been added to the release notes for the relevant version so we can credit you!; These files are found in the `docs/release-notes/` directory.; We recommend waiting on this until your PR is close to done since this can often causes merge conflicts. Once you've added a new function to the documentation, you'll need to make sure there is a link somewhere in the documentation site pointing to it.; This should be added to `docs/api.md` under a relevant heading. For tutorials and more in depth examples, consider adding a notebook to [scanpy-tutorials](https://github.com/scverse/scanpy-tutorials/). The tutorials are tied to this repository via a submodule. To update the submodule, run `git submodule update --remote` from the root of the repository. Subsequently, commit and push the changes in a PR. This should be done before each release to ensure the tutorials are up to date. ## docstrings format. We use the numpydoc style for writing docstrings.; We'd primarily suggest lookin",cache,MatchSource.DOCS,scverse,scanpy,1.10.2,https://github.com/scverse/scanpy/tree/1.10.2/docs/dev/documentation.md:371,cache,371,docs/dev/documentation.md,https://scanpy.readthedocs.io,https://github.com/scverse/scanpy/tree/1.10.2/docs/dev/documentation.md,4,['cache'],"['cache', 'caches']","The system’s capacity to meet its timing requirements, managing event handling and response times effectively. Performance focuses on reducing blocked time from resource contention and optimizing resource utilization under varying load conditions.","
You are an expert in evaluating and categorizing quality attributes in software engineering. You possess the necessary skills to distinguish sentences that clearly relate to a given quality attribute from those that do not. 

Evaluate whether the content accurately aligns with its associated quality attribute, given the context provided. Your goal is to determine if the content makes sense in relation to the quality attribute description or if it is a false positive.

Data:

Quality Attribute: Performance
Attribute Description: The system’s capacity to meet its timing requirements, managing event handling and response times effectively. Performance focuses on reducing blocked time from resource contention and optimizing resource utilization under varying load conditions.
Content: # Documentation. (building-the-docs)=. ## Building the docs. Dependencies for building the documentation for scanpy can be installed with `pip install -e ""scanpy[doc]""`. To build the docs, enter the `docs` directory and run `make html`. After this process completes you can take a look at the docs by opening `scanpy/docs/_build/html/index.html`. Your browser and Sphinx cache docs which have been built previously.; Sometimes these caches are not invalidated when you've updated the docs.; If docs are not updating the way you expect, first try ""force reloading"" your browser page – e.g. reload the page without using the cache.; Next, if problems persist, clear the sphinx cache and try building them again (`make clean` from `docs` directory). ```{note}; If you've cloned the repository pre 1.8.0, you may need to be more thorough in cleaning.; If you run into warnings try removing all untracked files in the docs directory.; ```. ## Adding to the docs. For any user-visible changes, please make sure a note has been added to the release notes for the relevant version so we can credit you!; These files are found in the `docs/release-notes/` directory.; We recommend waiting on this until your PR is close to done since this can often causes merge conflicts. Once you've added a new function to the documentation, you'll need to make sure there is a link somewhere in the documentation site pointing to it.; This should be added to `docs/api.md` under a relevant heading. For tutorials and more in depth examples, consider adding a notebook to [scanpy-tutorials](https://github.com/scverse/scanpy-tutorials/). The tutorials are tied to this repository via a submodule. To update the submodule, run `git submodule update --remote` from the root of the repository. Subsequently, commit and push the changes in a PR. This should be done before each release to ensure the tutorials are up to date. ## docstrings format. We use the numpydoc style for writing docstrings.; We'd primarily suggest lookin

Instructions: 
1. Analyze the content and the attribute description.
2. Determine if the content accurately reflects the intended quality attribute in this context.
3. If it does, label it as `true_positive: true`; if not, mark it as a `true_positive: false`.
4. If the content consists only of logs with no other text, mark it as a `true_positive: false`. 
4. If the content partially consists of logs, focus on analyzing remaining text. 
5. Add `reasoning` why the content is a true or false positive.
",False,"The content provided is documentation about building and updating the documentation for scanpy, which includes instructions on how to install dependencies, build the documentation using sphinx, and clear cache issues. While this is useful information for users, it does not directly relate to performance aspects of the system such as resource utilization, event handling, or response times. Instead, it focuses on documentation processes and user guides, making it a false positive for the Performance quality attribute."
Performance,# How to. This section contains short examples on how to perform specific tasks with scanpy. ```{toctree}; knn-transformers; plotting-with-marsilea; ```; ,perform,MatchSource.DOCS,scverse,scanpy,1.10.2,https://github.com/scverse/scanpy/tree/1.10.2/docs/how-to/index.md:57,perform,57,docs/how-to/index.md,https://scanpy.readthedocs.io,https://github.com/scverse/scanpy/tree/1.10.2/docs/how-to/index.md,1,['perform'],['perform'],"The system’s capacity to meet its timing requirements, managing event handling and response times effectively. Performance focuses on reducing blocked time from resource contention and optimizing resource utilization under varying load conditions.","
You are an expert in evaluating and categorizing quality attributes in software engineering. You possess the necessary skills to distinguish sentences that clearly relate to a given quality attribute from those that do not. 

Evaluate whether the content accurately aligns with its associated quality attribute, given the context provided. Your goal is to determine if the content makes sense in relation to the quality attribute description or if it is a false positive.

Data:

Quality Attribute: Performance
Attribute Description: The system’s capacity to meet its timing requirements, managing event handling and response times effectively. Performance focuses on reducing blocked time from resource contention and optimizing resource utilization under varying load conditions.
Content: # How to. This section contains short examples on how to perform specific tasks with scanpy. ```{toctree}; knn-transformers; plotting-with-marsilea; ```; 

Instructions: 
1. Analyze the content and the attribute description.
2. Determine if the content accurately reflects the intended quality attribute in this context.
3. If it does, label it as `true_positive: true`; if not, mark it as a `true_positive: false`.
4. If the content consists only of logs with no other text, mark it as a `true_positive: false`. 
4. If the content partially consists of logs, focus on analyzing remaining text. 
5. Add `reasoning` why the content is a true or false positive.
",False,"The provided content appears to be a section header and example structure in a document related to scanpy usage. It includes commands like knn-transformers and plotting-with-marsilea, which seem more related to functionality or feature examples rather than performance metrics or resource management. There's no mention of timing requirements, event handling, response times, or load conditions. Therefore, it does not align with the Performance quality attribute."
Performance,"## Preprocessing: `pp`. ```{eval-rst}; .. module:: scanpy.pp; ```. ```{eval-rst}; .. currentmodule:: scanpy; ```. Filtering of highly-variable genes, batch-effect correction, per-cell normalization, preprocessing recipes. Any transformation of the data matrix that is not a *tool*. Other than *tools*, preprocessing steps usually don't return an easily interpretable annotation, but perform a basic transformation on the data matrix. ### Basic Preprocessing. For visual quality control, see {func}`~scanpy.pl.highest_expr_genes` and; {func}`~scanpy.pl.filter_genes_dispersion` in {mod}`scanpy.pl`. ```{eval-rst}; .. autosummary::; :nosignatures:; :toctree: ../generated/. pp.calculate_qc_metrics; pp.filter_cells; pp.filter_genes; pp.highly_variable_genes; pp.log1p; pp.pca; pp.normalize_total; pp.regress_out; pp.scale; pp.subsample; pp.downsample_counts; ```. ### Recipes. ```{eval-rst}; .. autosummary::; :nosignatures:; :toctree: generated/. pp.recipe_zheng17; pp.recipe_weinreb17; pp.recipe_seurat; ```. ### Batch effect correction. Also see [Data integration]. Note that a simple batch correction method is available via {func}`pp.regress_out`. Checkout {mod}`scanpy.external` for more. ```{eval-rst}; .. autosummary::; :nosignatures:; :toctree: generated/. pp.combat; ```. ### Doublet detection. ```{eval-rst}; .. autosummary::; :nosignatures:; :toctree: generated/. pp.scrublet; pp.scrublet_simulate_doublets; ```. ### Neighbors. ```{eval-rst}; .. autosummary::; :nosignatures:; :toctree: generated/. pp.neighbors. ```; ",perform,MatchSource.DOCS,scverse,scanpy,1.10.2,https://github.com/scverse/scanpy/tree/1.10.2/docs/api/preprocessing.md:383,perform,383,docs/api/preprocessing.md,https://scanpy.readthedocs.io,https://github.com/scverse/scanpy/tree/1.10.2/docs/api/preprocessing.md,1,['perform'],['perform'],"The system’s capacity to meet its timing requirements, managing event handling and response times effectively. Performance focuses on reducing blocked time from resource contention and optimizing resource utilization under varying load conditions.","
You are an expert in evaluating and categorizing quality attributes in software engineering. You possess the necessary skills to distinguish sentences that clearly relate to a given quality attribute from those that do not. 

Evaluate whether the content accurately aligns with its associated quality attribute, given the context provided. Your goal is to determine if the content makes sense in relation to the quality attribute description or if it is a false positive.

Data:

Quality Attribute: Performance
Attribute Description: The system’s capacity to meet its timing requirements, managing event handling and response times effectively. Performance focuses on reducing blocked time from resource contention and optimizing resource utilization under varying load conditions.
Content: ## Preprocessing: `pp`. ```{eval-rst}; .. module:: scanpy.pp; ```. ```{eval-rst}; .. currentmodule:: scanpy; ```. Filtering of highly-variable genes, batch-effect correction, per-cell normalization, preprocessing recipes. Any transformation of the data matrix that is not a *tool*. Other than *tools*, preprocessing steps usually don't return an easily interpretable annotation, but perform a basic transformation on the data matrix. ### Basic Preprocessing. For visual quality control, see {func}`~scanpy.pl.highest_expr_genes` and; {func}`~scanpy.pl.filter_genes_dispersion` in {mod}`scanpy.pl`. ```{eval-rst}; .. autosummary::; :nosignatures:; :toctree: ../generated/. pp.calculate_qc_metrics; pp.filter_cells; pp.filter_genes; pp.highly_variable_genes; pp.log1p; pp.pca; pp.normalize_total; pp.regress_out; pp.scale; pp.subsample; pp.downsample_counts; ```. ### Recipes. ```{eval-rst}; .. autosummary::; :nosignatures:; :toctree: generated/. pp.recipe_zheng17; pp.recipe_weinreb17; pp.recipe_seurat; ```. ### Batch effect correction. Also see [Data integration]. Note that a simple batch correction method is available via {func}`pp.regress_out`. Checkout {mod}`scanpy.external` for more. ```{eval-rst}; .. autosummary::; :nosignatures:; :toctree: generated/. pp.combat; ```. ### Doublet detection. ```{eval-rst}; .. autosummary::; :nosignatures:; :toctree: generated/. pp.scrublet; pp.scrublet_simulate_doublets; ```. ### Neighbors. ```{eval-rst}; .. autosummary::; :nosignatures:; :toctree: generated/. pp.neighbors. ```; 

Instructions: 
1. Analyze the content and the attribute description.
2. Determine if the content accurately reflects the intended quality attribute in this context.
3. If it does, label it as `true_positive: true`; if not, mark it as a `true_positive: false`.
4. If the content consists only of logs with no other text, mark it as a `true_positive: false`. 
4. If the content partially consists of logs, focus on analyzing remaining text. 
5. Add `reasoning` why the content is a true or false positive.
",True,"The content discusses various preprocessing steps in Scanpy such as filtering genes, normalizing data, and using PCA for dimensionality reduction. These are part of the system's ability to handle data efficiently, which relates to performance. However, some of the text refers to logs without additional context, but since it also covers preprocessing optimizations, it doesn't solely focus on logs. The overall content is more about optimizing resource utilization through effective processing steps."
Performance,"### 1.10.0 {small}`2024-03-26`. `scanpy` 1.10 brings a large amount of new features, performance improvements, and improved documentation. Some highlights:. * Improved support for out-of-core workflows via `dask`. See new tutorial: {doc}`/tutorials/experimental/dask` demonstrating counts-to-clusters for 1.4 million cells in <10 min.; * A new {doc}`basic clustering tutorial </tutorials/basics/clustering>` demonstrating an updated workflow.; * Opt-in increased performance for neighbor search and clustering ({doc}`how to guide </how-to/knn-transformers>`).; * Ability to `mask` observations or variables from a number of methods (see {doc}`/tutorials/plotting/advanced` for an example with plotting embeddings); * A new function {func}`~scanpy.get.aggregate` for computing aggregations of your data, very useful for pseudo bulking!. ```{rubric} Features; ```. * {func}`~scanpy.pp.scrublet` and {func}`~scanpy.pp.scrublet_simulate_doublets` were moved from {mod}`scanpy.external.pp` to {mod}`scanpy.pp`. The `scrublet` implementation is now maintained as part of scanpy {pr}`2703` {smaller}`P Angerer`; * {func}`scanpy.pp.pca`, {func}`scanpy.pp.scale`, {func}`scanpy.pl.embedding`, and {func}`scanpy.experimental.pp.normalize_pearson_residuals_pca` now support a `mask` parameter {pr}`2272` {smaller}`C Bright, T Marcella, & P Angerer`; * Enhanced dask support for some internal utilities, paving the way for more extensive dask support {pr}`2696` {smaller}`P Angerer`; * {func}`scanpy.pp.highly_variable_genes` supports dask for the default `seurat` and `cell_ranger` flavors {pr}`2809` {smaller}`P Angerer`; * New function {func}`scanpy.get.aggregate` which allows grouped aggregations over your data. Useful for pseudobulking! {pr}`2590` {smaller}`Isaac Virshup` {smaller}`Ilan Gold` {smaller}`Jon Bloom`; * {func}`scanpy.pp.neighbors` now has a `transformer` argument allowing the use of different ANN/ KNN libraries {pr}`2536` {smaller}`P Angerer`; * {func}`scanpy.experimental.pp.highly_variab",perform,MatchSource.DOCS,scverse,scanpy,1.10.2,https://github.com/scverse/scanpy/tree/1.10.2/docs/release-notes/1.10.0.md:85,performance,85,docs/release-notes/1.10.0.md,https://scanpy.readthedocs.io,https://github.com/scverse/scanpy/tree/1.10.2/docs/release-notes/1.10.0.md,2,['perform'],['performance'],"The system’s capacity to meet its timing requirements, managing event handling and response times effectively. Performance focuses on reducing blocked time from resource contention and optimizing resource utilization under varying load conditions.","
You are an expert in evaluating and categorizing quality attributes in software engineering. You possess the necessary skills to distinguish sentences that clearly relate to a given quality attribute from those that do not. 

Evaluate whether the content accurately aligns with its associated quality attribute, given the context provided. Your goal is to determine if the content makes sense in relation to the quality attribute description or if it is a false positive.

Data:

Quality Attribute: Performance
Attribute Description: The system’s capacity to meet its timing requirements, managing event handling and response times effectively. Performance focuses on reducing blocked time from resource contention and optimizing resource utilization under varying load conditions.
Content: ### 1.10.0 {small}`2024-03-26`. `scanpy` 1.10 brings a large amount of new features, performance improvements, and improved documentation. Some highlights:. * Improved support for out-of-core workflows via `dask`. See new tutorial: {doc}`/tutorials/experimental/dask` demonstrating counts-to-clusters for 1.4 million cells in <10 min.; * A new {doc}`basic clustering tutorial </tutorials/basics/clustering>` demonstrating an updated workflow.; * Opt-in increased performance for neighbor search and clustering ({doc}`how to guide </how-to/knn-transformers>`).; * Ability to `mask` observations or variables from a number of methods (see {doc}`/tutorials/plotting/advanced` for an example with plotting embeddings); * A new function {func}`~scanpy.get.aggregate` for computing aggregations of your data, very useful for pseudo bulking!. ```{rubric} Features; ```. * {func}`~scanpy.pp.scrublet` and {func}`~scanpy.pp.scrublet_simulate_doublets` were moved from {mod}`scanpy.external.pp` to {mod}`scanpy.pp`. The `scrublet` implementation is now maintained as part of scanpy {pr}`2703` {smaller}`P Angerer`; * {func}`scanpy.pp.pca`, {func}`scanpy.pp.scale`, {func}`scanpy.pl.embedding`, and {func}`scanpy.experimental.pp.normalize_pearson_residuals_pca` now support a `mask` parameter {pr}`2272` {smaller}`C Bright, T Marcella, & P Angerer`; * Enhanced dask support for some internal utilities, paving the way for more extensive dask support {pr}`2696` {smaller}`P Angerer`; * {func}`scanpy.pp.highly_variable_genes` supports dask for the default `seurat` and `cell_ranger` flavors {pr}`2809` {smaller}`P Angerer`; * New function {func}`scanpy.get.aggregate` which allows grouped aggregations over your data. Useful for pseudobulking! {pr}`2590` {smaller}`Isaac Virshup` {smaller}`Ilan Gold` {smaller}`Jon Bloom`; * {func}`scanpy.pp.neighbors` now has a `transformer` argument allowing the use of different ANN/ KNN libraries {pr}`2536` {smaller}`P Angerer`; * {func}`scanpy.experimental.pp.highly_variab

Instructions: 
1. Analyze the content and the attribute description.
2. Determine if the content accurately reflects the intended quality attribute in this context.
3. If it does, label it as `true_positive: true`; if not, mark it as a `true_positive: false`.
4. If the content consists only of logs with no other text, mark it as a `true_positive: false`. 
4. If the content partially consists of logs, focus on analyzing remaining text. 
5. Add `reasoning` why the content is a true or false positive.
",True,"The content discusses performance improvements in scanpy such as enhanced dask support, better neighbor search and clustering optimizations, and new functions supporting efficient computations. These are directly related to the system's capacity to handle tasks efficiently under varying loads, which aligns with the definition of Performance."
Performance,"### 1.10.2 {small}`2024-06-25`. ```{rubric} Development features; ```. * Add performance benchmarking {pr}`2977` {smaller}`R Shrestha`, {smaller}`P Angerer`. ```{rubric} Docs; ```. * Document several missing parameters in docstring {pr}`2888` {smaller}`S Cheney`; * Fixed incorrect instructions in ""testing"" dev docs {pr}`2994` {smaller}`I Virshup`; * Update marsilea tutorial to use `group_` methods {pr}`3001` {smaller}`I Virshup`; * Fixed citations {pr}`3032` {smaller}`P Angerer`; * Improve dataset documentation {pr}`3060` {smaller}`P Angerer`. ```{rubric} Bug fixes; ```. * Compatibility with `matplotlib` 3.9 {pr}`2999` {smaller}`I Virshup`; * Add clear errors where `backed` mode-like matrices (i.e., from `sparse_dataset`) are not supported {pr}`3048` {smaller}`I gold`; * Write out full pca results when `_choose_representation` is called i.e., {func}`~scanpy.pp.neighbors` without {func}`~scanpy.pp.pca` {pr}`3079` {smaller}`I gold`; * Fix deprecated use of `.A` with sparse matrices {pr}`3084` {smaller}`P Angerer`; * Fix zappy support {pr}`3089` {smaller}`P Angerer`; * Fix dotplot group order with {mod}`pandas` 1.x {pr}`3101` {smaller}`P Angerer`. ```{rubric} Performance; ```. * `sparse_mean_variance_axis` now uses all cores for the calculations {pr}`3015` {smaller}`S Dicks`; * `pp.highly_variable_genes` with `flavor=seurat_v3` now uses a numba kernel {pr}`3017` {smaller}`S Dicks`; * Speed up {func}`~scanpy.pp.scrublet` {pr}`3044` {smaller}`S Dicks` and {pr}`3056` {smaller}`P Angerer`; * Speed up clipping of array in {func}`~scanpy.pp.scale` {pr}`3100` {smaller}`P Ashish & S Dicks`; ",perform,MatchSource.DOCS,scverse,scanpy,1.10.2,https://github.com/scverse/scanpy/tree/1.10.2/docs/release-notes/1.10.2.md:77,performance,77,docs/release-notes/1.10.2.md,https://scanpy.readthedocs.io,https://github.com/scverse/scanpy/tree/1.10.2/docs/release-notes/1.10.2.md,1,['perform'],['performance'],"The system’s capacity to meet its timing requirements, managing event handling and response times effectively. Performance focuses on reducing blocked time from resource contention and optimizing resource utilization under varying load conditions.","
You are an expert in evaluating and categorizing quality attributes in software engineering. You possess the necessary skills to distinguish sentences that clearly relate to a given quality attribute from those that do not. 

Evaluate whether the content accurately aligns with its associated quality attribute, given the context provided. Your goal is to determine if the content makes sense in relation to the quality attribute description or if it is a false positive.

Data:

Quality Attribute: Performance
Attribute Description: The system’s capacity to meet its timing requirements, managing event handling and response times effectively. Performance focuses on reducing blocked time from resource contention and optimizing resource utilization under varying load conditions.
Content: ### 1.10.2 {small}`2024-06-25`. ```{rubric} Development features; ```. * Add performance benchmarking {pr}`2977` {smaller}`R Shrestha`, {smaller}`P Angerer`. ```{rubric} Docs; ```. * Document several missing parameters in docstring {pr}`2888` {smaller}`S Cheney`; * Fixed incorrect instructions in ""testing"" dev docs {pr}`2994` {smaller}`I Virshup`; * Update marsilea tutorial to use `group_` methods {pr}`3001` {smaller}`I Virshup`; * Fixed citations {pr}`3032` {smaller}`P Angerer`; * Improve dataset documentation {pr}`3060` {smaller}`P Angerer`. ```{rubric} Bug fixes; ```. * Compatibility with `matplotlib` 3.9 {pr}`2999` {smaller}`I Virshup`; * Add clear errors where `backed` mode-like matrices (i.e., from `sparse_dataset`) are not supported {pr}`3048` {smaller}`I gold`; * Write out full pca results when `_choose_representation` is called i.e., {func}`~scanpy.pp.neighbors` without {func}`~scanpy.pp.pca` {pr}`3079` {smaller}`I gold`; * Fix deprecated use of `.A` with sparse matrices {pr}`3084` {smaller}`P Angerer`; * Fix zappy support {pr}`3089` {smaller}`P Angerer`; * Fix dotplot group order with {mod}`pandas` 1.x {pr}`3101` {smaller}`P Angerer`. ```{rubric} Performance; ```. * `sparse_mean_variance_axis` now uses all cores for the calculations {pr}`3015` {smaller}`S Dicks`; * `pp.highly_variable_genes` with `flavor=seurat_v3` now uses a numba kernel {pr}`3017` {smaller}`S Dicks`; * Speed up {func}`~scanpy.pp.scrublet` {pr}`3044` {smaller}`S Dicks` and {pr}`3056` {smaller}`P Angerer`; * Speed up clipping of array in {func}`~scanpy.pp.scale` {pr}`3100` {smaller}`P Ashish & S Dicks`; 

Instructions: 
1. Analyze the content and the attribute description.
2. Determine if the content accurately reflects the intended quality attribute in this context.
3. If it does, label it as `true_positive: true`; if not, mark it as a `true_positive: false`.
4. If the content consists only of logs with no other text, mark it as a `true_positive: false`. 
4. If the content partially consists of logs, focus on analyzing remaining text. 
5. Add `reasoning` why the content is a true or false positive.
",True,The content includes changes related to performance improvements such as optimizing resource usage and speeding up computations under varying loads. The fixed instructions and documentations also indirectly support system's capacity to handle resources effectively.
Performance,"### 1.3.3 {small}`2018-11-05`. ```{rubric} Major updates; ```. - a fully distributed preprocessing backend {smaller}`T White and the Laserson Lab`. ```{rubric} Code design; ```. - {func}`~scanpy.read_10x_h5` and {func}`~scanpy.read_10x_mtx` read Cell Ranger 3.0 outputs {pr}`334` {smaller}`Q Gong`. ```{note}; ```{rubric} Also see changes in anndata 0.6.; ```. - changed default compression to `None` in {meth}`~anndata.AnnData.write_h5ad` to speed up read and write, disk space use is usually less critical; - performance gains in {meth}`~anndata.AnnData.write_h5ad` due to better handling of strings and categories {smaller}`S Rybakov`; ```; ",perform,MatchSource.DOCS,scverse,scanpy,1.10.2,https://github.com/scverse/scanpy/tree/1.10.2/docs/release-notes/1.3.3.md:511,performance,511,docs/release-notes/1.3.3.md,https://scanpy.readthedocs.io,https://github.com/scverse/scanpy/tree/1.10.2/docs/release-notes/1.3.3.md,1,['perform'],['performance'],"The system’s capacity to meet its timing requirements, managing event handling and response times effectively. Performance focuses on reducing blocked time from resource contention and optimizing resource utilization under varying load conditions.","
You are an expert in evaluating and categorizing quality attributes in software engineering. You possess the necessary skills to distinguish sentences that clearly relate to a given quality attribute from those that do not. 

Evaluate whether the content accurately aligns with its associated quality attribute, given the context provided. Your goal is to determine if the content makes sense in relation to the quality attribute description or if it is a false positive.

Data:

Quality Attribute: Performance
Attribute Description: The system’s capacity to meet its timing requirements, managing event handling and response times effectively. Performance focuses on reducing blocked time from resource contention and optimizing resource utilization under varying load conditions.
Content: ### 1.3.3 {small}`2018-11-05`. ```{rubric} Major updates; ```. - a fully distributed preprocessing backend {smaller}`T White and the Laserson Lab`. ```{rubric} Code design; ```. - {func}`~scanpy.read_10x_h5` and {func}`~scanpy.read_10x_mtx` read Cell Ranger 3.0 outputs {pr}`334` {smaller}`Q Gong`. ```{note}; ```{rubric} Also see changes in anndata 0.6.; ```. - changed default compression to `None` in {meth}`~anndata.AnnData.write_h5ad` to speed up read and write, disk space use is usually less critical; - performance gains in {meth}`~anndata.AnnData.write_h5ad` due to better handling of strings and categories {smaller}`S Rybakov`; ```; 

Instructions: 
1. Analyze the content and the attribute description.
2. Determine if the content accurately reflects the intended quality attribute in this context.
3. If it does, label it as `true_positive: true`; if not, mark it as a `true_positive: false`.
4. If the content consists only of logs with no other text, mark it as a `true_positive: false`. 
4. If the content partially consists of logs, focus on analyzing remaining text. 
5. Add `reasoning` why the content is a true or false positive.
",True,"The content discusses changes in code design related to performance improvements, specifically mentioning resource optimization and load handling."
Performance,"### 1.4.2 {small}`2019-05-06`. ```{rubric} New functionality; ```. - {func}`~scanpy.pp.combat` supports additional covariates which may include adjustment variables or biological condition {pr}`618` {smaller}`G Eraslan`; - {func}`~scanpy.pp.highly_variable_genes` has a `batch_key` option which performs HVG selection in each batch separately to avoid selecting genes that vary strongly across batches {pr}`622` {smaller}`G Eraslan`. ```{rubric} Bug fixes; ```. - {func}`~scanpy.tl.rank_genes_groups` t-test implementation doesn't return NaN when variance is 0, also changed to scipy's implementation {pr}`621` {smaller}`I Virshup`; - {func}`~scanpy.tl.umap` with `init_pos='paga'` detects correct `dtype` {smaller}`A Wolf`; - {func}`~scanpy.tl.louvain` and {func}`~scanpy.tl.leiden` auto-generate `key_added=louvain_R` upon passing `restrict_to`, which was temporarily changed in `1.4.1` {smaller}`A Wolf`. ```{rubric} Code design; ```. - {func}`~scanpy.pp.neighbors` and {func}`~scanpy.tl.umap` got rid of UMAP legacy code and introduced UMAP as a dependency {pr}`576` {smaller}`S Rybakov`; ",perform,MatchSource.DOCS,scverse,scanpy,1.10.2,https://github.com/scverse/scanpy/tree/1.10.2/docs/release-notes/1.4.2.md:295,performs,295,docs/release-notes/1.4.2.md,https://scanpy.readthedocs.io,https://github.com/scverse/scanpy/tree/1.10.2/docs/release-notes/1.4.2.md,1,['perform'],['performs'],"The system’s capacity to meet its timing requirements, managing event handling and response times effectively. Performance focuses on reducing blocked time from resource contention and optimizing resource utilization under varying load conditions.","
You are an expert in evaluating and categorizing quality attributes in software engineering. You possess the necessary skills to distinguish sentences that clearly relate to a given quality attribute from those that do not. 

Evaluate whether the content accurately aligns with its associated quality attribute, given the context provided. Your goal is to determine if the content makes sense in relation to the quality attribute description or if it is a false positive.

Data:

Quality Attribute: Performance
Attribute Description: The system’s capacity to meet its timing requirements, managing event handling and response times effectively. Performance focuses on reducing blocked time from resource contention and optimizing resource utilization under varying load conditions.
Content: ### 1.4.2 {small}`2019-05-06`. ```{rubric} New functionality; ```. - {func}`~scanpy.pp.combat` supports additional covariates which may include adjustment variables or biological condition {pr}`618` {smaller}`G Eraslan`; - {func}`~scanpy.pp.highly_variable_genes` has a `batch_key` option which performs HVG selection in each batch separately to avoid selecting genes that vary strongly across batches {pr}`622` {smaller}`G Eraslan`. ```{rubric} Bug fixes; ```. - {func}`~scanpy.tl.rank_genes_groups` t-test implementation doesn't return NaN when variance is 0, also changed to scipy's implementation {pr}`621` {smaller}`I Virshup`; - {func}`~scanpy.tl.umap` with `init_pos='paga'` detects correct `dtype` {smaller}`A Wolf`; - {func}`~scanpy.tl.louvain` and {func}`~scanpy.tl.leiden` auto-generate `key_added=louvain_R` upon passing `restrict_to`, which was temporarily changed in `1.4.1` {smaller}`A Wolf`. ```{rubric} Code design; ```. - {func}`~scanpy.pp.neighbors` and {func}`~scanpy.tl.umap` got rid of UMAP legacy code and introduced UMAP as a dependency {pr}`576` {smaller}`S Rybakov`; 

Instructions: 
1. Analyze the content and the attribute description.
2. Determine if the content accurately reflects the intended quality attribute in this context.
3. If it does, label it as `true_positive: true`; if not, mark it as a `true_positive: false`.
4. If the content consists only of logs with no other text, mark it as a `true_positive: false`. 
4. If the content partially consists of logs, focus on analyzing remaining text. 
5. Add `reasoning` why the content is a true or false positive.
",True,"The content describes updates to functionality including new features and bug fixes in specific software components like scanpy. It mentions performance improvements such as using UMAP dependencies correctly and optimizing resource utilization through batch processing adjustments. These changes align with enhancing the system's capacity to handle tasks efficiently under varying conditions, fitting the definition of Performance."
Performance,"### 1.4.3 {small}`2019-05-14`. ```{rubric} Bug fixes; ```. - {func}`~scanpy.pp.neighbors` correctly infers `n_neighbors` again from `params`, which was temporarily broken in `v1.4.2` {smaller}`I Virshup`. ```{rubric} Code design; ```. - {func}`~scanpy.pp.calculate_qc_metrics` is single threaded by default for datasets under 300,000 cells -- allowing cached compilation {pr}`615` {smaller}`I Virshup`; ",cache,MatchSource.DOCS,scverse,scanpy,1.10.2,https://github.com/scverse/scanpy/tree/1.10.2/docs/release-notes/1.4.3.md:352,cached,352,docs/release-notes/1.4.3.md,https://scanpy.readthedocs.io,https://github.com/scverse/scanpy/tree/1.10.2/docs/release-notes/1.4.3.md,1,['cache'],['cached'],"The system’s capacity to meet its timing requirements, managing event handling and response times effectively. Performance focuses on reducing blocked time from resource contention and optimizing resource utilization under varying load conditions.","
You are an expert in evaluating and categorizing quality attributes in software engineering. You possess the necessary skills to distinguish sentences that clearly relate to a given quality attribute from those that do not. 

Evaluate whether the content accurately aligns with its associated quality attribute, given the context provided. Your goal is to determine if the content makes sense in relation to the quality attribute description or if it is a false positive.

Data:

Quality Attribute: Performance
Attribute Description: The system’s capacity to meet its timing requirements, managing event handling and response times effectively. Performance focuses on reducing blocked time from resource contention and optimizing resource utilization under varying load conditions.
Content: ### 1.4.3 {small}`2019-05-14`. ```{rubric} Bug fixes; ```. - {func}`~scanpy.pp.neighbors` correctly infers `n_neighbors` again from `params`, which was temporarily broken in `v1.4.2` {smaller}`I Virshup`. ```{rubric} Code design; ```. - {func}`~scanpy.pp.calculate_qc_metrics` is single threaded by default for datasets under 300,000 cells -- allowing cached compilation {pr}`615` {smaller}`I Virshup`; 

Instructions: 
1. Analyze the content and the attribute description.
2. Determine if the content accurately reflects the intended quality attribute in this context.
3. If it does, label it as `true_positive: true`; if not, mark it as a `true_positive: false`.
4. If the content consists only of logs with no other text, mark it as a `true_positive: false`. 
4. If the content partially consists of logs, focus on analyzing remaining text. 
5. Add `reasoning` why the content is a true or false positive.
",False,"The content describes bug fixes and code design changes in specific functions. While important for maintaining system performance, these updates are not directly describing performance attributes but rather maintenance tasks. The focus on resource optimization might align with performance, but the context here seems to be more about functionality and bug fixing rather than optimizing timing or handling varying loads. Therefore, it's a true_positive: false."
Performance,"### 1.5.0 {small}`2020-05-15`. The `1.5.0` release adds a lot of new functionality, much of which takes advantage of {mod}`anndata` updates `0.7.0 - 0.7.2`. Highlights of this release include support for spatial data, dedicated handling of graphs in AnnData, sparse PCA, an interface with scvi, and others. ```{rubric} Spatial data support; ```. - Basic analysis {doc}`/tutorials/spatial/basic-analysis` and integration with single cell data {doc}`/tutorials/spatial/integration-scanorama` {smaller}`G Palla`; - {func}`~scanpy.read_visium` read 10x Visium data {pr}`1034` {smaller}`G Palla, P Angerer, I Virshup`; - {func}`~scanpy.datasets.visium_sge` load Visium data directly from 10x Genomics {pr}`1013` {smaller}`M Mirkazemi, G Palla, P Angerer`; - {func}`~scanpy.pl.spatial` plot spatial data {pr}`1012` {smaller}`G Palla, P Angerer`. ```{rubric} New functionality; ```. - Many functions, like {func}`~scanpy.pp.neighbors` and {func}`~scanpy.tl.umap`, now store cell-by-cell graphs in {attr}`~anndata.AnnData.obsp` {pr}`1118` {smaller}`S Rybakov`; - {func}`~scanpy.pp.scale` and {func}`~scanpy.pp.log1p` can be used on any element in {attr}`~anndata.AnnData.layers` or {attr}`~anndata.AnnData.obsm` {pr}`1173` {smaller}`I Virshup`. ```{rubric} External tools; ```. - `scanpy.external.pp.scvi` for preprocessing with scVI {pr}`1085` {smaller}`G Xing`; - Guide for using `Scanpy in R` {pr}`1186` {smaller}`L Zappia`. ```{rubric} Performance; ```. - {func}`~scanpy.pp.pca` now uses efficient implicit centering for sparse matrices. This can lead to signifigantly improved performance for large datasets {pr}`1066` {smaller}`A Tarashansky`; - {func}`~scanpy.tl.score_genes` now has an efficient implementation for sparse matrices with missing values {pr}`1196` {smaller}`redst4r`. ```{warning}; The new {func}`~scanpy.pp.pca` implementation can result in slightly different results for sparse matrices. See the pr ({pr}`1066`) and documentation for more info.; ```. ```{rubric} Code design; ```. - {f",load,MatchSource.DOCS,scverse,scanpy,1.10.2,https://github.com/scverse/scanpy/tree/1.10.2/docs/release-notes/1.5.0.md:652,load,652,docs/release-notes/1.5.0.md,https://scanpy.readthedocs.io,https://github.com/scverse/scanpy/tree/1.10.2/docs/release-notes/1.5.0.md,1,['load'],['load'],"The system’s capacity to meet its timing requirements, managing event handling and response times effectively. Performance focuses on reducing blocked time from resource contention and optimizing resource utilization under varying load conditions.","
You are an expert in evaluating and categorizing quality attributes in software engineering. You possess the necessary skills to distinguish sentences that clearly relate to a given quality attribute from those that do not. 

Evaluate whether the content accurately aligns with its associated quality attribute, given the context provided. Your goal is to determine if the content makes sense in relation to the quality attribute description or if it is a false positive.

Data:

Quality Attribute: Performance
Attribute Description: The system’s capacity to meet its timing requirements, managing event handling and response times effectively. Performance focuses on reducing blocked time from resource contention and optimizing resource utilization under varying load conditions.
Content: ### 1.5.0 {small}`2020-05-15`. The `1.5.0` release adds a lot of new functionality, much of which takes advantage of {mod}`anndata` updates `0.7.0 - 0.7.2`. Highlights of this release include support for spatial data, dedicated handling of graphs in AnnData, sparse PCA, an interface with scvi, and others. ```{rubric} Spatial data support; ```. - Basic analysis {doc}`/tutorials/spatial/basic-analysis` and integration with single cell data {doc}`/tutorials/spatial/integration-scanorama` {smaller}`G Palla`; - {func}`~scanpy.read_visium` read 10x Visium data {pr}`1034` {smaller}`G Palla, P Angerer, I Virshup`; - {func}`~scanpy.datasets.visium_sge` load Visium data directly from 10x Genomics {pr}`1013` {smaller}`M Mirkazemi, G Palla, P Angerer`; - {func}`~scanpy.pl.spatial` plot spatial data {pr}`1012` {smaller}`G Palla, P Angerer`. ```{rubric} New functionality; ```. - Many functions, like {func}`~scanpy.pp.neighbors` and {func}`~scanpy.tl.umap`, now store cell-by-cell graphs in {attr}`~anndata.AnnData.obsp` {pr}`1118` {smaller}`S Rybakov`; - {func}`~scanpy.pp.scale` and {func}`~scanpy.pp.log1p` can be used on any element in {attr}`~anndata.AnnData.layers` or {attr}`~anndata.AnnData.obsm` {pr}`1173` {smaller}`I Virshup`. ```{rubric} External tools; ```. - `scanpy.external.pp.scvi` for preprocessing with scVI {pr}`1085` {smaller}`G Xing`; - Guide for using `Scanpy in R` {pr}`1186` {smaller}`L Zappia`. ```{rubric} Performance; ```. - {func}`~scanpy.pp.pca` now uses efficient implicit centering for sparse matrices. This can lead to signifigantly improved performance for large datasets {pr}`1066` {smaller}`A Tarashansky`; - {func}`~scanpy.tl.score_genes` now has an efficient implementation for sparse matrices with missing values {pr}`1196` {smaller}`redst4r`. ```{warning}; The new {func}`~scanpy.pp.pca` implementation can result in slightly different results for sparse matrices. See the pr ({pr}`1066`) and documentation for more info.; ```. ```{rubric} Code design; ```. - {f

Instructions: 
1. Analyze the content and the attribute description.
2. Determine if the content accurately reflects the intended quality attribute in this context.
3. If it does, label it as `true_positive: true`; if not, mark it as a `true_positive: false`.
4. If the content consists only of logs with no other text, mark it as a `true_positive: false`. 
4. If the content partially consists of logs, focus on analyzing remaining text. 
5. Add `reasoning` why the content is a true or false positive.
",True,"The content discusses various new features and updates in the 1.5.0 release of the system, including support for spatial data, integration with single-cell data, new functions like scanpy.pp.scale, and improvements to PCA processing. The section labeled under 'Performance' mentions that scanpy.tl.score_genes has an efficient implementation for sparse matrices and that scanpy.pp.pca uses implicit centering for improved performance on large datasets. These enhancements align with the quality attribute of Performance, as they involve optimizing resource utilization and reducing blocked time through more efficient processing. Therefore, the content accurately reflects the intended quality attribute."
Performance,"(settings)=. ## Settings. ```{eval-rst}; .. currentmodule:: scanpy; ```. A convenience function for setting some default {obj}`matplotlib.rcParams` and a; high-resolution jupyter display backend useful for use in notebooks. ```{eval-rst}; .. autosummary::; :nosignatures:; :toctree: ../generated/. set_figure_params; ```. An instance of the {class}`~scanpy._settings.ScanpyConfig` is available as `scanpy.settings` and allows configuring Scanpy. ```{eval-rst}; .. autosummary::; :nosignatures:; :toctree: ../generated/. _settings.ScanpyConfig; ```. Some selected settings are discussed in the following. Influence the global behavior of plotting functions. In non-interactive scripts,; you'd usually want to set `settings.autoshow` to `False`. % no :toctree: here because they are linked under the class. ```{eval-rst}; .. autosummary::; :nosignatures:. ~_settings.ScanpyConfig.autoshow; ~_settings.ScanpyConfig.autosave; ```. The default directories for saving figures, caching files and storing datasets. ```{eval-rst}; .. autosummary::; :nosignatures:. ~_settings.ScanpyConfig.figdir; ~_settings.ScanpyConfig.cachedir; ~_settings.ScanpyConfig.datasetdir; ```. The verbosity of logging output, where verbosity levels have the following; meaning: 0='error', 1='warning', 2='info', 3='hint', 4=more details, 5=even more; details, etc. ```{eval-rst}; .. autosummary::; :nosignatures:. ~_settings.ScanpyConfig.verbosity; ```. Print versions of packages that might influence numerical results. ```{eval-rst}; .. autosummary::; :nosignatures:; :toctree: ../generated/. logging.print_header; logging.print_versions. ```; ",cache,MatchSource.DOCS,scverse,scanpy,1.10.2,https://github.com/scverse/scanpy/tree/1.10.2/docs/api/settings.md:1112,cachedir,1112,docs/api/settings.md,https://scanpy.readthedocs.io,https://github.com/scverse/scanpy/tree/1.10.2/docs/api/settings.md,1,['cache'],['cachedir'],"The system’s capacity to meet its timing requirements, managing event handling and response times effectively. Performance focuses on reducing blocked time from resource contention and optimizing resource utilization under varying load conditions.","
You are an expert in evaluating and categorizing quality attributes in software engineering. You possess the necessary skills to distinguish sentences that clearly relate to a given quality attribute from those that do not. 

Evaluate whether the content accurately aligns with its associated quality attribute, given the context provided. Your goal is to determine if the content makes sense in relation to the quality attribute description or if it is a false positive.

Data:

Quality Attribute: Performance
Attribute Description: The system’s capacity to meet its timing requirements, managing event handling and response times effectively. Performance focuses on reducing blocked time from resource contention and optimizing resource utilization under varying load conditions.
Content: (settings)=. ## Settings. ```{eval-rst}; .. currentmodule:: scanpy; ```. A convenience function for setting some default {obj}`matplotlib.rcParams` and a; high-resolution jupyter display backend useful for use in notebooks. ```{eval-rst}; .. autosummary::; :nosignatures:; :toctree: ../generated/. set_figure_params; ```. An instance of the {class}`~scanpy._settings.ScanpyConfig` is available as `scanpy.settings` and allows configuring Scanpy. ```{eval-rst}; .. autosummary::; :nosignatures:; :toctree: ../generated/. _settings.ScanpyConfig; ```. Some selected settings are discussed in the following. Influence the global behavior of plotting functions. In non-interactive scripts,; you'd usually want to set `settings.autoshow` to `False`. % no :toctree: here because they are linked under the class. ```{eval-rst}; .. autosummary::; :nosignatures:. ~_settings.ScanpyConfig.autoshow; ~_settings.ScanpyConfig.autosave; ```. The default directories for saving figures, caching files and storing datasets. ```{eval-rst}; .. autosummary::; :nosignatures:. ~_settings.ScanpyConfig.figdir; ~_settings.ScanpyConfig.cachedir; ~_settings.ScanpyConfig.datasetdir; ```. The verbosity of logging output, where verbosity levels have the following; meaning: 0='error', 1='warning', 2='info', 3='hint', 4=more details, 5=even more; details, etc. ```{eval-rst}; .. autosummary::; :nosignatures:. ~_settings.ScanpyConfig.verbosity; ```. Print versions of packages that might influence numerical results. ```{eval-rst}; .. autosummary::; :nosignatures:; :toctree: ../generated/. logging.print_header; logging.print_versions. ```; 

Instructions: 
1. Analyze the content and the attribute description.
2. Determine if the content accurately reflects the intended quality attribute in this context.
3. If it does, label it as `true_positive: true`; if not, mark it as a `true_positive: false`.
4. If the content consists only of logs with no other text, mark it as a `true_positive: false`. 
4. If the content partially consists of logs, focus on analyzing remaining text. 
5. Add `reasoning` why the content is a true or false positive.
",False,"The provided content discusses settings related to configuring Matplotlib parameters and Scanpy configuration. While this is useful for users, it does not directly relate to performance metrics or system timing requirements. Instead, it focuses on customization and logging settings, which are more about user experience than the actual processing capabilities or resource management of the system. Therefore, this content does not accurately reflect the quality attribute of Performance."
Performance,"//umgear.org/) {small}`U Maryland`; - the [Galaxy Project](https://humancellatlas.usegalaxy.eu) for the Human Cell Atlas [\[tweet\]](https://twitter.com/ExpressionAtlas/status/1151797848469626881) {small}`U Freiburg`; - the [Expression Atlas](https://www.ebi.ac.uk/gxa/sc/help.html) {small}`EMBL-EBI`. ## Modalities. ### RNA velocity. - [scVelo](https://scvelo.org) {small}`Helmholtz Munich`. ### Spatial Transcriptomics Tools. - [squidpy](https://squidpy.readthedocs.io/en/stable/) {small}`Helmholtz Munich`. > Squidpy is a comprehensive toolkit for working with spatial single cell omics data. - [PASTE](https://github.com/raphael-group/paste) {small}`Princeton`. > PASTE is a computational method to align and integrate spatial transcriptomics data across adjacent tissue slices by leveraging both gene expression similarity and spatial distances between spots. - [bento](https://bento-tools.readthedocs.io/en/latest/) 🍱 {small}`UC San Diego`. > Bento is an accessible Python toolkit for performing subcellular analysis of spatial transcriptomics data. ### Multimodal integration. - [MUON](https://muon.readthedocs.io/en/latest/) and [MuData](https://mudata.readthedocs.io/en/latest/) {small}`EMBL/ DKFZ`. > MUON, and it's associated data structure MuData are designed to organise, analyse, visualise, and exchange multimodal data.; > MUON enables a range of analyses for ATAC and CITE-seq, from data preprocessing to flexible multi-omics alignment. ### Adaptive immune receptor repertoire (AIRR). - [scirpy](https://github.com/icbi-lab/scirpy) {small}`Medical University of Innsbruck`. > scirpy is a scanpy extension to expore single-cell T-cell receptor (TCR) and B-cell receptor (BCR) repertoires. - [dandelion](https://github.com/zktuong/dandelion) {small}`University of Cambridge`. > dandelion is a single-cell BCR-seq network analysis package that integrates with transcriptomic data analyzed via scanpy. ### Long reads. - [Swan](https://freese.gitbook.io/swan/tutorials/data_processing) {sma",perform,MatchSource.DOCS,scverse,scanpy,1.10.2,https://github.com/scverse/scanpy/tree/1.10.2/docs/ecosystem.md:2000,performing,2000,docs/ecosystem.md,https://scanpy.readthedocs.io,https://github.com/scverse/scanpy/tree/1.10.2/docs/ecosystem.md,1,['perform'],['performing'],"The system’s capacity to meet its timing requirements, managing event handling and response times effectively. Performance focuses on reducing blocked time from resource contention and optimizing resource utilization under varying load conditions.","
You are an expert in evaluating and categorizing quality attributes in software engineering. You possess the necessary skills to distinguish sentences that clearly relate to a given quality attribute from those that do not. 

Evaluate whether the content accurately aligns with its associated quality attribute, given the context provided. Your goal is to determine if the content makes sense in relation to the quality attribute description or if it is a false positive.

Data:

Quality Attribute: Performance
Attribute Description: The system’s capacity to meet its timing requirements, managing event handling and response times effectively. Performance focuses on reducing blocked time from resource contention and optimizing resource utilization under varying load conditions.
Content: //umgear.org/) {small}`U Maryland`; - the [Galaxy Project](https://humancellatlas.usegalaxy.eu) for the Human Cell Atlas [\[tweet\]](https://twitter.com/ExpressionAtlas/status/1151797848469626881) {small}`U Freiburg`; - the [Expression Atlas](https://www.ebi.ac.uk/gxa/sc/help.html) {small}`EMBL-EBI`. ## Modalities. ### RNA velocity. - [scVelo](https://scvelo.org) {small}`Helmholtz Munich`. ### Spatial Transcriptomics Tools. - [squidpy](https://squidpy.readthedocs.io/en/stable/) {small}`Helmholtz Munich`. > Squidpy is a comprehensive toolkit for working with spatial single cell omics data. - [PASTE](https://github.com/raphael-group/paste) {small}`Princeton`. > PASTE is a computational method to align and integrate spatial transcriptomics data across adjacent tissue slices by leveraging both gene expression similarity and spatial distances between spots. - [bento](https://bento-tools.readthedocs.io/en/latest/) 🍱 {small}`UC San Diego`. > Bento is an accessible Python toolkit for performing subcellular analysis of spatial transcriptomics data. ### Multimodal integration. - [MUON](https://muon.readthedocs.io/en/latest/) and [MuData](https://mudata.readthedocs.io/en/latest/) {small}`EMBL/ DKFZ`. > MUON, and it's associated data structure MuData are designed to organise, analyse, visualise, and exchange multimodal data.; > MUON enables a range of analyses for ATAC and CITE-seq, from data preprocessing to flexible multi-omics alignment. ### Adaptive immune receptor repertoire (AIRR). - [scirpy](https://github.com/icbi-lab/scirpy) {small}`Medical University of Innsbruck`. > scirpy is a scanpy extension to expore single-cell T-cell receptor (TCR) and B-cell receptor (BCR) repertoires. - [dandelion](https://github.com/zktuong/dandelion) {small}`University of Cambridge`. > dandelion is a single-cell BCR-seq network analysis package that integrates with transcriptomic data analyzed via scanpy. ### Long reads. - [Swan](https://freese.gitbook.io/swan/tutorials/data_processing) {sma

Instructions: 
1. Analyze the content and the attribute description.
2. Determine if the content accurately reflects the intended quality attribute in this context.
3. If it does, label it as `true_positive: true`; if not, mark it as a `true_positive: false`.
4. If the content consists only of logs with no other text, mark it as a `true_positive: false`. 
4. If the content partially consists of logs, focus on analyzing remaining text. 
5. Add `reasoning` why the content is a true or false positive.
",False,"The content appears to be describing tools and resources related to biological data analysis, specifically in fields like spatial transcriptomics, omics data processing, and single-cell analysis. The mentioned projects such as scVelo, squidpy, PASTE, bento, MUON, MuData, scirpy, dandelion, and Swan are all related to handling and analyzing biological data. While the description of these tools may not directly relate to performance metrics or resource optimization in a software engineering context, they fall under the umbrella of bioinformatics tools that could impact how efficiently biological data is processed. However, without explicit mention of timing requirements, resource contention, or load conditions typical in software quality attributes like Performance, it's unclear if this content is intended to reflect on system performance. The focus seems more on functionality and tool utilization rather than performance optimization."
Performance,"erer, I Virshup`; - {func}`~scanpy.datasets.visium_sge` load Visium data directly from 10x Genomics {pr}`1013` {smaller}`M Mirkazemi, G Palla, P Angerer`; - {func}`~scanpy.pl.spatial` plot spatial data {pr}`1012` {smaller}`G Palla, P Angerer`. ```{rubric} New functionality; ```. - Many functions, like {func}`~scanpy.pp.neighbors` and {func}`~scanpy.tl.umap`, now store cell-by-cell graphs in {attr}`~anndata.AnnData.obsp` {pr}`1118` {smaller}`S Rybakov`; - {func}`~scanpy.pp.scale` and {func}`~scanpy.pp.log1p` can be used on any element in {attr}`~anndata.AnnData.layers` or {attr}`~anndata.AnnData.obsm` {pr}`1173` {smaller}`I Virshup`. ```{rubric} External tools; ```. - `scanpy.external.pp.scvi` for preprocessing with scVI {pr}`1085` {smaller}`G Xing`; - Guide for using `Scanpy in R` {pr}`1186` {smaller}`L Zappia`. ```{rubric} Performance; ```. - {func}`~scanpy.pp.pca` now uses efficient implicit centering for sparse matrices. This can lead to signifigantly improved performance for large datasets {pr}`1066` {smaller}`A Tarashansky`; - {func}`~scanpy.tl.score_genes` now has an efficient implementation for sparse matrices with missing values {pr}`1196` {smaller}`redst4r`. ```{warning}; The new {func}`~scanpy.pp.pca` implementation can result in slightly different results for sparse matrices. See the pr ({pr}`1066`) and documentation for more info.; ```. ```{rubric} Code design; ```. - {func}`~scanpy.pl.stacked_violin` can now be used as a subplot {pr}`1084` {smaller}`P Angerer`; - {func}`~scanpy.tl.score_genes` has improved logging {pr}`1119` {smaller}`G Eraslan`; - {func}`~scanpy.pp.scale` now saves mean and standard deviation in the {attr}`~anndata.AnnData.var` {pr}`1173` {smaller}`A Wolf`; - {func}`~scanpy.external.tl.harmony_timeseries` {pr}`1091` {smaller}`A Mousa`. ```{rubric} Bug fixes; ```. - {func}`~scanpy.pp.combat` now works when `obs_names` aren't unique. {pr}`1215` {smaller}`I Virshup`; - {func}`~scanpy.pp.scale` can now be used on dense arrays without cente",perform,MatchSource.DOCS,scverse,scanpy,1.10.2,https://github.com/scverse/scanpy/tree/1.10.2/docs/release-notes/1.5.0.md:1574,performance,1574,docs/release-notes/1.5.0.md,https://scanpy.readthedocs.io,https://github.com/scverse/scanpy/tree/1.10.2/docs/release-notes/1.5.0.md,1,['perform'],['performance'],"The system’s capacity to meet its timing requirements, managing event handling and response times effectively. Performance focuses on reducing blocked time from resource contention and optimizing resource utilization under varying load conditions.","
You are an expert in evaluating and categorizing quality attributes in software engineering. You possess the necessary skills to distinguish sentences that clearly relate to a given quality attribute from those that do not. 

Evaluate whether the content accurately aligns with its associated quality attribute, given the context provided. Your goal is to determine if the content makes sense in relation to the quality attribute description or if it is a false positive.

Data:

Quality Attribute: Performance
Attribute Description: The system’s capacity to meet its timing requirements, managing event handling and response times effectively. Performance focuses on reducing blocked time from resource contention and optimizing resource utilization under varying load conditions.
Content: erer, I Virshup`; - {func}`~scanpy.datasets.visium_sge` load Visium data directly from 10x Genomics {pr}`1013` {smaller}`M Mirkazemi, G Palla, P Angerer`; - {func}`~scanpy.pl.spatial` plot spatial data {pr}`1012` {smaller}`G Palla, P Angerer`. ```{rubric} New functionality; ```. - Many functions, like {func}`~scanpy.pp.neighbors` and {func}`~scanpy.tl.umap`, now store cell-by-cell graphs in {attr}`~anndata.AnnData.obsp` {pr}`1118` {smaller}`S Rybakov`; - {func}`~scanpy.pp.scale` and {func}`~scanpy.pp.log1p` can be used on any element in {attr}`~anndata.AnnData.layers` or {attr}`~anndata.AnnData.obsm` {pr}`1173` {smaller}`I Virshup`. ```{rubric} External tools; ```. - `scanpy.external.pp.scvi` for preprocessing with scVI {pr}`1085` {smaller}`G Xing`; - Guide for using `Scanpy in R` {pr}`1186` {smaller}`L Zappia`. ```{rubric} Performance; ```. - {func}`~scanpy.pp.pca` now uses efficient implicit centering for sparse matrices. This can lead to signifigantly improved performance for large datasets {pr}`1066` {smaller}`A Tarashansky`; - {func}`~scanpy.tl.score_genes` now has an efficient implementation for sparse matrices with missing values {pr}`1196` {smaller}`redst4r`. ```{warning}; The new {func}`~scanpy.pp.pca` implementation can result in slightly different results for sparse matrices. See the pr ({pr}`1066`) and documentation for more info.; ```. ```{rubric} Code design; ```. - {func}`~scanpy.pl.stacked_violin` can now be used as a subplot {pr}`1084` {smaller}`P Angerer`; - {func}`~scanpy.tl.score_genes` has improved logging {pr}`1119` {smaller}`G Eraslan`; - {func}`~scanpy.pp.scale` now saves mean and standard deviation in the {attr}`~anndata.AnnData.var` {pr}`1173` {smaller}`A Wolf`; - {func}`~scanpy.external.tl.harmony_timeseries` {pr}`1091` {smaller}`A Mousa`. ```{rubric} Bug fixes; ```. - {func}`~scanpy.pp.combat` now works when `obs_names` aren't unique. {pr}`1215` {smaller}`I Virshup`; - {func}`~scanpy.pp.scale` can now be used on dense arrays without cente

Instructions: 
1. Analyze the content and the attribute description.
2. Determine if the content accurately reflects the intended quality attribute in this context.
3. If it does, label it as `true_positive: true`; if not, mark it as a `true_positive: false`.
4. If the content consists only of logs with no other text, mark it as a `true_positive: false`. 
4. If the content partially consists of logs, focus on analyzing remaining text. 
5. Add `reasoning` why the content is a true or false positive.
",True,"The content provided discusses various updates and changes in Scanpy functions, including performance improvements for sparse matrices using efficient implicit centering in PCA. This directly relates to the Performance quality attribute as it involves optimizing resource utilization under varying load conditions, leading to improved efficiency and reduced blocked time."
Performance,"roject/scanpy); [![Downloads](https://static.pepy.tech/badge/scanpy)](https://pepy.tech/project/scanpy); [![Conda](https://img.shields.io/conda/dn/conda-forge/scanpy?logo=Anaconda)](https://anaconda.org/conda-forge/scanpy); [![Docs](https://readthedocs.com/projects/icb-scanpy/badge/?version=latest)](https://scanpy.readthedocs.io); [![Build Status](https://dev.azure.com/scverse/scanpy/_apis/build/status/scverse.scanpy?branchName=main)](https://dev.azure.com/scverse/scanpy/_build); [![Discourse topics](https://img.shields.io/discourse/posts?color=yellow&logo=discourse&server=https%3A%2F%2Fdiscourse.scverse.org)](https://discourse.scverse.org/); [![Chat](https://img.shields.io/badge/zulip-join_chat-%2367b08f.svg)](https://scverse.zulipchat.com); [![Powered by NumFOCUS](https://img.shields.io/badge/powered%20by-NumFOCUS-orange.svg?style=flat&colorA=E1523D&colorB=007D8A)](https://numfocus.org/). # Scanpy – Single-Cell Analysis in Python. Scanpy is a scalable toolkit for analyzing single-cell gene expression data; built jointly with [anndata][]. It includes; preprocessing, visualization, clustering, trajectory inference and differential; expression testing. The Python-based implementation efficiently deals with; datasets of more than one million cells. Discuss usage on the scverse [Discourse][]. Read the [documentation][].; If you'd like to contribute by opening an issue or creating a pull request, please take a look at our [contribution guide][]. [anndata]: https://anndata.readthedocs.io; [discourse]: https://discourse.scverse.org/; [documentation]: https://scanpy.readthedocs.io. [//]: # (numfocus-fiscal-sponsor-attribution). scanpy is part of the scverse project ([website](https://scverse.org), [governance](https://scverse.org/about/roles)) and is fiscally sponsored by [NumFOCUS](https://numfocus.org/).; If you like scverse and want to support our mission, please consider making a [donation](https://numfocus.org/donate-to-scverse) to support our efforts. <div align=""cent",scalab,MatchSource.DOCS,scverse,scanpy,1.10.2,https://github.com/scverse/scanpy/tree/1.10.2/README.md:1181,scalable,1181,README.md,https://scanpy.readthedocs.io,https://github.com/scverse/scanpy/tree/1.10.2/README.md,1,['scalab'],['scalable'],"The system’s capacity to meet its timing requirements, managing event handling and response times effectively. Performance focuses on reducing blocked time from resource contention and optimizing resource utilization under varying load conditions.","
You are an expert in evaluating and categorizing quality attributes in software engineering. You possess the necessary skills to distinguish sentences that clearly relate to a given quality attribute from those that do not. 

Evaluate whether the content accurately aligns with its associated quality attribute, given the context provided. Your goal is to determine if the content makes sense in relation to the quality attribute description or if it is a false positive.

Data:

Quality Attribute: Performance
Attribute Description: The system’s capacity to meet its timing requirements, managing event handling and response times effectively. Performance focuses on reducing blocked time from resource contention and optimizing resource utilization under varying load conditions.
Content: roject/scanpy); [![Downloads](https://static.pepy.tech/badge/scanpy)](https://pepy.tech/project/scanpy); [![Conda](https://img.shields.io/conda/dn/conda-forge/scanpy?logo=Anaconda)](https://anaconda.org/conda-forge/scanpy); [![Docs](https://readthedocs.com/projects/icb-scanpy/badge/?version=latest)](https://scanpy.readthedocs.io); [![Build Status](https://dev.azure.com/scverse/scanpy/_apis/build/status/scverse.scanpy?branchName=main)](https://dev.azure.com/scverse/scanpy/_build); [![Discourse topics](https://img.shields.io/discourse/posts?color=yellow&logo=discourse&server=https%3A%2F%2Fdiscourse.scverse.org)](https://discourse.scverse.org/); [![Chat](https://img.shields.io/badge/zulip-join_chat-%2367b08f.svg)](https://scverse.zulipchat.com); [![Powered by NumFOCUS](https://img.shields.io/badge/powered%20by-NumFOCUS-orange.svg?style=flat&colorA=E1523D&colorB=007D8A)](https://numfocus.org/). # Scanpy – Single-Cell Analysis in Python. Scanpy is a scalable toolkit for analyzing single-cell gene expression data; built jointly with [anndata][]. It includes; preprocessing, visualization, clustering, trajectory inference and differential; expression testing. The Python-based implementation efficiently deals with; datasets of more than one million cells. Discuss usage on the scverse [Discourse][]. Read the [documentation][].; If you'd like to contribute by opening an issue or creating a pull request, please take a look at our [contribution guide][]. [anndata]: https://anndata.readthedocs.io; [discourse]: https://discourse.scverse.org/; [documentation]: https://scanpy.readthedocs.io. [//]: # (numfocus-fiscal-sponsor-attribution). scanpy is part of the scverse project ([website](https://scverse.org), [governance](https://scverse.org/about/roles)) and is fiscally sponsored by [NumFOCUS](https://numfocus.org/).; If you like scverse and want to support our mission, please consider making a [donation](https://numfocus.org/donate-to-scverse) to support our efforts. <div align=""cent

Instructions: 
1. Analyze the content and the attribute description.
2. Determine if the content accurately reflects the intended quality attribute in this context.
3. If it does, label it as `true_positive: true`; if not, mark it as a `true_positive: false`.
4. If the content consists only of logs with no other text, mark it as a `true_positive: false`. 
4. If the content partially consists of logs, focus on analyzing remaining text. 
5. Add `reasoning` why the content is a true or false positive.
",False,"The content provided discusses Scanpy, which is a Python-based tool for single-cell gene expression analysis. It mentions preprocessing, visualization, clustering, and other functionalities. The description includes details about dataset handling and efficient processing of large datasets. However, the original quality attribute 'Performance' refers to aspects such as timing requirements, response times, resource contention, and optimizing resource utilization under varying loads. This content focuses more on functionality and features of the tool rather than its performance characteristics or technical aspects related to efficiency and load management."
Performance,"serve as a first visualization of the data just as tSNE,; in contrast to tSNE, UMAP directly embeds the single-cell graph and is faster;; UMAP is also used for measuring connectivities and computing neighbors,; see {func}`~scanpy.pp.neighbors` {smaller}`A Wolf`; - graph abstraction: AGA is renamed to [PAGA](https://github.com/theislab/paga): {func}`~scanpy.tl.paga`; now,; it only measures connectivities between partitions of the single-cell graph,; pseudotime and clustering need to be computed separately via; {func}`~scanpy.tl.louvain` and {func}`~scanpy.tl.dpt`, the; connectivity measure has been improved {smaller}`A Wolf`; - logistic regression for finding marker genes; {func}`~scanpy.tl.rank_genes_groups` with parameter `method='logreg'` {smaller}`A Wolf`; - {func}`~scanpy.tl.louvain` provides a better implementation for; reclustering via `restrict_to` {smaller}`A Wolf`; - scanpy no longer modifies rcParams upon import, call; `settings.set_figure_params` to set the 'scanpy style' {smaller}`A Wolf`; - default cache directory is `./cache/`, set `settings.cachedir` to change; this; nested directories in this are avoided {smaller}`A Wolf`; - show edges in scatter plots based on graph visualization; {func}`~scanpy.tl.draw_graph` and {func}`~scanpy.tl.umap` by passing `edges=True` {smaller}`A Wolf`; - {func}`~scanpy.pp.downsample_counts` for downsampling counts {smaller}`MD Luecken`; - default `'louvain_groups'` are called `'louvain'` {smaller}`A Wolf`; - `'X_diffmap'` contains the zero component, plotting remains unchanged {smaller}`A Wolf`. [14min]: https://github.com/scverse/scanpy_usage/blob/master/170522_visualizing_one_million_cells/logfile_130K.txt; [3min]: https://nbviewer.jupyter.org/github/scverse/scanpy_usage/blob/master/170503_zheng17/zheng17.ipynb; [6h]: https://github.com/scverse/scanpy_usage/blob/master/170522_visualizing_one_million_cells/; [paul15]: https://nbviewer.jupyter.org/github/scverse/scanpy_usage/blob/master/170502_paul15/paul15.ipynb; [seurat]",cache,MatchSource.DOCS,scverse,scanpy,1.10.2,https://github.com/scverse/scanpy/tree/1.10.2/docs/release-notes/1.0.0.md:2785,cache,2785,docs/release-notes/1.0.0.md,https://scanpy.readthedocs.io,https://github.com/scverse/scanpy/tree/1.10.2/docs/release-notes/1.0.0.md,1,['cache'],['cache'],"The system’s capacity to meet its timing requirements, managing event handling and response times effectively. Performance focuses on reducing blocked time from resource contention and optimizing resource utilization under varying load conditions.","
You are an expert in evaluating and categorizing quality attributes in software engineering. You possess the necessary skills to distinguish sentences that clearly relate to a given quality attribute from those that do not. 

Evaluate whether the content accurately aligns with its associated quality attribute, given the context provided. Your goal is to determine if the content makes sense in relation to the quality attribute description or if it is a false positive.

Data:

Quality Attribute: Performance
Attribute Description: The system’s capacity to meet its timing requirements, managing event handling and response times effectively. Performance focuses on reducing blocked time from resource contention and optimizing resource utilization under varying load conditions.
Content: serve as a first visualization of the data just as tSNE,; in contrast to tSNE, UMAP directly embeds the single-cell graph and is faster;; UMAP is also used for measuring connectivities and computing neighbors,; see {func}`~scanpy.pp.neighbors` {smaller}`A Wolf`; - graph abstraction: AGA is renamed to [PAGA](https://github.com/theislab/paga): {func}`~scanpy.tl.paga`; now,; it only measures connectivities between partitions of the single-cell graph,; pseudotime and clustering need to be computed separately via; {func}`~scanpy.tl.louvain` and {func}`~scanpy.tl.dpt`, the; connectivity measure has been improved {smaller}`A Wolf`; - logistic regression for finding marker genes; {func}`~scanpy.tl.rank_genes_groups` with parameter `method='logreg'` {smaller}`A Wolf`; - {func}`~scanpy.tl.louvain` provides a better implementation for; reclustering via `restrict_to` {smaller}`A Wolf`; - scanpy no longer modifies rcParams upon import, call; `settings.set_figure_params` to set the 'scanpy style' {smaller}`A Wolf`; - default cache directory is `./cache/`, set `settings.cachedir` to change; this; nested directories in this are avoided {smaller}`A Wolf`; - show edges in scatter plots based on graph visualization; {func}`~scanpy.tl.draw_graph` and {func}`~scanpy.tl.umap` by passing `edges=True` {smaller}`A Wolf`; - {func}`~scanpy.pp.downsample_counts` for downsampling counts {smaller}`MD Luecken`; - default `'louvain_groups'` are called `'louvain'` {smaller}`A Wolf`; - `'X_diffmap'` contains the zero component, plotting remains unchanged {smaller}`A Wolf`. [14min]: https://github.com/scverse/scanpy_usage/blob/master/170522_visualizing_one_million_cells/logfile_130K.txt; [3min]: https://nbviewer.jupyter.org/github/scverse/scanpy_usage/blob/master/170503_zheng17/zheng17.ipynb; [6h]: https://github.com/scverse/scanpy_usage/blob/master/170522_visualizing_one_million_cells/; [paul15]: https://nbviewer.jupyter.org/github/scverse/scanpy_usage/blob/master/170502_paul15/paul15.ipynb; [seurat]

Instructions: 
1. Analyze the content and the attribute description.
2. Determine if the content accurately reflects the intended quality attribute in this context.
3. If it does, label it as `true_positive: true`; if not, mark it as a `true_positive: false`.
4. If the content consists only of logs with no other text, mark it as a `true_positive: false`. 
4. If the content partially consists of logs, focus on analyzing remaining text. 
5. Add `reasoning` why the content is a true or false positive.
",True,"The content discusses various aspects of data visualization using UMAP and other tools like tSNE, which are related to performance in terms of computational speed and efficiency, especially under high load conditions. UMAP's efficiency is highlighted as it directly embeds single-cell graphs faster than tSNE. This aligns with the definition of performance focusing on managing resource contention and optimizing resource utilization."
Performance,"suite for existing usage. ### What to test. If you're not sure what to tests about your function, some ideas include:. - Are there arguments which conflict with each other? Check that if they are both passed, the function throws an error (see `pytest.raises` [in the pytest docs](https://docs.pytest.org/en/stable/assert.html#assertions-about-expected-exceptions).; - Are there input values which should cause your function to error?; - Did you add a helpful error message that recommends better outputs? Check that that error message is actually thrown.; - Can you place bounds on the values returned by your function?; - Are there different input values which should generate equivalent output (e.g. if an array is sparse or dense)?; - Do you have arguments which should have orthogonal effects on the output? Check that they are independent. For example, if there is a flag for extended output, the base output should remain the same either way.; - Are you optimizing a method? Check that it's results are the same as a gold standard implementation. ### Performance. It's more important that you're accurately testing the code works than it is that test suite runs quickly.; That said, it's nice when the test suite runs fast. You can check how long tests take to run by passing `--durations=0` argument to `pytest`.; Hopefully your new tests won't show up on top!; Some approaches to this include:. - Is there a common setup/ computation happening in each test? Consider caching these in a [scoped test fixture](https://docs.pytest.org/en/stable/fixture.html#sharing-test-data).; - Is the behaviour you're testing for dependent on the size of the data? If not, consider reducing it. ### Plotting tests. While computational functions will return arrays and values, it can be harder to work with the output of plotting functions. To make this easier, we use the `image_comparer` fixture for comparing plotting results (search the test suite for example usage).; This is used to check that generated",optimiz,MatchSource.DOCS,scverse,scanpy,1.10.2,https://github.com/scverse/scanpy/tree/1.10.2/docs/dev/testing.md:2932,optimizing,2932,docs/dev/testing.md,https://scanpy.readthedocs.io,https://github.com/scverse/scanpy/tree/1.10.2/docs/dev/testing.md,1,['optimiz'],['optimizing'],"The system’s capacity to meet its timing requirements, managing event handling and response times effectively. Performance focuses on reducing blocked time from resource contention and optimizing resource utilization under varying load conditions.","
You are an expert in evaluating and categorizing quality attributes in software engineering. You possess the necessary skills to distinguish sentences that clearly relate to a given quality attribute from those that do not. 

Evaluate whether the content accurately aligns with its associated quality attribute, given the context provided. Your goal is to determine if the content makes sense in relation to the quality attribute description or if it is a false positive.

Data:

Quality Attribute: Performance
Attribute Description: The system’s capacity to meet its timing requirements, managing event handling and response times effectively. Performance focuses on reducing blocked time from resource contention and optimizing resource utilization under varying load conditions.
Content: suite for existing usage. ### What to test. If you're not sure what to tests about your function, some ideas include:. - Are there arguments which conflict with each other? Check that if they are both passed, the function throws an error (see `pytest.raises` [in the pytest docs](https://docs.pytest.org/en/stable/assert.html#assertions-about-expected-exceptions).; - Are there input values which should cause your function to error?; - Did you add a helpful error message that recommends better outputs? Check that that error message is actually thrown.; - Can you place bounds on the values returned by your function?; - Are there different input values which should generate equivalent output (e.g. if an array is sparse or dense)?; - Do you have arguments which should have orthogonal effects on the output? Check that they are independent. For example, if there is a flag for extended output, the base output should remain the same either way.; - Are you optimizing a method? Check that it's results are the same as a gold standard implementation. ### Performance. It's more important that you're accurately testing the code works than it is that test suite runs quickly.; That said, it's nice when the test suite runs fast. You can check how long tests take to run by passing `--durations=0` argument to `pytest`.; Hopefully your new tests won't show up on top!; Some approaches to this include:. - Is there a common setup/ computation happening in each test? Consider caching these in a [scoped test fixture](https://docs.pytest.org/en/stable/fixture.html#sharing-test-data).; - Is the behaviour you're testing for dependent on the size of the data? If not, consider reducing it. ### Plotting tests. While computational functions will return arrays and values, it can be harder to work with the output of plotting functions. To make this easier, we use the `image_comparer` fixture for comparing plotting results (search the test suite for example usage).; This is used to check that generated

Instructions: 
1. Analyze the content and the attribute description.
2. Determine if the content accurately reflects the intended quality attribute in this context.
3. If it does, label it as `true_positive: true`; if not, mark it as a `true_positive: false`.
4. If the content consists only of logs with no other text, mark it as a `true_positive: false`. 
4. If the content partially consists of logs, focus on analyzing remaining text. 
5. Add `reasoning` why the content is a true or false positive.
",True,"The content discusses performance testing and optimization tips for test suite efficiency and accuracy. This aligns with the definition of Performance as the system's capacity to meet its timing requirements, effectively managing resource contention."
Performance,"the single-cell graph and is faster;; UMAP is also used for measuring connectivities and computing neighbors,; see {func}`~scanpy.pp.neighbors` {smaller}`A Wolf`; - graph abstraction: AGA is renamed to [PAGA](https://github.com/theislab/paga): {func}`~scanpy.tl.paga`; now,; it only measures connectivities between partitions of the single-cell graph,; pseudotime and clustering need to be computed separately via; {func}`~scanpy.tl.louvain` and {func}`~scanpy.tl.dpt`, the; connectivity measure has been improved {smaller}`A Wolf`; - logistic regression for finding marker genes; {func}`~scanpy.tl.rank_genes_groups` with parameter `method='logreg'` {smaller}`A Wolf`; - {func}`~scanpy.tl.louvain` provides a better implementation for; reclustering via `restrict_to` {smaller}`A Wolf`; - scanpy no longer modifies rcParams upon import, call; `settings.set_figure_params` to set the 'scanpy style' {smaller}`A Wolf`; - default cache directory is `./cache/`, set `settings.cachedir` to change; this; nested directories in this are avoided {smaller}`A Wolf`; - show edges in scatter plots based on graph visualization; {func}`~scanpy.tl.draw_graph` and {func}`~scanpy.tl.umap` by passing `edges=True` {smaller}`A Wolf`; - {func}`~scanpy.pp.downsample_counts` for downsampling counts {smaller}`MD Luecken`; - default `'louvain_groups'` are called `'louvain'` {smaller}`A Wolf`; - `'X_diffmap'` contains the zero component, plotting remains unchanged {smaller}`A Wolf`. [14min]: https://github.com/scverse/scanpy_usage/blob/master/170522_visualizing_one_million_cells/logfile_130K.txt; [3min]: https://nbviewer.jupyter.org/github/scverse/scanpy_usage/blob/master/170503_zheng17/zheng17.ipynb; [6h]: https://github.com/scverse/scanpy_usage/blob/master/170522_visualizing_one_million_cells/; [paul15]: https://nbviewer.jupyter.org/github/scverse/scanpy_usage/blob/master/170502_paul15/paul15.ipynb; [seurat]: https://nbviewer.jupyter.org/github/scverse/scanpy_usage/blob/master/170505_seurat/seurat.ipynb; ",cache,MatchSource.DOCS,scverse,scanpy,1.10.2,https://github.com/scverse/scanpy/tree/1.10.2/docs/release-notes/1.0.0.md:2830,cachedir,2830,docs/release-notes/1.0.0.md,https://scanpy.readthedocs.io,https://github.com/scverse/scanpy/tree/1.10.2/docs/release-notes/1.0.0.md,1,['cache'],['cachedir'],"The system’s capacity to meet its timing requirements, managing event handling and response times effectively. Performance focuses on reducing blocked time from resource contention and optimizing resource utilization under varying load conditions.","
You are an expert in evaluating and categorizing quality attributes in software engineering. You possess the necessary skills to distinguish sentences that clearly relate to a given quality attribute from those that do not. 

Evaluate whether the content accurately aligns with its associated quality attribute, given the context provided. Your goal is to determine if the content makes sense in relation to the quality attribute description or if it is a false positive.

Data:

Quality Attribute: Performance
Attribute Description: The system’s capacity to meet its timing requirements, managing event handling and response times effectively. Performance focuses on reducing blocked time from resource contention and optimizing resource utilization under varying load conditions.
Content: the single-cell graph and is faster;; UMAP is also used for measuring connectivities and computing neighbors,; see {func}`~scanpy.pp.neighbors` {smaller}`A Wolf`; - graph abstraction: AGA is renamed to [PAGA](https://github.com/theislab/paga): {func}`~scanpy.tl.paga`; now,; it only measures connectivities between partitions of the single-cell graph,; pseudotime and clustering need to be computed separately via; {func}`~scanpy.tl.louvain` and {func}`~scanpy.tl.dpt`, the; connectivity measure has been improved {smaller}`A Wolf`; - logistic regression for finding marker genes; {func}`~scanpy.tl.rank_genes_groups` with parameter `method='logreg'` {smaller}`A Wolf`; - {func}`~scanpy.tl.louvain` provides a better implementation for; reclustering via `restrict_to` {smaller}`A Wolf`; - scanpy no longer modifies rcParams upon import, call; `settings.set_figure_params` to set the 'scanpy style' {smaller}`A Wolf`; - default cache directory is `./cache/`, set `settings.cachedir` to change; this; nested directories in this are avoided {smaller}`A Wolf`; - show edges in scatter plots based on graph visualization; {func}`~scanpy.tl.draw_graph` and {func}`~scanpy.tl.umap` by passing `edges=True` {smaller}`A Wolf`; - {func}`~scanpy.pp.downsample_counts` for downsampling counts {smaller}`MD Luecken`; - default `'louvain_groups'` are called `'louvain'` {smaller}`A Wolf`; - `'X_diffmap'` contains the zero component, plotting remains unchanged {smaller}`A Wolf`. [14min]: https://github.com/scverse/scanpy_usage/blob/master/170522_visualizing_one_million_cells/logfile_130K.txt; [3min]: https://nbviewer.jupyter.org/github/scverse/scanpy_usage/blob/master/170503_zheng17/zheng17.ipynb; [6h]: https://github.com/scverse/scanpy_usage/blob/master/170522_visualizing_one_million_cells/; [paul15]: https://nbviewer.jupyter.org/github/scverse/scanpy_usage/blob/master/170502_paul15/paul15.ipynb; [seurat]: https://nbviewer.jupyter.org/github/scverse/scanpy_usage/blob/master/170505_seurat/seurat.ipynb; 

Instructions: 
1. Analyze the content and the attribute description.
2. Determine if the content accurately reflects the intended quality attribute in this context.
3. If it does, label it as `true_positive: true`; if not, mark it as a `true_positive: false`.
4. If the content consists only of logs with no other text, mark it as a `true_positive: false`. 
4. If the content partially consists of logs, focus on analyzing remaining text. 
5. Add `reasoning` why the content is a true or false positive.
",True,"The provided content discusses various ScanPy functionalities related to data analysis and visualization, such as using UMAP for connectivity measurements and performing marker gene finding through logistic regression. It also touches on optimizations like downsampling counts and graph abstraction techniques. While these topics are more about the system's efficiency in processing and visualizing data rather than its overall performance under load, they indirectly contribute to performance by improving resource utilization and reducing blocked time in data handling. Therefore, this content aligns with the concept of performance as it pertains to efficient and effective data processing and visualization."
Safety,"## Preprocessing: `pp`. ```{eval-rst}; .. module:: scanpy.pp; ```. ```{eval-rst}; .. currentmodule:: scanpy; ```. Filtering of highly-variable genes, batch-effect correction, per-cell normalization, preprocessing recipes. Any transformation of the data matrix that is not a *tool*. Other than *tools*, preprocessing steps usually don't return an easily interpretable annotation, but perform a basic transformation on the data matrix. ### Basic Preprocessing. For visual quality control, see {func}`~scanpy.pl.highest_expr_genes` and; {func}`~scanpy.pl.filter_genes_dispersion` in {mod}`scanpy.pl`. ```{eval-rst}; .. autosummary::; :nosignatures:; :toctree: ../generated/. pp.calculate_qc_metrics; pp.filter_cells; pp.filter_genes; pp.highly_variable_genes; pp.log1p; pp.pca; pp.normalize_total; pp.regress_out; pp.scale; pp.subsample; pp.downsample_counts; ```. ### Recipes. ```{eval-rst}; .. autosummary::; :nosignatures:; :toctree: generated/. pp.recipe_zheng17; pp.recipe_weinreb17; pp.recipe_seurat; ```. ### Batch effect correction. Also see [Data integration]. Note that a simple batch correction method is available via {func}`pp.regress_out`. Checkout {mod}`scanpy.external` for more. ```{eval-rst}; .. autosummary::; :nosignatures:; :toctree: generated/. pp.combat; ```. ### Doublet detection. ```{eval-rst}; .. autosummary::; :nosignatures:; :toctree: generated/. pp.scrublet; pp.scrublet_simulate_doublets; ```. ### Neighbors. ```{eval-rst}; .. autosummary::; :nosignatures:; :toctree: generated/. pp.neighbors. ```; ",detect,MatchSource.DOCS,scverse,scanpy,1.10.2,https://github.com/scverse/scanpy/tree/1.10.2/docs/api/preprocessing.md:1292,detection,1292,docs/api/preprocessing.md,https://scanpy.readthedocs.io,https://github.com/scverse/scanpy/tree/1.10.2/docs/api/preprocessing.md,1,['detect'],['detection'],"The system’s ability to avoid states that could lead to harm or damage. Safety encompasses detection and handling of errors (e.g., omissions, timing, incorrect values) to prevent hazardous outcomes or mitigate potential damage.","
You are an expert in evaluating and categorizing quality attributes in software engineering. You possess the necessary skills to distinguish sentences that clearly relate to a given quality attribute from those that do not. 

Evaluate whether the content accurately aligns with its associated quality attribute, given the context provided. Your goal is to determine if the content makes sense in relation to the quality attribute description or if it is a false positive.

Data:

Quality Attribute: Safety
Attribute Description: The system’s ability to avoid states that could lead to harm or damage. Safety encompasses detection and handling of errors (e.g., omissions, timing, incorrect values) to prevent hazardous outcomes or mitigate potential damage.
Content: ## Preprocessing: `pp`. ```{eval-rst}; .. module:: scanpy.pp; ```. ```{eval-rst}; .. currentmodule:: scanpy; ```. Filtering of highly-variable genes, batch-effect correction, per-cell normalization, preprocessing recipes. Any transformation of the data matrix that is not a *tool*. Other than *tools*, preprocessing steps usually don't return an easily interpretable annotation, but perform a basic transformation on the data matrix. ### Basic Preprocessing. For visual quality control, see {func}`~scanpy.pl.highest_expr_genes` and; {func}`~scanpy.pl.filter_genes_dispersion` in {mod}`scanpy.pl`. ```{eval-rst}; .. autosummary::; :nosignatures:; :toctree: ../generated/. pp.calculate_qc_metrics; pp.filter_cells; pp.filter_genes; pp.highly_variable_genes; pp.log1p; pp.pca; pp.normalize_total; pp.regress_out; pp.scale; pp.subsample; pp.downsample_counts; ```. ### Recipes. ```{eval-rst}; .. autosummary::; :nosignatures:; :toctree: generated/. pp.recipe_zheng17; pp.recipe_weinreb17; pp.recipe_seurat; ```. ### Batch effect correction. Also see [Data integration]. Note that a simple batch correction method is available via {func}`pp.regress_out`. Checkout {mod}`scanpy.external` for more. ```{eval-rst}; .. autosummary::; :nosignatures:; :toctree: generated/. pp.combat; ```. ### Doublet detection. ```{eval-rst}; .. autosummary::; :nosignatures:; :toctree: generated/. pp.scrublet; pp.scrublet_simulate_doublets; ```. ### Neighbors. ```{eval-rst}; .. autosummary::; :nosignatures:; :toctree: generated/. pp.neighbors. ```; 

Instructions: 
1. Analyze the content and the attribute description.
2. Determine if the content accurately reflects the intended quality attribute in this context.
3. If it does, label it as `true_positive: true`; if not, mark it as a `true_positive: false`.
4. If the content consists only of logs with no other text, mark it as a `true_positive: false`. 
4. If the content partially consists of logs, focus on analyzing remaining text. 
5. Add `reasoning` why the content is a true or false positive.
",False,"The content discusses data preprocessing steps in scanpy such as filtering genes and batch effect correction. While these are important for data quality, they don't directly relate to safety as defined by avoiding harmful states. Safety would involve preventing errors that lead to harm, but the provided text focuses on data transformation rather than error prevention or mitigation."
Safety,"### 1.4.2 {small}`2019-05-06`. ```{rubric} New functionality; ```. - {func}`~scanpy.pp.combat` supports additional covariates which may include adjustment variables or biological condition {pr}`618` {smaller}`G Eraslan`; - {func}`~scanpy.pp.highly_variable_genes` has a `batch_key` option which performs HVG selection in each batch separately to avoid selecting genes that vary strongly across batches {pr}`622` {smaller}`G Eraslan`. ```{rubric} Bug fixes; ```. - {func}`~scanpy.tl.rank_genes_groups` t-test implementation doesn't return NaN when variance is 0, also changed to scipy's implementation {pr}`621` {smaller}`I Virshup`; - {func}`~scanpy.tl.umap` with `init_pos='paga'` detects correct `dtype` {smaller}`A Wolf`; - {func}`~scanpy.tl.louvain` and {func}`~scanpy.tl.leiden` auto-generate `key_added=louvain_R` upon passing `restrict_to`, which was temporarily changed in `1.4.1` {smaller}`A Wolf`. ```{rubric} Code design; ```. - {func}`~scanpy.pp.neighbors` and {func}`~scanpy.tl.umap` got rid of UMAP legacy code and introduced UMAP as a dependency {pr}`576` {smaller}`S Rybakov`; ",avoid,MatchSource.DOCS,scverse,scanpy,1.10.2,https://github.com/scverse/scanpy/tree/1.10.2/docs/release-notes/1.4.2.md:346,avoid,346,docs/release-notes/1.4.2.md,https://scanpy.readthedocs.io,https://github.com/scverse/scanpy/tree/1.10.2/docs/release-notes/1.4.2.md,2,"['avoid', 'detect']","['avoid', 'detects']","The system’s ability to avoid states that could lead to harm or damage. Safety encompasses detection and handling of errors (e.g., omissions, timing, incorrect values) to prevent hazardous outcomes or mitigate potential damage.","
You are an expert in evaluating and categorizing quality attributes in software engineering. You possess the necessary skills to distinguish sentences that clearly relate to a given quality attribute from those that do not. 

Evaluate whether the content accurately aligns with its associated quality attribute, given the context provided. Your goal is to determine if the content makes sense in relation to the quality attribute description or if it is a false positive.

Data:

Quality Attribute: Safety
Attribute Description: The system’s ability to avoid states that could lead to harm or damage. Safety encompasses detection and handling of errors (e.g., omissions, timing, incorrect values) to prevent hazardous outcomes or mitigate potential damage.
Content: ### 1.4.2 {small}`2019-05-06`. ```{rubric} New functionality; ```. - {func}`~scanpy.pp.combat` supports additional covariates which may include adjustment variables or biological condition {pr}`618` {smaller}`G Eraslan`; - {func}`~scanpy.pp.highly_variable_genes` has a `batch_key` option which performs HVG selection in each batch separately to avoid selecting genes that vary strongly across batches {pr}`622` {smaller}`G Eraslan`. ```{rubric} Bug fixes; ```. - {func}`~scanpy.tl.rank_genes_groups` t-test implementation doesn't return NaN when variance is 0, also changed to scipy's implementation {pr}`621` {smaller}`I Virshup`; - {func}`~scanpy.tl.umap` with `init_pos='paga'` detects correct `dtype` {smaller}`A Wolf`; - {func}`~scanpy.tl.louvain` and {func}`~scanpy.tl.leiden` auto-generate `key_added=louvain_R` upon passing `restrict_to`, which was temporarily changed in `1.4.1` {smaller}`A Wolf`. ```{rubric} Code design; ```. - {func}`~scanpy.pp.neighbors` and {func}`~scanpy.tl.umap` got rid of UMAP legacy code and introduced UMAP as a dependency {pr}`576` {smaller}`S Rybakov`; 

Instructions: 
1. Analyze the content and the attribute description.
2. Determine if the content accurately reflects the intended quality attribute in this context.
3. If it does, label it as `true_positive: true`; if not, mark it as a `true_positive: false`.
4. If the content consists only of logs with no other text, mark it as a `true_positive: false`. 
4. If the content partially consists of logs, focus on analyzing remaining text. 
5. Add `reasoning` why the content is a true or false positive.
",False,"The content describes changes made to various functions and bug fixes, which relates to maintaining system functionality but does not directly address safety attributes such as error detection or prevention. Therefore, it is not aligned with the 'Safety' quality attribute."
Safety,"the single-cell graph and is faster;; UMAP is also used for measuring connectivities and computing neighbors,; see {func}`~scanpy.pp.neighbors` {smaller}`A Wolf`; - graph abstraction: AGA is renamed to [PAGA](https://github.com/theislab/paga): {func}`~scanpy.tl.paga`; now,; it only measures connectivities between partitions of the single-cell graph,; pseudotime and clustering need to be computed separately via; {func}`~scanpy.tl.louvain` and {func}`~scanpy.tl.dpt`, the; connectivity measure has been improved {smaller}`A Wolf`; - logistic regression for finding marker genes; {func}`~scanpy.tl.rank_genes_groups` with parameter `method='logreg'` {smaller}`A Wolf`; - {func}`~scanpy.tl.louvain` provides a better implementation for; reclustering via `restrict_to` {smaller}`A Wolf`; - scanpy no longer modifies rcParams upon import, call; `settings.set_figure_params` to set the 'scanpy style' {smaller}`A Wolf`; - default cache directory is `./cache/`, set `settings.cachedir` to change; this; nested directories in this are avoided {smaller}`A Wolf`; - show edges in scatter plots based on graph visualization; {func}`~scanpy.tl.draw_graph` and {func}`~scanpy.tl.umap` by passing `edges=True` {smaller}`A Wolf`; - {func}`~scanpy.pp.downsample_counts` for downsampling counts {smaller}`MD Luecken`; - default `'louvain_groups'` are called `'louvain'` {smaller}`A Wolf`; - `'X_diffmap'` contains the zero component, plotting remains unchanged {smaller}`A Wolf`. [14min]: https://github.com/scverse/scanpy_usage/blob/master/170522_visualizing_one_million_cells/logfile_130K.txt; [3min]: https://nbviewer.jupyter.org/github/scverse/scanpy_usage/blob/master/170503_zheng17/zheng17.ipynb; [6h]: https://github.com/scverse/scanpy_usage/blob/master/170522_visualizing_one_million_cells/; [paul15]: https://nbviewer.jupyter.org/github/scverse/scanpy_usage/blob/master/170502_paul15/paul15.ipynb; [seurat]: https://nbviewer.jupyter.org/github/scverse/scanpy_usage/blob/master/170505_seurat/seurat.ipynb; ",avoid,MatchSource.DOCS,scverse,scanpy,1.10.2,https://github.com/scverse/scanpy/tree/1.10.2/docs/release-notes/1.0.0.md:2888,avoided,2888,docs/release-notes/1.0.0.md,https://scanpy.readthedocs.io,https://github.com/scverse/scanpy/tree/1.10.2/docs/release-notes/1.0.0.md,1,['avoid'],['avoided'],"The system’s ability to avoid states that could lead to harm or damage. Safety encompasses detection and handling of errors (e.g., omissions, timing, incorrect values) to prevent hazardous outcomes or mitigate potential damage.","
You are an expert in evaluating and categorizing quality attributes in software engineering. You possess the necessary skills to distinguish sentences that clearly relate to a given quality attribute from those that do not. 

Evaluate whether the content accurately aligns with its associated quality attribute, given the context provided. Your goal is to determine if the content makes sense in relation to the quality attribute description or if it is a false positive.

Data:

Quality Attribute: Safety
Attribute Description: The system’s ability to avoid states that could lead to harm or damage. Safety encompasses detection and handling of errors (e.g., omissions, timing, incorrect values) to prevent hazardous outcomes or mitigate potential damage.
Content: the single-cell graph and is faster;; UMAP is also used for measuring connectivities and computing neighbors,; see {func}`~scanpy.pp.neighbors` {smaller}`A Wolf`; - graph abstraction: AGA is renamed to [PAGA](https://github.com/theislab/paga): {func}`~scanpy.tl.paga`; now,; it only measures connectivities between partitions of the single-cell graph,; pseudotime and clustering need to be computed separately via; {func}`~scanpy.tl.louvain` and {func}`~scanpy.tl.dpt`, the; connectivity measure has been improved {smaller}`A Wolf`; - logistic regression for finding marker genes; {func}`~scanpy.tl.rank_genes_groups` with parameter `method='logreg'` {smaller}`A Wolf`; - {func}`~scanpy.tl.louvain` provides a better implementation for; reclustering via `restrict_to` {smaller}`A Wolf`; - scanpy no longer modifies rcParams upon import, call; `settings.set_figure_params` to set the 'scanpy style' {smaller}`A Wolf`; - default cache directory is `./cache/`, set `settings.cachedir` to change; this; nested directories in this are avoided {smaller}`A Wolf`; - show edges in scatter plots based on graph visualization; {func}`~scanpy.tl.draw_graph` and {func}`~scanpy.tl.umap` by passing `edges=True` {smaller}`A Wolf`; - {func}`~scanpy.pp.downsample_counts` for downsampling counts {smaller}`MD Luecken`; - default `'louvain_groups'` are called `'louvain'` {smaller}`A Wolf`; - `'X_diffmap'` contains the zero component, plotting remains unchanged {smaller}`A Wolf`. [14min]: https://github.com/scverse/scanpy_usage/blob/master/170522_visualizing_one_million_cells/logfile_130K.txt; [3min]: https://nbviewer.jupyter.org/github/scverse/scanpy_usage/blob/master/170503_zheng17/zheng17.ipynb; [6h]: https://github.com/scverse/scanpy_usage/blob/master/170522_visualizing_one_million_cells/; [paul15]: https://nbviewer.jupyter.org/github/scverse/scanpy_usage/blob/master/170502_paul15/paul15.ipynb; [seurat]: https://nbviewer.jupyter.org/github/scverse/scanpy_usage/blob/master/170505_seurat/seurat.ipynb; 

Instructions: 
1. Analyze the content and the attribute description.
2. Determine if the content accurately reflects the intended quality attribute in this context.
3. If it does, label it as `true_positive: true`; if not, mark it as a `true_positive: false`.
4. If the content consists only of logs with no other text, mark it as a `true_positive: false`. 
4. If the content partially consists of logs, focus on analyzing remaining text. 
5. Add `reasoning` why the content is a true or false positive.
",False,"The provided content discusses technical aspects of using scanpy for data analysis and visualization, including graph computations, clustering methods, cache settings, and visualization parameters. These topics are related to accurately processing and presenting data, which can enhance system performance and correctness. However, the context does not directly address safety measures or potential harmful outcomes. It focuses more on computational efficiency and functionality rather than error prevention or damage mitigation, which are key aspects of the Safety quality attribute."
Safety,"{issue}`1664` {smaller}`A Schaar` {smaller}`L Zappia` {smaller}`bio-la` {smaller}`L Hetzel` {smaller}`L Dony` {smaller}`M Buttner` {smaller}`K Hrovatin` {smaller}`F Ramirez` {smaller}`I Virshup` {smaller}`LouisK92` {smaller}`mayarali`; - Integrated [DocSearch], a find-as-you-type documentation index search. {pr}`1754` {smaller}`P Angerer`; - - Reorganized reference docs {pr}`1753` {smaller}`I Virshup`; - Clarified docs issues for {func}`~scanpy.pp.neighbors`,; {func}`~scanpy.tl.diffmap`, {func}`~scanpy.pp.calculate_qc_metrics` {pr}`1680` {smaller}`G Palla`; - Fixed typos in grouped plot doc-strings {pr}`1877` {smaller}`C Rands`; - Extended examples for differential expression plotting. {pr}`1529` {smaller}`F Ramirez`; \- See {func}`~scanpy.pl.rank_genes_groups_dotplot` or {func}`~scanpy.pl.rank_genes_groups_matrixplot` for examples. ```{rubric} Bug fixes; ```. - Fix {func}`scanpy.pl.paga_path` `TypeError` with recent versions of anndata {pr}`1047` {smaller}`P Angerer`; - Fix detection of whether IPython is running {pr}`1844` {smaller}`I Virshup`; - Fixed reproducibility of {func}`scanpy.tl.diffmap` (added random_state) {pr}`1858` {smaller}`I Kucinski`; - Fixed errors and warnings from embedding plots with small numbers of categories after `sns.set_palette` was called {pr}`1886` {smaller}`I Virshup`; - Fixed handling of `gene_symbols` argument in a number of `sc.pl.rank_genes_groups*` functions {pr}`1529` {smaller}`F Ramirez` {smaller}`I Virshup`; - Fixed handling of `use_raw` for `sc.tl.rank_genes_groups` when no `.raw` is present {pr}`1895` {smaller}`I Virshup`; - {func}`scanpy.pl.rank_genes_groups_violin` now works for `raw=False` {pr}`1669` {smaller}`M van den Beek`; - {func}`scanpy.pl.dotplot` now uses `smallest_dot` argument correctly {pr}`1771` {smaller}`S Flemming`. ```{rubric} Development processes; ```. - Switched to [flit] for building and deploying the package, a simple tool with an easy to understand command line interface and metadata {pr}`1527` {smalle",detect,MatchSource.DOCS,scverse,scanpy,1.10.2,https://github.com/scverse/scanpy/tree/1.10.2/docs/release-notes/1.8.0.md:2716,detection,2716,docs/release-notes/1.8.0.md,https://scanpy.readthedocs.io,https://github.com/scverse/scanpy/tree/1.10.2/docs/release-notes/1.8.0.md,1,['detect'],['detection'],"The system’s ability to avoid states that could lead to harm or damage. Safety encompasses detection and handling of errors (e.g., omissions, timing, incorrect values) to prevent hazardous outcomes or mitigate potential damage.","
You are an expert in evaluating and categorizing quality attributes in software engineering. You possess the necessary skills to distinguish sentences that clearly relate to a given quality attribute from those that do not. 

Evaluate whether the content accurately aligns with its associated quality attribute, given the context provided. Your goal is to determine if the content makes sense in relation to the quality attribute description or if it is a false positive.

Data:

Quality Attribute: Safety
Attribute Description: The system’s ability to avoid states that could lead to harm or damage. Safety encompasses detection and handling of errors (e.g., omissions, timing, incorrect values) to prevent hazardous outcomes or mitigate potential damage.
Content: {issue}`1664` {smaller}`A Schaar` {smaller}`L Zappia` {smaller}`bio-la` {smaller}`L Hetzel` {smaller}`L Dony` {smaller}`M Buttner` {smaller}`K Hrovatin` {smaller}`F Ramirez` {smaller}`I Virshup` {smaller}`LouisK92` {smaller}`mayarali`; - Integrated [DocSearch], a find-as-you-type documentation index search. {pr}`1754` {smaller}`P Angerer`; - - Reorganized reference docs {pr}`1753` {smaller}`I Virshup`; - Clarified docs issues for {func}`~scanpy.pp.neighbors`,; {func}`~scanpy.tl.diffmap`, {func}`~scanpy.pp.calculate_qc_metrics` {pr}`1680` {smaller}`G Palla`; - Fixed typos in grouped plot doc-strings {pr}`1877` {smaller}`C Rands`; - Extended examples for differential expression plotting. {pr}`1529` {smaller}`F Ramirez`; \- See {func}`~scanpy.pl.rank_genes_groups_dotplot` or {func}`~scanpy.pl.rank_genes_groups_matrixplot` for examples. ```{rubric} Bug fixes; ```. - Fix {func}`scanpy.pl.paga_path` `TypeError` with recent versions of anndata {pr}`1047` {smaller}`P Angerer`; - Fix detection of whether IPython is running {pr}`1844` {smaller}`I Virshup`; - Fixed reproducibility of {func}`scanpy.tl.diffmap` (added random_state) {pr}`1858` {smaller}`I Kucinski`; - Fixed errors and warnings from embedding plots with small numbers of categories after `sns.set_palette` was called {pr}`1886` {smaller}`I Virshup`; - Fixed handling of `gene_symbols` argument in a number of `sc.pl.rank_genes_groups*` functions {pr}`1529` {smaller}`F Ramirez` {smaller}`I Virshup`; - Fixed handling of `use_raw` for `sc.tl.rank_genes_groups` when no `.raw` is present {pr}`1895` {smaller}`I Virshup`; - {func}`scanpy.pl.rank_genes_groups_violin` now works for `raw=False` {pr}`1669` {smaller}`M van den Beek`; - {func}`scanpy.pl.dotplot` now uses `smallest_dot` argument correctly {pr}`1771` {smaller}`S Flemming`. ```{rubric} Development processes; ```. - Switched to [flit] for building and deploying the package, a simple tool with an easy to understand command line interface and metadata {pr}`1527` {smalle

Instructions: 
1. Analyze the content and the attribute description.
2. Determine if the content accurately reflects the intended quality attribute in this context.
3. If it does, label it as `true_positive: true`; if not, mark it as a `true_positive: false`.
4. If the content consists only of logs with no other text, mark it as a `true_positive: false`. 
4. If the content partially consists of logs, focus on analyzing remaining text. 
5. Add `reasoning` why the content is a true or false positive.
",True,"The content described focuses on bug fixes and improvements in documentation and functionality, such as fixing type errors and enhancing user guides. These changes are directly related to system reliability and robustness, which falls under the safety attribute since they prevent potential issues that could lead to harm. The context here pertains to error handling, reproducibility, and documentation clarity, all of which contribute to a safer and more reliable system."
Security," in `sc.pl`:. ```; sc.pl.umap(adata, **plotting_params); ```. If you pass `show=False`, a {class}`~matplotlib.axes.Axes` instance is returned; and you have all of matplotlib's detailed configuration possibilities. To facilitate writing memory-efficient pipelines, by default,; Scanpy tools operate *inplace* on `adata` and return `None` –; this also allows to easily transition to [out-of-memory pipelines].; If you want to return a copy of the {class}`~anndata.AnnData` object; and leave the passed `adata` unchanged, pass `copy=True` or `inplace=False`. ## AnnData. Scanpy is based on {mod}`anndata`, which provides the {class}`~anndata.AnnData` class. ```{image} https://falexwolf.de/img/scanpy/anndata.svg; :width: 300px; ```. At the most basic level, an {class}`~anndata.AnnData` object `adata` stores; a data matrix `adata.X`, annotation of observations; `adata.obs` and variables `adata.var` as `pd.DataFrame` and unstructured; annotation `adata.uns` as `dict`. Names of observations and; variables can be accessed via `adata.obs_names` and `adata.var_names`,; respectively. {class}`~anndata.AnnData` objects can be sliced like; dataframes, for example, `adata_subset = adata[:, list_of_gene_names]`.; For more, see this [blog post]. To read a data file to an {class}`~anndata.AnnData` object, call:. ```; adata = sc.read(filename); ```. to initialize an {class}`~anndata.AnnData` object. Possibly add further annotation using, e.g., `pd.read_csv`:. ```; import pandas as pd; anno = pd.read_csv(filename_sample_annotation); adata.obs['cell_groups'] = anno['cell_groups'] # categorical annotation of type pandas.Categorical; adata.obs['time'] = anno['time'] # numerical annotation of type float; # alternatively, you could also set the whole dataframe; # adata.obs = anno; ```. To write, use:. ```; adata.write(filename); adata.write_csvs(filename); adata.write_loom(filename); ```. [blog post]: https://falexwolf.de/blog/171223_AnnData_indexing_views_HDF5-backing/; [matplotlib]: https://matplo",access,MatchSource.DOCS,scverse,scanpy,1.10.2,https://github.com/scverse/scanpy/tree/1.10.2/docs/usage-principles.md:1545,accessed,1545,docs/usage-principles.md,https://scanpy.readthedocs.io,https://github.com/scverse/scanpy/tree/1.10.2/docs/usage-principles.md,1,['access'],['accessed'],"The system’s ability to safeguard information against unauthorized access, while permitting authorized access. Security emphasizes confidentiality, integrity, and availability, using tactics to detect, prevent, and respond to attacks.","
You are an expert in evaluating and categorizing quality attributes in software engineering. You possess the necessary skills to distinguish sentences that clearly relate to a given quality attribute from those that do not. 

Evaluate whether the content accurately aligns with its associated quality attribute, given the context provided. Your goal is to determine if the content makes sense in relation to the quality attribute description or if it is a false positive.

Data:

Quality Attribute: Security
Attribute Description: The system’s ability to safeguard information against unauthorized access, while permitting authorized access. Security emphasizes confidentiality, integrity, and availability, using tactics to detect, prevent, and respond to attacks.
Content:  in `sc.pl`:. ```; sc.pl.umap(adata, **plotting_params); ```. If you pass `show=False`, a {class}`~matplotlib.axes.Axes` instance is returned; and you have all of matplotlib's detailed configuration possibilities. To facilitate writing memory-efficient pipelines, by default,; Scanpy tools operate *inplace* on `adata` and return `None` –; this also allows to easily transition to [out-of-memory pipelines].; If you want to return a copy of the {class}`~anndata.AnnData` object; and leave the passed `adata` unchanged, pass `copy=True` or `inplace=False`. ## AnnData. Scanpy is based on {mod}`anndata`, which provides the {class}`~anndata.AnnData` class. ```{image} https://falexwolf.de/img/scanpy/anndata.svg; :width: 300px; ```. At the most basic level, an {class}`~anndata.AnnData` object `adata` stores; a data matrix `adata.X`, annotation of observations; `adata.obs` and variables `adata.var` as `pd.DataFrame` and unstructured; annotation `adata.uns` as `dict`. Names of observations and; variables can be accessed via `adata.obs_names` and `adata.var_names`,; respectively. {class}`~anndata.AnnData` objects can be sliced like; dataframes, for example, `adata_subset = adata[:, list_of_gene_names]`.; For more, see this [blog post]. To read a data file to an {class}`~anndata.AnnData` object, call:. ```; adata = sc.read(filename); ```. to initialize an {class}`~anndata.AnnData` object. Possibly add further annotation using, e.g., `pd.read_csv`:. ```; import pandas as pd; anno = pd.read_csv(filename_sample_annotation); adata.obs['cell_groups'] = anno['cell_groups'] # categorical annotation of type pandas.Categorical; adata.obs['time'] = anno['time'] # numerical annotation of type float; # alternatively, you could also set the whole dataframe; # adata.obs = anno; ```. To write, use:. ```; adata.write(filename); adata.write_csvs(filename); adata.write_loom(filename); ```. [blog post]: https://falexwolf.de/blog/171223_AnnData_indexing_views_HDF5-backing/; [matplotlib]: https://matplo

Instructions: 
1. Analyze the content and the attribute description.
2. Determine if the content accurately reflects the intended quality attribute in this context.
3. If it does, label it as `true_positive: true`; if not, mark it as a `true_positive: false`.
4. If the content consists only of logs with no other text, mark it as a `true_positive: false`. 
4. If the content partially consists of logs, focus on analyzing remaining text. 
5. Add `reasoning` why the content is a true or false positive.
",False,"The content discusses how data is handled and stored in Anndata objects using scanpy, including reading files, annotations, and writing data. It does not mention anything about security measures, authentication, encryption, or protections against unauthorized access. Therefore, it doesn't align with the Security quality attribute description."
Security,"# Installation. ## Anaconda. If you do not have a working installation of Python 3.6 (or later), consider; installing [Miniconda] (see [Installing Miniconda]). Then run:. ```shell; conda install -c conda-forge scanpy python-igraph leidenalg; ```. Pull Scanpy from [PyPI](https://pypi.org/project/scanpy) (consider using `pip3` to access Python 3):. ```shell; pip install scanpy; ```. ## PyPI only. If you prefer to exclusively use PyPI run:. ```shell; pip install 'scanpy[leiden]'; ```. The extra `[leiden]` installs two packages that are needed for popular; parts of scanpy but aren't requirements: [igraph] {cite:p}`Csardi2006` and [leiden] {cite:p}`Traag2019`. (dev-install-instructions)=. ## Development Version. To work with the latest version [on GitHub]: clone the repository and `cd` into its root directory. ```shell; gh repo clone scverse/scanpy; cd scanpy; ```. If you are using `pip>=21.3`, an editable install can be made:. ```shell; pip install -e '.[dev,test]'; ```. If you want to let [conda] handle the installations of dependencies, do:. ```shell; pipx install beni; beni pyproject.toml > environment.yml; conda env create -f environment.yml; conda activate scanpy; pip install -e '.[dev,doc,test]'; ```. For instructions on how to work with the code, see the {ref}`contribution guide <contribution-guide>`. ## Docker. If you're using [Docker], you can use e.g. the image [gcfntnu/scanpy] from Docker Hub. ## Troubleshooting. If you get a `Permission denied` error, never use `sudo pip`. Instead, use virtual environments or:. ```shell; pip install --user scanpy; ```. **On MacOS**, if **not** using `conda`, you might need to install the C core of igraph via homebrew first. - `brew install igraph`. - If igraph still fails to install, see the question on [compiling igraph].; Alternatively consider installing gcc via `brew install gcc --without-multilib`; and exporting the required variables:. ```shell; export CC=""/usr/local/Cellar/gcc/X.x.x/bin/gcc-X""; export CXX=""/usr/local/C",access,MatchSource.DOCS,scverse,scanpy,1.10.2,https://github.com/scverse/scanpy/tree/1.10.2/docs/installation.md:330,access,330,docs/installation.md,https://scanpy.readthedocs.io,https://github.com/scverse/scanpy/tree/1.10.2/docs/installation.md,1,['access'],['access'],"The system’s ability to safeguard information against unauthorized access, while permitting authorized access. Security emphasizes confidentiality, integrity, and availability, using tactics to detect, prevent, and respond to attacks.","
You are an expert in evaluating and categorizing quality attributes in software engineering. You possess the necessary skills to distinguish sentences that clearly relate to a given quality attribute from those that do not. 

Evaluate whether the content accurately aligns with its associated quality attribute, given the context provided. Your goal is to determine if the content makes sense in relation to the quality attribute description or if it is a false positive.

Data:

Quality Attribute: Security
Attribute Description: The system’s ability to safeguard information against unauthorized access, while permitting authorized access. Security emphasizes confidentiality, integrity, and availability, using tactics to detect, prevent, and respond to attacks.
Content: # Installation. ## Anaconda. If you do not have a working installation of Python 3.6 (or later), consider; installing [Miniconda] (see [Installing Miniconda]). Then run:. ```shell; conda install -c conda-forge scanpy python-igraph leidenalg; ```. Pull Scanpy from [PyPI](https://pypi.org/project/scanpy) (consider using `pip3` to access Python 3):. ```shell; pip install scanpy; ```. ## PyPI only. If you prefer to exclusively use PyPI run:. ```shell; pip install 'scanpy[leiden]'; ```. The extra `[leiden]` installs two packages that are needed for popular; parts of scanpy but aren't requirements: [igraph] {cite:p}`Csardi2006` and [leiden] {cite:p}`Traag2019`. (dev-install-instructions)=. ## Development Version. To work with the latest version [on GitHub]: clone the repository and `cd` into its root directory. ```shell; gh repo clone scverse/scanpy; cd scanpy; ```. If you are using `pip>=21.3`, an editable install can be made:. ```shell; pip install -e '.[dev,test]'; ```. If you want to let [conda] handle the installations of dependencies, do:. ```shell; pipx install beni; beni pyproject.toml > environment.yml; conda env create -f environment.yml; conda activate scanpy; pip install -e '.[dev,doc,test]'; ```. For instructions on how to work with the code, see the {ref}`contribution guide <contribution-guide>`. ## Docker. If you're using [Docker], you can use e.g. the image [gcfntnu/scanpy] from Docker Hub. ## Troubleshooting. If you get a `Permission denied` error, never use `sudo pip`. Instead, use virtual environments or:. ```shell; pip install --user scanpy; ```. **On MacOS**, if **not** using `conda`, you might need to install the C core of igraph via homebrew first. - `brew install igraph`. - If igraph still fails to install, see the question on [compiling igraph].; Alternatively consider installing gcc via `brew install gcc --without-multilib`; and exporting the required variables:. ```shell; export CC=""/usr/local/Cellar/gcc/X.x.x/bin/gcc-X""; export CXX=""/usr/local/C

Instructions: 
1. Analyze the content and the attribute description.
2. Determine if the content accurately reflects the intended quality attribute in this context.
3. If it does, label it as `true_positive: true`; if not, mark it as a `true_positive: false`.
4. If the content consists only of logs with no other text, mark it as a `true_positive: false`. 
4. If the content partially consists of logs, focus on analyzing remaining text. 
5. Add `reasoning` why the content is a true or false positive.
",False,"The content provided discusses installation methods for software packages like Anaconda, PyPI, development versions using pip and GitHub, Docker usage, and troubleshooting issues related to permissions and installing dependencies. These are all about how to install and set up the system correctly, including managing environments, which falls under 'System Installation and Configuration' rather than 'Security'. The text does not mention anything related to safeguarding information, confidentiality, integrity, or availability; nor does it discuss security tactics like detecting or preventing attacks. Therefore, this content does not align with the 'Security' quality attribute."
Security,"# Versioning. ```{note}; We are currently experimenting with our development practices.; These are currently documented on a best effort basis, but may not be completely accurate.; ```. ## Semantic versioning. We try to follow [semantic versioning](https://semver.org) with our versioning scheme.; This scheme breaks down a version number into `{major.minor.point}` sections.; At a `point` release, there should be no changes beyond bug fixes.; `minor` releases can include new features.; `major` releases can break old APIs. ### Version numbers. Valid version numbers are described in [PEP 440](https://peps.python.org/pep-0440/). [Pre-releases](https://peps.python.org/pep-0440/#pre-releases); : should have versions like `1.7.0rc1` or `1.7.0rc2`.; [Development versions](https://peps.python.org/pep-0440/#developmental-releases); : should look like `1.8.0.dev0`, with a commit hash optionally appended as a local version identifier (e.g. `1.8.0.dev2+g00ad77b`). ## Tooling. To be sure we can follow this scheme and maintain some agility in development, we use some tooling and development practices.; When a minor release is made, a release branch should be cut and pushed to the main repo (e.g. `1.7.x` for the `1.7` release series). For PRs which fix an bug in the most recent minor release, the changes will need to added to both the development and release branches.; To accomplish this, PRs which fix bugs must be labelled as such.; After approval, a developer will notify the [meeseeks bot](https://meeseeksbox.github.io) to open a backport PR onto the release branch via a comment saying:. > @Meeseeksdev backport \<branch>. Where ""\<branch>"" is the most recent release branch. The bot will attempt to make a backport and open a PR.; This will sometimes require manual intervention due to merge conflicts or test failures.; ",hash,MatchSource.DOCS,scverse,scanpy,1.10.2,https://github.com/scverse/scanpy/tree/1.10.2/docs/dev/versioning.md:880,hash,880,docs/dev/versioning.md,https://scanpy.readthedocs.io,https://github.com/scverse/scanpy/tree/1.10.2/docs/dev/versioning.md,1,['hash'],['hash'],"The system’s ability to safeguard information against unauthorized access, while permitting authorized access. Security emphasizes confidentiality, integrity, and availability, using tactics to detect, prevent, and respond to attacks.","
You are an expert in evaluating and categorizing quality attributes in software engineering. You possess the necessary skills to distinguish sentences that clearly relate to a given quality attribute from those that do not. 

Evaluate whether the content accurately aligns with its associated quality attribute, given the context provided. Your goal is to determine if the content makes sense in relation to the quality attribute description or if it is a false positive.

Data:

Quality Attribute: Security
Attribute Description: The system’s ability to safeguard information against unauthorized access, while permitting authorized access. Security emphasizes confidentiality, integrity, and availability, using tactics to detect, prevent, and respond to attacks.
Content: # Versioning. ```{note}; We are currently experimenting with our development practices.; These are currently documented on a best effort basis, but may not be completely accurate.; ```. ## Semantic versioning. We try to follow [semantic versioning](https://semver.org) with our versioning scheme.; This scheme breaks down a version number into `{major.minor.point}` sections.; At a `point` release, there should be no changes beyond bug fixes.; `minor` releases can include new features.; `major` releases can break old APIs. ### Version numbers. Valid version numbers are described in [PEP 440](https://peps.python.org/pep-0440/). [Pre-releases](https://peps.python.org/pep-0440/#pre-releases); : should have versions like `1.7.0rc1` or `1.7.0rc2`.; [Development versions](https://peps.python.org/pep-0440/#developmental-releases); : should look like `1.8.0.dev0`, with a commit hash optionally appended as a local version identifier (e.g. `1.8.0.dev2+g00ad77b`). ## Tooling. To be sure we can follow this scheme and maintain some agility in development, we use some tooling and development practices.; When a minor release is made, a release branch should be cut and pushed to the main repo (e.g. `1.7.x` for the `1.7` release series). For PRs which fix an bug in the most recent minor release, the changes will need to added to both the development and release branches.; To accomplish this, PRs which fix bugs must be labelled as such.; After approval, a developer will notify the [meeseeks bot](https://meeseeksbox.github.io) to open a backport PR onto the release branch via a comment saying:. > @Meeseeksdev backport \<branch>. Where ""\<branch>"" is the most recent release branch. The bot will attempt to make a backport and open a PR.; This will sometimes require manual intervention due to merge conflicts or test failures.; 

Instructions: 
1. Analyze the content and the attribute description.
2. Determine if the content accurately reflects the intended quality attribute in this context.
3. If it does, label it as `true_positive: true`; if not, mark it as a `true_positive: false`.
4. If the content consists only of logs with no other text, mark it as a `true_positive: false`. 
4. If the content partially consists of logs, focus on analyzing remaining text. 
5. Add `reasoning` why the content is a true or false positive.
",False,"The content provided discusses version control practices, including semantic versioning and tooling for backporting changes. There's no mention of security measures, policies, threat detection, access controls, encryption, etc., which are key aspects of security. Therefore, the content does not align with the Security quality attribute."
Security,## Preprocessing: PP. ```{eval-rst}; .. module:: scanpy.external.pp; .. currentmodule:: scanpy.external; ```. ### Data integration. ```{eval-rst}; .. autosummary::; :toctree: ../generated/. pp.bbknn; pp.harmony_integrate; pp.mnn_correct; pp.scanorama_integrate. ```. ### Sample demultiplexing. ```{eval-rst}; .. autosummary::; :toctree: ../generated/. pp.hashsolo; ```. ### Imputation. Note that the fundamental limitations of imputation are still under [debate](https://github.com/scverse/scanpy/issues/189). ```{eval-rst}; .. autosummary::; :toctree: ../generated/. pp.dca; pp.magic. ```; ,hash,MatchSource.DOCS,scverse,scanpy,1.10.2,https://github.com/scverse/scanpy/tree/1.10.2/docs/external/preprocessing.md:355,hashsolo,355,docs/external/preprocessing.md,https://scanpy.readthedocs.io,https://github.com/scverse/scanpy/tree/1.10.2/docs/external/preprocessing.md,1,['hash'],['hashsolo'],"The system’s ability to safeguard information against unauthorized access, while permitting authorized access. Security emphasizes confidentiality, integrity, and availability, using tactics to detect, prevent, and respond to attacks.","
You are an expert in evaluating and categorizing quality attributes in software engineering. You possess the necessary skills to distinguish sentences that clearly relate to a given quality attribute from those that do not. 

Evaluate whether the content accurately aligns with its associated quality attribute, given the context provided. Your goal is to determine if the content makes sense in relation to the quality attribute description or if it is a false positive.

Data:

Quality Attribute: Security
Attribute Description: The system’s ability to safeguard information against unauthorized access, while permitting authorized access. Security emphasizes confidentiality, integrity, and availability, using tactics to detect, prevent, and respond to attacks.
Content: ## Preprocessing: PP. ```{eval-rst}; .. module:: scanpy.external.pp; .. currentmodule:: scanpy.external; ```. ### Data integration. ```{eval-rst}; .. autosummary::; :toctree: ../generated/. pp.bbknn; pp.harmony_integrate; pp.mnn_correct; pp.scanorama_integrate. ```. ### Sample demultiplexing. ```{eval-rst}; .. autosummary::; :toctree: ../generated/. pp.hashsolo; ```. ### Imputation. Note that the fundamental limitations of imputation are still under [debate](https://github.com/scverse/scanpy/issues/189). ```{eval-rst}; .. autosummary::; :toctree: ../generated/. pp.dca; pp.magic. ```; 

Instructions: 
1. Analyze the content and the attribute description.
2. Determine if the content accurately reflects the intended quality attribute in this context.
3. If it does, label it as `true_positive: true`; if not, mark it as a `true_positive: false`.
4. If the content consists only of logs with no other text, mark it as a `true_positive: false`. 
4. If the content partially consists of logs, focus on analyzing remaining text. 
5. Add `reasoning` why the content is a true or false positive.
",False,"The provided content discusses preprocessing steps in data integration, sample demultiplexing, and imputation methods. While these are important aspects in data processing, they don't directly relate to security attributes such as confidentiality, integrity, or availability. The context here is more about data handling rather than safeguarding information from unauthorized access."
Security,"### 1.6.0 {small}`2020-08-15`. This release includes an overhaul of {func}`~scanpy.pl.dotplot`, {func}`~scanpy.pl.matrixplot`, and {func}`~scanpy.pl.stacked_violin` ({pr}`1210` {smaller}`F Ramirez`), and of the internals of {func}`~scanpy.tl.rank_genes_groups` ({pr}`1156` {smaller}`S Rybakov`). ~~~{rubric} Overhaul of {func}`~scanpy.pl.dotplot`, {func}`~scanpy.pl.matrixplot`, and {func}`~scanpy.pl.stacked_violin` {pr}`1210` {smaller}`F Ramirez`; ~~~. - An overhauled tutorial {doc}`/tutorials/plotting/core`. - New plotting classes can be accessed directly (e.g., {class}`~scanpy.pl.DotPlot`) or using the `return_fig` param. - It is possible to plot log fold change and p-values in the {func}`~scanpy.pl.rank_genes_groups_dotplot` family of functions. - Added `ax` parameter which allows embedding the plot in other images. - Added option to include a bar plot instead of the dendrogram containing the cell/observation totals per category. - Return a dictionary of axes for further manipulation. This includes the main plot, legend and dendrogram to totals. - Legends can be removed. - The `groupby` param can take a list of categories, e.g., `groupby=[‘tissue’, ‘cell type’]`. - Added padding parameter to `dotplot` and `stacked_violin`. {pr}`1270`. - Added title for colorbar and positioned as in dotplot for {func}`~scanpy.pl.matrixplot`. - {func}`~scanpy.pl.dotplot` changes:. > - Improved the colorbar and size legend for dotplots. Now the colorbar and size have titles, which can be modified using the `colorbar_title` and `size_title` params. They also align at the bottom of the image and do not shrink if the dotplot image is smaller.; > - Allow plotting genes in rows and categories in columns (`swap_axes`).; > - Using {class}`~scanpy.pl.DotPlot`, the `dot_edge_color` and line width can be modified, a grid can be added, and other modifications are enabled.; > - A new style was added in which the dots are replaced by an empty circle and the square behind the circle is colored (like",access,MatchSource.DOCS,scverse,scanpy,1.10.2,https://github.com/scverse/scanpy/tree/1.10.2/docs/release-notes/1.6.0.md:543,accessed,543,docs/release-notes/1.6.0.md,https://scanpy.readthedocs.io,https://github.com/scverse/scanpy/tree/1.10.2/docs/release-notes/1.6.0.md,1,['access'],['accessed'],"The system’s ability to safeguard information against unauthorized access, while permitting authorized access. Security emphasizes confidentiality, integrity, and availability, using tactics to detect, prevent, and respond to attacks.","
You are an expert in evaluating and categorizing quality attributes in software engineering. You possess the necessary skills to distinguish sentences that clearly relate to a given quality attribute from those that do not. 

Evaluate whether the content accurately aligns with its associated quality attribute, given the context provided. Your goal is to determine if the content makes sense in relation to the quality attribute description or if it is a false positive.

Data:

Quality Attribute: Security
Attribute Description: The system’s ability to safeguard information against unauthorized access, while permitting authorized access. Security emphasizes confidentiality, integrity, and availability, using tactics to detect, prevent, and respond to attacks.
Content: ### 1.6.0 {small}`2020-08-15`. This release includes an overhaul of {func}`~scanpy.pl.dotplot`, {func}`~scanpy.pl.matrixplot`, and {func}`~scanpy.pl.stacked_violin` ({pr}`1210` {smaller}`F Ramirez`), and of the internals of {func}`~scanpy.tl.rank_genes_groups` ({pr}`1156` {smaller}`S Rybakov`). ~~~{rubric} Overhaul of {func}`~scanpy.pl.dotplot`, {func}`~scanpy.pl.matrixplot`, and {func}`~scanpy.pl.stacked_violin` {pr}`1210` {smaller}`F Ramirez`; ~~~. - An overhauled tutorial {doc}`/tutorials/plotting/core`. - New plotting classes can be accessed directly (e.g., {class}`~scanpy.pl.DotPlot`) or using the `return_fig` param. - It is possible to plot log fold change and p-values in the {func}`~scanpy.pl.rank_genes_groups_dotplot` family of functions. - Added `ax` parameter which allows embedding the plot in other images. - Added option to include a bar plot instead of the dendrogram containing the cell/observation totals per category. - Return a dictionary of axes for further manipulation. This includes the main plot, legend and dendrogram to totals. - Legends can be removed. - The `groupby` param can take a list of categories, e.g., `groupby=[‘tissue’, ‘cell type’]`. - Added padding parameter to `dotplot` and `stacked_violin`. {pr}`1270`. - Added title for colorbar and positioned as in dotplot for {func}`~scanpy.pl.matrixplot`. - {func}`~scanpy.pl.dotplot` changes:. > - Improved the colorbar and size legend for dotplots. Now the colorbar and size have titles, which can be modified using the `colorbar_title` and `size_title` params. They also align at the bottom of the image and do not shrink if the dotplot image is smaller.; > - Allow plotting genes in rows and categories in columns (`swap_axes`).; > - Using {class}`~scanpy.pl.DotPlot`, the `dot_edge_color` and line width can be modified, a grid can be added, and other modifications are enabled.; > - A new style was added in which the dots are replaced by an empty circle and the square behind the circle is colored (like

Instructions: 
1. Analyze the content and the attribute description.
2. Determine if the content accurately reflects the intended quality attribute in this context.
3. If it does, label it as `true_positive: true`; if not, mark it as a `true_positive: false`.
4. If the content consists only of logs with no other text, mark it as a `true_positive: false`. 
4. If the content partially consists of logs, focus on analyzing remaining text. 
5. Add `reasoning` why the content is a true or false positive.
",False,"The content provided describes various updates and features related to plotting functions in an software release (e.g., {func} '~scanpy.pl.dotplot', etc.). While it does touch upon functional improvements, there is no mention of any security-related measures, such as data protection, encryption, access control, or threat detection. Therefore, the content does not align with the Security quality attribute."
Security,"//umgear.org/) {small}`U Maryland`; - the [Galaxy Project](https://humancellatlas.usegalaxy.eu) for the Human Cell Atlas [\[tweet\]](https://twitter.com/ExpressionAtlas/status/1151797848469626881) {small}`U Freiburg`; - the [Expression Atlas](https://www.ebi.ac.uk/gxa/sc/help.html) {small}`EMBL-EBI`. ## Modalities. ### RNA velocity. - [scVelo](https://scvelo.org) {small}`Helmholtz Munich`. ### Spatial Transcriptomics Tools. - [squidpy](https://squidpy.readthedocs.io/en/stable/) {small}`Helmholtz Munich`. > Squidpy is a comprehensive toolkit for working with spatial single cell omics data. - [PASTE](https://github.com/raphael-group/paste) {small}`Princeton`. > PASTE is a computational method to align and integrate spatial transcriptomics data across adjacent tissue slices by leveraging both gene expression similarity and spatial distances between spots. - [bento](https://bento-tools.readthedocs.io/en/latest/) 🍱 {small}`UC San Diego`. > Bento is an accessible Python toolkit for performing subcellular analysis of spatial transcriptomics data. ### Multimodal integration. - [MUON](https://muon.readthedocs.io/en/latest/) and [MuData](https://mudata.readthedocs.io/en/latest/) {small}`EMBL/ DKFZ`. > MUON, and it's associated data structure MuData are designed to organise, analyse, visualise, and exchange multimodal data.; > MUON enables a range of analyses for ATAC and CITE-seq, from data preprocessing to flexible multi-omics alignment. ### Adaptive immune receptor repertoire (AIRR). - [scirpy](https://github.com/icbi-lab/scirpy) {small}`Medical University of Innsbruck`. > scirpy is a scanpy extension to expore single-cell T-cell receptor (TCR) and B-cell receptor (BCR) repertoires. - [dandelion](https://github.com/zktuong/dandelion) {small}`University of Cambridge`. > dandelion is a single-cell BCR-seq network analysis package that integrates with transcriptomic data analyzed via scanpy. ### Long reads. - [Swan](https://freese.gitbook.io/swan/tutorials/data_processing) {sma",access,MatchSource.DOCS,scverse,scanpy,1.10.2,https://github.com/scverse/scanpy/tree/1.10.2/docs/ecosystem.md:1970,accessible,1970,docs/ecosystem.md,https://scanpy.readthedocs.io,https://github.com/scverse/scanpy/tree/1.10.2/docs/ecosystem.md,1,['access'],['accessible'],"The system’s ability to safeguard information against unauthorized access, while permitting authorized access. Security emphasizes confidentiality, integrity, and availability, using tactics to detect, prevent, and respond to attacks.","
You are an expert in evaluating and categorizing quality attributes in software engineering. You possess the necessary skills to distinguish sentences that clearly relate to a given quality attribute from those that do not. 

Evaluate whether the content accurately aligns with its associated quality attribute, given the context provided. Your goal is to determine if the content makes sense in relation to the quality attribute description or if it is a false positive.

Data:

Quality Attribute: Security
Attribute Description: The system’s ability to safeguard information against unauthorized access, while permitting authorized access. Security emphasizes confidentiality, integrity, and availability, using tactics to detect, prevent, and respond to attacks.
Content: //umgear.org/) {small}`U Maryland`; - the [Galaxy Project](https://humancellatlas.usegalaxy.eu) for the Human Cell Atlas [\[tweet\]](https://twitter.com/ExpressionAtlas/status/1151797848469626881) {small}`U Freiburg`; - the [Expression Atlas](https://www.ebi.ac.uk/gxa/sc/help.html) {small}`EMBL-EBI`. ## Modalities. ### RNA velocity. - [scVelo](https://scvelo.org) {small}`Helmholtz Munich`. ### Spatial Transcriptomics Tools. - [squidpy](https://squidpy.readthedocs.io/en/stable/) {small}`Helmholtz Munich`. > Squidpy is a comprehensive toolkit for working with spatial single cell omics data. - [PASTE](https://github.com/raphael-group/paste) {small}`Princeton`. > PASTE is a computational method to align and integrate spatial transcriptomics data across adjacent tissue slices by leveraging both gene expression similarity and spatial distances between spots. - [bento](https://bento-tools.readthedocs.io/en/latest/) 🍱 {small}`UC San Diego`. > Bento is an accessible Python toolkit for performing subcellular analysis of spatial transcriptomics data. ### Multimodal integration. - [MUON](https://muon.readthedocs.io/en/latest/) and [MuData](https://mudata.readthedocs.io/en/latest/) {small}`EMBL/ DKFZ`. > MUON, and it's associated data structure MuData are designed to organise, analyse, visualise, and exchange multimodal data.; > MUON enables a range of analyses for ATAC and CITE-seq, from data preprocessing to flexible multi-omics alignment. ### Adaptive immune receptor repertoire (AIRR). - [scirpy](https://github.com/icbi-lab/scirpy) {small}`Medical University of Innsbruck`. > scirpy is a scanpy extension to expore single-cell T-cell receptor (TCR) and B-cell receptor (BCR) repertoires. - [dandelion](https://github.com/zktuong/dandelion) {small}`University of Cambridge`. > dandelion is a single-cell BCR-seq network analysis package that integrates with transcriptomic data analyzed via scanpy. ### Long reads. - [Swan](https://freese.gitbook.io/swan/tutorials/data_processing) {sma

Instructions: 
1. Analyze the content and the attribute description.
2. Determine if the content accurately reflects the intended quality attribute in this context.
3. If it does, label it as `true_positive: true`; if not, mark it as a `true_positive: false`.
4. If the content consists only of logs with no other text, mark it as a `true_positive: false`. 
4. If the content partially consists of logs, focus on analyzing remaining text. 
5. Add `reasoning` why the content is a true or false positive.
",False,"The content discusses various tools and computational methods related to spatial transcriptomics, multimodal integration, adaptive immune receptor repertoires, and long reads in genomics. The context involves technical aspects of data analysis rather than security measures. There's no mention of confidentiality, integrity checks, or protective measures against unauthorized access, which are key components of the Security quality attribute."
Security,"Frame.groupby`). {pr}`1583` {smaller}`F Ramirez`; - Added `na_color` and `na_in_legend` keyword arguments to {func}`~scanpy.pl.embedding` plots. Allows specifying color for missing or filtered values in plots like {func}`~scanpy.pl.umap` or {func}`~scanpy.pl.spatial` {pr}`1356` {smaller}`I Virshup`; - {func}`~scanpy.pl.embedding` plots now support passing `dict` of `{cluster_name: cluster_color, ...}` for palette argument {pr}`1392` {smaller}`I Virshup`. ```{rubric} External tools (new); ```. - Add [Scanorama](https://github.com/brianhie/scanorama) integration to scanpy external API ({func}`~scanpy.external.pp.scanorama_integrate`, {cite:t}`Hie2019`) {pr}`1332` {smaller}`B Hie`; - Scrublet {cite:p}`Wolock2019` integration: {func}`~scanpy.pp.scrublet`, {func}`~scanpy.pp.scrublet_simulate_doublets`, and plotting method {func}`~scanpy.pl.scrublet_score_distribution` {pr}`1476` {smaller}`J Manning`; - {func}`~scanpy.external.pp.hashsolo` for HTO demultiplexing {cite:p}`Bernstein2020` {pr}`1432` {smaller}`NJ Bernstein`; - Added [scirpy](https://github.com/icbi-lab/scirpy) (sc-AIRR analysis) to ecosystem page {pr}`1453` {smaller}`G Sturm`; - Added [scvi-tools](https://scvi-tools.org) to ecosystem page {pr}`1421` {smaller}`A Gayoso`. ```{rubric} External tools (changes); ```. - Updates for {func}`~scanpy.external.tl.palantir` and {func}`~scanpy.external.tl.palantir_results` {pr}`1245` {smaller}`A Mousa`; - Fixes to {func}`~scanpy.external.tl.harmony_timeseries` docs {pr}`1248` {smaller}`A Mousa`; - Support for `leiden` clustering by {func}`scanpy.external.tl.phenograph` {pr}`1080` {smaller}`A Mousa`; - Deprecate `scanpy.external.pp.scvi` {pr}`1554` {smaller}`G Xing`; - Updated default params of {func}`~scanpy.external.tl.sam` to work with larger data {pr}`1540` {smaller}`A Tarashansky`. ```{rubric} Documentation; ```. - {ref}`New contribution guide <contribution-guide>` {pr}`1544` {smaller}`I Virshup`; - `zsh` installation instructions {pr}`1444` {smaller}`P Angerer`. ```{r",hash,MatchSource.DOCS,scverse,scanpy,1.10.2,https://github.com/scverse/scanpy/tree/1.10.2/docs/release-notes/1.7.0.md:1992,hashsolo,1992,docs/release-notes/1.7.0.md,https://scanpy.readthedocs.io,https://github.com/scverse/scanpy/tree/1.10.2/docs/release-notes/1.7.0.md,1,['hash'],['hashsolo'],"The system’s ability to safeguard information against unauthorized access, while permitting authorized access. Security emphasizes confidentiality, integrity, and availability, using tactics to detect, prevent, and respond to attacks.","
You are an expert in evaluating and categorizing quality attributes in software engineering. You possess the necessary skills to distinguish sentences that clearly relate to a given quality attribute from those that do not. 

Evaluate whether the content accurately aligns with its associated quality attribute, given the context provided. Your goal is to determine if the content makes sense in relation to the quality attribute description or if it is a false positive.

Data:

Quality Attribute: Security
Attribute Description: The system’s ability to safeguard information against unauthorized access, while permitting authorized access. Security emphasizes confidentiality, integrity, and availability, using tactics to detect, prevent, and respond to attacks.
Content: Frame.groupby`). {pr}`1583` {smaller}`F Ramirez`; - Added `na_color` and `na_in_legend` keyword arguments to {func}`~scanpy.pl.embedding` plots. Allows specifying color for missing or filtered values in plots like {func}`~scanpy.pl.umap` or {func}`~scanpy.pl.spatial` {pr}`1356` {smaller}`I Virshup`; - {func}`~scanpy.pl.embedding` plots now support passing `dict` of `{cluster_name: cluster_color, ...}` for palette argument {pr}`1392` {smaller}`I Virshup`. ```{rubric} External tools (new); ```. - Add [Scanorama](https://github.com/brianhie/scanorama) integration to scanpy external API ({func}`~scanpy.external.pp.scanorama_integrate`, {cite:t}`Hie2019`) {pr}`1332` {smaller}`B Hie`; - Scrublet {cite:p}`Wolock2019` integration: {func}`~scanpy.pp.scrublet`, {func}`~scanpy.pp.scrublet_simulate_doublets`, and plotting method {func}`~scanpy.pl.scrublet_score_distribution` {pr}`1476` {smaller}`J Manning`; - {func}`~scanpy.external.pp.hashsolo` for HTO demultiplexing {cite:p}`Bernstein2020` {pr}`1432` {smaller}`NJ Bernstein`; - Added [scirpy](https://github.com/icbi-lab/scirpy) (sc-AIRR analysis) to ecosystem page {pr}`1453` {smaller}`G Sturm`; - Added [scvi-tools](https://scvi-tools.org) to ecosystem page {pr}`1421` {smaller}`A Gayoso`. ```{rubric} External tools (changes); ```. - Updates for {func}`~scanpy.external.tl.palantir` and {func}`~scanpy.external.tl.palantir_results` {pr}`1245` {smaller}`A Mousa`; - Fixes to {func}`~scanpy.external.tl.harmony_timeseries` docs {pr}`1248` {smaller}`A Mousa`; - Support for `leiden` clustering by {func}`scanpy.external.tl.phenograph` {pr}`1080` {smaller}`A Mousa`; - Deprecate `scanpy.external.pp.scvi` {pr}`1554` {smaller}`G Xing`; - Updated default params of {func}`~scanpy.external.tl.sam` to work with larger data {pr}`1540` {smaller}`A Tarashansky`. ```{rubric} Documentation; ```. - {ref}`New contribution guide <contribution-guide>` {pr}`1544` {smaller}`I Virshup`; - `zsh` installation instructions {pr}`1444` {smaller}`P Angerer`. ```{r

Instructions: 
1. Analyze the content and the attribute description.
2. Determine if the content accurately reflects the intended quality attribute in this context.
3. If it does, label it as `true_positive: true`; if not, mark it as a `true_positive: false`.
4. If the content consists only of logs with no other text, mark it as a `true_positive: false`. 
4. If the content partially consists of logs, focus on analyzing remaining text. 
5. Add `reasoning` why the content is a true or false positive.
",False,"The content provided in the code snippet primarily contains information about updates and changes related to various tools and functionalities in the system. It mentions adding new integrations like Scanorama, Scrublet, and scirpy, along with updates to existing functions such as Phenograph and PALANTIR. Additionally, there are documentation updates and contributions guides being added. None of this content explicitly discusses security measures, data protection, or confidentiality. While these updates may improve the overall functionality and usability of the system, they do not directly address or contribute to the system's ability to safeguard information. Therefore, this content does not accurately align with the Security quality attribute as defined."
Security,"sion denied` error, never use `sudo pip`. Instead, use virtual environments or:. ```shell; pip install --user scanpy; ```. **On MacOS**, if **not** using `conda`, you might need to install the C core of igraph via homebrew first. - `brew install igraph`. - If igraph still fails to install, see the question on [compiling igraph].; Alternatively consider installing gcc via `brew install gcc --without-multilib`; and exporting the required variables:. ```shell; export CC=""/usr/local/Cellar/gcc/X.x.x/bin/gcc-X""; export CXX=""/usr/local/Cellar/gcc/X.x.x/bin/gcc-X""; ```. where `X` and `x` refers to the version of `gcc`;; in my case, the path reads `/usr/local/Cellar/gcc/6.3.0_1/bin/gcc-6`. **On Windows**, there also often problems installing compiled packages such as `igraph`,; but you can find precompiled packages on Christoph Gohlke’s [unofficial binaries].; Download those and install them using `pip install ./path/to/file.whl`. (conda)=. ## Installing Miniconda. After downloading [Miniconda], in a unix shell (Linux, Mac), run. ```shell; cd DOWNLOAD_DIR; chmod +x Miniconda3-latest-VERSION.sh; ./Miniconda3-latest-VERSION.sh; ```. and accept all suggestions.; Either reopen a new terminal or `source ~/.bashrc` on Linux/ `source ~/.bash_profile` on Mac.; The whole process takes just a couple of minutes. [bioconda]: https://bioconda.github.io/; [compiling igraph]: https://stackoverflow.com/q/29589696/247482; [create symbolic links]: https://docs.microsoft.com/en-us/windows/security/threat-protection/security-policy-settings/create-symbolic-links; [docker]: https://en.wikipedia.org/wiki/Docker_(software); [from pypi]: https://pypi.org/project/scanpy; [gcfntnu/scanpy]: https://hub.docker.com/r/gcfntnu/scanpy; [leiden]: https://leidenalg.readthedocs.io; [miniconda]: https://docs.conda.io/projects/miniconda/en/latest/; [on github]: https://github.com/scverse/scanpy; [igraph]: https://python.igraph.org/en/stable/; [unofficial binaries]: https://www.lfd.uci.edu/~gohlke/pythonlibs/; ",secur,MatchSource.DOCS,scverse,scanpy,1.10.2,https://github.com/scverse/scanpy/tree/1.10.2/docs/installation.md:2951,security,2951,docs/installation.md,https://scanpy.readthedocs.io,https://github.com/scverse/scanpy/tree/1.10.2/docs/installation.md,3,"['secur', 'threat']","['security', 'security-policy-settings', 'threat-protection']","The system’s ability to safeguard information against unauthorized access, while permitting authorized access. Security emphasizes confidentiality, integrity, and availability, using tactics to detect, prevent, and respond to attacks.","
You are an expert in evaluating and categorizing quality attributes in software engineering. You possess the necessary skills to distinguish sentences that clearly relate to a given quality attribute from those that do not. 

Evaluate whether the content accurately aligns with its associated quality attribute, given the context provided. Your goal is to determine if the content makes sense in relation to the quality attribute description or if it is a false positive.

Data:

Quality Attribute: Security
Attribute Description: The system’s ability to safeguard information against unauthorized access, while permitting authorized access. Security emphasizes confidentiality, integrity, and availability, using tactics to detect, prevent, and respond to attacks.
Content: sion denied` error, never use `sudo pip`. Instead, use virtual environments or:. ```shell; pip install --user scanpy; ```. **On MacOS**, if **not** using `conda`, you might need to install the C core of igraph via homebrew first. - `brew install igraph`. - If igraph still fails to install, see the question on [compiling igraph].; Alternatively consider installing gcc via `brew install gcc --without-multilib`; and exporting the required variables:. ```shell; export CC=""/usr/local/Cellar/gcc/X.x.x/bin/gcc-X""; export CXX=""/usr/local/Cellar/gcc/X.x.x/bin/gcc-X""; ```. where `X` and `x` refers to the version of `gcc`;; in my case, the path reads `/usr/local/Cellar/gcc/6.3.0_1/bin/gcc-6`. **On Windows**, there also often problems installing compiled packages such as `igraph`,; but you can find precompiled packages on Christoph Gohlke’s [unofficial binaries].; Download those and install them using `pip install ./path/to/file.whl`. (conda)=. ## Installing Miniconda. After downloading [Miniconda], in a unix shell (Linux, Mac), run. ```shell; cd DOWNLOAD_DIR; chmod +x Miniconda3-latest-VERSION.sh; ./Miniconda3-latest-VERSION.sh; ```. and accept all suggestions.; Either reopen a new terminal or `source ~/.bashrc` on Linux/ `source ~/.bash_profile` on Mac.; The whole process takes just a couple of minutes. [bioconda]: https://bioconda.github.io/; [compiling igraph]: https://stackoverflow.com/q/29589696/247482; [create symbolic links]: https://docs.microsoft.com/en-us/windows/security/threat-protection/security-policy-settings/create-symbolic-links; [docker]: https://en.wikipedia.org/wiki/Docker_(software); [from pypi]: https://pypi.org/project/scanpy; [gcfntnu/scanpy]: https://hub.docker.com/r/gcfntnu/scanpy; [leiden]: https://leidenalg.readthedocs.io; [miniconda]: https://docs.conda.io/projects/miniconda/en/latest/; [on github]: https://github.com/scverse/scanpy; [igraph]: https://python.igraph.org/en/stable/; [unofficial binaries]: https://www.lfd.uci.edu/~gohlke/pythonlibs/; 

Instructions: 
1. Analyze the content and the attribute description.
2. Determine if the content accurately reflects the intended quality attribute in this context.
3. If it does, label it as `true_positive: true`; if not, mark it as a `true_positive: false`.
4. If the content consists only of logs with no other text, mark it as a `true_positive: false`. 
4. If the content partially consists of logs, focus on analyzing remaining text. 
5. Add `reasoning` why the content is a true or false positive.
",False,"The content provided discusses installation steps for packages like igraph and scanpy, including specific commands to use on different operating systems (MacOS and Windows). This involves instructions for installing software using package managers and compiling components when necessary. The focus is on ensuring that the required dependencies are installed correctly across different environments. While security is about safeguarding information, this content is more about installation procedures rather than directly addressing or discussing measures related to security in terms of confidentiality, integrity, or availability."
Security,"y the location of colorbar legend, or pass `None` to not show a colorbar {pr}`1821` {smaller}`A Schaar` {smaller}`I Virshup`; - Embedding plots now have a `dimensions` argument, which lets users select which dimensions of their embedding to plot and uses the same broadcasting rules as other arguments {pr}`1538` {smaller}`I Virshup`; - {func}`~scanpy.logging.print_versions` now uses `session_info` {pr}`2089` {smaller}`P Angerer` {smaller}`I Virshup`. ```{rubric} Ecosystem; ```. Multiple packages have been added to our ecosystem page, including:. - [decoupler](https://github.com/saezlab/decoupler-py) a for footprint analysis and pathway enrichement {pr}`2186` {smaller}`PB Mompel`; - [dandelion](https://github.com/zktuong/dandelion) for B-cell receptor analysis {pr}`1953` {smaller}`Z Tuong`; - [CIARA](https://github.com/ScialdoneLab/CIARA_python) a feature selection tools for identifying rare cell types {pr}`2175` {smaller}`M Stock`. ```{rubric} Bug fixes; ```. - Fixed finding variables with `use_raw=True` and `basis=None` in {func}`scanpy.pl.scatter` {pr}`2027` {smaller}`E Rice`; - Fixed {func}`scanpy.pp.scrublet` to address {issue}`1957` {smaller}`FlMai` and ensure raw counts are used for simulation; - Functions in {mod}`scanpy.datasets` no longer throw `OldFormatWarnings` when using `anndata` `0.8` {pr}`2096` {smaller}`I Virshup`; - Fixed use of {func}`scanpy.pp.neighbors` with `method='rapids'`: RAPIDS cuML no longer returns a squared Euclidean distance matrix, so we should not square-root the kNN distance matrix. {pr}`1828` {smaller}`M Zaslavsky`; - Removed `pytables` dependency by implementing `read_10x_h5` with `h5py` due to installation errors on Windows {pr}`2064`; - Fixed bug in {func}`scanpy.external.pp.hashsolo` where default value was set improperly {pr}`2190` {smaller}`B Reiz`; - Fixed bug in {func}`scanpy.pl.embedding` functions where an error could be raised when there were missing values and large numbers of categories {pr}`2187` {smaller}`I Virshup`; ",hash,MatchSource.DOCS,scverse,scanpy,1.10.2,https://github.com/scverse/scanpy/tree/1.10.2/docs/release-notes/1.9.0.md:3924,hashsolo,3924,docs/release-notes/1.9.0.md,https://scanpy.readthedocs.io,https://github.com/scverse/scanpy/tree/1.10.2/docs/release-notes/1.9.0.md,1,['hash'],['hashsolo'],"The system’s ability to safeguard information against unauthorized access, while permitting authorized access. Security emphasizes confidentiality, integrity, and availability, using tactics to detect, prevent, and respond to attacks.","
You are an expert in evaluating and categorizing quality attributes in software engineering. You possess the necessary skills to distinguish sentences that clearly relate to a given quality attribute from those that do not. 

Evaluate whether the content accurately aligns with its associated quality attribute, given the context provided. Your goal is to determine if the content makes sense in relation to the quality attribute description or if it is a false positive.

Data:

Quality Attribute: Security
Attribute Description: The system’s ability to safeguard information against unauthorized access, while permitting authorized access. Security emphasizes confidentiality, integrity, and availability, using tactics to detect, prevent, and respond to attacks.
Content: y the location of colorbar legend, or pass `None` to not show a colorbar {pr}`1821` {smaller}`A Schaar` {smaller}`I Virshup`; - Embedding plots now have a `dimensions` argument, which lets users select which dimensions of their embedding to plot and uses the same broadcasting rules as other arguments {pr}`1538` {smaller}`I Virshup`; - {func}`~scanpy.logging.print_versions` now uses `session_info` {pr}`2089` {smaller}`P Angerer` {smaller}`I Virshup`. ```{rubric} Ecosystem; ```. Multiple packages have been added to our ecosystem page, including:. - [decoupler](https://github.com/saezlab/decoupler-py) a for footprint analysis and pathway enrichement {pr}`2186` {smaller}`PB Mompel`; - [dandelion](https://github.com/zktuong/dandelion) for B-cell receptor analysis {pr}`1953` {smaller}`Z Tuong`; - [CIARA](https://github.com/ScialdoneLab/CIARA_python) a feature selection tools for identifying rare cell types {pr}`2175` {smaller}`M Stock`. ```{rubric} Bug fixes; ```. - Fixed finding variables with `use_raw=True` and `basis=None` in {func}`scanpy.pl.scatter` {pr}`2027` {smaller}`E Rice`; - Fixed {func}`scanpy.pp.scrublet` to address {issue}`1957` {smaller}`FlMai` and ensure raw counts are used for simulation; - Functions in {mod}`scanpy.datasets` no longer throw `OldFormatWarnings` when using `anndata` `0.8` {pr}`2096` {smaller}`I Virshup`; - Fixed use of {func}`scanpy.pp.neighbors` with `method='rapids'`: RAPIDS cuML no longer returns a squared Euclidean distance matrix, so we should not square-root the kNN distance matrix. {pr}`1828` {smaller}`M Zaslavsky`; - Removed `pytables` dependency by implementing `read_10x_h5` with `h5py` due to installation errors on Windows {pr}`2064`; - Fixed bug in {func}`scanpy.external.pp.hashsolo` where default value was set improperly {pr}`2190` {smaller}`B Reiz`; - Fixed bug in {func}`scanpy.pl.embedding` functions where an error could be raised when there were missing values and large numbers of categories {pr}`2187` {smaller}`I Virshup`; 

Instructions: 
1. Analyze the content and the attribute description.
2. Determine if the content accurately reflects the intended quality attribute in this context.
3. If it does, label it as `true_positive: true`; if not, mark it as a `true_positive: false`.
4. If the content consists only of logs with no other text, mark it as a `true_positive: false`. 
4. If the content partially consists of logs, focus on analyzing remaining text. 
5. Add `reasoning` why the content is a true or false positive.
",False,"The content provided seems to be part of a software release or update log, containing bug fixes and new package additions. While it discusses functional updates like adding new packages and fixing bugs, there's no mention of security measures, data protection, access control, or related concepts that would fall under the 'Security' quality attribute. Therefore, this content does not accurately reflect the intended Security quality attribute. It is more aligned with functional enhancements and maintenance rather than safeguarding information."
Testability," argument from pytest (e.g. `pytest -k test_plotting.py` or `pytest -k ""test_umap*""`; 2. Run the tests in parallel. If you install the pytest extension [pytest-xdist](https://github.com/pytest-dev/pytest-xdist) you can run tests in parallel with the `--numprocesses` argument to pytest (e.g. `pytest -n 8`). ### Miscellaneous tips. - A lot of warnings can be thrown while running the test suite. It's often easier to read the test results with them hidden via the `--disable-pytest-warnings` argument. ## Writing tests. You can refer to the [existing test suite](https://github.com/scverse/scanpy/tree/main/scanpy/tests) for examples.; If you haven't written tests before, Software Carpentry has an [in-depth guide](https://katyhuff.github.io/2016-07-11-scipy/testing/01-basics.html) on the topic. We highly recommend using [Test Driven Development](https://en.wikipedia.org/wiki/Test-driven_development) when contributing code.; This not only ensures you have tests written, it often makes implementation easier since you start out with a specification for your function. Consider parameterizing your tests using the `pytest.mark.parameterize` and `pytest.fixture` decorators.; Documentation on these can be found [here](https://docs.pytest.org/en/stable/fixture.html), but we'd also recommend searching our test suite for existing usage. ### What to test. If you're not sure what to tests about your function, some ideas include:. - Are there arguments which conflict with each other? Check that if they are both passed, the function throws an error (see `pytest.raises` [in the pytest docs](https://docs.pytest.org/en/stable/assert.html#assertions-about-expected-exceptions).; - Are there input values which should cause your function to error?; - Did you add a helpful error message that recommends better outputs? Check that that error message is actually thrown.; - Can you place bounds on the values returned by your function?; - Are there different input values which should generate equivale",test,MatchSource.DOCS,scverse,scanpy,1.10.2,https://github.com/scverse/scanpy/tree/1.10.2/docs/dev/testing.md:1619,tests,1619,docs/dev/testing.md,https://scanpy.readthedocs.io,https://github.com/scverse/scanpy/tree/1.10.2/docs/dev/testing.md,1,['test'],['tests'],"The ease of validating software functionality through testing, enabling fault detection. This includes controlling and observing the system’s state, reducing complexity, and facilitating the creation of test cases and oracles.","
You are an expert in evaluating and categorizing quality attributes in software engineering. You possess the necessary skills to distinguish sentences that clearly relate to a given quality attribute from those that do not. 

Evaluate whether the content accurately aligns with its associated quality attribute, given the context provided. Your goal is to determine if the content makes sense in relation to the quality attribute description or if it is a false positive.

Data:

Quality Attribute: Testability
Attribute Description: The ease of validating software functionality through testing, enabling fault detection. This includes controlling and observing the system’s state, reducing complexity, and facilitating the creation of test cases and oracles.
Content:  argument from pytest (e.g. `pytest -k test_plotting.py` or `pytest -k ""test_umap*""`; 2. Run the tests in parallel. If you install the pytest extension [pytest-xdist](https://github.com/pytest-dev/pytest-xdist) you can run tests in parallel with the `--numprocesses` argument to pytest (e.g. `pytest -n 8`). ### Miscellaneous tips. - A lot of warnings can be thrown while running the test suite. It's often easier to read the test results with them hidden via the `--disable-pytest-warnings` argument. ## Writing tests. You can refer to the [existing test suite](https://github.com/scverse/scanpy/tree/main/scanpy/tests) for examples.; If you haven't written tests before, Software Carpentry has an [in-depth guide](https://katyhuff.github.io/2016-07-11-scipy/testing/01-basics.html) on the topic. We highly recommend using [Test Driven Development](https://en.wikipedia.org/wiki/Test-driven_development) when contributing code.; This not only ensures you have tests written, it often makes implementation easier since you start out with a specification for your function. Consider parameterizing your tests using the `pytest.mark.parameterize` and `pytest.fixture` decorators.; Documentation on these can be found [here](https://docs.pytest.org/en/stable/fixture.html), but we'd also recommend searching our test suite for existing usage. ### What to test. If you're not sure what to tests about your function, some ideas include:. - Are there arguments which conflict with each other? Check that if they are both passed, the function throws an error (see `pytest.raises` [in the pytest docs](https://docs.pytest.org/en/stable/assert.html#assertions-about-expected-exceptions).; - Are there input values which should cause your function to error?; - Did you add a helpful error message that recommends better outputs? Check that that error message is actually thrown.; - Can you place bounds on the values returned by your function?; - Are there different input values which should generate equivale

Instructions: 
1. Analyze the content and the attribute description.
2. Determine if the content accurately reflects the intended quality attribute in this context.
3. If it does, label it as `true_positive: true`; if not, mark it as a `true_positive: false`.
4. If the content consists only of logs with no other text, mark it as a `true_positive: false`. 
4. If the content partially consists of logs, focus on analyzing remaining text. 
5. Add `reasoning` why the content is a true or false positive.
",True,"The provided content discusses pytest usage, including running tests in parallel with specific arguments and tips for writing tests, which directly relates to testability by enabling efficient testing and facilitating the creation of test cases. This aligns with the quality attribute of Testability."
Testability," bugfix release) or releases (in case of a major/minor release).; For bugfix releases, this should have `on-merge: backport to 0.<minor>.x`,; so the [meeseeksdev][] bot will create a backport PR. See {doc}`versioning` for more info.; - Clear out and close the milestone you just made a release for. After a *major* or *minor* release has been made:. - Tweet about it! Announce it on Zulip! Announce it on Discourse! Think about making a bot for this! Maybe actually do that?; - Create a new release notes file for the next minor release. This should only be added to the dev branch.; - Tag the development branch. If you just released `1.7.0`, this would be `1.8.0.dev0`.; - Create a new branch for this release series, like `1.7.x`. This should get a new release notes file. [meeseeksdev]: https://meeseeksbox.github.io. ## Debugging the build process. If you changed something about the build process (e.g. [Hatchling’s build configuration][hatch-build]),; or something about the package’s structure,; you might want to manually check if the build and upload process behaves as expected:. ```shell; # Clear out old distributions; rm -r dist. # Build source distribution and wheel both; python -m build. # Now check those build artifacts; twine check dist/*. # List the wheel archive’s contents; bsdtar -tf dist/*.whl. ```. You can also upload the package to <test.pypi.org> ([tutorial][testpypi tutorial]). [testpypi tutorial]: https://packaging.python.org/en/latest/tutorials/packaging-projects/#uploading-the-distribution-archives. ```; twine upload --repository testpypi dist/*; ```. The above approximates what the [publish workflow][] does automatically for us.; If you want to replicate the process more exactly, make sure you are careful,; and create a version tag before building (make sure you delete it after uploading to TestPyPI!). [hatch-build]: https://hatch.pypa.io/latest/config/build/; [publish workflow]: https://github.com/scverse/scanpy/tree/main/.github/workflows/publish.yml; ",test,MatchSource.DOCS,scverse,scanpy,1.10.2,https://github.com/scverse/scanpy/tree/1.10.2/docs/dev/release.md:2227,test,2227,docs/dev/release.md,https://scanpy.readthedocs.io,https://github.com/scverse/scanpy/tree/1.10.2/docs/dev/release.md,4,['test'],"['test', 'testpypi']","The ease of validating software functionality through testing, enabling fault detection. This includes controlling and observing the system’s state, reducing complexity, and facilitating the creation of test cases and oracles.","
You are an expert in evaluating and categorizing quality attributes in software engineering. You possess the necessary skills to distinguish sentences that clearly relate to a given quality attribute from those that do not. 

Evaluate whether the content accurately aligns with its associated quality attribute, given the context provided. Your goal is to determine if the content makes sense in relation to the quality attribute description or if it is a false positive.

Data:

Quality Attribute: Testability
Attribute Description: The ease of validating software functionality through testing, enabling fault detection. This includes controlling and observing the system’s state, reducing complexity, and facilitating the creation of test cases and oracles.
Content:  bugfix release) or releases (in case of a major/minor release).; For bugfix releases, this should have `on-merge: backport to 0.<minor>.x`,; so the [meeseeksdev][] bot will create a backport PR. See {doc}`versioning` for more info.; - Clear out and close the milestone you just made a release for. After a *major* or *minor* release has been made:. - Tweet about it! Announce it on Zulip! Announce it on Discourse! Think about making a bot for this! Maybe actually do that?; - Create a new release notes file for the next minor release. This should only be added to the dev branch.; - Tag the development branch. If you just released `1.7.0`, this would be `1.8.0.dev0`.; - Create a new branch for this release series, like `1.7.x`. This should get a new release notes file. [meeseeksdev]: https://meeseeksbox.github.io. ## Debugging the build process. If you changed something about the build process (e.g. [Hatchling’s build configuration][hatch-build]),; or something about the package’s structure,; you might want to manually check if the build and upload process behaves as expected:. ```shell; # Clear out old distributions; rm -r dist. # Build source distribution and wheel both; python -m build. # Now check those build artifacts; twine check dist/*. # List the wheel archive’s contents; bsdtar -tf dist/*.whl. ```. You can also upload the package to <test.pypi.org> ([tutorial][testpypi tutorial]). [testpypi tutorial]: https://packaging.python.org/en/latest/tutorials/packaging-projects/#uploading-the-distribution-archives. ```; twine upload --repository testpypi dist/*; ```. The above approximates what the [publish workflow][] does automatically for us.; If you want to replicate the process more exactly, make sure you are careful,; and create a version tag before building (make sure you delete it after uploading to TestPyPI!). [hatch-build]: https://hatch.pypa.io/latest/config/build/; [publish workflow]: https://github.com/scverse/scanpy/tree/main/.github/workflows/publish.yml; 

Instructions: 
1. Analyze the content and the attribute description.
2. Determine if the content accurately reflects the intended quality attribute in this context.
3. If it does, label it as `true_positive: true`; if not, mark it as a `true_positive: false`.
4. If the content consists only of logs with no other text, mark it as a `true_positive: false`. 
4. If the content partially consists of logs, focus on analyzing remaining text. 
5. Add `reasoning` why the content is a true or false positive.
",False,"The content here discusses the process of bugfix releases, including creating backports and versioning. While testability might relate to ensuring that bugs are caught during testing, this content seems more focused on release management and version control rather than directly enabling or facilitating testing itself. The steps mentioned involve tagging branches, creating new release notes, and uploading packages, which are aspects of software release and distribution. There's no direct mention of testing processes or techniques that would contribute to testability."
Testability," examples.; If you haven't written tests before, Software Carpentry has an [in-depth guide](https://katyhuff.github.io/2016-07-11-scipy/testing/01-basics.html) on the topic. We highly recommend using [Test Driven Development](https://en.wikipedia.org/wiki/Test-driven_development) when contributing code.; This not only ensures you have tests written, it often makes implementation easier since you start out with a specification for your function. Consider parameterizing your tests using the `pytest.mark.parameterize` and `pytest.fixture` decorators.; Documentation on these can be found [here](https://docs.pytest.org/en/stable/fixture.html), but we'd also recommend searching our test suite for existing usage. ### What to test. If you're not sure what to tests about your function, some ideas include:. - Are there arguments which conflict with each other? Check that if they are both passed, the function throws an error (see `pytest.raises` [in the pytest docs](https://docs.pytest.org/en/stable/assert.html#assertions-about-expected-exceptions).; - Are there input values which should cause your function to error?; - Did you add a helpful error message that recommends better outputs? Check that that error message is actually thrown.; - Can you place bounds on the values returned by your function?; - Are there different input values which should generate equivalent output (e.g. if an array is sparse or dense)?; - Do you have arguments which should have orthogonal effects on the output? Check that they are independent. For example, if there is a flag for extended output, the base output should remain the same either way.; - Are you optimizing a method? Check that it's results are the same as a gold standard implementation. ### Performance. It's more important that you're accurately testing the code works than it is that test suite runs quickly.; That said, it's nice when the test suite runs fast. You can check how long tests take to run by passing `--durations=0` argument to `",assert,MatchSource.DOCS,scverse,scanpy,1.10.2,https://github.com/scverse/scanpy/tree/1.10.2/docs/dev/testing.md:2286,assert,2286,docs/dev/testing.md,https://scanpy.readthedocs.io,https://github.com/scverse/scanpy/tree/1.10.2/docs/dev/testing.md,1,['assert'],['assert'],"The ease of validating software functionality through testing, enabling fault detection. This includes controlling and observing the system’s state, reducing complexity, and facilitating the creation of test cases and oracles.","
You are an expert in evaluating and categorizing quality attributes in software engineering. You possess the necessary skills to distinguish sentences that clearly relate to a given quality attribute from those that do not. 

Evaluate whether the content accurately aligns with its associated quality attribute, given the context provided. Your goal is to determine if the content makes sense in relation to the quality attribute description or if it is a false positive.

Data:

Quality Attribute: Testability
Attribute Description: The ease of validating software functionality through testing, enabling fault detection. This includes controlling and observing the system’s state, reducing complexity, and facilitating the creation of test cases and oracles.
Content:  examples.; If you haven't written tests before, Software Carpentry has an [in-depth guide](https://katyhuff.github.io/2016-07-11-scipy/testing/01-basics.html) on the topic. We highly recommend using [Test Driven Development](https://en.wikipedia.org/wiki/Test-driven_development) when contributing code.; This not only ensures you have tests written, it often makes implementation easier since you start out with a specification for your function. Consider parameterizing your tests using the `pytest.mark.parameterize` and `pytest.fixture` decorators.; Documentation on these can be found [here](https://docs.pytest.org/en/stable/fixture.html), but we'd also recommend searching our test suite for existing usage. ### What to test. If you're not sure what to tests about your function, some ideas include:. - Are there arguments which conflict with each other? Check that if they are both passed, the function throws an error (see `pytest.raises` [in the pytest docs](https://docs.pytest.org/en/stable/assert.html#assertions-about-expected-exceptions).; - Are there input values which should cause your function to error?; - Did you add a helpful error message that recommends better outputs? Check that that error message is actually thrown.; - Can you place bounds on the values returned by your function?; - Are there different input values which should generate equivalent output (e.g. if an array is sparse or dense)?; - Do you have arguments which should have orthogonal effects on the output? Check that they are independent. For example, if there is a flag for extended output, the base output should remain the same either way.; - Are you optimizing a method? Check that it's results are the same as a gold standard implementation. ### Performance. It's more important that you're accurately testing the code works than it is that test suite runs quickly.; That said, it's nice when the test suite runs fast. You can check how long tests take to run by passing `--durations=0` argument to `

Instructions: 
1. Analyze the content and the attribute description.
2. Determine if the content accurately reflects the intended quality attribute in this context.
3. If it does, label it as `true_positive: true`; if not, mark it as a `true_positive: false`.
4. If the content consists only of logs with no other text, mark it as a `true_positive: false`. 
4. If the content partially consists of logs, focus on analyzing remaining text. 
5. Add `reasoning` why the content is a true or false positive.
",True,"The content discusses writing tests and provides guidance on using pytest fixtures and test parameters. This is directly related to making software functionality easier to validate through testing, aligning with Testability."
Testability," fixes; ```. * Updated {func}`~scanpy.read_visium` such that it can read spaceranger 2.0 files {smaller}`L Lehner`; * Fix {func}`~scanpy.pp.normalize_total` for dask {pr}`2466` {smaller}`P Angerer`; * Fix setting `sc.settings.verbosity` in some cases {pr}`2605` {smaller}`P Angerer`; * Fix all remaining pandas warnings {pr}`2789` {smaller}`P Angerer`; * Fix some annoying plotting warnings around violin plots {pr}`2844` {smaller}`P Angerer`; * Scanpy now has a test job which tests against the minumum versions of the dependencies. In the process of implementing this, many bugs associated with using older versions of `pandas`, `anndata`, `numpy`, and `matplotlib` were fixed. {pr}`2816` {smaller}`I Virshup`; * Fix warnings caused by internal usage of `pandas.DataFrame.stack` with `pandas>=2.1` {pr}`2864`{smaller}`I Virshup`; * {func}`scanpy.get.aggregate` now always returns {class}`numpy.ndarray` {pr}`2893` {smaller}`S Dicks`; * Removes self from array of neighbors for `use_approx_neighbors = True` in {func}`~scanpy.pp.scrublet` {pr}`2896`{smaller}`S Dicks`; * Compatibility with scipy 1.13 {pr}`2943` {smaller}`I Virshup`; * Fix use of {func}`~scanpy.tl.dendrogram` on highly correlated low precision data {pr}`2928` {smaller}`P Angerer`; * Fix pytest deprecation warning {pr}`2879` {smaller}`P Angerer`. ```{rubric} Development; ```. * Scanpy is now tested against python 3.12 {pr}`2863` {smaller}`ivirshup`; * Fix testing package build {pr}`2468` {smaller}`P Angerer`. ```{rubric} Deprecations; ```. * Dropped support for Python 3.8. [More details here](https://numpy.org/neps/nep-0029-deprecation_policy.html). {pr}`2695` {smaller}`P Angerer`; * Deprecated specifying large numbers of function parameters by position as opposed to by name/keyword in all public APIs.; e.g. prefer `sc.tl.umap(adata, min_dist=0.1, spread=0.8)` over `sc.tl.umap(adata, 0.1, 0.8)` {pr}`2702` {smaller}`P Angerer`; * Dropped support for `umap<0.5` for performance reasons. {pr}`2870` {smaller}`P Angerer`; ",test,MatchSource.DOCS,scverse,scanpy,1.10.2,https://github.com/scverse/scanpy/tree/1.10.2/docs/release-notes/1.10.0.md:6195,tested,6195,docs/release-notes/1.10.0.md,https://scanpy.readthedocs.io,https://github.com/scverse/scanpy/tree/1.10.2/docs/release-notes/1.10.0.md,2,['test'],"['tested', 'testing']","The ease of validating software functionality through testing, enabling fault detection. This includes controlling and observing the system’s state, reducing complexity, and facilitating the creation of test cases and oracles.","
You are an expert in evaluating and categorizing quality attributes in software engineering. You possess the necessary skills to distinguish sentences that clearly relate to a given quality attribute from those that do not. 

Evaluate whether the content accurately aligns with its associated quality attribute, given the context provided. Your goal is to determine if the content makes sense in relation to the quality attribute description or if it is a false positive.

Data:

Quality Attribute: Testability
Attribute Description: The ease of validating software functionality through testing, enabling fault detection. This includes controlling and observing the system’s state, reducing complexity, and facilitating the creation of test cases and oracles.
Content:  fixes; ```. * Updated {func}`~scanpy.read_visium` such that it can read spaceranger 2.0 files {smaller}`L Lehner`; * Fix {func}`~scanpy.pp.normalize_total` for dask {pr}`2466` {smaller}`P Angerer`; * Fix setting `sc.settings.verbosity` in some cases {pr}`2605` {smaller}`P Angerer`; * Fix all remaining pandas warnings {pr}`2789` {smaller}`P Angerer`; * Fix some annoying plotting warnings around violin plots {pr}`2844` {smaller}`P Angerer`; * Scanpy now has a test job which tests against the minumum versions of the dependencies. In the process of implementing this, many bugs associated with using older versions of `pandas`, `anndata`, `numpy`, and `matplotlib` were fixed. {pr}`2816` {smaller}`I Virshup`; * Fix warnings caused by internal usage of `pandas.DataFrame.stack` with `pandas>=2.1` {pr}`2864`{smaller}`I Virshup`; * {func}`scanpy.get.aggregate` now always returns {class}`numpy.ndarray` {pr}`2893` {smaller}`S Dicks`; * Removes self from array of neighbors for `use_approx_neighbors = True` in {func}`~scanpy.pp.scrublet` {pr}`2896`{smaller}`S Dicks`; * Compatibility with scipy 1.13 {pr}`2943` {smaller}`I Virshup`; * Fix use of {func}`~scanpy.tl.dendrogram` on highly correlated low precision data {pr}`2928` {smaller}`P Angerer`; * Fix pytest deprecation warning {pr}`2879` {smaller}`P Angerer`. ```{rubric} Development; ```. * Scanpy is now tested against python 3.12 {pr}`2863` {smaller}`ivirshup`; * Fix testing package build {pr}`2468` {smaller}`P Angerer`. ```{rubric} Deprecations; ```. * Dropped support for Python 3.8. [More details here](https://numpy.org/neps/nep-0029-deprecation_policy.html). {pr}`2695` {smaller}`P Angerer`; * Deprecated specifying large numbers of function parameters by position as opposed to by name/keyword in all public APIs.; e.g. prefer `sc.tl.umap(adata, min_dist=0.1, spread=0.8)` over `sc.tl.umap(adata, 0.1, 0.8)` {pr}`2702` {smaller}`P Angerer`; * Dropped support for `umap<0.5` for performance reasons. {pr}`2870` {smaller}`P Angerer`; 

Instructions: 
1. Analyze the content and the attribute description.
2. Determine if the content accurately reflects the intended quality attribute in this context.
3. If it does, label it as `true_positive: true`; if not, mark it as a `true_positive: false`.
4. If the content consists only of logs with no other text, mark it as a `true_positive: false`. 
4. If the content partially consists of logs, focus on analyzing remaining text. 
5. Add `reasoning` why the content is a true or false positive.
",True,"The provided content consists of various software updates and fixes in scanpy, including changes to functions, deprecated features, and new test implementations. These are all related to improving the quality attributes such as maintainability, reliability, and testability. By addressing bugs and deprecations, the code becomes easier to test and validate, thus enhancing testability."
Testability," occurances of `group_by` with `groupby` (consistency with; `pandas`); - it is worth checking out the notebook examples to see changes, e.g.; the [seurat] example.; - upgrading scikit-learn from 0.18 to 0.19 changed the implementation of PCA,; some results might therefore look slightly different; ```. ```{rubric} Further updates; ```. - UMAP {cite:p}`McInnes2018` can serve as a first visualization of the data just as tSNE,; in contrast to tSNE, UMAP directly embeds the single-cell graph and is faster;; UMAP is also used for measuring connectivities and computing neighbors,; see {func}`~scanpy.pp.neighbors` {smaller}`A Wolf`; - graph abstraction: AGA is renamed to [PAGA](https://github.com/theislab/paga): {func}`~scanpy.tl.paga`; now,; it only measures connectivities between partitions of the single-cell graph,; pseudotime and clustering need to be computed separately via; {func}`~scanpy.tl.louvain` and {func}`~scanpy.tl.dpt`, the; connectivity measure has been improved {smaller}`A Wolf`; - logistic regression for finding marker genes; {func}`~scanpy.tl.rank_genes_groups` with parameter `method='logreg'` {smaller}`A Wolf`; - {func}`~scanpy.tl.louvain` provides a better implementation for; reclustering via `restrict_to` {smaller}`A Wolf`; - scanpy no longer modifies rcParams upon import, call; `settings.set_figure_params` to set the 'scanpy style' {smaller}`A Wolf`; - default cache directory is `./cache/`, set `settings.cachedir` to change; this; nested directories in this are avoided {smaller}`A Wolf`; - show edges in scatter plots based on graph visualization; {func}`~scanpy.tl.draw_graph` and {func}`~scanpy.tl.umap` by passing `edges=True` {smaller}`A Wolf`; - {func}`~scanpy.pp.downsample_counts` for downsampling counts {smaller}`MD Luecken`; - default `'louvain_groups'` are called `'louvain'` {smaller}`A Wolf`; - `'X_diffmap'` contains the zero component, plotting remains unchanged {smaller}`A Wolf`. [14min]: https://github.com/scverse/scanpy_usage/blob/master/170",log,MatchSource.DOCS,scverse,scanpy,1.10.2,https://github.com/scverse/scanpy/tree/1.10.2/docs/release-notes/1.0.0.md:2393,logistic,2393,docs/release-notes/1.0.0.md,https://scanpy.readthedocs.io,https://github.com/scverse/scanpy/tree/1.10.2/docs/release-notes/1.0.0.md,1,['log'],['logistic'],"The ease of validating software functionality through testing, enabling fault detection. This includes controlling and observing the system’s state, reducing complexity, and facilitating the creation of test cases and oracles.","
You are an expert in evaluating and categorizing quality attributes in software engineering. You possess the necessary skills to distinguish sentences that clearly relate to a given quality attribute from those that do not. 

Evaluate whether the content accurately aligns with its associated quality attribute, given the context provided. Your goal is to determine if the content makes sense in relation to the quality attribute description or if it is a false positive.

Data:

Quality Attribute: Testability
Attribute Description: The ease of validating software functionality through testing, enabling fault detection. This includes controlling and observing the system’s state, reducing complexity, and facilitating the creation of test cases and oracles.
Content:  occurances of `group_by` with `groupby` (consistency with; `pandas`); - it is worth checking out the notebook examples to see changes, e.g.; the [seurat] example.; - upgrading scikit-learn from 0.18 to 0.19 changed the implementation of PCA,; some results might therefore look slightly different; ```. ```{rubric} Further updates; ```. - UMAP {cite:p}`McInnes2018` can serve as a first visualization of the data just as tSNE,; in contrast to tSNE, UMAP directly embeds the single-cell graph and is faster;; UMAP is also used for measuring connectivities and computing neighbors,; see {func}`~scanpy.pp.neighbors` {smaller}`A Wolf`; - graph abstraction: AGA is renamed to [PAGA](https://github.com/theislab/paga): {func}`~scanpy.tl.paga`; now,; it only measures connectivities between partitions of the single-cell graph,; pseudotime and clustering need to be computed separately via; {func}`~scanpy.tl.louvain` and {func}`~scanpy.tl.dpt`, the; connectivity measure has been improved {smaller}`A Wolf`; - logistic regression for finding marker genes; {func}`~scanpy.tl.rank_genes_groups` with parameter `method='logreg'` {smaller}`A Wolf`; - {func}`~scanpy.tl.louvain` provides a better implementation for; reclustering via `restrict_to` {smaller}`A Wolf`; - scanpy no longer modifies rcParams upon import, call; `settings.set_figure_params` to set the 'scanpy style' {smaller}`A Wolf`; - default cache directory is `./cache/`, set `settings.cachedir` to change; this; nested directories in this are avoided {smaller}`A Wolf`; - show edges in scatter plots based on graph visualization; {func}`~scanpy.tl.draw_graph` and {func}`~scanpy.tl.umap` by passing `edges=True` {smaller}`A Wolf`; - {func}`~scanpy.pp.downsample_counts` for downsampling counts {smaller}`MD Luecken`; - default `'louvain_groups'` are called `'louvain'` {smaller}`A Wolf`; - `'X_diffmap'` contains the zero component, plotting remains unchanged {smaller}`A Wolf`. [14min]: https://github.com/scverse/scanpy_usage/blob/master/170

Instructions: 
1. Analyze the content and the attribute description.
2. Determine if the content accurately reflects the intended quality attribute in this context.
3. If it does, label it as `true_positive: true`; if not, mark it as a `true_positive: false`.
4. If the content consists only of logs with no other text, mark it as a `true_positive: false`. 
4. If the content partially consists of logs, focus on analyzing remaining text. 
5. Add `reasoning` why the content is a true or false positive.
",True,"The content provided discusses updates and features in scanpy, including changes like PCA implementation upgrades and new tools such as UMAP for data visualization. These updates enhance the functionality and usability of the software, indirectly contributing to testability by providing better tools for testing and validation. The mention of test cases and oracles aligns with the attribute's focus on facilitating the creation of such tools. Therefore, this content accurately reflects the quality attribute of Testability."
Testability," suite.; Implementations may change, but the only way we can know the code is working before making a release is the test suite. ## Running the tests. We use [pytest](https://docs.pytest.org/en/stable/) to test scanpy.; To run the tests first make sure you have the required dependencies (`pip install -e "".[test,dev]""`), then run `pytest` from the root of the repository. It can take a while to run the whole test suite. There are a few ways to cut down on this while working on a PR:. 1. Only run a subset of the tests. This can be done with the `-k` argument from pytest (e.g. `pytest -k test_plotting.py` or `pytest -k ""test_umap*""`; 2. Run the tests in parallel. If you install the pytest extension [pytest-xdist](https://github.com/pytest-dev/pytest-xdist) you can run tests in parallel with the `--numprocesses` argument to pytest (e.g. `pytest -n 8`). ### Miscellaneous tips. - A lot of warnings can be thrown while running the test suite. It's often easier to read the test results with them hidden via the `--disable-pytest-warnings` argument. ## Writing tests. You can refer to the [existing test suite](https://github.com/scverse/scanpy/tree/main/scanpy/tests) for examples.; If you haven't written tests before, Software Carpentry has an [in-depth guide](https://katyhuff.github.io/2016-07-11-scipy/testing/01-basics.html) on the topic. We highly recommend using [Test Driven Development](https://en.wikipedia.org/wiki/Test-driven_development) when contributing code.; This not only ensures you have tests written, it often makes implementation easier since you start out with a specification for your function. Consider parameterizing your tests using the `pytest.mark.parameterize` and `pytest.fixture` decorators.; Documentation on these can be found [here](https://docs.pytest.org/en/stable/fixture.html), but we'd also recommend searching our test suite for existing usage. ### What to test. If you're not sure what to tests about your function, some ideas include:. - Are there arg",test,MatchSource.DOCS,scverse,scanpy,1.10.2,https://github.com/scverse/scanpy/tree/1.10.2/docs/dev/testing.md:1084,test,1084,docs/dev/testing.md,https://scanpy.readthedocs.io,https://github.com/scverse/scanpy/tree/1.10.2/docs/dev/testing.md,1,['test'],['test'],"The ease of validating software functionality through testing, enabling fault detection. This includes controlling and observing the system’s state, reducing complexity, and facilitating the creation of test cases and oracles.","
You are an expert in evaluating and categorizing quality attributes in software engineering. You possess the necessary skills to distinguish sentences that clearly relate to a given quality attribute from those that do not. 

Evaluate whether the content accurately aligns with its associated quality attribute, given the context provided. Your goal is to determine if the content makes sense in relation to the quality attribute description or if it is a false positive.

Data:

Quality Attribute: Testability
Attribute Description: The ease of validating software functionality through testing, enabling fault detection. This includes controlling and observing the system’s state, reducing complexity, and facilitating the creation of test cases and oracles.
Content:  suite.; Implementations may change, but the only way we can know the code is working before making a release is the test suite. ## Running the tests. We use [pytest](https://docs.pytest.org/en/stable/) to test scanpy.; To run the tests first make sure you have the required dependencies (`pip install -e "".[test,dev]""`), then run `pytest` from the root of the repository. It can take a while to run the whole test suite. There are a few ways to cut down on this while working on a PR:. 1. Only run a subset of the tests. This can be done with the `-k` argument from pytest (e.g. `pytest -k test_plotting.py` or `pytest -k ""test_umap*""`; 2. Run the tests in parallel. If you install the pytest extension [pytest-xdist](https://github.com/pytest-dev/pytest-xdist) you can run tests in parallel with the `--numprocesses` argument to pytest (e.g. `pytest -n 8`). ### Miscellaneous tips. - A lot of warnings can be thrown while running the test suite. It's often easier to read the test results with them hidden via the `--disable-pytest-warnings` argument. ## Writing tests. You can refer to the [existing test suite](https://github.com/scverse/scanpy/tree/main/scanpy/tests) for examples.; If you haven't written tests before, Software Carpentry has an [in-depth guide](https://katyhuff.github.io/2016-07-11-scipy/testing/01-basics.html) on the topic. We highly recommend using [Test Driven Development](https://en.wikipedia.org/wiki/Test-driven_development) when contributing code.; This not only ensures you have tests written, it often makes implementation easier since you start out with a specification for your function. Consider parameterizing your tests using the `pytest.mark.parameterize` and `pytest.fixture` decorators.; Documentation on these can be found [here](https://docs.pytest.org/en/stable/fixture.html), but we'd also recommend searching our test suite for existing usage. ### What to test. If you're not sure what to tests about your function, some ideas include:. - Are there arg

Instructions: 
1. Analyze the content and the attribute description.
2. Determine if the content accurately reflects the intended quality attribute in this context.
3. If it does, label it as `true_positive: true`; if not, mark it as a `true_positive: false`.
4. If the content consists only of logs with no other text, mark it as a `true_positive: false`. 
4. If the content partially consists of logs, focus on analyzing remaining text. 
5. Add `reasoning` why the content is a true or false positive.
",True,"The content discusses testing practices, including the use of pytest and strategies for running tests efficiently. This aligns with Testability, as it involves making software easier to test through structured testing frameworks and efficient execution."
Testability,"# CI. ## Plotting tests. A frequent frustration in testing is the reproducibility of the plots and `matplotlib`'s behaviour in different environments.; We have some tooling to help with this. ### Viewing plots from failed tests on Azure pipelines. The fixtures `check_same_image` and `image_comparer` upload plots from failing tests so you can view them from the azure pipelines test viewer.; To find these, navigate to the tests tab for your build. ```{image} ../_static/img/ci_plot-view_tests-tab.png; :width: 750px; ```. Select your failing test. ```{image} ../_static/img/ci_plot-view_select-test.png; :width: 750px; ```. And open the attachments tab. ```{image} ../_static/img/ci_plot-view_attachment-tab.png; :width: 750px; ```. From here you can view and download the images which were compared, as well as a diff between them. ### Misc. {func}`matplotlib.testing.setup` tries to establish a consistent environment for creating plots. Make sure it's active!; ",test,MatchSource.DOCS,scverse,scanpy,1.10.2,https://github.com/scverse/scanpy/tree/1.10.2/docs/dev/ci.md:18,tests,18,docs/dev/ci.md,https://scanpy.readthedocs.io,https://github.com/scverse/scanpy/tree/1.10.2/docs/dev/ci.md,9,['test'],"['test', 'testing', 'tests']","The ease of validating software functionality through testing, enabling fault detection. This includes controlling and observing the system’s state, reducing complexity, and facilitating the creation of test cases and oracles.","
You are an expert in evaluating and categorizing quality attributes in software engineering. You possess the necessary skills to distinguish sentences that clearly relate to a given quality attribute from those that do not. 

Evaluate whether the content accurately aligns with its associated quality attribute, given the context provided. Your goal is to determine if the content makes sense in relation to the quality attribute description or if it is a false positive.

Data:

Quality Attribute: Testability
Attribute Description: The ease of validating software functionality through testing, enabling fault detection. This includes controlling and observing the system’s state, reducing complexity, and facilitating the creation of test cases and oracles.
Content: # CI. ## Plotting tests. A frequent frustration in testing is the reproducibility of the plots and `matplotlib`'s behaviour in different environments.; We have some tooling to help with this. ### Viewing plots from failed tests on Azure pipelines. The fixtures `check_same_image` and `image_comparer` upload plots from failing tests so you can view them from the azure pipelines test viewer.; To find these, navigate to the tests tab for your build. ```{image} ../_static/img/ci_plot-view_tests-tab.png; :width: 750px; ```. Select your failing test. ```{image} ../_static/img/ci_plot-view_select-test.png; :width: 750px; ```. And open the attachments tab. ```{image} ../_static/img/ci_plot-view_attachment-tab.png; :width: 750px; ```. From here you can view and download the images which were compared, as well as a diff between them. ### Misc. {func}`matplotlib.testing.setup` tries to establish a consistent environment for creating plots. Make sure it's active!; 

Instructions: 
1. Analyze the content and the attribute description.
2. Determine if the content accurately reflects the intended quality attribute in this context.
3. If it does, label it as `true_positive: true`; if not, mark it as a `true_positive: false`.
4. If the content consists only of logs with no other text, mark it as a `true_positive: false`. 
4. If the content partially consists of logs, focus on analyzing remaining text. 
5. Add `reasoning` why the content is a true or false positive.
",True,"The content discusses how to view test plots from failed tests in Azure pipelines, which involves using tools like `check_same_image` and `image_comparer`. This helps in verifying the consistency of results across different environments by comparing images and finding diffs. The use of fixtures and navigation through pipeline views supports testability by making it easier to observe and control the system's behavior during testing."
Testability,"# Contributing code. ## Development workflow. 1. {ref}`Fork the Scanpy repository <forking-and-cloning>` to your own GitHub account; 2. Create a {ref}`development environment <dev-environments>`; 3. {ref}`Create a new branch <creating-a-branch>` for your PR; 4. Add your feature or bugfix to the codebase; 5. {ref}`Make sure all tests are passing <tests>`; 6. {ref}`Build and visually check any changed documentation <building-the-docs>`; 7. {ref}`Open a PR back to the main repository <open-a-pr>`. ## Code style. New code should follow; [Black](https://black.readthedocs.io/en/stable/the_black_code_style.html); and; [flake8](https://flake8.pycqa.org).; We ignore a couple of flake8 checks which are documented in the .flake8 file in the root of this repository.; To learn how to ignore checks per line please read; [flake8 violations](https://flake8.pycqa.org/en/latest/user/violations.html).; Additionally, we use Scanpy’s; [EditorConfig](https://github.com/scverse/scanpy/blob/main/.editorconfig),; so using an editor/IDE with support for both is helpful.; ",test,MatchSource.DOCS,scverse,scanpy,1.10.2,https://github.com/scverse/scanpy/tree/1.10.2/docs/dev/code.md:329,tests,329,docs/dev/code.md,https://scanpy.readthedocs.io,https://github.com/scverse/scanpy/tree/1.10.2/docs/dev/code.md,2,['test'],['tests'],"The ease of validating software functionality through testing, enabling fault detection. This includes controlling and observing the system’s state, reducing complexity, and facilitating the creation of test cases and oracles.","
You are an expert in evaluating and categorizing quality attributes in software engineering. You possess the necessary skills to distinguish sentences that clearly relate to a given quality attribute from those that do not. 

Evaluate whether the content accurately aligns with its associated quality attribute, given the context provided. Your goal is to determine if the content makes sense in relation to the quality attribute description or if it is a false positive.

Data:

Quality Attribute: Testability
Attribute Description: The ease of validating software functionality through testing, enabling fault detection. This includes controlling and observing the system’s state, reducing complexity, and facilitating the creation of test cases and oracles.
Content: # Contributing code. ## Development workflow. 1. {ref}`Fork the Scanpy repository <forking-and-cloning>` to your own GitHub account; 2. Create a {ref}`development environment <dev-environments>`; 3. {ref}`Create a new branch <creating-a-branch>` for your PR; 4. Add your feature or bugfix to the codebase; 5. {ref}`Make sure all tests are passing <tests>`; 6. {ref}`Build and visually check any changed documentation <building-the-docs>`; 7. {ref}`Open a PR back to the main repository <open-a-pr>`. ## Code style. New code should follow; [Black](https://black.readthedocs.io/en/stable/the_black_code_style.html); and; [flake8](https://flake8.pycqa.org).; We ignore a couple of flake8 checks which are documented in the .flake8 file in the root of this repository.; To learn how to ignore checks per line please read; [flake8 violations](https://flake8.pycqa.org/en/latest/user/violations.html).; Additionally, we use Scanpy’s; [EditorConfig](https://github.com/scverse/scanpy/blob/main/.editorconfig),; so using an editor/IDE with support for both is helpful.; 

Instructions: 
1. Analyze the content and the attribute description.
2. Determine if the content accurately reflects the intended quality attribute in this context.
3. If it does, label it as `true_positive: true`; if not, mark it as a `true_positive: false`.
4. If the content consists only of logs with no other text, mark it as a `true_positive: false`. 
4. If the content partially consists of logs, focus on analyzing remaining text. 
5. Add `reasoning` why the content is a true or false positive.
",False,"The content provided discusses development workflow steps such as forking repositories, creating environments, and opening PRs. It also mentions code style guidelines like Black and Flake8, along with Scanpy's EditorConfig. While these are related to software development practices, the attribute in question is Testability, which concerns the ability to test and validate software functionality. The provided content does not directly address testing processes or methods but rather the coding and submission workflow. Therefore, it does not align well with the concept of Testability. Hence, it's considered a false positive."
Testability,"# For each ""variable = "", there must be a right hand side:; # either an empty string or a python-style logical expression; # involving variable names, ""or"", ""and"", ""("", "")"".; # The order of equations matters!; #; # modelType = hill; # invTimeStep = 0.1; #; # boolean update rules:; 0 = 0 and not 1; 1 = 1 and not 0; # coupling list:; 0 0 1.0; 0 1 -1.0; 1 1 1.0; 1 0 -1.0; ",log,MatchSource.DOCS,scverse,scanpy,1.10.2,https://github.com/scverse/scanpy/tree/1.10.2/src/scanpy/sim_models/toggleswitch.txt:103,logical,103,src/scanpy/sim_models/toggleswitch.txt,https://scanpy.readthedocs.io,https://github.com/scverse/scanpy/tree/1.10.2/src/scanpy/sim_models/toggleswitch.txt,1,['log'],['logical'],"The ease of validating software functionality through testing, enabling fault detection. This includes controlling and observing the system’s state, reducing complexity, and facilitating the creation of test cases and oracles.","
You are an expert in evaluating and categorizing quality attributes in software engineering. You possess the necessary skills to distinguish sentences that clearly relate to a given quality attribute from those that do not. 

Evaluate whether the content accurately aligns with its associated quality attribute, given the context provided. Your goal is to determine if the content makes sense in relation to the quality attribute description or if it is a false positive.

Data:

Quality Attribute: Testability
Attribute Description: The ease of validating software functionality through testing, enabling fault detection. This includes controlling and observing the system’s state, reducing complexity, and facilitating the creation of test cases and oracles.
Content: # For each ""variable = "", there must be a right hand side:; # either an empty string or a python-style logical expression; # involving variable names, ""or"", ""and"", ""("", "")"".; # The order of equations matters!; #; # modelType = hill; # invTimeStep = 0.1; #; # boolean update rules:; 0 = 0 and not 1; 1 = 1 and not 0; # coupling list:; 0 0 1.0; 0 1 -1.0; 1 1 1.0; 1 0 -1.0; 

Instructions: 
1. Analyze the content and the attribute description.
2. Determine if the content accurately reflects the intended quality attribute in this context.
3. If it does, label it as `true_positive: true`; if not, mark it as a `true_positive: false`.
4. If the content consists only of logs with no other text, mark it as a `true_positive: false`. 
4. If the content partially consists of logs, focus on analyzing remaining text. 
5. Add `reasoning` why the content is a true or false positive.
",True,"The content provided involves configurations for a model such as variable assignments and rules, which relates to testability through controlling system states and creating test cases."
Testability,"# Installation. ## Anaconda. If you do not have a working installation of Python 3.6 (or later), consider; installing [Miniconda] (see [Installing Miniconda]). Then run:. ```shell; conda install -c conda-forge scanpy python-igraph leidenalg; ```. Pull Scanpy from [PyPI](https://pypi.org/project/scanpy) (consider using `pip3` to access Python 3):. ```shell; pip install scanpy; ```. ## PyPI only. If you prefer to exclusively use PyPI run:. ```shell; pip install 'scanpy[leiden]'; ```. The extra `[leiden]` installs two packages that are needed for popular; parts of scanpy but aren't requirements: [igraph] {cite:p}`Csardi2006` and [leiden] {cite:p}`Traag2019`. (dev-install-instructions)=. ## Development Version. To work with the latest version [on GitHub]: clone the repository and `cd` into its root directory. ```shell; gh repo clone scverse/scanpy; cd scanpy; ```. If you are using `pip>=21.3`, an editable install can be made:. ```shell; pip install -e '.[dev,test]'; ```. If you want to let [conda] handle the installations of dependencies, do:. ```shell; pipx install beni; beni pyproject.toml > environment.yml; conda env create -f environment.yml; conda activate scanpy; pip install -e '.[dev,doc,test]'; ```. For instructions on how to work with the code, see the {ref}`contribution guide <contribution-guide>`. ## Docker. If you're using [Docker], you can use e.g. the image [gcfntnu/scanpy] from Docker Hub. ## Troubleshooting. If you get a `Permission denied` error, never use `sudo pip`. Instead, use virtual environments or:. ```shell; pip install --user scanpy; ```. **On MacOS**, if **not** using `conda`, you might need to install the C core of igraph via homebrew first. - `brew install igraph`. - If igraph still fails to install, see the question on [compiling igraph].; Alternatively consider installing gcc via `brew install gcc --without-multilib`; and exporting the required variables:. ```shell; export CC=""/usr/local/Cellar/gcc/X.x.x/bin/gcc-X""; export CXX=""/usr/local/C",test,MatchSource.DOCS,scverse,scanpy,1.10.2,https://github.com/scverse/scanpy/tree/1.10.2/docs/installation.md:969,test,969,docs/installation.md,https://scanpy.readthedocs.io,https://github.com/scverse/scanpy/tree/1.10.2/docs/installation.md,1,['test'],['test'],"The ease of validating software functionality through testing, enabling fault detection. This includes controlling and observing the system’s state, reducing complexity, and facilitating the creation of test cases and oracles.","
You are an expert in evaluating and categorizing quality attributes in software engineering. You possess the necessary skills to distinguish sentences that clearly relate to a given quality attribute from those that do not. 

Evaluate whether the content accurately aligns with its associated quality attribute, given the context provided. Your goal is to determine if the content makes sense in relation to the quality attribute description or if it is a false positive.

Data:

Quality Attribute: Testability
Attribute Description: The ease of validating software functionality through testing, enabling fault detection. This includes controlling and observing the system’s state, reducing complexity, and facilitating the creation of test cases and oracles.
Content: # Installation. ## Anaconda. If you do not have a working installation of Python 3.6 (or later), consider; installing [Miniconda] (see [Installing Miniconda]). Then run:. ```shell; conda install -c conda-forge scanpy python-igraph leidenalg; ```. Pull Scanpy from [PyPI](https://pypi.org/project/scanpy) (consider using `pip3` to access Python 3):. ```shell; pip install scanpy; ```. ## PyPI only. If you prefer to exclusively use PyPI run:. ```shell; pip install 'scanpy[leiden]'; ```. The extra `[leiden]` installs two packages that are needed for popular; parts of scanpy but aren't requirements: [igraph] {cite:p}`Csardi2006` and [leiden] {cite:p}`Traag2019`. (dev-install-instructions)=. ## Development Version. To work with the latest version [on GitHub]: clone the repository and `cd` into its root directory. ```shell; gh repo clone scverse/scanpy; cd scanpy; ```. If you are using `pip>=21.3`, an editable install can be made:. ```shell; pip install -e '.[dev,test]'; ```. If you want to let [conda] handle the installations of dependencies, do:. ```shell; pipx install beni; beni pyproject.toml > environment.yml; conda env create -f environment.yml; conda activate scanpy; pip install -e '.[dev,doc,test]'; ```. For instructions on how to work with the code, see the {ref}`contribution guide <contribution-guide>`. ## Docker. If you're using [Docker], you can use e.g. the image [gcfntnu/scanpy] from Docker Hub. ## Troubleshooting. If you get a `Permission denied` error, never use `sudo pip`. Instead, use virtual environments or:. ```shell; pip install --user scanpy; ```. **On MacOS**, if **not** using `conda`, you might need to install the C core of igraph via homebrew first. - `brew install igraph`. - If igraph still fails to install, see the question on [compiling igraph].; Alternatively consider installing gcc via `brew install gcc --without-multilib`; and exporting the required variables:. ```shell; export CC=""/usr/local/Cellar/gcc/X.x.x/bin/gcc-X""; export CXX=""/usr/local/C

Instructions: 
1. Analyze the content and the attribute description.
2. Determine if the content accurately reflects the intended quality attribute in this context.
3. If it does, label it as `true_positive: true`; if not, mark it as a `true_positive: false`.
4. If the content consists only of logs with no other text, mark it as a `true_positive: false`. 
4. If the content partially consists of logs, focus on analyzing remaining text. 
5. Add `reasoning` why the content is a true or false positive.
",True,"The content provided discusses installation methods for a software package called scanpy, including using pip and conda, as well as troubleshooting common issues such as installing dependencies like igraph. It also covers how to clone repositories, use editable installs, and mentions Docker usage. This is all related to setting up the development environment and ensuring that the software can be installed and tested correctly. Testability refers to the ease of validating functionality through testing, which includes proper installation and setup steps so that tests can be run effectively. The content does not directly discuss testing itself but rather the prerequisites for testing. However, without proper installation and dependency management, testability would be impaired. Therefore, the content indirectly supports testability by ensuring the software is installable and set up correctly."
Testability,# Scanpy Benchmarks. This directory contains code for benchmarking Scanpy using [asv][]. The functionality is checked using the [`benchmark.yml`][] workflow.; Benchmarks are run using the [benchmark bot][]. [asv]: https://asv.readthedocs.io/; [`benchmark.yml`]: ../.github/workflows/benchmark.yml; [benchmark bot]: https://github.com/apps/scverse-benchmark; ,benchmark,MatchSource.DOCS,scverse,scanpy,1.10.2,https://github.com/scverse/scanpy/tree/1.10.2/benchmarks/README.md:54,benchmarking,54,benchmarks/README.md,https://scanpy.readthedocs.io,https://github.com/scverse/scanpy/tree/1.10.2/benchmarks/README.md,7,['benchmark'],"['benchmark', 'benchmarking']","The ease of validating software functionality through testing, enabling fault detection. This includes controlling and observing the system’s state, reducing complexity, and facilitating the creation of test cases and oracles.","
You are an expert in evaluating and categorizing quality attributes in software engineering. You possess the necessary skills to distinguish sentences that clearly relate to a given quality attribute from those that do not. 

Evaluate whether the content accurately aligns with its associated quality attribute, given the context provided. Your goal is to determine if the content makes sense in relation to the quality attribute description or if it is a false positive.

Data:

Quality Attribute: Testability
Attribute Description: The ease of validating software functionality through testing, enabling fault detection. This includes controlling and observing the system’s state, reducing complexity, and facilitating the creation of test cases and oracles.
Content: # Scanpy Benchmarks. This directory contains code for benchmarking Scanpy using [asv][]. The functionality is checked using the [`benchmark.yml`][] workflow.; Benchmarks are run using the [benchmark bot][]. [asv]: https://asv.readthedocs.io/; [`benchmark.yml`]: ../.github/workflows/benchmark.yml; [benchmark bot]: https://github.com/apps/scverse-benchmark; 

Instructions: 
1. Analyze the content and the attribute description.
2. Determine if the content accurately reflects the intended quality attribute in this context.
3. If it does, label it as `true_positive: true`; if not, mark it as a `true_positive: false`.
4. If the content consists only of logs with no other text, mark it as a `true_positive: false`. 
4. If the content partially consists of logs, focus on analyzing remaining text. 
5. Add `reasoning` why the content is a true or false positive.
",True,"The provided content discusses benchmarking Scanpy using ASV (Automated System Verification) through a workflow file and a bot. This involves running tests to validate functionality, which aligns with Testability as it relates to testing and validation processes."
Testability,"# See Table 1 in Krumsiek et al. (2011), p. 3 or; # Table 1, in Suppl. Mat. of Moignard et al. (2015), p. 28.; #; # For each ""variable = "", there must be a right hand side:; # either an empty string or a python-style logical expression; # involving variable names, ""or"", ""and"", ""("", "")"".; # The order of equations matters!; #; # modelType = hill; # invTimeStep = 0.02; #; # boolean update rules:; Gata2 = Gata2 and not (Gata1 and Fog1) and not Pu.1; Gata1 = (Gata1 or Gata2 or Fli1) and not Pu.1; Fog1 = Gata1; EKLF = Gata1 and not Fli1; Fli1 = Gata1 and not EKLF; SCL = Gata1 and not Pu.1; Cebpa = Cebpa and not (Gata1 and Fog1 and SCL); Pu.1 = (Cebpa or Pu.1) and not (Gata1 or Gata2); cJun = Pu.1 and not Gfi1; EgrNab = (Pu.1 and cJun) and not Gfi1; Gfi1 = Cebpa and not EgrNab; # coupling list:; Gata2 Gata2 1.0; Gata2 Gata1 -0.1; Gata2 Fog1 -1.0; Gata2 Pu.1 -1.15; Gata1 Gata2 1.0; Gata1 Gata1 0.1; Gata1 Fli1 1.0; Gata1 Pu.1 -1.21; Fog1 Gata1 0.1; EKLF Gata1 0.2; EKLF Fli1 -1.0; Fli1 Gata1 0.2; Fli1 EKLF -1.0; SCL Gata1 1.0; SCL Pu.1 -1.0; Cebpa Gata1 -1.0; Cebpa Fog1 -1.0; Cebpa SCL -1.0; Cebpa Cebpa 10.0; Pu.1 Gata2 -1.0; Pu.1 Gata1 -1.0; Pu.1 Cebpa 10.0; Pu.1 Pu.1 10.0; cJun Pu.1 1.0; cJun Gfi1 -1.0; EgrNab Pu.1 1.0; EgrNab cJun 1.0; EgrNab Gfi1 -1.3; Gfi1 Cebpa 1.0; Gfi1 EgrNab -5.0; ",log,MatchSource.DOCS,scverse,scanpy,1.10.2,https://github.com/scverse/scanpy/tree/1.10.2/src/scanpy/sim_models/krumsiek11.txt:217,logical,217,src/scanpy/sim_models/krumsiek11.txt,https://scanpy.readthedocs.io,https://github.com/scverse/scanpy/tree/1.10.2/src/scanpy/sim_models/krumsiek11.txt,1,['log'],['logical'],"The ease of validating software functionality through testing, enabling fault detection. This includes controlling and observing the system’s state, reducing complexity, and facilitating the creation of test cases and oracles.","
You are an expert in evaluating and categorizing quality attributes in software engineering. You possess the necessary skills to distinguish sentences that clearly relate to a given quality attribute from those that do not. 

Evaluate whether the content accurately aligns with its associated quality attribute, given the context provided. Your goal is to determine if the content makes sense in relation to the quality attribute description or if it is a false positive.

Data:

Quality Attribute: Testability
Attribute Description: The ease of validating software functionality through testing, enabling fault detection. This includes controlling and observing the system’s state, reducing complexity, and facilitating the creation of test cases and oracles.
Content: # See Table 1 in Krumsiek et al. (2011), p. 3 or; # Table 1, in Suppl. Mat. of Moignard et al. (2015), p. 28.; #; # For each ""variable = "", there must be a right hand side:; # either an empty string or a python-style logical expression; # involving variable names, ""or"", ""and"", ""("", "")"".; # The order of equations matters!; #; # modelType = hill; # invTimeStep = 0.02; #; # boolean update rules:; Gata2 = Gata2 and not (Gata1 and Fog1) and not Pu.1; Gata1 = (Gata1 or Gata2 or Fli1) and not Pu.1; Fog1 = Gata1; EKLF = Gata1 and not Fli1; Fli1 = Gata1 and not EKLF; SCL = Gata1 and not Pu.1; Cebpa = Cebpa and not (Gata1 and Fog1 and SCL); Pu.1 = (Cebpa or Pu.1) and not (Gata1 or Gata2); cJun = Pu.1 and not Gfi1; EgrNab = (Pu.1 and cJun) and not Gfi1; Gfi1 = Cebpa and not EgrNab; # coupling list:; Gata2 Gata2 1.0; Gata2 Gata1 -0.1; Gata2 Fog1 -1.0; Gata2 Pu.1 -1.15; Gata1 Gata2 1.0; Gata1 Gata1 0.1; Gata1 Fli1 1.0; Gata1 Pu.1 -1.21; Fog1 Gata1 0.1; EKLF Gata1 0.2; EKLF Fli1 -1.0; Fli1 Gata1 0.2; Fli1 EKLF -1.0; SCL Gata1 1.0; SCL Pu.1 -1.0; Cebpa Gata1 -1.0; Cebpa Fog1 -1.0; Cebpa SCL -1.0; Cebpa Cebpa 10.0; Pu.1 Gata2 -1.0; Pu.1 Gata1 -1.0; Pu.1 Cebpa 10.0; Pu.1 Pu.1 10.0; cJun Pu.1 1.0; cJun Gfi1 -1.0; EgrNab Pu.1 1.0; EgrNab cJun 1.0; EgrNab Gfi1 -1.3; Gfi1 Cebpa 1.0; Gfi1 EgrNab -5.0; 

Instructions: 
1. Analyze the content and the attribute description.
2. Determine if the content accurately reflects the intended quality attribute in this context.
3. If it does, label it as `true_positive: true`; if not, mark it as a `true_positive: false`.
4. If the content consists only of logs with no other text, mark it as a `true_positive: false`. 
4. If the content partially consists of logs, focus on analyzing remaining text. 
5. Add `reasoning` why the content is a true or false positive.
",True,"The content provided is a series of equations and logical expressions related to gene regulatory network modeling. It includes variable definitions and update rules that define how each variable interacts with others. This aligns with the concept of testability as it demonstrates the creation of test cases based on these rules, allowing for validation of the system's behavior."
Testability,"# Versioning. ```{note}; We are currently experimenting with our development practices.; These are currently documented on a best effort basis, but may not be completely accurate.; ```. ## Semantic versioning. We try to follow [semantic versioning](https://semver.org) with our versioning scheme.; This scheme breaks down a version number into `{major.minor.point}` sections.; At a `point` release, there should be no changes beyond bug fixes.; `minor` releases can include new features.; `major` releases can break old APIs. ### Version numbers. Valid version numbers are described in [PEP 440](https://peps.python.org/pep-0440/). [Pre-releases](https://peps.python.org/pep-0440/#pre-releases); : should have versions like `1.7.0rc1` or `1.7.0rc2`.; [Development versions](https://peps.python.org/pep-0440/#developmental-releases); : should look like `1.8.0.dev0`, with a commit hash optionally appended as a local version identifier (e.g. `1.8.0.dev2+g00ad77b`). ## Tooling. To be sure we can follow this scheme and maintain some agility in development, we use some tooling and development practices.; When a minor release is made, a release branch should be cut and pushed to the main repo (e.g. `1.7.x` for the `1.7` release series). For PRs which fix an bug in the most recent minor release, the changes will need to added to both the development and release branches.; To accomplish this, PRs which fix bugs must be labelled as such.; After approval, a developer will notify the [meeseeks bot](https://meeseeksbox.github.io) to open a backport PR onto the release branch via a comment saying:. > @Meeseeksdev backport \<branch>. Where ""\<branch>"" is the most recent release branch. The bot will attempt to make a backport and open a PR.; This will sometimes require manual intervention due to merge conflicts or test failures.; ",test,MatchSource.DOCS,scverse,scanpy,1.10.2,https://github.com/scverse/scanpy/tree/1.10.2/docs/dev/versioning.md:1818,test,1818,docs/dev/versioning.md,https://scanpy.readthedocs.io,https://github.com/scverse/scanpy/tree/1.10.2/docs/dev/versioning.md,1,['test'],['test'],"The ease of validating software functionality through testing, enabling fault detection. This includes controlling and observing the system’s state, reducing complexity, and facilitating the creation of test cases and oracles.","
You are an expert in evaluating and categorizing quality attributes in software engineering. You possess the necessary skills to distinguish sentences that clearly relate to a given quality attribute from those that do not. 

Evaluate whether the content accurately aligns with its associated quality attribute, given the context provided. Your goal is to determine if the content makes sense in relation to the quality attribute description or if it is a false positive.

Data:

Quality Attribute: Testability
Attribute Description: The ease of validating software functionality through testing, enabling fault detection. This includes controlling and observing the system’s state, reducing complexity, and facilitating the creation of test cases and oracles.
Content: # Versioning. ```{note}; We are currently experimenting with our development practices.; These are currently documented on a best effort basis, but may not be completely accurate.; ```. ## Semantic versioning. We try to follow [semantic versioning](https://semver.org) with our versioning scheme.; This scheme breaks down a version number into `{major.minor.point}` sections.; At a `point` release, there should be no changes beyond bug fixes.; `minor` releases can include new features.; `major` releases can break old APIs. ### Version numbers. Valid version numbers are described in [PEP 440](https://peps.python.org/pep-0440/). [Pre-releases](https://peps.python.org/pep-0440/#pre-releases); : should have versions like `1.7.0rc1` or `1.7.0rc2`.; [Development versions](https://peps.python.org/pep-0440/#developmental-releases); : should look like `1.8.0.dev0`, with a commit hash optionally appended as a local version identifier (e.g. `1.8.0.dev2+g00ad77b`). ## Tooling. To be sure we can follow this scheme and maintain some agility in development, we use some tooling and development practices.; When a minor release is made, a release branch should be cut and pushed to the main repo (e.g. `1.7.x` for the `1.7` release series). For PRs which fix an bug in the most recent minor release, the changes will need to added to both the development and release branches.; To accomplish this, PRs which fix bugs must be labelled as such.; After approval, a developer will notify the [meeseeks bot](https://meeseeksbox.github.io) to open a backport PR onto the release branch via a comment saying:. > @Meeseeksdev backport \<branch>. Where ""\<branch>"" is the most recent release branch. The bot will attempt to make a backport and open a PR.; This will sometimes require manual intervention due to merge conflicts or test failures.; 

Instructions: 
1. Analyze the content and the attribute description.
2. Determine if the content accurately reflects the intended quality attribute in this context.
3. If it does, label it as `true_positive: true`; if not, mark it as a `true_positive: false`.
4. If the content consists only of logs with no other text, mark it as a `true_positive: false`. 
4. If the content partially consists of logs, focus on analyzing remaining text. 
5. Add `reasoning` why the content is a true or false positive.
",False,"The provided content discusses version control and development practices, specifically around semantic versioning and tooling such as using Meeseeks bot for backporting fixes. While it mentions some aspects of maintaining code (e.g., bug fixes), it does not directly address testability or the ease of testing software functionality. The text focuses on versioning schemes, release processes, and tooling, which are more related to software configuration management rather than ensuring that software can be tested effectively."
Testability,"### 0.2.1 {small}`2017-07-24`. Scanpy includes preprocessing, visualization, clustering, pseudotime and; trajectory inference, differential expression testing and simulation of gene; regulatory networks. The implementation efficiently deals with [datasets of more; than one million cells](https://github.com/scverse/scanpy_usage/tree/master/170522_visualizing_one_million_cells). {smaller}`A Wolf, P Angerer`; ",test,MatchSource.DOCS,scverse,scanpy,1.10.2,https://github.com/scverse/scanpy/tree/1.10.2/docs/release-notes/0.2.1.md:151,testing,151,docs/release-notes/0.2.1.md,https://scanpy.readthedocs.io,https://github.com/scverse/scanpy/tree/1.10.2/docs/release-notes/0.2.1.md,1,['test'],['testing'],"The ease of validating software functionality through testing, enabling fault detection. This includes controlling and observing the system’s state, reducing complexity, and facilitating the creation of test cases and oracles.","
You are an expert in evaluating and categorizing quality attributes in software engineering. You possess the necessary skills to distinguish sentences that clearly relate to a given quality attribute from those that do not. 

Evaluate whether the content accurately aligns with its associated quality attribute, given the context provided. Your goal is to determine if the content makes sense in relation to the quality attribute description or if it is a false positive.

Data:

Quality Attribute: Testability
Attribute Description: The ease of validating software functionality through testing, enabling fault detection. This includes controlling and observing the system’s state, reducing complexity, and facilitating the creation of test cases and oracles.
Content: ### 0.2.1 {small}`2017-07-24`. Scanpy includes preprocessing, visualization, clustering, pseudotime and; trajectory inference, differential expression testing and simulation of gene; regulatory networks. The implementation efficiently deals with [datasets of more; than one million cells](https://github.com/scverse/scanpy_usage/tree/master/170522_visualizing_one_million_cells). {smaller}`A Wolf, P Angerer`; 

Instructions: 
1. Analyze the content and the attribute description.
2. Determine if the content accurately reflects the intended quality attribute in this context.
3. If it does, label it as `true_positive: true`; if not, mark it as a `true_positive: false`.
4. If the content consists only of logs with no other text, mark it as a `true_positive: false`. 
4. If the content partially consists of logs, focus on analyzing remaining text. 
5. Add `reasoning` why the content is a true or false positive.
",False,"The content discusses aspects of Scanpy's implementation, including preprocessing and visualization features, as well as handling large datasets. While this is related to functionality, it doesn't directly address testability or testing processes in software development. The attribute 'Testability' refers specifically to the ease of validation through testing methods, but the given text focuses on implementation details rather than testing mechanisms."
Testability,"### 1.10.2 {small}`2024-06-25`. ```{rubric} Development features; ```. * Add performance benchmarking {pr}`2977` {smaller}`R Shrestha`, {smaller}`P Angerer`. ```{rubric} Docs; ```. * Document several missing parameters in docstring {pr}`2888` {smaller}`S Cheney`; * Fixed incorrect instructions in ""testing"" dev docs {pr}`2994` {smaller}`I Virshup`; * Update marsilea tutorial to use `group_` methods {pr}`3001` {smaller}`I Virshup`; * Fixed citations {pr}`3032` {smaller}`P Angerer`; * Improve dataset documentation {pr}`3060` {smaller}`P Angerer`. ```{rubric} Bug fixes; ```. * Compatibility with `matplotlib` 3.9 {pr}`2999` {smaller}`I Virshup`; * Add clear errors where `backed` mode-like matrices (i.e., from `sparse_dataset`) are not supported {pr}`3048` {smaller}`I gold`; * Write out full pca results when `_choose_representation` is called i.e., {func}`~scanpy.pp.neighbors` without {func}`~scanpy.pp.pca` {pr}`3079` {smaller}`I gold`; * Fix deprecated use of `.A` with sparse matrices {pr}`3084` {smaller}`P Angerer`; * Fix zappy support {pr}`3089` {smaller}`P Angerer`; * Fix dotplot group order with {mod}`pandas` 1.x {pr}`3101` {smaller}`P Angerer`. ```{rubric} Performance; ```. * `sparse_mean_variance_axis` now uses all cores for the calculations {pr}`3015` {smaller}`S Dicks`; * `pp.highly_variable_genes` with `flavor=seurat_v3` now uses a numba kernel {pr}`3017` {smaller}`S Dicks`; * Speed up {func}`~scanpy.pp.scrublet` {pr}`3044` {smaller}`S Dicks` and {pr}`3056` {smaller}`P Angerer`; * Speed up clipping of array in {func}`~scanpy.pp.scale` {pr}`3100` {smaller}`P Ashish & S Dicks`; ",benchmark,MatchSource.DOCS,scverse,scanpy,1.10.2,https://github.com/scverse/scanpy/tree/1.10.2/docs/release-notes/1.10.2.md:89,benchmarking,89,docs/release-notes/1.10.2.md,https://scanpy.readthedocs.io,https://github.com/scverse/scanpy/tree/1.10.2/docs/release-notes/1.10.2.md,2,"['benchmark', 'test']","['benchmarking', 'testing']","The ease of validating software functionality through testing, enabling fault detection. This includes controlling and observing the system’s state, reducing complexity, and facilitating the creation of test cases and oracles.","
You are an expert in evaluating and categorizing quality attributes in software engineering. You possess the necessary skills to distinguish sentences that clearly relate to a given quality attribute from those that do not. 

Evaluate whether the content accurately aligns with its associated quality attribute, given the context provided. Your goal is to determine if the content makes sense in relation to the quality attribute description or if it is a false positive.

Data:

Quality Attribute: Testability
Attribute Description: The ease of validating software functionality through testing, enabling fault detection. This includes controlling and observing the system’s state, reducing complexity, and facilitating the creation of test cases and oracles.
Content: ### 1.10.2 {small}`2024-06-25`. ```{rubric} Development features; ```. * Add performance benchmarking {pr}`2977` {smaller}`R Shrestha`, {smaller}`P Angerer`. ```{rubric} Docs; ```. * Document several missing parameters in docstring {pr}`2888` {smaller}`S Cheney`; * Fixed incorrect instructions in ""testing"" dev docs {pr}`2994` {smaller}`I Virshup`; * Update marsilea tutorial to use `group_` methods {pr}`3001` {smaller}`I Virshup`; * Fixed citations {pr}`3032` {smaller}`P Angerer`; * Improve dataset documentation {pr}`3060` {smaller}`P Angerer`. ```{rubric} Bug fixes; ```. * Compatibility with `matplotlib` 3.9 {pr}`2999` {smaller}`I Virshup`; * Add clear errors where `backed` mode-like matrices (i.e., from `sparse_dataset`) are not supported {pr}`3048` {smaller}`I gold`; * Write out full pca results when `_choose_representation` is called i.e., {func}`~scanpy.pp.neighbors` without {func}`~scanpy.pp.pca` {pr}`3079` {smaller}`I gold`; * Fix deprecated use of `.A` with sparse matrices {pr}`3084` {smaller}`P Angerer`; * Fix zappy support {pr}`3089` {smaller}`P Angerer`; * Fix dotplot group order with {mod}`pandas` 1.x {pr}`3101` {smaller}`P Angerer`. ```{rubric} Performance; ```. * `sparse_mean_variance_axis` now uses all cores for the calculations {pr}`3015` {smaller}`S Dicks`; * `pp.highly_variable_genes` with `flavor=seurat_v3` now uses a numba kernel {pr}`3017` {smaller}`S Dicks`; * Speed up {func}`~scanpy.pp.scrublet` {pr}`3044` {smaller}`S Dicks` and {pr}`3056` {smaller}`P Angerer`; * Speed up clipping of array in {func}`~scanpy.pp.scale` {pr}`3100` {smaller}`P Ashish & S Dicks`; 

Instructions: 
1. Analyze the content and the attribute description.
2. Determine if the content accurately reflects the intended quality attribute in this context.
3. If it does, label it as `true_positive: true`; if not, mark it as a `true_positive: false`.
4. If the content consists only of logs with no other text, mark it as a `true_positive: false`. 
4. If the content partially consists of logs, focus on analyzing remaining text. 
5. Add `reasoning` why the content is a true or false positive.
",False,"The content describes several development features, documentation improvements, bug fixes, and performance optimizations. While testability is about making software easy to test, none of these activities directly relate to testing. Instead, they focus on implementation details, documentation, and system performance which are separate aspects of software quality."
Testability,"### 1.3.6 {small}`2018-12-11`. ```{rubric} Major updates; ```. - a new plotting gallery for `visualizing-marker-genes` {smaller}`F Ramirez`; - tutorials are integrated on ReadTheDocs, `pbmc3k` and `paga-paul15` {smaller}`A Wolf`. ```{rubric} Interactive exploration of analysis results through *manifold viewers*; ```. - CZI’s [cellxgene] directly reads `.h5ad` files {smaller}`the cellxgene developers`; - the [UCSC Single Cell Browser] requires exporting via {func}`~scanpy.external.exporting.cellbrowser` {smaller}`M Haeussler`. ```{rubric} Code design; ```. - {func}`~scanpy.pp.highly_variable_genes` supersedes {func}`~scanpy.pp.filter_genes_dispersion`, it gives the same results but, by default, expects logarithmized data and doesn’t subset {smaller}`A Wolf`. [cellxgene]: https://github.com/chanzuckerberg/cellxgene; [ucsc single cell browser]: https://github.com/maximilianh/cellBrowser; ",log,MatchSource.DOCS,scverse,scanpy,1.10.2,https://github.com/scverse/scanpy/tree/1.10.2/docs/release-notes/1.3.6.md:711,logarithmized,711,docs/release-notes/1.3.6.md,https://scanpy.readthedocs.io,https://github.com/scverse/scanpy/tree/1.10.2/docs/release-notes/1.3.6.md,1,['log'],['logarithmized'],"The ease of validating software functionality through testing, enabling fault detection. This includes controlling and observing the system’s state, reducing complexity, and facilitating the creation of test cases and oracles.","
You are an expert in evaluating and categorizing quality attributes in software engineering. You possess the necessary skills to distinguish sentences that clearly relate to a given quality attribute from those that do not. 

Evaluate whether the content accurately aligns with its associated quality attribute, given the context provided. Your goal is to determine if the content makes sense in relation to the quality attribute description or if it is a false positive.

Data:

Quality Attribute: Testability
Attribute Description: The ease of validating software functionality through testing, enabling fault detection. This includes controlling and observing the system’s state, reducing complexity, and facilitating the creation of test cases and oracles.
Content: ### 1.3.6 {small}`2018-12-11`. ```{rubric} Major updates; ```. - a new plotting gallery for `visualizing-marker-genes` {smaller}`F Ramirez`; - tutorials are integrated on ReadTheDocs, `pbmc3k` and `paga-paul15` {smaller}`A Wolf`. ```{rubric} Interactive exploration of analysis results through *manifold viewers*; ```. - CZI’s [cellxgene] directly reads `.h5ad` files {smaller}`the cellxgene developers`; - the [UCSC Single Cell Browser] requires exporting via {func}`~scanpy.external.exporting.cellbrowser` {smaller}`M Haeussler`. ```{rubric} Code design; ```. - {func}`~scanpy.pp.highly_variable_genes` supersedes {func}`~scanpy.pp.filter_genes_dispersion`, it gives the same results but, by default, expects logarithmized data and doesn’t subset {smaller}`A Wolf`. [cellxgene]: https://github.com/chanzuckerberg/cellxgene; [ucsc single cell browser]: https://github.com/maximilianh/cellBrowser; 

Instructions: 
1. Analyze the content and the attribute description.
2. Determine if the content accurately reflects the intended quality attribute in this context.
3. If it does, label it as `true_positive: true`; if not, mark it as a `true_positive: false`.
4. If the content consists only of logs with no other text, mark it as a `true_positive: false`. 
4. If the content partially consists of logs, focus on analyzing remaining text. 
5. Add `reasoning` why the content is a true or false positive.
",False,"The content provided discusses updates and features in software tools related to visualization and analysis, such as integrating tutorials and improving plotting galleries. While these are important for usability and functionality, they do not directly address aspects of testability. Testability focuses on the ease of testing and validation, which is not discussed here. Instead, the content pertains more to implementation details and feature enhancements rather than testing capabilities."
Testability,"### 1.4.1 {small}`2019-04-26`. ```{rubric} New functionality; ```. - Scanpy has a command line interface again. Invoking it with `scanpy somecommand [args]` calls `scanpy-somecommand [args]`, except for builtin commands (currently `scanpy settings`) {pr}`604` {smaller}`P Angerer`; - {func}`~scanpy.datasets.ebi_expression_atlas` allows convenient download of EBI expression atlas {smaller}`I Virshup`; - {func}`~scanpy.tl.marker_gene_overlap` computes overlaps of marker genes {smaller}`M Luecken`; - {func}`~scanpy.tl.filter_rank_genes_groups` filters out genes based on fold change and fraction of cells expressing genes {smaller}`F Ramirez`; - {func}`~scanpy.pp.normalize_total` replaces {func}`~scanpy.pp.normalize_per_cell`, is more efficient and provides a parameter to only normalize using a fraction of expressed genes {smaller}`S Rybakov`; - {func}`~scanpy.pp.downsample_counts` has been sped up, changed default value of `replace` parameter to `False` {pr}`474` {smaller}`I Virshup`; - {func}`~scanpy.tl.embedding_density` computes densities on embeddings {pr}`543` {smaller}`M Luecken`; - {func}`~scanpy.external.tl.palantir` interfaces Palantir {cite:p}`Setty2019` {pr}`493` {smaller}`A Mousa`. ```{rubric} Code design; ```. - `.layers` support of scatter plots {smaller}`F Ramirez`; - fix double-logarithmization in compute of log fold change in {func}`~scanpy.tl.rank_genes_groups` {smaller}`A Muñoz-Rojas`; - fix return sections of docs {smaller}`P Angerer`; ",log,MatchSource.DOCS,scverse,scanpy,1.10.2,https://github.com/scverse/scanpy/tree/1.10.2/docs/release-notes/1.4.1.md:1310,logarithmization,1310,docs/release-notes/1.4.1.md,https://scanpy.readthedocs.io,https://github.com/scverse/scanpy/tree/1.10.2/docs/release-notes/1.4.1.md,2,['log'],"['log', 'logarithmization']","The ease of validating software functionality through testing, enabling fault detection. This includes controlling and observing the system’s state, reducing complexity, and facilitating the creation of test cases and oracles.","
You are an expert in evaluating and categorizing quality attributes in software engineering. You possess the necessary skills to distinguish sentences that clearly relate to a given quality attribute from those that do not. 

Evaluate whether the content accurately aligns with its associated quality attribute, given the context provided. Your goal is to determine if the content makes sense in relation to the quality attribute description or if it is a false positive.

Data:

Quality Attribute: Testability
Attribute Description: The ease of validating software functionality through testing, enabling fault detection. This includes controlling and observing the system’s state, reducing complexity, and facilitating the creation of test cases and oracles.
Content: ### 1.4.1 {small}`2019-04-26`. ```{rubric} New functionality; ```. - Scanpy has a command line interface again. Invoking it with `scanpy somecommand [args]` calls `scanpy-somecommand [args]`, except for builtin commands (currently `scanpy settings`) {pr}`604` {smaller}`P Angerer`; - {func}`~scanpy.datasets.ebi_expression_atlas` allows convenient download of EBI expression atlas {smaller}`I Virshup`; - {func}`~scanpy.tl.marker_gene_overlap` computes overlaps of marker genes {smaller}`M Luecken`; - {func}`~scanpy.tl.filter_rank_genes_groups` filters out genes based on fold change and fraction of cells expressing genes {smaller}`F Ramirez`; - {func}`~scanpy.pp.normalize_total` replaces {func}`~scanpy.pp.normalize_per_cell`, is more efficient and provides a parameter to only normalize using a fraction of expressed genes {smaller}`S Rybakov`; - {func}`~scanpy.pp.downsample_counts` has been sped up, changed default value of `replace` parameter to `False` {pr}`474` {smaller}`I Virshup`; - {func}`~scanpy.tl.embedding_density` computes densities on embeddings {pr}`543` {smaller}`M Luecken`; - {func}`~scanpy.external.tl.palantir` interfaces Palantir {cite:p}`Setty2019` {pr}`493` {smaller}`A Mousa`. ```{rubric} Code design; ```. - `.layers` support of scatter plots {smaller}`F Ramirez`; - fix double-logarithmization in compute of log fold change in {func}`~scanpy.tl.rank_genes_groups` {smaller}`A Muñoz-Rojas`; - fix return sections of docs {smaller}`P Angerer`; 

Instructions: 
1. Analyze the content and the attribute description.
2. Determine if the content accurately reflects the intended quality attribute in this context.
3. If it does, label it as `true_positive: true`; if not, mark it as a `true_positive: false`.
4. If the content consists only of logs with no other text, mark it as a `true_positive: false`. 
4. If the content partially consists of logs, focus on analyzing remaining text. 
5. Add `reasoning` why the content is a true or false positive.
",False,"The provided content primarily discusses new functionality and code design updates in scanpy, such as new commands and their features. The attribute description focuses on testability which involves testing and validation of software components. While the content includes details about command-line interfaces and feature additions, there is no direct mention or indication that these updates relate to testing or fault detection. Instead, they seem to be developmental updates rather than related to testability. Therefore, this content does not align with the Testability quality attribute description provided."
Testability,"### 1.4.2 {small}`2019-05-06`. ```{rubric} New functionality; ```. - {func}`~scanpy.pp.combat` supports additional covariates which may include adjustment variables or biological condition {pr}`618` {smaller}`G Eraslan`; - {func}`~scanpy.pp.highly_variable_genes` has a `batch_key` option which performs HVG selection in each batch separately to avoid selecting genes that vary strongly across batches {pr}`622` {smaller}`G Eraslan`. ```{rubric} Bug fixes; ```. - {func}`~scanpy.tl.rank_genes_groups` t-test implementation doesn't return NaN when variance is 0, also changed to scipy's implementation {pr}`621` {smaller}`I Virshup`; - {func}`~scanpy.tl.umap` with `init_pos='paga'` detects correct `dtype` {smaller}`A Wolf`; - {func}`~scanpy.tl.louvain` and {func}`~scanpy.tl.leiden` auto-generate `key_added=louvain_R` upon passing `restrict_to`, which was temporarily changed in `1.4.1` {smaller}`A Wolf`. ```{rubric} Code design; ```. - {func}`~scanpy.pp.neighbors` and {func}`~scanpy.tl.umap` got rid of UMAP legacy code and introduced UMAP as a dependency {pr}`576` {smaller}`S Rybakov`; ",test,MatchSource.DOCS,scverse,scanpy,1.10.2,https://github.com/scverse/scanpy/tree/1.10.2/docs/release-notes/1.4.2.md:503,test,503,docs/release-notes/1.4.2.md,https://scanpy.readthedocs.io,https://github.com/scverse/scanpy/tree/1.10.2/docs/release-notes/1.4.2.md,1,['test'],['test'],"The ease of validating software functionality through testing, enabling fault detection. This includes controlling and observing the system’s state, reducing complexity, and facilitating the creation of test cases and oracles.","
You are an expert in evaluating and categorizing quality attributes in software engineering. You possess the necessary skills to distinguish sentences that clearly relate to a given quality attribute from those that do not. 

Evaluate whether the content accurately aligns with its associated quality attribute, given the context provided. Your goal is to determine if the content makes sense in relation to the quality attribute description or if it is a false positive.

Data:

Quality Attribute: Testability
Attribute Description: The ease of validating software functionality through testing, enabling fault detection. This includes controlling and observing the system’s state, reducing complexity, and facilitating the creation of test cases and oracles.
Content: ### 1.4.2 {small}`2019-05-06`. ```{rubric} New functionality; ```. - {func}`~scanpy.pp.combat` supports additional covariates which may include adjustment variables or biological condition {pr}`618` {smaller}`G Eraslan`; - {func}`~scanpy.pp.highly_variable_genes` has a `batch_key` option which performs HVG selection in each batch separately to avoid selecting genes that vary strongly across batches {pr}`622` {smaller}`G Eraslan`. ```{rubric} Bug fixes; ```. - {func}`~scanpy.tl.rank_genes_groups` t-test implementation doesn't return NaN when variance is 0, also changed to scipy's implementation {pr}`621` {smaller}`I Virshup`; - {func}`~scanpy.tl.umap` with `init_pos='paga'` detects correct `dtype` {smaller}`A Wolf`; - {func}`~scanpy.tl.louvain` and {func}`~scanpy.tl.leiden` auto-generate `key_added=louvain_R` upon passing `restrict_to`, which was temporarily changed in `1.4.1` {smaller}`A Wolf`. ```{rubric} Code design; ```. - {func}`~scanpy.pp.neighbors` and {func}`~scanpy.tl.umap` got rid of UMAP legacy code and introduced UMAP as a dependency {pr}`576` {smaller}`S Rybakov`; 

Instructions: 
1. Analyze the content and the attribute description.
2. Determine if the content accurately reflects the intended quality attribute in this context.
3. If it does, label it as `true_positive: true`; if not, mark it as a `true_positive: false`.
4. If the content consists only of logs with no other text, mark it as a `true_positive: false`. 
4. If the content partially consists of logs, focus on analyzing remaining text. 
5. Add `reasoning` why the content is a true or false positive.
",False,"The content provided does not discuss any aspects related to testability. It instead details bug fixes and new functionality updates in specific parts of the software, such as scanpy.pp.combat and scanpy.tl.rank_genes_groups. There is no mention of testing processes, test cases, or quality assurance methods that would relate to the Testability attribute. Therefore, this content does not align with the Testability quality attribute."
Testability,"### 1.6.0 {small}`2020-08-15`. This release includes an overhaul of {func}`~scanpy.pl.dotplot`, {func}`~scanpy.pl.matrixplot`, and {func}`~scanpy.pl.stacked_violin` ({pr}`1210` {smaller}`F Ramirez`), and of the internals of {func}`~scanpy.tl.rank_genes_groups` ({pr}`1156` {smaller}`S Rybakov`). ~~~{rubric} Overhaul of {func}`~scanpy.pl.dotplot`, {func}`~scanpy.pl.matrixplot`, and {func}`~scanpy.pl.stacked_violin` {pr}`1210` {smaller}`F Ramirez`; ~~~. - An overhauled tutorial {doc}`/tutorials/plotting/core`. - New plotting classes can be accessed directly (e.g., {class}`~scanpy.pl.DotPlot`) or using the `return_fig` param. - It is possible to plot log fold change and p-values in the {func}`~scanpy.pl.rank_genes_groups_dotplot` family of functions. - Added `ax` parameter which allows embedding the plot in other images. - Added option to include a bar plot instead of the dendrogram containing the cell/observation totals per category. - Return a dictionary of axes for further manipulation. This includes the main plot, legend and dendrogram to totals. - Legends can be removed. - The `groupby` param can take a list of categories, e.g., `groupby=[‘tissue’, ‘cell type’]`. - Added padding parameter to `dotplot` and `stacked_violin`. {pr}`1270`. - Added title for colorbar and positioned as in dotplot for {func}`~scanpy.pl.matrixplot`. - {func}`~scanpy.pl.dotplot` changes:. > - Improved the colorbar and size legend for dotplots. Now the colorbar and size have titles, which can be modified using the `colorbar_title` and `size_title` params. They also align at the bottom of the image and do not shrink if the dotplot image is smaller.; > - Allow plotting genes in rows and categories in columns (`swap_axes`).; > - Using {class}`~scanpy.pl.DotPlot`, the `dot_edge_color` and line width can be modified, a grid can be added, and other modifications are enabled.; > - A new style was added in which the dots are replaced by an empty circle and the square behind the circle is colored (like",log,MatchSource.DOCS,scverse,scanpy,1.10.2,https://github.com/scverse/scanpy/tree/1.10.2/docs/release-notes/1.6.0.md:655,log,655,docs/release-notes/1.6.0.md,https://scanpy.readthedocs.io,https://github.com/scverse/scanpy/tree/1.10.2/docs/release-notes/1.6.0.md,1,['log'],['log'],"The ease of validating software functionality through testing, enabling fault detection. This includes controlling and observing the system’s state, reducing complexity, and facilitating the creation of test cases and oracles.","
You are an expert in evaluating and categorizing quality attributes in software engineering. You possess the necessary skills to distinguish sentences that clearly relate to a given quality attribute from those that do not. 

Evaluate whether the content accurately aligns with its associated quality attribute, given the context provided. Your goal is to determine if the content makes sense in relation to the quality attribute description or if it is a false positive.

Data:

Quality Attribute: Testability
Attribute Description: The ease of validating software functionality through testing, enabling fault detection. This includes controlling and observing the system’s state, reducing complexity, and facilitating the creation of test cases and oracles.
Content: ### 1.6.0 {small}`2020-08-15`. This release includes an overhaul of {func}`~scanpy.pl.dotplot`, {func}`~scanpy.pl.matrixplot`, and {func}`~scanpy.pl.stacked_violin` ({pr}`1210` {smaller}`F Ramirez`), and of the internals of {func}`~scanpy.tl.rank_genes_groups` ({pr}`1156` {smaller}`S Rybakov`). ~~~{rubric} Overhaul of {func}`~scanpy.pl.dotplot`, {func}`~scanpy.pl.matrixplot`, and {func}`~scanpy.pl.stacked_violin` {pr}`1210` {smaller}`F Ramirez`; ~~~. - An overhauled tutorial {doc}`/tutorials/plotting/core`. - New plotting classes can be accessed directly (e.g., {class}`~scanpy.pl.DotPlot`) or using the `return_fig` param. - It is possible to plot log fold change and p-values in the {func}`~scanpy.pl.rank_genes_groups_dotplot` family of functions. - Added `ax` parameter which allows embedding the plot in other images. - Added option to include a bar plot instead of the dendrogram containing the cell/observation totals per category. - Return a dictionary of axes for further manipulation. This includes the main plot, legend and dendrogram to totals. - Legends can be removed. - The `groupby` param can take a list of categories, e.g., `groupby=[‘tissue’, ‘cell type’]`. - Added padding parameter to `dotplot` and `stacked_violin`. {pr}`1270`. - Added title for colorbar and positioned as in dotplot for {func}`~scanpy.pl.matrixplot`. - {func}`~scanpy.pl.dotplot` changes:. > - Improved the colorbar and size legend for dotplots. Now the colorbar and size have titles, which can be modified using the `colorbar_title` and `size_title` params. They also align at the bottom of the image and do not shrink if the dotplot image is smaller.; > - Allow plotting genes in rows and categories in columns (`swap_axes`).; > - Using {class}`~scanpy.pl.DotPlot`, the `dot_edge_color` and line width can be modified, a grid can be added, and other modifications are enabled.; > - A new style was added in which the dots are replaced by an empty circle and the square behind the circle is colored (like

Instructions: 
1. Analyze the content and the attribute description.
2. Determine if the content accurately reflects the intended quality attribute in this context.
3. If it does, label it as `true_positive: true`; if not, mark it as a `true_positive: false`.
4. If the content consists only of logs with no other text, mark it as a `true_positive: false`. 
4. If the content partially consists of logs, focus on analyzing remaining text. 
5. Add `reasoning` why the content is a true or false positive.
",False,"The provided content describes an update to specific plotting functions in scanpy, including new parameters, features, and documentation changes. While this relates to the functionality of the software, it does not directly address testability. The attribute 'Testability' refers to the ease of validating software through testing, which includes creating test cases and oracles. This content is about feature enhancements rather than testing capabilities. Therefore, it is a false positive."
Testability,"### 1.7.2 {small}`2021-04-07`. ```{rubric} Bug fixes; ```. - {func}`scanpy.logging.print_versions` now works when `python<3.8` {pr}`1691` {smaller}`I Virshup`; - {func}`scanpy.pp.regress_out` now uses `joblib` as the parallel backend, and should stop oversubscribing threads {pr}`1694` {smaller}`I Virshup`; - {func}`scanpy.pp.highly_variable_genes` with `flavor=""seurat_v3""` now returns correct gene means and -variances when used with `batch_key` {pr}`1732` {smaller}`J Lause`; - {func}`scanpy.pp.highly_variable_genes` now throws a warning instead of an error when non-integer values are passed for method `""seurat_v3""`. The check can be skipped by passing `check_values=False`. {pr}`1679` {smaller}`G Palla`. ```{rubric} Ecosystem; ```. - Added `triku` a feature selection method to the ecosystem page {pr}`1722` {smaller}`AM Ascensión`; - Added `dorothea` and `progeny` to the ecosystem page {pr}`1767` {smaller}`P Badia-i-Mompel`; ",log,MatchSource.DOCS,scverse,scanpy,1.10.2,https://github.com/scverse/scanpy/tree/1.10.2/docs/release-notes/1.7.2.md:75,logging,75,docs/release-notes/1.7.2.md,https://scanpy.readthedocs.io,https://github.com/scverse/scanpy/tree/1.10.2/docs/release-notes/1.7.2.md,1,['log'],['logging'],"The ease of validating software functionality through testing, enabling fault detection. This includes controlling and observing the system’s state, reducing complexity, and facilitating the creation of test cases and oracles.","
You are an expert in evaluating and categorizing quality attributes in software engineering. You possess the necessary skills to distinguish sentences that clearly relate to a given quality attribute from those that do not. 

Evaluate whether the content accurately aligns with its associated quality attribute, given the context provided. Your goal is to determine if the content makes sense in relation to the quality attribute description or if it is a false positive.

Data:

Quality Attribute: Testability
Attribute Description: The ease of validating software functionality through testing, enabling fault detection. This includes controlling and observing the system’s state, reducing complexity, and facilitating the creation of test cases and oracles.
Content: ### 1.7.2 {small}`2021-04-07`. ```{rubric} Bug fixes; ```. - {func}`scanpy.logging.print_versions` now works when `python<3.8` {pr}`1691` {smaller}`I Virshup`; - {func}`scanpy.pp.regress_out` now uses `joblib` as the parallel backend, and should stop oversubscribing threads {pr}`1694` {smaller}`I Virshup`; - {func}`scanpy.pp.highly_variable_genes` with `flavor=""seurat_v3""` now returns correct gene means and -variances when used with `batch_key` {pr}`1732` {smaller}`J Lause`; - {func}`scanpy.pp.highly_variable_genes` now throws a warning instead of an error when non-integer values are passed for method `""seurat_v3""`. The check can be skipped by passing `check_values=False`. {pr}`1679` {smaller}`G Palla`. ```{rubric} Ecosystem; ```. - Added `triku` a feature selection method to the ecosystem page {pr}`1722` {smaller}`AM Ascensión`; - Added `dorothea` and `progeny` to the ecosystem page {pr}`1767` {smaller}`P Badia-i-Mompel`; 

Instructions: 
1. Analyze the content and the attribute description.
2. Determine if the content accurately reflects the intended quality attribute in this context.
3. If it does, label it as `true_positive: true`; if not, mark it as a `true_positive: false`.
4. If the content consists only of logs with no other text, mark it as a `true_positive: false`. 
4. If the content partially consists of logs, focus on analyzing remaining text. 
5. Add `reasoning` why the content is a true or false positive.
",False,"The content provided lists various bug fixes and feature additions to the software ecosystem. While testing is mentioned in general as part of ensuring quality, this specific content focuses more on implementation details rather than the actual testability of the software. The attribute 'Testability' refers to how easily a system can be tested for functionality and faults, which includes creating test cases and oracles. However, the provided content does not discuss any specific testing processes or methods, nor does it mention tools or techniques aimed at improving testability. Instead, it details changes in code features and their fixes, which are more related to maintainability and implementation than testability."
Testability,"### 1.9.4 {small}`2023-08-24`. ```{rubric} Bug fixes; ```. * Support scikit-learn 1.3 {pr}`2515` {smaller}`P Angerer`; * Deal with `None` value vanishing from things like `.uns['log1p']` {pr}`2546` {smaller}`SP Shen`; * Depend on `igraph` instead of `python-igraph` {pr}`2566` {smaller}`P Angerer`; * {func}`~scanpy.tl.rank_genes_groups` now handles unsorted groups as intended {pr}`2589` {smaller}`S Dicks`; * {func}`~scanpy.get.rank_genes_groups_df` now works for {func}`~scanpy.tl.rank_genes_groups` with `method=""logreg""` {pr}`2601` {smaller}`S Dicks`; * `scanpy.tl._utils._choose_representation` now works with `n_pcs` if bigger than `settings.N_PCS` {pr}`2610` {smaller}`S Dicks`; ",log,MatchSource.DOCS,scverse,scanpy,1.10.2,https://github.com/scverse/scanpy/tree/1.10.2/docs/release-notes/1.9.4.md:517,logreg,517,docs/release-notes/1.9.4.md,https://scanpy.readthedocs.io,https://github.com/scverse/scanpy/tree/1.10.2/docs/release-notes/1.9.4.md,1,['log'],['logreg'],"The ease of validating software functionality through testing, enabling fault detection. This includes controlling and observing the system’s state, reducing complexity, and facilitating the creation of test cases and oracles.","
You are an expert in evaluating and categorizing quality attributes in software engineering. You possess the necessary skills to distinguish sentences that clearly relate to a given quality attribute from those that do not. 

Evaluate whether the content accurately aligns with its associated quality attribute, given the context provided. Your goal is to determine if the content makes sense in relation to the quality attribute description or if it is a false positive.

Data:

Quality Attribute: Testability
Attribute Description: The ease of validating software functionality through testing, enabling fault detection. This includes controlling and observing the system’s state, reducing complexity, and facilitating the creation of test cases and oracles.
Content: ### 1.9.4 {small}`2023-08-24`. ```{rubric} Bug fixes; ```. * Support scikit-learn 1.3 {pr}`2515` {smaller}`P Angerer`; * Deal with `None` value vanishing from things like `.uns['log1p']` {pr}`2546` {smaller}`SP Shen`; * Depend on `igraph` instead of `python-igraph` {pr}`2566` {smaller}`P Angerer`; * {func}`~scanpy.tl.rank_genes_groups` now handles unsorted groups as intended {pr}`2589` {smaller}`S Dicks`; * {func}`~scanpy.get.rank_genes_groups_df` now works for {func}`~scanpy.tl.rank_genes_groups` with `method=""logreg""` {pr}`2601` {smaller}`S Dicks`; * `scanpy.tl._utils._choose_representation` now works with `n_pcs` if bigger than `settings.N_PCS` {pr}`2610` {smaller}`S Dicks`; 

Instructions: 
1. Analyze the content and the attribute description.
2. Determine if the content accurately reflects the intended quality attribute in this context.
3. If it does, label it as `true_positive: true`; if not, mark it as a `true_positive: false`.
4. If the content consists only of logs with no other text, mark it as a `true_positive: false`. 
4. If the content partially consists of logs, focus on analyzing remaining text. 
5. Add `reasoning` why the content is a true or false positive.
",False,"The content provided is a list of bug fixes and changes in a software project, such as updating dependencies, fixing functionality, and improving existing functions. These changes are related to the overall quality and stability of the software, but they do not directly mention testability. The attributes mentioned here focus on code maintenance and internal system improvements rather than testing or validation methods."
Testability,(contribution-guide)=. # Contributing. Contributions to scanpy are welcome!; This section of the docs provides some guidelines and tips to follow when contributing. ```{toctree}; code; getting-set-up; testing; documentation; ci; versioning; release; ```. Parts of the guidelines have been adapted from the [pandas](https://pandas.pydata.org/pandas-docs/stable/development/index.html) and [MDAnalysis](https://userguide.mdanalysis.org/stable/contributing.html) guides.; These are both excellent guides and we highly recommend checking them out.; ,test,MatchSource.DOCS,scverse,scanpy,1.10.2,https://github.com/scverse/scanpy/tree/1.10.2/docs/dev/index.md:201,testing,201,docs/dev/index.md,https://scanpy.readthedocs.io,https://github.com/scverse/scanpy/tree/1.10.2/docs/dev/index.md,1,['test'],['testing'],"The ease of validating software functionality through testing, enabling fault detection. This includes controlling and observing the system’s state, reducing complexity, and facilitating the creation of test cases and oracles.","
You are an expert in evaluating and categorizing quality attributes in software engineering. You possess the necessary skills to distinguish sentences that clearly relate to a given quality attribute from those that do not. 

Evaluate whether the content accurately aligns with its associated quality attribute, given the context provided. Your goal is to determine if the content makes sense in relation to the quality attribute description or if it is a false positive.

Data:

Quality Attribute: Testability
Attribute Description: The ease of validating software functionality through testing, enabling fault detection. This includes controlling and observing the system’s state, reducing complexity, and facilitating the creation of test cases and oracles.
Content: (contribution-guide)=. # Contributing. Contributions to scanpy are welcome!; This section of the docs provides some guidelines and tips to follow when contributing. ```{toctree}; code; getting-set-up; testing; documentation; ci; versioning; release; ```. Parts of the guidelines have been adapted from the [pandas](https://pandas.pydata.org/pandas-docs/stable/development/index.html) and [MDAnalysis](https://userguide.mdanalysis.org/stable/contributing.html) guides.; These are both excellent guides and we highly recommend checking them out.; 

Instructions: 
1. Analyze the content and the attribute description.
2. Determine if the content accurately reflects the intended quality attribute in this context.
3. If it does, label it as `true_positive: true`; if not, mark it as a `true_positive: false`.
4. If the content consists only of logs with no other text, mark it as a `true_positive: false`. 
4. If the content partially consists of logs, focus on analyzing remaining text. 
5. Add `reasoning` why the content is a true or false positive.
",True,"The content discusses contributing to an open-source project and provides guidelines for contributors, including sections like testing. This aligns with aspects of testability as it involves setting up environments and processes that facilitate testing and validation."
Testability,"(e.g. if an array is sparse or dense)?; - Do you have arguments which should have orthogonal effects on the output? Check that they are independent. For example, if there is a flag for extended output, the base output should remain the same either way.; - Are you optimizing a method? Check that it's results are the same as a gold standard implementation. ### Performance. It's more important that you're accurately testing the code works than it is that test suite runs quickly.; That said, it's nice when the test suite runs fast. You can check how long tests take to run by passing `--durations=0` argument to `pytest`.; Hopefully your new tests won't show up on top!; Some approaches to this include:. - Is there a common setup/ computation happening in each test? Consider caching these in a [scoped test fixture](https://docs.pytest.org/en/stable/fixture.html#sharing-test-data).; - Is the behaviour you're testing for dependent on the size of the data? If not, consider reducing it. ### Plotting tests. While computational functions will return arrays and values, it can be harder to work with the output of plotting functions. To make this easier, we use the `image_comparer` fixture for comparing plotting results (search the test suite for example usage).; This is used to check that generated plots look the same as they did previously.; Reference images (the expected output) are stored as `expected.png` to relevant tests directory under `scanpy/tests/_images`.; When run, the test suite will generate `actual.png` files for each check.; These files are compared, and if the `actual` plot differs from the reference plot, a `diff` of the images is also generated.; Paths for all these files will be reported when a test fails, and images for failed plots can be viewed via the :doc:`CI interface <ci>`. A common gotcha here is that plots often change slightly on different machines/ OSs.; `scanpy`'s test suite sets a number of environment variables to ensure as similar of plots as pos",test,MatchSource.DOCS,scverse,scanpy,1.10.2,https://github.com/scverse/scanpy/tree/1.10.2/docs/dev/testing.md:3672,tests,3672,docs/dev/testing.md,https://scanpy.readthedocs.io,https://github.com/scverse/scanpy/tree/1.10.2/docs/dev/testing.md,1,['test'],['tests'],"The ease of validating software functionality through testing, enabling fault detection. This includes controlling and observing the system’s state, reducing complexity, and facilitating the creation of test cases and oracles.","
You are an expert in evaluating and categorizing quality attributes in software engineering. You possess the necessary skills to distinguish sentences that clearly relate to a given quality attribute from those that do not. 

Evaluate whether the content accurately aligns with its associated quality attribute, given the context provided. Your goal is to determine if the content makes sense in relation to the quality attribute description or if it is a false positive.

Data:

Quality Attribute: Testability
Attribute Description: The ease of validating software functionality through testing, enabling fault detection. This includes controlling and observing the system’s state, reducing complexity, and facilitating the creation of test cases and oracles.
Content: (e.g. if an array is sparse or dense)?; - Do you have arguments which should have orthogonal effects on the output? Check that they are independent. For example, if there is a flag for extended output, the base output should remain the same either way.; - Are you optimizing a method? Check that it's results are the same as a gold standard implementation. ### Performance. It's more important that you're accurately testing the code works than it is that test suite runs quickly.; That said, it's nice when the test suite runs fast. You can check how long tests take to run by passing `--durations=0` argument to `pytest`.; Hopefully your new tests won't show up on top!; Some approaches to this include:. - Is there a common setup/ computation happening in each test? Consider caching these in a [scoped test fixture](https://docs.pytest.org/en/stable/fixture.html#sharing-test-data).; - Is the behaviour you're testing for dependent on the size of the data? If not, consider reducing it. ### Plotting tests. While computational functions will return arrays and values, it can be harder to work with the output of plotting functions. To make this easier, we use the `image_comparer` fixture for comparing plotting results (search the test suite for example usage).; This is used to check that generated plots look the same as they did previously.; Reference images (the expected output) are stored as `expected.png` to relevant tests directory under `scanpy/tests/_images`.; When run, the test suite will generate `actual.png` files for each check.; These files are compared, and if the `actual` plot differs from the reference plot, a `diff` of the images is also generated.; Paths for all these files will be reported when a test fails, and images for failed plots can be viewed via the :doc:`CI interface <ci>`. A common gotcha here is that plots often change slightly on different machines/ OSs.; `scanpy`'s test suite sets a number of environment variables to ensure as similar of plots as pos

Instructions: 
1. Analyze the content and the attribute description.
2. Determine if the content accurately reflects the intended quality attribute in this context.
3. If it does, label it as `true_positive: true`; if not, mark it as a `true_positive: false`.
4. If the content consists only of logs with no other text, mark it as a `true_positive: false`. 
4. If the content partially consists of logs, focus on analyzing remaining text. 
5. Add `reasoning` why the content is a true or false positive.
",True,"The content discusses testing strategies such as optimizing methods to match gold standards, caching test setups, reducing data size for independent behavior checks, and using fixtures for plotting tests. These points relate to ensuring tests are accurate and efficient, which ties into the quality attribute of Testability by validating functionality through controlled testing and facilitating test case creation."
Testability,"(settings)=. ## Settings. ```{eval-rst}; .. currentmodule:: scanpy; ```. A convenience function for setting some default {obj}`matplotlib.rcParams` and a; high-resolution jupyter display backend useful for use in notebooks. ```{eval-rst}; .. autosummary::; :nosignatures:; :toctree: ../generated/. set_figure_params; ```. An instance of the {class}`~scanpy._settings.ScanpyConfig` is available as `scanpy.settings` and allows configuring Scanpy. ```{eval-rst}; .. autosummary::; :nosignatures:; :toctree: ../generated/. _settings.ScanpyConfig; ```. Some selected settings are discussed in the following. Influence the global behavior of plotting functions. In non-interactive scripts,; you'd usually want to set `settings.autoshow` to `False`. % no :toctree: here because they are linked under the class. ```{eval-rst}; .. autosummary::; :nosignatures:. ~_settings.ScanpyConfig.autoshow; ~_settings.ScanpyConfig.autosave; ```. The default directories for saving figures, caching files and storing datasets. ```{eval-rst}; .. autosummary::; :nosignatures:. ~_settings.ScanpyConfig.figdir; ~_settings.ScanpyConfig.cachedir; ~_settings.ScanpyConfig.datasetdir; ```. The verbosity of logging output, where verbosity levels have the following; meaning: 0='error', 1='warning', 2='info', 3='hint', 4=more details, 5=even more; details, etc. ```{eval-rst}; .. autosummary::; :nosignatures:. ~_settings.ScanpyConfig.verbosity; ```. Print versions of packages that might influence numerical results. ```{eval-rst}; .. autosummary::; :nosignatures:; :toctree: ../generated/. logging.print_header; logging.print_versions. ```; ",log,MatchSource.DOCS,scverse,scanpy,1.10.2,https://github.com/scverse/scanpy/tree/1.10.2/docs/api/settings.md:1180,logging,1180,docs/api/settings.md,https://scanpy.readthedocs.io,https://github.com/scverse/scanpy/tree/1.10.2/docs/api/settings.md,3,['log'],['logging'],"The ease of validating software functionality through testing, enabling fault detection. This includes controlling and observing the system’s state, reducing complexity, and facilitating the creation of test cases and oracles.","
You are an expert in evaluating and categorizing quality attributes in software engineering. You possess the necessary skills to distinguish sentences that clearly relate to a given quality attribute from those that do not. 

Evaluate whether the content accurately aligns with its associated quality attribute, given the context provided. Your goal is to determine if the content makes sense in relation to the quality attribute description or if it is a false positive.

Data:

Quality Attribute: Testability
Attribute Description: The ease of validating software functionality through testing, enabling fault detection. This includes controlling and observing the system’s state, reducing complexity, and facilitating the creation of test cases and oracles.
Content: (settings)=. ## Settings. ```{eval-rst}; .. currentmodule:: scanpy; ```. A convenience function for setting some default {obj}`matplotlib.rcParams` and a; high-resolution jupyter display backend useful for use in notebooks. ```{eval-rst}; .. autosummary::; :nosignatures:; :toctree: ../generated/. set_figure_params; ```. An instance of the {class}`~scanpy._settings.ScanpyConfig` is available as `scanpy.settings` and allows configuring Scanpy. ```{eval-rst}; .. autosummary::; :nosignatures:; :toctree: ../generated/. _settings.ScanpyConfig; ```. Some selected settings are discussed in the following. Influence the global behavior of plotting functions. In non-interactive scripts,; you'd usually want to set `settings.autoshow` to `False`. % no :toctree: here because they are linked under the class. ```{eval-rst}; .. autosummary::; :nosignatures:. ~_settings.ScanpyConfig.autoshow; ~_settings.ScanpyConfig.autosave; ```. The default directories for saving figures, caching files and storing datasets. ```{eval-rst}; .. autosummary::; :nosignatures:. ~_settings.ScanpyConfig.figdir; ~_settings.ScanpyConfig.cachedir; ~_settings.ScanpyConfig.datasetdir; ```. The verbosity of logging output, where verbosity levels have the following; meaning: 0='error', 1='warning', 2='info', 3='hint', 4=more details, 5=even more; details, etc. ```{eval-rst}; .. autosummary::; :nosignatures:. ~_settings.ScanpyConfig.verbosity; ```. Print versions of packages that might influence numerical results. ```{eval-rst}; .. autosummary::; :nosignatures:; :toctree: ../generated/. logging.print_header; logging.print_versions. ```; 

Instructions: 
1. Analyze the content and the attribute description.
2. Determine if the content accurately reflects the intended quality attribute in this context.
3. If it does, label it as `true_positive: true`; if not, mark it as a `true_positive: false`.
4. If the content consists only of logs with no other text, mark it as a `true_positive: false`. 
4. If the content partially consists of logs, focus on analyzing remaining text. 
5. Add `reasoning` why the content is a true or false positive.
",False,"The content provided discusses settings and configuration options in scanpy, including logging verbosity and package versions which are part of the system's configuration. While testability concerns aspects like testing efficiency and fault detection, this content does not relate to any specific testing methodology, test cases, or mechanisms for validation. Instead, it deals with how the software is configured and set up, which is more about system configuration rather than software quality attributes like testability."
Testability,"(tests)=. # Tests. Possibly the most important part of contributing to any open source package is the test suite.; Implementations may change, but the only way we can know the code is working before making a release is the test suite. ## Running the tests. We use [pytest](https://docs.pytest.org/en/stable/) to test scanpy.; To run the tests first make sure you have the required dependencies (`pip install -e "".[test,dev]""`), then run `pytest` from the root of the repository. It can take a while to run the whole test suite. There are a few ways to cut down on this while working on a PR:. 1. Only run a subset of the tests. This can be done with the `-k` argument from pytest (e.g. `pytest -k test_plotting.py` or `pytest -k ""test_umap*""`; 2. Run the tests in parallel. If you install the pytest extension [pytest-xdist](https://github.com/pytest-dev/pytest-xdist) you can run tests in parallel with the `--numprocesses` argument to pytest (e.g. `pytest -n 8`). ### Miscellaneous tips. - A lot of warnings can be thrown while running the test suite. It's often easier to read the test results with them hidden via the `--disable-pytest-warnings` argument. ## Writing tests. You can refer to the [existing test suite](https://github.com/scverse/scanpy/tree/main/scanpy/tests) for examples.; If you haven't written tests before, Software Carpentry has an [in-depth guide](https://katyhuff.github.io/2016-07-11-scipy/testing/01-basics.html) on the topic. We highly recommend using [Test Driven Development](https://en.wikipedia.org/wiki/Test-driven_development) when contributing code.; This not only ensures you have tests written, it often makes implementation easier since you start out with a specification for your function. Consider parameterizing your tests using the `pytest.mark.parameterize` and `pytest.fixture` decorators.; Documentation on these can be found [here](https://docs.pytest.org/en/stable/fixture.html), but we'd also recommend searching our test suite for existing usage. ###",test,MatchSource.DOCS,scverse,scanpy,1.10.2,https://github.com/scverse/scanpy/tree/1.10.2/docs/dev/testing.md:1,tests,1,docs/dev/testing.md,https://scanpy.readthedocs.io,https://github.com/scverse/scanpy/tree/1.10.2/docs/dev/testing.md,11,['test'],"['test', 'tests']","The ease of validating software functionality through testing, enabling fault detection. This includes controlling and observing the system’s state, reducing complexity, and facilitating the creation of test cases and oracles.","
You are an expert in evaluating and categorizing quality attributes in software engineering. You possess the necessary skills to distinguish sentences that clearly relate to a given quality attribute from those that do not. 

Evaluate whether the content accurately aligns with its associated quality attribute, given the context provided. Your goal is to determine if the content makes sense in relation to the quality attribute description or if it is a false positive.

Data:

Quality Attribute: Testability
Attribute Description: The ease of validating software functionality through testing, enabling fault detection. This includes controlling and observing the system’s state, reducing complexity, and facilitating the creation of test cases and oracles.
Content: (tests)=. # Tests. Possibly the most important part of contributing to any open source package is the test suite.; Implementations may change, but the only way we can know the code is working before making a release is the test suite. ## Running the tests. We use [pytest](https://docs.pytest.org/en/stable/) to test scanpy.; To run the tests first make sure you have the required dependencies (`pip install -e "".[test,dev]""`), then run `pytest` from the root of the repository. It can take a while to run the whole test suite. There are a few ways to cut down on this while working on a PR:. 1. Only run a subset of the tests. This can be done with the `-k` argument from pytest (e.g. `pytest -k test_plotting.py` or `pytest -k ""test_umap*""`; 2. Run the tests in parallel. If you install the pytest extension [pytest-xdist](https://github.com/pytest-dev/pytest-xdist) you can run tests in parallel with the `--numprocesses` argument to pytest (e.g. `pytest -n 8`). ### Miscellaneous tips. - A lot of warnings can be thrown while running the test suite. It's often easier to read the test results with them hidden via the `--disable-pytest-warnings` argument. ## Writing tests. You can refer to the [existing test suite](https://github.com/scverse/scanpy/tree/main/scanpy/tests) for examples.; If you haven't written tests before, Software Carpentry has an [in-depth guide](https://katyhuff.github.io/2016-07-11-scipy/testing/01-basics.html) on the topic. We highly recommend using [Test Driven Development](https://en.wikipedia.org/wiki/Test-driven_development) when contributing code.; This not only ensures you have tests written, it often makes implementation easier since you start out with a specification for your function. Consider parameterizing your tests using the `pytest.mark.parameterize` and `pytest.fixture` decorators.; Documentation on these can be found [here](https://docs.pytest.org/en/stable/fixture.html), but we'd also recommend searching our test suite for existing usage. ###

Instructions: 
1. Analyze the content and the attribute description.
2. Determine if the content accurately reflects the intended quality attribute in this context.
3. If it does, label it as `true_positive: true`; if not, mark it as a `true_positive: false`.
4. If the content consists only of logs with no other text, mark it as a `true_positive: false`. 
4. If the content partially consists of logs, focus on analyzing remaining text. 
5. Add `reasoning` why the content is a true or false positive.
",True,"The content discusses running tests using pytest and provides instructions on how to set up and run tests, which directly relates to testability by ensuring that software functionality can be validated through testing."
Testability,", the base output should remain the same either way.; - Are you optimizing a method? Check that it's results are the same as a gold standard implementation. ### Performance. It's more important that you're accurately testing the code works than it is that test suite runs quickly.; That said, it's nice when the test suite runs fast. You can check how long tests take to run by passing `--durations=0` argument to `pytest`.; Hopefully your new tests won't show up on top!; Some approaches to this include:. - Is there a common setup/ computation happening in each test? Consider caching these in a [scoped test fixture](https://docs.pytest.org/en/stable/fixture.html#sharing-test-data).; - Is the behaviour you're testing for dependent on the size of the data? If not, consider reducing it. ### Plotting tests. While computational functions will return arrays and values, it can be harder to work with the output of plotting functions. To make this easier, we use the `image_comparer` fixture for comparing plotting results (search the test suite for example usage).; This is used to check that generated plots look the same as they did previously.; Reference images (the expected output) are stored as `expected.png` to relevant tests directory under `scanpy/tests/_images`.; When run, the test suite will generate `actual.png` files for each check.; These files are compared, and if the `actual` plot differs from the reference plot, a `diff` of the images is also generated.; Paths for all these files will be reported when a test fails, and images for failed plots can be viewed via the :doc:`CI interface <ci>`. A common gotcha here is that plots often change slightly on different machines/ OSs.; `scanpy`'s test suite sets a number of environment variables to ensure as similar of plots as possible.; When adding new reference plots, the recommended workflow is to write the test as though an expected result already exists, run it once to generate the output, then move that output to the refe",test,MatchSource.DOCS,scverse,scanpy,1.10.2,https://github.com/scverse/scanpy/tree/1.10.2/docs/dev/testing.md:3904,test,3904,docs/dev/testing.md,https://scanpy.readthedocs.io,https://github.com/scverse/scanpy/tree/1.10.2/docs/dev/testing.md,1,['test'],['test'],"The ease of validating software functionality through testing, enabling fault detection. This includes controlling and observing the system’s state, reducing complexity, and facilitating the creation of test cases and oracles.","
You are an expert in evaluating and categorizing quality attributes in software engineering. You possess the necessary skills to distinguish sentences that clearly relate to a given quality attribute from those that do not. 

Evaluate whether the content accurately aligns with its associated quality attribute, given the context provided. Your goal is to determine if the content makes sense in relation to the quality attribute description or if it is a false positive.

Data:

Quality Attribute: Testability
Attribute Description: The ease of validating software functionality through testing, enabling fault detection. This includes controlling and observing the system’s state, reducing complexity, and facilitating the creation of test cases and oracles.
Content: , the base output should remain the same either way.; - Are you optimizing a method? Check that it's results are the same as a gold standard implementation. ### Performance. It's more important that you're accurately testing the code works than it is that test suite runs quickly.; That said, it's nice when the test suite runs fast. You can check how long tests take to run by passing `--durations=0` argument to `pytest`.; Hopefully your new tests won't show up on top!; Some approaches to this include:. - Is there a common setup/ computation happening in each test? Consider caching these in a [scoped test fixture](https://docs.pytest.org/en/stable/fixture.html#sharing-test-data).; - Is the behaviour you're testing for dependent on the size of the data? If not, consider reducing it. ### Plotting tests. While computational functions will return arrays and values, it can be harder to work with the output of plotting functions. To make this easier, we use the `image_comparer` fixture for comparing plotting results (search the test suite for example usage).; This is used to check that generated plots look the same as they did previously.; Reference images (the expected output) are stored as `expected.png` to relevant tests directory under `scanpy/tests/_images`.; When run, the test suite will generate `actual.png` files for each check.; These files are compared, and if the `actual` plot differs from the reference plot, a `diff` of the images is also generated.; Paths for all these files will be reported when a test fails, and images for failed plots can be viewed via the :doc:`CI interface <ci>`. A common gotcha here is that plots often change slightly on different machines/ OSs.; `scanpy`'s test suite sets a number of environment variables to ensure as similar of plots as possible.; When adding new reference plots, the recommended workflow is to write the test as though an expected result already exists, run it once to generate the output, then move that output to the refe

Instructions: 
1. Analyze the content and the attribute description.
2. Determine if the content accurately reflects the intended quality attribute in this context.
3. If it does, label it as `true_positive: true`; if not, mark it as a `true_positive: false`.
4. If the content consists only of logs with no other text, mark it as a `true_positive: false`. 
4. If the content partially consists of logs, focus on analyzing remaining text. 
5. Add `reasoning` why the content is a true or false positive.
",True,"The content discusses optimizing methods for performance and ensuring test accuracy, which relates to the overall system's testability as it ensures that tests are reliable and function correctly. It also talks about caching test data and reducing computation in tests, which helps in making the software more testable. The mention of using fixtures like `image_comparer` for comparing plots aids in verifying outputs, contributing to testability. Additionally, the reference images stored for comparison directly tie into ensuring that the system behaves as expected, thus aligning with Testability."
Testability,", trajectory inference and differential; expression testing. The Python-based implementation efficiently deals with; datasets of more than one million cells. Discuss usage on the scverse [Discourse][]. Read the [documentation][].; If you'd like to contribute by opening an issue or creating a pull request, please take a look at our [contribution guide][]. [anndata]: https://anndata.readthedocs.io; [discourse]: https://discourse.scverse.org/; [documentation]: https://scanpy.readthedocs.io. [//]: # (numfocus-fiscal-sponsor-attribution). scanpy is part of the scverse project ([website](https://scverse.org), [governance](https://scverse.org/about/roles)) and is fiscally sponsored by [NumFOCUS](https://numfocus.org/).; If you like scverse and want to support our mission, please consider making a [donation](https://numfocus.org/donate-to-scverse) to support our efforts. <div align=""center"">; <a href=""https://numfocus.org/project/scverse"">; <img; src=""https://raw.githubusercontent.com/numfocus/templates/master/images/numfocus-logo.png""; width=""200""; >; </a>; </div>. ## Citation. If you use `scanpy` in your work, please cite the `scanpy` publication as follows:. > **SCANPY: large-scale single-cell gene expression data analysis**; >; > F. Alexander Wolf, Philipp Angerer, Fabian J. Theis; >; > _Genome Biology_ 2018 Feb 06. doi: [10.1186/s13059-017-1382-0](https://doi.org/10.1186/s13059-017-1382-0). You can cite the scverse publication as follows:. > **The scverse project provides a computational ecosystem for single-cell omics data analysis**; >; > Isaac Virshup, Danila Bredikhin, Lukas Heumos, Giovanni Palla, Gregor Sturm, Adam Gayoso, Ilia Kats, Mikaela Koutrouli, Scverse Community, Bonnie Berger, Dana Pe’er, Aviv Regev, Sarah A. Teichmann, Francesca Finotello, F. Alexander Wolf, Nir Yosef, Oliver Stegle & Fabian J. Theis; >; > _Nat Biotechnol._ 2023 Apr 10. doi: [10.1038/s41587-023-01733-8](https://doi.org/10.1038/s41587-023-01733-8). [contribution guide]: CONTRIBUTING.md; ",log,MatchSource.DOCS,scverse,scanpy,1.10.2,https://github.com/scverse/scanpy/tree/1.10.2/README.md:2365,logo,2365,README.md,https://scanpy.readthedocs.io,https://github.com/scverse/scanpy/tree/1.10.2/README.md,1,['log'],['logo'],"The ease of validating software functionality through testing, enabling fault detection. This includes controlling and observing the system’s state, reducing complexity, and facilitating the creation of test cases and oracles.","
You are an expert in evaluating and categorizing quality attributes in software engineering. You possess the necessary skills to distinguish sentences that clearly relate to a given quality attribute from those that do not. 

Evaluate whether the content accurately aligns with its associated quality attribute, given the context provided. Your goal is to determine if the content makes sense in relation to the quality attribute description or if it is a false positive.

Data:

Quality Attribute: Testability
Attribute Description: The ease of validating software functionality through testing, enabling fault detection. This includes controlling and observing the system’s state, reducing complexity, and facilitating the creation of test cases and oracles.
Content: , trajectory inference and differential; expression testing. The Python-based implementation efficiently deals with; datasets of more than one million cells. Discuss usage on the scverse [Discourse][]. Read the [documentation][].; If you'd like to contribute by opening an issue or creating a pull request, please take a look at our [contribution guide][]. [anndata]: https://anndata.readthedocs.io; [discourse]: https://discourse.scverse.org/; [documentation]: https://scanpy.readthedocs.io. [//]: # (numfocus-fiscal-sponsor-attribution). scanpy is part of the scverse project ([website](https://scverse.org), [governance](https://scverse.org/about/roles)) and is fiscally sponsored by [NumFOCUS](https://numfocus.org/).; If you like scverse and want to support our mission, please consider making a [donation](https://numfocus.org/donate-to-scverse) to support our efforts. <div align=""center"">; <a href=""https://numfocus.org/project/scverse"">; <img; src=""https://raw.githubusercontent.com/numfocus/templates/master/images/numfocus-logo.png""; width=""200""; >; </a>; </div>. ## Citation. If you use `scanpy` in your work, please cite the `scanpy` publication as follows:. > **SCANPY: large-scale single-cell gene expression data analysis**; >; > F. Alexander Wolf, Philipp Angerer, Fabian J. Theis; >; > _Genome Biology_ 2018 Feb 06. doi: [10.1186/s13059-017-1382-0](https://doi.org/10.1186/s13059-017-1382-0). You can cite the scverse publication as follows:. > **The scverse project provides a computational ecosystem for single-cell omics data analysis**; >; > Isaac Virshup, Danila Bredikhin, Lukas Heumos, Giovanni Palla, Gregor Sturm, Adam Gayoso, Ilia Kats, Mikaela Koutrouli, Scverse Community, Bonnie Berger, Dana Pe’er, Aviv Regev, Sarah A. Teichmann, Francesca Finotello, F. Alexander Wolf, Nir Yosef, Oliver Stegle & Fabian J. Theis; >; > _Nat Biotechnol._ 2023 Apr 10. doi: [10.1038/s41587-023-01733-8](https://doi.org/10.1038/s41587-023-01733-8). [contribution guide]: CONTRIBUTING.md; 

Instructions: 
1. Analyze the content and the attribute description.
2. Determine if the content accurately reflects the intended quality attribute in this context.
3. If it does, label it as `true_positive: true`; if not, mark it as a `true_positive: false`.
4. If the content consists only of logs with no other text, mark it as a `true_positive: false`. 
4. If the content partially consists of logs, focus on analyzing remaining text. 
5. Add `reasoning` why the content is a true or false positive.
",False,"The provided content discusses scverse and scanpy, which are related to single-cell gene expression analysis. The Testability quality attribute refers to the ease of testing software functionality. While the content does talk about data analysis tools, it doesn't directly address testing processes or the ability to validate software functionality. Therefore, this is a false positive for Testability."
Testability,". It's often easier to read the test results with them hidden via the `--disable-pytest-warnings` argument. ## Writing tests. You can refer to the [existing test suite](https://github.com/scverse/scanpy/tree/main/scanpy/tests) for examples.; If you haven't written tests before, Software Carpentry has an [in-depth guide](https://katyhuff.github.io/2016-07-11-scipy/testing/01-basics.html) on the topic. We highly recommend using [Test Driven Development](https://en.wikipedia.org/wiki/Test-driven_development) when contributing code.; This not only ensures you have tests written, it often makes implementation easier since you start out with a specification for your function. Consider parameterizing your tests using the `pytest.mark.parameterize` and `pytest.fixture` decorators.; Documentation on these can be found [here](https://docs.pytest.org/en/stable/fixture.html), but we'd also recommend searching our test suite for existing usage. ### What to test. If you're not sure what to tests about your function, some ideas include:. - Are there arguments which conflict with each other? Check that if they are both passed, the function throws an error (see `pytest.raises` [in the pytest docs](https://docs.pytest.org/en/stable/assert.html#assertions-about-expected-exceptions).; - Are there input values which should cause your function to error?; - Did you add a helpful error message that recommends better outputs? Check that that error message is actually thrown.; - Can you place bounds on the values returned by your function?; - Are there different input values which should generate equivalent output (e.g. if an array is sparse or dense)?; - Do you have arguments which should have orthogonal effects on the output? Check that they are independent. For example, if there is a flag for extended output, the base output should remain the same either way.; - Are you optimizing a method? Check that it's results are the same as a gold standard implementation. ### Performance. It's more i",test,MatchSource.DOCS,scverse,scanpy,1.10.2,https://github.com/scverse/scanpy/tree/1.10.2/docs/dev/testing.md:2043,tests,2043,docs/dev/testing.md,https://scanpy.readthedocs.io,https://github.com/scverse/scanpy/tree/1.10.2/docs/dev/testing.md,1,['test'],['tests'],"The ease of validating software functionality through testing, enabling fault detection. This includes controlling and observing the system’s state, reducing complexity, and facilitating the creation of test cases and oracles.","
You are an expert in evaluating and categorizing quality attributes in software engineering. You possess the necessary skills to distinguish sentences that clearly relate to a given quality attribute from those that do not. 

Evaluate whether the content accurately aligns with its associated quality attribute, given the context provided. Your goal is to determine if the content makes sense in relation to the quality attribute description or if it is a false positive.

Data:

Quality Attribute: Testability
Attribute Description: The ease of validating software functionality through testing, enabling fault detection. This includes controlling and observing the system’s state, reducing complexity, and facilitating the creation of test cases and oracles.
Content: . It's often easier to read the test results with them hidden via the `--disable-pytest-warnings` argument. ## Writing tests. You can refer to the [existing test suite](https://github.com/scverse/scanpy/tree/main/scanpy/tests) for examples.; If you haven't written tests before, Software Carpentry has an [in-depth guide](https://katyhuff.github.io/2016-07-11-scipy/testing/01-basics.html) on the topic. We highly recommend using [Test Driven Development](https://en.wikipedia.org/wiki/Test-driven_development) when contributing code.; This not only ensures you have tests written, it often makes implementation easier since you start out with a specification for your function. Consider parameterizing your tests using the `pytest.mark.parameterize` and `pytest.fixture` decorators.; Documentation on these can be found [here](https://docs.pytest.org/en/stable/fixture.html), but we'd also recommend searching our test suite for existing usage. ### What to test. If you're not sure what to tests about your function, some ideas include:. - Are there arguments which conflict with each other? Check that if they are both passed, the function throws an error (see `pytest.raises` [in the pytest docs](https://docs.pytest.org/en/stable/assert.html#assertions-about-expected-exceptions).; - Are there input values which should cause your function to error?; - Did you add a helpful error message that recommends better outputs? Check that that error message is actually thrown.; - Can you place bounds on the values returned by your function?; - Are there different input values which should generate equivalent output (e.g. if an array is sparse or dense)?; - Do you have arguments which should have orthogonal effects on the output? Check that they are independent. For example, if there is a flag for extended output, the base output should remain the same either way.; - Are you optimizing a method? Check that it's results are the same as a gold standard implementation. ### Performance. It's more i

Instructions: 
1. Analyze the content and the attribute description.
2. Determine if the content accurately reflects the intended quality attribute in this context.
3. If it does, label it as `true_positive: true`; if not, mark it as a `true_positive: false`.
4. If the content consists only of logs with no other text, mark it as a `true_positive: false`. 
4. If the content partially consists of logs, focus on analyzing remaining text. 
5. Add `reasoning` why the content is a true or false positive.
",True,"The content discusses test writing and best practices for contributing code, including using existing test suites, recommended tools like pytest fixtures, and examples of what to test. This aligns with Testability as it involves creating and validating tests which ensure software functionality. The mention of performance in the end may be a false positive but the majority of the content is directly related to testing practices."
Testability,"Contributing; ============. Contributions to Scanpy are highly welcome!. Before filing an issue; ----------------------; * Search the repository (also google) to see if someone has already reported the same issue.; This allows contributors to spend less time responding to issues, and more time adding new features!; * Please provide a minimal complete verifiable example for any bug.; If you're not sure what this means, check out; [this blog post](https://matthewrocklin.com/minimal-bug-reports); by Matthew Rocklin or [this definition](https://stackoverflow.com/help/mcve) from StackOverflow.; * Let us know about your environment. Environment information is available via: `sc.logging.print_versions()`. Contributing code; -----------------. We love code contributions!; If you're interested in contributing code, please take a look over the [contribution guide](https://scanpy.readthedocs.io/en/latest/dev/index.html) in the main documentation.; ",log,MatchSource.DOCS,scverse,scanpy,1.10.2,https://github.com/scverse/scanpy/tree/1.10.2/CONTRIBUTING.md:681,logging,681,CONTRIBUTING.md,https://scanpy.readthedocs.io,https://github.com/scverse/scanpy/tree/1.10.2/CONTRIBUTING.md,1,['log'],['logging'],"The ease of validating software functionality through testing, enabling fault detection. This includes controlling and observing the system’s state, reducing complexity, and facilitating the creation of test cases and oracles.","
You are an expert in evaluating and categorizing quality attributes in software engineering. You possess the necessary skills to distinguish sentences that clearly relate to a given quality attribute from those that do not. 

Evaluate whether the content accurately aligns with its associated quality attribute, given the context provided. Your goal is to determine if the content makes sense in relation to the quality attribute description or if it is a false positive.

Data:

Quality Attribute: Testability
Attribute Description: The ease of validating software functionality through testing, enabling fault detection. This includes controlling and observing the system’s state, reducing complexity, and facilitating the creation of test cases and oracles.
Content: Contributing; ============. Contributions to Scanpy are highly welcome!. Before filing an issue; ----------------------; * Search the repository (also google) to see if someone has already reported the same issue.; This allows contributors to spend less time responding to issues, and more time adding new features!; * Please provide a minimal complete verifiable example for any bug.; If you're not sure what this means, check out; [this blog post](https://matthewrocklin.com/minimal-bug-reports); by Matthew Rocklin or [this definition](https://stackoverflow.com/help/mcve) from StackOverflow.; * Let us know about your environment. Environment information is available via: `sc.logging.print_versions()`. Contributing code; -----------------. We love code contributions!; If you're interested in contributing code, please take a look over the [contribution guide](https://scanpy.readthedocs.io/en/latest/dev/index.html) in the main documentation.; 

Instructions: 
1. Analyze the content and the attribute description.
2. Determine if the content accurately reflects the intended quality attribute in this context.
3. If it does, label it as `true_positive: true`; if not, mark it as a `true_positive: false`.
4. If the content consists only of logs with no other text, mark it as a `true_positive: false`. 
4. If the content partially consists of logs, focus on analyzing remaining text. 
5. Add `reasoning` why the content is a true or false positive.
",False,"The content provided discusses contributing to Scanpy and includes instructions for contributors, such as searching existing issues, providing minimal examples, and sharing environment information. While this seems related to code quality and contribution processes, it does not directly address testability aspects like testing, fault detection, or creating test cases. Instead, it focuses on issue reporting and code contributions, which are more about software development practices rather than the specific quality attribute of Testability."
Testability,"[![Stars](https://img.shields.io/github/stars/scverse/scanpy?style=flat&logo=GitHub&color=yellow)](https://github.com/scverse/scanpy/stargazers); [![PyPI](https://img.shields.io/pypi/v/scanpy?logo=PyPI)](https://pypi.org/project/scanpy); [![Downloads](https://static.pepy.tech/badge/scanpy)](https://pepy.tech/project/scanpy); [![Conda](https://img.shields.io/conda/dn/conda-forge/scanpy?logo=Anaconda)](https://anaconda.org/conda-forge/scanpy); [![Docs](https://readthedocs.com/projects/icb-scanpy/badge/?version=latest)](https://scanpy.readthedocs.io); [![Build Status](https://dev.azure.com/scverse/scanpy/_apis/build/status/scverse.scanpy?branchName=main)](https://dev.azure.com/scverse/scanpy/_build); [![Discourse topics](https://img.shields.io/discourse/posts?color=yellow&logo=discourse&server=https%3A%2F%2Fdiscourse.scverse.org)](https://discourse.scverse.org/); [![Chat](https://img.shields.io/badge/zulip-join_chat-%2367b08f.svg)](https://scverse.zulipchat.com); [![Powered by NumFOCUS](https://img.shields.io/badge/powered%20by-NumFOCUS-orange.svg?style=flat&colorA=E1523D&colorB=007D8A)](https://numfocus.org/). # Scanpy – Single-Cell Analysis in Python. Scanpy is a scalable toolkit for analyzing single-cell gene expression data; built jointly with [anndata][]. It includes; preprocessing, visualization, clustering, trajectory inference and differential; expression testing. The Python-based implementation efficiently deals with; datasets of more than one million cells. Discuss usage on the scverse [Discourse][]. Read the [documentation][].; If you'd like to contribute by opening an issue or creating a pull request, please take a look at our [contribution guide][]. [anndata]: https://anndata.readthedocs.io; [discourse]: https://discourse.scverse.org/; [documentation]: https://scanpy.readthedocs.io. [//]: # (numfocus-fiscal-sponsor-attribution). scanpy is part of the scverse project ([website](https://scverse.org), [governance](https://scverse.org/about/roles)) and is fisca",log,MatchSource.DOCS,scverse,scanpy,1.10.2,https://github.com/scverse/scanpy/tree/1.10.2/README.md:72,logo,72,README.md,https://scanpy.readthedocs.io,https://github.com/scverse/scanpy/tree/1.10.2/README.md,4,['log'],['logo'],"The ease of validating software functionality through testing, enabling fault detection. This includes controlling and observing the system’s state, reducing complexity, and facilitating the creation of test cases and oracles.","
You are an expert in evaluating and categorizing quality attributes in software engineering. You possess the necessary skills to distinguish sentences that clearly relate to a given quality attribute from those that do not. 

Evaluate whether the content accurately aligns with its associated quality attribute, given the context provided. Your goal is to determine if the content makes sense in relation to the quality attribute description or if it is a false positive.

Data:

Quality Attribute: Testability
Attribute Description: The ease of validating software functionality through testing, enabling fault detection. This includes controlling and observing the system’s state, reducing complexity, and facilitating the creation of test cases and oracles.
Content: [![Stars](https://img.shields.io/github/stars/scverse/scanpy?style=flat&logo=GitHub&color=yellow)](https://github.com/scverse/scanpy/stargazers); [![PyPI](https://img.shields.io/pypi/v/scanpy?logo=PyPI)](https://pypi.org/project/scanpy); [![Downloads](https://static.pepy.tech/badge/scanpy)](https://pepy.tech/project/scanpy); [![Conda](https://img.shields.io/conda/dn/conda-forge/scanpy?logo=Anaconda)](https://anaconda.org/conda-forge/scanpy); [![Docs](https://readthedocs.com/projects/icb-scanpy/badge/?version=latest)](https://scanpy.readthedocs.io); [![Build Status](https://dev.azure.com/scverse/scanpy/_apis/build/status/scverse.scanpy?branchName=main)](https://dev.azure.com/scverse/scanpy/_build); [![Discourse topics](https://img.shields.io/discourse/posts?color=yellow&logo=discourse&server=https%3A%2F%2Fdiscourse.scverse.org)](https://discourse.scverse.org/); [![Chat](https://img.shields.io/badge/zulip-join_chat-%2367b08f.svg)](https://scverse.zulipchat.com); [![Powered by NumFOCUS](https://img.shields.io/badge/powered%20by-NumFOCUS-orange.svg?style=flat&colorA=E1523D&colorB=007D8A)](https://numfocus.org/). # Scanpy – Single-Cell Analysis in Python. Scanpy is a scalable toolkit for analyzing single-cell gene expression data; built jointly with [anndata][]. It includes; preprocessing, visualization, clustering, trajectory inference and differential; expression testing. The Python-based implementation efficiently deals with; datasets of more than one million cells. Discuss usage on the scverse [Discourse][]. Read the [documentation][].; If you'd like to contribute by opening an issue or creating a pull request, please take a look at our [contribution guide][]. [anndata]: https://anndata.readthedocs.io; [discourse]: https://discourse.scverse.org/; [documentation]: https://scanpy.readthedocs.io. [//]: # (numfocus-fiscal-sponsor-attribution). scanpy is part of the scverse project ([website](https://scverse.org), [governance](https://scverse.org/about/roles)) and is fisca

Instructions: 
1. Analyze the content and the attribute description.
2. Determine if the content accurately reflects the intended quality attribute in this context.
3. If it does, label it as `true_positive: true`; if not, mark it as a `true_positive: false`.
4. If the content consists only of logs with no other text, mark it as a `true_positive: false`. 
4. If the content partially consists of logs, focus on analyzing remaining text. 
5. Add `reasoning` why the content is a true or false positive.
",False,"The content provided is not directly discussing testability but instead is about the software project itself, such as its features, installation methods, and community resources. There's no indication that it relates to testing methods, test cases, or validation processes which are key aspects of testability. Therefore, the content does not align with the Testability quality attribute."
Testability,"[pytest](https://docs.pytest.org/en/stable/) to test scanpy.; To run the tests first make sure you have the required dependencies (`pip install -e "".[test,dev]""`), then run `pytest` from the root of the repository. It can take a while to run the whole test suite. There are a few ways to cut down on this while working on a PR:. 1. Only run a subset of the tests. This can be done with the `-k` argument from pytest (e.g. `pytest -k test_plotting.py` or `pytest -k ""test_umap*""`; 2. Run the tests in parallel. If you install the pytest extension [pytest-xdist](https://github.com/pytest-dev/pytest-xdist) you can run tests in parallel with the `--numprocesses` argument to pytest (e.g. `pytest -n 8`). ### Miscellaneous tips. - A lot of warnings can be thrown while running the test suite. It's often easier to read the test results with them hidden via the `--disable-pytest-warnings` argument. ## Writing tests. You can refer to the [existing test suite](https://github.com/scverse/scanpy/tree/main/scanpy/tests) for examples.; If you haven't written tests before, Software Carpentry has an [in-depth guide](https://katyhuff.github.io/2016-07-11-scipy/testing/01-basics.html) on the topic. We highly recommend using [Test Driven Development](https://en.wikipedia.org/wiki/Test-driven_development) when contributing code.; This not only ensures you have tests written, it often makes implementation easier since you start out with a specification for your function. Consider parameterizing your tests using the `pytest.mark.parameterize` and `pytest.fixture` decorators.; Documentation on these can be found [here](https://docs.pytest.org/en/stable/fixture.html), but we'd also recommend searching our test suite for existing usage. ### What to test. If you're not sure what to tests about your function, some ideas include:. - Are there arguments which conflict with each other? Check that if they are both passed, the function throws an error (see `pytest.raises` [in the pytest docs](https://docs",test,MatchSource.DOCS,scverse,scanpy,1.10.2,https://github.com/scverse/scanpy/tree/1.10.2/docs/dev/testing.md:1272,tests,1272,docs/dev/testing.md,https://scanpy.readthedocs.io,https://github.com/scverse/scanpy/tree/1.10.2/docs/dev/testing.md,1,['test'],['tests'],"The ease of validating software functionality through testing, enabling fault detection. This includes controlling and observing the system’s state, reducing complexity, and facilitating the creation of test cases and oracles.","
You are an expert in evaluating and categorizing quality attributes in software engineering. You possess the necessary skills to distinguish sentences that clearly relate to a given quality attribute from those that do not. 

Evaluate whether the content accurately aligns with its associated quality attribute, given the context provided. Your goal is to determine if the content makes sense in relation to the quality attribute description or if it is a false positive.

Data:

Quality Attribute: Testability
Attribute Description: The ease of validating software functionality through testing, enabling fault detection. This includes controlling and observing the system’s state, reducing complexity, and facilitating the creation of test cases and oracles.
Content: [pytest](https://docs.pytest.org/en/stable/) to test scanpy.; To run the tests first make sure you have the required dependencies (`pip install -e "".[test,dev]""`), then run `pytest` from the root of the repository. It can take a while to run the whole test suite. There are a few ways to cut down on this while working on a PR:. 1. Only run a subset of the tests. This can be done with the `-k` argument from pytest (e.g. `pytest -k test_plotting.py` or `pytest -k ""test_umap*""`; 2. Run the tests in parallel. If you install the pytest extension [pytest-xdist](https://github.com/pytest-dev/pytest-xdist) you can run tests in parallel with the `--numprocesses` argument to pytest (e.g. `pytest -n 8`). ### Miscellaneous tips. - A lot of warnings can be thrown while running the test suite. It's often easier to read the test results with them hidden via the `--disable-pytest-warnings` argument. ## Writing tests. You can refer to the [existing test suite](https://github.com/scverse/scanpy/tree/main/scanpy/tests) for examples.; If you haven't written tests before, Software Carpentry has an [in-depth guide](https://katyhuff.github.io/2016-07-11-scipy/testing/01-basics.html) on the topic. We highly recommend using [Test Driven Development](https://en.wikipedia.org/wiki/Test-driven_development) when contributing code.; This not only ensures you have tests written, it often makes implementation easier since you start out with a specification for your function. Consider parameterizing your tests using the `pytest.mark.parameterize` and `pytest.fixture` decorators.; Documentation on these can be found [here](https://docs.pytest.org/en/stable/fixture.html), but we'd also recommend searching our test suite for existing usage. ### What to test. If you're not sure what to tests about your function, some ideas include:. - Are there arguments which conflict with each other? Check that if they are both passed, the function throws an error (see `pytest.raises` [in the pytest docs](https://docs

Instructions: 
1. Analyze the content and the attribute description.
2. Determine if the content accurately reflects the intended quality attribute in this context.
3. If it does, label it as `true_positive: true`; if not, mark it as a `true_positive: false`.
4. If the content consists only of logs with no other text, mark it as a `true_positive: false`. 
4. If the content partially consists of logs, focus on analyzing remaining text. 
5. Add `reasoning` why the content is a true or false positive.
",True,"The content discusses pytest usage for testing, including commands to run tests, tips on reducing test execution time, handling warnings, and advice on writing and parameterizing tests. All of this directly relates to making software functionality easily validated through testing, which aligns with the Testability quality attribute. The mention of pytest as a tool for testing is central to testability. Additionally, it provides practical steps for ensuring that tests can be run efficiently, facilitating fault detection by controlling and observing the system's state, thereby supporting the reduction of complexity in testing processes."
Testability,"a release is the test suite. ## Running the tests. We use [pytest](https://docs.pytest.org/en/stable/) to test scanpy.; To run the tests first make sure you have the required dependencies (`pip install -e "".[test,dev]""`), then run `pytest` from the root of the repository. It can take a while to run the whole test suite. There are a few ways to cut down on this while working on a PR:. 1. Only run a subset of the tests. This can be done with the `-k` argument from pytest (e.g. `pytest -k test_plotting.py` or `pytest -k ""test_umap*""`; 2. Run the tests in parallel. If you install the pytest extension [pytest-xdist](https://github.com/pytest-dev/pytest-xdist) you can run tests in parallel with the `--numprocesses` argument to pytest (e.g. `pytest -n 8`). ### Miscellaneous tips. - A lot of warnings can be thrown while running the test suite. It's often easier to read the test results with them hidden via the `--disable-pytest-warnings` argument. ## Writing tests. You can refer to the [existing test suite](https://github.com/scverse/scanpy/tree/main/scanpy/tests) for examples.; If you haven't written tests before, Software Carpentry has an [in-depth guide](https://katyhuff.github.io/2016-07-11-scipy/testing/01-basics.html) on the topic. We highly recommend using [Test Driven Development](https://en.wikipedia.org/wiki/Test-driven_development) when contributing code.; This not only ensures you have tests written, it often makes implementation easier since you start out with a specification for your function. Consider parameterizing your tests using the `pytest.mark.parameterize` and `pytest.fixture` decorators.; Documentation on these can be found [here](https://docs.pytest.org/en/stable/fixture.html), but we'd also recommend searching our test suite for existing usage. ### What to test. If you're not sure what to tests about your function, some ideas include:. - Are there arguments which conflict with each other? Check that if they are both passed, the function throws an err",test,MatchSource.DOCS,scverse,scanpy,1.10.2,https://github.com/scverse/scanpy/tree/1.10.2/docs/dev/testing.md:1209,test,1209,docs/dev/testing.md,https://scanpy.readthedocs.io,https://github.com/scverse/scanpy/tree/1.10.2/docs/dev/testing.md,1,['test'],['test'],"The ease of validating software functionality through testing, enabling fault detection. This includes controlling and observing the system’s state, reducing complexity, and facilitating the creation of test cases and oracles.","
You are an expert in evaluating and categorizing quality attributes in software engineering. You possess the necessary skills to distinguish sentences that clearly relate to a given quality attribute from those that do not. 

Evaluate whether the content accurately aligns with its associated quality attribute, given the context provided. Your goal is to determine if the content makes sense in relation to the quality attribute description or if it is a false positive.

Data:

Quality Attribute: Testability
Attribute Description: The ease of validating software functionality through testing, enabling fault detection. This includes controlling and observing the system’s state, reducing complexity, and facilitating the creation of test cases and oracles.
Content: a release is the test suite. ## Running the tests. We use [pytest](https://docs.pytest.org/en/stable/) to test scanpy.; To run the tests first make sure you have the required dependencies (`pip install -e "".[test,dev]""`), then run `pytest` from the root of the repository. It can take a while to run the whole test suite. There are a few ways to cut down on this while working on a PR:. 1. Only run a subset of the tests. This can be done with the `-k` argument from pytest (e.g. `pytest -k test_plotting.py` or `pytest -k ""test_umap*""`; 2. Run the tests in parallel. If you install the pytest extension [pytest-xdist](https://github.com/pytest-dev/pytest-xdist) you can run tests in parallel with the `--numprocesses` argument to pytest (e.g. `pytest -n 8`). ### Miscellaneous tips. - A lot of warnings can be thrown while running the test suite. It's often easier to read the test results with them hidden via the `--disable-pytest-warnings` argument. ## Writing tests. You can refer to the [existing test suite](https://github.com/scverse/scanpy/tree/main/scanpy/tests) for examples.; If you haven't written tests before, Software Carpentry has an [in-depth guide](https://katyhuff.github.io/2016-07-11-scipy/testing/01-basics.html) on the topic. We highly recommend using [Test Driven Development](https://en.wikipedia.org/wiki/Test-driven_development) when contributing code.; This not only ensures you have tests written, it often makes implementation easier since you start out with a specification for your function. Consider parameterizing your tests using the `pytest.mark.parameterize` and `pytest.fixture` decorators.; Documentation on these can be found [here](https://docs.pytest.org/en/stable/fixture.html), but we'd also recommend searching our test suite for existing usage. ### What to test. If you're not sure what to tests about your function, some ideas include:. - Are there arguments which conflict with each other? Check that if they are both passed, the function throws an err

Instructions: 
1. Analyze the content and the attribute description.
2. Determine if the content accurately reflects the intended quality attribute in this context.
3. If it does, label it as `true_positive: true`; if not, mark it as a `true_positive: false`.
4. If the content consists only of logs with no other text, mark it as a `true_positive: false`. 
4. If the content partially consists of logs, focus on analyzing remaining text. 
5. Add `reasoning` why the content is a true or false positive.
",True,"The content discusses setting up and running tests using pytest, which directly relates to testability. It provides instructions on how to execute tests and suggests ways to optimize test runs, such as selective execution and parallel processing. These actions contribute to the ease of testing software functionality, aligning with Testability's aim to enable fault detection through controlled system states."
Testability,"a](https://img.shields.io/conda/dn/conda-forge/scanpy?logo=Anaconda)](https://anaconda.org/conda-forge/scanpy); [![Docs](https://readthedocs.com/projects/icb-scanpy/badge/?version=latest)](https://scanpy.readthedocs.io); [![Build Status](https://dev.azure.com/scverse/scanpy/_apis/build/status/scverse.scanpy?branchName=main)](https://dev.azure.com/scverse/scanpy/_build); [![Discourse topics](https://img.shields.io/discourse/posts?color=yellow&logo=discourse&server=https%3A%2F%2Fdiscourse.scverse.org)](https://discourse.scverse.org/); [![Chat](https://img.shields.io/badge/zulip-join_chat-%2367b08f.svg)](https://scverse.zulipchat.com); [![Powered by NumFOCUS](https://img.shields.io/badge/powered%20by-NumFOCUS-orange.svg?style=flat&colorA=E1523D&colorB=007D8A)](https://numfocus.org/). # Scanpy – Single-Cell Analysis in Python. Scanpy is a scalable toolkit for analyzing single-cell gene expression data; built jointly with [anndata][]. It includes; preprocessing, visualization, clustering, trajectory inference and differential; expression testing. The Python-based implementation efficiently deals with; datasets of more than one million cells. Discuss usage on the scverse [Discourse][]. Read the [documentation][].; If you'd like to contribute by opening an issue or creating a pull request, please take a look at our [contribution guide][]. [anndata]: https://anndata.readthedocs.io; [discourse]: https://discourse.scverse.org/; [documentation]: https://scanpy.readthedocs.io. [//]: # (numfocus-fiscal-sponsor-attribution). scanpy is part of the scverse project ([website](https://scverse.org), [governance](https://scverse.org/about/roles)) and is fiscally sponsored by [NumFOCUS](https://numfocus.org/).; If you like scverse and want to support our mission, please consider making a [donation](https://numfocus.org/donate-to-scverse) to support our efforts. <div align=""center"">; <a href=""https://numfocus.org/project/scverse"">; <img; src=""https://raw.githubusercontent.com/numfocus/te",test,MatchSource.DOCS,scverse,scanpy,1.10.2,https://github.com/scverse/scanpy/tree/1.10.2/README.md:1383,testing,1383,README.md,https://scanpy.readthedocs.io,https://github.com/scverse/scanpy/tree/1.10.2/README.md,1,['test'],['testing'],"The ease of validating software functionality through testing, enabling fault detection. This includes controlling and observing the system’s state, reducing complexity, and facilitating the creation of test cases and oracles.","
You are an expert in evaluating and categorizing quality attributes in software engineering. You possess the necessary skills to distinguish sentences that clearly relate to a given quality attribute from those that do not. 

Evaluate whether the content accurately aligns with its associated quality attribute, given the context provided. Your goal is to determine if the content makes sense in relation to the quality attribute description or if it is a false positive.

Data:

Quality Attribute: Testability
Attribute Description: The ease of validating software functionality through testing, enabling fault detection. This includes controlling and observing the system’s state, reducing complexity, and facilitating the creation of test cases and oracles.
Content: a](https://img.shields.io/conda/dn/conda-forge/scanpy?logo=Anaconda)](https://anaconda.org/conda-forge/scanpy); [![Docs](https://readthedocs.com/projects/icb-scanpy/badge/?version=latest)](https://scanpy.readthedocs.io); [![Build Status](https://dev.azure.com/scverse/scanpy/_apis/build/status/scverse.scanpy?branchName=main)](https://dev.azure.com/scverse/scanpy/_build); [![Discourse topics](https://img.shields.io/discourse/posts?color=yellow&logo=discourse&server=https%3A%2F%2Fdiscourse.scverse.org)](https://discourse.scverse.org/); [![Chat](https://img.shields.io/badge/zulip-join_chat-%2367b08f.svg)](https://scverse.zulipchat.com); [![Powered by NumFOCUS](https://img.shields.io/badge/powered%20by-NumFOCUS-orange.svg?style=flat&colorA=E1523D&colorB=007D8A)](https://numfocus.org/). # Scanpy – Single-Cell Analysis in Python. Scanpy is a scalable toolkit for analyzing single-cell gene expression data; built jointly with [anndata][]. It includes; preprocessing, visualization, clustering, trajectory inference and differential; expression testing. The Python-based implementation efficiently deals with; datasets of more than one million cells. Discuss usage on the scverse [Discourse][]. Read the [documentation][].; If you'd like to contribute by opening an issue or creating a pull request, please take a look at our [contribution guide][]. [anndata]: https://anndata.readthedocs.io; [discourse]: https://discourse.scverse.org/; [documentation]: https://scanpy.readthedocs.io. [//]: # (numfocus-fiscal-sponsor-attribution). scanpy is part of the scverse project ([website](https://scverse.org), [governance](https://scverse.org/about/roles)) and is fiscally sponsored by [NumFOCUS](https://numfocus.org/).; If you like scverse and want to support our mission, please consider making a [donation](https://numfocus.org/donate-to-scverse) to support our efforts. <div align=""center"">; <a href=""https://numfocus.org/project/scverse"">; <img; src=""https://raw.githubusercontent.com/numfocus/te

Instructions: 
1. Analyze the content and the attribute description.
2. Determine if the content accurately reflects the intended quality attribute in this context.
3. If it does, label it as `true_positive: true`; if not, mark it as a `true_positive: false`.
4. If the content consists only of logs with no other text, mark it as a `true_positive: false`. 
4. If the content partially consists of logs, focus on analyzing remaining text. 
5. Add `reasoning` why the content is a true or false positive.
",False,"The content provided is not directly related to Testability. It appears to be documentation and information about a software package called 'scanpy', which is used for analyzing single-cell gene expression data. There are no mentions of testing frameworks, test cases, or methods related to testing the software's functionality. Instead, it focuses on features like preprocessing, visualization, clustering, etc., and how to use and contribute to the project. Therefore, this content does not align with Testability."
Testability,"amples to see changes, e.g.; the [seurat] example.; - upgrading scikit-learn from 0.18 to 0.19 changed the implementation of PCA,; some results might therefore look slightly different; ```. ```{rubric} Further updates; ```. - UMAP {cite:p}`McInnes2018` can serve as a first visualization of the data just as tSNE,; in contrast to tSNE, UMAP directly embeds the single-cell graph and is faster;; UMAP is also used for measuring connectivities and computing neighbors,; see {func}`~scanpy.pp.neighbors` {smaller}`A Wolf`; - graph abstraction: AGA is renamed to [PAGA](https://github.com/theislab/paga): {func}`~scanpy.tl.paga`; now,; it only measures connectivities between partitions of the single-cell graph,; pseudotime and clustering need to be computed separately via; {func}`~scanpy.tl.louvain` and {func}`~scanpy.tl.dpt`, the; connectivity measure has been improved {smaller}`A Wolf`; - logistic regression for finding marker genes; {func}`~scanpy.tl.rank_genes_groups` with parameter `method='logreg'` {smaller}`A Wolf`; - {func}`~scanpy.tl.louvain` provides a better implementation for; reclustering via `restrict_to` {smaller}`A Wolf`; - scanpy no longer modifies rcParams upon import, call; `settings.set_figure_params` to set the 'scanpy style' {smaller}`A Wolf`; - default cache directory is `./cache/`, set `settings.cachedir` to change; this; nested directories in this are avoided {smaller}`A Wolf`; - show edges in scatter plots based on graph visualization; {func}`~scanpy.tl.draw_graph` and {func}`~scanpy.tl.umap` by passing `edges=True` {smaller}`A Wolf`; - {func}`~scanpy.pp.downsample_counts` for downsampling counts {smaller}`MD Luecken`; - default `'louvain_groups'` are called `'louvain'` {smaller}`A Wolf`; - `'X_diffmap'` contains the zero component, plotting remains unchanged {smaller}`A Wolf`. [14min]: https://github.com/scverse/scanpy_usage/blob/master/170522_visualizing_one_million_cells/logfile_130K.txt; [3min]: https://nbviewer.jupyter.org/github/scverse/scanpy_us",log,MatchSource.DOCS,scverse,scanpy,1.10.2,https://github.com/scverse/scanpy/tree/1.10.2/docs/release-notes/1.0.0.md:2500,logreg,2500,docs/release-notes/1.0.0.md,https://scanpy.readthedocs.io,https://github.com/scverse/scanpy/tree/1.10.2/docs/release-notes/1.0.0.md,1,['log'],['logreg'],"The ease of validating software functionality through testing, enabling fault detection. This includes controlling and observing the system’s state, reducing complexity, and facilitating the creation of test cases and oracles.","
You are an expert in evaluating and categorizing quality attributes in software engineering. You possess the necessary skills to distinguish sentences that clearly relate to a given quality attribute from those that do not. 

Evaluate whether the content accurately aligns with its associated quality attribute, given the context provided. Your goal is to determine if the content makes sense in relation to the quality attribute description or if it is a false positive.

Data:

Quality Attribute: Testability
Attribute Description: The ease of validating software functionality through testing, enabling fault detection. This includes controlling and observing the system’s state, reducing complexity, and facilitating the creation of test cases and oracles.
Content: amples to see changes, e.g.; the [seurat] example.; - upgrading scikit-learn from 0.18 to 0.19 changed the implementation of PCA,; some results might therefore look slightly different; ```. ```{rubric} Further updates; ```. - UMAP {cite:p}`McInnes2018` can serve as a first visualization of the data just as tSNE,; in contrast to tSNE, UMAP directly embeds the single-cell graph and is faster;; UMAP is also used for measuring connectivities and computing neighbors,; see {func}`~scanpy.pp.neighbors` {smaller}`A Wolf`; - graph abstraction: AGA is renamed to [PAGA](https://github.com/theislab/paga): {func}`~scanpy.tl.paga`; now,; it only measures connectivities between partitions of the single-cell graph,; pseudotime and clustering need to be computed separately via; {func}`~scanpy.tl.louvain` and {func}`~scanpy.tl.dpt`, the; connectivity measure has been improved {smaller}`A Wolf`; - logistic regression for finding marker genes; {func}`~scanpy.tl.rank_genes_groups` with parameter `method='logreg'` {smaller}`A Wolf`; - {func}`~scanpy.tl.louvain` provides a better implementation for; reclustering via `restrict_to` {smaller}`A Wolf`; - scanpy no longer modifies rcParams upon import, call; `settings.set_figure_params` to set the 'scanpy style' {smaller}`A Wolf`; - default cache directory is `./cache/`, set `settings.cachedir` to change; this; nested directories in this are avoided {smaller}`A Wolf`; - show edges in scatter plots based on graph visualization; {func}`~scanpy.tl.draw_graph` and {func}`~scanpy.tl.umap` by passing `edges=True` {smaller}`A Wolf`; - {func}`~scanpy.pp.downsample_counts` for downsampling counts {smaller}`MD Luecken`; - default `'louvain_groups'` are called `'louvain'` {smaller}`A Wolf`; - `'X_diffmap'` contains the zero component, plotting remains unchanged {smaller}`A Wolf`. [14min]: https://github.com/scverse/scanpy_usage/blob/master/170522_visualizing_one_million_cells/logfile_130K.txt; [3min]: https://nbviewer.jupyter.org/github/scverse/scanpy_us

Instructions: 
1. Analyze the content and the attribute description.
2. Determine if the content accurately reflects the intended quality attribute in this context.
3. If it does, label it as `true_positive: true`; if not, mark it as a `true_positive: false`.
4. If the content consists only of logs with no other text, mark it as a `true_positive: false`. 
4. If the content partially consists of logs, focus on analyzing remaining text. 
5. Add `reasoning` why the content is a true or false positive.
",False,"The provided content includes several software updates and feature enhancements in scikit-learn and scanpy such as PCA implementation changes, UMAP visualization improvements, PAGA renaming, marker gene finding via logistic regression, Louvain clustering optimizations, cache directory settings, graph edge visualizations, downsampling counts, naming consistency for 'louvain_groups', and X_diffmap component handling. These updates relate to the software's functionality and performance. Testability is about the ease of testing and validating the software's behavior. While the content discusses code changes and feature improvements, it does not directly address how these changes enhance testability or provide information on testing procedures or methods. Therefore, this content does not clearly align with the quality attribute of Testability but rather describes technical updates to the software."
Testability,"anpy.pl.stacked_violin` changes:. > - Violin colors can be colored based on average gene expression as in dotplots.; > - The linewidth of the violin plots is thinner.; > - Removed the tics for the y-axis as they tend to overlap with each other. Using the style method they can be displayed if needed. ```{rubric} Additions; ```. - {func}`~anndata.concat` is now exported from scanpy, see {doc}`anndata:concatenation` for more info. {pr}`1338` {smaller}`I Virshup`; - Added highly variable gene selection strategy from Seurat v3 {pr}`1204` {smaller}`A Gayoso`; - Added [CellRank](https://github.com/theislab/cellrank/) to scanpy ecosystem {pr}`1304` {smaller}`giovp`; - Added `backup_url` param to {func}`~scanpy.read_10x_h5` {pr}`1296` {smaller}`A Gayoso`; - Allow prefix for {func}`~scanpy.read_10x_mtx` {pr}`1250` {smaller}`G Sturm`; - Optional tie correction for the `'wilcoxon'` method in {func}`~scanpy.tl.rank_genes_groups` {pr}`1330` {smaller}`S Rybakov`; - Use `sinfo` for {func}`~scanpy.logging.print_versions` and add {func}`~scanpy.logging.print_header` to do what it previously did. {pr}`1338` {smaller}`I Virshup` {pr}`1373`. ```{rubric} Bug fixes; ```. - Avoid warning in {func}`~scanpy.tl.rank_genes_groups` if 't-test' is passed {pr}`1303` {smaller}`A Wolf`; - Restrict sphinx version to \<3.1, >3.0 {pr}`1297` {smaller}`I Virshup`; - Clean up `_ranks` and fix `dendrogram` for scipy 1.5 {pr}`1290` {smaller}`S Rybakov`; - Use `.raw` to translate gene symbols if applicable {pr}`1278` {smaller}`E Rice`; - Fix `diffmap` ({issue}`1262`) {smaller}`G Eraslan`; - Fix `neighbors` in `spring_project` {issue}`1260` {smaller}`S Rybakov`; - Fix default size of dot in spatial plots {pr}`1255` {issue}`1253` {smaller}`giovp`; - Bumped version requirement of `scipy` to `scipy>1.4` to support `rmatmat` argument of `LinearOperator` {issue}`1246` {smaller}`I Virshup`; - Fix asymmetry of scores for the `'wilcoxon'` method in {func}`~scanpy.tl.rank_genes_groups` {issue}`754` {smaller}`S Rybako",log,MatchSource.DOCS,scverse,scanpy,1.10.2,https://github.com/scverse/scanpy/tree/1.10.2/docs/release-notes/1.6.0.md:3027,logging,3027,docs/release-notes/1.6.0.md,https://scanpy.readthedocs.io,https://github.com/scverse/scanpy/tree/1.10.2/docs/release-notes/1.6.0.md,1,['log'],['logging'],"The ease of validating software functionality through testing, enabling fault detection. This includes controlling and observing the system’s state, reducing complexity, and facilitating the creation of test cases and oracles.","
You are an expert in evaluating and categorizing quality attributes in software engineering. You possess the necessary skills to distinguish sentences that clearly relate to a given quality attribute from those that do not. 

Evaluate whether the content accurately aligns with its associated quality attribute, given the context provided. Your goal is to determine if the content makes sense in relation to the quality attribute description or if it is a false positive.

Data:

Quality Attribute: Testability
Attribute Description: The ease of validating software functionality through testing, enabling fault detection. This includes controlling and observing the system’s state, reducing complexity, and facilitating the creation of test cases and oracles.
Content: anpy.pl.stacked_violin` changes:. > - Violin colors can be colored based on average gene expression as in dotplots.; > - The linewidth of the violin plots is thinner.; > - Removed the tics for the y-axis as they tend to overlap with each other. Using the style method they can be displayed if needed. ```{rubric} Additions; ```. - {func}`~anndata.concat` is now exported from scanpy, see {doc}`anndata:concatenation` for more info. {pr}`1338` {smaller}`I Virshup`; - Added highly variable gene selection strategy from Seurat v3 {pr}`1204` {smaller}`A Gayoso`; - Added [CellRank](https://github.com/theislab/cellrank/) to scanpy ecosystem {pr}`1304` {smaller}`giovp`; - Added `backup_url` param to {func}`~scanpy.read_10x_h5` {pr}`1296` {smaller}`A Gayoso`; - Allow prefix for {func}`~scanpy.read_10x_mtx` {pr}`1250` {smaller}`G Sturm`; - Optional tie correction for the `'wilcoxon'` method in {func}`~scanpy.tl.rank_genes_groups` {pr}`1330` {smaller}`S Rybakov`; - Use `sinfo` for {func}`~scanpy.logging.print_versions` and add {func}`~scanpy.logging.print_header` to do what it previously did. {pr}`1338` {smaller}`I Virshup` {pr}`1373`. ```{rubric} Bug fixes; ```. - Avoid warning in {func}`~scanpy.tl.rank_genes_groups` if 't-test' is passed {pr}`1303` {smaller}`A Wolf`; - Restrict sphinx version to \<3.1, >3.0 {pr}`1297` {smaller}`I Virshup`; - Clean up `_ranks` and fix `dendrogram` for scipy 1.5 {pr}`1290` {smaller}`S Rybakov`; - Use `.raw` to translate gene symbols if applicable {pr}`1278` {smaller}`E Rice`; - Fix `diffmap` ({issue}`1262`) {smaller}`G Eraslan`; - Fix `neighbors` in `spring_project` {issue}`1260` {smaller}`S Rybakov`; - Fix default size of dot in spatial plots {pr}`1255` {issue}`1253` {smaller}`giovp`; - Bumped version requirement of `scipy` to `scipy>1.4` to support `rmatmat` argument of `LinearOperator` {issue}`1246` {smaller}`I Virshup`; - Fix asymmetry of scores for the `'wilcoxon'` method in {func}`~scanpy.tl.rank_genes_groups` {issue}`754` {smaller}`S Rybako

Instructions: 
1. Analyze the content and the attribute description.
2. Determine if the content accurately reflects the intended quality attribute in this context.
3. If it does, label it as `true_positive: true`; if not, mark it as a `true_positive: false`.
4. If the content consists only of logs with no other text, mark it as a `true_positive: false`. 
4. If the content partially consists of logs, focus on analyzing remaining text. 
5. Add `reasoning` why the content is a true or false positive.
",False,"The content provided discusses changes made to anpy.pl.stacked_violin, including modifications like coloring based on gene expression, adjusting linewidth, and removing y-axis tics. It also includes updates related to function exports, feature additions, bug fixes, etc. While this is technical in nature, it does not directly relate to testability. Testability involves the ease of validation through testing, which includes creating test cases and oracles. The content here focuses on code modifications and functional enhancements rather than aspects related to testing or fault detection."
Testability,"assed, the function throws an error (see `pytest.raises` [in the pytest docs](https://docs.pytest.org/en/stable/assert.html#assertions-about-expected-exceptions).; - Are there input values which should cause your function to error?; - Did you add a helpful error message that recommends better outputs? Check that that error message is actually thrown.; - Can you place bounds on the values returned by your function?; - Are there different input values which should generate equivalent output (e.g. if an array is sparse or dense)?; - Do you have arguments which should have orthogonal effects on the output? Check that they are independent. For example, if there is a flag for extended output, the base output should remain the same either way.; - Are you optimizing a method? Check that it's results are the same as a gold standard implementation. ### Performance. It's more important that you're accurately testing the code works than it is that test suite runs quickly.; That said, it's nice when the test suite runs fast. You can check how long tests take to run by passing `--durations=0` argument to `pytest`.; Hopefully your new tests won't show up on top!; Some approaches to this include:. - Is there a common setup/ computation happening in each test? Consider caching these in a [scoped test fixture](https://docs.pytest.org/en/stable/fixture.html#sharing-test-data).; - Is the behaviour you're testing for dependent on the size of the data? If not, consider reducing it. ### Plotting tests. While computational functions will return arrays and values, it can be harder to work with the output of plotting functions. To make this easier, we use the `image_comparer` fixture for comparing plotting results (search the test suite for example usage).; This is used to check that generated plots look the same as they did previously.; Reference images (the expected output) are stored as `expected.png` to relevant tests directory under `scanpy/tests/_images`.; When run, the test suite will ",test,MatchSource.DOCS,scverse,scanpy,1.10.2,https://github.com/scverse/scanpy/tree/1.10.2/docs/dev/testing.md:3180,test,3180,docs/dev/testing.md,https://scanpy.readthedocs.io,https://github.com/scverse/scanpy/tree/1.10.2/docs/dev/testing.md,1,['test'],['test'],"The ease of validating software functionality through testing, enabling fault detection. This includes controlling and observing the system’s state, reducing complexity, and facilitating the creation of test cases and oracles.","
You are an expert in evaluating and categorizing quality attributes in software engineering. You possess the necessary skills to distinguish sentences that clearly relate to a given quality attribute from those that do not. 

Evaluate whether the content accurately aligns with its associated quality attribute, given the context provided. Your goal is to determine if the content makes sense in relation to the quality attribute description or if it is a false positive.

Data:

Quality Attribute: Testability
Attribute Description: The ease of validating software functionality through testing, enabling fault detection. This includes controlling and observing the system’s state, reducing complexity, and facilitating the creation of test cases and oracles.
Content: assed, the function throws an error (see `pytest.raises` [in the pytest docs](https://docs.pytest.org/en/stable/assert.html#assertions-about-expected-exceptions).; - Are there input values which should cause your function to error?; - Did you add a helpful error message that recommends better outputs? Check that that error message is actually thrown.; - Can you place bounds on the values returned by your function?; - Are there different input values which should generate equivalent output (e.g. if an array is sparse or dense)?; - Do you have arguments which should have orthogonal effects on the output? Check that they are independent. For example, if there is a flag for extended output, the base output should remain the same either way.; - Are you optimizing a method? Check that it's results are the same as a gold standard implementation. ### Performance. It's more important that you're accurately testing the code works than it is that test suite runs quickly.; That said, it's nice when the test suite runs fast. You can check how long tests take to run by passing `--durations=0` argument to `pytest`.; Hopefully your new tests won't show up on top!; Some approaches to this include:. - Is there a common setup/ computation happening in each test? Consider caching these in a [scoped test fixture](https://docs.pytest.org/en/stable/fixture.html#sharing-test-data).; - Is the behaviour you're testing for dependent on the size of the data? If not, consider reducing it. ### Plotting tests. While computational functions will return arrays and values, it can be harder to work with the output of plotting functions. To make this easier, we use the `image_comparer` fixture for comparing plotting results (search the test suite for example usage).; This is used to check that generated plots look the same as they did previously.; Reference images (the expected output) are stored as `expected.png` to relevant tests directory under `scanpy/tests/_images`.; When run, the test suite will 

Instructions: 
1. Analyze the content and the attribute description.
2. Determine if the content accurately reflects the intended quality attribute in this context.
3. If it does, label it as `true_positive: true`; if not, mark it as a `true_positive: false`.
4. If the content consists only of logs with no other text, mark it as a `true_positive: false`. 
4. If the content partially consists of logs, focus on analyzing remaining text. 
5. Add `reasoning` why the content is a true or false positive.
",True,"The content discusses testability by checking for error handling, ensuring independence of arguments, optimizing methods, and improving test setup through fixtures and reducing data size. It also touches on testing performance and plotting comparisons, all of which relate to making software more testable."
Testability,"canpy python-igraph leidenalg; ```. Pull Scanpy from [PyPI](https://pypi.org/project/scanpy) (consider using `pip3` to access Python 3):. ```shell; pip install scanpy; ```. ## PyPI only. If you prefer to exclusively use PyPI run:. ```shell; pip install 'scanpy[leiden]'; ```. The extra `[leiden]` installs two packages that are needed for popular; parts of scanpy but aren't requirements: [igraph] {cite:p}`Csardi2006` and [leiden] {cite:p}`Traag2019`. (dev-install-instructions)=. ## Development Version. To work with the latest version [on GitHub]: clone the repository and `cd` into its root directory. ```shell; gh repo clone scverse/scanpy; cd scanpy; ```. If you are using `pip>=21.3`, an editable install can be made:. ```shell; pip install -e '.[dev,test]'; ```. If you want to let [conda] handle the installations of dependencies, do:. ```shell; pipx install beni; beni pyproject.toml > environment.yml; conda env create -f environment.yml; conda activate scanpy; pip install -e '.[dev,doc,test]'; ```. For instructions on how to work with the code, see the {ref}`contribution guide <contribution-guide>`. ## Docker. If you're using [Docker], you can use e.g. the image [gcfntnu/scanpy] from Docker Hub. ## Troubleshooting. If you get a `Permission denied` error, never use `sudo pip`. Instead, use virtual environments or:. ```shell; pip install --user scanpy; ```. **On MacOS**, if **not** using `conda`, you might need to install the C core of igraph via homebrew first. - `brew install igraph`. - If igraph still fails to install, see the question on [compiling igraph].; Alternatively consider installing gcc via `brew install gcc --without-multilib`; and exporting the required variables:. ```shell; export CC=""/usr/local/Cellar/gcc/X.x.x/bin/gcc-X""; export CXX=""/usr/local/Cellar/gcc/X.x.x/bin/gcc-X""; ```. where `X` and `x` refers to the version of `gcc`;; in my case, the path reads `/usr/local/Cellar/gcc/6.3.0_1/bin/gcc-6`. **On Windows**, there also often problems installing comp",test,MatchSource.DOCS,scverse,scanpy,1.10.2,https://github.com/scverse/scanpy/tree/1.10.2/docs/installation.md:1210,test,1210,docs/installation.md,https://scanpy.readthedocs.io,https://github.com/scverse/scanpy/tree/1.10.2/docs/installation.md,1,['test'],['test'],"The ease of validating software functionality through testing, enabling fault detection. This includes controlling and observing the system’s state, reducing complexity, and facilitating the creation of test cases and oracles.","
You are an expert in evaluating and categorizing quality attributes in software engineering. You possess the necessary skills to distinguish sentences that clearly relate to a given quality attribute from those that do not. 

Evaluate whether the content accurately aligns with its associated quality attribute, given the context provided. Your goal is to determine if the content makes sense in relation to the quality attribute description or if it is a false positive.

Data:

Quality Attribute: Testability
Attribute Description: The ease of validating software functionality through testing, enabling fault detection. This includes controlling and observing the system’s state, reducing complexity, and facilitating the creation of test cases and oracles.
Content: canpy python-igraph leidenalg; ```. Pull Scanpy from [PyPI](https://pypi.org/project/scanpy) (consider using `pip3` to access Python 3):. ```shell; pip install scanpy; ```. ## PyPI only. If you prefer to exclusively use PyPI run:. ```shell; pip install 'scanpy[leiden]'; ```. The extra `[leiden]` installs two packages that are needed for popular; parts of scanpy but aren't requirements: [igraph] {cite:p}`Csardi2006` and [leiden] {cite:p}`Traag2019`. (dev-install-instructions)=. ## Development Version. To work with the latest version [on GitHub]: clone the repository and `cd` into its root directory. ```shell; gh repo clone scverse/scanpy; cd scanpy; ```. If you are using `pip>=21.3`, an editable install can be made:. ```shell; pip install -e '.[dev,test]'; ```. If you want to let [conda] handle the installations of dependencies, do:. ```shell; pipx install beni; beni pyproject.toml > environment.yml; conda env create -f environment.yml; conda activate scanpy; pip install -e '.[dev,doc,test]'; ```. For instructions on how to work with the code, see the {ref}`contribution guide <contribution-guide>`. ## Docker. If you're using [Docker], you can use e.g. the image [gcfntnu/scanpy] from Docker Hub. ## Troubleshooting. If you get a `Permission denied` error, never use `sudo pip`. Instead, use virtual environments or:. ```shell; pip install --user scanpy; ```. **On MacOS**, if **not** using `conda`, you might need to install the C core of igraph via homebrew first. - `brew install igraph`. - If igraph still fails to install, see the question on [compiling igraph].; Alternatively consider installing gcc via `brew install gcc --without-multilib`; and exporting the required variables:. ```shell; export CC=""/usr/local/Cellar/gcc/X.x.x/bin/gcc-X""; export CXX=""/usr/local/Cellar/gcc/X.x.x/bin/gcc-X""; ```. where `X` and `x` refers to the version of `gcc`;; in my case, the path reads `/usr/local/Cellar/gcc/6.3.0_1/bin/gcc-6`. **On Windows**, there also often problems installing comp

Instructions: 
1. Analyze the content and the attribute description.
2. Determine if the content accurately reflects the intended quality attribute in this context.
3. If it does, label it as `true_positive: true`; if not, mark it as a `true_positive: false`.
4. If the content consists only of logs with no other text, mark it as a `true_positive: false`. 
4. If the content partially consists of logs, focus on analyzing remaining text. 
5. Add `reasoning` why the content is a true or false positive.
",False,"The content provided is installation instructions for scanpy, which is a Python library used in bioinformatics for analysis of single-cell data. Testability refers to the ease of validation through testing, but this content focuses on installation and usage rather than discussing how software functionality can be tested or validated. Therefore, it does not align with the quality attribute of testability."
Testability,"clone the repository to your local machine. This is very straight forward if you're using [GitHub's CLI](https://cli.github.com):. ```shell; $ gh repo fork scverse/scanpy --clone --remote; ```. This will fork the repo to your github account, create a clone of the repo on your current machine, add our repository as a remote, and set the `main` development branch to track our repository. To do this manually, first make a fork of the repository by clicking the ""fork"" button on our main github package. Then, on your machine, run:. ```shell; # Clone your fork of the repository (substitute in your username); git clone https://github.com/{your-username}/scanpy.git; # Enter the cloned repository; cd scanpy; # Add our repository as a remote; git remote add upstream https://github.com/scverse/scanpy.git; # git branch --set-upstream-to ""upstream/main""; ```. ### `pre-commit`. We use [precommit](https://pre-commit.com) to run some styling checks in an automated way.; We also test against these checks, so make sure you follow them!. You can install pre-commit with:. ```shell; pip install pre-commit; ```. You can then install it to run while developing here with:. ```shell; pre-commit install; ```. From the root of the repo. If you choose not to run the hooks on each commit, you can run them manually with `pre-commit run --files={your files}`. (creating-a-branch)=. ### Creating a branch for your feature. All development should occur in branches dedicated to the particular work being done.; Additionally, unless you are a maintainer, all changes should be directed at the `main` branch.; You can create a branch with:. ```shell; git checkout main # Starting from the main branch; git pull # Syncing with the repo; git checkout -b {your-branch-name} # Making and changing to the new branch; ```. (open-a-pr)=. ### Open a pull request. When you're ready to have your code reviewed, push your changes up to your fork:. ```shell; # The first time you push the branch, you'll need to tell git wher",test,MatchSource.DOCS,scverse,scanpy,1.10.2,https://github.com/scverse/scanpy/tree/1.10.2/docs/dev/getting-set-up.md:1725,test,1725,docs/dev/getting-set-up.md,https://scanpy.readthedocs.io,https://github.com/scverse/scanpy/tree/1.10.2/docs/dev/getting-set-up.md,1,['test'],['test'],"The ease of validating software functionality through testing, enabling fault detection. This includes controlling and observing the system’s state, reducing complexity, and facilitating the creation of test cases and oracles.","
You are an expert in evaluating and categorizing quality attributes in software engineering. You possess the necessary skills to distinguish sentences that clearly relate to a given quality attribute from those that do not. 

Evaluate whether the content accurately aligns with its associated quality attribute, given the context provided. Your goal is to determine if the content makes sense in relation to the quality attribute description or if it is a false positive.

Data:

Quality Attribute: Testability
Attribute Description: The ease of validating software functionality through testing, enabling fault detection. This includes controlling and observing the system’s state, reducing complexity, and facilitating the creation of test cases and oracles.
Content: clone the repository to your local machine. This is very straight forward if you're using [GitHub's CLI](https://cli.github.com):. ```shell; $ gh repo fork scverse/scanpy --clone --remote; ```. This will fork the repo to your github account, create a clone of the repo on your current machine, add our repository as a remote, and set the `main` development branch to track our repository. To do this manually, first make a fork of the repository by clicking the ""fork"" button on our main github package. Then, on your machine, run:. ```shell; # Clone your fork of the repository (substitute in your username); git clone https://github.com/{your-username}/scanpy.git; # Enter the cloned repository; cd scanpy; # Add our repository as a remote; git remote add upstream https://github.com/scverse/scanpy.git; # git branch --set-upstream-to ""upstream/main""; ```. ### `pre-commit`. We use [precommit](https://pre-commit.com) to run some styling checks in an automated way.; We also test against these checks, so make sure you follow them!. You can install pre-commit with:. ```shell; pip install pre-commit; ```. You can then install it to run while developing here with:. ```shell; pre-commit install; ```. From the root of the repo. If you choose not to run the hooks on each commit, you can run them manually with `pre-commit run --files={your files}`. (creating-a-branch)=. ### Creating a branch for your feature. All development should occur in branches dedicated to the particular work being done.; Additionally, unless you are a maintainer, all changes should be directed at the `main` branch.; You can create a branch with:. ```shell; git checkout main # Starting from the main branch; git pull # Syncing with the repo; git checkout -b {your-branch-name} # Making and changing to the new branch; ```. (open-a-pr)=. ### Open a pull request. When you're ready to have your code reviewed, push your changes up to your fork:. ```shell; # The first time you push the branch, you'll need to tell git wher

Instructions: 
1. Analyze the content and the attribute description.
2. Determine if the content accurately reflects the intended quality attribute in this context.
3. If it does, label it as `true_positive: true`; if not, mark it as a `true_positive: false`.
4. If the content consists only of logs with no other text, mark it as a `true_positive: false`. 
4. If the content partially consists of logs, focus on analyzing remaining text. 
5. Add `reasoning` why the content is a true or false positive.
",False,"The content in question is about cloning a repository and setting up remotes, which is related to how software developers set up their development environments. While this isn't directly about testing or testability, it's a common setup step that supports the overall process of software development. Cloning a repository ensures that developers can work on local copies without affecting the original codebase, which indirectly contributes to maintainable and testable code. However, the specific steps described don't relate to testing functionality but rather to source control management. Therefore, while this content isn't directly about testability, it's an essential setup task that supports a healthy development environment, including proper testing practices. Hence, it doesn't fully align with the Testability quality attribute."
Testability,"docs](https://docs.pytest.org/en/stable/assert.html#assertions-about-expected-exceptions).; - Are there input values which should cause your function to error?; - Did you add a helpful error message that recommends better outputs? Check that that error message is actually thrown.; - Can you place bounds on the values returned by your function?; - Are there different input values which should generate equivalent output (e.g. if an array is sparse or dense)?; - Do you have arguments which should have orthogonal effects on the output? Check that they are independent. For example, if there is a flag for extended output, the base output should remain the same either way.; - Are you optimizing a method? Check that it's results are the same as a gold standard implementation. ### Performance. It's more important that you're accurately testing the code works than it is that test suite runs quickly.; That said, it's nice when the test suite runs fast. You can check how long tests take to run by passing `--durations=0` argument to `pytest`.; Hopefully your new tests won't show up on top!; Some approaches to this include:. - Is there a common setup/ computation happening in each test? Consider caching these in a [scoped test fixture](https://docs.pytest.org/en/stable/fixture.html#sharing-test-data).; - Is the behaviour you're testing for dependent on the size of the data? If not, consider reducing it. ### Plotting tests. While computational functions will return arrays and values, it can be harder to work with the output of plotting functions. To make this easier, we use the `image_comparer` fixture for comparing plotting results (search the test suite for example usage).; This is used to check that generated plots look the same as they did previously.; Reference images (the expected output) are stored as `expected.png` to relevant tests directory under `scanpy/tests/_images`.; When run, the test suite will generate `actual.png` files for each check.; These files are compared, ",test,MatchSource.DOCS,scverse,scanpy,1.10.2,https://github.com/scverse/scanpy/tree/1.10.2/docs/dev/testing.md:3225,tests,3225,docs/dev/testing.md,https://scanpy.readthedocs.io,https://github.com/scverse/scanpy/tree/1.10.2/docs/dev/testing.md,1,['test'],['tests'],"The ease of validating software functionality through testing, enabling fault detection. This includes controlling and observing the system’s state, reducing complexity, and facilitating the creation of test cases and oracles.","
You are an expert in evaluating and categorizing quality attributes in software engineering. You possess the necessary skills to distinguish sentences that clearly relate to a given quality attribute from those that do not. 

Evaluate whether the content accurately aligns with its associated quality attribute, given the context provided. Your goal is to determine if the content makes sense in relation to the quality attribute description or if it is a false positive.

Data:

Quality Attribute: Testability
Attribute Description: The ease of validating software functionality through testing, enabling fault detection. This includes controlling and observing the system’s state, reducing complexity, and facilitating the creation of test cases and oracles.
Content: docs](https://docs.pytest.org/en/stable/assert.html#assertions-about-expected-exceptions).; - Are there input values which should cause your function to error?; - Did you add a helpful error message that recommends better outputs? Check that that error message is actually thrown.; - Can you place bounds on the values returned by your function?; - Are there different input values which should generate equivalent output (e.g. if an array is sparse or dense)?; - Do you have arguments which should have orthogonal effects on the output? Check that they are independent. For example, if there is a flag for extended output, the base output should remain the same either way.; - Are you optimizing a method? Check that it's results are the same as a gold standard implementation. ### Performance. It's more important that you're accurately testing the code works than it is that test suite runs quickly.; That said, it's nice when the test suite runs fast. You can check how long tests take to run by passing `--durations=0` argument to `pytest`.; Hopefully your new tests won't show up on top!; Some approaches to this include:. - Is there a common setup/ computation happening in each test? Consider caching these in a [scoped test fixture](https://docs.pytest.org/en/stable/fixture.html#sharing-test-data).; - Is the behaviour you're testing for dependent on the size of the data? If not, consider reducing it. ### Plotting tests. While computational functions will return arrays and values, it can be harder to work with the output of plotting functions. To make this easier, we use the `image_comparer` fixture for comparing plotting results (search the test suite for example usage).; This is used to check that generated plots look the same as they did previously.; Reference images (the expected output) are stored as `expected.png` to relevant tests directory under `scanpy/tests/_images`.; When run, the test suite will generate `actual.png` files for each check.; These files are compared, 

Instructions: 
1. Analyze the content and the attribute description.
2. Determine if the content accurately reflects the intended quality attribute in this context.
3. If it does, label it as `true_positive: true`; if not, mark it as a `true_positive: false`.
4. If the content consists only of logs with no other text, mark it as a `true_positive: false`. 
4. If the content partially consists of logs, focus on analyzing remaining text. 
5. Add `reasoning` why the content is a true or false positive.
",True,"The provided content discusses testing practices such as input validation, error messages, function boundaries, and test optimizations, which are aspects of Testability. It includes checking that functions behave correctly under various inputs, ensuring fault detection through proper testing, and optimizing tests for performance without compromising accuracy. These activities align with the description of Testability, making it a true positive."
Testability,"e bounds on the values returned by your function?; - Are there different input values which should generate equivalent output (e.g. if an array is sparse or dense)?; - Do you have arguments which should have orthogonal effects on the output? Check that they are independent. For example, if there is a flag for extended output, the base output should remain the same either way.; - Are you optimizing a method? Check that it's results are the same as a gold standard implementation. ### Performance. It's more important that you're accurately testing the code works than it is that test suite runs quickly.; That said, it's nice when the test suite runs fast. You can check how long tests take to run by passing `--durations=0` argument to `pytest`.; Hopefully your new tests won't show up on top!; Some approaches to this include:. - Is there a common setup/ computation happening in each test? Consider caching these in a [scoped test fixture](https://docs.pytest.org/en/stable/fixture.html#sharing-test-data).; - Is the behaviour you're testing for dependent on the size of the data? If not, consider reducing it. ### Plotting tests. While computational functions will return arrays and values, it can be harder to work with the output of plotting functions. To make this easier, we use the `image_comparer` fixture for comparing plotting results (search the test suite for example usage).; This is used to check that generated plots look the same as they did previously.; Reference images (the expected output) are stored as `expected.png` to relevant tests directory under `scanpy/tests/_images`.; When run, the test suite will generate `actual.png` files for each check.; These files are compared, and if the `actual` plot differs from the reference plot, a `diff` of the images is also generated.; Paths for all these files will be reported when a test fails, and images for failed plots can be viewed via the :doc:`CI interface <ci>`. A common gotcha here is that plots often change slightly ",test,MatchSource.DOCS,scverse,scanpy,1.10.2,https://github.com/scverse/scanpy/tree/1.10.2/docs/dev/testing.md:3543,test-data,3543,docs/dev/testing.md,https://scanpy.readthedocs.io,https://github.com/scverse/scanpy/tree/1.10.2/docs/dev/testing.md,1,['test'],['test-data'],"The ease of validating software functionality through testing, enabling fault detection. This includes controlling and observing the system’s state, reducing complexity, and facilitating the creation of test cases and oracles.","
You are an expert in evaluating and categorizing quality attributes in software engineering. You possess the necessary skills to distinguish sentences that clearly relate to a given quality attribute from those that do not. 

Evaluate whether the content accurately aligns with its associated quality attribute, given the context provided. Your goal is to determine if the content makes sense in relation to the quality attribute description or if it is a false positive.

Data:

Quality Attribute: Testability
Attribute Description: The ease of validating software functionality through testing, enabling fault detection. This includes controlling and observing the system’s state, reducing complexity, and facilitating the creation of test cases and oracles.
Content: e bounds on the values returned by your function?; - Are there different input values which should generate equivalent output (e.g. if an array is sparse or dense)?; - Do you have arguments which should have orthogonal effects on the output? Check that they are independent. For example, if there is a flag for extended output, the base output should remain the same either way.; - Are you optimizing a method? Check that it's results are the same as a gold standard implementation. ### Performance. It's more important that you're accurately testing the code works than it is that test suite runs quickly.; That said, it's nice when the test suite runs fast. You can check how long tests take to run by passing `--durations=0` argument to `pytest`.; Hopefully your new tests won't show up on top!; Some approaches to this include:. - Is there a common setup/ computation happening in each test? Consider caching these in a [scoped test fixture](https://docs.pytest.org/en/stable/fixture.html#sharing-test-data).; - Is the behaviour you're testing for dependent on the size of the data? If not, consider reducing it. ### Plotting tests. While computational functions will return arrays and values, it can be harder to work with the output of plotting functions. To make this easier, we use the `image_comparer` fixture for comparing plotting results (search the test suite for example usage).; This is used to check that generated plots look the same as they did previously.; Reference images (the expected output) are stored as `expected.png` to relevant tests directory under `scanpy/tests/_images`.; When run, the test suite will generate `actual.png` files for each check.; These files are compared, and if the `actual` plot differs from the reference plot, a `diff` of the images is also generated.; Paths for all these files will be reported when a test fails, and images for failed plots can be viewed via the :doc:`CI interface <ci>`. A common gotcha here is that plots often change slightly 

Instructions: 
1. Analyze the content and the attribute description.
2. Determine if the content accurately reflects the intended quality attribute in this context.
3. If it does, label it as `true_positive: true`; if not, mark it as a `true_positive: false`.
4. If the content consists only of logs with no other text, mark it as a `true_positive: false`. 
4. If the content partially consists of logs, focus on analyzing remaining text. 
5. Add `reasoning` why the content is a true or false positive.
",True,"The content discusses aspects of testing and test optimization, such as reducing setup time through caching, optimizing method results against gold standards, and testing plot outputs. These points relate to the ease of validation (testability) by ensuring tests accurately reflect expected outcomes and maintain consistency. The focus on accurate testing aligns with the Testability quality attribute which aims for comprehensive and reliable validation of software functionality."
Testability,"en tests before, Software Carpentry has an [in-depth guide](https://katyhuff.github.io/2016-07-11-scipy/testing/01-basics.html) on the topic. We highly recommend using [Test Driven Development](https://en.wikipedia.org/wiki/Test-driven_development) when contributing code.; This not only ensures you have tests written, it often makes implementation easier since you start out with a specification for your function. Consider parameterizing your tests using the `pytest.mark.parameterize` and `pytest.fixture` decorators.; Documentation on these can be found [here](https://docs.pytest.org/en/stable/fixture.html), but we'd also recommend searching our test suite for existing usage. ### What to test. If you're not sure what to tests about your function, some ideas include:. - Are there arguments which conflict with each other? Check that if they are both passed, the function throws an error (see `pytest.raises` [in the pytest docs](https://docs.pytest.org/en/stable/assert.html#assertions-about-expected-exceptions).; - Are there input values which should cause your function to error?; - Did you add a helpful error message that recommends better outputs? Check that that error message is actually thrown.; - Can you place bounds on the values returned by your function?; - Are there different input values which should generate equivalent output (e.g. if an array is sparse or dense)?; - Do you have arguments which should have orthogonal effects on the output? Check that they are independent. For example, if there is a flag for extended output, the base output should remain the same either way.; - Are you optimizing a method? Check that it's results are the same as a gold standard implementation. ### Performance. It's more important that you're accurately testing the code works than it is that test suite runs quickly.; That said, it's nice when the test suite runs fast. You can check how long tests take to run by passing `--durations=0` argument to `pytest`.; Hopefully your new tes",assert,MatchSource.DOCS,scverse,scanpy,1.10.2,https://github.com/scverse/scanpy/tree/1.10.2/docs/dev/testing.md:2298,assertions-about-expected-exceptions,2298,docs/dev/testing.md,https://scanpy.readthedocs.io,https://github.com/scverse/scanpy/tree/1.10.2/docs/dev/testing.md,1,['assert'],['assertions-about-expected-exceptions'],"The ease of validating software functionality through testing, enabling fault detection. This includes controlling and observing the system’s state, reducing complexity, and facilitating the creation of test cases and oracles.","
You are an expert in evaluating and categorizing quality attributes in software engineering. You possess the necessary skills to distinguish sentences that clearly relate to a given quality attribute from those that do not. 

Evaluate whether the content accurately aligns with its associated quality attribute, given the context provided. Your goal is to determine if the content makes sense in relation to the quality attribute description or if it is a false positive.

Data:

Quality Attribute: Testability
Attribute Description: The ease of validating software functionality through testing, enabling fault detection. This includes controlling and observing the system’s state, reducing complexity, and facilitating the creation of test cases and oracles.
Content: en tests before, Software Carpentry has an [in-depth guide](https://katyhuff.github.io/2016-07-11-scipy/testing/01-basics.html) on the topic. We highly recommend using [Test Driven Development](https://en.wikipedia.org/wiki/Test-driven_development) when contributing code.; This not only ensures you have tests written, it often makes implementation easier since you start out with a specification for your function. Consider parameterizing your tests using the `pytest.mark.parameterize` and `pytest.fixture` decorators.; Documentation on these can be found [here](https://docs.pytest.org/en/stable/fixture.html), but we'd also recommend searching our test suite for existing usage. ### What to test. If you're not sure what to tests about your function, some ideas include:. - Are there arguments which conflict with each other? Check that if they are both passed, the function throws an error (see `pytest.raises` [in the pytest docs](https://docs.pytest.org/en/stable/assert.html#assertions-about-expected-exceptions).; - Are there input values which should cause your function to error?; - Did you add a helpful error message that recommends better outputs? Check that that error message is actually thrown.; - Can you place bounds on the values returned by your function?; - Are there different input values which should generate equivalent output (e.g. if an array is sparse or dense)?; - Do you have arguments which should have orthogonal effects on the output? Check that they are independent. For example, if there is a flag for extended output, the base output should remain the same either way.; - Are you optimizing a method? Check that it's results are the same as a gold standard implementation. ### Performance. It's more important that you're accurately testing the code works than it is that test suite runs quickly.; That said, it's nice when the test suite runs fast. You can check how long tests take to run by passing `--durations=0` argument to `pytest`.; Hopefully your new tes

Instructions: 
1. Analyze the content and the attribute description.
2. Determine if the content accurately reflects the intended quality attribute in this context.
3. If it does, label it as `true_positive: true`; if not, mark it as a `true_positive: false`.
4. If the content consists only of logs with no other text, mark it as a `true_positive: false`. 
4. If the content partially consists of logs, focus on analyzing remaining text. 
5. Add `reasoning` why the content is a true or false positive.
",True,"The content discusses testing practices such as writing tests before coding, using Test Driven Development, parameterizing tests with pytest fixtures, and provides guidance on what to test. These all relate directly to ensuring the software's functionality can be validated through testing, thereby aligning with the quality attribute of Testability."
Testability,"er}`S Dicks & P Angerer`; * {func}`scanpy.tl.leiden` now offers `igraph`'s implementation of the leiden algorithm via via `flavor` when set to `igraph`. `leidenalg`'s implementation is still default, but discouraged. {pr}`2815` {smaller}`I Gold`; * {func}`scanpy.pp.highly_variable_genes` has new flavor `seurat_v3_paper` that is in its implementation consistent with the paper description in Stuart et al 2018. {pr}`2792` {smaller}`E Roellin`; * {func}`scanpy.datasets.blobs` now accepts a `random_state` argument {pr}`2683` {smaller}`E Roellin`; * {func}`scanpy.pp.pca` and {func}`scanpy.pp.regress_out` now accept a layer argument {pr}`2588` {smaller}`S Dicks`; * {func}`scanpy.pp.subsample` with `copy=True` can now be called in backed mode {pr}`2624` {smaller}`E Roellin`; * {func}`scanpy.external.pp.harmony_integrate` now runs with 64 bit floats improving reproducibility {pr}`2655` {smaller}`S Dicks`; * {func}`scanpy.tl.rank_genes_groups` no longer warns that it's default was changed from t-test_overestim_var to t-test {pr}`2798` {smaller}`L Heumos`; * `scanpy.pp.calculate_qc_metrics` now allows `qc_vars` to be passed as a string {pr}`2859` {smaller}`N Teyssier`; * {func}`scanpy.tl.leiden` and {func}`scanpy.tl.louvain` now store clustering parameters in the key provided by the `key_added` parameter instead of always writing to (or overwriting) a default key {pr}`2864` {smaller}`J Fan`; * {func}`scanpy.pp.scale` now clips `np.ndarray` also at `- max_value` for zero-centering {pr}`2913` {smaller}`S Dicks`; * Support sparse chunks in dask {func}`~scanpy.pp.scale`, {func}`~scanpy.pp.normalize_total` and {func}`~scanpy.pp.highly_variable_genes` (`seurat` and `cell-ranger` tested) {pr}`2856` {smaller}`ilan-gold`. ```{rubric} Docs; ```. * Doc style overhaul {pr}`2220` {smaller}`A Gayoso`; * Re-add search-as-you-type, this time via `readthedocs-sphinx-search` {pr}`2805` {smaller}`P Angerer`; * Fixed a lot of broken usage examples {pr}`2605` {smaller}`P Angerer`; * Improved harmon",test,MatchSource.DOCS,scverse,scanpy,1.10.2,https://github.com/scverse/scanpy/tree/1.10.2/docs/release-notes/1.10.0.md:3142,test,3142,docs/release-notes/1.10.0.md,https://scanpy.readthedocs.io,https://github.com/scverse/scanpy/tree/1.10.2/docs/release-notes/1.10.0.md,1,['test'],['test'],"The ease of validating software functionality through testing, enabling fault detection. This includes controlling and observing the system’s state, reducing complexity, and facilitating the creation of test cases and oracles.","
You are an expert in evaluating and categorizing quality attributes in software engineering. You possess the necessary skills to distinguish sentences that clearly relate to a given quality attribute from those that do not. 

Evaluate whether the content accurately aligns with its associated quality attribute, given the context provided. Your goal is to determine if the content makes sense in relation to the quality attribute description or if it is a false positive.

Data:

Quality Attribute: Testability
Attribute Description: The ease of validating software functionality through testing, enabling fault detection. This includes controlling and observing the system’s state, reducing complexity, and facilitating the creation of test cases and oracles.
Content: er}`S Dicks & P Angerer`; * {func}`scanpy.tl.leiden` now offers `igraph`'s implementation of the leiden algorithm via via `flavor` when set to `igraph`. `leidenalg`'s implementation is still default, but discouraged. {pr}`2815` {smaller}`I Gold`; * {func}`scanpy.pp.highly_variable_genes` has new flavor `seurat_v3_paper` that is in its implementation consistent with the paper description in Stuart et al 2018. {pr}`2792` {smaller}`E Roellin`; * {func}`scanpy.datasets.blobs` now accepts a `random_state` argument {pr}`2683` {smaller}`E Roellin`; * {func}`scanpy.pp.pca` and {func}`scanpy.pp.regress_out` now accept a layer argument {pr}`2588` {smaller}`S Dicks`; * {func}`scanpy.pp.subsample` with `copy=True` can now be called in backed mode {pr}`2624` {smaller}`E Roellin`; * {func}`scanpy.external.pp.harmony_integrate` now runs with 64 bit floats improving reproducibility {pr}`2655` {smaller}`S Dicks`; * {func}`scanpy.tl.rank_genes_groups` no longer warns that it's default was changed from t-test_overestim_var to t-test {pr}`2798` {smaller}`L Heumos`; * `scanpy.pp.calculate_qc_metrics` now allows `qc_vars` to be passed as a string {pr}`2859` {smaller}`N Teyssier`; * {func}`scanpy.tl.leiden` and {func}`scanpy.tl.louvain` now store clustering parameters in the key provided by the `key_added` parameter instead of always writing to (or overwriting) a default key {pr}`2864` {smaller}`J Fan`; * {func}`scanpy.pp.scale` now clips `np.ndarray` also at `- max_value` for zero-centering {pr}`2913` {smaller}`S Dicks`; * Support sparse chunks in dask {func}`~scanpy.pp.scale`, {func}`~scanpy.pp.normalize_total` and {func}`~scanpy.pp.highly_variable_genes` (`seurat` and `cell-ranger` tested) {pr}`2856` {smaller}`ilan-gold`. ```{rubric} Docs; ```. * Doc style overhaul {pr}`2220` {smaller}`A Gayoso`; * Re-add search-as-you-type, this time via `readthedocs-sphinx-search` {pr}`2805` {smaller}`P Angerer`; * Fixed a lot of broken usage examples {pr}`2605` {smaller}`P Angerer`; * Improved harmon

Instructions: 
1. Analyze the content and the attribute description.
2. Determine if the content accurately reflects the intended quality attribute in this context.
3. If it does, label it as `true_positive: true`; if not, mark it as a `true_positive: false`.
4. If the content consists only of logs with no other text, mark it as a `true_positive: false`. 
4. If the content partially consists of logs, focus on analyzing remaining text. 
5. Add `reasoning` why the content is a true or false positive.
",True,"The content provided is a series of updates and changes to various functions and features in the software. It mentions things like new implementations, added arguments, and other improvements. This seems to relate to the testability attribute because it’s about making sure the software can be tested thoroughly, possibly by improving how functions are implemented or ensuring parameters are set correctly for testing."
Testability,"hould remain the same either way.; - Are you optimizing a method? Check that it's results are the same as a gold standard implementation. ### Performance. It's more important that you're accurately testing the code works than it is that test suite runs quickly.; That said, it's nice when the test suite runs fast. You can check how long tests take to run by passing `--durations=0` argument to `pytest`.; Hopefully your new tests won't show up on top!; Some approaches to this include:. - Is there a common setup/ computation happening in each test? Consider caching these in a [scoped test fixture](https://docs.pytest.org/en/stable/fixture.html#sharing-test-data).; - Is the behaviour you're testing for dependent on the size of the data? If not, consider reducing it. ### Plotting tests. While computational functions will return arrays and values, it can be harder to work with the output of plotting functions. To make this easier, we use the `image_comparer` fixture for comparing plotting results (search the test suite for example usage).; This is used to check that generated plots look the same as they did previously.; Reference images (the expected output) are stored as `expected.png` to relevant tests directory under `scanpy/tests/_images`.; When run, the test suite will generate `actual.png` files for each check.; These files are compared, and if the `actual` plot differs from the reference plot, a `diff` of the images is also generated.; Paths for all these files will be reported when a test fails, and images for failed plots can be viewed via the :doc:`CI interface <ci>`. A common gotcha here is that plots often change slightly on different machines/ OSs.; `scanpy`'s test suite sets a number of environment variables to ensure as similar of plots as possible.; When adding new reference plots, the recommended workflow is to write the test as though an expected result already exists, run it once to generate the output, then move that output to the reference directory.; ",test,MatchSource.DOCS,scverse,scanpy,1.10.2,https://github.com/scverse/scanpy/tree/1.10.2/docs/dev/testing.md:4098,tests,4098,docs/dev/testing.md,https://scanpy.readthedocs.io,https://github.com/scverse/scanpy/tree/1.10.2/docs/dev/testing.md,6,['test'],"['test', 'tests']","The ease of validating software functionality through testing, enabling fault detection. This includes controlling and observing the system’s state, reducing complexity, and facilitating the creation of test cases and oracles.","
You are an expert in evaluating and categorizing quality attributes in software engineering. You possess the necessary skills to distinguish sentences that clearly relate to a given quality attribute from those that do not. 

Evaluate whether the content accurately aligns with its associated quality attribute, given the context provided. Your goal is to determine if the content makes sense in relation to the quality attribute description or if it is a false positive.

Data:

Quality Attribute: Testability
Attribute Description: The ease of validating software functionality through testing, enabling fault detection. This includes controlling and observing the system’s state, reducing complexity, and facilitating the creation of test cases and oracles.
Content: hould remain the same either way.; - Are you optimizing a method? Check that it's results are the same as a gold standard implementation. ### Performance. It's more important that you're accurately testing the code works than it is that test suite runs quickly.; That said, it's nice when the test suite runs fast. You can check how long tests take to run by passing `--durations=0` argument to `pytest`.; Hopefully your new tests won't show up on top!; Some approaches to this include:. - Is there a common setup/ computation happening in each test? Consider caching these in a [scoped test fixture](https://docs.pytest.org/en/stable/fixture.html#sharing-test-data).; - Is the behaviour you're testing for dependent on the size of the data? If not, consider reducing it. ### Plotting tests. While computational functions will return arrays and values, it can be harder to work with the output of plotting functions. To make this easier, we use the `image_comparer` fixture for comparing plotting results (search the test suite for example usage).; This is used to check that generated plots look the same as they did previously.; Reference images (the expected output) are stored as `expected.png` to relevant tests directory under `scanpy/tests/_images`.; When run, the test suite will generate `actual.png` files for each check.; These files are compared, and if the `actual` plot differs from the reference plot, a `diff` of the images is also generated.; Paths for all these files will be reported when a test fails, and images for failed plots can be viewed via the :doc:`CI interface <ci>`. A common gotcha here is that plots often change slightly on different machines/ OSs.; `scanpy`'s test suite sets a number of environment variables to ensure as similar of plots as possible.; When adding new reference plots, the recommended workflow is to write the test as though an expected result already exists, run it once to generate the output, then move that output to the reference directory.; 

Instructions: 
1. Analyze the content and the attribute description.
2. Determine if the content accurately reflects the intended quality attribute in this context.
3. If it does, label it as `true_positive: true`; if not, mark it as a `true_positive: false`.
4. If the content consists only of logs with no other text, mark it as a `true_positive: false`. 
4. If the content partially consists of logs, focus on analyzing remaining text. 
5. Add `reasoning` why the content is a true or false positive.
",True,"The content discusses optimizing test performance and includes specific instructions on using pytest's arguments for timing, caching tests, handling plotting comparisons, and managing reference images. These activities are directly related to making software more testable by ensuring efficient and consistent testing processes, which aligns with the Testability quality attribute."
Testability,"ifferent input values which should generate equivalent output (e.g. if an array is sparse or dense)?; - Do you have arguments which should have orthogonal effects on the output? Check that they are independent. For example, if there is a flag for extended output, the base output should remain the same either way.; - Are you optimizing a method? Check that it's results are the same as a gold standard implementation. ### Performance. It's more important that you're accurately testing the code works than it is that test suite runs quickly.; That said, it's nice when the test suite runs fast. You can check how long tests take to run by passing `--durations=0` argument to `pytest`.; Hopefully your new tests won't show up on top!; Some approaches to this include:. - Is there a common setup/ computation happening in each test? Consider caching these in a [scoped test fixture](https://docs.pytest.org/en/stable/fixture.html#sharing-test-data).; - Is the behaviour you're testing for dependent on the size of the data? If not, consider reducing it. ### Plotting tests. While computational functions will return arrays and values, it can be harder to work with the output of plotting functions. To make this easier, we use the `image_comparer` fixture for comparing plotting results (search the test suite for example usage).; This is used to check that generated plots look the same as they did previously.; Reference images (the expected output) are stored as `expected.png` to relevant tests directory under `scanpy/tests/_images`.; When run, the test suite will generate `actual.png` files for each check.; These files are compared, and if the `actual` plot differs from the reference plot, a `diff` of the images is also generated.; Paths for all these files will be reported when a test fails, and images for failed plots can be viewed via the :doc:`CI interface <ci>`. A common gotcha here is that plots often change slightly on different machines/ OSs.; `scanpy`'s test suite sets a number",test,MatchSource.DOCS,scverse,scanpy,1.10.2,https://github.com/scverse/scanpy/tree/1.10.2/docs/dev/testing.md:3582,testing,3582,docs/dev/testing.md,https://scanpy.readthedocs.io,https://github.com/scverse/scanpy/tree/1.10.2/docs/dev/testing.md,1,['test'],['testing'],"The ease of validating software functionality through testing, enabling fault detection. This includes controlling and observing the system’s state, reducing complexity, and facilitating the creation of test cases and oracles.","
You are an expert in evaluating and categorizing quality attributes in software engineering. You possess the necessary skills to distinguish sentences that clearly relate to a given quality attribute from those that do not. 

Evaluate whether the content accurately aligns with its associated quality attribute, given the context provided. Your goal is to determine if the content makes sense in relation to the quality attribute description or if it is a false positive.

Data:

Quality Attribute: Testability
Attribute Description: The ease of validating software functionality through testing, enabling fault detection. This includes controlling and observing the system’s state, reducing complexity, and facilitating the creation of test cases and oracles.
Content: ifferent input values which should generate equivalent output (e.g. if an array is sparse or dense)?; - Do you have arguments which should have orthogonal effects on the output? Check that they are independent. For example, if there is a flag for extended output, the base output should remain the same either way.; - Are you optimizing a method? Check that it's results are the same as a gold standard implementation. ### Performance. It's more important that you're accurately testing the code works than it is that test suite runs quickly.; That said, it's nice when the test suite runs fast. You can check how long tests take to run by passing `--durations=0` argument to `pytest`.; Hopefully your new tests won't show up on top!; Some approaches to this include:. - Is there a common setup/ computation happening in each test? Consider caching these in a [scoped test fixture](https://docs.pytest.org/en/stable/fixture.html#sharing-test-data).; - Is the behaviour you're testing for dependent on the size of the data? If not, consider reducing it. ### Plotting tests. While computational functions will return arrays and values, it can be harder to work with the output of plotting functions. To make this easier, we use the `image_comparer` fixture for comparing plotting results (search the test suite for example usage).; This is used to check that generated plots look the same as they did previously.; Reference images (the expected output) are stored as `expected.png` to relevant tests directory under `scanpy/tests/_images`.; When run, the test suite will generate `actual.png` files for each check.; These files are compared, and if the `actual` plot differs from the reference plot, a `diff` of the images is also generated.; Paths for all these files will be reported when a test fails, and images for failed plots can be viewed via the :doc:`CI interface <ci>`. A common gotcha here is that plots often change slightly on different machines/ OSs.; `scanpy`'s test suite sets a number

Instructions: 
1. Analyze the content and the attribute description.
2. Determine if the content accurately reflects the intended quality attribute in this context.
3. If it does, label it as `true_positive: true`; if not, mark it as a `true_positive: false`.
4. If the content consists only of logs with no other text, mark it as a `true_positive: false`. 
4. If the content partially consists of logs, focus on analyzing remaining text. 
5. Add `reasoning` why the content is a true or false positive.
",True,"The content provided discusses testability by addressing different input values generating equivalent outputs and optimizing methods to match gold standards. It also talks about performance in testing, including using fixtures and reducing data size for better test efficiency. There's no irrelevant log content. The discussions relate directly to the ease of validation through testing and fault detection."
Testability,"ist=PL4rcQcNPLZxWQQH7LlRBMkAo5NWuHX1e3) for Scanpy workshops by Maren Büttner. ```{rubric} Experimental module; ```. - Added {mod}`scanpy.experimental` module! Currently contains functionality related to pearson residuals in {mod}`scanpy.experimental.pp` {pr}`1715` {smaller}`J Lause, G Palla, I Virshup`. This includes:. - {func}`~scanpy.experimental.pp.normalize_pearson_residuals` for Pearson Residuals normalization; - {func}`~scanpy.experimental.pp.highly_variable_genes` for HVG selection with Pearson Residuals; - {func}`~scanpy.experimental.pp.normalize_pearson_residuals_pca` for Pearson Residuals normalization and dimensionality reduction with PCA; - {func}`~scanpy.experimental.pp.recipe_pearson_residuals` for Pearson Residuals normalization, HVG selection and dimensionality reduction with PCA. ```{rubric} Features; ```. - {func}`~scanpy.tl.filter_rank_genes_groups` now allows to filter with absolute values of log fold change {pr}`1649` {smaller}`S Rybakov`; - `_choose_representation` now subsets the provided representation to n_pcs, regardless of the name of the provided representation (should affect mostly {func}`~scanpy.pp.neighbors`) {pr}`2179` {smaller}`I Virshup` {smaller}`PG Majev`; - {func}`scanpy.pp.scrublet` (and related functions) can now be used on `AnnData` objects containing multiple batches {pr}`1965` {smaller}`J Manning`; - Number of variables plotted with {func}`~scanpy.pl.pca_loadings` can now be controlled with `n_points` argument. Additionally, variables are no longer repeated if the anndata has less than 30 variables {pr}`2075` {smaller}`Yves33`; - Dask arrays now work with {func}`scanpy.pp.normalize_total` {pr}`1663` {smaller}`G Buckley, I Virshup`; - {func}`~scanpy.pl.embedding_density` now allows more than 10 groups {pr}`1936` {smaller}`A Wolf`; - Embedding plots can now pass `colorbar_loc` to specify the location of colorbar legend, or pass `None` to not show a colorbar {pr}`1821` {smaller}`A Schaar` {smaller}`I Virshup`; - Embedding plot",log,MatchSource.DOCS,scverse,scanpy,1.10.2,https://github.com/scverse/scanpy/tree/1.10.2/docs/release-notes/1.9.0.md:1252,log,1252,docs/release-notes/1.9.0.md,https://scanpy.readthedocs.io,https://github.com/scverse/scanpy/tree/1.10.2/docs/release-notes/1.9.0.md,1,['log'],['log'],"The ease of validating software functionality through testing, enabling fault detection. This includes controlling and observing the system’s state, reducing complexity, and facilitating the creation of test cases and oracles.","
You are an expert in evaluating and categorizing quality attributes in software engineering. You possess the necessary skills to distinguish sentences that clearly relate to a given quality attribute from those that do not. 

Evaluate whether the content accurately aligns with its associated quality attribute, given the context provided. Your goal is to determine if the content makes sense in relation to the quality attribute description or if it is a false positive.

Data:

Quality Attribute: Testability
Attribute Description: The ease of validating software functionality through testing, enabling fault detection. This includes controlling and observing the system’s state, reducing complexity, and facilitating the creation of test cases and oracles.
Content: ist=PL4rcQcNPLZxWQQH7LlRBMkAo5NWuHX1e3) for Scanpy workshops by Maren Büttner. ```{rubric} Experimental module; ```. - Added {mod}`scanpy.experimental` module! Currently contains functionality related to pearson residuals in {mod}`scanpy.experimental.pp` {pr}`1715` {smaller}`J Lause, G Palla, I Virshup`. This includes:. - {func}`~scanpy.experimental.pp.normalize_pearson_residuals` for Pearson Residuals normalization; - {func}`~scanpy.experimental.pp.highly_variable_genes` for HVG selection with Pearson Residuals; - {func}`~scanpy.experimental.pp.normalize_pearson_residuals_pca` for Pearson Residuals normalization and dimensionality reduction with PCA; - {func}`~scanpy.experimental.pp.recipe_pearson_residuals` for Pearson Residuals normalization, HVG selection and dimensionality reduction with PCA. ```{rubric} Features; ```. - {func}`~scanpy.tl.filter_rank_genes_groups` now allows to filter with absolute values of log fold change {pr}`1649` {smaller}`S Rybakov`; - `_choose_representation` now subsets the provided representation to n_pcs, regardless of the name of the provided representation (should affect mostly {func}`~scanpy.pp.neighbors`) {pr}`2179` {smaller}`I Virshup` {smaller}`PG Majev`; - {func}`scanpy.pp.scrublet` (and related functions) can now be used on `AnnData` objects containing multiple batches {pr}`1965` {smaller}`J Manning`; - Number of variables plotted with {func}`~scanpy.pl.pca_loadings` can now be controlled with `n_points` argument. Additionally, variables are no longer repeated if the anndata has less than 30 variables {pr}`2075` {smaller}`Yves33`; - Dask arrays now work with {func}`scanpy.pp.normalize_total` {pr}`1663` {smaller}`G Buckley, I Virshup`; - {func}`~scanpy.pl.embedding_density` now allows more than 10 groups {pr}`1936` {smaller}`A Wolf`; - Embedding plots can now pass `colorbar_loc` to specify the location of colorbar legend, or pass `None` to not show a colorbar {pr}`1821` {smaller}`A Schaar` {smaller}`I Virshup`; - Embedding plot

Instructions: 
1. Analyze the content and the attribute description.
2. Determine if the content accurately reflects the intended quality attribute in this context.
3. If it does, label it as `true_positive: true`; if not, mark it as a `true_positive: false`.
4. If the content consists only of logs with no other text, mark it as a `true_positive: false`. 
4. If the content partially consists of logs, focus on analyzing remaining text. 
5. Add `reasoning` why the content is a true or false positive.
",False,"The content provided discusses specific updates and features in the Scanpy experimental module, including new functions for Pearson residuals normalization, HVG selection, dimensionality reduction with PCA, and more. While testability involves the ability to validate software functionality through testing, this content is about module enhancements rather than functional testing or validation processes. There's no mention of testing frameworks, test cases, or fault detection mechanisms related to testing. Instead, it focuses on specific tooling updates in a module. Therefore, the content does not align with the Testability quality attribute."
Testability,"lors can be colored based on average gene expression as in dotplots.; > - The linewidth of the violin plots is thinner.; > - Removed the tics for the y-axis as they tend to overlap with each other. Using the style method they can be displayed if needed. ```{rubric} Additions; ```. - {func}`~anndata.concat` is now exported from scanpy, see {doc}`anndata:concatenation` for more info. {pr}`1338` {smaller}`I Virshup`; - Added highly variable gene selection strategy from Seurat v3 {pr}`1204` {smaller}`A Gayoso`; - Added [CellRank](https://github.com/theislab/cellrank/) to scanpy ecosystem {pr}`1304` {smaller}`giovp`; - Added `backup_url` param to {func}`~scanpy.read_10x_h5` {pr}`1296` {smaller}`A Gayoso`; - Allow prefix for {func}`~scanpy.read_10x_mtx` {pr}`1250` {smaller}`G Sturm`; - Optional tie correction for the `'wilcoxon'` method in {func}`~scanpy.tl.rank_genes_groups` {pr}`1330` {smaller}`S Rybakov`; - Use `sinfo` for {func}`~scanpy.logging.print_versions` and add {func}`~scanpy.logging.print_header` to do what it previously did. {pr}`1338` {smaller}`I Virshup` {pr}`1373`. ```{rubric} Bug fixes; ```. - Avoid warning in {func}`~scanpy.tl.rank_genes_groups` if 't-test' is passed {pr}`1303` {smaller}`A Wolf`; - Restrict sphinx version to \<3.1, >3.0 {pr}`1297` {smaller}`I Virshup`; - Clean up `_ranks` and fix `dendrogram` for scipy 1.5 {pr}`1290` {smaller}`S Rybakov`; - Use `.raw` to translate gene symbols if applicable {pr}`1278` {smaller}`E Rice`; - Fix `diffmap` ({issue}`1262`) {smaller}`G Eraslan`; - Fix `neighbors` in `spring_project` {issue}`1260` {smaller}`S Rybakov`; - Fix default size of dot in spatial plots {pr}`1255` {issue}`1253` {smaller}`giovp`; - Bumped version requirement of `scipy` to `scipy>1.4` to support `rmatmat` argument of `LinearOperator` {issue}`1246` {smaller}`I Virshup`; - Fix asymmetry of scores for the `'wilcoxon'` method in {func}`~scanpy.tl.rank_genes_groups` {issue}`754` {smaller}`S Rybakov`; - Avoid trimming of gene names in {func}`~s",log,MatchSource.DOCS,scverse,scanpy,1.10.2,https://github.com/scverse/scanpy/tree/1.10.2/docs/release-notes/1.6.0.md:3074,logging,3074,docs/release-notes/1.6.0.md,https://scanpy.readthedocs.io,https://github.com/scverse/scanpy/tree/1.10.2/docs/release-notes/1.6.0.md,1,['log'],['logging'],"The ease of validating software functionality through testing, enabling fault detection. This includes controlling and observing the system’s state, reducing complexity, and facilitating the creation of test cases and oracles.","
You are an expert in evaluating and categorizing quality attributes in software engineering. You possess the necessary skills to distinguish sentences that clearly relate to a given quality attribute from those that do not. 

Evaluate whether the content accurately aligns with its associated quality attribute, given the context provided. Your goal is to determine if the content makes sense in relation to the quality attribute description or if it is a false positive.

Data:

Quality Attribute: Testability
Attribute Description: The ease of validating software functionality through testing, enabling fault detection. This includes controlling and observing the system’s state, reducing complexity, and facilitating the creation of test cases and oracles.
Content: lors can be colored based on average gene expression as in dotplots.; > - The linewidth of the violin plots is thinner.; > - Removed the tics for the y-axis as they tend to overlap with each other. Using the style method they can be displayed if needed. ```{rubric} Additions; ```. - {func}`~anndata.concat` is now exported from scanpy, see {doc}`anndata:concatenation` for more info. {pr}`1338` {smaller}`I Virshup`; - Added highly variable gene selection strategy from Seurat v3 {pr}`1204` {smaller}`A Gayoso`; - Added [CellRank](https://github.com/theislab/cellrank/) to scanpy ecosystem {pr}`1304` {smaller}`giovp`; - Added `backup_url` param to {func}`~scanpy.read_10x_h5` {pr}`1296` {smaller}`A Gayoso`; - Allow prefix for {func}`~scanpy.read_10x_mtx` {pr}`1250` {smaller}`G Sturm`; - Optional tie correction for the `'wilcoxon'` method in {func}`~scanpy.tl.rank_genes_groups` {pr}`1330` {smaller}`S Rybakov`; - Use `sinfo` for {func}`~scanpy.logging.print_versions` and add {func}`~scanpy.logging.print_header` to do what it previously did. {pr}`1338` {smaller}`I Virshup` {pr}`1373`. ```{rubric} Bug fixes; ```. - Avoid warning in {func}`~scanpy.tl.rank_genes_groups` if 't-test' is passed {pr}`1303` {smaller}`A Wolf`; - Restrict sphinx version to \<3.1, >3.0 {pr}`1297` {smaller}`I Virshup`; - Clean up `_ranks` and fix `dendrogram` for scipy 1.5 {pr}`1290` {smaller}`S Rybakov`; - Use `.raw` to translate gene symbols if applicable {pr}`1278` {smaller}`E Rice`; - Fix `diffmap` ({issue}`1262`) {smaller}`G Eraslan`; - Fix `neighbors` in `spring_project` {issue}`1260` {smaller}`S Rybakov`; - Fix default size of dot in spatial plots {pr}`1255` {issue}`1253` {smaller}`giovp`; - Bumped version requirement of `scipy` to `scipy>1.4` to support `rmatmat` argument of `LinearOperator` {issue}`1246` {smaller}`I Virshup`; - Fix asymmetry of scores for the `'wilcoxon'` method in {func}`~scanpy.tl.rank_genes_groups` {issue}`754` {smaller}`S Rybakov`; - Avoid trimming of gene names in {func}`~s

Instructions: 
1. Analyze the content and the attribute description.
2. Determine if the content accurately reflects the intended quality attribute in this context.
3. If it does, label it as `true_positive: true`; if not, mark it as a `true_positive: false`.
4. If the content consists only of logs with no other text, mark it as a `true_positive: false`. 
4. If the content partially consists of logs, focus on analyzing remaining text. 
5. Add `reasoning` why the content is a true or false positive.
",False,"The provided content is a series of software development notes and updates, including feature additions, bug fixes, and version changes. These types of entries are typically found in changelog files or release notes. The quality attribute of 'Testability' pertains to how well software can be tested for functionality and fault detection. However, the given content discusses implementation details like code changes, parameter updates, and feature enhancements rather than anything related to testing methods, test case creation, or validation processes. Therefore, it does not align with the Testability quality attribute and is considered a false positive."
Testability,"lots.; > - The linewidth of the violin plots is thinner.; > - Removed the tics for the y-axis as they tend to overlap with each other. Using the style method they can be displayed if needed. ```{rubric} Additions; ```. - {func}`~anndata.concat` is now exported from scanpy, see {doc}`anndata:concatenation` for more info. {pr}`1338` {smaller}`I Virshup`; - Added highly variable gene selection strategy from Seurat v3 {pr}`1204` {smaller}`A Gayoso`; - Added [CellRank](https://github.com/theislab/cellrank/) to scanpy ecosystem {pr}`1304` {smaller}`giovp`; - Added `backup_url` param to {func}`~scanpy.read_10x_h5` {pr}`1296` {smaller}`A Gayoso`; - Allow prefix for {func}`~scanpy.read_10x_mtx` {pr}`1250` {smaller}`G Sturm`; - Optional tie correction for the `'wilcoxon'` method in {func}`~scanpy.tl.rank_genes_groups` {pr}`1330` {smaller}`S Rybakov`; - Use `sinfo` for {func}`~scanpy.logging.print_versions` and add {func}`~scanpy.logging.print_header` to do what it previously did. {pr}`1338` {smaller}`I Virshup` {pr}`1373`. ```{rubric} Bug fixes; ```. - Avoid warning in {func}`~scanpy.tl.rank_genes_groups` if 't-test' is passed {pr}`1303` {smaller}`A Wolf`; - Restrict sphinx version to \<3.1, >3.0 {pr}`1297` {smaller}`I Virshup`; - Clean up `_ranks` and fix `dendrogram` for scipy 1.5 {pr}`1290` {smaller}`S Rybakov`; - Use `.raw` to translate gene symbols if applicable {pr}`1278` {smaller}`E Rice`; - Fix `diffmap` ({issue}`1262`) {smaller}`G Eraslan`; - Fix `neighbors` in `spring_project` {issue}`1260` {smaller}`S Rybakov`; - Fix default size of dot in spatial plots {pr}`1255` {issue}`1253` {smaller}`giovp`; - Bumped version requirement of `scipy` to `scipy>1.4` to support `rmatmat` argument of `LinearOperator` {issue}`1246` {smaller}`I Virshup`; - Fix asymmetry of scores for the `'wilcoxon'` method in {func}`~scanpy.tl.rank_genes_groups` {issue}`754` {smaller}`S Rybakov`; - Avoid trimming of gene names in {func}`~scanpy.tl.rank_genes_groups` {issue}`753` {smaller}`S Rybakov`; ",test,MatchSource.DOCS,scverse,scanpy,1.10.2,https://github.com/scverse/scanpy/tree/1.10.2/docs/release-notes/1.6.0.md:3260,test,3260,docs/release-notes/1.6.0.md,https://scanpy.readthedocs.io,https://github.com/scverse/scanpy/tree/1.10.2/docs/release-notes/1.6.0.md,1,['test'],['test'],"The ease of validating software functionality through testing, enabling fault detection. This includes controlling and observing the system’s state, reducing complexity, and facilitating the creation of test cases and oracles.","
You are an expert in evaluating and categorizing quality attributes in software engineering. You possess the necessary skills to distinguish sentences that clearly relate to a given quality attribute from those that do not. 

Evaluate whether the content accurately aligns with its associated quality attribute, given the context provided. Your goal is to determine if the content makes sense in relation to the quality attribute description or if it is a false positive.

Data:

Quality Attribute: Testability
Attribute Description: The ease of validating software functionality through testing, enabling fault detection. This includes controlling and observing the system’s state, reducing complexity, and facilitating the creation of test cases and oracles.
Content: lots.; > - The linewidth of the violin plots is thinner.; > - Removed the tics for the y-axis as they tend to overlap with each other. Using the style method they can be displayed if needed. ```{rubric} Additions; ```. - {func}`~anndata.concat` is now exported from scanpy, see {doc}`anndata:concatenation` for more info. {pr}`1338` {smaller}`I Virshup`; - Added highly variable gene selection strategy from Seurat v3 {pr}`1204` {smaller}`A Gayoso`; - Added [CellRank](https://github.com/theislab/cellrank/) to scanpy ecosystem {pr}`1304` {smaller}`giovp`; - Added `backup_url` param to {func}`~scanpy.read_10x_h5` {pr}`1296` {smaller}`A Gayoso`; - Allow prefix for {func}`~scanpy.read_10x_mtx` {pr}`1250` {smaller}`G Sturm`; - Optional tie correction for the `'wilcoxon'` method in {func}`~scanpy.tl.rank_genes_groups` {pr}`1330` {smaller}`S Rybakov`; - Use `sinfo` for {func}`~scanpy.logging.print_versions` and add {func}`~scanpy.logging.print_header` to do what it previously did. {pr}`1338` {smaller}`I Virshup` {pr}`1373`. ```{rubric} Bug fixes; ```. - Avoid warning in {func}`~scanpy.tl.rank_genes_groups` if 't-test' is passed {pr}`1303` {smaller}`A Wolf`; - Restrict sphinx version to \<3.1, >3.0 {pr}`1297` {smaller}`I Virshup`; - Clean up `_ranks` and fix `dendrogram` for scipy 1.5 {pr}`1290` {smaller}`S Rybakov`; - Use `.raw` to translate gene symbols if applicable {pr}`1278` {smaller}`E Rice`; - Fix `diffmap` ({issue}`1262`) {smaller}`G Eraslan`; - Fix `neighbors` in `spring_project` {issue}`1260` {smaller}`S Rybakov`; - Fix default size of dot in spatial plots {pr}`1255` {issue}`1253` {smaller}`giovp`; - Bumped version requirement of `scipy` to `scipy>1.4` to support `rmatmat` argument of `LinearOperator` {issue}`1246` {smaller}`I Virshup`; - Fix asymmetry of scores for the `'wilcoxon'` method in {func}`~scanpy.tl.rank_genes_groups` {issue}`754` {smaller}`S Rybakov`; - Avoid trimming of gene names in {func}`~scanpy.tl.rank_genes_groups` {issue}`753` {smaller}`S Rybakov`; 

Instructions: 
1. Analyze the content and the attribute description.
2. Determine if the content accurately reflects the intended quality attribute in this context.
3. If it does, label it as `true_positive: true`; if not, mark it as a `true_positive: false`.
4. If the content consists only of logs with no other text, mark it as a `true_positive: false`. 
4. If the content partially consists of logs, focus on analyzing remaining text. 
5. Add `reasoning` why the content is a true or false positive.
",False,"The content provided primarily consists of log entries and changes made to the software, such as adding features, bug fixes, and updates. While this information is useful for understanding the project's development history, it does not directly address aspects of testability. The attribute description focuses on how easily a system can be tested, including controlling and observing the system’s state, reducing complexity, and facilitating test case creation. There is no indication in the content that testing or validation processes have been enhanced or discussed."
Testability,"message that recommends better outputs? Check that that error message is actually thrown.; - Can you place bounds on the values returned by your function?; - Are there different input values which should generate equivalent output (e.g. if an array is sparse or dense)?; - Do you have arguments which should have orthogonal effects on the output? Check that they are independent. For example, if there is a flag for extended output, the base output should remain the same either way.; - Are you optimizing a method? Check that it's results are the same as a gold standard implementation. ### Performance. It's more important that you're accurately testing the code works than it is that test suite runs quickly.; That said, it's nice when the test suite runs fast. You can check how long tests take to run by passing `--durations=0` argument to `pytest`.; Hopefully your new tests won't show up on top!; Some approaches to this include:. - Is there a common setup/ computation happening in each test? Consider caching these in a [scoped test fixture](https://docs.pytest.org/en/stable/fixture.html#sharing-test-data).; - Is the behaviour you're testing for dependent on the size of the data? If not, consider reducing it. ### Plotting tests. While computational functions will return arrays and values, it can be harder to work with the output of plotting functions. To make this easier, we use the `image_comparer` fixture for comparing plotting results (search the test suite for example usage).; This is used to check that generated plots look the same as they did previously.; Reference images (the expected output) are stored as `expected.png` to relevant tests directory under `scanpy/tests/_images`.; When run, the test suite will generate `actual.png` files for each check.; These files are compared, and if the `actual` plot differs from the reference plot, a `diff` of the images is also generated.; Paths for all these files will be reported when a test fails, and images for failed plots c",test,MatchSource.DOCS,scverse,scanpy,1.10.2,https://github.com/scverse/scanpy/tree/1.10.2/docs/dev/testing.md:3432,test,3432,docs/dev/testing.md,https://scanpy.readthedocs.io,https://github.com/scverse/scanpy/tree/1.10.2/docs/dev/testing.md,2,['test'],['test'],"The ease of validating software functionality through testing, enabling fault detection. This includes controlling and observing the system’s state, reducing complexity, and facilitating the creation of test cases and oracles.","
You are an expert in evaluating and categorizing quality attributes in software engineering. You possess the necessary skills to distinguish sentences that clearly relate to a given quality attribute from those that do not. 

Evaluate whether the content accurately aligns with its associated quality attribute, given the context provided. Your goal is to determine if the content makes sense in relation to the quality attribute description or if it is a false positive.

Data:

Quality Attribute: Testability
Attribute Description: The ease of validating software functionality through testing, enabling fault detection. This includes controlling and observing the system’s state, reducing complexity, and facilitating the creation of test cases and oracles.
Content: message that recommends better outputs? Check that that error message is actually thrown.; - Can you place bounds on the values returned by your function?; - Are there different input values which should generate equivalent output (e.g. if an array is sparse or dense)?; - Do you have arguments which should have orthogonal effects on the output? Check that they are independent. For example, if there is a flag for extended output, the base output should remain the same either way.; - Are you optimizing a method? Check that it's results are the same as a gold standard implementation. ### Performance. It's more important that you're accurately testing the code works than it is that test suite runs quickly.; That said, it's nice when the test suite runs fast. You can check how long tests take to run by passing `--durations=0` argument to `pytest`.; Hopefully your new tests won't show up on top!; Some approaches to this include:. - Is there a common setup/ computation happening in each test? Consider caching these in a [scoped test fixture](https://docs.pytest.org/en/stable/fixture.html#sharing-test-data).; - Is the behaviour you're testing for dependent on the size of the data? If not, consider reducing it. ### Plotting tests. While computational functions will return arrays and values, it can be harder to work with the output of plotting functions. To make this easier, we use the `image_comparer` fixture for comparing plotting results (search the test suite for example usage).; This is used to check that generated plots look the same as they did previously.; Reference images (the expected output) are stored as `expected.png` to relevant tests directory under `scanpy/tests/_images`.; When run, the test suite will generate `actual.png` files for each check.; These files are compared, and if the `actual` plot differs from the reference plot, a `diff` of the images is also generated.; Paths for all these files will be reported when a test fails, and images for failed plots c

Instructions: 
1. Analyze the content and the attribute description.
2. Determine if the content accurately reflects the intended quality attribute in this context.
3. If it does, label it as `true_positive: true`; if not, mark it as a `true_positive: false`.
4. If the content consists only of logs with no other text, mark it as a `true_positive: false`. 
4. If the content partially consists of logs, focus on analyzing remaining text. 
5. Add `reasoning` why the content is a true or false positive.
",True,"The content discusses optimizing methods and ensuring outputs match expectations through testing, which aligns with testability by validating functionality and facilitating test creation."
Testability,"mproved docs for `percent_top` argument of {func}`~scanpy.pp.calculate_qc_metrics` {pr}`2849` {smaller}`I Virshup`; * New basic clustering tutorial ({doc}`/tutorials/basics/clustering`), based on one from [scverse-tutorials](https://scverse-tutorials.readthedocs.io/en/latest/notebooks/basic-scrna-tutorial.html) {pr}`2901` {smaller}`I Virshup`; * Overhauled {doc}`/tutorials/index` page, and added new {doc}`/how-to/index` section to docs {pr}`2901` {smaller}`I Virshup`; * Added a new tutorial on working with dask ({doc}`/tutorials/experimental/dask`) {pr}`2901` {smaller}`I Gold` {smaller}`I Virshup`. ```{rubric} Bug fixes; ```. * Updated {func}`~scanpy.read_visium` such that it can read spaceranger 2.0 files {smaller}`L Lehner`; * Fix {func}`~scanpy.pp.normalize_total` for dask {pr}`2466` {smaller}`P Angerer`; * Fix setting `sc.settings.verbosity` in some cases {pr}`2605` {smaller}`P Angerer`; * Fix all remaining pandas warnings {pr}`2789` {smaller}`P Angerer`; * Fix some annoying plotting warnings around violin plots {pr}`2844` {smaller}`P Angerer`; * Scanpy now has a test job which tests against the minumum versions of the dependencies. In the process of implementing this, many bugs associated with using older versions of `pandas`, `anndata`, `numpy`, and `matplotlib` were fixed. {pr}`2816` {smaller}`I Virshup`; * Fix warnings caused by internal usage of `pandas.DataFrame.stack` with `pandas>=2.1` {pr}`2864`{smaller}`I Virshup`; * {func}`scanpy.get.aggregate` now always returns {class}`numpy.ndarray` {pr}`2893` {smaller}`S Dicks`; * Removes self from array of neighbors for `use_approx_neighbors = True` in {func}`~scanpy.pp.scrublet` {pr}`2896`{smaller}`S Dicks`; * Compatibility with scipy 1.13 {pr}`2943` {smaller}`I Virshup`; * Fix use of {func}`~scanpy.tl.dendrogram` on highly correlated low precision data {pr}`2928` {smaller}`P Angerer`; * Fix pytest deprecation warning {pr}`2879` {smaller}`P Angerer`. ```{rubric} Development; ```. * Scanpy is now tested against py",test,MatchSource.DOCS,scverse,scanpy,1.10.2,https://github.com/scverse/scanpy/tree/1.10.2/docs/release-notes/1.10.0.md:5295,test,5295,docs/release-notes/1.10.0.md,https://scanpy.readthedocs.io,https://github.com/scverse/scanpy/tree/1.10.2/docs/release-notes/1.10.0.md,2,['test'],"['test', 'tests']","The ease of validating software functionality through testing, enabling fault detection. This includes controlling and observing the system’s state, reducing complexity, and facilitating the creation of test cases and oracles.","
You are an expert in evaluating and categorizing quality attributes in software engineering. You possess the necessary skills to distinguish sentences that clearly relate to a given quality attribute from those that do not. 

Evaluate whether the content accurately aligns with its associated quality attribute, given the context provided. Your goal is to determine if the content makes sense in relation to the quality attribute description or if it is a false positive.

Data:

Quality Attribute: Testability
Attribute Description: The ease of validating software functionality through testing, enabling fault detection. This includes controlling and observing the system’s state, reducing complexity, and facilitating the creation of test cases and oracles.
Content: mproved docs for `percent_top` argument of {func}`~scanpy.pp.calculate_qc_metrics` {pr}`2849` {smaller}`I Virshup`; * New basic clustering tutorial ({doc}`/tutorials/basics/clustering`), based on one from [scverse-tutorials](https://scverse-tutorials.readthedocs.io/en/latest/notebooks/basic-scrna-tutorial.html) {pr}`2901` {smaller}`I Virshup`; * Overhauled {doc}`/tutorials/index` page, and added new {doc}`/how-to/index` section to docs {pr}`2901` {smaller}`I Virshup`; * Added a new tutorial on working with dask ({doc}`/tutorials/experimental/dask`) {pr}`2901` {smaller}`I Gold` {smaller}`I Virshup`. ```{rubric} Bug fixes; ```. * Updated {func}`~scanpy.read_visium` such that it can read spaceranger 2.0 files {smaller}`L Lehner`; * Fix {func}`~scanpy.pp.normalize_total` for dask {pr}`2466` {smaller}`P Angerer`; * Fix setting `sc.settings.verbosity` in some cases {pr}`2605` {smaller}`P Angerer`; * Fix all remaining pandas warnings {pr}`2789` {smaller}`P Angerer`; * Fix some annoying plotting warnings around violin plots {pr}`2844` {smaller}`P Angerer`; * Scanpy now has a test job which tests against the minumum versions of the dependencies. In the process of implementing this, many bugs associated with using older versions of `pandas`, `anndata`, `numpy`, and `matplotlib` were fixed. {pr}`2816` {smaller}`I Virshup`; * Fix warnings caused by internal usage of `pandas.DataFrame.stack` with `pandas>=2.1` {pr}`2864`{smaller}`I Virshup`; * {func}`scanpy.get.aggregate` now always returns {class}`numpy.ndarray` {pr}`2893` {smaller}`S Dicks`; * Removes self from array of neighbors for `use_approx_neighbors = True` in {func}`~scanpy.pp.scrublet` {pr}`2896`{smaller}`S Dicks`; * Compatibility with scipy 1.13 {pr}`2943` {smaller}`I Virshup`; * Fix use of {func}`~scanpy.tl.dendrogram` on highly correlated low precision data {pr}`2928` {smaller}`P Angerer`; * Fix pytest deprecation warning {pr}`2879` {smaller}`P Angerer`. ```{rubric} Development; ```. * Scanpy is now tested against py

Instructions: 
1. Analyze the content and the attribute description.
2. Determine if the content accurately reflects the intended quality attribute in this context.
3. If it does, label it as `true_positive: true`; if not, mark it as a `true_positive: false`.
4. If the content consists only of logs with no other text, mark it as a `true_positive: false`. 
4. If the content partially consists of logs, focus on analyzing remaining text. 
5. Add `reasoning` why the content is a true or false positive.
",True,"The provided content describes various updates and bug fixes in the software, such as improving documentation, fixing functions to handle newer versions of dependencies, addressing warnings, and ensuring compatibility with certain libraries. These activities are directly related to the Testability quality attribute because they involve testing against minimum versions of dependencies (minimizing complexity), fixing issues that cause test failures or warnings, and improving documentation which supports testing efforts. The content does not appear to be purely logging but includes implementation details that enhance testability."
Testability,"n 8`). ### Miscellaneous tips. - A lot of warnings can be thrown while running the test suite. It's often easier to read the test results with them hidden via the `--disable-pytest-warnings` argument. ## Writing tests. You can refer to the [existing test suite](https://github.com/scverse/scanpy/tree/main/scanpy/tests) for examples.; If you haven't written tests before, Software Carpentry has an [in-depth guide](https://katyhuff.github.io/2016-07-11-scipy/testing/01-basics.html) on the topic. We highly recommend using [Test Driven Development](https://en.wikipedia.org/wiki/Test-driven_development) when contributing code.; This not only ensures you have tests written, it often makes implementation easier since you start out with a specification for your function. Consider parameterizing your tests using the `pytest.mark.parameterize` and `pytest.fixture` decorators.; Documentation on these can be found [here](https://docs.pytest.org/en/stable/fixture.html), but we'd also recommend searching our test suite for existing usage. ### What to test. If you're not sure what to tests about your function, some ideas include:. - Are there arguments which conflict with each other? Check that if they are both passed, the function throws an error (see `pytest.raises` [in the pytest docs](https://docs.pytest.org/en/stable/assert.html#assertions-about-expected-exceptions).; - Are there input values which should cause your function to error?; - Did you add a helpful error message that recommends better outputs? Check that that error message is actually thrown.; - Can you place bounds on the values returned by your function?; - Are there different input values which should generate equivalent output (e.g. if an array is sparse or dense)?; - Do you have arguments which should have orthogonal effects on the output? Check that they are independent. For example, if there is a flag for extended output, the base output should remain the same either way.; - Are you optimizing a method? Check t",test,MatchSource.DOCS,scverse,scanpy,1.10.2,https://github.com/scverse/scanpy/tree/1.10.2/docs/dev/testing.md:1967,test,1967,docs/dev/testing.md,https://scanpy.readthedocs.io,https://github.com/scverse/scanpy/tree/1.10.2/docs/dev/testing.md,1,['test'],['test'],"The ease of validating software functionality through testing, enabling fault detection. This includes controlling and observing the system’s state, reducing complexity, and facilitating the creation of test cases and oracles.","
You are an expert in evaluating and categorizing quality attributes in software engineering. You possess the necessary skills to distinguish sentences that clearly relate to a given quality attribute from those that do not. 

Evaluate whether the content accurately aligns with its associated quality attribute, given the context provided. Your goal is to determine if the content makes sense in relation to the quality attribute description or if it is a false positive.

Data:

Quality Attribute: Testability
Attribute Description: The ease of validating software functionality through testing, enabling fault detection. This includes controlling and observing the system’s state, reducing complexity, and facilitating the creation of test cases and oracles.
Content: n 8`). ### Miscellaneous tips. - A lot of warnings can be thrown while running the test suite. It's often easier to read the test results with them hidden via the `--disable-pytest-warnings` argument. ## Writing tests. You can refer to the [existing test suite](https://github.com/scverse/scanpy/tree/main/scanpy/tests) for examples.; If you haven't written tests before, Software Carpentry has an [in-depth guide](https://katyhuff.github.io/2016-07-11-scipy/testing/01-basics.html) on the topic. We highly recommend using [Test Driven Development](https://en.wikipedia.org/wiki/Test-driven_development) when contributing code.; This not only ensures you have tests written, it often makes implementation easier since you start out with a specification for your function. Consider parameterizing your tests using the `pytest.mark.parameterize` and `pytest.fixture` decorators.; Documentation on these can be found [here](https://docs.pytest.org/en/stable/fixture.html), but we'd also recommend searching our test suite for existing usage. ### What to test. If you're not sure what to tests about your function, some ideas include:. - Are there arguments which conflict with each other? Check that if they are both passed, the function throws an error (see `pytest.raises` [in the pytest docs](https://docs.pytest.org/en/stable/assert.html#assertions-about-expected-exceptions).; - Are there input values which should cause your function to error?; - Did you add a helpful error message that recommends better outputs? Check that that error message is actually thrown.; - Can you place bounds on the values returned by your function?; - Are there different input values which should generate equivalent output (e.g. if an array is sparse or dense)?; - Do you have arguments which should have orthogonal effects on the output? Check that they are independent. For example, if there is a flag for extended output, the base output should remain the same either way.; - Are you optimizing a method? Check t

Instructions: 
1. Analyze the content and the attribute description.
2. Determine if the content accurately reflects the intended quality attribute in this context.
3. If it does, label it as `true_positive: true`; if not, mark it as a `true_positive: false`.
4. If the content consists only of logs with no other text, mark it as a `true_positive: false`. 
4. If the content partially consists of logs, focus on analyzing remaining text. 
5. Add `reasoning` why the content is a true or false positive.
",True,"The content discusses test writing, including tips and best practices for creating tests using pytest fixtures and parameterization. This aligns with Testability as it focuses on enabling testing through structured test cases and ensuring code can be validated effectively."
Testability,nData.layers` or {attr}`~anndata.AnnData.obsm` {pr}`1173` {smaller}`I Virshup`. ```{rubric} External tools; ```. - `scanpy.external.pp.scvi` for preprocessing with scVI {pr}`1085` {smaller}`G Xing`; - Guide for using `Scanpy in R` {pr}`1186` {smaller}`L Zappia`. ```{rubric} Performance; ```. - {func}`~scanpy.pp.pca` now uses efficient implicit centering for sparse matrices. This can lead to signifigantly improved performance for large datasets {pr}`1066` {smaller}`A Tarashansky`; - {func}`~scanpy.tl.score_genes` now has an efficient implementation for sparse matrices with missing values {pr}`1196` {smaller}`redst4r`. ```{warning}; The new {func}`~scanpy.pp.pca` implementation can result in slightly different results for sparse matrices. See the pr ({pr}`1066`) and documentation for more info.; ```. ```{rubric} Code design; ```. - {func}`~scanpy.pl.stacked_violin` can now be used as a subplot {pr}`1084` {smaller}`P Angerer`; - {func}`~scanpy.tl.score_genes` has improved logging {pr}`1119` {smaller}`G Eraslan`; - {func}`~scanpy.pp.scale` now saves mean and standard deviation in the {attr}`~anndata.AnnData.var` {pr}`1173` {smaller}`A Wolf`; - {func}`~scanpy.external.tl.harmony_timeseries` {pr}`1091` {smaller}`A Mousa`. ```{rubric} Bug fixes; ```. - {func}`~scanpy.pp.combat` now works when `obs_names` aren't unique. {pr}`1215` {smaller}`I Virshup`; - {func}`~scanpy.pp.scale` can now be used on dense arrays without centering {pr}`1160` {smaller}`simonwm`; - {func}`~scanpy.pp.regress_out` now works when some features are constant {pr}`1194` {smaller}`simonwm`; - {func}`~scanpy.pp.normalize_total` errored if the passed object was a view {pr}`1200` {smaller}`I Virshup`; - {func}`~scanpy.pp.neighbors` sometimes ignored the `n_pcs` param {pr}`1124` {smaller}`V Bergen`; - {func}`~scanpy.datasets.ebi_expression_atlas` which contained some out-of-date URLs {pr}`1102` {smaller}`I Virshup`; - {func}`~scanpy.tl.ingest` for UMAP `0.4` {pr}`1165` {smaller}`S Rybakov`; - {func}`~scanp,log,MatchSource.DOCS,scverse,scanpy,1.10.2,https://github.com/scverse/scanpy/tree/1.10.2/docs/release-notes/1.5.0.md:2141,logging,2141,docs/release-notes/1.5.0.md,https://scanpy.readthedocs.io,https://github.com/scverse/scanpy/tree/1.10.2/docs/release-notes/1.5.0.md,1,['log'],['logging'],"The ease of validating software functionality through testing, enabling fault detection. This includes controlling and observing the system’s state, reducing complexity, and facilitating the creation of test cases and oracles.","
You are an expert in evaluating and categorizing quality attributes in software engineering. You possess the necessary skills to distinguish sentences that clearly relate to a given quality attribute from those that do not. 

Evaluate whether the content accurately aligns with its associated quality attribute, given the context provided. Your goal is to determine if the content makes sense in relation to the quality attribute description or if it is a false positive.

Data:

Quality Attribute: Testability
Attribute Description: The ease of validating software functionality through testing, enabling fault detection. This includes controlling and observing the system’s state, reducing complexity, and facilitating the creation of test cases and oracles.
Content: nData.layers` or {attr}`~anndata.AnnData.obsm` {pr}`1173` {smaller}`I Virshup`. ```{rubric} External tools; ```. - `scanpy.external.pp.scvi` for preprocessing with scVI {pr}`1085` {smaller}`G Xing`; - Guide for using `Scanpy in R` {pr}`1186` {smaller}`L Zappia`. ```{rubric} Performance; ```. - {func}`~scanpy.pp.pca` now uses efficient implicit centering for sparse matrices. This can lead to signifigantly improved performance for large datasets {pr}`1066` {smaller}`A Tarashansky`; - {func}`~scanpy.tl.score_genes` now has an efficient implementation for sparse matrices with missing values {pr}`1196` {smaller}`redst4r`. ```{warning}; The new {func}`~scanpy.pp.pca` implementation can result in slightly different results for sparse matrices. See the pr ({pr}`1066`) and documentation for more info.; ```. ```{rubric} Code design; ```. - {func}`~scanpy.pl.stacked_violin` can now be used as a subplot {pr}`1084` {smaller}`P Angerer`; - {func}`~scanpy.tl.score_genes` has improved logging {pr}`1119` {smaller}`G Eraslan`; - {func}`~scanpy.pp.scale` now saves mean and standard deviation in the {attr}`~anndata.AnnData.var` {pr}`1173` {smaller}`A Wolf`; - {func}`~scanpy.external.tl.harmony_timeseries` {pr}`1091` {smaller}`A Mousa`. ```{rubric} Bug fixes; ```. - {func}`~scanpy.pp.combat` now works when `obs_names` aren't unique. {pr}`1215` {smaller}`I Virshup`; - {func}`~scanpy.pp.scale` can now be used on dense arrays without centering {pr}`1160` {smaller}`simonwm`; - {func}`~scanpy.pp.regress_out` now works when some features are constant {pr}`1194` {smaller}`simonwm`; - {func}`~scanpy.pp.normalize_total` errored if the passed object was a view {pr}`1200` {smaller}`I Virshup`; - {func}`~scanpy.pp.neighbors` sometimes ignored the `n_pcs` param {pr}`1124` {smaller}`V Bergen`; - {func}`~scanpy.datasets.ebi_expression_atlas` which contained some out-of-date URLs {pr}`1102` {smaller}`I Virshup`; - {func}`~scanpy.tl.ingest` for UMAP `0.4` {pr}`1165` {smaller}`S Rybakov`; - {func}`~scanp

Instructions: 
1. Analyze the content and the attribute description.
2. Determine if the content accurately reflects the intended quality attribute in this context.
3. If it does, label it as `true_positive: true`; if not, mark it as a `true_positive: false`.
4. If the content consists only of logs with no other text, mark it as a `true_positive: false`. 
4. If the content partially consists of logs, focus on analyzing remaining text. 
5. Add `reasoning` why the content is a true or false positive.
",False,"The provided content discusses updates and features in Scanpy, including bug fixes, performance improvements, code design changes, etc. While these are important aspects of software development, they don't directly relate to testability. Testability focuses on how well a system can be tested, including creating effective test cases and oracles. The content here is more about implementation details rather than testing capabilities."
Testability,"ngs can be thrown while running the test suite. It's often easier to read the test results with them hidden via the `--disable-pytest-warnings` argument. ## Writing tests. You can refer to the [existing test suite](https://github.com/scverse/scanpy/tree/main/scanpy/tests) for examples.; If you haven't written tests before, Software Carpentry has an [in-depth guide](https://katyhuff.github.io/2016-07-11-scipy/testing/01-basics.html) on the topic. We highly recommend using [Test Driven Development](https://en.wikipedia.org/wiki/Test-driven_development) when contributing code.; This not only ensures you have tests written, it often makes implementation easier since you start out with a specification for your function. Consider parameterizing your tests using the `pytest.mark.parameterize` and `pytest.fixture` decorators.; Documentation on these can be found [here](https://docs.pytest.org/en/stable/fixture.html), but we'd also recommend searching our test suite for existing usage. ### What to test. If you're not sure what to tests about your function, some ideas include:. - Are there arguments which conflict with each other? Check that if they are both passed, the function throws an error (see `pytest.raises` [in the pytest docs](https://docs.pytest.org/en/stable/assert.html#assertions-about-expected-exceptions).; - Are there input values which should cause your function to error?; - Did you add a helpful error message that recommends better outputs? Check that that error message is actually thrown.; - Can you place bounds on the values returned by your function?; - Are there different input values which should generate equivalent output (e.g. if an array is sparse or dense)?; - Do you have arguments which should have orthogonal effects on the output? Check that they are independent. For example, if there is a flag for extended output, the base output should remain the same either way.; - Are you optimizing a method? Check that it's results are the same as a gold standa",test,MatchSource.DOCS,scverse,scanpy,1.10.2,https://github.com/scverse/scanpy/tree/1.10.2/docs/dev/testing.md:2010,test,2010,docs/dev/testing.md,https://scanpy.readthedocs.io,https://github.com/scverse/scanpy/tree/1.10.2/docs/dev/testing.md,1,['test'],['test'],"The ease of validating software functionality through testing, enabling fault detection. This includes controlling and observing the system’s state, reducing complexity, and facilitating the creation of test cases and oracles.","
You are an expert in evaluating and categorizing quality attributes in software engineering. You possess the necessary skills to distinguish sentences that clearly relate to a given quality attribute from those that do not. 

Evaluate whether the content accurately aligns with its associated quality attribute, given the context provided. Your goal is to determine if the content makes sense in relation to the quality attribute description or if it is a false positive.

Data:

Quality Attribute: Testability
Attribute Description: The ease of validating software functionality through testing, enabling fault detection. This includes controlling and observing the system’s state, reducing complexity, and facilitating the creation of test cases and oracles.
Content: ngs can be thrown while running the test suite. It's often easier to read the test results with them hidden via the `--disable-pytest-warnings` argument. ## Writing tests. You can refer to the [existing test suite](https://github.com/scverse/scanpy/tree/main/scanpy/tests) for examples.; If you haven't written tests before, Software Carpentry has an [in-depth guide](https://katyhuff.github.io/2016-07-11-scipy/testing/01-basics.html) on the topic. We highly recommend using [Test Driven Development](https://en.wikipedia.org/wiki/Test-driven_development) when contributing code.; This not only ensures you have tests written, it often makes implementation easier since you start out with a specification for your function. Consider parameterizing your tests using the `pytest.mark.parameterize` and `pytest.fixture` decorators.; Documentation on these can be found [here](https://docs.pytest.org/en/stable/fixture.html), but we'd also recommend searching our test suite for existing usage. ### What to test. If you're not sure what to tests about your function, some ideas include:. - Are there arguments which conflict with each other? Check that if they are both passed, the function throws an error (see `pytest.raises` [in the pytest docs](https://docs.pytest.org/en/stable/assert.html#assertions-about-expected-exceptions).; - Are there input values which should cause your function to error?; - Did you add a helpful error message that recommends better outputs? Check that that error message is actually thrown.; - Can you place bounds on the values returned by your function?; - Are there different input values which should generate equivalent output (e.g. if an array is sparse or dense)?; - Do you have arguments which should have orthogonal effects on the output? Check that they are independent. For example, if there is a flag for extended output, the base output should remain the same either way.; - Are you optimizing a method? Check that it's results are the same as a gold standa

Instructions: 
1. Analyze the content and the attribute description.
2. Determine if the content accurately reflects the intended quality attribute in this context.
3. If it does, label it as `true_positive: true`; if not, mark it as a `true_positive: false`.
4. If the content consists only of logs with no other text, mark it as a `true_positive: false`. 
4. If the content partially consists of logs, focus on analyzing remaining text. 
5. Add `reasoning` why the content is a true or false positive.
",True,"The content provided discusses test writing practices, including using pytest fixtures and parameterization, which are directly related to testability. It also includes guidance on what aspects of a function should be tested, such as error handling, input validation, output bounds, etc., all of which contribute to the ease of testing (testability). Therefore, this content accurately reflects the Testability quality attribute."
Testability,"now the code is working before making a release is the test suite. ## Running the tests. We use [pytest](https://docs.pytest.org/en/stable/) to test scanpy.; To run the tests first make sure you have the required dependencies (`pip install -e "".[test,dev]""`), then run `pytest` from the root of the repository. It can take a while to run the whole test suite. There are a few ways to cut down on this while working on a PR:. 1. Only run a subset of the tests. This can be done with the `-k` argument from pytest (e.g. `pytest -k test_plotting.py` or `pytest -k ""test_umap*""`; 2. Run the tests in parallel. If you install the pytest extension [pytest-xdist](https://github.com/pytest-dev/pytest-xdist) you can run tests in parallel with the `--numprocesses` argument to pytest (e.g. `pytest -n 8`). ### Miscellaneous tips. - A lot of warnings can be thrown while running the test suite. It's often easier to read the test results with them hidden via the `--disable-pytest-warnings` argument. ## Writing tests. You can refer to the [existing test suite](https://github.com/scverse/scanpy/tree/main/scanpy/tests) for examples.; If you haven't written tests before, Software Carpentry has an [in-depth guide](https://katyhuff.github.io/2016-07-11-scipy/testing/01-basics.html) on the topic. We highly recommend using [Test Driven Development](https://en.wikipedia.org/wiki/Test-driven_development) when contributing code.; This not only ensures you have tests written, it often makes implementation easier since you start out with a specification for your function. Consider parameterizing your tests using the `pytest.mark.parameterize` and `pytest.fixture` decorators.; Documentation on these can be found [here](https://docs.pytest.org/en/stable/fixture.html), but we'd also recommend searching our test suite for existing usage. ### What to test. If you're not sure what to tests about your function, some ideas include:. - Are there arguments which conflict with each other? Check that if they are ",test,MatchSource.DOCS,scverse,scanpy,1.10.2,https://github.com/scverse/scanpy/tree/1.10.2/docs/dev/testing.md:1171,tests,1171,docs/dev/testing.md,https://scanpy.readthedocs.io,https://github.com/scverse/scanpy/tree/1.10.2/docs/dev/testing.md,1,['test'],['tests'],"The ease of validating software functionality through testing, enabling fault detection. This includes controlling and observing the system’s state, reducing complexity, and facilitating the creation of test cases and oracles.","
You are an expert in evaluating and categorizing quality attributes in software engineering. You possess the necessary skills to distinguish sentences that clearly relate to a given quality attribute from those that do not. 

Evaluate whether the content accurately aligns with its associated quality attribute, given the context provided. Your goal is to determine if the content makes sense in relation to the quality attribute description or if it is a false positive.

Data:

Quality Attribute: Testability
Attribute Description: The ease of validating software functionality through testing, enabling fault detection. This includes controlling and observing the system’s state, reducing complexity, and facilitating the creation of test cases and oracles.
Content: now the code is working before making a release is the test suite. ## Running the tests. We use [pytest](https://docs.pytest.org/en/stable/) to test scanpy.; To run the tests first make sure you have the required dependencies (`pip install -e "".[test,dev]""`), then run `pytest` from the root of the repository. It can take a while to run the whole test suite. There are a few ways to cut down on this while working on a PR:. 1. Only run a subset of the tests. This can be done with the `-k` argument from pytest (e.g. `pytest -k test_plotting.py` or `pytest -k ""test_umap*""`; 2. Run the tests in parallel. If you install the pytest extension [pytest-xdist](https://github.com/pytest-dev/pytest-xdist) you can run tests in parallel with the `--numprocesses` argument to pytest (e.g. `pytest -n 8`). ### Miscellaneous tips. - A lot of warnings can be thrown while running the test suite. It's often easier to read the test results with them hidden via the `--disable-pytest-warnings` argument. ## Writing tests. You can refer to the [existing test suite](https://github.com/scverse/scanpy/tree/main/scanpy/tests) for examples.; If you haven't written tests before, Software Carpentry has an [in-depth guide](https://katyhuff.github.io/2016-07-11-scipy/testing/01-basics.html) on the topic. We highly recommend using [Test Driven Development](https://en.wikipedia.org/wiki/Test-driven_development) when contributing code.; This not only ensures you have tests written, it often makes implementation easier since you start out with a specification for your function. Consider parameterizing your tests using the `pytest.mark.parameterize` and `pytest.fixture` decorators.; Documentation on these can be found [here](https://docs.pytest.org/en/stable/fixture.html), but we'd also recommend searching our test suite for existing usage. ### What to test. If you're not sure what to tests about your function, some ideas include:. - Are there arguments which conflict with each other? Check that if they are 

Instructions: 
1. Analyze the content and the attribute description.
2. Determine if the content accurately reflects the intended quality attribute in this context.
3. If it does, label it as `true_positive: true`; if not, mark it as a `true_positive: false`.
4. If the content consists only of logs with no other text, mark it as a `true_positive: false`. 
4. If the content partially consists of logs, focus on analyzing remaining text. 
5. Add `reasoning` why the content is a true or false positive.
",True,"The content discusses setting up and running tests using pytest, which relates to testability by enabling validation of software functionality through testing."
Testability,"ns).; - Are there input values which should cause your function to error?; - Did you add a helpful error message that recommends better outputs? Check that that error message is actually thrown.; - Can you place bounds on the values returned by your function?; - Are there different input values which should generate equivalent output (e.g. if an array is sparse or dense)?; - Do you have arguments which should have orthogonal effects on the output? Check that they are independent. For example, if there is a flag for extended output, the base output should remain the same either way.; - Are you optimizing a method? Check that it's results are the same as a gold standard implementation. ### Performance. It's more important that you're accurately testing the code works than it is that test suite runs quickly.; That said, it's nice when the test suite runs fast. You can check how long tests take to run by passing `--durations=0` argument to `pytest`.; Hopefully your new tests won't show up on top!; Some approaches to this include:. - Is there a common setup/ computation happening in each test? Consider caching these in a [scoped test fixture](https://docs.pytest.org/en/stable/fixture.html#sharing-test-data).; - Is the behaviour you're testing for dependent on the size of the data? If not, consider reducing it. ### Plotting tests. While computational functions will return arrays and values, it can be harder to work with the output of plotting functions. To make this easier, we use the `image_comparer` fixture for comparing plotting results (search the test suite for example usage).; This is used to check that generated plots look the same as they did previously.; Reference images (the expected output) are stored as `expected.png` to relevant tests directory under `scanpy/tests/_images`.; When run, the test suite will generate `actual.png` files for each check.; These files are compared, and if the `actual` plot differs from the reference plot, a `diff` of the images is als",test,MatchSource.DOCS,scverse,scanpy,1.10.2,https://github.com/scverse/scanpy/tree/1.10.2/docs/dev/testing.md:3312,tests,3312,docs/dev/testing.md,https://scanpy.readthedocs.io,https://github.com/scverse/scanpy/tree/1.10.2/docs/dev/testing.md,1,['test'],['tests'],"The ease of validating software functionality through testing, enabling fault detection. This includes controlling and observing the system’s state, reducing complexity, and facilitating the creation of test cases and oracles.","
You are an expert in evaluating and categorizing quality attributes in software engineering. You possess the necessary skills to distinguish sentences that clearly relate to a given quality attribute from those that do not. 

Evaluate whether the content accurately aligns with its associated quality attribute, given the context provided. Your goal is to determine if the content makes sense in relation to the quality attribute description or if it is a false positive.

Data:

Quality Attribute: Testability
Attribute Description: The ease of validating software functionality through testing, enabling fault detection. This includes controlling and observing the system’s state, reducing complexity, and facilitating the creation of test cases and oracles.
Content: ns).; - Are there input values which should cause your function to error?; - Did you add a helpful error message that recommends better outputs? Check that that error message is actually thrown.; - Can you place bounds on the values returned by your function?; - Are there different input values which should generate equivalent output (e.g. if an array is sparse or dense)?; - Do you have arguments which should have orthogonal effects on the output? Check that they are independent. For example, if there is a flag for extended output, the base output should remain the same either way.; - Are you optimizing a method? Check that it's results are the same as a gold standard implementation. ### Performance. It's more important that you're accurately testing the code works than it is that test suite runs quickly.; That said, it's nice when the test suite runs fast. You can check how long tests take to run by passing `--durations=0` argument to `pytest`.; Hopefully your new tests won't show up on top!; Some approaches to this include:. - Is there a common setup/ computation happening in each test? Consider caching these in a [scoped test fixture](https://docs.pytest.org/en/stable/fixture.html#sharing-test-data).; - Is the behaviour you're testing for dependent on the size of the data? If not, consider reducing it. ### Plotting tests. While computational functions will return arrays and values, it can be harder to work with the output of plotting functions. To make this easier, we use the `image_comparer` fixture for comparing plotting results (search the test suite for example usage).; This is used to check that generated plots look the same as they did previously.; Reference images (the expected output) are stored as `expected.png` to relevant tests directory under `scanpy/tests/_images`.; When run, the test suite will generate `actual.png` files for each check.; These files are compared, and if the `actual` plot differs from the reference plot, a `diff` of the images is als

Instructions: 
1. Analyze the content and the attribute description.
2. Determine if the content accurately reflects the intended quality attribute in this context.
3. If it does, label it as `true_positive: true`; if not, mark it as a `true_positive: false`.
4. If the content consists only of logs with no other text, mark it as a `true_positive: false`. 
4. If the content partially consists of logs, focus on analyzing remaining text. 
5. Add `reasoning` why the content is a true or false positive.
",True,"The content includes test-related questions and guidance on testing practices, such as error messages, bounds, input values, optimization checks, and performance considerations. These align with aspects of Testability, which involves ensuring software can be tested effectively."
Testability,"re there arguments which conflict with each other? Check that if they are both passed, the function throws an error (see `pytest.raises` [in the pytest docs](https://docs.pytest.org/en/stable/assert.html#assertions-about-expected-exceptions).; - Are there input values which should cause your function to error?; - Did you add a helpful error message that recommends better outputs? Check that that error message is actually thrown.; - Can you place bounds on the values returned by your function?; - Are there different input values which should generate equivalent output (e.g. if an array is sparse or dense)?; - Do you have arguments which should have orthogonal effects on the output? Check that they are independent. For example, if there is a flag for extended output, the base output should remain the same either way.; - Are you optimizing a method? Check that it's results are the same as a gold standard implementation. ### Performance. It's more important that you're accurately testing the code works than it is that test suite runs quickly.; That said, it's nice when the test suite runs fast. You can check how long tests take to run by passing `--durations=0` argument to `pytest`.; Hopefully your new tests won't show up on top!; Some approaches to this include:. - Is there a common setup/ computation happening in each test? Consider caching these in a [scoped test fixture](https://docs.pytest.org/en/stable/fixture.html#sharing-test-data).; - Is the behaviour you're testing for dependent on the size of the data? If not, consider reducing it. ### Plotting tests. While computational functions will return arrays and values, it can be harder to work with the output of plotting functions. To make this easier, we use the `image_comparer` fixture for comparing plotting results (search the test suite for example usage).; This is used to check that generated plots look the same as they did previously.; Reference images (the expected output) are stored as `expected.png` to releva",test,MatchSource.DOCS,scverse,scanpy,1.10.2,https://github.com/scverse/scanpy/tree/1.10.2/docs/dev/testing.md:3085,testing,3085,docs/dev/testing.md,https://scanpy.readthedocs.io,https://github.com/scverse/scanpy/tree/1.10.2/docs/dev/testing.md,2,['test'],"['test', 'testing']","The ease of validating software functionality through testing, enabling fault detection. This includes controlling and observing the system’s state, reducing complexity, and facilitating the creation of test cases and oracles.","
You are an expert in evaluating and categorizing quality attributes in software engineering. You possess the necessary skills to distinguish sentences that clearly relate to a given quality attribute from those that do not. 

Evaluate whether the content accurately aligns with its associated quality attribute, given the context provided. Your goal is to determine if the content makes sense in relation to the quality attribute description or if it is a false positive.

Data:

Quality Attribute: Testability
Attribute Description: The ease of validating software functionality through testing, enabling fault detection. This includes controlling and observing the system’s state, reducing complexity, and facilitating the creation of test cases and oracles.
Content: re there arguments which conflict with each other? Check that if they are both passed, the function throws an error (see `pytest.raises` [in the pytest docs](https://docs.pytest.org/en/stable/assert.html#assertions-about-expected-exceptions).; - Are there input values which should cause your function to error?; - Did you add a helpful error message that recommends better outputs? Check that that error message is actually thrown.; - Can you place bounds on the values returned by your function?; - Are there different input values which should generate equivalent output (e.g. if an array is sparse or dense)?; - Do you have arguments which should have orthogonal effects on the output? Check that they are independent. For example, if there is a flag for extended output, the base output should remain the same either way.; - Are you optimizing a method? Check that it's results are the same as a gold standard implementation. ### Performance. It's more important that you're accurately testing the code works than it is that test suite runs quickly.; That said, it's nice when the test suite runs fast. You can check how long tests take to run by passing `--durations=0` argument to `pytest`.; Hopefully your new tests won't show up on top!; Some approaches to this include:. - Is there a common setup/ computation happening in each test? Consider caching these in a [scoped test fixture](https://docs.pytest.org/en/stable/fixture.html#sharing-test-data).; - Is the behaviour you're testing for dependent on the size of the data? If not, consider reducing it. ### Plotting tests. While computational functions will return arrays and values, it can be harder to work with the output of plotting functions. To make this easier, we use the `image_comparer` fixture for comparing plotting results (search the test suite for example usage).; This is used to check that generated plots look the same as they did previously.; Reference images (the expected output) are stored as `expected.png` to releva

Instructions: 
1. Analyze the content and the attribute description.
2. Determine if the content accurately reflects the intended quality attribute in this context.
3. If it does, label it as `true_positive: true`; if not, mark it as a `true_positive: false`.
4. If the content consists only of logs with no other text, mark it as a `true_positive: false`. 
4. If the content partially consists of logs, focus on analyzing remaining text. 
5. Add `reasoning` why the content is a true or false positive.
",True,"The content provided discusses various testing-related topics such as checking for errors in function outputs, optimizing methods by comparing results with gold standards, and improving test performance and setup. These all relate to ensuring that software functionality can be tested effectively (testability). The mention of pytest.raises suggests error handling during testing which is part of testability. Also, the guidance on reducing computational data size if not dependent on size and using fixtures or specific tools like image_comparer for plotting tests contributes to making the system more testable by addressing potential complexities in testing certain behaviors."
Testability,"s first make sure you have the required dependencies (`pip install -e "".[test,dev]""`), then run `pytest` from the root of the repository. It can take a while to run the whole test suite. There are a few ways to cut down on this while working on a PR:. 1. Only run a subset of the tests. This can be done with the `-k` argument from pytest (e.g. `pytest -k test_plotting.py` or `pytest -k ""test_umap*""`; 2. Run the tests in parallel. If you install the pytest extension [pytest-xdist](https://github.com/pytest-dev/pytest-xdist) you can run tests in parallel with the `--numprocesses` argument to pytest (e.g. `pytest -n 8`). ### Miscellaneous tips. - A lot of warnings can be thrown while running the test suite. It's often easier to read the test results with them hidden via the `--disable-pytest-warnings` argument. ## Writing tests. You can refer to the [existing test suite](https://github.com/scverse/scanpy/tree/main/scanpy/tests) for examples.; If you haven't written tests before, Software Carpentry has an [in-depth guide](https://katyhuff.github.io/2016-07-11-scipy/testing/01-basics.html) on the topic. We highly recommend using [Test Driven Development](https://en.wikipedia.org/wiki/Test-driven_development) when contributing code.; This not only ensures you have tests written, it often makes implementation easier since you start out with a specification for your function. Consider parameterizing your tests using the `pytest.mark.parameterize` and `pytest.fixture` decorators.; Documentation on these can be found [here](https://docs.pytest.org/en/stable/fixture.html), but we'd also recommend searching our test suite for existing usage. ### What to test. If you're not sure what to tests about your function, some ideas include:. - Are there arguments which conflict with each other? Check that if they are both passed, the function throws an error (see `pytest.raises` [in the pytest docs](https://docs.pytest.org/en/stable/assert.html#assertions-about-expected-exceptions).; - Ar",test,MatchSource.DOCS,scverse,scanpy,1.10.2,https://github.com/scverse/scanpy/tree/1.10.2/docs/dev/testing.md:1317,tests,1317,docs/dev/testing.md,https://scanpy.readthedocs.io,https://github.com/scverse/scanpy/tree/1.10.2/docs/dev/testing.md,1,['test'],['tests'],"The ease of validating software functionality through testing, enabling fault detection. This includes controlling and observing the system’s state, reducing complexity, and facilitating the creation of test cases and oracles.","
You are an expert in evaluating and categorizing quality attributes in software engineering. You possess the necessary skills to distinguish sentences that clearly relate to a given quality attribute from those that do not. 

Evaluate whether the content accurately aligns with its associated quality attribute, given the context provided. Your goal is to determine if the content makes sense in relation to the quality attribute description or if it is a false positive.

Data:

Quality Attribute: Testability
Attribute Description: The ease of validating software functionality through testing, enabling fault detection. This includes controlling and observing the system’s state, reducing complexity, and facilitating the creation of test cases and oracles.
Content: s first make sure you have the required dependencies (`pip install -e "".[test,dev]""`), then run `pytest` from the root of the repository. It can take a while to run the whole test suite. There are a few ways to cut down on this while working on a PR:. 1. Only run a subset of the tests. This can be done with the `-k` argument from pytest (e.g. `pytest -k test_plotting.py` or `pytest -k ""test_umap*""`; 2. Run the tests in parallel. If you install the pytest extension [pytest-xdist](https://github.com/pytest-dev/pytest-xdist) you can run tests in parallel with the `--numprocesses` argument to pytest (e.g. `pytest -n 8`). ### Miscellaneous tips. - A lot of warnings can be thrown while running the test suite. It's often easier to read the test results with them hidden via the `--disable-pytest-warnings` argument. ## Writing tests. You can refer to the [existing test suite](https://github.com/scverse/scanpy/tree/main/scanpy/tests) for examples.; If you haven't written tests before, Software Carpentry has an [in-depth guide](https://katyhuff.github.io/2016-07-11-scipy/testing/01-basics.html) on the topic. We highly recommend using [Test Driven Development](https://en.wikipedia.org/wiki/Test-driven_development) when contributing code.; This not only ensures you have tests written, it often makes implementation easier since you start out with a specification for your function. Consider parameterizing your tests using the `pytest.mark.parameterize` and `pytest.fixture` decorators.; Documentation on these can be found [here](https://docs.pytest.org/en/stable/fixture.html), but we'd also recommend searching our test suite for existing usage. ### What to test. If you're not sure what to tests about your function, some ideas include:. - Are there arguments which conflict with each other? Check that if they are both passed, the function throws an error (see `pytest.raises` [in the pytest docs](https://docs.pytest.org/en/stable/assert.html#assertions-about-expected-exceptions).; - Ar

Instructions: 
1. Analyze the content and the attribute description.
2. Determine if the content accurately reflects the intended quality attribute in this context.
3. If it does, label it as `true_positive: true`; if not, mark it as a `true_positive: false`.
4. If the content consists only of logs with no other text, mark it as a `true_positive: false`. 
4. If the content partially consists of logs, focus on analyzing remaining text. 
5. Add `reasoning` why the content is a true or false positive.
",True,"The content discusses setting up tests using pytest, offers tips to optimize test runs, and provides guidance on writing tests, including parameterization and TDD. These are directly related to testability as they describe how to structure and execute tests, thereby aiding in the validation of software functionality. Therefore, it accurately reflects the quality attribute of Testability."
Testability,"ssibly the most important part of contributing to any open source package is the test suite.; Implementations may change, but the only way we can know the code is working before making a release is the test suite. ## Running the tests. We use [pytest](https://docs.pytest.org/en/stable/) to test scanpy.; To run the tests first make sure you have the required dependencies (`pip install -e "".[test,dev]""`), then run `pytest` from the root of the repository. It can take a while to run the whole test suite. There are a few ways to cut down on this while working on a PR:. 1. Only run a subset of the tests. This can be done with the `-k` argument from pytest (e.g. `pytest -k test_plotting.py` or `pytest -k ""test_umap*""`; 2. Run the tests in parallel. If you install the pytest extension [pytest-xdist](https://github.com/pytest-dev/pytest-xdist) you can run tests in parallel with the `--numprocesses` argument to pytest (e.g. `pytest -n 8`). ### Miscellaneous tips. - A lot of warnings can be thrown while running the test suite. It's often easier to read the test results with them hidden via the `--disable-pytest-warnings` argument. ## Writing tests. You can refer to the [existing test suite](https://github.com/scverse/scanpy/tree/main/scanpy/tests) for examples.; If you haven't written tests before, Software Carpentry has an [in-depth guide](https://katyhuff.github.io/2016-07-11-scipy/testing/01-basics.html) on the topic. We highly recommend using [Test Driven Development](https://en.wikipedia.org/wiki/Test-driven_development) when contributing code.; This not only ensures you have tests written, it often makes implementation easier since you start out with a specification for your function. Consider parameterizing your tests using the `pytest.mark.parameterize` and `pytest.fixture` decorators.; Documentation on these can be found [here](https://docs.pytest.org/en/stable/fixture.html), but we'd also recommend searching our test suite for existing usage. ### What to test. If yo",test,MatchSource.DOCS,scverse,scanpy,1.10.2,https://github.com/scverse/scanpy/tree/1.10.2/docs/dev/testing.md:1042,test,1042,docs/dev/testing.md,https://scanpy.readthedocs.io,https://github.com/scverse/scanpy/tree/1.10.2/docs/dev/testing.md,1,['test'],['test'],"The ease of validating software functionality through testing, enabling fault detection. This includes controlling and observing the system’s state, reducing complexity, and facilitating the creation of test cases and oracles.","
You are an expert in evaluating and categorizing quality attributes in software engineering. You possess the necessary skills to distinguish sentences that clearly relate to a given quality attribute from those that do not. 

Evaluate whether the content accurately aligns with its associated quality attribute, given the context provided. Your goal is to determine if the content makes sense in relation to the quality attribute description or if it is a false positive.

Data:

Quality Attribute: Testability
Attribute Description: The ease of validating software functionality through testing, enabling fault detection. This includes controlling and observing the system’s state, reducing complexity, and facilitating the creation of test cases and oracles.
Content: ssibly the most important part of contributing to any open source package is the test suite.; Implementations may change, but the only way we can know the code is working before making a release is the test suite. ## Running the tests. We use [pytest](https://docs.pytest.org/en/stable/) to test scanpy.; To run the tests first make sure you have the required dependencies (`pip install -e "".[test,dev]""`), then run `pytest` from the root of the repository. It can take a while to run the whole test suite. There are a few ways to cut down on this while working on a PR:. 1. Only run a subset of the tests. This can be done with the `-k` argument from pytest (e.g. `pytest -k test_plotting.py` or `pytest -k ""test_umap*""`; 2. Run the tests in parallel. If you install the pytest extension [pytest-xdist](https://github.com/pytest-dev/pytest-xdist) you can run tests in parallel with the `--numprocesses` argument to pytest (e.g. `pytest -n 8`). ### Miscellaneous tips. - A lot of warnings can be thrown while running the test suite. It's often easier to read the test results with them hidden via the `--disable-pytest-warnings` argument. ## Writing tests. You can refer to the [existing test suite](https://github.com/scverse/scanpy/tree/main/scanpy/tests) for examples.; If you haven't written tests before, Software Carpentry has an [in-depth guide](https://katyhuff.github.io/2016-07-11-scipy/testing/01-basics.html) on the topic. We highly recommend using [Test Driven Development](https://en.wikipedia.org/wiki/Test-driven_development) when contributing code.; This not only ensures you have tests written, it often makes implementation easier since you start out with a specification for your function. Consider parameterizing your tests using the `pytest.mark.parameterize` and `pytest.fixture` decorators.; Documentation on these can be found [here](https://docs.pytest.org/en/stable/fixture.html), but we'd also recommend searching our test suite for existing usage. ### What to test. If yo

Instructions: 
1. Analyze the content and the attribute description.
2. Determine if the content accurately reflects the intended quality attribute in this context.
3. If it does, label it as `true_positive: true`; if not, mark it as a `true_positive: false`.
4. If the content consists only of logs with no other text, mark it as a `true_positive: false`. 
4. If the content partially consists of logs, focus on analyzing remaining text. 
5. Add `reasoning` why the content is a true or false positive.
",True,"The content discusses how to run and manage tests for an open source package, including setting up test environments, using pytest, and structuring test cases. These all relate directly to the concept of Testability because they describe how functionality can be validated through testing methods."
Testability,"sts in parallel. If you install the pytest extension [pytest-xdist](https://github.com/pytest-dev/pytest-xdist) you can run tests in parallel with the `--numprocesses` argument to pytest (e.g. `pytest -n 8`). ### Miscellaneous tips. - A lot of warnings can be thrown while running the test suite. It's often easier to read the test results with them hidden via the `--disable-pytest-warnings` argument. ## Writing tests. You can refer to the [existing test suite](https://github.com/scverse/scanpy/tree/main/scanpy/tests) for examples.; If you haven't written tests before, Software Carpentry has an [in-depth guide](https://katyhuff.github.io/2016-07-11-scipy/testing/01-basics.html) on the topic. We highly recommend using [Test Driven Development](https://en.wikipedia.org/wiki/Test-driven_development) when contributing code.; This not only ensures you have tests written, it often makes implementation easier since you start out with a specification for your function. Consider parameterizing your tests using the `pytest.mark.parameterize` and `pytest.fixture` decorators.; Documentation on these can be found [here](https://docs.pytest.org/en/stable/fixture.html), but we'd also recommend searching our test suite for existing usage. ### What to test. If you're not sure what to tests about your function, some ideas include:. - Are there arguments which conflict with each other? Check that if they are both passed, the function throws an error (see `pytest.raises` [in the pytest docs](https://docs.pytest.org/en/stable/assert.html#assertions-about-expected-exceptions).; - Are there input values which should cause your function to error?; - Did you add a helpful error message that recommends better outputs? Check that that error message is actually thrown.; - Can you place bounds on the values returned by your function?; - Are there different input values which should generate equivalent output (e.g. if an array is sparse or dense)?; - Do you have arguments which should have orthogo",test,MatchSource.DOCS,scverse,scanpy,1.10.2,https://github.com/scverse/scanpy/tree/1.10.2/docs/dev/testing.md:1760,tests,1760,docs/dev/testing.md,https://scanpy.readthedocs.io,https://github.com/scverse/scanpy/tree/1.10.2/docs/dev/testing.md,1,['test'],['tests'],"The ease of validating software functionality through testing, enabling fault detection. This includes controlling and observing the system’s state, reducing complexity, and facilitating the creation of test cases and oracles.","
You are an expert in evaluating and categorizing quality attributes in software engineering. You possess the necessary skills to distinguish sentences that clearly relate to a given quality attribute from those that do not. 

Evaluate whether the content accurately aligns with its associated quality attribute, given the context provided. Your goal is to determine if the content makes sense in relation to the quality attribute description or if it is a false positive.

Data:

Quality Attribute: Testability
Attribute Description: The ease of validating software functionality through testing, enabling fault detection. This includes controlling and observing the system’s state, reducing complexity, and facilitating the creation of test cases and oracles.
Content: sts in parallel. If you install the pytest extension [pytest-xdist](https://github.com/pytest-dev/pytest-xdist) you can run tests in parallel with the `--numprocesses` argument to pytest (e.g. `pytest -n 8`). ### Miscellaneous tips. - A lot of warnings can be thrown while running the test suite. It's often easier to read the test results with them hidden via the `--disable-pytest-warnings` argument. ## Writing tests. You can refer to the [existing test suite](https://github.com/scverse/scanpy/tree/main/scanpy/tests) for examples.; If you haven't written tests before, Software Carpentry has an [in-depth guide](https://katyhuff.github.io/2016-07-11-scipy/testing/01-basics.html) on the topic. We highly recommend using [Test Driven Development](https://en.wikipedia.org/wiki/Test-driven_development) when contributing code.; This not only ensures you have tests written, it often makes implementation easier since you start out with a specification for your function. Consider parameterizing your tests using the `pytest.mark.parameterize` and `pytest.fixture` decorators.; Documentation on these can be found [here](https://docs.pytest.org/en/stable/fixture.html), but we'd also recommend searching our test suite for existing usage. ### What to test. If you're not sure what to tests about your function, some ideas include:. - Are there arguments which conflict with each other? Check that if they are both passed, the function throws an error (see `pytest.raises` [in the pytest docs](https://docs.pytest.org/en/stable/assert.html#assertions-about-expected-exceptions).; - Are there input values which should cause your function to error?; - Did you add a helpful error message that recommends better outputs? Check that that error message is actually thrown.; - Can you place bounds on the values returned by your function?; - Are there different input values which should generate equivalent output (e.g. if an array is sparse or dense)?; - Do you have arguments which should have orthogo

Instructions: 
1. Analyze the content and the attribute description.
2. Determine if the content accurately reflects the intended quality attribute in this context.
3. If it does, label it as `true_positive: true`; if not, mark it as a `true_positive: false`.
4. If the content consists only of logs with no other text, mark it as a `true_positive: false`. 
4. If the content partially consists of logs, focus on analyzing remaining text. 
5. Add `reasoning` why the content is a true or false positive.
",True,"The provided content discusses running tests in parallel using pytest-xdist and pytest arguments, which directly relates to testability by enabling efficient testing. The guide also covers writing tests and test cases, ensuring that code can be validated through testing, aligning with the Testability attribute."
Testability,"t,dev]""`), then run `pytest` from the root of the repository. It can take a while to run the whole test suite. There are a few ways to cut down on this while working on a PR:. 1. Only run a subset of the tests. This can be done with the `-k` argument from pytest (e.g. `pytest -k test_plotting.py` or `pytest -k ""test_umap*""`; 2. Run the tests in parallel. If you install the pytest extension [pytest-xdist](https://github.com/pytest-dev/pytest-xdist) you can run tests in parallel with the `--numprocesses` argument to pytest (e.g. `pytest -n 8`). ### Miscellaneous tips. - A lot of warnings can be thrown while running the test suite. It's often easier to read the test results with them hidden via the `--disable-pytest-warnings` argument. ## Writing tests. You can refer to the [existing test suite](https://github.com/scverse/scanpy/tree/main/scanpy/tests) for examples.; If you haven't written tests before, Software Carpentry has an [in-depth guide](https://katyhuff.github.io/2016-07-11-scipy/testing/01-basics.html) on the topic. We highly recommend using [Test Driven Development](https://en.wikipedia.org/wiki/Test-driven_development) when contributing code.; This not only ensures you have tests written, it often makes implementation easier since you start out with a specification for your function. Consider parameterizing your tests using the `pytest.mark.parameterize` and `pytest.fixture` decorators.; Documentation on these can be found [here](https://docs.pytest.org/en/stable/fixture.html), but we'd also recommend searching our test suite for existing usage. ### What to test. If you're not sure what to tests about your function, some ideas include:. - Are there arguments which conflict with each other? Check that if they are both passed, the function throws an error (see `pytest.raises` [in the pytest docs](https://docs.pytest.org/en/stable/assert.html#assertions-about-expected-exceptions).; - Are there input values which should cause your function to error?; - Did you ",test,MatchSource.DOCS,scverse,scanpy,1.10.2,https://github.com/scverse/scanpy/tree/1.10.2/docs/dev/testing.md:1418,testing,1418,docs/dev/testing.md,https://scanpy.readthedocs.io,https://github.com/scverse/scanpy/tree/1.10.2/docs/dev/testing.md,1,['test'],['testing'],"The ease of validating software functionality through testing, enabling fault detection. This includes controlling and observing the system’s state, reducing complexity, and facilitating the creation of test cases and oracles.","
You are an expert in evaluating and categorizing quality attributes in software engineering. You possess the necessary skills to distinguish sentences that clearly relate to a given quality attribute from those that do not. 

Evaluate whether the content accurately aligns with its associated quality attribute, given the context provided. Your goal is to determine if the content makes sense in relation to the quality attribute description or if it is a false positive.

Data:

Quality Attribute: Testability
Attribute Description: The ease of validating software functionality through testing, enabling fault detection. This includes controlling and observing the system’s state, reducing complexity, and facilitating the creation of test cases and oracles.
Content: t,dev]""`), then run `pytest` from the root of the repository. It can take a while to run the whole test suite. There are a few ways to cut down on this while working on a PR:. 1. Only run a subset of the tests. This can be done with the `-k` argument from pytest (e.g. `pytest -k test_plotting.py` or `pytest -k ""test_umap*""`; 2. Run the tests in parallel. If you install the pytest extension [pytest-xdist](https://github.com/pytest-dev/pytest-xdist) you can run tests in parallel with the `--numprocesses` argument to pytest (e.g. `pytest -n 8`). ### Miscellaneous tips. - A lot of warnings can be thrown while running the test suite. It's often easier to read the test results with them hidden via the `--disable-pytest-warnings` argument. ## Writing tests. You can refer to the [existing test suite](https://github.com/scverse/scanpy/tree/main/scanpy/tests) for examples.; If you haven't written tests before, Software Carpentry has an [in-depth guide](https://katyhuff.github.io/2016-07-11-scipy/testing/01-basics.html) on the topic. We highly recommend using [Test Driven Development](https://en.wikipedia.org/wiki/Test-driven_development) when contributing code.; This not only ensures you have tests written, it often makes implementation easier since you start out with a specification for your function. Consider parameterizing your tests using the `pytest.mark.parameterize` and `pytest.fixture` decorators.; Documentation on these can be found [here](https://docs.pytest.org/en/stable/fixture.html), but we'd also recommend searching our test suite for existing usage. ### What to test. If you're not sure what to tests about your function, some ideas include:. - Are there arguments which conflict with each other? Check that if they are both passed, the function throws an error (see `pytest.raises` [in the pytest docs](https://docs.pytest.org/en/stable/assert.html#assertions-about-expected-exceptions).; - Are there input values which should cause your function to error?; - Did you 

Instructions: 
1. Analyze the content and the attribute description.
2. Determine if the content accurately reflects the intended quality attribute in this context.
3. If it does, label it as `true_positive: true`; if not, mark it as a `true_positive: false`.
4. If the content consists only of logs with no other text, mark it as a `true_positive: false`. 
4. If the content partially consists of logs, focus on analyzing remaining text. 
5. Add `reasoning` why the content is a true or false positive.
",True,"The content discusses using pytest to run tests, provides tips on how to optimize test runs, and mentions best practices for writing and parameterizing tests. All of these are directly related to Testability as they involve making software functionality easier to validate through testing methods."
Testability,"ubsample` with `copy=True` can now be called in backed mode {pr}`2624` {smaller}`E Roellin`; * {func}`scanpy.external.pp.harmony_integrate` now runs with 64 bit floats improving reproducibility {pr}`2655` {smaller}`S Dicks`; * {func}`scanpy.tl.rank_genes_groups` no longer warns that it's default was changed from t-test_overestim_var to t-test {pr}`2798` {smaller}`L Heumos`; * `scanpy.pp.calculate_qc_metrics` now allows `qc_vars` to be passed as a string {pr}`2859` {smaller}`N Teyssier`; * {func}`scanpy.tl.leiden` and {func}`scanpy.tl.louvain` now store clustering parameters in the key provided by the `key_added` parameter instead of always writing to (or overwriting) a default key {pr}`2864` {smaller}`J Fan`; * {func}`scanpy.pp.scale` now clips `np.ndarray` also at `- max_value` for zero-centering {pr}`2913` {smaller}`S Dicks`; * Support sparse chunks in dask {func}`~scanpy.pp.scale`, {func}`~scanpy.pp.normalize_total` and {func}`~scanpy.pp.highly_variable_genes` (`seurat` and `cell-ranger` tested) {pr}`2856` {smaller}`ilan-gold`. ```{rubric} Docs; ```. * Doc style overhaul {pr}`2220` {smaller}`A Gayoso`; * Re-add search-as-you-type, this time via `readthedocs-sphinx-search` {pr}`2805` {smaller}`P Angerer`; * Fixed a lot of broken usage examples {pr}`2605` {smaller}`P Angerer`; * Improved harmonization of return field of `sc.pp` and `sc.tl` functions {pr}`2742` {smaller}`E Roellin`; * Improved docs for `percent_top` argument of {func}`~scanpy.pp.calculate_qc_metrics` {pr}`2849` {smaller}`I Virshup`; * New basic clustering tutorial ({doc}`/tutorials/basics/clustering`), based on one from [scverse-tutorials](https://scverse-tutorials.readthedocs.io/en/latest/notebooks/basic-scrna-tutorial.html) {pr}`2901` {smaller}`I Virshup`; * Overhauled {doc}`/tutorials/index` page, and added new {doc}`/how-to/index` section to docs {pr}`2901` {smaller}`I Virshup`; * Added a new tutorial on working with dask ({doc}`/tutorials/experimental/dask`) {pr}`2901` {smaller}`I Gold` {smaller",test,MatchSource.DOCS,scverse,scanpy,1.10.2,https://github.com/scverse/scanpy/tree/1.10.2/docs/release-notes/1.10.0.md:3808,tested,3808,docs/release-notes/1.10.0.md,https://scanpy.readthedocs.io,https://github.com/scverse/scanpy/tree/1.10.2/docs/release-notes/1.10.0.md,1,['test'],['tested'],"The ease of validating software functionality through testing, enabling fault detection. This includes controlling and observing the system’s state, reducing complexity, and facilitating the creation of test cases and oracles.","
You are an expert in evaluating and categorizing quality attributes in software engineering. You possess the necessary skills to distinguish sentences that clearly relate to a given quality attribute from those that do not. 

Evaluate whether the content accurately aligns with its associated quality attribute, given the context provided. Your goal is to determine if the content makes sense in relation to the quality attribute description or if it is a false positive.

Data:

Quality Attribute: Testability
Attribute Description: The ease of validating software functionality through testing, enabling fault detection. This includes controlling and observing the system’s state, reducing complexity, and facilitating the creation of test cases and oracles.
Content: ubsample` with `copy=True` can now be called in backed mode {pr}`2624` {smaller}`E Roellin`; * {func}`scanpy.external.pp.harmony_integrate` now runs with 64 bit floats improving reproducibility {pr}`2655` {smaller}`S Dicks`; * {func}`scanpy.tl.rank_genes_groups` no longer warns that it's default was changed from t-test_overestim_var to t-test {pr}`2798` {smaller}`L Heumos`; * `scanpy.pp.calculate_qc_metrics` now allows `qc_vars` to be passed as a string {pr}`2859` {smaller}`N Teyssier`; * {func}`scanpy.tl.leiden` and {func}`scanpy.tl.louvain` now store clustering parameters in the key provided by the `key_added` parameter instead of always writing to (or overwriting) a default key {pr}`2864` {smaller}`J Fan`; * {func}`scanpy.pp.scale` now clips `np.ndarray` also at `- max_value` for zero-centering {pr}`2913` {smaller}`S Dicks`; * Support sparse chunks in dask {func}`~scanpy.pp.scale`, {func}`~scanpy.pp.normalize_total` and {func}`~scanpy.pp.highly_variable_genes` (`seurat` and `cell-ranger` tested) {pr}`2856` {smaller}`ilan-gold`. ```{rubric} Docs; ```. * Doc style overhaul {pr}`2220` {smaller}`A Gayoso`; * Re-add search-as-you-type, this time via `readthedocs-sphinx-search` {pr}`2805` {smaller}`P Angerer`; * Fixed a lot of broken usage examples {pr}`2605` {smaller}`P Angerer`; * Improved harmonization of return field of `sc.pp` and `sc.tl` functions {pr}`2742` {smaller}`E Roellin`; * Improved docs for `percent_top` argument of {func}`~scanpy.pp.calculate_qc_metrics` {pr}`2849` {smaller}`I Virshup`; * New basic clustering tutorial ({doc}`/tutorials/basics/clustering`), based on one from [scverse-tutorials](https://scverse-tutorials.readthedocs.io/en/latest/notebooks/basic-scrna-tutorial.html) {pr}`2901` {smaller}`I Virshup`; * Overhauled {doc}`/tutorials/index` page, and added new {doc}`/how-to/index` section to docs {pr}`2901` {smaller}`I Virshup`; * Added a new tutorial on working with dask ({doc}`/tutorials/experimental/dask`) {pr}`2901` {smaller}`I Gold` {smaller

Instructions: 
1. Analyze the content and the attribute description.
2. Determine if the content accurately reflects the intended quality attribute in this context.
3. If it does, label it as `true_positive: true`; if not, mark it as a `true_positive: false`.
4. If the content consists only of logs with no other text, mark it as a `true_positive: false`. 
4. If the content partially consists of logs, focus on analyzing remaining text. 
5. Add `reasoning` why the content is a true or false positive.
",False,"The provided content appears to be a list of software changes, including fixes and improvements, along with associated pull requests and contributors. It mentions things like 'scanpy' functions being updated, parameters being changed, warnings being addressed, and documentation improvements. While there is some mention of function updates which may relate to testability (e.g., improved reproducibility), the majority of the content focuses on software development practices such as code changes, bug fixes, and documentation enhancements. There is no explicit indication that these changes are related to testing or validating software functionality in a way that directly aligns with 'Testability' as defined. Therefore, this content does not accurately reflect the intended quality attribute of Testability."
Testability,"{func}`scanpy.pp.scrublet` (and related functions) can now be used on `AnnData` objects containing multiple batches {pr}`1965` {smaller}`J Manning`; - Number of variables plotted with {func}`~scanpy.pl.pca_loadings` can now be controlled with `n_points` argument. Additionally, variables are no longer repeated if the anndata has less than 30 variables {pr}`2075` {smaller}`Yves33`; - Dask arrays now work with {func}`scanpy.pp.normalize_total` {pr}`1663` {smaller}`G Buckley, I Virshup`; - {func}`~scanpy.pl.embedding_density` now allows more than 10 groups {pr}`1936` {smaller}`A Wolf`; - Embedding plots can now pass `colorbar_loc` to specify the location of colorbar legend, or pass `None` to not show a colorbar {pr}`1821` {smaller}`A Schaar` {smaller}`I Virshup`; - Embedding plots now have a `dimensions` argument, which lets users select which dimensions of their embedding to plot and uses the same broadcasting rules as other arguments {pr}`1538` {smaller}`I Virshup`; - {func}`~scanpy.logging.print_versions` now uses `session_info` {pr}`2089` {smaller}`P Angerer` {smaller}`I Virshup`. ```{rubric} Ecosystem; ```. Multiple packages have been added to our ecosystem page, including:. - [decoupler](https://github.com/saezlab/decoupler-py) a for footprint analysis and pathway enrichement {pr}`2186` {smaller}`PB Mompel`; - [dandelion](https://github.com/zktuong/dandelion) for B-cell receptor analysis {pr}`1953` {smaller}`Z Tuong`; - [CIARA](https://github.com/ScialdoneLab/CIARA_python) a feature selection tools for identifying rare cell types {pr}`2175` {smaller}`M Stock`. ```{rubric} Bug fixes; ```. - Fixed finding variables with `use_raw=True` and `basis=None` in {func}`scanpy.pl.scatter` {pr}`2027` {smaller}`E Rice`; - Fixed {func}`scanpy.pp.scrublet` to address {issue}`1957` {smaller}`FlMai` and ensure raw counts are used for simulation; - Functions in {mod}`scanpy.datasets` no longer throw `OldFormatWarnings` when using `anndata` `0.8` {pr}`2096` {smaller}`I Virshup`; - F",log,MatchSource.DOCS,scverse,scanpy,1.10.2,https://github.com/scverse/scanpy/tree/1.10.2/docs/release-notes/1.9.0.md:2535,logging,2535,docs/release-notes/1.9.0.md,https://scanpy.readthedocs.io,https://github.com/scverse/scanpy/tree/1.10.2/docs/release-notes/1.9.0.md,1,['log'],['logging'],"The ease of validating software functionality through testing, enabling fault detection. This includes controlling and observing the system’s state, reducing complexity, and facilitating the creation of test cases and oracles.","
You are an expert in evaluating and categorizing quality attributes in software engineering. You possess the necessary skills to distinguish sentences that clearly relate to a given quality attribute from those that do not. 

Evaluate whether the content accurately aligns with its associated quality attribute, given the context provided. Your goal is to determine if the content makes sense in relation to the quality attribute description or if it is a false positive.

Data:

Quality Attribute: Testability
Attribute Description: The ease of validating software functionality through testing, enabling fault detection. This includes controlling and observing the system’s state, reducing complexity, and facilitating the creation of test cases and oracles.
Content: {func}`scanpy.pp.scrublet` (and related functions) can now be used on `AnnData` objects containing multiple batches {pr}`1965` {smaller}`J Manning`; - Number of variables plotted with {func}`~scanpy.pl.pca_loadings` can now be controlled with `n_points` argument. Additionally, variables are no longer repeated if the anndata has less than 30 variables {pr}`2075` {smaller}`Yves33`; - Dask arrays now work with {func}`scanpy.pp.normalize_total` {pr}`1663` {smaller}`G Buckley, I Virshup`; - {func}`~scanpy.pl.embedding_density` now allows more than 10 groups {pr}`1936` {smaller}`A Wolf`; - Embedding plots can now pass `colorbar_loc` to specify the location of colorbar legend, or pass `None` to not show a colorbar {pr}`1821` {smaller}`A Schaar` {smaller}`I Virshup`; - Embedding plots now have a `dimensions` argument, which lets users select which dimensions of their embedding to plot and uses the same broadcasting rules as other arguments {pr}`1538` {smaller}`I Virshup`; - {func}`~scanpy.logging.print_versions` now uses `session_info` {pr}`2089` {smaller}`P Angerer` {smaller}`I Virshup`. ```{rubric} Ecosystem; ```. Multiple packages have been added to our ecosystem page, including:. - [decoupler](https://github.com/saezlab/decoupler-py) a for footprint analysis and pathway enrichement {pr}`2186` {smaller}`PB Mompel`; - [dandelion](https://github.com/zktuong/dandelion) for B-cell receptor analysis {pr}`1953` {smaller}`Z Tuong`; - [CIARA](https://github.com/ScialdoneLab/CIARA_python) a feature selection tools for identifying rare cell types {pr}`2175` {smaller}`M Stock`. ```{rubric} Bug fixes; ```. - Fixed finding variables with `use_raw=True` and `basis=None` in {func}`scanpy.pl.scatter` {pr}`2027` {smaller}`E Rice`; - Fixed {func}`scanpy.pp.scrublet` to address {issue}`1957` {smaller}`FlMai` and ensure raw counts are used for simulation; - Functions in {mod}`scanpy.datasets` no longer throw `OldFormatWarnings` when using `anndata` `0.8` {pr}`2096` {smaller}`I Virshup`; - F

Instructions: 
1. Analyze the content and the attribute description.
2. Determine if the content accurately reflects the intended quality attribute in this context.
3. If it does, label it as `true_positive: true`; if not, mark it as a `true_positive: false`.
4. If the content consists only of logs with no other text, mark it as a `true_positive: false`. 
4. If the content partially consists of logs, focus on analyzing remaining text. 
5. Add `reasoning` why the content is a true or false positive.
",True,"The provided content discusses changes to specific functions in scanpy, including bug fixes and new features. It mentions issues like {pr}`1965`, {pr}`2075`, etc., which are likely problem reports related to the functionality of these functions. The context involves improving testability by ensuring that the software can be tested more effectively through updates to its testing tools and processes. By addressing bugs and enhancing usability, these changes contribute to making the system easier to test, thus aligning with the Testability quality attribute."
Usability,"# Contributing code. ## Development workflow. 1. {ref}`Fork the Scanpy repository <forking-and-cloning>` to your own GitHub account; 2. Create a {ref}`development environment <dev-environments>`; 3. {ref}`Create a new branch <creating-a-branch>` for your PR; 4. Add your feature or bugfix to the codebase; 5. {ref}`Make sure all tests are passing <tests>`; 6. {ref}`Build and visually check any changed documentation <building-the-docs>`; 7. {ref}`Open a PR back to the main repository <open-a-pr>`. ## Code style. New code should follow; [Black](https://black.readthedocs.io/en/stable/the_black_code_style.html); and; [flake8](https://flake8.pycqa.org).; We ignore a couple of flake8 checks which are documented in the .flake8 file in the root of this repository.; To learn how to ignore checks per line please read; [flake8 violations](https://flake8.pycqa.org/en/latest/user/violations.html).; Additionally, we use Scanpy’s; [EditorConfig](https://github.com/scverse/scanpy/blob/main/.editorconfig),; so using an editor/IDE with support for both is helpful.; ",learn,MatchSource.DOCS,scverse,scanpy,1.10.2,https://github.com/scverse/scanpy/tree/1.10.2/docs/dev/code.md:769,learn,769,docs/dev/code.md,https://scanpy.readthedocs.io,https://github.com/scverse/scanpy/tree/1.10.2/docs/dev/code.md,1,['learn'],['learn'],"The degree to which users can effectively and efficiently accomplish tasks, including support for error recovery and user satisfaction. Usability covers ease of learning, efficient usage, and adaptability to user needs.","
You are an expert in evaluating and categorizing quality attributes in software engineering. You possess the necessary skills to distinguish sentences that clearly relate to a given quality attribute from those that do not. 

Evaluate whether the content accurately aligns with its associated quality attribute, given the context provided. Your goal is to determine if the content makes sense in relation to the quality attribute description or if it is a false positive.

Data:

Quality Attribute: Usability
Attribute Description: The degree to which users can effectively and efficiently accomplish tasks, including support for error recovery and user satisfaction. Usability covers ease of learning, efficient usage, and adaptability to user needs.
Content: # Contributing code. ## Development workflow. 1. {ref}`Fork the Scanpy repository <forking-and-cloning>` to your own GitHub account; 2. Create a {ref}`development environment <dev-environments>`; 3. {ref}`Create a new branch <creating-a-branch>` for your PR; 4. Add your feature or bugfix to the codebase; 5. {ref}`Make sure all tests are passing <tests>`; 6. {ref}`Build and visually check any changed documentation <building-the-docs>`; 7. {ref}`Open a PR back to the main repository <open-a-pr>`. ## Code style. New code should follow; [Black](https://black.readthedocs.io/en/stable/the_black_code_style.html); and; [flake8](https://flake8.pycqa.org).; We ignore a couple of flake8 checks which are documented in the .flake8 file in the root of this repository.; To learn how to ignore checks per line please read; [flake8 violations](https://flake8.pycqa.org/en/latest/user/violations.html).; Additionally, we use Scanpy’s; [EditorConfig](https://github.com/scverse/scanpy/blob/main/.editorconfig),; so using an editor/IDE with support for both is helpful.; 

Instructions: 
1. Analyze the content and the attribute description.
2. Determine if the content accurately reflects the intended quality attribute in this context.
3. If it does, label it as `true_positive: true`; if not, mark it as a `true_positive: false`.
4. If the content consists only of logs with no other text, mark it as a `true_positive: false`. 
4. If the content partially consists of logs, focus on analyzing remaining text. 
5. Add `reasoning` why the content is a true or false positive.
",False,"The content provided describes a process for contributing code to an open-source project, including steps like forking repositories, setting up environments, creating branches, adding changes, ensuring tests pass, building documentation, and opening pull requests. While this relates to software development practices, it doesn't directly address the usability of the software or user experience aspects. Usability focuses on how well users can interact with the software, including ease of use and efficiency, whereas this content is more about contributing code following specific procedures."
Usability,"# Contributors. [anndata graph](https://github.com/scverse/anndata/graphs/contributors>) | [scanpy graph](https://github.com/scverse/scanpy/graphs/contributors)| ☀ = maintainer; ## Current developers. - [Isaac Virshup](https://github.com/ivirshup), lead developer since 2019 ☀; - [Gökcen Eraslan](https://twitter.com/gokcen), developer, diverse contributions ☀; - [Sergei Rybakov](https://github.com/Koncopd), developer, diverse contributions ☀; - [Fidel Ramirez](https://github.com/fidelram) developer, plotting ☀; - [Giovanni Palla](https://twitter.com/g_palla1), developer, spatial data; - [Malte Luecken](https://twitter.com/MDLuecken), developer, community & forum; - [Lukas Heumos](https://twitter.com/LukasHeumos), developer, diverse contributions; - [Philipp Angerer](https://github.com/flying-sheep), developer, software quality, initial anndata conception ☀. ## Other roles. - [Alex Wolf](https://twitter.com/falexwolf): lead developer 2016-2019, initial anndata & scanpy conception; - [Fabian Theis](https://twitter.com/fabian_theis) & lab: enabling guidance, support and environment. ## Former developers. - Tom White: developer 2018-2019, distributed computing; ",guid,MatchSource.DOCS,scverse,scanpy,1.10.2,https://github.com/scverse/scanpy/tree/1.10.2/docs/contributors.md:1061,guidance,1061,docs/contributors.md,https://scanpy.readthedocs.io,https://github.com/scverse/scanpy/tree/1.10.2/docs/contributors.md,1,['guid'],['guidance'],"The degree to which users can effectively and efficiently accomplish tasks, including support for error recovery and user satisfaction. Usability covers ease of learning, efficient usage, and adaptability to user needs.","
You are an expert in evaluating and categorizing quality attributes in software engineering. You possess the necessary skills to distinguish sentences that clearly relate to a given quality attribute from those that do not. 

Evaluate whether the content accurately aligns with its associated quality attribute, given the context provided. Your goal is to determine if the content makes sense in relation to the quality attribute description or if it is a false positive.

Data:

Quality Attribute: Usability
Attribute Description: The degree to which users can effectively and efficiently accomplish tasks, including support for error recovery and user satisfaction. Usability covers ease of learning, efficient usage, and adaptability to user needs.
Content: # Contributors. [anndata graph](https://github.com/scverse/anndata/graphs/contributors>) | [scanpy graph](https://github.com/scverse/scanpy/graphs/contributors)| ☀ = maintainer; ## Current developers. - [Isaac Virshup](https://github.com/ivirshup), lead developer since 2019 ☀; - [Gökcen Eraslan](https://twitter.com/gokcen), developer, diverse contributions ☀; - [Sergei Rybakov](https://github.com/Koncopd), developer, diverse contributions ☀; - [Fidel Ramirez](https://github.com/fidelram) developer, plotting ☀; - [Giovanni Palla](https://twitter.com/g_palla1), developer, spatial data; - [Malte Luecken](https://twitter.com/MDLuecken), developer, community & forum; - [Lukas Heumos](https://twitter.com/LukasHeumos), developer, diverse contributions; - [Philipp Angerer](https://github.com/flying-sheep), developer, software quality, initial anndata conception ☀. ## Other roles. - [Alex Wolf](https://twitter.com/falexwolf): lead developer 2016-2019, initial anndata & scanpy conception; - [Fabian Theis](https://twitter.com/fabian_theis) & lab: enabling guidance, support and environment. ## Former developers. - Tom White: developer 2018-2019, distributed computing; 

Instructions: 
1. Analyze the content and the attribute description.
2. Determine if the content accurately reflects the intended quality attribute in this context.
3. If it does, label it as `true_positive: true`; if not, mark it as a `true_positive: false`.
4. If the content consists only of logs with no other text, mark it as a `true_positive: false`. 
4. If the content partially consists of logs, focus on analyzing remaining text. 
5. Add `reasoning` why the content is a true or false positive.
",False,"The content provided is a list of contributors and their roles within a project. While this information is important for understanding the development team, it does not directly relate to usability aspects such as ease of learning or user satisfaction. The description focuses on how well users can interact with a system, which isn't addressed here."
Usability,"# Documentation. (building-the-docs)=. ## Building the docs. Dependencies for building the documentation for scanpy can be installed with `pip install -e ""scanpy[doc]""`. To build the docs, enter the `docs` directory and run `make html`. After this process completes you can take a look at the docs by opening `scanpy/docs/_build/html/index.html`. Your browser and Sphinx cache docs which have been built previously.; Sometimes these caches are not invalidated when you've updated the docs.; If docs are not updating the way you expect, first try ""force reloading"" your browser page – e.g. reload the page without using the cache.; Next, if problems persist, clear the sphinx cache and try building them again (`make clean` from `docs` directory). ```{note}; If you've cloned the repository pre 1.8.0, you may need to be more thorough in cleaning.; If you run into warnings try removing all untracked files in the docs directory.; ```. ## Adding to the docs. For any user-visible changes, please make sure a note has been added to the release notes for the relevant version so we can credit you!; These files are found in the `docs/release-notes/` directory.; We recommend waiting on this until your PR is close to done since this can often causes merge conflicts. Once you've added a new function to the documentation, you'll need to make sure there is a link somewhere in the documentation site pointing to it.; This should be added to `docs/api.md` under a relevant heading. For tutorials and more in depth examples, consider adding a notebook to [scanpy-tutorials](https://github.com/scverse/scanpy-tutorials/). The tutorials are tied to this repository via a submodule. To update the submodule, run `git submodule update --remote` from the root of the repository. Subsequently, commit and push the changes in a PR. This should be done before each release to ensure the tutorials are up to date. ## docstrings format. We use the numpydoc style for writing docstrings.; We'd primarily suggest lookin",clear,MatchSource.DOCS,scverse,scanpy,1.10.2,https://github.com/scverse/scanpy/tree/1.10.2/docs/dev/documentation.md:658,clear,658,docs/dev/documentation.md,https://scanpy.readthedocs.io,https://github.com/scverse/scanpy/tree/1.10.2/docs/dev/documentation.md,1,['clear'],['clear'],"The degree to which users can effectively and efficiently accomplish tasks, including support for error recovery and user satisfaction. Usability covers ease of learning, efficient usage, and adaptability to user needs.","
You are an expert in evaluating and categorizing quality attributes in software engineering. You possess the necessary skills to distinguish sentences that clearly relate to a given quality attribute from those that do not. 

Evaluate whether the content accurately aligns with its associated quality attribute, given the context provided. Your goal is to determine if the content makes sense in relation to the quality attribute description or if it is a false positive.

Data:

Quality Attribute: Usability
Attribute Description: The degree to which users can effectively and efficiently accomplish tasks, including support for error recovery and user satisfaction. Usability covers ease of learning, efficient usage, and adaptability to user needs.
Content: # Documentation. (building-the-docs)=. ## Building the docs. Dependencies for building the documentation for scanpy can be installed with `pip install -e ""scanpy[doc]""`. To build the docs, enter the `docs` directory and run `make html`. After this process completes you can take a look at the docs by opening `scanpy/docs/_build/html/index.html`. Your browser and Sphinx cache docs which have been built previously.; Sometimes these caches are not invalidated when you've updated the docs.; If docs are not updating the way you expect, first try ""force reloading"" your browser page – e.g. reload the page without using the cache.; Next, if problems persist, clear the sphinx cache and try building them again (`make clean` from `docs` directory). ```{note}; If you've cloned the repository pre 1.8.0, you may need to be more thorough in cleaning.; If you run into warnings try removing all untracked files in the docs directory.; ```. ## Adding to the docs. For any user-visible changes, please make sure a note has been added to the release notes for the relevant version so we can credit you!; These files are found in the `docs/release-notes/` directory.; We recommend waiting on this until your PR is close to done since this can often causes merge conflicts. Once you've added a new function to the documentation, you'll need to make sure there is a link somewhere in the documentation site pointing to it.; This should be added to `docs/api.md` under a relevant heading. For tutorials and more in depth examples, consider adding a notebook to [scanpy-tutorials](https://github.com/scverse/scanpy-tutorials/). The tutorials are tied to this repository via a submodule. To update the submodule, run `git submodule update --remote` from the root of the repository. Subsequently, commit and push the changes in a PR. This should be done before each release to ensure the tutorials are up to date. ## docstrings format. We use the numpydoc style for writing docstrings.; We'd primarily suggest lookin

Instructions: 
1. Analyze the content and the attribute description.
2. Determine if the content accurately reflects the intended quality attribute in this context.
3. If it does, label it as `true_positive: true`; if not, mark it as a `true_positive: false`.
4. If the content consists only of logs with no other text, mark it as a `true_positive: false`. 
4. If the content partially consists of logs, focus on analyzing remaining text. 
5. Add `reasoning` why the content is a true or false positive.
",False,"The content provided pertains to documentation building and updating processes in scanpy, including instructions for installing dependencies and generating HTML documentation. While this is related to documentation, it does not directly address user's ability to effectively use the software or recover from errors. The attribute 'Usability' focuses on how well users can perform tasks and handle errors, which this content doesn't touch upon. Therefore, the content does not accurately reflect the quality attribute of Usability."
Usability,"# Getting set up. ## Working with `git`. This section of the docs covers our practices for working with `git` on our codebase. For more in-depth guides, we can recommend a few sources:. For a more complete git tutorials we recommend checking out:. - [Atlassian's git tutorial](https://www.atlassian.com/git/tutorials) -- Beginner friendly introductions to the git command line interface; - [Setting up git for GitHub](https://docs.github.com/en/free-pro-team@latest/github/getting-started-with-github/set-up-git) -- Configuring git to work with your GitHub user account. (forking-and-cloning)=. ### Forking and cloning. To get the code, and be able to push changes back to the main project, you'll need to (1) fork the repository on github and (2) clone the repository to your local machine. This is very straight forward if you're using [GitHub's CLI](https://cli.github.com):. ```shell; $ gh repo fork scverse/scanpy --clone --remote; ```. This will fork the repo to your github account, create a clone of the repo on your current machine, add our repository as a remote, and set the `main` development branch to track our repository. To do this manually, first make a fork of the repository by clicking the ""fork"" button on our main github package. Then, on your machine, run:. ```shell; # Clone your fork of the repository (substitute in your username); git clone https://github.com/{your-username}/scanpy.git; # Enter the cloned repository; cd scanpy; # Add our repository as a remote; git remote add upstream https://github.com/scverse/scanpy.git; # git branch --set-upstream-to ""upstream/main""; ```. ### `pre-commit`. We use [precommit](https://pre-commit.com) to run some styling checks in an automated way.; We also test against these checks, so make sure you follow them!. You can install pre-commit with:. ```shell; pip install pre-commit; ```. You can then install it to run while developing here with:. ```shell; pre-commit install; ```. From the root of the repo. If you choose not to ru",guid,MatchSource.DOCS,scverse,scanpy,1.10.2,https://github.com/scverse/scanpy/tree/1.10.2/docs/dev/getting-set-up.md:145,guides,145,docs/dev/getting-set-up.md,https://scanpy.readthedocs.io,https://github.com/scverse/scanpy/tree/1.10.2/docs/dev/getting-set-up.md,1,['guid'],['guides'],"The degree to which users can effectively and efficiently accomplish tasks, including support for error recovery and user satisfaction. Usability covers ease of learning, efficient usage, and adaptability to user needs.","
You are an expert in evaluating and categorizing quality attributes in software engineering. You possess the necessary skills to distinguish sentences that clearly relate to a given quality attribute from those that do not. 

Evaluate whether the content accurately aligns with its associated quality attribute, given the context provided. Your goal is to determine if the content makes sense in relation to the quality attribute description or if it is a false positive.

Data:

Quality Attribute: Usability
Attribute Description: The degree to which users can effectively and efficiently accomplish tasks, including support for error recovery and user satisfaction. Usability covers ease of learning, efficient usage, and adaptability to user needs.
Content: # Getting set up. ## Working with `git`. This section of the docs covers our practices for working with `git` on our codebase. For more in-depth guides, we can recommend a few sources:. For a more complete git tutorials we recommend checking out:. - [Atlassian's git tutorial](https://www.atlassian.com/git/tutorials) -- Beginner friendly introductions to the git command line interface; - [Setting up git for GitHub](https://docs.github.com/en/free-pro-team@latest/github/getting-started-with-github/set-up-git) -- Configuring git to work with your GitHub user account. (forking-and-cloning)=. ### Forking and cloning. To get the code, and be able to push changes back to the main project, you'll need to (1) fork the repository on github and (2) clone the repository to your local machine. This is very straight forward if you're using [GitHub's CLI](https://cli.github.com):. ```shell; $ gh repo fork scverse/scanpy --clone --remote; ```. This will fork the repo to your github account, create a clone of the repo on your current machine, add our repository as a remote, and set the `main` development branch to track our repository. To do this manually, first make a fork of the repository by clicking the ""fork"" button on our main github package. Then, on your machine, run:. ```shell; # Clone your fork of the repository (substitute in your username); git clone https://github.com/{your-username}/scanpy.git; # Enter the cloned repository; cd scanpy; # Add our repository as a remote; git remote add upstream https://github.com/scverse/scanpy.git; # git branch --set-upstream-to ""upstream/main""; ```. ### `pre-commit`. We use [precommit](https://pre-commit.com) to run some styling checks in an automated way.; We also test against these checks, so make sure you follow them!. You can install pre-commit with:. ```shell; pip install pre-commit; ```. You can then install it to run while developing here with:. ```shell; pre-commit install; ```. From the root of the repo. If you choose not to ru

Instructions: 
1. Analyze the content and the attribute description.
2. Determine if the content accurately reflects the intended quality attribute in this context.
3. If it does, label it as `true_positive: true`; if not, mark it as a `true_positive: false`.
4. If the content consists only of logs with no other text, mark it as a `true_positive: false`. 
4. If the content partially consists of logs, focus on analyzing remaining text. 
5. Add `reasoning` why the content is a true or false positive.
",True,"The content discusses setting up and using Git for code management, including steps like forking repositories, cloning, and using pre-commit for automated checks. This directly relates to how users can efficiently use our tools (Git) to manage their work, supporting error recovery by providing clear instructions on resolving common issues (e.g., setting up remotes), and ensuring user satisfaction through streamlined workflows and helpful documentation. It addresses ease of learning with detailed instructions, adaptability to different Git setups (GitHub CLI vs manual steps), and overall usability in collaboration and code management."
Usability,"# Tutorials. :::{seealso}; For more tutorials featureing scanpy and other [scverse](https://scverse.org) ecosystem tools, check out the curated set of tutorials at [scverse.org/learn](https://scverse.org/learn); :::. ## Basic workflows. ```{toctree}; :maxdepth: 2. basics/index; ```. ## Visualization. ```{toctree}; :maxdepth: 2. plotting/index; ```. ## Trajectory inference. ```{seealso}; For more powerful tools for analysing single cell dynamics, check out the Scverse ecosystem packages:. * [CellRank](https://cellrank.readthedocs.io); * [Dynamo](https://dynamo-release.readthedocs.io/en/latest/); ```. ```{toctree}; :maxdepth: 2. trajectories/index; ```. ## Spatial data. ```{seealso}; For more up-to-date tutorials on working with spatial data, see:. * [SquidPy tutorials](https://squidpy.readthedocs.io/en/stable/notebooks/tutorials/index.html); * [SpatialData tutorials](https://spatialdata.scverse.org/en/latest/tutorials/notebooks/notebooks.html); * [Scverse ecosystem spatial tutorials](https://scverse.org/learn/); ```. ```{toctree}; :maxdepth: 2. spatial/index; ```. ## Experimental. ```{toctree}; :maxdepth: 2. experimental/index; ```. ## Older tutorials. A number of older tutorials can be found at:. * The [`scanpy_usage`](https://github.com/scverse/scanpy_usage) repository; ",learn,MatchSource.DOCS,scverse,scanpy,1.10.2,https://github.com/scverse/scanpy/tree/1.10.2/docs/tutorials/index.md:177,learn,177,docs/tutorials/index.md,https://scanpy.readthedocs.io,https://github.com/scverse/scanpy/tree/1.10.2/docs/tutorials/index.md,3,['learn'],['learn'],"The degree to which users can effectively and efficiently accomplish tasks, including support for error recovery and user satisfaction. Usability covers ease of learning, efficient usage, and adaptability to user needs.","
You are an expert in evaluating and categorizing quality attributes in software engineering. You possess the necessary skills to distinguish sentences that clearly relate to a given quality attribute from those that do not. 

Evaluate whether the content accurately aligns with its associated quality attribute, given the context provided. Your goal is to determine if the content makes sense in relation to the quality attribute description or if it is a false positive.

Data:

Quality Attribute: Usability
Attribute Description: The degree to which users can effectively and efficiently accomplish tasks, including support for error recovery and user satisfaction. Usability covers ease of learning, efficient usage, and adaptability to user needs.
Content: # Tutorials. :::{seealso}; For more tutorials featureing scanpy and other [scverse](https://scverse.org) ecosystem tools, check out the curated set of tutorials at [scverse.org/learn](https://scverse.org/learn); :::. ## Basic workflows. ```{toctree}; :maxdepth: 2. basics/index; ```. ## Visualization. ```{toctree}; :maxdepth: 2. plotting/index; ```. ## Trajectory inference. ```{seealso}; For more powerful tools for analysing single cell dynamics, check out the Scverse ecosystem packages:. * [CellRank](https://cellrank.readthedocs.io); * [Dynamo](https://dynamo-release.readthedocs.io/en/latest/); ```. ```{toctree}; :maxdepth: 2. trajectories/index; ```. ## Spatial data. ```{seealso}; For more up-to-date tutorials on working with spatial data, see:. * [SquidPy tutorials](https://squidpy.readthedocs.io/en/stable/notebooks/tutorials/index.html); * [SpatialData tutorials](https://spatialdata.scverse.org/en/latest/tutorials/notebooks/notebooks.html); * [Scverse ecosystem spatial tutorials](https://scverse.org/learn/); ```. ```{toctree}; :maxdepth: 2. spatial/index; ```. ## Experimental. ```{toctree}; :maxdepth: 2. experimental/index; ```. ## Older tutorials. A number of older tutorials can be found at:. * The [`scanpy_usage`](https://github.com/scverse/scanpy_usage) repository; 

Instructions: 
1. Analyze the content and the attribute description.
2. Determine if the content accurately reflects the intended quality attribute in this context.
3. If it does, label it as `true_positive: true`; if not, mark it as a `true_positive: false`.
4. If the content consists only of logs with no other text, mark it as a `true_positive: false`. 
4. If the content partially consists of logs, focus on analyzing remaining text. 
5. Add `reasoning` why the content is a true or false positive.
",False,"The content in question appears to be a list of tutorials and documentation resources related to various tools within the Scverse ecosystem, such as scanpy, CellRank, Dynamo, SquidPy, and SpatialData. The user provides links to these tutorials which cover topics like basic workflows, visualization, trajectory inference, spatial data analysis, and experimental processes. This content is primarily informative and does not directly discuss usability in terms of user interface design or task efficiency. Instead, it seems to be a resource hub for different tools and their respective documentation. Therefore, the provided content does not align with the quality attribute of Usability as defined, which focuses on the ease of use, learning, and adaptability for users. Instead, this content is more about providing access to various tutorials rather than discussing or promoting features that enhance usability."
Usability,"## Preprocessing: `pp`. ```{eval-rst}; .. module:: scanpy.pp; ```. ```{eval-rst}; .. currentmodule:: scanpy; ```. Filtering of highly-variable genes, batch-effect correction, per-cell normalization, preprocessing recipes. Any transformation of the data matrix that is not a *tool*. Other than *tools*, preprocessing steps usually don't return an easily interpretable annotation, but perform a basic transformation on the data matrix. ### Basic Preprocessing. For visual quality control, see {func}`~scanpy.pl.highest_expr_genes` and; {func}`~scanpy.pl.filter_genes_dispersion` in {mod}`scanpy.pl`. ```{eval-rst}; .. autosummary::; :nosignatures:; :toctree: ../generated/. pp.calculate_qc_metrics; pp.filter_cells; pp.filter_genes; pp.highly_variable_genes; pp.log1p; pp.pca; pp.normalize_total; pp.regress_out; pp.scale; pp.subsample; pp.downsample_counts; ```. ### Recipes. ```{eval-rst}; .. autosummary::; :nosignatures:; :toctree: generated/. pp.recipe_zheng17; pp.recipe_weinreb17; pp.recipe_seurat; ```. ### Batch effect correction. Also see [Data integration]. Note that a simple batch correction method is available via {func}`pp.regress_out`. Checkout {mod}`scanpy.external` for more. ```{eval-rst}; .. autosummary::; :nosignatures:; :toctree: generated/. pp.combat; ```. ### Doublet detection. ```{eval-rst}; .. autosummary::; :nosignatures:; :toctree: generated/. pp.scrublet; pp.scrublet_simulate_doublets; ```. ### Neighbors. ```{eval-rst}; .. autosummary::; :nosignatures:; :toctree: generated/. pp.neighbors. ```; ",simpl,MatchSource.DOCS,scverse,scanpy,1.10.2,https://github.com/scverse/scanpy/tree/1.10.2/docs/api/preprocessing.md:1079,simple,1079,docs/api/preprocessing.md,https://scanpy.readthedocs.io,https://github.com/scverse/scanpy/tree/1.10.2/docs/api/preprocessing.md,1,['simpl'],['simple'],"The degree to which users can effectively and efficiently accomplish tasks, including support for error recovery and user satisfaction. Usability covers ease of learning, efficient usage, and adaptability to user needs.","
You are an expert in evaluating and categorizing quality attributes in software engineering. You possess the necessary skills to distinguish sentences that clearly relate to a given quality attribute from those that do not. 

Evaluate whether the content accurately aligns with its associated quality attribute, given the context provided. Your goal is to determine if the content makes sense in relation to the quality attribute description or if it is a false positive.

Data:

Quality Attribute: Usability
Attribute Description: The degree to which users can effectively and efficiently accomplish tasks, including support for error recovery and user satisfaction. Usability covers ease of learning, efficient usage, and adaptability to user needs.
Content: ## Preprocessing: `pp`. ```{eval-rst}; .. module:: scanpy.pp; ```. ```{eval-rst}; .. currentmodule:: scanpy; ```. Filtering of highly-variable genes, batch-effect correction, per-cell normalization, preprocessing recipes. Any transformation of the data matrix that is not a *tool*. Other than *tools*, preprocessing steps usually don't return an easily interpretable annotation, but perform a basic transformation on the data matrix. ### Basic Preprocessing. For visual quality control, see {func}`~scanpy.pl.highest_expr_genes` and; {func}`~scanpy.pl.filter_genes_dispersion` in {mod}`scanpy.pl`. ```{eval-rst}; .. autosummary::; :nosignatures:; :toctree: ../generated/. pp.calculate_qc_metrics; pp.filter_cells; pp.filter_genes; pp.highly_variable_genes; pp.log1p; pp.pca; pp.normalize_total; pp.regress_out; pp.scale; pp.subsample; pp.downsample_counts; ```. ### Recipes. ```{eval-rst}; .. autosummary::; :nosignatures:; :toctree: generated/. pp.recipe_zheng17; pp.recipe_weinreb17; pp.recipe_seurat; ```. ### Batch effect correction. Also see [Data integration]. Note that a simple batch correction method is available via {func}`pp.regress_out`. Checkout {mod}`scanpy.external` for more. ```{eval-rst}; .. autosummary::; :nosignatures:; :toctree: generated/. pp.combat; ```. ### Doublet detection. ```{eval-rst}; .. autosummary::; :nosignatures:; :toctree: generated/. pp.scrublet; pp.scrublet_simulate_doublets; ```. ### Neighbors. ```{eval-rst}; .. autosummary::; :nosignatures:; :toctree: generated/. pp.neighbors. ```; 

Instructions: 
1. Analyze the content and the attribute description.
2. Determine if the content accurately reflects the intended quality attribute in this context.
3. If it does, label it as `true_positive: true`; if not, mark it as a `true_positive: false`.
4. If the content consists only of logs with no other text, mark it as a `true_positive: false`. 
4. If the content partially consists of logs, focus on analyzing remaining text. 
5. Add `reasoning` why the content is a true or false positive.
",True,"The content discusses preprocessing steps such as filtering genes and performing normalization, which are part of data processing necessary for ensuring effective data handling, contributing to usability by providing clean and reliable data inputs for downstream analyses."
Usability,"### 0.3.0 {small}`2017-11-16`. - {class}`~anndata.AnnData` gains method {meth}`~anndata.AnnData.concatenate` {smaller}`A Wolf`; - {class}`~anndata.AnnData` is available as the separate [anndata] package {smaller}`P Angerer, A Wolf`; - results of [PAGA](https://github.com/theislab/paga) simplified {smaller}`A Wolf`. [anndata]: https://pypi.org/project/anndata/; ",simpl,MatchSource.DOCS,scverse,scanpy,1.10.2,https://github.com/scverse/scanpy/tree/1.10.2/docs/release-notes/0.3.0.md:287,simplified,287,docs/release-notes/0.3.0.md,https://scanpy.readthedocs.io,https://github.com/scverse/scanpy/tree/1.10.2/docs/release-notes/0.3.0.md,1,['simpl'],['simplified'],"The degree to which users can effectively and efficiently accomplish tasks, including support for error recovery and user satisfaction. Usability covers ease of learning, efficient usage, and adaptability to user needs.","
You are an expert in evaluating and categorizing quality attributes in software engineering. You possess the necessary skills to distinguish sentences that clearly relate to a given quality attribute from those that do not. 

Evaluate whether the content accurately aligns with its associated quality attribute, given the context provided. Your goal is to determine if the content makes sense in relation to the quality attribute description or if it is a false positive.

Data:

Quality Attribute: Usability
Attribute Description: The degree to which users can effectively and efficiently accomplish tasks, including support for error recovery and user satisfaction. Usability covers ease of learning, efficient usage, and adaptability to user needs.
Content: ### 0.3.0 {small}`2017-11-16`. - {class}`~anndata.AnnData` gains method {meth}`~anndata.AnnData.concatenate` {smaller}`A Wolf`; - {class}`~anndata.AnnData` is available as the separate [anndata] package {smaller}`P Angerer, A Wolf`; - results of [PAGA](https://github.com/theislab/paga) simplified {smaller}`A Wolf`. [anndata]: https://pypi.org/project/anndata/; 

Instructions: 
1. Analyze the content and the attribute description.
2. Determine if the content accurately reflects the intended quality attribute in this context.
3. If it does, label it as `true_positive: true`; if not, mark it as a `true_positive: false`.
4. If the content consists only of logs with no other text, mark it as a `true_positive: false`. 
4. If the content partially consists of logs, focus on analyzing remaining text. 
5. Add `reasoning` why the content is a true or false positive.
",False,"The content describes updates and availability related to the [anndata] package, which seems unrelated to usability. Usability focuses on how well a system can be used by its users, including ease of learning and efficiency. The provided text discusses software package updates and methods available in the package, which is more about functionality and technical aspects rather than user interaction or task completion effectiveness. Therefore, this content does not align with the usability quality attribute."
Usability,"### 1.10.0 {small}`2024-03-26`. `scanpy` 1.10 brings a large amount of new features, performance improvements, and improved documentation. Some highlights:. * Improved support for out-of-core workflows via `dask`. See new tutorial: {doc}`/tutorials/experimental/dask` demonstrating counts-to-clusters for 1.4 million cells in <10 min.; * A new {doc}`basic clustering tutorial </tutorials/basics/clustering>` demonstrating an updated workflow.; * Opt-in increased performance for neighbor search and clustering ({doc}`how to guide </how-to/knn-transformers>`).; * Ability to `mask` observations or variables from a number of methods (see {doc}`/tutorials/plotting/advanced` for an example with plotting embeddings); * A new function {func}`~scanpy.get.aggregate` for computing aggregations of your data, very useful for pseudo bulking!. ```{rubric} Features; ```. * {func}`~scanpy.pp.scrublet` and {func}`~scanpy.pp.scrublet_simulate_doublets` were moved from {mod}`scanpy.external.pp` to {mod}`scanpy.pp`. The `scrublet` implementation is now maintained as part of scanpy {pr}`2703` {smaller}`P Angerer`; * {func}`scanpy.pp.pca`, {func}`scanpy.pp.scale`, {func}`scanpy.pl.embedding`, and {func}`scanpy.experimental.pp.normalize_pearson_residuals_pca` now support a `mask` parameter {pr}`2272` {smaller}`C Bright, T Marcella, & P Angerer`; * Enhanced dask support for some internal utilities, paving the way for more extensive dask support {pr}`2696` {smaller}`P Angerer`; * {func}`scanpy.pp.highly_variable_genes` supports dask for the default `seurat` and `cell_ranger` flavors {pr}`2809` {smaller}`P Angerer`; * New function {func}`scanpy.get.aggregate` which allows grouped aggregations over your data. Useful for pseudobulking! {pr}`2590` {smaller}`Isaac Virshup` {smaller}`Ilan Gold` {smaller}`Jon Bloom`; * {func}`scanpy.pp.neighbors` now has a `transformer` argument allowing the use of different ANN/ KNN libraries {pr}`2536` {smaller}`P Angerer`; * {func}`scanpy.experimental.pp.highly_variab",guid,MatchSource.DOCS,scverse,scanpy,1.10.2,https://github.com/scverse/scanpy/tree/1.10.2/docs/release-notes/1.10.0.md:524,guide,524,docs/release-notes/1.10.0.md,https://scanpy.readthedocs.io,https://github.com/scverse/scanpy/tree/1.10.2/docs/release-notes/1.10.0.md,1,['guid'],['guide'],"The degree to which users can effectively and efficiently accomplish tasks, including support for error recovery and user satisfaction. Usability covers ease of learning, efficient usage, and adaptability to user needs.","
You are an expert in evaluating and categorizing quality attributes in software engineering. You possess the necessary skills to distinguish sentences that clearly relate to a given quality attribute from those that do not. 

Evaluate whether the content accurately aligns with its associated quality attribute, given the context provided. Your goal is to determine if the content makes sense in relation to the quality attribute description or if it is a false positive.

Data:

Quality Attribute: Usability
Attribute Description: The degree to which users can effectively and efficiently accomplish tasks, including support for error recovery and user satisfaction. Usability covers ease of learning, efficient usage, and adaptability to user needs.
Content: ### 1.10.0 {small}`2024-03-26`. `scanpy` 1.10 brings a large amount of new features, performance improvements, and improved documentation. Some highlights:. * Improved support for out-of-core workflows via `dask`. See new tutorial: {doc}`/tutorials/experimental/dask` demonstrating counts-to-clusters for 1.4 million cells in <10 min.; * A new {doc}`basic clustering tutorial </tutorials/basics/clustering>` demonstrating an updated workflow.; * Opt-in increased performance for neighbor search and clustering ({doc}`how to guide </how-to/knn-transformers>`).; * Ability to `mask` observations or variables from a number of methods (see {doc}`/tutorials/plotting/advanced` for an example with plotting embeddings); * A new function {func}`~scanpy.get.aggregate` for computing aggregations of your data, very useful for pseudo bulking!. ```{rubric} Features; ```. * {func}`~scanpy.pp.scrublet` and {func}`~scanpy.pp.scrublet_simulate_doublets` were moved from {mod}`scanpy.external.pp` to {mod}`scanpy.pp`. The `scrublet` implementation is now maintained as part of scanpy {pr}`2703` {smaller}`P Angerer`; * {func}`scanpy.pp.pca`, {func}`scanpy.pp.scale`, {func}`scanpy.pl.embedding`, and {func}`scanpy.experimental.pp.normalize_pearson_residuals_pca` now support a `mask` parameter {pr}`2272` {smaller}`C Bright, T Marcella, & P Angerer`; * Enhanced dask support for some internal utilities, paving the way for more extensive dask support {pr}`2696` {smaller}`P Angerer`; * {func}`scanpy.pp.highly_variable_genes` supports dask for the default `seurat` and `cell_ranger` flavors {pr}`2809` {smaller}`P Angerer`; * New function {func}`scanpy.get.aggregate` which allows grouped aggregations over your data. Useful for pseudobulking! {pr}`2590` {smaller}`Isaac Virshup` {smaller}`Ilan Gold` {smaller}`Jon Bloom`; * {func}`scanpy.pp.neighbors` now has a `transformer` argument allowing the use of different ANN/ KNN libraries {pr}`2536` {smaller}`P Angerer`; * {func}`scanpy.experimental.pp.highly_variab

Instructions: 
1. Analyze the content and the attribute description.
2. Determine if the content accurately reflects the intended quality attribute in this context.
3. If it does, label it as `true_positive: true`; if not, mark it as a `true_positive: false`.
4. If the content consists only of logs with no other text, mark it as a `true_positive: false`. 
4. If the content partially consists of logs, focus on analyzing remaining text. 
5. Add `reasoning` why the content is a true or false positive.
",True,"The content describes new features and performance improvements in scanpy, which are related to usability by enhancing user efficiency and task completion."
Usability,"### 1.10.2 {small}`2024-06-25`. ```{rubric} Development features; ```. * Add performance benchmarking {pr}`2977` {smaller}`R Shrestha`, {smaller}`P Angerer`. ```{rubric} Docs; ```. * Document several missing parameters in docstring {pr}`2888` {smaller}`S Cheney`; * Fixed incorrect instructions in ""testing"" dev docs {pr}`2994` {smaller}`I Virshup`; * Update marsilea tutorial to use `group_` methods {pr}`3001` {smaller}`I Virshup`; * Fixed citations {pr}`3032` {smaller}`P Angerer`; * Improve dataset documentation {pr}`3060` {smaller}`P Angerer`. ```{rubric} Bug fixes; ```. * Compatibility with `matplotlib` 3.9 {pr}`2999` {smaller}`I Virshup`; * Add clear errors where `backed` mode-like matrices (i.e., from `sparse_dataset`) are not supported {pr}`3048` {smaller}`I gold`; * Write out full pca results when `_choose_representation` is called i.e., {func}`~scanpy.pp.neighbors` without {func}`~scanpy.pp.pca` {pr}`3079` {smaller}`I gold`; * Fix deprecated use of `.A` with sparse matrices {pr}`3084` {smaller}`P Angerer`; * Fix zappy support {pr}`3089` {smaller}`P Angerer`; * Fix dotplot group order with {mod}`pandas` 1.x {pr}`3101` {smaller}`P Angerer`. ```{rubric} Performance; ```. * `sparse_mean_variance_axis` now uses all cores for the calculations {pr}`3015` {smaller}`S Dicks`; * `pp.highly_variable_genes` with `flavor=seurat_v3` now uses a numba kernel {pr}`3017` {smaller}`S Dicks`; * Speed up {func}`~scanpy.pp.scrublet` {pr}`3044` {smaller}`S Dicks` and {pr}`3056` {smaller}`P Angerer`; * Speed up clipping of array in {func}`~scanpy.pp.scale` {pr}`3100` {smaller}`P Ashish & S Dicks`; ",clear,MatchSource.DOCS,scverse,scanpy,1.10.2,https://github.com/scverse/scanpy/tree/1.10.2/docs/release-notes/1.10.2.md:655,clear,655,docs/release-notes/1.10.2.md,https://scanpy.readthedocs.io,https://github.com/scverse/scanpy/tree/1.10.2/docs/release-notes/1.10.2.md,1,['clear'],['clear'],"The degree to which users can effectively and efficiently accomplish tasks, including support for error recovery and user satisfaction. Usability covers ease of learning, efficient usage, and adaptability to user needs.","
You are an expert in evaluating and categorizing quality attributes in software engineering. You possess the necessary skills to distinguish sentences that clearly relate to a given quality attribute from those that do not. 

Evaluate whether the content accurately aligns with its associated quality attribute, given the context provided. Your goal is to determine if the content makes sense in relation to the quality attribute description or if it is a false positive.

Data:

Quality Attribute: Usability
Attribute Description: The degree to which users can effectively and efficiently accomplish tasks, including support for error recovery and user satisfaction. Usability covers ease of learning, efficient usage, and adaptability to user needs.
Content: ### 1.10.2 {small}`2024-06-25`. ```{rubric} Development features; ```. * Add performance benchmarking {pr}`2977` {smaller}`R Shrestha`, {smaller}`P Angerer`. ```{rubric} Docs; ```. * Document several missing parameters in docstring {pr}`2888` {smaller}`S Cheney`; * Fixed incorrect instructions in ""testing"" dev docs {pr}`2994` {smaller}`I Virshup`; * Update marsilea tutorial to use `group_` methods {pr}`3001` {smaller}`I Virshup`; * Fixed citations {pr}`3032` {smaller}`P Angerer`; * Improve dataset documentation {pr}`3060` {smaller}`P Angerer`. ```{rubric} Bug fixes; ```. * Compatibility with `matplotlib` 3.9 {pr}`2999` {smaller}`I Virshup`; * Add clear errors where `backed` mode-like matrices (i.e., from `sparse_dataset`) are not supported {pr}`3048` {smaller}`I gold`; * Write out full pca results when `_choose_representation` is called i.e., {func}`~scanpy.pp.neighbors` without {func}`~scanpy.pp.pca` {pr}`3079` {smaller}`I gold`; * Fix deprecated use of `.A` with sparse matrices {pr}`3084` {smaller}`P Angerer`; * Fix zappy support {pr}`3089` {smaller}`P Angerer`; * Fix dotplot group order with {mod}`pandas` 1.x {pr}`3101` {smaller}`P Angerer`. ```{rubric} Performance; ```. * `sparse_mean_variance_axis` now uses all cores for the calculations {pr}`3015` {smaller}`S Dicks`; * `pp.highly_variable_genes` with `flavor=seurat_v3` now uses a numba kernel {pr}`3017` {smaller}`S Dicks`; * Speed up {func}`~scanpy.pp.scrublet` {pr}`3044` {smaller}`S Dicks` and {pr}`3056` {smaller}`P Angerer`; * Speed up clipping of array in {func}`~scanpy.pp.scale` {pr}`3100` {smaller}`P Ashish & S Dicks`; 

Instructions: 
1. Analyze the content and the attribute description.
2. Determine if the content accurately reflects the intended quality attribute in this context.
3. If it does, label it as `true_positive: true`; if not, mark it as a `true_positive: false`.
4. If the content consists only of logs with no other text, mark it as a `true_positive: false`. 
4. If the content partially consists of logs, focus on analyzing remaining text. 
5. Add `reasoning` why the content is a true or false positive.
",False,"The content provided includes both development features, bug fixes, performance improvements and documentation updates. While these are important aspects of software quality, they don't directly address usability. Usability specifically refers to how effectively users can complete tasks and requires considerations like ease of learning, efficiency, user satisfaction, error recovery, etc. The mentioned changes focus more on technical aspects such as performance, compatibility, bug fixes, and documentation rather than user-centric aspects. Therefore, the content does not align with the usability quality attribute and should be marked accordingly."
Usability,"### 1.9.4 {small}`2023-08-24`. ```{rubric} Bug fixes; ```. * Support scikit-learn 1.3 {pr}`2515` {smaller}`P Angerer`; * Deal with `None` value vanishing from things like `.uns['log1p']` {pr}`2546` {smaller}`SP Shen`; * Depend on `igraph` instead of `python-igraph` {pr}`2566` {smaller}`P Angerer`; * {func}`~scanpy.tl.rank_genes_groups` now handles unsorted groups as intended {pr}`2589` {smaller}`S Dicks`; * {func}`~scanpy.get.rank_genes_groups_df` now works for {func}`~scanpy.tl.rank_genes_groups` with `method=""logreg""` {pr}`2601` {smaller}`S Dicks`; * `scanpy.tl._utils._choose_representation` now works with `n_pcs` if bigger than `settings.N_PCS` {pr}`2610` {smaller}`S Dicks`; ",learn,MatchSource.DOCS,scverse,scanpy,1.10.2,https://github.com/scverse/scanpy/tree/1.10.2/docs/release-notes/1.9.4.md:76,learn,76,docs/release-notes/1.9.4.md,https://scanpy.readthedocs.io,https://github.com/scverse/scanpy/tree/1.10.2/docs/release-notes/1.9.4.md,1,['learn'],['learn'],"The degree to which users can effectively and efficiently accomplish tasks, including support for error recovery and user satisfaction. Usability covers ease of learning, efficient usage, and adaptability to user needs.","
You are an expert in evaluating and categorizing quality attributes in software engineering. You possess the necessary skills to distinguish sentences that clearly relate to a given quality attribute from those that do not. 

Evaluate whether the content accurately aligns with its associated quality attribute, given the context provided. Your goal is to determine if the content makes sense in relation to the quality attribute description or if it is a false positive.

Data:

Quality Attribute: Usability
Attribute Description: The degree to which users can effectively and efficiently accomplish tasks, including support for error recovery and user satisfaction. Usability covers ease of learning, efficient usage, and adaptability to user needs.
Content: ### 1.9.4 {small}`2023-08-24`. ```{rubric} Bug fixes; ```. * Support scikit-learn 1.3 {pr}`2515` {smaller}`P Angerer`; * Deal with `None` value vanishing from things like `.uns['log1p']` {pr}`2546` {smaller}`SP Shen`; * Depend on `igraph` instead of `python-igraph` {pr}`2566` {smaller}`P Angerer`; * {func}`~scanpy.tl.rank_genes_groups` now handles unsorted groups as intended {pr}`2589` {smaller}`S Dicks`; * {func}`~scanpy.get.rank_genes_groups_df` now works for {func}`~scanpy.tl.rank_genes_groups` with `method=""logreg""` {pr}`2601` {smaller}`S Dicks`; * `scanpy.tl._utils._choose_representation` now works with `n_pcs` if bigger than `settings.N_PCS` {pr}`2610` {smaller}`S Dicks`; 

Instructions: 
1. Analyze the content and the attribute description.
2. Determine if the content accurately reflects the intended quality attribute in this context.
3. If it does, label it as `true_positive: true`; if not, mark it as a `true_positive: false`.
4. If the content consists only of logs with no other text, mark it as a `true_positive: false`. 
4. If the content partially consists of logs, focus on analyzing remaining text. 
5. Add `reasoning` why the content is a true or false positive.
",False,"The content provided includes several bug fixes and updates related to feature enhancements in software development. While these updates are important for maintaining functionality, they do not directly address usability aspects such as ease of learning, efficient usage, or adaptability to user needs. Therefore, the content does not accurately reflect the quality attribute of 'Usability'."
Usability,(contribution-guide)=. # Contributing. Contributions to scanpy are welcome!; This section of the docs provides some guidelines and tips to follow when contributing. ```{toctree}; code; getting-set-up; testing; documentation; ci; versioning; release; ```. Parts of the guidelines have been adapted from the [pandas](https://pandas.pydata.org/pandas-docs/stable/development/index.html) and [MDAnalysis](https://userguide.mdanalysis.org/stable/contributing.html) guides.; These are both excellent guides and we highly recommend checking them out.; ,guid,MatchSource.DOCS,scverse,scanpy,1.10.2,https://github.com/scverse/scanpy/tree/1.10.2/docs/dev/index.md:14,guide,14,docs/dev/index.md,https://scanpy.readthedocs.io,https://github.com/scverse/scanpy/tree/1.10.2/docs/dev/index.md,5,['guid'],"['guide', 'guidelines', 'guides']","The degree to which users can effectively and efficiently accomplish tasks, including support for error recovery and user satisfaction. Usability covers ease of learning, efficient usage, and adaptability to user needs.","
You are an expert in evaluating and categorizing quality attributes in software engineering. You possess the necessary skills to distinguish sentences that clearly relate to a given quality attribute from those that do not. 

Evaluate whether the content accurately aligns with its associated quality attribute, given the context provided. Your goal is to determine if the content makes sense in relation to the quality attribute description or if it is a false positive.

Data:

Quality Attribute: Usability
Attribute Description: The degree to which users can effectively and efficiently accomplish tasks, including support for error recovery and user satisfaction. Usability covers ease of learning, efficient usage, and adaptability to user needs.
Content: (contribution-guide)=. # Contributing. Contributions to scanpy are welcome!; This section of the docs provides some guidelines and tips to follow when contributing. ```{toctree}; code; getting-set-up; testing; documentation; ci; versioning; release; ```. Parts of the guidelines have been adapted from the [pandas](https://pandas.pydata.org/pandas-docs/stable/development/index.html) and [MDAnalysis](https://userguide.mdanalysis.org/stable/contributing.html) guides.; These are both excellent guides and we highly recommend checking them out.; 

Instructions: 
1. Analyze the content and the attribute description.
2. Determine if the content accurately reflects the intended quality attribute in this context.
3. If it does, label it as `true_positive: true`; if not, mark it as a `true_positive: false`.
4. If the content consists only of logs with no other text, mark it as a `true_positive: false`. 
4. If the content partially consists of logs, focus on analyzing remaining text. 
5. Add `reasoning` why the content is a true or false positive.
",True,"The content discusses guidelines for contributing to scanpy, including sections like code, testing, documentation, etc., which are related to how users can effectively use and contribute to the project. It mentions that parts of the guidelines have been adapted from pandas and MDAnalysis, which also relate to user experience and effective usage. This aligns with the usability attribute as it provides information that helps users efficiently contribute, reducing learning time and increasing satisfaction."
Usability,", and the CZI distribute datasets related to COVID-19 via anndata's `h5ad` files: [covid19cellatlas.org](https://www.covid19cellatlas.org/). It wasn't anticipated that the [initial idea](https://falexwolf.de/blog/2017-12-23-anndata-indexing-views-HDF5-backing/) of sharing and backing an on-disk representation of `AnnData` would become so widely adopted. Curious? Read up more on the [format](https://anndata.readthedocs.io/en/latest/fileformat-prose.html). ### Scanpy featured in Nature Biotechnoloogy {small}`2020-02-01`. [Single-cell RNA-seq analysis software providers scramble to offer solutions](https://www.nature.com/articles/s41587-020-0449-8) mentions Scanpy along with Seurat as the two major open source software packages for single-cell analysis \[[pdf](https://rdcu.be/b2M5l)\]. ### Scanpy has been selected an ""Essential open source software for science"" by CZI {small}`2019-11-14`. Scanpy has been selected an [essential open source software for science] by; CZI among [32 projects], along with giants such as Scipy, Numpy, Pandas,; Matplotlib, scikit-learn, scikit-image/plotly, pip, jupyterhub/binder,; Bioconda, Seurat, Bioconductor, and others. ### Nature Biotechnology: A comparison of single-cell trajectory inference methods {small}`2019-04-01`. [Nature Biotechnology](https://www.nature.com/articles/s41587-019-0071-9) reviews more than 70 TI tools and ranks PAGA as the best graph-based trajectory inference method, and overall, among the top 3. ### Science “Breakthrough of the Year 2018” {small}`2018-12-01`. The Science “Breakthrough of the Year 2018”, [Development cell by cell](https://vis.sciencemag.org/breakthrough2018/finalists/#cell-development), mentions the first application of PAGA {cite:p}`Plass2018` among 5 papers. [32 projects]: https://chanzuckerberg.com/eoss/proposals/; [essential open source software for science]: https://chanzuckerberg.com/newsroom/chan-zuckerberg-initiative-awards-5-million-for-open-source-software-projects-essential-to-science/; ",learn,MatchSource.DOCS,scverse,scanpy,1.10.2,https://github.com/scverse/scanpy/tree/1.10.2/docs/news.md:3637,learn,3637,docs/news.md,https://scanpy.readthedocs.io,https://github.com/scverse/scanpy/tree/1.10.2/docs/news.md,1,['learn'],['learn'],"The degree to which users can effectively and efficiently accomplish tasks, including support for error recovery and user satisfaction. Usability covers ease of learning, efficient usage, and adaptability to user needs.","
You are an expert in evaluating and categorizing quality attributes in software engineering. You possess the necessary skills to distinguish sentences that clearly relate to a given quality attribute from those that do not. 

Evaluate whether the content accurately aligns with its associated quality attribute, given the context provided. Your goal is to determine if the content makes sense in relation to the quality attribute description or if it is a false positive.

Data:

Quality Attribute: Usability
Attribute Description: The degree to which users can effectively and efficiently accomplish tasks, including support for error recovery and user satisfaction. Usability covers ease of learning, efficient usage, and adaptability to user needs.
Content: , and the CZI distribute datasets related to COVID-19 via anndata's `h5ad` files: [covid19cellatlas.org](https://www.covid19cellatlas.org/). It wasn't anticipated that the [initial idea](https://falexwolf.de/blog/2017-12-23-anndata-indexing-views-HDF5-backing/) of sharing and backing an on-disk representation of `AnnData` would become so widely adopted. Curious? Read up more on the [format](https://anndata.readthedocs.io/en/latest/fileformat-prose.html). ### Scanpy featured in Nature Biotechnoloogy {small}`2020-02-01`. [Single-cell RNA-seq analysis software providers scramble to offer solutions](https://www.nature.com/articles/s41587-020-0449-8) mentions Scanpy along with Seurat as the two major open source software packages for single-cell analysis \[[pdf](https://rdcu.be/b2M5l)\]. ### Scanpy has been selected an ""Essential open source software for science"" by CZI {small}`2019-11-14`. Scanpy has been selected an [essential open source software for science] by; CZI among [32 projects], along with giants such as Scipy, Numpy, Pandas,; Matplotlib, scikit-learn, scikit-image/plotly, pip, jupyterhub/binder,; Bioconda, Seurat, Bioconductor, and others. ### Nature Biotechnology: A comparison of single-cell trajectory inference methods {small}`2019-04-01`. [Nature Biotechnology](https://www.nature.com/articles/s41587-019-0071-9) reviews more than 70 TI tools and ranks PAGA as the best graph-based trajectory inference method, and overall, among the top 3. ### Science “Breakthrough of the Year 2018” {small}`2018-12-01`. The Science “Breakthrough of the Year 2018”, [Development cell by cell](https://vis.sciencemag.org/breakthrough2018/finalists/#cell-development), mentions the first application of PAGA {cite:p}`Plass2018` among 5 papers. [32 projects]: https://chanzuckerberg.com/eoss/proposals/; [essential open source software for science]: https://chanzuckerberg.com/newsroom/chan-zuckerberg-initiative-awards-5-million-for-open-source-software-projects-essential-to-science/; 

Instructions: 
1. Analyze the content and the attribute description.
2. Determine if the content accurately reflects the intended quality attribute in this context.
3. If it does, label it as `true_positive: true`; if not, mark it as a `true_positive: false`.
4. If the content consists only of logs with no other text, mark it as a `true_positive: false`. 
4. If the content partially consists of logs, focus on analyzing remaining text. 
5. Add `reasoning` why the content is a true or false positive.
",True,"The content provided discusses the distribution of datasets related to COVID-19 via anndata's h5ad files and mentions the adoption of sharing an on-disk representation of AnnData, which was initially not anticipated. It also talks about Scanpy being featured in Nature Biotechnology and awarded by CZI as essential open-source software. These points focus on the impact and recognition of tools related to single-cell analysis, which ties into usability through ease of learning and efficient usage by users who might be non-experts or those new to the field. The content provides information about software distribution, usage trends, and tool evaluations, all of which contribute to the overall usability of these tools for their intended users."
Usability,", trajectory inference and differential; expression testing. The Python-based implementation efficiently deals with; datasets of more than one million cells. Discuss usage on the scverse [Discourse][]. Read the [documentation][].; If you'd like to contribute by opening an issue or creating a pull request, please take a look at our [contribution guide][]. [anndata]: https://anndata.readthedocs.io; [discourse]: https://discourse.scverse.org/; [documentation]: https://scanpy.readthedocs.io. [//]: # (numfocus-fiscal-sponsor-attribution). scanpy is part of the scverse project ([website](https://scverse.org), [governance](https://scverse.org/about/roles)) and is fiscally sponsored by [NumFOCUS](https://numfocus.org/).; If you like scverse and want to support our mission, please consider making a [donation](https://numfocus.org/donate-to-scverse) to support our efforts. <div align=""center"">; <a href=""https://numfocus.org/project/scverse"">; <img; src=""https://raw.githubusercontent.com/numfocus/templates/master/images/numfocus-logo.png""; width=""200""; >; </a>; </div>. ## Citation. If you use `scanpy` in your work, please cite the `scanpy` publication as follows:. > **SCANPY: large-scale single-cell gene expression data analysis**; >; > F. Alexander Wolf, Philipp Angerer, Fabian J. Theis; >; > _Genome Biology_ 2018 Feb 06. doi: [10.1186/s13059-017-1382-0](https://doi.org/10.1186/s13059-017-1382-0). You can cite the scverse publication as follows:. > **The scverse project provides a computational ecosystem for single-cell omics data analysis**; >; > Isaac Virshup, Danila Bredikhin, Lukas Heumos, Giovanni Palla, Gregor Sturm, Adam Gayoso, Ilia Kats, Mikaela Koutrouli, Scverse Community, Bonnie Berger, Dana Pe’er, Aviv Regev, Sarah A. Teichmann, Francesca Finotello, F. Alexander Wolf, Nir Yosef, Oliver Stegle & Fabian J. Theis; >; > _Nat Biotechnol._ 2023 Apr 10. doi: [10.1038/s41587-023-01733-8](https://doi.org/10.1038/s41587-023-01733-8). [contribution guide]: CONTRIBUTING.md; ",guid,MatchSource.DOCS,scverse,scanpy,1.10.2,https://github.com/scverse/scanpy/tree/1.10.2/README.md:3306,guide,3306,README.md,https://scanpy.readthedocs.io,https://github.com/scverse/scanpy/tree/1.10.2/README.md,1,['guid'],['guide'],"The degree to which users can effectively and efficiently accomplish tasks, including support for error recovery and user satisfaction. Usability covers ease of learning, efficient usage, and adaptability to user needs.","
You are an expert in evaluating and categorizing quality attributes in software engineering. You possess the necessary skills to distinguish sentences that clearly relate to a given quality attribute from those that do not. 

Evaluate whether the content accurately aligns with its associated quality attribute, given the context provided. Your goal is to determine if the content makes sense in relation to the quality attribute description or if it is a false positive.

Data:

Quality Attribute: Usability
Attribute Description: The degree to which users can effectively and efficiently accomplish tasks, including support for error recovery and user satisfaction. Usability covers ease of learning, efficient usage, and adaptability to user needs.
Content: , trajectory inference and differential; expression testing. The Python-based implementation efficiently deals with; datasets of more than one million cells. Discuss usage on the scverse [Discourse][]. Read the [documentation][].; If you'd like to contribute by opening an issue or creating a pull request, please take a look at our [contribution guide][]. [anndata]: https://anndata.readthedocs.io; [discourse]: https://discourse.scverse.org/; [documentation]: https://scanpy.readthedocs.io. [//]: # (numfocus-fiscal-sponsor-attribution). scanpy is part of the scverse project ([website](https://scverse.org), [governance](https://scverse.org/about/roles)) and is fiscally sponsored by [NumFOCUS](https://numfocus.org/).; If you like scverse and want to support our mission, please consider making a [donation](https://numfocus.org/donate-to-scverse) to support our efforts. <div align=""center"">; <a href=""https://numfocus.org/project/scverse"">; <img; src=""https://raw.githubusercontent.com/numfocus/templates/master/images/numfocus-logo.png""; width=""200""; >; </a>; </div>. ## Citation. If you use `scanpy` in your work, please cite the `scanpy` publication as follows:. > **SCANPY: large-scale single-cell gene expression data analysis**; >; > F. Alexander Wolf, Philipp Angerer, Fabian J. Theis; >; > _Genome Biology_ 2018 Feb 06. doi: [10.1186/s13059-017-1382-0](https://doi.org/10.1186/s13059-017-1382-0). You can cite the scverse publication as follows:. > **The scverse project provides a computational ecosystem for single-cell omics data analysis**; >; > Isaac Virshup, Danila Bredikhin, Lukas Heumos, Giovanni Palla, Gregor Sturm, Adam Gayoso, Ilia Kats, Mikaela Koutrouli, Scverse Community, Bonnie Berger, Dana Pe’er, Aviv Regev, Sarah A. Teichmann, Francesca Finotello, F. Alexander Wolf, Nir Yosef, Oliver Stegle & Fabian J. Theis; >; > _Nat Biotechnol._ 2023 Apr 10. doi: [10.1038/s41587-023-01733-8](https://doi.org/10.1038/s41587-023-01733-8). [contribution guide]: CONTRIBUTING.md; 

Instructions: 
1. Analyze the content and the attribute description.
2. Determine if the content accurately reflects the intended quality attribute in this context.
3. If it does, label it as `true_positive: true`; if not, mark it as a `true_positive: false`.
4. If the content consists only of logs with no other text, mark it as a `true_positive: false`. 
4. If the content partially consists of logs, focus on analyzing remaining text. 
5. Add `reasoning` why the content is a true or false positive.
",False,"The provided content includes mentions of Python-based implementation efficiency, dataset handling, and references to documentation and contribution guidelines. While these topics relate to software implementation details rather than directly discussing usability aspects such as task completion efficiency or user satisfaction. The content focuses more on technical implementation aspects rather than addressing how users interact with the system for ease of use or effectiveness in their tasks."
Usability,"/collections.abc.html) and [typing](https://docs.python.org/3/library/typing.html) modules) for containers, e.g. `Sequence`s (like `list`), `Iterable`s (like `set`), and `Mapping`s (like `dict`).; Always specify what these contain, e.g. `{'a': (1, 2)}` → `Mapping[str, Tuple[int, int]]`.; If you can’t use one of those, use a concrete class like `AnnData`.; If your parameter only accepts an enumeration of strings, specify them like so: `Literal['elem-1', 'elem-2']`. ### `Returns` section. There are three types of return sections – prose, tuple, and a mix of both. 1. Prose is for simple cases.; 2. Tuple return sections are formatted like parameters. Other than in numpydoc, each tuple is first characterized by the identifier and *not* by its type. Provide type annotation in the function header.; 3. Mix of prose and tuple is relevant in complicated cases, e.g. when you want to describe that you *added something as annotation to an \`AnnData\` object*. #### Examples. For simple cases, use prose as in; {func}`~scanpy.pp.normalize_total`. ```rst; Returns; -------; Returns dictionary with normalized copies of `adata.X` and `adata.layers`; or updates `adata` with normalized versions of the original; `adata.X` and `adata.layers`, depending on `inplace`.; ```. For tuple return values, you can use the standard numpydoc way of populating it,; e.g. as in {func}`~scanpy.pp.calculate_qc_metrics`.; Do not add types in the docstring, but specify them in the function signature:. ```python; def myfunc(...) -> tuple[int, str]:; """"""; ...; Returns; -------; one_identifier; Description.; second_identifier; Description 2.; """"""; ...; ```. Many functions also just modify parts of the passed AnnData object, like e.g. {func}`~scanpy.tl.dpt`.; You can then combine prose and lists to best describe what happens. ```rst; Returns; -------; Depending on `copy`, returns or updates `adata` with the following fields. If `n_branchings==0`, no field `dpt_groups` will be written. dpt_pseudotime : :class:`~pa",simpl,MatchSource.DOCS,scverse,scanpy,1.10.2,https://github.com/scverse/scanpy/tree/1.10.2/docs/dev/documentation.md:5346,simple,5346,docs/dev/documentation.md,https://scanpy.readthedocs.io,https://github.com/scverse/scanpy/tree/1.10.2/docs/dev/documentation.md,1,['simpl'],['simple'],"The degree to which users can effectively and efficiently accomplish tasks, including support for error recovery and user satisfaction. Usability covers ease of learning, efficient usage, and adaptability to user needs.","
You are an expert in evaluating and categorizing quality attributes in software engineering. You possess the necessary skills to distinguish sentences that clearly relate to a given quality attribute from those that do not. 

Evaluate whether the content accurately aligns with its associated quality attribute, given the context provided. Your goal is to determine if the content makes sense in relation to the quality attribute description or if it is a false positive.

Data:

Quality Attribute: Usability
Attribute Description: The degree to which users can effectively and efficiently accomplish tasks, including support for error recovery and user satisfaction. Usability covers ease of learning, efficient usage, and adaptability to user needs.
Content: /collections.abc.html) and [typing](https://docs.python.org/3/library/typing.html) modules) for containers, e.g. `Sequence`s (like `list`), `Iterable`s (like `set`), and `Mapping`s (like `dict`).; Always specify what these contain, e.g. `{'a': (1, 2)}` → `Mapping[str, Tuple[int, int]]`.; If you can’t use one of those, use a concrete class like `AnnData`.; If your parameter only accepts an enumeration of strings, specify them like so: `Literal['elem-1', 'elem-2']`. ### `Returns` section. There are three types of return sections – prose, tuple, and a mix of both. 1. Prose is for simple cases.; 2. Tuple return sections are formatted like parameters. Other than in numpydoc, each tuple is first characterized by the identifier and *not* by its type. Provide type annotation in the function header.; 3. Mix of prose and tuple is relevant in complicated cases, e.g. when you want to describe that you *added something as annotation to an \`AnnData\` object*. #### Examples. For simple cases, use prose as in; {func}`~scanpy.pp.normalize_total`. ```rst; Returns; -------; Returns dictionary with normalized copies of `adata.X` and `adata.layers`; or updates `adata` with normalized versions of the original; `adata.X` and `adata.layers`, depending on `inplace`.; ```. For tuple return values, you can use the standard numpydoc way of populating it,; e.g. as in {func}`~scanpy.pp.calculate_qc_metrics`.; Do not add types in the docstring, but specify them in the function signature:. ```python; def myfunc(...) -> tuple[int, str]:; """"""; ...; Returns; -------; one_identifier; Description.; second_identifier; Description 2.; """"""; ...; ```. Many functions also just modify parts of the passed AnnData object, like e.g. {func}`~scanpy.tl.dpt`.; You can then combine prose and lists to best describe what happens. ```rst; Returns; -------; Depending on `copy`, returns or updates `adata` with the following fields. If `n_branchings==0`, no field `dpt_groups` will be written. dpt_pseudotime : :class:`~pa

Instructions: 
1. Analyze the content and the attribute description.
2. Determine if the content accurately reflects the intended quality attribute in this context.
3. If it does, label it as `true_positive: true`; if not, mark it as a `true_positive: false`.
4. If the content consists only of logs with no other text, mark it as a `true_positive: false`. 
4. If the content partially consists of logs, focus on analyzing remaining text. 
5. Add `reasoning` why the content is a true or false positive.
",True,"The content provided discusses return sections in function documentation, including how to format returns based on whether they're prose, tuples, or a mix. It mentions using specific classes and type annotations, which relates to the usability by ensuring that functions are easy to understand and use effectively, supporting user needs in code documentation."
Usability,<!--; Thanks for opening a PR to scanpy!; Please be sure to follow the guidelines in our contribution guide (https://scanpy.readthedocs.io/en/latest/dev/index.html) to familiarize yourself with our workflow and speed up review.; -->. <!-- Please check (“- [x]”) and fill in the following boxes -->; - [ ] Closes #; - [ ] Tests included or not required because:; <!-- Only check the following box if you did not include release notes -->; - [ ] Release notes not necessary because:; ,guid,MatchSource.DOCS,scverse,scanpy,1.10.2,https://github.com/scverse/scanpy/tree/1.10.2/.github/pull_request_template.md:71,guidelines,71,.github/pull_request_template.md,https://scanpy.readthedocs.io,https://github.com/scverse/scanpy/tree/1.10.2/.github/pull_request_template.md,2,['guid'],"['guide', 'guidelines']","The degree to which users can effectively and efficiently accomplish tasks, including support for error recovery and user satisfaction. Usability covers ease of learning, efficient usage, and adaptability to user needs.","
You are an expert in evaluating and categorizing quality attributes in software engineering. You possess the necessary skills to distinguish sentences that clearly relate to a given quality attribute from those that do not. 

Evaluate whether the content accurately aligns with its associated quality attribute, given the context provided. Your goal is to determine if the content makes sense in relation to the quality attribute description or if it is a false positive.

Data:

Quality Attribute: Usability
Attribute Description: The degree to which users can effectively and efficiently accomplish tasks, including support for error recovery and user satisfaction. Usability covers ease of learning, efficient usage, and adaptability to user needs.
Content: <!--; Thanks for opening a PR to scanpy!; Please be sure to follow the guidelines in our contribution guide (https://scanpy.readthedocs.io/en/latest/dev/index.html) to familiarize yourself with our workflow and speed up review.; -->. <!-- Please check (“- [x]”) and fill in the following boxes -->; - [ ] Closes #; - [ ] Tests included or not required because:; <!-- Only check the following box if you did not include release notes -->; - [ ] Release notes not necessary because:; 

Instructions: 
1. Analyze the content and the attribute description.
2. Determine if the content accurately reflects the intended quality attribute in this context.
3. If it does, label it as `true_positive: true`; if not, mark it as a `true_positive: false`.
4. If the content consists only of logs with no other text, mark it as a `true_positive: false`. 
4. If the content partially consists of logs, focus on analyzing remaining text. 
5. Add `reasoning` why the content is a true or false positive.
",False,"The content provided does not relate to usability. It contains instructions for contributors about how to open pull requests and follow guidelines, which are related to code contribution processes rather than user interface aspects. Usability would typically involve things like user feedback, task efficiency, or user interface design considerations."
Usability,"Contributing; ============. Contributions to Scanpy are highly welcome!. Before filing an issue; ----------------------; * Search the repository (also google) to see if someone has already reported the same issue.; This allows contributors to spend less time responding to issues, and more time adding new features!; * Please provide a minimal complete verifiable example for any bug.; If you're not sure what this means, check out; [this blog post](https://matthewrocklin.com/minimal-bug-reports); by Matthew Rocklin or [this definition](https://stackoverflow.com/help/mcve) from StackOverflow.; * Let us know about your environment. Environment information is available via: `sc.logging.print_versions()`. Contributing code; -----------------. We love code contributions!; If you're interested in contributing code, please take a look over the [contribution guide](https://scanpy.readthedocs.io/en/latest/dev/index.html) in the main documentation.; ",guid,MatchSource.DOCS,scverse,scanpy,1.10.2,https://github.com/scverse/scanpy/tree/1.10.2/CONTRIBUTING.md:860,guide,860,CONTRIBUTING.md,https://scanpy.readthedocs.io,https://github.com/scverse/scanpy/tree/1.10.2/CONTRIBUTING.md,1,['guid'],['guide'],"The degree to which users can effectively and efficiently accomplish tasks, including support for error recovery and user satisfaction. Usability covers ease of learning, efficient usage, and adaptability to user needs.","
You are an expert in evaluating and categorizing quality attributes in software engineering. You possess the necessary skills to distinguish sentences that clearly relate to a given quality attribute from those that do not. 

Evaluate whether the content accurately aligns with its associated quality attribute, given the context provided. Your goal is to determine if the content makes sense in relation to the quality attribute description or if it is a false positive.

Data:

Quality Attribute: Usability
Attribute Description: The degree to which users can effectively and efficiently accomplish tasks, including support for error recovery and user satisfaction. Usability covers ease of learning, efficient usage, and adaptability to user needs.
Content: Contributing; ============. Contributions to Scanpy are highly welcome!. Before filing an issue; ----------------------; * Search the repository (also google) to see if someone has already reported the same issue.; This allows contributors to spend less time responding to issues, and more time adding new features!; * Please provide a minimal complete verifiable example for any bug.; If you're not sure what this means, check out; [this blog post](https://matthewrocklin.com/minimal-bug-reports); by Matthew Rocklin or [this definition](https://stackoverflow.com/help/mcve) from StackOverflow.; * Let us know about your environment. Environment information is available via: `sc.logging.print_versions()`. Contributing code; -----------------. We love code contributions!; If you're interested in contributing code, please take a look over the [contribution guide](https://scanpy.readthedocs.io/en/latest/dev/index.html) in the main documentation.; 

Instructions: 
1. Analyze the content and the attribute description.
2. Determine if the content accurately reflects the intended quality attribute in this context.
3. If it does, label it as `true_positive: true`; if not, mark it as a `true_positive: false`.
4. If the content consists only of logs with no other text, mark it as a `true_positive: false`. 
4. If the content partially consists of logs, focus on analyzing remaining text. 
5. Add `reasoning` why the content is a true or false positive.
",True,"The content discusses contributing to Scanpy by suggesting how users can efficiently report issues and share minimal examples, which supports usability by helping contributors save time and improve the issue reporting process."
Usability,```{include} ../README.md; :end-before: '## Citation'; ```. ```{eval-rst}; .. role:: small; ```. ```{eval-rst}; .. role:: smaller; ```. ::::{grid} 1 2 3 3; :gutter: 2. :::{grid-item-card} Installation {octicon}`plug;1em;`; :link: installation; :link-type: doc. New to *scanpy*? Check out the installation guide.; :::. :::{grid-item-card} Tutorials {octicon}`play;1em;`; :link: tutorials/index; :link-type: doc. The tutorials walk you through real-world applications of scanpy.; :::. :::{grid-item-card} API reference {octicon}`book;1em;`; :link: api/index; :link-type: doc. The API reference contains a detailed description of; the scanpy API.; :::. :::{grid-item-card} Discussion {octicon}`megaphone;1em;`; :link: https://discourse.scverse.org. Need help? Reach out on our forum to get your questions answered!; :::. :::{grid-item-card} GitHub {octicon}`mark-github;1em;`; :link: https://github.com/scverse/scanpy. Find a bug? Interested in improving scanpy? Checkout our GitHub for the latest developments.; :::; ::::. **Other resources**. * Follow changes in the {ref}`release notes <release-notes>`.; * Find tools that harmonize well with anndata & Scanpy at [scverse.org/packages/](https://scverse.org/packages/); * Check out our {ref}`contribution guide <contribution-guide>` for development practices.; * Consider citing [Genome Biology (2018)] along with original {doc}`references <references>`. ## News. ```{include} news.md; :start-after: '<!-- marker: after prelude -->'; :end-before: '<!-- marker: before old news -->'; ```. {ref}`(past news) <News>`. % put references first so all references are resolved. % NO! there is a particular meaning to this sequence. ```{toctree}; :hidden: true; :maxdepth: 1. installation; tutorials/index; usage-principles; how-to/index; api/index; external/index; ecosystem; release-notes/index; community; news; dev/index; contributors; references; ```. [contribution guide]: dev/index.md; [genome biology (2018)]: https://doi.org/10.1186/s13059-017-1382-0; ,guid,MatchSource.DOCS,scverse,scanpy,1.10.2,https://github.com/scverse/scanpy/tree/1.10.2/docs/index.md:305,guide,305,docs/index.md,https://scanpy.readthedocs.io,https://github.com/scverse/scanpy/tree/1.10.2/docs/index.md,1,['guid'],['guide'],"The degree to which users can effectively and efficiently accomplish tasks, including support for error recovery and user satisfaction. Usability covers ease of learning, efficient usage, and adaptability to user needs.","
You are an expert in evaluating and categorizing quality attributes in software engineering. You possess the necessary skills to distinguish sentences that clearly relate to a given quality attribute from those that do not. 

Evaluate whether the content accurately aligns with its associated quality attribute, given the context provided. Your goal is to determine if the content makes sense in relation to the quality attribute description or if it is a false positive.

Data:

Quality Attribute: Usability
Attribute Description: The degree to which users can effectively and efficiently accomplish tasks, including support for error recovery and user satisfaction. Usability covers ease of learning, efficient usage, and adaptability to user needs.
Content: ```{include} ../README.md; :end-before: '## Citation'; ```. ```{eval-rst}; .. role:: small; ```. ```{eval-rst}; .. role:: smaller; ```. ::::{grid} 1 2 3 3; :gutter: 2. :::{grid-item-card} Installation {octicon}`plug;1em;`; :link: installation; :link-type: doc. New to *scanpy*? Check out the installation guide.; :::. :::{grid-item-card} Tutorials {octicon}`play;1em;`; :link: tutorials/index; :link-type: doc. The tutorials walk you through real-world applications of scanpy.; :::. :::{grid-item-card} API reference {octicon}`book;1em;`; :link: api/index; :link-type: doc. The API reference contains a detailed description of; the scanpy API.; :::. :::{grid-item-card} Discussion {octicon}`megaphone;1em;`; :link: https://discourse.scverse.org. Need help? Reach out on our forum to get your questions answered!; :::. :::{grid-item-card} GitHub {octicon}`mark-github;1em;`; :link: https://github.com/scverse/scanpy. Find a bug? Interested in improving scanpy? Checkout our GitHub for the latest developments.; :::; ::::. **Other resources**. * Follow changes in the {ref}`release notes <release-notes>`.; * Find tools that harmonize well with anndata & Scanpy at [scverse.org/packages/](https://scverse.org/packages/); * Check out our {ref}`contribution guide <contribution-guide>` for development practices.; * Consider citing [Genome Biology (2018)] along with original {doc}`references <references>`. ## News. ```{include} news.md; :start-after: '<!-- marker: after prelude -->'; :end-before: '<!-- marker: before old news -->'; ```. {ref}`(past news) <News>`. % put references first so all references are resolved. % NO! there is a particular meaning to this sequence. ```{toctree}; :hidden: true; :maxdepth: 1. installation; tutorials/index; usage-principles; how-to/index; api/index; external/index; ecosystem; release-notes/index; community; news; dev/index; contributors; references; ```. [contribution guide]: dev/index.md; [genome biology (2018)]: https://doi.org/10.1186/s13059-017-1382-0; 

Instructions: 
1. Analyze the content and the attribute description.
2. Determine if the content accurately reflects the intended quality attribute in this context.
3. If it does, label it as `true_positive: true`; if not, mark it as a `true_positive: false`.
4. If the content consists only of logs with no other text, mark it as a `true_positive: false`. 
4. If the content partially consists of logs, focus on analyzing remaining text. 
5. Add `reasoning` why the content is a true or false positive.
",False,"The content provided is part of a README.md file, which typically contains information about the project setup and navigation. The section includes links to installation, tutorials, API reference, discussion forum, and GitHub repository. While it does mention resources related to the project (like documentation and community support), it doesn't directly address user interface or user experience aspects that are central to usability. Usability concerns would include things like ease of use, learning curves, error handling, and user satisfaction, which aren't evident in this content."
Usability,"atus/scverse.scanpy?branchName=main)](https://dev.azure.com/scverse/scanpy/_build); [![Discourse topics](https://img.shields.io/discourse/posts?color=yellow&logo=discourse&server=https%3A%2F%2Fdiscourse.scverse.org)](https://discourse.scverse.org/); [![Chat](https://img.shields.io/badge/zulip-join_chat-%2367b08f.svg)](https://scverse.zulipchat.com); [![Powered by NumFOCUS](https://img.shields.io/badge/powered%20by-NumFOCUS-orange.svg?style=flat&colorA=E1523D&colorB=007D8A)](https://numfocus.org/). # Scanpy – Single-Cell Analysis in Python. Scanpy is a scalable toolkit for analyzing single-cell gene expression data; built jointly with [anndata][]. It includes; preprocessing, visualization, clustering, trajectory inference and differential; expression testing. The Python-based implementation efficiently deals with; datasets of more than one million cells. Discuss usage on the scverse [Discourse][]. Read the [documentation][].; If you'd like to contribute by opening an issue or creating a pull request, please take a look at our [contribution guide][]. [anndata]: https://anndata.readthedocs.io; [discourse]: https://discourse.scverse.org/; [documentation]: https://scanpy.readthedocs.io. [//]: # (numfocus-fiscal-sponsor-attribution). scanpy is part of the scverse project ([website](https://scverse.org), [governance](https://scverse.org/about/roles)) and is fiscally sponsored by [NumFOCUS](https://numfocus.org/).; If you like scverse and want to support our mission, please consider making a [donation](https://numfocus.org/donate-to-scverse) to support our efforts. <div align=""center"">; <a href=""https://numfocus.org/project/scverse"">; <img; src=""https://raw.githubusercontent.com/numfocus/templates/master/images/numfocus-logo.png""; width=""200""; >; </a>; </div>. ## Citation. If you use `scanpy` in your work, please cite the `scanpy` publication as follows:. > **SCANPY: large-scale single-cell gene expression data analysis**; >; > F. Alexander Wolf, Philipp Angerer, Fabian J. T",guid,MatchSource.DOCS,scverse,scanpy,1.10.2,https://github.com/scverse/scanpy/tree/1.10.2/README.md:1678,guide,1678,README.md,https://scanpy.readthedocs.io,https://github.com/scverse/scanpy/tree/1.10.2/README.md,1,['guid'],['guide'],"The degree to which users can effectively and efficiently accomplish tasks, including support for error recovery and user satisfaction. Usability covers ease of learning, efficient usage, and adaptability to user needs.","
You are an expert in evaluating and categorizing quality attributes in software engineering. You possess the necessary skills to distinguish sentences that clearly relate to a given quality attribute from those that do not. 

Evaluate whether the content accurately aligns with its associated quality attribute, given the context provided. Your goal is to determine if the content makes sense in relation to the quality attribute description or if it is a false positive.

Data:

Quality Attribute: Usability
Attribute Description: The degree to which users can effectively and efficiently accomplish tasks, including support for error recovery and user satisfaction. Usability covers ease of learning, efficient usage, and adaptability to user needs.
Content: atus/scverse.scanpy?branchName=main)](https://dev.azure.com/scverse/scanpy/_build); [![Discourse topics](https://img.shields.io/discourse/posts?color=yellow&logo=discourse&server=https%3A%2F%2Fdiscourse.scverse.org)](https://discourse.scverse.org/); [![Chat](https://img.shields.io/badge/zulip-join_chat-%2367b08f.svg)](https://scverse.zulipchat.com); [![Powered by NumFOCUS](https://img.shields.io/badge/powered%20by-NumFOCUS-orange.svg?style=flat&colorA=E1523D&colorB=007D8A)](https://numfocus.org/). # Scanpy – Single-Cell Analysis in Python. Scanpy is a scalable toolkit for analyzing single-cell gene expression data; built jointly with [anndata][]. It includes; preprocessing, visualization, clustering, trajectory inference and differential; expression testing. The Python-based implementation efficiently deals with; datasets of more than one million cells. Discuss usage on the scverse [Discourse][]. Read the [documentation][].; If you'd like to contribute by opening an issue or creating a pull request, please take a look at our [contribution guide][]. [anndata]: https://anndata.readthedocs.io; [discourse]: https://discourse.scverse.org/; [documentation]: https://scanpy.readthedocs.io. [//]: # (numfocus-fiscal-sponsor-attribution). scanpy is part of the scverse project ([website](https://scverse.org), [governance](https://scverse.org/about/roles)) and is fiscally sponsored by [NumFOCUS](https://numfocus.org/).; If you like scverse and want to support our mission, please consider making a [donation](https://numfocus.org/donate-to-scverse) to support our efforts. <div align=""center"">; <a href=""https://numfocus.org/project/scverse"">; <img; src=""https://raw.githubusercontent.com/numfocus/templates/master/images/numfocus-logo.png""; width=""200""; >; </a>; </div>. ## Citation. If you use `scanpy` in your work, please cite the `scanpy` publication as follows:. > **SCANPY: large-scale single-cell gene expression data analysis**; >; > F. Alexander Wolf, Philipp Angerer, Fabian J. T

Instructions: 
1. Analyze the content and the attribute description.
2. Determine if the content accurately reflects the intended quality attribute in this context.
3. If it does, label it as `true_positive: true`; if not, mark it as a `true_positive: false`.
4. If the content consists only of logs with no other text, mark it as a `true_positive: false`. 
4. If the content partially consists of logs, focus on analyzing remaining text. 
5. Add `reasoning` why the content is a true or false positive.
",False,"The content provided is a description of a software tool called 'scanpy', which is used for single-cell gene expression data analysis. The description includes features such as preprocessing, visualization, clustering, trajectory inference, and differential expression testing. It also mentions the Python-based implementation's efficiency in handling datasets with over one million cells. The context aligns with usability by focusing on the tool's functionality and efficiency, which are key aspects of user experience. However, the content is more about showcasing features rather than directly discussing user tasks, ease of learning, or adaptability to user needs. There's no direct mention of error recovery or user satisfaction. Thus, while it touches upon aspects related to usability, it doesn't comprehensively cover the full scope described in the attribute description. Therefore, it can be considered a false positive for the Usability quality attribute."
Usability,"er}`C Rands`; - Extended examples for differential expression plotting. {pr}`1529` {smaller}`F Ramirez`; \- See {func}`~scanpy.pl.rank_genes_groups_dotplot` or {func}`~scanpy.pl.rank_genes_groups_matrixplot` for examples. ```{rubric} Bug fixes; ```. - Fix {func}`scanpy.pl.paga_path` `TypeError` with recent versions of anndata {pr}`1047` {smaller}`P Angerer`; - Fix detection of whether IPython is running {pr}`1844` {smaller}`I Virshup`; - Fixed reproducibility of {func}`scanpy.tl.diffmap` (added random_state) {pr}`1858` {smaller}`I Kucinski`; - Fixed errors and warnings from embedding plots with small numbers of categories after `sns.set_palette` was called {pr}`1886` {smaller}`I Virshup`; - Fixed handling of `gene_symbols` argument in a number of `sc.pl.rank_genes_groups*` functions {pr}`1529` {smaller}`F Ramirez` {smaller}`I Virshup`; - Fixed handling of `use_raw` for `sc.tl.rank_genes_groups` when no `.raw` is present {pr}`1895` {smaller}`I Virshup`; - {func}`scanpy.pl.rank_genes_groups_violin` now works for `raw=False` {pr}`1669` {smaller}`M van den Beek`; - {func}`scanpy.pl.dotplot` now uses `smallest_dot` argument correctly {pr}`1771` {smaller}`S Flemming`. ```{rubric} Development processes; ```. - Switched to [flit] for building and deploying the package, a simple tool with an easy to understand command line interface and metadata {pr}`1527` {smaller}`P Angerer`; - Use [pre-commit](https://pre-commit.com) for style checks {pr}`1684` {pr}`1848` {smaller}`L Heumos` {smaller}`I Virshup`. ```{rubric} Deprecations; ```. - Dropped support for Python 3.6. [More details here](https://numpy.org/neps/nep-0029-deprecation_policy.html). {pr}`1897` {smaller}`I Virshup`; - Deprecated `layers` and `layers_norm` kwargs to {func}`~scanpy.pp.normalize_total` {pr}`1667` {smaller}`I Virshup`; - Deprecated `MulticoreTSNE` backend for {func}`scanpy.tl.tsne` {pr}`1854` {smaller}`I Virshup`. [docsearch]: https://docsearch.algolia.com/; [flit]: https://flit.readthedocs.io/en/latest/; ",simpl,MatchSource.DOCS,scverse,scanpy,1.10.2,https://github.com/scverse/scanpy/tree/1.10.2/docs/release-notes/1.8.0.md:3633,simple,3633,docs/release-notes/1.8.0.md,https://scanpy.readthedocs.io,https://github.com/scverse/scanpy/tree/1.10.2/docs/release-notes/1.8.0.md,1,['simpl'],['simple'],"The degree to which users can effectively and efficiently accomplish tasks, including support for error recovery and user satisfaction. Usability covers ease of learning, efficient usage, and adaptability to user needs.","
You are an expert in evaluating and categorizing quality attributes in software engineering. You possess the necessary skills to distinguish sentences that clearly relate to a given quality attribute from those that do not. 

Evaluate whether the content accurately aligns with its associated quality attribute, given the context provided. Your goal is to determine if the content makes sense in relation to the quality attribute description or if it is a false positive.

Data:

Quality Attribute: Usability
Attribute Description: The degree to which users can effectively and efficiently accomplish tasks, including support for error recovery and user satisfaction. Usability covers ease of learning, efficient usage, and adaptability to user needs.
Content: er}`C Rands`; - Extended examples for differential expression plotting. {pr}`1529` {smaller}`F Ramirez`; \- See {func}`~scanpy.pl.rank_genes_groups_dotplot` or {func}`~scanpy.pl.rank_genes_groups_matrixplot` for examples. ```{rubric} Bug fixes; ```. - Fix {func}`scanpy.pl.paga_path` `TypeError` with recent versions of anndata {pr}`1047` {smaller}`P Angerer`; - Fix detection of whether IPython is running {pr}`1844` {smaller}`I Virshup`; - Fixed reproducibility of {func}`scanpy.tl.diffmap` (added random_state) {pr}`1858` {smaller}`I Kucinski`; - Fixed errors and warnings from embedding plots with small numbers of categories after `sns.set_palette` was called {pr}`1886` {smaller}`I Virshup`; - Fixed handling of `gene_symbols` argument in a number of `sc.pl.rank_genes_groups*` functions {pr}`1529` {smaller}`F Ramirez` {smaller}`I Virshup`; - Fixed handling of `use_raw` for `sc.tl.rank_genes_groups` when no `.raw` is present {pr}`1895` {smaller}`I Virshup`; - {func}`scanpy.pl.rank_genes_groups_violin` now works for `raw=False` {pr}`1669` {smaller}`M van den Beek`; - {func}`scanpy.pl.dotplot` now uses `smallest_dot` argument correctly {pr}`1771` {smaller}`S Flemming`. ```{rubric} Development processes; ```. - Switched to [flit] for building and deploying the package, a simple tool with an easy to understand command line interface and metadata {pr}`1527` {smaller}`P Angerer`; - Use [pre-commit](https://pre-commit.com) for style checks {pr}`1684` {pr}`1848` {smaller}`L Heumos` {smaller}`I Virshup`. ```{rubric} Deprecations; ```. - Dropped support for Python 3.6. [More details here](https://numpy.org/neps/nep-0029-deprecation_policy.html). {pr}`1897` {smaller}`I Virshup`; - Deprecated `layers` and `layers_norm` kwargs to {func}`~scanpy.pp.normalize_total` {pr}`1667` {smaller}`I Virshup`; - Deprecated `MulticoreTSNE` backend for {func}`scanpy.tl.tsne` {pr}`1854` {smaller}`I Virshup`. [docsearch]: https://docsearch.algolia.com/; [flit]: https://flit.readthedocs.io/en/latest/; 

Instructions: 
1. Analyze the content and the attribute description.
2. Determine if the content accurately reflects the intended quality attribute in this context.
3. If it does, label it as `true_positive: true`; if not, mark it as a `true_positive: false`.
4. If the content consists only of logs with no other text, mark it as a `true_positive: false`. 
4. If the content partially consists of logs, focus on analyzing remaining text. 
5. Add `reasoning` why the content is a true or false positive.
",False,"The content provided lists various issues and bug fixes related to the functionality and usability of the software, such as fixing TypeErrors, improving reproducibility, handling gene symbols, and updating deprecated features. However, the description of 'usability' focuses on user-friendliness, task efficiency, and error recovery, which are more about user interaction aspects rather than technical bug fixes or feature updates. The content is primarily concerned with development processes like fixing bugs and improving deployment workflows, which does not directly relate to usability as defined. Therefore, the content does not accurately align with the 'usability' quality attribute and should be marked accordingly."
Usability,"old-change, fractions calculation for filter_rank_genes_groups {pr}`1391` {smaller}`S Rybakov`; - Fixed bug where `score_genes` would error if one gene was passed {pr}`1398` {smaller}`I Virshup`; - Fixed `log1p` inplace on integer dense arrays {pr}`1400` {smaller}`I Virshup`; - Fix docstring formatting for {func}`~scanpy.tl.rank_genes_groups` {pr}`1417` {smaller}`P Weiler`; - Removed `` PendingDeprecationWarning`s from use of `np.matrix `` {pr}`1424` {smaller}`P Weiler`; - Fixed indexing byg in `~scanpy.pp.highly_variable_genes` {pr}`1456` {smaller}`V Bergen`; - Fix default number of genes for marker_genes_overlap {pr}`1464` {smaller}`MD Luecken`; - Fixed passing `groupby` and `dendrogram_key` to {func}`~scanpy.tl.dendrogram` {pr}`1465` {smaller}`M Varma`; - Fixed download path of `pbmc3k_processed` {pr}`1472` {smaller}`D Strobl`; - Better error message when computing DE with a group of size 1 {pr}`1490` {smaller}`J Manning`; - Update cugraph API usage for v0.16 {pr}`1494` {smaller}`R Ilango`; - Fixed `marker_gene_overlap` default value for `top_n_markers` {pr}`1464` {smaller}`MD Luecken`; - Pass `random_state` to RAPIDs UMAP {pr}`1474` {smaller}`C Nolet`; - Fixed `anndata` version requirement for {func}`~anndata.concat` (re-exported from scanpy as `sc.concat`) {pr}`1491` {smaller}`I Virshup`; - Fixed the width of the progress bar when downloading data {pr}`1507` {smaller}`M Klein`; - Updated link for `moignard15` dataset {pr}`1542` {smaller}`I Virshup`; - Fixed bug where calling `set_figure_params` could block if IPython was installed, but not used. {pr}`1547` {smaller}`I Virshup`; - {func}`~scanpy.pl.violin` no longer fails if `.raw` not present {pr}`1548` {smaller}`I Virshup`; - {func}`~scanpy.pl.spatial` refactoring and better handling of spatial data {pr}`1512` {smaller}`G Palla`; - {func}`~scanpy.pp.pca` works with `chunked=True` again {pr}`1592` {smaller}`I Virshup`; - {func}`~scanpy.tl.ingest` now works with umap-learn 0.5.0 {pr}`1601` {smaller}`S Rybakov`; ",progress bar,MatchSource.DOCS,scverse,scanpy,1.10.2,https://github.com/scverse/scanpy/tree/1.10.2/docs/release-notes/1.7.0.md:4608,progress bar,4608,docs/release-notes/1.7.0.md,https://scanpy.readthedocs.io,https://github.com/scverse/scanpy/tree/1.10.2/docs/release-notes/1.7.0.md,2,"['learn', 'progress bar']","['learn', 'progress bar']","The degree to which users can effectively and efficiently accomplish tasks, including support for error recovery and user satisfaction. Usability covers ease of learning, efficient usage, and adaptability to user needs.","
You are an expert in evaluating and categorizing quality attributes in software engineering. You possess the necessary skills to distinguish sentences that clearly relate to a given quality attribute from those that do not. 

Evaluate whether the content accurately aligns with its associated quality attribute, given the context provided. Your goal is to determine if the content makes sense in relation to the quality attribute description or if it is a false positive.

Data:

Quality Attribute: Usability
Attribute Description: The degree to which users can effectively and efficiently accomplish tasks, including support for error recovery and user satisfaction. Usability covers ease of learning, efficient usage, and adaptability to user needs.
Content: old-change, fractions calculation for filter_rank_genes_groups {pr}`1391` {smaller}`S Rybakov`; - Fixed bug where `score_genes` would error if one gene was passed {pr}`1398` {smaller}`I Virshup`; - Fixed `log1p` inplace on integer dense arrays {pr}`1400` {smaller}`I Virshup`; - Fix docstring formatting for {func}`~scanpy.tl.rank_genes_groups` {pr}`1417` {smaller}`P Weiler`; - Removed `` PendingDeprecationWarning`s from use of `np.matrix `` {pr}`1424` {smaller}`P Weiler`; - Fixed indexing byg in `~scanpy.pp.highly_variable_genes` {pr}`1456` {smaller}`V Bergen`; - Fix default number of genes for marker_genes_overlap {pr}`1464` {smaller}`MD Luecken`; - Fixed passing `groupby` and `dendrogram_key` to {func}`~scanpy.tl.dendrogram` {pr}`1465` {smaller}`M Varma`; - Fixed download path of `pbmc3k_processed` {pr}`1472` {smaller}`D Strobl`; - Better error message when computing DE with a group of size 1 {pr}`1490` {smaller}`J Manning`; - Update cugraph API usage for v0.16 {pr}`1494` {smaller}`R Ilango`; - Fixed `marker_gene_overlap` default value for `top_n_markers` {pr}`1464` {smaller}`MD Luecken`; - Pass `random_state` to RAPIDs UMAP {pr}`1474` {smaller}`C Nolet`; - Fixed `anndata` version requirement for {func}`~anndata.concat` (re-exported from scanpy as `sc.concat`) {pr}`1491` {smaller}`I Virshup`; - Fixed the width of the progress bar when downloading data {pr}`1507` {smaller}`M Klein`; - Updated link for `moignard15` dataset {pr}`1542` {smaller}`I Virshup`; - Fixed bug where calling `set_figure_params` could block if IPython was installed, but not used. {pr}`1547` {smaller}`I Virshup`; - {func}`~scanpy.pl.violin` no longer fails if `.raw` not present {pr}`1548` {smaller}`I Virshup`; - {func}`~scanpy.pl.spatial` refactoring and better handling of spatial data {pr}`1512` {smaller}`G Palla`; - {func}`~scanpy.pp.pca` works with `chunked=True` again {pr}`1592` {smaller}`I Virshup`; - {func}`~scanpy.tl.ingest` now works with umap-learn 0.5.0 {pr}`1601` {smaller}`S Rybakov`; 

Instructions: 
1. Analyze the content and the attribute description.
2. Determine if the content accurately reflects the intended quality attribute in this context.
3. If it does, label it as `true_positive: true`; if not, mark it as a `true_positive: false`.
4. If the content consists only of logs with no other text, mark it as a `true_positive: false`. 
4. If the content partially consists of logs, focus on analyzing remaining text. 
5. Add `reasoning` why the content is a true or false positive.
",False,"The provided content lists several code fixes and updates, including bug fixes for specific functions and improvements to documentation and error handling. While these changes are technical in nature, they don't directly address aspects of usability such as ease of learning or user satisfaction. Instead, they focus on software maintainability and reliability, which are separate quality attributes. Therefore, this content does not align with the Usability quality attribute description provided."
Usability,"s first make sure you have the required dependencies (`pip install -e "".[test,dev]""`), then run `pytest` from the root of the repository. It can take a while to run the whole test suite. There are a few ways to cut down on this while working on a PR:. 1. Only run a subset of the tests. This can be done with the `-k` argument from pytest (e.g. `pytest -k test_plotting.py` or `pytest -k ""test_umap*""`; 2. Run the tests in parallel. If you install the pytest extension [pytest-xdist](https://github.com/pytest-dev/pytest-xdist) you can run tests in parallel with the `--numprocesses` argument to pytest (e.g. `pytest -n 8`). ### Miscellaneous tips. - A lot of warnings can be thrown while running the test suite. It's often easier to read the test results with them hidden via the `--disable-pytest-warnings` argument. ## Writing tests. You can refer to the [existing test suite](https://github.com/scverse/scanpy/tree/main/scanpy/tests) for examples.; If you haven't written tests before, Software Carpentry has an [in-depth guide](https://katyhuff.github.io/2016-07-11-scipy/testing/01-basics.html) on the topic. We highly recommend using [Test Driven Development](https://en.wikipedia.org/wiki/Test-driven_development) when contributing code.; This not only ensures you have tests written, it often makes implementation easier since you start out with a specification for your function. Consider parameterizing your tests using the `pytest.mark.parameterize` and `pytest.fixture` decorators.; Documentation on these can be found [here](https://docs.pytest.org/en/stable/fixture.html), but we'd also recommend searching our test suite for existing usage. ### What to test. If you're not sure what to tests about your function, some ideas include:. - Are there arguments which conflict with each other? Check that if they are both passed, the function throws an error (see `pytest.raises` [in the pytest docs](https://docs.pytest.org/en/stable/assert.html#assertions-about-expected-exceptions).; - Ar",guid,MatchSource.DOCS,scverse,scanpy,1.10.2,https://github.com/scverse/scanpy/tree/1.10.2/docs/dev/testing.md:1367,guide,1367,docs/dev/testing.md,https://scanpy.readthedocs.io,https://github.com/scverse/scanpy/tree/1.10.2/docs/dev/testing.md,1,['guid'],['guide'],"The degree to which users can effectively and efficiently accomplish tasks, including support for error recovery and user satisfaction. Usability covers ease of learning, efficient usage, and adaptability to user needs.","
You are an expert in evaluating and categorizing quality attributes in software engineering. You possess the necessary skills to distinguish sentences that clearly relate to a given quality attribute from those that do not. 

Evaluate whether the content accurately aligns with its associated quality attribute, given the context provided. Your goal is to determine if the content makes sense in relation to the quality attribute description or if it is a false positive.

Data:

Quality Attribute: Usability
Attribute Description: The degree to which users can effectively and efficiently accomplish tasks, including support for error recovery and user satisfaction. Usability covers ease of learning, efficient usage, and adaptability to user needs.
Content: s first make sure you have the required dependencies (`pip install -e "".[test,dev]""`), then run `pytest` from the root of the repository. It can take a while to run the whole test suite. There are a few ways to cut down on this while working on a PR:. 1. Only run a subset of the tests. This can be done with the `-k` argument from pytest (e.g. `pytest -k test_plotting.py` or `pytest -k ""test_umap*""`; 2. Run the tests in parallel. If you install the pytest extension [pytest-xdist](https://github.com/pytest-dev/pytest-xdist) you can run tests in parallel with the `--numprocesses` argument to pytest (e.g. `pytest -n 8`). ### Miscellaneous tips. - A lot of warnings can be thrown while running the test suite. It's often easier to read the test results with them hidden via the `--disable-pytest-warnings` argument. ## Writing tests. You can refer to the [existing test suite](https://github.com/scverse/scanpy/tree/main/scanpy/tests) for examples.; If you haven't written tests before, Software Carpentry has an [in-depth guide](https://katyhuff.github.io/2016-07-11-scipy/testing/01-basics.html) on the topic. We highly recommend using [Test Driven Development](https://en.wikipedia.org/wiki/Test-driven_development) when contributing code.; This not only ensures you have tests written, it often makes implementation easier since you start out with a specification for your function. Consider parameterizing your tests using the `pytest.mark.parameterize` and `pytest.fixture` decorators.; Documentation on these can be found [here](https://docs.pytest.org/en/stable/fixture.html), but we'd also recommend searching our test suite for existing usage. ### What to test. If you're not sure what to tests about your function, some ideas include:. - Are there arguments which conflict with each other? Check that if they are both passed, the function throws an error (see `pytest.raises` [in the pytest docs](https://docs.pytest.org/en/stable/assert.html#assertions-about-expected-exceptions).; - Ar

Instructions: 
1. Analyze the content and the attribute description.
2. Determine if the content accurately reflects the intended quality attribute in this context.
3. If it does, label it as `true_positive: true`; if not, mark it as a `true_positive: false`.
4. If the content consists only of logs with no other text, mark it as a `true_positive: false`. 
4. If the content partially consists of logs, focus on analyzing remaining text. 
5. Add `reasoning` why the content is a true or false positive.
",False,"The content discusses optimizing test runs using pytest features like subsets and parallel execution, which is more about efficiency in testing rather than user satisfaction or functionality. This does not directly relate to usability as defined."
Usability,"s for the relevant version so we can credit you!; These files are found in the `docs/release-notes/` directory.; We recommend waiting on this until your PR is close to done since this can often causes merge conflicts. Once you've added a new function to the documentation, you'll need to make sure there is a link somewhere in the documentation site pointing to it.; This should be added to `docs/api.md` under a relevant heading. For tutorials and more in depth examples, consider adding a notebook to [scanpy-tutorials](https://github.com/scverse/scanpy-tutorials/). The tutorials are tied to this repository via a submodule. To update the submodule, run `git submodule update --remote` from the root of the repository. Subsequently, commit and push the changes in a PR. This should be done before each release to ensure the tutorials are up to date. ## docstrings format. We use the numpydoc style for writing docstrings.; We'd primarily suggest looking at existing docstrings for examples, but the [napolean guide to numpy style docstrings](https://sphinxcontrib-napoleon.readthedocs.io/en/latest/example_numpy.html#example-numpy) is also a great source.; If you're unfamiliar with the reStructuredText (`rst`) markup format, [Sphinx has a useful primer](https://www.sphinx-doc.org/en/master/usage/restructuredtext/basics.html). Some key points:. - We have some custom sphinx extensions activated. When in doubt, try to copy the style of existing docstrings.; - We autopopulate type information in docstrings when possible, so just add the type information to signatures.; - When docs exist in the same file as code, line length restrictions still apply. In files which are just docs, go with a sentence per line (for easier `git diff`s).; - Check that the docs look like what you expect them too! It's easy to forget to add a reference to function, be sure it got added and looks right. Look at [sc.tl.louvain](https://github.com/scverse/scanpy/blob/a811fee0ef44fcaecbde0cad6336336bce649484/scan",guid,MatchSource.DOCS,scverse,scanpy,1.10.2,https://github.com/scverse/scanpy/tree/1.10.2/docs/dev/documentation.md:2058,guide,2058,docs/dev/documentation.md,https://scanpy.readthedocs.io,https://github.com/scverse/scanpy/tree/1.10.2/docs/dev/documentation.md,1,['guid'],['guide'],"The degree to which users can effectively and efficiently accomplish tasks, including support for error recovery and user satisfaction. Usability covers ease of learning, efficient usage, and adaptability to user needs.","
You are an expert in evaluating and categorizing quality attributes in software engineering. You possess the necessary skills to distinguish sentences that clearly relate to a given quality attribute from those that do not. 

Evaluate whether the content accurately aligns with its associated quality attribute, given the context provided. Your goal is to determine if the content makes sense in relation to the quality attribute description or if it is a false positive.

Data:

Quality Attribute: Usability
Attribute Description: The degree to which users can effectively and efficiently accomplish tasks, including support for error recovery and user satisfaction. Usability covers ease of learning, efficient usage, and adaptability to user needs.
Content: s for the relevant version so we can credit you!; These files are found in the `docs/release-notes/` directory.; We recommend waiting on this until your PR is close to done since this can often causes merge conflicts. Once you've added a new function to the documentation, you'll need to make sure there is a link somewhere in the documentation site pointing to it.; This should be added to `docs/api.md` under a relevant heading. For tutorials and more in depth examples, consider adding a notebook to [scanpy-tutorials](https://github.com/scverse/scanpy-tutorials/). The tutorials are tied to this repository via a submodule. To update the submodule, run `git submodule update --remote` from the root of the repository. Subsequently, commit and push the changes in a PR. This should be done before each release to ensure the tutorials are up to date. ## docstrings format. We use the numpydoc style for writing docstrings.; We'd primarily suggest looking at existing docstrings for examples, but the [napolean guide to numpy style docstrings](https://sphinxcontrib-napoleon.readthedocs.io/en/latest/example_numpy.html#example-numpy) is also a great source.; If you're unfamiliar with the reStructuredText (`rst`) markup format, [Sphinx has a useful primer](https://www.sphinx-doc.org/en/master/usage/restructuredtext/basics.html). Some key points:. - We have some custom sphinx extensions activated. When in doubt, try to copy the style of existing docstrings.; - We autopopulate type information in docstrings when possible, so just add the type information to signatures.; - When docs exist in the same file as code, line length restrictions still apply. In files which are just docs, go with a sentence per line (for easier `git diff`s).; - Check that the docs look like what you expect them too! It's easy to forget to add a reference to function, be sure it got added and looks right. Look at [sc.tl.louvain](https://github.com/scverse/scanpy/blob/a811fee0ef44fcaecbde0cad6336336bce649484/scan

Instructions: 
1. Analyze the content and the attribute description.
2. Determine if the content accurately reflects the intended quality attribute in this context.
3. If it does, label it as `true_positive: true`; if not, mark it as a `true_positive: false`.
4. If the content consists only of logs with no other text, mark it as a `true_positive: false`. 
4. If the content partially consists of logs, focus on analyzing remaining text. 
5. Add `reasoning` why the content is a true or false positive.
",True,"The content provided discusses documentation practices such as updating release notes and adding new functions to the documentation site, which relates to usability by ensuring that users can effectively use the software through proper documentation."
Usability,"t of data that needs to be downloaded to the CI server. ### `Params` section. The `Params` abbreviation is a legit replacement for `Parameters`. To document parameter types use type annotations on function parameters.; These will automatically populate the docstrings on import, and when the documentation is built. Use the python standard library types (defined in [collections.abc](https://docs.python.org/3/library/collections.abc.html) and [typing](https://docs.python.org/3/library/typing.html) modules) for containers, e.g. `Sequence`s (like `list`), `Iterable`s (like `set`), and `Mapping`s (like `dict`).; Always specify what these contain, e.g. `{'a': (1, 2)}` → `Mapping[str, Tuple[int, int]]`.; If you can’t use one of those, use a concrete class like `AnnData`.; If your parameter only accepts an enumeration of strings, specify them like so: `Literal['elem-1', 'elem-2']`. ### `Returns` section. There are three types of return sections – prose, tuple, and a mix of both. 1. Prose is for simple cases.; 2. Tuple return sections are formatted like parameters. Other than in numpydoc, each tuple is first characterized by the identifier and *not* by its type. Provide type annotation in the function header.; 3. Mix of prose and tuple is relevant in complicated cases, e.g. when you want to describe that you *added something as annotation to an \`AnnData\` object*. #### Examples. For simple cases, use prose as in; {func}`~scanpy.pp.normalize_total`. ```rst; Returns; -------; Returns dictionary with normalized copies of `adata.X` and `adata.layers`; or updates `adata` with normalized versions of the original; `adata.X` and `adata.layers`, depending on `inplace`.; ```. For tuple return values, you can use the standard numpydoc way of populating it,; e.g. as in {func}`~scanpy.pp.calculate_qc_metrics`.; Do not add types in the docstring, but specify them in the function signature:. ```python; def myfunc(...) -> tuple[int, str]:; """"""; ...; Returns; -------; one_identifier; Descript",simpl,MatchSource.DOCS,scverse,scanpy,1.10.2,https://github.com/scverse/scanpy/tree/1.10.2/docs/dev/documentation.md:4950,simple,4950,docs/dev/documentation.md,https://scanpy.readthedocs.io,https://github.com/scverse/scanpy/tree/1.10.2/docs/dev/documentation.md,1,['simpl'],['simple'],"The degree to which users can effectively and efficiently accomplish tasks, including support for error recovery and user satisfaction. Usability covers ease of learning, efficient usage, and adaptability to user needs.","
You are an expert in evaluating and categorizing quality attributes in software engineering. You possess the necessary skills to distinguish sentences that clearly relate to a given quality attribute from those that do not. 

Evaluate whether the content accurately aligns with its associated quality attribute, given the context provided. Your goal is to determine if the content makes sense in relation to the quality attribute description or if it is a false positive.

Data:

Quality Attribute: Usability
Attribute Description: The degree to which users can effectively and efficiently accomplish tasks, including support for error recovery and user satisfaction. Usability covers ease of learning, efficient usage, and adaptability to user needs.
Content: t of data that needs to be downloaded to the CI server. ### `Params` section. The `Params` abbreviation is a legit replacement for `Parameters`. To document parameter types use type annotations on function parameters.; These will automatically populate the docstrings on import, and when the documentation is built. Use the python standard library types (defined in [collections.abc](https://docs.python.org/3/library/collections.abc.html) and [typing](https://docs.python.org/3/library/typing.html) modules) for containers, e.g. `Sequence`s (like `list`), `Iterable`s (like `set`), and `Mapping`s (like `dict`).; Always specify what these contain, e.g. `{'a': (1, 2)}` → `Mapping[str, Tuple[int, int]]`.; If you can’t use one of those, use a concrete class like `AnnData`.; If your parameter only accepts an enumeration of strings, specify them like so: `Literal['elem-1', 'elem-2']`. ### `Returns` section. There are three types of return sections – prose, tuple, and a mix of both. 1. Prose is for simple cases.; 2. Tuple return sections are formatted like parameters. Other than in numpydoc, each tuple is first characterized by the identifier and *not* by its type. Provide type annotation in the function header.; 3. Mix of prose and tuple is relevant in complicated cases, e.g. when you want to describe that you *added something as annotation to an \`AnnData\` object*. #### Examples. For simple cases, use prose as in; {func}`~scanpy.pp.normalize_total`. ```rst; Returns; -------; Returns dictionary with normalized copies of `adata.X` and `adata.layers`; or updates `adata` with normalized versions of the original; `adata.X` and `adata.layers`, depending on `inplace`.; ```. For tuple return values, you can use the standard numpydoc way of populating it,; e.g. as in {func}`~scanpy.pp.calculate_qc_metrics`.; Do not add types in the docstring, but specify them in the function signature:. ```python; def myfunc(...) -> tuple[int, str]:; """"""; ...; Returns; -------; one_identifier; Descript

Instructions: 
1. Analyze the content and the attribute description.
2. Determine if the content accurately reflects the intended quality attribute in this context.
3. If it does, label it as `true_positive: true`; if not, mark it as a `true_positive: false`.
4. If the content consists only of logs with no other text, mark it as a `true_positive: false`. 
4. If the content partially consists of logs, focus on analyzing remaining text. 
5. Add `reasoning` why the content is a true or false positive.
",True,"The content provided discusses how to document function parameters and returns in code documentation, specifically mentioning the use of type annotations for better usability. It guides users on how to structure their docstrings, which aids in making software more user-friendly by reducing confusion and improving efficiency. The content aligns with usability as it enhances user understanding and task efficiency through clear documentation."
Usability,tation'; ```. ```{eval-rst}; .. role:: small; ```. ```{eval-rst}; .. role:: smaller; ```. ::::{grid} 1 2 3 3; :gutter: 2. :::{grid-item-card} Installation {octicon}`plug;1em;`; :link: installation; :link-type: doc. New to *scanpy*? Check out the installation guide.; :::. :::{grid-item-card} Tutorials {octicon}`play;1em;`; :link: tutorials/index; :link-type: doc. The tutorials walk you through real-world applications of scanpy.; :::. :::{grid-item-card} API reference {octicon}`book;1em;`; :link: api/index; :link-type: doc. The API reference contains a detailed description of; the scanpy API.; :::. :::{grid-item-card} Discussion {octicon}`megaphone;1em;`; :link: https://discourse.scverse.org. Need help? Reach out on our forum to get your questions answered!; :::. :::{grid-item-card} GitHub {octicon}`mark-github;1em;`; :link: https://github.com/scverse/scanpy. Find a bug? Interested in improving scanpy? Checkout our GitHub for the latest developments.; :::; ::::. **Other resources**. * Follow changes in the {ref}`release notes <release-notes>`.; * Find tools that harmonize well with anndata & Scanpy at [scverse.org/packages/](https://scverse.org/packages/); * Check out our {ref}`contribution guide <contribution-guide>` for development practices.; * Consider citing [Genome Biology (2018)] along with original {doc}`references <references>`. ## News. ```{include} news.md; :start-after: '<!-- marker: after prelude -->'; :end-before: '<!-- marker: before old news -->'; ```. {ref}`(past news) <News>`. % put references first so all references are resolved. % NO! there is a particular meaning to this sequence. ```{toctree}; :hidden: true; :maxdepth: 1. installation; tutorials/index; usage-principles; how-to/index; api/index; external/index; ecosystem; release-notes/index; community; news; dev/index; contributors; references; ```. [contribution guide]: dev/index.md; [genome biology (2018)]: https://doi.org/10.1186/s13059-017-1382-0; [github]: https://github.com/scverse/scanpy; ,guid,MatchSource.DOCS,scverse,scanpy,1.10.2,https://github.com/scverse/scanpy/tree/1.10.2/docs/index.md:1254,guide,1254,docs/index.md,https://scanpy.readthedocs.io,https://github.com/scverse/scanpy/tree/1.10.2/docs/index.md,3,['guid'],['guide'],"The degree to which users can effectively and efficiently accomplish tasks, including support for error recovery and user satisfaction. Usability covers ease of learning, efficient usage, and adaptability to user needs.","
You are an expert in evaluating and categorizing quality attributes in software engineering. You possess the necessary skills to distinguish sentences that clearly relate to a given quality attribute from those that do not. 

Evaluate whether the content accurately aligns with its associated quality attribute, given the context provided. Your goal is to determine if the content makes sense in relation to the quality attribute description or if it is a false positive.

Data:

Quality Attribute: Usability
Attribute Description: The degree to which users can effectively and efficiently accomplish tasks, including support for error recovery and user satisfaction. Usability covers ease of learning, efficient usage, and adaptability to user needs.
Content: tation'; ```. ```{eval-rst}; .. role:: small; ```. ```{eval-rst}; .. role:: smaller; ```. ::::{grid} 1 2 3 3; :gutter: 2. :::{grid-item-card} Installation {octicon}`plug;1em;`; :link: installation; :link-type: doc. New to *scanpy*? Check out the installation guide.; :::. :::{grid-item-card} Tutorials {octicon}`play;1em;`; :link: tutorials/index; :link-type: doc. The tutorials walk you through real-world applications of scanpy.; :::. :::{grid-item-card} API reference {octicon}`book;1em;`; :link: api/index; :link-type: doc. The API reference contains a detailed description of; the scanpy API.; :::. :::{grid-item-card} Discussion {octicon}`megaphone;1em;`; :link: https://discourse.scverse.org. Need help? Reach out on our forum to get your questions answered!; :::. :::{grid-item-card} GitHub {octicon}`mark-github;1em;`; :link: https://github.com/scverse/scanpy. Find a bug? Interested in improving scanpy? Checkout our GitHub for the latest developments.; :::; ::::. **Other resources**. * Follow changes in the {ref}`release notes <release-notes>`.; * Find tools that harmonize well with anndata & Scanpy at [scverse.org/packages/](https://scverse.org/packages/); * Check out our {ref}`contribution guide <contribution-guide>` for development practices.; * Consider citing [Genome Biology (2018)] along with original {doc}`references <references>`. ## News. ```{include} news.md; :start-after: '<!-- marker: after prelude -->'; :end-before: '<!-- marker: before old news -->'; ```. {ref}`(past news) <News>`. % put references first so all references are resolved. % NO! there is a particular meaning to this sequence. ```{toctree}; :hidden: true; :maxdepth: 1. installation; tutorials/index; usage-principles; how-to/index; api/index; external/index; ecosystem; release-notes/index; community; news; dev/index; contributors; references; ```. [contribution guide]: dev/index.md; [genome biology (2018)]: https://doi.org/10.1186/s13059-017-1382-0; [github]: https://github.com/scverse/scanpy; 

Instructions: 
1. Analyze the content and the attribute description.
2. Determine if the content accurately reflects the intended quality attribute in this context.
3. If it does, label it as `true_positive: true`; if not, mark it as a `true_positive: false`.
4. If the content consists only of logs with no other text, mark it as a `true_positive: false`. 
4. If the content partially consists of logs, focus on analyzing remaining text. 
5. Add `reasoning` why the content is a true or false positive.
",True,"The content provided includes sections such as installation instructions, tutorials, API references, discussion forums, and GitHub information. These are all resources that help users to effectively utilize scanpy, enhancing usability by providing necessary support for learning and using the tool efficiently."
Usability,"tps://pypi.org/project/scanpy) (consider using `pip3` to access Python 3):. ```shell; pip install scanpy; ```. ## PyPI only. If you prefer to exclusively use PyPI run:. ```shell; pip install 'scanpy[leiden]'; ```. The extra `[leiden]` installs two packages that are needed for popular; parts of scanpy but aren't requirements: [igraph] {cite:p}`Csardi2006` and [leiden] {cite:p}`Traag2019`. (dev-install-instructions)=. ## Development Version. To work with the latest version [on GitHub]: clone the repository and `cd` into its root directory. ```shell; gh repo clone scverse/scanpy; cd scanpy; ```. If you are using `pip>=21.3`, an editable install can be made:. ```shell; pip install -e '.[dev,test]'; ```. If you want to let [conda] handle the installations of dependencies, do:. ```shell; pipx install beni; beni pyproject.toml > environment.yml; conda env create -f environment.yml; conda activate scanpy; pip install -e '.[dev,doc,test]'; ```. For instructions on how to work with the code, see the {ref}`contribution guide <contribution-guide>`. ## Docker. If you're using [Docker], you can use e.g. the image [gcfntnu/scanpy] from Docker Hub. ## Troubleshooting. If you get a `Permission denied` error, never use `sudo pip`. Instead, use virtual environments or:. ```shell; pip install --user scanpy; ```. **On MacOS**, if **not** using `conda`, you might need to install the C core of igraph via homebrew first. - `brew install igraph`. - If igraph still fails to install, see the question on [compiling igraph].; Alternatively consider installing gcc via `brew install gcc --without-multilib`; and exporting the required variables:. ```shell; export CC=""/usr/local/Cellar/gcc/X.x.x/bin/gcc-X""; export CXX=""/usr/local/Cellar/gcc/X.x.x/bin/gcc-X""; ```. where `X` and `x` refers to the version of `gcc`;; in my case, the path reads `/usr/local/Cellar/gcc/6.3.0_1/bin/gcc-6`. **On Windows**, there also often problems installing compiled packages such as `igraph`,; but you can find precompiled ",guid,MatchSource.DOCS,scverse,scanpy,1.10.2,https://github.com/scverse/scanpy/tree/1.10.2/docs/installation.md:1297,guide,1297,docs/installation.md,https://scanpy.readthedocs.io,https://github.com/scverse/scanpy/tree/1.10.2/docs/installation.md,2,['guid'],['guide'],"The degree to which users can effectively and efficiently accomplish tasks, including support for error recovery and user satisfaction. Usability covers ease of learning, efficient usage, and adaptability to user needs.","
You are an expert in evaluating and categorizing quality attributes in software engineering. You possess the necessary skills to distinguish sentences that clearly relate to a given quality attribute from those that do not. 

Evaluate whether the content accurately aligns with its associated quality attribute, given the context provided. Your goal is to determine if the content makes sense in relation to the quality attribute description or if it is a false positive.

Data:

Quality Attribute: Usability
Attribute Description: The degree to which users can effectively and efficiently accomplish tasks, including support for error recovery and user satisfaction. Usability covers ease of learning, efficient usage, and adaptability to user needs.
Content: tps://pypi.org/project/scanpy) (consider using `pip3` to access Python 3):. ```shell; pip install scanpy; ```. ## PyPI only. If you prefer to exclusively use PyPI run:. ```shell; pip install 'scanpy[leiden]'; ```. The extra `[leiden]` installs two packages that are needed for popular; parts of scanpy but aren't requirements: [igraph] {cite:p}`Csardi2006` and [leiden] {cite:p}`Traag2019`. (dev-install-instructions)=. ## Development Version. To work with the latest version [on GitHub]: clone the repository and `cd` into its root directory. ```shell; gh repo clone scverse/scanpy; cd scanpy; ```. If you are using `pip>=21.3`, an editable install can be made:. ```shell; pip install -e '.[dev,test]'; ```. If you want to let [conda] handle the installations of dependencies, do:. ```shell; pipx install beni; beni pyproject.toml > environment.yml; conda env create -f environment.yml; conda activate scanpy; pip install -e '.[dev,doc,test]'; ```. For instructions on how to work with the code, see the {ref}`contribution guide <contribution-guide>`. ## Docker. If you're using [Docker], you can use e.g. the image [gcfntnu/scanpy] from Docker Hub. ## Troubleshooting. If you get a `Permission denied` error, never use `sudo pip`. Instead, use virtual environments or:. ```shell; pip install --user scanpy; ```. **On MacOS**, if **not** using `conda`, you might need to install the C core of igraph via homebrew first. - `brew install igraph`. - If igraph still fails to install, see the question on [compiling igraph].; Alternatively consider installing gcc via `brew install gcc --without-multilib`; and exporting the required variables:. ```shell; export CC=""/usr/local/Cellar/gcc/X.x.x/bin/gcc-X""; export CXX=""/usr/local/Cellar/gcc/X.x.x/bin/gcc-X""; ```. where `X` and `x` refers to the version of `gcc`;; in my case, the path reads `/usr/local/Cellar/gcc/6.3.0_1/bin/gcc-6`. **On Windows**, there also often problems installing compiled packages such as `igraph`,; but you can find precompiled 

Instructions: 
1. Analyze the content and the attribute description.
2. Determine if the content accurately reflects the intended quality attribute in this context.
3. If it does, label it as `true_positive: true`; if not, mark it as a `true_positive: false`.
4. If the content consists only of logs with no other text, mark it as a `true_positive: false`. 
4. If the content partially consists of logs, focus on analyzing remaining text. 
5. Add `reasoning` why the content is a true or false positive.
",False,"The content provided contains installation instructions for a Python package called scanpy. While this might be relevant to functionality, it does not directly discuss aspects related to usability such as ease of learning, efficiency, or user satisfaction. Instead, it focuses on how to install the software, which is more about installation rather than user experience."
Usability,"uvain`; {func}`~scanpy.tl.dpt` {func}`~scanpy.tl.draw_graph`; {func}`~scanpy.tl.umap` {func}`~scanpy.tl.diffmap`; {func}`~scanpy.tl.paga` require prior computation of the graph:; `sc.pp.neighbors(adata, n_neighbors=5); sc.tl.louvain(adata)` instead of; previously `sc.tl.louvain(adata, n_neighbors=5)`; - install `numba` via `conda install numba`, which replaces cython; - the default connectivity measure (dpt will look different using default; settings) changed. setting `method='gauss'` in `sc.pp.neighbors` uses; gauss kernel connectivities and reproduces the previous behavior,; see, for instance in the example [paul15].; - namings of returned annotation have changed for less bloated AnnData; objects, which means that some of the unstructured annotation of old; AnnData files is not recognized anymore; - replace occurances of `group_by` with `groupby` (consistency with; `pandas`); - it is worth checking out the notebook examples to see changes, e.g.; the [seurat] example.; - upgrading scikit-learn from 0.18 to 0.19 changed the implementation of PCA,; some results might therefore look slightly different; ```. ```{rubric} Further updates; ```. - UMAP {cite:p}`McInnes2018` can serve as a first visualization of the data just as tSNE,; in contrast to tSNE, UMAP directly embeds the single-cell graph and is faster;; UMAP is also used for measuring connectivities and computing neighbors,; see {func}`~scanpy.pp.neighbors` {smaller}`A Wolf`; - graph abstraction: AGA is renamed to [PAGA](https://github.com/theislab/paga): {func}`~scanpy.tl.paga`; now,; it only measures connectivities between partitions of the single-cell graph,; pseudotime and clustering need to be computed separately via; {func}`~scanpy.tl.louvain` and {func}`~scanpy.tl.dpt`, the; connectivity measure has been improved {smaller}`A Wolf`; - logistic regression for finding marker genes; {func}`~scanpy.tl.rank_genes_groups` with parameter `method='logreg'` {smaller}`A Wolf`; - {func}`~scanpy.tl.louvain` provides a ",learn,MatchSource.DOCS,scverse,scanpy,1.10.2,https://github.com/scverse/scanpy/tree/1.10.2/docs/release-notes/1.0.0.md:1572,learn,1572,docs/release-notes/1.0.0.md,https://scanpy.readthedocs.io,https://github.com/scverse/scanpy/tree/1.10.2/docs/release-notes/1.0.0.md,1,['learn'],['learn'],"The degree to which users can effectively and efficiently accomplish tasks, including support for error recovery and user satisfaction. Usability covers ease of learning, efficient usage, and adaptability to user needs.","
You are an expert in evaluating and categorizing quality attributes in software engineering. You possess the necessary skills to distinguish sentences that clearly relate to a given quality attribute from those that do not. 

Evaluate whether the content accurately aligns with its associated quality attribute, given the context provided. Your goal is to determine if the content makes sense in relation to the quality attribute description or if it is a false positive.

Data:

Quality Attribute: Usability
Attribute Description: The degree to which users can effectively and efficiently accomplish tasks, including support for error recovery and user satisfaction. Usability covers ease of learning, efficient usage, and adaptability to user needs.
Content: uvain`; {func}`~scanpy.tl.dpt` {func}`~scanpy.tl.draw_graph`; {func}`~scanpy.tl.umap` {func}`~scanpy.tl.diffmap`; {func}`~scanpy.tl.paga` require prior computation of the graph:; `sc.pp.neighbors(adata, n_neighbors=5); sc.tl.louvain(adata)` instead of; previously `sc.tl.louvain(adata, n_neighbors=5)`; - install `numba` via `conda install numba`, which replaces cython; - the default connectivity measure (dpt will look different using default; settings) changed. setting `method='gauss'` in `sc.pp.neighbors` uses; gauss kernel connectivities and reproduces the previous behavior,; see, for instance in the example [paul15].; - namings of returned annotation have changed for less bloated AnnData; objects, which means that some of the unstructured annotation of old; AnnData files is not recognized anymore; - replace occurances of `group_by` with `groupby` (consistency with; `pandas`); - it is worth checking out the notebook examples to see changes, e.g.; the [seurat] example.; - upgrading scikit-learn from 0.18 to 0.19 changed the implementation of PCA,; some results might therefore look slightly different; ```. ```{rubric} Further updates; ```. - UMAP {cite:p}`McInnes2018` can serve as a first visualization of the data just as tSNE,; in contrast to tSNE, UMAP directly embeds the single-cell graph and is faster;; UMAP is also used for measuring connectivities and computing neighbors,; see {func}`~scanpy.pp.neighbors` {smaller}`A Wolf`; - graph abstraction: AGA is renamed to [PAGA](https://github.com/theislab/paga): {func}`~scanpy.tl.paga`; now,; it only measures connectivities between partitions of the single-cell graph,; pseudotime and clustering need to be computed separately via; {func}`~scanpy.tl.louvain` and {func}`~scanpy.tl.dpt`, the; connectivity measure has been improved {smaller}`A Wolf`; - logistic regression for finding marker genes; {func}`~scanpy.tl.rank_genes_groups` with parameter `method='logreg'` {smaller}`A Wolf`; - {func}`~scanpy.tl.louvain` provides a 

Instructions: 
1. Analyze the content and the attribute description.
2. Determine if the content accurately reflects the intended quality attribute in this context.
3. If it does, label it as `true_positive: true`; if not, mark it as a `true_positive: false`.
4. If the content consists only of logs with no other text, mark it as a `true_positive: false`. 
4. If the content partially consists of logs, focus on analyzing remaining text. 
5. Add `reasoning` why the content is a true or false positive.
",False,"The provided content is technical documentation detailing updates and changes in scikitom's implementation related to specific functions and tools like UMAP, PCA, PAGA, etc. While it mentions some functional aspects such as improved connectivity measures and updated visualization methods, the core focus remains on technical implementation details rather than directly discussing user interface or usability aspects of software. Therefore, this content does not accurately reflect the quality attribute of Usability as defined."
Usability,"zation of transcriptomes, especially with long-read transcriptomes in mind.; > Users can add transcriptomes from different datasets and explore distinct splicing and expression patterns across datasets. ## Analysis methods. ### scvi-tools. - [scvi-tools](https://github.com/YosefLab/scvi-tools) {small}`Berkeley`. > scvi-tools hosts deep generative models (DGM) for end-to-end analysis of single-cell; > omics data (e.g., scVI, scANVI, totalVI). It also contains several primitives to build novel DGMs. ### Fate mapping. - [CellRank](https://cellrank.org) {small}`Helmholtz Munich`. > CellRank is a framework to uncover cellular dynamics based on single-cell data.; > It incorporates modalities such as RNA velocity, pseudotime, developmental potential, real-time information, etc. ### Differential expression. - [diffxpy](https://github.com/theislab/diffxpy) {small}`Helmholtz Munich`. ### Data integration. - [scanaroma](https://github.com/brianhie/scanorama) {small}`MIT`. ### Modeling perturbations. - [scGen](https://github.com/theislab/scgen) / [trVAE](https://github.com/theislab/trvae) {small}`Helmholtz Munich`. ### Feature selection. - [triku 🦔](https://gitlab.com/alexmascension/triku) {small}`Biodonostia Health Research Institute`; - [CIARA](https://github.com/ScialdoneLab/CIARA_python) {small}`Helmholtz Munich`. > CIARA is an algorithm for feature selection, that aims for the identification of rare cell types via scRNA-Seq data in scanpy. ### Annotation/ Enrichment Analysis. Analyses using curated prior knowledge. - [decoupler](https://github.com/saezlab/decoupler-py) is a collection of footprint enrichment methods that allows to infer transcription factor or pathway activities. {small}`Institute for Computational Biomedicine, Heidelberg University`; - [Cubé](https://github.com/connerlambden/Cube) {small}`Harvard University`. > Intuitive Nonparametric Gene Network Search Algorithm that learns from existing biological pathways & multiplicative gene interference patterns.; ",learn,MatchSource.DOCS,scverse,scanpy,1.10.2,https://github.com/scverse/scanpy/tree/1.10.2/docs/ecosystem.md:5003,learns,5003,docs/ecosystem.md,https://scanpy.readthedocs.io,https://github.com/scverse/scanpy/tree/1.10.2/docs/ecosystem.md,1,['learn'],['learns'],"The degree to which users can effectively and efficiently accomplish tasks, including support for error recovery and user satisfaction. Usability covers ease of learning, efficient usage, and adaptability to user needs.","
You are an expert in evaluating and categorizing quality attributes in software engineering. You possess the necessary skills to distinguish sentences that clearly relate to a given quality attribute from those that do not. 

Evaluate whether the content accurately aligns with its associated quality attribute, given the context provided. Your goal is to determine if the content makes sense in relation to the quality attribute description or if it is a false positive.

Data:

Quality Attribute: Usability
Attribute Description: The degree to which users can effectively and efficiently accomplish tasks, including support for error recovery and user satisfaction. Usability covers ease of learning, efficient usage, and adaptability to user needs.
Content: zation of transcriptomes, especially with long-read transcriptomes in mind.; > Users can add transcriptomes from different datasets and explore distinct splicing and expression patterns across datasets. ## Analysis methods. ### scvi-tools. - [scvi-tools](https://github.com/YosefLab/scvi-tools) {small}`Berkeley`. > scvi-tools hosts deep generative models (DGM) for end-to-end analysis of single-cell; > omics data (e.g., scVI, scANVI, totalVI). It also contains several primitives to build novel DGMs. ### Fate mapping. - [CellRank](https://cellrank.org) {small}`Helmholtz Munich`. > CellRank is a framework to uncover cellular dynamics based on single-cell data.; > It incorporates modalities such as RNA velocity, pseudotime, developmental potential, real-time information, etc. ### Differential expression. - [diffxpy](https://github.com/theislab/diffxpy) {small}`Helmholtz Munich`. ### Data integration. - [scanaroma](https://github.com/brianhie/scanorama) {small}`MIT`. ### Modeling perturbations. - [scGen](https://github.com/theislab/scgen) / [trVAE](https://github.com/theislab/trvae) {small}`Helmholtz Munich`. ### Feature selection. - [triku 🦔](https://gitlab.com/alexmascension/triku) {small}`Biodonostia Health Research Institute`; - [CIARA](https://github.com/ScialdoneLab/CIARA_python) {small}`Helmholtz Munich`. > CIARA is an algorithm for feature selection, that aims for the identification of rare cell types via scRNA-Seq data in scanpy. ### Annotation/ Enrichment Analysis. Analyses using curated prior knowledge. - [decoupler](https://github.com/saezlab/decoupler-py) is a collection of footprint enrichment methods that allows to infer transcription factor or pathway activities. {small}`Institute for Computational Biomedicine, Heidelberg University`; - [Cubé](https://github.com/connerlambden/Cube) {small}`Harvard University`. > Intuitive Nonparametric Gene Network Search Algorithm that learns from existing biological pathways & multiplicative gene interference patterns.; 

Instructions: 
1. Analyze the content and the attribute description.
2. Determine if the content accurately reflects the intended quality attribute in this context.
3. If it does, label it as `true_positive: true`; if not, mark it as a `true_positive: false`.
4. If the content consists only of logs with no other text, mark it as a `true_positive: false`. 
4. If the content partially consists of logs, focus on analyzing remaining text. 
5. Add `reasoning` why the content is a true or false positive.
",True,"The content provided discusses various tools and methods related to transcriptomics analysis, including data integration, differential expression, feature selection, and annotation/enrichment analyses. These are all aspects that contribute to the effective use of data and help users (such as researchers) in their tasks. By providing these resources, it supports usability by enhancing efficiency and effectiveness in data analysis. Therefore, this content aligns with the usability quality attribute as it directly relates to user ability to complete their tasks effectively through better tools and methods."
Usability,"~scanpy.external.pp.hashsolo` for HTO demultiplexing {cite:p}`Bernstein2020` {pr}`1432` {smaller}`NJ Bernstein`; - Added [scirpy](https://github.com/icbi-lab/scirpy) (sc-AIRR analysis) to ecosystem page {pr}`1453` {smaller}`G Sturm`; - Added [scvi-tools](https://scvi-tools.org) to ecosystem page {pr}`1421` {smaller}`A Gayoso`. ```{rubric} External tools (changes); ```. - Updates for {func}`~scanpy.external.tl.palantir` and {func}`~scanpy.external.tl.palantir_results` {pr}`1245` {smaller}`A Mousa`; - Fixes to {func}`~scanpy.external.tl.harmony_timeseries` docs {pr}`1248` {smaller}`A Mousa`; - Support for `leiden` clustering by {func}`scanpy.external.tl.phenograph` {pr}`1080` {smaller}`A Mousa`; - Deprecate `scanpy.external.pp.scvi` {pr}`1554` {smaller}`G Xing`; - Updated default params of {func}`~scanpy.external.tl.sam` to work with larger data {pr}`1540` {smaller}`A Tarashansky`. ```{rubric} Documentation; ```. - {ref}`New contribution guide <contribution-guide>` {pr}`1544` {smaller}`I Virshup`; - `zsh` installation instructions {pr}`1444` {smaller}`P Angerer`. ```{rubric} Performance; ```. - Speed up {func}`~scanpy.read_10x_h5` {pr}`1402` {smaller}`P Weiler`; - Speed ups for {func}`~scanpy.get.obs_df` {pr}`1499` {smaller}`F Ramirez`. ```{rubric} Bugfixes; ```. - Consistent fold-change, fractions calculation for filter_rank_genes_groups {pr}`1391` {smaller}`S Rybakov`; - Fixed bug where `score_genes` would error if one gene was passed {pr}`1398` {smaller}`I Virshup`; - Fixed `log1p` inplace on integer dense arrays {pr}`1400` {smaller}`I Virshup`; - Fix docstring formatting for {func}`~scanpy.tl.rank_genes_groups` {pr}`1417` {smaller}`P Weiler`; - Removed `` PendingDeprecationWarning`s from use of `np.matrix `` {pr}`1424` {smaller}`P Weiler`; - Fixed indexing byg in `~scanpy.pp.highly_variable_genes` {pr}`1456` {smaller}`V Bergen`; - Fix default number of genes for marker_genes_overlap {pr}`1464` {smaller}`MD Luecken`; - Fixed passing `groupby` and `dendrogram_key` to",guid,MatchSource.DOCS,scverse,scanpy,1.10.2,https://github.com/scverse/scanpy/tree/1.10.2/docs/release-notes/1.7.0.md:2922,guide,2922,docs/release-notes/1.7.0.md,https://scanpy.readthedocs.io,https://github.com/scverse/scanpy/tree/1.10.2/docs/release-notes/1.7.0.md,2,['guid'],['guide'],"The degree to which users can effectively and efficiently accomplish tasks, including support for error recovery and user satisfaction. Usability covers ease of learning, efficient usage, and adaptability to user needs.","
You are an expert in evaluating and categorizing quality attributes in software engineering. You possess the necessary skills to distinguish sentences that clearly relate to a given quality attribute from those that do not. 

Evaluate whether the content accurately aligns with its associated quality attribute, given the context provided. Your goal is to determine if the content makes sense in relation to the quality attribute description or if it is a false positive.

Data:

Quality Attribute: Usability
Attribute Description: The degree to which users can effectively and efficiently accomplish tasks, including support for error recovery and user satisfaction. Usability covers ease of learning, efficient usage, and adaptability to user needs.
Content: ~scanpy.external.pp.hashsolo` for HTO demultiplexing {cite:p}`Bernstein2020` {pr}`1432` {smaller}`NJ Bernstein`; - Added [scirpy](https://github.com/icbi-lab/scirpy) (sc-AIRR analysis) to ecosystem page {pr}`1453` {smaller}`G Sturm`; - Added [scvi-tools](https://scvi-tools.org) to ecosystem page {pr}`1421` {smaller}`A Gayoso`. ```{rubric} External tools (changes); ```. - Updates for {func}`~scanpy.external.tl.palantir` and {func}`~scanpy.external.tl.palantir_results` {pr}`1245` {smaller}`A Mousa`; - Fixes to {func}`~scanpy.external.tl.harmony_timeseries` docs {pr}`1248` {smaller}`A Mousa`; - Support for `leiden` clustering by {func}`scanpy.external.tl.phenograph` {pr}`1080` {smaller}`A Mousa`; - Deprecate `scanpy.external.pp.scvi` {pr}`1554` {smaller}`G Xing`; - Updated default params of {func}`~scanpy.external.tl.sam` to work with larger data {pr}`1540` {smaller}`A Tarashansky`. ```{rubric} Documentation; ```. - {ref}`New contribution guide <contribution-guide>` {pr}`1544` {smaller}`I Virshup`; - `zsh` installation instructions {pr}`1444` {smaller}`P Angerer`. ```{rubric} Performance; ```. - Speed up {func}`~scanpy.read_10x_h5` {pr}`1402` {smaller}`P Weiler`; - Speed ups for {func}`~scanpy.get.obs_df` {pr}`1499` {smaller}`F Ramirez`. ```{rubric} Bugfixes; ```. - Consistent fold-change, fractions calculation for filter_rank_genes_groups {pr}`1391` {smaller}`S Rybakov`; - Fixed bug where `score_genes` would error if one gene was passed {pr}`1398` {smaller}`I Virshup`; - Fixed `log1p` inplace on integer dense arrays {pr}`1400` {smaller}`I Virshup`; - Fix docstring formatting for {func}`~scanpy.tl.rank_genes_groups` {pr}`1417` {smaller}`P Weiler`; - Removed `` PendingDeprecationWarning`s from use of `np.matrix `` {pr}`1424` {smaller}`P Weiler`; - Fixed indexing byg in `~scanpy.pp.highly_variable_genes` {pr}`1456` {smaller}`V Bergen`; - Fix default number of genes for marker_genes_overlap {pr}`1464` {smaller}`MD Luecken`; - Fixed passing `groupby` and `dendrogram_key` to

Instructions: 
1. Analyze the content and the attribute description.
2. Determine if the content accurately reflects the intended quality attribute in this context.
3. If it does, label it as `true_positive: true`; if not, mark it as a `true_positive: false`.
4. If the content consists only of logs with no other text, mark it as a `true_positive: false`. 
4. If the content partially consists of logs, focus on analyzing remaining text. 
5. Add `reasoning` why the content is a true or false positive.
",False,"The content appears to consist mainly of commit messages and issue references related to software development activities such as adding new tools, updating documentation, fixing bugs, and improving performance. These activities are more aligned with attributes like maintainability, reliability, functionality, and perhaps documentation quality rather than usability. Usability specifically refers to how user-friendly a system is, including task completion efficiency and error recovery. The provided content does not address any aspect related to user interface design, accessibility, or user satisfaction that would pertain to usability. Instead, it focuses on technical implementation details and bug fixes which are more indicative of maintainability and reliability rather than the overall user experience."
